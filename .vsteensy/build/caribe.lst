
.vsteensy/build/caribe.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004334 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15a8 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00002fb4 l     F .text	0000000c startup_default_early_hook
00002fc0 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15a8 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15ac l       .bss	00000000 object.8610
0000432c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000d70 l     F .text	000001cc _GLOBAL__sub_I_led1
00000000 l    df *ABS*	00000000 usb_serial.c
1fff17a9 l     O .bss	00000001 tx_noautoflush
1fff17ac l     O .bss	00000004 tx_packet
1fff17b0 l     O .bss	00000001 transmit_previous_timeout
1fff17b4 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001210 l     F .text	00000144 wait_for_cal
1fff17b9 l     O .bss	00000001 analog_right_shift
1fff17ba l     O .bss	00000001 calibrating
00004048 l     O .text	00000048 pin2sc1a
1fff0c54 l     O .data	00000001 analog_config_bits
1fff17bb l     O .bss	00000001 analogReadBusyADC1
1fff17bc l     O .bss	00000001 analogReadBusyADC0
1fff17bd l     O .bss	00000001 analog_reference_internal
1fff0c55 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001530 l     F .text	0000004c digitalWrite.part.1
0000157c l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
0000185c l     F .text	00000048 sysex_byte
1fff17d8 l     O .bss	00000001 tx_noautoflush
1fff1804 l     O .bss	00000004 tx_packet
1fff1808 l     O .bss	00000001 transmit_previous_timeout
1fff1810 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c58 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1824 l     O .bss	00000004 ep0_tx_ptr
1fff1828 l     O .bss	00000014 rx_last
1fff183c l     O .bss	00000002 ep0_tx_len
1fff1840 l     O .bss	00000040 ep0_rx0_buf
1fff1880 l     O .bss	00000014 rx_first
1fff1894 l     O .bss	00000001 ep0_tx_data_toggle
1fff1898 l     O .bss	00000040 ep0_rx1_buf
1fff18d8 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff18ec l     O .bss	00000014 tx_last
1fff1900 l     O .bss	00000008 setup
1fff1908 l     O .bss	00000001 ep0_tx_bdt_bank
1fff190c l     O .bss	00000008 reply_buffer
1fff1918 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff191d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1920 l     O .bss	00000004 rts_pin
1fff1924 l     O .bss	00000001 rx_buffer_head
1fff1925 l     O .bss	00000001 rx_buffer_tail
1fff1928 l     O .bss	00000028 tx_buffer
1fff1950 l     O .bss	00000040 rx_buffer
1fff1990 l     O .bss	00000001 transmitting
1fff1991 l     O .bss	00000001 tx_buffer_tail
1fff1994 l     O .bss	00000004 transmit_pin
1fff1998 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff199c l     O .bss	00000004 rts_pin
1fff19a0 l     O .bss	00000001 transmitting
1fff19a1 l     O .bss	00000001 rx_buffer_tail
1fff19a4 l     O .bss	00000028 tx_buffer
1fff19cc l     O .bss	00000040 rx_buffer
1fff1a0c l     O .bss	00000001 rx_buffer_head
1fff1a0d l     O .bss	00000001 tx_buffer_tail
1fff1a10 l     O .bss	00000004 transmit_pin
1fff1a14 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a18 l     O .bss	00000004 rts_pin
1fff1a1c l     O .bss	00000001 rx_buffer_head
1fff1a1d l     O .bss	00000001 rx_buffer_tail
1fff1a20 l     O .bss	00000028 tx_buffer
1fff1a48 l     O .bss	00000040 rx_buffer
1fff1a88 l     O .bss	00000001 transmitting
1fff1a89 l     O .bss	00000001 tx_buffer_tail
1fff1a8c l     O .bss	00000004 transmit_pin
1fff1a90 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1a94 l     O .bss	00000004 rts_pin
1fff1a98 l     O .bss	00000001 rx_buffer_head
1fff1a99 l     O .bss	00000001 rx_buffer_tail
1fff1a9c l     O .bss	00000040 tx_buffer
1fff1adc l     O .bss	00000040 rx_buffer
1fff1b1c l     O .bss	00000001 transmitting
1fff1b1d l     O .bss	00000001 tx_buffer_tail
1fff1b20 l     O .bss	00000004 transmit_pin
1fff1b24 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1b28 l     O .bss	00000004 rts_pin
1fff1b2c l     O .bss	00000001 rx_buffer_head
1fff1b2d l     O .bss	00000001 rx_buffer_tail
1fff1b30 l     O .bss	00000028 tx_buffer
1fff1b58 l     O .bss	00000040 rx_buffer
1fff1b98 l     O .bss	00000001 transmitting
1fff1b99 l     O .bss	00000001 tx_buffer_tail
1fff1b9c l     O .bss	00000004 transmit_pin
1fff1ba0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c70 l     O .data	00000012 device_descriptor
1fff0c9c l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1ba4 l     O .bss	00000004 rts_pin
1fff1ba8 l     O .bss	00000001 rx_buffer_head
1fff1ba9 l     O .bss	00000001 rx_buffer_tail
1fff1bac l     O .bss	00000028 tx_buffer
1fff1bd4 l     O .bss	00000040 rx_buffer
1fff1c14 l     O .bss	00000001 transmitting
1fff1c15 l     O .bss	00000001 tx_buffer_tail
1fff1c18 l     O .bss	00000004 transmit_pin
1fff1c1c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003c54 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d68 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15a8 l       .bss	00000000 __bss_start__
1fff1db8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00002fac  w    F .text	00000006 adc0_isr
00000fb4 g     F .text	0000001c usb_serial_available
00002e6c g     F .text	00000020 serial4_available
00002a88  w    F .text	000000c4 yield
1fff0c84 g     O .data	00000018 usb_string_manufacturer_name_default
00003058 g     F .text	00000020 serial_available
1fff17dc g     O .bss	00000004 usb_midi_handleProgramChange
00002f64  w    F .text	00000048 hard_fault_isr
00002fac  w    F .text	00000006 dma_ch6_isr
00002b7c g     F .text	00000020 Print::println()
00002d40 g     F .text	00000020 serial2_available
00002fac  w    F .text	00000006 uart0_lon_isr
00001e9c g     F .text	000000e8 usb_rx_memory
00002b4c  w    F .text	00000002 serialEvent5()
00002fac  w    F .text	00000006 dma_ch8_isr
00003184 g     F .text	00000020 serial6_available
00003c2c g     F .text	00000002 __malloc_unlock
1fff17f0 g     O .bss	00000004 usb_midi_handleAfterTouch
00001354 g     F .text	000000e0 analog_init
00001f84 g     F .text	00000084 usb_tx
00002fac  w    F .text	00000006 portcd_isr
1fff1800 g     O .bss	00000004 usb_midi_handleSysExComplete
000035a4 g     F .text	00000098 MillisTimer::runFromTimer()
00002fac  w    F .text	00000006 can1_rx_warn_isr
00004338 g       .fini	00000000 __exidx_end
00002fac  w    F .text	00000006 dma_error_isr
1fff1c7c g     O .bss	00000001 usb_midi_msg_type
1fff1c34 g     O .bss	00000001 EventResponder::runningFromYield
00002fac  w    F .text	00000006 i2c0_isr
0000364c g     F .text	0000000c __errno
00002fac  w    F .text	00000006 portd_isr
00002fac  w    F .text	00000006 enet_error_isr
1fff1c20 g     O .bss	00000004 EventResponder::firstInterrupt
00002fac  w    F .text	00000006 tpm1_isr
00002b68  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004090 g     O .text	00000200 digital_pin_to_info_PGM
1fff1db4 g     O .bss	00000004 errno
00004338 g       .fini	00000000 _etext
1fff15a8 g       .bss	00000000 _sbss
00002c44  w    F .text	00000002 serialEvent6()
1fff17ec g     O .bss	00000004 usb_midi_handleVelocityChange
00001624 g     F .text	0000001c digitalRead
00002fac  w    F .text	00000006 porte_isr
00000494 g     F .text	000008dc loop
00002fac  w    F .text	00000006 portb_isr
00001940 g     F .text	0000002c usb_midi_flush_output
00002fac  w    F .text	00000006 spi1_isr
00002e8c g     F .text	000000d8 uart3_status_isr
00003450  w    F .text	00000002 serialEvent1()
1fff15ec g     O .bss	00000014 led4
00002fac  w    F .text	00000006 mcm_isr
0000353c g     F .text	00000068 MillisTimer::addToActiveList()
0000196c g     F .text	0000043c usb_midi_read
1fff17c8 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1c24 g     O .bss	00000004 EventResponder::lastInterrupt
00002d60 g     F .text	0000010c uart1_status_isr
1fff1c7e g     O .bss	00000002 usb_midi_msg_sysex_len
00002fac  w    F .text	00000006 randnum_isr
1fff17d0 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff17c0 g     O .bss	00000004 systick_millis_count
00002f64  w    F .text	00000048 bus_fault_isr
00002fac  w    F .text	00000006 watchdog_isr
00002fac  w    F .text	00000006 i2c1_isr
1fff1914 g     O .bss	00000001 usb_configuration
00002fac  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002c2c  w    F .text	00000002 serialEvent2()
00002fac  w    F .text	00000006 i2c2_isr
1fff0c84  w    O .data	00000018 usb_string_manufacturer_name
1fff1da8 g     O .bss	0000000a usb_rx_byte_count_data
00002fac  w    F .text	00000006 pit1_isr
000036a8 g     F .text	00000010 malloc
00002fac  w    F .text	00000006 dma_ch4_isr
00002fac  w    F .text	00000006 software_isr
00002fac  w    F .text	00000006 dma_ch7_isr
000034d8  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
000029b8 g     F .text	000000d0 usb_init
00002fac  w    F .text	00000006 lptmr_isr
1fff1c44 g     O .bss	00000004 __malloc_top_pad
000015f4 g     F .text	00000024 rtc_set
1fff1728 g     O .bss	00000024 button5
1fff1784 g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff1820 g     O .bss	00000004 usb_midi_handleNoteOn
00003024 g     F .text	00000034 kinetis_hsrun_enable
00003c30 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00000f3c g     F .text	00000048 usb_serial_getchar
00002fac  w    F .text	00000006 can1_bus_off_isr
00002fac  w    F .text	00000006 ftm2_isr
1fff1c70 g     O .bss	00000008 usb_cdc_line_coding
00001618 g     F .text	0000000a digitalWrite
00002fac  w    F .text	00000006 uart5_status_isr
000031a4 g     F .text	000000e4 lpuart0_status_isr
1fff1c2c g     O .bss	00000004 EventResponder::lastYield
000042bc g     O .text	00000005 usb_endpoint_config_table
00002fac  w    F .text	00000006 dma_ch9_isr
00002fac  w    F .text	00000006 pit2_isr
00003358 g     F .text	00000020 serial3_available
1fff1c40 g     O .bss	00000004 __malloc_max_sbrked_mem
00001640 g     F .text	0000000a pinMode
00001de8 g     F .text	0000004c usb_free
00002fac  w    F .text	00000006 i2c3_isr
1fff1614 g     O .bss	00000014 led1
1fff17e8 g     O .bss	00000004 usb_midi_handleSysExPartial
00004338 g       .fini	00000000 __exidx_start
00002fac  w    F .text	00000006 pit0_isr
1fff1c80 g     O .bss	00000001 usb_midi_msg_data1
1fff1c30 g     O .bss	00000004 EventResponder::firstYield
00004318 g     O .text	00000004 _global_impure_ptr
00002fac  w    F .text	00000006 can1_error_isr
00003658 g     F .text	00000050 __libc_init_array
1fff1db8 g       .bss	00000000 __bss_end
00002fac  w    F .text	00000006 can0_wakeup_isr
00002fac  w    F .text	00000006 flash_cmd_isr
00002b50  w    F .text	00000004 usb_serial_class::clear()
00003378 g     F .text	000000d8 uart2_status_isr
00002fc4 g     F .text	0000002c _sbrk
1fff1c38 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c6c g     O .data	00000004 __brkval
1fff17b8 g     O .bss	00000001 usb_cdc_line_rtsdtr
000011c8 g     F .text	00000048 usb_serial_flush_callback
0000431c g     F .text	00000000 _init
00002fac  w    F .text	00000006 svcall_isr
00002fac  w    F .text	00000006 dma_ch15_isr
00002fac  w    F .text	00000006 uart1_error_isr
00003c74 g     F .text	00000028 __libc_fini_array
00002fac  w    F .text	00000006 usbhs_phy_isr
1fff1db8 g       .bss	00000000 _ebss
00002fac g     F .text	00000006 unused_isr
00002fac  w    F .text	00000006 spi0_isr
00002fac  w    F .text	00000006 dma_ch3_isr
00002fac  w    F .text	00000006 flash_error_isr
1fff1628 g     O .bss	00000014 knob2
00002c48 g     F .text	00000020 serial5_available
00002fac  w    F .text	00000006 uart5_error_isr
00002fac  w    F .text	00000006 rtc_seconds_isr
00002fac  w    F .text	00000006 pdb_isr
00002f64  w    F .text	00000048 usage_fault_isr
00002fac  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00002fac  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1c78 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000014 leds
0000363c g     F .text	00000010 systick_isr
00002fac  w    F .text	00000006 rtc_alarm_isr
00002fac  w    F .text	00000006 dma_ch2_isr
1fff0c5c g     O .data	00000010 Serial
1fff1770 g     O .bss	00000014 piano
00002fac  w    F .text	00000006 ftm1_isr
00002b70  w    F .text	00000006 usb_serial_class::write(unsigned char)
00002fb4  w    F .text	0000000c startup_early_hook
00002fac  w    F .text	00000006 dma_ch13_isr
00002fac  w    F .text	00000006 uart2_error_isr
00000f84 g     F .text	00000030 usb_serial_peekchar
1fff0d50 g     O .data	00000016 usb_string_serial_number_default
00002f64 g     F .text	00000048 fault_isr
00003d38 g     F .text	000001d0 _free_r
1fff180c g     O .bss	00000004 usb_midi_handleStop
00002fac  w    F .text	00000006 usb_charge_isr
00002b60  w    F .text	00000004 usb_serial_class::flush()
00002fac  w    F .text	00000006 cmt_isr
00002fac  w    F .text	00000006 usbhs_isr
1fff181c g     O .bss	00000004 usb_midi_handleControlChange
1fff15a0 g     O .data	00000004 __malloc_sbrk_base
00002b58  w    F .text	00000004 usb_serial_class::read()
00002fac  w    F .text	00000006 ftm3_isr
00002fac  w    F .text	00000006 tsi0_isr
1fff1664 g     O .bss	00000014 knob1
00002fac  w    F .text	00000006 spi2_isr
00002c30  w    F .text	00000002 serialEvent4()
00002b78  w    F .text	00000002 serialEvent()
1fff1895 g     O .bss	00000001 usb_reboot_timer
00003f08 g     F .text	000000a4 __register_exitproc
00000fd0 g     F .text	00000038 usb_serial_flush_input
00001110 g     F .text	00000018 usb_serial_putchar
1fff1c48 g     O .bss	00000028 __malloc_current_mallinfo
00002fac  w    F .text	00000006 can0_bus_off_isr
1fff1600 g     O .bss	00000014 led5
1fff1909 g     O .bss	00000001 usb_rx_memory_needed
00002008 g     F .text	000009b0 usb_isr
1fff1818 g     O .bss	00000004 usb_midi_handleNoteOff
00004290  w    O .text	00000028 vtable for usb_serial_class
1fff163c g     O .bss	00000014 knob3
00002fac  w    F .text	00000006 uart3_error_isr
1fff1c28 g     O .bss	00000004 MillisTimer::listActive
00002fac  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00002fac  w    F .text	00000006 low_voltage_isr
1fff169c g     O .bss	00000024 button2
1fff1194 g     O .data	00000408 __malloc_av_
00002fac  w    F .text	00000006 can0_error_isr
000016f0 g     F .text	0000016c _init_Teensyduino_internal_
00001170 g     F .text	00000058 usb_serial_flush_output
00002fac  w    F .text	00000006 dma_ch12_isr
00003c28 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00002fac  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00002fac  w    F .text	00000006 pit3_isr
00002fac  w    F .text	00000006 enet_rx_isr
00002fac  w    F .text	00000006 portc_isr
00002c34 g     F .text	00000010 main
1fff1c3c g     O .bss	00000004 __malloc_max_total_mem
1fff15d8 g     O .bss	00000014 led3
00002f64  w    F .text	00000048 memmanage_fault_isr
00003288 g     F .text	00000084 usb_init_serialnumber
00004334 g       .text	00000000 __init_array_end
000036b8 g     F .text	00000570 _malloc_r
00002fac  w    F .text	00000006 debugmonitor_isr
1fff17e4 g     O .bss	00000004 usb_midi_handleSongPosition
00003458 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff17d4 g     O .bss	00000004 usb_midi_handleContinue
1fff1c81 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00002fac  w    F .text	00000006 cmp1_isr
1fff16c0 g     O .bss	00000024 button3
00002fac  w    F .text	00000006 ftm0_isr
00003c9c g     F .text	0000009c _malloc_trim_r
1fff0d4c g     O .data	00000004 string0
00001008 g     F .text	00000108 usb_serial_write
00002fc0  w    F .text	00000002 startup_late_hook
00002b5c  w    F .text	00000004 usb_serial_class::available()
1fff1c82 g     O .bss	00000001 usb_midi_msg_cable
1fff0d34  w    O .data	00000018 usb_string_product_name
0000164c g     F .text	000000a4 delay
00002fac  w    F .text	00000006 tpm0_isr
00004334 g     F .fini	00000000 _fini
00002fac  w    F .text	00000006 i2s0_rx_isr
00002fac  w    F .text	00000006 uart4_error_isr
00002c1c g     F .text	00000010 Print::print(long)
000018a4 g     F .text	0000009c usb_midi_write_packed
00003c68 g     F .text	0000000c atexit
00002fac  w    F .text	00000006 can0_message_isr
1fff1190 g     O .data	00000004 _impure_ptr
00002fac  w    F .text	00000006 can1_message_isr
00002fac  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff17fc g     O .bss	00000004 usb_midi_handleTuneRequest
00004328 g       .text	00000000 __preinit_array_end
00002fac  w    F .text	00000006 sdhc_isr
1fff1c83 g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
000042c4 g     O .text	00000054 usb_descriptor_list
00001e34 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1650 g     O .bss	00000014 knob4
00002fac  w    F .text	00000006 dma_ch10_isr
1fff16e8 g     O .bss	00000040 sequence1
1fff17f4 g     O .bss	00000004 usb_midi_handleStart
00002fac  w    F .text	00000006 uart0_error_isr
00001da8 g     F .text	00000040 usb_malloc
00002fac  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001128 g     F .text	00000048 usb_serial_write_buffer_free
00002fac  w    F .text	00000006 enet_timer_isr
1fff174c g     O .bss	00000024 button6
1fff1678 g     O .bss	00000024 button1
1fff15a4 g       .data	00000000 _edata
00002fac  w    F .text	00000006 i2s0_tx_isr
00002fac  w    F .text	00000006 adc1_isr
00002b64  w    F .text	00000004 usb_serial_class::availableForWrite()
00002fac  w    F .text	00000006 cmp0_isr
1fff17c4 g     O .bss	00000004 usb_midi_handleClock
0000330c g     F .text	0000004c ultoa
000034f4 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff159c g     O .data	00000004 __malloc_trim_threshold
00002b54  w    F .text	00000004 usb_serial_class::peek()
1fff17a8 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff17e0 g     O .bss	00000004 usb_midi_handlePitchChange
00002fac  w    F .text	00000006 pit_isr
1fff17f8 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00002fac  w    F .text	00000006 dac0_isr
00004328 g       .text	00000000 __init_array_start
00002fac  w    F .text	00000006 can1_tx_warn_isr
00001434 g     F .text	000000fc analogRead
1fff1c84 g     O .bss	00000122 usb_midi_msg_sysex
00003078 g     F .text	0000010c uart0_status_isr
00002fac  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d34 g     O .data	00000018 usb_string_product_name_default
00002fac  w    F .text	00000006 dma_ch1_isr
00001e70 g     F .text	0000002c usb_tx_packet_count
00002fac  w    F .text	00000006 dma_ch5_isr
00002fac  w    F .text	00000006 can0_rx_warn_isr
00002fac  w    F .text	00000006 can0_tx_warn_isr
00002c68 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00002ff0 g     F .text	00000034 kinetis_hsrun_disable
00004328 g       .text	00000000 __preinit_array_start
00003454  w    F .text	00000002 serialEvent3()
1fff1814 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15c4 g     O .bss	00000014 led2
00002fac  w    F .text	00000006 cmp2_isr
00003538 g     F .text	00000004 pendablesrvreq_isr
00002fac  w    F .text	00000006 wakeup_isr
00002fac  w    F .text	00000006 cmp3_isr
00002b9c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
1fff17cc g     O .bss	00000004 usb_midi_handleActiveSensing
00002fac  w    F .text	00000006 tpm2_isr
00002fac  w    F .text	00000006 dma_ch0_isr
1fff0d50  w    O .data	00000016 usb_string_serial_number
00002fac  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ...../..e/..
      10:	e/..e/..e/..e/..
      20:	e/..e/..e/.../..
      30:	./..e/..95..=6..
      40:	./.../.../.../..
      50:	./.../.../.../..
      60:	./.../.../.../..
      70:	./.../.../.../..
      80:	./.../.../.../..
      90:	./.../.../.../..
      a0:	./.../.../.../..
      b0:	./.../.../..y0..
      c0:	./..a-.../..y3..
      d0:	./......./.../..
      e0:	./.../.../.../..
      f0:	./.../.../.../..
     100:	./.../.../.../..
     110:	./... .../.../..
     120:	./.../.../.../..
     130:	./.../.../.../..
     140:	./.../..i,.../..
     150:	./.../.../.../..
     160:	./.../.../.../..
     170:	./.../.../.../..
     180:	./.../.../.../..
     190:	./.../...1.../..
     1a0:	./.../.../.../..
     1b0:	./.../.../.../..
     1c0:	./.../.../.../..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	2fb4 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	16f0 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	15f4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	15f4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	3658 <__libc_init_array>

	startup_late_hook();
     33a:	bl	2fc0 <startup_late_hook>
	main();
     33e:	bl	2c34 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15a4
     374:	.word	0x00004334
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15a8
     380:	.word	0x1fff1db8
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15a8
     42c:	.word	0x00000000
     430:	.word	0x00004338

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15ac
     460:	.word	0x00004338
     464:	.word	0x1fff15a4
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long lastBlink;
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long lastBlink;
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	1640 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	1618 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob1(A0, sequence1, TEMPO);
Knob knob2(A1, sequence1, LENGTH);
Knob knob3(A2, sequence1, NOTE);
Knob knob4(A3, sequence1, MAGIC);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #88	; 0x58
     49c:	bl	196c <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	82c <loop+0x398>
     4a6:	ldr	r4, [pc, #616]	; (710 <loop+0x27c>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #616]	; (714 <loop+0x280>)
     4aa:	ldrb	r0, [r6, #4]
     4ac:	bl	1624 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b0:	ldr	r3, [r6, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b2:	str	r0, [r6, #16]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b4:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b6:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b8:	beq.w	86a <loop+0x3d6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4bc:	ldr	r3, [r4, #0]
     4be:	str	r3, [sp, #84]	; 0x54
	return ret;
     4c0:	ldr	r3, [sp, #84]	; 0x54
        m_lastDebounceTime = millis();
     4c2:	str	r3, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c4:	ldr	r1, [r4, #0]
     4c6:	str	r1, [sp, #80]	; 0x50
	return ret;
     4c8:	ldr	r1, [sp, #80]	; 0x50
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4ca:	cmp	r3, r1
     4cc:	beq.n	4e0 <loop+0x4c>
        if (reading != m_state) {
     4ce:	ldr	r3, [r6, #8]
     4d0:	ldr	r5, [pc, #576]	; (714 <loop+0x280>)
     4d2:	cmp	r0, r3
     4d4:	beq.w	892 <loop+0x3fe>
          m_state = reading;
     4d8:	str	r0, [r5, #8]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     4da:	cmp	r0, #0
     4dc:	beq.w	904 <loop+0x470>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e0:	ldr	r5, [pc, #564]	; (718 <loop+0x284>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4e2:	str	r2, [r6, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e4:	ldrb	r0, [r5, #4]
     4e6:	bl	1624 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4ea:	ldr	r3, [r5, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	str	r0, [r5, #16]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4ee:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f0:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f2:	beq.w	872 <loop+0x3de>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4f6:	ldr	r3, [r4, #0]
     4f8:	str	r3, [sp, #76]	; 0x4c
	return ret;
     4fa:	ldr	r3, [sp, #76]	; 0x4c
        m_lastDebounceTime = millis();
     4fc:	str	r3, [r5, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4fe:	ldr	r1, [r4, #0]
     500:	str	r1, [sp, #72]	; 0x48
	return ret;
     502:	ldr	r1, [sp, #72]	; 0x48
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     504:	cmp	r3, r1
     506:	beq.n	51a <loop+0x86>
        if (reading != m_state) {
     508:	ldr	r3, [r5, #8]
     50a:	ldr	r6, [pc, #524]	; (718 <loop+0x284>)
     50c:	cmp	r0, r3
     50e:	beq.w	88a <loop+0x3f6>
          m_state = reading;
     512:	str	r0, [r6, #8]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     514:	cmp	r0, #0
     516:	beq.w	934 <loop+0x4a0>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     51a:	ldr	r6, [pc, #512]	; (71c <loop+0x288>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     51c:	str	r2, [r5, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     51e:	ldrb	r0, [r6, #4]
     520:	bl	1624 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     524:	ldr	r3, [r6, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     526:	str	r0, [r6, #16]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     528:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     52c:	beq.w	86e <loop+0x3da>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     530:	ldr	r3, [r4, #0]
     532:	str	r3, [sp, #68]	; 0x44
	return ret;
     534:	ldr	r3, [sp, #68]	; 0x44
        m_lastDebounceTime = millis();
     536:	str	r3, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     538:	ldr	r1, [r4, #0]
     53a:	str	r1, [sp, #64]	; 0x40
	return ret;
     53c:	ldr	r1, [sp, #64]	; 0x40
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     53e:	cmp	r3, r1
     540:	beq.n	554 <loop+0xc0>
        if (reading != m_state) {
     542:	ldr	r3, [r6, #8]
     544:	ldr	r5, [pc, #468]	; (71c <loop+0x288>)
     546:	cmp	r0, r3
     548:	beq.w	882 <loop+0x3ee>
          m_state = reading;
     54c:	str	r0, [r5, #8]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     54e:	cmp	r0, #0
     550:	beq.w	964 <loop+0x4d0>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     554:	ldr	r5, [pc, #456]	; (720 <loop+0x28c>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     556:	str	r2, [r6, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     558:	ldrb	r0, [r5, #4]
     55a:	bl	1624 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     55e:	ldr	r3, [r5, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     560:	str	r0, [r5, #16]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     562:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     564:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     566:	beq.w	87e <loop+0x3ea>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     56a:	ldr	r3, [r4, #0]
     56c:	str	r3, [sp, #60]	; 0x3c
	return ret;
     56e:	ldr	r3, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     570:	str	r3, [r5, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     572:	ldr	r1, [r4, #0]
     574:	str	r1, [sp, #56]	; 0x38
	return ret;
     576:	ldr	r1, [sp, #56]	; 0x38
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     578:	cmp	r3, r1
     57a:	beq.n	58e <loop+0xfa>
        if (reading != m_state) {
     57c:	ldr	r3, [r5, #8]
     57e:	ldr	r6, [pc, #416]	; (720 <loop+0x28c>)
     580:	cmp	r0, r3
     582:	beq.w	886 <loop+0x3f2>
          m_state = reading;
     586:	str	r0, [r6, #8]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     588:	cmp	r0, #0
     58a:	beq.w	994 <loop+0x500>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     58e:	ldr	r6, [pc, #404]	; (724 <loop+0x290>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     590:	str	r2, [r5, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     592:	ldrb	r0, [r6, #4]
     594:	bl	1624 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     598:	ldr	r3, [r6, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     59a:	str	r0, [r6, #16]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     59c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     59e:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5a0:	beq.w	87a <loop+0x3e6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5a4:	ldr	r3, [r4, #0]
     5a6:	str	r3, [sp, #52]	; 0x34
	return ret;
     5a8:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     5aa:	str	r3, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5ac:	ldr	r1, [r4, #0]
     5ae:	str	r1, [sp, #48]	; 0x30
	return ret;
     5b0:	ldr	r1, [sp, #48]	; 0x30
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5b2:	cmp	r3, r1
     5b4:	beq.n	5c8 <loop+0x134>
        if (reading != m_state) {
     5b6:	ldr	r3, [r6, #8]
     5b8:	ldr	r5, [pc, #360]	; (724 <loop+0x290>)
     5ba:	cmp	r0, r3
     5bc:	beq.w	896 <loop+0x402>
          m_state = reading;
     5c0:	str	r0, [r5, #8]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     5c2:	cmp	r0, #0
     5c4:	beq.w	9c4 <loop+0x530>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c8:	ldr	r5, [pc, #348]	; (728 <loop+0x294>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5ca:	str	r2, [r6, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5cc:	ldrb	r0, [r5, #4]
     5ce:	bl	1624 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5d2:	ldr	r3, [r5, #12]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5d4:	str	r0, [r5, #16]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5d6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5d8:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5da:	beq.w	876 <loop+0x3e2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5de:	ldr	r3, [r4, #0]
     5e0:	str	r3, [sp, #44]	; 0x2c
	return ret;
     5e2:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     5e4:	str	r3, [r5, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5e6:	ldr	r1, [r4, #0]
     5e8:	str	r1, [sp, #40]	; 0x28
	return ret;
     5ea:	ldr	r1, [sp, #40]	; 0x28
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5ec:	cmp	r3, r1
     5ee:	beq.n	62c <loop+0x198>
        if (reading != m_state) {
     5f0:	ldr	r3, [r5, #8]
     5f2:	ldr	r6, [pc, #308]	; (728 <loop+0x294>)
     5f4:	cmp	r0, r3
     5f6:	beq.w	88e <loop+0x3fa>
          m_state = reading;
     5fa:	str	r0, [r6, #8]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     5fc:	cbnz	r0, 62c <loop+0x198>
     5fe:	ldrb	r3, [r6, #20]
     600:	cmp	r3, #0
     602:	bne.w	c9a <loop+0x806>
        m_led.toggle();
        m_sequence.toggle();
      } else if (m_state == LOW) {
        m_led.toggle();
     606:	ldr	r3, [r6, #28]
     608:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     60c:	clz	r1, r1
     610:	lsrs	r1, r1, #5
     612:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     614:	uxtb	r0, r0
     616:	bl	1618 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     61a:	ldr	r3, [r6, #0]
     61c:	ldr	r1, [r6, #32]
     61e:	ldr	r2, [r6, #16]
     620:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     622:	add	r3, r1
     624:	ldrb	r1, [r3, #20]
     626:	eor.w	r1, r1, #1
     62a:	strb	r1, [r3, #20]
    };

    void check () {
      if (blinking) {
     62c:	ldr	r6, [pc, #252]	; (72c <loop+0x298>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     62e:	str	r2, [r5, #12]
     630:	ldrb	r3, [r6, #16]
     632:	cbz	r3, 646 <loop+0x1b2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     634:	ldr	r3, [r4, #0]
     636:	str	r3, [sp, #36]	; 0x24
	return ret;
     638:	ldr	r3, [sp, #36]	; 0x24
        if (millis() - lastBlink > blinkLength) {
     63a:	ldr	r1, [r6, #8]
     63c:	ldr	r2, [r6, #12]
     63e:	subs	r3, r3, r1
     640:	cmp	r3, r2
     642:	bhi.w	812 <loop+0x37e>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     646:	ldr	r5, [pc, #232]	; (730 <loop+0x29c>)
     648:	ldrb	r3, [r5, #16]
     64a:	cbz	r3, 65e <loop+0x1ca>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     64c:	ldr	r3, [r4, #0]
     64e:	str	r3, [sp, #32]
	return ret;
     650:	ldr	r3, [sp, #32]
        if (millis() - lastBlink > blinkLength) {
     652:	ldr	r1, [r5, #8]
     654:	ldr	r2, [r5, #12]
     656:	subs	r3, r3, r1
     658:	cmp	r3, r2
     65a:	bhi.w	7f8 <loop+0x364>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     65e:	ldr	r5, [pc, #212]	; (734 <loop+0x2a0>)
     660:	ldrb	r3, [r5, #16]
     662:	cbz	r3, 676 <loop+0x1e2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     664:	ldr	r3, [r4, #0]
     666:	str	r3, [sp, #28]
	return ret;
     668:	ldr	r3, [sp, #28]
        if (millis() - lastBlink > blinkLength) {
     66a:	ldr	r1, [r5, #8]
     66c:	ldr	r2, [r5, #12]
     66e:	subs	r3, r3, r1
     670:	cmp	r3, r2
     672:	bhi.w	7de <loop+0x34a>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     676:	ldr	r5, [pc, #192]	; (738 <loop+0x2a4>)
     678:	ldrb	r3, [r5, #16]
     67a:	cbz	r3, 68e <loop+0x1fa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     67c:	ldr	r3, [r4, #0]
     67e:	str	r3, [sp, #24]
	return ret;
     680:	ldr	r3, [sp, #24]
        if (millis() - lastBlink > blinkLength) {
     682:	ldr	r1, [r5, #8]
     684:	ldr	r2, [r5, #12]
     686:	subs	r3, r3, r1
     688:	cmp	r3, r2
     68a:	bhi.w	7c4 <loop+0x330>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     68e:	ldr	r5, [pc, #172]	; (73c <loop+0x2a8>)
     690:	ldrb	r3, [r5, #16]
     692:	cbz	r3, 6a6 <loop+0x212>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     694:	ldr	r3, [r4, #0]
     696:	str	r3, [sp, #20]
	return ret;
     698:	ldr	r3, [sp, #20]
        if (millis() - lastBlink > blinkLength) {
     69a:	ldr	r1, [r5, #8]
     69c:	ldr	r2, [r5, #12]
     69e:	subs	r3, r3, r1
     6a0:	cmp	r3, r2
     6a2:	bhi.w	7aa <loop+0x316>
      m_pin = pin;
      m_knobType = knobType;
    };

    void check () {
      m_value = analogRead(m_pin);
     6a6:	ldr	r4, [pc, #152]	; (740 <loop+0x2ac>)
     6a8:	ldrb	r0, [r4, #0]
     6aa:	bl	1434 <analogRead>

      if (m_value != m_lastValue) {
     6ae:	ldr	r3, [r4, #8]
      m_pin = pin;
      m_knobType = knobType;
    };

    void check () {
      m_value = analogRead(m_pin);
     6b0:	str	r0, [r4, #4]

      if (m_value != m_lastValue) {
     6b2:	cmp	r0, r3
     6b4:	beq.n	6be <loop+0x22a>
        // Serial.print("a");
        if (m_knobType == TEMPO) {
     6b6:	ldrb	r3, [r4, #16]
     6b8:	cmp	r3, #0
     6ba:	beq.n	794 <loop+0x300>
        } else if (m_knobType == LENGTH) {
        } else if (m_knobType == NOTE) {
        } else if (m_knobType == MAGIC) {
        }

        m_lastValue = m_value;
     6bc:	str	r0, [r4, #8]
      m_pin = pin;
      m_knobType = knobType;
    };

    void check () {
      m_value = analogRead(m_pin);
     6be:	ldr	r4, [pc, #132]	; (744 <loop+0x2b0>)
     6c0:	ldrb	r0, [r4, #0]
     6c2:	bl	1434 <analogRead>

      if (m_value != m_lastValue) {
     6c6:	ldr	r3, [r4, #8]
      m_pin = pin;
      m_knobType = knobType;
    };

    void check () {
      m_value = analogRead(m_pin);
     6c8:	str	r0, [r4, #4]

      if (m_value != m_lastValue) {
     6ca:	cmp	r0, r3
     6cc:	beq.n	6d6 <loop+0x242>
        // Serial.print("a");
        if (m_knobType == TEMPO) {
     6ce:	ldrb	r3, [r4, #16]
     6d0:	cmp	r3, #0
     6d2:	beq.n	77c <loop+0x2e8>
        } else if (m_knobType == LENGTH) {
        } else if (m_knobType == NOTE) {
        } else if (m_knobType == MAGIC) {
        }

        m_lastValue = m_value;
     6d4:	str	r0, [r4, #8]
      m_pin = pin;
      m_knobType = knobType;
    };

    void check () {
      m_value = analogRead(m_pin);
     6d6:	ldr	r4, [pc, #112]	; (748 <loop+0x2b4>)
     6d8:	ldrb	r0, [r4, #0]
     6da:	bl	1434 <analogRead>

      if (m_value != m_lastValue) {
     6de:	ldr	r3, [r4, #8]
      m_pin = pin;
      m_knobType = knobType;
    };

    void check () {
      m_value = analogRead(m_pin);
     6e0:	str	r0, [r4, #4]

      if (m_value != m_lastValue) {
     6e2:	cmp	r0, r3
     6e4:	beq.n	6ee <loop+0x25a>
        // Serial.print("a");
        if (m_knobType == TEMPO) {
     6e6:	ldrb	r3, [r4, #16]
     6e8:	cmp	r3, #0
     6ea:	beq.n	764 <loop+0x2d0>
        } else if (m_knobType == LENGTH) {
        } else if (m_knobType == NOTE) {
        } else if (m_knobType == MAGIC) {
        }

        m_lastValue = m_value;
     6ec:	str	r0, [r4, #8]
      m_pin = pin;
      m_knobType = knobType;
    };

    void check () {
      m_value = analogRead(m_pin);
     6ee:	ldr	r4, [pc, #92]	; (74c <loop+0x2b8>)
     6f0:	ldrb	r0, [r4, #0]
     6f2:	bl	1434 <analogRead>

      if (m_value != m_lastValue) {
     6f6:	ldr	r3, [r4, #8]
      m_pin = pin;
      m_knobType = knobType;
    };

    void check () {
      m_value = analogRead(m_pin);
     6f8:	str	r0, [r4, #4]

      if (m_value != m_lastValue) {
     6fa:	cmp	r0, r3
     6fc:	beq.n	75e <loop+0x2ca>
        // Serial.print("a");
        if (m_knobType == TEMPO) {
     6fe:	ldrb	r3, [r4, #16]
     700:	cbnz	r3, 75c <loop+0x2c8>
      // int tempo = map(value, 0, 1023, 60, 280);
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
     702:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     706:	ldr	r2, [r4, #12]
     708:	bge.w	8b4 <loop+0x420>
     70c:	b.n	750 <loop+0x2bc>
     70e:	nop
     710:	.word	0x1fff17c0
     714:	.word	0x1fff1678
     718:	.word	0x1fff169c
     71c:	.word	0x1fff16c0
     720:	.word	0x1fff1784
     724:	.word	0x1fff1728
     728:	.word	0x1fff174c
     72c:	.word	0x1fff1614
     730:	.word	0x1fff15c4
     734:	.word	0x1fff15d8
     738:	.word	0x1fff15ec
     73c:	.word	0x1fff1600
     740:	.word	0x1fff1664
     744:	.word	0x1fff1628
     748:	.word	0x1fff163c
     74c:	.word	0x1fff1650
        max_ppqn = 6;

        // ...
        if (ppqn >= 6) {
     750:	ldr	r1, [r2, #52]	; 0x34
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
        max_ppqn = 6;
     752:	movs	r5, #6

        // ...
        if (ppqn >= 6) {
     754:	cmp	r1, #5
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
        max_ppqn = 6;
     756:	str	r5, [r2, #56]	; 0x38

        // ...
        if (ppqn >= 6) {
     758:	bgt.w	8cc <loop+0x438>
        } else if (m_knobType == LENGTH) {
        } else if (m_knobType == NOTE) {
        } else if (m_knobType == MAGIC) {
        }

        m_lastValue = m_value;
     75c:	str	r0, [r4, #8]
  led5.check();
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
}
     75e:	add	sp, #88	; 0x58
     760:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      // int tempo = map(value, 0, 1023, 60, 280);
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
     764:	cmp.w	r0, #400	; 0x190
      m_value = analogRead(m_pin);

      if (m_value != m_lastValue) {
        // Serial.print("a");
        if (m_knobType == TEMPO) {
          m_sequence.controlTempo(m_value);
     768:	ldr	r2, [r4, #12]
     76a:	bge.w	8d0 <loop+0x43c>
        max_ppqn = 6;

        // ...
        if (ppqn >= 6) {
     76e:	ldr	r1, [r2, #52]	; 0x34
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
        max_ppqn = 6;
     770:	movs	r5, #6

        // ...
        if (ppqn >= 6) {
     772:	cmp	r1, #5
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
        max_ppqn = 6;
     774:	str	r5, [r2, #56]	; 0x38

        // ...
        if (ppqn >= 6) {
     776:	ble.n	6ec <loop+0x258>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     778:	str	r3, [r2, #52]	; 0x34
     77a:	b.n	6ec <loop+0x258>
      // int tempo = map(value, 0, 1023, 60, 280);
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
     77c:	cmp.w	r0, #400	; 0x190
     780:	ldr	r2, [r4, #12]
     782:	bge.w	8ea <loop+0x456>
        max_ppqn = 6;

        // ...
        if (ppqn >= 6) {
     786:	ldr	r1, [r2, #52]	; 0x34
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
        max_ppqn = 6;
     788:	movs	r5, #6

        // ...
        if (ppqn >= 6) {
     78a:	cmp	r1, #5
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
        max_ppqn = 6;
     78c:	str	r5, [r2, #56]	; 0x38

        // ...
        if (ppqn >= 6) {
     78e:	ble.n	6d4 <loop+0x240>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     790:	str	r3, [r2, #52]	; 0x34
     792:	b.n	6d4 <loop+0x240>
      // int tempo = map(value, 0, 1023, 60, 280);
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
     794:	cmp.w	r0, #400	; 0x190
     798:	ldr	r2, [r4, #12]
     79a:	bge.n	89a <loop+0x406>
        max_ppqn = 6;

        // ...
        if (ppqn >= 6) {
     79c:	ldr	r1, [r2, #52]	; 0x34
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
        max_ppqn = 6;
     79e:	movs	r5, #6

        // ...
        if (ppqn >= 6) {
     7a0:	cmp	r1, #5
      // Serial.println(tempo);
      // millisTempo = 60000 / tempo;
      // 96

      if (value < 400) {
        max_ppqn = 6;
     7a2:	str	r5, [r2, #56]	; 0x38

        // ...
        if (ppqn >= 6) {
     7a4:	ble.n	6bc <loop+0x228>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     7a6:	str	r3, [r2, #52]	; 0x34
     7a8:	b.n	6bc <loop+0x228>
          digitalWrite(m_pin, !digitalRead(m_pin));
     7aa:	ldrb	r4, [r5, #0]
     7ac:	mov	r0, r4
     7ae:	bl	1624 <digitalRead>
     7b2:	clz	r1, r0
     7b6:	lsrs	r1, r1, #5
     7b8:	mov	r0, r4
     7ba:	bl	1618 <digitalWrite>
          blinking = false;
     7be:	movs	r3, #0
     7c0:	strb	r3, [r5, #16]
     7c2:	b.n	6a6 <loop+0x212>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     7c4:	ldrb	r6, [r5, #0]
     7c6:	mov	r0, r6
     7c8:	bl	1624 <digitalRead>
     7cc:	clz	r1, r0
     7d0:	lsrs	r1, r1, #5
     7d2:	mov	r0, r6
     7d4:	bl	1618 <digitalWrite>
          blinking = false;
     7d8:	movs	r3, #0
     7da:	strb	r3, [r5, #16]
     7dc:	b.n	68e <loop+0x1fa>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     7de:	ldrb	r6, [r5, #0]
     7e0:	mov	r0, r6
     7e2:	bl	1624 <digitalRead>
     7e6:	clz	r1, r0
     7ea:	lsrs	r1, r1, #5
     7ec:	mov	r0, r6
     7ee:	bl	1618 <digitalWrite>
          blinking = false;
     7f2:	movs	r3, #0
     7f4:	strb	r3, [r5, #16]
     7f6:	b.n	676 <loop+0x1e2>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     7f8:	ldrb	r6, [r5, #0]
     7fa:	mov	r0, r6
     7fc:	bl	1624 <digitalRead>
     800:	clz	r1, r0
     804:	lsrs	r1, r1, #5
     806:	mov	r0, r6
     808:	bl	1618 <digitalWrite>
          blinking = false;
     80c:	movs	r3, #0
     80e:	strb	r3, [r5, #16]
     810:	b.n	65e <loop+0x1ca>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     812:	ldrb	r5, [r6, #0]
     814:	mov	r0, r5
     816:	bl	1624 <digitalRead>
     81a:	clz	r1, r0
     81e:	lsrs	r1, r1, #5
     820:	mov	r0, r5
     822:	bl	1618 <digitalWrite>
          blinking = false;
     826:	movs	r3, #0
     828:	strb	r3, [r6, #16]
     82a:	b.n	646 <loop+0x1b2>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     82c:	ldr	r3, [pc, #644]	; (ab4 <loop+0x620>)
        }
        uint8_t getCable(void) __attribute__((always_inline)) {
                return usb_midi_msg_cable;
        }
        uint8_t getChannel(void) __attribute__((always_inline)) {
                return usb_midi_msg_channel;
     82e:	ldr	r0, [pc, #648]	; (ab8 <loop+0x624>)
      //Serial.print(cable, DEC);
      //Serial.print(": ");

      // print info about the message
      //
      switch (type) {
     830:	ldrb	r3, [r3, #0]
        }
        uint8_t getData1(void) __attribute__((always_inline)) {
                return usb_midi_msg_data1;
     832:	ldr	r1, [pc, #648]	; (abc <loop+0x628>)
        }
        uint8_t getData2(void) __attribute__((always_inline)) {
                return usb_midi_msg_data2;
     834:	ldr	r2, [pc, #648]	; (ac0 <loop+0x62c>)
        }
        uint8_t getCable(void) __attribute__((always_inline)) {
                return usb_midi_msg_cable;
        }
        uint8_t getChannel(void) __attribute__((always_inline)) {
                return usb_midi_msg_channel;
     836:	ldrb	r7, [r0, #0]
        }
        uint8_t getData1(void) __attribute__((always_inline)) {
                return usb_midi_msg_data1;
     838:	ldrb	r6, [r1, #0]
        }
        uint8_t getData2(void) __attribute__((always_inline)) {
                return usb_midi_msg_data2;
     83a:	ldrb	r5, [r2, #0]
     83c:	cmp	r3, #176	; 0xb0
     83e:	beq.w	a82 <loop+0x5ee>
     842:	bls.w	9f4 <loop+0x560>
     846:	cmp	r3, #250	; 0xfa
     848:	beq.w	b68 <loop+0x6d4>
     84c:	cmp	r3, #252	; 0xfc
     84e:	beq.w	b46 <loop+0x6b2>
     852:	cmp	r3, #248	; 0xf8
     854:	beq.w	aec <loop+0x658>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     858:	movs	r1, #35	; 0x23
     85a:	ldr	r0, [pc, #616]	; (ac4 <loop+0x630>)
     85c:	ldr	r4, [pc, #616]	; (ac8 <loop+0x634>)
     85e:	bl	1008 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     862:	ldr	r0, [pc, #616]	; (acc <loop+0x638>)
     864:	bl	2b7c <Print::println()>
     868:	b.n	4a8 <loop+0x14>
     86a:	ldr	r3, [r6, #24]
     86c:	b.n	4c4 <loop+0x30>
     86e:	ldr	r3, [r6, #24]
     870:	b.n	538 <loop+0xa4>
     872:	ldr	r3, [r5, #24]
     874:	b.n	4fe <loop+0x6a>
     876:	ldr	r3, [r5, #24]
     878:	b.n	5e6 <loop+0x152>
     87a:	ldr	r3, [r6, #24]
     87c:	b.n	5ac <loop+0x118>
     87e:	ldr	r3, [r5, #24]
     880:	b.n	572 <loop+0xde>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     882:	mov	r2, r0
     884:	b.n	554 <loop+0xc0>
     886:	mov	r2, r0
     888:	b.n	58e <loop+0xfa>
     88a:	mov	r2, r0
     88c:	b.n	51a <loop+0x86>
     88e:	mov	r2, r0
     890:	b.n	62c <loop+0x198>
     892:	mov	r2, r0
     894:	b.n	4e0 <loop+0x4c>
     896:	mov	r2, r0
     898:	b.n	5c8 <loop+0x134>

        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     89a:	sub.w	r1, r0, #400	; 0x190
     89e:	cmp.w	r1, #400	; 0x190
     8a2:	bcs.w	a6e <loop+0x5da>
        max_ppqn = 8;

        if (ppqn >= 8) {
     8a6:	ldr	r1, [r2, #52]	; 0x34
        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     8a8:	movs	r5, #8

        if (ppqn >= 8) {
     8aa:	cmp	r1, #7
        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     8ac:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     8ae:	ble.w	6bc <loop+0x228>
     8b2:	b.n	7a6 <loop+0x312>

        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     8b4:	sub.w	r1, r0, #400	; 0x190
     8b8:	cmp.w	r1, #400	; 0x190
     8bc:	bcs.w	a60 <loop+0x5cc>
        max_ppqn = 8;

        if (ppqn >= 8) {
     8c0:	ldr	r1, [r2, #52]	; 0x34
        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     8c2:	movs	r5, #8

        if (ppqn >= 8) {
     8c4:	cmp	r1, #7
        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     8c6:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     8c8:	ble.w	75c <loop+0x2c8>
          ppqn = 0;
     8cc:	str	r3, [r2, #52]	; 0x34
     8ce:	b.n	75c <loop+0x2c8>

        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     8d0:	sub.w	r1, r0, #400	; 0x190
     8d4:	cmp.w	r1, #400	; 0x190
     8d8:	bcs.w	a52 <loop+0x5be>
        max_ppqn = 8;

        if (ppqn >= 8) {
     8dc:	ldr	r1, [r2, #52]	; 0x34
        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     8de:	movs	r5, #8

        if (ppqn >= 8) {
     8e0:	cmp	r1, #7
        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     8e2:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     8e4:	ble.w	6ec <loop+0x258>
     8e8:	b.n	778 <loop+0x2e4>

        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     8ea:	sub.w	r1, r0, #400	; 0x190
     8ee:	cmp.w	r1, #400	; 0x190
     8f2:	bcs.w	a44 <loop+0x5b0>
        max_ppqn = 8;

        if (ppqn >= 8) {
     8f6:	ldr	r1, [r2, #52]	; 0x34
        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     8f8:	movs	r5, #8

        if (ppqn >= 8) {
     8fa:	cmp	r1, #7
        // ...
        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     8fc:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     8fe:	ble.w	6d4 <loop+0x240>
     902:	b.n	790 <loop+0x2fc>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     904:	ldrb	r3, [r5, #20]
     906:	cmp	r3, #0
     908:	bne.w	c78 <loop+0x7e4>
        m_led.toggle();
        m_sequence.toggle();
      } else if (m_state == LOW) {
        m_led.toggle();
     90c:	ldr	r3, [r5, #28]
     90e:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     912:	clz	r1, r1
     916:	lsrs	r1, r1, #5
     918:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     91a:	uxtb	r0, r0
     91c:	bl	1618 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     920:	ldr	r3, [r5, #0]
     922:	ldr	r1, [r5, #32]
     924:	ldr	r2, [r5, #16]
     926:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     928:	add	r3, r1
     92a:	ldrb	r1, [r3, #20]
     92c:	eor.w	r1, r1, #1
     930:	strb	r1, [r3, #20]
     932:	b.n	4e0 <loop+0x4c>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     934:	ldrb	r3, [r6, #20]
     936:	cmp	r3, #0
     938:	bne.w	c56 <loop+0x7c2>
        m_led.toggle();
        m_sequence.toggle();
      } else if (m_state == LOW) {
        m_led.toggle();
     93c:	ldr	r3, [r6, #28]
     93e:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     942:	clz	r1, r1
     946:	lsrs	r1, r1, #5
     948:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     94a:	uxtb	r0, r0
     94c:	bl	1618 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     950:	ldr	r3, [r6, #0]
     952:	ldr	r1, [r6, #32]
     954:	ldr	r2, [r6, #16]
     956:	subs	r3, #1
     958:	add	r3, r1
     95a:	ldrb	r1, [r3, #20]
     95c:	eor.w	r1, r1, #1
     960:	strb	r1, [r3, #20]
     962:	b.n	51a <loop+0x86>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     964:	ldrb	r3, [r5, #20]
     966:	cmp	r3, #0
     968:	bne.w	c34 <loop+0x7a0>
        m_led.toggle();
        m_sequence.toggle();
      } else if (m_state == LOW) {
        m_led.toggle();
     96c:	ldr	r3, [r5, #28]
     96e:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     972:	clz	r1, r1
     976:	lsrs	r1, r1, #5
     978:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     97a:	uxtb	r0, r0
     97c:	bl	1618 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     980:	ldr	r3, [r5, #0]
     982:	ldr	r1, [r5, #32]
     984:	ldr	r2, [r5, #16]
     986:	subs	r3, #1
     988:	add	r3, r1
     98a:	ldrb	r1, [r3, #20]
     98c:	eor.w	r1, r1, #1
     990:	strb	r1, [r3, #20]
     992:	b.n	554 <loop+0xc0>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     994:	ldrb	r3, [r6, #20]
     996:	cmp	r3, #0
     998:	bne.w	c12 <loop+0x77e>
        m_led.toggle();
        m_sequence.toggle();
      } else if (m_state == LOW) {
        m_led.toggle();
     99c:	ldr	r3, [r6, #28]
     99e:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     9a2:	clz	r1, r1
     9a6:	lsrs	r1, r1, #5
     9a8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     9aa:	uxtb	r0, r0
     9ac:	bl	1618 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     9b0:	ldr	r3, [r6, #0]
     9b2:	ldr	r1, [r6, #32]
     9b4:	ldr	r2, [r6, #16]
     9b6:	subs	r3, #1
     9b8:	add	r3, r1
     9ba:	ldrb	r1, [r3, #20]
     9bc:	eor.w	r1, r1, #1
     9c0:	strb	r1, [r3, #20]
     9c2:	b.n	58e <loop+0xfa>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     9c4:	ldrb	r3, [r5, #20]
     9c6:	cmp	r3, #0
     9c8:	bne.w	bf0 <loop+0x75c>
        m_led.toggle();
        m_sequence.toggle();
      } else if (m_state == LOW) {
        m_led.toggle();
     9cc:	ldr	r3, [r5, #28]
     9ce:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     9d2:	clz	r1, r1
     9d6:	lsrs	r1, r1, #5
     9d8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     9da:	uxtb	r0, r0
     9dc:	bl	1618 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     9e0:	ldr	r3, [r5, #0]
     9e2:	ldr	r1, [r5, #32]
     9e4:	ldr	r2, [r5, #16]
     9e6:	subs	r3, #1
     9e8:	add	r3, r1
     9ea:	ldrb	r1, [r3, #20]
     9ec:	eor.w	r1, r1, #1
     9f0:	strb	r1, [r3, #20]
     9f2:	b.n	5c8 <loop+0x134>
      //Serial.print(cable, DEC);
      //Serial.print(": ");

      // print info about the message
      //
      switch (type) {
     9f4:	cmp	r3, #128	; 0x80
     9f6:	beq.n	a7c <loop+0x5e8>
     9f8:	cmp	r3, #144	; 0x90
     9fa:	bne.w	858 <loop+0x3c4>
     9fe:	ldr	r0, [pc, #208]	; (ad0 <loop+0x63c>)
     a00:	movs	r1, #12
     a02:	bl	1008 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     a06:	movs	r3, #0
     a08:	movs	r2, #10
     a0a:	mov	r1, r7
     a0c:	ldr	r0, [pc, #188]	; (acc <loop+0x638>)
     a0e:	ldr	r4, [pc, #184]	; (ac8 <loop+0x634>)
     a10:	bl	2b9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a14:	movs	r1, #7
     a16:	ldr	r0, [pc, #188]	; (ad4 <loop+0x640>)
     a18:	bl	1008 <usb_serial_write>
     a1c:	mov	r1, r6
     a1e:	movs	r3, #0
     a20:	movs	r2, #10
     a22:	ldr	r0, [pc, #168]	; (acc <loop+0x638>)
     a24:	bl	2b9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a28:	ldr	r0, [pc, #172]	; (ad8 <loop+0x644>)
     a2a:	movs	r1, #11
     a2c:	bl	1008 <usb_serial_write>
     a30:	mov	r1, r5
     a32:	movs	r3, #0
     a34:	movs	r2, #10
     a36:	ldr	r0, [pc, #148]	; (acc <loop+0x638>)
     a38:	bl	2b9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
     a3c:	ldr	r0, [pc, #140]	; (acc <loop+0x638>)
     a3e:	bl	2b7c <Print::println()>
     a42:	b.n	4a8 <loop+0x14>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     a44:	sub.w	r3, r0, #800	; 0x320
     a48:	cmp	r3, #223	; 0xdf
        max_ppqn = 12;
     a4a:	itt	ls
     a4c:	movls	r3, #12
     a4e:	strls	r3, [r2, #56]	; 0x38
     a50:	b.n	6d4 <loop+0x240>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     a52:	sub.w	r3, r0, #800	; 0x320
     a56:	cmp	r3, #223	; 0xdf
        max_ppqn = 12;
     a58:	itt	ls
     a5a:	movls	r3, #12
     a5c:	strls	r3, [r2, #56]	; 0x38
     a5e:	b.n	6ec <loop+0x258>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     a60:	sub.w	r3, r0, #800	; 0x320
     a64:	cmp	r3, #223	; 0xdf
        max_ppqn = 12;
     a66:	itt	ls
     a68:	movls	r3, #12
     a6a:	strls	r3, [r2, #56]	; 0x38
     a6c:	b.n	75c <loop+0x2c8>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     a6e:	sub.w	r3, r0, #800	; 0x320
     a72:	cmp	r3, #223	; 0xdf
        max_ppqn = 12;
     a74:	itt	ls
     a76:	movls	r3, #12
     a78:	strls	r3, [r2, #56]	; 0x38
     a7a:	b.n	6bc <loop+0x228>
     a7c:	movs	r1, #13
     a7e:	ldr	r0, [pc, #92]	; (adc <loop+0x648>)
     a80:	b.n	a02 <loop+0x56e>
     a82:	movs	r1, #19
     a84:	ldr	r0, [pc, #88]	; (ae0 <loop+0x64c>)
     a86:	ldr	r4, [pc, #64]	; (ac8 <loop+0x634>)
     a88:	bl	1008 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     a8c:	movs	r3, #0
     a8e:	movs	r2, #10
     a90:	mov	r1, r7
     a92:	ldr	r0, [pc, #56]	; (acc <loop+0x638>)
     a94:	bl	2b9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a98:	movs	r1, #10
     a9a:	ldr	r0, [pc, #72]	; (ae4 <loop+0x650>)
     a9c:	bl	1008 <usb_serial_write>
     aa0:	mov	r1, r6
     aa2:	movs	r3, #0
     aa4:	movs	r2, #10
     aa6:	ldr	r0, [pc, #36]	; (acc <loop+0x638>)
     aa8:	bl	2b9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     aac:	movs	r1, #8
     aae:	ldr	r0, [pc, #56]	; (ae8 <loop+0x654>)
     ab0:	b.n	a2c <loop+0x598>
     ab2:	nop
     ab4:	.word	0x1fff1c7c
     ab8:	.word	0x1fff1c83
     abc:	.word	0x1fff1c80
     ac0:	.word	0x1fff1c81
     ac4:	.word	0x00004024
     ac8:	.word	0x1fff17c0
     acc:	.word	0x1fff0c5c
     ad0:	.word	0x00003fe0
     ad4:	.word	0x00003fcc
     ad8:	.word	0x00003fd4
     adc:	.word	0x00003fbc
     ae0:	.word	0x00003ff0
     ae4:	.word	0x00004004
     ae8:	.word	0x00004010
          Serial.println(data2, DEC);
          break;

        case usbMIDI.Clock: // 0xF8
          Serial.println("clock");
          Serial.println(ppqn);
     aec:	ldr	r5, [pc, #616]	; (d58 <loop+0x8c4>)
     aee:	ldr	r0, [pc, #620]	; (d5c <loop+0x8c8>)
     af0:	movs	r1, #5
     af2:	bl	1008 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     af6:	ldr	r0, [pc, #616]	; (d60 <loop+0x8cc>)
     af8:	bl	2b7c <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     afc:	ldr	r1, [r5, #52]	; 0x34
     afe:	ldr	r0, [pc, #608]	; (d60 <loop+0x8cc>)
     b00:	bl	2c1c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     b04:	ldr	r0, [pc, #600]	; (d60 <loop+0x8cc>)
     b06:	bl	2b7c <Print::println()>
    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
    };

    void advancePPQN () {
      ++ppqn;
     b0a:	ldr	r3, [r5, #52]	; 0x34
          
      if (ppqn == max_ppqn) {
     b0c:	ldr	r2, [r5, #56]	; 0x38
    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
    };

    void advancePPQN () {
      ++ppqn;
     b0e:	adds	r3, #1
          
      if (ppqn == max_ppqn) {
     b10:	cmp	r3, r2
    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
    };

    void advancePPQN () {
      ++ppqn;
     b12:	str	r3, [r5, #52]	; 0x34
          
      if (ppqn == max_ppqn) {
     b14:	bne.w	4a6 <loop+0x12>
     b18:	ldr	r3, [r5, #24]
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     b1a:	ldr	r0, [pc, #584]	; (d64 <loop+0x8d0>)
     b1c:	ldr	r3, [r3, #16]
     b1e:	lsls	r3, r3, #16
     b20:	and.w	r3, r3, #8323072	; 0x7f0000
     b24:	orrs	r0, r3
     b26:	bl	18a4 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     b2a:	bl	1940 <usb_midi_flush_output>
    };

    void doStep () {      
      m_piano->stopStep(m_currentStep);
      
      if (m_state) {
     b2e:	ldrb	r3, [r5, #28]
     b30:	cmp	r3, #0
     b32:	bne.w	cea <loop+0x856>
     b36:	ldr	r4, [pc, #560]	; (d68 <loop+0x8d4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b38:	ldr	r3, [r4, #0]
     b3a:	str	r3, [sp, #4]
	return ret;
     b3c:	ldr	r3, [sp, #4]
        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      }

      lastMillis = millis();
     b3e:	str	r3, [r5, #48]	; 0x30
    void advancePPQN () {
      ++ppqn;
          
      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     b40:	movs	r3, #0
     b42:	str	r3, [r5, #52]	; 0x34
     b44:	b.n	4a8 <loop+0x14>
      doStep();
      m_leds[4]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     b46:	ldr	r3, [pc, #528]	; (d58 <loop+0x8c4>)
     b48:	ldr	r4, [pc, #540]	; (d68 <loop+0x8d4>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[4]->toggle();
     b4a:	ldr	r2, [r3, #16]
      doStep();
      m_leds[4]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     b4c:	movs	r5, #0
      ppqn = 0;
     b4e:	str	r5, [r3, #52]	; 0x34
      m_currentStep = 0;
     b50:	str	r5, [r3, #32]
     b52:	ldmia.w	r2, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b56:	clz	r1, r1
     b5a:	lsrs	r1, r1, #5
      doStep();
      m_leds[4]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     b5c:	strb	r5, [r3, #28]

      digitalWrite(m_pin, m_state); 
     b5e:	uxtb	r0, r0
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b60:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     b62:	bl	1618 <digitalWrite>
     b66:	b.n	4a8 <loop+0x14>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     b68:	ldr	r5, [pc, #492]	; (d58 <loop+0x8c4>)
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     b6a:	ldr	r0, [pc, #504]	; (d64 <loop+0x8d0>)
     b6c:	ldr	r3, [r5, #24]
      ppqn = 0;
     b6e:	movs	r2, #0
     b70:	str	r2, [r5, #52]	; 0x34
     b72:	ldr	r3, [r3, #16]
     b74:	lsls	r3, r3, #16
     b76:	and.w	r3, r3, #8323072	; 0x7f0000
     b7a:	orrs	r0, r3
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     b7c:	movs	r7, #1
     b7e:	strb	r7, [r5, #28]
     b80:	bl	18a4 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     b84:	bl	1940 <usb_midi_flush_output>
    };

    void doStep () {      
      m_piano->stopStep(m_currentStep);
      
      if (m_state) {
     b88:	ldrb	r3, [r5, #28]
     b8a:	cbnz	r3, bac <loop+0x718>
     b8c:	ldr	r4, [pc, #472]	; (d68 <loop+0x8d4>)

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[4]->toggle();
     b8e:	ldr	r3, [r5, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b90:	ldr	r2, [r4, #0]
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b92:	ldr	r1, [r3, #4]
     b94:	ldr	r0, [r3, #0]
     b96:	str	r2, [sp, #12]
     b98:	clz	r1, r1
	return ret;
     b9c:	ldr	r2, [sp, #12]
        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      }

      lastMillis = millis();
     b9e:	str	r2, [r5, #48]	; 0x30
     ba0:	lsrs	r1, r1, #5
     ba2:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ba4:	uxtb	r0, r0
     ba6:	bl	1618 <digitalWrite>
     baa:	b.n	4a8 <loop+0x14>

    void doStep () {      
      m_piano->stopStep(m_currentStep);
      
      if (m_state) {
        m_leds[m_currentStep]->blink();
     bac:	ldr	r3, [r5, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bae:	ldr	r4, [pc, #440]	; (d68 <loop+0x8d4>)
     bb0:	ldr.w	r8, [r5, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink () {
      digitalWrite(m_pin, !digitalRead(m_pin));
     bb4:	ldrb.w	r6, [r8]
     bb8:	mov	r0, r6
     bba:	bl	1624 <digitalRead>
     bbe:	clz	r1, r0
     bc2:	lsrs	r1, r1, #5
     bc4:	mov	r0, r6
     bc6:	bl	1618 <digitalWrite>


        if (m_steps[m_currentStep].m_state) {
     bca:	ldr	r6, [r5, #32]
     bcc:	ldr	r3, [r4, #0]
     bce:	str	r3, [sp, #16]
     bd0:	adds	r3, r5, r6
	return ret;
     bd2:	ldr	r2, [sp, #16]
     bd4:	ldrb	r3, [r3, #20]
      blinking = true;
     bd6:	strb.w	r7, [r8, #16]
      lastBlink = millis();  
     bda:	str.w	r2, [r8, #8]
     bde:	cmp	r3, #0
     be0:	bne.n	cbc <loop+0x828>
          m_piano->playStep(m_currentStep);
        }

        m_currentStep++;
     be2:	adds	r6, #1

        if (m_currentStep > 3) {
     be4:	cmp	r6, #3
          m_currentStep = 0;
     be6:	itet	gt
     be8:	movgt	r3, #0

        if (m_steps[m_currentStep].m_state) {
          m_piano->playStep(m_currentStep);
        }

        m_currentStep++;
     bea:	strle	r6, [r5, #32]

        if (m_currentStep > 3) {
          m_currentStep = 0;
     bec:	strgt	r3, [r5, #32]
     bee:	b.n	b8e <loop+0x6fa>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
        m_led.toggle();
     bf0:	ldr	r3, [r5, #28]
     bf2:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     bf6:	clz	r1, r1
     bfa:	lsrs	r1, r1, #5
     bfc:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bfe:	uxtb	r0, r0
     c00:	bl	1618 <digitalWrite>
        m_sequence.toggle();
     c04:	ldr	r1, [r5, #32]
     c06:	ldr	r2, [r5, #16]

      lastMillis = millis();
    };

    void toggle () {
      m_state = !m_state;
     c08:	ldrb	r3, [r1, #28]
     c0a:	eor.w	r3, r3, #1
     c0e:	strb	r3, [r1, #28]
     c10:	b.n	5c8 <loop+0x134>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
        m_led.toggle();
     c12:	ldr	r3, [r6, #28]
     c14:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c18:	clz	r1, r1
     c1c:	lsrs	r1, r1, #5
     c1e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c20:	uxtb	r0, r0
     c22:	bl	1618 <digitalWrite>
        m_sequence.toggle();
     c26:	ldr	r1, [r6, #32]
     c28:	ldr	r2, [r6, #16]
     c2a:	ldrb	r3, [r1, #28]
     c2c:	eor.w	r3, r3, #1
     c30:	strb	r3, [r1, #28]
     c32:	b.n	58e <loop+0xfa>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
        m_led.toggle();
     c34:	ldr	r3, [r5, #28]
     c36:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c3a:	clz	r1, r1
     c3e:	lsrs	r1, r1, #5
     c40:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c42:	uxtb	r0, r0
     c44:	bl	1618 <digitalWrite>
        m_sequence.toggle();
     c48:	ldr	r1, [r5, #32]
     c4a:	ldr	r2, [r5, #16]
     c4c:	ldrb	r3, [r1, #28]
     c4e:	eor.w	r3, r3, #1
     c52:	strb	r3, [r1, #28]
     c54:	b.n	554 <loop+0xc0>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
        m_led.toggle();
     c56:	ldr	r3, [r6, #28]
     c58:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c5c:	clz	r1, r1
     c60:	lsrs	r1, r1, #5
     c62:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c64:	uxtb	r0, r0
     c66:	bl	1618 <digitalWrite>
        m_sequence.toggle();
     c6a:	ldr	r1, [r6, #32]
     c6c:	ldr	r2, [r6, #16]
     c6e:	ldrb	r3, [r1, #28]
     c70:	eor.w	r3, r3, #1
     c74:	strb	r3, [r1, #28]
     c76:	b.n	51a <loop+0x86>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
        m_led.toggle();
     c78:	ldr	r3, [r5, #28]
     c7a:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c7e:	clz	r1, r1
     c82:	lsrs	r1, r1, #5
     c84:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c86:	uxtb	r0, r0
     c88:	bl	1618 <digitalWrite>
        m_sequence.toggle();
     c8c:	ldr	r1, [r5, #32]
     c8e:	ldr	r2, [r5, #16]
     c90:	ldrb	r3, [r1, #28]
     c92:	eor.w	r3, r3, #1
     c96:	strb	r3, [r1, #28]
     c98:	b.n	4e0 <loop+0x4c>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
        m_led.toggle();
     c9a:	ldr	r3, [r6, #28]
     c9c:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ca0:	clz	r1, r1
     ca4:	lsrs	r1, r1, #5
     ca6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ca8:	uxtb	r0, r0
     caa:	bl	1618 <digitalWrite>
        m_sequence.toggle();
     cae:	ldr	r1, [r6, #32]
     cb0:	ldr	r2, [r6, #16]
     cb2:	ldrb	r3, [r1, #28]
     cb4:	eor.w	r3, r3, #1
     cb8:	strb	r3, [r1, #28]
     cba:	b.n	62c <loop+0x198>
      if (m_state) {
        m_leds[m_currentStep]->blink();


        if (m_steps[m_currentStep].m_state) {
          m_piano->playStep(m_currentStep);
     cbc:	ldr	r7, [r5, #24]
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     cbe:	ldr	r0, [pc, #172]	; (d6c <loop+0x8d8>)
     cc0:	ldr.w	r3, [r7, r6, lsl #2]
     cc4:	lsls	r3, r3, #16
     cc6:	and.w	r3, r3, #8323072	; 0x7f0000
     cca:	orrs	r0, r3
     ccc:	bl	18a4 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     cd0:	bl	1940 <usb_midi_flush_output>
      noteOff(0, activeNote, 127);
    }

    void playStep (int step) {
      noteOn(0, notes[step], 127);
      activeNote = notes[step];
     cd4:	ldr.w	r1, [r7, r6, lsl #2]
     cd8:	str	r1, [r7, #16]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     cda:	ldr	r0, [pc, #132]	; (d60 <loop+0x8cc>)
     cdc:	bl	2c1c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ce0:	ldr	r0, [pc, #124]	; (d60 <loop+0x8cc>)
     ce2:	bl	2b7c <Print::println()>
     ce6:	ldr	r6, [r5, #32]
     ce8:	b.n	be2 <loop+0x74e>

    void doStep () {      
      m_piano->stopStep(m_currentStep);
      
      if (m_state) {
        m_leds[m_currentStep]->blink();
     cea:	ldr	r3, [r5, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cec:	ldr	r4, [pc, #120]	; (d68 <loop+0x8d4>)
     cee:	ldr.w	r7, [r5, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink () {
      digitalWrite(m_pin, !digitalRead(m_pin));
     cf2:	ldrb	r6, [r7, #0]
     cf4:	mov	r0, r6
     cf6:	bl	1624 <digitalRead>
     cfa:	clz	r1, r0
     cfe:	lsrs	r1, r1, #5
     d00:	mov	r0, r6
     d02:	bl	1618 <digitalWrite>


        if (m_steps[m_currentStep].m_state) {
     d06:	ldr	r6, [r5, #32]
     d08:	ldr	r3, [r4, #0]
     d0a:	str	r3, [sp, #8]
     d0c:	adds	r3, r5, r6
      blinking = true;
     d0e:	movs	r1, #1
     d10:	ldrb	r3, [r3, #20]
	return ret;
     d12:	ldr	r2, [sp, #8]
     d14:	strb	r1, [r7, #16]
      lastBlink = millis();  
     d16:	str	r2, [r7, #8]
     d18:	cbnz	r3, d28 <loop+0x894>
          m_piano->playStep(m_currentStep);
        }

        m_currentStep++;
     d1a:	adds	r6, #1

        if (m_currentStep > 3) {
     d1c:	cmp	r6, #3
          m_currentStep = 0;
     d1e:	itet	gt
     d20:	movgt	r3, #0

        if (m_steps[m_currentStep].m_state) {
          m_piano->playStep(m_currentStep);
        }

        m_currentStep++;
     d22:	strle	r6, [r5, #32]

        if (m_currentStep > 3) {
          m_currentStep = 0;
     d24:	strgt	r3, [r5, #32]
     d26:	b.n	b38 <loop+0x6a4>
      if (m_state) {
        m_leds[m_currentStep]->blink();


        if (m_steps[m_currentStep].m_state) {
          m_piano->playStep(m_currentStep);
     d28:	ldr	r7, [r5, #24]
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     d2a:	ldr	r0, [pc, #64]	; (d6c <loop+0x8d8>)
     d2c:	ldr.w	r3, [r7, r6, lsl #2]
     d30:	lsls	r3, r3, #16
     d32:	and.w	r3, r3, #8323072	; 0x7f0000
     d36:	orrs	r0, r3
     d38:	bl	18a4 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     d3c:	bl	1940 <usb_midi_flush_output>
     d40:	ldr.w	r1, [r7, r6, lsl #2]
     d44:	str	r1, [r7, #16]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d46:	ldr	r0, [pc, #24]	; (d60 <loop+0x8cc>)
     d48:	bl	2c1c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d4c:	ldr	r0, [pc, #16]	; (d60 <loop+0x8cc>)
     d4e:	bl	2b7c <Print::println()>
     d52:	ldr	r6, [r5, #32]
     d54:	b.n	d1a <loop+0x886>
     d56:	nop
     d58:	.word	0x1fff16e8
     d5c:	.word	0x0000401c
     d60:	.word	0x1fff0c5c
     d64:	.word	0x7f008f08
     d68:	.word	0x1fff17c0
     d6c:	.word	0x7f009f09

00000d70 <_GLOBAL__sub_I_led1>:
  led5.check();
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
}
     d70:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;
const int startStopPin = 12;

Led led1(3, LOW);
     d74:	movs	r2, #0
     d76:	movs	r1, #3
     d78:	ldr	r0, [pc, #368]	; (eec <_GLOBAL__sub_I_led1+0x17c>)
class Piano {
  private:
    int notes[4] = {38, 41, 45, 51};
    int activeNote = 38;
  public:
    Piano () {};
     d7a:	ldr	r6, [pc, #372]	; (ef0 <_GLOBAL__sub_I_led1+0x180>)
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
      m_leds[0] = leds[0];
     d7c:	ldr.w	r8, [pc, #432]	; f30 <_GLOBAL__sub_I_led1+0x1c0>
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     d80:	ldr	r4, [pc, #368]	; (ef4 <_GLOBAL__sub_I_led1+0x184>)
    unsigned long lastMillis = 0;
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
     d82:	ldr.w	fp, [pc, #432]	; f34 <_GLOBAL__sub_I_led1+0x1c4>
     d86:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
     d8a:	movs	r2, #0
     d8c:	movs	r1, #5
     d8e:	ldr	r0, [pc, #360]	; (ef8 <_GLOBAL__sub_I_led1+0x188>)
     d90:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
     d94:	movs	r2, #0
     d96:	movs	r1, #7
     d98:	ldr	r0, [pc, #352]	; (efc <_GLOBAL__sub_I_led1+0x18c>)
     d9a:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
     d9e:	movs	r2, #0
     da0:	movs	r1, #9
     da2:	ldr	r0, [pc, #348]	; (f00 <_GLOBAL__sub_I_led1+0x190>)
     da4:	bl	46c <Led::Led(int, int)>
Led led5(13, LOW);
     da8:	movs	r2, #0
     daa:	movs	r1, #13
     dac:	ldr	r0, [pc, #340]	; (f04 <_GLOBAL__sub_I_led1+0x194>)
     dae:	bl	46c <Led::Led(int, int)>
     db2:	ldr	r3, [pc, #340]	; (f08 <_GLOBAL__sub_I_led1+0x198>)
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     db4:	ldr.w	ip, [pc, #384]	; f38 <_GLOBAL__sub_I_led1+0x1c8>
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
     db8:	ldr.w	r7, [r8, #4]
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_state = state;
      m_currentStep = 0;
      m_piano = piano;
     dbc:	str	r6, [r4, #24]
     dbe:	ldmia	r3, {r0, r1, r2, r3}
     dc0:	stmia.w	r6, {r0, r1, r2, r3}
     dc4:	movs	r3, #38	; 0x26
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     dc6:	movs	r5, #0
      m_id = id;
      m_pin = pin;
     dc8:	mov.w	r9, #2
     dcc:	str	r3, [r6, #16]
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
     dce:	ldr.w	r1, [r8, #8]
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
     dd2:	str	r7, [r4, #4]
    unsigned long lastMillis = 0;
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
     dd4:	movs	r2, #120	; 0x78
     dd6:	movs	r3, #24
      m_leds[0] = leds[0];
     dd8:	ldr.w	r7, [r8]
    unsigned long lastMillis = 0;
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
     ddc:	str	r2, [r4, #36]	; 0x24
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     dde:	movs	r6, #1
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
     de0:	ldr.w	r2, [r8, #12]
    unsigned long lastMillis = 0;
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
     de4:	str	r3, [r4, #56]	; 0x38
     de6:	mov.w	sl, #0
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
     dea:	ldr.w	r3, [r8, #16]
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
     dee:	str	r1, [r4, #8]
      m_pin = pin;
      m_startStop = startStop;

      pinMode(pin, INPUT);
     df0:	mov	r0, r9
     df2:	mov	r1, r5
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     df4:	str.w	r7, [ip, #28]
    unsigned long lastMillis = 0;
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
     df8:	strd	sl, fp, [r4, #40]	; 0x28
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
     dfc:	str	r2, [r4, #12]
      m_leds[4] = leds[4];
     dfe:	str	r3, [r4, #16]
      m_id = id;
      m_pin = pin;
     e00:	mov.w	fp, #4
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
      m_leds[0] = leds[0];
     e04:	str	r7, [r4, #0]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     e06:	strb	r5, [r4, #20]
     e08:	strb	r5, [r4, #21]
     e0a:	strb	r5, [r4, #22]
     e0c:	strb	r5, [r4, #23]
    unsigned long lastMillis = 0;
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
     e0e:	str	r5, [r4, #48]	; 0x30
     e10:	str	r5, [r4, #52]	; 0x34
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_state = state;
     e12:	strb	r5, [r4, #28]
      m_currentStep = 0;
     e14:	str	r5, [r4, #32]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     e16:	str.w	r4, [ip, #32]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     e1a:	strb.w	r5, [ip, #20]
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     e1e:	stmia.w	ip, {r6, r9}
      m_startStop = startStop;

      pinMode(pin, INPUT);
     e22:	bl	1640 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     e26:	ldr	r3, [pc, #228]	; (f0c <_GLOBAL__sub_I_led1+0x19c>)
     e28:	ldr.w	r2, [r8, #4]
     e2c:	str	r2, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;

      pinMode(pin, INPUT);
     e2e:	mov	r1, r5
     e30:	mov	r0, fp
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     e32:	movs	r7, #6
      m_startStop = startStop;
     e34:	strb	r5, [r3, #20]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     e36:	str	r4, [r3, #32]
      m_id = id;
     e38:	str.w	r9, [r3]
      m_pin = pin;
     e3c:	str.w	fp, [r3, #4]
      m_startStop = startStop;

      pinMode(pin, INPUT);
     e40:	bl	1640 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     e44:	ldr	r3, [pc, #200]	; (f10 <_GLOBAL__sub_I_led1+0x1a0>)
     e46:	ldr.w	r2, [r8, #8]
     e4a:	str	r2, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;

      pinMode(pin, INPUT);
     e4c:	mov	r1, r5
     e4e:	mov	r0, r7
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     e50:	mov.w	sl, #3
      m_pin = pin;
      m_startStop = startStop;
     e54:	strb	r5, [r3, #20]
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     e56:	str	r7, [r3, #4]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     e58:	str	r4, [r3, #32]
      m_id = id;
     e5a:	str.w	sl, [r3]
      m_pin = pin;
      m_startStop = startStop;

      pinMode(pin, INPUT);
     e5e:	bl	1640 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     e62:	ldr	r3, [pc, #176]	; (f14 <_GLOBAL__sub_I_led1+0x1a4>)
     e64:	ldr.w	r1, [r8, #12]
     e68:	str	r1, [r3, #28]
      m_id = id;
      m_pin = pin;
     e6a:	movs	r2, #8
      m_startStop = startStop;

      pinMode(pin, INPUT);
     e6c:	mov	r0, r2
     e6e:	mov	r1, r5
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     e70:	strb	r5, [r3, #20]
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     e72:	str	r2, [r3, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     e74:	str.w	fp, [r3]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     e78:	str	r4, [r3, #32]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;

      pinMode(pin, INPUT);
     e7a:	bl	1640 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     e7e:	ldr	r3, [pc, #152]	; (f18 <_GLOBAL__sub_I_led1+0x1a8>)
     e80:	ldr.w	r2, [r8, #16]
     e84:	str	r2, [r3, #28]
      m_id = id;
     e86:	movs	r1, #5
      m_pin = pin;
     e88:	movs	r2, #10
      m_startStop = startStop;

      pinMode(pin, INPUT);
     e8a:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     e8c:	str	r1, [r3, #0]
      m_pin = pin;
      m_startStop = startStop;

      pinMode(pin, INPUT);
     e8e:	mov	r1, r5
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     e90:	strb	r5, [r3, #20]
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     e92:	str	r2, [r3, #4]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     e94:	str	r4, [r3, #32]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;

      pinMode(pin, INPUT);
     e96:	bl	1640 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     e9a:	ldr	r3, [pc, #128]	; (f1c <_GLOBAL__sub_I_led1+0x1ac>)
     e9c:	ldr.w	r2, [r8, #16]
      m_id = id;
     ea0:	str	r7, [r3, #0]
      m_pin = pin;
     ea2:	movs	r7, #12
      m_startStop = startStop;

      pinMode(pin, INPUT);
     ea4:	mov	r0, r7
     ea6:	mov	r1, r5
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     ea8:	str	r2, [r3, #28]
      m_id = id;
      m_pin = pin;
     eaa:	str	r7, [r3, #4]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     eac:	str	r4, [r3, #32]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     eae:	strb	r6, [r3, #20]

      pinMode(pin, INPUT);
     eb0:	bl	1640 <pinMode>
    int m_lastValue;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType): m_sequence(sequence) {
     eb4:	ldr	r0, [pc, #104]	; (f20 <_GLOBAL__sub_I_led1+0x1b0>)
     eb6:	ldr	r3, [pc, #108]	; (f24 <_GLOBAL__sub_I_led1+0x1b4>)
     eb8:	ldr	r1, [pc, #108]	; (f28 <_GLOBAL__sub_I_led1+0x1b8>)
     eba:	ldr	r2, [pc, #112]	; (f2c <_GLOBAL__sub_I_led1+0x1bc>)
      m_pin = pin;
      m_knobType = knobType;
     ebc:	strb	r5, [r0, #16]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType): m_sequence(sequence) {
      m_pin = pin;
     ebe:	mov.w	ip, #14
     ec2:	mov.w	lr, #15
     ec6:	movs	r7, #16
     ec8:	movs	r5, #17
     eca:	strb.w	ip, [r0]
     ece:	strb.w	lr, [r1]
     ed2:	strb	r7, [r2, #0]
     ed4:	strb	r5, [r3, #0]
      m_knobType = knobType;
     ed6:	strb.w	r9, [r3, #16]
    int m_lastValue;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType): m_sequence(sequence) {
     eda:	str	r4, [r3, #12]
     edc:	str	r4, [r0, #12]
      m_pin = pin;
      m_knobType = knobType;
     ede:	strb	r6, [r1, #16]
    int m_lastValue;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType): m_sequence(sequence) {
     ee0:	str	r4, [r1, #12]
     ee2:	str	r4, [r2, #12]
      m_pin = pin;
      m_knobType = knobType;
     ee4:	strb.w	sl, [r2, #16]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType): m_sequence(sequence) {
      m_pin = pin;
     ee8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eec:	.word	0x1fff1614
     ef0:	.word	0x1fff1770
     ef4:	.word	0x1fff16e8
     ef8:	.word	0x1fff15c4
     efc:	.word	0x1fff15d8
     f00:	.word	0x1fff15ec
     f04:	.word	0x1fff1600
     f08:	.word	0x00003fac
     f0c:	.word	0x1fff169c
     f10:	.word	0x1fff16c0
     f14:	.word	0x1fff1784
     f18:	.word	0x1fff1728
     f1c:	.word	0x1fff174c
     f20:	.word	0x1fff1664
     f24:	.word	0x1fff1650
     f28:	.word	0x1fff1628
     f2c:	.word	0x1fff163c
     f30:	.word	0x1fff0c40
     f34:	.word	0x407f4000
     f38:	.word	0x1fff1678

00000f3c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     f3c:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
     f3e:	ldr	r5, [pc, #60]	; (f7c <usb_serial_getchar+0x40>)
     f40:	ldr	r0, [r5, #0]
     f42:	cbz	r0, f64 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
     f44:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
     f46:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     f48:	adds	r1, r0, r3
     f4a:	adds	r3, #1
	if (i >= rx_packet->len) {
     f4c:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     f4e:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
     f50:	bcs.n	f58 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
     f52:	strh	r3, [r0, #2]
	}
	return c;
     f54:	mov	r0, r4
}
     f56:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
     f58:	bl	1de8 <usb_free>
		rx_packet = NULL;
     f5c:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
     f5e:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
     f60:	str	r3, [r5, #0]
     f62:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f64:	ldr	r3, [pc, #24]	; (f80 <usb_serial_getchar+0x44>)
     f66:	ldrb	r3, [r3, #0]
     f68:	cbz	r3, f76 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     f6a:	movs	r0, #2
     f6c:	bl	1e34 <usb_rx>
     f70:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
     f72:	cmp	r0, #0
     f74:	bne.n	f44 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f76:	mov.w	r0, #4294967295
     f7a:	pop	{r3, r4, r5, pc}
     f7c:	.word	0x1fff17b4
     f80:	.word	0x1fff1914

00000f84 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
     f84:	push	{r4, lr}
	if (!rx_packet) {
     f86:	ldr	r4, [pc, #36]	; (fac <usb_serial_peekchar+0x28>)
     f88:	ldr	r0, [r4, #0]
     f8a:	cbz	r0, f94 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
     f8c:	ldrh	r3, [r0, #2]
     f8e:	add	r0, r3
     f90:	ldrb	r0, [r0, #8]
}
     f92:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f94:	ldr	r3, [pc, #24]	; (fb0 <usb_serial_peekchar+0x2c>)
     f96:	ldrb	r3, [r3, #0]
     f98:	cbz	r3, fa6 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     f9a:	movs	r0, #2
     f9c:	bl	1e34 <usb_rx>
     fa0:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
     fa2:	cmp	r0, #0
     fa4:	bne.n	f8c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     fa6:	mov.w	r0, #4294967295
     faa:	pop	{r4, pc}
     fac:	.word	0x1fff17b4
     fb0:	.word	0x1fff1914

00000fb4 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     fb4:	ldr	r3, [pc, #16]	; (fc8 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
     fb6:	ldr	r2, [pc, #20]	; (fcc <usb_serial_available+0x18>)
     fb8:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
     fba:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     fbc:	cbz	r3, fc6 <usb_serial_available+0x12>
     fbe:	ldrh	r2, [r3, #0]
     fc0:	ldrh	r3, [r3, #2]
     fc2:	subs	r3, r2, r3
     fc4:	add	r0, r3
	return count;
}
     fc6:	bx	lr
     fc8:	.word	0x1fff17b4
     fcc:	.word	0x1fff1da8

00000fd0 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
     fd0:	ldr	r3, [pc, #44]	; (1000 <usb_serial_flush_input+0x30>)
     fd2:	ldrb	r3, [r3, #0]
     fd4:	cbz	r3, ffe <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
     fd6:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
     fd8:	ldr	r4, [pc, #40]	; (1004 <usb_serial_flush_input+0x34>)
     fda:	ldr	r0, [r4, #0]
     fdc:	cbz	r0, ff2 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
     fde:	bl	1de8 <usb_free>
		rx_packet = NULL;
     fe2:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     fe4:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
     fe6:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     fe8:	bl	1e34 <usb_rx>
		if (!rx) break;
     fec:	cbz	r0, ffc <usb_serial_flush_input+0x2c>
		usb_free(rx);
     fee:	bl	1de8 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     ff2:	movs	r0, #2
     ff4:	bl	1e34 <usb_rx>
		if (!rx) break;
     ff8:	cmp	r0, #0
     ffa:	bne.n	fee <usb_serial_flush_input+0x1e>
     ffc:	pop	{r4, pc}
     ffe:	bx	lr
    1000:	.word	0x1fff1914
    1004:	.word	0x1fff17b4

00001008 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1008:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    100c:	ldr.w	r9, [pc, #248]	; 1108 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1010:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1012:	movs	r2, #1
    1014:	strb.w	r2, [r9]
	while (size > 0) {
    1018:	str	r1, [sp, #4]
    101a:	cbz	r1, 1078 <usb_serial_write+0x70>
    101c:	ldr.w	r8, [pc, #236]	; 110c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1020:	ldr	r7, [pc, #212]	; (10f8 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1022:	ldr	r6, [sp, #4]
    1024:	mov	fp, r0
		if (!tx_packet) {
    1026:	ldr.w	r0, [r8]
    102a:	cbz	r0, 109a <usb_serial_write+0x92>
    102c:	ldr	r5, [pc, #204]	; (10fc <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    102e:	ldrh	r4, [r0, #2]
    1030:	rsb	r1, r4, #64	; 0x40
    1034:	cmp	r1, r6
    1036:	it	cs
    1038:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    103a:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    103e:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1040:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1044:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1046:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1048:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    104c:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1050:	cbz	r1, 1068 <usb_serial_write+0x60>
    1052:	subs	r4, #1
    1054:	add	r2, r4
    1056:	add	r1, fp
    1058:	ldrb.w	r4, [fp], #1
    105c:	strb.w	r4, [r2, #1]!
    1060:	cmp	fp, r1
    1062:	bne.n	1058 <usb_serial_write+0x50>
    1064:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1068:	cmp.w	lr, #63	; 0x3f
    106c:	bhi.n	1086 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    106e:	ldr	r2, [pc, #144]	; (1100 <usb_serial_write+0xf8>)
    1070:	movs	r1, #5
    1072:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1074:	cmp	r6, #0
    1076:	bne.n	1026 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1078:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    107a:	movs	r3, #0
    107c:	strb.w	r3, [r9]
	return ret;
}
    1080:	add	sp, #12
    1082:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1086:	movs	r2, #64	; 0x40
    1088:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    108a:	mov	r1, r0
    108c:	movs	r0, #3
    108e:	bl	1f84 <usb_tx>
			tx_packet = NULL;
    1092:	movs	r2, #0
    1094:	str.w	r2, [r8]
    1098:	b.n	106e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    109a:	ldrb	r2, [r7, #0]
    109c:	cbz	r2, 10e8 <usb_serial_write+0xe0>
    109e:	ldr	r4, [pc, #100]	; (1104 <usb_serial_write+0xfc>)
    10a0:	ldr	r5, [pc, #88]	; (10fc <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    10a2:	mov.w	sl, #1
    10a6:	b.n	10b8 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    10a8:	subs	r4, #1
    10aa:	beq.n	10da <usb_serial_write+0xd2>
    10ac:	ldrb	r2, [r5, #0]
    10ae:	cbnz	r2, 10da <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    10b0:	bl	2a88 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    10b4:	ldrb	r2, [r7, #0]
    10b6:	cbz	r2, 10e8 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    10b8:	movs	r0, #3
    10ba:	bl	1e70 <usb_tx_packet_count>
    10be:	cmp	r0, #7
    10c0:	bhi.n	10a8 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    10c2:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    10c6:	bl	1da8 <usb_malloc>
    10ca:	str.w	r0, [r8]
					if (tx_packet) break;
    10ce:	cmp	r0, #0
    10d0:	bne.n	102e <usb_serial_write+0x26>
					tx_noautoflush = 0;
    10d2:	ldr	r3, [pc, #52]	; (1108 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    10d4:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    10d6:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    10d8:	bne.n	10ac <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    10da:	movs	r3, #1
					return -1;
    10dc:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    10e0:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    10e2:	add	sp, #12
    10e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    10e8:	movs	r3, #0
					return -1;
    10ea:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    10ee:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    10f2:	add	sp, #12
    10f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10f8:	.word	0x1fff1914
    10fc:	.word	0x1fff17b0
    1100:	.word	0x1fff17a8
    1104:	.word	0x00014821
    1108:	.word	0x1fff17a9
    110c:	.word	0x1fff17ac

00001110 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1110:	push	{lr}
    1112:	sub	sp, #12
    1114:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1116:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1118:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    111c:	mov	r0, r3
    111e:	bl	1008 <usb_serial_write>
}
    1122:	add	sp, #12
    1124:	ldr.w	pc, [sp], #4

00001128 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1128:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    112a:	ldr	r5, [pc, #56]	; (1164 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    112c:	ldr	r4, [pc, #56]	; (1168 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    112e:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1130:	movs	r3, #1
    1132:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1134:	cbz	r0, 1142 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1136:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1138:	movs	r3, #0
    113a:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    113c:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1140:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1142:	ldr	r3, [pc, #40]	; (116c <usb_serial_write_buffer_free+0x44>)
    1144:	ldrb	r3, [r3, #0]
    1146:	cbnz	r3, 114e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1148:	movs	r0, #0
    114a:	strb	r0, [r4, #0]
			return 0;
    114c:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    114e:	movs	r0, #3
    1150:	bl	1e70 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1154:	cmp	r0, #7
    1156:	bhi.n	1148 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1158:	bl	1da8 <usb_malloc>
    115c:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    115e:	cmp	r0, #0
    1160:	bne.n	1136 <usb_serial_write_buffer_free+0xe>
    1162:	b.n	1148 <usb_serial_write_buffer_free+0x20>
    1164:	.word	0x1fff17ac
    1168:	.word	0x1fff17a9
    116c:	.word	0x1fff1914

00001170 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1170:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1172:	ldr	r3, [pc, #68]	; (11b8 <usb_serial_flush_output+0x48>)
    1174:	ldrb	r3, [r3, #0]
    1176:	cbz	r3, 119c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1178:	ldr	r6, [pc, #64]	; (11bc <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    117a:	ldr	r5, [pc, #68]	; (11c0 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    117c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    117e:	movs	r7, #1
    1180:	strb	r7, [r5, #0]
	if (tx_packet) {
    1182:	cbz	r4, 119e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1184:	ldr	r2, [pc, #60]	; (11c4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1186:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1188:	movs	r7, #0
    118a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    118c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    118e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1190:	movs	r0, #3
    1192:	bl	1f84 <usb_tx>
		tx_packet = NULL;
    1196:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1198:	movs	r3, #0
    119a:	strb	r3, [r5, #0]
    119c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    119e:	bl	1da8 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    11a2:	ldr	r3, [pc, #32]	; (11c4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    11a4:	cbz	r0, 11b2 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    11a6:	mov	r1, r0
    11a8:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    11aa:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    11ac:	bl	1f84 <usb_tx>
    11b0:	b.n	1198 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    11b2:	strb	r7, [r3, #0]
    11b4:	b.n	1198 <usb_serial_flush_output+0x28>
    11b6:	nop
    11b8:	.word	0x1fff1914
    11bc:	.word	0x1fff17ac
    11c0:	.word	0x1fff17a9
    11c4:	.word	0x1fff17a8

000011c8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    11c8:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    11ca:	ldr	r3, [pc, #56]	; (1204 <usb_serial_flush_callback+0x3c>)
    11cc:	ldrb	r3, [r3, #0]
    11ce:	cbnz	r3, 11ee <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    11d0:	ldr	r4, [pc, #52]	; (1208 <usb_serial_flush_callback+0x40>)
    11d2:	ldr	r1, [r4, #0]
    11d4:	cbz	r1, 11f0 <usb_serial_flush_callback+0x28>
    11d6:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    11da:	ldrh	r3, [r1, #2]
    11dc:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    11de:	movs	r0, #3
    11e0:	bl	1f84 <usb_tx>
		tx_packet = NULL;
    11e4:	str	r5, [r4, #0]
    11e6:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    11e8:	ldr	r3, [pc, #32]	; (120c <usb_serial_flush_callback+0x44>)
    11ea:	movs	r2, #1
    11ec:	strb	r2, [r3, #0]
    11ee:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    11f0:	bl	1da8 <usb_malloc>
		if (tx) {
    11f4:	cmp	r0, #0
    11f6:	beq.n	11e8 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    11f8:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    11fa:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    11fe:	movs	r0, #3
    1200:	b.w	1f84 <usb_tx>
    1204:	.word	0x1fff17a9
    1208:	.word	0x1fff17ac
    120c:	.word	0x1fff17a8

00001210 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1210:	ldr	r2, [pc, #220]	; (12f0 <wait_for_cal+0xe0>)
    1212:	ldr	r1, [pc, #224]	; (12f4 <wait_for_cal+0xe4>)
    1214:	ldr	r3, [r2, #0]
    1216:	lsls	r3, r3, #24
    1218:	bmi.n	1214 <wait_for_cal+0x4>
    121a:	ldr	r3, [r1, #0]
    121c:	ands.w	r3, r3, #128	; 0x80
    1220:	bne.n	1214 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1222:	cpsid	i
	if (calibrating) {
    1224:	ldr	r1, [pc, #208]	; (12f8 <wait_for_cal+0xe8>)
    1226:	ldrb	r2, [r1, #0]
    1228:	cmp	r2, #0
    122a:	beq.n	12ec <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    122c:	ldr	r2, [pc, #204]	; (12fc <wait_for_cal+0xec>)
    122e:	ldr	r0, [pc, #208]	; (1300 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1230:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1232:	ldr	r4, [pc, #208]	; (1304 <wait_for_cal+0xf4>)
    1234:	ldr	r7, [r2, #0]
    1236:	ldr	r6, [r0, #0]
    1238:	ldr	r5, [r4, #0]
    123a:	ldr	r4, [r2, #12]
    123c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    123e:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1240:	adds	r2, #20
    1242:	ldr	r0, [r0, #0]
    1244:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1246:	ldr	r7, [pc, #192]	; (1308 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1248:	add	r5, r6
    124a:	add	r4, r5
    124c:	add	r0, r4
    124e:	add	r2, r0
    1250:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1254:	ldr	r6, [pc, #180]	; (130c <wait_for_cal+0xfc>)
    1256:	ldr	r0, [pc, #184]	; (1310 <wait_for_cal+0x100>)
    1258:	ldr	r5, [pc, #184]	; (1314 <wait_for_cal+0x104>)
    125a:	ldr	r4, [pc, #188]	; (1318 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    125c:	orr.w	r2, r2, #32768	; 0x8000
    1260:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1262:	ldr	r7, [r6, #0]
    1264:	ldr	r6, [r0, #0]
    1266:	ldr	r5, [r5, #0]
    1268:	ldr	r2, [pc, #176]	; (131c <wait_for_cal+0x10c>)
    126a:	ldr	r4, [r4, #0]
    126c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    126e:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1270:	ldr	r0, [r0, #0]
    1272:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1274:	ldr	r7, [pc, #168]	; (1320 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1276:	add	r5, r6
    1278:	add	r4, r5
    127a:	add	r0, r4
    127c:	add	r2, r0
    127e:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1282:	ldr	r6, [pc, #160]	; (1324 <wait_for_cal+0x114>)
    1284:	ldr	r0, [pc, #160]	; (1328 <wait_for_cal+0x118>)
    1286:	ldr	r5, [pc, #164]	; (132c <wait_for_cal+0x11c>)
    1288:	ldr	r4, [pc, #164]	; (1330 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    128a:	orr.w	r2, r2, #32768	; 0x8000
    128e:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1290:	ldr	r7, [r6, #0]
    1292:	ldr	r6, [r0, #0]
    1294:	ldr	r5, [r5, #0]
    1296:	ldr	r2, [pc, #156]	; (1334 <wait_for_cal+0x124>)
    1298:	ldr	r4, [r4, #0]
    129a:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    129c:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    129e:	ldr	r0, [r0, #0]
    12a0:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    12a2:	ldr	r7, [pc, #148]	; (1338 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    12a4:	add	r5, r6
    12a6:	add	r4, r5
    12a8:	add	r0, r4
    12aa:	add	r2, r0
    12ac:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    12b0:	ldr	r6, [pc, #136]	; (133c <wait_for_cal+0x12c>)
    12b2:	ldr	r0, [pc, #140]	; (1340 <wait_for_cal+0x130>)
    12b4:	ldr	r5, [pc, #140]	; (1344 <wait_for_cal+0x134>)
    12b6:	ldr	r4, [pc, #144]	; (1348 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    12b8:	orr.w	r2, r2, #32768	; 0x8000
    12bc:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    12be:	ldr	r7, [r6, #0]
    12c0:	ldr	r6, [r0, #0]
    12c2:	ldr	r5, [r5, #0]
    12c4:	ldr	r2, [pc, #132]	; (134c <wait_for_cal+0x13c>)
    12c6:	ldr	r4, [r4, #0]
    12c8:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    12ca:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    12cc:	ldr	r0, [r0, #0]
    12ce:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    12d0:	add	r5, r6
    12d2:	add	r4, r5
    12d4:	add	r0, r4
    12d6:	add	r2, r0
    12d8:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    12dc:	ldr	r0, [pc, #112]	; (1350 <wait_for_cal+0x140>)
    12de:	orr.w	r2, r2, #32768	; 0x8000
    12e2:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    12e4:	strb	r3, [r1, #0]
	}
	__enable_irq();
    12e6:	cpsie	i
}
    12e8:	pop	{r4, r5, r6, r7}
    12ea:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    12ec:	cpsie	i
    12ee:	bx	lr
    12f0:	.word	0x4003b024
    12f4:	.word	0x400bb024
    12f8:	.word	0x1fff17ba
    12fc:	.word	0x4003b038
    1300:	.word	0x4003b03c
    1304:	.word	0x4003b040
    1308:	.word	0x4003b02c
    130c:	.word	0x4003b058
    1310:	.word	0x4003b05c
    1314:	.word	0x4003b060
    1318:	.word	0x4003b064
    131c:	.word	0x4003b06c
    1320:	.word	0x4003b030
    1324:	.word	0x400bb038
    1328:	.word	0x400bb03c
    132c:	.word	0x400bb040
    1330:	.word	0x400bb044
    1334:	.word	0x400bb04c
    1338:	.word	0x400bb02c
    133c:	.word	0x400bb058
    1340:	.word	0x400bb05c
    1344:	.word	0x400bb060
    1348:	.word	0x400bb064
    134c:	.word	0x400bb06c
    1350:	.word	0x400bb030

00001354 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1354:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1356:	ldr	r0, [pc, #164]	; (13fc <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1358:	ldr	r2, [pc, #164]	; (1400 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    135a:	ldr	r3, [pc, #168]	; (1404 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    135c:	ldr	r5, [pc, #168]	; (1408 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    135e:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1360:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1362:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1364:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1366:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1368:	ldr	r4, [pc, #160]	; (140c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    136a:	cmp	r3, #8
    136c:	beq.n	13d0 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    136e:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1370:	ldr	r0, [pc, #156]	; (1410 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1372:	ldr	r1, [pc, #160]	; (1414 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1374:	beq.n	13e6 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1376:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1378:	ite	eq
    137a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    137c:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    137e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1380:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1382:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1384:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1386:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1388:	ldr	r3, [pc, #140]	; (1418 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    138a:	ldr	r1, [pc, #144]	; (141c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    138c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    138e:	ldr	r2, [pc, #144]	; (1420 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1390:	cbz	r3, 13c2 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1392:	movs	r3, #1
    1394:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1396:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1398:	ldr	r3, [pc, #136]	; (1424 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    139a:	ldr	r1, [pc, #140]	; (1428 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    139c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    139e:	ldr	r2, [pc, #140]	; (142c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    13a0:	cmp	r3, #1
    13a2:	bls.n	13f2 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    13a4:	cmp	r3, #4
    13a6:	bls.n	13c8 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    13a8:	cmp	r3, #8
    13aa:	bls.n	13ea <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    13ac:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    13ae:	ite	ls
    13b0:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    13b2:	movhi	r3, #135	; 0x87
    13b4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    13b6:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    13b8:	ldr	r3, [pc, #116]	; (1430 <analog_init+0xdc>)
    13ba:	movs	r2, #1
    13bc:	strb	r2, [r3, #0]
}
    13be:	pop	{r4, r5}
    13c0:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    13c2:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    13c4:	str	r3, [r2, #0]
    13c6:	b.n	1398 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    13c8:	movs	r3, #132	; 0x84
    13ca:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    13cc:	str	r3, [r2, #0]
    13ce:	b.n	13b8 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    13d0:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13d4:	ldr	r1, [pc, #60]	; (1414 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    13d6:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    13d8:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13da:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    13dc:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13de:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    13e0:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13e2:	str	r3, [r1, #0]
    13e4:	b.n	1388 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    13e6:	movs	r2, #57	; 0x39
    13e8:	b.n	13da <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    13ea:	movs	r3, #133	; 0x85
    13ec:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    13ee:	str	r3, [r2, #0]
    13f0:	b.n	13b8 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    13f2:	movs	r3, #128	; 0x80
    13f4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    13f6:	str	r3, [r2, #0]
    13f8:	b.n	13b8 <analog_init+0x64>
    13fa:	nop
    13fc:	.word	0x40074000
    1400:	.word	0x40074001
    1404:	.word	0x1fff0c54
    1408:	.word	0x4003b008
    140c:	.word	0x4003b00c
    1410:	.word	0x400bb008
    1414:	.word	0x400bb00c
    1418:	.word	0x1fff17bd
    141c:	.word	0x4003b020
    1420:	.word	0x400bb020
    1424:	.word	0x1fff0c55
    1428:	.word	0x4003b024
    142c:	.word	0x400bb024
    1430:	.word	0x1fff17ba

00001434 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1434:	cmp	r0, #71	; 0x47
    1436:	bhi.n	1498 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1438:	ldr	r3, [pc, #204]	; (1508 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    143a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    143e:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1440:	cmp	r6, #255	; 0xff
    1442:	beq.n	149c <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1444:	ldr	r3, [pc, #196]	; (150c <analogRead+0xd8>)
    1446:	ldrb	r3, [r3, #0]
    1448:	cmp	r3, #0
    144a:	bne.n	14a2 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    144c:	lsls	r2, r6, #24
    144e:	bmi.n	14aa <analogRead+0x76>
#endif

	__disable_irq();
    1450:	cpsid	i
    1452:	ldr	r5, [pc, #188]	; (1510 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1454:	ldr	r4, [pc, #188]	; (1514 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1456:	mov	r7, r5
    1458:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    145a:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    145c:	strb	r3, [r5, #0]
	__enable_irq();
    145e:	cpsie	i
	while (1) {
		__disable_irq();
    1460:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1462:	ldr	r3, [r4, #0]
    1464:	lsls	r3, r3, #24
    1466:	bmi.n	1482 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1468:	ldrb	r3, [r7, #0]
    146a:	cbnz	r3, 1474 <analogRead+0x40>
    146c:	b.n	1458 <analogRead+0x24>
    146e:	ldrb	r3, [r5, #0]
    1470:	cmp	r3, #0
    1472:	beq.n	1458 <analogRead+0x24>
		__enable_irq();
    1474:	cpsie	i
		yield();
    1476:	bl	2a88 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    147a:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    147c:	ldr	r3, [r4, #0]
    147e:	lsls	r0, r3, #24
    1480:	bpl.n	146e <analogRead+0x3a>
			result = ADC0_RA;
    1482:	ldr	r3, [pc, #148]	; (1518 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1484:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1486:	movs	r2, #0
    1488:	strb	r2, [r5, #0]
			__enable_irq();
    148a:	cpsie	i
			result >>= analog_right_shift;
    148c:	ldr	r2, [pc, #140]	; (151c <analogRead+0xe8>)
    148e:	ldrb	r0, [r2, #0]
    1490:	asr.w	r0, r3, r0
			return result;
    1494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1498:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    149a:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    149c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    149e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    14a2:	bl	1210 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    14a6:	lsls	r2, r6, #24
    14a8:	bpl.n	1450 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    14aa:	cpsid	i
    14ac:	ldr	r5, [pc, #112]	; (1520 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    14ae:	ldr.w	r8, [pc, #124]	; 152c <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    14b2:	ldr	r4, [pc, #112]	; (1524 <analogRead+0xf0>)
    14b4:	and.w	r7, r6, #64	; 0x40
    14b8:	uxtb	r7, r7
    14ba:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    14be:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    14c2:	cbz	r7, 14fc <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    14c4:	bic.w	r3, r3, #16
    14c8:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    14cc:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    14ce:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    14d0:	ldr	r2, [pc, #76]	; (1520 <analogRead+0xec>)
    14d2:	strb	r3, [r5, #0]
	__enable_irq();
    14d4:	cpsie	i
	while (1) {
		__disable_irq();
    14d6:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    14d8:	ldr	r3, [r4, #0]
    14da:	lsls	r1, r3, #24
    14dc:	bmi.n	14f8 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    14de:	ldrb	r3, [r2, #0]
    14e0:	cbnz	r3, 14ea <analogRead+0xb6>
    14e2:	b.n	14be <analogRead+0x8a>
    14e4:	ldrb	r3, [r5, #0]
    14e6:	cmp	r3, #0
    14e8:	beq.n	14be <analogRead+0x8a>
		__enable_irq();
    14ea:	cpsie	i
		yield();
    14ec:	bl	2a88 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    14f0:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    14f2:	ldr	r3, [r4, #0]
    14f4:	lsls	r3, r3, #24
    14f6:	bpl.n	14e4 <analogRead+0xb0>
			result = ADC1_RA;
    14f8:	ldr	r3, [pc, #44]	; (1528 <analogRead+0xf4>)
    14fa:	b.n	1484 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    14fc:	orr.w	r3, r3, #16
    1500:	str.w	r3, [r8]
    1504:	b.n	14cc <analogRead+0x98>
    1506:	nop
    1508:	.word	0x00004048
    150c:	.word	0x1fff17ba
    1510:	.word	0x1fff17bc
    1514:	.word	0x4003b000
    1518:	.word	0x4003b010
    151c:	.word	0x1fff17b9
    1520:	.word	0x1fff17bb
    1524:	.word	0x400bb000
    1528:	.word	0x400bb010
    152c:	.word	0x400bb00c

00001530 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1530:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1532:	ldr	r3, [pc, #68]	; (1578 <digitalWrite.part.1+0x48>)
    1534:	ldr.w	r2, [r3, r0, lsl #3]
    1538:	ldrb.w	r4, [r2, #640]	; 0x280
    153c:	cbz	r4, 154c <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    153e:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1540:	cbz	r1, 1562 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1542:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1546:	ldr.w	r4, [sp], #4
    154a:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    154c:	add.w	r3, r3, r0, lsl #3
    1550:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1552:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1554:	cbnz	r1, 156c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1556:	bic.w	r2, r2, #2
    155a:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    155c:	ldr.w	r4, [sp], #4
    1560:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1562:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1566:	ldr.w	r4, [sp], #4
    156a:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    156c:	orr.w	r2, r2, #3
    1570:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1572:	ldr.w	r4, [sp], #4
    1576:	bx	lr
    1578:	.word	0x00004090

0000157c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    157c:	ldr	r2, [pc, #112]	; (15f0 <pinMode.part.2+0x74>)
    157e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1582:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1584:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1586:	beq.n	15ac <pinMode.part.2+0x30>
    1588:	cmp	r1, #4
    158a:	beq.n	15c4 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    158c:	ldr.w	r0, [r2, r0, lsl #3]
    1590:	movs	r2, #0
    1592:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1596:	cbz	r1, 15a4 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1598:	cmp	r1, #2
    159a:	beq.n	15de <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    159c:	cmp	r1, #3
    159e:	beq.n	15e6 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    15a0:	str	r2, [r3, #0]
    15a2:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    15a4:	mov.w	r2, #256	; 0x100
    15a8:	str	r2, [r3, #0]
    15aa:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    15ac:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15b0:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    15b4:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15b8:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    15ba:	ldr	r2, [r3, #0]
    15bc:	bic.w	r2, r2, #32
    15c0:	str	r2, [r3, #0]
    15c2:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    15c4:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15c8:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    15cc:	movs	r0, #1
    15ce:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15d2:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    15d4:	ldr	r2, [r3, #0]
    15d6:	orr.w	r2, r2, #32
    15da:	str	r2, [r3, #0]
    15dc:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    15de:	movw	r2, #259	; 0x103
    15e2:	str	r2, [r3, #0]
    15e4:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    15e6:	mov.w	r2, #258	; 0x102
    15ea:	str	r2, [r3, #0]
    15ec:	bx	lr
    15ee:	nop
    15f0:	.word	0x00004090

000015f4 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    15f4:	push	{r4, r5}
	RTC_SR = 0;
    15f6:	ldr	r3, [pc, #20]	; (160c <rtc_set+0x18>)
	RTC_TPR = 0;
    15f8:	ldr	r5, [pc, #20]	; (1610 <rtc_set+0x1c>)
	RTC_TSR = t;
    15fa:	ldr	r4, [pc, #24]	; (1614 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    15fc:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    15fe:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1600:	str	r2, [r3, #0]
	RTC_TPR = 0;
    1602:	str	r2, [r5, #0]
	RTC_TSR = t;
    1604:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    1606:	str	r1, [r3, #0]
}
    1608:	pop	{r4, r5}
    160a:	bx	lr
    160c:	.word	0x4003d014
    1610:	.word	0x4003d004
    1614:	.word	0x4003d000

00001618 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    1618:	cmp	r0, #63	; 0x3f
    161a:	bhi.n	1620 <digitalWrite+0x8>
    161c:	b.w	1530 <digitalWrite.part.1>
    1620:	bx	lr
    1622:	nop

00001624 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1624:	cmp	r0, #63	; 0x3f
    1626:	bhi.n	1636 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    1628:	ldr	r3, [pc, #16]	; (163c <digitalRead+0x18>)
    162a:	ldr.w	r3, [r3, r0, lsl #3]
    162e:	ldrb.w	r0, [r3, #512]	; 0x200
    1632:	uxtb	r0, r0
    1634:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1636:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    1638:	bx	lr
    163a:	nop
    163c:	.word	0x00004090

00001640 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1640:	cmp	r0, #63	; 0x3f
    1642:	bhi.n	1648 <pinMode+0x8>
    1644:	b.w	157c <pinMode.part.2>
    1648:	bx	lr
    164a:	nop

0000164c <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    164c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1650:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1652:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1654:	ldr	r7, [pc, #136]	; (16e0 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1656:	ldr	r3, [pc, #140]	; (16e4 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1658:	ldr	r2, [pc, #140]	; (16e8 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    165a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    165c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    165e:	ldr	r2, [r2, #0]
	__enable_irq();
    1660:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1662:	lsls	r2, r2, #5
    1664:	bpl.n	166c <delay+0x20>
    1666:	cmp	r3, #50	; 0x32
    1668:	it	hi
    166a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    166c:	cbz	r5, 16dc <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    166e:	rsb	r3, r3, #179200	; 0x2bc00
    1672:	addw	r3, r3, #799	; 0x31f
    1676:	ldr	r6, [pc, #116]	; (16ec <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1678:	ldr.w	r9, [pc, #104]	; 16e4 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    167c:	ldr.w	r8, [pc, #104]	; 16e8 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1680:	lsrs	r3, r3, #2
    1682:	mov.w	r2, #1000	; 0x3e8
    1686:	umull	r1, r3, r6, r3
    168a:	mul.w	r4, r2, r4
    168e:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1692:	cpsid	i
	current = SYST_CVR;
    1694:	ldr.w	r1, [r9]
	count = systick_millis_count;
    1698:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    169a:	ldr.w	lr, [r8]
	__enable_irq();
    169e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    16a0:	rsb	r3, r1, #179200	; 0x2bc00
    16a4:	addw	r3, r3, #799	; 0x31f
    16a8:	lsrs	r3, r3, #2
    16aa:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    16ae:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    16b2:	rsb	r3, r4, r3, lsr #2
    16b6:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    16ba:	beq.n	16c2 <delay+0x76>
    16bc:	cmp	r1, #50	; 0x32
    16be:	it	hi
    16c0:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    16c2:	mla	r3, r0, r2, r3
    16c6:	cmp.w	r3, #1000	; 0x3e8
    16ca:	bcc.n	16d6 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    16cc:	subs	r5, #1
    16ce:	beq.n	16dc <delay+0x90>
				start += 1000;
    16d0:	add.w	r4, r4, #1000	; 0x3e8
    16d4:	b.n	1692 <delay+0x46>
			}
			yield();
    16d6:	bl	2a88 <yield>
		}
    16da:	b.n	1692 <delay+0x46>
    16dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    16e0:	.word	0x1fff17c0
    16e4:	.word	0xe000e018
    16e8:	.word	0xe000ed04
    16ec:	.word	0x16c16c17

000016f0 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    16f0:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    16f2:	ldr	r3, [pc, #312]	; (182c <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    16f4:	ldr	r0, [pc, #312]	; (1830 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    16f6:	ldr.w	ip, [pc, #348]	; 1854 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    16fa:	ldr	r4, [pc, #312]	; (1834 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    16fc:	ldr	r1, [pc, #312]	; (1838 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    16fe:	ldr.w	lr, [pc, #344]	; 1858 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    1702:	ldr	r6, [pc, #312]	; (183c <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    1704:	ldr	r5, [pc, #312]	; (1840 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    1706:	ldr	r7, [pc, #316]	; (1844 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1708:	mov.w	r2, #134217728	; 0x8000000
    170c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    170e:	mov.w	r2, #268435456	; 0x10000000
    1712:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1714:	mov.w	r2, #536870912	; 0x20000000
    1718:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    171a:	mov.w	r2, #1073741824	; 0x40000000
    171e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1720:	mov.w	r2, #2147483648	; 0x80000000
    1724:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1726:	movs	r2, #0
    1728:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    172a:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    172c:	movw	r0, #61439	; 0xefff
    1730:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1734:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1738:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    173a:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    173e:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1740:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1742:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1744:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1748:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    174a:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    174e:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1750:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1754:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1756:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    175a:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    175e:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    1762:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1766:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    176a:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    176c:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1770:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1772:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1774:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    1776:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    177a:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    177c:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    177e:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1780:	ldr	r4, [pc, #196]	; (1848 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    1782:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    1784:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1786:	movs	r1, #9
    1788:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    178a:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    178e:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1792:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    1794:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1796:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    1798:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    179a:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    179c:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    179e:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    17a2:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    17a6:	add.w	r7, r7, #520192	; 0x7f000
    17aa:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    17ac:	addw	r4, r4, #2044	; 0x7fc
    17b0:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    17b2:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    17b4:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    17b6:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    17b8:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    17bc:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    17be:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    17c2:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    17c6:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    17c8:	sub.w	r4, r4, #460800	; 0x70800
    17cc:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    17d0:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    17d2:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    17d4:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    17d8:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    17da:	ldr	r0, [pc, #112]	; (184c <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    17dc:	orr.w	r1, r1, #512	; 0x200
    17e0:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    17e2:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    17e4:	ldr	r4, [pc, #104]	; (1850 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    17e6:	add.w	lr, lr, #65280	; 0xff00
    17ea:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    17ee:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    17f2:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    17f6:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    17fa:	orr.w	r1, r1, #33554432	; 0x2000000
    17fe:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    1800:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    1804:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1808:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    180a:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    180c:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    180e:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1810:	str	r2, [r4, #0]
#endif
	analog_init();
    1812:	bl	1354 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    1816:	movs	r0, #25
    1818:	bl	164c <delay>
	usb_init();
    181c:	bl	29b8 <usb_init>
	delay(275);
    1820:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    1824:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    1828:	b.w	164c <delay>
    182c:	.word	0xe000e104
    1830:	.word	0x40038004
    1834:	.word	0x40038014
    1838:	.word	0x4003801c
    183c:	.word	0x40038024
    1840:	.word	0x4003802c
    1844:	.word	0x40038034
    1848:	.word	0x40038000
    184c:	.word	0x40048004
    1850:	.word	0x400c9000
    1854:	.word	0x40038008
    1858:	.word	0x4003800c

0000185c <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    185c:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    185e:	ldr	r3, [pc, #56]	; (1898 <sysex_byte+0x3c>)
    1860:	ldr	r4, [pc, #56]	; (189c <sysex_byte+0x40>)
    1862:	ldr	r3, [r3, #0]
    1864:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1866:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1868:	cbz	r3, 188e <sysex_byte+0x32>
    186a:	cmp.w	r1, #290	; 0x122
    186e:	bcs.n	187c <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1870:	ldr	r2, [pc, #44]	; (18a0 <sysex_byte+0x44>)
    1872:	adds	r3, r1, #1
    1874:	strb	r5, [r2, r1]
    1876:	uxth	r3, r3
    1878:	strh	r3, [r4, #0]
	}
}
    187a:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    187c:	movs	r2, #0
    187e:	ldr	r0, [pc, #32]	; (18a0 <sysex_byte+0x44>)
    1880:	blx	r3
    1882:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1884:	ldr	r2, [pc, #24]	; (18a0 <sysex_byte+0x44>)
    1886:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1888:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    188a:	strh	r3, [r4, #0]
	}
}
    188c:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    188e:	cmp.w	r1, #290	; 0x122
    1892:	bcc.n	1870 <sysex_byte+0x14>
    1894:	pop	{r3, r4, r5, pc}
    1896:	nop
    1898:	.word	0x1fff17e8
    189c:	.word	0x1fff1c7e
    18a0:	.word	0x1fff1c84

000018a4 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    18a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    18a8:	ldr	r6, [pc, #132]	; (1930 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    18aa:	ldr	r7, [pc, #136]	; (1934 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    18ac:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    18ae:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    18b0:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    18b2:	strb	r3, [r7, #0]
	if (!tx_packet) {
    18b4:	cbz	r1, 18e4 <usb_midi_write_packed+0x40>
    18b6:	ldr	r5, [pc, #128]	; (1938 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    18b8:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    18ba:	add.w	r2, r1, r3, lsl #2
    18be:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    18c0:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    18c2:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    18c4:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    18c8:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    18ca:	bhi.n	18d6 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    18cc:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    18ce:	movs	r3, #0
    18d0:	strb	r3, [r7, #0]
    18d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    18d6:	movs	r3, #64	; 0x40
    18d8:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    18da:	movs	r0, #4
    18dc:	bl	1f84 <usb_tx>
		tx_packet = NULL;
    18e0:	str	r4, [r6, #0]
    18e2:	b.n	18ce <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    18e4:	ldr.w	r9, [pc, #84]	; 193c <usb_midi_write_packed+0x98>
    18e8:	ldrb.w	r3, [r9]
    18ec:	cmp	r3, #0
    18ee:	beq.n	18d2 <usb_midi_write_packed+0x2e>
    18f0:	ldr	r5, [pc, #68]	; (1938 <usb_midi_write_packed+0x94>)
    18f2:	movw	r4, #48001	; 0xbb81
    18f6:	b.n	190a <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    18f8:	subs	r4, #1
    18fa:	beq.n	1922 <usb_midi_write_packed+0x7e>
    18fc:	ldrb	r3, [r5, #0]
    18fe:	cbnz	r3, 1922 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    1900:	bl	2a88 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1904:	ldrb.w	r3, [r9]
    1908:	cbz	r3, 192a <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    190a:	movs	r0, #4
    190c:	bl	1e70 <usb_tx_packet_count>
    1910:	cmp	r0, #5
    1912:	bhi.n	18f8 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    1914:	bl	1da8 <usb_malloc>
    1918:	mov	r1, r0
    191a:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    191c:	cmp	r0, #0
    191e:	beq.n	18f8 <usb_midi_write_packed+0x54>
    1920:	b.n	18b8 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    1922:	movs	r3, #1
    1924:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    1926:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    192a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    192e:	nop
    1930:	.word	0x1fff1804
    1934:	.word	0x1fff17d8
    1938:	.word	0x1fff1808
    193c:	.word	0x1fff1914

00001940 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    1940:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    1942:	ldr	r3, [pc, #32]	; (1964 <usb_midi_flush_output+0x24>)
    1944:	ldrb	r4, [r3, #0]
    1946:	cbnz	r4, 1952 <usb_midi_flush_output+0x12>
    1948:	ldr	r5, [pc, #28]	; (1968 <usb_midi_flush_output+0x28>)
    194a:	ldr	r1, [r5, #0]
    194c:	cbz	r1, 1952 <usb_midi_flush_output+0x12>
    194e:	ldrh	r3, [r1, #2]
    1950:	cbnz	r3, 1954 <usb_midi_flush_output+0x14>
    1952:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1954:	lsls	r3, r3, #2
    1956:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1958:	movs	r0, #4
    195a:	bl	1f84 <usb_tx>
		tx_packet = NULL;
    195e:	str	r4, [r5, #0]
    1960:	pop	{r3, r4, r5, pc}
    1962:	nop
    1964:	.word	0x1fff17d8
    1968:	.word	0x1fff1804

0000196c <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    196c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1970:	ldr	r6, [pc, #692]	; (1c28 <usb_midi_read+0x2bc>)
    1972:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1974:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1976:	cmp	r3, #0
    1978:	beq.w	1aa0 <usb_midi_read+0x134>
    197c:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    197e:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1980:	lsrs	r1, r2, #2
    1982:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    1986:	adds	r2, #4
	if (index < rx_packet->len) {
    1988:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    198a:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    198c:	bcs.n	1a14 <usb_midi_read+0xa8>
		rx_packet->index = index;
    198e:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    1990:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1994:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    1998:	ldr	r1, [pc, #656]	; (1c2c <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    199a:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    199e:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    19a2:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    19a6:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    19a8:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    19ac:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    19ae:	bls.n	19e6 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    19b0:	subs	r3, r6, #2
    19b2:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    19b4:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    19b8:	bls.n	1a58 <usb_midi_read+0xec>
    19ba:	cmp	r6, #5
    19bc:	beq.n	1a50 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    19be:	cmp	r6, #4
    19c0:	beq.w	1d0c <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    19c4:	subs	r3, r6, #5
    19c6:	cmp	r3, #2
    19c8:	bls.n	1aca <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    19ca:	cmp	r6, #15
    19cc:	bne.n	19ec <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    19ce:	cmp	r0, #247	; 0xf7
    19d0:	bhi.n	1a58 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    19d2:	cmp	r0, #240	; 0xf0
    19d4:	beq.n	19dc <usb_midi_read+0x70>
    19d6:	ldr	r3, [pc, #600]	; (1c30 <usb_midi_read+0x2c4>)
    19d8:	ldrh	r3, [r3, #0]
    19da:	cbz	r3, 19ec <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    19dc:	bl	185c <sysex_byte>
		}
	}
	return 0;
    19e0:	movs	r0, #0
    19e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    19e6:	cbz	r7, 19f2 <usb_midi_read+0x86>
    19e8:	cmp	r5, r7
    19ea:	beq.n	19f2 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    19ec:	movs	r0, #0
    19ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    19f2:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    19f4:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    19f8:	beq.w	1b0a <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    19fc:	cmp	r6, #9
    19fe:	beq.n	1a24 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    1a00:	cmp	r6, #10
    1a02:	bne.w	1b2e <usb_midi_read+0x1c2>
    1a06:	cmp	r3, #10
    1a08:	bne.n	19ec <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    1a0a:	ldr	r3, [pc, #552]	; (1c34 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1a0c:	ldr	r2, [pc, #552]	; (1c38 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    1a0e:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1a10:	movs	r1, #160	; 0xa0
    1a12:	b.n	1b18 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    1a14:	mov	r0, r3
    1a16:	bl	1de8 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1a1a:	movs	r0, #5
    1a1c:	bl	1e34 <usb_rx>
    1a20:	str	r0, [r6, #0]
    1a22:	b.n	1990 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1a24:	cmp	r3, #9
    1a26:	bne.n	19ec <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    1a28:	lsrs	r7, r4, #24
    1a2a:	beq.w	1d24 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1a2e:	ldr	r3, [pc, #524]	; (1c3c <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1a30:	ldr	r2, [pc, #516]	; (1c38 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    1a32:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1a34:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1a36:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1a3a:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1a3c:	uxtb	r5, r5
    1a3e:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1a40:	cmp	r3, #0
    1a42:	beq.w	1b80 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1a46:	mov	r2, r4
    1a48:	mov	r1, r6
    1a4a:	mov	r0, r5
    1a4c:	blx	r3
    1a4e:	b.n	1b80 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1a50:	cmp	r0, #240	; 0xf0
    1a52:	bls.n	1adc <usb_midi_read+0x170>
    1a54:	cmp	r0, #247	; 0xf7
    1a56:	beq.n	1adc <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    1a58:	subs	r0, #241	; 0xf1
    1a5a:	cmp	r0, #14
    1a5c:	bhi.n	19ec <usb_midi_read+0x80>
    1a5e:	add	r3, pc, #4	; (adr r3, 1a64 <usb_midi_read+0xf8>)
    1a60:	ldr.w	pc, [r3, r0, lsl #2]
    1a64:	.word	0x00001c1b
    1a68:	.word	0x00001bff
    1a6c:	.word	0x00001bed
    1a70:	.word	0x000019ed
    1a74:	.word	0x000019ed
    1a78:	.word	0x00001bdf
    1a7c:	.word	0x000019ed
    1a80:	.word	0x00001cbf
    1a84:	.word	0x000019ed
    1a88:	.word	0x00001c89
    1a8c:	.word	0x00001ca3
    1a90:	.word	0x00001bc7
    1a94:	.word	0x000019ed
    1a98:	.word	0x00001baf
    1a9c:	.word	0x00001b93
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    1aa0:	ldr	r3, [pc, #412]	; (1c40 <usb_midi_read+0x2d4>)
    1aa2:	ldrb	r3, [r3, #0]
    1aa4:	cmp	r3, #0
    1aa6:	beq.n	19ec <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1aa8:	movs	r0, #5
    1aaa:	bl	1e34 <usb_rx>
    1aae:	mov	r3, r0
    1ab0:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    1ab2:	cmp	r0, #0
    1ab4:	beq.n	19ec <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    1ab6:	ldrh	r5, [r0, #0]
    1ab8:	cmp	r5, #0
    1aba:	bne.w	197e <usb_midi_read+0x12>
			usb_free(rx_packet);
    1abe:	bl	1de8 <usb_free>
			rx_packet = NULL;
    1ac2:	str	r5, [r6, #0]
			return 0;
    1ac4:	mov	r0, r5
    1ac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    1aca:	bl	185c <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    1ace:	ubfx	r0, r4, #16, #8
    1ad2:	bl	185c <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    1ad6:	cmp	r6, #7
    1ad8:	bne.n	1ae0 <usb_midi_read+0x174>
    1ada:	lsrs	r0, r4, #24
    1adc:	bl	185c <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    1ae0:	ldr	r3, [pc, #332]	; (1c30 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1ae2:	ldr	r2, [pc, #352]	; (1c44 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    1ae4:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    1ae6:	ldr	r0, [pc, #352]	; (1c48 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1ae8:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1aea:	ldr	r5, [pc, #352]	; (1c4c <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1aec:	ldr	r2, [pc, #328]	; (1c38 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    1aee:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1af0:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1af2:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1af4:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1af6:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1af8:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1afa:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    1afc:	cbz	r4, 1b42 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    1afe:	movs	r2, #1
    1b00:	ldr	r0, [pc, #332]	; (1c50 <usb_midi_read+0x2e4>)
    1b02:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1b04:	movs	r0, #1
    1b06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1b0a:	cmp	r3, #8
    1b0c:	bne.w	19ec <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    1b10:	ldr	r3, [pc, #320]	; (1c54 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1b12:	ldr	r2, [pc, #292]	; (1c38 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    1b14:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1b16:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1b18:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1b1c:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1b1e:	uxtb	r5, r5
    1b20:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1b22:	cbz	r3, 1b80 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1b24:	mov	r0, r5
    1b26:	mov	r2, r4
    1b28:	mov	r1, r6
    1b2a:	blx	r3
    1b2c:	b.n	1b80 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    1b2e:	cmp	r6, #11
    1b30:	bne.n	1b56 <usb_midi_read+0x1ea>
    1b32:	cmp	r3, #11
    1b34:	bne.w	19ec <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1b38:	ldr	r3, [pc, #284]	; (1c58 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1b3a:	ldr	r2, [pc, #252]	; (1c38 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    1b3c:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1b3e:	movs	r1, #176	; 0xb0
    1b40:	b.n	1b18 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    1b42:	ldr	r3, [pc, #280]	; (1c5c <usb_midi_read+0x2f0>)
    1b44:	ldr	r3, [r3, #0]
    1b46:	cmp	r3, #0
    1b48:	beq.w	1d42 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    1b4c:	ldr	r0, [pc, #256]	; (1c50 <usb_midi_read+0x2e4>)
    1b4e:	blx	r3
		}
		return 1;
    1b50:	movs	r0, #1
    1b52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    1b56:	cmp	r6, #12
    1b58:	bne.w	1d5c <usb_midi_read+0x3f0>
    1b5c:	cmp	r3, #12
    1b5e:	bne.w	19ec <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1b62:	ldr	r3, [pc, #252]	; (1c60 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1b64:	ldr	r2, [pc, #208]	; (1c38 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    1b66:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1b68:	movs	r1, #192	; 0xc0
    1b6a:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    1b6c:	uxtb	r5, r5
    1b6e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1b72:	cmp	r3, #0
    1b74:	beq.w	1d08 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1b78:	mov	r0, r5
    1b7a:	mov	r1, r6
    1b7c:	lsrs	r4, r4, #24
    1b7e:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1b80:	ldr	r1, [pc, #224]	; (1c64 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    1b82:	ldr	r2, [pc, #196]	; (1c48 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    1b84:	ldr	r3, [pc, #196]	; (1c4c <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1b86:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    1b88:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    1b8a:	strb	r4, [r3, #0]
		return 1;
    1b8c:	movs	r0, #1
    1b8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    1b92:	ldr	r3, [pc, #212]	; (1c68 <usb_midi_read+0x2fc>)
    1b94:	ldr	r3, [r3, #0]
    1b96:	cmp	r3, #0
    1b98:	beq.w	1d48 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    1b9c:	blx	r3
    1b9e:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    1ba2:	ldr	r3, [pc, #148]	; (1c38 <usb_midi_read+0x2cc>)
    1ba4:	uxtb	r5, r5
    1ba6:	lsrs	r4, r4, #24
    1ba8:	strb.w	r8, [r3]
		goto return_message;
    1bac:	b.n	1b80 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    1bae:	ldr	r3, [pc, #188]	; (1c6c <usb_midi_read+0x300>)
    1bb0:	ldr	r3, [r3, #0]
    1bb2:	cmp	r3, #0
    1bb4:	bne.n	1b9c <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    1bb6:	ldr	r3, [pc, #184]	; (1c70 <usb_midi_read+0x304>)
    1bb8:	ldr	r3, [r3, #0]
    1bba:	cbz	r3, 1be6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    1bbc:	movs	r0, #254	; 0xfe
    1bbe:	blx	r3
    1bc0:	ubfx	r6, r4, #16, #8
    1bc4:	b.n	1ba2 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    1bc6:	ldr	r3, [pc, #172]	; (1c74 <usb_midi_read+0x308>)
    1bc8:	ldr	r3, [r3, #0]
    1bca:	cmp	r3, #0
    1bcc:	bne.n	1b9c <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    1bce:	ldr	r3, [pc, #160]	; (1c70 <usb_midi_read+0x304>)
    1bd0:	ldr	r3, [r3, #0]
    1bd2:	cbz	r3, 1be6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    1bd4:	movs	r0, #252	; 0xfc
    1bd6:	blx	r3
    1bd8:	ubfx	r6, r4, #16, #8
    1bdc:	b.n	1ba2 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    1bde:	ldr	r3, [pc, #152]	; (1c78 <usb_midi_read+0x30c>)
    1be0:	ldr	r3, [r3, #0]
    1be2:	cmp	r3, #0
    1be4:	bne.n	1b9c <usb_midi_read+0x230>
    1be6:	ubfx	r6, r4, #16, #8
    1bea:	b.n	1ba2 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1bec:	ldr	r3, [pc, #140]	; (1c7c <usb_midi_read+0x310>)
    1bee:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    1bf0:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1bf4:	cmp	r3, #0
    1bf6:	beq.n	1ba2 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    1bf8:	mov	r0, r6
    1bfa:	blx	r3
    1bfc:	b.n	1ba2 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    1bfe:	ldr	r3, [pc, #128]	; (1c80 <usb_midi_read+0x314>)
    1c00:	ldr	r2, [r3, #0]
    1c02:	cmp	r2, #0
    1c04:	beq.n	1be6 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    1c06:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    1c08:	lsrs	r3, r4, #17
    1c0a:	and.w	r0, r6, #127	; 0x7f
    1c0e:	and.w	r3, r3, #16256	; 0x3f80
    1c12:	orrs	r0, r3
    1c14:	uxtb	r6, r6
    1c16:	blx	r2
    1c18:	b.n	1ba2 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1c1a:	ldr	r3, [pc, #104]	; (1c84 <usb_midi_read+0x318>)
    1c1c:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    1c1e:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1c22:	cmp	r3, #0
    1c24:	bne.n	1bf8 <usb_midi_read+0x28c>
    1c26:	b.n	1ba2 <usb_midi_read+0x236>
    1c28:	.word	0x1fff1810
    1c2c:	.word	0x1fff1c82
    1c30:	.word	0x1fff1c7e
    1c34:	.word	0x1fff17ec
    1c38:	.word	0x1fff1c7c
    1c3c:	.word	0x1fff1820
    1c40:	.word	0x1fff1914
    1c44:	.word	0x1fff17e8
    1c48:	.word	0x1fff1c80
    1c4c:	.word	0x1fff1c81
    1c50:	.word	0x1fff1c84
    1c54:	.word	0x1fff1818
    1c58:	.word	0x1fff181c
    1c5c:	.word	0x1fff1800
    1c60:	.word	0x1fff17dc
    1c64:	.word	0x1fff1c83
    1c68:	.word	0x1fff17c8
    1c6c:	.word	0x1fff17cc
    1c70:	.word	0x1fff17d0
    1c74:	.word	0x1fff180c
    1c78:	.word	0x1fff17fc
    1c7c:	.word	0x1fff1814
    1c80:	.word	0x1fff17e4
    1c84:	.word	0x1fff17f8
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    1c88:	ldr	r3, [pc, #252]	; (1d88 <usb_midi_read+0x41c>)
    1c8a:	ldr	r3, [r3, #0]
    1c8c:	cmp	r3, #0
    1c8e:	bne.n	1b9c <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    1c90:	ldr	r3, [pc, #248]	; (1d8c <usb_midi_read+0x420>)
    1c92:	ldr	r3, [r3, #0]
    1c94:	cmp	r3, #0
    1c96:	beq.n	1be6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    1c98:	movs	r0, #250	; 0xfa
    1c9a:	blx	r3
    1c9c:	ubfx	r6, r4, #16, #8
    1ca0:	b.n	1ba2 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    1ca2:	ldr	r3, [pc, #236]	; (1d90 <usb_midi_read+0x424>)
    1ca4:	ldr	r3, [r3, #0]
    1ca6:	cmp	r3, #0
    1ca8:	bne.w	1b9c <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    1cac:	ldr	r3, [pc, #220]	; (1d8c <usb_midi_read+0x420>)
    1cae:	ldr	r3, [r3, #0]
    1cb0:	cmp	r3, #0
    1cb2:	beq.n	1be6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    1cb4:	movs	r0, #251	; 0xfb
    1cb6:	blx	r3
    1cb8:	ubfx	r6, r4, #16, #8
    1cbc:	b.n	1ba2 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    1cbe:	ldr	r3, [pc, #212]	; (1d94 <usb_midi_read+0x428>)
    1cc0:	ldr	r3, [r3, #0]
    1cc2:	cmp	r3, #0
    1cc4:	bne.w	1b9c <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    1cc8:	ldr	r3, [pc, #192]	; (1d8c <usb_midi_read+0x420>)
    1cca:	ldr	r3, [r3, #0]
    1ccc:	cmp	r3, #0
    1cce:	beq.n	1be6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    1cd0:	movs	r0, #248	; 0xf8
    1cd2:	blx	r3
    1cd4:	ubfx	r6, r4, #16, #8
    1cd8:	b.n	1ba2 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    1cda:	cmp	r3, #14
    1cdc:	bne.w	19ec <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    1ce0:	ldr	r2, [pc, #180]	; (1d98 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1ce2:	ldr	r3, [pc, #184]	; (1d9c <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    1ce4:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1ce6:	movs	r1, #224	; 0xe0
    1ce8:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    1cea:	cmp	r2, #0
    1cec:	beq.n	1d7e <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    1cee:	lsrs	r6, r4, #16
    1cf0:	lsrs	r1, r4, #17
    1cf2:	and.w	r3, r6, #127	; 0x7f
    1cf6:	and.w	r1, r1, #16256	; 0x3f80
    1cfa:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    1cfc:	uxtb	r5, r5
    1cfe:	sub.w	r1, r1, #8192	; 0x2000
    1d02:	mov	r0, r5
    1d04:	blx	r2
    1d06:	uxtb	r6, r6
    1d08:	lsrs	r4, r4, #24
    1d0a:	b.n	1b80 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    1d0c:	bl	185c <sysex_byte>
		sysex_byte(n >> 16);
    1d10:	ubfx	r0, r4, #16, #8
    1d14:	bl	185c <sysex_byte>
		sysex_byte(n >> 24);
    1d18:	lsrs	r0, r4, #24
    1d1a:	bl	185c <sysex_byte>
		return 0;
    1d1e:	movs	r0, #0
    1d20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1d24:	ldr	r3, [pc, #120]	; (1da0 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1d26:	ldr	r2, [pc, #116]	; (1d9c <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    1d28:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1d2a:	movs	r1, #128	; 0x80
    1d2c:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1d2e:	uxtb	r5, r5
    1d30:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1d34:	cbz	r3, 1d58 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1d36:	mov	r1, r6
    1d38:	mov	r0, r5
    1d3a:	mov	r2, r7
    1d3c:	blx	r3
    1d3e:	mov	r4, r7
    1d40:	b.n	1b80 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1d42:	movs	r0, #1
    1d44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    1d48:	ldr	r3, [pc, #64]	; (1d8c <usb_midi_read+0x420>)
    1d4a:	ldr	r3, [r3, #0]
    1d4c:	cmp	r3, #0
    1d4e:	beq.w	1be6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    1d52:	movs	r0, #255	; 0xff
    1d54:	blx	r3
    1d56:	b.n	1be6 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1d58:	mov	r4, r3
    1d5a:	b.n	1b80 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    1d5c:	cmp	r6, #13
    1d5e:	bne.n	1cda <usb_midi_read+0x36e>
    1d60:	cmp	r3, #13
    1d62:	bne.w	19ec <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1d66:	ldr	r3, [pc, #60]	; (1da4 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1d68:	ldr	r2, [pc, #48]	; (1d9c <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    1d6a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1d6c:	movs	r1, #208	; 0xd0
    1d6e:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1d70:	uxtb	r5, r5
    1d72:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1d76:	cmp	r3, #0
    1d78:	bne.w	1b78 <usb_midi_read+0x20c>
    1d7c:	b.n	1d08 <usb_midi_read+0x39c>
    1d7e:	ubfx	r6, r4, #16, #8
    1d82:	uxtb	r5, r5
    1d84:	lsrs	r4, r4, #24
    1d86:	b.n	1b80 <usb_midi_read+0x214>
    1d88:	.word	0x1fff17f4
    1d8c:	.word	0x1fff17d0
    1d90:	.word	0x1fff17d4
    1d94:	.word	0x1fff17c4
    1d98:	.word	0x1fff17e0
    1d9c:	.word	0x1fff1c7c
    1da0:	.word	0x1fff1818
    1da4:	.word	0x1fff17f0

00001da8 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1da8:	cpsid	i
	avail = usb_buffer_available;
    1daa:	ldr	r0, [pc, #52]	; (1de0 <usb_malloc+0x38>)
    1dac:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1dae:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    1db2:	cmp	r3, #29
    1db4:	bgt.n	1dd8 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    1db6:	mov.w	r1, #2147483648	; 0x80000000
    1dba:	lsrs	r1, r3
    1dbc:	bic.w	r2, r2, r1
    1dc0:	str	r2, [r0, #0]
	__enable_irq();
    1dc2:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1dc4:	ldr	r0, [pc, #28]	; (1de4 <usb_malloc+0x3c>)
    1dc6:	add.w	r3, r3, r3, lsl #3
    1dca:	lsls	r3, r3, #3
    1dcc:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1dce:	movs	r1, #0
    1dd0:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    1dd2:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    1dd4:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    1dd6:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    1dd8:	cpsie	i
		return NULL;
    1dda:	movs	r0, #0
    1ddc:	bx	lr
    1dde:	nop
    1de0:	.word	0x1fff0c58
    1de4:	.word	0x1fff03d0

00001de8 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1de8:	ldr	r3, [pc, #52]	; (1e20 <usb_free+0x38>)
    1dea:	ldr	r2, [pc, #56]	; (1e24 <usb_free+0x3c>)
    1dec:	subs	r3, r0, r3
    1dee:	umull	r2, r3, r2, r3
    1df2:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    1df4:	cmp	r3, #29
    1df6:	bhi.n	1e12 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1df8:	ldr	r2, [pc, #44]	; (1e28 <usb_free+0x40>)
    1dfa:	ldrb	r2, [r2, #0]
    1dfc:	cbnz	r2, 1e14 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1dfe:	cpsid	i
	usb_buffer_available |= mask;
    1e00:	ldr	r0, [pc, #40]	; (1e2c <usb_free+0x44>)
    1e02:	mov.w	r1, #2147483648	; 0x80000000
    1e06:	ldr	r2, [r0, #0]
    1e08:	lsr.w	r3, r1, r3
    1e0c:	orrs	r2, r3
    1e0e:	str	r2, [r0, #0]
	__enable_irq();
    1e10:	cpsie	i
    1e12:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1e14:	ldr	r2, [pc, #24]	; (1e30 <usb_free+0x48>)
    1e16:	ldrb	r2, [r2, #0]
    1e18:	cmp	r2, #0
    1e1a:	beq.n	1dfe <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    1e1c:	b.w	1e9c <usb_rx_memory>
    1e20:	.word	0x1fff03d0
    1e24:	.word	0x38e38e39
    1e28:	.word	0x1fff1909
    1e2c:	.word	0x1fff0c58
    1e30:	.word	0x1fff1914

00001e34 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    1e34:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1e36:	cmp	r3, #4
    1e38:	bhi.n	1e64 <usb_rx+0x30>
	__disable_irq();
    1e3a:	cpsid	i
	ret = rx_first[endpoint];
    1e3c:	ldr	r1, [pc, #40]	; (1e68 <usb_rx+0x34>)
    1e3e:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    1e42:	cbz	r0, 1e60 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    1e44:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1e46:	ldr	r4, [pc, #36]	; (1e6c <usb_rx+0x38>)
    1e48:	ldrh	r5, [r0, #0]
    1e4a:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    1e4e:	ldr	r6, [r0, #4]
    1e50:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1e54:	subs	r2, r2, r5
    1e56:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    1e5a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1e5c:	pop	{r4, r5, r6}
    1e5e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    1e60:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1e62:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1e64:	movs	r0, #0
    1e66:	bx	lr
    1e68:	.word	0x1fff1880
    1e6c:	.word	0x1fff1da8

00001e70 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    1e70:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1e72:	cmp	r0, #4
    1e74:	bhi.n	1e8e <usb_tx_packet_count+0x1e>
	__disable_irq();
    1e76:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    1e78:	ldr	r3, [pc, #28]	; (1e98 <usb_tx_packet_count+0x28>)
    1e7a:	ldr.w	r3, [r3, r0, lsl #2]
    1e7e:	cbz	r3, 1e92 <usb_tx_packet_count+0x22>
    1e80:	movs	r0, #0
    1e82:	ldr	r3, [r3, #4]
    1e84:	adds	r0, #1
    1e86:	cmp	r3, #0
    1e88:	bne.n	1e82 <usb_tx_packet_count+0x12>
	__enable_irq();
    1e8a:	cpsie	i
	return count;
    1e8c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1e8e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    1e90:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    1e92:	mov	r0, r3
    1e94:	b.n	1e8a <usb_tx_packet_count+0x1a>
    1e96:	nop
    1e98:	.word	0x1fff18d8

00001e9c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    1e9c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    1e9e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1ea0:	ldr	r2, [pc, #204]	; (1f70 <usb_rx_memory+0xd4>)
    1ea2:	ldrb	r3, [r2, #0]
    1ea4:	lsls	r3, r3, #28
    1ea6:	bpl.n	1eb6 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1ea8:	ldr	r3, [pc, #200]	; (1f74 <usb_rx_memory+0xd8>)
    1eaa:	ldr	r1, [r3, #32]
    1eac:	cmp	r1, #0
    1eae:	beq.n	1f38 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1eb0:	ldr	r1, [r3, #40]	; 0x28
    1eb2:	cmp	r1, #0
    1eb4:	beq.n	1f54 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1eb6:	ldrb	r3, [r2, #1]
    1eb8:	lsls	r5, r3, #28
    1eba:	bpl.n	1eca <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1ebc:	ldr	r3, [pc, #180]	; (1f74 <usb_rx_memory+0xd8>)
    1ebe:	ldr	r1, [r3, #64]	; 0x40
    1ec0:	cmp	r1, #0
    1ec2:	beq.n	1f60 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ec4:	ldr	r1, [r3, #72]	; 0x48
    1ec6:	cmp	r1, #0
    1ec8:	beq.n	1f58 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1eca:	ldrb	r3, [r2, #2]
    1ecc:	lsls	r4, r3, #28
    1ece:	bpl.n	1ede <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1ed0:	ldr	r3, [pc, #160]	; (1f74 <usb_rx_memory+0xd8>)
    1ed2:	ldr	r1, [r3, #96]	; 0x60
    1ed4:	cmp	r1, #0
    1ed6:	beq.n	1f64 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ed8:	ldr	r1, [r3, #104]	; 0x68
    1eda:	cmp	r1, #0
    1edc:	beq.n	1f5c <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1ede:	ldrb	r3, [r2, #3]
    1ee0:	lsls	r1, r3, #28
    1ee2:	bpl.n	1ef4 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1ee4:	ldr	r3, [pc, #140]	; (1f74 <usb_rx_memory+0xd8>)
    1ee6:	ldr.w	r1, [r3, #128]	; 0x80
    1eea:	cmp	r1, #0
    1eec:	beq.n	1f6c <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1eee:	ldr.w	r1, [r3, #136]	; 0x88
    1ef2:	cbz	r1, 1f1a <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1ef4:	ldrb	r3, [r2, #4]
    1ef6:	lsls	r3, r3, #28
    1ef8:	bpl.n	1f0c <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1efa:	ldr	r3, [pc, #120]	; (1f74 <usb_rx_memory+0xd8>)
    1efc:	ldr.w	r2, [r3, #160]	; 0xa0
    1f00:	cmp	r2, #0
    1f02:	beq.n	1f68 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1f04:	ldr.w	r2, [r3, #168]	; 0xa8
    1f08:	movs	r4, #21
    1f0a:	cbz	r2, 1f1c <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    1f0c:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    1f0e:	ldr	r3, [pc, #104]	; (1f78 <usb_rx_memory+0xdc>)
    1f10:	movs	r2, #0
    1f12:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    1f14:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    1f16:	b.w	1de8 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1f1a:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1f1c:	ldr	r1, [pc, #88]	; (1f78 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1f1e:	ldr	r5, [pc, #92]	; (1f7c <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    1f20:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1f22:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1f26:	add.w	r3, r3, r4, lsl #3
    1f2a:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1f2c:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1f2e:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1f30:	strb	r2, [r1, #0]
				__enable_irq();
    1f32:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    1f34:	pop	{r4, r5}
    1f36:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1f38:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1f3a:	ldr	r4, [pc, #60]	; (1f78 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1f3c:	ldr	r5, [pc, #64]	; (1f80 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    1f3e:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1f40:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1f44:	add.w	r3, r3, r2, lsl #3
    1f48:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1f4a:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1f4c:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1f4e:	strb	r2, [r4, #0]
				__enable_irq();
    1f50:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    1f52:	b.n	1f34 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1f54:	movs	r4, #5
    1f56:	b.n	1f1c <usb_rx_memory+0x80>
    1f58:	movs	r4, #9
    1f5a:	b.n	1f1c <usb_rx_memory+0x80>
    1f5c:	movs	r4, #13
    1f5e:	b.n	1f1c <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1f60:	movs	r2, #8
    1f62:	b.n	1f3a <usb_rx_memory+0x9e>
    1f64:	movs	r2, #12
    1f66:	b.n	1f3a <usb_rx_memory+0x9e>
    1f68:	movs	r2, #20
    1f6a:	b.n	1f3a <usb_rx_memory+0x9e>
    1f6c:	movs	r2, #16
    1f6e:	b.n	1f3a <usb_rx_memory+0x9e>
    1f70:	.word	0x000042bc
    1f74:	.word	0x1fff0000
    1f78:	.word	0x1fff1909
    1f7c:	.word	0x004000c8
    1f80:	.word	0x00400088

00001f84 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    1f84:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    1f86:	cmp	r3, #4
    1f88:	bhi.n	1fc6 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1f8a:	ldr	r2, [pc, #108]	; (1ff8 <usb_tx+0x74>)
    1f8c:	lsls	r0, r0, #5
    1f8e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    1f92:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1f94:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    1f96:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    1f98:	ldr	r4, [pc, #96]	; (1ffc <usb_tx+0x78>)
    1f9a:	ldrb	r2, [r4, r3]
    1f9c:	cmp	r2, #3
    1f9e:	bhi.n	1fd8 <usb_tx+0x54>
    1fa0:	tbb	[pc, r2]
    1fa4:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    1fa8:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1faa:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    1fac:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1fae:	tst.w	r0, #8
    1fb2:	ite	ne
    1fb4:	movne	r3, #200	; 0xc8
    1fb6:	moveq	r3, #136	; 0x88
    1fb8:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1fbc:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1fbe:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1fc0:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    1fc2:	cpsie	i
}
    1fc4:	pop	{r4, r5}
    1fc6:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    1fc8:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    1fca:	movs	r2, #2
		break;
    1fcc:	b.n	1faa <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    1fce:	movs	r2, #5
    1fd0:	b.n	1faa <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    1fd2:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    1fd4:	movs	r2, #4
		break;
    1fd6:	b.n	1faa <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    1fd8:	ldr	r2, [pc, #36]	; (2000 <usb_tx+0x7c>)
    1fda:	ldr.w	r0, [r2, r3, lsl #2]
    1fde:	cbz	r0, 1ff0 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    1fe0:	ldr	r2, [pc, #32]	; (2004 <usb_tx+0x80>)
    1fe2:	ldr.w	r0, [r2, r3, lsl #2]
    1fe6:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    1fe8:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    1fec:	cpsie	i
		return;
    1fee:	b.n	1fc4 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    1ff0:	str.w	r1, [r2, r3, lsl #2]
    1ff4:	ldr	r2, [pc, #12]	; (2004 <usb_tx+0x80>)
    1ff6:	b.n	1fe8 <usb_tx+0x64>
    1ff8:	.word	0x1fff0000
    1ffc:	.word	0x1fff1918
    2000:	.word	0x1fff18d8
    2004:	.word	0x1fff18ec

00002008 <usb_isr>:
}



void usb_isr(void)
{
    2008:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    200c:	ldr.w	fp, [pc, #776]	; 2318 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2010:	ldr.w	sl, [pc, #776]	; 231c <usb_isr+0x314>
}



void usb_isr(void)
{
    2014:	sub	sp, #28
    2016:	b.n	20a2 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2018:	ldr	r7, [pc, #680]	; (22c4 <usb_isr+0x2bc>)
    201a:	mov.w	r8, r3, lsr #2
    201e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2022:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2024:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2028:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    202c:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    202e:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2032:	and.w	r4, r3, #255	; 0xff
    2036:	cmp	r3, #0
    2038:	bne.w	223c <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    203c:	ldr.w	r3, [r7, r8, lsl #3]
    2040:	lsrs	r3, r3, #16
    2042:	uxth	r1, r3
    2044:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2048:	cmp	r3, #0
    204a:	beq.w	222a <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    204e:	ldr	r3, [pc, #632]	; (22c8 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2050:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2054:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2058:	ldr.w	r2, [r3, r6, lsl #2]
    205c:	cmp	r2, #0
    205e:	beq.w	24cc <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2062:	ldr	r5, [pc, #616]	; (22cc <usb_isr+0x2c4>)
    2064:	ldr.w	r3, [r5, r6, lsl #2]
    2068:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    206a:	ldr	r4, [pc, #612]	; (22d0 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    206c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2070:	ldrh.w	r3, [r4, r6, lsl #1]
    2074:	add	r1, r3
    2076:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    207a:	bl	1da8 <usb_malloc>
					if (packet) {
    207e:	cmp	r0, #0
    2080:	beq.w	24be <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2084:	ldr	r2, [pc, #588]	; (22d4 <usb_isr+0x2cc>)
    2086:	ldr	r3, [pc, #592]	; (22d8 <usb_isr+0x2d0>)
    2088:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    208c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2090:	it	ne
    2092:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2094:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2098:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    209c:	movs	r3, #8
    209e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    20a2:	ldrb.w	r4, [fp]
    20a6:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    20a8:	lsls	r0, r4, #29
    20aa:	bpl.n	20e6 <usb_isr+0xde>
		if (usb_configuration) {
    20ac:	ldr	r3, [pc, #556]	; (22dc <usb_isr+0x2d4>)
    20ae:	ldrb	r3, [r3, #0]
    20b0:	cbz	r3, 20e0 <usb_isr+0xd8>
			t = usb_reboot_timer;
    20b2:	ldr	r1, [pc, #556]	; (22e0 <usb_isr+0x2d8>)
    20b4:	ldrb	r2, [r1, #0]
			if (t) {
    20b6:	and.w	r3, r2, #255	; 0xff
    20ba:	cbz	r2, 20c6 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    20bc:	subs	r3, #1
    20be:	uxtb	r3, r3
    20c0:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    20c2:	cbnz	r3, 20c6 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    20c4:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    20c6:	ldr	r1, [pc, #540]	; (22e4 <usb_isr+0x2dc>)
    20c8:	ldrb	r2, [r1, #0]
			if (t) {
    20ca:	and.w	r3, r2, #255	; 0xff
    20ce:	cbz	r2, 20dc <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    20d0:	subs	r3, #1
    20d2:	uxtb	r3, r3
    20d4:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    20d6:	cmp	r3, #0
    20d8:	beq.w	246a <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    20dc:	bl	1940 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    20e0:	movs	r3, #4
    20e2:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    20e6:	and.w	r3, r4, #8
    20ea:	and.w	r2, r3, #255	; 0xff
    20ee:	cmp	r3, #0
    20f0:	beq.w	2284 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    20f4:	ldrb.w	r3, [sl]
    20f8:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    20fa:	lsrs	r6, r3, #4
    20fc:	bne.n	2018 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    20fe:	lsrs	r4, r3, #2
    2100:	ldr.w	r9, [pc, #448]	; 22c4 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2104:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2108:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    210c:	ubfx	r2, r2, #2, #4
    2110:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2112:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2114:	cmp	r2, #12
    2116:	bhi.w	2222 <usb_isr+0x21a>
    211a:	tbb	[pc, r2]
    211e:	.short	0x7878
    2120:	.word	0x82828282
    2124:	.word	0x82438282
    2128:	.short	0x8282
    212a:	.byte	0x07
    212b:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    212c:	ldr	r0, [r1, #0]
    212e:	ldr	r5, [pc, #440]	; (22e8 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2130:	ldr	r3, [pc, #416]	; (22d4 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2132:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2134:	ldr	r7, [pc, #436]	; (22ec <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2136:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    213a:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    213c:	ldr	r6, [pc, #432]	; (22f0 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    213e:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2140:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2144:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2146:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2148:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    214a:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    214e:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2150:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2154:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2158:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    215a:	bhi.w	2320 <usb_isr+0x318>
    215e:	cmp.w	r1, #1664	; 0x680
    2162:	bcs.w	278c <usb_isr+0x784>
    2166:	cmp.w	r1, #258	; 0x102
    216a:	beq.w	253a <usb_isr+0x532>
    216e:	bhi.w	2504 <usb_isr+0x4fc>
    2172:	cmp	r1, #128	; 0x80
    2174:	beq.w	27c0 <usb_isr+0x7b8>
    2178:	cmp	r1, #130	; 0x82
    217a:	bne.w	2546 <usb_isr+0x53e>
    217e:	ldrh	r1, [r5, #4]
    2180:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2184:	cmp	r1, #5
    2186:	bhi.w	2546 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    218a:	ldr	r3, [pc, #360]	; (22f4 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    218c:	ldr	r4, [pc, #360]	; (22f8 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    218e:	lsls	r1, r1, #2
    2190:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2192:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2194:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2196:	ldrb	r2, [r3, #0]
    2198:	lsls	r3, r2, #30
    219a:	bpl.w	28d0 <usb_isr+0x8c8>
    219e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    21a0:	movs	r0, #2
    21a2:	b.n	25ce <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    21a4:	ldr	r7, [pc, #324]	; (22ec <usb_isr+0x2e4>)
    21a6:	ldr	r2, [r7, #0]
		if (data) {
    21a8:	cbz	r2, 21f8 <usb_isr+0x1f0>
			size = ep0_tx_len;
    21aa:	ldr	r3, [pc, #336]	; (22fc <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21ac:	ldr	r6, [pc, #320]	; (22f0 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21ae:	ldr	r1, [pc, #336]	; (2300 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    21b0:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21b2:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21b4:	ldrb	r5, [r1, #0]
    21b6:	cmp	r0, #64	; 0x40
    21b8:	mov	lr, r0
    21ba:	orr.w	r8, r5, #2
    21be:	it	cs
    21c0:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21c4:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    21c6:	eor.w	r4, r4, #1
    21ca:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    21cc:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21d0:	ite	eq
    21d2:	moveq	r4, #136	; 0x88
    21d4:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21d6:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    21da:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    21dc:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21e0:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21e4:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    21e6:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21e8:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    21ec:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    21ee:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    21f0:	cmp	r0, #0
    21f2:	beq.w	2362 <usb_isr+0x35a>
    21f6:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    21f8:	ldr	r3, [pc, #236]	; (22e8 <usb_isr+0x2e0>)
    21fa:	ldrh	r2, [r3, #0]
    21fc:	cmp.w	r2, #1280	; 0x500
    2200:	bne.n	2222 <usb_isr+0x21a>
			setup.bRequest = 0;
    2202:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2204:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2206:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2208:	ldr	r3, [pc, #248]	; (2304 <usb_isr+0x2fc>)
    220a:	strb	r2, [r3, #0]
    220c:	b.n	2222 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    220e:	ldr	r2, [pc, #216]	; (22e8 <usb_isr+0x2e0>)
    2210:	ldrh	r0, [r2, #0]
    2212:	movw	r2, #8225	; 0x2021
    2216:	cmp	r0, r2
    2218:	beq.w	236c <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    221c:	ldr	r2, [pc, #180]	; (22d4 <usb_isr+0x2cc>)
    221e:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2222:	ldr	r2, [pc, #228]	; (2308 <usb_isr+0x300>)
    2224:	movs	r3, #1
    2226:	strb	r3, [r2, #0]
    2228:	b.n	209c <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    222a:	ldr	r2, [pc, #168]	; (22d4 <usb_isr+0x2cc>)
    222c:	ldr	r3, [pc, #168]	; (22d8 <usb_isr+0x2d0>)
    222e:	tst.w	r9, #8
    2232:	it	ne
    2234:	movne	r3, r2
    2236:	str.w	r3, [r7, r8, lsl #3]
    223a:	b.n	209c <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    223c:	bl	1de8 <usb_free>
				packet = tx_first[endpoint];
    2240:	ldr	r2, [pc, #200]	; (230c <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2242:	ldr	r1, [pc, #204]	; (2310 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2244:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2248:	cmp	r3, #0
    224a:	beq.w	24d4 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    224e:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2250:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2252:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2256:	add.w	r2, r3, #8
    225a:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    225e:	cmp	r4, #3
    2260:	bhi.n	226e <usb_isr+0x266>
    2262:	tbb	[pc, r4]
    2266:	.short	0x022c
    2268:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    226a:	movs	r2, #2
    226c:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    226e:	ldrh	r2, [r3, #0]
    2270:	tst.w	r9, #8
    2274:	ite	eq
    2276:	moveq	r3, #136	; 0x88
    2278:	movne	r3, #200	; 0xc8
    227a:	orr.w	r3, r3, r2, lsl #16
    227e:	str.w	r3, [r7, r8, lsl #3]
    2282:	b.n	209c <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2284:	lsls	r0, r4, #31
    2286:	bmi.w	2470 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    228a:	lsls	r1, r4, #24
    228c:	bmi.w	24f0 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2290:	lsls	r2, r4, #30
    2292:	bpl.n	22a2 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2294:	ldr	r2, [pc, #124]	; (2314 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2296:	ldr	r1, [pc, #128]	; (2318 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2298:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    229a:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    229c:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    229e:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    22a0:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    22a2:	lsls	r3, r4, #27
    22a4:	bpl.n	22ac <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    22a6:	ldr	r3, [pc, #112]	; (2318 <usb_isr+0x310>)
    22a8:	movs	r2, #16
    22aa:	strb	r2, [r3, #0]
	}

}
    22ac:	add	sp, #28
    22ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    22b2:	movs	r2, #4
    22b4:	strb	r2, [r1, r6]
						break;
    22b6:	b.n	226e <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    22b8:	movs	r2, #5
    22ba:	strb	r2, [r1, r6]
						break;
    22bc:	b.n	226e <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    22be:	movs	r2, #3
    22c0:	strb	r2, [r1, r6]
						break;
    22c2:	b.n	226e <usb_isr+0x266>
    22c4:	.word	0x1fff0000
    22c8:	.word	0x1fff1880
    22cc:	.word	0x1fff1828
    22d0:	.word	0x1fff1da8
    22d4:	.word	0x004000c8
    22d8:	.word	0x00400088
    22dc:	.word	0x1fff1914
    22e0:	.word	0x1fff1895
    22e4:	.word	0x1fff17a8
    22e8:	.word	0x1fff1900
    22ec:	.word	0x1fff1824
    22f0:	.word	0x1fff1894
    22f4:	.word	0x400720c0
    22f8:	.word	0x1fff190c
    22fc:	.word	0x1fff183c
    2300:	.word	0x1fff1908
    2304:	.word	0x40072098
    2308:	.word	0x40072094
    230c:	.word	0x1fff18d8
    2310:	.word	0x1fff1918
    2314:	.word	0x40072088
    2318:	.word	0x40072080
    231c:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2320:	movw	r4, #8225	; 0x2021
    2324:	cmp	r1, r4
    2326:	beq.w	2462 <usb_isr+0x45a>
    232a:	bhi.n	23c0 <usb_isr+0x3b8>
    232c:	cmp.w	r1, #2176	; 0x880
    2330:	beq.w	25c6 <usb_isr+0x5be>
    2334:	cmp.w	r1, #2304	; 0x900
    2338:	bne.w	2546 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    233c:	ldr	r2, [pc, #712]	; (2608 <usb_isr+0x600>)
    233e:	ldr	r4, [pc, #716]	; (260c <usb_isr+0x604>)
    2340:	ldrb	r1, [r5, #2]
    2342:	strb	r1, [r2, #0]
    2344:	add.w	r5, r4, #160	; 0xa0
    2348:	b.n	2352 <usb_isr+0x34a>
    234a:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    234c:	cmp	r5, r4
    234e:	beq.w	2664 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2352:	ldr	r3, [r4, #32]
    2354:	lsls	r1, r3, #24
    2356:	bpl.n	234a <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2358:	ldr	r0, [r4, #36]	; 0x24
    235a:	subs	r0, #8
    235c:	bl	1de8 <usb_free>
    2360:	b.n	234a <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2362:	cmp.w	lr, #64	; 0x40
    2366:	it	ne
    2368:	movne	r2, #0
    236a:	b.n	21f6 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    236c:	ldr	r2, [pc, #672]	; (2610 <usb_isr+0x608>)
    236e:	ldrb	r5, [r1, #0]
    2370:	ldrb	r0, [r1, #1]
    2372:	strb	r5, [r2, #0]
    2374:	strb	r0, [r2, #1]
    2376:	ldrb	r5, [r1, #2]
    2378:	ldrb	r0, [r1, #3]
    237a:	strb	r5, [r2, #2]
    237c:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    237e:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2380:	ldrb	r5, [r1, #4]
    2382:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2384:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2386:	ldrb	r5, [r1, #5]
    2388:	ldrb	r1, [r1, #6]
    238a:	strb	r5, [r2, #5]
    238c:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    238e:	beq.w	25be <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2392:	ldr	r1, [pc, #640]	; (2614 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2394:	ldr	r6, [pc, #640]	; (2618 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2396:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2398:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    239a:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    239e:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23a0:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    23a4:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23a6:	ite	eq
    23a8:	moveq	r1, #136	; 0x88
    23aa:	movne	r1, #200	; 0xc8
    23ac:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23b0:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    23b4:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23b8:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    23ba:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23bc:	str	r1, [r2, #4]
    23be:	b.n	221c <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    23c0:	movw	r4, #8737	; 0x2221
    23c4:	cmp	r1, r4
    23c6:	bne.w	27da <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    23ca:	ldr.w	ip, [pc, #656]	; 265c <usb_isr+0x654>
    23ce:	ldr	r3, [pc, #588]	; (261c <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    23d0:	ldr	r1, [pc, #588]	; (2620 <usb_isr+0x618>)
    23d2:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    23d4:	ldr.w	r5, [ip]
    23d8:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    23da:	str	r0, [sp, #4]
    23dc:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    23de:	movs	r0, #0
    23e0:	str	r0, [sp, #8]
    23e2:	mov	r8, r0
    23e4:	mov	ip, r0
    23e6:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23e8:	ldr	r1, [pc, #552]	; (2614 <usb_isr+0x60c>)
    23ea:	ldrb	r5, [r1, #0]
    23ec:	orr.w	lr, r5, #2
    23f0:	add.w	r3, r9, lr, lsl #3
    23f4:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23f6:	ldr	r3, [sp, #4]
    23f8:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23fa:	ldr	r3, [sp, #12]
    23fc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23fe:	ite	eq
    2400:	moveq	r4, #136	; 0x88
    2402:	movne	r4, #200	; 0xc8
    2404:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2408:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    240c:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2410:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2412:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2414:	ldr.w	lr, [pc, #500]	; 260c <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2418:	ldr	r3, [pc, #508]	; (2618 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    241a:	ldr.w	r8, [pc, #504]	; 2614 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    241e:	cmp	r0, #0
    2420:	bne.w	2554 <usb_isr+0x54c>
    2424:	cmp.w	ip, #64	; 0x40
    2428:	bne.n	2462 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    242a:	orr.w	ip, r4, #2
    242e:	add.w	r3, r9, ip, lsl #3
    2432:	ldr	r4, [sp, #8]
    2434:	ldr.w	lr, [pc, #468]	; 260c <usb_isr+0x604>
    2438:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    243a:	cmp	r2, #0
    243c:	bne.w	2580 <usb_isr+0x578>
    2440:	lsls	r2, r0, #16
    2442:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2446:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    244a:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    244e:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2450:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2452:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2454:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2456:	cmp	r0, #64	; 0x40
    2458:	bne.n	2462 <usb_isr+0x45a>
    245a:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    245c:	ldr	r2, [pc, #452]	; (2624 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    245e:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2460:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2462:	ldr	r2, [pc, #452]	; (2628 <usb_isr+0x620>)
    2464:	movs	r3, #1
    2466:	strb	r3, [r2, #0]
    2468:	b.n	2222 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    246a:	bl	11c8 <usb_serial_flush_callback>
    246e:	b.n	20dc <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2470:	ldr	r3, [pc, #408]	; (260c <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2472:	ldr	r0, [pc, #436]	; (2628 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2474:	ldr	r1, [pc, #412]	; (2614 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2476:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2478:	mov.w	lr, #2
    247c:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2480:	ldr	r7, [pc, #424]	; (262c <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2482:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2484:	ldr	r1, [pc, #424]	; (2630 <usb_isr+0x628>)
    2486:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2488:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    248a:	ldr	r6, [pc, #424]	; (2634 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    248c:	ldr	r5, [pc, #424]	; (2638 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    248e:	ldr	r4, [pc, #428]	; (263c <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2490:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2492:	movs	r1, #13
    2494:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2496:	movs	r1, #255	; 0xff
    2498:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    249a:	ldr.w	lr, [pc, #452]	; 2660 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    249e:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    24a0:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    24a2:	ldr	r5, [pc, #412]	; (2640 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    24a4:	ldr	r2, [pc, #412]	; (2644 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    24a6:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    24aa:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    24ac:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    24ae:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    24b2:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    24b4:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    24b6:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    24b8:	add	sp, #28
    24ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    24be:	ldr	r2, [pc, #392]	; (2648 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    24c0:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    24c4:	ldrb	r3, [r2, #0]
    24c6:	adds	r3, #1
    24c8:	strb	r3, [r2, #0]
    24ca:	b.n	209c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    24cc:	str.w	r0, [r3, r6, lsl #2]
    24d0:	ldr	r5, [pc, #376]	; (264c <usb_isr+0x644>)
    24d2:	b.n	206a <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    24d4:	ldrb	r3, [r1, r6]
    24d6:	cmp	r3, #3
    24d8:	bhi.n	25b0 <usb_isr+0x5a8>
    24da:	add	r2, pc, #4	; (adr r2, 24e0 <usb_isr+0x4d8>)
    24dc:	ldr.w	pc, [r2, r3, lsl #2]
    24e0:	.word	0x0000209d
    24e4:	.word	0x0000209d
    24e8:	.word	0x00002535
    24ec:	.word	0x0000252f
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    24f0:	ldr	r1, [pc, #312]	; (262c <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    24f2:	ldr	r3, [pc, #324]	; (2638 <usb_isr+0x630>)
    24f4:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    24f6:	movs	r0, #13
    24f8:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    24fa:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    24fc:	lsls	r2, r4, #30
    24fe:	bpl.w	22a2 <usb_isr+0x29a>
    2502:	b.n	2294 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2504:	movw	r2, #770	; 0x302
    2508:	cmp	r1, r2
    250a:	bne.w	27ca <usb_isr+0x7c2>
    250e:	ldrh	r1, [r5, #4]
    2510:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2514:	cmp	r1, #5
    2516:	bhi.n	2546 <usb_isr+0x53e>
    2518:	ldrh	r2, [r5, #2]
    251a:	cbnz	r2, 2546 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    251c:	ldr	r4, [pc, #268]	; (262c <usb_isr+0x624>)
    251e:	str	r0, [sp, #4]
    2520:	lsls	r1, r1, #2
    2522:	add	r4, r1
    2524:	ldrb	r1, [r4, #0]
    2526:	orr.w	r1, r1, #2
    252a:	strb	r1, [r4, #0]
    252c:	b.n	23de <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    252e:	movs	r3, #1
    2530:	strb	r3, [r1, r6]
						break;
    2532:	b.n	209c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2534:	movs	r3, #0
    2536:	strb	r3, [r1, r6]
						break;
    2538:	b.n	209c <usb_isr+0x94>
    253a:	ldrh	r1, [r5, #4]
    253c:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2540:	cmp	r1, #5
    2542:	bls.w	27e4 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2546:	ldr	r2, [pc, #228]	; (262c <usb_isr+0x624>)
    2548:	movs	r3, #15
    254a:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    254c:	ldr	r2, [pc, #216]	; (2628 <usb_isr+0x620>)
    254e:	movs	r3, #1
    2550:	strb	r3, [r2, #0]
    2552:	b.n	2222 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2554:	cmp	r0, #64	; 0x40
    2556:	bls.w	242a <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    255a:	orr.w	r4, r4, #2
    255e:	add.w	r1, lr, r4, lsl #3
    2562:	ldr	r6, [sp, #8]
    2564:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2566:	cbz	r2, 2598 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    2568:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    256c:	ldr	r2, [pc, #224]	; (2650 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    256e:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2570:	mov	r3, r6
    2572:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2574:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2578:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    257a:	str.w	r2, [lr, r4, lsl #3]
    257e:	b.n	245c <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    2580:	ldrb.w	r3, [sp, #4]
    2584:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2586:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2588:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    258a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    258c:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2590:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2592:	str.w	r2, [lr, ip, lsl #3]
    2596:	b.n	2456 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    2598:	ldrb.w	r1, [sp, #4]
    259c:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    259e:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    25a0:	ldr	r2, [pc, #140]	; (2630 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    25a2:	strb.w	r5, [r8]
    25a6:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    25a8:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    25aa:	str.w	r2, [lr, r4, lsl #3]
    25ae:	b.n	245c <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    25b0:	tst.w	r9, #8
    25b4:	ite	eq
    25b6:	moveq	r3, #2
    25b8:	movne	r3, #3
    25ba:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    25bc:	b.n	209c <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    25be:	ldr	r2, [pc, #148]	; (2654 <usb_isr+0x64c>)
    25c0:	movs	r1, #15
    25c2:	strb	r1, [r2, #0]
    25c4:	b.n	2392 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    25c6:	ldr	r2, [pc, #64]	; (2608 <usb_isr+0x600>)
    25c8:	ldr	r4, [pc, #140]	; (2658 <usb_isr+0x650>)
    25ca:	ldrb	r2, [r2, #0]
    25cc:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    25ce:	ldrh	r2, [r5, #6]
    25d0:	cmp	r2, r0
    25d2:	bcs.w	2998 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    25d6:	ldr	r1, [pc, #60]	; (2614 <usb_isr+0x60c>)
    25d8:	ldrb	r5, [r1, #0]
    25da:	cmp	r2, #64	; 0x40
    25dc:	mov	ip, r2
    25de:	orr.w	lr, r5, #2
    25e2:	it	cs
    25e4:	movcs.w	ip, #64	; 0x40
    25e8:	add.w	r3, r4, ip
    25ec:	add.w	r0, r9, lr, lsl #3
    25f0:	str	r3, [sp, #8]
    25f2:	movs	r3, #1
    25f4:	str	r4, [r0, #4]
    25f6:	mov.w	r8, ip, lsl #16
    25fa:	rsb	r0, ip, r2
    25fe:	str	r3, [sp, #4]
    2600:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2602:	movs	r4, #200	; 0xc8
    2604:	b.n	2404 <usb_isr+0x3fc>
    2606:	nop
    2608:	.word	0x1fff1914
    260c:	.word	0x1fff0000
    2610:	.word	0x1fff1c70
    2614:	.word	0x1fff1908
    2618:	.word	0x1fff1894
    261c:	.word	0x1fff1c78
    2620:	.word	0x1fff17b8
    2624:	.word	0x1fff183c
    2628:	.word	0x40072094
    262c:	.word	0x400720c0
    2630:	.word	0x00400088
    2634:	.word	0x40072088
    2638:	.word	0x40072080
    263c:	.word	0x40072098
    2640:	.word	0x1fff1840
    2644:	.word	0x1fff1898
    2648:	.word	0x1fff1909
    264c:	.word	0x1fff1828
    2650:	.word	0x004000c8
    2654:	.word	0x1fff1895
    2658:	.word	0x1fff190c
    265c:	.word	0x1fff17c0
    2660:	.word	0x4007208c
    2664:	ldr	r4, [pc, #704]	; (2928 <usb_isr+0x920>)
    2666:	ldr	r2, [pc, #708]	; (292c <usb_isr+0x924>)
    2668:	ldr	r1, [pc, #708]	; (2930 <usb_isr+0x928>)
    266a:	ldr	r0, [pc, #712]	; (2934 <usb_isr+0x92c>)
    266c:	ldr	r5, [pc, #712]	; (2938 <usb_isr+0x930>)
    266e:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2670:	movs	r3, #0
    2672:	ldr	r4, [pc, #712]	; (293c <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2674:	str	r4, [sp, #8]
    2676:	str	r6, [sp, #20]
    2678:	str	r5, [sp, #12]
    267a:	mov	r8, r0
    267c:	mov	r4, r3
    267e:	str	r7, [sp, #16]
    2680:	mov	r6, r2
    2682:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2684:	ldr	r0, [r6, #0]
			while (p) {
    2686:	cbz	r0, 2694 <usb_isr+0x68c>
				n = p->next;
    2688:	ldr	r7, [r0, #4]
				usb_free(p);
    268a:	bl	1de8 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    268e:	mov	r0, r7
    2690:	cmp	r7, #0
    2692:	bne.n	2688 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2694:	movs	r3, #0
    2696:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2698:	ldr	r3, [sp, #12]
			p = tx_first[i];
    269a:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    269c:	mov	r2, r3
    269e:	movs	r3, #0
    26a0:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    26a4:	cbz	r0, 26b2 <usb_isr+0x6aa>
				n = p->next;
    26a6:	ldr	r7, [r0, #4]
				usb_free(p);
    26a8:	bl	1de8 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    26ac:	mov	r0, r7
    26ae:	cmp	r7, #0
    26b0:	bne.n	26a6 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    26b2:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    26b4:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    26b6:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    26b8:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    26ba:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    26be:	ldr	r2, [sp, #8]
    26c0:	mov.w	r1, #0
			switch (tx_state[i]) {
    26c4:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    26c6:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    26ca:	cmp	r3, #3
    26cc:	bhi.n	26de <usb_isr+0x6d6>
    26ce:	tbb	[pc, r3]
    26d2:	.short	0x0258
    26d4:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    26d6:	ldr	r3, [sp, #4]
    26d8:	mov.w	r2, #1
    26dc:	strb	r2, [r3, #0]
    26de:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    26e0:	adds	r4, #1
    26e2:	adds	r3, #1
    26e4:	cmp	r4, #5
    26e6:	add.w	r6, r6, #4
    26ea:	add.w	r5, r5, #4
    26ee:	str	r3, [sp, #4]
    26f0:	bne.n	2684 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    26f2:	ldr	r4, [pc, #588]	; (2940 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    26f4:	ldr	r5, [pc, #588]	; (2944 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    26f6:	ldrb	r2, [r4, #0]
			*reg = epconf;
    26f8:	ldr	r3, [pc, #588]	; (2948 <usb_isr+0x940>)
    26fa:	ldr	r7, [sp, #16]
    26fc:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    26fe:	movs	r1, #0
    2700:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2702:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2704:	lsls	r2, r2, #28
    2706:	bmi.n	27fe <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2708:	ldrb	r2, [r4, #1]
			*reg = epconf;
    270a:	ldr	r1, [pc, #576]	; (294c <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    270c:	ldr.w	r8, [pc, #588]	; 295c <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2710:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2712:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2714:	mov.w	r1, #0
    2718:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    271c:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2720:	bmi.w	28aa <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2724:	ldrb	r2, [r4, #2]
			*reg = epconf;
    2726:	ldr	r1, [pc, #552]	; (2950 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2728:	ldr.w	r8, [pc, #560]	; 295c <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    272c:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    272e:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2730:	mov.w	r1, #0
    2734:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    2738:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    273c:	bmi.w	2882 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2740:	ldr	r1, [pc, #528]	; (2954 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2742:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2744:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2746:	movs	r1, #0
    2748:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    274c:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2750:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2752:	ldr.w	r8, [pc, #520]	; 295c <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2756:	bmi.n	2854 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2758:	ldrb	r2, [r4, #4]
			*reg = epconf;
    275a:	ldr	r1, [pc, #508]	; (2958 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    275c:	ldr	r4, [pc, #508]	; (295c <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    275e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2760:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2762:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2764:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    2768:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    276c:	bmi.n	282a <usb_isr+0x822>
    276e:	ldrb	r3, [r6, #0]
    2770:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2772:	movs	r1, #0
    2774:	eor.w	r2, r3, #1
    2778:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    277c:	str.w	r1, [r9, #184]	; 0xb8
    2780:	b.n	23de <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2782:	ldr	r3, [sp, #4]
    2784:	mov.w	r2, #0
    2788:	strb	r2, [r3, #0]
    278a:	b.n	26de <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    278c:	ldr	r2, [pc, #464]	; (2960 <usb_isr+0x958>)
    278e:	ldr	r4, [r2, #4]
    2790:	cmp	r4, #0
    2792:	beq.w	2546 <usb_isr+0x53e>
    2796:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2798:	ldrh.w	lr, [r5, #4]
    279c:	b.n	27a8 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    279e:	adds	r2, #12
			if (list->addr == NULL) break;
    27a0:	ldr	r4, [r2, #4]
    27a2:	cmp	r4, #0
    27a4:	beq.w	2546 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    27a8:	ldrh	r3, [r2, #0]
    27aa:	cmp	r3, r0
    27ac:	bne.n	279e <usb_isr+0x796>
    27ae:	ldrh	r3, [r2, #2]
    27b0:	cmp	r3, lr
    27b2:	bne.n	279e <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    27b4:	lsrs	r0, r0, #8
    27b6:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    27b8:	ite	eq
    27ba:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    27bc:	ldrhne	r0, [r2, #8]
    27be:	b.n	25ce <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    27c0:	ldr	r4, [pc, #416]	; (2964 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    27c2:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    27c4:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    27c6:	strb	r2, [r4, #1]
    27c8:	b.n	25ce <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    27ca:	cmp.w	r1, #1280	; 0x500
    27ce:	bne.w	2546 <usb_isr+0x53e>
    27d2:	movs	r3, #1
    27d4:	movs	r2, #0
    27d6:	str	r3, [sp, #4]
    27d8:	b.n	23de <usb_isr+0x3d6>
    27da:	movw	r2, #8993	; 0x2321
    27de:	cmp	r1, r2
    27e0:	beq.n	27d2 <usb_isr+0x7ca>
    27e2:	b.n	2546 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    27e4:	ldrh	r2, [r5, #2]
    27e6:	cmp	r2, #0
    27e8:	bne.w	2546 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    27ec:	ldr	r4, [pc, #376]	; (2968 <usb_isr+0x960>)
    27ee:	str	r0, [sp, #4]
    27f0:	lsls	r1, r1, #2
    27f2:	add	r4, r1
    27f4:	ldrb	r1, [r4, #0]
    27f6:	bic.w	r1, r1, #2
    27fa:	strb	r1, [r4, #0]
    27fc:	b.n	23de <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    27fe:	bl	1da8 <usb_malloc>
				if (p) {
    2802:	cmp	r0, #0
    2804:	beq.w	2974 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    2808:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    280a:	ldr	r2, [pc, #352]	; (296c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    280c:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2810:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2814:	bl	1da8 <usb_malloc>
				if (p) {
    2818:	cmp	r0, #0
    281a:	beq.n	291c <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    281c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    281e:	ldr	r2, [pc, #336]	; (2970 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2820:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2824:	str.w	r2, [r9, #40]	; 0x28
    2828:	b.n	2708 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    282a:	bl	1da8 <usb_malloc>
				if (p) {
    282e:	cmp	r0, #0
    2830:	beq.n	28e0 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    2832:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2834:	ldr	r2, [pc, #308]	; (296c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2836:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    283a:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    283e:	bl	1da8 <usb_malloc>
				if (p) {
    2842:	cmp	r0, #0
    2844:	beq.n	28d4 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    2846:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2848:	ldr	r2, [pc, #292]	; (2970 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    284a:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    284e:	str.w	r2, [r9, #168]	; 0xa8
    2852:	b.n	276e <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2854:	bl	1da8 <usb_malloc>
				if (p) {
    2858:	cmp	r0, #0
    285a:	beq.w	298c <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    285e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2860:	ldr	r2, [pc, #264]	; (296c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2862:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2866:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    286a:	bl	1da8 <usb_malloc>
				if (p) {
    286e:	cmp	r0, #0
    2870:	beq.w	2980 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2874:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2876:	ldr	r2, [pc, #248]	; (2970 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2878:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    287c:	str.w	r2, [r9, #136]	; 0x88
    2880:	b.n	2758 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2882:	bl	1da8 <usb_malloc>
				if (p) {
    2886:	cmp	r0, #0
    2888:	beq.n	2910 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    288a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    288c:	ldr	r2, [pc, #220]	; (296c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    288e:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2892:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2896:	bl	1da8 <usb_malloc>
				if (p) {
    289a:	cbz	r0, 2904 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    289c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    289e:	ldr	r2, [pc, #208]	; (2970 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    28a0:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    28a4:	str.w	r2, [r9, #104]	; 0x68
    28a8:	b.n	2740 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    28aa:	bl	1da8 <usb_malloc>
				if (p) {
    28ae:	cbz	r0, 28f8 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    28b0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    28b2:	ldr	r2, [pc, #184]	; (296c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    28b4:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    28b8:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    28bc:	bl	1da8 <usb_malloc>
				if (p) {
    28c0:	cbz	r0, 28ec <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    28c2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    28c4:	ldr	r2, [pc, #168]	; (2970 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    28c6:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    28ca:	str.w	r2, [r9, #72]	; 0x48
    28ce:	b.n	2724 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    28d0:	movs	r0, #2
    28d2:	b.n	25ce <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    28d4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    28d6:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    28da:	adds	r2, #1
    28dc:	strb	r2, [r5, #0]
    28de:	b.n	276e <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    28e0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    28e2:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    28e6:	adds	r2, #1
    28e8:	strb	r2, [r5, #0]
    28ea:	b.n	283e <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    28ec:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    28ee:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    28f2:	adds	r2, #1
    28f4:	strb	r2, [r5, #0]
    28f6:	b.n	2724 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    28f8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    28fa:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    28fe:	adds	r2, #1
    2900:	strb	r2, [r5, #0]
    2902:	b.n	28bc <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2904:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2906:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    290a:	adds	r2, #1
    290c:	strb	r2, [r5, #0]
    290e:	b.n	2740 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2910:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2912:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    2916:	adds	r2, #1
    2918:	strb	r2, [r5, #0]
    291a:	b.n	2896 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    291c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    291e:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    2922:	adds	r2, #1
    2924:	strb	r2, [r5, #0]
    2926:	b.n	2708 <usb_isr+0x700>
    2928:	.word	0x1fff1918
    292c:	.word	0x1fff1880
    2930:	.word	0x1fff18d8
    2934:	.word	0x1fff18ec
    2938:	.word	0x1fff1828
    293c:	.word	0x1fff1da8
    2940:	.word	0x000042bc
    2944:	.word	0x1fff1909
    2948:	.word	0x400720c4
    294c:	.word	0x400720c8
    2950:	.word	0x400720cc
    2954:	.word	0x400720d0
    2958:	.word	0x400720d4
    295c:	.word	0x1fff0000
    2960:	.word	0x000042c4
    2964:	.word	0x1fff190c
    2968:	.word	0x400720c0
    296c:	.word	0x00400088
    2970:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2974:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2976:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    297a:	adds	r2, #1
    297c:	strb	r2, [r5, #0]
    297e:	b.n	2814 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2980:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2982:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2986:	adds	r2, #1
    2988:	strb	r2, [r5, #0]
    298a:	b.n	2758 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    298c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    298e:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    2992:	adds	r2, #1
    2994:	strb	r2, [r5, #0]
    2996:	b.n	286a <usb_isr+0x862>
    2998:	cmp	r0, #64	; 0x40
    299a:	mov	ip, r0
    299c:	it	cs
    299e:	movcs.w	ip, #64	; 0x40
    29a2:	add.w	r3, r4, ip
    29a6:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    29a8:	movs	r3, #1
    29aa:	rsb	r0, ip, r0
    29ae:	mov.w	r8, ip, lsl #16
    29b2:	movs	r2, #0
    29b4:	str	r3, [sp, #4]
    29b6:	b.n	23e8 <usb_isr+0x3e0>

000029b8 <usb_init>:
}



void usb_init(void)
{
    29b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29bc:	ldr	r4, [pc, #156]	; (2a5c <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    29be:	bl	3288 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    29c2:	movs	r2, #0
    29c4:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    29c8:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    29ca:	str	r2, [r3, #0]
		table[i].addr = 0;
    29cc:	str	r2, [r3, #4]
    29ce:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    29d0:	cmp	r3, r0
		table[i].desc = 0;
    29d2:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    29d6:	bne.n	29ca <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    29d8:	ldr	r0, [pc, #132]	; (2a60 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    29da:	ldr	r2, [pc, #136]	; (2a64 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    29dc:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    29de:	ldr.w	lr, [pc, #156]	; 2a7c <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    29e2:	ldr	r6, [pc, #132]	; (2a68 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    29e4:	ldr	r5, [pc, #132]	; (2a6c <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    29e6:	ldr	r7, [pc, #136]	; (2a70 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    29e8:	ldr.w	ip, [pc, #148]	; 2a80 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    29ec:	ldr.w	r8, [pc, #148]	; 2a84 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    29f0:	orr.w	r3, r3, #262144	; 0x40000
    29f4:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    29f6:	ldr	r3, [r2, #0]
    29f8:	orr.w	r3, r3, #50331648	; 0x3000000
    29fc:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    29fe:	movs	r3, #3
    2a00:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2a04:	movs	r3, #160	; 0xa0
    2a06:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2a08:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2a0c:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2a10:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2a14:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2a16:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2a18:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2a1c:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2a1e:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2a20:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2a22:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2a24:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2a26:	ldr	r5, [pc, #76]	; (2a74 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2a28:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2a2c:	ldr	r0, [pc, #72]	; (2a78 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    2a2e:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    2a32:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2a34:	movs	r3, #1
    2a36:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2a3a:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2a3e:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2a42:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2a44:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2a46:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2a4a:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2a4c:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2a4e:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2a52:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2a56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a5a:	nop
    2a5c:	.word	0x1fff0000
    2a60:	.word	0x40048034
    2a64:	.word	0x4000d800
    2a68:	.word	0x40072140
    2a6c:	.word	0x4007209c
    2a70:	.word	0x400720b0
    2a74:	.word	0xe000e435
    2a78:	.word	0xe000e104
    2a7c:	.word	0x40072144
    2a80:	.word	0x40072080
    2a84:	.word	0x40072088

00002a88 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2a88:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2a8a:	ldr	r4, [pc, #176]	; (2b3c <yield+0xb4>)
    2a8c:	ldrb	r3, [r4, #0]
    2a8e:	cbz	r3, 2a92 <yield+0xa>
    2a90:	pop	{r3, r4, r5, pc}
	running = 1;
    2a92:	movs	r3, #1
    2a94:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2a96:	bl	fb4 <usb_serial_available>
	if (Serial.available()) serialEvent();
    2a9a:	cmp	r0, #0
    2a9c:	bne.n	2b24 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    2a9e:	bl	3058 <serial_available>
	if (Serial1.available()) serialEvent1();
    2aa2:	cmp	r0, #0
    2aa4:	bne.n	2b1e <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    2aa6:	bl	2d40 <serial2_available>
	if (Serial2.available()) serialEvent2();
    2aaa:	cmp	r0, #0
    2aac:	bne.n	2b18 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    2aae:	bl	3358 <serial3_available>
	if (Serial3.available()) serialEvent3();
    2ab2:	cbnz	r0, 2b12 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    2ab4:	bl	2e6c <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2ab8:	cbnz	r0, 2b0c <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    2aba:	bl	2c48 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2abe:	cbnz	r0, 2b06 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    2ac0:	bl	3184 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2ac4:	cbnz	r0, 2b00 <yield+0x78>
#endif
	running = 0;
    2ac6:	movs	r3, #0
    2ac8:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2aca:	mrs	r3, IPSR
		if (ipsr != 0) return;
    2ace:	cmp	r3, #0
    2ad0:	bne.n	2a90 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2ad2:	mrs	r1, PRIMASK
		__disable_irq();
    2ad6:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2ad8:	ldr	r3, [pc, #100]	; (2b40 <yield+0xb8>)
    2ada:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2adc:	cbz	r0, 2b2a <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2ade:	ldr	r4, [pc, #100]	; (2b44 <yield+0xbc>)
    2ae0:	ldrb	r2, [r4, #0]
    2ae2:	cbnz	r2, 2b2a <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    2ae4:	ldr	r5, [r0, #20]
    2ae6:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2ae8:	movs	r3, #1
    2aea:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    2aec:	cbz	r5, 2b32 <yield+0xaa>
			firstYield->_prev = nullptr;
    2aee:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2af0:	cbnz	r1, 2af4 <yield+0x6c>
    2af2:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2af4:	movs	r5, #0
    2af6:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2af8:	ldr	r3, [r0, #8]
    2afa:	blx	r3
		runningFromYield = false;
    2afc:	strb	r5, [r4, #0]
    2afe:	b.n	2a90 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2b00:	bl	2c44 <serialEvent6()>
    2b04:	b.n	2ac6 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2b06:	bl	2b4c <serialEvent5()>
    2b0a:	b.n	2ac0 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2b0c:	bl	2c30 <serialEvent4()>
    2b10:	b.n	2aba <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    2b12:	bl	3454 <serialEvent3()>
    2b16:	b.n	2ab4 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    2b18:	bl	2c2c <serialEvent2()>
    2b1c:	b.n	2aae <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    2b1e:	bl	3450 <serialEvent1()>
    2b22:	b.n	2aa6 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    2b24:	bl	2b78 <serialEvent()>
    2b28:	b.n	2a9e <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2b2a:	cmp	r1, #0
    2b2c:	bne.n	2a90 <yield+0x8>
    2b2e:	cpsie	i
    2b30:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2b32:	ldr	r3, [pc, #20]	; (2b48 <yield+0xc0>)
    2b34:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2b36:	cmp	r1, #0
    2b38:	bne.n	2af4 <yield+0x6c>
    2b3a:	b.n	2af2 <yield+0x6a>
    2b3c:	.word	0x1fff191d
    2b40:	.word	0x1fff1c30
    2b44:	.word	0x1fff1c34
    2b48:	.word	0x1fff1c2c

00002b4c <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    2b4c:	bx	lr
    2b4e:	nop

00002b50 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2b50:	b.w	fd0 <usb_serial_flush_input>

00002b54 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2b54:	b.w	f84 <usb_serial_peekchar>

00002b58 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2b58:	b.w	f3c <usb_serial_getchar>

00002b5c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2b5c:	b.w	fb4 <usb_serial_available>

00002b60 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2b60:	b.w	1170 <usb_serial_flush_output>

00002b64 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2b64:	b.w	1128 <usb_serial_write_buffer_free>

00002b68 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2b68:	mov	r0, r1
    2b6a:	mov	r1, r2
    2b6c:	b.w	1008 <usb_serial_write>

00002b70 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2b70:	mov	r0, r1
    2b72:	b.w	1110 <usb_serial_putchar>
    2b76:	nop

00002b78 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2b78:	bx	lr
    2b7a:	nop

00002b7c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2b7c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    2b7e:	ldr	r2, [pc, #24]	; (2b98 <Print::println()+0x1c>)
	return write(buf, 2);
    2b80:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2b82:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    2b84:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2b86:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2b88:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2b8a:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    2b8e:	movs	r2, #2
    2b90:	blx	r3
}
    2b92:	add	sp, #12
    2b94:	ldr.w	pc, [sp], #4
    2b98:	.word	0x000042b8

00002b9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2b9c:	push	{r4, r5, r6, r7, lr}
    2b9e:	mov	r7, r0
    2ba0:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2ba2:	cmp	r2, #0
    2ba4:	beq.n	2c0e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2ba6:	cmp	r2, #1
    2ba8:	it	eq
    2baa:	moveq	r2, #10
	}


	if (n == 0) {
    2bac:	cbz	r1, 2c04 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2bae:	movs	r4, #33	; 0x21
    2bb0:	b.n	2bb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2bb2:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2bb4:	udiv	r5, r1, r2
    2bb8:	mls	r1, r2, r5, r1
    2bbc:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2bbe:	cmp	r1, #9
    2bc0:	add.w	r1, r0, #48	; 0x30
    2bc4:	it	ls
    2bc6:	uxtbls	r0, r1
    2bc8:	add	r1, sp, #40	; 0x28
    2bca:	it	hi
    2bcc:	addhi	r0, #55	; 0x37
    2bce:	add	r1, r4
    2bd0:	it	hi
    2bd2:	uxtbhi	r0, r0
    2bd4:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    2bd8:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    2bda:	mov	r1, r5
    2bdc:	cmp	r5, #0
    2bde:	bne.n	2bb2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2be0:	cbz	r3, 2bf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2be2:	subs	r4, #1
    2be4:	uxtb	r4, r4
		buf[i] = '-';
    2be6:	add	r3, sp, #40	; 0x28
    2be8:	add	r3, r4
    2bea:	movs	r2, #45	; 0x2d
    2bec:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2bf0:	ldr	r3, [r7, #0]
    2bf2:	add	r2, sp, #4
    2bf4:	adds	r1, r2, r4
    2bf6:	ldr	r3, [r3, #4]
    2bf8:	mov	r0, r7
    2bfa:	rsb	r2, r4, #34	; 0x22
    2bfe:	blx	r3
}
    2c00:	add	sp, #44	; 0x2c
    2c02:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2c04:	movs	r2, #48	; 0x30
    2c06:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2c0a:	movs	r4, #33	; 0x21
    2c0c:	b.n	2be0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2c0e:	ldr	r3, [r0, #0]
    2c10:	uxtb	r1, r1
    2c12:	ldr	r3, [r3, #0]
    2c14:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2c16:	add	sp, #44	; 0x2c
    2c18:	pop	{r4, r5, r6, r7, pc}
    2c1a:	nop

00002c1c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    2c1c:	cmp	r1, #0
		sign = '-';
		n = -n;
    2c1e:	itte	lt
    2c20:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    2c22:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    2c24:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    2c26:	movs	r2, #10
    2c28:	b.w	2b9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00002c2c <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    2c2c:	bx	lr
    2c2e:	nop

00002c30 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    2c30:	bx	lr
    2c32:	nop

00002c34 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2c34:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2c36:	bl	490 <setup>
	while (1) {
		loop();
    2c3a:	bl	494 <loop>
		yield();
    2c3e:	bl	2a88 <yield>
    2c42:	b.n	2c3a <main+0x6>

00002c44 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    2c44:	bx	lr
    2c46:	nop

00002c48 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c48:	ldr	r2, [pc, #20]	; (2c60 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    2c4a:	ldr	r3, [pc, #24]	; (2c64 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c4c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2c4e:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c50:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2c52:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2c54:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    2c56:	it	cc
    2c58:	addcc	r0, #64	; 0x40
    2c5a:	subs	r0, r0, r3
}
    2c5c:	bx	lr
    2c5e:	nop
    2c60:	.word	0x1fff1924
    2c64:	.word	0x1fff1925

00002c68 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    2c68:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    2c6a:	ldr	r3, [pc, #172]	; (2d18 <uart4_status_isr+0xb0>)
    2c6c:	ldrb	r2, [r3, #4]
    2c6e:	lsls	r4, r2, #26
    2c70:	bpl.n	2cb2 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2c72:	ldr	r0, [pc, #168]	; (2d1c <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2c74:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2c76:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c78:	ldr	r1, [pc, #164]	; (2d20 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2c7a:	adds	r3, #1
    2c7c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c7e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2c80:	it	gt
    2c82:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c84:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2c86:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c88:	beq.n	2c92 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    2c8a:	ldr	r4, [pc, #152]	; (2d24 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    2c8c:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2c8e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2c90:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2c92:	ldr	r2, [pc, #148]	; (2d28 <uart4_status_isr+0xc0>)
    2c94:	ldr	r1, [r2, #0]
    2c96:	cbz	r1, 2cb2 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2c98:	ldr	r2, [pc, #144]	; (2d2c <uart4_status_isr+0xc4>)
    2c9a:	ldrb	r2, [r2, #0]
    2c9c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2c9e:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2ca0:	itet	cc
    2ca2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2ca6:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2ca8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2caa:	cmp	r3, #39	; 0x27
    2cac:	itt	gt
    2cae:	movgt	r3, #1
    2cb0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    2cb2:	ldr	r2, [pc, #100]	; (2d18 <uart4_status_isr+0xb0>)
    2cb4:	ldrb	r3, [r2, #3]
    2cb6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2cb8:	lsls	r0, r3, #24
    2cba:	bmi.n	2ce0 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2cbc:	lsls	r2, r3, #25
    2cbe:	bpl.n	2cdc <uart4_status_isr+0x74>
    2cc0:	ldr	r3, [pc, #84]	; (2d18 <uart4_status_isr+0xb0>)
    2cc2:	ldrb	r3, [r3, #4]
    2cc4:	lsls	r3, r3, #25
    2cc6:	bpl.n	2cdc <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2cc8:	ldr	r3, [pc, #100]	; (2d30 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2cca:	ldr	r1, [pc, #104]	; (2d34 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2ccc:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2cce:	movs	r2, #0
    2cd0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2cd2:	cbz	r3, 2cd6 <uart4_status_isr+0x6e>
    2cd4:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    2cd6:	ldr	r3, [pc, #64]	; (2d18 <uart4_status_isr+0xb0>)
    2cd8:	movs	r2, #44	; 0x2c
    2cda:	strb	r2, [r3, #3]
	}
}
    2cdc:	pop	{r4, r5}
    2cde:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2ce0:	ldrb	r1, [r2, #4]
    2ce2:	lsls	r1, r1, #24
    2ce4:	bpl.n	2cbc <uart4_status_isr+0x54>
		head = tx_buffer_head;
    2ce6:	ldr	r1, [pc, #80]	; (2d38 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2ce8:	ldr	r0, [pc, #64]	; (2d2c <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2cea:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2cec:	ldrb	r1, [r0, #0]
    2cee:	uxtb	r1, r1
		if (head == tail) {
    2cf0:	cmp	r4, r1
    2cf2:	beq.n	2d10 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2cf4:	adds	r2, r1, #1
    2cf6:	cmp	r2, #39	; 0x27
    2cf8:	itt	hi
    2cfa:	movhi	r1, #0
    2cfc:	movhi	r2, r1
			n = tx_buffer[tail];
    2cfe:	ldr	r5, [pc, #60]	; (2d3c <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2d00:	ldr	r4, [pc, #20]	; (2d18 <uart4_status_isr+0xb0>)
    2d02:	it	ls
    2d04:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2d06:	ldrb	r2, [r5, r2]
    2d08:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2d0a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2d0c:	strb	r1, [r0, #0]
    2d0e:	b.n	2cbc <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    2d10:	movs	r1, #108	; 0x6c
    2d12:	strb	r1, [r2, #3]
    2d14:	b.n	2cbc <uart4_status_isr+0x54>
    2d16:	nop
    2d18:	.word	0x400ea000
    2d1c:	.word	0x1fff1924
    2d20:	.word	0x1fff1925
    2d24:	.word	0x1fff1950
    2d28:	.word	0x1fff1920
    2d2c:	.word	0x1fff1991
    2d30:	.word	0x1fff1994
    2d34:	.word	0x1fff1990
    2d38:	.word	0x1fff1998
    2d3c:	.word	0x1fff1928

00002d40 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d40:	ldr	r2, [pc, #20]	; (2d58 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    2d42:	ldr	r3, [pc, #24]	; (2d5c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d44:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2d46:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d48:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2d4a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2d4c:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    2d4e:	it	cc
    2d50:	addcc	r0, #64	; 0x40
    2d52:	subs	r0, r0, r3
}
    2d54:	bx	lr
    2d56:	nop
    2d58:	.word	0x1fff1a0c
    2d5c:	.word	0x1fff19a1

00002d60 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    2d60:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2d62:	ldr	r3, [pc, #224]	; (2e44 <uart1_status_isr+0xe4>)
    2d64:	ldrb	r2, [r3, #4]
    2d66:	tst.w	r2, #48	; 0x30
    2d6a:	beq.n	2dc6 <uart1_status_isr+0x66>
		__disable_irq();
    2d6c:	cpsid	i
		avail = UART1_RCFIFO;
    2d6e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2d70:	and.w	r2, r1, #255	; 0xff
    2d74:	cmp	r1, #0
    2d76:	beq.n	2df4 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2d78:	cpsie	i
			head = rx_buffer_head;
    2d7a:	ldr	r7, [pc, #204]	; (2e48 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2d7c:	ldr	r1, [pc, #204]	; (2e4c <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2d7e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2d80:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2d82:	ldr	r6, [pc, #204]	; (2e50 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2d84:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2d86:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2d88:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    2d8a:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2d8c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2d8e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2d90:	it	cs
    2d92:	movcs	r3, #0
				if (newhead != tail) {
    2d94:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2d96:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2d9a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2d9c:	itt	ne
    2d9e:	strbne	r1, [r6, r3]
    2da0:	movne	r0, r3
				}
			} while (--avail > 0);
    2da2:	ands.w	r2, r2, #255	; 0xff
    2da6:	bne.n	2d8a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2da8:	ldr	r3, [pc, #168]	; (2e54 <uart1_status_isr+0xf4>)
    2daa:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2dac:	uxtb	r2, r0
    2dae:	strb	r2, [r7, #0]
			if (rts_pin) {
    2db0:	cbz	r3, 2dc6 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2db2:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2db4:	itet	cc
    2db6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2dba:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2dbc:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2dbe:	cmp	r0, #39	; 0x27
    2dc0:	itt	gt
    2dc2:	movgt	r2, #1
    2dc4:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    2dc6:	ldr	r1, [pc, #124]	; (2e44 <uart1_status_isr+0xe4>)
    2dc8:	ldrb	r2, [r1, #3]
    2dca:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2dcc:	lsls	r5, r2, #24
    2dce:	bmi.n	2dfe <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    2dd0:	lsls	r2, r2, #25
    2dd2:	bpl.n	2df0 <uart1_status_isr+0x90>
    2dd4:	ldr	r3, [pc, #108]	; (2e44 <uart1_status_isr+0xe4>)
    2dd6:	ldrb	r3, [r3, #4]
    2dd8:	lsls	r3, r3, #25
    2dda:	bpl.n	2df0 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2ddc:	ldr	r3, [pc, #120]	; (2e58 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2dde:	ldr	r1, [pc, #124]	; (2e5c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2de0:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2de2:	movs	r2, #0
    2de4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2de6:	cbz	r3, 2dea <uart1_status_isr+0x8a>
    2de8:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    2dea:	ldr	r3, [pc, #88]	; (2e44 <uart1_status_isr+0xe4>)
    2dec:	movs	r2, #60	; 0x3c
    2dee:	strb	r2, [r3, #3]
	}
}
    2df0:	pop	{r4, r5, r6, r7}
    2df2:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2df4:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    2df6:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2df8:	strb	r2, [r3, #17]
			__enable_irq();
    2dfa:	cpsie	i
    2dfc:	b.n	2dc6 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2dfe:	ldrb	r3, [r1, #4]
    2e00:	lsls	r4, r3, #24
    2e02:	bpl.n	2dd0 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    2e04:	ldr	r3, [pc, #88]	; (2e60 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    2e06:	ldr	r6, [pc, #92]	; (2e64 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2e08:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2e0a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2e0c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2e0e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2e10:	cmp	r4, r3
    2e12:	beq.n	2e32 <uart1_status_isr+0xd2>
    2e14:	ldr	r5, [pc, #80]	; (2e68 <uart1_status_isr+0x108>)
    2e16:	b.n	2e1c <uart1_status_isr+0xbc>
    2e18:	cmp	r3, r4
    2e1a:	beq.n	2e32 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2e1c:	adds	r3, #1
    2e1e:	cmp	r3, #40	; 0x28
    2e20:	it	cs
    2e22:	movcs	r3, #0
			avail = UART1_S1;
    2e24:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2e26:	ldrb	r0, [r5, r3]
    2e28:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    2e2a:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    2e2c:	ldrb	r0, [r1, #20]
    2e2e:	cmp	r0, #7
    2e30:	bls.n	2e18 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    2e32:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2e34:	ldr	r1, [pc, #12]	; (2e44 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    2e36:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2e38:	ldrb	r3, [r1, #4]
    2e3a:	lsls	r0, r3, #24
    2e3c:	itt	mi
    2e3e:	movmi	r3, #124	; 0x7c
    2e40:	strbmi	r3, [r1, #3]
    2e42:	b.n	2dd0 <uart1_status_isr+0x70>
    2e44:	.word	0x4006b000
    2e48:	.word	0x1fff1a0c
    2e4c:	.word	0x1fff19a1
    2e50:	.word	0x1fff19cc
    2e54:	.word	0x1fff199c
    2e58:	.word	0x1fff1a10
    2e5c:	.word	0x1fff19a0
    2e60:	.word	0x1fff1a14
    2e64:	.word	0x1fff1a0d
    2e68:	.word	0x1fff19a4

00002e6c <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e6c:	ldr	r2, [pc, #20]	; (2e84 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    2e6e:	ldr	r3, [pc, #24]	; (2e88 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e70:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2e72:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e74:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2e76:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2e78:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    2e7a:	it	cc
    2e7c:	addcc	r0, #64	; 0x40
    2e7e:	subs	r0, r0, r3
}
    2e80:	bx	lr
    2e82:	nop
    2e84:	.word	0x1fff1a1c
    2e88:	.word	0x1fff1a1d

00002e8c <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    2e8c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    2e8e:	ldr	r3, [pc, #172]	; (2f3c <uart3_status_isr+0xb0>)
    2e90:	ldrb	r2, [r3, #4]
    2e92:	lsls	r4, r2, #26
    2e94:	bpl.n	2ed6 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2e96:	ldr	r0, [pc, #168]	; (2f40 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2e98:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2e9a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e9c:	ldr	r1, [pc, #164]	; (2f44 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2e9e:	adds	r3, #1
    2ea0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2ea2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2ea4:	it	gt
    2ea6:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2ea8:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2eaa:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2eac:	beq.n	2eb6 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    2eae:	ldr	r4, [pc, #152]	; (2f48 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    2eb0:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2eb2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2eb4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2eb6:	ldr	r2, [pc, #148]	; (2f4c <uart3_status_isr+0xc0>)
    2eb8:	ldr	r1, [r2, #0]
    2eba:	cbz	r1, 2ed6 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2ebc:	ldr	r2, [pc, #144]	; (2f50 <uart3_status_isr+0xc4>)
    2ebe:	ldrb	r2, [r2, #0]
    2ec0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2ec2:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2ec4:	itet	cc
    2ec6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2eca:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2ecc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2ece:	cmp	r3, #39	; 0x27
    2ed0:	itt	gt
    2ed2:	movgt	r3, #1
    2ed4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    2ed6:	ldr	r2, [pc, #100]	; (2f3c <uart3_status_isr+0xb0>)
    2ed8:	ldrb	r3, [r2, #3]
    2eda:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2edc:	lsls	r0, r3, #24
    2ede:	bmi.n	2f04 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    2ee0:	lsls	r2, r3, #25
    2ee2:	bpl.n	2f00 <uart3_status_isr+0x74>
    2ee4:	ldr	r3, [pc, #84]	; (2f3c <uart3_status_isr+0xb0>)
    2ee6:	ldrb	r3, [r3, #4]
    2ee8:	lsls	r3, r3, #25
    2eea:	bpl.n	2f00 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2eec:	ldr	r3, [pc, #100]	; (2f54 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2eee:	ldr	r1, [pc, #104]	; (2f58 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2ef0:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2ef2:	movs	r2, #0
    2ef4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2ef6:	cbz	r3, 2efa <uart3_status_isr+0x6e>
    2ef8:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    2efa:	ldr	r3, [pc, #64]	; (2f3c <uart3_status_isr+0xb0>)
    2efc:	movs	r2, #44	; 0x2c
    2efe:	strb	r2, [r3, #3]
	}
}
    2f00:	pop	{r4, r5}
    2f02:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2f04:	ldrb	r1, [r2, #4]
    2f06:	lsls	r1, r1, #24
    2f08:	bpl.n	2ee0 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    2f0a:	ldr	r1, [pc, #80]	; (2f5c <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2f0c:	ldr	r0, [pc, #64]	; (2f50 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2f0e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2f10:	ldrb	r1, [r0, #0]
    2f12:	uxtb	r1, r1
		if (head == tail) {
    2f14:	cmp	r4, r1
    2f16:	beq.n	2f34 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    2f18:	adds	r2, r1, #1
    2f1a:	cmp	r2, #39	; 0x27
    2f1c:	itt	hi
    2f1e:	movhi	r1, #0
    2f20:	movhi	r2, r1
			n = tx_buffer[tail];
    2f22:	ldr	r5, [pc, #60]	; (2f60 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2f24:	ldr	r4, [pc, #20]	; (2f3c <uart3_status_isr+0xb0>)
    2f26:	it	ls
    2f28:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2f2a:	ldrb	r2, [r5, r2]
    2f2c:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2f2e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2f30:	strb	r1, [r0, #0]
    2f32:	b.n	2ee0 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    2f34:	movs	r1, #108	; 0x6c
    2f36:	strb	r1, [r2, #3]
    2f38:	b.n	2ee0 <uart3_status_isr+0x54>
    2f3a:	nop
    2f3c:	.word	0x4006d000
    2f40:	.word	0x1fff1a1c
    2f44:	.word	0x1fff1a1d
    2f48:	.word	0x1fff1a48
    2f4c:	.word	0x1fff1a18
    2f50:	.word	0x1fff1a89
    2f54:	.word	0x1fff1a8c
    2f58:	.word	0x1fff1a88
    2f5c:	.word	0x1fff1a90
    2f60:	.word	0x1fff1a20

00002f64 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    2f64:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2f66:	ldr	r4, [pc, #64]	; (2fa8 <fault_isr+0x44>)
    2f68:	b.n	2f7c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2f6a:	ldr	r3, [r4, #0]
    2f6c:	lsls	r1, r3, #21
    2f6e:	bmi.n	2f8c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2f70:	ldr	r3, [r4, #0]
    2f72:	lsls	r2, r3, #20
    2f74:	bmi.n	2f96 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2f76:	ldr	r3, [r4, #0]
    2f78:	lsls	r3, r3, #19
    2f7a:	bmi.n	2fa0 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2f7c:	ldr	r3, [r4, #0]
    2f7e:	lsls	r0, r3, #13
    2f80:	bpl.n	2f6a <fault_isr+0x6>
    2f82:	bl	2008 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2f86:	ldr	r3, [r4, #0]
    2f88:	lsls	r1, r3, #21
    2f8a:	bpl.n	2f70 <fault_isr+0xc>
    2f8c:	bl	3078 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2f90:	ldr	r3, [r4, #0]
    2f92:	lsls	r2, r3, #20
    2f94:	bpl.n	2f76 <fault_isr+0x12>
    2f96:	bl	2d60 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2f9a:	ldr	r3, [r4, #0]
    2f9c:	lsls	r3, r3, #19
    2f9e:	bpl.n	2f7c <fault_isr+0x18>
    2fa0:	bl	3378 <uart2_status_isr>
    2fa4:	b.n	2f7c <fault_isr+0x18>
    2fa6:	nop
    2fa8:	.word	0x40048034

00002fac <unused_isr>:
	}
}

void unused_isr(void)
{
    2fac:	push	{r3, lr}
	fault_isr();
    2fae:	bl	2f64 <fault_isr>
    2fb2:	nop

00002fb4 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    2fb4:	ldr	r3, [pc, #4]	; (2fbc <startup_early_hook+0x8>)
    2fb6:	movs	r2, #16
    2fb8:	strh	r2, [r3, #0]
    2fba:	bx	lr
    2fbc:	.word	0x40052000

00002fc0 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    2fc0:	bx	lr
    2fc2:	nop

00002fc4 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    2fc4:	ldr	r1, [pc, #36]	; (2fec <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    2fc6:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    2fc8:	ldr	r3, [r1, #0]
	if (incr != 0) {
    2fca:	cbz	r0, 2fda <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    2fcc:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    2fce:	add	r0, r3
    2fd0:	sub.w	r2, r2, #8192	; 0x2000
    2fd4:	cmp	r0, r2
    2fd6:	bcs.n	2fde <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    2fd8:	str	r0, [r1, #0]
	}
	return prev;
    2fda:	mov	r0, r3
}
    2fdc:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    2fde:	bl	364c <__errno>
    2fe2:	movs	r3, #12
    2fe4:	str	r3, [r0, #0]
			return (void *)-1;
    2fe6:	mov.w	r0, #4294967295
    2fea:	pop	{r3, pc}
    2fec:	.word	0x1fff0c6c

00002ff0 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    2ff0:	ldr	r2, [pc, #32]	; (3014 <kinetis_hsrun_disable+0x24>)
    2ff2:	ldrb	r3, [r2, #0]
    2ff4:	cmp	r3, #128	; 0x80
    2ff6:	beq.n	2ffc <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    2ff8:	movs	r0, #0
}
    2ffa:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2ffc:	ldr	r1, [pc, #24]	; (3018 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2ffe:	ldr	r3, [pc, #28]	; (301c <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3000:	ldr	r0, [pc, #28]	; (3020 <kinetis_hsrun_disable+0x30>)
    3002:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3004:	movs	r1, #0
    3006:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3008:	ldrb	r3, [r2, #0]
    300a:	cmp	r3, #128	; 0x80
    300c:	beq.n	3008 <kinetis_hsrun_disable+0x18>
		return 1;
    300e:	movs	r0, #1
    3010:	bx	lr
    3012:	nop
    3014:	.word	0x4007e003
    3018:	.word	0x40048044
    301c:	.word	0x4007e001
    3020:	.word	0x22280000

00003024 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3024:	ldr	r2, [pc, #36]	; (304c <kinetis_hsrun_enable+0x28>)
    3026:	ldrb	r3, [r2, #0]
    3028:	cmp	r3, #1
    302a:	beq.n	3030 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    302c:	movs	r0, #0
}
    302e:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3030:	add.w	r3, r3, #1073741824	; 0x40000000
    3034:	add.w	r3, r3, #516096	; 0x7e000
    3038:	movs	r1, #96	; 0x60
    303a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    303c:	ldrb	r3, [r2, #0]
    303e:	cmp	r3, #128	; 0x80
    3040:	bne.n	303c <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3042:	ldr	r3, [pc, #12]	; (3050 <kinetis_hsrun_enable+0x2c>)
    3044:	ldr	r2, [pc, #12]	; (3054 <kinetis_hsrun_enable+0x30>)
    3046:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3048:	movs	r0, #1
    304a:	bx	lr
    304c:	.word	0x4007e003
    3050:	.word	0x40048044
    3054:	.word	0x02060000

00003058 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3058:	ldr	r2, [pc, #20]	; (3070 <serial_available+0x18>)
	tail = rx_buffer_tail;
    305a:	ldr	r3, [pc, #24]	; (3074 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    305c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    305e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3060:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3062:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3064:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3066:	it	cc
    3068:	addcc	r0, #64	; 0x40
    306a:	subs	r0, r0, r3
}
    306c:	bx	lr
    306e:	nop
    3070:	.word	0x1fff1a98
    3074:	.word	0x1fff1a99

00003078 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3078:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    307a:	ldr	r3, [pc, #224]	; (315c <uart0_status_isr+0xe4>)
    307c:	ldrb	r2, [r3, #4]
    307e:	tst.w	r2, #48	; 0x30
    3082:	beq.n	30de <uart0_status_isr+0x66>
		__disable_irq();
    3084:	cpsid	i
		avail = UART0_RCFIFO;
    3086:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3088:	and.w	r2, r1, #255	; 0xff
    308c:	cmp	r1, #0
    308e:	beq.n	310c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3090:	cpsie	i
			head = rx_buffer_head;
    3092:	ldr	r7, [pc, #204]	; (3160 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3094:	ldr	r1, [pc, #204]	; (3164 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3096:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3098:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    309a:	ldr	r6, [pc, #204]	; (3168 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    309c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    309e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    30a0:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    30a2:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    30a4:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    30a6:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    30a8:	it	cs
    30aa:	movcs	r3, #0
				if (newhead != tail) {
    30ac:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    30ae:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    30b2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    30b4:	itt	ne
    30b6:	strbne	r1, [r6, r3]
    30b8:	movne	r0, r3
				}
			} while (--avail > 0);
    30ba:	ands.w	r2, r2, #255	; 0xff
    30be:	bne.n	30a2 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    30c0:	ldr	r3, [pc, #168]	; (316c <uart0_status_isr+0xf4>)
    30c2:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    30c4:	uxtb	r2, r0
    30c6:	strb	r2, [r7, #0]
			if (rts_pin) {
    30c8:	cbz	r3, 30de <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    30ca:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    30cc:	itet	cc
    30ce:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    30d2:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    30d4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    30d6:	cmp	r0, #39	; 0x27
    30d8:	itt	gt
    30da:	movgt	r2, #1
    30dc:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    30de:	ldr	r1, [pc, #124]	; (315c <uart0_status_isr+0xe4>)
    30e0:	ldrb	r2, [r1, #3]
    30e2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    30e4:	lsls	r5, r2, #24
    30e6:	bmi.n	3116 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    30e8:	lsls	r2, r2, #25
    30ea:	bpl.n	3108 <uart0_status_isr+0x90>
    30ec:	ldr	r3, [pc, #108]	; (315c <uart0_status_isr+0xe4>)
    30ee:	ldrb	r3, [r3, #4]
    30f0:	lsls	r3, r3, #25
    30f2:	bpl.n	3108 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    30f4:	ldr	r3, [pc, #120]	; (3170 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    30f6:	ldr	r1, [pc, #124]	; (3174 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    30f8:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    30fa:	movs	r2, #0
    30fc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    30fe:	cbz	r3, 3102 <uart0_status_isr+0x8a>
    3100:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3102:	ldr	r3, [pc, #88]	; (315c <uart0_status_isr+0xe4>)
    3104:	movs	r2, #60	; 0x3c
    3106:	strb	r2, [r3, #3]
	}
}
    3108:	pop	{r4, r5, r6, r7}
    310a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    310c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    310e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3110:	strb	r2, [r3, #17]
			__enable_irq();
    3112:	cpsie	i
    3114:	b.n	30de <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3116:	ldrb	r3, [r1, #4]
    3118:	lsls	r4, r3, #24
    311a:	bpl.n	30e8 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    311c:	ldr	r3, [pc, #88]	; (3178 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    311e:	ldr	r6, [pc, #92]	; (317c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3120:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3122:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3124:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3126:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3128:	cmp	r4, r3
    312a:	beq.n	314a <uart0_status_isr+0xd2>
    312c:	ldr	r5, [pc, #80]	; (3180 <uart0_status_isr+0x108>)
    312e:	b.n	3134 <uart0_status_isr+0xbc>
    3130:	cmp	r3, r4
    3132:	beq.n	314a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3134:	adds	r3, #1
    3136:	cmp	r3, #64	; 0x40
    3138:	it	cs
    313a:	movcs	r3, #0
			avail = UART0_S1;
    313c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    313e:	ldrb	r0, [r5, r3]
    3140:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3142:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3144:	ldrb	r0, [r1, #20]
    3146:	cmp	r0, #7
    3148:	bls.n	3130 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    314a:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    314c:	ldr	r1, [pc, #12]	; (315c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    314e:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3150:	ldrb	r3, [r1, #4]
    3152:	lsls	r0, r3, #24
    3154:	itt	mi
    3156:	movmi	r3, #124	; 0x7c
    3158:	strbmi	r3, [r1, #3]
    315a:	b.n	30e8 <uart0_status_isr+0x70>
    315c:	.word	0x4006a000
    3160:	.word	0x1fff1a98
    3164:	.word	0x1fff1a99
    3168:	.word	0x1fff1adc
    316c:	.word	0x1fff1a94
    3170:	.word	0x1fff1b20
    3174:	.word	0x1fff1b1c
    3178:	.word	0x1fff1b24
    317c:	.word	0x1fff1b1d
    3180:	.word	0x1fff1a9c

00003184 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3184:	ldr	r2, [pc, #20]	; (319c <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3186:	ldr	r3, [pc, #24]	; (31a0 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3188:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    318a:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    318c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    318e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3190:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3192:	it	cc
    3194:	addcc	r0, #64	; 0x40
    3196:	subs	r0, r0, r3
}
    3198:	bx	lr
    319a:	nop
    319c:	.word	0x1fff1b2c
    31a0:	.word	0x1fff1b2d

000031a4 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    31a4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    31a6:	ldr	r3, [pc, #176]	; (3258 <lpuart0_status_isr+0xb4>)
    31a8:	ldr	r2, [r3, #4]
    31aa:	lsls	r4, r2, #10
    31ac:	bpl.n	31ee <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    31ae:	ldr	r0, [pc, #172]	; (325c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    31b0:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    31b2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31b4:	ldr	r1, [pc, #168]	; (3260 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    31b6:	adds	r3, #1
    31b8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31ba:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    31bc:	it	gt
    31be:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31c0:	cmp	r3, r1
    31c2:	beq.n	31ce <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    31c4:	ldr	r4, [pc, #156]	; (3264 <lpuart0_status_isr+0xc0>)
    31c6:	uxtb	r2, r2
			rx_buffer_head = head;
    31c8:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    31ca:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    31cc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    31ce:	ldr	r2, [pc, #152]	; (3268 <lpuart0_status_isr+0xc4>)
    31d0:	ldr	r1, [r2, #0]
    31d2:	cbz	r1, 31ee <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    31d4:	ldr	r2, [pc, #148]	; (326c <lpuart0_status_isr+0xc8>)
    31d6:	ldrb	r2, [r2, #0]
    31d8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    31da:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    31dc:	itet	cc
    31de:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    31e2:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    31e4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    31e6:	cmp	r3, #39	; 0x27
    31e8:	itt	gt
    31ea:	movgt	r3, #1
    31ec:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    31ee:	ldr	r2, [pc, #104]	; (3258 <lpuart0_status_isr+0xb4>)
    31f0:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    31f2:	lsls	r0, r3, #8
    31f4:	bpl.n	31fc <lpuart0_status_isr+0x58>
    31f6:	ldr	r2, [r2, #4]
    31f8:	lsls	r1, r2, #8
    31fa:	bmi.n	3220 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    31fc:	lsls	r2, r3, #9
    31fe:	bpl.n	321c <lpuart0_status_isr+0x78>
    3200:	ldr	r3, [pc, #84]	; (3258 <lpuart0_status_isr+0xb4>)
    3202:	ldr	r3, [r3, #4]
    3204:	lsls	r3, r3, #9
    3206:	bpl.n	321c <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3208:	ldr	r3, [pc, #100]	; (3270 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    320a:	ldr	r1, [pc, #104]	; (3274 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    320c:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    320e:	movs	r2, #0
    3210:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3212:	cbz	r3, 3216 <lpuart0_status_isr+0x72>
    3214:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3216:	ldr	r3, [pc, #96]	; (3278 <lpuart0_status_isr+0xd4>)
    3218:	movs	r2, #0
    321a:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    321c:	pop	{r4, r5}
    321e:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3220:	ldr	r2, [pc, #88]	; (327c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3222:	ldr	r1, [pc, #72]	; (326c <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3224:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3226:	ldrb	r2, [r1, #0]
    3228:	uxtb	r2, r2
		if (head == tail) {
    322a:	cmp	r0, r2
    322c:	beq.n	324a <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    322e:	adds	r2, #1
    3230:	cmp	r2, #39	; 0x27
    3232:	itt	hi
    3234:	movhi	r0, #0
    3236:	movhi	r2, r0
			n = tx_buffer[tail];
    3238:	ldr	r5, [pc, #68]	; (3280 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    323a:	ldr	r4, [pc, #28]	; (3258 <lpuart0_status_isr+0xb4>)
    323c:	it	ls
    323e:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3240:	ldrb	r2, [r5, r2]
    3242:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3244:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3246:	strb	r0, [r1, #0]
    3248:	b.n	31fc <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    324a:	ldr	r0, [pc, #56]	; (3284 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    324c:	ldr	r2, [pc, #40]	; (3278 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    324e:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3250:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3252:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3254:	str	r1, [r2, #0]
    3256:	b.n	31fc <lpuart0_status_isr+0x58>
    3258:	.word	0x400c4000
    325c:	.word	0x1fff1b2c
    3260:	.word	0x1fff1b2d
    3264:	.word	0x1fff1b58
    3268:	.word	0x1fff1b28
    326c:	.word	0x1fff1b99
    3270:	.word	0x1fff1b9c
    3274:	.word	0x1fff1b98
    3278:	.word	0x43880158
    327c:	.word	0x1fff1ba0
    3280:	.word	0x1fff1b30
    3284:	.word	0x4388015c

00003288 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3288:	push	{r4, lr}
    328a:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    328c:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    328e:	bl	2ff0 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3292:	ldr	r2, [pc, #96]	; (32f4 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3294:	ldr	r3, [pc, #96]	; (32f8 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3296:	ldr	r1, [pc, #100]	; (32fc <usb_init_serialnumber+0x74>)
    3298:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    329a:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    329c:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    329e:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    32a0:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    32a2:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    32a4:	ldrb	r3, [r2, #0]
    32a6:	lsls	r3, r3, #24
    32a8:	bpl.n	32a4 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    32aa:	ldr	r3, [pc, #84]	; (3300 <usb_init_serialnumber+0x78>)
    32ac:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    32ae:	bl	3024 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    32b2:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    32b4:	ldr	r3, [pc, #76]	; (3304 <usb_init_serialnumber+0x7c>)
    32b6:	cmp	r4, r3
    32b8:	itt	ls
    32ba:	addls.w	r4, r4, r4, lsl #2
    32be:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    32c0:	mov	r0, r4
    32c2:	ldr	r4, [pc, #68]	; (3308 <usb_init_serialnumber+0x80>)
    32c4:	add	r1, sp, #4
    32c6:	movs	r2, #10
    32c8:	bl	330c <ultoa>
    32cc:	add	r1, sp, #4
    32ce:	mov	r0, r4
	for (i=0; i<10; i++) {
    32d0:	movs	r3, #0
		char c = buf[i];
    32d2:	ldrb.w	r2, [r1], #1
    32d6:	adds	r3, #1
		if (!c) break;
    32d8:	cbz	r2, 32ea <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    32da:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    32dc:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    32e0:	bne.n	32d2 <usb_init_serialnumber+0x4a>
    32e2:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    32e4:	strb	r3, [r4, #0]
}
    32e6:	add	sp, #16
    32e8:	pop	{r4, pc}
    32ea:	lsls	r3, r3, #1
    32ec:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    32ee:	strb	r3, [r4, #0]
}
    32f0:	add	sp, #16
    32f2:	pop	{r4, pc}
    32f4:	.word	0x40020004
    32f8:	.word	0x40020000
    32fc:	.word	0x41070000
    3300:	.word	0x4002000c
    3304:	.word	0x0098967f
    3308:	.word	0x1fff0d50

0000330c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    330c:	push	{r4, r5, r6, r7}
    330e:	subs	r5, r1, #1
    3310:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3312:	movs	r4, #0
    3314:	b.n	3318 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3316:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3318:	udiv	r3, r0, r2
    331c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3320:	cmp	r0, #9
    3322:	add.w	r7, r0, #48	; 0x30
    3326:	itet	hi
    3328:	addhi	r0, #55	; 0x37
    332a:	uxtbls	r0, r7
    332c:	uxtbhi	r0, r0
    332e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3332:	mov	r0, r3
    3334:	cmp	r3, #0
    3336:	bne.n	3316 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3338:	adds	r2, r1, r4
    333a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    333c:	cbz	r4, 3352 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    333e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3340:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3344:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3346:	adds	r3, #1
    3348:	subs	r0, r4, r3
    334a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    334c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3350:	blt.n	333e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3352:	mov	r0, r1
    3354:	pop	{r4, r5, r6, r7}
    3356:	bx	lr

00003358 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3358:	ldr	r2, [pc, #20]	; (3370 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    335a:	ldr	r3, [pc, #24]	; (3374 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    335c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    335e:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3360:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3362:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3364:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3366:	it	cc
    3368:	addcc	r0, #64	; 0x40
    336a:	subs	r0, r0, r3
}
    336c:	bx	lr
    336e:	nop
    3370:	.word	0x1fff1ba8
    3374:	.word	0x1fff1ba9

00003378 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3378:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    337a:	ldr	r3, [pc, #172]	; (3428 <uart2_status_isr+0xb0>)
    337c:	ldrb	r2, [r3, #4]
    337e:	lsls	r4, r2, #26
    3380:	bpl.n	33c2 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3382:	ldr	r0, [pc, #168]	; (342c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3384:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3386:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3388:	ldr	r1, [pc, #164]	; (3430 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    338a:	adds	r3, #1
    338c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    338e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3390:	it	gt
    3392:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3394:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3396:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3398:	beq.n	33a2 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    339a:	ldr	r4, [pc, #152]	; (3434 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    339c:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    339e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    33a0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    33a2:	ldr	r2, [pc, #148]	; (3438 <uart2_status_isr+0xc0>)
    33a4:	ldr	r1, [r2, #0]
    33a6:	cbz	r1, 33c2 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    33a8:	ldr	r2, [pc, #144]	; (343c <uart2_status_isr+0xc4>)
    33aa:	ldrb	r2, [r2, #0]
    33ac:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    33ae:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    33b0:	itet	cc
    33b2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    33b6:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    33b8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    33ba:	cmp	r3, #39	; 0x27
    33bc:	itt	gt
    33be:	movgt	r3, #1
    33c0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    33c2:	ldr	r2, [pc, #100]	; (3428 <uart2_status_isr+0xb0>)
    33c4:	ldrb	r3, [r2, #3]
    33c6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    33c8:	lsls	r0, r3, #24
    33ca:	bmi.n	33f0 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    33cc:	lsls	r2, r3, #25
    33ce:	bpl.n	33ec <uart2_status_isr+0x74>
    33d0:	ldr	r3, [pc, #84]	; (3428 <uart2_status_isr+0xb0>)
    33d2:	ldrb	r3, [r3, #4]
    33d4:	lsls	r3, r3, #25
    33d6:	bpl.n	33ec <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    33d8:	ldr	r3, [pc, #100]	; (3440 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    33da:	ldr	r1, [pc, #104]	; (3444 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    33dc:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    33de:	movs	r2, #0
    33e0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    33e2:	cbz	r3, 33e6 <uart2_status_isr+0x6e>
    33e4:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    33e6:	ldr	r3, [pc, #64]	; (3428 <uart2_status_isr+0xb0>)
    33e8:	movs	r2, #44	; 0x2c
    33ea:	strb	r2, [r3, #3]
	}
}
    33ec:	pop	{r4, r5}
    33ee:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    33f0:	ldrb	r1, [r2, #4]
    33f2:	lsls	r1, r1, #24
    33f4:	bpl.n	33cc <uart2_status_isr+0x54>
		head = tx_buffer_head;
    33f6:	ldr	r1, [pc, #80]	; (3448 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    33f8:	ldr	r0, [pc, #64]	; (343c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    33fa:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    33fc:	ldrb	r1, [r0, #0]
    33fe:	uxtb	r1, r1
		if (head == tail) {
    3400:	cmp	r4, r1
    3402:	beq.n	3420 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3404:	adds	r2, r1, #1
    3406:	cmp	r2, #39	; 0x27
    3408:	itt	hi
    340a:	movhi	r1, #0
    340c:	movhi	r2, r1
			n = tx_buffer[tail];
    340e:	ldr	r5, [pc, #60]	; (344c <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3410:	ldr	r4, [pc, #20]	; (3428 <uart2_status_isr+0xb0>)
    3412:	it	ls
    3414:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3416:	ldrb	r2, [r5, r2]
    3418:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    341a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    341c:	strb	r1, [r0, #0]
    341e:	b.n	33cc <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3420:	movs	r1, #108	; 0x6c
    3422:	strb	r1, [r2, #3]
    3424:	b.n	33cc <uart2_status_isr+0x54>
    3426:	nop
    3428:	.word	0x4006c000
    342c:	.word	0x1fff1ba8
    3430:	.word	0x1fff1ba9
    3434:	.word	0x1fff1bd4
    3438:	.word	0x1fff1ba4
    343c:	.word	0x1fff1c15
    3440:	.word	0x1fff1c18
    3444:	.word	0x1fff1c14
    3448:	.word	0x1fff1c1c
    344c:	.word	0x1fff1bac

00003450 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3450:	bx	lr
    3452:	nop

00003454 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3454:	bx	lr
    3456:	nop

00003458 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3458:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    345a:	mrs	r2, PRIMASK
		__disable_irq();
    345e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3460:	ldrb	r3, [r0, #29]
    3462:	cbnz	r3, 3472 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3464:	ldrb	r1, [r0, #28]
    3466:	cmp	r1, #1
    3468:	beq.n	347c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    346a:	cmp	r1, #3
    346c:	beq.n	3490 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    346e:	movs	r3, #1
    3470:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3472:	cbnz	r2, 3476 <EventResponder::triggerEventNotImmediate()+0x1e>
    3474:	cpsie	i
	}
	enableInterrupts(irq);
}
    3476:	ldr.w	r4, [sp], #4
    347a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    347c:	ldr	r4, [pc, #68]	; (34c4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    347e:	ldr	r1, [r4, #0]
    3480:	cbz	r1, 34ac <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3482:	ldr	r1, [pc, #68]	; (34c8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3484:	str	r3, [r0, #20]
				_prev = lastYield;
    3486:	ldr	r3, [r1, #0]
    3488:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    348a:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    348c:	str	r0, [r3, #20]
    348e:	b.n	346e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3490:	ldr	r4, [pc, #56]	; (34cc <EventResponder::triggerEventNotImmediate()+0x74>)
    3492:	ldr	r1, [r4, #0]
    3494:	cbz	r1, 34b8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3496:	ldr	r1, [pc, #56]	; (34d0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3498:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    349a:	ldr	r3, [r1, #0]
    349c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    349e:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    34a0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    34a2:	ldr	r3, [pc, #48]	; (34d4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    34a4:	mov.w	r1, #268435456	; 0x10000000
    34a8:	str	r1, [r3, #0]
    34aa:	b.n	346e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    34ac:	ldr	r3, [pc, #24]	; (34c8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    34ae:	str	r1, [r0, #20]
				_prev = nullptr;
    34b0:	str	r1, [r0, #24]
				firstYield = this;
    34b2:	str	r0, [r4, #0]
				lastYield = this;
    34b4:	str	r0, [r3, #0]
    34b6:	b.n	346e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    34b8:	ldr	r3, [pc, #20]	; (34d0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    34ba:	str	r1, [r0, #20]
				_prev = nullptr;
    34bc:	str	r1, [r0, #24]
				firstInterrupt = this;
    34be:	str	r0, [r4, #0]
				lastInterrupt = this;
    34c0:	str	r0, [r3, #0]
    34c2:	b.n	34a2 <EventResponder::triggerEventNotImmediate()+0x4a>
    34c4:	.word	0x1fff1c30
    34c8:	.word	0x1fff1c2c
    34cc:	.word	0x1fff1c20
    34d0:	.word	0x1fff1c24
    34d4:	.word	0xe000ed04

000034d8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    34d8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    34da:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    34dc:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    34de:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    34e0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    34e2:	beq.n	34ec <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    34e4:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    34e8:	b.w	3458 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    34ec:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    34ee:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    34f2:	bx	r3

000034f4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    34f4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    34f6:	mrs	r2, PRIMASK
		__disable_irq();
    34fa:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    34fc:	ldr	r4, [pc, #48]	; (3530 <EventResponder::runFromInterrupt()+0x3c>)
    34fe:	ldr	r0, [r4, #0]
		if (first) {
    3500:	cbz	r0, 3524 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3502:	ldr	r6, [pc, #48]	; (3534 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3504:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3506:	ldr	r3, [r0, #20]
    3508:	str	r3, [r4, #0]
			if (firstInterrupt) {
    350a:	cbz	r3, 352a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    350c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    350e:	cbnz	r2, 3512 <EventResponder::runFromInterrupt()+0x1e>
    3510:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3512:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3514:	ldr	r3, [r0, #8]
    3516:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3518:	mrs	r2, PRIMASK
		__disable_irq();
    351c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    351e:	ldr	r0, [r4, #0]
		if (first) {
    3520:	cmp	r0, #0
    3522:	bne.n	3506 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3524:	cbnz	r2, 3528 <EventResponder::runFromInterrupt()+0x34>
    3526:	cpsie	i
    3528:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    352a:	str	r3, [r6, #0]
    352c:	b.n	350e <EventResponder::runFromInterrupt()+0x1a>
    352e:	nop
    3530:	.word	0x1fff1c20
    3534:	.word	0x1fff1c24

00003538 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3538:	b.w	34f4 <EventResponder::runFromInterrupt()>

0000353c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    353c:	ldr	r2, [pc, #96]	; (35a0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    353e:	push	{r4, r5}
	if (listActive == nullptr) {
    3540:	ldr	r4, [r2, #0]
    3542:	cmp	r4, #0
    3544:	beq.n	3596 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3546:	ldr	r3, [r0, #0]
    3548:	ldr	r1, [r4, #0]
    354a:	cmp	r3, r1
    354c:	bcs.n	356c <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    354e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3550:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3552:	str	r4, [r0, #8]
		_prev = nullptr;
    3554:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3556:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3558:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    355a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    355c:	movs	r3, #2
    355e:	strb	r3, [r0, #20]
}
    3560:	pop	{r4, r5}
    3562:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3564:	ldr	r1, [r2, #0]
    3566:	cmp	r3, r1
    3568:	mov	r4, r2
    356a:	bcc.n	357e <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    356c:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    356e:	subs	r3, r3, r1
    3570:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3572:	cmp	r2, #0
    3574:	bne.n	3564 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3576:	str	r2, [r0, #8]
		_prev = timer;
    3578:	str	r4, [r0, #12]
		timer->_next = this;
    357a:	str	r0, [r4, #8]
    357c:	b.n	355c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    357e:	ldr	r2, [r2, #12]
    3580:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3582:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3584:	str	r0, [r4, #12]
				_prev->_next = this;
    3586:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3588:	subs	r3, r1, r3
				_state = TimerActive;
    358a:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    358c:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    358e:	str	r3, [r4, #0]
				_state = TimerActive;
    3590:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3592:	pop	{r4, r5}
    3594:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3596:	str	r4, [r0, #8]
		_prev = nullptr;
    3598:	str	r4, [r0, #12]
		listActive = this;
    359a:	str	r0, [r2, #0]
    359c:	b.n	355c <MillisTimer::addToActiveList()+0x20>
    359e:	nop
    35a0:	.word	0x1fff1c28

000035a4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    35a4:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    35a6:	ldr	r6, [pc, #136]	; (3630 <MillisTimer::runFromTimer()+0x8c>)
    35a8:	ldr	r4, [r6, #0]
	while (timer) {
    35aa:	cbz	r4, 35f8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    35ac:	ldr	r3, [r4, #0]
    35ae:	cmp	r3, #0
    35b0:	bne.n	3628 <MillisTimer::runFromTimer()+0x84>
    35b2:	ldr	r7, [pc, #128]	; (3634 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    35b4:	mov	r5, r3
    35b6:	b.n	35c2 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    35b8:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    35ba:	cbz	r4, 35f8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    35bc:	ldr	r3, [r4, #0]
    35be:	cmp	r3, #0
    35c0:	bne.n	3628 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    35c2:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    35c4:	cbz	r3, 35c8 <MillisTimer::runFromTimer()+0x24>
    35c6:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    35c8:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    35ca:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    35cc:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    35ce:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    35d0:	ldr	r3, [r3, #0]
    35d2:	cmp	r3, r7
    35d4:	bne.n	361a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    35d6:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    35d8:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    35da:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    35dc:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    35de:	beq.n	3622 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    35e0:	bl	3458 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    35e4:	ldr	r3, [r4, #4]
    35e6:	cmp	r3, #0
    35e8:	beq.n	35b8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    35ea:	str	r3, [r4, #0]
				timer->addToActiveList();
    35ec:	mov	r0, r4
    35ee:	bl	353c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    35f2:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    35f4:	cmp	r4, #0
    35f6:	bne.n	35bc <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    35f8:	mrs	r3, PRIMASK
		__disable_irq();
    35fc:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    35fe:	ldr	r2, [pc, #56]	; (3638 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3600:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3602:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3604:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3606:	cbnz	r3, 360a <MillisTimer::runFromTimer()+0x66>
    3608:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    360a:	cbz	r0, 3618 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    360c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    360e:	bl	353c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3612:	mov	r0, r4
    3614:	cmp	r0, #0
    3616:	bne.n	360c <MillisTimer::runFromTimer()+0x68>
    3618:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    361a:	mov	r2, r4
    361c:	movs	r1, #0
    361e:	blx	r3
    3620:	b.n	35e4 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3622:	ldr	r3, [r0, #8]
    3624:	blx	r3
    3626:	b.n	35e4 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3628:	subs	r3, #1
    362a:	str	r3, [r4, #0]
			break;
    362c:	b.n	35f8 <MillisTimer::runFromTimer()+0x54>
    362e:	nop
    3630:	.word	0x1fff1c28
    3634:	.word	0x000034d9
    3638:	.word	0x1fff1c38

0000363c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    363c:	ldr	r2, [pc, #8]	; (3648 <systick_isr+0xc>)
    363e:	ldr	r3, [r2, #0]
    3640:	adds	r3, #1
    3642:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3644:	b.w	35a4 <MillisTimer::runFromTimer()>
    3648:	.word	0x1fff17c0

0000364c <__errno>:
    364c:	ldr	r3, [pc, #4]	; (3654 <__errno+0x8>)
    364e:	ldr	r0, [r3, #0]
    3650:	bx	lr
    3652:	nop
    3654:	.word	0x1fff1190

00003658 <__libc_init_array>:
    3658:	push	{r4, r5, r6, lr}
    365a:	ldr	r6, [pc, #60]	; (3698 <__libc_init_array+0x40>)
    365c:	ldr	r5, [pc, #60]	; (369c <__libc_init_array+0x44>)
    365e:	subs	r6, r6, r5
    3660:	asrs	r6, r6, #2
    3662:	it	ne
    3664:	movne	r4, #0
    3666:	beq.n	3674 <__libc_init_array+0x1c>
    3668:	adds	r4, #1
    366a:	ldr.w	r3, [r5], #4
    366e:	blx	r3
    3670:	cmp	r6, r4
    3672:	bne.n	3668 <__libc_init_array+0x10>
    3674:	ldr	r6, [pc, #40]	; (36a0 <__libc_init_array+0x48>)
    3676:	ldr	r5, [pc, #44]	; (36a4 <__libc_init_array+0x4c>)
    3678:	subs	r6, r6, r5
    367a:	bl	431c <_init>
    367e:	asrs	r6, r6, #2
    3680:	it	ne
    3682:	movne	r4, #0
    3684:	beq.n	3694 <__libc_init_array+0x3c>
    3686:	adds	r4, #1
    3688:	ldr.w	r3, [r5], #4
    368c:	blx	r3
    368e:	cmp	r6, r4
    3690:	bne.n	3686 <__libc_init_array+0x2e>
    3692:	pop	{r4, r5, r6, pc}
    3694:	pop	{r4, r5, r6, pc}
    3696:	nop
    3698:	.word	0x00004328
    369c:	.word	0x00004328
    36a0:	.word	0x00004334
    36a4:	.word	0x00004328

000036a8 <malloc>:
    36a8:	ldr	r3, [pc, #8]	; (36b4 <malloc+0xc>)
    36aa:	mov	r1, r0
    36ac:	ldr	r0, [r3, #0]
    36ae:	b.w	36b8 <_malloc_r>
    36b2:	nop
    36b4:	.word	0x1fff1190

000036b8 <_malloc_r>:
    36b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36bc:	add.w	r5, r1, #11
    36c0:	cmp	r5, #22
    36c2:	sub	sp, #12
    36c4:	mov	r6, r0
    36c6:	bls.w	3808 <_malloc_r+0x150>
    36ca:	bics.w	r5, r5, #7
    36ce:	bmi.w	3850 <_malloc_r+0x198>
    36d2:	cmp	r1, r5
    36d4:	bhi.w	3850 <_malloc_r+0x198>
    36d8:	bl	3c28 <__malloc_lock>
    36dc:	cmp.w	r5, #504	; 0x1f8
    36e0:	bcc.w	3c1c <_malloc_r+0x564>
    36e4:	lsrs	r3, r5, #9
    36e6:	beq.w	385e <_malloc_r+0x1a6>
    36ea:	cmp	r3, #4
    36ec:	bhi.w	39f6 <_malloc_r+0x33e>
    36f0:	lsrs	r0, r5, #6
    36f2:	add.w	lr, r0, #57	; 0x39
    36f6:	mov.w	r3, lr, lsl #1
    36fa:	adds	r0, #56	; 0x38
    36fc:	ldr	r7, [pc, #784]	; (3a10 <_malloc_r+0x358>)
    36fe:	add.w	r3, r7, r3, lsl #2
    3702:	sub.w	r1, r3, #8
    3706:	ldr	r4, [r3, #4]
    3708:	cmp	r1, r4
    370a:	bne.n	371c <_malloc_r+0x64>
    370c:	b.n	3868 <_malloc_r+0x1b0>
    370e:	cmp	r2, #0
    3710:	bge.w	386c <_malloc_r+0x1b4>
    3714:	ldr	r4, [r4, #12]
    3716:	cmp	r1, r4
    3718:	beq.w	3868 <_malloc_r+0x1b0>
    371c:	ldr	r3, [r4, #4]
    371e:	bic.w	r3, r3, #3
    3722:	subs	r2, r3, r5
    3724:	cmp	r2, #15
    3726:	ble.n	370e <_malloc_r+0x56>
    3728:	ldr	r1, [pc, #740]	; (3a10 <_malloc_r+0x358>)
    372a:	ldr	r4, [r7, #16]
    372c:	add.w	lr, r1, #8
    3730:	cmp	r4, lr
    3732:	beq.w	3a9c <_malloc_r+0x3e4>
    3736:	ldr	r3, [r4, #4]
    3738:	bic.w	r3, r3, #3
    373c:	subs	r2, r3, r5
    373e:	cmp	r2, #15
    3740:	bgt.w	3a76 <_malloc_r+0x3be>
    3744:	cmp	r2, #0
    3746:	str.w	lr, [r1, #20]
    374a:	str.w	lr, [r1, #16]
    374e:	bge.w	388e <_malloc_r+0x1d6>
    3752:	cmp.w	r3, #512	; 0x200
    3756:	bcs.w	3a28 <_malloc_r+0x370>
    375a:	lsrs	r3, r3, #3
    375c:	add.w	ip, r3, #1
    3760:	movs	r2, #1
    3762:	asrs	r3, r3, #2
    3764:	lsl.w	r3, r2, r3
    3768:	ldr	r2, [r1, #4]
    376a:	ldr.w	r8, [r1, ip, lsl #3]
    376e:	str.w	r8, [r4, #8]
    3772:	add.w	r9, r1, ip, lsl #3
    3776:	orrs	r2, r3
    3778:	sub.w	r3, r9, #8
    377c:	str	r3, [r4, #12]
    377e:	str	r2, [r1, #4]
    3780:	str.w	r4, [r1, ip, lsl #3]
    3784:	str.w	r4, [r8, #12]
    3788:	asrs	r3, r0, #2
    378a:	movs	r4, #1
    378c:	lsls	r4, r3
    378e:	cmp	r4, r2
    3790:	bhi.w	38a8 <_malloc_r+0x1f0>
    3794:	tst	r4, r2
    3796:	bne.n	37a6 <_malloc_r+0xee>
    3798:	bic.w	r0, r0, #3
    379c:	lsls	r4, r4, #1
    379e:	tst	r4, r2
    37a0:	add.w	r0, r0, #4
    37a4:	beq.n	379c <_malloc_r+0xe4>
    37a6:	add.w	r9, r7, r0, lsl #3
    37aa:	mov	ip, r9
    37ac:	mov	r8, r0
    37ae:	ldr.w	r1, [ip, #12]
    37b2:	cmp	ip, r1
    37b4:	bne.n	37c6 <_malloc_r+0x10e>
    37b6:	b.n	3aa0 <_malloc_r+0x3e8>
    37b8:	cmp	r2, #0
    37ba:	bge.w	3ac0 <_malloc_r+0x408>
    37be:	ldr	r1, [r1, #12]
    37c0:	cmp	ip, r1
    37c2:	beq.w	3aa0 <_malloc_r+0x3e8>
    37c6:	ldr	r3, [r1, #4]
    37c8:	bic.w	r3, r3, #3
    37cc:	subs	r2, r3, r5
    37ce:	cmp	r2, #15
    37d0:	ble.n	37b8 <_malloc_r+0x100>
    37d2:	mov	r4, r1
    37d4:	ldr.w	ip, [r1, #12]
    37d8:	ldr.w	r8, [r4, #8]!
    37dc:	adds	r3, r1, r5
    37de:	orr.w	r5, r5, #1
    37e2:	str	r5, [r1, #4]
    37e4:	orr.w	r1, r2, #1
    37e8:	str.w	ip, [r8, #12]
    37ec:	mov	r0, r6
    37ee:	str.w	r8, [ip, #8]
    37f2:	str	r3, [r7, #20]
    37f4:	str	r3, [r7, #16]
    37f6:	str.w	lr, [r3, #12]
    37fa:	str.w	lr, [r3, #8]
    37fe:	str	r1, [r3, #4]
    3800:	str	r2, [r3, r2]
    3802:	bl	3c2c <__malloc_unlock>
    3806:	b.n	3848 <_malloc_r+0x190>
    3808:	cmp	r1, #16
    380a:	bhi.n	3850 <_malloc_r+0x198>
    380c:	bl	3c28 <__malloc_lock>
    3810:	movs	r5, #16
    3812:	movs	r3, #6
    3814:	movs	r0, #2
    3816:	ldr	r7, [pc, #504]	; (3a10 <_malloc_r+0x358>)
    3818:	add.w	r3, r7, r3, lsl #2
    381c:	sub.w	r2, r3, #8
    3820:	ldr	r4, [r3, #4]
    3822:	cmp	r4, r2
    3824:	beq.w	3ab2 <_malloc_r+0x3fa>
    3828:	ldr	r3, [r4, #4]
    382a:	ldr	r1, [r4, #12]
    382c:	ldr	r5, [r4, #8]
    382e:	bic.w	r3, r3, #3
    3832:	add	r3, r4
    3834:	mov	r0, r6
    3836:	ldr	r2, [r3, #4]
    3838:	str	r1, [r5, #12]
    383a:	orr.w	r2, r2, #1
    383e:	str	r5, [r1, #8]
    3840:	str	r2, [r3, #4]
    3842:	bl	3c2c <__malloc_unlock>
    3846:	adds	r4, #8
    3848:	mov	r0, r4
    384a:	add	sp, #12
    384c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3850:	movs	r4, #0
    3852:	movs	r3, #12
    3854:	mov	r0, r4
    3856:	str	r3, [r6, #0]
    3858:	add	sp, #12
    385a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    385e:	movs	r3, #128	; 0x80
    3860:	mov.w	lr, #64	; 0x40
    3864:	movs	r0, #63	; 0x3f
    3866:	b.n	36fc <_malloc_r+0x44>
    3868:	mov	r0, lr
    386a:	b.n	3728 <_malloc_r+0x70>
    386c:	add	r3, r4
    386e:	ldr	r1, [r4, #12]
    3870:	ldr	r2, [r3, #4]
    3872:	ldr	r5, [r4, #8]
    3874:	orr.w	r2, r2, #1
    3878:	str	r1, [r5, #12]
    387a:	mov	r0, r6
    387c:	str	r5, [r1, #8]
    387e:	str	r2, [r3, #4]
    3880:	bl	3c2c <__malloc_unlock>
    3884:	adds	r4, #8
    3886:	mov	r0, r4
    3888:	add	sp, #12
    388a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    388e:	add	r3, r4
    3890:	mov	r0, r6
    3892:	ldr	r2, [r3, #4]
    3894:	orr.w	r2, r2, #1
    3898:	str	r2, [r3, #4]
    389a:	bl	3c2c <__malloc_unlock>
    389e:	adds	r4, #8
    38a0:	mov	r0, r4
    38a2:	add	sp, #12
    38a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38a8:	ldr	r4, [r7, #8]
    38aa:	ldr	r3, [r4, #4]
    38ac:	bic.w	r8, r3, #3
    38b0:	cmp	r8, r5
    38b2:	bcc.n	38be <_malloc_r+0x206>
    38b4:	rsb	r3, r5, r8
    38b8:	cmp	r3, #15
    38ba:	bgt.w	39d6 <_malloc_r+0x31e>
    38be:	ldr	r3, [pc, #340]	; (3a14 <_malloc_r+0x35c>)
    38c0:	ldr.w	r9, [pc, #352]	; 3a24 <_malloc_r+0x36c>
    38c4:	ldr	r2, [r3, #0]
    38c6:	ldr.w	r3, [r9]
    38ca:	adds	r3, #1
    38cc:	add	r2, r5
    38ce:	add.w	sl, r4, r8
    38d2:	beq.w	3b96 <_malloc_r+0x4de>
    38d6:	add.w	r2, r2, #4096	; 0x1000
    38da:	adds	r2, #15
    38dc:	bic.w	r2, r2, #4080	; 0xff0
    38e0:	bic.w	r2, r2, #15
    38e4:	mov	r1, r2
    38e6:	mov	r0, r6
    38e8:	str	r2, [sp, #4]
    38ea:	bl	3c30 <_sbrk_r>
    38ee:	cmp.w	r0, #4294967295
    38f2:	mov	fp, r0
    38f4:	ldr	r2, [sp, #4]
    38f6:	beq.w	3baa <_malloc_r+0x4f2>
    38fa:	cmp	sl, r0
    38fc:	bhi.w	3af8 <_malloc_r+0x440>
    3900:	ldr	r3, [pc, #276]	; (3a18 <_malloc_r+0x360>)
    3902:	ldr	r1, [r3, #0]
    3904:	cmp	sl, fp
    3906:	add	r1, r2
    3908:	str	r1, [r3, #0]
    390a:	beq.w	3bb4 <_malloc_r+0x4fc>
    390e:	ldr.w	r0, [r9]
    3912:	ldr.w	lr, [pc, #272]	; 3a24 <_malloc_r+0x36c>
    3916:	adds	r0, #1
    3918:	ittet	ne
    391a:	rsbne	sl, sl, fp
    391e:	addne	r1, sl
    3920:	streq.w	fp, [lr]
    3924:	strne	r1, [r3, #0]
    3926:	ands.w	r1, fp, #7
    392a:	beq.w	3b5c <_malloc_r+0x4a4>
    392e:	rsb	r0, r1, #8
    3932:	rsb	r1, r1, #4096	; 0x1000
    3936:	add	fp, r0
    3938:	adds	r1, #8
    393a:	add	r2, fp
    393c:	ubfx	r2, r2, #0, #12
    3940:	rsb	r9, r2, r1
    3944:	mov	r1, r9
    3946:	mov	r0, r6
    3948:	str	r3, [sp, #4]
    394a:	bl	3c30 <_sbrk_r>
    394e:	adds	r3, r0, #1
    3950:	ldr	r3, [sp, #4]
    3952:	beq.w	3bd4 <_malloc_r+0x51c>
    3956:	rsb	r2, fp, r0
    395a:	add	r2, r9
    395c:	orr.w	r2, r2, #1
    3960:	ldr	r1, [r3, #0]
    3962:	str.w	fp, [r7, #8]
    3966:	add	r1, r9
    3968:	cmp	r4, r7
    396a:	str.w	r2, [fp, #4]
    396e:	str	r1, [r3, #0]
    3970:	ldr.w	r9, [pc, #164]	; 3a18 <_malloc_r+0x360>
    3974:	beq.n	39a4 <_malloc_r+0x2ec>
    3976:	cmp.w	r8, #15
    397a:	bls.w	3b78 <_malloc_r+0x4c0>
    397e:	ldr	r2, [r4, #4]
    3980:	sub.w	r3, r8, #12
    3984:	bic.w	r3, r3, #7
    3988:	adds	r0, r4, r3
    398a:	and.w	r2, r2, #1
    398e:	mov.w	lr, #5
    3992:	orrs	r2, r3
    3994:	cmp	r3, #15
    3996:	str	r2, [r4, #4]
    3998:	str.w	lr, [r0, #4]
    399c:	str.w	lr, [r0, #8]
    39a0:	bhi.w	3bdc <_malloc_r+0x524>
    39a4:	ldr	r3, [pc, #116]	; (3a1c <_malloc_r+0x364>)
    39a6:	ldr	r4, [r7, #8]
    39a8:	ldr	r2, [r3, #0]
    39aa:	cmp	r1, r2
    39ac:	it	hi
    39ae:	strhi	r1, [r3, #0]
    39b0:	ldr	r3, [pc, #108]	; (3a20 <_malloc_r+0x368>)
    39b2:	ldr	r2, [r3, #0]
    39b4:	cmp	r1, r2
    39b6:	ldr	r2, [r4, #4]
    39b8:	it	hi
    39ba:	strhi	r1, [r3, #0]
    39bc:	bic.w	r2, r2, #3
    39c0:	cmp	r5, r2
    39c2:	sub.w	r3, r2, r5
    39c6:	bhi.n	39cc <_malloc_r+0x314>
    39c8:	cmp	r3, #15
    39ca:	bgt.n	39d6 <_malloc_r+0x31e>
    39cc:	mov	r0, r6
    39ce:	bl	3c2c <__malloc_unlock>
    39d2:	movs	r4, #0
    39d4:	b.n	3848 <_malloc_r+0x190>
    39d6:	adds	r2, r4, r5
    39d8:	orr.w	r3, r3, #1
    39dc:	orr.w	r5, r5, #1
    39e0:	str	r5, [r4, #4]
    39e2:	mov	r0, r6
    39e4:	str	r2, [r7, #8]
    39e6:	str	r3, [r2, #4]
    39e8:	bl	3c2c <__malloc_unlock>
    39ec:	adds	r4, #8
    39ee:	mov	r0, r4
    39f0:	add	sp, #12
    39f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39f6:	cmp	r3, #20
    39f8:	bls.n	3ade <_malloc_r+0x426>
    39fa:	cmp	r3, #84	; 0x54
    39fc:	bhi.w	3b48 <_malloc_r+0x490>
    3a00:	lsrs	r0, r5, #12
    3a02:	add.w	lr, r0, #111	; 0x6f
    3a06:	mov.w	r3, lr, lsl #1
    3a0a:	adds	r0, #110	; 0x6e
    3a0c:	b.n	36fc <_malloc_r+0x44>
    3a0e:	nop
    3a10:	.word	0x1fff1194
    3a14:	.word	0x1fff1c44
    3a18:	.word	0x1fff1c48
    3a1c:	.word	0x1fff1c40
    3a20:	.word	0x1fff1c3c
    3a24:	.word	0x1fff15a0
    3a28:	lsrs	r2, r3, #9
    3a2a:	cmp	r2, #4
    3a2c:	bls.n	3aec <_malloc_r+0x434>
    3a2e:	cmp	r2, #20
    3a30:	bhi.w	3b9a <_malloc_r+0x4e2>
    3a34:	add.w	r1, r2, #92	; 0x5c
    3a38:	lsls	r1, r1, #1
    3a3a:	adds	r2, #91	; 0x5b
    3a3c:	add.w	ip, r7, r1, lsl #2
    3a40:	ldr.w	r1, [r7, r1, lsl #2]
    3a44:	ldr.w	r8, [pc, #476]	; 3c24 <_malloc_r+0x56c>
    3a48:	sub.w	ip, ip, #8
    3a4c:	cmp	ip, r1
    3a4e:	beq.w	3b62 <_malloc_r+0x4aa>
    3a52:	ldr	r2, [r1, #4]
    3a54:	bic.w	r2, r2, #3
    3a58:	cmp	r3, r2
    3a5a:	bcs.n	3a62 <_malloc_r+0x3aa>
    3a5c:	ldr	r1, [r1, #8]
    3a5e:	cmp	ip, r1
    3a60:	bne.n	3a52 <_malloc_r+0x39a>
    3a62:	ldr.w	ip, [r1, #12]
    3a66:	ldr	r2, [r7, #4]
    3a68:	str.w	ip, [r4, #12]
    3a6c:	str	r1, [r4, #8]
    3a6e:	str.w	r4, [ip, #8]
    3a72:	str	r4, [r1, #12]
    3a74:	b.n	3788 <_malloc_r+0xd0>
    3a76:	adds	r3, r4, r5
    3a78:	orr.w	r7, r2, #1
    3a7c:	orr.w	r5, r5, #1
    3a80:	str	r5, [r4, #4]
    3a82:	mov	r0, r6
    3a84:	str	r3, [r1, #20]
    3a86:	str	r3, [r1, #16]
    3a88:	str.w	lr, [r3, #12]
    3a8c:	str.w	lr, [r3, #8]
    3a90:	str	r7, [r3, #4]
    3a92:	str	r2, [r3, r2]
    3a94:	adds	r4, #8
    3a96:	bl	3c2c <__malloc_unlock>
    3a9a:	b.n	3848 <_malloc_r+0x190>
    3a9c:	ldr	r2, [r1, #4]
    3a9e:	b.n	3788 <_malloc_r+0xd0>
    3aa0:	add.w	r8, r8, #1
    3aa4:	tst.w	r8, #3
    3aa8:	add.w	ip, ip, #8
    3aac:	bne.w	37ae <_malloc_r+0xf6>
    3ab0:	b.n	3b14 <_malloc_r+0x45c>
    3ab2:	ldr	r4, [r3, #12]
    3ab4:	cmp	r3, r4
    3ab6:	it	eq
    3ab8:	addeq	r0, #2
    3aba:	beq.w	3728 <_malloc_r+0x70>
    3abe:	b.n	3828 <_malloc_r+0x170>
    3ac0:	add	r3, r1
    3ac2:	mov	r4, r1
    3ac4:	ldr	r2, [r3, #4]
    3ac6:	ldr	r1, [r1, #12]
    3ac8:	ldr.w	r5, [r4, #8]!
    3acc:	orr.w	r2, r2, #1
    3ad0:	str	r2, [r3, #4]
    3ad2:	mov	r0, r6
    3ad4:	str	r1, [r5, #12]
    3ad6:	str	r5, [r1, #8]
    3ad8:	bl	3c2c <__malloc_unlock>
    3adc:	b.n	3848 <_malloc_r+0x190>
    3ade:	add.w	lr, r3, #92	; 0x5c
    3ae2:	add.w	r0, r3, #91	; 0x5b
    3ae6:	mov.w	r3, lr, lsl #1
    3aea:	b.n	36fc <_malloc_r+0x44>
    3aec:	lsrs	r2, r3, #6
    3aee:	add.w	r1, r2, #57	; 0x39
    3af2:	lsls	r1, r1, #1
    3af4:	adds	r2, #56	; 0x38
    3af6:	b.n	3a3c <_malloc_r+0x384>
    3af8:	cmp	r4, r7
    3afa:	ldr	r3, [pc, #296]	; (3c24 <_malloc_r+0x56c>)
    3afc:	beq.w	3900 <_malloc_r+0x248>
    3b00:	ldr	r4, [r3, #8]
    3b02:	ldr	r2, [r4, #4]
    3b04:	bic.w	r2, r2, #3
    3b08:	b.n	39c0 <_malloc_r+0x308>
    3b0a:	ldr.w	r3, [r9], #-8
    3b0e:	cmp	r9, r3
    3b10:	bne.w	3c18 <_malloc_r+0x560>
    3b14:	tst.w	r0, #3
    3b18:	add.w	r0, r0, #4294967295
    3b1c:	bne.n	3b0a <_malloc_r+0x452>
    3b1e:	ldr	r3, [r7, #4]
    3b20:	bic.w	r3, r3, r4
    3b24:	str	r3, [r7, #4]
    3b26:	lsls	r4, r4, #1
    3b28:	cmp	r4, r3
    3b2a:	bhi.w	38a8 <_malloc_r+0x1f0>
    3b2e:	cmp	r4, #0
    3b30:	beq.w	38a8 <_malloc_r+0x1f0>
    3b34:	tst	r4, r3
    3b36:	mov	r0, r8
    3b38:	bne.w	37a6 <_malloc_r+0xee>
    3b3c:	lsls	r4, r4, #1
    3b3e:	tst	r4, r3
    3b40:	add.w	r0, r0, #4
    3b44:	beq.n	3b3c <_malloc_r+0x484>
    3b46:	b.n	37a6 <_malloc_r+0xee>
    3b48:	cmp.w	r3, #340	; 0x154
    3b4c:	bhi.n	3b80 <_malloc_r+0x4c8>
    3b4e:	lsrs	r0, r5, #15
    3b50:	add.w	lr, r0, #120	; 0x78
    3b54:	mov.w	r3, lr, lsl #1
    3b58:	adds	r0, #119	; 0x77
    3b5a:	b.n	36fc <_malloc_r+0x44>
    3b5c:	mov.w	r1, #4096	; 0x1000
    3b60:	b.n	393a <_malloc_r+0x282>
    3b62:	movs	r1, #1
    3b64:	ldr.w	r3, [r8, #4]
    3b68:	asrs	r2, r2, #2
    3b6a:	lsl.w	r2, r1, r2
    3b6e:	orrs	r2, r3
    3b70:	str.w	r2, [r8, #4]
    3b74:	mov	r1, ip
    3b76:	b.n	3a68 <_malloc_r+0x3b0>
    3b78:	movs	r3, #1
    3b7a:	str.w	r3, [fp, #4]
    3b7e:	b.n	39cc <_malloc_r+0x314>
    3b80:	movw	r2, #1364	; 0x554
    3b84:	cmp	r3, r2
    3b86:	bhi.n	3bca <_malloc_r+0x512>
    3b88:	lsrs	r0, r5, #18
    3b8a:	add.w	lr, r0, #125	; 0x7d
    3b8e:	mov.w	r3, lr, lsl #1
    3b92:	adds	r0, #124	; 0x7c
    3b94:	b.n	36fc <_malloc_r+0x44>
    3b96:	adds	r2, #16
    3b98:	b.n	38e4 <_malloc_r+0x22c>
    3b9a:	cmp	r2, #84	; 0x54
    3b9c:	bhi.n	3bec <_malloc_r+0x534>
    3b9e:	lsrs	r2, r3, #12
    3ba0:	add.w	r1, r2, #111	; 0x6f
    3ba4:	lsls	r1, r1, #1
    3ba6:	adds	r2, #110	; 0x6e
    3ba8:	b.n	3a3c <_malloc_r+0x384>
    3baa:	ldr	r4, [r7, #8]
    3bac:	ldr	r2, [r4, #4]
    3bae:	bic.w	r2, r2, #3
    3bb2:	b.n	39c0 <_malloc_r+0x308>
    3bb4:	ubfx	r0, sl, #0, #12
    3bb8:	cmp	r0, #0
    3bba:	bne.w	390e <_malloc_r+0x256>
    3bbe:	add	r2, r8
    3bc0:	ldr	r3, [r7, #8]
    3bc2:	orr.w	r2, r2, #1
    3bc6:	str	r2, [r3, #4]
    3bc8:	b.n	39a4 <_malloc_r+0x2ec>
    3bca:	movs	r3, #254	; 0xfe
    3bcc:	mov.w	lr, #127	; 0x7f
    3bd0:	movs	r0, #126	; 0x7e
    3bd2:	b.n	36fc <_malloc_r+0x44>
    3bd4:	movs	r2, #1
    3bd6:	mov.w	r9, #0
    3bda:	b.n	3960 <_malloc_r+0x2a8>
    3bdc:	add.w	r1, r4, #8
    3be0:	mov	r0, r6
    3be2:	bl	3d38 <_free_r>
    3be6:	ldr.w	r1, [r9]
    3bea:	b.n	39a4 <_malloc_r+0x2ec>
    3bec:	cmp.w	r2, #340	; 0x154
    3bf0:	bhi.n	3bfe <_malloc_r+0x546>
    3bf2:	lsrs	r2, r3, #15
    3bf4:	add.w	r1, r2, #120	; 0x78
    3bf8:	lsls	r1, r1, #1
    3bfa:	adds	r2, #119	; 0x77
    3bfc:	b.n	3a3c <_malloc_r+0x384>
    3bfe:	movw	r1, #1364	; 0x554
    3c02:	cmp	r2, r1
    3c04:	bhi.n	3c12 <_malloc_r+0x55a>
    3c06:	lsrs	r2, r3, #18
    3c08:	add.w	r1, r2, #125	; 0x7d
    3c0c:	lsls	r1, r1, #1
    3c0e:	adds	r2, #124	; 0x7c
    3c10:	b.n	3a3c <_malloc_r+0x384>
    3c12:	movs	r1, #254	; 0xfe
    3c14:	movs	r2, #126	; 0x7e
    3c16:	b.n	3a3c <_malloc_r+0x384>
    3c18:	ldr	r3, [r7, #4]
    3c1a:	b.n	3b26 <_malloc_r+0x46e>
    3c1c:	lsrs	r0, r5, #3
    3c1e:	adds	r3, r0, #1
    3c20:	lsls	r3, r3, #1
    3c22:	b.n	3816 <_malloc_r+0x15e>
    3c24:	.word	0x1fff1194

00003c28 <__malloc_lock>:
    3c28:	bx	lr
    3c2a:	nop

00003c2c <__malloc_unlock>:
    3c2c:	bx	lr
    3c2e:	nop

00003c30 <_sbrk_r>:
    3c30:	push	{r3, r4, r5, lr}
    3c32:	ldr	r4, [pc, #28]	; (3c50 <_sbrk_r+0x20>)
    3c34:	movs	r3, #0
    3c36:	mov	r5, r0
    3c38:	mov	r0, r1
    3c3a:	str	r3, [r4, #0]
    3c3c:	bl	2fc4 <_sbrk>
    3c40:	adds	r3, r0, #1
    3c42:	beq.n	3c46 <_sbrk_r+0x16>
    3c44:	pop	{r3, r4, r5, pc}
    3c46:	ldr	r3, [r4, #0]
    3c48:	cmp	r3, #0
    3c4a:	beq.n	3c44 <_sbrk_r+0x14>
    3c4c:	str	r3, [r5, #0]
    3c4e:	pop	{r3, r4, r5, pc}
    3c50:	.word	0x1fff1db4

00003c54 <register_fini>:
    3c54:	ldr	r3, [pc, #8]	; (3c60 <register_fini+0xc>)
    3c56:	cbz	r3, 3c5e <register_fini+0xa>
    3c58:	ldr	r0, [pc, #8]	; (3c64 <register_fini+0x10>)
    3c5a:	b.w	3c68 <atexit>
    3c5e:	bx	lr
    3c60:	.word	0x00000000
    3c64:	.word	0x00003c75

00003c68 <atexit>:
    3c68:	movs	r3, #0
    3c6a:	mov	r1, r0
    3c6c:	mov	r2, r3
    3c6e:	mov	r0, r3
    3c70:	b.w	3f08 <__register_exitproc>

00003c74 <__libc_fini_array>:
    3c74:	push	{r3, r4, r5, lr}
    3c76:	ldr	r5, [pc, #28]	; (3c94 <__libc_fini_array+0x20>)
    3c78:	ldr	r4, [pc, #28]	; (3c98 <__libc_fini_array+0x24>)
    3c7a:	subs	r4, r5, r4
    3c7c:	asrs	r4, r4, #2
    3c7e:	beq.n	3c8c <__libc_fini_array+0x18>
    3c80:	subs	r4, #1
    3c82:	ldr.w	r3, [r5, #-4]!
    3c86:	blx	r3
    3c88:	cmp	r4, #0
    3c8a:	bne.n	3c80 <__libc_fini_array+0xc>
    3c8c:	ldmia.w	sp!, {r3, r4, r5, lr}
    3c90:	b.w	4334 <__init_array_end>
	...

00003c9c <_malloc_trim_r>:
    3c9c:	push	{r3, r4, r5, r6, r7, lr}
    3c9e:	ldr	r7, [pc, #140]	; (3d2c <_malloc_trim_r+0x90>)
    3ca0:	mov	r4, r1
    3ca2:	mov	r6, r0
    3ca4:	bl	3c28 <__malloc_lock>
    3ca8:	ldr	r3, [r7, #8]
    3caa:	ldr	r5, [r3, #4]
    3cac:	bic.w	r5, r5, #3
    3cb0:	subs	r1, r5, r4
    3cb2:	addw	r1, r1, #4079	; 0xfef
    3cb6:	bic.w	r1, r1, #4080	; 0xff0
    3cba:	bic.w	r1, r1, #15
    3cbe:	sub.w	r4, r1, #4096	; 0x1000
    3cc2:	cmp.w	r4, #4096	; 0x1000
    3cc6:	blt.n	3cd8 <_malloc_trim_r+0x3c>
    3cc8:	movs	r1, #0
    3cca:	mov	r0, r6
    3ccc:	bl	3c30 <_sbrk_r>
    3cd0:	ldr	r3, [r7, #8]
    3cd2:	add	r3, r5
    3cd4:	cmp	r0, r3
    3cd6:	beq.n	3ce2 <_malloc_trim_r+0x46>
    3cd8:	mov	r0, r6
    3cda:	bl	3c2c <__malloc_unlock>
    3cde:	movs	r0, #0
    3ce0:	pop	{r3, r4, r5, r6, r7, pc}
    3ce2:	negs	r1, r4
    3ce4:	mov	r0, r6
    3ce6:	bl	3c30 <_sbrk_r>
    3cea:	adds	r0, #1
    3cec:	beq.n	3d0a <_malloc_trim_r+0x6e>
    3cee:	ldr	r3, [pc, #64]	; (3d30 <_malloc_trim_r+0x94>)
    3cf0:	ldr	r2, [r7, #8]
    3cf2:	ldr	r1, [r3, #0]
    3cf4:	subs	r5, r5, r4
    3cf6:	orr.w	r5, r5, #1
    3cfa:	mov	r0, r6
    3cfc:	subs	r1, r1, r4
    3cfe:	str	r5, [r2, #4]
    3d00:	str	r1, [r3, #0]
    3d02:	bl	3c2c <__malloc_unlock>
    3d06:	movs	r0, #1
    3d08:	pop	{r3, r4, r5, r6, r7, pc}
    3d0a:	movs	r1, #0
    3d0c:	mov	r0, r6
    3d0e:	bl	3c30 <_sbrk_r>
    3d12:	ldr	r2, [r7, #8]
    3d14:	subs	r3, r0, r2
    3d16:	cmp	r3, #15
    3d18:	ble.n	3cd8 <_malloc_trim_r+0x3c>
    3d1a:	ldr	r4, [pc, #24]	; (3d34 <_malloc_trim_r+0x98>)
    3d1c:	ldr	r1, [pc, #16]	; (3d30 <_malloc_trim_r+0x94>)
    3d1e:	ldr	r4, [r4, #0]
    3d20:	orr.w	r3, r3, #1
    3d24:	subs	r0, r0, r4
    3d26:	str	r3, [r2, #4]
    3d28:	str	r0, [r1, #0]
    3d2a:	b.n	3cd8 <_malloc_trim_r+0x3c>
    3d2c:	.word	0x1fff1194
    3d30:	.word	0x1fff1c48
    3d34:	.word	0x1fff15a0

00003d38 <_free_r>:
    3d38:	cmp	r1, #0
    3d3a:	beq.n	3dc8 <_free_r+0x90>
    3d3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d40:	mov	r5, r1
    3d42:	mov	r8, r0
    3d44:	bl	3c28 <__malloc_lock>
    3d48:	ldr.w	r7, [r5, #-4]
    3d4c:	ldr	r1, [pc, #424]	; (3ef8 <_free_r+0x1c0>)
    3d4e:	bic.w	r3, r7, #1
    3d52:	sub.w	r4, r5, #8
    3d56:	adds	r2, r4, r3
    3d58:	ldr	r6, [r1, #8]
    3d5a:	ldr	r0, [r2, #4]
    3d5c:	cmp	r2, r6
    3d5e:	bic.w	r0, r0, #3
    3d62:	beq.n	3e2a <_free_r+0xf2>
    3d64:	lsls	r6, r7, #31
    3d66:	str	r0, [r2, #4]
    3d68:	bmi.n	3d82 <_free_r+0x4a>
    3d6a:	ldr.w	r7, [r5, #-8]
    3d6e:	subs	r4, r4, r7
    3d70:	add.w	lr, r1, #8
    3d74:	ldr	r5, [r4, #8]
    3d76:	cmp	r5, lr
    3d78:	add	r3, r7
    3d7a:	beq.n	3e5c <_free_r+0x124>
    3d7c:	ldr	r7, [r4, #12]
    3d7e:	str	r7, [r5, #12]
    3d80:	str	r5, [r7, #8]
    3d82:	adds	r5, r2, r0
    3d84:	ldr	r5, [r5, #4]
    3d86:	lsls	r5, r5, #31
    3d88:	bpl.n	3e10 <_free_r+0xd8>
    3d8a:	orr.w	r2, r3, #1
    3d8e:	str	r2, [r4, #4]
    3d90:	str	r3, [r4, r3]
    3d92:	cmp.w	r3, #512	; 0x200
    3d96:	bcs.n	3dca <_free_r+0x92>
    3d98:	lsrs	r3, r3, #3
    3d9a:	adds	r2, r3, #1
    3d9c:	ldr	r5, [r1, #4]
    3d9e:	ldr.w	r7, [r1, r2, lsl #3]
    3da2:	str	r7, [r4, #8]
    3da4:	movs	r0, #1
    3da6:	asrs	r3, r3, #2
    3da8:	lsl.w	r3, r0, r3
    3dac:	add.w	r0, r1, r2, lsl #3
    3db0:	orrs	r5, r3
    3db2:	subs	r0, #8
    3db4:	str	r0, [r4, #12]
    3db6:	str	r5, [r1, #4]
    3db8:	str.w	r4, [r1, r2, lsl #3]
    3dbc:	str	r4, [r7, #12]
    3dbe:	mov	r0, r8
    3dc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3dc4:	b.w	3c2c <__malloc_unlock>
    3dc8:	bx	lr
    3dca:	lsrs	r2, r3, #9
    3dcc:	cmp	r2, #4
    3dce:	bhi.n	3e78 <_free_r+0x140>
    3dd0:	lsrs	r2, r3, #6
    3dd2:	add.w	r7, r2, #57	; 0x39
    3dd6:	lsls	r7, r7, #1
    3dd8:	add.w	r5, r2, #56	; 0x38
    3ddc:	add.w	r0, r1, r7, lsl #2
    3de0:	ldr.w	r2, [r1, r7, lsl #2]
    3de4:	ldr	r1, [pc, #272]	; (3ef8 <_free_r+0x1c0>)
    3de6:	subs	r0, #8
    3de8:	cmp	r0, r2
    3dea:	beq.n	3e88 <_free_r+0x150>
    3dec:	ldr	r1, [r2, #4]
    3dee:	bic.w	r1, r1, #3
    3df2:	cmp	r3, r1
    3df4:	bcs.n	3dfc <_free_r+0xc4>
    3df6:	ldr	r2, [r2, #8]
    3df8:	cmp	r0, r2
    3dfa:	bne.n	3dec <_free_r+0xb4>
    3dfc:	ldr	r0, [r2, #12]
    3dfe:	str	r0, [r4, #12]
    3e00:	str	r2, [r4, #8]
    3e02:	str	r4, [r0, #8]
    3e04:	str	r4, [r2, #12]
    3e06:	mov	r0, r8
    3e08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e0c:	b.w	3c2c <__malloc_unlock>
    3e10:	ldr	r5, [r2, #8]
    3e12:	ldr	r7, [pc, #232]	; (3efc <_free_r+0x1c4>)
    3e14:	cmp	r5, r7
    3e16:	add	r3, r0
    3e18:	beq.n	3e9a <_free_r+0x162>
    3e1a:	ldr	r0, [r2, #12]
    3e1c:	str	r0, [r5, #12]
    3e1e:	orr.w	r2, r3, #1
    3e22:	str	r5, [r0, #8]
    3e24:	str	r2, [r4, #4]
    3e26:	str	r3, [r4, r3]
    3e28:	b.n	3d92 <_free_r+0x5a>
    3e2a:	lsls	r7, r7, #31
    3e2c:	add	r3, r0
    3e2e:	bmi.n	3e40 <_free_r+0x108>
    3e30:	ldr.w	r2, [r5, #-8]
    3e34:	subs	r4, r4, r2
    3e36:	add	r3, r2
    3e38:	ldr	r0, [r4, #8]
    3e3a:	ldr	r2, [r4, #12]
    3e3c:	str	r2, [r0, #12]
    3e3e:	str	r0, [r2, #8]
    3e40:	ldr	r2, [pc, #188]	; (3f00 <_free_r+0x1c8>)
    3e42:	ldr	r2, [r2, #0]
    3e44:	orr.w	r0, r3, #1
    3e48:	cmp	r3, r2
    3e4a:	str	r0, [r4, #4]
    3e4c:	str	r4, [r1, #8]
    3e4e:	bcc.n	3dbe <_free_r+0x86>
    3e50:	ldr	r3, [pc, #176]	; (3f04 <_free_r+0x1cc>)
    3e52:	mov	r0, r8
    3e54:	ldr	r1, [r3, #0]
    3e56:	bl	3c9c <_malloc_trim_r>
    3e5a:	b.n	3dbe <_free_r+0x86>
    3e5c:	adds	r1, r2, r0
    3e5e:	ldr	r1, [r1, #4]
    3e60:	lsls	r1, r1, #31
    3e62:	bmi.n	3eee <_free_r+0x1b6>
    3e64:	ldr	r1, [r2, #8]
    3e66:	ldr	r2, [r2, #12]
    3e68:	str	r2, [r1, #12]
    3e6a:	add	r3, r0
    3e6c:	orr.w	r0, r3, #1
    3e70:	str	r1, [r2, #8]
    3e72:	str	r0, [r4, #4]
    3e74:	str	r3, [r4, r3]
    3e76:	b.n	3dbe <_free_r+0x86>
    3e78:	cmp	r2, #20
    3e7a:	bhi.n	3eac <_free_r+0x174>
    3e7c:	add.w	r7, r2, #92	; 0x5c
    3e80:	lsls	r7, r7, #1
    3e82:	add.w	r5, r2, #91	; 0x5b
    3e86:	b.n	3ddc <_free_r+0xa4>
    3e88:	asrs	r2, r5, #2
    3e8a:	ldr	r3, [r1, #4]
    3e8c:	movs	r5, #1
    3e8e:	lsl.w	r2, r5, r2
    3e92:	orrs	r3, r2
    3e94:	str	r3, [r1, #4]
    3e96:	mov	r2, r0
    3e98:	b.n	3dfe <_free_r+0xc6>
    3e9a:	orr.w	r2, r3, #1
    3e9e:	str	r4, [r1, #20]
    3ea0:	str	r4, [r1, #16]
    3ea2:	str	r5, [r4, #12]
    3ea4:	str	r5, [r4, #8]
    3ea6:	str	r2, [r4, #4]
    3ea8:	str	r3, [r4, r3]
    3eaa:	b.n	3dbe <_free_r+0x86>
    3eac:	cmp	r2, #84	; 0x54
    3eae:	bhi.n	3ebe <_free_r+0x186>
    3eb0:	lsrs	r2, r3, #12
    3eb2:	add.w	r7, r2, #111	; 0x6f
    3eb6:	lsls	r7, r7, #1
    3eb8:	add.w	r5, r2, #110	; 0x6e
    3ebc:	b.n	3ddc <_free_r+0xa4>
    3ebe:	cmp.w	r2, #340	; 0x154
    3ec2:	bhi.n	3ed2 <_free_r+0x19a>
    3ec4:	lsrs	r2, r3, #15
    3ec6:	add.w	r7, r2, #120	; 0x78
    3eca:	lsls	r7, r7, #1
    3ecc:	add.w	r5, r2, #119	; 0x77
    3ed0:	b.n	3ddc <_free_r+0xa4>
    3ed2:	movw	r0, #1364	; 0x554
    3ed6:	cmp	r2, r0
    3ed8:	bhi.n	3ee8 <_free_r+0x1b0>
    3eda:	lsrs	r2, r3, #18
    3edc:	add.w	r7, r2, #125	; 0x7d
    3ee0:	lsls	r7, r7, #1
    3ee2:	add.w	r5, r2, #124	; 0x7c
    3ee6:	b.n	3ddc <_free_r+0xa4>
    3ee8:	movs	r7, #254	; 0xfe
    3eea:	movs	r5, #126	; 0x7e
    3eec:	b.n	3ddc <_free_r+0xa4>
    3eee:	orr.w	r2, r3, #1
    3ef2:	str	r2, [r4, #4]
    3ef4:	str	r3, [r4, r3]
    3ef6:	b.n	3dbe <_free_r+0x86>
    3ef8:	.word	0x1fff1194
    3efc:	.word	0x1fff119c
    3f00:	.word	0x1fff159c
    3f04:	.word	0x1fff1c44

00003f08 <__register_exitproc>:
    3f08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f0c:	ldr	r4, [pc, #148]	; (3fa4 <__register_exitproc+0x9c>)
    3f0e:	ldr	r5, [r4, #0]
    3f10:	ldr.w	r4, [r5, #328]	; 0x148
    3f14:	mov	r6, r0
    3f16:	mov	r8, r1
    3f18:	mov	sl, r2
    3f1a:	mov	r9, r3
    3f1c:	cbz	r4, 3f90 <__register_exitproc+0x88>
    3f1e:	ldr	r0, [r4, #4]
    3f20:	cmp	r0, #31
    3f22:	bgt.n	3f54 <__register_exitproc+0x4c>
    3f24:	adds	r3, r0, #1
    3f26:	cbz	r6, 3f46 <__register_exitproc+0x3e>
    3f28:	add.w	r5, r4, r0, lsl #2
    3f2c:	movs	r2, #1
    3f2e:	str.w	sl, [r5, #136]	; 0x88
    3f32:	ldr.w	r1, [r4, #392]	; 0x188
    3f36:	lsls	r2, r0
    3f38:	orrs	r1, r2
    3f3a:	cmp	r6, #2
    3f3c:	str.w	r1, [r4, #392]	; 0x188
    3f40:	str.w	r9, [r5, #264]	; 0x108
    3f44:	beq.n	3f84 <__register_exitproc+0x7c>
    3f46:	adds	r0, #2
    3f48:	str	r3, [r4, #4]
    3f4a:	str.w	r8, [r4, r0, lsl #2]
    3f4e:	movs	r0, #0
    3f50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f54:	ldr	r3, [pc, #80]	; (3fa8 <__register_exitproc+0xa0>)
    3f56:	cbz	r3, 3f9a <__register_exitproc+0x92>
    3f58:	mov.w	r0, #400	; 0x190
    3f5c:	bl	36a8 <malloc>
    3f60:	mov	r4, r0
    3f62:	cbz	r0, 3f9a <__register_exitproc+0x92>
    3f64:	ldr.w	r3, [r5, #328]	; 0x148
    3f68:	movs	r7, #0
    3f6a:	stmia.w	r0, {r3, r7}
    3f6e:	str.w	r4, [r5, #328]	; 0x148
    3f72:	mov	r0, r7
    3f74:	movs	r3, #1
    3f76:	str.w	r7, [r4, #392]	; 0x188
    3f7a:	str.w	r7, [r4, #396]	; 0x18c
    3f7e:	cmp	r6, #0
    3f80:	beq.n	3f46 <__register_exitproc+0x3e>
    3f82:	b.n	3f28 <__register_exitproc+0x20>
    3f84:	ldr.w	r1, [r4, #396]	; 0x18c
    3f88:	orrs	r2, r1
    3f8a:	str.w	r2, [r4, #396]	; 0x18c
    3f8e:	b.n	3f46 <__register_exitproc+0x3e>
    3f90:	add.w	r4, r5, #332	; 0x14c
    3f94:	str.w	r4, [r5, #328]	; 0x148
    3f98:	b.n	3f1e <__register_exitproc+0x16>
    3f9a:	mov.w	r0, #4294967295
    3f9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3fa2:	nop
    3fa4:	.word	0x00004318
    3fa8:	.word	0x000036a9
    3fac:	.word	0x00000026
    3fb0:	.word	0x00000029
    3fb4:	.word	0x0000002d
    3fb8:	.word	0x00000033
    3fbc:	.word	0x65746f4e
    3fc0:	.word	0x66664f20
    3fc4:	.word	0x6863202c
    3fc8:	.word	0x0000003d
    3fcc:	.word	0x6f6e202c
    3fd0:	.word	0x003d6574
    3fd4:	.word	0x6576202c
    3fd8:	.word	0x69636f6c
    3fdc:	.word	0x003d7974
    3fe0:	.word	0x65746f4e
    3fe4:	.word	0x2c6e4f20
    3fe8:	.word	0x3d686320
    3fec:	.word	0x00000000
    3ff0:	.word	0x746e6f43
    3ff4:	.word	0x206c6f72
    3ff8:	.word	0x6e616843
    3ffc:	.word	0x202c6567
    4000:	.word	0x003d6863
    4004:	.word	0x6f63202c
    4008:	.word	0x6f72746e
    400c:	.word	0x00003d6c
    4010:	.word	0x6176202c
    4014:	.word	0x3d65756c
    4018:	.word	0x00000000
    401c:	.word	0x636f6c63
    4020:	.word	0x0000006b
    4024:	.word	0x7370704f
    4028:	.word	0x6e61202c
    402c:	.word	0x6b6e7520
    4030:	.word	0x6e776f6e
    4034:	.word	0x44494d20
    4038:	.word	0x656d2049
    403c:	.word	0x67617373
    4040:	.word	0x79742065
    4044:	.word	0x00216570

00004048 <pin2sc1a>:
    4048:	................
    4058:	................
    4068:	................
    4078:	................
    4088:	........

00004090 <digital_pin_to_info_PGM>:
    4090:	@..C@..@D..CD..@
    40a0:	...C...@0..C0..@
    40b0:	4..C4..@...C...@
    40c0:	...C...@...C...@
    40d0:	...C...@...C...@
    40e0:	...C...@...C...@
    40f0:	...C...@...C...@
    4100:	...C...@...C...@
    4110:	...C...@...C...@
    4120:	...C...@...C...@
    4130:	...C...@...C...@
    4140:	...C...@...C...@
    4150:	h .Ch..@...C...@
    4160:	8..C8..@<..C<..@
    4170:	@..C@..@H..CH..@
    4180:	L..CL..@(..C(..@
    4190:	,..C,..@` .C`..@
    41a0:	d .Cd..@ ..C ..@
    41b0:	$..C$..@(..C(..@
    41c0:	,..C,..@D..CD..@
    41d0:	p..Cp..@t..Ct..@
    41e0:	h..Ch..@P..CP..@
    41f0:	X..CX..@\..C\..@
    4200:	T..CT..@ ..C ..@
    4210:	$..C$..@...C...@
    4220:	...C...@8..C8..@
    4230:	4..C4..@0..C0..@
    4240:	<..C<..@,..C,..@
    4250:	( .C(..@, .C,..@
    4260:	. .C...@. .C...@
    4270:	. .C...@. .C...@
    4280:	. .C...@. .C...@

00004290 <vtable for usb_serial_class>:
	...
    4298:	q+..i+..e+..a+..
    42a8:	]+..Y+..U+..Q+..
    42b8:	....

000042bc <usb_endpoint_config_table>:
    42bc:	........

000042c4 <usb_descriptor_list>:
    42c4:	....p...........
    42d4:	............L...
    42e4:	................
    42f4:	....4...........
    4304:	P...............
    4314:	....

00004318 <_global_impure_ptr>:
    4318:	h...

0000431c <_init>:
    431c:	push	{r3, r4, r5, r6, r7, lr}
    431e:	nop
    4320:	pop	{r3, r4, r5, r6, r7}
    4322:	pop	{r3}
    4324:	mov	lr, r3
    4326:	bx	lr

00004328 <__init_array_start>:
    4328:	.word	0x00003c55

0000432c <__frame_dummy_init_array_entry>:
    432c:	5...q...

Disassembly of section .fini:

00004334 <_fini>:
    4334:	push	{r3, r4, r5, r6, r7, lr}
    4336:	nop

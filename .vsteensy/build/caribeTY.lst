
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004f60 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15b0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003bf8 l     F .text	0000000c startup_default_early_hook
00003c04 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15b0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15b4 l       .bss	00000000 object.8610
00004f58 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000019fc l     F .text	00000214 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1821 l     O .bss	00000001 tx_noautoflush
1fff1824 l     O .bss	00000004 tx_packet
1fff1828 l     O .bss	00000001 transmit_previous_timeout
1fff182c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001ee4 l     F .text	00000144 wait_for_cal
1fff1831 l     O .bss	00000001 analog_right_shift
1fff1832 l     O .bss	00000001 calibrating
00004c74 l     O .text	00000048 pin2sc1a
1fff0c58 l     O .data	00000001 analog_config_bits
1fff1833 l     O .bss	00000001 analogReadBusyADC1
1fff1834 l     O .bss	00000001 analogReadBusyADC0
1fff1835 l     O .bss	00000001 analog_reference_internal
1fff0c59 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00002204 l     F .text	0000004c digitalWrite.part.1
00002250 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002530 l     F .text	00000048 sysex_byte
1fff1850 l     O .bss	00000001 tx_noautoflush
1fff187c l     O .bss	00000004 tx_packet
1fff1880 l     O .bss	00000001 transmit_previous_timeout
1fff1888 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c5c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff189c l     O .bss	00000004 ep0_tx_ptr
1fff18a0 l     O .bss	00000014 rx_last
1fff18b4 l     O .bss	00000002 ep0_tx_len
1fff18b8 l     O .bss	00000040 ep0_rx0_buf
1fff18f8 l     O .bss	00000014 rx_first
1fff190c l     O .bss	00000001 ep0_tx_data_toggle
1fff1910 l     O .bss	00000040 ep0_rx1_buf
1fff1950 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1964 l     O .bss	00000014 tx_last
1fff1978 l     O .bss	00000008 setup
1fff1980 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1984 l     O .bss	00000008 reply_buffer
1fff1990 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1995 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1998 l     O .bss	00000004 rts_pin
1fff199c l     O .bss	00000001 rx_buffer_head
1fff199d l     O .bss	00000001 rx_buffer_tail
1fff19a0 l     O .bss	00000028 tx_buffer
1fff19c8 l     O .bss	00000040 rx_buffer
1fff1a08 l     O .bss	00000001 transmitting
1fff1a09 l     O .bss	00000001 tx_buffer_tail
1fff1a0c l     O .bss	00000004 transmit_pin
1fff1a10 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a14 l     O .bss	00000004 rts_pin
1fff1a18 l     O .bss	00000001 transmitting
1fff1a19 l     O .bss	00000001 rx_buffer_tail
1fff1a1c l     O .bss	00000028 tx_buffer
1fff1a44 l     O .bss	00000040 rx_buffer
1fff1a84 l     O .bss	00000001 rx_buffer_head
1fff1a85 l     O .bss	00000001 tx_buffer_tail
1fff1a88 l     O .bss	00000004 transmit_pin
1fff1a8c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a90 l     O .bss	00000004 rts_pin
1fff1a94 l     O .bss	00000001 rx_buffer_head
1fff1a95 l     O .bss	00000001 rx_buffer_tail
1fff1a98 l     O .bss	00000028 tx_buffer
1fff1ac0 l     O .bss	00000040 rx_buffer
1fff1b00 l     O .bss	00000001 transmitting
1fff1b01 l     O .bss	00000001 tx_buffer_tail
1fff1b04 l     O .bss	00000004 transmit_pin
1fff1b08 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b0c l     O .bss	00000004 rts_pin
1fff1b10 l     O .bss	00000001 rx_buffer_head
1fff1b11 l     O .bss	00000001 rx_buffer_tail
1fff1b14 l     O .bss	00000040 tx_buffer
1fff1b54 l     O .bss	00000040 rx_buffer
1fff1b94 l     O .bss	00000001 transmitting
1fff1b95 l     O .bss	00000001 tx_buffer_tail
1fff1b98 l     O .bss	00000004 transmit_pin
1fff1b9c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1ba0 l     O .bss	00000004 rts_pin
1fff1ba4 l     O .bss	00000001 rx_buffer_head
1fff1ba5 l     O .bss	00000001 rx_buffer_tail
1fff1ba8 l     O .bss	00000028 tx_buffer
1fff1bd0 l     O .bss	00000040 rx_buffer
1fff1c10 l     O .bss	00000001 transmitting
1fff1c11 l     O .bss	00000001 tx_buffer_tail
1fff1c14 l     O .bss	00000004 transmit_pin
1fff1c18 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c74 l     O .data	00000012 device_descriptor
1fff0ca0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c1c l     O .bss	00000004 rts_pin
1fff1c20 l     O .bss	00000001 rx_buffer_head
1fff1c21 l     O .bss	00000001 rx_buffer_tail
1fff1c24 l     O .bss	00000028 tx_buffer
1fff1c4c l     O .bss	00000040 rx_buffer
1fff1c8c l     O .bss	00000001 transmitting
1fff1c8d l     O .bss	00000001 tx_buffer_tail
1fff1c90 l     O .bss	00000004 transmit_pin
1fff1c94 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004898 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15b0 l       .bss	00000000 __bss_start__
1fff1e30 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003bf0  w    F .text	00000006 adc0_isr
00001c88 g     F .text	0000001c usb_serial_available
00003ab0 g     F .text	00000020 serial4_available
0000375c  w    F .text	000000c4 yield
1fff0c88 g     O .data	00000018 usb_string_manufacturer_name_default
00003c9c g     F .text	00000020 serial_available
1fff1854 g     O .bss	00000004 usb_midi_handleProgramChange
00003ba8  w    F .text	00000048 hard_fault_isr
00003bf0  w    F .text	00000006 dma_ch6_isr
00003850 g     F .text	00000020 Print::println()
00003984 g     F .text	00000020 serial2_available
00003bf0  w    F .text	00000006 uart0_lon_isr
00002b70 g     F .text	000000e8 usb_rx_memory
00003820  w    F .text	00000002 serialEvent5()
00003bf0  w    F .text	00000006 dma_ch8_isr
00003dc8 g     F .text	00000020 serial6_available
00004870 g     F .text	00000002 __malloc_unlock
1fff1868 g     O .bss	00000004 usb_midi_handleAfterTouch
00002028 g     F .text	000000e0 analog_init
00002c58 g     F .text	00000084 usb_tx
00003bf0  w    F .text	00000006 portcd_isr
1fff1878 g     O .bss	00000004 usb_midi_handleSysExComplete
000041e8 g     F .text	00000098 MillisTimer::runFromTimer()
00003bf0  w    F .text	00000006 can1_rx_warn_isr
00004f64 g       .fini	00000000 __exidx_end
00003bf0  w    F .text	00000006 dma_error_isr
1fff1cf4 g     O .bss	00000001 usb_midi_msg_type
1fff1cac g     O .bss	00000001 EventResponder::runningFromYield
00003bf0  w    F .text	00000006 i2c0_isr
00004290 g     F .text	0000000c __errno
00003bf0  w    F .text	00000006 portd_isr
00003bf0  w    F .text	00000006 enet_error_isr
1fff1c98 g     O .bss	00000004 EventResponder::firstInterrupt
00003bf0  w    F .text	00000006 tpm1_isr
0000383c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004cbc g     O .text	00000200 digital_pin_to_info_PGM
1fff1e2c g     O .bss	00000004 errno
00004f64 g       .fini	00000000 _etext
1fff15b0 g       .bss	00000000 _sbss
00003888  w    F .text	00000002 serialEvent6()
1fff1864 g     O .bss	00000004 usb_midi_handleVelocityChange
000022f8 g     F .text	0000001c digitalRead
00003bf0  w    F .text	00000006 porte_isr
00000494 g     F .text	00001568 loop
00003bf0  w    F .text	00000006 portb_isr
00002614 g     F .text	0000002c usb_midi_flush_output
00003bf0  w    F .text	00000006 spi1_isr
00003ad0 g     F .text	000000d8 uart3_status_isr
00004094  w    F .text	00000002 serialEvent1()
1fff15fc g     O .bss	00000018 led4
00003bf0  w    F .text	00000006 mcm_isr
00004180 g     F .text	00000068 MillisTimer::addToActiveList()
00002640 g     F .text	0000043c usb_midi_read
1fff1840 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1c9c g     O .bss	00000004 EventResponder::lastInterrupt
000039a4 g     F .text	0000010c uart1_status_isr
1fff1cf6 g     O .bss	00000002 usb_midi_msg_sysex_len
00003bf0  w    F .text	00000006 randnum_isr
1fff1848 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1838 g     O .bss	00000004 systick_millis_count
00003ba8  w    F .text	00000048 bus_fault_isr
00003bf0  w    F .text	00000006 watchdog_isr
00003bf0  w    F .text	00000006 i2c1_isr
1fff198c g     O .bss	00000001 usb_configuration
00003bf0  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003870  w    F .text	00000002 serialEvent2()
00003bf0  w    F .text	00000006 i2c2_isr
1fff0c88  w    O .data	00000018 usb_string_manufacturer_name
1fff1e20 g     O .bss	0000000a usb_rx_byte_count_data
00003bf0  w    F .text	00000006 pit1_isr
000042ec g     F .text	00000010 malloc
00003bf0  w    F .text	00000006 dma_ch4_isr
00003bf0  w    F .text	00000006 software_isr
00003bf0  w    F .text	00000006 dma_ch7_isr
0000411c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
0000368c g     F .text	000000d0 usb_init
00003bf0  w    F .text	00000006 lptmr_isr
1fff1cbc g     O .bss	00000004 __malloc_top_pad
000022c8 g     F .text	00000024 rtc_set
1fff17a8 g     O .bss	00000028 button5
1fff17f8 g     O .bss	00000028 button4
1fff0c40 g       .data	00000000 _sdata
1fff1898 g     O .bss	00000004 usb_midi_handleNoteOn
00003c68 g     F .text	00000034 kinetis_hsrun_enable
00004874 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001c10 g     F .text	00000048 usb_serial_getchar
00003bf0  w    F .text	00000006 can1_bus_off_isr
00003bf0  w    F .text	00000006 ftm2_isr
1fff1ce8 g     O .bss	00000008 usb_cdc_line_coding
000022ec g     F .text	0000000a digitalWrite
00003bf0  w    F .text	00000006 uart5_status_isr
00003de8 g     F .text	000000e4 lpuart0_status_isr
1fff1ca4 g     O .bss	00000004 EventResponder::lastYield
00004ee8 g     O .text	00000005 usb_endpoint_config_table
00003bf0  w    F .text	00000006 dma_ch9_isr
00003bf0  w    F .text	00000006 pit2_isr
00003f9c g     F .text	00000020 serial3_available
1fff1cb8 g     O .bss	00000004 __malloc_max_sbrked_mem
00002314 g     F .text	0000000a pinMode
00002abc g     F .text	0000004c usb_free
00003bf0  w    F .text	00000006 i2c3_isr
1fff162c g     O .bss	00000018 led1
1fff1860 g     O .bss	00000004 usb_midi_handleSysExPartial
00004f64 g       .fini	00000000 __exidx_start
00003bf0  w    F .text	00000006 pit0_isr
1fff1cf8 g     O .bss	00000001 usb_midi_msg_data1
1fff1ca8 g     O .bss	00000004 EventResponder::firstYield
00004f44 g     O .text	00000004 _global_impure_ptr
00003bf0  w    F .text	00000006 can1_error_isr
0000429c g     F .text	00000050 __libc_init_array
1fff1e30 g       .bss	00000000 __bss_end
00003bf0  w    F .text	00000006 can0_wakeup_isr
00003bf0  w    F .text	00000006 flash_cmd_isr
00003824  w    F .text	00000004 usb_serial_class::clear()
00003fbc g     F .text	000000d8 uart2_status_isr
00003c08 g     F .text	0000002c _sbrk
1fff1cb0 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c70 g     O .data	00000004 __brkval
1fff1830 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001e9c g     F .text	00000048 usb_serial_flush_callback
00004f48 g     F .text	00000000 _init
00003bf0  w    F .text	00000006 svcall_isr
00003bf0  w    F .text	00000006 dma_ch15_isr
00003bf0  w    F .text	00000006 uart1_error_isr
000048b8 g     F .text	00000028 __libc_fini_array
00003bf0  w    F .text	00000006 usbhs_phy_isr
1fff1e30 g       .bss	00000000 _ebss
00003bf0 g     F .text	00000006 unused_isr
00003bf0  w    F .text	00000006 spi0_isr
00003bf0  w    F .text	00000006 dma_ch3_isr
00003bf0  w    F .text	00000006 flash_error_isr
1fff1644 g     O .bss	00000018 knob2
0000388c g     F .text	00000020 serial5_available
00003bf0  w    F .text	00000006 uart5_error_isr
00003bf0  w    F .text	00000006 rtc_seconds_isr
00003bf0  w    F .text	00000006 pdb_isr
00003ba8  w    F .text	00000048 usage_fault_isr
00003bf0  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003bf0  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1cf0 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000018 leds
00004280 g     F .text	00000010 systick_isr
00003bf0  w    F .text	00000006 rtc_alarm_isr
00003bf0  w    F .text	00000006 dma_ch2_isr
1fff0c60 g     O .data	00000010 Serial
00003bf0  w    F .text	00000006 ftm1_isr
00003844  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003bf8  w    F .text	0000000c startup_early_hook
00003bf0  w    F .text	00000006 dma_ch13_isr
00003bf0  w    F .text	00000006 uart2_error_isr
00001c58 g     F .text	00000030 usb_serial_peekchar
1fff0d54 g     O .data	00000016 usb_string_serial_number_default
00003ba8 g     F .text	00000048 fault_isr
0000497c g     F .text	000001d0 _free_r
1fff1884 g     O .bss	00000004 usb_midi_handleStop
00003bf0  w    F .text	00000006 usb_charge_isr
00003834  w    F .text	00000004 usb_serial_class::flush()
00003bf0  w    F .text	00000006 cmt_isr
00003bf0  w    F .text	00000006 usbhs_isr
1fff1894 g     O .bss	00000004 usb_midi_handleControlChange
1fff15a8 g     O .data	00000004 __malloc_sbrk_base
0000382c  w    F .text	00000004 usb_serial_class::read()
00003bf0  w    F .text	00000006 ftm3_isr
00003bf0  w    F .text	00000006 tsi0_isr
1fff1690 g     O .bss	00000018 led6
1fff16a8 g     O .bss	00000018 knob1
00003bf0  w    F .text	00000006 spi2_isr
00003874  w    F .text	00000002 serialEvent4()
0000384c  w    F .text	00000002 serialEvent()
1fff190d g     O .bss	00000001 usb_reboot_timer
00004b4c g     F .text	000000a4 __register_exitproc
00001ca4 g     F .text	00000038 usb_serial_flush_input
00001de4 g     F .text	00000018 usb_serial_putchar
1fff1cc0 g     O .bss	00000028 __malloc_current_mallinfo
00003bf0  w    F .text	00000006 can0_bus_off_isr
1fff1614 g     O .bss	00000018 led5
1fff1981 g     O .bss	00000001 usb_rx_memory_needed
00002cdc g     F .text	000009b0 usb_isr
1fff1890 g     O .bss	00000004 usb_midi_handleNoteOff
00004ebc  w    O .text	00000028 vtable for usb_serial_class
1fff1660 g     O .bss	00000018 knob3
00003bf0  w    F .text	00000006 uart3_error_isr
1fff1ca0 g     O .bss	00000004 MillisTimer::listActive
00003bf0  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003bf0  w    F .text	00000006 low_voltage_isr
1fff16e8 g     O .bss	00000028 button2
1fff119c g     O .data	00000408 __malloc_av_
00003bf0  w    F .text	00000006 can0_error_isr
000023c4 g     F .text	0000016c _init_Teensyduino_internal_
00001e44 g     F .text	00000058 usb_serial_flush_output
00003bf0  w    F .text	00000006 dma_ch12_isr
0000486c g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003bf0  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003bf0  w    F .text	00000006 pit3_isr
00003bf0  w    F .text	00000006 enet_rx_isr
00003bf0  w    F .text	00000006 portc_isr
00003878 g     F .text	00000010 main
1fff1cb4 g     O .bss	00000004 __malloc_max_total_mem
1fff15e4 g     O .bss	00000018 led3
00003ba8  w    F .text	00000048 memmanage_fault_isr
00003ecc g     F .text	00000084 usb_init_serialnumber
1fff165c g     O .bss	00000001 currentMode
00004f60 g       .text	00000000 __init_array_end
000042fc g     F .text	00000570 _malloc_r
00003bf0  w    F .text	00000006 debugmonitor_isr
1fff185c g     O .bss	00000004 usb_midi_handleSongPosition
0000409c g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff184c g     O .bss	00000004 usb_midi_handleContinue
1fff1cf9 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003bf0  w    F .text	00000006 cmp1_isr
1fff1710 g     O .bss	00000028 button3
00003bf0  w    F .text	00000006 ftm0_isr
000048e0 g     F .text	0000009c _malloc_trim_r
1fff0d50 g     O .data	00000004 string0
00001cdc g     F .text	00000108 usb_serial_write
00003c04  w    F .text	00000002 startup_late_hook
00003830  w    F .text	00000004 usb_serial_class::available()
1fff1cfa g     O .bss	00000001 usb_midi_msg_cable
1fff0d38  w    O .data	00000018 usb_string_product_name
00002320 g     F .text	000000a4 delay
00003bf0  w    F .text	00000006 tpm0_isr
00004f60 g     F .fini	00000000 _fini
00003bf0  w    F .text	00000006 i2s0_rx_isr
00003bf0  w    F .text	00000006 uart4_error_isr
00002578 g     F .text	0000009c usb_midi_write_packed
000048ac g     F .text	0000000c atexit
00003bf0  w    F .text	00000006 can0_message_isr
1fff1198 g     O .data	00000004 _impure_ptr
00003bf0  w    F .text	00000006 can1_message_isr
00003bf0  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1874 g     O .bss	00000004 usb_midi_handleTuneRequest
00004f54 g       .text	00000000 __preinit_array_end
00003bf0  w    F .text	00000006 sdhc_isr
1fff1cfb g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00004ef0 g     O .text	00000054 usb_descriptor_list
00002b08 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1678 g     O .bss	00000018 knob4
00003bf0  w    F .text	00000006 dma_ch10_isr
1fff1738 g     O .bss	00000070 sequence1
1fff186c g     O .bss	00000004 usb_midi_handleStart
00003bf0  w    F .text	00000006 uart0_error_isr
00002a7c g     F .text	00000040 usb_malloc
00003bf0  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001dfc g     F .text	00000048 usb_serial_write_buffer_free
00003bf0  w    F .text	00000006 enet_timer_isr
1fff17d0 g     O .bss	00000028 button6
1fff16c0 g     O .bss	00000028 button1
1fff15ac g       .data	00000000 _edata
00003bf0  w    F .text	00000006 i2s0_tx_isr
00003bf0  w    F .text	00000006 adc1_isr
00003838  w    F .text	00000004 usb_serial_class::availableForWrite()
00003bf0  w    F .text	00000006 cmp0_isr
1fff183c g     O .bss	00000004 usb_midi_handleClock
00003f50 g     F .text	0000004c ultoa
00004138 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15a4 g     O .data	00000004 __malloc_trim_threshold
00003828  w    F .text	00000004 usb_serial_class::peek()
1fff1820 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1858 g     O .bss	00000004 usb_midi_handlePitchChange
00003bf0  w    F .text	00000006 pit_isr
1fff1870 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003bf0  w    F .text	00000006 dac0_isr
00004f54 g       .text	00000000 __init_array_start
00003bf0  w    F .text	00000006 can1_tx_warn_isr
00002108 g     F .text	000000fc analogRead
1fff1cfc g     O .bss	00000122 usb_midi_msg_sysex
00003cbc g     F .text	0000010c uart0_status_isr
00003bf0  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d38 g     O .data	00000018 usb_string_product_name_default
00003bf0  w    F .text	00000006 dma_ch1_isr
00002b44 g     F .text	0000002c usb_tx_packet_count
00003bf0  w    F .text	00000006 dma_ch5_isr
00003bf0  w    F .text	00000006 can0_rx_warn_isr
00003bf0  w    F .text	00000006 can0_tx_warn_isr
000038ac g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003c34 g     F .text	00000034 kinetis_hsrun_disable
00004f54 g       .text	00000000 __preinit_array_start
00004098  w    F .text	00000002 serialEvent3()
1fff188c g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15cc g     O .bss	00000018 led2
00003bf0  w    F .text	00000006 cmp2_isr
0000417c g     F .text	00000004 pendablesrvreq_isr
00003bf0  w    F .text	00000006 wakeup_isr
00003bf0  w    F .text	00000006 cmp3_isr
1fff1844 g     O .bss	00000004 usb_midi_handleActiveSensing
00003bf0  w    F .text	00000006 tpm2_isr
00003bf0  w    F .text	00000006 dma_ch0_isr
1fff0d54  w    O .data	00000016 usb_string_serial_number
00003bf0  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....;...;..
      10:	.;...;...;...;..
      20:	.;...;...;...;..
      30:	.;...;..}A...B..
      40:	.;...;...;...;..
      50:	.;...;...;...;..
      60:	.;...;...;...;..
      70:	.;...;...;...;..
      80:	.;...;...;...;..
      90:	.;...;...;...;..
      a0:	.;...;...;...;..
      b0:	.;...;...;...<..
      c0:	.;...9...;...?..
      d0:	.;...:...;...;..
      e0:	.;...;...;...;..
      f0:	.;...;...;...;..
     100:	.;...;...;...;..
     110:	.;...,...;...;..
     120:	.;...;...;...;..
     130:	.;...;...;...;..
     140:	.;...;...8...;..
     150:	.;...;...;...;..
     160:	.;...;...;...;..
     170:	.;...;...;...;..
     180:	.;...;...;...;..
     190:	.;...;...=...;..
     1a0:	.;...;...;...;..
     1b0:	.;...;...;...;..
     1c0:	.;...;...;...;..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3bf8 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	23c4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	22c8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	22c8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	429c <__libc_init_array>

	startup_late_hook();
     33a:	bl	3c04 <startup_late_hook>
	main();
     33e:	bl	3878 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15ac
     374:	.word	0x00004f60
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15b0
     380:	.word	0x1fff1e30
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15b0
     42c:	.word	0x00000000
     430:	.word	0x00004f64

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15b4
     460:	.word	0x00004f64
     464:	.word	0x1fff15ac
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	2314 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	22ec <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob1(A0, sequence1, FIRST, 0);
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #228	; 0xe4
     49c:	bl	2640 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	808 <loop+0x374>
     4a6:	ldr	r4, [pc, #668]	; (744 <loop+0x2b0>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #668]	; (748 <loop+0x2b4>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	22f8 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	9fc <loop+0x568>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #52]	; 0x34
	return ret;
     4c4:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #48]	; 0x30
	return ret;
     4cc:	ldr	r1, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #628]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r3, r1
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #620]	; (748 <loop+0x2b4>)
     4da:	cmp	r5, r3
     4dc:	beq.w	a24 <loop+0x590>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r5, #0
     4e4:	beq.w	a78 <loop+0x5e4>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r5, [pc, #608]	; (74c <loop+0x2b8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r5, #32]
     4f0:	bl	22f8 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r6, r0
     4fc:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	a10 <loop+0x57c>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #44]	; 0x2c
	return ret;
     506:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     508:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #40]	; 0x28
	return ret;
     50e:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #560]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r1, r3
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r5, #4]
     51a:	ldr	r7, [pc, #560]	; (74c <loop+0x2b8>)
     51c:	cmp	r6, r3
     51e:	beq.w	a18 <loop+0x584>
          m_state = reading;
     522:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r6, #0
     526:	beq.w	aae <loop+0x61a>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r6, [pc, #548]	; (750 <loop+0x2bc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r6, #32]
     532:	bl	22f8 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r5, r0
     53e:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	a0c <loop+0x578>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #36]	; 0x24
	return ret;
     548:	ldr	r3, [sp, #36]	; 0x24
        m_lastDebounceTime = millis();
     54a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #32]
	return ret;
     550:	ldr	r1, [sp, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #496]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r6, #4]
     55c:	ldr	r7, [pc, #496]	; (750 <loop+0x2bc>)
     55e:	cmp	r5, r3
     560:	beq.w	a14 <loop+0x580>
          m_state = reading;
     564:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r5, #0
     568:	beq.w	ae4 <loop+0x650>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r5, [pc, #484]	; (754 <loop+0x2c0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r5, #32]
     574:	bl	22f8 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r6, r0
     580:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	a08 <loop+0x574>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #28]
	return ret;
     58a:	ldr	r3, [sp, #28]
        m_lastDebounceTime = millis();
     58c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #24]
	return ret;
     592:	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #428]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r1, r3
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r5, #4]
     59e:	ldr	r7, [pc, #436]	; (754 <loop+0x2c0>)
     5a0:	cmp	r6, r3
     5a2:	beq.w	a20 <loop+0x58c>
          m_state = reading;
     5a6:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r6, #0
     5aa:	beq.w	b1a <loop+0x686>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #424]	; (758 <loop+0x2c4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	22f8 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	a04 <loop+0x570>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #20]
	return ret;
     5cc:	ldr	r3, [sp, #20]
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #16]
	return ret;
     5d4:	ldr	r1, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #364]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #372]	; (758 <loop+0x2c4>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	a1c <loop+0x588>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r5, #0
     5ec:	beq.w	b50 <loop+0x6bc>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f0:	ldr	r5, [pc, #360]	; (75c <loop+0x2c8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r5, #32]
     5f8:	bl	22f8 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5fc:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5fe:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     600:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     602:	mov	r6, r0
     604:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     606:	beq.w	a00 <loop+0x56c>
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #12]
	return ret;
     60e:	ldr	r3, [sp, #12]
        m_lastDebounceTime = millis();
     610:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #8]
	return ret;
     616:	ldr	r1, [sp, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     618:	ldr.w	r8, [pc, #296]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     61c:	cmp	r1, r3
     61e:	beq.n	632 <loop+0x19e>
        if (reading != m_state) {
     620:	ldr	r3, [r5, #4]
     622:	ldr	r7, [pc, #312]	; (75c <loop+0x2c8>)
     624:	cmp	r6, r3
     626:	beq.w	a28 <loop+0x594>
          m_state = reading;
     62a:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     62c:	cmp	r6, #0
     62e:	beq.w	a2c <loop+0x598>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     632:	ldr	r6, [pc, #300]	; (760 <loop+0x2cc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     634:	str	r2, [r5, #8]
     636:	ldrb	r3, [r6, #16]
     638:	cmp	r3, #0
     63a:	bne.w	830 <loop+0x39c>
     63e:	ldr	r5, [pc, #292]	; (764 <loop+0x2d0>)
     640:	ldrb	r3, [r5, #16]
     642:	cmp	r3, #0
     644:	bne.w	9a0 <loop+0x50c>
     648:	ldr	r5, [pc, #284]	; (768 <loop+0x2d4>)
     64a:	ldrb	r3, [r5, #16]
     64c:	cmp	r3, #0
     64e:	bne.w	944 <loop+0x4b0>
     652:	ldr	r5, [pc, #280]	; (76c <loop+0x2d8>)
     654:	ldrb	r3, [r5, #16]
     656:	cmp	r3, #0
     658:	bne.w	8e8 <loop+0x454>
     65c:	ldr	r5, [pc, #272]	; (770 <loop+0x2dc>)
     65e:	ldrb	r3, [r5, #16]
     660:	cmp	r3, #0
     662:	bne.w	88c <loop+0x3f8>
     666:	ldr	r5, [pc, #268]	; (774 <loop+0x2e0>)
     668:	ldrb	r3, [r5, #16]
     66a:	cmp	r3, #0
     66c:	bne.w	7ac <loop+0x318>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     670:	ldr	r4, [pc, #260]	; (778 <loop+0x2e4>)
     672:	ldrb	r0, [r4, #0]
     674:	bl	2108 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     678:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     67a:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     67c:	cmp	r0, r3
     67e:	beq.n	68c <loop+0x1f8>
     680:	subs	r3, r0, r3
     682:	cmp	r3, #0
     684:	it	lt
     686:	neglt	r3, r3
     688:	cmp	r3, #10
     68a:	bgt.n	78c <loop+0x2f8>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     68c:	ldr	r4, [pc, #236]	; (77c <loop+0x2e8>)
     68e:	ldrb	r0, [r4, #0]
     690:	bl	2108 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     694:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     696:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     698:	cmp	r0, r3
     69a:	beq.n	6a8 <loop+0x214>
     69c:	subs	r3, r0, r3
     69e:	cmp	r3, #0
     6a0:	it	lt
     6a2:	neglt	r3, r3
     6a4:	cmp	r3, #10
     6a6:	bgt.n	724 <loop+0x290>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6a8:	ldr	r4, [pc, #212]	; (780 <loop+0x2ec>)
     6aa:	ldrb	r0, [r4, #0]
     6ac:	bl	2108 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6b0:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6b2:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6b4:	cmp	r0, r3
     6b6:	beq.n	6c4 <loop+0x230>
     6b8:	subs	r3, r0, r3
     6ba:	cmp	r3, #0
     6bc:	it	lt
     6be:	neglt	r3, r3
     6c0:	cmp	r3, #10
     6c2:	bgt.n	704 <loop+0x270>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6c4:	ldr	r4, [pc, #188]	; (784 <loop+0x2f0>)
     6c6:	ldrb	r0, [r4, #0]
     6c8:	bl	2108 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6cc:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6ce:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6d0:	cmp	r0, r3
     6d2:	beq.n	6fe <loop+0x26a>
     6d4:	subs	r3, r0, r3
     6d6:	cmp	r3, #0
     6d8:	it	lt
     6da:	neglt	r3, r3
     6dc:	cmp	r3, #10
     6de:	ble.n	6fe <loop+0x26a>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     6e0:	ldr	r3, [pc, #164]	; (788 <loop+0x2f4>)
     6e2:	ldrb	r3, [r3, #0]
     6e4:	cmp	r3, #0
     6e6:	beq.w	bec <loop+0x758>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     6ea:	cmp	r3, #2
     6ec:	beq.w	10ae <loop+0xc1a>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     6f0:	cmp	r3, #1
     6f2:	beq.w	11e0 <loop+0xd4c>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     6f6:	cmp	r3, #3
     6f8:	beq.w	d9a <loop+0x906>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     6fc:	str	r0, [r4, #8]
  led6.check();
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
}
     6fe:	add	sp, #228	; 0xe4
     700:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     704:	ldr	r3, [pc, #128]	; (788 <loop+0x2f4>)
     706:	ldrb	r3, [r3, #0]
     708:	cmp	r3, #0
     70a:	beq.w	ba8 <loop+0x714>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     70e:	cmp	r3, #2
     710:	beq.w	1090 <loop+0xbfc>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     714:	cmp	r3, #1
     716:	beq.w	11c2 <loop+0xd2e>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     71a:	cmp	r3, #3
     71c:	beq.w	dcc <loop+0x938>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     720:	str	r0, [r4, #8]
     722:	b.n	6c4 <loop+0x230>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     724:	ldr	r3, [pc, #96]	; (788 <loop+0x2f4>)
     726:	ldrb	r3, [r3, #0]
     728:	cmp	r3, #0
     72a:	beq.w	b86 <loop+0x6f2>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     72e:	cmp	r3, #2
     730:	beq.w	1072 <loop+0xbde>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     734:	cmp	r3, #1
     736:	beq.w	121c <loop+0xd88>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     73a:	cmp	r3, #3
     73c:	beq.w	d68 <loop+0x8d4>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     740:	str	r0, [r4, #8]
     742:	b.n	6a8 <loop+0x214>
     744:	.word	0x1fff1838
     748:	.word	0x1fff16c0
     74c:	.word	0x1fff16e8
     750:	.word	0x1fff1710
     754:	.word	0x1fff17f8
     758:	.word	0x1fff17a8
     75c:	.word	0x1fff17d0
     760:	.word	0x1fff162c
     764:	.word	0x1fff15cc
     768:	.word	0x1fff15e4
     76c:	.word	0x1fff15fc
     770:	.word	0x1fff1614
     774:	.word	0x1fff1690
     778:	.word	0x1fff16a8
     77c:	.word	0x1fff1644
     780:	.word	0x1fff1660
     784:	.word	0x1fff1678
     788:	.word	0x1fff165c
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     78c:	ldr	r3, [pc, #724]	; (a64 <loop+0x5d0>)
     78e:	ldrb	r3, [r3, #0]
     790:	cmp	r3, #0
     792:	beq.w	bca <loop+0x736>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     796:	cmp	r3, #2
     798:	beq.w	10cc <loop+0xc38>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     79c:	cmp	r3, #1
     79e:	beq.w	11fe <loop+0xd6a>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     7a2:	cmp	r3, #3
     7a4:	beq.w	dfe <loop+0x96a>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7a8:	str	r0, [r4, #8]
     7aa:	b.n	68c <loop+0x1f8>
     7ac:	ldr	r3, [r4, #0]
     7ae:	str	r3, [sp, #216]	; 0xd8
	return ret;
     7b0:	ldr	r3, [sp, #216]	; 0xd8
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     7b2:	ldr	r1, [r5, #8]
     7b4:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7b6:	ldr	r4, [pc, #688]	; (a68 <loop+0x5d4>)
     7b8:	subs	r3, r3, r1
     7ba:	cmp	r3, r2
     7bc:	bls.w	670 <loop+0x1dc>
        digitalWrite(m_pin, !digitalRead(m_pin));
     7c0:	ldrb	r6, [r5, #0]
     7c2:	mov	r0, r6
     7c4:	bl	22f8 <digitalRead>
     7c8:	clz	r1, r0
     7cc:	lsrs	r1, r1, #5
     7ce:	mov	r0, r6
     7d0:	bl	22ec <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     7d4:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     7d6:	movs	r2, #0

        if (blinkingCounter > 0) {
     7d8:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     7da:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     7dc:	ble.w	670 <loop+0x1dc>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     7e0:	ldrb	r6, [r5, #0]
     7e2:	mov	r0, r6
     7e4:	bl	22f8 <digitalRead>
     7e8:	clz	r1, r0
     7ec:	lsrs	r1, r1, #5
     7ee:	mov	r0, r6
     7f0:	bl	22ec <digitalWrite>
     7f4:	ldr	r3, [r4, #0]
     7f6:	str	r3, [sp, #220]	; 0xdc
	return ret;
     7f8:	ldr	r3, [sp, #220]	; 0xdc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     7fa:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     7fc:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     7fe:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     802:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     804:	str	r3, [r5, #20]
     806:	b.n	670 <loop+0x1dc>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     808:	ldr	r3, [pc, #608]	; (a6c <loop+0x5d8>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     80a:	ldrb	r3, [r3, #0]
     80c:	cmp	r3, #250	; 0xfa
     80e:	beq.w	c60 <loop+0x7cc>
     812:	cmp	r3, #252	; 0xfc
     814:	beq.w	c0e <loop+0x77a>
     818:	cmp	r3, #248	; 0xf8
     81a:	beq.w	c30 <loop+0x79c>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     81e:	movs	r1, #35	; 0x23
     820:	ldr	r0, [pc, #588]	; (a70 <loop+0x5dc>)
     822:	ldr	r4, [pc, #580]	; (a68 <loop+0x5d4>)
     824:	bl	1cdc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     828:	ldr	r0, [pc, #584]	; (a74 <loop+0x5e0>)
     82a:	bl	3850 <Print::println()>
     82e:	b.n	4a8 <loop+0x14>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     830:	ldr	r3, [r4, #0]
     832:	str	r3, [sp, #176]	; 0xb0
	return ret;
     834:	ldr	r3, [sp, #176]	; 0xb0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     836:	ldr	r1, [r6, #8]
     838:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     83a:	ldr	r5, [pc, #556]	; (a68 <loop+0x5d4>)
     83c:	subs	r3, r3, r1
     83e:	cmp	r3, r2
     840:	bls.w	63e <loop+0x1aa>
        digitalWrite(m_pin, !digitalRead(m_pin));
     844:	ldrb	r7, [r6, #0]
     846:	mov	r0, r7
     848:	bl	22f8 <digitalRead>
     84c:	clz	r1, r0
     850:	lsrs	r1, r1, #5
     852:	mov	r0, r7
     854:	bl	22ec <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     858:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     85a:	movs	r2, #0

        if (blinkingCounter > 0) {
     85c:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     85e:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     860:	ble.w	63e <loop+0x1aa>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     864:	ldrb	r7, [r6, #0]
     866:	mov	r0, r7
     868:	bl	22f8 <digitalRead>
     86c:	clz	r1, r0
     870:	lsrs	r1, r1, #5
     872:	mov	r0, r7
     874:	bl	22ec <digitalWrite>
     878:	ldr	r3, [r5, #0]
     87a:	str	r3, [sp, #180]	; 0xb4
	return ret;
     87c:	ldr	r3, [sp, #180]	; 0xb4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     87e:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     880:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     882:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     886:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     888:	str	r3, [r6, #20]
     88a:	b.n	63e <loop+0x1aa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     88c:	ldr	r3, [r4, #0]
     88e:	str	r3, [sp, #208]	; 0xd0
	return ret;
     890:	ldr	r3, [sp, #208]	; 0xd0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     892:	ldr	r1, [r5, #8]
     894:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     896:	ldr	r6, [pc, #464]	; (a68 <loop+0x5d4>)
     898:	subs	r3, r3, r1
     89a:	cmp	r3, r2
     89c:	bls.w	666 <loop+0x1d2>
        digitalWrite(m_pin, !digitalRead(m_pin));
     8a0:	ldrb	r7, [r5, #0]
     8a2:	mov	r0, r7
     8a4:	bl	22f8 <digitalRead>
     8a8:	clz	r1, r0
     8ac:	lsrs	r1, r1, #5
     8ae:	mov	r0, r7
     8b0:	bl	22ec <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     8b4:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8b6:	movs	r2, #0

        if (blinkingCounter > 0) {
     8b8:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8ba:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     8bc:	ble.w	666 <loop+0x1d2>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     8c0:	ldrb	r7, [r5, #0]
     8c2:	mov	r0, r7
     8c4:	bl	22f8 <digitalRead>
     8c8:	clz	r1, r0
     8cc:	lsrs	r1, r1, #5
     8ce:	mov	r0, r7
     8d0:	bl	22ec <digitalWrite>
     8d4:	ldr	r3, [r6, #0]
     8d6:	str	r3, [sp, #212]	; 0xd4
	return ret;
     8d8:	ldr	r3, [sp, #212]	; 0xd4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     8da:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8dc:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8de:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8e2:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8e4:	str	r3, [r5, #20]
     8e6:	b.n	666 <loop+0x1d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8e8:	ldr	r3, [r4, #0]
     8ea:	str	r3, [sp, #200]	; 0xc8
	return ret;
     8ec:	ldr	r3, [sp, #200]	; 0xc8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     8ee:	ldr	r1, [r5, #8]
     8f0:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8f2:	ldr	r6, [pc, #372]	; (a68 <loop+0x5d4>)
     8f4:	subs	r3, r3, r1
     8f6:	cmp	r3, r2
     8f8:	bls.w	65c <loop+0x1c8>
        digitalWrite(m_pin, !digitalRead(m_pin));
     8fc:	ldrb	r7, [r5, #0]
     8fe:	mov	r0, r7
     900:	bl	22f8 <digitalRead>
     904:	clz	r1, r0
     908:	lsrs	r1, r1, #5
     90a:	mov	r0, r7
     90c:	bl	22ec <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     910:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     912:	movs	r2, #0

        if (blinkingCounter > 0) {
     914:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     916:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     918:	ble.w	65c <loop+0x1c8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     91c:	ldrb	r7, [r5, #0]
     91e:	mov	r0, r7
     920:	bl	22f8 <digitalRead>
     924:	clz	r1, r0
     928:	lsrs	r1, r1, #5
     92a:	mov	r0, r7
     92c:	bl	22ec <digitalWrite>
     930:	ldr	r3, [r6, #0]
     932:	str	r3, [sp, #204]	; 0xcc
	return ret;
     934:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     936:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     938:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     93a:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     93e:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     940:	str	r3, [r5, #20]
     942:	b.n	65c <loop+0x1c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     944:	ldr	r3, [r4, #0]
     946:	str	r3, [sp, #192]	; 0xc0
	return ret;
     948:	ldr	r3, [sp, #192]	; 0xc0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     94a:	ldr	r1, [r5, #8]
     94c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     94e:	ldr	r6, [pc, #280]	; (a68 <loop+0x5d4>)
     950:	subs	r3, r3, r1
     952:	cmp	r3, r2
     954:	bls.w	652 <loop+0x1be>
        digitalWrite(m_pin, !digitalRead(m_pin));
     958:	ldrb	r7, [r5, #0]
     95a:	mov	r0, r7
     95c:	bl	22f8 <digitalRead>
     960:	clz	r1, r0
     964:	lsrs	r1, r1, #5
     966:	mov	r0, r7
     968:	bl	22ec <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     96c:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     96e:	movs	r2, #0

        if (blinkingCounter > 0) {
     970:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     972:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     974:	ble.w	652 <loop+0x1be>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     978:	ldrb	r7, [r5, #0]
     97a:	mov	r0, r7
     97c:	bl	22f8 <digitalRead>
     980:	clz	r1, r0
     984:	lsrs	r1, r1, #5
     986:	mov	r0, r7
     988:	bl	22ec <digitalWrite>
     98c:	ldr	r3, [r6, #0]
     98e:	str	r3, [sp, #196]	; 0xc4
	return ret;
     990:	ldr	r3, [sp, #196]	; 0xc4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     992:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     994:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     996:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     99a:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     99c:	str	r3, [r5, #20]
     99e:	b.n	652 <loop+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9a0:	ldr	r3, [r4, #0]
     9a2:	str	r3, [sp, #184]	; 0xb8
	return ret;
     9a4:	ldr	r3, [sp, #184]	; 0xb8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     9a6:	ldr	r1, [r5, #8]
     9a8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9aa:	ldr	r6, [pc, #188]	; (a68 <loop+0x5d4>)
     9ac:	subs	r3, r3, r1
     9ae:	cmp	r3, r2
     9b0:	bls.w	648 <loop+0x1b4>
        digitalWrite(m_pin, !digitalRead(m_pin));
     9b4:	ldrb	r7, [r5, #0]
     9b6:	mov	r0, r7
     9b8:	bl	22f8 <digitalRead>
     9bc:	clz	r1, r0
     9c0:	lsrs	r1, r1, #5
     9c2:	mov	r0, r7
     9c4:	bl	22ec <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9c8:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9ca:	movs	r2, #0

        if (blinkingCounter > 0) {
     9cc:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9ce:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9d0:	ble.w	648 <loop+0x1b4>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9d4:	ldrb	r7, [r5, #0]
     9d6:	mov	r0, r7
     9d8:	bl	22f8 <digitalRead>
     9dc:	clz	r1, r0
     9e0:	lsrs	r1, r1, #5
     9e2:	mov	r0, r7
     9e4:	bl	22ec <digitalWrite>
     9e8:	ldr	r3, [r6, #0]
     9ea:	str	r3, [sp, #188]	; 0xbc
	return ret;
     9ec:	ldr	r3, [sp, #188]	; 0xbc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     9ee:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9f0:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9f2:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9f6:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9f8:	str	r3, [r5, #20]
     9fa:	b.n	648 <loop+0x1b4>
     9fc:	ldr	r3, [r6, #20]
     9fe:	b.n	4c8 <loop+0x34>
     a00:	ldr	r3, [r5, #20]
     a02:	b.n	612 <loop+0x17e>
     a04:	ldr	r3, [r6, #20]
     a06:	b.n	5d0 <loop+0x13c>
     a08:	ldr	r3, [r5, #20]
     a0a:	b.n	58e <loop+0xfa>
     a0c:	ldr	r3, [r6, #20]
     a0e:	b.n	54c <loop+0xb8>
     a10:	ldr	r3, [r5, #20]
     a12:	b.n	50a <loop+0x76>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     a14:	mov	r2, r5
     a16:	b.n	56c <loop+0xd8>
     a18:	mov	r2, r6
     a1a:	b.n	52a <loop+0x96>
     a1c:	mov	r2, r5
     a1e:	b.n	5f0 <loop+0x15c>
     a20:	mov	r2, r6
     a22:	b.n	5ae <loop+0x11a>
     a24:	mov	r2, r5
     a26:	b.n	4e8 <loop+0x54>
     a28:	mov	r2, r6
     a2a:	b.n	632 <loop+0x19e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     a2c:	ldrb	r3, [r7, #16]
     a2e:	cmp	r3, #0
     a30:	bne.w	e8e <loop+0x9fa>
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     a34:	ldrb	r3, [r7, #17]
     a36:	cmp	r3, #0
     a38:	bne.w	10ea <loop+0xc56>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     a3c:	ldr	r3, [r7, #24]
     a3e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     a42:	clz	r1, r1
     a46:	lsrs	r1, r1, #5
     a48:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     a4a:	uxtb	r0, r0
     a4c:	bl	22ec <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     a50:	ldr	r3, [r7, #0]
     a52:	ldr	r0, [r7, #28]
     a54:	ldr	r2, [r7, #12]
     a56:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     a58:	ldrb	r1, [r0, r3]
     a5a:	eor.w	r1, r1, #1
     a5e:	strb	r1, [r0, r3]
     a60:	b.n	632 <loop+0x19e>
     a62:	nop
     a64:	.word	0x1fff165c
     a68:	.word	0x1fff1838
     a6c:	.word	0x1fff1cf4
     a70:	.word	0x00004c20
     a74:	.word	0x1fff0c60

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     a78:	ldrb	r3, [r7, #16]
     a7a:	cmp	r3, #0
     a7c:	bne.w	eec <loop+0xa58>
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     a80:	ldrb	r3, [r7, #17]
     a82:	cmp	r3, #0
     a84:	bne.w	110e <loop+0xc7a>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     a88:	ldr	r3, [r7, #24]
     a8a:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     a8e:	clz	r1, r1
     a92:	lsrs	r1, r1, #5
     a94:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     a96:	uxtb	r0, r0
     a98:	bl	22ec <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     a9c:	ldr	r3, [r7, #0]
     a9e:	ldr	r0, [r7, #28]
     aa0:	ldr	r2, [r7, #12]
     aa2:	subs	r3, #1
     aa4:	ldrb	r1, [r0, r3]
     aa6:	eor.w	r1, r1, #1
     aaa:	strb	r1, [r0, r3]
     aac:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     aae:	ldrb	r3, [r7, #16]
     ab0:	cmp	r3, #0
     ab2:	bne.w	e30 <loop+0x99c>
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     ab6:	ldrb	r3, [r7, #17]
     ab8:	cmp	r3, #0
     aba:	bne.w	1132 <loop+0xc9e>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     abe:	ldr	r3, [r7, #24]
     ac0:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ac4:	clz	r1, r1
     ac8:	lsrs	r1, r1, #5
     aca:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     acc:	uxtb	r0, r0
     ace:	bl	22ec <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     ad2:	ldr	r3, [r7, #0]
     ad4:	ldr	r0, [r7, #28]
     ad6:	ldr	r2, [r7, #12]
     ad8:	subs	r3, #1
     ada:	ldrb	r1, [r0, r3]
     adc:	eor.w	r1, r1, #1
     ae0:	strb	r1, [r0, r3]
     ae2:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     ae4:	ldrb	r3, [r7, #16]
     ae6:	cmp	r3, #0
     ae8:	bne.w	1014 <loop+0xb80>
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     aec:	ldrb	r3, [r7, #17]
     aee:	cmp	r3, #0
     af0:	bne.w	119e <loop+0xd0a>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     af4:	ldr	r3, [r7, #24]
     af6:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     afa:	clz	r1, r1
     afe:	lsrs	r1, r1, #5
     b00:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b02:	uxtb	r0, r0
     b04:	bl	22ec <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b08:	ldr	r3, [r7, #0]
     b0a:	ldr	r0, [r7, #28]
     b0c:	ldr	r2, [r7, #12]
     b0e:	subs	r3, #1
     b10:	ldrb	r1, [r0, r3]
     b12:	eor.w	r1, r1, #1
     b16:	strb	r1, [r0, r3]
     b18:	b.n	56c <loop+0xd8>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b1a:	ldrb	r3, [r7, #16]
     b1c:	cmp	r3, #0
     b1e:	bne.w	fb6 <loop+0xb22>
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b22:	ldrb	r3, [r7, #17]
     b24:	cmp	r3, #0
     b26:	bne.w	117a <loop+0xce6>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b2a:	ldr	r3, [r7, #24]
     b2c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b30:	clz	r1, r1
     b34:	lsrs	r1, r1, #5
     b36:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b38:	uxtb	r0, r0
     b3a:	bl	22ec <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b3e:	ldr	r3, [r7, #0]
     b40:	ldr	r0, [r7, #28]
     b42:	ldr	r2, [r7, #12]
     b44:	subs	r3, #1
     b46:	ldrb	r1, [r0, r3]
     b48:	eor.w	r1, r1, #1
     b4c:	strb	r1, [r0, r3]
     b4e:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b50:	ldrb	r3, [r7, #16]
     b52:	cmp	r3, #0
     b54:	bne.w	f58 <loop+0xac4>
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b58:	ldrb	r3, [r7, #17]
     b5a:	cmp	r3, #0
     b5c:	bne.w	1156 <loop+0xcc2>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b60:	ldr	r3, [r7, #24]
     b62:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b66:	clz	r1, r1
     b6a:	lsrs	r1, r1, #5
     b6c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b6e:	uxtb	r0, r0
     b70:	bl	22ec <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b74:	ldr	r3, [r7, #0]
     b76:	ldr	r0, [r7, #28]
     b78:	ldr	r2, [r7, #12]
     b7a:	subs	r3, #1
     b7c:	ldrb	r1, [r0, r3]
     b7e:	eor.w	r1, r1, #1
     b82:	strb	r1, [r0, r3]
     b84:	b.n	5f0 <loop+0x15c>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     b86:	ldrb	r3, [r4, #20]
     b88:	cmp	r3, #0
     b8a:	bne.w	740 <loop+0x2ac>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     b8e:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     b92:	ldr	r2, [r4, #16]
     b94:	bge.w	cfc <loop+0x868>
        max_ppqn = 6;

        if (ppqn >= 6) {
     b98:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     b9a:	movs	r5, #6

        if (ppqn >= 6) {
     b9c:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     b9e:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     ba0:	ble.w	740 <loop+0x2ac>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     ba4:	str	r3, [r2, #28]
     ba6:	b.n	740 <loop+0x2ac>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     ba8:	ldrb	r3, [r4, #20]
     baa:	cmp	r3, #0
     bac:	bne.w	720 <loop+0x28c>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     bb0:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     bb4:	ldr	r2, [r4, #16]
     bb6:	bge.w	cc8 <loop+0x834>
        max_ppqn = 6;

        if (ppqn >= 6) {
     bba:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     bbc:	movs	r5, #6

        if (ppqn >= 6) {
     bbe:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     bc0:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     bc2:	ble.w	720 <loop+0x28c>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     bc6:	str	r3, [r2, #28]
     bc8:	b.n	720 <loop+0x28c>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     bca:	ldrb	r3, [r4, #20]
     bcc:	cmp	r3, #0
     bce:	bne.w	7a8 <loop+0x314>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     bd2:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     bd6:	ldr	r2, [r4, #16]
     bd8:	bge.w	ce2 <loop+0x84e>
        max_ppqn = 6;

        if (ppqn >= 6) {
     bdc:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     bde:	movs	r5, #6

        if (ppqn >= 6) {
     be0:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     be2:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     be4:	ble.w	7a8 <loop+0x314>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     be8:	str	r3, [r2, #28]
     bea:	b.n	7a8 <loop+0x314>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     bec:	ldrb	r3, [r4, #20]
     bee:	cmp	r3, #0
     bf0:	bne.w	6fc <loop+0x268>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     bf4:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     bf8:	ldr	r2, [r4, #16]
     bfa:	bge.w	d16 <loop+0x882>
        max_ppqn = 6;

        if (ppqn >= 6) {
     bfe:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c00:	movs	r5, #6

        if (ppqn >= 6) {
     c02:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c04:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     c06:	ble.w	6fc <loop+0x268>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     c0a:	str	r3, [r2, #28]
     c0c:	b.n	6fc <loop+0x268>
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c0e:	ldr	r3, [pc, #828]	; (f4c <loop+0xab8>)
     c10:	ldr	r4, [pc, #828]	; (f50 <loop+0xabc>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[5]->toggle();
     c12:	ldr	r2, [r3, #108]	; 0x6c
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c14:	movs	r5, #0
      ppqn = 0;
     c16:	str	r5, [r3, #28]
      m_currentStep = 0;
     c18:	str	r5, [r3, #8]
     c1a:	ldmia.w	r2, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c1e:	clz	r1, r1
     c22:	lsrs	r1, r1, #5
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c24:	strb	r5, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c26:	uxtb	r0, r0
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c28:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     c2a:	bl	22ec <digitalWrite>
     c2e:	b.n	4a8 <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     c30:	ldr	r5, [pc, #792]	; (f4c <loop+0xab8>)

      if (ppqn >= notesLengths[m_currentStep]) {
     c32:	ldr	r2, [r5, #8]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     c34:	ldr	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     c36:	adds	r2, #18
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     c38:	adds	r3, #1

      if (ppqn >= notesLengths[m_currentStep]) {
     c3a:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     c3e:	str	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     c40:	cmp	r3, r2
     c42:	bge.w	12d8 <loop+0xe44>
        // of the active note to see if i do the stop step
        stopStep();
      }


      if (ppqn == max_ppqn) {
     c46:	ldr	r2, [r5, #32]
     c48:	ldr	r6, [pc, #768]	; (f4c <loop+0xab8>)
     c4a:	cmp	r2, r3
     c4c:	bne.w	4a6 <loop+0x12>
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
     c50:	ldrb	r3, [r6, #4]
     c52:	cmp	r3, #0
     c54:	bne.w	147a <loop+0xfe6>
     c58:	ldr	r4, [pc, #756]	; (f50 <loop+0xabc>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     c5a:	movs	r3, #0
     c5c:	str	r3, [r5, #28]
     c5e:	b.n	4a8 <loop+0x14>
      }
    };

    void startPPQN () {
      m_state = true;
     c60:	ldr	r5, [pc, #744]	; (f4c <loop+0xab8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c62:	ldr	r4, [pc, #748]	; (f50 <loop+0xabc>)
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     c64:	ldr	r3, [r5, #8]
     c66:	adds	r3, #22
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     c68:	mov.w	r8, #1
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     c6c:	ldr.w	r6, [r5, r3, lsl #2]
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     c70:	strb.w	r8, [r5, #4]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c74:	ldrb.w	r9, [r6]
      ppqn = 0;
     c78:	movs	r7, #0
     c7a:	mov	r0, r9
     c7c:	str	r7, [r5, #28]
     c7e:	bl	22f8 <digitalRead>
     c82:	clz	r1, r0
     c86:	lsrs	r1, r1, #5
     c88:	mov	r0, r9
     c8a:	bl	22ec <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep].m_state) {
     c8e:	ldr	r3, [r5, #8]
     c90:	ldr	r2, [r4, #0]
     c92:	str	r2, [sp, #4]
     c94:	ldrb	r2, [r5, r3]
	return ret;
     c96:	ldr	r1, [sp, #4]
      blinking = true;
     c98:	strb.w	r8, [r6, #16]
      blinkingCounter = times;
     c9c:	str	r7, [r6, #20]
      lastBlink = millis();  
     c9e:	str	r1, [r6, #8]
     ca0:	cmp	r2, #0
     ca2:	bne.w	1292 <loop+0xdfe>
          playStep(m_currentStep);
        }

        m_currentStep++;
     ca6:	adds	r3, #1

        if (m_currentStep > 3) {
     ca8:	cmp	r3, #3
          m_currentStep = 0;
     caa:	it	gt
     cac:	movgt	r3, #0
     cae:	str	r3, [r5, #8]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[5]->toggle();
     cb0:	ldr	r3, [r5, #108]	; 0x6c
     cb2:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     cb6:	clz	r1, r1
     cba:	lsrs	r1, r1, #5
     cbc:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     cbe:	uxtb	r0, r0
     cc0:	bl	22ec <digitalWrite>
     cc4:	b.w	4a8 <loop+0x14>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     cc8:	sub.w	r1, r0, #400	; 0x190
     ccc:	cmp.w	r1, #400	; 0x190
     cd0:	bcc.n	d5a <loop+0x8c6>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     cd2:	sub.w	r3, r0, #800	; 0x320
     cd6:	cmp	r3, #223	; 0xdf
     cd8:	bhi.w	720 <loop+0x28c>
        max_ppqn = 12;
     cdc:	movs	r3, #12
     cde:	str	r3, [r2, #32]
     ce0:	b.n	720 <loop+0x28c>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     ce2:	sub.w	r1, r0, #400	; 0x190
     ce6:	cmp.w	r1, #400	; 0x190
     cea:	bcc.n	d4c <loop+0x8b8>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     cec:	sub.w	r3, r0, #800	; 0x320
     cf0:	cmp	r3, #223	; 0xdf
     cf2:	bhi.w	7a8 <loop+0x314>
        max_ppqn = 12;
     cf6:	movs	r3, #12
     cf8:	str	r3, [r2, #32]
     cfa:	b.n	7a8 <loop+0x314>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     cfc:	sub.w	r1, r0, #400	; 0x190
     d00:	cmp.w	r1, #400	; 0x190
     d04:	bcc.n	d3e <loop+0x8aa>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     d06:	sub.w	r3, r0, #800	; 0x320
     d0a:	cmp	r3, #223	; 0xdf
     d0c:	bhi.w	740 <loop+0x2ac>
        max_ppqn = 12;
     d10:	movs	r3, #12
     d12:	str	r3, [r2, #32]
     d14:	b.n	740 <loop+0x2ac>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     d16:	sub.w	r1, r0, #400	; 0x190
     d1a:	cmp.w	r1, #400	; 0x190
     d1e:	bcc.n	d30 <loop+0x89c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     d20:	sub.w	r3, r0, #800	; 0x320
     d24:	cmp	r3, #223	; 0xdf
     d26:	bhi.w	6fc <loop+0x268>
        max_ppqn = 12;
     d2a:	movs	r3, #12
     d2c:	str	r3, [r2, #32]
     d2e:	b.n	6fc <loop+0x268>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
     d30:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     d32:	movs	r5, #8

        if (ppqn >= 8) {
     d34:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     d36:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     d38:	ble.w	6fc <loop+0x268>
     d3c:	b.n	c0a <loop+0x776>
     d3e:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     d40:	movs	r5, #8

        if (ppqn >= 8) {
     d42:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     d44:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     d46:	ble.w	740 <loop+0x2ac>
     d4a:	b.n	ba4 <loop+0x710>
     d4c:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     d4e:	movs	r5, #8

        if (ppqn >= 8) {
     d50:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     d52:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     d54:	ble.w	7a8 <loop+0x314>
     d58:	b.n	be8 <loop+0x754>
     d5a:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     d5c:	movs	r5, #8

        if (ppqn >= 8) {
     d5e:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     d60:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     d62:	ble.w	720 <loop+0x28c>
     d66:	b.n	bc6 <loop+0x732>
      } else if (currentMode == VELOCITY) {
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
        m_sequence.controlLength(m_value, m_id);
     d68:	ldr	r5, [r4, #16]
     d6a:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     d6c:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     d6e:	movw	r6, #1022	; 0x3fe
     d72:	rsb	r3, r2, #1
     d76:	cmp	r3, r6
     d78:	bgt.w	123a <loop+0xda6>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     d7c:	rsb	r3, r2, #2
     d80:	mul.w	r3, r0, r3
     d84:	cmp	r3, #0
     d86:	it	lt
     d88:	addwlt	r3, r3, #1023	; 0x3ff
     d8c:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     d90:	add.w	r3, r1, #18
     d94:	str.w	r2, [r5, r3, lsl #2]
     d98:	b.n	740 <loop+0x2ac>
     d9a:	ldr	r5, [r4, #16]
     d9c:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     d9e:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     da0:	movw	r6, #1022	; 0x3fe
     da4:	rsb	r3, r2, #1
     da8:	cmp	r3, r6
     daa:	bgt.w	127c <loop+0xde8>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     dae:	rsb	r3, r2, #2
     db2:	mul.w	r3, r0, r3
     db6:	cmp	r3, #0
     db8:	it	lt
     dba:	addwlt	r3, r3, #1023	; 0x3ff
     dbe:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     dc2:	add.w	r3, r1, #18
     dc6:	str.w	r2, [r5, r3, lsl #2]
     dca:	b.n	6fc <loop+0x268>
     dcc:	ldr	r5, [r4, #16]
     dce:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     dd0:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     dd2:	movw	r6, #1022	; 0x3fe
     dd6:	rsb	r3, r2, #1
     dda:	cmp	r3, r6
     ddc:	bgt.w	1250 <loop+0xdbc>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     de0:	rsb	r3, r2, #2
     de4:	mul.w	r3, r0, r3
     de8:	cmp	r3, #0
     dea:	it	lt
     dec:	addwlt	r3, r3, #1023	; 0x3ff
     df0:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     df4:	add.w	r3, r1, #18
     df8:	str.w	r2, [r5, r3, lsl #2]
     dfc:	b.n	720 <loop+0x28c>
     dfe:	ldr	r5, [r4, #16]
     e00:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     e02:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     e04:	movw	r6, #1022	; 0x3fe
     e08:	rsb	r3, r2, #1
     e0c:	cmp	r3, r6
     e0e:	bgt.w	1266 <loop+0xdd2>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     e12:	rsb	r3, r2, #2
     e16:	mul.w	r3, r0, r3
     e1a:	cmp	r3, #0
     e1c:	it	lt
     e1e:	addwlt	r3, r3, #1023	; 0x3ff
     e22:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     e26:	add.w	r3, r1, #18
     e2a:	str.w	r2, [r5, r3, lsl #2]
     e2e:	b.n	7a8 <loop+0x314>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     e30:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e34:	ldrb.w	sl, [r9]
     e38:	mov	r0, sl
     e3a:	bl	22f8 <digitalRead>
     e3e:	clz	r1, r0
     e42:	lsrs	r1, r1, #5
     e44:	mov	r0, sl
     e46:	bl	22ec <digitalWrite>
      
      if (currentMode == GLOBAL) {
     e4a:	ldr	r3, [pc, #264]	; (f54 <loop+0xac0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e4c:	ldr.w	r2, [r8]
     e50:	str	r2, [sp, #76]	; 0x4c
     e52:	ldrb.w	sl, [r3]
	return ret;
     e56:	ldr	r2, [sp, #76]	; 0x4c
      blinking = true;
      blinkingCounter = times;
     e58:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e5c:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     e60:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e64:	strb.w	fp, [r9, #16]
     e68:	cmp.w	sl, #0
     e6c:	beq.w	12e2 <loop+0xe4e>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     e70:	cmp.w	sl, #1
     e74:	beq.w	17b8 <loop+0x1324>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     e78:	cmp.w	sl, #2
     e7c:	beq.w	192c <loop+0x1498>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     e80:	cmp.w	sl, #3
     e84:	beq.w	1504 <loop+0x1070>
     e88:	ldr	r2, [r7, #12]
     e8a:	b.w	52a <loop+0x96>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     e8e:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e92:	ldrb.w	sl, [r9]
     e96:	mov	r0, sl
     e98:	bl	22f8 <digitalRead>
     e9c:	clz	r1, r0
     ea0:	lsrs	r1, r1, #5
     ea2:	mov	r0, sl
     ea4:	bl	22ec <digitalWrite>
      
      if (currentMode == GLOBAL) {
     ea8:	ldr	r3, [pc, #168]	; (f54 <loop+0xac0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eaa:	ldr.w	r2, [r8]
     eae:	str	r2, [sp, #156]	; 0x9c
     eb0:	ldrb.w	sl, [r3]
	return ret;
     eb4:	ldr	r2, [sp, #156]	; 0x9c
      blinking = true;
      blinkingCounter = times;
     eb6:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     eba:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     ebe:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ec2:	strb.w	fp, [r9, #16]
     ec6:	cmp.w	sl, #0
     eca:	beq.w	1326 <loop+0xe92>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     ece:	cmp.w	sl, #1
     ed2:	beq.w	1664 <loop+0x11d0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     ed6:	cmp.w	sl, #2
     eda:	beq.w	188c <loop+0x13f8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     ede:	cmp.w	sl, #3
     ee2:	beq.w	1588 <loop+0x10f4>
     ee6:	ldr	r2, [r7, #12]
     ee8:	b.w	632 <loop+0x19e>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     eec:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ef0:	ldrb.w	sl, [r9]
     ef4:	mov	r0, sl
     ef6:	bl	22f8 <digitalRead>
     efa:	clz	r1, r0
     efe:	lsrs	r1, r1, #5
     f00:	mov	r0, sl
     f02:	bl	22ec <digitalWrite>
      
      if (currentMode == GLOBAL) {
     f06:	ldr	r3, [pc, #76]	; (f54 <loop+0xac0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f08:	ldr.w	r2, [r8]
     f0c:	str	r2, [sp, #56]	; 0x38
     f0e:	ldrb.w	sl, [r3]
	return ret;
     f12:	ldr	r2, [sp, #56]	; 0x38
      blinking = true;
      blinkingCounter = times;
     f14:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     f18:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     f1c:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     f20:	strb.w	fp, [r9, #16]
     f24:	cmp.w	sl, #0
     f28:	beq.w	13f2 <loop+0xf5e>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     f2c:	cmp.w	sl, #1
     f30:	beq.w	1730 <loop+0x129c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     f34:	cmp.w	sl, #2
     f38:	beq.w	1974 <loop+0x14e0>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     f3c:	cmp.w	sl, #3
     f40:	beq.w	1546 <loop+0x10b2>
     f44:	ldr	r2, [r7, #12]
     f46:	b.w	4e8 <loop+0x54>
     f4a:	nop
     f4c:	.word	0x1fff1738
     f50:	.word	0x1fff1838
     f54:	.word	0x1fff165c
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     f58:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     f5c:	ldrb.w	sl, [r9]
     f60:	mov	r0, sl
     f62:	bl	22f8 <digitalRead>
     f66:	clz	r1, r0
     f6a:	lsrs	r1, r1, #5
     f6c:	mov	r0, sl
     f6e:	bl	22ec <digitalWrite>
      
      if (currentMode == GLOBAL) {
     f72:	ldr	r3, [pc, #852]	; (12c8 <loop+0xe34>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f74:	ldr.w	r2, [r8]
     f78:	str	r2, [sp, #136]	; 0x88
     f7a:	ldrb.w	sl, [r3]
	return ret;
     f7e:	ldr	r2, [sp, #136]	; 0x88
      blinking = true;
      blinkingCounter = times;
     f80:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     f84:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     f88:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     f8c:	strb.w	fp, [r9, #16]
     f90:	cmp.w	sl, #0
     f94:	beq.w	1436 <loop+0xfa2>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     f98:	cmp.w	sl, #1
     f9c:	beq.w	1774 <loop+0x12e0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     fa0:	cmp.w	sl, #2
     fa4:	beq.w	1844 <loop+0x13b0>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     fa8:	cmp.w	sl, #3
     fac:	beq.w	14c2 <loop+0x102e>
     fb0:	ldr	r2, [r7, #12]
     fb2:	b.w	5f0 <loop+0x15c>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     fb6:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     fba:	ldrb.w	sl, [r9]
     fbe:	mov	r0, sl
     fc0:	bl	22f8 <digitalRead>
     fc4:	clz	r1, r0
     fc8:	lsrs	r1, r1, #5
     fca:	mov	r0, sl
     fcc:	bl	22ec <digitalWrite>
      
      if (currentMode == GLOBAL) {
     fd0:	ldr	r3, [pc, #756]	; (12c8 <loop+0xe34>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     fd2:	ldr.w	r2, [r8]
     fd6:	str	r2, [sp, #116]	; 0x74
     fd8:	ldrb.w	sl, [r3]
	return ret;
     fdc:	ldr	r2, [sp, #116]	; 0x74
      blinking = true;
      blinkingCounter = times;
     fde:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     fe2:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     fe6:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     fea:	strb.w	fp, [r9, #16]
     fee:	cmp.w	sl, #0
     ff2:	beq.w	136a <loop+0xed6>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     ff6:	cmp.w	sl, #1
     ffa:	beq.w	16a8 <loop+0x1214>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     ffe:	cmp.w	sl, #2
    1002:	beq.w	17fc <loop+0x1368>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1006:	cmp.w	sl, #3
    100a:	beq.w	1622 <loop+0x118e>
    100e:	ldr	r2, [r7, #12]
    1010:	b.w	5ae <loop+0x11a>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
    1014:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1018:	ldrb.w	sl, [r9]
    101c:	mov	r0, sl
    101e:	bl	22f8 <digitalRead>
    1022:	clz	r1, r0
    1026:	lsrs	r1, r1, #5
    1028:	mov	r0, sl
    102a:	bl	22ec <digitalWrite>
      
      if (currentMode == GLOBAL) {
    102e:	ldr	r3, [pc, #664]	; (12c8 <loop+0xe34>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1030:	ldr.w	r2, [r8]
    1034:	str	r2, [sp, #96]	; 0x60
    1036:	ldrb.w	sl, [r3]
	return ret;
    103a:	ldr	r2, [sp, #96]	; 0x60
      blinking = true;
      blinkingCounter = times;
    103c:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1040:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1044:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1048:	strb.w	fp, [r9, #16]
    104c:	cmp.w	sl, #0
    1050:	beq.w	13ae <loop+0xf1a>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1054:	cmp.w	sl, #1
    1058:	beq.w	16ec <loop+0x1258>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    105c:	cmp.w	sl, #2
    1060:	beq.w	18e4 <loop+0x1450>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1064:	cmp.w	sl, #3
    1068:	beq.w	15e0 <loop+0x114c>
    106c:	ldr	r2, [r7, #12]
    106e:	b.w	56c <loop+0xd8>
      notes[id] = newValue;
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    1072:	ldr	r3, [r4, #12]
    1074:	ldr	r1, [r4, #16]
    1076:	add.w	r2, r3, #14
    107a:	subs.w	r3, r0, r0, lsl #6
    107e:	it	mi
    1080:	addwmi	r3, r3, #1023	; 0x3ff
    1084:	asrs	r3, r3, #10
    1086:	adds	r3, #127	; 0x7f
    1088:	str.w	r3, [r1, r2, lsl #2]
    108c:	b.w	740 <loop+0x2ac>
    1090:	ldr	r3, [r4, #12]
    1092:	ldr	r1, [r4, #16]
    1094:	add.w	r2, r3, #14
    1098:	subs.w	r3, r0, r0, lsl #6
    109c:	it	mi
    109e:	addwmi	r3, r3, #1023	; 0x3ff
    10a2:	asrs	r3, r3, #10
    10a4:	adds	r3, #127	; 0x7f
    10a6:	str.w	r3, [r1, r2, lsl #2]
    10aa:	b.w	720 <loop+0x28c>
    10ae:	ldr	r3, [r4, #12]
    10b0:	ldr	r1, [r4, #16]
    10b2:	add.w	r2, r3, #14
    10b6:	subs.w	r3, r0, r0, lsl #6
    10ba:	it	mi
    10bc:	addwmi	r3, r3, #1023	; 0x3ff
    10c0:	asrs	r3, r3, #10
    10c2:	adds	r3, #127	; 0x7f
    10c4:	str.w	r3, [r1, r2, lsl #2]
    10c8:	b.w	6fc <loop+0x268>
    10cc:	ldr	r3, [r4, #12]
    10ce:	ldr	r1, [r4, #16]
    10d0:	add.w	r2, r3, #14
    10d4:	subs.w	r3, r0, r0, lsl #6
    10d8:	it	mi
    10da:	addwmi	r3, r3, #1023	; 0x3ff
    10de:	asrs	r3, r3, #10
    10e0:	adds	r3, #127	; 0x7f
    10e2:	str.w	r3, [r1, r2, lsl #2]
    10e6:	b.w	7a8 <loop+0x314>

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
        m_led.toggle();
    10ea:	ldr	r3, [r7, #24]
    10ec:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    10f0:	clz	r1, r1
    10f4:	lsrs	r1, r1, #5
    10f6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    10f8:	uxtb	r0, r0
    10fa:	bl	22ec <digitalWrite>
    10fe:	movs	r1, #4
    1100:	ldr	r0, [pc, #456]	; (12cc <loop+0xe38>)
    1102:	bl	1cdc <usb_serial_write>
    1106:	ldr	r0, [pc, #456]	; (12d0 <loop+0xe3c>)
    1108:	bl	3850 <Print::println()>
    110c:	b.n	ee6 <loop+0xa52>
    110e:	ldr	r3, [r7, #24]
    1110:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1114:	clz	r1, r1
    1118:	lsrs	r1, r1, #5
    111a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    111c:	uxtb	r0, r0
    111e:	bl	22ec <digitalWrite>
    1122:	movs	r1, #4
    1124:	ldr	r0, [pc, #420]	; (12cc <loop+0xe38>)
    1126:	bl	1cdc <usb_serial_write>
    112a:	ldr	r0, [pc, #420]	; (12d0 <loop+0xe3c>)
    112c:	bl	3850 <Print::println()>
    1130:	b.n	f44 <loop+0xab0>
    1132:	ldr	r3, [r7, #24]
    1134:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1138:	clz	r1, r1
    113c:	lsrs	r1, r1, #5
    113e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1140:	uxtb	r0, r0
    1142:	bl	22ec <digitalWrite>
    1146:	movs	r1, #4
    1148:	ldr	r0, [pc, #384]	; (12cc <loop+0xe38>)
    114a:	bl	1cdc <usb_serial_write>
    114e:	ldr	r0, [pc, #384]	; (12d0 <loop+0xe3c>)
    1150:	bl	3850 <Print::println()>
    1154:	b.n	e88 <loop+0x9f4>
    1156:	ldr	r3, [r7, #24]
    1158:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    115c:	clz	r1, r1
    1160:	lsrs	r1, r1, #5
    1162:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1164:	uxtb	r0, r0
    1166:	bl	22ec <digitalWrite>
    116a:	movs	r1, #4
    116c:	ldr	r0, [pc, #348]	; (12cc <loop+0xe38>)
    116e:	bl	1cdc <usb_serial_write>
    1172:	ldr	r0, [pc, #348]	; (12d0 <loop+0xe3c>)
    1174:	bl	3850 <Print::println()>
    1178:	b.n	fb0 <loop+0xb1c>
    117a:	ldr	r3, [r7, #24]
    117c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1180:	clz	r1, r1
    1184:	lsrs	r1, r1, #5
    1186:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1188:	uxtb	r0, r0
    118a:	bl	22ec <digitalWrite>
    118e:	movs	r1, #4
    1190:	ldr	r0, [pc, #312]	; (12cc <loop+0xe38>)
    1192:	bl	1cdc <usb_serial_write>
    1196:	ldr	r0, [pc, #312]	; (12d0 <loop+0xe3c>)
    1198:	bl	3850 <Print::println()>
    119c:	b.n	100e <loop+0xb7a>
    119e:	ldr	r3, [r7, #24]
    11a0:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    11a4:	clz	r1, r1
    11a8:	lsrs	r1, r1, #5
    11aa:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    11ac:	uxtb	r0, r0
    11ae:	bl	22ec <digitalWrite>
    11b2:	movs	r1, #4
    11b4:	ldr	r0, [pc, #276]	; (12cc <loop+0xe38>)
    11b6:	bl	1cdc <usb_serial_write>
    11ba:	ldr	r0, [pc, #276]	; (12d0 <loop+0xe3c>)
    11bc:	bl	3850 <Print::println()>
    11c0:	b.n	106c <loop+0xbd8>
      notesLengths[id] = newValue;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      notes[id] = newValue;
    11c2:	sub.w	r3, r0, r0, lsl #2
    11c6:	ldr	r2, [r4, #12]
    11c8:	ldr	r1, [r4, #16]
    11ca:	lsls	r3, r3, #2
    11cc:	it	mi
    11ce:	addwmi	r3, r3, #1023	; 0x3ff
    11d2:	adds	r2, #10
    11d4:	asrs	r3, r3, #10
    11d6:	adds	r3, #51	; 0x33
    11d8:	str.w	r3, [r1, r2, lsl #2]
    11dc:	b.w	720 <loop+0x28c>
    11e0:	sub.w	r3, r0, r0, lsl #2
    11e4:	ldr	r2, [r4, #12]
    11e6:	ldr	r1, [r4, #16]
    11e8:	lsls	r3, r3, #2
    11ea:	it	mi
    11ec:	addwmi	r3, r3, #1023	; 0x3ff
    11f0:	adds	r2, #10
    11f2:	asrs	r3, r3, #10
    11f4:	adds	r3, #51	; 0x33
    11f6:	str.w	r3, [r1, r2, lsl #2]
    11fa:	b.w	6fc <loop+0x268>
    11fe:	sub.w	r3, r0, r0, lsl #2
    1202:	ldr	r2, [r4, #12]
    1204:	ldr	r1, [r4, #16]
    1206:	lsls	r3, r3, #2
    1208:	it	mi
    120a:	addwmi	r3, r3, #1023	; 0x3ff
    120e:	adds	r2, #10
    1210:	asrs	r3, r3, #10
    1212:	adds	r3, #51	; 0x33
    1214:	str.w	r3, [r1, r2, lsl #2]
    1218:	b.w	7a8 <loop+0x314>
    121c:	sub.w	r3, r0, r0, lsl #2
    1220:	ldr	r2, [r4, #12]
    1222:	ldr	r1, [r4, #16]
    1224:	lsls	r3, r3, #2
    1226:	it	mi
    1228:	addwmi	r3, r3, #1023	; 0x3ff
    122c:	adds	r2, #10
    122e:	asrs	r3, r3, #10
    1230:	adds	r3, #51	; 0x33
    1232:	str.w	r3, [r1, r2, lsl #2]
    1236:	b.w	740 <loop+0x2ac>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    123a:	ldr	r6, [pc, #152]	; (12d4 <loop+0xe40>)
    123c:	mul.w	r3, r3, r0
    1240:	smull	r7, r6, r6, r3
    1244:	add	r6, r3
    1246:	asrs	r3, r3, #31
    1248:	rsb	r3, r3, r6, asr #9
    124c:	add	r2, r3
    124e:	b.n	d90 <loop+0x8fc>
    1250:	ldr	r6, [pc, #128]	; (12d4 <loop+0xe40>)
    1252:	mul.w	r3, r3, r0
    1256:	smull	r7, r6, r6, r3
    125a:	add	r6, r3
    125c:	asrs	r3, r3, #31
    125e:	rsb	r3, r3, r6, asr #9
    1262:	add	r2, r3
    1264:	b.n	df4 <loop+0x960>
    1266:	ldr	r6, [pc, #108]	; (12d4 <loop+0xe40>)
    1268:	mul.w	r3, r3, r0
    126c:	smull	r7, r6, r6, r3
    1270:	add	r6, r3
    1272:	asrs	r3, r3, #31
    1274:	rsb	r3, r3, r6, asr #9
    1278:	add	r2, r3
    127a:	b.n	e26 <loop+0x992>
    127c:	ldr	r6, [pc, #84]	; (12d4 <loop+0xe40>)
    127e:	mul.w	r3, r3, r0
    1282:	smull	r7, r6, r6, r3
    1286:	add	r6, r3
    1288:	asrs	r3, r3, #31
    128a:	rsb	r3, r3, r6, asr #9
    128e:	add	r2, r3
    1290:	b.n	dc2 <loop+0x92e>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1292:	add.w	r6, r3, #10
    1296:	adds	r3, #14
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1298:	ldr.w	r2, [r5, r6, lsl #2]
    129c:	ldr.w	r3, [r5, r3, lsl #2]
    12a0:	lsls	r2, r2, #16
    12a2:	lsls	r0, r3, #24
    12a4:	and.w	r3, r0, #2130706432	; 0x7f000000
    12a8:	and.w	r0, r2, #8323072	; 0x7f0000
    12ac:	orrs	r0, r3
    12ae:	orr.w	r0, r0, #40704	; 0x9f00
    12b2:	orr.w	r0, r0, #9
    12b6:	bl	2578 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    12ba:	bl	2614 <usb_midi_flush_output>
      activeNote = notes[step];
    12be:	ldr.w	r2, [r5, r6, lsl #2]
    12c2:	ldr	r3, [r5, #8]
    12c4:	str	r2, [r5, #36]	; 0x24
    12c6:	b.n	ca6 <loop+0x812>
    12c8:	.word	0x1fff165c
    12cc:	.word	0x00004c6c
    12d0:	.word	0x1fff0c60
    12d4:	.word	0x80200803
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    12d8:	ldr	r0, [pc, #752]	; (15cc <loop+0x1138>)
    12da:	bl	2578 <usb_midi_write_packed>
    12de:	ldr	r3, [r5, #28]
    12e0:	b.n	c46 <loop+0x7b2>
    12e2:	movs	r1, #5
    12e4:	ldr	r0, [pc, #744]	; (15d0 <loop+0x113c>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    12e6:	strb.w	fp, [r3]
    12ea:	bl	1cdc <usb_serial_write>
    12ee:	ldr	r0, [pc, #740]	; (15d4 <loop+0x1140>)
    12f0:	bl	3850 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    12f4:	ldr	r3, [r7, #28]
    12f6:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12f8:	ldrb.w	r9, [r6]
    12fc:	mov	r0, r9
    12fe:	bl	22f8 <digitalRead>
    1302:	clz	r1, r0
    1306:	lsrs	r1, r1, #5
    1308:	mov	r0, r9
    130a:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    130e:	ldr.w	r3, [r8]
    1312:	str	r3, [sp, #80]	; 0x50
	return ret;
    1314:	ldr	r3, [sp, #80]	; 0x50
    1316:	ldr	r2, [r7, #12]
      blinking = true;
    1318:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    131c:	movs	r1, #3
    131e:	str	r1, [r6, #20]
      lastBlink = millis();  
    1320:	str	r3, [r6, #8]
    1322:	b.w	52a <loop+0x96>
    1326:	movs	r1, #5
    1328:	ldr	r0, [pc, #676]	; (15d0 <loop+0x113c>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    132a:	strb.w	fp, [r3]
    132e:	bl	1cdc <usb_serial_write>
    1332:	ldr	r0, [pc, #672]	; (15d4 <loop+0x1140>)
    1334:	bl	3850 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1338:	ldr	r3, [r7, #28]
    133a:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    133c:	ldrb.w	r9, [r6]
    1340:	mov	r0, r9
    1342:	bl	22f8 <digitalRead>
    1346:	clz	r1, r0
    134a:	lsrs	r1, r1, #5
    134c:	mov	r0, r9
    134e:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1352:	ldr.w	r3, [r8]
    1356:	str	r3, [sp, #160]	; 0xa0
	return ret;
    1358:	ldr	r3, [sp, #160]	; 0xa0
    135a:	ldr	r2, [r7, #12]
      blinking = true;
    135c:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    1360:	movs	r1, #3
    1362:	str	r1, [r6, #20]
      lastBlink = millis();  
    1364:	str	r3, [r6, #8]
    1366:	b.w	632 <loop+0x19e>
    136a:	movs	r1, #5
    136c:	ldr	r0, [pc, #608]	; (15d0 <loop+0x113c>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    136e:	strb.w	fp, [r3]
    1372:	bl	1cdc <usb_serial_write>
    1376:	ldr	r0, [pc, #604]	; (15d4 <loop+0x1140>)
    1378:	bl	3850 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    137c:	ldr	r3, [r7, #28]
    137e:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1380:	ldrb.w	r9, [r6]
    1384:	mov	r0, r9
    1386:	bl	22f8 <digitalRead>
    138a:	clz	r1, r0
    138e:	lsrs	r1, r1, #5
    1390:	mov	r0, r9
    1392:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1396:	ldr.w	r3, [r8]
    139a:	str	r3, [sp, #120]	; 0x78
	return ret;
    139c:	ldr	r3, [sp, #120]	; 0x78
    139e:	ldr	r2, [r7, #12]
      blinking = true;
    13a0:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    13a4:	movs	r1, #3
    13a6:	str	r1, [r6, #20]
      lastBlink = millis();  
    13a8:	str	r3, [r6, #8]
    13aa:	b.w	5ae <loop+0x11a>
    13ae:	movs	r1, #5
    13b0:	ldr	r0, [pc, #540]	; (15d0 <loop+0x113c>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    13b2:	strb.w	fp, [r3]
    13b6:	bl	1cdc <usb_serial_write>
    13ba:	ldr	r0, [pc, #536]	; (15d4 <loop+0x1140>)
    13bc:	bl	3850 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    13c0:	ldr	r3, [r7, #28]
    13c2:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    13c4:	ldrb.w	r9, [r5]
    13c8:	mov	r0, r9
    13ca:	bl	22f8 <digitalRead>
    13ce:	clz	r1, r0
    13d2:	lsrs	r1, r1, #5
    13d4:	mov	r0, r9
    13d6:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13da:	ldr.w	r3, [r8]
    13de:	str	r3, [sp, #100]	; 0x64
	return ret;
    13e0:	ldr	r3, [sp, #100]	; 0x64
    13e2:	ldr	r2, [r7, #12]
      blinking = true;
    13e4:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    13e8:	movs	r1, #3
    13ea:	str	r1, [r5, #20]
      lastBlink = millis();  
    13ec:	str	r3, [r5, #8]
    13ee:	b.w	56c <loop+0xd8>
    13f2:	movs	r1, #5
    13f4:	ldr	r0, [pc, #472]	; (15d0 <loop+0x113c>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    13f6:	strb.w	fp, [r3]
    13fa:	bl	1cdc <usb_serial_write>
    13fe:	ldr	r0, [pc, #468]	; (15d4 <loop+0x1140>)
    1400:	bl	3850 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1404:	ldr	r3, [r7, #28]
    1406:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1408:	ldrb.w	r9, [r5]
    140c:	mov	r0, r9
    140e:	bl	22f8 <digitalRead>
    1412:	clz	r1, r0
    1416:	lsrs	r1, r1, #5
    1418:	mov	r0, r9
    141a:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    141e:	ldr.w	r3, [r8]
    1422:	str	r3, [sp, #60]	; 0x3c
	return ret;
    1424:	ldr	r3, [sp, #60]	; 0x3c
    1426:	ldr	r2, [r7, #12]
      blinking = true;
    1428:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    142c:	movs	r1, #3
    142e:	str	r1, [r5, #20]
      lastBlink = millis();  
    1430:	str	r3, [r5, #8]
    1432:	b.w	4e8 <loop+0x54>
    1436:	movs	r1, #5
    1438:	ldr	r0, [pc, #404]	; (15d0 <loop+0x113c>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    143a:	strb.w	fp, [r3]
    143e:	bl	1cdc <usb_serial_write>
    1442:	ldr	r0, [pc, #400]	; (15d4 <loop+0x1140>)
    1444:	bl	3850 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1448:	ldr	r3, [r7, #28]
    144a:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    144c:	ldrb.w	r9, [r5]
    1450:	mov	r0, r9
    1452:	bl	22f8 <digitalRead>
    1456:	clz	r1, r0
    145a:	lsrs	r1, r1, #5
    145c:	mov	r0, r9
    145e:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1462:	ldr.w	r3, [r8]
    1466:	str	r3, [sp, #140]	; 0x8c
	return ret;
    1468:	ldr	r3, [sp, #140]	; 0x8c
    146a:	ldr	r2, [r7, #12]
      blinking = true;
    146c:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    1470:	movs	r1, #3
    1472:	str	r1, [r5, #20]
      lastBlink = millis();  
    1474:	str	r3, [r5, #8]
    1476:	b.w	5f0 <loop+0x15c>
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
    147a:	ldr	r3, [r6, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    147c:	ldr	r4, [pc, #344]	; (15d8 <loop+0x1144>)
    147e:	adds	r3, #22
    1480:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1484:	ldrb.w	r8, [r7]
    1488:	mov	r0, r8
    148a:	bl	22f8 <digitalRead>
    148e:	clz	r1, r0
    1492:	lsrs	r1, r1, #5
    1494:	mov	r0, r8
    1496:	bl	22ec <digitalWrite>
    149a:	ldr	r2, [r4, #0]

        if (m_steps[m_currentStep].m_state) {
    149c:	ldr	r3, [r6, #8]
    149e:	str	r2, [sp, #0]
	return ret;
    14a0:	ldr	r1, [sp, #0]
    14a2:	ldrb	r2, [r6, r3]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    14a4:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14a6:	movs	r0, #1
      blinkingCounter = times;
    14a8:	movs	r1, #0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14aa:	strb	r0, [r7, #16]
      blinkingCounter = times;
    14ac:	str	r1, [r7, #20]
    14ae:	cmp	r2, #0
    14b0:	bne.w	19bc <loop+0x1528>
          playStep(m_currentStep);
        }

        m_currentStep++;
    14b4:	adds	r3, #1

        if (m_currentStep > 3) {
    14b6:	cmp	r3, #3
          m_currentStep = 0;
    14b8:	it	gt
    14ba:	movgt	r3, #0
    14bc:	str	r3, [r5, #8]
    14be:	b.w	c5a <loop+0x7c6>
    14c2:	movs	r1, #6
    14c4:	ldr	r0, [pc, #276]	; (15dc <loop+0x1148>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    14c6:	strb	r5, [r3, #0]
    14c8:	bl	1cdc <usb_serial_write>
    14cc:	ldr	r0, [pc, #260]	; (15d4 <loop+0x1140>)
    14ce:	bl	3850 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    14d2:	ldr	r3, [r7, #28]
    14d4:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14d6:	ldrb.w	r9, [r5]
    14da:	mov	r0, r9
    14dc:	bl	22f8 <digitalRead>
    14e0:	clz	r1, r0
    14e4:	lsrs	r1, r1, #5
    14e6:	mov	r0, r9
    14e8:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14ec:	ldr.w	r3, [r8]
    14f0:	str	r3, [sp, #152]	; 0x98
	return ret;
    14f2:	ldr	r3, [sp, #152]	; 0x98
    14f4:	ldr	r2, [r7, #12]
      blinking = true;
    14f6:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    14fa:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    14fe:	str	r3, [r5, #8]
    1500:	b.w	5f0 <loop+0x15c>
    1504:	movs	r1, #6
    1506:	ldr	r0, [pc, #212]	; (15dc <loop+0x1148>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1508:	strb	r6, [r3, #0]
    150a:	bl	1cdc <usb_serial_write>
    150e:	ldr	r0, [pc, #196]	; (15d4 <loop+0x1140>)
    1510:	bl	3850 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    1514:	ldr	r3, [r7, #28]
    1516:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1518:	ldrb.w	r9, [r6]
    151c:	mov	r0, r9
    151e:	bl	22f8 <digitalRead>
    1522:	clz	r1, r0
    1526:	lsrs	r1, r1, #5
    1528:	mov	r0, r9
    152a:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    152e:	ldr.w	r3, [r8]
    1532:	str	r3, [sp, #92]	; 0x5c
	return ret;
    1534:	ldr	r3, [sp, #92]	; 0x5c
    1536:	ldr	r2, [r7, #12]
      blinking = true;
    1538:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    153c:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1540:	str	r3, [r6, #8]
    1542:	b.w	52a <loop+0x96>
    1546:	movs	r1, #6
    1548:	ldr	r0, [pc, #144]	; (15dc <loop+0x1148>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    154a:	strb	r5, [r3, #0]
    154c:	bl	1cdc <usb_serial_write>
    1550:	ldr	r0, [pc, #128]	; (15d4 <loop+0x1140>)
    1552:	bl	3850 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    1556:	ldr	r3, [r7, #28]
    1558:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    155a:	ldrb.w	r9, [r5]
    155e:	mov	r0, r9
    1560:	bl	22f8 <digitalRead>
    1564:	clz	r1, r0
    1568:	lsrs	r1, r1, #5
    156a:	mov	r0, r9
    156c:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1570:	ldr.w	r3, [r8]
    1574:	str	r3, [sp, #72]	; 0x48
	return ret;
    1576:	ldr	r3, [sp, #72]	; 0x48
    1578:	ldr	r2, [r7, #12]
      blinking = true;
    157a:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    157e:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    1582:	str	r3, [r5, #8]
    1584:	b.w	4e8 <loop+0x54>
    1588:	movs	r1, #6
    158a:	ldr	r0, [pc, #80]	; (15dc <loop+0x1148>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    158c:	strb	r6, [r3, #0]
    158e:	bl	1cdc <usb_serial_write>
    1592:	ldr	r0, [pc, #64]	; (15d4 <loop+0x1140>)
    1594:	bl	3850 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    1598:	ldr	r3, [r7, #28]
    159a:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    159c:	ldrb.w	r9, [r6]
    15a0:	mov	r0, r9
    15a2:	bl	22f8 <digitalRead>
    15a6:	clz	r1, r0
    15aa:	lsrs	r1, r1, #5
    15ac:	mov	r0, r9
    15ae:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15b2:	ldr.w	r3, [r8]
    15b6:	str	r3, [sp, #172]	; 0xac
	return ret;
    15b8:	ldr	r3, [sp, #172]	; 0xac
    15ba:	ldr	r2, [r7, #12]
      blinking = true;
    15bc:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    15c0:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    15c4:	str	r3, [r6, #8]
    15c6:	b.w	632 <loop+0x19e>
    15ca:	nop
    15cc:	.word	0x7f7bbf0b
    15d0:	.word	0x00004c44
    15d4:	.word	0x1fff0c60
    15d8:	.word	0x1fff1838
    15dc:	.word	0x00004c64
    15e0:	movs	r1, #6
    15e2:	ldr	r0, [pc, #752]	; (18d4 <loop+0x1440>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    15e4:	strb	r5, [r3, #0]
    15e6:	bl	1cdc <usb_serial_write>
    15ea:	ldr	r0, [pc, #748]	; (18d8 <loop+0x1444>)
    15ec:	bl	3850 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    15f0:	ldr	r3, [r7, #28]
    15f2:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15f4:	ldrb.w	r9, [r5]
    15f8:	mov	r0, r9
    15fa:	bl	22f8 <digitalRead>
    15fe:	clz	r1, r0
    1602:	lsrs	r1, r1, #5
    1604:	mov	r0, r9
    1606:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    160a:	ldr.w	r3, [r8]
    160e:	str	r3, [sp, #112]	; 0x70
	return ret;
    1610:	ldr	r3, [sp, #112]	; 0x70
    1612:	ldr	r2, [r7, #12]
      blinking = true;
    1614:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    1618:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    161c:	str	r3, [r5, #8]
    161e:	b.w	56c <loop+0xd8>
    1622:	movs	r1, #6
    1624:	ldr	r0, [pc, #684]	; (18d4 <loop+0x1440>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1626:	strb	r6, [r3, #0]
    1628:	bl	1cdc <usb_serial_write>
    162c:	ldr	r0, [pc, #680]	; (18d8 <loop+0x1444>)
    162e:	bl	3850 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    1632:	ldr	r3, [r7, #28]
    1634:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1636:	ldrb.w	r9, [r6]
    163a:	mov	r0, r9
    163c:	bl	22f8 <digitalRead>
    1640:	clz	r1, r0
    1644:	lsrs	r1, r1, #5
    1646:	mov	r0, r9
    1648:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    164c:	ldr.w	r3, [r8]
    1650:	str	r3, [sp, #132]	; 0x84
	return ret;
    1652:	ldr	r3, [sp, #132]	; 0x84
    1654:	ldr	r2, [r7, #12]
      blinking = true;
    1656:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    165a:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    165e:	str	r3, [r6, #8]
    1660:	b.w	5ae <loop+0x11a>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1664:	movs	r2, #2
    1666:	movs	r1, #8
    1668:	ldr	r0, [pc, #624]	; (18dc <loop+0x1448>)
    166a:	strb	r2, [r3, #0]
    166c:	bl	1cdc <usb_serial_write>
    1670:	ldr	r0, [pc, #612]	; (18d8 <loop+0x1444>)
    1672:	bl	3850 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1676:	ldr	r3, [r7, #28]
    1678:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    167a:	ldrb.w	r9, [r6]
    167e:	mov	r0, r9
    1680:	bl	22f8 <digitalRead>
    1684:	clz	r1, r0
    1688:	lsrs	r1, r1, #5
    168a:	mov	r0, r9
    168c:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1690:	ldr.w	r3, [r8]
    1694:	str	r3, [sp, #164]	; 0xa4
	return ret;
    1696:	ldr	r3, [sp, #164]	; 0xa4
    1698:	ldr	r2, [r7, #12]
      blinking = true;
    169a:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    169e:	movs	r1, #3
    16a0:	str	r1, [r6, #20]
      lastBlink = millis();  
    16a2:	str	r3, [r6, #8]
    16a4:	b.w	632 <loop+0x19e>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    16a8:	movs	r2, #2
    16aa:	movs	r1, #8
    16ac:	ldr	r0, [pc, #556]	; (18dc <loop+0x1448>)
    16ae:	strb	r2, [r3, #0]
    16b0:	bl	1cdc <usb_serial_write>
    16b4:	ldr	r0, [pc, #544]	; (18d8 <loop+0x1444>)
    16b6:	bl	3850 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    16ba:	ldr	r3, [r7, #28]
    16bc:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16be:	ldrb.w	r9, [r6]
    16c2:	mov	r0, r9
    16c4:	bl	22f8 <digitalRead>
    16c8:	clz	r1, r0
    16cc:	lsrs	r1, r1, #5
    16ce:	mov	r0, r9
    16d0:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16d4:	ldr.w	r3, [r8]
    16d8:	str	r3, [sp, #124]	; 0x7c
	return ret;
    16da:	ldr	r3, [sp, #124]	; 0x7c
    16dc:	ldr	r2, [r7, #12]
      blinking = true;
    16de:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    16e2:	movs	r1, #3
    16e4:	str	r1, [r6, #20]
      lastBlink = millis();  
    16e6:	str	r3, [r6, #8]
    16e8:	b.w	5ae <loop+0x11a>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    16ec:	movs	r2, #2
    16ee:	movs	r1, #8
    16f0:	ldr	r0, [pc, #488]	; (18dc <loop+0x1448>)
    16f2:	strb	r2, [r3, #0]
    16f4:	bl	1cdc <usb_serial_write>
    16f8:	ldr	r0, [pc, #476]	; (18d8 <loop+0x1444>)
    16fa:	bl	3850 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    16fe:	ldr	r3, [r7, #28]
    1700:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1702:	ldrb.w	r9, [r5]
    1706:	mov	r0, r9
    1708:	bl	22f8 <digitalRead>
    170c:	clz	r1, r0
    1710:	lsrs	r1, r1, #5
    1712:	mov	r0, r9
    1714:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1718:	ldr.w	r3, [r8]
    171c:	str	r3, [sp, #104]	; 0x68
	return ret;
    171e:	ldr	r3, [sp, #104]	; 0x68
    1720:	ldr	r2, [r7, #12]
      blinking = true;
    1722:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1726:	movs	r1, #3
    1728:	str	r1, [r5, #20]
      lastBlink = millis();  
    172a:	str	r3, [r5, #8]
    172c:	b.w	56c <loop+0xd8>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1730:	movs	r2, #2
    1732:	movs	r1, #8
    1734:	ldr	r0, [pc, #420]	; (18dc <loop+0x1448>)
    1736:	strb	r2, [r3, #0]
    1738:	bl	1cdc <usb_serial_write>
    173c:	ldr	r0, [pc, #408]	; (18d8 <loop+0x1444>)
    173e:	bl	3850 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1742:	ldr	r3, [r7, #28]
    1744:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1746:	ldrb.w	r9, [r5]
    174a:	mov	r0, r9
    174c:	bl	22f8 <digitalRead>
    1750:	clz	r1, r0
    1754:	lsrs	r1, r1, #5
    1756:	mov	r0, r9
    1758:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    175c:	ldr.w	r3, [r8]
    1760:	str	r3, [sp, #64]	; 0x40
	return ret;
    1762:	ldr	r3, [sp, #64]	; 0x40
    1764:	ldr	r2, [r7, #12]
      blinking = true;
    1766:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    176a:	movs	r1, #3
    176c:	str	r1, [r5, #20]
      lastBlink = millis();  
    176e:	str	r3, [r5, #8]
    1770:	b.w	4e8 <loop+0x54>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1774:	movs	r2, #2
    1776:	movs	r1, #8
    1778:	ldr	r0, [pc, #352]	; (18dc <loop+0x1448>)
    177a:	strb	r2, [r3, #0]
    177c:	bl	1cdc <usb_serial_write>
    1780:	ldr	r0, [pc, #340]	; (18d8 <loop+0x1444>)
    1782:	bl	3850 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1786:	ldr	r3, [r7, #28]
    1788:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    178a:	ldrb.w	r9, [r5]
    178e:	mov	r0, r9
    1790:	bl	22f8 <digitalRead>
    1794:	clz	r1, r0
    1798:	lsrs	r1, r1, #5
    179a:	mov	r0, r9
    179c:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17a0:	ldr.w	r3, [r8]
    17a4:	str	r3, [sp, #144]	; 0x90
	return ret;
    17a6:	ldr	r3, [sp, #144]	; 0x90
    17a8:	ldr	r2, [r7, #12]
      blinking = true;
    17aa:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    17ae:	movs	r1, #3
    17b0:	str	r1, [r5, #20]
      lastBlink = millis();  
    17b2:	str	r3, [r5, #8]
    17b4:	b.w	5f0 <loop+0x15c>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    17b8:	movs	r2, #2
    17ba:	movs	r1, #8
    17bc:	ldr	r0, [pc, #284]	; (18dc <loop+0x1448>)
    17be:	strb	r2, [r3, #0]
    17c0:	bl	1cdc <usb_serial_write>
    17c4:	ldr	r0, [pc, #272]	; (18d8 <loop+0x1444>)
    17c6:	bl	3850 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    17ca:	ldr	r3, [r7, #28]
    17cc:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17ce:	ldrb.w	r9, [r6]
    17d2:	mov	r0, r9
    17d4:	bl	22f8 <digitalRead>
    17d8:	clz	r1, r0
    17dc:	lsrs	r1, r1, #5
    17de:	mov	r0, r9
    17e0:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17e4:	ldr.w	r3, [r8]
    17e8:	str	r3, [sp, #84]	; 0x54
	return ret;
    17ea:	ldr	r3, [sp, #84]	; 0x54
    17ec:	ldr	r2, [r7, #12]
      blinking = true;
    17ee:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    17f2:	movs	r1, #3
    17f4:	str	r1, [r6, #20]
      lastBlink = millis();  
    17f6:	str	r3, [r6, #8]
    17f8:	b.w	52a <loop+0x96>
    17fc:	movs	r1, #10
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    17fe:	mov.w	r9, #3
    1802:	ldr	r0, [pc, #220]	; (18e0 <loop+0x144c>)
    1804:	strb.w	r9, [r3]
    1808:	bl	1cdc <usb_serial_write>
    180c:	ldr	r0, [pc, #200]	; (18d8 <loop+0x1444>)
    180e:	bl	3850 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1812:	ldr	r3, [r7, #28]
    1814:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1816:	ldrb.w	sl, [r6]
    181a:	mov	r0, sl
    181c:	bl	22f8 <digitalRead>
    1820:	clz	r1, r0
    1824:	lsrs	r1, r1, #5
    1826:	mov	r0, sl
    1828:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    182c:	ldr.w	r3, [r8]
    1830:	str	r3, [sp, #128]	; 0x80
	return ret;
    1832:	ldr	r3, [sp, #128]	; 0x80
    1834:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1836:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    183a:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    183e:	str	r3, [r6, #8]
    1840:	b.w	5ae <loop+0x11a>
    1844:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1846:	mov.w	r9, #3
    184a:	ldr	r0, [pc, #148]	; (18e0 <loop+0x144c>)
    184c:	strb.w	r9, [r3]
    1850:	bl	1cdc <usb_serial_write>
    1854:	ldr	r0, [pc, #128]	; (18d8 <loop+0x1444>)
    1856:	bl	3850 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    185a:	ldr	r3, [r7, #28]
    185c:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    185e:	ldrb.w	sl, [r5]
    1862:	mov	r0, sl
    1864:	bl	22f8 <digitalRead>
    1868:	clz	r1, r0
    186c:	lsrs	r1, r1, #5
    186e:	mov	r0, sl
    1870:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1874:	ldr.w	r3, [r8]
    1878:	str	r3, [sp, #148]	; 0x94
	return ret;
    187a:	ldr	r3, [sp, #148]	; 0x94
    187c:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    187e:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1882:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1886:	str	r3, [r5, #8]
    1888:	b.w	5f0 <loop+0x15c>
    188c:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    188e:	mov.w	r9, #3
    1892:	ldr	r0, [pc, #76]	; (18e0 <loop+0x144c>)
    1894:	strb.w	r9, [r3]
    1898:	bl	1cdc <usb_serial_write>
    189c:	ldr	r0, [pc, #56]	; (18d8 <loop+0x1444>)
    189e:	bl	3850 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    18a2:	ldr	r3, [r7, #28]
    18a4:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18a6:	ldrb.w	sl, [r6]
    18aa:	mov	r0, sl
    18ac:	bl	22f8 <digitalRead>
    18b0:	clz	r1, r0
    18b4:	lsrs	r1, r1, #5
    18b6:	mov	r0, sl
    18b8:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18bc:	ldr.w	r3, [r8]
    18c0:	str	r3, [sp, #168]	; 0xa8
	return ret;
    18c2:	ldr	r3, [sp, #168]	; 0xa8
    18c4:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    18c6:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18ca:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    18ce:	str	r3, [r6, #8]
    18d0:	b.w	632 <loop+0x19e>
    18d4:	.word	0x00004c64
    18d8:	.word	0x1fff0c60
    18dc:	.word	0x00004c4c
    18e0:	.word	0x00004c58
    18e4:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    18e6:	mov.w	r9, #3
    18ea:	ldr	r0, [pc, #264]	; (19f4 <loop+0x1560>)
    18ec:	strb.w	r9, [r3]
    18f0:	bl	1cdc <usb_serial_write>
    18f4:	ldr	r0, [pc, #256]	; (19f8 <loop+0x1564>)
    18f6:	bl	3850 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    18fa:	ldr	r3, [r7, #28]
    18fc:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18fe:	ldrb.w	sl, [r5]
    1902:	mov	r0, sl
    1904:	bl	22f8 <digitalRead>
    1908:	clz	r1, r0
    190c:	lsrs	r1, r1, #5
    190e:	mov	r0, sl
    1910:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1914:	ldr.w	r3, [r8]
    1918:	str	r3, [sp, #108]	; 0x6c
	return ret;
    191a:	ldr	r3, [sp, #108]	; 0x6c
    191c:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    191e:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1922:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1926:	str	r3, [r5, #8]
    1928:	b.w	56c <loop+0xd8>
    192c:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    192e:	mov.w	r9, #3
    1932:	ldr	r0, [pc, #192]	; (19f4 <loop+0x1560>)
    1934:	strb.w	r9, [r3]
    1938:	bl	1cdc <usb_serial_write>
    193c:	ldr	r0, [pc, #184]	; (19f8 <loop+0x1564>)
    193e:	bl	3850 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1942:	ldr	r3, [r7, #28]
    1944:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1946:	ldrb.w	sl, [r6]
    194a:	mov	r0, sl
    194c:	bl	22f8 <digitalRead>
    1950:	clz	r1, r0
    1954:	lsrs	r1, r1, #5
    1956:	mov	r0, sl
    1958:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    195c:	ldr.w	r3, [r8]
    1960:	str	r3, [sp, #88]	; 0x58
	return ret;
    1962:	ldr	r3, [sp, #88]	; 0x58
    1964:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1966:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    196a:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    196e:	str	r3, [r6, #8]
    1970:	b.w	52a <loop+0x96>
    1974:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1976:	mov.w	r9, #3
    197a:	ldr	r0, [pc, #120]	; (19f4 <loop+0x1560>)
    197c:	strb.w	r9, [r3]
    1980:	bl	1cdc <usb_serial_write>
    1984:	ldr	r0, [pc, #112]	; (19f8 <loop+0x1564>)
    1986:	bl	3850 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    198a:	ldr	r3, [r7, #28]
    198c:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    198e:	ldrb.w	sl, [r5]
    1992:	mov	r0, sl
    1994:	bl	22f8 <digitalRead>
    1998:	clz	r1, r0
    199c:	lsrs	r1, r1, #5
    199e:	mov	r0, sl
    19a0:	bl	22ec <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19a4:	ldr.w	r3, [r8]
    19a8:	str	r3, [sp, #68]	; 0x44
	return ret;
    19aa:	ldr	r3, [sp, #68]	; 0x44
    19ac:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    19ae:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    19b2:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    19b6:	str	r3, [r5, #8]
    19b8:	b.w	4e8 <loop+0x54>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    19bc:	add.w	r7, r3, #10
    19c0:	adds	r3, #14
    19c2:	ldr.w	r2, [r6, r7, lsl #2]
    19c6:	ldr.w	r3, [r6, r3, lsl #2]
    19ca:	lsls	r0, r2, #16
    19cc:	lsls	r3, r3, #24
    19ce:	and.w	r3, r3, #2130706432	; 0x7f000000
    19d2:	and.w	r0, r0, #8323072	; 0x7f0000
    19d6:	orrs	r0, r3
    19d8:	orr.w	r0, r0, #40704	; 0x9f00
    19dc:	orr.w	r0, r0, #9
    19e0:	bl	2578 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    19e4:	bl	2614 <usb_midi_flush_output>
      activeNote = notes[step];
    19e8:	ldr.w	r2, [r6, r7, lsl #2]
    19ec:	ldr	r3, [r6, #8]
    19ee:	str	r2, [r6, #36]	; 0x24
    19f0:	b.n	14b4 <loop+0x1020>
    19f2:	nop
    19f4:	.word	0x00004c58
    19f8:	.word	0x1fff0c60

000019fc <_GLOBAL__sub_I_currentMode>:
    19fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;
const int playPin = 12;

Led led1(3, LOW);
    1a00:	movs	r2, #0
    1a02:	movs	r1, #3
    1a04:	ldr	r0, [pc, #440]	; (1bc0 <_GLOBAL__sub_I_currentMode+0x1c4>)
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
    1a06:	ldr	r4, [pc, #444]	; (1bc4 <_GLOBAL__sub_I_currentMode+0x1c8>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1a08:	ldr	r5, [pc, #444]	; (1bc8 <_GLOBAL__sub_I_currentMode+0x1cc>)
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
    1a0a:	ldr	r6, [pc, #448]	; (1bcc <_GLOBAL__sub_I_currentMode+0x1d0>)
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
    1a0c:	ldr.w	r9, [pc, #508]	; 1c0c <_GLOBAL__sub_I_currentMode+0x210>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a10:	ldr	r7, [pc, #444]	; (1bd0 <_GLOBAL__sub_I_currentMode+0x1d4>)
    1a12:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    1a16:	movs	r2, #0
    1a18:	movs	r1, #5
    1a1a:	ldr	r0, [pc, #440]	; (1bd4 <_GLOBAL__sub_I_currentMode+0x1d8>)
    1a1c:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    1a20:	movs	r2, #0
    1a22:	movs	r1, #7
    1a24:	ldr	r0, [pc, #432]	; (1bd8 <_GLOBAL__sub_I_currentMode+0x1dc>)
    1a26:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    1a2a:	movs	r2, #0
    1a2c:	movs	r1, #9
    1a2e:	ldr	r0, [pc, #428]	; (1bdc <_GLOBAL__sub_I_currentMode+0x1e0>)
    1a30:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    1a34:	movs	r2, #0
    1a36:	movs	r1, #11
    1a38:	ldr	r0, [pc, #420]	; (1be0 <_GLOBAL__sub_I_currentMode+0x1e4>)
    1a3a:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    1a3e:	movs	r2, #0
    1a40:	movs	r1, #24
    1a42:	ldr	r0, [pc, #416]	; (1be4 <_GLOBAL__sub_I_currentMode+0x1e8>)
    1a44:	bl	46c <Led::Led(int, int)>
    1a48:	ldmia.w	r4, {r0, r1, r2, r3}
    1a4c:	add.w	lr, r4, #16
    1a50:	add.w	ip, r5, #40	; 0x28
    1a54:	stmia.w	ip, {r0, r1, r2, r3}
    1a58:	ldmia.w	lr, {r0, r1, r2, r3}
    1a5c:	adds	r4, #32
    1a5e:	add.w	lr, r5, #56	; 0x38
    1a62:	stmia.w	lr, {r0, r1, r2, r3}
    1a66:	ldmia.w	r4, {r0, r1, r2, r3}
    1a6a:	movs	r4, #120	; 0x78
    1a6c:	add.w	lr, r5, #72	; 0x48
    1a70:	mov.w	ip, #24
    1a74:	mov.w	r8, #0
    1a78:	str	r4, [r5, #12]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1a7a:	movs	r4, #0
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
    1a7c:	str.w	ip, [r5, #32]
    1a80:	strd	r8, r9, [r5, #16]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1a84:	strb	r4, [r5, #0]
    1a86:	strb	r4, [r5, #1]
    1a88:	strb	r4, [r5, #2]
    1a8a:	strb	r4, [r5, #3]
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
    1a8c:	str	r4, [r5, #24]
    1a8e:	str	r4, [r5, #28]
    1a90:	str	r4, [r5, #36]	; 0x24
    1a92:	stmia.w	lr, {r0, r1, r2, r3}
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    1a96:	adds	r0, r6, #4
    1a98:	ldmia	r0, {r0, r1, r2}
      m_id = id;
      m_pin = pin;
    1a9a:	mov.w	r8, #2
    1a9e:	str	r2, [r5, #100]	; 0x64
      m_leds[4] = leds[4];
    1aa0:	ldr	r2, [r6, #16]
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
    1aa2:	ldr	r3, [r6, #0]
      m_leds[1] = leds[1];
    1aa4:	str	r0, [r5, #92]	; 0x5c
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1aa6:	mov.w	r9, #1
      m_leds[2] = leds[2];
    1aaa:	str	r1, [r5, #96]	; 0x60
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1aac:	mov	r0, r8
    1aae:	mov	r1, r4
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1ab0:	str	r2, [r5, #104]	; 0x68
      m_leds[5] = leds[5];
    1ab2:	ldr	r2, [r6, #20]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ab4:	str	r3, [r7, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1ab6:	strb	r4, [r7, #16]
      m_playButton = playButton;
    1ab8:	strb	r4, [r7, #17]
      m_mode = GLOBAL;
    1aba:	strb.w	r4, [r7, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1abe:	mov.w	fp, #4
      m_state = state;
    1ac2:	strb	r4, [r5, #4]
      m_currentStep = 0;
    1ac4:	str	r4, [r5, #8]
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1ac6:	str	r2, [r5, #108]	; 0x6c
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
    1ac8:	str	r3, [r5, #88]	; 0x58
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1aca:	str	r5, [r7, #28]
      m_id = id;
    1acc:	str.w	r9, [r7]
      m_pin = pin;
    1ad0:	str.w	r8, [r7, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1ad4:	bl	2314 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ad8:	ldr	r3, [pc, #268]	; (1be8 <_GLOBAL__sub_I_currentMode+0x1ec>)
    1ada:	ldr	r2, [r6, #4]
    1adc:	str	r2, [r3, #24]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1ade:	mov	r1, r4
    1ae0:	mov	r0, fp
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1ae2:	strb	r4, [r3, #16]
      m_playButton = playButton;
    1ae4:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    1ae6:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1aea:	mov.w	sl, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1aee:	str	r5, [r3, #28]
      m_id = id;
    1af0:	str.w	r8, [r3]
      m_pin = pin;
    1af4:	str.w	fp, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1af8:	bl	2314 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1afc:	ldr	r3, [pc, #236]	; (1bec <_GLOBAL__sub_I_currentMode+0x1f0>)
    1afe:	ldr	r2, [r6, #8]
    1b00:	str	r2, [r3, #24]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1b02:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1b04:	movs	r7, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1b06:	mov	r0, sl
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1b08:	strb	r4, [r3, #16]
      m_playButton = playButton;
    1b0a:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    1b0c:	strb.w	r4, [r3, #36]	; 0x24
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b10:	str	r5, [r3, #28]
      m_id = id;
    1b12:	str	r7, [r3, #0]
      m_pin = pin;
    1b14:	str.w	sl, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1b18:	bl	2314 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b1c:	ldr	r3, [pc, #208]	; (1bf0 <_GLOBAL__sub_I_currentMode+0x1f4>)
    1b1e:	ldr	r1, [r6, #12]
    1b20:	str	r1, [r3, #24]
      m_id = id;
      m_pin = pin;
    1b22:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1b24:	mov	r0, r2
    1b26:	mov	r1, r4
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1b28:	strb	r4, [r3, #16]
      m_playButton = playButton;
    1b2a:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    1b2c:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1b30:	str	r2, [r3, #32]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1b32:	str.w	fp, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b36:	str	r5, [r3, #28]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1b38:	bl	2314 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b3c:	ldr	r3, [pc, #180]	; (1bf4 <_GLOBAL__sub_I_currentMode+0x1f8>)
    1b3e:	ldr	r2, [r6, #16]
    1b40:	str	r2, [r3, #24]
      m_id = id;
    1b42:	movs	r1, #5
      m_pin = pin;
    1b44:	movs	r2, #10
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1b46:	mov	r0, r2
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1b48:	str	r1, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1b4a:	mov	r1, r4
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1b4c:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    1b4e:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1b52:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b54:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1b56:	strb.w	r9, [r3, #16]
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1b5a:	bl	2314 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b5e:	ldr	r3, [pc, #152]	; (1bf8 <_GLOBAL__sub_I_currentMode+0x1fc>)
    1b60:	ldr	r2, [r6, #20]
    1b62:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1b64:	movs	r6, #12
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1b66:	mov	r0, r6
    1b68:	mov	r1, r4
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1b6a:	strb	r4, [r3, #16]
      m_playButton = playButton;
      m_mode = GLOBAL;
    1b6c:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1b70:	str	r6, [r3, #32]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1b72:	str.w	sl, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b76:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1b78:	strb.w	r9, [r3, #17]
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1b7c:	bl	2314 <pinMode>
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b80:	ldr	r0, [pc, #120]	; (1bfc <_GLOBAL__sub_I_currentMode+0x200>)
    1b82:	ldr	r1, [pc, #124]	; (1c00 <_GLOBAL__sub_I_currentMode+0x204>)
    1b84:	ldr	r2, [pc, #124]	; (1c04 <_GLOBAL__sub_I_currentMode+0x208>)
    1b86:	ldr	r3, [pc, #128]	; (1c08 <_GLOBAL__sub_I_currentMode+0x20c>)
      m_pin = pin;
      m_knobType = knobType;
    1b88:	strb	r4, [r0, #20]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1b8a:	mov.w	lr, #14
      m_knobType = knobType;
      m_id = id;
    1b8e:	str	r4, [r0, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b90:	str	r5, [r0, #16]
      m_pin = pin;
    1b92:	movs	r6, #15
    1b94:	movs	r4, #16
    1b96:	strb.w	lr, [r0]
    1b9a:	movs	r0, #17
    1b9c:	strb	r6, [r1, #0]
    1b9e:	strb	r4, [r2, #0]
    1ba0:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1ba2:	str	r5, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1ba4:	strb.w	r9, [r1, #20]
      m_id = id;
    1ba8:	str.w	r9, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1bac:	str	r5, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    1bae:	strb.w	r8, [r2, #20]
      m_id = id;
    1bb2:	str.w	r8, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1bb6:	str	r5, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1bb8:	strb	r7, [r3, #20]
      m_id = id;
    1bba:	str	r7, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1bbc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bc0:	.word	0x1fff162c
    1bc4:	.word	0x00004bf0
    1bc8:	.word	0x1fff1738
    1bcc:	.word	0x1fff0c40
    1bd0:	.word	0x1fff16c0
    1bd4:	.word	0x1fff15cc
    1bd8:	.word	0x1fff15e4
    1bdc:	.word	0x1fff15fc
    1be0:	.word	0x1fff1614
    1be4:	.word	0x1fff1690
    1be8:	.word	0x1fff16e8
    1bec:	.word	0x1fff1710
    1bf0:	.word	0x1fff17f8
    1bf4:	.word	0x1fff17a8
    1bf8:	.word	0x1fff17d0
    1bfc:	.word	0x1fff16a8
    1c00:	.word	0x1fff1644
    1c04:	.word	0x1fff1660
    1c08:	.word	0x1fff1678
    1c0c:	.word	0x407f4000

00001c10 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1c10:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1c12:	ldr	r5, [pc, #60]	; (1c50 <usb_serial_getchar+0x40>)
    1c14:	ldr	r0, [r5, #0]
    1c16:	cbz	r0, 1c38 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1c18:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1c1a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1c1c:	adds	r1, r0, r3
    1c1e:	adds	r3, #1
	if (i >= rx_packet->len) {
    1c20:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1c22:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1c24:	bcs.n	1c2c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1c26:	strh	r3, [r0, #2]
	}
	return c;
    1c28:	mov	r0, r4
}
    1c2a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1c2c:	bl	2abc <usb_free>
		rx_packet = NULL;
    1c30:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1c32:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1c34:	str	r3, [r5, #0]
    1c36:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1c38:	ldr	r3, [pc, #24]	; (1c54 <usb_serial_getchar+0x44>)
    1c3a:	ldrb	r3, [r3, #0]
    1c3c:	cbz	r3, 1c4a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1c3e:	movs	r0, #2
    1c40:	bl	2b08 <usb_rx>
    1c44:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1c46:	cmp	r0, #0
    1c48:	bne.n	1c18 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1c4a:	mov.w	r0, #4294967295
    1c4e:	pop	{r3, r4, r5, pc}
    1c50:	.word	0x1fff182c
    1c54:	.word	0x1fff198c

00001c58 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1c58:	push	{r4, lr}
	if (!rx_packet) {
    1c5a:	ldr	r4, [pc, #36]	; (1c80 <usb_serial_peekchar+0x28>)
    1c5c:	ldr	r0, [r4, #0]
    1c5e:	cbz	r0, 1c68 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1c60:	ldrh	r3, [r0, #2]
    1c62:	add	r0, r3
    1c64:	ldrb	r0, [r0, #8]
}
    1c66:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1c68:	ldr	r3, [pc, #24]	; (1c84 <usb_serial_peekchar+0x2c>)
    1c6a:	ldrb	r3, [r3, #0]
    1c6c:	cbz	r3, 1c7a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1c6e:	movs	r0, #2
    1c70:	bl	2b08 <usb_rx>
    1c74:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1c76:	cmp	r0, #0
    1c78:	bne.n	1c60 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1c7a:	mov.w	r0, #4294967295
    1c7e:	pop	{r4, pc}
    1c80:	.word	0x1fff182c
    1c84:	.word	0x1fff198c

00001c88 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1c88:	ldr	r3, [pc, #16]	; (1c9c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1c8a:	ldr	r2, [pc, #20]	; (1ca0 <usb_serial_available+0x18>)
    1c8c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1c8e:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1c90:	cbz	r3, 1c9a <usb_serial_available+0x12>
    1c92:	ldrh	r2, [r3, #0]
    1c94:	ldrh	r3, [r3, #2]
    1c96:	subs	r3, r2, r3
    1c98:	add	r0, r3
	return count;
}
    1c9a:	bx	lr
    1c9c:	.word	0x1fff182c
    1ca0:	.word	0x1fff1e20

00001ca4 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1ca4:	ldr	r3, [pc, #44]	; (1cd4 <usb_serial_flush_input+0x30>)
    1ca6:	ldrb	r3, [r3, #0]
    1ca8:	cbz	r3, 1cd2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1caa:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1cac:	ldr	r4, [pc, #40]	; (1cd8 <usb_serial_flush_input+0x34>)
    1cae:	ldr	r0, [r4, #0]
    1cb0:	cbz	r0, 1cc6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1cb2:	bl	2abc <usb_free>
		rx_packet = NULL;
    1cb6:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1cb8:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1cba:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1cbc:	bl	2b08 <usb_rx>
		if (!rx) break;
    1cc0:	cbz	r0, 1cd0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1cc2:	bl	2abc <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1cc6:	movs	r0, #2
    1cc8:	bl	2b08 <usb_rx>
		if (!rx) break;
    1ccc:	cmp	r0, #0
    1cce:	bne.n	1cc2 <usb_serial_flush_input+0x1e>
    1cd0:	pop	{r4, pc}
    1cd2:	bx	lr
    1cd4:	.word	0x1fff198c
    1cd8:	.word	0x1fff182c

00001cdc <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1cdc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1ce0:	ldr.w	r9, [pc, #248]	; 1ddc <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1ce4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1ce6:	movs	r2, #1
    1ce8:	strb.w	r2, [r9]
	while (size > 0) {
    1cec:	str	r1, [sp, #4]
    1cee:	cbz	r1, 1d4c <usb_serial_write+0x70>
    1cf0:	ldr.w	r8, [pc, #236]	; 1de0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1cf4:	ldr	r7, [pc, #212]	; (1dcc <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1cf6:	ldr	r6, [sp, #4]
    1cf8:	mov	fp, r0
		if (!tx_packet) {
    1cfa:	ldr.w	r0, [r8]
    1cfe:	cbz	r0, 1d6e <usb_serial_write+0x92>
    1d00:	ldr	r5, [pc, #204]	; (1dd0 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1d02:	ldrh	r4, [r0, #2]
    1d04:	rsb	r1, r4, #64	; 0x40
    1d08:	cmp	r1, r6
    1d0a:	it	cs
    1d0c:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1d0e:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1d12:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1d14:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1d18:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1d1a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1d1c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1d20:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1d24:	cbz	r1, 1d3c <usb_serial_write+0x60>
    1d26:	subs	r4, #1
    1d28:	add	r2, r4
    1d2a:	add	r1, fp
    1d2c:	ldrb.w	r4, [fp], #1
    1d30:	strb.w	r4, [r2, #1]!
    1d34:	cmp	fp, r1
    1d36:	bne.n	1d2c <usb_serial_write+0x50>
    1d38:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1d3c:	cmp.w	lr, #63	; 0x3f
    1d40:	bhi.n	1d5a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1d42:	ldr	r2, [pc, #144]	; (1dd4 <usb_serial_write+0xf8>)
    1d44:	movs	r1, #5
    1d46:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1d48:	cmp	r6, #0
    1d4a:	bne.n	1cfa <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1d4c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1d4e:	movs	r3, #0
    1d50:	strb.w	r3, [r9]
	return ret;
}
    1d54:	add	sp, #12
    1d56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1d5a:	movs	r2, #64	; 0x40
    1d5c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1d5e:	mov	r1, r0
    1d60:	movs	r0, #3
    1d62:	bl	2c58 <usb_tx>
			tx_packet = NULL;
    1d66:	movs	r2, #0
    1d68:	str.w	r2, [r8]
    1d6c:	b.n	1d42 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1d6e:	ldrb	r2, [r7, #0]
    1d70:	cbz	r2, 1dbc <usb_serial_write+0xe0>
    1d72:	ldr	r4, [pc, #100]	; (1dd8 <usb_serial_write+0xfc>)
    1d74:	ldr	r5, [pc, #88]	; (1dd0 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1d76:	mov.w	sl, #1
    1d7a:	b.n	1d8c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1d7c:	subs	r4, #1
    1d7e:	beq.n	1dae <usb_serial_write+0xd2>
    1d80:	ldrb	r2, [r5, #0]
    1d82:	cbnz	r2, 1dae <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1d84:	bl	375c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1d88:	ldrb	r2, [r7, #0]
    1d8a:	cbz	r2, 1dbc <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1d8c:	movs	r0, #3
    1d8e:	bl	2b44 <usb_tx_packet_count>
    1d92:	cmp	r0, #7
    1d94:	bhi.n	1d7c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1d96:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1d9a:	bl	2a7c <usb_malloc>
    1d9e:	str.w	r0, [r8]
					if (tx_packet) break;
    1da2:	cmp	r0, #0
    1da4:	bne.n	1d02 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1da6:	ldr	r3, [pc, #52]	; (1ddc <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1da8:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1daa:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1dac:	bne.n	1d80 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1dae:	movs	r3, #1
					return -1;
    1db0:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1db4:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1db6:	add	sp, #12
    1db8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1dbc:	movs	r3, #0
					return -1;
    1dbe:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1dc2:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1dc6:	add	sp, #12
    1dc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dcc:	.word	0x1fff198c
    1dd0:	.word	0x1fff1828
    1dd4:	.word	0x1fff1820
    1dd8:	.word	0x00014821
    1ddc:	.word	0x1fff1821
    1de0:	.word	0x1fff1824

00001de4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1de4:	push	{lr}
    1de6:	sub	sp, #12
    1de8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1dea:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1dec:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1df0:	mov	r0, r3
    1df2:	bl	1cdc <usb_serial_write>
}
    1df6:	add	sp, #12
    1df8:	ldr.w	pc, [sp], #4

00001dfc <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1dfc:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1dfe:	ldr	r5, [pc, #56]	; (1e38 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1e00:	ldr	r4, [pc, #56]	; (1e3c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1e02:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1e04:	movs	r3, #1
    1e06:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1e08:	cbz	r0, 1e16 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1e0a:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1e0c:	movs	r3, #0
    1e0e:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1e10:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1e14:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1e16:	ldr	r3, [pc, #40]	; (1e40 <usb_serial_write_buffer_free+0x44>)
    1e18:	ldrb	r3, [r3, #0]
    1e1a:	cbnz	r3, 1e22 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1e1c:	movs	r0, #0
    1e1e:	strb	r0, [r4, #0]
			return 0;
    1e20:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1e22:	movs	r0, #3
    1e24:	bl	2b44 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1e28:	cmp	r0, #7
    1e2a:	bhi.n	1e1c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1e2c:	bl	2a7c <usb_malloc>
    1e30:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1e32:	cmp	r0, #0
    1e34:	bne.n	1e0a <usb_serial_write_buffer_free+0xe>
    1e36:	b.n	1e1c <usb_serial_write_buffer_free+0x20>
    1e38:	.word	0x1fff1824
    1e3c:	.word	0x1fff1821
    1e40:	.word	0x1fff198c

00001e44 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1e44:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1e46:	ldr	r3, [pc, #68]	; (1e8c <usb_serial_flush_output+0x48>)
    1e48:	ldrb	r3, [r3, #0]
    1e4a:	cbz	r3, 1e70 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1e4c:	ldr	r6, [pc, #64]	; (1e90 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1e4e:	ldr	r5, [pc, #68]	; (1e94 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1e50:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1e52:	movs	r7, #1
    1e54:	strb	r7, [r5, #0]
	if (tx_packet) {
    1e56:	cbz	r4, 1e72 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1e58:	ldr	r2, [pc, #60]	; (1e98 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1e5a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1e5c:	movs	r7, #0
    1e5e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1e60:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1e62:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1e64:	movs	r0, #3
    1e66:	bl	2c58 <usb_tx>
		tx_packet = NULL;
    1e6a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1e6c:	movs	r3, #0
    1e6e:	strb	r3, [r5, #0]
    1e70:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1e72:	bl	2a7c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1e76:	ldr	r3, [pc, #32]	; (1e98 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1e78:	cbz	r0, 1e86 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e7a:	mov	r1, r0
    1e7c:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1e7e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e80:	bl	2c58 <usb_tx>
    1e84:	b.n	1e6c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1e86:	strb	r7, [r3, #0]
    1e88:	b.n	1e6c <usb_serial_flush_output+0x28>
    1e8a:	nop
    1e8c:	.word	0x1fff198c
    1e90:	.word	0x1fff1824
    1e94:	.word	0x1fff1821
    1e98:	.word	0x1fff1820

00001e9c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1e9c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1e9e:	ldr	r3, [pc, #56]	; (1ed8 <usb_serial_flush_callback+0x3c>)
    1ea0:	ldrb	r3, [r3, #0]
    1ea2:	cbnz	r3, 1ec2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1ea4:	ldr	r4, [pc, #52]	; (1edc <usb_serial_flush_callback+0x40>)
    1ea6:	ldr	r1, [r4, #0]
    1ea8:	cbz	r1, 1ec4 <usb_serial_flush_callback+0x28>
    1eaa:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1eae:	ldrh	r3, [r1, #2]
    1eb0:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1eb2:	movs	r0, #3
    1eb4:	bl	2c58 <usb_tx>
		tx_packet = NULL;
    1eb8:	str	r5, [r4, #0]
    1eba:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1ebc:	ldr	r3, [pc, #32]	; (1ee0 <usb_serial_flush_callback+0x44>)
    1ebe:	movs	r2, #1
    1ec0:	strb	r2, [r3, #0]
    1ec2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1ec4:	bl	2a7c <usb_malloc>
		if (tx) {
    1ec8:	cmp	r0, #0
    1eca:	beq.n	1ebc <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1ecc:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1ece:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1ed2:	movs	r0, #3
    1ed4:	b.w	2c58 <usb_tx>
    1ed8:	.word	0x1fff1821
    1edc:	.word	0x1fff1824
    1ee0:	.word	0x1fff1820

00001ee4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1ee4:	ldr	r2, [pc, #220]	; (1fc4 <wait_for_cal+0xe0>)
    1ee6:	ldr	r1, [pc, #224]	; (1fc8 <wait_for_cal+0xe4>)
    1ee8:	ldr	r3, [r2, #0]
    1eea:	lsls	r3, r3, #24
    1eec:	bmi.n	1ee8 <wait_for_cal+0x4>
    1eee:	ldr	r3, [r1, #0]
    1ef0:	ands.w	r3, r3, #128	; 0x80
    1ef4:	bne.n	1ee8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1ef6:	cpsid	i
	if (calibrating) {
    1ef8:	ldr	r1, [pc, #208]	; (1fcc <wait_for_cal+0xe8>)
    1efa:	ldrb	r2, [r1, #0]
    1efc:	cmp	r2, #0
    1efe:	beq.n	1fc0 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1f00:	ldr	r2, [pc, #204]	; (1fd0 <wait_for_cal+0xec>)
    1f02:	ldr	r0, [pc, #208]	; (1fd4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1f04:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1f06:	ldr	r4, [pc, #208]	; (1fd8 <wait_for_cal+0xf4>)
    1f08:	ldr	r7, [r2, #0]
    1f0a:	ldr	r6, [r0, #0]
    1f0c:	ldr	r5, [r4, #0]
    1f0e:	ldr	r4, [r2, #12]
    1f10:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1f12:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1f14:	adds	r2, #20
    1f16:	ldr	r0, [r0, #0]
    1f18:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1f1a:	ldr	r7, [pc, #192]	; (1fdc <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1f1c:	add	r5, r6
    1f1e:	add	r4, r5
    1f20:	add	r0, r4
    1f22:	add	r2, r0
    1f24:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1f28:	ldr	r6, [pc, #180]	; (1fe0 <wait_for_cal+0xfc>)
    1f2a:	ldr	r0, [pc, #184]	; (1fe4 <wait_for_cal+0x100>)
    1f2c:	ldr	r5, [pc, #184]	; (1fe8 <wait_for_cal+0x104>)
    1f2e:	ldr	r4, [pc, #188]	; (1fec <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1f30:	orr.w	r2, r2, #32768	; 0x8000
    1f34:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1f36:	ldr	r7, [r6, #0]
    1f38:	ldr	r6, [r0, #0]
    1f3a:	ldr	r5, [r5, #0]
    1f3c:	ldr	r2, [pc, #176]	; (1ff0 <wait_for_cal+0x10c>)
    1f3e:	ldr	r4, [r4, #0]
    1f40:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1f42:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1f44:	ldr	r0, [r0, #0]
    1f46:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1f48:	ldr	r7, [pc, #168]	; (1ff4 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1f4a:	add	r5, r6
    1f4c:	add	r4, r5
    1f4e:	add	r0, r4
    1f50:	add	r2, r0
    1f52:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1f56:	ldr	r6, [pc, #160]	; (1ff8 <wait_for_cal+0x114>)
    1f58:	ldr	r0, [pc, #160]	; (1ffc <wait_for_cal+0x118>)
    1f5a:	ldr	r5, [pc, #164]	; (2000 <wait_for_cal+0x11c>)
    1f5c:	ldr	r4, [pc, #164]	; (2004 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1f5e:	orr.w	r2, r2, #32768	; 0x8000
    1f62:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1f64:	ldr	r7, [r6, #0]
    1f66:	ldr	r6, [r0, #0]
    1f68:	ldr	r5, [r5, #0]
    1f6a:	ldr	r2, [pc, #156]	; (2008 <wait_for_cal+0x124>)
    1f6c:	ldr	r4, [r4, #0]
    1f6e:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1f70:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1f72:	ldr	r0, [r0, #0]
    1f74:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1f76:	ldr	r7, [pc, #148]	; (200c <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1f78:	add	r5, r6
    1f7a:	add	r4, r5
    1f7c:	add	r0, r4
    1f7e:	add	r2, r0
    1f80:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f84:	ldr	r6, [pc, #136]	; (2010 <wait_for_cal+0x12c>)
    1f86:	ldr	r0, [pc, #140]	; (2014 <wait_for_cal+0x130>)
    1f88:	ldr	r5, [pc, #140]	; (2018 <wait_for_cal+0x134>)
    1f8a:	ldr	r4, [pc, #144]	; (201c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1f8c:	orr.w	r2, r2, #32768	; 0x8000
    1f90:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f92:	ldr	r7, [r6, #0]
    1f94:	ldr	r6, [r0, #0]
    1f96:	ldr	r5, [r5, #0]
    1f98:	ldr	r2, [pc, #132]	; (2020 <wait_for_cal+0x13c>)
    1f9a:	ldr	r4, [r4, #0]
    1f9c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1f9e:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1fa0:	ldr	r0, [r0, #0]
    1fa2:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1fa4:	add	r5, r6
    1fa6:	add	r4, r5
    1fa8:	add	r0, r4
    1faa:	add	r2, r0
    1fac:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1fb0:	ldr	r0, [pc, #112]	; (2024 <wait_for_cal+0x140>)
    1fb2:	orr.w	r2, r2, #32768	; 0x8000
    1fb6:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1fb8:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1fba:	cpsie	i
}
    1fbc:	pop	{r4, r5, r6, r7}
    1fbe:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1fc0:	cpsie	i
    1fc2:	bx	lr
    1fc4:	.word	0x4003b024
    1fc8:	.word	0x400bb024
    1fcc:	.word	0x1fff1832
    1fd0:	.word	0x4003b038
    1fd4:	.word	0x4003b03c
    1fd8:	.word	0x4003b040
    1fdc:	.word	0x4003b02c
    1fe0:	.word	0x4003b058
    1fe4:	.word	0x4003b05c
    1fe8:	.word	0x4003b060
    1fec:	.word	0x4003b064
    1ff0:	.word	0x4003b06c
    1ff4:	.word	0x4003b030
    1ff8:	.word	0x400bb038
    1ffc:	.word	0x400bb03c
    2000:	.word	0x400bb040
    2004:	.word	0x400bb044
    2008:	.word	0x400bb04c
    200c:	.word	0x400bb02c
    2010:	.word	0x400bb058
    2014:	.word	0x400bb05c
    2018:	.word	0x400bb060
    201c:	.word	0x400bb064
    2020:	.word	0x400bb06c
    2024:	.word	0x400bb030

00002028 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2028:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    202a:	ldr	r0, [pc, #164]	; (20d0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    202c:	ldr	r2, [pc, #164]	; (20d4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    202e:	ldr	r3, [pc, #168]	; (20d8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2030:	ldr	r5, [pc, #168]	; (20dc <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2032:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2034:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2036:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2038:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    203a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    203c:	ldr	r4, [pc, #160]	; (20e0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    203e:	cmp	r3, #8
    2040:	beq.n	20a4 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2042:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2044:	ldr	r0, [pc, #156]	; (20e4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2046:	ldr	r1, [pc, #160]	; (20e8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2048:	beq.n	20ba <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    204a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    204c:	ite	eq
    204e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2050:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2052:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2054:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2056:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2058:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    205a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    205c:	ldr	r3, [pc, #140]	; (20ec <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    205e:	ldr	r1, [pc, #144]	; (20f0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2060:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2062:	ldr	r2, [pc, #144]	; (20f4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2064:	cbz	r3, 2096 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2066:	movs	r3, #1
    2068:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    206a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    206c:	ldr	r3, [pc, #136]	; (20f8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    206e:	ldr	r1, [pc, #140]	; (20fc <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2070:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2072:	ldr	r2, [pc, #140]	; (2100 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2074:	cmp	r3, #1
    2076:	bls.n	20c6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2078:	cmp	r3, #4
    207a:	bls.n	209c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    207c:	cmp	r3, #8
    207e:	bls.n	20be <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2080:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2082:	ite	ls
    2084:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2086:	movhi	r3, #135	; 0x87
    2088:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    208a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    208c:	ldr	r3, [pc, #116]	; (2104 <analog_init+0xdc>)
    208e:	movs	r2, #1
    2090:	strb	r2, [r3, #0]
}
    2092:	pop	{r4, r5}
    2094:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2096:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2098:	str	r3, [r2, #0]
    209a:	b.n	206c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    209c:	movs	r3, #132	; 0x84
    209e:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    20a0:	str	r3, [r2, #0]
    20a2:	b.n	208c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    20a4:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    20a8:	ldr	r1, [pc, #60]	; (20e8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    20aa:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    20ac:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    20ae:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    20b0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    20b2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    20b4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    20b6:	str	r3, [r1, #0]
    20b8:	b.n	205c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    20ba:	movs	r2, #57	; 0x39
    20bc:	b.n	20ae <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    20be:	movs	r3, #133	; 0x85
    20c0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    20c2:	str	r3, [r2, #0]
    20c4:	b.n	208c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    20c6:	movs	r3, #128	; 0x80
    20c8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    20ca:	str	r3, [r2, #0]
    20cc:	b.n	208c <analog_init+0x64>
    20ce:	nop
    20d0:	.word	0x40074000
    20d4:	.word	0x40074001
    20d8:	.word	0x1fff0c58
    20dc:	.word	0x4003b008
    20e0:	.word	0x4003b00c
    20e4:	.word	0x400bb008
    20e8:	.word	0x400bb00c
    20ec:	.word	0x1fff1835
    20f0:	.word	0x4003b020
    20f4:	.word	0x400bb020
    20f8:	.word	0x1fff0c59
    20fc:	.word	0x4003b024
    2100:	.word	0x400bb024
    2104:	.word	0x1fff1832

00002108 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2108:	cmp	r0, #71	; 0x47
    210a:	bhi.n	216c <analogRead+0x64>
	channel = pin2sc1a[pin];
    210c:	ldr	r3, [pc, #204]	; (21dc <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    210e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    2112:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    2114:	cmp	r6, #255	; 0xff
    2116:	beq.n	2170 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2118:	ldr	r3, [pc, #196]	; (21e0 <analogRead+0xd8>)
    211a:	ldrb	r3, [r3, #0]
    211c:	cmp	r3, #0
    211e:	bne.n	2176 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2120:	lsls	r2, r6, #24
    2122:	bmi.n	217e <analogRead+0x76>
#endif

	__disable_irq();
    2124:	cpsid	i
    2126:	ldr	r5, [pc, #188]	; (21e4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2128:	ldr	r4, [pc, #188]	; (21e8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    212a:	mov	r7, r5
    212c:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    212e:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2130:	strb	r3, [r5, #0]
	__enable_irq();
    2132:	cpsie	i
	while (1) {
		__disable_irq();
    2134:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2136:	ldr	r3, [r4, #0]
    2138:	lsls	r3, r3, #24
    213a:	bmi.n	2156 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    213c:	ldrb	r3, [r7, #0]
    213e:	cbnz	r3, 2148 <analogRead+0x40>
    2140:	b.n	212c <analogRead+0x24>
    2142:	ldrb	r3, [r5, #0]
    2144:	cmp	r3, #0
    2146:	beq.n	212c <analogRead+0x24>
		__enable_irq();
    2148:	cpsie	i
		yield();
    214a:	bl	375c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    214e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2150:	ldr	r3, [r4, #0]
    2152:	lsls	r0, r3, #24
    2154:	bpl.n	2142 <analogRead+0x3a>
			result = ADC0_RA;
    2156:	ldr	r3, [pc, #148]	; (21ec <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2158:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    215a:	movs	r2, #0
    215c:	strb	r2, [r5, #0]
			__enable_irq();
    215e:	cpsie	i
			result >>= analog_right_shift;
    2160:	ldr	r2, [pc, #140]	; (21f0 <analogRead+0xe8>)
    2162:	ldrb	r0, [r2, #0]
    2164:	asr.w	r0, r3, r0
			return result;
    2168:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    216c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    216e:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2170:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2172:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2176:	bl	1ee4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    217a:	lsls	r2, r6, #24
    217c:	bpl.n	2124 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    217e:	cpsid	i
    2180:	ldr	r5, [pc, #112]	; (21f4 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2182:	ldr.w	r8, [pc, #124]	; 2200 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2186:	ldr	r4, [pc, #112]	; (21f8 <analogRead+0xf0>)
    2188:	and.w	r7, r6, #64	; 0x40
    218c:	uxtb	r7, r7
    218e:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2192:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2196:	cbz	r7, 21d0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2198:	bic.w	r3, r3, #16
    219c:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    21a0:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    21a2:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    21a4:	ldr	r2, [pc, #76]	; (21f4 <analogRead+0xec>)
    21a6:	strb	r3, [r5, #0]
	__enable_irq();
    21a8:	cpsie	i
	while (1) {
		__disable_irq();
    21aa:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    21ac:	ldr	r3, [r4, #0]
    21ae:	lsls	r1, r3, #24
    21b0:	bmi.n	21cc <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    21b2:	ldrb	r3, [r2, #0]
    21b4:	cbnz	r3, 21be <analogRead+0xb6>
    21b6:	b.n	2192 <analogRead+0x8a>
    21b8:	ldrb	r3, [r5, #0]
    21ba:	cmp	r3, #0
    21bc:	beq.n	2192 <analogRead+0x8a>
		__enable_irq();
    21be:	cpsie	i
		yield();
    21c0:	bl	375c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    21c4:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    21c6:	ldr	r3, [r4, #0]
    21c8:	lsls	r3, r3, #24
    21ca:	bpl.n	21b8 <analogRead+0xb0>
			result = ADC1_RA;
    21cc:	ldr	r3, [pc, #44]	; (21fc <analogRead+0xf4>)
    21ce:	b.n	2158 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    21d0:	orr.w	r3, r3, #16
    21d4:	str.w	r3, [r8]
    21d8:	b.n	21a0 <analogRead+0x98>
    21da:	nop
    21dc:	.word	0x00004c74
    21e0:	.word	0x1fff1832
    21e4:	.word	0x1fff1834
    21e8:	.word	0x4003b000
    21ec:	.word	0x4003b010
    21f0:	.word	0x1fff1831
    21f4:	.word	0x1fff1833
    21f8:	.word	0x400bb000
    21fc:	.word	0x400bb010
    2200:	.word	0x400bb00c

00002204 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2204:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2206:	ldr	r3, [pc, #68]	; (224c <digitalWrite.part.1+0x48>)
    2208:	ldr.w	r2, [r3, r0, lsl #3]
    220c:	ldrb.w	r4, [r2, #640]	; 0x280
    2210:	cbz	r4, 2220 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    2212:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2214:	cbz	r1, 2236 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2216:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    221a:	ldr.w	r4, [sp], #4
    221e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2220:	add.w	r3, r3, r0, lsl #3
    2224:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2226:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2228:	cbnz	r1, 2240 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    222a:	bic.w	r2, r2, #2
    222e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2230:	ldr.w	r4, [sp], #4
    2234:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2236:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    223a:	ldr.w	r4, [sp], #4
    223e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2240:	orr.w	r2, r2, #3
    2244:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2246:	ldr.w	r4, [sp], #4
    224a:	bx	lr
    224c:	.word	0x00004cbc

00002250 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2250:	ldr	r2, [pc, #112]	; (22c4 <pinMode.part.2+0x74>)
    2252:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2256:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2258:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    225a:	beq.n	2280 <pinMode.part.2+0x30>
    225c:	cmp	r1, #4
    225e:	beq.n	2298 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2260:	ldr.w	r0, [r2, r0, lsl #3]
    2264:	movs	r2, #0
    2266:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    226a:	cbz	r1, 2278 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    226c:	cmp	r1, #2
    226e:	beq.n	22b2 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2270:	cmp	r1, #3
    2272:	beq.n	22ba <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2274:	str	r2, [r3, #0]
    2276:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2278:	mov.w	r2, #256	; 0x100
    227c:	str	r2, [r3, #0]
    227e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2280:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2284:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2288:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    228c:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    228e:	ldr	r2, [r3, #0]
    2290:	bic.w	r2, r2, #32
    2294:	str	r2, [r3, #0]
    2296:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2298:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    229c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    22a0:	movs	r0, #1
    22a2:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    22a6:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    22a8:	ldr	r2, [r3, #0]
    22aa:	orr.w	r2, r2, #32
    22ae:	str	r2, [r3, #0]
    22b0:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    22b2:	movw	r2, #259	; 0x103
    22b6:	str	r2, [r3, #0]
    22b8:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    22ba:	mov.w	r2, #258	; 0x102
    22be:	str	r2, [r3, #0]
    22c0:	bx	lr
    22c2:	nop
    22c4:	.word	0x00004cbc

000022c8 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    22c8:	push	{r4, r5}
	RTC_SR = 0;
    22ca:	ldr	r3, [pc, #20]	; (22e0 <rtc_set+0x18>)
	RTC_TPR = 0;
    22cc:	ldr	r5, [pc, #20]	; (22e4 <rtc_set+0x1c>)
	RTC_TSR = t;
    22ce:	ldr	r4, [pc, #24]	; (22e8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    22d0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    22d2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    22d4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    22d6:	str	r2, [r5, #0]
	RTC_TSR = t;
    22d8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    22da:	str	r1, [r3, #0]
}
    22dc:	pop	{r4, r5}
    22de:	bx	lr
    22e0:	.word	0x4003d014
    22e4:	.word	0x4003d004
    22e8:	.word	0x4003d000

000022ec <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    22ec:	cmp	r0, #63	; 0x3f
    22ee:	bhi.n	22f4 <digitalWrite+0x8>
    22f0:	b.w	2204 <digitalWrite.part.1>
    22f4:	bx	lr
    22f6:	nop

000022f8 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    22f8:	cmp	r0, #63	; 0x3f
    22fa:	bhi.n	230a <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    22fc:	ldr	r3, [pc, #16]	; (2310 <digitalRead+0x18>)
    22fe:	ldr.w	r3, [r3, r0, lsl #3]
    2302:	ldrb.w	r0, [r3, #512]	; 0x200
    2306:	uxtb	r0, r0
    2308:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    230a:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    230c:	bx	lr
    230e:	nop
    2310:	.word	0x00004cbc

00002314 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2314:	cmp	r0, #63	; 0x3f
    2316:	bhi.n	231c <pinMode+0x8>
    2318:	b.w	2250 <pinMode.part.2>
    231c:	bx	lr
    231e:	nop

00002320 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2320:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2324:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2326:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2328:	ldr	r7, [pc, #136]	; (23b4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    232a:	ldr	r3, [pc, #140]	; (23b8 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    232c:	ldr	r2, [pc, #140]	; (23bc <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    232e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2330:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2332:	ldr	r2, [r2, #0]
	__enable_irq();
    2334:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2336:	lsls	r2, r2, #5
    2338:	bpl.n	2340 <delay+0x20>
    233a:	cmp	r3, #50	; 0x32
    233c:	it	hi
    233e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2340:	cbz	r5, 23b0 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2342:	rsb	r3, r3, #179200	; 0x2bc00
    2346:	addw	r3, r3, #799	; 0x31f
    234a:	ldr	r6, [pc, #116]	; (23c0 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    234c:	ldr.w	r9, [pc, #104]	; 23b8 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2350:	ldr.w	r8, [pc, #104]	; 23bc <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2354:	lsrs	r3, r3, #2
    2356:	mov.w	r2, #1000	; 0x3e8
    235a:	umull	r1, r3, r6, r3
    235e:	mul.w	r4, r2, r4
    2362:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2366:	cpsid	i
	current = SYST_CVR;
    2368:	ldr.w	r1, [r9]
	count = systick_millis_count;
    236c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    236e:	ldr.w	lr, [r8]
	__enable_irq();
    2372:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2374:	rsb	r3, r1, #179200	; 0x2bc00
    2378:	addw	r3, r3, #799	; 0x31f
    237c:	lsrs	r3, r3, #2
    237e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2382:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2386:	rsb	r3, r4, r3, lsr #2
    238a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    238e:	beq.n	2396 <delay+0x76>
    2390:	cmp	r1, #50	; 0x32
    2392:	it	hi
    2394:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2396:	mla	r3, r0, r2, r3
    239a:	cmp.w	r3, #1000	; 0x3e8
    239e:	bcc.n	23aa <delay+0x8a>
				ms--;
				if (ms == 0) return;
    23a0:	subs	r5, #1
    23a2:	beq.n	23b0 <delay+0x90>
				start += 1000;
    23a4:	add.w	r4, r4, #1000	; 0x3e8
    23a8:	b.n	2366 <delay+0x46>
			}
			yield();
    23aa:	bl	375c <yield>
		}
    23ae:	b.n	2366 <delay+0x46>
    23b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    23b4:	.word	0x1fff1838
    23b8:	.word	0xe000e018
    23bc:	.word	0xe000ed04
    23c0:	.word	0x16c16c17

000023c4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    23c4:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    23c6:	ldr	r3, [pc, #312]	; (2500 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    23c8:	ldr	r0, [pc, #312]	; (2504 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    23ca:	ldr.w	ip, [pc, #348]	; 2528 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    23ce:	ldr	r4, [pc, #312]	; (2508 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    23d0:	ldr	r1, [pc, #312]	; (250c <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    23d2:	ldr.w	lr, [pc, #344]	; 252c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    23d6:	ldr	r6, [pc, #312]	; (2510 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    23d8:	ldr	r5, [pc, #312]	; (2514 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    23da:	ldr	r7, [pc, #316]	; (2518 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    23dc:	mov.w	r2, #134217728	; 0x8000000
    23e0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    23e2:	mov.w	r2, #268435456	; 0x10000000
    23e6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    23e8:	mov.w	r2, #536870912	; 0x20000000
    23ec:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    23ee:	mov.w	r2, #1073741824	; 0x40000000
    23f2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    23f4:	mov.w	r2, #2147483648	; 0x80000000
    23f8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    23fa:	movs	r2, #0
    23fc:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    23fe:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2400:	movw	r0, #61439	; 0xefff
    2404:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2408:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    240c:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    240e:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2412:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2414:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2416:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2418:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    241c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    241e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2422:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2424:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2428:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    242a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    242e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2432:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2436:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    243a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    243e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2440:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2444:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2446:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2448:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    244a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    244e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2450:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2452:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2454:	ldr	r4, [pc, #196]	; (251c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2456:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2458:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    245a:	movs	r1, #9
    245c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    245e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2462:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2466:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2468:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    246a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    246c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    246e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2470:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2472:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2476:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    247a:	add.w	r7, r7, #520192	; 0x7f000
    247e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2480:	addw	r4, r4, #2044	; 0x7fc
    2484:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2486:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2488:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    248a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    248c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2490:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2492:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2496:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    249a:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    249c:	sub.w	r4, r4, #460800	; 0x70800
    24a0:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    24a4:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    24a6:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    24a8:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    24ac:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    24ae:	ldr	r0, [pc, #112]	; (2520 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    24b0:	orr.w	r1, r1, #512	; 0x200
    24b4:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    24b6:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    24b8:	ldr	r4, [pc, #104]	; (2524 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    24ba:	add.w	lr, lr, #65280	; 0xff00
    24be:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    24c2:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    24c6:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    24ca:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    24ce:	orr.w	r1, r1, #33554432	; 0x2000000
    24d2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    24d4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    24d8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    24dc:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    24de:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    24e0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    24e2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    24e4:	str	r2, [r4, #0]
#endif
	analog_init();
    24e6:	bl	2028 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    24ea:	movs	r0, #25
    24ec:	bl	2320 <delay>
	usb_init();
    24f0:	bl	368c <usb_init>
	delay(275);
    24f4:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    24f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    24fc:	b.w	2320 <delay>
    2500:	.word	0xe000e104
    2504:	.word	0x40038004
    2508:	.word	0x40038014
    250c:	.word	0x4003801c
    2510:	.word	0x40038024
    2514:	.word	0x4003802c
    2518:	.word	0x40038034
    251c:	.word	0x40038000
    2520:	.word	0x40048004
    2524:	.word	0x400c9000
    2528:	.word	0x40038008
    252c:	.word	0x4003800c

00002530 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2530:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2532:	ldr	r3, [pc, #56]	; (256c <sysex_byte+0x3c>)
    2534:	ldr	r4, [pc, #56]	; (2570 <sysex_byte+0x40>)
    2536:	ldr	r3, [r3, #0]
    2538:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    253a:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    253c:	cbz	r3, 2562 <sysex_byte+0x32>
    253e:	cmp.w	r1, #290	; 0x122
    2542:	bcs.n	2550 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2544:	ldr	r2, [pc, #44]	; (2574 <sysex_byte+0x44>)
    2546:	adds	r3, r1, #1
    2548:	strb	r5, [r2, r1]
    254a:	uxth	r3, r3
    254c:	strh	r3, [r4, #0]
	}
}
    254e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2550:	movs	r2, #0
    2552:	ldr	r0, [pc, #32]	; (2574 <sysex_byte+0x44>)
    2554:	blx	r3
    2556:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2558:	ldr	r2, [pc, #24]	; (2574 <sysex_byte+0x44>)
    255a:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    255c:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    255e:	strh	r3, [r4, #0]
	}
}
    2560:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2562:	cmp.w	r1, #290	; 0x122
    2566:	bcc.n	2544 <sysex_byte+0x14>
    2568:	pop	{r3, r4, r5, pc}
    256a:	nop
    256c:	.word	0x1fff1860
    2570:	.word	0x1fff1cf6
    2574:	.word	0x1fff1cfc

00002578 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2578:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    257c:	ldr	r6, [pc, #132]	; (2604 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    257e:	ldr	r7, [pc, #136]	; (2608 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2580:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2582:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2584:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2586:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2588:	cbz	r1, 25b8 <usb_midi_write_packed+0x40>
    258a:	ldr	r5, [pc, #128]	; (260c <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    258c:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    258e:	add.w	r2, r1, r3, lsl #2
    2592:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2594:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2596:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2598:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    259c:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    259e:	bhi.n	25aa <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    25a0:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    25a2:	movs	r3, #0
    25a4:	strb	r3, [r7, #0]
    25a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    25aa:	movs	r3, #64	; 0x40
    25ac:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    25ae:	movs	r0, #4
    25b0:	bl	2c58 <usb_tx>
		tx_packet = NULL;
    25b4:	str	r4, [r6, #0]
    25b6:	b.n	25a2 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    25b8:	ldr.w	r9, [pc, #84]	; 2610 <usb_midi_write_packed+0x98>
    25bc:	ldrb.w	r3, [r9]
    25c0:	cmp	r3, #0
    25c2:	beq.n	25a6 <usb_midi_write_packed+0x2e>
    25c4:	ldr	r5, [pc, #68]	; (260c <usb_midi_write_packed+0x94>)
    25c6:	movw	r4, #48001	; 0xbb81
    25ca:	b.n	25de <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    25cc:	subs	r4, #1
    25ce:	beq.n	25f6 <usb_midi_write_packed+0x7e>
    25d0:	ldrb	r3, [r5, #0]
    25d2:	cbnz	r3, 25f6 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    25d4:	bl	375c <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    25d8:	ldrb.w	r3, [r9]
    25dc:	cbz	r3, 25fe <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    25de:	movs	r0, #4
    25e0:	bl	2b44 <usb_tx_packet_count>
    25e4:	cmp	r0, #5
    25e6:	bhi.n	25cc <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    25e8:	bl	2a7c <usb_malloc>
    25ec:	mov	r1, r0
    25ee:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    25f0:	cmp	r0, #0
    25f2:	beq.n	25cc <usb_midi_write_packed+0x54>
    25f4:	b.n	258c <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    25f6:	movs	r3, #1
    25f8:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    25fa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    25fe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2602:	nop
    2604:	.word	0x1fff187c
    2608:	.word	0x1fff1850
    260c:	.word	0x1fff1880
    2610:	.word	0x1fff198c

00002614 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    2614:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    2616:	ldr	r3, [pc, #32]	; (2638 <usb_midi_flush_output+0x24>)
    2618:	ldrb	r4, [r3, #0]
    261a:	cbnz	r4, 2626 <usb_midi_flush_output+0x12>
    261c:	ldr	r5, [pc, #28]	; (263c <usb_midi_flush_output+0x28>)
    261e:	ldr	r1, [r5, #0]
    2620:	cbz	r1, 2626 <usb_midi_flush_output+0x12>
    2622:	ldrh	r3, [r1, #2]
    2624:	cbnz	r3, 2628 <usb_midi_flush_output+0x14>
    2626:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2628:	lsls	r3, r3, #2
    262a:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    262c:	movs	r0, #4
    262e:	bl	2c58 <usb_tx>
		tx_packet = NULL;
    2632:	str	r4, [r5, #0]
    2634:	pop	{r3, r4, r5, pc}
    2636:	nop
    2638:	.word	0x1fff1850
    263c:	.word	0x1fff187c

00002640 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2640:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2644:	ldr	r6, [pc, #692]	; (28fc <usb_midi_read+0x2bc>)
    2646:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2648:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    264a:	cmp	r3, #0
    264c:	beq.w	2774 <usb_midi_read+0x134>
    2650:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2652:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2654:	lsrs	r1, r2, #2
    2656:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    265a:	adds	r2, #4
	if (index < rx_packet->len) {
    265c:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    265e:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2660:	bcs.n	26e8 <usb_midi_read+0xa8>
		rx_packet->index = index;
    2662:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2664:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2668:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    266c:	ldr	r1, [pc, #656]	; (2900 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    266e:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2672:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    2676:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    267a:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    267c:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2680:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2682:	bls.n	26ba <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2684:	subs	r3, r6, #2
    2686:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2688:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    268c:	bls.n	272c <usb_midi_read+0xec>
    268e:	cmp	r6, #5
    2690:	beq.n	2724 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2692:	cmp	r6, #4
    2694:	beq.w	29e0 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2698:	subs	r3, r6, #5
    269a:	cmp	r3, #2
    269c:	bls.n	279e <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    269e:	cmp	r6, #15
    26a0:	bne.n	26c0 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    26a2:	cmp	r0, #247	; 0xf7
    26a4:	bhi.n	272c <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    26a6:	cmp	r0, #240	; 0xf0
    26a8:	beq.n	26b0 <usb_midi_read+0x70>
    26aa:	ldr	r3, [pc, #600]	; (2904 <usb_midi_read+0x2c4>)
    26ac:	ldrh	r3, [r3, #0]
    26ae:	cbz	r3, 26c0 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    26b0:	bl	2530 <sysex_byte>
		}
	}
	return 0;
    26b4:	movs	r0, #0
    26b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    26ba:	cbz	r7, 26c6 <usb_midi_read+0x86>
    26bc:	cmp	r5, r7
    26be:	beq.n	26c6 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    26c0:	movs	r0, #0
    26c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    26c6:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    26c8:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    26cc:	beq.w	27de <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    26d0:	cmp	r6, #9
    26d2:	beq.n	26f8 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    26d4:	cmp	r6, #10
    26d6:	bne.w	2802 <usb_midi_read+0x1c2>
    26da:	cmp	r3, #10
    26dc:	bne.n	26c0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    26de:	ldr	r3, [pc, #552]	; (2908 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    26e0:	ldr	r2, [pc, #552]	; (290c <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    26e2:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    26e4:	movs	r1, #160	; 0xa0
    26e6:	b.n	27ec <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    26e8:	mov	r0, r3
    26ea:	bl	2abc <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    26ee:	movs	r0, #5
    26f0:	bl	2b08 <usb_rx>
    26f4:	str	r0, [r6, #0]
    26f6:	b.n	2664 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    26f8:	cmp	r3, #9
    26fa:	bne.n	26c0 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    26fc:	lsrs	r7, r4, #24
    26fe:	beq.w	29f8 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2702:	ldr	r3, [pc, #524]	; (2910 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2704:	ldr	r2, [pc, #516]	; (290c <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    2706:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2708:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    270a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    270e:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2710:	uxtb	r5, r5
    2712:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2714:	cmp	r3, #0
    2716:	beq.w	2854 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    271a:	mov	r2, r4
    271c:	mov	r1, r6
    271e:	mov	r0, r5
    2720:	blx	r3
    2722:	b.n	2854 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2724:	cmp	r0, #240	; 0xf0
    2726:	bls.n	27b0 <usb_midi_read+0x170>
    2728:	cmp	r0, #247	; 0xf7
    272a:	beq.n	27b0 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    272c:	subs	r0, #241	; 0xf1
    272e:	cmp	r0, #14
    2730:	bhi.n	26c0 <usb_midi_read+0x80>
    2732:	add	r3, pc, #4	; (adr r3, 2738 <usb_midi_read+0xf8>)
    2734:	ldr.w	pc, [r3, r0, lsl #2]
    2738:	.word	0x000028ef
    273c:	.word	0x000028d3
    2740:	.word	0x000028c1
    2744:	.word	0x000026c1
    2748:	.word	0x000026c1
    274c:	.word	0x000028b3
    2750:	.word	0x000026c1
    2754:	.word	0x00002993
    2758:	.word	0x000026c1
    275c:	.word	0x0000295d
    2760:	.word	0x00002977
    2764:	.word	0x0000289b
    2768:	.word	0x000026c1
    276c:	.word	0x00002883
    2770:	.word	0x00002867
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2774:	ldr	r3, [pc, #412]	; (2914 <usb_midi_read+0x2d4>)
    2776:	ldrb	r3, [r3, #0]
    2778:	cmp	r3, #0
    277a:	beq.n	26c0 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    277c:	movs	r0, #5
    277e:	bl	2b08 <usb_rx>
    2782:	mov	r3, r0
    2784:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    2786:	cmp	r0, #0
    2788:	beq.n	26c0 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    278a:	ldrh	r5, [r0, #0]
    278c:	cmp	r5, #0
    278e:	bne.w	2652 <usb_midi_read+0x12>
			usb_free(rx_packet);
    2792:	bl	2abc <usb_free>
			rx_packet = NULL;
    2796:	str	r5, [r6, #0]
			return 0;
    2798:	mov	r0, r5
    279a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    279e:	bl	2530 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    27a2:	ubfx	r0, r4, #16, #8
    27a6:	bl	2530 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    27aa:	cmp	r6, #7
    27ac:	bne.n	27b4 <usb_midi_read+0x174>
    27ae:	lsrs	r0, r4, #24
    27b0:	bl	2530 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    27b4:	ldr	r3, [pc, #332]	; (2904 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    27b6:	ldr	r2, [pc, #352]	; (2918 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    27b8:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    27ba:	ldr	r0, [pc, #352]	; (291c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    27bc:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    27be:	ldr	r5, [pc, #352]	; (2920 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    27c0:	ldr	r2, [pc, #328]	; (290c <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    27c2:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    27c4:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    27c6:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    27c8:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    27ca:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    27cc:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    27ce:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    27d0:	cbz	r4, 2816 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    27d2:	movs	r2, #1
    27d4:	ldr	r0, [pc, #332]	; (2924 <usb_midi_read+0x2e4>)
    27d6:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    27d8:	movs	r0, #1
    27da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    27de:	cmp	r3, #8
    27e0:	bne.w	26c0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    27e4:	ldr	r3, [pc, #320]	; (2928 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    27e6:	ldr	r2, [pc, #292]	; (290c <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    27e8:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    27ea:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    27ec:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    27f0:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    27f2:	uxtb	r5, r5
    27f4:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    27f6:	cbz	r3, 2854 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    27f8:	mov	r0, r5
    27fa:	mov	r2, r4
    27fc:	mov	r1, r6
    27fe:	blx	r3
    2800:	b.n	2854 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    2802:	cmp	r6, #11
    2804:	bne.n	282a <usb_midi_read+0x1ea>
    2806:	cmp	r3, #11
    2808:	bne.w	26c0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    280c:	ldr	r3, [pc, #284]	; (292c <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    280e:	ldr	r2, [pc, #252]	; (290c <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    2810:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2812:	movs	r1, #176	; 0xb0
    2814:	b.n	27ec <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    2816:	ldr	r3, [pc, #280]	; (2930 <usb_midi_read+0x2f0>)
    2818:	ldr	r3, [r3, #0]
    281a:	cmp	r3, #0
    281c:	beq.w	2a16 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    2820:	ldr	r0, [pc, #256]	; (2924 <usb_midi_read+0x2e4>)
    2822:	blx	r3
		}
		return 1;
    2824:	movs	r0, #1
    2826:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    282a:	cmp	r6, #12
    282c:	bne.w	2a30 <usb_midi_read+0x3f0>
    2830:	cmp	r3, #12
    2832:	bne.w	26c0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2836:	ldr	r3, [pc, #252]	; (2934 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2838:	ldr	r2, [pc, #208]	; (290c <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    283a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    283c:	movs	r1, #192	; 0xc0
    283e:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2840:	uxtb	r5, r5
    2842:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2846:	cmp	r3, #0
    2848:	beq.w	29dc <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    284c:	mov	r0, r5
    284e:	mov	r1, r6
    2850:	lsrs	r4, r4, #24
    2852:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2854:	ldr	r1, [pc, #224]	; (2938 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2856:	ldr	r2, [pc, #196]	; (291c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2858:	ldr	r3, [pc, #196]	; (2920 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    285a:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    285c:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    285e:	strb	r4, [r3, #0]
		return 1;
    2860:	movs	r0, #1
    2862:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2866:	ldr	r3, [pc, #212]	; (293c <usb_midi_read+0x2fc>)
    2868:	ldr	r3, [r3, #0]
    286a:	cmp	r3, #0
    286c:	beq.w	2a1c <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2870:	blx	r3
    2872:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2876:	ldr	r3, [pc, #148]	; (290c <usb_midi_read+0x2cc>)
    2878:	uxtb	r5, r5
    287a:	lsrs	r4, r4, #24
    287c:	strb.w	r8, [r3]
		goto return_message;
    2880:	b.n	2854 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    2882:	ldr	r3, [pc, #188]	; (2940 <usb_midi_read+0x300>)
    2884:	ldr	r3, [r3, #0]
    2886:	cmp	r3, #0
    2888:	bne.n	2870 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    288a:	ldr	r3, [pc, #184]	; (2944 <usb_midi_read+0x304>)
    288c:	ldr	r3, [r3, #0]
    288e:	cbz	r3, 28ba <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2890:	movs	r0, #254	; 0xfe
    2892:	blx	r3
    2894:	ubfx	r6, r4, #16, #8
    2898:	b.n	2876 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    289a:	ldr	r3, [pc, #172]	; (2948 <usb_midi_read+0x308>)
    289c:	ldr	r3, [r3, #0]
    289e:	cmp	r3, #0
    28a0:	bne.n	2870 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    28a2:	ldr	r3, [pc, #160]	; (2944 <usb_midi_read+0x304>)
    28a4:	ldr	r3, [r3, #0]
    28a6:	cbz	r3, 28ba <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    28a8:	movs	r0, #252	; 0xfc
    28aa:	blx	r3
    28ac:	ubfx	r6, r4, #16, #8
    28b0:	b.n	2876 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    28b2:	ldr	r3, [pc, #152]	; (294c <usb_midi_read+0x30c>)
    28b4:	ldr	r3, [r3, #0]
    28b6:	cmp	r3, #0
    28b8:	bne.n	2870 <usb_midi_read+0x230>
    28ba:	ubfx	r6, r4, #16, #8
    28be:	b.n	2876 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    28c0:	ldr	r3, [pc, #140]	; (2950 <usb_midi_read+0x310>)
    28c2:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    28c4:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    28c8:	cmp	r3, #0
    28ca:	beq.n	2876 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    28cc:	mov	r0, r6
    28ce:	blx	r3
    28d0:	b.n	2876 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    28d2:	ldr	r3, [pc, #128]	; (2954 <usb_midi_read+0x314>)
    28d4:	ldr	r2, [r3, #0]
    28d6:	cmp	r2, #0
    28d8:	beq.n	28ba <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    28da:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    28dc:	lsrs	r3, r4, #17
    28de:	and.w	r0, r6, #127	; 0x7f
    28e2:	and.w	r3, r3, #16256	; 0x3f80
    28e6:	orrs	r0, r3
    28e8:	uxtb	r6, r6
    28ea:	blx	r2
    28ec:	b.n	2876 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    28ee:	ldr	r3, [pc, #104]	; (2958 <usb_midi_read+0x318>)
    28f0:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    28f2:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    28f6:	cmp	r3, #0
    28f8:	bne.n	28cc <usb_midi_read+0x28c>
    28fa:	b.n	2876 <usb_midi_read+0x236>
    28fc:	.word	0x1fff1888
    2900:	.word	0x1fff1cfa
    2904:	.word	0x1fff1cf6
    2908:	.word	0x1fff1864
    290c:	.word	0x1fff1cf4
    2910:	.word	0x1fff1898
    2914:	.word	0x1fff198c
    2918:	.word	0x1fff1860
    291c:	.word	0x1fff1cf8
    2920:	.word	0x1fff1cf9
    2924:	.word	0x1fff1cfc
    2928:	.word	0x1fff1890
    292c:	.word	0x1fff1894
    2930:	.word	0x1fff1878
    2934:	.word	0x1fff1854
    2938:	.word	0x1fff1cfb
    293c:	.word	0x1fff1840
    2940:	.word	0x1fff1844
    2944:	.word	0x1fff1848
    2948:	.word	0x1fff1884
    294c:	.word	0x1fff1874
    2950:	.word	0x1fff188c
    2954:	.word	0x1fff185c
    2958:	.word	0x1fff1870
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    295c:	ldr	r3, [pc, #252]	; (2a5c <usb_midi_read+0x41c>)
    295e:	ldr	r3, [r3, #0]
    2960:	cmp	r3, #0
    2962:	bne.n	2870 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2964:	ldr	r3, [pc, #248]	; (2a60 <usb_midi_read+0x420>)
    2966:	ldr	r3, [r3, #0]
    2968:	cmp	r3, #0
    296a:	beq.n	28ba <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    296c:	movs	r0, #250	; 0xfa
    296e:	blx	r3
    2970:	ubfx	r6, r4, #16, #8
    2974:	b.n	2876 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2976:	ldr	r3, [pc, #236]	; (2a64 <usb_midi_read+0x424>)
    2978:	ldr	r3, [r3, #0]
    297a:	cmp	r3, #0
    297c:	bne.w	2870 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2980:	ldr	r3, [pc, #220]	; (2a60 <usb_midi_read+0x420>)
    2982:	ldr	r3, [r3, #0]
    2984:	cmp	r3, #0
    2986:	beq.n	28ba <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2988:	movs	r0, #251	; 0xfb
    298a:	blx	r3
    298c:	ubfx	r6, r4, #16, #8
    2990:	b.n	2876 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2992:	ldr	r3, [pc, #212]	; (2a68 <usb_midi_read+0x428>)
    2994:	ldr	r3, [r3, #0]
    2996:	cmp	r3, #0
    2998:	bne.w	2870 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    299c:	ldr	r3, [pc, #192]	; (2a60 <usb_midi_read+0x420>)
    299e:	ldr	r3, [r3, #0]
    29a0:	cmp	r3, #0
    29a2:	beq.n	28ba <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    29a4:	movs	r0, #248	; 0xf8
    29a6:	blx	r3
    29a8:	ubfx	r6, r4, #16, #8
    29ac:	b.n	2876 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    29ae:	cmp	r3, #14
    29b0:	bne.w	26c0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    29b4:	ldr	r2, [pc, #180]	; (2a6c <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    29b6:	ldr	r3, [pc, #184]	; (2a70 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    29b8:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    29ba:	movs	r1, #224	; 0xe0
    29bc:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    29be:	cmp	r2, #0
    29c0:	beq.n	2a52 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    29c2:	lsrs	r6, r4, #16
    29c4:	lsrs	r1, r4, #17
    29c6:	and.w	r3, r6, #127	; 0x7f
    29ca:	and.w	r1, r1, #16256	; 0x3f80
    29ce:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    29d0:	uxtb	r5, r5
    29d2:	sub.w	r1, r1, #8192	; 0x2000
    29d6:	mov	r0, r5
    29d8:	blx	r2
    29da:	uxtb	r6, r6
    29dc:	lsrs	r4, r4, #24
    29de:	b.n	2854 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    29e0:	bl	2530 <sysex_byte>
		sysex_byte(n >> 16);
    29e4:	ubfx	r0, r4, #16, #8
    29e8:	bl	2530 <sysex_byte>
		sysex_byte(n >> 24);
    29ec:	lsrs	r0, r4, #24
    29ee:	bl	2530 <sysex_byte>
		return 0;
    29f2:	movs	r0, #0
    29f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    29f8:	ldr	r3, [pc, #120]	; (2a74 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    29fa:	ldr	r2, [pc, #116]	; (2a70 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    29fc:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    29fe:	movs	r1, #128	; 0x80
    2a00:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2a02:	uxtb	r5, r5
    2a04:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2a08:	cbz	r3, 2a2c <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2a0a:	mov	r1, r6
    2a0c:	mov	r0, r5
    2a0e:	mov	r2, r7
    2a10:	blx	r3
    2a12:	mov	r4, r7
    2a14:	b.n	2854 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2a16:	movs	r0, #1
    2a18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2a1c:	ldr	r3, [pc, #64]	; (2a60 <usb_midi_read+0x420>)
    2a1e:	ldr	r3, [r3, #0]
    2a20:	cmp	r3, #0
    2a22:	beq.w	28ba <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    2a26:	movs	r0, #255	; 0xff
    2a28:	blx	r3
    2a2a:	b.n	28ba <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2a2c:	mov	r4, r3
    2a2e:	b.n	2854 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2a30:	cmp	r6, #13
    2a32:	bne.n	29ae <usb_midi_read+0x36e>
    2a34:	cmp	r3, #13
    2a36:	bne.w	26c0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2a3a:	ldr	r3, [pc, #60]	; (2a78 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2a3c:	ldr	r2, [pc, #48]	; (2a70 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2a3e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2a40:	movs	r1, #208	; 0xd0
    2a42:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2a44:	uxtb	r5, r5
    2a46:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2a4a:	cmp	r3, #0
    2a4c:	bne.w	284c <usb_midi_read+0x20c>
    2a50:	b.n	29dc <usb_midi_read+0x39c>
    2a52:	ubfx	r6, r4, #16, #8
    2a56:	uxtb	r5, r5
    2a58:	lsrs	r4, r4, #24
    2a5a:	b.n	2854 <usb_midi_read+0x214>
    2a5c:	.word	0x1fff186c
    2a60:	.word	0x1fff1848
    2a64:	.word	0x1fff184c
    2a68:	.word	0x1fff183c
    2a6c:	.word	0x1fff1858
    2a70:	.word	0x1fff1cf4
    2a74:	.word	0x1fff1890
    2a78:	.word	0x1fff1868

00002a7c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2a7c:	cpsid	i
	avail = usb_buffer_available;
    2a7e:	ldr	r0, [pc, #52]	; (2ab4 <usb_malloc+0x38>)
    2a80:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2a82:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2a86:	cmp	r3, #29
    2a88:	bgt.n	2aac <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2a8a:	mov.w	r1, #2147483648	; 0x80000000
    2a8e:	lsrs	r1, r3
    2a90:	bic.w	r2, r2, r1
    2a94:	str	r2, [r0, #0]
	__enable_irq();
    2a96:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2a98:	ldr	r0, [pc, #28]	; (2ab8 <usb_malloc+0x3c>)
    2a9a:	add.w	r3, r3, r3, lsl #3
    2a9e:	lsls	r3, r3, #3
    2aa0:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2aa2:	movs	r1, #0
    2aa4:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2aa6:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2aa8:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2aaa:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2aac:	cpsie	i
		return NULL;
    2aae:	movs	r0, #0
    2ab0:	bx	lr
    2ab2:	nop
    2ab4:	.word	0x1fff0c5c
    2ab8:	.word	0x1fff03d0

00002abc <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2abc:	ldr	r3, [pc, #52]	; (2af4 <usb_free+0x38>)
    2abe:	ldr	r2, [pc, #56]	; (2af8 <usb_free+0x3c>)
    2ac0:	subs	r3, r0, r3
    2ac2:	umull	r2, r3, r2, r3
    2ac6:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2ac8:	cmp	r3, #29
    2aca:	bhi.n	2ae6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2acc:	ldr	r2, [pc, #44]	; (2afc <usb_free+0x40>)
    2ace:	ldrb	r2, [r2, #0]
    2ad0:	cbnz	r2, 2ae8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2ad2:	cpsid	i
	usb_buffer_available |= mask;
    2ad4:	ldr	r0, [pc, #40]	; (2b00 <usb_free+0x44>)
    2ad6:	mov.w	r1, #2147483648	; 0x80000000
    2ada:	ldr	r2, [r0, #0]
    2adc:	lsr.w	r3, r1, r3
    2ae0:	orrs	r2, r3
    2ae2:	str	r2, [r0, #0]
	__enable_irq();
    2ae4:	cpsie	i
    2ae6:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2ae8:	ldr	r2, [pc, #24]	; (2b04 <usb_free+0x48>)
    2aea:	ldrb	r2, [r2, #0]
    2aec:	cmp	r2, #0
    2aee:	beq.n	2ad2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2af0:	b.w	2b70 <usb_rx_memory>
    2af4:	.word	0x1fff03d0
    2af8:	.word	0x38e38e39
    2afc:	.word	0x1fff1981
    2b00:	.word	0x1fff0c5c
    2b04:	.word	0x1fff198c

00002b08 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2b08:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2b0a:	cmp	r3, #4
    2b0c:	bhi.n	2b38 <usb_rx+0x30>
	__disable_irq();
    2b0e:	cpsid	i
	ret = rx_first[endpoint];
    2b10:	ldr	r1, [pc, #40]	; (2b3c <usb_rx+0x34>)
    2b12:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2b16:	cbz	r0, 2b34 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2b18:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2b1a:	ldr	r4, [pc, #36]	; (2b40 <usb_rx+0x38>)
    2b1c:	ldrh	r5, [r0, #0]
    2b1e:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2b22:	ldr	r6, [r0, #4]
    2b24:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2b28:	subs	r2, r2, r5
    2b2a:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2b2e:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2b30:	pop	{r4, r5, r6}
    2b32:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2b34:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2b36:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2b38:	movs	r0, #0
    2b3a:	bx	lr
    2b3c:	.word	0x1fff18f8
    2b40:	.word	0x1fff1e20

00002b44 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2b44:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2b46:	cmp	r0, #4
    2b48:	bhi.n	2b62 <usb_tx_packet_count+0x1e>
	__disable_irq();
    2b4a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2b4c:	ldr	r3, [pc, #28]	; (2b6c <usb_tx_packet_count+0x28>)
    2b4e:	ldr.w	r3, [r3, r0, lsl #2]
    2b52:	cbz	r3, 2b66 <usb_tx_packet_count+0x22>
    2b54:	movs	r0, #0
    2b56:	ldr	r3, [r3, #4]
    2b58:	adds	r0, #1
    2b5a:	cmp	r3, #0
    2b5c:	bne.n	2b56 <usb_tx_packet_count+0x12>
	__enable_irq();
    2b5e:	cpsie	i
	return count;
    2b60:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2b62:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2b64:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2b66:	mov	r0, r3
    2b68:	b.n	2b5e <usb_tx_packet_count+0x1a>
    2b6a:	nop
    2b6c:	.word	0x1fff1950

00002b70 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2b70:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2b72:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b74:	ldr	r2, [pc, #204]	; (2c44 <usb_rx_memory+0xd4>)
    2b76:	ldrb	r3, [r2, #0]
    2b78:	lsls	r3, r3, #28
    2b7a:	bpl.n	2b8a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b7c:	ldr	r3, [pc, #200]	; (2c48 <usb_rx_memory+0xd8>)
    2b7e:	ldr	r1, [r3, #32]
    2b80:	cmp	r1, #0
    2b82:	beq.n	2c0c <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b84:	ldr	r1, [r3, #40]	; 0x28
    2b86:	cmp	r1, #0
    2b88:	beq.n	2c28 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b8a:	ldrb	r3, [r2, #1]
    2b8c:	lsls	r5, r3, #28
    2b8e:	bpl.n	2b9e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b90:	ldr	r3, [pc, #180]	; (2c48 <usb_rx_memory+0xd8>)
    2b92:	ldr	r1, [r3, #64]	; 0x40
    2b94:	cmp	r1, #0
    2b96:	beq.n	2c34 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b98:	ldr	r1, [r3, #72]	; 0x48
    2b9a:	cmp	r1, #0
    2b9c:	beq.n	2c2c <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b9e:	ldrb	r3, [r2, #2]
    2ba0:	lsls	r4, r3, #28
    2ba2:	bpl.n	2bb2 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2ba4:	ldr	r3, [pc, #160]	; (2c48 <usb_rx_memory+0xd8>)
    2ba6:	ldr	r1, [r3, #96]	; 0x60
    2ba8:	cmp	r1, #0
    2baa:	beq.n	2c38 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2bac:	ldr	r1, [r3, #104]	; 0x68
    2bae:	cmp	r1, #0
    2bb0:	beq.n	2c30 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2bb2:	ldrb	r3, [r2, #3]
    2bb4:	lsls	r1, r3, #28
    2bb6:	bpl.n	2bc8 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2bb8:	ldr	r3, [pc, #140]	; (2c48 <usb_rx_memory+0xd8>)
    2bba:	ldr.w	r1, [r3, #128]	; 0x80
    2bbe:	cmp	r1, #0
    2bc0:	beq.n	2c40 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2bc2:	ldr.w	r1, [r3, #136]	; 0x88
    2bc6:	cbz	r1, 2bee <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2bc8:	ldrb	r3, [r2, #4]
    2bca:	lsls	r3, r3, #28
    2bcc:	bpl.n	2be0 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2bce:	ldr	r3, [pc, #120]	; (2c48 <usb_rx_memory+0xd8>)
    2bd0:	ldr.w	r2, [r3, #160]	; 0xa0
    2bd4:	cmp	r2, #0
    2bd6:	beq.n	2c3c <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2bd8:	ldr.w	r2, [r3, #168]	; 0xa8
    2bdc:	movs	r4, #21
    2bde:	cbz	r2, 2bf0 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2be0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2be2:	ldr	r3, [pc, #104]	; (2c4c <usb_rx_memory+0xdc>)
    2be4:	movs	r2, #0
    2be6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2be8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2bea:	b.w	2abc <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2bee:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2bf0:	ldr	r1, [pc, #88]	; (2c4c <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2bf2:	ldr	r5, [pc, #92]	; (2c50 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2bf4:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2bf6:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2bfa:	add.w	r3, r3, r4, lsl #3
    2bfe:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2c00:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2c02:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2c04:	strb	r2, [r1, #0]
				__enable_irq();
    2c06:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2c08:	pop	{r4, r5}
    2c0a:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2c0c:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2c0e:	ldr	r4, [pc, #60]	; (2c4c <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2c10:	ldr	r5, [pc, #64]	; (2c54 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2c12:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2c14:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2c18:	add.w	r3, r3, r2, lsl #3
    2c1c:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2c1e:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2c20:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2c22:	strb	r2, [r4, #0]
				__enable_irq();
    2c24:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2c26:	b.n	2c08 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2c28:	movs	r4, #5
    2c2a:	b.n	2bf0 <usb_rx_memory+0x80>
    2c2c:	movs	r4, #9
    2c2e:	b.n	2bf0 <usb_rx_memory+0x80>
    2c30:	movs	r4, #13
    2c32:	b.n	2bf0 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2c34:	movs	r2, #8
    2c36:	b.n	2c0e <usb_rx_memory+0x9e>
    2c38:	movs	r2, #12
    2c3a:	b.n	2c0e <usb_rx_memory+0x9e>
    2c3c:	movs	r2, #20
    2c3e:	b.n	2c0e <usb_rx_memory+0x9e>
    2c40:	movs	r2, #16
    2c42:	b.n	2c0e <usb_rx_memory+0x9e>
    2c44:	.word	0x00004ee8
    2c48:	.word	0x1fff0000
    2c4c:	.word	0x1fff1981
    2c50:	.word	0x004000c8
    2c54:	.word	0x00400088

00002c58 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2c58:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2c5a:	cmp	r3, #4
    2c5c:	bhi.n	2c9a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2c5e:	ldr	r2, [pc, #108]	; (2ccc <usb_tx+0x74>)
    2c60:	lsls	r0, r0, #5
    2c62:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2c66:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2c68:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2c6a:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2c6c:	ldr	r4, [pc, #96]	; (2cd0 <usb_tx+0x78>)
    2c6e:	ldrb	r2, [r4, r3]
    2c70:	cmp	r2, #3
    2c72:	bhi.n	2cac <usb_tx+0x54>
    2c74:	tbb	[pc, r2]
    2c78:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2c7c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c7e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2c80:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c82:	tst.w	r0, #8
    2c86:	ite	ne
    2c88:	movne	r3, #200	; 0xc8
    2c8a:	moveq	r3, #136	; 0x88
    2c8c:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2c90:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c92:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2c94:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2c96:	cpsie	i
}
    2c98:	pop	{r4, r5}
    2c9a:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2c9c:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2c9e:	movs	r2, #2
		break;
    2ca0:	b.n	2c7e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2ca2:	movs	r2, #5
    2ca4:	b.n	2c7e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2ca6:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2ca8:	movs	r2, #4
		break;
    2caa:	b.n	2c7e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2cac:	ldr	r2, [pc, #36]	; (2cd4 <usb_tx+0x7c>)
    2cae:	ldr.w	r0, [r2, r3, lsl #2]
    2cb2:	cbz	r0, 2cc4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2cb4:	ldr	r2, [pc, #32]	; (2cd8 <usb_tx+0x80>)
    2cb6:	ldr.w	r0, [r2, r3, lsl #2]
    2cba:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2cbc:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2cc0:	cpsie	i
		return;
    2cc2:	b.n	2c98 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2cc4:	str.w	r1, [r2, r3, lsl #2]
    2cc8:	ldr	r2, [pc, #12]	; (2cd8 <usb_tx+0x80>)
    2cca:	b.n	2cbc <usb_tx+0x64>
    2ccc:	.word	0x1fff0000
    2cd0:	.word	0x1fff1990
    2cd4:	.word	0x1fff1950
    2cd8:	.word	0x1fff1964

00002cdc <usb_isr>:
}



void usb_isr(void)
{
    2cdc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2ce0:	ldr.w	fp, [pc, #776]	; 2fec <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2ce4:	ldr.w	sl, [pc, #776]	; 2ff0 <usb_isr+0x314>
}



void usb_isr(void)
{
    2ce8:	sub	sp, #28
    2cea:	b.n	2d76 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2cec:	ldr	r7, [pc, #680]	; (2f98 <usb_isr+0x2bc>)
    2cee:	mov.w	r8, r3, lsr #2
    2cf2:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2cf6:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2cf8:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2cfc:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2d00:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2d02:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2d06:	and.w	r4, r3, #255	; 0xff
    2d0a:	cmp	r3, #0
    2d0c:	bne.w	2f10 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2d10:	ldr.w	r3, [r7, r8, lsl #3]
    2d14:	lsrs	r3, r3, #16
    2d16:	uxth	r1, r3
    2d18:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2d1c:	cmp	r3, #0
    2d1e:	beq.w	2efe <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2d22:	ldr	r3, [pc, #632]	; (2f9c <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2d24:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2d28:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2d2c:	ldr.w	r2, [r3, r6, lsl #2]
    2d30:	cmp	r2, #0
    2d32:	beq.w	31a0 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2d36:	ldr	r5, [pc, #616]	; (2fa0 <usb_isr+0x2c4>)
    2d38:	ldr.w	r3, [r5, r6, lsl #2]
    2d3c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2d3e:	ldr	r4, [pc, #612]	; (2fa4 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2d40:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2d44:	ldrh.w	r3, [r4, r6, lsl #1]
    2d48:	add	r1, r3
    2d4a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2d4e:	bl	2a7c <usb_malloc>
					if (packet) {
    2d52:	cmp	r0, #0
    2d54:	beq.w	3192 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2d58:	ldr	r2, [pc, #588]	; (2fa8 <usb_isr+0x2cc>)
    2d5a:	ldr	r3, [pc, #592]	; (2fac <usb_isr+0x2d0>)
    2d5c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2d60:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2d64:	it	ne
    2d66:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2d68:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2d6c:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2d70:	movs	r3, #8
    2d72:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2d76:	ldrb.w	r4, [fp]
    2d7a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2d7c:	lsls	r0, r4, #29
    2d7e:	bpl.n	2dba <usb_isr+0xde>
		if (usb_configuration) {
    2d80:	ldr	r3, [pc, #556]	; (2fb0 <usb_isr+0x2d4>)
    2d82:	ldrb	r3, [r3, #0]
    2d84:	cbz	r3, 2db4 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2d86:	ldr	r1, [pc, #556]	; (2fb4 <usb_isr+0x2d8>)
    2d88:	ldrb	r2, [r1, #0]
			if (t) {
    2d8a:	and.w	r3, r2, #255	; 0xff
    2d8e:	cbz	r2, 2d9a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2d90:	subs	r3, #1
    2d92:	uxtb	r3, r3
    2d94:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2d96:	cbnz	r3, 2d9a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2d98:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2d9a:	ldr	r1, [pc, #540]	; (2fb8 <usb_isr+0x2dc>)
    2d9c:	ldrb	r2, [r1, #0]
			if (t) {
    2d9e:	and.w	r3, r2, #255	; 0xff
    2da2:	cbz	r2, 2db0 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2da4:	subs	r3, #1
    2da6:	uxtb	r3, r3
    2da8:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2daa:	cmp	r3, #0
    2dac:	beq.w	313e <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2db0:	bl	2614 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2db4:	movs	r3, #4
    2db6:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2dba:	and.w	r3, r4, #8
    2dbe:	and.w	r2, r3, #255	; 0xff
    2dc2:	cmp	r3, #0
    2dc4:	beq.w	2f58 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2dc8:	ldrb.w	r3, [sl]
    2dcc:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2dce:	lsrs	r6, r3, #4
    2dd0:	bne.n	2cec <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2dd2:	lsrs	r4, r3, #2
    2dd4:	ldr.w	r9, [pc, #448]	; 2f98 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2dd8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2ddc:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2de0:	ubfx	r2, r2, #2, #4
    2de4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2de6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2de8:	cmp	r2, #12
    2dea:	bhi.w	2ef6 <usb_isr+0x21a>
    2dee:	tbb	[pc, r2]
    2df2:	.short	0x7878
    2df4:	.word	0x82828282
    2df8:	.word	0x82438282
    2dfc:	.short	0x8282
    2dfe:	.byte	0x07
    2dff:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2e00:	ldr	r0, [r1, #0]
    2e02:	ldr	r5, [pc, #440]	; (2fbc <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2e04:	ldr	r3, [pc, #416]	; (2fa8 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2e06:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2e08:	ldr	r7, [pc, #436]	; (2fc0 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2e0a:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2e0e:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2e10:	ldr	r6, [pc, #432]	; (2fc4 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2e12:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2e14:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2e18:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2e1a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2e1c:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2e1e:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2e22:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2e24:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2e28:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2e2c:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2e2e:	bhi.w	2ff4 <usb_isr+0x318>
    2e32:	cmp.w	r1, #1664	; 0x680
    2e36:	bcs.w	3460 <usb_isr+0x784>
    2e3a:	cmp.w	r1, #258	; 0x102
    2e3e:	beq.w	320e <usb_isr+0x532>
    2e42:	bhi.w	31d8 <usb_isr+0x4fc>
    2e46:	cmp	r1, #128	; 0x80
    2e48:	beq.w	3494 <usb_isr+0x7b8>
    2e4c:	cmp	r1, #130	; 0x82
    2e4e:	bne.w	321a <usb_isr+0x53e>
    2e52:	ldrh	r1, [r5, #4]
    2e54:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2e58:	cmp	r1, #5
    2e5a:	bhi.w	321a <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2e5e:	ldr	r3, [pc, #360]	; (2fc8 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2e60:	ldr	r4, [pc, #360]	; (2fcc <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2e62:	lsls	r1, r1, #2
    2e64:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2e66:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2e68:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2e6a:	ldrb	r2, [r3, #0]
    2e6c:	lsls	r3, r2, #30
    2e6e:	bpl.w	35a4 <usb_isr+0x8c8>
    2e72:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2e74:	movs	r0, #2
    2e76:	b.n	32a2 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2e78:	ldr	r7, [pc, #324]	; (2fc0 <usb_isr+0x2e4>)
    2e7a:	ldr	r2, [r7, #0]
		if (data) {
    2e7c:	cbz	r2, 2ecc <usb_isr+0x1f0>
			size = ep0_tx_len;
    2e7e:	ldr	r3, [pc, #336]	; (2fd0 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e80:	ldr	r6, [pc, #320]	; (2fc4 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e82:	ldr	r1, [pc, #336]	; (2fd4 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2e84:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e86:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e88:	ldrb	r5, [r1, #0]
    2e8a:	cmp	r0, #64	; 0x40
    2e8c:	mov	lr, r0
    2e8e:	orr.w	r8, r5, #2
    2e92:	it	cs
    2e94:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e98:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2e9a:	eor.w	r4, r4, #1
    2e9e:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2ea0:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ea4:	ite	eq
    2ea6:	moveq	r4, #136	; 0x88
    2ea8:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2eaa:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2eae:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2eb0:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2eb4:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2eb8:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2eba:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ebc:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2ec0:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2ec2:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2ec4:	cmp	r0, #0
    2ec6:	beq.w	3036 <usb_isr+0x35a>
    2eca:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2ecc:	ldr	r3, [pc, #236]	; (2fbc <usb_isr+0x2e0>)
    2ece:	ldrh	r2, [r3, #0]
    2ed0:	cmp.w	r2, #1280	; 0x500
    2ed4:	bne.n	2ef6 <usb_isr+0x21a>
			setup.bRequest = 0;
    2ed6:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2ed8:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2eda:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2edc:	ldr	r3, [pc, #248]	; (2fd8 <usb_isr+0x2fc>)
    2ede:	strb	r2, [r3, #0]
    2ee0:	b.n	2ef6 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2ee2:	ldr	r2, [pc, #216]	; (2fbc <usb_isr+0x2e0>)
    2ee4:	ldrh	r0, [r2, #0]
    2ee6:	movw	r2, #8225	; 0x2021
    2eea:	cmp	r0, r2
    2eec:	beq.w	3040 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2ef0:	ldr	r2, [pc, #180]	; (2fa8 <usb_isr+0x2cc>)
    2ef2:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2ef6:	ldr	r2, [pc, #228]	; (2fdc <usb_isr+0x300>)
    2ef8:	movs	r3, #1
    2efa:	strb	r3, [r2, #0]
    2efc:	b.n	2d70 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2efe:	ldr	r2, [pc, #168]	; (2fa8 <usb_isr+0x2cc>)
    2f00:	ldr	r3, [pc, #168]	; (2fac <usb_isr+0x2d0>)
    2f02:	tst.w	r9, #8
    2f06:	it	ne
    2f08:	movne	r3, r2
    2f0a:	str.w	r3, [r7, r8, lsl #3]
    2f0e:	b.n	2d70 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2f10:	bl	2abc <usb_free>
				packet = tx_first[endpoint];
    2f14:	ldr	r2, [pc, #200]	; (2fe0 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2f16:	ldr	r1, [pc, #204]	; (2fe4 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2f18:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2f1c:	cmp	r3, #0
    2f1e:	beq.w	31a8 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2f22:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2f24:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2f26:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2f2a:	add.w	r2, r3, #8
    2f2e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2f32:	cmp	r4, #3
    2f34:	bhi.n	2f42 <usb_isr+0x266>
    2f36:	tbb	[pc, r4]
    2f3a:	.short	0x022c
    2f3c:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2f3e:	movs	r2, #2
    2f40:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2f42:	ldrh	r2, [r3, #0]
    2f44:	tst.w	r9, #8
    2f48:	ite	eq
    2f4a:	moveq	r3, #136	; 0x88
    2f4c:	movne	r3, #200	; 0xc8
    2f4e:	orr.w	r3, r3, r2, lsl #16
    2f52:	str.w	r3, [r7, r8, lsl #3]
    2f56:	b.n	2d70 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2f58:	lsls	r0, r4, #31
    2f5a:	bmi.w	3144 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2f5e:	lsls	r1, r4, #24
    2f60:	bmi.w	31c4 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2f64:	lsls	r2, r4, #30
    2f66:	bpl.n	2f76 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2f68:	ldr	r2, [pc, #124]	; (2fe8 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2f6a:	ldr	r1, [pc, #128]	; (2fec <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2f6c:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2f6e:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2f70:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2f72:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2f74:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2f76:	lsls	r3, r4, #27
    2f78:	bpl.n	2f80 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2f7a:	ldr	r3, [pc, #112]	; (2fec <usb_isr+0x310>)
    2f7c:	movs	r2, #16
    2f7e:	strb	r2, [r3, #0]
	}

}
    2f80:	add	sp, #28
    2f82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2f86:	movs	r2, #4
    2f88:	strb	r2, [r1, r6]
						break;
    2f8a:	b.n	2f42 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2f8c:	movs	r2, #5
    2f8e:	strb	r2, [r1, r6]
						break;
    2f90:	b.n	2f42 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2f92:	movs	r2, #3
    2f94:	strb	r2, [r1, r6]
						break;
    2f96:	b.n	2f42 <usb_isr+0x266>
    2f98:	.word	0x1fff0000
    2f9c:	.word	0x1fff18f8
    2fa0:	.word	0x1fff18a0
    2fa4:	.word	0x1fff1e20
    2fa8:	.word	0x004000c8
    2fac:	.word	0x00400088
    2fb0:	.word	0x1fff198c
    2fb4:	.word	0x1fff190d
    2fb8:	.word	0x1fff1820
    2fbc:	.word	0x1fff1978
    2fc0:	.word	0x1fff189c
    2fc4:	.word	0x1fff190c
    2fc8:	.word	0x400720c0
    2fcc:	.word	0x1fff1984
    2fd0:	.word	0x1fff18b4
    2fd4:	.word	0x1fff1980
    2fd8:	.word	0x40072098
    2fdc:	.word	0x40072094
    2fe0:	.word	0x1fff1950
    2fe4:	.word	0x1fff1990
    2fe8:	.word	0x40072088
    2fec:	.word	0x40072080
    2ff0:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2ff4:	movw	r4, #8225	; 0x2021
    2ff8:	cmp	r1, r4
    2ffa:	beq.w	3136 <usb_isr+0x45a>
    2ffe:	bhi.n	3094 <usb_isr+0x3b8>
    3000:	cmp.w	r1, #2176	; 0x880
    3004:	beq.w	329a <usb_isr+0x5be>
    3008:	cmp.w	r1, #2304	; 0x900
    300c:	bne.w	321a <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3010:	ldr	r2, [pc, #712]	; (32dc <usb_isr+0x600>)
    3012:	ldr	r4, [pc, #716]	; (32e0 <usb_isr+0x604>)
    3014:	ldrb	r1, [r5, #2]
    3016:	strb	r1, [r2, #0]
    3018:	add.w	r5, r4, #160	; 0xa0
    301c:	b.n	3026 <usb_isr+0x34a>
    301e:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3020:	cmp	r5, r4
    3022:	beq.w	3338 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    3026:	ldr	r3, [r4, #32]
    3028:	lsls	r1, r3, #24
    302a:	bpl.n	301e <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    302c:	ldr	r0, [r4, #36]	; 0x24
    302e:	subs	r0, #8
    3030:	bl	2abc <usb_free>
    3034:	b.n	301e <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3036:	cmp.w	lr, #64	; 0x40
    303a:	it	ne
    303c:	movne	r2, #0
    303e:	b.n	2eca <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3040:	ldr	r2, [pc, #672]	; (32e4 <usb_isr+0x608>)
    3042:	ldrb	r5, [r1, #0]
    3044:	ldrb	r0, [r1, #1]
    3046:	strb	r5, [r2, #0]
    3048:	strb	r0, [r2, #1]
    304a:	ldrb	r5, [r1, #2]
    304c:	ldrb	r0, [r1, #3]
    304e:	strb	r5, [r2, #2]
    3050:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3052:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3054:	ldrb	r5, [r1, #4]
    3056:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3058:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    305a:	ldrb	r5, [r1, #5]
    305c:	ldrb	r1, [r1, #6]
    305e:	strb	r5, [r2, #5]
    3060:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3062:	beq.w	3292 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3066:	ldr	r1, [pc, #640]	; (32e8 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3068:	ldr	r6, [pc, #640]	; (32ec <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    306a:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    306c:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    306e:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3072:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3074:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3078:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    307a:	ite	eq
    307c:	moveq	r1, #136	; 0x88
    307e:	movne	r1, #200	; 0xc8
    3080:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3084:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3088:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    308c:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    308e:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3090:	str	r1, [r2, #4]
    3092:	b.n	2ef0 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3094:	movw	r4, #8737	; 0x2221
    3098:	cmp	r1, r4
    309a:	bne.w	34ae <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    309e:	ldr.w	ip, [pc, #656]	; 3330 <usb_isr+0x654>
    30a2:	ldr	r3, [pc, #588]	; (32f0 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    30a4:	ldr	r1, [pc, #588]	; (32f4 <usb_isr+0x618>)
    30a6:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    30a8:	ldr.w	r5, [ip]
    30ac:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    30ae:	str	r0, [sp, #4]
    30b0:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    30b2:	movs	r0, #0
    30b4:	str	r0, [sp, #8]
    30b6:	mov	r8, r0
    30b8:	mov	ip, r0
    30ba:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    30bc:	ldr	r1, [pc, #552]	; (32e8 <usb_isr+0x60c>)
    30be:	ldrb	r5, [r1, #0]
    30c0:	orr.w	lr, r5, #2
    30c4:	add.w	r3, r9, lr, lsl #3
    30c8:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30ca:	ldr	r3, [sp, #4]
    30cc:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    30ce:	ldr	r3, [sp, #12]
    30d0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30d2:	ite	eq
    30d4:	moveq	r4, #136	; 0x88
    30d6:	movne	r4, #200	; 0xc8
    30d8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    30dc:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30e0:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    30e4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    30e6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30e8:	ldr.w	lr, [pc, #500]	; 32e0 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    30ec:	ldr	r3, [pc, #508]	; (32ec <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    30ee:	ldr.w	r8, [pc, #504]	; 32e8 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    30f2:	cmp	r0, #0
    30f4:	bne.w	3228 <usb_isr+0x54c>
    30f8:	cmp.w	ip, #64	; 0x40
    30fc:	bne.n	3136 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    30fe:	orr.w	ip, r4, #2
    3102:	add.w	r3, r9, ip, lsl #3
    3106:	ldr	r4, [sp, #8]
    3108:	ldr.w	lr, [pc, #468]	; 32e0 <usb_isr+0x604>
    310c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    310e:	cmp	r2, #0
    3110:	bne.w	3254 <usb_isr+0x578>
    3114:	lsls	r2, r0, #16
    3116:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    311a:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    311e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3122:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3124:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3126:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3128:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    312a:	cmp	r0, #64	; 0x40
    312c:	bne.n	3136 <usb_isr+0x45a>
    312e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3130:	ldr	r2, [pc, #452]	; (32f8 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3132:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3134:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3136:	ldr	r2, [pc, #452]	; (32fc <usb_isr+0x620>)
    3138:	movs	r3, #1
    313a:	strb	r3, [r2, #0]
    313c:	b.n	2ef6 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    313e:	bl	1e9c <usb_serial_flush_callback>
    3142:	b.n	2db0 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3144:	ldr	r3, [pc, #408]	; (32e0 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3146:	ldr	r0, [pc, #436]	; (32fc <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3148:	ldr	r1, [pc, #412]	; (32e8 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    314a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    314c:	mov.w	lr, #2
    3150:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3154:	ldr	r7, [pc, #424]	; (3300 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3156:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3158:	ldr	r1, [pc, #424]	; (3304 <usb_isr+0x628>)
    315a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    315c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    315e:	ldr	r6, [pc, #424]	; (3308 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3160:	ldr	r5, [pc, #424]	; (330c <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3162:	ldr	r4, [pc, #428]	; (3310 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3164:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3166:	movs	r1, #13
    3168:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    316a:	movs	r1, #255	; 0xff
    316c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    316e:	ldr.w	lr, [pc, #452]	; 3334 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3172:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3174:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3176:	ldr	r5, [pc, #412]	; (3314 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3178:	ldr	r2, [pc, #412]	; (3318 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    317a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    317e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3180:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3182:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3186:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3188:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    318a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    318c:	add	sp, #28
    318e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3192:	ldr	r2, [pc, #392]	; (331c <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3194:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3198:	ldrb	r3, [r2, #0]
    319a:	adds	r3, #1
    319c:	strb	r3, [r2, #0]
    319e:	b.n	2d70 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    31a0:	str.w	r0, [r3, r6, lsl #2]
    31a4:	ldr	r5, [pc, #376]	; (3320 <usb_isr+0x644>)
    31a6:	b.n	2d3e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    31a8:	ldrb	r3, [r1, r6]
    31aa:	cmp	r3, #3
    31ac:	bhi.n	3284 <usb_isr+0x5a8>
    31ae:	add	r2, pc, #4	; (adr r2, 31b4 <usb_isr+0x4d8>)
    31b0:	ldr.w	pc, [r2, r3, lsl #2]
    31b4:	.word	0x00002d71
    31b8:	.word	0x00002d71
    31bc:	.word	0x00003209
    31c0:	.word	0x00003203
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    31c4:	ldr	r1, [pc, #312]	; (3300 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    31c6:	ldr	r3, [pc, #324]	; (330c <usb_isr+0x630>)
    31c8:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    31ca:	movs	r0, #13
    31cc:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    31ce:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    31d0:	lsls	r2, r4, #30
    31d2:	bpl.w	2f76 <usb_isr+0x29a>
    31d6:	b.n	2f68 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    31d8:	movw	r2, #770	; 0x302
    31dc:	cmp	r1, r2
    31de:	bne.w	349e <usb_isr+0x7c2>
    31e2:	ldrh	r1, [r5, #4]
    31e4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    31e8:	cmp	r1, #5
    31ea:	bhi.n	321a <usb_isr+0x53e>
    31ec:	ldrh	r2, [r5, #2]
    31ee:	cbnz	r2, 321a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    31f0:	ldr	r4, [pc, #268]	; (3300 <usb_isr+0x624>)
    31f2:	str	r0, [sp, #4]
    31f4:	lsls	r1, r1, #2
    31f6:	add	r4, r1
    31f8:	ldrb	r1, [r4, #0]
    31fa:	orr.w	r1, r1, #2
    31fe:	strb	r1, [r4, #0]
    3200:	b.n	30b2 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3202:	movs	r3, #1
    3204:	strb	r3, [r1, r6]
						break;
    3206:	b.n	2d70 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3208:	movs	r3, #0
    320a:	strb	r3, [r1, r6]
						break;
    320c:	b.n	2d70 <usb_isr+0x94>
    320e:	ldrh	r1, [r5, #4]
    3210:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3214:	cmp	r1, #5
    3216:	bls.w	34b8 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    321a:	ldr	r2, [pc, #228]	; (3300 <usb_isr+0x624>)
    321c:	movs	r3, #15
    321e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3220:	ldr	r2, [pc, #216]	; (32fc <usb_isr+0x620>)
    3222:	movs	r3, #1
    3224:	strb	r3, [r2, #0]
    3226:	b.n	2ef6 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3228:	cmp	r0, #64	; 0x40
    322a:	bls.w	30fe <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    322e:	orr.w	r4, r4, #2
    3232:	add.w	r1, lr, r4, lsl #3
    3236:	ldr	r6, [sp, #8]
    3238:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    323a:	cbz	r2, 326c <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    323c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3240:	ldr	r2, [pc, #224]	; (3324 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3242:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3244:	mov	r3, r6
    3246:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3248:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    324c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    324e:	str.w	r2, [lr, r4, lsl #3]
    3252:	b.n	3130 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3254:	ldrb.w	r3, [sp, #4]
    3258:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    325a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    325c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    325e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3260:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3264:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3266:	str.w	r2, [lr, ip, lsl #3]
    326a:	b.n	312a <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    326c:	ldrb.w	r1, [sp, #4]
    3270:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3272:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3274:	ldr	r2, [pc, #140]	; (3304 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3276:	strb.w	r5, [r8]
    327a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    327c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    327e:	str.w	r2, [lr, r4, lsl #3]
    3282:	b.n	3130 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3284:	tst.w	r9, #8
    3288:	ite	eq
    328a:	moveq	r3, #2
    328c:	movne	r3, #3
    328e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3290:	b.n	2d70 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3292:	ldr	r2, [pc, #148]	; (3328 <usb_isr+0x64c>)
    3294:	movs	r1, #15
    3296:	strb	r1, [r2, #0]
    3298:	b.n	3066 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    329a:	ldr	r2, [pc, #64]	; (32dc <usb_isr+0x600>)
    329c:	ldr	r4, [pc, #140]	; (332c <usb_isr+0x650>)
    329e:	ldrb	r2, [r2, #0]
    32a0:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    32a2:	ldrh	r2, [r5, #6]
    32a4:	cmp	r2, r0
    32a6:	bcs.w	366c <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32aa:	ldr	r1, [pc, #60]	; (32e8 <usb_isr+0x60c>)
    32ac:	ldrb	r5, [r1, #0]
    32ae:	cmp	r2, #64	; 0x40
    32b0:	mov	ip, r2
    32b2:	orr.w	lr, r5, #2
    32b6:	it	cs
    32b8:	movcs.w	ip, #64	; 0x40
    32bc:	add.w	r3, r4, ip
    32c0:	add.w	r0, r9, lr, lsl #3
    32c4:	str	r3, [sp, #8]
    32c6:	movs	r3, #1
    32c8:	str	r4, [r0, #4]
    32ca:	mov.w	r8, ip, lsl #16
    32ce:	rsb	r0, ip, r2
    32d2:	str	r3, [sp, #4]
    32d4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32d6:	movs	r4, #200	; 0xc8
    32d8:	b.n	30d8 <usb_isr+0x3fc>
    32da:	nop
    32dc:	.word	0x1fff198c
    32e0:	.word	0x1fff0000
    32e4:	.word	0x1fff1ce8
    32e8:	.word	0x1fff1980
    32ec:	.word	0x1fff190c
    32f0:	.word	0x1fff1cf0
    32f4:	.word	0x1fff1830
    32f8:	.word	0x1fff18b4
    32fc:	.word	0x40072094
    3300:	.word	0x400720c0
    3304:	.word	0x00400088
    3308:	.word	0x40072088
    330c:	.word	0x40072080
    3310:	.word	0x40072098
    3314:	.word	0x1fff18b8
    3318:	.word	0x1fff1910
    331c:	.word	0x1fff1981
    3320:	.word	0x1fff18a0
    3324:	.word	0x004000c8
    3328:	.word	0x1fff190d
    332c:	.word	0x1fff1984
    3330:	.word	0x1fff1838
    3334:	.word	0x4007208c
    3338:	ldr	r4, [pc, #704]	; (35fc <usb_isr+0x920>)
    333a:	ldr	r2, [pc, #708]	; (3600 <usb_isr+0x924>)
    333c:	ldr	r1, [pc, #708]	; (3604 <usb_isr+0x928>)
    333e:	ldr	r0, [pc, #712]	; (3608 <usb_isr+0x92c>)
    3340:	ldr	r5, [pc, #712]	; (360c <usb_isr+0x930>)
    3342:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3344:	movs	r3, #0
    3346:	ldr	r4, [pc, #712]	; (3610 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3348:	str	r4, [sp, #8]
    334a:	str	r6, [sp, #20]
    334c:	str	r5, [sp, #12]
    334e:	mov	r8, r0
    3350:	mov	r4, r3
    3352:	str	r7, [sp, #16]
    3354:	mov	r6, r2
    3356:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3358:	ldr	r0, [r6, #0]
			while (p) {
    335a:	cbz	r0, 3368 <usb_isr+0x68c>
				n = p->next;
    335c:	ldr	r7, [r0, #4]
				usb_free(p);
    335e:	bl	2abc <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3362:	mov	r0, r7
    3364:	cmp	r7, #0
    3366:	bne.n	335c <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3368:	movs	r3, #0
    336a:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    336c:	ldr	r3, [sp, #12]
			p = tx_first[i];
    336e:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3370:	mov	r2, r3
    3372:	movs	r3, #0
    3374:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3378:	cbz	r0, 3386 <usb_isr+0x6aa>
				n = p->next;
    337a:	ldr	r7, [r0, #4]
				usb_free(p);
    337c:	bl	2abc <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3380:	mov	r0, r7
    3382:	cmp	r7, #0
    3384:	bne.n	337a <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3386:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3388:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    338a:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    338c:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    338e:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3392:	ldr	r2, [sp, #8]
    3394:	mov.w	r1, #0
			switch (tx_state[i]) {
    3398:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    339a:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    339e:	cmp	r3, #3
    33a0:	bhi.n	33b2 <usb_isr+0x6d6>
    33a2:	tbb	[pc, r3]
    33a6:	.short	0x0258
    33a8:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    33aa:	ldr	r3, [sp, #4]
    33ac:	mov.w	r2, #1
    33b0:	strb	r2, [r3, #0]
    33b2:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    33b4:	adds	r4, #1
    33b6:	adds	r3, #1
    33b8:	cmp	r4, #5
    33ba:	add.w	r6, r6, #4
    33be:	add.w	r5, r5, #4
    33c2:	str	r3, [sp, #4]
    33c4:	bne.n	3358 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33c6:	ldr	r4, [pc, #588]	; (3614 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    33c8:	ldr	r5, [pc, #588]	; (3618 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33ca:	ldrb	r2, [r4, #0]
			*reg = epconf;
    33cc:	ldr	r3, [pc, #588]	; (361c <usb_isr+0x940>)
    33ce:	ldr	r7, [sp, #16]
    33d0:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    33d2:	movs	r1, #0
    33d4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    33d6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33d8:	lsls	r2, r2, #28
    33da:	bmi.n	34d2 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33dc:	ldrb	r2, [r4, #1]
			*reg = epconf;
    33de:	ldr	r1, [pc, #576]	; (3620 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33e0:	ldr.w	r8, [pc, #588]	; 3630 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    33e4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33e6:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33e8:	mov.w	r1, #0
    33ec:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    33f0:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33f4:	bmi.w	357e <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33f8:	ldrb	r2, [r4, #2]
			*reg = epconf;
    33fa:	ldr	r1, [pc, #552]	; (3624 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33fc:	ldr.w	r8, [pc, #560]	; 3630 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3400:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3402:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3404:	mov.w	r1, #0
    3408:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    340c:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3410:	bmi.w	3556 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3414:	ldr	r1, [pc, #528]	; (3628 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3416:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3418:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    341a:	movs	r1, #0
    341c:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3420:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3424:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3426:	ldr.w	r8, [pc, #520]	; 3630 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    342a:	bmi.n	3528 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    342c:	ldrb	r2, [r4, #4]
			*reg = epconf;
    342e:	ldr	r1, [pc, #508]	; (362c <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3430:	ldr	r4, [pc, #508]	; (3630 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3432:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3434:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3436:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3438:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    343c:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3440:	bmi.n	34fe <usb_isr+0x822>
    3442:	ldrb	r3, [r6, #0]
    3444:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3446:	movs	r1, #0
    3448:	eor.w	r2, r3, #1
    344c:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3450:	str.w	r1, [r9, #184]	; 0xb8
    3454:	b.n	30b2 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3456:	ldr	r3, [sp, #4]
    3458:	mov.w	r2, #0
    345c:	strb	r2, [r3, #0]
    345e:	b.n	33b2 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3460:	ldr	r2, [pc, #464]	; (3634 <usb_isr+0x958>)
    3462:	ldr	r4, [r2, #4]
    3464:	cmp	r4, #0
    3466:	beq.w	321a <usb_isr+0x53e>
    346a:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    346c:	ldrh.w	lr, [r5, #4]
    3470:	b.n	347c <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3472:	adds	r2, #12
			if (list->addr == NULL) break;
    3474:	ldr	r4, [r2, #4]
    3476:	cmp	r4, #0
    3478:	beq.w	321a <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    347c:	ldrh	r3, [r2, #0]
    347e:	cmp	r3, r0
    3480:	bne.n	3472 <usb_isr+0x796>
    3482:	ldrh	r3, [r2, #2]
    3484:	cmp	r3, lr
    3486:	bne.n	3472 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3488:	lsrs	r0, r0, #8
    348a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    348c:	ite	eq
    348e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3490:	ldrhne	r0, [r2, #8]
    3492:	b.n	32a2 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3494:	ldr	r4, [pc, #416]	; (3638 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3496:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3498:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    349a:	strb	r2, [r4, #1]
    349c:	b.n	32a2 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    349e:	cmp.w	r1, #1280	; 0x500
    34a2:	bne.w	321a <usb_isr+0x53e>
    34a6:	movs	r3, #1
    34a8:	movs	r2, #0
    34aa:	str	r3, [sp, #4]
    34ac:	b.n	30b2 <usb_isr+0x3d6>
    34ae:	movw	r2, #8993	; 0x2321
    34b2:	cmp	r1, r2
    34b4:	beq.n	34a6 <usb_isr+0x7ca>
    34b6:	b.n	321a <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    34b8:	ldrh	r2, [r5, #2]
    34ba:	cmp	r2, #0
    34bc:	bne.w	321a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    34c0:	ldr	r4, [pc, #376]	; (363c <usb_isr+0x960>)
    34c2:	str	r0, [sp, #4]
    34c4:	lsls	r1, r1, #2
    34c6:	add	r4, r1
    34c8:	ldrb	r1, [r4, #0]
    34ca:	bic.w	r1, r1, #2
    34ce:	strb	r1, [r4, #0]
    34d0:	b.n	30b2 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34d2:	bl	2a7c <usb_malloc>
				if (p) {
    34d6:	cmp	r0, #0
    34d8:	beq.w	3648 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    34dc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34de:	ldr	r2, [pc, #352]	; (3640 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    34e0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34e4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    34e8:	bl	2a7c <usb_malloc>
				if (p) {
    34ec:	cmp	r0, #0
    34ee:	beq.n	35f0 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    34f0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34f2:	ldr	r2, [pc, #336]	; (3644 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    34f4:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34f8:	str.w	r2, [r9, #40]	; 0x28
    34fc:	b.n	33dc <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34fe:	bl	2a7c <usb_malloc>
				if (p) {
    3502:	cmp	r0, #0
    3504:	beq.n	35b4 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3506:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3508:	ldr	r2, [pc, #308]	; (3640 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    350a:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    350e:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3512:	bl	2a7c <usb_malloc>
				if (p) {
    3516:	cmp	r0, #0
    3518:	beq.n	35a8 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    351a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    351c:	ldr	r2, [pc, #292]	; (3644 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    351e:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3522:	str.w	r2, [r9, #168]	; 0xa8
    3526:	b.n	3442 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3528:	bl	2a7c <usb_malloc>
				if (p) {
    352c:	cmp	r0, #0
    352e:	beq.w	3660 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3532:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3534:	ldr	r2, [pc, #264]	; (3640 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3536:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    353a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    353e:	bl	2a7c <usb_malloc>
				if (p) {
    3542:	cmp	r0, #0
    3544:	beq.w	3654 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3548:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    354a:	ldr	r2, [pc, #248]	; (3644 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    354c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3550:	str.w	r2, [r9, #136]	; 0x88
    3554:	b.n	342c <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3556:	bl	2a7c <usb_malloc>
				if (p) {
    355a:	cmp	r0, #0
    355c:	beq.n	35e4 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    355e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3560:	ldr	r2, [pc, #220]	; (3640 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3562:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3566:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    356a:	bl	2a7c <usb_malloc>
				if (p) {
    356e:	cbz	r0, 35d8 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3570:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3572:	ldr	r2, [pc, #208]	; (3644 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3574:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3578:	str.w	r2, [r9, #104]	; 0x68
    357c:	b.n	3414 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    357e:	bl	2a7c <usb_malloc>
				if (p) {
    3582:	cbz	r0, 35cc <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3584:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3586:	ldr	r2, [pc, #184]	; (3640 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3588:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    358c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3590:	bl	2a7c <usb_malloc>
				if (p) {
    3594:	cbz	r0, 35c0 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3596:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3598:	ldr	r2, [pc, #168]	; (3644 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    359a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    359e:	str.w	r2, [r9, #72]	; 0x48
    35a2:	b.n	33f8 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    35a4:	movs	r0, #2
    35a6:	b.n	32a2 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    35a8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    35aa:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    35ae:	adds	r2, #1
    35b0:	strb	r2, [r5, #0]
    35b2:	b.n	3442 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    35b4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    35b6:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    35ba:	adds	r2, #1
    35bc:	strb	r2, [r5, #0]
    35be:	b.n	3512 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    35c0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    35c2:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    35c6:	adds	r2, #1
    35c8:	strb	r2, [r5, #0]
    35ca:	b.n	33f8 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    35cc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    35ce:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    35d2:	adds	r2, #1
    35d4:	strb	r2, [r5, #0]
    35d6:	b.n	3590 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    35d8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    35da:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    35de:	adds	r2, #1
    35e0:	strb	r2, [r5, #0]
    35e2:	b.n	3414 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    35e4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    35e6:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    35ea:	adds	r2, #1
    35ec:	strb	r2, [r5, #0]
    35ee:	b.n	356a <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    35f0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    35f2:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    35f6:	adds	r2, #1
    35f8:	strb	r2, [r5, #0]
    35fa:	b.n	33dc <usb_isr+0x700>
    35fc:	.word	0x1fff1990
    3600:	.word	0x1fff18f8
    3604:	.word	0x1fff1950
    3608:	.word	0x1fff1964
    360c:	.word	0x1fff18a0
    3610:	.word	0x1fff1e20
    3614:	.word	0x00004ee8
    3618:	.word	0x1fff1981
    361c:	.word	0x400720c4
    3620:	.word	0x400720c8
    3624:	.word	0x400720cc
    3628:	.word	0x400720d0
    362c:	.word	0x400720d4
    3630:	.word	0x1fff0000
    3634:	.word	0x00004ef0
    3638:	.word	0x1fff1984
    363c:	.word	0x400720c0
    3640:	.word	0x00400088
    3644:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3648:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    364a:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    364e:	adds	r2, #1
    3650:	strb	r2, [r5, #0]
    3652:	b.n	34e8 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3654:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3656:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    365a:	adds	r2, #1
    365c:	strb	r2, [r5, #0]
    365e:	b.n	342c <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3660:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3662:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    3666:	adds	r2, #1
    3668:	strb	r2, [r5, #0]
    366a:	b.n	353e <usb_isr+0x862>
    366c:	cmp	r0, #64	; 0x40
    366e:	mov	ip, r0
    3670:	it	cs
    3672:	movcs.w	ip, #64	; 0x40
    3676:	add.w	r3, r4, ip
    367a:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    367c:	movs	r3, #1
    367e:	rsb	r0, ip, r0
    3682:	mov.w	r8, ip, lsl #16
    3686:	movs	r2, #0
    3688:	str	r3, [sp, #4]
    368a:	b.n	30bc <usb_isr+0x3e0>

0000368c <usb_init>:
}



void usb_init(void)
{
    368c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3690:	ldr	r4, [pc, #156]	; (3730 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3692:	bl	3ecc <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3696:	movs	r2, #0
    3698:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    369c:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    369e:	str	r2, [r3, #0]
		table[i].addr = 0;
    36a0:	str	r2, [r3, #4]
    36a2:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    36a4:	cmp	r3, r0
		table[i].desc = 0;
    36a6:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    36aa:	bne.n	369e <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    36ac:	ldr	r0, [pc, #132]	; (3734 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    36ae:	ldr	r2, [pc, #136]	; (3738 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    36b0:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    36b2:	ldr.w	lr, [pc, #156]	; 3750 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    36b6:	ldr	r6, [pc, #132]	; (373c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    36b8:	ldr	r5, [pc, #132]	; (3740 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    36ba:	ldr	r7, [pc, #136]	; (3744 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    36bc:	ldr.w	ip, [pc, #148]	; 3754 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    36c0:	ldr.w	r8, [pc, #148]	; 3758 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    36c4:	orr.w	r3, r3, #262144	; 0x40000
    36c8:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    36ca:	ldr	r3, [r2, #0]
    36cc:	orr.w	r3, r3, #50331648	; 0x3000000
    36d0:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    36d2:	movs	r3, #3
    36d4:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    36d8:	movs	r3, #160	; 0xa0
    36da:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    36dc:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    36e0:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    36e4:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    36e8:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    36ea:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    36ec:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    36f0:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    36f2:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    36f4:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    36f6:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    36f8:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    36fa:	ldr	r5, [pc, #76]	; (3748 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    36fc:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3700:	ldr	r0, [pc, #72]	; (374c <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    3702:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    3706:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3708:	movs	r3, #1
    370a:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    370e:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3712:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3716:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3718:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    371a:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    371e:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3720:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3722:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3726:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    372a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    372e:	nop
    3730:	.word	0x1fff0000
    3734:	.word	0x40048034
    3738:	.word	0x4000d800
    373c:	.word	0x40072140
    3740:	.word	0x4007209c
    3744:	.word	0x400720b0
    3748:	.word	0xe000e435
    374c:	.word	0xe000e104
    3750:	.word	0x40072144
    3754:	.word	0x40072080
    3758:	.word	0x40072088

0000375c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    375c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    375e:	ldr	r4, [pc, #176]	; (3810 <yield+0xb4>)
    3760:	ldrb	r3, [r4, #0]
    3762:	cbz	r3, 3766 <yield+0xa>
    3764:	pop	{r3, r4, r5, pc}
	running = 1;
    3766:	movs	r3, #1
    3768:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    376a:	bl	1c88 <usb_serial_available>
	if (Serial.available()) serialEvent();
    376e:	cmp	r0, #0
    3770:	bne.n	37f8 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3772:	bl	3c9c <serial_available>
	if (Serial1.available()) serialEvent1();
    3776:	cmp	r0, #0
    3778:	bne.n	37f2 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    377a:	bl	3984 <serial2_available>
	if (Serial2.available()) serialEvent2();
    377e:	cmp	r0, #0
    3780:	bne.n	37ec <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3782:	bl	3f9c <serial3_available>
	if (Serial3.available()) serialEvent3();
    3786:	cbnz	r0, 37e6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3788:	bl	3ab0 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    378c:	cbnz	r0, 37e0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    378e:	bl	388c <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3792:	cbnz	r0, 37da <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3794:	bl	3dc8 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3798:	cbnz	r0, 37d4 <yield+0x78>
#endif
	running = 0;
    379a:	movs	r3, #0
    379c:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    379e:	mrs	r3, IPSR
		if (ipsr != 0) return;
    37a2:	cmp	r3, #0
    37a4:	bne.n	3764 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    37a6:	mrs	r1, PRIMASK
		__disable_irq();
    37aa:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    37ac:	ldr	r3, [pc, #100]	; (3814 <yield+0xb8>)
    37ae:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    37b0:	cbz	r0, 37fe <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    37b2:	ldr	r4, [pc, #100]	; (3818 <yield+0xbc>)
    37b4:	ldrb	r2, [r4, #0]
    37b6:	cbnz	r2, 37fe <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    37b8:	ldr	r5, [r0, #20]
    37ba:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    37bc:	movs	r3, #1
    37be:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    37c0:	cbz	r5, 3806 <yield+0xaa>
			firstYield->_prev = nullptr;
    37c2:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37c4:	cbnz	r1, 37c8 <yield+0x6c>
    37c6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    37c8:	movs	r5, #0
    37ca:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    37cc:	ldr	r3, [r0, #8]
    37ce:	blx	r3
		runningFromYield = false;
    37d0:	strb	r5, [r4, #0]
    37d2:	b.n	3764 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    37d4:	bl	3888 <serialEvent6()>
    37d8:	b.n	379a <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    37da:	bl	3820 <serialEvent5()>
    37de:	b.n	3794 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    37e0:	bl	3874 <serialEvent4()>
    37e4:	b.n	378e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    37e6:	bl	4098 <serialEvent3()>
    37ea:	b.n	3788 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    37ec:	bl	3870 <serialEvent2()>
    37f0:	b.n	3782 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    37f2:	bl	4094 <serialEvent1()>
    37f6:	b.n	377a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    37f8:	bl	384c <serialEvent()>
    37fc:	b.n	3772 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37fe:	cmp	r1, #0
    3800:	bne.n	3764 <yield+0x8>
    3802:	cpsie	i
    3804:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3806:	ldr	r3, [pc, #20]	; (381c <yield+0xc0>)
    3808:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    380a:	cmp	r1, #0
    380c:	bne.n	37c8 <yield+0x6c>
    380e:	b.n	37c6 <yield+0x6a>
    3810:	.word	0x1fff1995
    3814:	.word	0x1fff1ca8
    3818:	.word	0x1fff1cac
    381c:	.word	0x1fff1ca4

00003820 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    3820:	bx	lr
    3822:	nop

00003824 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3824:	b.w	1ca4 <usb_serial_flush_input>

00003828 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3828:	b.w	1c58 <usb_serial_peekchar>

0000382c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    382c:	b.w	1c10 <usb_serial_getchar>

00003830 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3830:	b.w	1c88 <usb_serial_available>

00003834 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3834:	b.w	1e44 <usb_serial_flush_output>

00003838 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3838:	b.w	1dfc <usb_serial_write_buffer_free>

0000383c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    383c:	mov	r0, r1
    383e:	mov	r1, r2
    3840:	b.w	1cdc <usb_serial_write>

00003844 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3844:	mov	r0, r1
    3846:	b.w	1de4 <usb_serial_putchar>
    384a:	nop

0000384c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    384c:	bx	lr
    384e:	nop

00003850 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3850:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3852:	ldr	r2, [pc, #24]	; (386c <Print::println()+0x1c>)
	return write(buf, 2);
    3854:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3856:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3858:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    385a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    385c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    385e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3862:	movs	r2, #2
    3864:	blx	r3
}
    3866:	add	sp, #12
    3868:	ldr.w	pc, [sp], #4
    386c:	.word	0x00004ee4

00003870 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3870:	bx	lr
    3872:	nop

00003874 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3874:	bx	lr
    3876:	nop

00003878 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3878:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    387a:	bl	490 <setup>
	while (1) {
		loop();
    387e:	bl	494 <loop>
		yield();
    3882:	bl	375c <yield>
    3886:	b.n	387e <main+0x6>

00003888 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3888:	bx	lr
    388a:	nop

0000388c <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    388c:	ldr	r2, [pc, #20]	; (38a4 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    388e:	ldr	r3, [pc, #24]	; (38a8 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3890:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3892:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3894:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3896:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3898:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    389a:	it	cc
    389c:	addcc	r0, #64	; 0x40
    389e:	subs	r0, r0, r3
}
    38a0:	bx	lr
    38a2:	nop
    38a4:	.word	0x1fff199c
    38a8:	.word	0x1fff199d

000038ac <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    38ac:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    38ae:	ldr	r3, [pc, #172]	; (395c <uart4_status_isr+0xb0>)
    38b0:	ldrb	r2, [r3, #4]
    38b2:	lsls	r4, r2, #26
    38b4:	bpl.n	38f6 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    38b6:	ldr	r0, [pc, #168]	; (3960 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    38b8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    38ba:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38bc:	ldr	r1, [pc, #164]	; (3964 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    38be:	adds	r3, #1
    38c0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38c2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    38c4:	it	gt
    38c6:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38c8:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    38ca:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38cc:	beq.n	38d6 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    38ce:	ldr	r4, [pc, #152]	; (3968 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    38d0:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    38d2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    38d4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    38d6:	ldr	r2, [pc, #148]	; (396c <uart4_status_isr+0xc0>)
    38d8:	ldr	r1, [r2, #0]
    38da:	cbz	r1, 38f6 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    38dc:	ldr	r2, [pc, #144]	; (3970 <uart4_status_isr+0xc4>)
    38de:	ldrb	r2, [r2, #0]
    38e0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    38e2:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    38e4:	itet	cc
    38e6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    38ea:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    38ec:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    38ee:	cmp	r3, #39	; 0x27
    38f0:	itt	gt
    38f2:	movgt	r3, #1
    38f4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    38f6:	ldr	r2, [pc, #100]	; (395c <uart4_status_isr+0xb0>)
    38f8:	ldrb	r3, [r2, #3]
    38fa:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    38fc:	lsls	r0, r3, #24
    38fe:	bmi.n	3924 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3900:	lsls	r2, r3, #25
    3902:	bpl.n	3920 <uart4_status_isr+0x74>
    3904:	ldr	r3, [pc, #84]	; (395c <uart4_status_isr+0xb0>)
    3906:	ldrb	r3, [r3, #4]
    3908:	lsls	r3, r3, #25
    390a:	bpl.n	3920 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    390c:	ldr	r3, [pc, #100]	; (3974 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    390e:	ldr	r1, [pc, #104]	; (3978 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3910:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3912:	movs	r2, #0
    3914:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3916:	cbz	r3, 391a <uart4_status_isr+0x6e>
    3918:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    391a:	ldr	r3, [pc, #64]	; (395c <uart4_status_isr+0xb0>)
    391c:	movs	r2, #44	; 0x2c
    391e:	strb	r2, [r3, #3]
	}
}
    3920:	pop	{r4, r5}
    3922:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3924:	ldrb	r1, [r2, #4]
    3926:	lsls	r1, r1, #24
    3928:	bpl.n	3900 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    392a:	ldr	r1, [pc, #80]	; (397c <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    392c:	ldr	r0, [pc, #64]	; (3970 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    392e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3930:	ldrb	r1, [r0, #0]
    3932:	uxtb	r1, r1
		if (head == tail) {
    3934:	cmp	r4, r1
    3936:	beq.n	3954 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3938:	adds	r2, r1, #1
    393a:	cmp	r2, #39	; 0x27
    393c:	itt	hi
    393e:	movhi	r1, #0
    3940:	movhi	r2, r1
			n = tx_buffer[tail];
    3942:	ldr	r5, [pc, #60]	; (3980 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3944:	ldr	r4, [pc, #20]	; (395c <uart4_status_isr+0xb0>)
    3946:	it	ls
    3948:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    394a:	ldrb	r2, [r5, r2]
    394c:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    394e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3950:	strb	r1, [r0, #0]
    3952:	b.n	3900 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3954:	movs	r1, #108	; 0x6c
    3956:	strb	r1, [r2, #3]
    3958:	b.n	3900 <uart4_status_isr+0x54>
    395a:	nop
    395c:	.word	0x400ea000
    3960:	.word	0x1fff199c
    3964:	.word	0x1fff199d
    3968:	.word	0x1fff19c8
    396c:	.word	0x1fff1998
    3970:	.word	0x1fff1a09
    3974:	.word	0x1fff1a0c
    3978:	.word	0x1fff1a08
    397c:	.word	0x1fff1a10
    3980:	.word	0x1fff19a0

00003984 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3984:	ldr	r2, [pc, #20]	; (399c <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3986:	ldr	r3, [pc, #24]	; (39a0 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3988:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    398a:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    398c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    398e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3990:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3992:	it	cc
    3994:	addcc	r0, #64	; 0x40
    3996:	subs	r0, r0, r3
}
    3998:	bx	lr
    399a:	nop
    399c:	.word	0x1fff1a84
    39a0:	.word	0x1fff1a19

000039a4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    39a4:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    39a6:	ldr	r3, [pc, #224]	; (3a88 <uart1_status_isr+0xe4>)
    39a8:	ldrb	r2, [r3, #4]
    39aa:	tst.w	r2, #48	; 0x30
    39ae:	beq.n	3a0a <uart1_status_isr+0x66>
		__disable_irq();
    39b0:	cpsid	i
		avail = UART1_RCFIFO;
    39b2:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    39b4:	and.w	r2, r1, #255	; 0xff
    39b8:	cmp	r1, #0
    39ba:	beq.n	3a38 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    39bc:	cpsie	i
			head = rx_buffer_head;
    39be:	ldr	r7, [pc, #204]	; (3a8c <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    39c0:	ldr	r1, [pc, #204]	; (3a90 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    39c2:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    39c4:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    39c6:	ldr	r6, [pc, #204]	; (3a94 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    39c8:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    39ca:	uxtb	r0, r0
			tail = rx_buffer_tail;
    39cc:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    39ce:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    39d0:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    39d2:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    39d4:	it	cs
    39d6:	movcs	r3, #0
				if (newhead != tail) {
    39d8:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    39da:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    39de:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    39e0:	itt	ne
    39e2:	strbne	r1, [r6, r3]
    39e4:	movne	r0, r3
				}
			} while (--avail > 0);
    39e6:	ands.w	r2, r2, #255	; 0xff
    39ea:	bne.n	39ce <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    39ec:	ldr	r3, [pc, #168]	; (3a98 <uart1_status_isr+0xf4>)
    39ee:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    39f0:	uxtb	r2, r0
    39f2:	strb	r2, [r7, #0]
			if (rts_pin) {
    39f4:	cbz	r3, 3a0a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    39f6:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    39f8:	itet	cc
    39fa:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    39fe:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3a00:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3a02:	cmp	r0, #39	; 0x27
    3a04:	itt	gt
    3a06:	movgt	r2, #1
    3a08:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3a0a:	ldr	r1, [pc, #124]	; (3a88 <uart1_status_isr+0xe4>)
    3a0c:	ldrb	r2, [r1, #3]
    3a0e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3a10:	lsls	r5, r2, #24
    3a12:	bmi.n	3a42 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    3a14:	lsls	r2, r2, #25
    3a16:	bpl.n	3a34 <uart1_status_isr+0x90>
    3a18:	ldr	r3, [pc, #108]	; (3a88 <uart1_status_isr+0xe4>)
    3a1a:	ldrb	r3, [r3, #4]
    3a1c:	lsls	r3, r3, #25
    3a1e:	bpl.n	3a34 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3a20:	ldr	r3, [pc, #120]	; (3a9c <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3a22:	ldr	r1, [pc, #124]	; (3aa0 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3a24:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3a26:	movs	r2, #0
    3a28:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3a2a:	cbz	r3, 3a2e <uart1_status_isr+0x8a>
    3a2c:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3a2e:	ldr	r3, [pc, #88]	; (3a88 <uart1_status_isr+0xe4>)
    3a30:	movs	r2, #60	; 0x3c
    3a32:	strb	r2, [r3, #3]
	}
}
    3a34:	pop	{r4, r5, r6, r7}
    3a36:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3a38:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3a3a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3a3c:	strb	r2, [r3, #17]
			__enable_irq();
    3a3e:	cpsie	i
    3a40:	b.n	3a0a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3a42:	ldrb	r3, [r1, #4]
    3a44:	lsls	r4, r3, #24
    3a46:	bpl.n	3a14 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3a48:	ldr	r3, [pc, #88]	; (3aa4 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3a4a:	ldr	r6, [pc, #92]	; (3aa8 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3a4c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3a4e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3a50:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3a52:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3a54:	cmp	r4, r3
    3a56:	beq.n	3a76 <uart1_status_isr+0xd2>
    3a58:	ldr	r5, [pc, #80]	; (3aac <uart1_status_isr+0x108>)
    3a5a:	b.n	3a60 <uart1_status_isr+0xbc>
    3a5c:	cmp	r3, r4
    3a5e:	beq.n	3a76 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3a60:	adds	r3, #1
    3a62:	cmp	r3, #40	; 0x28
    3a64:	it	cs
    3a66:	movcs	r3, #0
			avail = UART1_S1;
    3a68:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3a6a:	ldrb	r0, [r5, r3]
    3a6c:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3a6e:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3a70:	ldrb	r0, [r1, #20]
    3a72:	cmp	r0, #7
    3a74:	bls.n	3a5c <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3a76:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3a78:	ldr	r1, [pc, #12]	; (3a88 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3a7a:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3a7c:	ldrb	r3, [r1, #4]
    3a7e:	lsls	r0, r3, #24
    3a80:	itt	mi
    3a82:	movmi	r3, #124	; 0x7c
    3a84:	strbmi	r3, [r1, #3]
    3a86:	b.n	3a14 <uart1_status_isr+0x70>
    3a88:	.word	0x4006b000
    3a8c:	.word	0x1fff1a84
    3a90:	.word	0x1fff1a19
    3a94:	.word	0x1fff1a44
    3a98:	.word	0x1fff1a14
    3a9c:	.word	0x1fff1a88
    3aa0:	.word	0x1fff1a18
    3aa4:	.word	0x1fff1a8c
    3aa8:	.word	0x1fff1a85
    3aac:	.word	0x1fff1a1c

00003ab0 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ab0:	ldr	r2, [pc, #20]	; (3ac8 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3ab2:	ldr	r3, [pc, #24]	; (3acc <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ab4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3ab6:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ab8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3aba:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3abc:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3abe:	it	cc
    3ac0:	addcc	r0, #64	; 0x40
    3ac2:	subs	r0, r0, r3
}
    3ac4:	bx	lr
    3ac6:	nop
    3ac8:	.word	0x1fff1a94
    3acc:	.word	0x1fff1a95

00003ad0 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3ad0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3ad2:	ldr	r3, [pc, #172]	; (3b80 <uart3_status_isr+0xb0>)
    3ad4:	ldrb	r2, [r3, #4]
    3ad6:	lsls	r4, r2, #26
    3ad8:	bpl.n	3b1a <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3ada:	ldr	r0, [pc, #168]	; (3b84 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3adc:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3ade:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ae0:	ldr	r1, [pc, #164]	; (3b88 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3ae2:	adds	r3, #1
    3ae4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ae6:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3ae8:	it	gt
    3aea:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3aec:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3aee:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3af0:	beq.n	3afa <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3af2:	ldr	r4, [pc, #152]	; (3b8c <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3af4:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3af6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3af8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3afa:	ldr	r2, [pc, #148]	; (3b90 <uart3_status_isr+0xc0>)
    3afc:	ldr	r1, [r2, #0]
    3afe:	cbz	r1, 3b1a <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3b00:	ldr	r2, [pc, #144]	; (3b94 <uart3_status_isr+0xc4>)
    3b02:	ldrb	r2, [r2, #0]
    3b04:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3b06:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3b08:	itet	cc
    3b0a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3b0e:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3b10:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3b12:	cmp	r3, #39	; 0x27
    3b14:	itt	gt
    3b16:	movgt	r3, #1
    3b18:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3b1a:	ldr	r2, [pc, #100]	; (3b80 <uart3_status_isr+0xb0>)
    3b1c:	ldrb	r3, [r2, #3]
    3b1e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3b20:	lsls	r0, r3, #24
    3b22:	bmi.n	3b48 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3b24:	lsls	r2, r3, #25
    3b26:	bpl.n	3b44 <uart3_status_isr+0x74>
    3b28:	ldr	r3, [pc, #84]	; (3b80 <uart3_status_isr+0xb0>)
    3b2a:	ldrb	r3, [r3, #4]
    3b2c:	lsls	r3, r3, #25
    3b2e:	bpl.n	3b44 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3b30:	ldr	r3, [pc, #100]	; (3b98 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3b32:	ldr	r1, [pc, #104]	; (3b9c <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3b34:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3b36:	movs	r2, #0
    3b38:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3b3a:	cbz	r3, 3b3e <uart3_status_isr+0x6e>
    3b3c:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3b3e:	ldr	r3, [pc, #64]	; (3b80 <uart3_status_isr+0xb0>)
    3b40:	movs	r2, #44	; 0x2c
    3b42:	strb	r2, [r3, #3]
	}
}
    3b44:	pop	{r4, r5}
    3b46:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3b48:	ldrb	r1, [r2, #4]
    3b4a:	lsls	r1, r1, #24
    3b4c:	bpl.n	3b24 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3b4e:	ldr	r1, [pc, #80]	; (3ba0 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3b50:	ldr	r0, [pc, #64]	; (3b94 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3b52:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3b54:	ldrb	r1, [r0, #0]
    3b56:	uxtb	r1, r1
		if (head == tail) {
    3b58:	cmp	r4, r1
    3b5a:	beq.n	3b78 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3b5c:	adds	r2, r1, #1
    3b5e:	cmp	r2, #39	; 0x27
    3b60:	itt	hi
    3b62:	movhi	r1, #0
    3b64:	movhi	r2, r1
			n = tx_buffer[tail];
    3b66:	ldr	r5, [pc, #60]	; (3ba4 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3b68:	ldr	r4, [pc, #20]	; (3b80 <uart3_status_isr+0xb0>)
    3b6a:	it	ls
    3b6c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3b6e:	ldrb	r2, [r5, r2]
    3b70:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3b72:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3b74:	strb	r1, [r0, #0]
    3b76:	b.n	3b24 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3b78:	movs	r1, #108	; 0x6c
    3b7a:	strb	r1, [r2, #3]
    3b7c:	b.n	3b24 <uart3_status_isr+0x54>
    3b7e:	nop
    3b80:	.word	0x4006d000
    3b84:	.word	0x1fff1a94
    3b88:	.word	0x1fff1a95
    3b8c:	.word	0x1fff1ac0
    3b90:	.word	0x1fff1a90
    3b94:	.word	0x1fff1b01
    3b98:	.word	0x1fff1b04
    3b9c:	.word	0x1fff1b00
    3ba0:	.word	0x1fff1b08
    3ba4:	.word	0x1fff1a98

00003ba8 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3ba8:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3baa:	ldr	r4, [pc, #64]	; (3bec <fault_isr+0x44>)
    3bac:	b.n	3bc0 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3bae:	ldr	r3, [r4, #0]
    3bb0:	lsls	r1, r3, #21
    3bb2:	bmi.n	3bd0 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3bb4:	ldr	r3, [r4, #0]
    3bb6:	lsls	r2, r3, #20
    3bb8:	bmi.n	3bda <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3bba:	ldr	r3, [r4, #0]
    3bbc:	lsls	r3, r3, #19
    3bbe:	bmi.n	3be4 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3bc0:	ldr	r3, [r4, #0]
    3bc2:	lsls	r0, r3, #13
    3bc4:	bpl.n	3bae <fault_isr+0x6>
    3bc6:	bl	2cdc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3bca:	ldr	r3, [r4, #0]
    3bcc:	lsls	r1, r3, #21
    3bce:	bpl.n	3bb4 <fault_isr+0xc>
    3bd0:	bl	3cbc <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3bd4:	ldr	r3, [r4, #0]
    3bd6:	lsls	r2, r3, #20
    3bd8:	bpl.n	3bba <fault_isr+0x12>
    3bda:	bl	39a4 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3bde:	ldr	r3, [r4, #0]
    3be0:	lsls	r3, r3, #19
    3be2:	bpl.n	3bc0 <fault_isr+0x18>
    3be4:	bl	3fbc <uart2_status_isr>
    3be8:	b.n	3bc0 <fault_isr+0x18>
    3bea:	nop
    3bec:	.word	0x40048034

00003bf0 <unused_isr>:
	}
}

void unused_isr(void)
{
    3bf0:	push	{r3, lr}
	fault_isr();
    3bf2:	bl	3ba8 <fault_isr>
    3bf6:	nop

00003bf8 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3bf8:	ldr	r3, [pc, #4]	; (3c00 <startup_early_hook+0x8>)
    3bfa:	movs	r2, #16
    3bfc:	strh	r2, [r3, #0]
    3bfe:	bx	lr
    3c00:	.word	0x40052000

00003c04 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3c04:	bx	lr
    3c06:	nop

00003c08 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3c08:	ldr	r1, [pc, #36]	; (3c30 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3c0a:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3c0c:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3c0e:	cbz	r0, 3c1e <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3c10:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3c12:	add	r0, r3
    3c14:	sub.w	r2, r2, #8192	; 0x2000
    3c18:	cmp	r0, r2
    3c1a:	bcs.n	3c22 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3c1c:	str	r0, [r1, #0]
	}
	return prev;
    3c1e:	mov	r0, r3
}
    3c20:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3c22:	bl	4290 <__errno>
    3c26:	movs	r3, #12
    3c28:	str	r3, [r0, #0]
			return (void *)-1;
    3c2a:	mov.w	r0, #4294967295
    3c2e:	pop	{r3, pc}
    3c30:	.word	0x1fff0c70

00003c34 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3c34:	ldr	r2, [pc, #32]	; (3c58 <kinetis_hsrun_disable+0x24>)
    3c36:	ldrb	r3, [r2, #0]
    3c38:	cmp	r3, #128	; 0x80
    3c3a:	beq.n	3c40 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3c3c:	movs	r0, #0
}
    3c3e:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3c40:	ldr	r1, [pc, #24]	; (3c5c <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3c42:	ldr	r3, [pc, #28]	; (3c60 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3c44:	ldr	r0, [pc, #28]	; (3c64 <kinetis_hsrun_disable+0x30>)
    3c46:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3c48:	movs	r1, #0
    3c4a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3c4c:	ldrb	r3, [r2, #0]
    3c4e:	cmp	r3, #128	; 0x80
    3c50:	beq.n	3c4c <kinetis_hsrun_disable+0x18>
		return 1;
    3c52:	movs	r0, #1
    3c54:	bx	lr
    3c56:	nop
    3c58:	.word	0x4007e003
    3c5c:	.word	0x40048044
    3c60:	.word	0x4007e001
    3c64:	.word	0x22280000

00003c68 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3c68:	ldr	r2, [pc, #36]	; (3c90 <kinetis_hsrun_enable+0x28>)
    3c6a:	ldrb	r3, [r2, #0]
    3c6c:	cmp	r3, #1
    3c6e:	beq.n	3c74 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3c70:	movs	r0, #0
}
    3c72:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3c74:	add.w	r3, r3, #1073741824	; 0x40000000
    3c78:	add.w	r3, r3, #516096	; 0x7e000
    3c7c:	movs	r1, #96	; 0x60
    3c7e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3c80:	ldrb	r3, [r2, #0]
    3c82:	cmp	r3, #128	; 0x80
    3c84:	bne.n	3c80 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3c86:	ldr	r3, [pc, #12]	; (3c94 <kinetis_hsrun_enable+0x2c>)
    3c88:	ldr	r2, [pc, #12]	; (3c98 <kinetis_hsrun_enable+0x30>)
    3c8a:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3c8c:	movs	r0, #1
    3c8e:	bx	lr
    3c90:	.word	0x4007e003
    3c94:	.word	0x40048044
    3c98:	.word	0x02060000

00003c9c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c9c:	ldr	r2, [pc, #20]	; (3cb4 <serial_available+0x18>)
	tail = rx_buffer_tail;
    3c9e:	ldr	r3, [pc, #24]	; (3cb8 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ca0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3ca2:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ca4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3ca6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3ca8:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3caa:	it	cc
    3cac:	addcc	r0, #64	; 0x40
    3cae:	subs	r0, r0, r3
}
    3cb0:	bx	lr
    3cb2:	nop
    3cb4:	.word	0x1fff1b10
    3cb8:	.word	0x1fff1b11

00003cbc <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3cbc:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3cbe:	ldr	r3, [pc, #224]	; (3da0 <uart0_status_isr+0xe4>)
    3cc0:	ldrb	r2, [r3, #4]
    3cc2:	tst.w	r2, #48	; 0x30
    3cc6:	beq.n	3d22 <uart0_status_isr+0x66>
		__disable_irq();
    3cc8:	cpsid	i
		avail = UART0_RCFIFO;
    3cca:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3ccc:	and.w	r2, r1, #255	; 0xff
    3cd0:	cmp	r1, #0
    3cd2:	beq.n	3d50 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3cd4:	cpsie	i
			head = rx_buffer_head;
    3cd6:	ldr	r7, [pc, #204]	; (3da4 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3cd8:	ldr	r1, [pc, #204]	; (3da8 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3cda:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3cdc:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3cde:	ldr	r6, [pc, #204]	; (3dac <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3ce0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3ce2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3ce4:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3ce6:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3ce8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3cea:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3cec:	it	cs
    3cee:	movcs	r3, #0
				if (newhead != tail) {
    3cf0:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3cf2:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3cf6:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3cf8:	itt	ne
    3cfa:	strbne	r1, [r6, r3]
    3cfc:	movne	r0, r3
				}
			} while (--avail > 0);
    3cfe:	ands.w	r2, r2, #255	; 0xff
    3d02:	bne.n	3ce6 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3d04:	ldr	r3, [pc, #168]	; (3db0 <uart0_status_isr+0xf4>)
    3d06:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3d08:	uxtb	r2, r0
    3d0a:	strb	r2, [r7, #0]
			if (rts_pin) {
    3d0c:	cbz	r3, 3d22 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3d0e:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3d10:	itet	cc
    3d12:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3d16:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3d18:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3d1a:	cmp	r0, #39	; 0x27
    3d1c:	itt	gt
    3d1e:	movgt	r2, #1
    3d20:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3d22:	ldr	r1, [pc, #124]	; (3da0 <uart0_status_isr+0xe4>)
    3d24:	ldrb	r2, [r1, #3]
    3d26:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3d28:	lsls	r5, r2, #24
    3d2a:	bmi.n	3d5a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3d2c:	lsls	r2, r2, #25
    3d2e:	bpl.n	3d4c <uart0_status_isr+0x90>
    3d30:	ldr	r3, [pc, #108]	; (3da0 <uart0_status_isr+0xe4>)
    3d32:	ldrb	r3, [r3, #4]
    3d34:	lsls	r3, r3, #25
    3d36:	bpl.n	3d4c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3d38:	ldr	r3, [pc, #120]	; (3db4 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d3a:	ldr	r1, [pc, #124]	; (3db8 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3d3c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d3e:	movs	r2, #0
    3d40:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3d42:	cbz	r3, 3d46 <uart0_status_isr+0x8a>
    3d44:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3d46:	ldr	r3, [pc, #88]	; (3da0 <uart0_status_isr+0xe4>)
    3d48:	movs	r2, #60	; 0x3c
    3d4a:	strb	r2, [r3, #3]
	}
}
    3d4c:	pop	{r4, r5, r6, r7}
    3d4e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3d50:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3d52:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3d54:	strb	r2, [r3, #17]
			__enable_irq();
    3d56:	cpsie	i
    3d58:	b.n	3d22 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3d5a:	ldrb	r3, [r1, #4]
    3d5c:	lsls	r4, r3, #24
    3d5e:	bpl.n	3d2c <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3d60:	ldr	r3, [pc, #88]	; (3dbc <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3d62:	ldr	r6, [pc, #92]	; (3dc0 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d64:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3d66:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d68:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3d6a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3d6c:	cmp	r4, r3
    3d6e:	beq.n	3d8e <uart0_status_isr+0xd2>
    3d70:	ldr	r5, [pc, #80]	; (3dc4 <uart0_status_isr+0x108>)
    3d72:	b.n	3d78 <uart0_status_isr+0xbc>
    3d74:	cmp	r3, r4
    3d76:	beq.n	3d8e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3d78:	adds	r3, #1
    3d7a:	cmp	r3, #64	; 0x40
    3d7c:	it	cs
    3d7e:	movcs	r3, #0
			avail = UART0_S1;
    3d80:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3d82:	ldrb	r0, [r5, r3]
    3d84:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3d86:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3d88:	ldrb	r0, [r1, #20]
    3d8a:	cmp	r0, #7
    3d8c:	bls.n	3d74 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3d8e:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3d90:	ldr	r1, [pc, #12]	; (3da0 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3d92:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3d94:	ldrb	r3, [r1, #4]
    3d96:	lsls	r0, r3, #24
    3d98:	itt	mi
    3d9a:	movmi	r3, #124	; 0x7c
    3d9c:	strbmi	r3, [r1, #3]
    3d9e:	b.n	3d2c <uart0_status_isr+0x70>
    3da0:	.word	0x4006a000
    3da4:	.word	0x1fff1b10
    3da8:	.word	0x1fff1b11
    3dac:	.word	0x1fff1b54
    3db0:	.word	0x1fff1b0c
    3db4:	.word	0x1fff1b98
    3db8:	.word	0x1fff1b94
    3dbc:	.word	0x1fff1b9c
    3dc0:	.word	0x1fff1b95
    3dc4:	.word	0x1fff1b14

00003dc8 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3dc8:	ldr	r2, [pc, #20]	; (3de0 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3dca:	ldr	r3, [pc, #24]	; (3de4 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3dcc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3dce:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3dd0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3dd2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3dd4:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3dd6:	it	cc
    3dd8:	addcc	r0, #64	; 0x40
    3dda:	subs	r0, r0, r3
}
    3ddc:	bx	lr
    3dde:	nop
    3de0:	.word	0x1fff1ba4
    3de4:	.word	0x1fff1ba5

00003de8 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3de8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3dea:	ldr	r3, [pc, #176]	; (3e9c <lpuart0_status_isr+0xb4>)
    3dec:	ldr	r2, [r3, #4]
    3dee:	lsls	r4, r2, #10
    3df0:	bpl.n	3e32 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3df2:	ldr	r0, [pc, #172]	; (3ea0 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3df4:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3df6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3df8:	ldr	r1, [pc, #168]	; (3ea4 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3dfa:	adds	r3, #1
    3dfc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3dfe:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3e00:	it	gt
    3e02:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3e04:	cmp	r3, r1
    3e06:	beq.n	3e12 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3e08:	ldr	r4, [pc, #156]	; (3ea8 <lpuart0_status_isr+0xc0>)
    3e0a:	uxtb	r2, r2
			rx_buffer_head = head;
    3e0c:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3e0e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3e10:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3e12:	ldr	r2, [pc, #152]	; (3eac <lpuart0_status_isr+0xc4>)
    3e14:	ldr	r1, [r2, #0]
    3e16:	cbz	r1, 3e32 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3e18:	ldr	r2, [pc, #148]	; (3eb0 <lpuart0_status_isr+0xc8>)
    3e1a:	ldrb	r2, [r2, #0]
    3e1c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3e1e:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3e20:	itet	cc
    3e22:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3e26:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3e28:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3e2a:	cmp	r3, #39	; 0x27
    3e2c:	itt	gt
    3e2e:	movgt	r3, #1
    3e30:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3e32:	ldr	r2, [pc, #104]	; (3e9c <lpuart0_status_isr+0xb4>)
    3e34:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3e36:	lsls	r0, r3, #8
    3e38:	bpl.n	3e40 <lpuart0_status_isr+0x58>
    3e3a:	ldr	r2, [r2, #4]
    3e3c:	lsls	r1, r2, #8
    3e3e:	bmi.n	3e64 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3e40:	lsls	r2, r3, #9
    3e42:	bpl.n	3e60 <lpuart0_status_isr+0x78>
    3e44:	ldr	r3, [pc, #84]	; (3e9c <lpuart0_status_isr+0xb4>)
    3e46:	ldr	r3, [r3, #4]
    3e48:	lsls	r3, r3, #9
    3e4a:	bpl.n	3e60 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3e4c:	ldr	r3, [pc, #100]	; (3eb4 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3e4e:	ldr	r1, [pc, #104]	; (3eb8 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3e50:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3e52:	movs	r2, #0
    3e54:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3e56:	cbz	r3, 3e5a <lpuart0_status_isr+0x72>
    3e58:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3e5a:	ldr	r3, [pc, #96]	; (3ebc <lpuart0_status_isr+0xd4>)
    3e5c:	movs	r2, #0
    3e5e:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3e60:	pop	{r4, r5}
    3e62:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3e64:	ldr	r2, [pc, #88]	; (3ec0 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3e66:	ldr	r1, [pc, #72]	; (3eb0 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3e68:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3e6a:	ldrb	r2, [r1, #0]
    3e6c:	uxtb	r2, r2
		if (head == tail) {
    3e6e:	cmp	r0, r2
    3e70:	beq.n	3e8e <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3e72:	adds	r2, #1
    3e74:	cmp	r2, #39	; 0x27
    3e76:	itt	hi
    3e78:	movhi	r0, #0
    3e7a:	movhi	r2, r0
			n = tx_buffer[tail];
    3e7c:	ldr	r5, [pc, #68]	; (3ec4 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3e7e:	ldr	r4, [pc, #28]	; (3e9c <lpuart0_status_isr+0xb4>)
    3e80:	it	ls
    3e82:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3e84:	ldrb	r2, [r5, r2]
    3e86:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3e88:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3e8a:	strb	r0, [r1, #0]
    3e8c:	b.n	3e40 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e8e:	ldr	r0, [pc, #56]	; (3ec8 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e90:	ldr	r2, [pc, #40]	; (3ebc <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e92:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e94:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e96:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e98:	str	r1, [r2, #0]
    3e9a:	b.n	3e40 <lpuart0_status_isr+0x58>
    3e9c:	.word	0x400c4000
    3ea0:	.word	0x1fff1ba4
    3ea4:	.word	0x1fff1ba5
    3ea8:	.word	0x1fff1bd0
    3eac:	.word	0x1fff1ba0
    3eb0:	.word	0x1fff1c11
    3eb4:	.word	0x1fff1c14
    3eb8:	.word	0x1fff1c10
    3ebc:	.word	0x43880158
    3ec0:	.word	0x1fff1c18
    3ec4:	.word	0x1fff1ba8
    3ec8:	.word	0x4388015c

00003ecc <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3ecc:	push	{r4, lr}
    3ece:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3ed0:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3ed2:	bl	3c34 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3ed6:	ldr	r2, [pc, #96]	; (3f38 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3ed8:	ldr	r3, [pc, #96]	; (3f3c <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3eda:	ldr	r1, [pc, #100]	; (3f40 <usb_init_serialnumber+0x74>)
    3edc:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3ede:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3ee0:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3ee2:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3ee4:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3ee6:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3ee8:	ldrb	r3, [r2, #0]
    3eea:	lsls	r3, r3, #24
    3eec:	bpl.n	3ee8 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3eee:	ldr	r3, [pc, #84]	; (3f44 <usb_init_serialnumber+0x78>)
    3ef0:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3ef2:	bl	3c68 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3ef6:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3ef8:	ldr	r3, [pc, #76]	; (3f48 <usb_init_serialnumber+0x7c>)
    3efa:	cmp	r4, r3
    3efc:	itt	ls
    3efe:	addls.w	r4, r4, r4, lsl #2
    3f02:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3f04:	mov	r0, r4
    3f06:	ldr	r4, [pc, #68]	; (3f4c <usb_init_serialnumber+0x80>)
    3f08:	add	r1, sp, #4
    3f0a:	movs	r2, #10
    3f0c:	bl	3f50 <ultoa>
    3f10:	add	r1, sp, #4
    3f12:	mov	r0, r4
	for (i=0; i<10; i++) {
    3f14:	movs	r3, #0
		char c = buf[i];
    3f16:	ldrb.w	r2, [r1], #1
    3f1a:	adds	r3, #1
		if (!c) break;
    3f1c:	cbz	r2, 3f2e <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3f1e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3f20:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3f24:	bne.n	3f16 <usb_init_serialnumber+0x4a>
    3f26:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3f28:	strb	r3, [r4, #0]
}
    3f2a:	add	sp, #16
    3f2c:	pop	{r4, pc}
    3f2e:	lsls	r3, r3, #1
    3f30:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3f32:	strb	r3, [r4, #0]
}
    3f34:	add	sp, #16
    3f36:	pop	{r4, pc}
    3f38:	.word	0x40020004
    3f3c:	.word	0x40020000
    3f40:	.word	0x41070000
    3f44:	.word	0x4002000c
    3f48:	.word	0x0098967f
    3f4c:	.word	0x1fff0d54

00003f50 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3f50:	push	{r4, r5, r6, r7}
    3f52:	subs	r5, r1, #1
    3f54:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3f56:	movs	r4, #0
    3f58:	b.n	3f5c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3f5a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3f5c:	udiv	r3, r0, r2
    3f60:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3f64:	cmp	r0, #9
    3f66:	add.w	r7, r0, #48	; 0x30
    3f6a:	itet	hi
    3f6c:	addhi	r0, #55	; 0x37
    3f6e:	uxtbls	r0, r7
    3f70:	uxtbhi	r0, r0
    3f72:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3f76:	mov	r0, r3
    3f78:	cmp	r3, #0
    3f7a:	bne.n	3f5a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3f7c:	adds	r2, r1, r4
    3f7e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3f80:	cbz	r4, 3f96 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3f82:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3f84:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3f88:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f8a:	adds	r3, #1
    3f8c:	subs	r0, r4, r3
    3f8e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3f90:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f94:	blt.n	3f82 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3f96:	mov	r0, r1
    3f98:	pop	{r4, r5, r6, r7}
    3f9a:	bx	lr

00003f9c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f9c:	ldr	r2, [pc, #20]	; (3fb4 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3f9e:	ldr	r3, [pc, #24]	; (3fb8 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3fa0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3fa2:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3fa4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3fa6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3fa8:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3faa:	it	cc
    3fac:	addcc	r0, #64	; 0x40
    3fae:	subs	r0, r0, r3
}
    3fb0:	bx	lr
    3fb2:	nop
    3fb4:	.word	0x1fff1c20
    3fb8:	.word	0x1fff1c21

00003fbc <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3fbc:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3fbe:	ldr	r3, [pc, #172]	; (406c <uart2_status_isr+0xb0>)
    3fc0:	ldrb	r2, [r3, #4]
    3fc2:	lsls	r4, r2, #26
    3fc4:	bpl.n	4006 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3fc6:	ldr	r0, [pc, #168]	; (4070 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3fc8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3fca:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fcc:	ldr	r1, [pc, #164]	; (4074 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3fce:	adds	r3, #1
    3fd0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fd2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3fd4:	it	gt
    3fd6:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fd8:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3fda:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fdc:	beq.n	3fe6 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3fde:	ldr	r4, [pc, #152]	; (4078 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3fe0:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3fe2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3fe4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3fe6:	ldr	r2, [pc, #148]	; (407c <uart2_status_isr+0xc0>)
    3fe8:	ldr	r1, [r2, #0]
    3fea:	cbz	r1, 4006 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3fec:	ldr	r2, [pc, #144]	; (4080 <uart2_status_isr+0xc4>)
    3fee:	ldrb	r2, [r2, #0]
    3ff0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3ff2:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3ff4:	itet	cc
    3ff6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3ffa:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3ffc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ffe:	cmp	r3, #39	; 0x27
    4000:	itt	gt
    4002:	movgt	r3, #1
    4004:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4006:	ldr	r2, [pc, #100]	; (406c <uart2_status_isr+0xb0>)
    4008:	ldrb	r3, [r2, #3]
    400a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    400c:	lsls	r0, r3, #24
    400e:	bmi.n	4034 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4010:	lsls	r2, r3, #25
    4012:	bpl.n	4030 <uart2_status_isr+0x74>
    4014:	ldr	r3, [pc, #84]	; (406c <uart2_status_isr+0xb0>)
    4016:	ldrb	r3, [r3, #4]
    4018:	lsls	r3, r3, #25
    401a:	bpl.n	4030 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    401c:	ldr	r3, [pc, #100]	; (4084 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    401e:	ldr	r1, [pc, #104]	; (4088 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4020:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4022:	movs	r2, #0
    4024:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4026:	cbz	r3, 402a <uart2_status_isr+0x6e>
    4028:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    402a:	ldr	r3, [pc, #64]	; (406c <uart2_status_isr+0xb0>)
    402c:	movs	r2, #44	; 0x2c
    402e:	strb	r2, [r3, #3]
	}
}
    4030:	pop	{r4, r5}
    4032:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4034:	ldrb	r1, [r2, #4]
    4036:	lsls	r1, r1, #24
    4038:	bpl.n	4010 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    403a:	ldr	r1, [pc, #80]	; (408c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    403c:	ldr	r0, [pc, #64]	; (4080 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    403e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4040:	ldrb	r1, [r0, #0]
    4042:	uxtb	r1, r1
		if (head == tail) {
    4044:	cmp	r4, r1
    4046:	beq.n	4064 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4048:	adds	r2, r1, #1
    404a:	cmp	r2, #39	; 0x27
    404c:	itt	hi
    404e:	movhi	r1, #0
    4050:	movhi	r2, r1
			n = tx_buffer[tail];
    4052:	ldr	r5, [pc, #60]	; (4090 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4054:	ldr	r4, [pc, #20]	; (406c <uart2_status_isr+0xb0>)
    4056:	it	ls
    4058:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    405a:	ldrb	r2, [r5, r2]
    405c:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    405e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4060:	strb	r1, [r0, #0]
    4062:	b.n	4010 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4064:	movs	r1, #108	; 0x6c
    4066:	strb	r1, [r2, #3]
    4068:	b.n	4010 <uart2_status_isr+0x54>
    406a:	nop
    406c:	.word	0x4006c000
    4070:	.word	0x1fff1c20
    4074:	.word	0x1fff1c21
    4078:	.word	0x1fff1c4c
    407c:	.word	0x1fff1c1c
    4080:	.word	0x1fff1c8d
    4084:	.word	0x1fff1c90
    4088:	.word	0x1fff1c8c
    408c:	.word	0x1fff1c94
    4090:	.word	0x1fff1c24

00004094 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4094:	bx	lr
    4096:	nop

00004098 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4098:	bx	lr
    409a:	nop

0000409c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    409c:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    409e:	mrs	r2, PRIMASK
		__disable_irq();
    40a2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    40a4:	ldrb	r3, [r0, #29]
    40a6:	cbnz	r3, 40b6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    40a8:	ldrb	r1, [r0, #28]
    40aa:	cmp	r1, #1
    40ac:	beq.n	40c0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    40ae:	cmp	r1, #3
    40b0:	beq.n	40d4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    40b2:	movs	r3, #1
    40b4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    40b6:	cbnz	r2, 40ba <EventResponder::triggerEventNotImmediate()+0x1e>
    40b8:	cpsie	i
	}
	enableInterrupts(irq);
}
    40ba:	ldr.w	r4, [sp], #4
    40be:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    40c0:	ldr	r4, [pc, #68]	; (4108 <EventResponder::triggerEventNotImmediate()+0x6c>)
    40c2:	ldr	r1, [r4, #0]
    40c4:	cbz	r1, 40f0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    40c6:	ldr	r1, [pc, #68]	; (410c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    40c8:	str	r3, [r0, #20]
				_prev = lastYield;
    40ca:	ldr	r3, [r1, #0]
    40cc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    40ce:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    40d0:	str	r0, [r3, #20]
    40d2:	b.n	40b2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    40d4:	ldr	r4, [pc, #56]	; (4110 <EventResponder::triggerEventNotImmediate()+0x74>)
    40d6:	ldr	r1, [r4, #0]
    40d8:	cbz	r1, 40fc <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    40da:	ldr	r1, [pc, #56]	; (4114 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    40dc:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    40de:	ldr	r3, [r1, #0]
    40e0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    40e2:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    40e4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    40e6:	ldr	r3, [pc, #48]	; (4118 <EventResponder::triggerEventNotImmediate()+0x7c>)
    40e8:	mov.w	r1, #268435456	; 0x10000000
    40ec:	str	r1, [r3, #0]
    40ee:	b.n	40b2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    40f0:	ldr	r3, [pc, #24]	; (410c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    40f2:	str	r1, [r0, #20]
				_prev = nullptr;
    40f4:	str	r1, [r0, #24]
				firstYield = this;
    40f6:	str	r0, [r4, #0]
				lastYield = this;
    40f8:	str	r0, [r3, #0]
    40fa:	b.n	40b2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    40fc:	ldr	r3, [pc, #20]	; (4114 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    40fe:	str	r1, [r0, #20]
				_prev = nullptr;
    4100:	str	r1, [r0, #24]
				firstInterrupt = this;
    4102:	str	r0, [r4, #0]
				lastInterrupt = this;
    4104:	str	r0, [r3, #0]
    4106:	b.n	40e6 <EventResponder::triggerEventNotImmediate()+0x4a>
    4108:	.word	0x1fff1ca8
    410c:	.word	0x1fff1ca4
    4110:	.word	0x1fff1c98
    4114:	.word	0x1fff1c9c
    4118:	.word	0xe000ed04

0000411c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    411c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    411e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4120:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4122:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4124:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4126:	beq.n	4130 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4128:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    412c:	b.w	409c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4130:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4132:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4136:	bx	r3

00004138 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4138:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    413a:	mrs	r2, PRIMASK
		__disable_irq();
    413e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4140:	ldr	r4, [pc, #48]	; (4174 <EventResponder::runFromInterrupt()+0x3c>)
    4142:	ldr	r0, [r4, #0]
		if (first) {
    4144:	cbz	r0, 4168 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4146:	ldr	r6, [pc, #48]	; (4178 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4148:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    414a:	ldr	r3, [r0, #20]
    414c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    414e:	cbz	r3, 416e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4150:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4152:	cbnz	r2, 4156 <EventResponder::runFromInterrupt()+0x1e>
    4154:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4156:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4158:	ldr	r3, [r0, #8]
    415a:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    415c:	mrs	r2, PRIMASK
		__disable_irq();
    4160:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4162:	ldr	r0, [r4, #0]
		if (first) {
    4164:	cmp	r0, #0
    4166:	bne.n	414a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4168:	cbnz	r2, 416c <EventResponder::runFromInterrupt()+0x34>
    416a:	cpsie	i
    416c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    416e:	str	r3, [r6, #0]
    4170:	b.n	4152 <EventResponder::runFromInterrupt()+0x1a>
    4172:	nop
    4174:	.word	0x1fff1c98
    4178:	.word	0x1fff1c9c

0000417c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    417c:	b.w	4138 <EventResponder::runFromInterrupt()>

00004180 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4180:	ldr	r2, [pc, #96]	; (41e4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4182:	push	{r4, r5}
	if (listActive == nullptr) {
    4184:	ldr	r4, [r2, #0]
    4186:	cmp	r4, #0
    4188:	beq.n	41da <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    418a:	ldr	r3, [r0, #0]
    418c:	ldr	r1, [r4, #0]
    418e:	cmp	r3, r1
    4190:	bcs.n	41b0 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4192:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4194:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4196:	str	r4, [r0, #8]
		_prev = nullptr;
    4198:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    419a:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    419c:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    419e:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    41a0:	movs	r3, #2
    41a2:	strb	r3, [r0, #20]
}
    41a4:	pop	{r4, r5}
    41a6:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    41a8:	ldr	r1, [r2, #0]
    41aa:	cmp	r3, r1
    41ac:	mov	r4, r2
    41ae:	bcc.n	41c2 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    41b0:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    41b2:	subs	r3, r3, r1
    41b4:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    41b6:	cmp	r2, #0
    41b8:	bne.n	41a8 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    41ba:	str	r2, [r0, #8]
		_prev = timer;
    41bc:	str	r4, [r0, #12]
		timer->_next = this;
    41be:	str	r0, [r4, #8]
    41c0:	b.n	41a0 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    41c2:	ldr	r2, [r2, #12]
    41c4:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    41c6:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    41c8:	str	r0, [r4, #12]
				_prev->_next = this;
    41ca:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    41cc:	subs	r3, r1, r3
				_state = TimerActive;
    41ce:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    41d0:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    41d2:	str	r3, [r4, #0]
				_state = TimerActive;
    41d4:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    41d6:	pop	{r4, r5}
    41d8:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    41da:	str	r4, [r0, #8]
		_prev = nullptr;
    41dc:	str	r4, [r0, #12]
		listActive = this;
    41de:	str	r0, [r2, #0]
    41e0:	b.n	41a0 <MillisTimer::addToActiveList()+0x20>
    41e2:	nop
    41e4:	.word	0x1fff1ca0

000041e8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    41e8:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    41ea:	ldr	r6, [pc, #136]	; (4274 <MillisTimer::runFromTimer()+0x8c>)
    41ec:	ldr	r4, [r6, #0]
	while (timer) {
    41ee:	cbz	r4, 423c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    41f0:	ldr	r3, [r4, #0]
    41f2:	cmp	r3, #0
    41f4:	bne.n	426c <MillisTimer::runFromTimer()+0x84>
    41f6:	ldr	r7, [pc, #128]	; (4278 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    41f8:	mov	r5, r3
    41fa:	b.n	4206 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    41fc:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    41fe:	cbz	r4, 423c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4200:	ldr	r3, [r4, #0]
    4202:	cmp	r3, #0
    4204:	bne.n	426c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4206:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4208:	cbz	r3, 420c <MillisTimer::runFromTimer()+0x24>
    420a:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    420c:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    420e:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4210:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4212:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4214:	ldr	r3, [r3, #0]
    4216:	cmp	r3, r7
    4218:	bne.n	425e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    421a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    421c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    421e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4220:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4222:	beq.n	4266 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4224:	bl	409c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4228:	ldr	r3, [r4, #4]
    422a:	cmp	r3, #0
    422c:	beq.n	41fc <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    422e:	str	r3, [r4, #0]
				timer->addToActiveList();
    4230:	mov	r0, r4
    4232:	bl	4180 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4236:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4238:	cmp	r4, #0
    423a:	bne.n	4200 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    423c:	mrs	r3, PRIMASK
		__disable_irq();
    4240:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4242:	ldr	r2, [pc, #56]	; (427c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4244:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4246:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4248:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    424a:	cbnz	r3, 424e <MillisTimer::runFromTimer()+0x66>
    424c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    424e:	cbz	r0, 425c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4250:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4252:	bl	4180 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4256:	mov	r0, r4
    4258:	cmp	r0, #0
    425a:	bne.n	4250 <MillisTimer::runFromTimer()+0x68>
    425c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    425e:	mov	r2, r4
    4260:	movs	r1, #0
    4262:	blx	r3
    4264:	b.n	4228 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4266:	ldr	r3, [r0, #8]
    4268:	blx	r3
    426a:	b.n	4228 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    426c:	subs	r3, #1
    426e:	str	r3, [r4, #0]
			break;
    4270:	b.n	423c <MillisTimer::runFromTimer()+0x54>
    4272:	nop
    4274:	.word	0x1fff1ca0
    4278:	.word	0x0000411d
    427c:	.word	0x1fff1cb0

00004280 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4280:	ldr	r2, [pc, #8]	; (428c <systick_isr+0xc>)
    4282:	ldr	r3, [r2, #0]
    4284:	adds	r3, #1
    4286:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4288:	b.w	41e8 <MillisTimer::runFromTimer()>
    428c:	.word	0x1fff1838

00004290 <__errno>:
    4290:	ldr	r3, [pc, #4]	; (4298 <__errno+0x8>)
    4292:	ldr	r0, [r3, #0]
    4294:	bx	lr
    4296:	nop
    4298:	.word	0x1fff1198

0000429c <__libc_init_array>:
    429c:	push	{r4, r5, r6, lr}
    429e:	ldr	r6, [pc, #60]	; (42dc <__libc_init_array+0x40>)
    42a0:	ldr	r5, [pc, #60]	; (42e0 <__libc_init_array+0x44>)
    42a2:	subs	r6, r6, r5
    42a4:	asrs	r6, r6, #2
    42a6:	it	ne
    42a8:	movne	r4, #0
    42aa:	beq.n	42b8 <__libc_init_array+0x1c>
    42ac:	adds	r4, #1
    42ae:	ldr.w	r3, [r5], #4
    42b2:	blx	r3
    42b4:	cmp	r6, r4
    42b6:	bne.n	42ac <__libc_init_array+0x10>
    42b8:	ldr	r6, [pc, #40]	; (42e4 <__libc_init_array+0x48>)
    42ba:	ldr	r5, [pc, #44]	; (42e8 <__libc_init_array+0x4c>)
    42bc:	subs	r6, r6, r5
    42be:	bl	4f48 <_init>
    42c2:	asrs	r6, r6, #2
    42c4:	it	ne
    42c6:	movne	r4, #0
    42c8:	beq.n	42d8 <__libc_init_array+0x3c>
    42ca:	adds	r4, #1
    42cc:	ldr.w	r3, [r5], #4
    42d0:	blx	r3
    42d2:	cmp	r6, r4
    42d4:	bne.n	42ca <__libc_init_array+0x2e>
    42d6:	pop	{r4, r5, r6, pc}
    42d8:	pop	{r4, r5, r6, pc}
    42da:	nop
    42dc:	.word	0x00004f54
    42e0:	.word	0x00004f54
    42e4:	.word	0x00004f60
    42e8:	.word	0x00004f54

000042ec <malloc>:
    42ec:	ldr	r3, [pc, #8]	; (42f8 <malloc+0xc>)
    42ee:	mov	r1, r0
    42f0:	ldr	r0, [r3, #0]
    42f2:	b.w	42fc <_malloc_r>
    42f6:	nop
    42f8:	.word	0x1fff1198

000042fc <_malloc_r>:
    42fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4300:	add.w	r5, r1, #11
    4304:	cmp	r5, #22
    4306:	sub	sp, #12
    4308:	mov	r6, r0
    430a:	bls.w	444c <_malloc_r+0x150>
    430e:	bics.w	r5, r5, #7
    4312:	bmi.w	4494 <_malloc_r+0x198>
    4316:	cmp	r1, r5
    4318:	bhi.w	4494 <_malloc_r+0x198>
    431c:	bl	486c <__malloc_lock>
    4320:	cmp.w	r5, #504	; 0x1f8
    4324:	bcc.w	4860 <_malloc_r+0x564>
    4328:	lsrs	r3, r5, #9
    432a:	beq.w	44a2 <_malloc_r+0x1a6>
    432e:	cmp	r3, #4
    4330:	bhi.w	463a <_malloc_r+0x33e>
    4334:	lsrs	r0, r5, #6
    4336:	add.w	lr, r0, #57	; 0x39
    433a:	mov.w	r3, lr, lsl #1
    433e:	adds	r0, #56	; 0x38
    4340:	ldr	r7, [pc, #784]	; (4654 <_malloc_r+0x358>)
    4342:	add.w	r3, r7, r3, lsl #2
    4346:	sub.w	r1, r3, #8
    434a:	ldr	r4, [r3, #4]
    434c:	cmp	r1, r4
    434e:	bne.n	4360 <_malloc_r+0x64>
    4350:	b.n	44ac <_malloc_r+0x1b0>
    4352:	cmp	r2, #0
    4354:	bge.w	44b0 <_malloc_r+0x1b4>
    4358:	ldr	r4, [r4, #12]
    435a:	cmp	r1, r4
    435c:	beq.w	44ac <_malloc_r+0x1b0>
    4360:	ldr	r3, [r4, #4]
    4362:	bic.w	r3, r3, #3
    4366:	subs	r2, r3, r5
    4368:	cmp	r2, #15
    436a:	ble.n	4352 <_malloc_r+0x56>
    436c:	ldr	r1, [pc, #740]	; (4654 <_malloc_r+0x358>)
    436e:	ldr	r4, [r7, #16]
    4370:	add.w	lr, r1, #8
    4374:	cmp	r4, lr
    4376:	beq.w	46e0 <_malloc_r+0x3e4>
    437a:	ldr	r3, [r4, #4]
    437c:	bic.w	r3, r3, #3
    4380:	subs	r2, r3, r5
    4382:	cmp	r2, #15
    4384:	bgt.w	46ba <_malloc_r+0x3be>
    4388:	cmp	r2, #0
    438a:	str.w	lr, [r1, #20]
    438e:	str.w	lr, [r1, #16]
    4392:	bge.w	44d2 <_malloc_r+0x1d6>
    4396:	cmp.w	r3, #512	; 0x200
    439a:	bcs.w	466c <_malloc_r+0x370>
    439e:	lsrs	r3, r3, #3
    43a0:	add.w	ip, r3, #1
    43a4:	movs	r2, #1
    43a6:	asrs	r3, r3, #2
    43a8:	lsl.w	r3, r2, r3
    43ac:	ldr	r2, [r1, #4]
    43ae:	ldr.w	r8, [r1, ip, lsl #3]
    43b2:	str.w	r8, [r4, #8]
    43b6:	add.w	r9, r1, ip, lsl #3
    43ba:	orrs	r2, r3
    43bc:	sub.w	r3, r9, #8
    43c0:	str	r3, [r4, #12]
    43c2:	str	r2, [r1, #4]
    43c4:	str.w	r4, [r1, ip, lsl #3]
    43c8:	str.w	r4, [r8, #12]
    43cc:	asrs	r3, r0, #2
    43ce:	movs	r4, #1
    43d0:	lsls	r4, r3
    43d2:	cmp	r4, r2
    43d4:	bhi.w	44ec <_malloc_r+0x1f0>
    43d8:	tst	r4, r2
    43da:	bne.n	43ea <_malloc_r+0xee>
    43dc:	bic.w	r0, r0, #3
    43e0:	lsls	r4, r4, #1
    43e2:	tst	r4, r2
    43e4:	add.w	r0, r0, #4
    43e8:	beq.n	43e0 <_malloc_r+0xe4>
    43ea:	add.w	r9, r7, r0, lsl #3
    43ee:	mov	ip, r9
    43f0:	mov	r8, r0
    43f2:	ldr.w	r1, [ip, #12]
    43f6:	cmp	ip, r1
    43f8:	bne.n	440a <_malloc_r+0x10e>
    43fa:	b.n	46e4 <_malloc_r+0x3e8>
    43fc:	cmp	r2, #0
    43fe:	bge.w	4704 <_malloc_r+0x408>
    4402:	ldr	r1, [r1, #12]
    4404:	cmp	ip, r1
    4406:	beq.w	46e4 <_malloc_r+0x3e8>
    440a:	ldr	r3, [r1, #4]
    440c:	bic.w	r3, r3, #3
    4410:	subs	r2, r3, r5
    4412:	cmp	r2, #15
    4414:	ble.n	43fc <_malloc_r+0x100>
    4416:	mov	r4, r1
    4418:	ldr.w	ip, [r1, #12]
    441c:	ldr.w	r8, [r4, #8]!
    4420:	adds	r3, r1, r5
    4422:	orr.w	r5, r5, #1
    4426:	str	r5, [r1, #4]
    4428:	orr.w	r1, r2, #1
    442c:	str.w	ip, [r8, #12]
    4430:	mov	r0, r6
    4432:	str.w	r8, [ip, #8]
    4436:	str	r3, [r7, #20]
    4438:	str	r3, [r7, #16]
    443a:	str.w	lr, [r3, #12]
    443e:	str.w	lr, [r3, #8]
    4442:	str	r1, [r3, #4]
    4444:	str	r2, [r3, r2]
    4446:	bl	4870 <__malloc_unlock>
    444a:	b.n	448c <_malloc_r+0x190>
    444c:	cmp	r1, #16
    444e:	bhi.n	4494 <_malloc_r+0x198>
    4450:	bl	486c <__malloc_lock>
    4454:	movs	r5, #16
    4456:	movs	r3, #6
    4458:	movs	r0, #2
    445a:	ldr	r7, [pc, #504]	; (4654 <_malloc_r+0x358>)
    445c:	add.w	r3, r7, r3, lsl #2
    4460:	sub.w	r2, r3, #8
    4464:	ldr	r4, [r3, #4]
    4466:	cmp	r4, r2
    4468:	beq.w	46f6 <_malloc_r+0x3fa>
    446c:	ldr	r3, [r4, #4]
    446e:	ldr	r1, [r4, #12]
    4470:	ldr	r5, [r4, #8]
    4472:	bic.w	r3, r3, #3
    4476:	add	r3, r4
    4478:	mov	r0, r6
    447a:	ldr	r2, [r3, #4]
    447c:	str	r1, [r5, #12]
    447e:	orr.w	r2, r2, #1
    4482:	str	r5, [r1, #8]
    4484:	str	r2, [r3, #4]
    4486:	bl	4870 <__malloc_unlock>
    448a:	adds	r4, #8
    448c:	mov	r0, r4
    448e:	add	sp, #12
    4490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4494:	movs	r4, #0
    4496:	movs	r3, #12
    4498:	mov	r0, r4
    449a:	str	r3, [r6, #0]
    449c:	add	sp, #12
    449e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44a2:	movs	r3, #128	; 0x80
    44a4:	mov.w	lr, #64	; 0x40
    44a8:	movs	r0, #63	; 0x3f
    44aa:	b.n	4340 <_malloc_r+0x44>
    44ac:	mov	r0, lr
    44ae:	b.n	436c <_malloc_r+0x70>
    44b0:	add	r3, r4
    44b2:	ldr	r1, [r4, #12]
    44b4:	ldr	r2, [r3, #4]
    44b6:	ldr	r5, [r4, #8]
    44b8:	orr.w	r2, r2, #1
    44bc:	str	r1, [r5, #12]
    44be:	mov	r0, r6
    44c0:	str	r5, [r1, #8]
    44c2:	str	r2, [r3, #4]
    44c4:	bl	4870 <__malloc_unlock>
    44c8:	adds	r4, #8
    44ca:	mov	r0, r4
    44cc:	add	sp, #12
    44ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44d2:	add	r3, r4
    44d4:	mov	r0, r6
    44d6:	ldr	r2, [r3, #4]
    44d8:	orr.w	r2, r2, #1
    44dc:	str	r2, [r3, #4]
    44de:	bl	4870 <__malloc_unlock>
    44e2:	adds	r4, #8
    44e4:	mov	r0, r4
    44e6:	add	sp, #12
    44e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44ec:	ldr	r4, [r7, #8]
    44ee:	ldr	r3, [r4, #4]
    44f0:	bic.w	r8, r3, #3
    44f4:	cmp	r8, r5
    44f6:	bcc.n	4502 <_malloc_r+0x206>
    44f8:	rsb	r3, r5, r8
    44fc:	cmp	r3, #15
    44fe:	bgt.w	461a <_malloc_r+0x31e>
    4502:	ldr	r3, [pc, #340]	; (4658 <_malloc_r+0x35c>)
    4504:	ldr.w	r9, [pc, #352]	; 4668 <_malloc_r+0x36c>
    4508:	ldr	r2, [r3, #0]
    450a:	ldr.w	r3, [r9]
    450e:	adds	r3, #1
    4510:	add	r2, r5
    4512:	add.w	sl, r4, r8
    4516:	beq.w	47da <_malloc_r+0x4de>
    451a:	add.w	r2, r2, #4096	; 0x1000
    451e:	adds	r2, #15
    4520:	bic.w	r2, r2, #4080	; 0xff0
    4524:	bic.w	r2, r2, #15
    4528:	mov	r1, r2
    452a:	mov	r0, r6
    452c:	str	r2, [sp, #4]
    452e:	bl	4874 <_sbrk_r>
    4532:	cmp.w	r0, #4294967295
    4536:	mov	fp, r0
    4538:	ldr	r2, [sp, #4]
    453a:	beq.w	47ee <_malloc_r+0x4f2>
    453e:	cmp	sl, r0
    4540:	bhi.w	473c <_malloc_r+0x440>
    4544:	ldr	r3, [pc, #276]	; (465c <_malloc_r+0x360>)
    4546:	ldr	r1, [r3, #0]
    4548:	cmp	sl, fp
    454a:	add	r1, r2
    454c:	str	r1, [r3, #0]
    454e:	beq.w	47f8 <_malloc_r+0x4fc>
    4552:	ldr.w	r0, [r9]
    4556:	ldr.w	lr, [pc, #272]	; 4668 <_malloc_r+0x36c>
    455a:	adds	r0, #1
    455c:	ittet	ne
    455e:	rsbne	sl, sl, fp
    4562:	addne	r1, sl
    4564:	streq.w	fp, [lr]
    4568:	strne	r1, [r3, #0]
    456a:	ands.w	r1, fp, #7
    456e:	beq.w	47a0 <_malloc_r+0x4a4>
    4572:	rsb	r0, r1, #8
    4576:	rsb	r1, r1, #4096	; 0x1000
    457a:	add	fp, r0
    457c:	adds	r1, #8
    457e:	add	r2, fp
    4580:	ubfx	r2, r2, #0, #12
    4584:	rsb	r9, r2, r1
    4588:	mov	r1, r9
    458a:	mov	r0, r6
    458c:	str	r3, [sp, #4]
    458e:	bl	4874 <_sbrk_r>
    4592:	adds	r3, r0, #1
    4594:	ldr	r3, [sp, #4]
    4596:	beq.w	4818 <_malloc_r+0x51c>
    459a:	rsb	r2, fp, r0
    459e:	add	r2, r9
    45a0:	orr.w	r2, r2, #1
    45a4:	ldr	r1, [r3, #0]
    45a6:	str.w	fp, [r7, #8]
    45aa:	add	r1, r9
    45ac:	cmp	r4, r7
    45ae:	str.w	r2, [fp, #4]
    45b2:	str	r1, [r3, #0]
    45b4:	ldr.w	r9, [pc, #164]	; 465c <_malloc_r+0x360>
    45b8:	beq.n	45e8 <_malloc_r+0x2ec>
    45ba:	cmp.w	r8, #15
    45be:	bls.w	47bc <_malloc_r+0x4c0>
    45c2:	ldr	r2, [r4, #4]
    45c4:	sub.w	r3, r8, #12
    45c8:	bic.w	r3, r3, #7
    45cc:	adds	r0, r4, r3
    45ce:	and.w	r2, r2, #1
    45d2:	mov.w	lr, #5
    45d6:	orrs	r2, r3
    45d8:	cmp	r3, #15
    45da:	str	r2, [r4, #4]
    45dc:	str.w	lr, [r0, #4]
    45e0:	str.w	lr, [r0, #8]
    45e4:	bhi.w	4820 <_malloc_r+0x524>
    45e8:	ldr	r3, [pc, #116]	; (4660 <_malloc_r+0x364>)
    45ea:	ldr	r4, [r7, #8]
    45ec:	ldr	r2, [r3, #0]
    45ee:	cmp	r1, r2
    45f0:	it	hi
    45f2:	strhi	r1, [r3, #0]
    45f4:	ldr	r3, [pc, #108]	; (4664 <_malloc_r+0x368>)
    45f6:	ldr	r2, [r3, #0]
    45f8:	cmp	r1, r2
    45fa:	ldr	r2, [r4, #4]
    45fc:	it	hi
    45fe:	strhi	r1, [r3, #0]
    4600:	bic.w	r2, r2, #3
    4604:	cmp	r5, r2
    4606:	sub.w	r3, r2, r5
    460a:	bhi.n	4610 <_malloc_r+0x314>
    460c:	cmp	r3, #15
    460e:	bgt.n	461a <_malloc_r+0x31e>
    4610:	mov	r0, r6
    4612:	bl	4870 <__malloc_unlock>
    4616:	movs	r4, #0
    4618:	b.n	448c <_malloc_r+0x190>
    461a:	adds	r2, r4, r5
    461c:	orr.w	r3, r3, #1
    4620:	orr.w	r5, r5, #1
    4624:	str	r5, [r4, #4]
    4626:	mov	r0, r6
    4628:	str	r2, [r7, #8]
    462a:	str	r3, [r2, #4]
    462c:	bl	4870 <__malloc_unlock>
    4630:	adds	r4, #8
    4632:	mov	r0, r4
    4634:	add	sp, #12
    4636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    463a:	cmp	r3, #20
    463c:	bls.n	4722 <_malloc_r+0x426>
    463e:	cmp	r3, #84	; 0x54
    4640:	bhi.w	478c <_malloc_r+0x490>
    4644:	lsrs	r0, r5, #12
    4646:	add.w	lr, r0, #111	; 0x6f
    464a:	mov.w	r3, lr, lsl #1
    464e:	adds	r0, #110	; 0x6e
    4650:	b.n	4340 <_malloc_r+0x44>
    4652:	nop
    4654:	.word	0x1fff119c
    4658:	.word	0x1fff1cbc
    465c:	.word	0x1fff1cc0
    4660:	.word	0x1fff1cb8
    4664:	.word	0x1fff1cb4
    4668:	.word	0x1fff15a8
    466c:	lsrs	r2, r3, #9
    466e:	cmp	r2, #4
    4670:	bls.n	4730 <_malloc_r+0x434>
    4672:	cmp	r2, #20
    4674:	bhi.w	47de <_malloc_r+0x4e2>
    4678:	add.w	r1, r2, #92	; 0x5c
    467c:	lsls	r1, r1, #1
    467e:	adds	r2, #91	; 0x5b
    4680:	add.w	ip, r7, r1, lsl #2
    4684:	ldr.w	r1, [r7, r1, lsl #2]
    4688:	ldr.w	r8, [pc, #476]	; 4868 <_malloc_r+0x56c>
    468c:	sub.w	ip, ip, #8
    4690:	cmp	ip, r1
    4692:	beq.w	47a6 <_malloc_r+0x4aa>
    4696:	ldr	r2, [r1, #4]
    4698:	bic.w	r2, r2, #3
    469c:	cmp	r3, r2
    469e:	bcs.n	46a6 <_malloc_r+0x3aa>
    46a0:	ldr	r1, [r1, #8]
    46a2:	cmp	ip, r1
    46a4:	bne.n	4696 <_malloc_r+0x39a>
    46a6:	ldr.w	ip, [r1, #12]
    46aa:	ldr	r2, [r7, #4]
    46ac:	str.w	ip, [r4, #12]
    46b0:	str	r1, [r4, #8]
    46b2:	str.w	r4, [ip, #8]
    46b6:	str	r4, [r1, #12]
    46b8:	b.n	43cc <_malloc_r+0xd0>
    46ba:	adds	r3, r4, r5
    46bc:	orr.w	r7, r2, #1
    46c0:	orr.w	r5, r5, #1
    46c4:	str	r5, [r4, #4]
    46c6:	mov	r0, r6
    46c8:	str	r3, [r1, #20]
    46ca:	str	r3, [r1, #16]
    46cc:	str.w	lr, [r3, #12]
    46d0:	str.w	lr, [r3, #8]
    46d4:	str	r7, [r3, #4]
    46d6:	str	r2, [r3, r2]
    46d8:	adds	r4, #8
    46da:	bl	4870 <__malloc_unlock>
    46de:	b.n	448c <_malloc_r+0x190>
    46e0:	ldr	r2, [r1, #4]
    46e2:	b.n	43cc <_malloc_r+0xd0>
    46e4:	add.w	r8, r8, #1
    46e8:	tst.w	r8, #3
    46ec:	add.w	ip, ip, #8
    46f0:	bne.w	43f2 <_malloc_r+0xf6>
    46f4:	b.n	4758 <_malloc_r+0x45c>
    46f6:	ldr	r4, [r3, #12]
    46f8:	cmp	r3, r4
    46fa:	it	eq
    46fc:	addeq	r0, #2
    46fe:	beq.w	436c <_malloc_r+0x70>
    4702:	b.n	446c <_malloc_r+0x170>
    4704:	add	r3, r1
    4706:	mov	r4, r1
    4708:	ldr	r2, [r3, #4]
    470a:	ldr	r1, [r1, #12]
    470c:	ldr.w	r5, [r4, #8]!
    4710:	orr.w	r2, r2, #1
    4714:	str	r2, [r3, #4]
    4716:	mov	r0, r6
    4718:	str	r1, [r5, #12]
    471a:	str	r5, [r1, #8]
    471c:	bl	4870 <__malloc_unlock>
    4720:	b.n	448c <_malloc_r+0x190>
    4722:	add.w	lr, r3, #92	; 0x5c
    4726:	add.w	r0, r3, #91	; 0x5b
    472a:	mov.w	r3, lr, lsl #1
    472e:	b.n	4340 <_malloc_r+0x44>
    4730:	lsrs	r2, r3, #6
    4732:	add.w	r1, r2, #57	; 0x39
    4736:	lsls	r1, r1, #1
    4738:	adds	r2, #56	; 0x38
    473a:	b.n	4680 <_malloc_r+0x384>
    473c:	cmp	r4, r7
    473e:	ldr	r3, [pc, #296]	; (4868 <_malloc_r+0x56c>)
    4740:	beq.w	4544 <_malloc_r+0x248>
    4744:	ldr	r4, [r3, #8]
    4746:	ldr	r2, [r4, #4]
    4748:	bic.w	r2, r2, #3
    474c:	b.n	4604 <_malloc_r+0x308>
    474e:	ldr.w	r3, [r9], #-8
    4752:	cmp	r9, r3
    4754:	bne.w	485c <_malloc_r+0x560>
    4758:	tst.w	r0, #3
    475c:	add.w	r0, r0, #4294967295
    4760:	bne.n	474e <_malloc_r+0x452>
    4762:	ldr	r3, [r7, #4]
    4764:	bic.w	r3, r3, r4
    4768:	str	r3, [r7, #4]
    476a:	lsls	r4, r4, #1
    476c:	cmp	r4, r3
    476e:	bhi.w	44ec <_malloc_r+0x1f0>
    4772:	cmp	r4, #0
    4774:	beq.w	44ec <_malloc_r+0x1f0>
    4778:	tst	r4, r3
    477a:	mov	r0, r8
    477c:	bne.w	43ea <_malloc_r+0xee>
    4780:	lsls	r4, r4, #1
    4782:	tst	r4, r3
    4784:	add.w	r0, r0, #4
    4788:	beq.n	4780 <_malloc_r+0x484>
    478a:	b.n	43ea <_malloc_r+0xee>
    478c:	cmp.w	r3, #340	; 0x154
    4790:	bhi.n	47c4 <_malloc_r+0x4c8>
    4792:	lsrs	r0, r5, #15
    4794:	add.w	lr, r0, #120	; 0x78
    4798:	mov.w	r3, lr, lsl #1
    479c:	adds	r0, #119	; 0x77
    479e:	b.n	4340 <_malloc_r+0x44>
    47a0:	mov.w	r1, #4096	; 0x1000
    47a4:	b.n	457e <_malloc_r+0x282>
    47a6:	movs	r1, #1
    47a8:	ldr.w	r3, [r8, #4]
    47ac:	asrs	r2, r2, #2
    47ae:	lsl.w	r2, r1, r2
    47b2:	orrs	r2, r3
    47b4:	str.w	r2, [r8, #4]
    47b8:	mov	r1, ip
    47ba:	b.n	46ac <_malloc_r+0x3b0>
    47bc:	movs	r3, #1
    47be:	str.w	r3, [fp, #4]
    47c2:	b.n	4610 <_malloc_r+0x314>
    47c4:	movw	r2, #1364	; 0x554
    47c8:	cmp	r3, r2
    47ca:	bhi.n	480e <_malloc_r+0x512>
    47cc:	lsrs	r0, r5, #18
    47ce:	add.w	lr, r0, #125	; 0x7d
    47d2:	mov.w	r3, lr, lsl #1
    47d6:	adds	r0, #124	; 0x7c
    47d8:	b.n	4340 <_malloc_r+0x44>
    47da:	adds	r2, #16
    47dc:	b.n	4528 <_malloc_r+0x22c>
    47de:	cmp	r2, #84	; 0x54
    47e0:	bhi.n	4830 <_malloc_r+0x534>
    47e2:	lsrs	r2, r3, #12
    47e4:	add.w	r1, r2, #111	; 0x6f
    47e8:	lsls	r1, r1, #1
    47ea:	adds	r2, #110	; 0x6e
    47ec:	b.n	4680 <_malloc_r+0x384>
    47ee:	ldr	r4, [r7, #8]
    47f0:	ldr	r2, [r4, #4]
    47f2:	bic.w	r2, r2, #3
    47f6:	b.n	4604 <_malloc_r+0x308>
    47f8:	ubfx	r0, sl, #0, #12
    47fc:	cmp	r0, #0
    47fe:	bne.w	4552 <_malloc_r+0x256>
    4802:	add	r2, r8
    4804:	ldr	r3, [r7, #8]
    4806:	orr.w	r2, r2, #1
    480a:	str	r2, [r3, #4]
    480c:	b.n	45e8 <_malloc_r+0x2ec>
    480e:	movs	r3, #254	; 0xfe
    4810:	mov.w	lr, #127	; 0x7f
    4814:	movs	r0, #126	; 0x7e
    4816:	b.n	4340 <_malloc_r+0x44>
    4818:	movs	r2, #1
    481a:	mov.w	r9, #0
    481e:	b.n	45a4 <_malloc_r+0x2a8>
    4820:	add.w	r1, r4, #8
    4824:	mov	r0, r6
    4826:	bl	497c <_free_r>
    482a:	ldr.w	r1, [r9]
    482e:	b.n	45e8 <_malloc_r+0x2ec>
    4830:	cmp.w	r2, #340	; 0x154
    4834:	bhi.n	4842 <_malloc_r+0x546>
    4836:	lsrs	r2, r3, #15
    4838:	add.w	r1, r2, #120	; 0x78
    483c:	lsls	r1, r1, #1
    483e:	adds	r2, #119	; 0x77
    4840:	b.n	4680 <_malloc_r+0x384>
    4842:	movw	r1, #1364	; 0x554
    4846:	cmp	r2, r1
    4848:	bhi.n	4856 <_malloc_r+0x55a>
    484a:	lsrs	r2, r3, #18
    484c:	add.w	r1, r2, #125	; 0x7d
    4850:	lsls	r1, r1, #1
    4852:	adds	r2, #124	; 0x7c
    4854:	b.n	4680 <_malloc_r+0x384>
    4856:	movs	r1, #254	; 0xfe
    4858:	movs	r2, #126	; 0x7e
    485a:	b.n	4680 <_malloc_r+0x384>
    485c:	ldr	r3, [r7, #4]
    485e:	b.n	476a <_malloc_r+0x46e>
    4860:	lsrs	r0, r5, #3
    4862:	adds	r3, r0, #1
    4864:	lsls	r3, r3, #1
    4866:	b.n	445a <_malloc_r+0x15e>
    4868:	.word	0x1fff119c

0000486c <__malloc_lock>:
    486c:	bx	lr
    486e:	nop

00004870 <__malloc_unlock>:
    4870:	bx	lr
    4872:	nop

00004874 <_sbrk_r>:
    4874:	push	{r3, r4, r5, lr}
    4876:	ldr	r4, [pc, #28]	; (4894 <_sbrk_r+0x20>)
    4878:	movs	r3, #0
    487a:	mov	r5, r0
    487c:	mov	r0, r1
    487e:	str	r3, [r4, #0]
    4880:	bl	3c08 <_sbrk>
    4884:	adds	r3, r0, #1
    4886:	beq.n	488a <_sbrk_r+0x16>
    4888:	pop	{r3, r4, r5, pc}
    488a:	ldr	r3, [r4, #0]
    488c:	cmp	r3, #0
    488e:	beq.n	4888 <_sbrk_r+0x14>
    4890:	str	r3, [r5, #0]
    4892:	pop	{r3, r4, r5, pc}
    4894:	.word	0x1fff1e2c

00004898 <register_fini>:
    4898:	ldr	r3, [pc, #8]	; (48a4 <register_fini+0xc>)
    489a:	cbz	r3, 48a2 <register_fini+0xa>
    489c:	ldr	r0, [pc, #8]	; (48a8 <register_fini+0x10>)
    489e:	b.w	48ac <atexit>
    48a2:	bx	lr
    48a4:	.word	0x00000000
    48a8:	.word	0x000048b9

000048ac <atexit>:
    48ac:	movs	r3, #0
    48ae:	mov	r1, r0
    48b0:	mov	r2, r3
    48b2:	mov	r0, r3
    48b4:	b.w	4b4c <__register_exitproc>

000048b8 <__libc_fini_array>:
    48b8:	push	{r3, r4, r5, lr}
    48ba:	ldr	r5, [pc, #28]	; (48d8 <__libc_fini_array+0x20>)
    48bc:	ldr	r4, [pc, #28]	; (48dc <__libc_fini_array+0x24>)
    48be:	subs	r4, r5, r4
    48c0:	asrs	r4, r4, #2
    48c2:	beq.n	48d0 <__libc_fini_array+0x18>
    48c4:	subs	r4, #1
    48c6:	ldr.w	r3, [r5, #-4]!
    48ca:	blx	r3
    48cc:	cmp	r4, #0
    48ce:	bne.n	48c4 <__libc_fini_array+0xc>
    48d0:	ldmia.w	sp!, {r3, r4, r5, lr}
    48d4:	b.w	4f60 <__init_array_end>
	...

000048e0 <_malloc_trim_r>:
    48e0:	push	{r3, r4, r5, r6, r7, lr}
    48e2:	ldr	r7, [pc, #140]	; (4970 <_malloc_trim_r+0x90>)
    48e4:	mov	r4, r1
    48e6:	mov	r6, r0
    48e8:	bl	486c <__malloc_lock>
    48ec:	ldr	r3, [r7, #8]
    48ee:	ldr	r5, [r3, #4]
    48f0:	bic.w	r5, r5, #3
    48f4:	subs	r1, r5, r4
    48f6:	addw	r1, r1, #4079	; 0xfef
    48fa:	bic.w	r1, r1, #4080	; 0xff0
    48fe:	bic.w	r1, r1, #15
    4902:	sub.w	r4, r1, #4096	; 0x1000
    4906:	cmp.w	r4, #4096	; 0x1000
    490a:	blt.n	491c <_malloc_trim_r+0x3c>
    490c:	movs	r1, #0
    490e:	mov	r0, r6
    4910:	bl	4874 <_sbrk_r>
    4914:	ldr	r3, [r7, #8]
    4916:	add	r3, r5
    4918:	cmp	r0, r3
    491a:	beq.n	4926 <_malloc_trim_r+0x46>
    491c:	mov	r0, r6
    491e:	bl	4870 <__malloc_unlock>
    4922:	movs	r0, #0
    4924:	pop	{r3, r4, r5, r6, r7, pc}
    4926:	negs	r1, r4
    4928:	mov	r0, r6
    492a:	bl	4874 <_sbrk_r>
    492e:	adds	r0, #1
    4930:	beq.n	494e <_malloc_trim_r+0x6e>
    4932:	ldr	r3, [pc, #64]	; (4974 <_malloc_trim_r+0x94>)
    4934:	ldr	r2, [r7, #8]
    4936:	ldr	r1, [r3, #0]
    4938:	subs	r5, r5, r4
    493a:	orr.w	r5, r5, #1
    493e:	mov	r0, r6
    4940:	subs	r1, r1, r4
    4942:	str	r5, [r2, #4]
    4944:	str	r1, [r3, #0]
    4946:	bl	4870 <__malloc_unlock>
    494a:	movs	r0, #1
    494c:	pop	{r3, r4, r5, r6, r7, pc}
    494e:	movs	r1, #0
    4950:	mov	r0, r6
    4952:	bl	4874 <_sbrk_r>
    4956:	ldr	r2, [r7, #8]
    4958:	subs	r3, r0, r2
    495a:	cmp	r3, #15
    495c:	ble.n	491c <_malloc_trim_r+0x3c>
    495e:	ldr	r4, [pc, #24]	; (4978 <_malloc_trim_r+0x98>)
    4960:	ldr	r1, [pc, #16]	; (4974 <_malloc_trim_r+0x94>)
    4962:	ldr	r4, [r4, #0]
    4964:	orr.w	r3, r3, #1
    4968:	subs	r0, r0, r4
    496a:	str	r3, [r2, #4]
    496c:	str	r0, [r1, #0]
    496e:	b.n	491c <_malloc_trim_r+0x3c>
    4970:	.word	0x1fff119c
    4974:	.word	0x1fff1cc0
    4978:	.word	0x1fff15a8

0000497c <_free_r>:
    497c:	cmp	r1, #0
    497e:	beq.n	4a0c <_free_r+0x90>
    4980:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4984:	mov	r5, r1
    4986:	mov	r8, r0
    4988:	bl	486c <__malloc_lock>
    498c:	ldr.w	r7, [r5, #-4]
    4990:	ldr	r1, [pc, #424]	; (4b3c <_free_r+0x1c0>)
    4992:	bic.w	r3, r7, #1
    4996:	sub.w	r4, r5, #8
    499a:	adds	r2, r4, r3
    499c:	ldr	r6, [r1, #8]
    499e:	ldr	r0, [r2, #4]
    49a0:	cmp	r2, r6
    49a2:	bic.w	r0, r0, #3
    49a6:	beq.n	4a6e <_free_r+0xf2>
    49a8:	lsls	r6, r7, #31
    49aa:	str	r0, [r2, #4]
    49ac:	bmi.n	49c6 <_free_r+0x4a>
    49ae:	ldr.w	r7, [r5, #-8]
    49b2:	subs	r4, r4, r7
    49b4:	add.w	lr, r1, #8
    49b8:	ldr	r5, [r4, #8]
    49ba:	cmp	r5, lr
    49bc:	add	r3, r7
    49be:	beq.n	4aa0 <_free_r+0x124>
    49c0:	ldr	r7, [r4, #12]
    49c2:	str	r7, [r5, #12]
    49c4:	str	r5, [r7, #8]
    49c6:	adds	r5, r2, r0
    49c8:	ldr	r5, [r5, #4]
    49ca:	lsls	r5, r5, #31
    49cc:	bpl.n	4a54 <_free_r+0xd8>
    49ce:	orr.w	r2, r3, #1
    49d2:	str	r2, [r4, #4]
    49d4:	str	r3, [r4, r3]
    49d6:	cmp.w	r3, #512	; 0x200
    49da:	bcs.n	4a0e <_free_r+0x92>
    49dc:	lsrs	r3, r3, #3
    49de:	adds	r2, r3, #1
    49e0:	ldr	r5, [r1, #4]
    49e2:	ldr.w	r7, [r1, r2, lsl #3]
    49e6:	str	r7, [r4, #8]
    49e8:	movs	r0, #1
    49ea:	asrs	r3, r3, #2
    49ec:	lsl.w	r3, r0, r3
    49f0:	add.w	r0, r1, r2, lsl #3
    49f4:	orrs	r5, r3
    49f6:	subs	r0, #8
    49f8:	str	r0, [r4, #12]
    49fa:	str	r5, [r1, #4]
    49fc:	str.w	r4, [r1, r2, lsl #3]
    4a00:	str	r4, [r7, #12]
    4a02:	mov	r0, r8
    4a04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4a08:	b.w	4870 <__malloc_unlock>
    4a0c:	bx	lr
    4a0e:	lsrs	r2, r3, #9
    4a10:	cmp	r2, #4
    4a12:	bhi.n	4abc <_free_r+0x140>
    4a14:	lsrs	r2, r3, #6
    4a16:	add.w	r7, r2, #57	; 0x39
    4a1a:	lsls	r7, r7, #1
    4a1c:	add.w	r5, r2, #56	; 0x38
    4a20:	add.w	r0, r1, r7, lsl #2
    4a24:	ldr.w	r2, [r1, r7, lsl #2]
    4a28:	ldr	r1, [pc, #272]	; (4b3c <_free_r+0x1c0>)
    4a2a:	subs	r0, #8
    4a2c:	cmp	r0, r2
    4a2e:	beq.n	4acc <_free_r+0x150>
    4a30:	ldr	r1, [r2, #4]
    4a32:	bic.w	r1, r1, #3
    4a36:	cmp	r3, r1
    4a38:	bcs.n	4a40 <_free_r+0xc4>
    4a3a:	ldr	r2, [r2, #8]
    4a3c:	cmp	r0, r2
    4a3e:	bne.n	4a30 <_free_r+0xb4>
    4a40:	ldr	r0, [r2, #12]
    4a42:	str	r0, [r4, #12]
    4a44:	str	r2, [r4, #8]
    4a46:	str	r4, [r0, #8]
    4a48:	str	r4, [r2, #12]
    4a4a:	mov	r0, r8
    4a4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4a50:	b.w	4870 <__malloc_unlock>
    4a54:	ldr	r5, [r2, #8]
    4a56:	ldr	r7, [pc, #232]	; (4b40 <_free_r+0x1c4>)
    4a58:	cmp	r5, r7
    4a5a:	add	r3, r0
    4a5c:	beq.n	4ade <_free_r+0x162>
    4a5e:	ldr	r0, [r2, #12]
    4a60:	str	r0, [r5, #12]
    4a62:	orr.w	r2, r3, #1
    4a66:	str	r5, [r0, #8]
    4a68:	str	r2, [r4, #4]
    4a6a:	str	r3, [r4, r3]
    4a6c:	b.n	49d6 <_free_r+0x5a>
    4a6e:	lsls	r7, r7, #31
    4a70:	add	r3, r0
    4a72:	bmi.n	4a84 <_free_r+0x108>
    4a74:	ldr.w	r2, [r5, #-8]
    4a78:	subs	r4, r4, r2
    4a7a:	add	r3, r2
    4a7c:	ldr	r0, [r4, #8]
    4a7e:	ldr	r2, [r4, #12]
    4a80:	str	r2, [r0, #12]
    4a82:	str	r0, [r2, #8]
    4a84:	ldr	r2, [pc, #188]	; (4b44 <_free_r+0x1c8>)
    4a86:	ldr	r2, [r2, #0]
    4a88:	orr.w	r0, r3, #1
    4a8c:	cmp	r3, r2
    4a8e:	str	r0, [r4, #4]
    4a90:	str	r4, [r1, #8]
    4a92:	bcc.n	4a02 <_free_r+0x86>
    4a94:	ldr	r3, [pc, #176]	; (4b48 <_free_r+0x1cc>)
    4a96:	mov	r0, r8
    4a98:	ldr	r1, [r3, #0]
    4a9a:	bl	48e0 <_malloc_trim_r>
    4a9e:	b.n	4a02 <_free_r+0x86>
    4aa0:	adds	r1, r2, r0
    4aa2:	ldr	r1, [r1, #4]
    4aa4:	lsls	r1, r1, #31
    4aa6:	bmi.n	4b32 <_free_r+0x1b6>
    4aa8:	ldr	r1, [r2, #8]
    4aaa:	ldr	r2, [r2, #12]
    4aac:	str	r2, [r1, #12]
    4aae:	add	r3, r0
    4ab0:	orr.w	r0, r3, #1
    4ab4:	str	r1, [r2, #8]
    4ab6:	str	r0, [r4, #4]
    4ab8:	str	r3, [r4, r3]
    4aba:	b.n	4a02 <_free_r+0x86>
    4abc:	cmp	r2, #20
    4abe:	bhi.n	4af0 <_free_r+0x174>
    4ac0:	add.w	r7, r2, #92	; 0x5c
    4ac4:	lsls	r7, r7, #1
    4ac6:	add.w	r5, r2, #91	; 0x5b
    4aca:	b.n	4a20 <_free_r+0xa4>
    4acc:	asrs	r2, r5, #2
    4ace:	ldr	r3, [r1, #4]
    4ad0:	movs	r5, #1
    4ad2:	lsl.w	r2, r5, r2
    4ad6:	orrs	r3, r2
    4ad8:	str	r3, [r1, #4]
    4ada:	mov	r2, r0
    4adc:	b.n	4a42 <_free_r+0xc6>
    4ade:	orr.w	r2, r3, #1
    4ae2:	str	r4, [r1, #20]
    4ae4:	str	r4, [r1, #16]
    4ae6:	str	r5, [r4, #12]
    4ae8:	str	r5, [r4, #8]
    4aea:	str	r2, [r4, #4]
    4aec:	str	r3, [r4, r3]
    4aee:	b.n	4a02 <_free_r+0x86>
    4af0:	cmp	r2, #84	; 0x54
    4af2:	bhi.n	4b02 <_free_r+0x186>
    4af4:	lsrs	r2, r3, #12
    4af6:	add.w	r7, r2, #111	; 0x6f
    4afa:	lsls	r7, r7, #1
    4afc:	add.w	r5, r2, #110	; 0x6e
    4b00:	b.n	4a20 <_free_r+0xa4>
    4b02:	cmp.w	r2, #340	; 0x154
    4b06:	bhi.n	4b16 <_free_r+0x19a>
    4b08:	lsrs	r2, r3, #15
    4b0a:	add.w	r7, r2, #120	; 0x78
    4b0e:	lsls	r7, r7, #1
    4b10:	add.w	r5, r2, #119	; 0x77
    4b14:	b.n	4a20 <_free_r+0xa4>
    4b16:	movw	r0, #1364	; 0x554
    4b1a:	cmp	r2, r0
    4b1c:	bhi.n	4b2c <_free_r+0x1b0>
    4b1e:	lsrs	r2, r3, #18
    4b20:	add.w	r7, r2, #125	; 0x7d
    4b24:	lsls	r7, r7, #1
    4b26:	add.w	r5, r2, #124	; 0x7c
    4b2a:	b.n	4a20 <_free_r+0xa4>
    4b2c:	movs	r7, #254	; 0xfe
    4b2e:	movs	r5, #126	; 0x7e
    4b30:	b.n	4a20 <_free_r+0xa4>
    4b32:	orr.w	r2, r3, #1
    4b36:	str	r2, [r4, #4]
    4b38:	str	r3, [r4, r3]
    4b3a:	b.n	4a02 <_free_r+0x86>
    4b3c:	.word	0x1fff119c
    4b40:	.word	0x1fff11a4
    4b44:	.word	0x1fff15a4
    4b48:	.word	0x1fff1cbc

00004b4c <__register_exitproc>:
    4b4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b50:	ldr	r4, [pc, #148]	; (4be8 <__register_exitproc+0x9c>)
    4b52:	ldr	r5, [r4, #0]
    4b54:	ldr.w	r4, [r5, #328]	; 0x148
    4b58:	mov	r6, r0
    4b5a:	mov	r8, r1
    4b5c:	mov	sl, r2
    4b5e:	mov	r9, r3
    4b60:	cbz	r4, 4bd4 <__register_exitproc+0x88>
    4b62:	ldr	r0, [r4, #4]
    4b64:	cmp	r0, #31
    4b66:	bgt.n	4b98 <__register_exitproc+0x4c>
    4b68:	adds	r3, r0, #1
    4b6a:	cbz	r6, 4b8a <__register_exitproc+0x3e>
    4b6c:	add.w	r5, r4, r0, lsl #2
    4b70:	movs	r2, #1
    4b72:	str.w	sl, [r5, #136]	; 0x88
    4b76:	ldr.w	r1, [r4, #392]	; 0x188
    4b7a:	lsls	r2, r0
    4b7c:	orrs	r1, r2
    4b7e:	cmp	r6, #2
    4b80:	str.w	r1, [r4, #392]	; 0x188
    4b84:	str.w	r9, [r5, #264]	; 0x108
    4b88:	beq.n	4bc8 <__register_exitproc+0x7c>
    4b8a:	adds	r0, #2
    4b8c:	str	r3, [r4, #4]
    4b8e:	str.w	r8, [r4, r0, lsl #2]
    4b92:	movs	r0, #0
    4b94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b98:	ldr	r3, [pc, #80]	; (4bec <__register_exitproc+0xa0>)
    4b9a:	cbz	r3, 4bde <__register_exitproc+0x92>
    4b9c:	mov.w	r0, #400	; 0x190
    4ba0:	bl	42ec <malloc>
    4ba4:	mov	r4, r0
    4ba6:	cbz	r0, 4bde <__register_exitproc+0x92>
    4ba8:	ldr.w	r3, [r5, #328]	; 0x148
    4bac:	movs	r7, #0
    4bae:	stmia.w	r0, {r3, r7}
    4bb2:	str.w	r4, [r5, #328]	; 0x148
    4bb6:	mov	r0, r7
    4bb8:	movs	r3, #1
    4bba:	str.w	r7, [r4, #392]	; 0x188
    4bbe:	str.w	r7, [r4, #396]	; 0x18c
    4bc2:	cmp	r6, #0
    4bc4:	beq.n	4b8a <__register_exitproc+0x3e>
    4bc6:	b.n	4b6c <__register_exitproc+0x20>
    4bc8:	ldr.w	r1, [r4, #396]	; 0x18c
    4bcc:	orrs	r2, r1
    4bce:	str.w	r2, [r4, #396]	; 0x18c
    4bd2:	b.n	4b8a <__register_exitproc+0x3e>
    4bd4:	add.w	r4, r5, #332	; 0x14c
    4bd8:	str.w	r4, [r5, #328]	; 0x148
    4bdc:	b.n	4b62 <__register_exitproc+0x16>
    4bde:	mov.w	r0, #4294967295
    4be2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4be6:	nop
    4be8:	.word	0x00004f44
    4bec:	.word	0x000042ed
    4bf0:	.word	0x00000026
    4bf4:	.word	0x00000029
    4bf8:	.word	0x0000002d
    4bfc:	.word	0x00000033
    4c00:	.word	0x00000064
    4c04:	.word	0x00000064
    4c08:	.word	0x00000064
    4c0c:	.word	0x00000064
    4c10:	.word	0x00000001
    4c14:	.word	0x00000001
    4c18:	.word	0x00000001
    4c1c:	.word	0x00000001
    4c20:	.word	0x7370704f
    4c24:	.word	0x6e61202c
    4c28:	.word	0x6b6e7520
    4c2c:	.word	0x6e776f6e
    4c30:	.word	0x44494d20
    4c34:	.word	0x656d2049
    4c38:	.word	0x67617373
    4c3c:	.word	0x79742065
    4c40:	.word	0x00216570
    4c44:	.word	0x43544950
    4c48:	.word	0x00000048
    4c4c:	.word	0x4f4c4556
    4c50:	.word	0x59544943
    4c54:	.word	0x00000000
    4c58:	.word	0x45544f4e
    4c5c:	.word	0x474e454c
    4c60:	.word	0x00004854
    4c64:	.word	0x424f4c47
    4c68:	.word	0x00004c41
    4c6c:	.word	0x79616c50
    4c70:	.word	0x00000000

00004c74 <pin2sc1a>:
    4c74:	................
    4c84:	................
    4c94:	................
    4ca4:	................
    4cb4:	........

00004cbc <digital_pin_to_info_PGM>:
    4cbc:	@..C@..@D..CD..@
    4ccc:	...C...@0..C0..@
    4cdc:	4..C4..@...C...@
    4cec:	...C...@...C...@
    4cfc:	...C...@...C...@
    4d0c:	...C...@...C...@
    4d1c:	...C...@...C...@
    4d2c:	...C...@...C...@
    4d3c:	...C...@...C...@
    4d4c:	...C...@...C...@
    4d5c:	...C...@...C...@
    4d6c:	...C...@...C...@
    4d7c:	h .Ch..@...C...@
    4d8c:	8..C8..@<..C<..@
    4d9c:	@..C@..@H..CH..@
    4dac:	L..CL..@(..C(..@
    4dbc:	,..C,..@` .C`..@
    4dcc:	d .Cd..@ ..C ..@
    4ddc:	$..C$..@(..C(..@
    4dec:	,..C,..@D..CD..@
    4dfc:	p..Cp..@t..Ct..@
    4e0c:	h..Ch..@P..CP..@
    4e1c:	X..CX..@\..C\..@
    4e2c:	T..CT..@ ..C ..@
    4e3c:	$..C$..@...C...@
    4e4c:	...C...@8..C8..@
    4e5c:	4..C4..@0..C0..@
    4e6c:	<..C<..@,..C,..@
    4e7c:	( .C(..@, .C,..@
    4e8c:	. .C...@. .C...@
    4e9c:	. .C...@. .C...@
    4eac:	. .C...@. .C...@

00004ebc <vtable for usb_serial_class>:
	...
    4ec4:	E8..=8..98..58..
    4ed4:	18..-8..)8..%8..
    4ee4:	....

00004ee8 <usb_endpoint_config_table>:
    4ee8:	........

00004ef0 <usb_descriptor_list>:
    4ef0:	....t...........
    4f00:	............P...
    4f10:	................
    4f20:	....8...........
    4f30:	T...............
    4f40:	....

00004f44 <_global_impure_ptr>:
    4f44:	p...

00004f48 <_init>:
    4f48:	push	{r3, r4, r5, r6, r7, lr}
    4f4a:	nop
    4f4c:	pop	{r3, r4, r5, r6, r7}
    4f4e:	pop	{r3}
    4f50:	mov	lr, r3
    4f52:	bx	lr

00004f54 <__init_array_start>:
    4f54:	.word	0x00004899

00004f58 <__frame_dummy_init_array_entry>:
    4f58:	5.......

Disassembly of section .fini:

00004f60 <_fini>:
    4f60:	push	{r3, r4, r5, r6, r7, lr}
    4f62:	nop

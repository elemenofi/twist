
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000059c0 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00004668 l     F .text	0000000c startup_default_early_hook
00004674 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
000059b8 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00002310 l     F .text	000002e0 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff18f9 l     O .bss	00000001 tx_noautoflush
1fff18fc l     O .bss	00000004 tx_packet
1fff1900 l     O .bss	00000001 transmit_previous_timeout
1fff1904 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000028c4 l     F .text	00000144 wait_for_cal
1fff1909 l     O .bss	00000001 analog_right_shift
1fff190a l     O .bss	00000001 calibrating
000056d4 l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff190b l     O .bss	00000001 analogReadBusyADC1
1fff190c l     O .bss	00000001 analogReadBusyADC0
1fff190d l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00002be4 l     F .text	0000004c digitalWrite.part.1
00002c30 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002f10 l     F .text	00000048 sysex_byte
1fff1928 l     O .bss	00000001 tx_noautoflush
1fff1954 l     O .bss	00000004 tx_packet
1fff1958 l     O .bss	00000001 transmit_previous_timeout
1fff1960 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1974 l     O .bss	00000004 ep0_tx_ptr
1fff1978 l     O .bss	00000014 rx_last
1fff198c l     O .bss	00000002 ep0_tx_len
1fff1990 l     O .bss	00000040 ep0_rx0_buf
1fff19d0 l     O .bss	00000014 rx_first
1fff19e4 l     O .bss	00000001 ep0_tx_data_toggle
1fff19e8 l     O .bss	00000040 ep0_rx1_buf
1fff1a28 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1a3c l     O .bss	00000014 tx_last
1fff1a50 l     O .bss	00000008 setup
1fff1a58 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1a5c l     O .bss	00000008 reply_buffer
1fff1a68 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1a6d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1a70 l     O .bss	00000004 rts_pin
1fff1a74 l     O .bss	00000001 rx_buffer_head
1fff1a75 l     O .bss	00000001 rx_buffer_tail
1fff1a78 l     O .bss	00000028 tx_buffer
1fff1aa0 l     O .bss	00000040 rx_buffer
1fff1ae0 l     O .bss	00000001 transmitting
1fff1ae1 l     O .bss	00000001 tx_buffer_tail
1fff1ae4 l     O .bss	00000004 transmit_pin
1fff1ae8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1aec l     O .bss	00000004 rts_pin
1fff1af0 l     O .bss	00000001 transmitting
1fff1af1 l     O .bss	00000001 rx_buffer_tail
1fff1af4 l     O .bss	00000028 tx_buffer
1fff1b1c l     O .bss	00000040 rx_buffer
1fff1b5c l     O .bss	00000001 rx_buffer_head
1fff1b5d l     O .bss	00000001 tx_buffer_tail
1fff1b60 l     O .bss	00000004 transmit_pin
1fff1b64 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1b68 l     O .bss	00000004 rts_pin
1fff1b6c l     O .bss	00000001 rx_buffer_head
1fff1b6d l     O .bss	00000001 rx_buffer_tail
1fff1b70 l     O .bss	00000028 tx_buffer
1fff1b98 l     O .bss	00000040 rx_buffer
1fff1bd8 l     O .bss	00000001 transmitting
1fff1bd9 l     O .bss	00000001 tx_buffer_tail
1fff1bdc l     O .bss	00000004 transmit_pin
1fff1be0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1be4 l     O .bss	00000004 rts_pin
1fff1be8 l     O .bss	00000001 rx_buffer_head
1fff1be9 l     O .bss	00000001 rx_buffer_tail
1fff1bec l     O .bss	00000040 tx_buffer
1fff1c2c l     O .bss	00000040 rx_buffer
1fff1c6c l     O .bss	00000001 transmitting
1fff1c6d l     O .bss	00000001 tx_buffer_tail
1fff1c70 l     O .bss	00000004 transmit_pin
1fff1c74 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1c78 l     O .bss	00000004 rts_pin
1fff1c7c l     O .bss	00000001 rx_buffer_head
1fff1c7d l     O .bss	00000001 rx_buffer_tail
1fff1c80 l     O .bss	00000028 tx_buffer
1fff1ca8 l     O .bss	00000040 rx_buffer
1fff1ce8 l     O .bss	00000001 transmitting
1fff1ce9 l     O .bss	00000001 tx_buffer_tail
1fff1cec l     O .bss	00000004 transmit_pin
1fff1cf0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1cf4 l     O .bss	00000004 rts_pin
1fff1cf8 l     O .bss	00000001 rx_buffer_head
1fff1cf9 l     O .bss	00000001 rx_buffer_tail
1fff1cfc l     O .bss	00000028 tx_buffer
1fff1d24 l     O .bss	00000040 rx_buffer
1fff1d64 l     O .bss	00000001 transmitting
1fff1d65 l     O .bss	00000001 tx_buffer_tail
1fff1d68 l     O .bss	00000004 transmit_pin
1fff1d6c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00005308 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1f08 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00004660  w    F .text	00000006 adc0_isr
00002668 g     F .text	0000001c usb_serial_available
00004520 g     F .text	00000020 serial4_available
0000413c  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
0000470c g     F .text	00000020 serial_available
1fff192c g     O .bss	00000004 usb_midi_handleProgramChange
1fff1774 g     O .bss	00000034 sequence
00004618  w    F .text	00000048 hard_fault_isr
00004660  w    F .text	00000006 dma_ch6_isr
00004230 g     F .text	00000020 Print::println()
000043f4 g     F .text	00000020 serial2_available
00004660  w    F .text	00000006 uart0_lon_isr
00003550 g     F .text	000000e8 usb_rx_memory
00004200  w    F .text	00000002 serialEvent5()
00004660  w    F .text	00000006 dma_ch8_isr
00004838 g     F .text	00000020 serial6_available
000052e0 g     F .text	00000002 __malloc_unlock
1fff1940 g     O .bss	00000004 usb_midi_handleAfterTouch
00002a08 g     F .text	000000e0 analog_init
00003638 g     F .text	00000084 usb_tx
00004660  w    F .text	00000006 portcd_isr
1fff1950 g     O .bss	00000004 usb_midi_handleSysExComplete
00004c58 g     F .text	00000098 MillisTimer::runFromTimer()
00004660  w    F .text	00000006 can1_rx_warn_isr
000059c4 g       .fini	00000000 __exidx_end
00004660  w    F .text	00000006 dma_error_isr
1fff1dcc g     O .bss	00000001 usb_midi_msg_type
1fff1d84 g     O .bss	00000001 EventResponder::runningFromYield
00004660  w    F .text	00000006 i2c0_isr
00004d00 g     F .text	0000000c __errno
00004660  w    F .text	00000006 portd_isr
00004660  w    F .text	00000006 enet_error_isr
1fff1d70 g     O .bss	00000004 EventResponder::firstInterrupt
00004660  w    F .text	00000006 tpm1_isr
0000421c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0000571c g     O .text	00000200 digital_pin_to_info_PGM
1fff1f04 g     O .bss	00000004 errno
000059c4 g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
000042f8  w    F .text	00000002 serialEvent6()
1fff193c g     O .bss	00000004 usb_midi_handleVelocityChange
00002cd8 g     F .text	0000001c digitalRead
00004660  w    F .text	00000006 porte_isr
000004c8 g     F .text	00001e48 loop
00004660  w    F .text	00000006 portb_isr
1fff17d0 g     O .bss	00000014 step3
00002ff4 g     F .text	0000002c usb_midi_flush_output
00004660  w    F .text	00000006 spi1_isr
00004540 g     F .text	000000d8 uart3_status_isr
00004b04  w    F .text	00000002 serialEvent1()
1fff18e0 g     O .bss	00000018 led4
00004660  w    F .text	00000006 mcm_isr
00004bf0 g     F .text	00000068 MillisTimer::addToActiveList()
00003020 g     F .text	0000043c usb_midi_read
1fff1918 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1d74 g     O .bss	00000004 EventResponder::lastInterrupt
00004414 g     F .text	0000010c uart1_status_isr
1fff1dce g     O .bss	00000002 usb_midi_msg_sysex_len
00004660  w    F .text	00000006 randnum_isr
1fff1920 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1910 g     O .bss	00000004 systick_millis_count
00004618  w    F .text	00000048 bus_fault_isr
00004660  w    F .text	00000006 watchdog_isr
00004660  w    F .text	00000006 i2c1_isr
1fff1a64 g     O .bss	00000001 usb_configuration
00004660  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
000042e0  w    F .text	00000002 serialEvent2()
00004660  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1ef8 g     O .bss	0000000a usb_rx_byte_count_data
00004660  w    F .text	00000006 pit1_isr
00004d5c g     F .text	00000010 malloc
00004660  w    F .text	00000006 dma_ch4_isr
00004660  w    F .text	00000006 software_isr
00004660  w    F .text	00000006 dma_ch7_isr
00004b8c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
0000406c g     F .text	000000d0 usb_init
00004660  w    F .text	00000006 lptmr_isr
1fff1d94 g     O .bss	00000004 __malloc_top_pad
00002ca8 g     F .text	00000024 rtc_set
1fff16fc g     O .bss	0000003c button5
1fff16c0 g     O .bss	0000003c button4
1fff0c40 g       .data	00000000 _sdata
1fff1970 g     O .bss	00000004 usb_midi_handleNoteOn
000046d8 g     F .text	00000034 kinetis_hsrun_enable
000052e4 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
000025f0 g     F .text	00000048 usb_serial_getchar
00004660  w    F .text	00000006 can1_bus_off_isr
00004660  w    F .text	00000006 ftm2_isr
1fff1dc0 g     O .bss	00000008 usb_cdc_line_coding
00002ccc g     F .text	0000000a digitalWrite
00004660  w    F .text	00000006 uart5_status_isr
00004858 g     F .text	000000e4 lpuart0_status_isr
1fff1d7c g     O .bss	00000004 EventResponder::lastYield
00005948 g     O .text	00000005 usb_endpoint_config_table
00004660  w    F .text	00000006 dma_ch9_isr
00004660  w    F .text	00000006 pit2_isr
00004a0c g     F .text	00000020 serial3_available
1fff17e4 g     O .bss	00000014 step4
1fff1d90 g     O .bss	00000004 __malloc_max_sbrked_mem
00002cf4 g     F .text	0000000a pinMode
0000349c g     F .text	0000004c usb_free
00004660  w    F .text	00000006 i2c3_isr
1fff1898 g     O .bss	00000018 led1
1fff1938 g     O .bss	00000004 usb_midi_handleSysExPartial
000059c4 g       .fini	00000000 __exidx_start
00004660  w    F .text	00000006 pit0_isr
1fff1dd0 g     O .bss	00000001 usb_midi_msg_data1
1fff1d80 g     O .bss	00000004 EventResponder::firstYield
000059a4 g     O .text	00000004 _global_impure_ptr
00004660  w    F .text	00000006 can1_error_isr
00004d0c g     F .text	00000050 __libc_init_array
1fff1f08 g       .bss	00000000 __bss_end
00004660  w    F .text	00000006 can0_wakeup_isr
00004660  w    F .text	00000006 flash_cmd_isr
1fff1868 g     O .bss	0000001c knob5
00004204  w    F .text	00000004 usb_serial_class::clear()
00004a2c g     F .text	000000d8 uart2_status_isr
00004678 g     F .text	0000002c _sbrk
1fff1d88 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff1908 g     O .bss	00000001 usb_cdc_line_rtsdtr
0000287c g     F .text	00000048 usb_serial_flush_callback
000059a8 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
00004660  w    F .text	00000006 svcall_isr
00004660  w    F .text	00000006 dma_ch15_isr
00004660  w    F .text	00000006 uart1_error_isr
00005328 g     F .text	00000028 __libc_fini_array
00004660  w    F .text	00000006 usbhs_phy_isr
1fff1f08 g       .bss	00000000 _ebss
00004660 g     F .text	00000006 unused_isr
00004660  w    F .text	00000006 spi0_isr
00004660  w    F .text	00000006 dma_ch3_isr
00004660  w    F .text	00000006 flash_error_isr
1fff1814 g     O .bss	0000001c knob2
000042fc g     F .text	00000020 serial5_available
00004660  w    F .text	00000006 uart5_error_isr
00004660  w    F .text	00000006 rtc_seconds_isr
00004660  w    F .text	00000006 pdb_isr
00004618  w    F .text	00000048 usage_fault_isr
00004660  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00004660  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1dc8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff1884 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
00004cf0 g     F .text	00000010 systick_isr
00004660  w    F .text	00000006 rtc_alarm_isr
00004660  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
00004660  w    F .text	00000006 ftm1_isr
00004224  w    F .text	00000006 usb_serial_class::write(unsigned char)
00004668  w    F .text	0000000c startup_early_hook
00004660  w    F .text	00000006 dma_ch13_isr
00004660  w    F .text	00000006 uart2_error_isr
00002638 g     F .text	00000030 usb_serial_peekchar
00000490  w    F .text	00000034 Led::blink(int)
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
00004618 g     F .text	00000048 fault_isr
000053ec g     F .text	000001d0 _free_r
1fff195c g     O .bss	00000004 usb_midi_handleStop
00004660  w    F .text	00000006 usb_charge_isr
00004214  w    F .text	00000004 usb_serial_class::flush()
00004660  w    F .text	00000006 cmt_isr
00004660  w    F .text	00000006 usbhs_isr
1fff196c g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
0000420c  w    F .text	00000004 usb_serial_class::read()
00004660  w    F .text	00000006 ftm3_isr
00004660  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff17f8 g     O .bss	0000001c knob1
00004660  w    F .text	00000006 spi2_isr
000042e4  w    F .text	00000002 serialEvent4()
0000422c  w    F .text	00000002 serialEvent()
1fff19e5 g     O .bss	00000001 usb_reboot_timer
000055bc g     F .text	000000a4 __register_exitproc
00002684 g     F .text	00000038 usb_serial_flush_input
000027c4 g     F .text	00000018 usb_serial_putchar
1fff1d98 g     O .bss	00000028 __malloc_current_mallinfo
00004660  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff1a59 g     O .bss	00000001 usb_rx_memory_needed
000036bc g     F .text	000009b0 usb_isr
1fff17a8 g     O .bss	00000014 step1
1fff1968 g     O .bss	00000004 usb_midi_handleNoteOff
0000591c  w    O .text	00000028 vtable for usb_serial_class
1fff1830 g     O .bss	0000001c knob3
00004660  w    F .text	00000006 uart3_error_isr
1fff1d78 g     O .bss	00000004 MillisTimer::listActive
00004660  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00004660  w    F .text	00000006 low_voltage_isr
1fff1648 g     O .bss	0000003c button2
1fff11ac g     O .data	00000408 __malloc_av_
00004660  w    F .text	00000006 can0_error_isr
00002da4 g     F .text	0000016c _init_Teensyduino_internal_
00002824 g     F .text	00000058 usb_serial_flush_output
00004660  w    F .text	00000006 dma_ch12_isr
000052dc g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00004660  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00004660  w    F .text	00000006 pit3_isr
00004660  w    F .text	00000006 enet_rx_isr
00004660  w    F .text	00000006 portc_isr
000042e8 g     F .text	00000010 main
1fff1d8c g     O .bss	00000004 __malloc_max_total_mem
1fff18c8 g     O .bss	00000018 led3
00004618  w    F .text	00000048 memmanage_fault_isr
0000493c g     F .text	00000084 usb_init_serialnumber
1fff1894 g     O .bss	00000001 currentMode
000059c0 g       .text	00000000 __init_array_end
00004d6c g     F .text	00000570 _malloc_r
00004660  w    F .text	00000006 debugmonitor_isr
1fff1934 g     O .bss	00000004 usb_midi_handleSongPosition
00004b0c g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1924 g     O .bss	00000004 usb_midi_handleContinue
1fff1dd1 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00004660  w    F .text	00000006 cmp1_isr
1fff1684 g     O .bss	0000003c button3
00004660  w    F .text	00000006 ftm0_isr
00005350 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
000026bc g     F .text	00000108 usb_serial_write
00004674  w    F .text	00000002 startup_late_hook
00004210  w    F .text	00000004 usb_serial_class::available()
1fff1dd2 g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
00002d00 g     F .text	000000a4 delay
00004660  w    F .text	00000006 tpm0_isr
000059c0 g     F .fini	00000000 _fini
1fff17bc g     O .bss	00000014 step2
00004660  w    F .text	00000006 i2s0_rx_isr
00004660  w    F .text	00000006 uart4_error_isr
000042d0 g     F .text	00000010 Print::print(long)
00002f58 g     F .text	0000009c usb_midi_write_packed
0000531c g     F .text	0000000c atexit
00004660  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
00004660  w    F .text	00000006 can1_message_isr
00004660  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff194c g     O .bss	00000004 usb_midi_handleTuneRequest
000059b4 g       .text	00000000 __preinit_array_end
00004660  w    F .text	00000006 sdhc_isr
1fff1dd3 g     O .bss	00000001 usb_midi_msg_channel
000004c4 g     F .text	00000002 setup
00005950 g     O .text	00000054 usb_descriptor_list
000034e8 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff184c g     O .bss	0000001c knob4
00004660  w    F .text	00000006 dma_ch10_isr
1fff1944 g     O .bss	00000004 usb_midi_handleStart
00004660  w    F .text	00000006 uart0_error_isr
0000345c g     F .text	00000040 usb_malloc
00004660  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
000027dc g     F .text	00000048 usb_serial_write_buffer_free
00004660  w    F .text	00000006 enet_timer_isr
1fff1738 g     O .bss	0000003c button6
1fff160c g     O .bss	0000003c button1
1fff15bc g       .data	00000000 _edata
00004660  w    F .text	00000006 i2s0_tx_isr
00004660  w    F .text	00000006 adc1_isr
00004218  w    F .text	00000004 usb_serial_class::availableForWrite()
00004660  w    F .text	00000006 cmp0_isr
1fff1914 g     O .bss	00000004 usb_midi_handleClock
000049c0 g     F .text	0000004c ultoa
00004ba8 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
00004208  w    F .text	00000004 usb_serial_class::peek()
1fff18f8 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1930 g     O .bss	00000004 usb_midi_handlePitchChange
00004660  w    F .text	00000006 pit_isr
1fff1948 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00004660  w    F .text	00000006 dac0_isr
000059b4 g       .text	00000000 __init_array_start
00004660  w    F .text	00000006 can1_tx_warn_isr
00002ae8 g     F .text	000000fc analogRead
1fff1dd4 g     O .bss	00000122 usb_midi_msg_sysex
0000472c g     F .text	0000010c uart0_status_isr
00004660  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
00004660  w    F .text	00000006 dma_ch1_isr
00003524 g     F .text	0000002c usb_tx_packet_count
00004660  w    F .text	00000006 dma_ch5_isr
00004660  w    F .text	00000006 can0_rx_warn_isr
00004660  w    F .text	00000006 can0_tx_warn_isr
0000431c g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000046a4 g     F .text	00000034 kinetis_hsrun_disable
000059b4 g       .text	00000000 __preinit_array_start
00004b08  w    F .text	00000002 serialEvent3()
1fff1964 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff18b0 g     O .bss	00000018 led2
00004660  w    F .text	00000006 cmp2_isr
00004bec g     F .text	00000004 pendablesrvreq_isr
00004660  w    F .text	00000006 wakeup_isr
00004660  w    F .text	00000006 cmp3_isr
00004250 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
1fff191c g     O .bss	00000004 usb_midi_handleActiveSensing
00004660  w    F .text	00000006 tpm2_isr
00004660  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
00004660  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ....aF...F..
      10:	.F...F...F...F..
      20:	.F...F...F..aF..
      30:	aF...F...K...L..
      40:	aF..aF..aF..aF..
      50:	aF..aF..aF..aF..
      60:	aF..aF..aF..aF..
      70:	aF..aF..aF..aF..
      80:	aF..aF..aF..aF..
      90:	aF..aF..aF..aF..
      a0:	aF..aF..aF..aF..
      b0:	aF..aF..aF..-G..
      c0:	aF...D..aF..-J..
      d0:	aF..AE..aF..aF..
      e0:	aF..aF..aF..aF..
      f0:	aF..aF..aF..aF..
     100:	aF..aF..aF..aF..
     110:	aF...6..aF..aF..
     120:	aF..aF..aF..aF..
     130:	aF..aF..aF..aF..
     140:	aF..aF...C..aF..
     150:	aF..aF..aF..aF..
     160:	aF..aF..aF..aF..
     170:	aF..aF..aF..aF..
     180:	aF..aF..aF..aF..
     190:	aF..aF..YH..aF..
     1a0:	aF..aF..aF..aF..
     1b0:	aF..aF..aF..aF..
     1c0:	aF..aF..aF..aF..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	4668 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	2da4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2ca8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2ca8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4d0c <__libc_init_array>

	startup_late_hook();
     33a:	bl	4674 <startup_late_hook>
	main();
     33e:	bl	42e8 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x000059c0
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1f08
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x000059c4

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x000059c4
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #75	; 0x4b
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	2cf4 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	2ccc <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <Led::blink(int)>:

    void blink (int times = 0) {
     490:	push	{r4, r5, r6, lr}
      digitalWrite(m_pin, !digitalRead(m_pin));
     492:	ldrb	r5, [r0, #0]

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     494:	sub	sp, #8
     496:	mov	r4, r0
      digitalWrite(m_pin, !digitalRead(m_pin));
     498:	mov	r0, r5

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     49a:	mov	r6, r1
      digitalWrite(m_pin, !digitalRead(m_pin));
     49c:	bl	2cd8 <digitalRead>
     4a0:	clz	r1, r0
     4a4:	lsrs	r1, r1, #5
     4a6:	mov	r0, r5
     4a8:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ac:	ldr	r3, [pc, #16]	; (4c0 <Led::blink(int)+0x30>)
      blinking = true;
      blinkingCounter = times;
     4ae:	str	r6, [r4, #20]
     4b0:	ldr	r3, [r3, #0]
     4b2:	str	r3, [sp, #4]
	return ret;
     4b4:	ldr	r3, [sp, #4]
      lastBlink = millis();  
     4b6:	str	r3, [r4, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     4b8:	movs	r2, #1
     4ba:	strb	r2, [r4, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    };
     4bc:	add	sp, #8
     4be:	pop	{r4, r5, r6, pc}
     4c0:	.word	0x1fff1910

000004c4 <setup>:
Knob knob3(A2, sequence, transport, THIRD, 2);
Knob knob4(A3, sequence, transport, FOURTH, 3);
Knob knob5(A4, sequence, transport, FIFTH, 4);
// implement a scale knob that transposes the sequencer

void setup() {
     4c4:	bx	lr
     4c6:	nop

000004c8 <loop>:
  Serial.begin(9600);
}

void loop() {
     4c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     4cc:	movs	r0, #0
     4ce:	sub	sp, #300	; 0x12c
     4d0:	bl	3020 <usb_midi_read>
  if (usbMIDI.read()) {
     4d4:	cmp	r0, #0
     4d6:	bne.w	d14 <loop+0x84c>
     4da:	ldr	r4, [pc, #692]	; (790 <loop+0x2c8>)

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     4dc:	ldr	r6, [pc, #692]	; (794 <loop+0x2cc>)
     4de:	ldrb.w	r0, [r6, #56]	; 0x38
     4e2:	bl	2cd8 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     4e6:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     4e8:	mov	r7, r0
     4ea:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     4ec:	ldrb.w	r5, [r6, #48]	; 0x30
     4f0:	beq.w	d44 <loop+0x87c>
     4f4:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4f6:	ldr	r2, [r4, #0]
     4f8:	str	r2, [sp, #188]	; 0xbc
	return ret;
     4fa:	ldr	r1, [sp, #188]	; 0xbc
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     4fc:	ldr	r2, [pc, #664]	; (798 <loop+0x2d0>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     4fe:	ldr	r0, [pc, #660]	; (794 <loop+0x2cc>)
     500:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     502:	smull	r1, r2, r2, r3
     506:	asrs	r1, r3, #31
     508:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     50c:	cmp	r5, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     50e:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     510:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     512:	beq.w	d3e <loop+0x876>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     516:	ldr	r1, [r4, #0]
     518:	str	r1, [sp, #184]	; 0xb8
	return ret;
     51a:	ldr	r1, [sp, #184]	; 0xb8
        m_lastDebounceTime = millis();
     51c:	str	r1, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     51e:	ldr	r0, [r4, #0]
     520:	str	r0, [sp, #180]	; 0xb4
	return ret;
     522:	ldr	r0, [sp, #180]	; 0xb4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     524:	ldr.w	r8, [pc, #616]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     528:	cmp	r0, r1
     52a:	beq.n	540 <loop+0x78>
        // and the current changed
        if (current != m_state) {
     52c:	ldr	r1, [r6, #4]
     52e:	ldr.w	r9, [pc, #612]	; 794 <loop+0x2cc>
     532:	cmp	r7, r1
     534:	beq.n	540 <loop+0x78>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     536:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     538:	str.w	r7, [r9, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     53c:	ble.w	10bc <loop+0xbf4>
        onClick();
      }
 
      if (millis_held > 50) {
     540:	cmp	r3, #50	; 0x32
     542:	ble.n	554 <loop+0x8c>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     544:	cbnz	r7, 554 <loop+0x8c>
     546:	ldrb.w	r3, [r6, #48]	; 0x30
     54a:	ldr	r5, [pc, #584]	; (794 <loop+0x2cc>)
     54c:	cmp	r3, #1
     54e:	beq.w	132a <loop+0xe62>
     552:	ldr	r7, [r6, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     554:	ldr	r5, [pc, #580]	; (79c <loop+0x2d4>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     556:	strb.w	r7, [r6, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     55a:	ldrb.w	r0, [r5, #56]	; 0x38
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     55e:	str	r2, [r6, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     560:	bl	2cd8 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     564:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     566:	mov	r6, r0
     568:	str	r0, [r5, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     56a:	ldrb.w	r7, [r5, #48]	; 0x30
     56e:	beq.w	d80 <loop+0x8b8>
     572:	ldr	r3, [r5, #52]	; 0x34
     574:	ldr	r2, [r4, #0]
     576:	str	r2, [sp, #168]	; 0xa8
	return ret;
     578:	ldr	r1, [sp, #168]	; 0xa8
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     57a:	ldr	r2, [pc, #540]	; (798 <loop+0x2d0>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     57c:	ldr	r0, [pc, #540]	; (79c <loop+0x2d4>)
     57e:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     580:	smull	r1, r2, r2, r3
     584:	asrs	r1, r3, #31
     586:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     58a:	cmp	r7, r6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     58c:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     58e:	str	r2, [r5, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     590:	beq.w	d7c <loop+0x8b4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr	r1, [r4, #0]
     596:	str	r1, [sp, #164]	; 0xa4
	return ret;
     598:	ldr	r1, [sp, #164]	; 0xa4
        m_lastDebounceTime = millis();
     59a:	str	r1, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     59c:	ldr	r0, [r4, #0]
     59e:	str	r0, [sp, #160]	; 0xa0
	return ret;
     5a0:	ldr	r0, [sp, #160]	; 0xa0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5a2:	ldr.w	r8, [pc, #492]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     5a6:	cmp	r0, r1
     5a8:	beq.n	5be <loop+0xf6>
        // and the current changed
        if (current != m_state) {
     5aa:	ldr	r1, [r5, #4]
     5ac:	ldr.w	r9, [pc, #492]	; 79c <loop+0x2d4>
     5b0:	cmp	r6, r1
     5b2:	beq.n	5be <loop+0xf6>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     5b4:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     5b6:	str.w	r6, [r9, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     5ba:	ble.w	1114 <loop+0xc4c>
        onClick();
      }
 
      if (millis_held > 50) {
     5be:	cmp	r3, #50	; 0x32
     5c0:	ble.n	5d2 <loop+0x10a>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     5c2:	cbnz	r6, 5d2 <loop+0x10a>
     5c4:	ldrb.w	r3, [r5, #48]	; 0x30
     5c8:	ldr	r7, [pc, #464]	; (79c <loop+0x2d4>)
     5ca:	cmp	r3, #1
     5cc:	beq.w	1352 <loop+0xe8a>
     5d0:	ldr	r6, [r5, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5d2:	ldr	r7, [pc, #460]	; (7a0 <loop+0x2d8>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     5d4:	strb.w	r6, [r5, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5d8:	ldrb.w	r0, [r7, #56]	; 0x38
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     5dc:	str	r2, [r5, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5de:	bl	2cd8 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     5e2:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5e4:	mov	r5, r0
     5e6:	str	r0, [r7, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     5e8:	ldrb.w	r6, [r7, #48]	; 0x30
     5ec:	beq.w	e5e <loop+0x996>
     5f0:	ldr	r3, [r7, #52]	; 0x34
     5f2:	ldr	r2, [r4, #0]
     5f4:	str	r2, [sp, #148]	; 0x94
	return ret;
     5f6:	ldr	r1, [sp, #148]	; 0x94
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     5f8:	ldr	r2, [pc, #412]	; (798 <loop+0x2d0>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     5fa:	ldr	r0, [pc, #420]	; (7a0 <loop+0x2d8>)
     5fc:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     5fe:	smull	r1, r2, r2, r3
     602:	asrs	r1, r3, #31
     604:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     608:	cmp	r6, r5
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     60a:	str	r3, [r7, #36]	; 0x24
      secs_held = millis_held / 1000;
     60c:	str	r2, [r7, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     60e:	beq.w	e58 <loop+0x990>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #144]	; 0x90
	return ret;
     616:	ldr	r1, [sp, #144]	; 0x90
        m_lastDebounceTime = millis();
     618:	str	r1, [r7, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     61a:	ldr	r0, [r4, #0]
     61c:	str	r0, [sp, #140]	; 0x8c
	return ret;
     61e:	ldr	r0, [sp, #140]	; 0x8c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     620:	ldr.w	r8, [pc, #364]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     624:	cmp	r0, r1
     626:	beq.n	63c <loop+0x174>
        // and the current changed
        if (current != m_state) {
     628:	ldr	r1, [r7, #4]
     62a:	ldr.w	r9, [pc, #372]	; 7a0 <loop+0x2d8>
     62e:	cmp	r1, r5
     630:	beq.n	63c <loop+0x174>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     632:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     634:	str.w	r5, [r9, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     638:	ble.w	107a <loop+0xbb2>
        onClick();
      }
 
      if (millis_held > 50) {
     63c:	cmp	r3, #50	; 0x32
     63e:	ble.n	650 <loop+0x188>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     640:	cbnz	r5, 650 <loop+0x188>
     642:	ldrb.w	r3, [r7, #48]	; 0x30
     646:	ldr	r6, [pc, #344]	; (7a0 <loop+0x2d8>)
     648:	cmp	r3, #1
     64a:	beq.w	133e <loop+0xe76>
     64e:	ldr	r5, [r7, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     650:	ldr	r6, [pc, #336]	; (7a4 <loop+0x2dc>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     652:	strb.w	r5, [r7, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     656:	ldrb.w	r0, [r6, #56]	; 0x38
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     65a:	str	r2, [r7, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     65c:	bl	2cd8 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     660:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     662:	mov	r7, r0
     664:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     666:	ldrb.w	r5, [r6, #48]	; 0x30
     66a:	beq.w	e9c <loop+0x9d4>
     66e:	ldr	r3, [r6, #52]	; 0x34
     670:	ldr	r2, [r4, #0]
     672:	str	r2, [sp, #128]	; 0x80
	return ret;
     674:	ldr	r1, [sp, #128]	; 0x80
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     676:	ldr	r2, [pc, #288]	; (798 <loop+0x2d0>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     678:	ldr	r0, [pc, #296]	; (7a4 <loop+0x2dc>)
     67a:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     67c:	smull	r1, r2, r2, r3
     680:	asrs	r1, r3, #31
     682:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     686:	cmp	r5, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     688:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     68a:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     68c:	beq.w	e96 <loop+0x9ce>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     690:	ldr	r1, [r4, #0]
     692:	str	r1, [sp, #124]	; 0x7c
	return ret;
     694:	ldr	r1, [sp, #124]	; 0x7c
        m_lastDebounceTime = millis();
     696:	str	r1, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     698:	ldr	r0, [r4, #0]
     69a:	str	r0, [sp, #120]	; 0x78
	return ret;
     69c:	ldr	r0, [sp, #120]	; 0x78
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     69e:	ldr.w	r8, [pc, #240]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     6a2:	cmp	r0, r1
     6a4:	beq.n	6ba <loop+0x1f2>
        // and the current changed
        if (current != m_state) {
     6a6:	ldr	r1, [r6, #4]
     6a8:	ldr.w	r9, [pc, #248]	; 7a4 <loop+0x2dc>
     6ac:	cmp	r1, r7
     6ae:	beq.n	6ba <loop+0x1f2>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     6b0:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     6b2:	str.w	r7, [r9, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     6b6:	ble.w	fb4 <loop+0xaec>
        onClick();
      }
 
      if (millis_held > 50) {
     6ba:	cmp	r3, #50	; 0x32
     6bc:	ble.n	6ce <loop+0x206>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     6be:	cbnz	r7, 6ce <loop+0x206>
     6c0:	ldrb.w	r3, [r6, #48]	; 0x30
     6c4:	ldr	r5, [pc, #220]	; (7a4 <loop+0x2dc>)
     6c6:	cmp	r3, #1
     6c8:	beq.w	12ee <loop+0xe26>
     6cc:	ldr	r7, [r6, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6ce:	ldr	r5, [pc, #216]	; (7a8 <loop+0x2e0>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     6d0:	strb.w	r7, [r6, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6d4:	ldrb.w	r0, [r5, #56]	; 0x38
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     6d8:	str	r2, [r6, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6da:	bl	2cd8 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     6de:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6e0:	mov	r7, r0
     6e2:	str	r0, [r5, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     6e4:	ldrb.w	r6, [r5, #48]	; 0x30
     6e8:	beq.w	e22 <loop+0x95a>
     6ec:	ldr	r3, [r5, #52]	; 0x34
     6ee:	ldr	r2, [r4, #0]
     6f0:	str	r2, [sp, #108]	; 0x6c
	return ret;
     6f2:	ldr	r1, [sp, #108]	; 0x6c
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     6f4:	ldr	r2, [pc, #160]	; (798 <loop+0x2d0>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     6f6:	ldr	r0, [pc, #176]	; (7a8 <loop+0x2e0>)
     6f8:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     6fa:	smull	r1, r2, r2, r3
     6fe:	asrs	r1, r3, #31
     700:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     704:	cmp	r6, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     706:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     708:	str	r2, [r5, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     70a:	beq.w	e1e <loop+0x956>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     70e:	ldr	r1, [r4, #0]
     710:	str	r1, [sp, #104]	; 0x68
	return ret;
     712:	ldr	r1, [sp, #104]	; 0x68
        m_lastDebounceTime = millis();
     714:	str	r1, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     716:	ldr	r0, [r4, #0]
     718:	str	r0, [sp, #100]	; 0x64
	return ret;
     71a:	ldr	r0, [sp, #100]	; 0x64
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     71c:	ldr.w	r8, [pc, #112]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     720:	cmp	r0, r1
     722:	beq.n	738 <loop+0x270>
        // and the current changed
        if (current != m_state) {
     724:	ldr	r1, [r5, #4]
     726:	ldr.w	r9, [pc, #128]	; 7a8 <loop+0x2e0>
     72a:	cmp	r1, r7
     72c:	beq.n	738 <loop+0x270>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     72e:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     730:	str.w	r7, [r9, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     734:	ble.w	ff6 <loop+0xb2e>
        onClick();
      }
 
      if (millis_held > 50) {
     738:	cmp	r3, #50	; 0x32
     73a:	ble.n	74c <loop+0x284>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     73c:	cbnz	r7, 74c <loop+0x284>
     73e:	ldrb.w	r3, [r5, #48]	; 0x30
     742:	ldr	r6, [pc, #100]	; (7a8 <loop+0x2e0>)
     744:	cmp	r3, #1
     746:	beq.w	1302 <loop+0xe3a>
     74a:	ldr	r7, [r5, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     74c:	ldr	r6, [pc, #92]	; (7ac <loop+0x2e4>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     74e:	strb.w	r7, [r5, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     752:	ldrb.w	r0, [r6, #56]	; 0x38
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     756:	str	r2, [r5, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     758:	bl	2cd8 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     75c:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     75e:	mov	r5, r0
     760:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     762:	ldrb.w	r7, [r6, #48]	; 0x30
     766:	beq.w	de8 <loop+0x920>
     76a:	ldr	r3, [r6, #52]	; 0x34
     76c:	ldr	r2, [r4, #0]
     76e:	str	r2, [sp, #88]	; 0x58
	return ret;
     770:	ldr	r1, [sp, #88]	; 0x58
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     772:	ldr	r2, [pc, #36]	; (798 <loop+0x2d0>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     774:	ldr	r0, [pc, #52]	; (7ac <loop+0x2e4>)
     776:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     778:	smull	r1, r2, r2, r3
     77c:	asrs	r1, r3, #31
     77e:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     782:	cmp	r7, r5
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     784:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     786:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     788:	beq.w	de4 <loop+0x91c>
     78c:	b.n	7b0 <loop+0x2e8>
     78e:	nop
     790:	.word	0x1fff1910
     794:	.word	0x1fff160c
     798:	.word	0x10624dd3
     79c:	.word	0x1fff1648
     7a0:	.word	0x1fff1684
     7a4:	.word	0x1fff16c0
     7a8:	.word	0x1fff16fc
     7ac:	.word	0x1fff1738
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7b0:	ldr	r1, [r4, #0]
     7b2:	str	r1, [sp, #84]	; 0x54
	return ret;
     7b4:	ldr	r1, [sp, #84]	; 0x54
        m_lastDebounceTime = millis();
     7b6:	str	r1, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7b8:	ldr	r0, [r4, #0]
     7ba:	str	r0, [sp, #80]	; 0x50
	return ret;
     7bc:	ldr	r0, [sp, #80]	; 0x50
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7be:	ldr.w	r8, [pc, #696]	; a78 <loop+0x5b0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     7c2:	cmp	r0, r1
     7c4:	beq.n	7da <loop+0x312>
        // and the current changed
        if (current != m_state) {
     7c6:	ldr	r1, [r6, #4]
     7c8:	ldr.w	r9, [pc, #676]	; a70 <loop+0x5a8>
     7cc:	cmp	r1, r5
     7ce:	beq.n	7da <loop+0x312>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     7d0:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     7d2:	str.w	r5, [r9, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     7d6:	ble.w	1038 <loop+0xb70>
        onClick();
      }
 
      if (millis_held > 50) {
     7da:	cmp	r3, #50	; 0x32
     7dc:	ble.n	7ee <loop+0x326>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     7de:	cbnz	r5, 7ee <loop+0x326>
     7e0:	ldrb.w	r3, [r6, #48]	; 0x30
     7e4:	ldr	r7, [pc, #648]	; (a70 <loop+0x5a8>)
     7e6:	cmp	r3, #1
     7e8:	beq.w	1316 <loop+0xe4e>
     7ec:	ldr	r5, [r6, #32]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
     7ee:	ldr	r7, [pc, #644]	; (a74 <loop+0x5ac>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     7f0:	strb.w	r5, [r6, #48]	; 0x30
     7f4:	ldrb	r3, [r7, #16]
      prev_secs_held = secs_held;
     7f6:	str	r2, [r6, #44]	; 0x2c
     7f8:	cmp	r3, #0
     7fa:	beq.w	ccc <loop+0x804>
     7fe:	ldr	r3, [r4, #0]
     800:	str	r3, [sp, #72]	; 0x48
	return ret;
     802:	ldr	r3, [sp, #72]	; 0x48
     804:	ldr	r1, [r7, #8]
     806:	ldr	r2, [r7, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     808:	ldr	r6, [pc, #620]	; (a78 <loop+0x5b0>)
     80a:	subs	r3, r3, r1
     80c:	cmp	r2, r3
     80e:	bcc.w	cac <loop+0x7e4>
     812:	ldr	r5, [pc, #616]	; (a7c <loop+0x5b4>)
     814:	ldrb	r3, [r5, #16]
     816:	cmp	r3, #0
     818:	beq.w	c64 <loop+0x79c>
     81c:	ldr	r3, [r4, #0]
     81e:	str	r3, [sp, #60]	; 0x3c
	return ret;
     820:	ldr	r3, [sp, #60]	; 0x3c
     822:	ldr	r1, [r5, #8]
     824:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     826:	ldr	r7, [pc, #592]	; (a78 <loop+0x5b0>)
     828:	subs	r3, r3, r1
     82a:	cmp	r2, r3
     82c:	bcc.w	c44 <loop+0x77c>
     830:	ldr	r5, [pc, #588]	; (a80 <loop+0x5b8>)
     832:	ldrb	r3, [r5, #16]
     834:	cmp	r3, #0
     836:	beq.w	bfc <loop+0x734>
     83a:	ldr	r3, [r4, #0]
     83c:	str	r3, [sp, #48]	; 0x30
	return ret;
     83e:	ldr	r3, [sp, #48]	; 0x30
     840:	ldr	r1, [r5, #8]
     842:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     844:	ldr	r7, [pc, #560]	; (a78 <loop+0x5b0>)
     846:	subs	r3, r3, r1
     848:	cmp	r2, r3
     84a:	bcc.w	bdc <loop+0x714>
     84e:	ldr	r5, [pc, #564]	; (a84 <loop+0x5bc>)
     850:	ldrb	r3, [r5, #16]
     852:	cmp	r3, #0
     854:	beq.w	b94 <loop+0x6cc>
     858:	ldr	r3, [r4, #0]
     85a:	str	r3, [sp, #36]	; 0x24
	return ret;
     85c:	ldr	r3, [sp, #36]	; 0x24
     85e:	ldr	r1, [r5, #8]
     860:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     862:	ldr	r7, [pc, #532]	; (a78 <loop+0x5b0>)
     864:	subs	r3, r3, r1
     866:	cmp	r2, r3
     868:	bcc.w	b74 <loop+0x6ac>
     86c:	ldr	r5, [pc, #536]	; (a88 <loop+0x5c0>)
     86e:	ldrb	r3, [r5, #16]
     870:	cmp	r3, #0
     872:	beq.w	b2c <loop+0x664>
     876:	ldr	r3, [r4, #0]
     878:	str	r3, [sp, #24]
	return ret;
     87a:	ldr	r3, [sp, #24]
     87c:	ldr	r1, [r5, #8]
     87e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     880:	ldr	r7, [pc, #500]	; (a78 <loop+0x5b0>)
     882:	subs	r3, r3, r1
     884:	cmp	r2, r3
     886:	bcc.w	b0c <loop+0x644>
     88a:	ldr	r5, [pc, #512]	; (a8c <loop+0x5c4>)
     88c:	ldrb	r3, [r5, #16]
     88e:	cmp	r3, #0
     890:	beq.w	ac8 <loop+0x600>
     894:	ldr	r3, [r4, #0]
     896:	str	r3, [sp, #12]
	return ret;
     898:	ldr	r3, [sp, #12]
     89a:	ldr	r1, [r5, #8]
     89c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     89e:	ldr	r7, [pc, #472]	; (a78 <loop+0x5b0>)
     8a0:	subs	r3, r3, r1
     8a2:	cmp	r2, r3
     8a4:	bcc.w	aa8 <loop+0x5e0>
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     8a8:	ldr	r4, [pc, #484]	; (a90 <loop+0x5c8>)
     8aa:	ldrb	r0, [r4, #0]
     8ac:	bl	2ae8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     8b0:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     8b2:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     8b4:	cmp	r0, r3
     8b6:	beq.n	902 <loop+0x43a>
     8b8:	subs	r3, r0, r3
     8ba:	cmp	r3, #0
     8bc:	it	lt
     8be:	neglt	r3, r3
     8c0:	cmp	r3, #10
     8c2:	ble.n	902 <loop+0x43a>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     8c4:	ldrb	r3, [r4, #24]
     8c6:	cmp	r3, #4
     8c8:	beq.w	1366 <loop+0xe9e>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     8cc:	ldr	r3, [pc, #452]	; (a94 <loop+0x5cc>)
     8ce:	ldrb	r3, [r3, #0]
     8d0:	cmp	r3, #1
     8d2:	beq.w	16ba <loop+0x11f2>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     8d6:	cmp	r3, #0
     8d8:	beq.w	f5a <loop+0xa92>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     8dc:	cmp	r3, #2
     8de:	bne.n	900 <loop+0x438>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     8e0:	ldr	r2, [r4, #16]
     8e2:	ldr	r1, [r4, #12]
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     8e4:	mvn.w	r3, #21
     8e8:	mul.w	r3, r3, r0
     8ec:	cmp	r3, #0
     8ee:	add.w	r2, r2, r1, lsl #2
     8f2:	it	lt
     8f4:	addwlt	r3, r3, #1023	; 0x3ff
     8f8:	ldr	r2, [r2, #4]
     8fa:	asrs	r3, r3, #10
     8fc:	adds	r3, #24
     8fe:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     900:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     902:	ldr	r4, [pc, #404]	; (a98 <loop+0x5d0>)
     904:	ldrb	r0, [r4, #0]
     906:	bl	2ae8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     90a:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     90c:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     90e:	cmp	r0, r3
     910:	beq.n	95c <loop+0x494>
     912:	subs	r3, r0, r3
     914:	cmp	r3, #0
     916:	it	lt
     918:	neglt	r3, r3
     91a:	cmp	r3, #10
     91c:	ble.n	95c <loop+0x494>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     91e:	ldrb	r3, [r4, #24]
     920:	cmp	r3, #4
     922:	beq.w	13de <loop+0xf16>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     926:	ldr	r3, [pc, #364]	; (a94 <loop+0x5cc>)
     928:	ldrb	r3, [r3, #0]
     92a:	cmp	r3, #1
     92c:	beq.w	1660 <loop+0x1198>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     930:	cmp	r3, #0
     932:	beq.w	f3c <loop+0xa74>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     936:	cmp	r3, #2
     938:	bne.n	95a <loop+0x492>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     93a:	ldr	r2, [r4, #16]
     93c:	ldr	r1, [r4, #12]
     93e:	mvn.w	r3, #21
     942:	mul.w	r3, r3, r0
     946:	cmp	r3, #0
     948:	add.w	r2, r2, r1, lsl #2
     94c:	it	lt
     94e:	addwlt	r3, r3, #1023	; 0x3ff
     952:	ldr	r2, [r2, #4]
     954:	asrs	r3, r3, #10
     956:	adds	r3, #24
     958:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     95a:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     95c:	ldr	r4, [pc, #316]	; (a9c <loop+0x5d4>)
     95e:	ldrb	r0, [r4, #0]
     960:	bl	2ae8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     964:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     966:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     968:	cmp	r0, r3
     96a:	beq.n	9b6 <loop+0x4ee>
     96c:	subs	r3, r0, r3
     96e:	cmp	r3, #0
     970:	it	lt
     972:	neglt	r3, r3
     974:	cmp	r3, #10
     976:	ble.n	9b6 <loop+0x4ee>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     978:	ldrb	r3, [r4, #24]
     97a:	cmp	r3, #4
     97c:	beq.w	13c0 <loop+0xef8>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     980:	ldr	r3, [pc, #272]	; (a94 <loop+0x5cc>)
     982:	ldrb	r3, [r3, #0]
     984:	cmp	r3, #1
     986:	beq.w	167e <loop+0x11b6>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     98a:	cmp	r3, #0
     98c:	beq.w	f96 <loop+0xace>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     990:	cmp	r3, #2
     992:	bne.n	9b4 <loop+0x4ec>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     994:	ldr	r2, [r4, #16]
     996:	ldr	r1, [r4, #12]
     998:	mvn.w	r3, #21
     99c:	mul.w	r3, r3, r0
     9a0:	cmp	r3, #0
     9a2:	add.w	r2, r2, r1, lsl #2
     9a6:	it	lt
     9a8:	addwlt	r3, r3, #1023	; 0x3ff
     9ac:	ldr	r2, [r2, #4]
     9ae:	asrs	r3, r3, #10
     9b0:	adds	r3, #24
     9b2:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     9b4:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     9b6:	ldr	r4, [pc, #232]	; (aa0 <loop+0x5d8>)
     9b8:	ldrb	r0, [r4, #0]
     9ba:	bl	2ae8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     9be:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     9c0:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     9c2:	cmp	r0, r3
     9c4:	beq.n	a10 <loop+0x548>
     9c6:	subs	r3, r0, r3
     9c8:	cmp	r3, #0
     9ca:	it	lt
     9cc:	neglt	r3, r3
     9ce:	cmp	r3, #10
     9d0:	ble.n	a10 <loop+0x548>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     9d2:	ldrb	r3, [r4, #24]
     9d4:	cmp	r3, #4
     9d6:	beq.w	13a2 <loop+0xeda>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     9da:	ldr	r3, [pc, #184]	; (a94 <loop+0x5cc>)
     9dc:	ldrb	r3, [r3, #0]
     9de:	cmp	r3, #1
     9e0:	beq.w	169c <loop+0x11d4>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     9e4:	cmp	r3, #0
     9e6:	beq.w	f1e <loop+0xa56>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     9ea:	cmp	r3, #2
     9ec:	bne.n	a0e <loop+0x546>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     9ee:	ldr	r2, [r4, #16]
     9f0:	ldr	r1, [r4, #12]
     9f2:	mvn.w	r3, #21
     9f6:	mul.w	r3, r3, r0
     9fa:	cmp	r3, #0
     9fc:	add.w	r2, r2, r1, lsl #2
     a00:	it	lt
     a02:	addwlt	r3, r3, #1023	; 0x3ff
     a06:	ldr	r2, [r2, #4]
     a08:	asrs	r3, r3, #10
     a0a:	adds	r3, #24
     a0c:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     a0e:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     a10:	ldr	r4, [pc, #144]	; (aa4 <loop+0x5dc>)
     a12:	ldrb	r0, [r4, #0]
     a14:	bl	2ae8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     a18:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     a1a:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     a1c:	cmp	r0, r3
     a1e:	beq.n	a6a <loop+0x5a2>
     a20:	subs	r3, r0, r3
     a22:	cmp	r3, #0
     a24:	it	lt
     a26:	neglt	r3, r3
     a28:	cmp	r3, #10
     a2a:	ble.n	a6a <loop+0x5a2>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     a2c:	ldrb	r3, [r4, #24]
     a2e:	cmp	r3, #4
     a30:	beq.w	1384 <loop+0xebc>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     a34:	ldr	r3, [pc, #92]	; (a94 <loop+0x5cc>)
     a36:	ldrb	r3, [r3, #0]
     a38:	cmp	r3, #1
     a3a:	beq.w	16f0 <loop+0x1228>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     a3e:	cmp	r3, #0
     a40:	beq.w	f78 <loop+0xab0>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     a44:	cmp	r3, #2
     a46:	bne.n	a68 <loop+0x5a0>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     a48:	ldr	r2, [r4, #16]
     a4a:	ldr	r1, [r4, #12]
     a4c:	mvn.w	r3, #21
     a50:	mul.w	r3, r3, r0
     a54:	cmp	r3, #0
     a56:	add.w	r2, r2, r1, lsl #2
     a5a:	it	lt
     a5c:	addwlt	r3, r3, #1023	; 0x3ff
     a60:	ldr	r2, [r2, #4]
     a62:	asrs	r3, r3, #10
     a64:	adds	r3, #24
     a66:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     a68:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     a6a:	add	sp, #300	; 0x12c
     a6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a70:	.word	0x1fff1738
     a74:	.word	0x1fff1898
     a78:	.word	0x1fff1910
     a7c:	.word	0x1fff18b0
     a80:	.word	0x1fff18c8
     a84:	.word	0x1fff18e0
     a88:	.word	0x1fff15d8
     a8c:	.word	0x1fff15f0
     a90:	.word	0x1fff17f8
     a94:	.word	0x1fff1894
     a98:	.word	0x1fff1814
     a9c:	.word	0x1fff1830
     aa0:	.word	0x1fff184c
     aa4:	.word	0x1fff1868
        digitalWrite(m_pin, !digitalRead(m_pin));
     aa8:	ldrb	r6, [r5, #0]
     aaa:	mov	r0, r6
     aac:	bl	2cd8 <digitalRead>
     ab0:	clz	r1, r0
     ab4:	lsrs	r1, r1, #5
     ab6:	mov	r0, r6
     ab8:	bl	2ccc <digitalWrite>
     abc:	ldr	r3, [r7, #0]
     abe:	str	r3, [sp, #16]
	return ret;
     ac0:	ldr	r3, [sp, #16]
        blinking = false;
        lastBlink = millis();        
     ac2:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     ac4:	movs	r3, #0
     ac6:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     ac8:	ldr	r6, [r5, #20]
     aca:	ldr	r5, [pc, #748]	; (db8 <loop+0x8f0>)
     acc:	cmp	r6, #0
     ace:	ble.w	8a8 <loop+0x3e0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ad2:	ldr	r3, [r4, #0]
     ad4:	str	r3, [sp, #8]
	return ret;
     ad6:	ldr	r3, [sp, #8]
     ad8:	ldr	r1, [r5, #8]
     ada:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     adc:	ldr	r7, [pc, #732]	; (dbc <loop+0x8f4>)
     ade:	subs	r3, r3, r1
     ae0:	cmp	r2, r3
     ae2:	bcs.w	8a8 <loop+0x3e0>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ae6:	ldrb	r4, [r5, #0]
     ae8:	mov	r0, r4
     aea:	bl	2cd8 <digitalRead>
     aee:	clz	r1, r0
     af2:	lsrs	r1, r1, #5
     af4:	mov	r0, r4
     af6:	bl	2ccc <digitalWrite>
     afa:	ldr	r3, [r7, #0]
     afc:	str	r3, [sp, #292]	; 0x124
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     afe:	subs	r6, #2
	return ret;
     b00:	ldr	r2, [sp, #292]	; 0x124
     b02:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b04:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     b06:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b08:	strb	r3, [r5, #16]
     b0a:	b.n	8a8 <loop+0x3e0>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     b0c:	ldrb	r6, [r5, #0]
     b0e:	mov	r0, r6
     b10:	bl	2cd8 <digitalRead>
     b14:	clz	r1, r0
     b18:	lsrs	r1, r1, #5
     b1a:	mov	r0, r6
     b1c:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b20:	ldr	r3, [r7, #0]
     b22:	str	r3, [sp, #28]
	return ret;
     b24:	ldr	r3, [sp, #28]
        blinking = false;
        lastBlink = millis();        
     b26:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b28:	movs	r3, #0
     b2a:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b2c:	ldr	r6, [r5, #20]
     b2e:	ldr	r5, [pc, #656]	; (dc0 <loop+0x8f8>)
     b30:	cmp	r6, #0
     b32:	ble.w	88a <loop+0x3c2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b36:	ldr	r3, [r4, #0]
     b38:	str	r3, [sp, #20]
	return ret;
     b3a:	ldr	r3, [sp, #20]
     b3c:	ldr	r1, [r5, #8]
     b3e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b40:	ldr.w	r8, [pc, #632]	; dbc <loop+0x8f4>
     b44:	subs	r3, r3, r1
     b46:	cmp	r2, r3
     b48:	bcs.w	88a <loop+0x3c2>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b4c:	ldrb	r7, [r5, #0]
     b4e:	mov	r0, r7
     b50:	bl	2cd8 <digitalRead>
     b54:	clz	r1, r0
     b58:	lsrs	r1, r1, #5
     b5a:	mov	r0, r7
     b5c:	bl	2ccc <digitalWrite>
     b60:	ldr.w	r3, [r8]
     b64:	str	r3, [sp, #288]	; 0x120
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b66:	subs	r6, #2
	return ret;
     b68:	ldr	r2, [sp, #288]	; 0x120
     b6a:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b6c:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     b6e:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b70:	strb	r3, [r5, #16]
     b72:	b.n	88a <loop+0x3c2>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     b74:	ldrb	r6, [r5, #0]
     b76:	mov	r0, r6
     b78:	bl	2cd8 <digitalRead>
     b7c:	clz	r1, r0
     b80:	lsrs	r1, r1, #5
     b82:	mov	r0, r6
     b84:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b88:	ldr	r3, [r7, #0]
     b8a:	str	r3, [sp, #40]	; 0x28
	return ret;
     b8c:	ldr	r3, [sp, #40]	; 0x28
        blinking = false;
        lastBlink = millis();        
     b8e:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b90:	movs	r3, #0
     b92:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b94:	ldr	r6, [r5, #20]
     b96:	ldr	r5, [pc, #556]	; (dc4 <loop+0x8fc>)
     b98:	cmp	r6, #0
     b9a:	ble.w	86c <loop+0x3a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b9e:	ldr	r3, [r4, #0]
     ba0:	str	r3, [sp, #32]
	return ret;
     ba2:	ldr	r3, [sp, #32]
     ba4:	ldr	r1, [r5, #8]
     ba6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ba8:	ldr.w	r8, [pc, #528]	; dbc <loop+0x8f4>
     bac:	subs	r3, r3, r1
     bae:	cmp	r2, r3
     bb0:	bcs.w	86c <loop+0x3a4>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     bb4:	ldrb	r7, [r5, #0]
     bb6:	mov	r0, r7
     bb8:	bl	2cd8 <digitalRead>
     bbc:	clz	r1, r0
     bc0:	lsrs	r1, r1, #5
     bc2:	mov	r0, r7
     bc4:	bl	2ccc <digitalWrite>
     bc8:	ldr.w	r3, [r8]
     bcc:	str	r3, [sp, #284]	; 0x11c
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     bce:	subs	r6, #2
	return ret;
     bd0:	ldr	r2, [sp, #284]	; 0x11c
     bd2:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     bd4:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     bd6:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     bd8:	strb	r3, [r5, #16]
     bda:	b.n	86c <loop+0x3a4>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     bdc:	ldrb	r6, [r5, #0]
     bde:	mov	r0, r6
     be0:	bl	2cd8 <digitalRead>
     be4:	clz	r1, r0
     be8:	lsrs	r1, r1, #5
     bea:	mov	r0, r6
     bec:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bf0:	ldr	r3, [r7, #0]
     bf2:	str	r3, [sp, #52]	; 0x34
	return ret;
     bf4:	ldr	r3, [sp, #52]	; 0x34
        blinking = false;
        lastBlink = millis();        
     bf6:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     bf8:	movs	r3, #0
     bfa:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     bfc:	ldr	r6, [r5, #20]
     bfe:	ldr	r5, [pc, #456]	; (dc8 <loop+0x900>)
     c00:	cmp	r6, #0
     c02:	ble.w	84e <loop+0x386>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c06:	ldr	r3, [r4, #0]
     c08:	str	r3, [sp, #44]	; 0x2c
	return ret;
     c0a:	ldr	r3, [sp, #44]	; 0x2c
     c0c:	ldr	r1, [r5, #8]
     c0e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c10:	ldr.w	r8, [pc, #424]	; dbc <loop+0x8f4>
     c14:	subs	r3, r3, r1
     c16:	cmp	r2, r3
     c18:	bcs.w	84e <loop+0x386>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c1c:	ldrb	r7, [r5, #0]
     c1e:	mov	r0, r7
     c20:	bl	2cd8 <digitalRead>
     c24:	clz	r1, r0
     c28:	lsrs	r1, r1, #5
     c2a:	mov	r0, r7
     c2c:	bl	2ccc <digitalWrite>
     c30:	ldr.w	r3, [r8]
     c34:	str	r3, [sp, #280]	; 0x118
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     c36:	subs	r6, #2
	return ret;
     c38:	ldr	r2, [sp, #280]	; 0x118
     c3a:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c3c:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     c3e:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c40:	strb	r3, [r5, #16]
     c42:	b.n	84e <loop+0x386>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     c44:	ldrb	r6, [r5, #0]
     c46:	mov	r0, r6
     c48:	bl	2cd8 <digitalRead>
     c4c:	clz	r1, r0
     c50:	lsrs	r1, r1, #5
     c52:	mov	r0, r6
     c54:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c58:	ldr	r3, [r7, #0]
     c5a:	str	r3, [sp, #64]	; 0x40
	return ret;
     c5c:	ldr	r3, [sp, #64]	; 0x40
        blinking = false;
        lastBlink = millis();        
     c5e:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     c60:	movs	r3, #0
     c62:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     c64:	ldr	r6, [r5, #20]
     c66:	ldr	r5, [pc, #356]	; (dcc <loop+0x904>)
     c68:	cmp	r6, #0
     c6a:	ble.w	830 <loop+0x368>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c6e:	ldr	r3, [r4, #0]
     c70:	str	r3, [sp, #56]	; 0x38
	return ret;
     c72:	ldr	r3, [sp, #56]	; 0x38
     c74:	ldr	r1, [r5, #8]
     c76:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c78:	ldr.w	r8, [pc, #320]	; dbc <loop+0x8f4>
     c7c:	subs	r3, r3, r1
     c7e:	cmp	r2, r3
     c80:	bcs.w	830 <loop+0x368>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c84:	ldrb	r7, [r5, #0]
     c86:	mov	r0, r7
     c88:	bl	2cd8 <digitalRead>
     c8c:	clz	r1, r0
     c90:	lsrs	r1, r1, #5
     c92:	mov	r0, r7
     c94:	bl	2ccc <digitalWrite>
     c98:	ldr.w	r3, [r8]
     c9c:	str	r3, [sp, #276]	; 0x114
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     c9e:	subs	r6, #2
	return ret;
     ca0:	ldr	r2, [sp, #276]	; 0x114
     ca2:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ca4:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     ca6:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ca8:	strb	r3, [r5, #16]
     caa:	b.n	830 <loop+0x368>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     cac:	ldrb	r5, [r7, #0]
     cae:	mov	r0, r5
     cb0:	bl	2cd8 <digitalRead>
     cb4:	clz	r1, r0
     cb8:	lsrs	r1, r1, #5
     cba:	mov	r0, r5
     cbc:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cc0:	ldr	r3, [r6, #0]
     cc2:	str	r3, [sp, #76]	; 0x4c
	return ret;
     cc4:	ldr	r3, [sp, #76]	; 0x4c
        blinking = false;
        lastBlink = millis();        
     cc6:	str	r3, [r7, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     cc8:	movs	r3, #0
     cca:	strb	r3, [r7, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     ccc:	ldr	r6, [r7, #20]
     cce:	ldr	r5, [pc, #256]	; (dd0 <loop+0x908>)
     cd0:	cmp	r6, #0
     cd2:	ble.w	812 <loop+0x34a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cd6:	ldr	r3, [r4, #0]
     cd8:	str	r3, [sp, #68]	; 0x44
	return ret;
     cda:	ldr	r3, [sp, #68]	; 0x44
     cdc:	ldr	r1, [r5, #8]
     cde:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ce0:	ldr.w	r8, [pc, #216]	; dbc <loop+0x8f4>
     ce4:	subs	r3, r3, r1
     ce6:	cmp	r2, r3
     ce8:	bcs.w	812 <loop+0x34a>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     cec:	ldrb	r7, [r5, #0]
     cee:	mov	r0, r7
     cf0:	bl	2cd8 <digitalRead>
     cf4:	clz	r1, r0
     cf8:	lsrs	r1, r1, #5
     cfa:	mov	r0, r7
     cfc:	bl	2ccc <digitalWrite>
     d00:	ldr.w	r3, [r8]
     d04:	str	r3, [sp, #272]	; 0x110
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d06:	subs	r6, #2
	return ret;
     d08:	ldr	r2, [sp, #272]	; 0x110
     d0a:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d0c:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     d0e:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d10:	strb	r3, [r5, #16]
     d12:	b.n	812 <loop+0x34a>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     d14:	ldr	r3, [pc, #188]	; (dd4 <loop+0x90c>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     d16:	ldrb	r3, [r3, #0]
     d18:	cmp	r3, #250	; 0xfa
     d1a:	beq.w	1400 <loop+0xf38>
     d1e:	cmp	r3, #252	; 0xfc
     d20:	beq.w	ed4 <loop+0xa0c>
     d24:	cmp	r3, #248	; 0xf8
     d26:	beq.w	14a6 <loop+0xfde>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     d2a:	movs	r1, #35	; 0x23
     d2c:	ldr	r0, [pc, #168]	; (dd8 <loop+0x910>)
     d2e:	ldr	r4, [pc, #140]	; (dbc <loop+0x8f4>)
     d30:	bl	26bc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     d34:	ldr	r0, [pc, #164]	; (ddc <loop+0x914>)
     d36:	bl	4230 <Print::println()>
     d3a:	b.w	4dc <loop+0x14>
     d3e:	ldr	r1, [r0, #20]
     d40:	b.w	51e <loop+0x56>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     d44:	cmp	r5, #0
     d46:	bne.w	4f4 <loop+0x2c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d4a:	ldr	r3, [r4, #0]
     d4c:	str	r3, [sp, #196]	; 0xc4
	return ret;
     d4e:	ldr	r2, [sp, #196]	; 0xc4
     d50:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d52:	ldr.w	sl, [pc, #104]	; dbc <loop+0x8f4>
     d56:	subs	r2, r2, r3
     d58:	cmp	r2, #200	; 0xc8
     d5a:	bhi.w	1156 <loop+0xc8e>
     d5e:	ldr.w	r2, [sl]
     d62:	str	r2, [sp, #188]	; 0xbc
	return ret;
     d64:	ldr	r1, [sp, #188]	; 0xbc
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     d66:	ldr	r2, [pc, #120]	; (de0 <loop+0x918>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     d68:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     d6a:	smull	r1, r2, r2, r3
     d6e:	asrs	r1, r3, #31
     d70:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     d74:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     d76:	str	r2, [r6, #40]	; 0x28
     d78:	b.w	516 <loop+0x4e>
     d7c:	ldr	r1, [r0, #20]
     d7e:	b.n	59c <loop+0xd4>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     d80:	cmp	r7, #0
     d82:	bne.w	572 <loop+0xaa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d86:	ldr	r3, [r4, #0]
     d88:	str	r3, [sp, #176]	; 0xb0
	return ret;
     d8a:	ldr	r2, [sp, #176]	; 0xb0
     d8c:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d8e:	ldr.w	sl, [pc, #44]	; dbc <loop+0x8f4>
     d92:	subs	r2, r2, r3
     d94:	cmp	r2, #200	; 0xc8
     d96:	bhi.w	1222 <loop+0xd5a>
     d9a:	ldr.w	r2, [sl]
     d9e:	str	r2, [sp, #168]	; 0xa8
	return ret;
     da0:	ldr	r1, [sp, #168]	; 0xa8
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     da2:	ldr	r2, [pc, #60]	; (de0 <loop+0x918>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     da4:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     da6:	smull	r1, r2, r2, r3
     daa:	asrs	r1, r3, #31
     dac:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     db0:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     db2:	str	r2, [r5, #40]	; 0x28
     db4:	b.w	594 <loop+0xcc>
     db8:	.word	0x1fff15f0
     dbc:	.word	0x1fff1910
     dc0:	.word	0x1fff15d8
     dc4:	.word	0x1fff18e0
     dc8:	.word	0x1fff18c8
     dcc:	.word	0x1fff18b0
     dd0:	.word	0x1fff1898
     dd4:	.word	0x1fff1dcc
     dd8:	.word	0x0000566c
     ddc:	.word	0x1fff0c70
     de0:	.word	0x10624dd3
     de4:	ldr	r1, [r0, #20]
     de6:	b.n	7b8 <loop+0x2f0>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     de8:	cmp	r7, #0
     dea:	bne.w	76a <loop+0x2a2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dee:	ldr	r3, [r4, #0]
     df0:	str	r3, [sp, #96]	; 0x60
	return ret;
     df2:	ldr	r2, [sp, #96]	; 0x60
     df4:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     df6:	ldr.w	sl, [pc, #792]	; 1110 <loop+0xc48>
     dfa:	subs	r2, r2, r3
     dfc:	cmp	r2, #200	; 0xc8
     dfe:	bhi.w	12aa <loop+0xde2>
     e02:	ldr.w	r2, [sl]
     e06:	str	r2, [sp, #88]	; 0x58
	return ret;
     e08:	ldr	r1, [sp, #88]	; 0x58
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     e0a:	ldr	r2, [pc, #756]	; (1100 <loop+0xc38>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e0c:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     e0e:	smull	r1, r2, r2, r3
     e12:	asrs	r1, r3, #31
     e14:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e18:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     e1a:	str	r2, [r6, #40]	; 0x28
     e1c:	b.n	7b0 <loop+0x2e8>
     e1e:	ldr	r1, [r0, #20]
     e20:	b.n	716 <loop+0x24e>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     e22:	cmp	r6, #0
     e24:	bne.w	6ec <loop+0x224>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e28:	ldr	r3, [r4, #0]
     e2a:	str	r3, [sp, #116]	; 0x74
	return ret;
     e2c:	ldr	r2, [sp, #116]	; 0x74
     e2e:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e30:	ldr.w	sl, [pc, #732]	; 1110 <loop+0xc48>
     e34:	subs	r2, r2, r3
     e36:	cmp	r2, #200	; 0xc8
     e38:	bhi.w	119a <loop+0xcd2>
     e3c:	ldr.w	r2, [sl]
     e40:	str	r2, [sp, #108]	; 0x6c
	return ret;
     e42:	ldr	r1, [sp, #108]	; 0x6c
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     e44:	ldr	r2, [pc, #696]	; (1100 <loop+0xc38>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e46:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     e48:	smull	r1, r2, r2, r3
     e4c:	asrs	r1, r3, #31
     e4e:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e52:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     e54:	str	r2, [r5, #40]	; 0x28
     e56:	b.n	70e <loop+0x246>
     e58:	ldr	r1, [r0, #20]
     e5a:	b.w	61a <loop+0x152>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     e5e:	cmp	r6, #0
     e60:	bne.w	5f0 <loop+0x128>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e64:	ldr	r3, [r4, #0]
     e66:	str	r3, [sp, #156]	; 0x9c
	return ret;
     e68:	ldr	r2, [sp, #156]	; 0x9c
     e6a:	ldr	r3, [r7, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e6c:	ldr.w	sl, [pc, #672]	; 1110 <loop+0xc48>
     e70:	subs	r2, r2, r3
     e72:	cmp	r2, #200	; 0xc8
     e74:	bhi.w	1266 <loop+0xd9e>
     e78:	ldr.w	r2, [sl]
     e7c:	str	r2, [sp, #148]	; 0x94
	return ret;
     e7e:	ldr	r1, [sp, #148]	; 0x94
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     e80:	ldr	r2, [pc, #636]	; (1100 <loop+0xc38>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e82:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     e84:	smull	r1, r2, r2, r3
     e88:	asrs	r1, r3, #31
     e8a:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e8e:	str	r3, [r7, #36]	; 0x24
      secs_held = millis_held / 1000;
     e90:	str	r2, [r7, #40]	; 0x28
     e92:	b.w	612 <loop+0x14a>
     e96:	ldr	r1, [r0, #20]
     e98:	b.w	698 <loop+0x1d0>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     e9c:	cmp	r5, #0
     e9e:	bne.w	66e <loop+0x1a6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ea2:	ldr	r3, [r4, #0]
     ea4:	str	r3, [sp, #136]	; 0x88
	return ret;
     ea6:	ldr	r2, [sp, #136]	; 0x88
     ea8:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eaa:	ldr.w	sl, [pc, #612]	; 1110 <loop+0xc48>
     eae:	subs	r2, r2, r3
     eb0:	cmp	r2, #200	; 0xc8
     eb2:	bhi.w	11de <loop+0xd16>
     eb6:	ldr.w	r2, [sl]
     eba:	str	r2, [sp, #128]	; 0x80
	return ret;
     ebc:	ldr	r1, [sp, #128]	; 0x80
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     ebe:	ldr	r2, [pc, #576]	; (1100 <loop+0xc38>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     ec0:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     ec2:	smull	r1, r2, r2, r3
     ec6:	asrs	r1, r3, #31
     ec8:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     ecc:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     ece:	str	r2, [r6, #40]	; 0x28
     ed0:	b.w	690 <loop+0x1c8>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     ed4:	ldr	r2, [pc, #556]	; (1104 <loop+0xc3c>)
     ed6:	ldr	r0, [pc, #560]	; (1108 <loop+0xc40>)
      ppqn = 0;
      m_sequence.resetStep();
     ed8:	ldr	r1, [r2, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     eda:	movs	r3, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
     edc:	ldr	r4, [r1, #40]	; 0x28
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
     ede:	str	r3, [r2, #8]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     ee0:	strb	r3, [r2, #0]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
     ee2:	str	r3, [r1, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ee4:	ldr	r3, [r4, #4]
     ee6:	clz	r3, r3
     eea:	lsrs	r3, r3, #5
     eec:	str	r3, [r4, #4]
     eee:	movs	r1, #8
     ef0:	bl	26bc <usb_serial_write>
     ef4:	ldr	r0, [pc, #532]	; (110c <loop+0xc44>)
     ef6:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     efa:	ldrb	r1, [r4, #4]
     efc:	ldrb	r0, [r4, #0]
     efe:	bl	2ccc <digitalWrite>

      if (blinking) {
     f02:	ldrb	r3, [r4, #16]
     f04:	cmp	r3, #0
     f06:	beq.w	4da <loop+0x12>
        digitalWrite(m_pin, !m_state);
     f0a:	ldr	r1, [r4, #4]
     f0c:	ldrb	r0, [r4, #0]
     f0e:	ldr	r4, [pc, #512]	; (1110 <loop+0xc48>)
     f10:	clz	r1, r1
     f14:	lsrs	r1, r1, #5
     f16:	bl	2ccc <digitalWrite>
     f1a:	b.w	4dc <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
     f1e:	ldr	r3, [r4, #16]
     f20:	ldr	r2, [r4, #12]
     f22:	add.w	r2, r3, r2, lsl #2
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
     f26:	sub.w	r3, r0, r0, lsl #2
     f2a:	lsls	r3, r3, #2
     f2c:	it	mi
     f2e:	addwmi	r3, r3, #1023	; 0x3ff
     f32:	ldr	r2, [r2, #4]
     f34:	asrs	r3, r3, #10
     f36:	adds	r3, #51	; 0x33
     f38:	str	r3, [r2, #8]
     f3a:	b.n	a0e <loop+0x546>
     f3c:	ldr	r3, [r4, #16]
     f3e:	ldr	r2, [r4, #12]
     f40:	add.w	r2, r3, r2, lsl #2
     f44:	sub.w	r3, r0, r0, lsl #2
     f48:	lsls	r3, r3, #2
     f4a:	it	mi
     f4c:	addwmi	r3, r3, #1023	; 0x3ff
     f50:	ldr	r2, [r2, #4]
     f52:	asrs	r3, r3, #10
     f54:	adds	r3, #51	; 0x33
     f56:	str	r3, [r2, #8]
     f58:	b.n	95a <loop+0x492>
     f5a:	ldr	r3, [r4, #16]
     f5c:	ldr	r2, [r4, #12]
     f5e:	add.w	r2, r3, r2, lsl #2
     f62:	sub.w	r3, r0, r0, lsl #2
     f66:	lsls	r3, r3, #2
     f68:	it	mi
     f6a:	addwmi	r3, r3, #1023	; 0x3ff
     f6e:	ldr	r2, [r2, #4]
     f70:	asrs	r3, r3, #10
     f72:	adds	r3, #51	; 0x33
     f74:	str	r3, [r2, #8]
     f76:	b.n	900 <loop+0x438>
     f78:	ldr	r3, [r4, #16]
     f7a:	ldr	r2, [r4, #12]
     f7c:	add.w	r2, r3, r2, lsl #2
     f80:	sub.w	r3, r0, r0, lsl #2
     f84:	lsls	r3, r3, #2
     f86:	it	mi
     f88:	addwmi	r3, r3, #1023	; 0x3ff
     f8c:	ldr	r2, [r2, #4]
     f8e:	asrs	r3, r3, #10
     f90:	adds	r3, #51	; 0x33
     f92:	str	r3, [r2, #8]
     f94:	b.n	a68 <loop+0x5a0>
     f96:	ldr	r3, [r4, #16]
     f98:	ldr	r2, [r4, #12]
     f9a:	add.w	r2, r3, r2, lsl #2
     f9e:	sub.w	r3, r0, r0, lsl #2
     fa2:	lsls	r3, r3, #2
     fa4:	it	mi
     fa6:	addwmi	r3, r3, #1023	; 0x3ff
     faa:	ldr	r2, [r2, #4]
     fac:	asrs	r3, r3, #10
     fae:	adds	r3, #51	; 0x33
     fb0:	str	r3, [r2, #8]
     fb2:	b.n	9b4 <loop+0x4ec>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     fb4:	cmp	r7, #0
     fb6:	bne.w	6ce <loop+0x206>
     fba:	ldrb.w	r1, [r9, #16]
     fbe:	cmp	r1, #0
     fc0:	beq.w	1886 <loop+0x13be>
        if (m_sequence.getShiftMode()) {
     fc4:	ldr.w	sl, [r9, #28]
     fc8:	ldr.w	r7, [sl, #48]	; 0x30
     fcc:	cmp	r7, #0
     fce:	beq.w	1b64 <loop+0x169c>
    void nextPage () {
      if (m_page < 4) m_page++;
    };

    void previousPage () {
      if (m_page > 1) m_page--;
     fd2:	cmp	r7, #1
     fd4:	itt	gt
     fd6:	addgt.w	r7, r7, #4294967295
     fda:	strgt.w	r7, [sl, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     fde:	mov	r1, r7
     fe0:	ldr	r0, [pc, #296]	; (110c <loop+0xc44>)
     fe2:	bl	42d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     fe6:	ldr	r0, [pc, #292]	; (110c <loop+0xc44>)
     fe8:	bl	4230 <Print::println()>
     fec:	ldr	r3, [r6, #36]	; 0x24
     fee:	ldr	r7, [r6, #32]
     ff0:	ldr	r2, [r6, #40]	; 0x28
     ff2:	b.w	6ba <loop+0x1f2>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     ff6:	cmp	r7, #0
     ff8:	bne.w	74c <loop+0x284>
     ffc:	ldrb.w	r1, [r9, #16]
    1000:	cmp	r1, #0
    1002:	beq.w	1846 <loop+0x137e>
        if (m_sequence.getShiftMode()) {
    1006:	ldr.w	sl, [r9, #28]
    100a:	ldr.w	r7, [sl, #48]	; 0x30
    100e:	cmp	r7, #0
    1010:	beq.w	1b10 <loop+0x1648>
    1014:	cmp	r7, #1
    1016:	itt	gt
    1018:	addgt.w	r7, r7, #4294967295
    101c:	strgt.w	r7, [sl, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1020:	mov	r1, r7
    1022:	ldr	r0, [pc, #232]	; (110c <loop+0xc44>)
    1024:	bl	42d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1028:	ldr	r0, [pc, #224]	; (110c <loop+0xc44>)
    102a:	bl	4230 <Print::println()>
    102e:	ldr	r3, [r5, #36]	; 0x24
    1030:	ldr	r7, [r5, #32]
    1032:	ldr	r2, [r5, #40]	; 0x28
    1034:	b.w	738 <loop+0x270>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    1038:	cmp	r5, #0
    103a:	bne.w	7ee <loop+0x326>
    103e:	ldrb.w	r1, [r9, #16]
    1042:	cmp	r1, #0
    1044:	beq.w	18a6 <loop+0x13de>
        if (m_sequence.getShiftMode()) {
    1048:	ldr.w	sl, [r9, #28]
    104c:	ldr.w	r5, [sl, #48]	; 0x30
    1050:	cmp	r5, #0
    1052:	beq.w	1be2 <loop+0x171a>
    1056:	cmp	r5, #1
    1058:	itt	gt
    105a:	addgt.w	r5, r5, #4294967295
    105e:	strgt.w	r5, [sl, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1062:	mov	r1, r5
    1064:	ldr	r0, [pc, #164]	; (110c <loop+0xc44>)
    1066:	bl	42d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    106a:	ldr	r0, [pc, #160]	; (110c <loop+0xc44>)
    106c:	bl	4230 <Print::println()>
    1070:	ldr	r3, [r6, #36]	; 0x24
    1072:	ldr	r5, [r6, #32]
    1074:	ldr	r2, [r6, #40]	; 0x28
    1076:	b.w	7da <loop+0x312>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    107a:	cmp	r5, #0
    107c:	bne.w	650 <loop+0x188>
    1080:	ldrb.w	r1, [r9, #16]
    1084:	cmp	r1, #0
    1086:	beq.w	1826 <loop+0x135e>
        if (m_sequence.getShiftMode()) {
    108a:	ldr.w	sl, [r9, #28]
    108e:	ldr.w	r5, [sl, #48]	; 0x30
    1092:	cmp	r5, #0
    1094:	beq.w	1bb8 <loop+0x16f0>
    1098:	cmp	r5, #1
    109a:	itt	gt
    109c:	addgt.w	r5, r5, #4294967295
    10a0:	strgt.w	r5, [sl, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    10a4:	mov	r1, r5
    10a6:	ldr	r0, [pc, #100]	; (110c <loop+0xc44>)
    10a8:	bl	42d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    10ac:	ldr	r0, [pc, #92]	; (110c <loop+0xc44>)
    10ae:	bl	4230 <Print::println()>
    10b2:	ldr	r3, [r7, #36]	; 0x24
    10b4:	ldr	r5, [r7, #32]
    10b6:	ldr	r2, [r7, #40]	; 0x28
    10b8:	b.w	63c <loop+0x174>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    10bc:	cmp	r7, #0
    10be:	bne.w	554 <loop+0x8c>
    10c2:	ldrb.w	r1, [r9, #16]
    10c6:	cmp	r1, #0
    10c8:	beq.w	1866 <loop+0x139e>
        if (m_sequence.getShiftMode()) {
    10cc:	ldr.w	sl, [r9, #28]
    10d0:	ldr.w	r7, [sl, #48]	; 0x30
    10d4:	cmp	r7, #0
    10d6:	beq.w	1b3a <loop+0x1672>
    10da:	cmp	r7, #1
    10dc:	itt	gt
    10de:	addgt.w	r7, r7, #4294967295
    10e2:	strgt.w	r7, [sl, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    10e6:	mov	r1, r7
    10e8:	ldr	r0, [pc, #32]	; (110c <loop+0xc44>)
    10ea:	bl	42d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    10ee:	ldr	r0, [pc, #28]	; (110c <loop+0xc44>)
    10f0:	bl	4230 <Print::println()>
    10f4:	ldr	r3, [r6, #36]	; 0x24
    10f6:	ldr	r7, [r6, #32]
    10f8:	ldr	r2, [r6, #40]	; 0x28
    10fa:	b.w	540 <loop+0x78>
    10fe:	nop
    1100:	.word	0x10624dd3
    1104:	.word	0x1fff1884
    1108:	.word	0x00005660
    110c:	.word	0x1fff0c70
    1110:	.word	0x1fff1910

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    1114:	cmp	r6, #0
    1116:	bne.w	5d2 <loop+0x10a>
    111a:	ldrb.w	r1, [r9, #16]
    111e:	cmp	r1, #0
    1120:	beq.w	18c8 <loop+0x1400>
        if (m_sequence.getShiftMode()) {
    1124:	ldr.w	sl, [r9, #28]
    1128:	ldr.w	r6, [sl, #48]	; 0x30
    112c:	cmp	r6, #0
    112e:	beq.w	1b8e <loop+0x16c6>
    1132:	cmp	r6, #1
    1134:	itt	gt
    1136:	addgt.w	r6, r6, #4294967295
    113a:	strgt.w	r6, [sl, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    113e:	mov	r1, r6
    1140:	ldr	r0, [pc, #696]	; (13fc <loop+0xf34>)
    1142:	bl	42d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1146:	ldr	r0, [pc, #692]	; (13fc <loop+0xf34>)
    1148:	bl	4230 <Print::println()>
    114c:	ldr	r3, [r5, #36]	; 0x24
    114e:	ldr	r6, [r5, #32]
    1150:	ldr	r2, [r5, #40]	; 0x28
    1152:	b.w	5be <loop+0xf6>
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
    1156:	ldr.w	r8, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    115a:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    115e:	ldrb.w	r9, [r8]
    1162:	str	r3, [sp, #192]	; 0xc0
	return ret;
    1164:	ldr	r3, [sp, #192]	; 0xc0
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    1166:	str	r3, [r6, #52]	; 0x34
    1168:	mov	r0, r9
    116a:	bl	2cd8 <digitalRead>
    116e:	clz	r1, r0
    1172:	lsrs	r1, r1, #5
    1174:	mov	r0, r9
    1176:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    117a:	ldr.w	r3, [sl]
    117e:	str	r3, [sp, #200]	; 0xc8
	return ret;
    1180:	ldr	r3, [sp, #200]	; 0xc8
      blinking = true;
    1182:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1186:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    118a:	str.w	r5, [r8, #20]
    118e:	ldrb.w	r5, [r6, #48]	; 0x30
    1192:	ldr	r3, [r6, #52]	; 0x34
    1194:	ldr	r7, [r6, #32]
    1196:	b.w	4f6 <loop+0x2e>
        m_led.blink();
    119a:	ldr.w	r8, [r5, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    119e:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11a2:	ldrb.w	r9, [r8]
    11a6:	str	r3, [sp, #112]	; 0x70
	return ret;
    11a8:	ldr	r3, [sp, #112]	; 0x70
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    11aa:	str	r3, [r5, #52]	; 0x34
    11ac:	mov	r0, r9
    11ae:	bl	2cd8 <digitalRead>
    11b2:	clz	r1, r0
    11b6:	lsrs	r1, r1, #5
    11b8:	mov	r0, r9
    11ba:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11be:	ldr.w	r3, [sl]
    11c2:	str	r3, [sp, #248]	; 0xf8
	return ret;
    11c4:	ldr	r3, [sp, #248]	; 0xf8
      blinking = true;
    11c6:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    11ca:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    11ce:	str.w	r6, [r8, #20]
    11d2:	ldrb.w	r6, [r5, #48]	; 0x30
    11d6:	ldr	r3, [r5, #52]	; 0x34
    11d8:	ldr	r7, [r5, #32]
    11da:	b.w	6ee <loop+0x226>
        m_led.blink();
    11de:	ldr.w	r8, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11e2:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11e6:	ldrb.w	r9, [r8]
    11ea:	str	r3, [sp, #132]	; 0x84
	return ret;
    11ec:	ldr	r3, [sp, #132]	; 0x84
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    11ee:	str	r3, [r6, #52]	; 0x34
    11f0:	mov	r0, r9
    11f2:	bl	2cd8 <digitalRead>
    11f6:	clz	r1, r0
    11fa:	lsrs	r1, r1, #5
    11fc:	mov	r0, r9
    11fe:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1202:	ldr.w	r3, [sl]
    1206:	str	r3, [sp, #236]	; 0xec
	return ret;
    1208:	ldr	r3, [sp, #236]	; 0xec
      blinking = true;
    120a:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    120e:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1212:	str.w	r5, [r8, #20]
    1216:	ldrb.w	r5, [r6, #48]	; 0x30
    121a:	ldr	r3, [r6, #52]	; 0x34
    121c:	ldr	r7, [r6, #32]
    121e:	b.w	670 <loop+0x1a8>
        m_led.blink();
    1222:	ldr.w	r8, [r5, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1226:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    122a:	ldrb.w	r9, [r8]
    122e:	str	r3, [sp, #172]	; 0xac
	return ret;
    1230:	ldr	r3, [sp, #172]	; 0xac
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    1232:	str	r3, [r5, #52]	; 0x34
    1234:	mov	r0, r9
    1236:	bl	2cd8 <digitalRead>
    123a:	clz	r1, r0
    123e:	lsrs	r1, r1, #5
    1240:	mov	r0, r9
    1242:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1246:	ldr.w	r3, [sl]
    124a:	str	r3, [sp, #212]	; 0xd4
	return ret;
    124c:	ldr	r3, [sp, #212]	; 0xd4
      blinking = true;
    124e:	strb.w	r6, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1252:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1256:	str.w	r7, [r8, #20]
    125a:	ldrb.w	r7, [r5, #48]	; 0x30
    125e:	ldr	r3, [r5, #52]	; 0x34
    1260:	ldr	r6, [r5, #32]
    1262:	b.w	574 <loop+0xac>
        m_led.blink();
    1266:	ldr.w	r8, [r7, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    126a:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    126e:	ldrb.w	r9, [r8]
    1272:	str	r3, [sp, #152]	; 0x98
	return ret;
    1274:	ldr	r3, [sp, #152]	; 0x98
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    1276:	str	r3, [r7, #52]	; 0x34
    1278:	mov	r0, r9
    127a:	bl	2cd8 <digitalRead>
    127e:	clz	r1, r0
    1282:	lsrs	r1, r1, #5
    1284:	mov	r0, r9
    1286:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    128a:	ldr.w	r3, [sl]
    128e:	str	r3, [sp, #224]	; 0xe0
	return ret;
    1290:	ldr	r3, [sp, #224]	; 0xe0
      blinking = true;
    1292:	strb.w	r5, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1296:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    129a:	str.w	r6, [r8, #20]
    129e:	ldrb.w	r6, [r7, #48]	; 0x30
    12a2:	ldr	r3, [r7, #52]	; 0x34
    12a4:	ldr	r5, [r7, #32]
    12a6:	b.w	5f2 <loop+0x12a>
        m_led.blink();
    12aa:	ldr.w	r8, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12ae:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12b2:	ldrb.w	r9, [r8]
    12b6:	str	r3, [sp, #92]	; 0x5c
	return ret;
    12b8:	ldr	r3, [sp, #92]	; 0x5c
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    12ba:	str	r3, [r6, #52]	; 0x34
    12bc:	mov	r0, r9
    12be:	bl	2cd8 <digitalRead>
    12c2:	clz	r1, r0
    12c6:	lsrs	r1, r1, #5
    12c8:	mov	r0, r9
    12ca:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12ce:	ldr.w	r3, [sl]
    12d2:	str	r3, [sp, #260]	; 0x104
	return ret;
    12d4:	ldr	r3, [sp, #260]	; 0x104
      blinking = true;
    12d6:	strb.w	r5, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    12da:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    12de:	str.w	r7, [r8, #20]
    12e2:	ldrb.w	r7, [r6, #48]	; 0x30
    12e6:	ldr	r3, [r6, #52]	; 0x34
    12e8:	ldr	r5, [r6, #32]
    12ea:	b.w	76c <loop+0x2a4>
 
      if (millis_held > 50) {

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
          if (secs_held >= 1) {
    12ee:	cmp	r2, #0
    12f0:	bgt.w	155c <loop+0x1094>
    void enterShiftMode () {
      m_shiftMode = true;
    };

    void exitShiftMode () {
      m_shiftMode = true;
    12f4:	ldr	r3, [r6, #28]
    12f6:	ldr	r7, [r6, #32]
    12f8:	movs	r1, #1
    12fa:	strb.w	r1, [r3, #46]	; 0x2e
    12fe:	b.w	6ce <loop+0x206>
    1302:	cmp	r2, #0
    1304:	bgt.w	1590 <loop+0x10c8>
    1308:	ldr	r3, [r5, #28]
    130a:	ldr	r7, [r5, #32]
    130c:	movs	r1, #1
    130e:	strb.w	r1, [r3, #46]	; 0x2e
    1312:	b.w	74c <loop+0x284>
    1316:	cmp	r2, #0
    1318:	bgt.w	15f8 <loop+0x1130>
    131c:	ldr	r3, [r6, #28]
    131e:	ldr	r5, [r6, #32]
    1320:	movs	r1, #1
    1322:	strb.w	r1, [r3, #46]	; 0x2e
    1326:	b.w	7ee <loop+0x326>
    132a:	cmp	r2, #0
    132c:	bgt.w	15c4 <loop+0x10fc>
    1330:	ldr	r3, [r6, #28]
    1332:	ldr	r7, [r6, #32]
    1334:	movs	r1, #1
    1336:	strb.w	r1, [r3, #46]	; 0x2e
    133a:	b.w	554 <loop+0x8c>
    133e:	cmp	r2, #0
    1340:	bgt.w	162c <loop+0x1164>
    1344:	ldr	r3, [r7, #28]
    1346:	ldr	r5, [r7, #32]
    1348:	movs	r1, #1
    134a:	strb.w	r1, [r3, #46]	; 0x2e
    134e:	b.w	650 <loop+0x188>
    1352:	cmp	r2, #0
    1354:	bgt.w	1528 <loop+0x1060>
    1358:	ldr	r3, [r5, #28]
    135a:	ldr	r6, [r5, #32]
    135c:	movs	r1, #1
    135e:	strb.w	r1, [r3, #46]	; 0x2e
    1362:	b.w	5d2 <loop+0x10a>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1366:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
    136a:	ldr	r3, [r4, #20]
    136c:	bge.w	1786 <loop+0x12be>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1370:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1372:	movs	r1, #6

        if (ppqn >= 6) {
    1374:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1376:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1378:	ble.n	137e <loop+0xeb6>
          ppqn = 0;
    137a:	movs	r2, #0
    137c:	str	r2, [r3, #8]
    137e:	ldr	r0, [r4, #4]
    1380:	b.w	900 <loop+0x438>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1384:	cmp.w	r0, #400	; 0x190
    1388:	ldr	r3, [r4, #20]
    138a:	bge.w	170e <loop+0x1246>
        max_ppqn = 6;

        if (ppqn >= 6) {
    138e:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1390:	movs	r1, #6

        if (ppqn >= 6) {
    1392:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1394:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1396:	ble.n	139c <loop+0xed4>
          ppqn = 0;
    1398:	movs	r2, #0
    139a:	str	r2, [r3, #8]
    139c:	ldr	r0, [r4, #4]
    139e:	b.w	a68 <loop+0x5a0>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    13a2:	cmp.w	r0, #400	; 0x190
    13a6:	ldr	r3, [r4, #20]
    13a8:	bge.w	1768 <loop+0x12a0>
        max_ppqn = 6;

        if (ppqn >= 6) {
    13ac:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13ae:	movs	r1, #6

        if (ppqn >= 6) {
    13b0:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13b2:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    13b4:	ble.n	13ba <loop+0xef2>
          ppqn = 0;
    13b6:	movs	r2, #0
    13b8:	str	r2, [r3, #8]
    13ba:	ldr	r0, [r4, #4]
    13bc:	b.w	a0e <loop+0x546>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    13c0:	cmp.w	r0, #400	; 0x190
    13c4:	ldr	r3, [r4, #20]
    13c6:	bge.w	174a <loop+0x1282>
        max_ppqn = 6;

        if (ppqn >= 6) {
    13ca:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13cc:	movs	r1, #6

        if (ppqn >= 6) {
    13ce:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13d0:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    13d2:	ble.n	13d8 <loop+0xf10>
          ppqn = 0;
    13d4:	movs	r2, #0
    13d6:	str	r2, [r3, #8]
    13d8:	ldr	r0, [r4, #4]
    13da:	b.w	9b4 <loop+0x4ec>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    13de:	cmp.w	r0, #400	; 0x190
    13e2:	ldr	r3, [r4, #20]
    13e4:	bge.w	172c <loop+0x1264>
        max_ppqn = 6;

        if (ppqn >= 6) {
    13e8:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13ea:	movs	r1, #6

        if (ppqn >= 6) {
    13ec:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13ee:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    13f0:	ble.n	13f6 <loop+0xf2e>
          ppqn = 0;
    13f2:	movs	r2, #0
    13f4:	str	r2, [r3, #8]
    13f6:	ldr	r0, [r4, #4]
    13f8:	b.w	95a <loop+0x492>
    13fc:	.word	0x1fff0c70
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    1400:	ldr	r5, [pc, #724]	; (16d8 <loop+0x1210>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1402:	ldr	r4, [pc, #728]	; (16dc <loop+0x1214>)
      ppqn = 0;
      m_sequence.doStep(); 
    1404:	ldr	r6, [r5, #12]
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    1406:	ldr	r3, [r6, #0]
    1408:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    140c:	mov.w	r9, #1
    1410:	ldr	r7, [r3, #20]
    1412:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1416:	ldrb.w	sl, [r7]
      ppqn = 0;
    141a:	mov.w	r8, #0
    141e:	mov	r0, sl
    1420:	str.w	r8, [r5, #8]
    1424:	bl	2cd8 <digitalRead>
    1428:	clz	r1, r0
    142c:	lsrs	r1, r1, #5
    142e:	mov	r0, sl
    1430:	bl	2ccc <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    1434:	ldr	r3, [r6, #0]
    1436:	ldr	r1, [r4, #0]
    1438:	str	r1, [sp, #4]
    143a:	add.w	r2, r6, r3, lsl #2
	return ret;
    143e:	ldr	r0, [sp, #4]
    1440:	ldr	r2, [r2, #4]
      blinking = true;
    1442:	strb.w	r9, [r7, #16]
    1446:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
    1448:	str.w	r8, [r7, #20]
      lastBlink = millis();  
    144c:	str	r0, [r7, #8]
    144e:	cmp	r1, #0
    1450:	bne.w	1800 <loop+0x1338>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    1454:	ldrb.w	r2, [r6, #45]	; 0x2d
    1458:	cmp	r2, #0
    145a:	beq.w	17a4 <loop+0x12dc>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    145e:	subs	r2, r3, #1
    1460:	cmp	r3, #0
    1462:	beq.w	18e8 <loop+0x1420>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1466:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    1468:	ldr	r3, [r5, #12]
    146a:	ldr	r0, [pc, #628]	; (16e0 <loop+0x1218>)
    146c:	ldr	r5, [r3, #40]	; 0x28
    };

    void toggle () {
      m_state = !m_state;
    146e:	ldr	r3, [r5, #4]
    1470:	clz	r3, r3
    1474:	lsrs	r3, r3, #5
    1476:	str	r3, [r5, #4]
    1478:	movs	r1, #8
    147a:	bl	26bc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    147e:	ldr	r0, [pc, #612]	; (16e4 <loop+0x121c>)
    1480:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1484:	ldrb	r1, [r5, #4]
    1486:	ldrb	r0, [r5, #0]
    1488:	bl	2ccc <digitalWrite>

      if (blinking) {
    148c:	ldrb	r3, [r5, #16]
    148e:	cmp	r3, #0
    1490:	beq.w	4dc <loop+0x14>
        digitalWrite(m_pin, !m_state);
    1494:	ldr	r1, [r5, #4]
    1496:	ldrb	r0, [r5, #0]
    1498:	clz	r1, r1
    149c:	lsrs	r1, r1, #5
    149e:	bl	2ccc <digitalWrite>
    14a2:	b.w	4dc <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    14a6:	ldr	r5, [pc, #560]	; (16d8 <loop+0x1210>)

      m_sequence.stopSteps(ppqn);
    14a8:	ldr	r2, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    14aa:	ldr	r3, [r5, #8]
        }
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
    14ac:	ldr	r1, [r2, #0]
    14ae:	add.w	r2, r2, r1, lsl #2
    14b2:	adds	r3, #1
    14b4:	ldr	r2, [r2, #4]
    14b6:	str	r3, [r5, #8]
    void reverse () {
      m_reverse = !m_reverse;
    };

    void stopSteps (int ppqn) {
      if (stepIsOver(ppqn)) {
    14b8:	ldr	r2, [r2, #16]
    14ba:	cmp	r3, r2
    14bc:	bge.w	17f6 <loop+0x132e>

      m_sequence.stopSteps(ppqn);

      if (ppqn == max_ppqn) {
    14c0:	ldr	r2, [r5, #4]
    14c2:	ldr	r1, [pc, #532]	; (16d8 <loop+0x1210>)
    14c4:	cmp	r2, r3
    14c6:	bne.w	4da <loop+0x12>
        m_sequence.doStep(); 
    14ca:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14cc:	ldr	r4, [pc, #524]	; (16dc <loop+0x1214>)
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    14ce:	ldr	r3, [r6, #0]
    14d0:	add.w	r3, r6, r3, lsl #2
    14d4:	ldr	r7, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14d6:	ldrb.w	r8, [r7]
    14da:	mov	r0, r8
    14dc:	bl	2cd8 <digitalRead>
    14e0:	clz	r1, r0
    14e4:	lsrs	r1, r1, #5
    14e6:	mov	r0, r8
    14e8:	bl	2ccc <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    14ec:	ldr	r3, [r6, #0]
    14ee:	ldr	r0, [r4, #0]
    14f0:	str	r0, [sp, #0]
    14f2:	add.w	r2, r6, r3, lsl #2
      blinking = true;
    14f6:	movs	r1, #1
    14f8:	ldr	r2, [r2, #4]
    14fa:	strb	r1, [r7, #16]
      blinkingCounter = times;
    14fc:	movs	r1, #0
    14fe:	str	r1, [r7, #20]
    1500:	ldrb	r1, [r2, #4]
	return ret;
    1502:	ldr	r0, [sp, #0]
      lastBlink = millis();  
    1504:	str	r0, [r7, #8]
    1506:	cmp	r1, #0
    1508:	bne.w	1ae4 <loop+0x161c>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    150c:	ldrb.w	r2, [r6, #45]	; 0x2d
    1510:	cmp	r2, #0
    1512:	bne.w	1adc <loop+0x1614>
        m_currentStep++;
    1516:	adds	r3, #1
    1518:	cmp	r3, #3
    151a:	it	gt
    151c:	movgt	r3, #0
    151e:	str	r3, [r6, #0]
        ppqn = 0;
    1520:	movs	r3, #0
    1522:	str	r3, [r5, #8]
    1524:	b.w	4dc <loop+0x14>
      m_leds[4]->toggle();
      m_leds[5]->toggle();
    };

    void enterShiftMode () {
      m_shiftMode = true;
    1528:	ldr	r2, [r7, #28]
    152a:	ldr	r0, [pc, #444]	; (16e8 <loop+0x1220>)
    152c:	strb.w	r3, [r2, #46]	; 0x2e
    1530:	movs	r1, #14
    1532:	bl	26bc <usb_serial_write>
            m_sequence.enterShiftMode();
            Serial.print("Seconds held: ");
            Serial.print(secs_held);
    1536:	ldr	r1, [r7, #40]	; 0x28
    1538:	ldr	r0, [pc, #424]	; (16e4 <loop+0x121c>)
    153a:	bl	42d0 <Print::print(long)>
    153e:	movs	r1, #19
    1540:	ldr	r0, [pc, #424]	; (16ec <loop+0x1224>)
    1542:	bl	26bc <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
    1546:	ldr	r1, [r7, #36]	; 0x24
    1548:	ldr	r0, [pc, #408]	; (16e4 <loop+0x121c>)
    154a:	bl	42d0 <Print::print(long)>
    154e:	ldr	r0, [pc, #404]	; (16e4 <loop+0x121c>)
    1550:	bl	4230 <Print::println()>
    1554:	ldr	r6, [r7, #32]
    1556:	ldr	r2, [r7, #40]	; 0x28
    1558:	b.w	5d2 <loop+0x10a>
    155c:	ldr	r2, [r5, #28]
    155e:	ldr	r0, [pc, #392]	; (16e8 <loop+0x1220>)
    1560:	strb.w	r3, [r2, #46]	; 0x2e
    1564:	movs	r1, #14
    1566:	bl	26bc <usb_serial_write>
    156a:	ldr	r1, [r5, #40]	; 0x28
    156c:	ldr	r0, [pc, #372]	; (16e4 <loop+0x121c>)
    156e:	bl	42d0 <Print::print(long)>
    1572:	movs	r1, #19
    1574:	ldr	r0, [pc, #372]	; (16ec <loop+0x1224>)
    1576:	bl	26bc <usb_serial_write>
    157a:	ldr	r1, [r5, #36]	; 0x24
    157c:	ldr	r0, [pc, #356]	; (16e4 <loop+0x121c>)
    157e:	bl	42d0 <Print::print(long)>
    1582:	ldr	r0, [pc, #352]	; (16e4 <loop+0x121c>)
    1584:	bl	4230 <Print::println()>
    1588:	ldr	r7, [r5, #32]
    158a:	ldr	r2, [r5, #40]	; 0x28
    158c:	b.w	6ce <loop+0x206>
    1590:	ldr	r2, [r6, #28]
    1592:	ldr	r0, [pc, #340]	; (16e8 <loop+0x1220>)
    1594:	strb.w	r3, [r2, #46]	; 0x2e
    1598:	movs	r1, #14
    159a:	bl	26bc <usb_serial_write>
    159e:	ldr	r1, [r6, #40]	; 0x28
    15a0:	ldr	r0, [pc, #320]	; (16e4 <loop+0x121c>)
    15a2:	bl	42d0 <Print::print(long)>
    15a6:	movs	r1, #19
    15a8:	ldr	r0, [pc, #320]	; (16ec <loop+0x1224>)
    15aa:	bl	26bc <usb_serial_write>
    15ae:	ldr	r1, [r6, #36]	; 0x24
    15b0:	ldr	r0, [pc, #304]	; (16e4 <loop+0x121c>)
    15b2:	bl	42d0 <Print::print(long)>
    15b6:	ldr	r0, [pc, #300]	; (16e4 <loop+0x121c>)
    15b8:	bl	4230 <Print::println()>
    15bc:	ldr	r7, [r6, #32]
    15be:	ldr	r2, [r6, #40]	; 0x28
    15c0:	b.w	74c <loop+0x284>
    15c4:	ldr	r2, [r5, #28]
    15c6:	ldr	r0, [pc, #288]	; (16e8 <loop+0x1220>)
    15c8:	strb.w	r3, [r2, #46]	; 0x2e
    15cc:	movs	r1, #14
    15ce:	bl	26bc <usb_serial_write>
    15d2:	ldr	r1, [r5, #40]	; 0x28
    15d4:	ldr	r0, [pc, #268]	; (16e4 <loop+0x121c>)
    15d6:	bl	42d0 <Print::print(long)>
    15da:	movs	r1, #19
    15dc:	ldr	r0, [pc, #268]	; (16ec <loop+0x1224>)
    15de:	bl	26bc <usb_serial_write>
    15e2:	ldr	r1, [r5, #36]	; 0x24
    15e4:	ldr	r0, [pc, #252]	; (16e4 <loop+0x121c>)
    15e6:	bl	42d0 <Print::print(long)>
    15ea:	ldr	r0, [pc, #248]	; (16e4 <loop+0x121c>)
    15ec:	bl	4230 <Print::println()>
    15f0:	ldr	r7, [r5, #32]
    15f2:	ldr	r2, [r5, #40]	; 0x28
    15f4:	b.w	554 <loop+0x8c>
    15f8:	ldr	r2, [r7, #28]
    15fa:	ldr	r0, [pc, #236]	; (16e8 <loop+0x1220>)
    15fc:	strb.w	r3, [r2, #46]	; 0x2e
    1600:	movs	r1, #14
    1602:	bl	26bc <usb_serial_write>
    1606:	ldr	r1, [r7, #40]	; 0x28
    1608:	ldr	r0, [pc, #216]	; (16e4 <loop+0x121c>)
    160a:	bl	42d0 <Print::print(long)>
    160e:	movs	r1, #19
    1610:	ldr	r0, [pc, #216]	; (16ec <loop+0x1224>)
    1612:	bl	26bc <usb_serial_write>
    1616:	ldr	r1, [r7, #36]	; 0x24
    1618:	ldr	r0, [pc, #200]	; (16e4 <loop+0x121c>)
    161a:	bl	42d0 <Print::print(long)>
    161e:	ldr	r0, [pc, #196]	; (16e4 <loop+0x121c>)
    1620:	bl	4230 <Print::println()>
    1624:	ldr	r5, [r7, #32]
    1626:	ldr	r2, [r7, #40]	; 0x28
    1628:	b.w	7ee <loop+0x326>
    162c:	ldr	r2, [r6, #28]
    162e:	ldr	r0, [pc, #184]	; (16e8 <loop+0x1220>)
    1630:	strb.w	r3, [r2, #46]	; 0x2e
    1634:	movs	r1, #14
    1636:	bl	26bc <usb_serial_write>
    163a:	ldr	r1, [r6, #40]	; 0x28
    163c:	ldr	r0, [pc, #164]	; (16e4 <loop+0x121c>)
    163e:	bl	42d0 <Print::print(long)>
    1642:	movs	r1, #19
    1644:	ldr	r0, [pc, #164]	; (16ec <loop+0x1224>)
    1646:	bl	26bc <usb_serial_write>
    164a:	ldr	r1, [r6, #36]	; 0x24
    164c:	ldr	r0, [pc, #148]	; (16e4 <loop+0x121c>)
    164e:	bl	42d0 <Print::print(long)>
    1652:	ldr	r0, [pc, #144]	; (16e4 <loop+0x121c>)
    1654:	bl	4230 <Print::println()>
    1658:	ldr	r5, [r6, #32]
    165a:	ldr	r2, [r6, #40]	; 0x28
    165c:	b.w	650 <loop+0x188>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
    1660:	ldr	r2, [r4, #12]
    1662:	ldr	r3, [r4, #16]
    1664:	add.w	r3, r3, r2, lsl #2
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
    1668:	ldr	r2, [r3, #4]
    166a:	subs.w	r3, r0, r0, lsl #6
    166e:	it	mi
    1670:	addwmi	r3, r3, #1023	; 0x3ff
    1674:	asrs	r3, r3, #10
    1676:	adds	r3, #127	; 0x7f
    1678:	str	r3, [r2, #12]
    167a:	b.w	95a <loop+0x492>
    167e:	ldr	r2, [r4, #12]
    1680:	ldr	r3, [r4, #16]
    1682:	add.w	r3, r3, r2, lsl #2
    1686:	ldr	r2, [r3, #4]
    1688:	subs.w	r3, r0, r0, lsl #6
    168c:	it	mi
    168e:	addwmi	r3, r3, #1023	; 0x3ff
    1692:	asrs	r3, r3, #10
    1694:	adds	r3, #127	; 0x7f
    1696:	str	r3, [r2, #12]
    1698:	b.w	9b4 <loop+0x4ec>
    169c:	ldr	r2, [r4, #12]
    169e:	ldr	r3, [r4, #16]
    16a0:	add.w	r3, r3, r2, lsl #2
    16a4:	ldr	r2, [r3, #4]
    16a6:	subs.w	r3, r0, r0, lsl #6
    16aa:	it	mi
    16ac:	addwmi	r3, r3, #1023	; 0x3ff
    16b0:	asrs	r3, r3, #10
    16b2:	adds	r3, #127	; 0x7f
    16b4:	str	r3, [r2, #12]
    16b6:	b.w	a0e <loop+0x546>
    16ba:	ldr	r2, [r4, #12]
    16bc:	ldr	r3, [r4, #16]
    16be:	add.w	r3, r3, r2, lsl #2
    16c2:	ldr	r2, [r3, #4]
    16c4:	subs.w	r3, r0, r0, lsl #6
    16c8:	it	mi
    16ca:	addwmi	r3, r3, #1023	; 0x3ff
    16ce:	asrs	r3, r3, #10
    16d0:	adds	r3, #127	; 0x7f
    16d2:	str	r3, [r2, #12]
    16d4:	b.w	900 <loop+0x438>
    16d8:	.word	0x1fff1884
    16dc:	.word	0x1fff1910
    16e0:	.word	0x00005660
    16e4:	.word	0x1fff0c70
    16e8:	.word	0x000056b0
    16ec:	.word	0x000056c0
    16f0:	ldr	r2, [r4, #12]
    16f2:	ldr	r3, [r4, #16]
    16f4:	add.w	r3, r3, r2, lsl #2
    16f8:	ldr	r2, [r3, #4]
    16fa:	subs.w	r3, r0, r0, lsl #6
    16fe:	it	mi
    1700:	addwmi	r3, r3, #1023	; 0x3ff
    1704:	asrs	r3, r3, #10
    1706:	adds	r3, #127	; 0x7f
    1708:	str	r3, [r2, #12]
    170a:	b.w	a68 <loop+0x5a0>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    170e:	sub.w	r2, r0, #400	; 0x190
    1712:	cmp.w	r2, #400	; 0x190
    1716:	bcc.n	17cc <loop+0x1304>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1718:	sub.w	r2, r0, #800	; 0x320
    171c:	cmp	r2, #223	; 0xdf
    171e:	bhi.w	a68 <loop+0x5a0>
        max_ppqn = 10;
    1722:	movs	r2, #10
    1724:	str	r2, [r3, #4]
    1726:	ldr	r0, [r4, #4]
    1728:	b.w	a68 <loop+0x5a0>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    172c:	sub.w	r2, r0, #400	; 0x190
    1730:	cmp.w	r2, #400	; 0x190
    1734:	bcc.n	17be <loop+0x12f6>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1736:	sub.w	r2, r0, #800	; 0x320
    173a:	cmp	r2, #223	; 0xdf
    173c:	bhi.w	95a <loop+0x492>
        max_ppqn = 10;
    1740:	movs	r2, #10
    1742:	str	r2, [r3, #4]
    1744:	ldr	r0, [r4, #4]
    1746:	b.w	95a <loop+0x492>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    174a:	sub.w	r2, r0, #400	; 0x190
    174e:	cmp.w	r2, #400	; 0x190
    1752:	bcc.n	17b0 <loop+0x12e8>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1754:	sub.w	r2, r0, #800	; 0x320
    1758:	cmp	r2, #223	; 0xdf
    175a:	bhi.w	9b4 <loop+0x4ec>
        max_ppqn = 10;
    175e:	movs	r2, #10
    1760:	str	r2, [r3, #4]
    1762:	ldr	r0, [r4, #4]
    1764:	b.w	9b4 <loop+0x4ec>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1768:	sub.w	r2, r0, #400	; 0x190
    176c:	cmp.w	r2, #400	; 0x190
    1770:	bcc.n	17e8 <loop+0x1320>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1772:	sub.w	r2, r0, #800	; 0x320
    1776:	cmp	r2, #223	; 0xdf
    1778:	bhi.w	a0e <loop+0x546>
        max_ppqn = 10;
    177c:	movs	r2, #10
    177e:	str	r2, [r3, #4]
    1780:	ldr	r0, [r4, #4]
    1782:	b.w	a0e <loop+0x546>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1786:	sub.w	r2, r0, #400	; 0x190
    178a:	cmp.w	r2, #400	; 0x190
    178e:	bcc.n	17da <loop+0x1312>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1790:	sub.w	r2, r0, #800	; 0x320
    1794:	cmp	r2, #223	; 0xdf
    1796:	bhi.w	900 <loop+0x438>
        max_ppqn = 10;
    179a:	movs	r2, #10
    179c:	str	r2, [r3, #4]
    179e:	ldr	r0, [r4, #4]
    17a0:	b.w	900 <loop+0x438>
      if (m_steps[m_currentStep]->m_state) {
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
        m_currentStep++;
    17a4:	adds	r3, #1
    17a6:	cmp	r3, #3
    17a8:	it	gt
    17aa:	movgt	r3, #0
    17ac:	str	r3, [r6, #0]
    17ae:	b.n	1468 <loop+0xfa0>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    17b0:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17b2:	movs	r1, #8

        if (ppqn >= 8) {
    17b4:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17b6:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    17b8:	bgt.w	13d4 <loop+0xf0c>
    17bc:	b.n	13d8 <loop+0xf10>
    17be:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17c0:	movs	r1, #8

        if (ppqn >= 8) {
    17c2:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17c4:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    17c6:	bgt.w	13f2 <loop+0xf2a>
    17ca:	b.n	13f6 <loop+0xf2e>
    17cc:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17ce:	movs	r1, #8

        if (ppqn >= 8) {
    17d0:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17d2:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    17d4:	bgt.w	1398 <loop+0xed0>
    17d8:	b.n	139c <loop+0xed4>
    17da:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17dc:	movs	r1, #8

        if (ppqn >= 8) {
    17de:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17e0:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    17e2:	bgt.w	137a <loop+0xeb2>
    17e6:	b.n	137e <loop+0xeb6>
    17e8:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17ea:	movs	r1, #8

        if (ppqn >= 8) {
    17ec:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17ee:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    17f0:	bgt.w	13b6 <loop+0xeee>
    17f4:	b.n	13ba <loop+0xef2>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    17f6:	ldr	r0, [pc, #648]	; (1a80 <loop+0x15b8>)
    17f8:	bl	2f58 <usb_midi_write_packed>
    17fc:	ldr	r3, [r5, #8]
    17fe:	b.n	14c0 <loop+0xff8>
    1800:	ldr	r0, [r2, #8]
    1802:	ldr	r3, [r2, #12]
    1804:	lsls	r0, r0, #16
    1806:	lsls	r3, r3, #24
    1808:	and.w	r3, r3, #2130706432	; 0x7f000000
    180c:	and.w	r0, r0, #8323072	; 0x7f0000
    1810:	orrs	r0, r3
    1812:	orr.w	r0, r0, #40704	; 0x9f00
    1816:	orr.w	r0, r0, #9
    181a:	bl	2f58 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    181e:	bl	2ff4 <usb_midi_flush_output>
    1822:	ldr	r3, [r6, #0]
    1824:	b.n	1454 <loop+0xf8c>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1826:	ldrb.w	r3, [r9, #17]
    182a:	cmp	r3, #0
    182c:	beq.w	1a2e <loop+0x1566>
        if (m_sequence.getShiftMode()) {
    1830:	ldr.w	r3, [r9, #28]
    1834:	ldr	r1, [r3, #48]	; 0x30
    1836:	cmp	r1, #0
    1838:	beq.w	1c0c <loop+0x1744>
    int getPage () {
      return m_page;
    }

    void nextPage () {
      if (m_page < 4) m_page++;
    183c:	cmp	r1, #3
    183e:	itt	le
    1840:	addle	r1, #1
    1842:	strle	r1, [r3, #48]	; 0x30
    1844:	b.n	10a6 <loop+0xbde>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1846:	ldrb.w	r3, [r9, #17]
    184a:	cmp	r3, #0
    184c:	beq.n	18ee <loop+0x1426>
        if (m_sequence.getShiftMode()) {
    184e:	ldr.w	r3, [r9, #28]
    1852:	ldr	r1, [r3, #48]	; 0x30
    1854:	cmp	r1, #0
    1856:	beq.w	1cf6 <loop+0x182e>
    185a:	cmp	r1, #3
    185c:	itt	le
    185e:	addle	r1, #1
    1860:	strle	r1, [r3, #48]	; 0x30
    1862:	b.w	1022 <loop+0xb5a>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1866:	ldrb.w	r3, [r9, #17]
    186a:	cmp	r3, #0
    186c:	beq.w	198e <loop+0x14c6>
        if (m_sequence.getShiftMode()) {
    1870:	ldr.w	r3, [r9, #28]
    1874:	ldr	r1, [r3, #48]	; 0x30
    1876:	cmp	r1, #0
    1878:	beq.w	1c5a <loop+0x1792>
    187c:	cmp	r1, #3
    187e:	itt	le
    1880:	addle	r1, #1
    1882:	strle	r1, [r3, #48]	; 0x30
    1884:	b.n	10e8 <loop+0xc20>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1886:	ldrb.w	r3, [r9, #17]
    188a:	cmp	r3, #0
    188c:	beq.n	193e <loop+0x1476>
        if (m_sequence.getShiftMode()) {
    188e:	ldr.w	r3, [r9, #28]
    1892:	ldr	r1, [r3, #48]	; 0x30
    1894:	cmp	r1, #0
    1896:	beq.w	1d44 <loop+0x187c>
    189a:	cmp	r1, #3
    189c:	itt	le
    189e:	addle	r1, #1
    18a0:	strle	r1, [r3, #48]	; 0x30
    18a2:	b.w	fe0 <loop+0xb18>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    18a6:	ldrb.w	r3, [r9, #17]
    18aa:	cmp	r3, #0
    18ac:	beq.w	19de <loop+0x1516>
        if (m_sequence.getShiftMode()) {
    18b0:	ldr.w	r3, [r9, #28]
    18b4:	ldr	r1, [r3, #48]	; 0x30
    18b6:	cmp	r1, #0
    18b8:	beq.w	1ca8 <loop+0x17e0>
    18bc:	cmp	r1, #3
    18be:	itt	le
    18c0:	addle	r1, #1
    18c2:	strle	r1, [r3, #48]	; 0x30
    18c4:	b.w	1064 <loop+0xb9c>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    18c8:	ldrb.w	r3, [r9, #17]
    18cc:	cmp	r3, #0
    18ce:	beq.w	1a8c <loop+0x15c4>
        if (m_sequence.getShiftMode()) {
    18d2:	ldr.w	r3, [r9, #28]
    18d6:	ldr	r1, [r3, #48]	; 0x30
    18d8:	cmp	r1, #0
    18da:	beq.w	1da0 <loop+0x18d8>
    18de:	cmp	r1, #3
    18e0:	itt	le
    18e2:	addle	r1, #1
    18e4:	strle	r1, [r3, #48]	; 0x30
    18e6:	b.n	1140 <loop+0xc78>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    18e8:	movs	r3, #3
    18ea:	str	r3, [r6, #0]
    18ec:	b.n	1468 <loop+0xfa0>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    18ee:	ldr.w	r6, [r9, #24]
    18f2:	ldr	r0, [pc, #400]	; (1a84 <loop+0x15bc>)
    };

    void toggle () {
      m_state = !m_state;
    18f4:	ldr	r3, [r6, #4]
    18f6:	clz	r3, r3
    18fa:	lsrs	r3, r3, #5
    18fc:	str	r3, [r6, #4]
    18fe:	movs	r1, #8
    1900:	bl	26bc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1904:	ldr	r0, [pc, #384]	; (1a88 <loop+0x15c0>)
    1906:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    190a:	ldrb	r1, [r6, #4]
    190c:	ldrb	r0, [r6, #0]
    190e:	bl	2ccc <digitalWrite>

      if (blinking) {
    1912:	ldrb	r3, [r6, #16]
    1914:	cbz	r3, 1924 <loop+0x145c>
        digitalWrite(m_pin, !m_state);
    1916:	ldr	r1, [r6, #4]
    1918:	ldrb	r0, [r6, #0]
    191a:	clz	r1, r1
    191e:	lsrs	r1, r1, #5
    1920:	bl	2ccc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1924:	ldr	r2, [r5, #28]
    1926:	ldr	r1, [r5, #0]
    1928:	ldr	r3, [r5, #36]	; 0x24
    192a:	ldr.w	r0, [r2, r1, lsl #2]
    192e:	ldr	r7, [r5, #32]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
    1930:	ldrb	r1, [r0, #4]
    1932:	ldr	r2, [r5, #40]	; 0x28
    1934:	eor.w	r1, r1, #1
    1938:	strb	r1, [r0, #4]
    193a:	b.w	738 <loop+0x270>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    193e:	ldr.w	r5, [r9, #24]
    1942:	ldr	r0, [pc, #320]	; (1a84 <loop+0x15bc>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1944:	ldr	r3, [r5, #4]
    1946:	clz	r3, r3
    194a:	lsrs	r3, r3, #5
    194c:	str	r3, [r5, #4]
    194e:	movs	r1, #8
    1950:	bl	26bc <usb_serial_write>
    1954:	ldr	r0, [pc, #304]	; (1a88 <loop+0x15c0>)
    1956:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    195a:	ldrb	r1, [r5, #4]
    195c:	ldrb	r0, [r5, #0]
    195e:	bl	2ccc <digitalWrite>

      if (blinking) {
    1962:	ldrb	r3, [r5, #16]
    1964:	cbz	r3, 1974 <loop+0x14ac>
        digitalWrite(m_pin, !m_state);
    1966:	ldr	r1, [r5, #4]
    1968:	ldrb	r0, [r5, #0]
    196a:	clz	r1, r1
    196e:	lsrs	r1, r1, #5
    1970:	bl	2ccc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1974:	ldr	r2, [r6, #28]
    1976:	ldr	r1, [r6, #0]
    1978:	ldr	r3, [r6, #36]	; 0x24
    197a:	ldr.w	r0, [r2, r1, lsl #2]
    197e:	ldr	r7, [r6, #32]
    1980:	ldrb	r1, [r0, #4]
    1982:	ldr	r2, [r6, #40]	; 0x28
    1984:	eor.w	r1, r1, #1
    1988:	strb	r1, [r0, #4]
    198a:	b.w	6ba <loop+0x1f2>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    198e:	ldr.w	r5, [r9, #24]
    1992:	ldr	r0, [pc, #240]	; (1a84 <loop+0x15bc>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1994:	ldr	r3, [r5, #4]
    1996:	clz	r3, r3
    199a:	lsrs	r3, r3, #5
    199c:	str	r3, [r5, #4]
    199e:	movs	r1, #8
    19a0:	bl	26bc <usb_serial_write>
    19a4:	ldr	r0, [pc, #224]	; (1a88 <loop+0x15c0>)
    19a6:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    19aa:	ldrb	r1, [r5, #4]
    19ac:	ldrb	r0, [r5, #0]
    19ae:	bl	2ccc <digitalWrite>

      if (blinking) {
    19b2:	ldrb	r3, [r5, #16]
    19b4:	cbz	r3, 19c4 <loop+0x14fc>
        digitalWrite(m_pin, !m_state);
    19b6:	ldr	r1, [r5, #4]
    19b8:	ldrb	r0, [r5, #0]
    19ba:	clz	r1, r1
    19be:	lsrs	r1, r1, #5
    19c0:	bl	2ccc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    19c4:	ldr	r2, [r6, #28]
    19c6:	ldr	r1, [r6, #0]
    19c8:	ldr	r3, [r6, #36]	; 0x24
    19ca:	ldr.w	r0, [r2, r1, lsl #2]
    19ce:	ldr	r7, [r6, #32]
    19d0:	ldrb	r1, [r0, #4]
    19d2:	ldr	r2, [r6, #40]	; 0x28
    19d4:	eor.w	r1, r1, #1
    19d8:	strb	r1, [r0, #4]
    19da:	b.w	540 <loop+0x78>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    19de:	ldr.w	r5, [r9, #24]
    19e2:	ldr	r0, [pc, #160]	; (1a84 <loop+0x15bc>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19e4:	ldr	r3, [r5, #4]
    19e6:	clz	r3, r3
    19ea:	lsrs	r3, r3, #5
    19ec:	str	r3, [r5, #4]
    19ee:	movs	r1, #8
    19f0:	bl	26bc <usb_serial_write>
    19f4:	ldr	r0, [pc, #144]	; (1a88 <loop+0x15c0>)
    19f6:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    19fa:	ldrb	r1, [r5, #4]
    19fc:	ldrb	r0, [r5, #0]
    19fe:	bl	2ccc <digitalWrite>

      if (blinking) {
    1a02:	ldrb	r3, [r5, #16]
    1a04:	cbz	r3, 1a14 <loop+0x154c>
        digitalWrite(m_pin, !m_state);
    1a06:	ldr	r1, [r5, #4]
    1a08:	ldrb	r0, [r5, #0]
    1a0a:	clz	r1, r1
    1a0e:	lsrs	r1, r1, #5
    1a10:	bl	2ccc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a14:	ldr	r2, [r6, #28]
    1a16:	ldr	r1, [r6, #0]
    1a18:	ldr	r3, [r6, #36]	; 0x24
    1a1a:	ldr.w	r0, [r2, r1, lsl #2]
    1a1e:	ldr	r5, [r6, #32]
    1a20:	ldrb	r1, [r0, #4]
    1a22:	ldr	r2, [r6, #40]	; 0x28
    1a24:	eor.w	r1, r1, #1
    1a28:	strb	r1, [r0, #4]
    1a2a:	b.w	7da <loop+0x312>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1a2e:	ldr.w	r5, [r9, #24]
    1a32:	ldr	r0, [pc, #80]	; (1a84 <loop+0x15bc>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a34:	ldr	r3, [r5, #4]
    1a36:	clz	r3, r3
    1a3a:	lsrs	r3, r3, #5
    1a3c:	str	r3, [r5, #4]
    1a3e:	movs	r1, #8
    1a40:	bl	26bc <usb_serial_write>
    1a44:	ldr	r0, [pc, #64]	; (1a88 <loop+0x15c0>)
    1a46:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1a4a:	ldrb	r1, [r5, #4]
    1a4c:	ldrb	r0, [r5, #0]
    1a4e:	bl	2ccc <digitalWrite>

      if (blinking) {
    1a52:	ldrb	r3, [r5, #16]
    1a54:	cbz	r3, 1a64 <loop+0x159c>
        digitalWrite(m_pin, !m_state);
    1a56:	ldr	r1, [r5, #4]
    1a58:	ldrb	r0, [r5, #0]
    1a5a:	clz	r1, r1
    1a5e:	lsrs	r1, r1, #5
    1a60:	bl	2ccc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a64:	ldr	r2, [r7, #28]
    1a66:	ldr	r1, [r7, #0]
    1a68:	ldr	r3, [r7, #36]	; 0x24
    1a6a:	ldr.w	r0, [r2, r1, lsl #2]
    1a6e:	ldr	r5, [r7, #32]
    1a70:	ldrb	r1, [r0, #4]
    1a72:	ldr	r2, [r7, #40]	; 0x28
    1a74:	eor.w	r1, r1, #1
    1a78:	strb	r1, [r0, #4]
    1a7a:	b.w	63c <loop+0x174>
    1a7e:	nop
    1a80:	.word	0x7f7bbf0b
    1a84:	.word	0x00005660
    1a88:	.word	0x1fff0c70
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1a8c:	ldr.w	r6, [r9, #24]
    1a90:	ldr	r0, [pc, #768]	; (1d94 <loop+0x18cc>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a92:	ldr	r3, [r6, #4]
    1a94:	clz	r3, r3
    1a98:	lsrs	r3, r3, #5
    1a9a:	str	r3, [r6, #4]
    1a9c:	movs	r1, #8
    1a9e:	bl	26bc <usb_serial_write>
    1aa2:	ldr	r0, [pc, #756]	; (1d98 <loop+0x18d0>)
    1aa4:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1aa8:	ldrb	r1, [r6, #4]
    1aaa:	ldrb	r0, [r6, #0]
    1aac:	bl	2ccc <digitalWrite>

      if (blinking) {
    1ab0:	ldrb	r3, [r6, #16]
    1ab2:	cbz	r3, 1ac2 <loop+0x15fa>
        digitalWrite(m_pin, !m_state);
    1ab4:	ldr	r1, [r6, #4]
    1ab6:	ldrb	r0, [r6, #0]
    1ab8:	clz	r1, r1
    1abc:	lsrs	r1, r1, #5
    1abe:	bl	2ccc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1ac2:	ldr	r2, [r5, #28]
    1ac4:	ldr	r1, [r5, #0]
    1ac6:	ldr	r3, [r5, #36]	; 0x24
    1ac8:	ldr.w	r0, [r2, r1, lsl #2]
    1acc:	ldr	r6, [r5, #32]
    1ace:	ldrb	r1, [r0, #4]
    1ad0:	ldr	r2, [r5, #40]	; 0x28
    1ad2:	eor.w	r1, r1, #1
    1ad6:	strb	r1, [r0, #4]
    1ad8:	b.w	5be <loop+0xf6>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1adc:	subs	r2, r3, #1
    1ade:	cbz	r3, 1b0a <loop+0x1642>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1ae0:	str	r2, [r6, #0]
    1ae2:	b.n	1520 <loop+0x1058>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1ae4:	ldr	r0, [r2, #8]
    1ae6:	ldr	r3, [r2, #12]
    1ae8:	lsls	r0, r0, #16
    1aea:	lsls	r3, r3, #24
    1aec:	and.w	r3, r3, #2130706432	; 0x7f000000
    1af0:	and.w	r0, r0, #8323072	; 0x7f0000
    1af4:	orrs	r0, r3
    1af6:	orr.w	r0, r0, #40704	; 0x9f00
    1afa:	orr.w	r0, r0, #9
    1afe:	bl	2f58 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1b02:	bl	2ff4 <usb_midi_flush_output>
    1b06:	ldr	r3, [r6, #0]
    1b08:	b.n	150c <loop+0x1044>

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1b0a:	movs	r3, #3
    1b0c:	str	r3, [r6, #0]
    1b0e:	b.n	1520 <loop+0x1058>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1b10:	ldr.w	lr, [pc, #648]	; 1d9c <loop+0x18d4>
    1b14:	ldrb.w	r1, [lr]
    1b18:	cmp	r1, #0
    1b1a:	beq.w	1dee <loop+0x1926>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1b1e:	cmp	r1, #1
    1b20:	beq.w	225c <loop+0x1d94>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1b24:	cmp	r1, #2
    1b26:	beq.w	1fce <loop+0x1b06>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1b2a:	cmp	r3, #50	; 0x32
    1b2c:	ble.w	74c <loop+0x284>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1b30:	cmp	r6, #1
    1b32:	bne.w	74a <loop+0x282>
    1b36:	b.w	1308 <loop+0xe40>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1b3a:	ldr.w	lr, [pc, #608]	; 1d9c <loop+0x18d4>
    1b3e:	ldrb.w	r1, [lr]
    1b42:	cmp	r1, #0
    1b44:	beq.w	1f2e <loop+0x1a66>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1b48:	cmp	r1, #1
    1b4a:	beq.w	22b0 <loop+0x1de8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1b4e:	cmp	r1, #2
    1b50:	beq.w	2086 <loop+0x1bbe>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1b54:	cmp	r3, #50	; 0x32
    1b56:	ble.w	554 <loop+0x8c>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1b5a:	cmp	r5, #1
    1b5c:	bne.w	552 <loop+0x8a>
    1b60:	b.w	1330 <loop+0xe68>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1b64:	ldr.w	lr, [pc, #564]	; 1d9c <loop+0x18d4>
    1b68:	ldrb.w	r1, [lr]
    1b6c:	cmp	r1, #0
    1b6e:	beq.w	1ede <loop+0x1a16>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1b72:	cmp	r1, #1
    1b74:	beq.w	2232 <loop+0x1d6a>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1b78:	cmp	r1, #2
    1b7a:	beq.w	2150 <loop+0x1c88>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1b7e:	cmp	r3, #50	; 0x32
    1b80:	ble.w	6ce <loop+0x206>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1b84:	cmp	r5, #1
    1b86:	bne.w	6cc <loop+0x204>
    1b8a:	b.w	12f4 <loop+0xe2c>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1b8e:	ldr.w	lr, [pc, #524]	; 1d9c <loop+0x18d4>
    1b92:	ldrb.w	r1, [lr]
    1b96:	cmp	r1, #0
    1b98:	beq.w	1e8e <loop+0x19c6>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1b9c:	cmp	r1, #1
    1b9e:	beq.w	2208 <loop+0x1d40>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1ba2:	cmp	r1, #2
    1ba4:	beq.w	21ac <loop+0x1ce4>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1ba8:	cmp	r3, #50	; 0x32
    1baa:	ble.w	5d2 <loop+0x10a>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1bae:	cmp	r7, #1
    1bb0:	bne.w	5d0 <loop+0x108>
    1bb4:	b.w	1358 <loop+0xe90>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1bb8:	ldr.w	lr, [pc, #480]	; 1d9c <loop+0x18d4>
    1bbc:	ldrb.w	r1, [lr]
    1bc0:	cmp	r1, #0
    1bc2:	beq.w	1f7e <loop+0x1ab6>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1bc6:	cmp	r1, #1
    1bc8:	beq.w	22da <loop+0x1e12>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1bcc:	cmp	r1, #2
    1bce:	beq.w	20f4 <loop+0x1c2c>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1bd2:	cmp	r3, #50	; 0x32
    1bd4:	ble.w	650 <loop+0x188>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1bd8:	cmp	r6, #1
    1bda:	bne.w	64e <loop+0x186>
    1bde:	b.w	1344 <loop+0xe7c>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1be2:	ldr.w	lr, [pc, #440]	; 1d9c <loop+0x18d4>
    1be6:	ldrb.w	r1, [lr]
    1bea:	cmp	r1, #0
    1bec:	beq.w	1e3e <loop+0x1976>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1bf0:	cmp	r1, #1
    1bf2:	beq.w	2286 <loop+0x1dbe>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1bf6:	cmp	r1, #2
    1bf8:	beq.w	202a <loop+0x1b62>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1bfc:	cmp	r3, #50	; 0x32
    1bfe:	ble.w	7ee <loop+0x326>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1c02:	cmp	r7, #1
    1c04:	bne.w	7ec <loop+0x324>
    1c08:	b.w	131c <loop+0xe54>
      } else if (m_state == LOW && m_reverseButton) {
        if (m_sequence.getShiftMode()) {
          m_sequence.nextPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_led.toggle();
    1c0c:	ldr.w	r5, [r9, #24]
    1c10:	ldr	r0, [pc, #384]	; (1d94 <loop+0x18cc>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c12:	ldr	r3, [r5, #4]
    1c14:	clz	r3, r3
    1c18:	lsrs	r3, r3, #5
    1c1a:	str	r3, [r5, #4]
    1c1c:	movs	r1, #8
    1c1e:	bl	26bc <usb_serial_write>
    1c22:	ldr	r0, [pc, #372]	; (1d98 <loop+0x18d0>)
    1c24:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1c28:	ldrb	r1, [r5, #4]
    1c2a:	ldrb	r0, [r5, #0]
    1c2c:	bl	2ccc <digitalWrite>

      if (blinking) {
    1c30:	ldrb	r3, [r5, #16]
    1c32:	cbz	r3, 1c42 <loop+0x177a>
        digitalWrite(m_pin, !m_state);
    1c34:	ldr	r1, [r5, #4]
    1c36:	ldrb	r0, [r5, #0]
    1c38:	clz	r1, r1
    1c3c:	lsrs	r1, r1, #5
    1c3e:	bl	2ccc <digitalWrite>
    1c42:	ldr	r0, [r7, #28]
    1c44:	ldr	r3, [r7, #36]	; 0x24
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    1c46:	ldrb.w	r1, [r0, #45]	; 0x2d
    1c4a:	ldr	r5, [r7, #32]
    1c4c:	ldr	r2, [r7, #40]	; 0x28
    1c4e:	eor.w	r1, r1, #1
    1c52:	strb.w	r1, [r0, #45]	; 0x2d
    1c56:	b.w	63c <loop+0x174>
    1c5a:	ldr.w	r5, [r9, #24]
    1c5e:	ldr	r0, [pc, #308]	; (1d94 <loop+0x18cc>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c60:	ldr	r3, [r5, #4]
    1c62:	clz	r3, r3
    1c66:	lsrs	r3, r3, #5
    1c68:	str	r3, [r5, #4]
    1c6a:	movs	r1, #8
    1c6c:	bl	26bc <usb_serial_write>
    1c70:	ldr	r0, [pc, #292]	; (1d98 <loop+0x18d0>)
    1c72:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1c76:	ldrb	r1, [r5, #4]
    1c78:	ldrb	r0, [r5, #0]
    1c7a:	bl	2ccc <digitalWrite>

      if (blinking) {
    1c7e:	ldrb	r3, [r5, #16]
    1c80:	cbz	r3, 1c90 <loop+0x17c8>
        digitalWrite(m_pin, !m_state);
    1c82:	ldr	r1, [r5, #4]
    1c84:	ldrb	r0, [r5, #0]
    1c86:	clz	r1, r1
    1c8a:	lsrs	r1, r1, #5
    1c8c:	bl	2ccc <digitalWrite>
    1c90:	ldr	r0, [r6, #28]
    1c92:	ldr	r3, [r6, #36]	; 0x24
    1c94:	ldrb.w	r1, [r0, #45]	; 0x2d
    1c98:	ldr	r7, [r6, #32]
    1c9a:	ldr	r2, [r6, #40]	; 0x28
    1c9c:	eor.w	r1, r1, #1
    1ca0:	strb.w	r1, [r0, #45]	; 0x2d
    1ca4:	b.w	540 <loop+0x78>
    1ca8:	ldr.w	r5, [r9, #24]
    1cac:	ldr	r0, [pc, #228]	; (1d94 <loop+0x18cc>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1cae:	ldr	r3, [r5, #4]
    1cb0:	clz	r3, r3
    1cb4:	lsrs	r3, r3, #5
    1cb6:	str	r3, [r5, #4]
    1cb8:	movs	r1, #8
    1cba:	bl	26bc <usb_serial_write>
    1cbe:	ldr	r0, [pc, #216]	; (1d98 <loop+0x18d0>)
    1cc0:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1cc4:	ldrb	r1, [r5, #4]
    1cc6:	ldrb	r0, [r5, #0]
    1cc8:	bl	2ccc <digitalWrite>

      if (blinking) {
    1ccc:	ldrb	r3, [r5, #16]
    1cce:	cbz	r3, 1cde <loop+0x1816>
        digitalWrite(m_pin, !m_state);
    1cd0:	ldr	r1, [r5, #4]
    1cd2:	ldrb	r0, [r5, #0]
    1cd4:	clz	r1, r1
    1cd8:	lsrs	r1, r1, #5
    1cda:	bl	2ccc <digitalWrite>
    1cde:	ldr	r0, [r6, #28]
    1ce0:	ldr	r3, [r6, #36]	; 0x24
    1ce2:	ldrb.w	r1, [r0, #45]	; 0x2d
    1ce6:	ldr	r5, [r6, #32]
    1ce8:	ldr	r2, [r6, #40]	; 0x28
    1cea:	eor.w	r1, r1, #1
    1cee:	strb.w	r1, [r0, #45]	; 0x2d
    1cf2:	b.w	7da <loop+0x312>
    1cf6:	ldr.w	r6, [r9, #24]
    1cfa:	ldr	r0, [pc, #152]	; (1d94 <loop+0x18cc>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1cfc:	ldr	r3, [r6, #4]
    1cfe:	clz	r3, r3
    1d02:	lsrs	r3, r3, #5
    1d04:	str	r3, [r6, #4]
    1d06:	movs	r1, #8
    1d08:	bl	26bc <usb_serial_write>
    1d0c:	ldr	r0, [pc, #136]	; (1d98 <loop+0x18d0>)
    1d0e:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1d12:	ldrb	r1, [r6, #4]
    1d14:	ldrb	r0, [r6, #0]
    1d16:	bl	2ccc <digitalWrite>

      if (blinking) {
    1d1a:	ldrb	r3, [r6, #16]
    1d1c:	cbz	r3, 1d2c <loop+0x1864>
        digitalWrite(m_pin, !m_state);
    1d1e:	ldr	r1, [r6, #4]
    1d20:	ldrb	r0, [r6, #0]
    1d22:	clz	r1, r1
    1d26:	lsrs	r1, r1, #5
    1d28:	bl	2ccc <digitalWrite>
    1d2c:	ldr	r0, [r5, #28]
    1d2e:	ldr	r3, [r5, #36]	; 0x24
    1d30:	ldrb.w	r1, [r0, #45]	; 0x2d
    1d34:	ldr	r7, [r5, #32]
    1d36:	ldr	r2, [r5, #40]	; 0x28
    1d38:	eor.w	r1, r1, #1
    1d3c:	strb.w	r1, [r0, #45]	; 0x2d
    1d40:	b.w	738 <loop+0x270>
    1d44:	ldr.w	r5, [r9, #24]
    1d48:	ldr	r0, [pc, #72]	; (1d94 <loop+0x18cc>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d4a:	ldr	r3, [r5, #4]
    1d4c:	clz	r3, r3
    1d50:	lsrs	r3, r3, #5
    1d52:	str	r3, [r5, #4]
    1d54:	movs	r1, #8
    1d56:	bl	26bc <usb_serial_write>
    1d5a:	ldr	r0, [pc, #60]	; (1d98 <loop+0x18d0>)
    1d5c:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1d60:	ldrb	r1, [r5, #4]
    1d62:	ldrb	r0, [r5, #0]
    1d64:	bl	2ccc <digitalWrite>

      if (blinking) {
    1d68:	ldrb	r3, [r5, #16]
    1d6a:	cbz	r3, 1d7a <loop+0x18b2>
        digitalWrite(m_pin, !m_state);
    1d6c:	ldr	r1, [r5, #4]
    1d6e:	ldrb	r0, [r5, #0]
    1d70:	clz	r1, r1
    1d74:	lsrs	r1, r1, #5
    1d76:	bl	2ccc <digitalWrite>
    1d7a:	ldr	r0, [r6, #28]
    1d7c:	ldr	r3, [r6, #36]	; 0x24
    1d7e:	ldrb.w	r1, [r0, #45]	; 0x2d
    1d82:	ldr	r7, [r6, #32]
    1d84:	ldr	r2, [r6, #40]	; 0x28
    1d86:	eor.w	r1, r1, #1
    1d8a:	strb.w	r1, [r0, #45]	; 0x2d
    1d8e:	b.w	6ba <loop+0x1f2>
    1d92:	nop
    1d94:	.word	0x00005660
    1d98:	.word	0x1fff0c70
    1d9c:	.word	0x1fff1894
    1da0:	ldr.w	r6, [r9, #24]
    1da4:	ldr	r0, [pc, #828]	; (20e4 <loop+0x1c1c>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1da6:	ldr	r3, [r6, #4]
    1da8:	clz	r3, r3
    1dac:	lsrs	r3, r3, #5
    1dae:	str	r3, [r6, #4]
    1db0:	movs	r1, #8
    1db2:	bl	26bc <usb_serial_write>
    1db6:	ldr	r0, [pc, #816]	; (20e8 <loop+0x1c20>)
    1db8:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1dbc:	ldrb	r1, [r6, #4]
    1dbe:	ldrb	r0, [r6, #0]
    1dc0:	bl	2ccc <digitalWrite>

      if (blinking) {
    1dc4:	ldrb	r3, [r6, #16]
    1dc6:	cbz	r3, 1dd6 <loop+0x190e>
        digitalWrite(m_pin, !m_state);
    1dc8:	ldr	r1, [r6, #4]
    1dca:	ldrb	r0, [r6, #0]
    1dcc:	clz	r1, r1
    1dd0:	lsrs	r1, r1, #5
    1dd2:	bl	2ccc <digitalWrite>
    1dd6:	ldr	r0, [r5, #28]
    1dd8:	ldr	r3, [r5, #36]	; 0x24
    1dda:	ldrb.w	r1, [r0, #45]	; 0x2d
    1dde:	ldr	r6, [r5, #32]
    1de0:	ldr	r2, [r5, #40]	; 0x28
    1de2:	eor.w	r1, r1, #1
    1de6:	strb.w	r1, [r0, #45]	; 0x2d
    1dea:	b.w	5be <loop+0xf6>
    1dee:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1df0:	movs	r7, #1
    1df2:	ldr	r0, [pc, #760]	; (20ec <loop+0x1c24>)
    1df4:	strb.w	r7, [lr]
    1df8:	bl	26bc <usb_serial_write>
    1dfc:	ldr	r0, [pc, #744]	; (20e8 <loop+0x1c20>)
    1dfe:	bl	4230 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1e02:	ldr.w	r6, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1e06:	ldrb.w	sl, [r6]
    1e0a:	mov	r0, sl
    1e0c:	bl	2cd8 <digitalRead>
    1e10:	clz	r1, r0
    1e14:	lsrs	r1, r1, #5
    1e16:	mov	r0, sl
    1e18:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e1c:	ldr.w	r3, [r8]
    1e20:	str	r3, [sp, #252]	; 0xfc
      blinking = true;
      blinkingCounter = times;
    1e22:	movw	r2, #999	; 0x3e7
	return ret;
    1e26:	ldr	r3, [sp, #252]	; 0xfc
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e28:	strb	r7, [r6, #16]
      blinkingCounter = times;
    1e2a:	str	r2, [r6, #20]
      lastBlink = millis();  
    1e2c:	str	r3, [r6, #8]
    1e2e:	ldr.w	r7, [r9, #32]
    1e32:	ldr.w	r3, [r9, #36]	; 0x24
    1e36:	ldr.w	r2, [r9, #40]	; 0x28
    1e3a:	b.w	738 <loop+0x270>
    1e3e:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1e40:	movs	r7, #1
    1e42:	ldr	r0, [pc, #680]	; (20ec <loop+0x1c24>)
    1e44:	strb.w	r7, [lr]
    1e48:	bl	26bc <usb_serial_write>
    1e4c:	ldr	r0, [pc, #664]	; (20e8 <loop+0x1c20>)
    1e4e:	bl	4230 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1e52:	ldr.w	r5, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1e56:	ldrb.w	sl, [r5]
    1e5a:	mov	r0, sl
    1e5c:	bl	2cd8 <digitalRead>
    1e60:	clz	r1, r0
    1e64:	lsrs	r1, r1, #5
    1e66:	mov	r0, sl
    1e68:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e6c:	ldr.w	r3, [r8]
    1e70:	str	r3, [sp, #264]	; 0x108
      blinking = true;
      blinkingCounter = times;
    1e72:	movw	r2, #999	; 0x3e7
	return ret;
    1e76:	ldr	r3, [sp, #264]	; 0x108
    1e78:	str	r2, [r5, #20]
      lastBlink = millis();  
    1e7a:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e7c:	strb	r7, [r5, #16]
    1e7e:	ldr.w	r3, [r9, #36]	; 0x24
    1e82:	ldr.w	r5, [r9, #32]
    1e86:	ldr.w	r2, [r9, #40]	; 0x28
    1e8a:	b.w	7da <loop+0x312>
    1e8e:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1e90:	movs	r7, #1
    1e92:	ldr	r0, [pc, #600]	; (20ec <loop+0x1c24>)
    1e94:	strb.w	r7, [lr]
    1e98:	bl	26bc <usb_serial_write>
    1e9c:	ldr	r0, [pc, #584]	; (20e8 <loop+0x1c20>)
    1e9e:	bl	4230 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1ea2:	ldr.w	r6, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1ea6:	ldrb.w	sl, [r6]
    1eaa:	mov	r0, sl
    1eac:	bl	2cd8 <digitalRead>
    1eb0:	clz	r1, r0
    1eb4:	lsrs	r1, r1, #5
    1eb6:	mov	r0, sl
    1eb8:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ebc:	ldr.w	r3, [r8]
    1ec0:	str	r3, [sp, #216]	; 0xd8
      blinking = true;
      blinkingCounter = times;
    1ec2:	movw	r2, #999	; 0x3e7
	return ret;
    1ec6:	ldr	r3, [sp, #216]	; 0xd8
    1ec8:	str	r2, [r6, #20]
      lastBlink = millis();  
    1eca:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ecc:	strb	r7, [r6, #16]
    1ece:	ldr.w	r3, [r9, #36]	; 0x24
    1ed2:	ldr.w	r6, [r9, #32]
    1ed6:	ldr.w	r2, [r9, #40]	; 0x28
    1eda:	b.w	5be <loop+0xf6>
    1ede:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1ee0:	movs	r7, #1
    1ee2:	ldr	r0, [pc, #520]	; (20ec <loop+0x1c24>)
    1ee4:	strb.w	r7, [lr]
    1ee8:	bl	26bc <usb_serial_write>
    1eec:	ldr	r0, [pc, #504]	; (20e8 <loop+0x1c20>)
    1eee:	bl	4230 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1ef2:	ldr.w	r5, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1ef6:	ldrb.w	sl, [r5]
    1efa:	mov	r0, sl
    1efc:	bl	2cd8 <digitalRead>
    1f00:	clz	r1, r0
    1f04:	lsrs	r1, r1, #5
    1f06:	mov	r0, sl
    1f08:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f0c:	ldr.w	r3, [r8]
    1f10:	str	r3, [sp, #240]	; 0xf0
      blinking = true;
      blinkingCounter = times;
    1f12:	movw	r2, #999	; 0x3e7
	return ret;
    1f16:	ldr	r3, [sp, #240]	; 0xf0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1f18:	strb	r7, [r5, #16]
      blinkingCounter = times;
    1f1a:	str	r2, [r5, #20]
      lastBlink = millis();  
    1f1c:	str	r3, [r5, #8]
    1f1e:	ldr.w	r7, [r9, #32]
    1f22:	ldr.w	r3, [r9, #36]	; 0x24
    1f26:	ldr.w	r2, [r9, #40]	; 0x28
    1f2a:	b.w	6ba <loop+0x1f2>
    1f2e:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1f30:	movs	r7, #1
    1f32:	ldr	r0, [pc, #440]	; (20ec <loop+0x1c24>)
    1f34:	strb.w	r7, [lr]
    1f38:	bl	26bc <usb_serial_write>
    1f3c:	ldr	r0, [pc, #424]	; (20e8 <loop+0x1c20>)
    1f3e:	bl	4230 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1f42:	ldr.w	r5, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1f46:	ldrb.w	sl, [r5]
    1f4a:	mov	r0, sl
    1f4c:	bl	2cd8 <digitalRead>
    1f50:	clz	r1, r0
    1f54:	lsrs	r1, r1, #5
    1f56:	mov	r0, sl
    1f58:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f5c:	ldr.w	r3, [r8]
    1f60:	str	r3, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
    1f62:	movw	r2, #999	; 0x3e7
	return ret;
    1f66:	ldr	r3, [sp, #204]	; 0xcc
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1f68:	strb	r7, [r5, #16]
      blinkingCounter = times;
    1f6a:	str	r2, [r5, #20]
      lastBlink = millis();  
    1f6c:	str	r3, [r5, #8]
    1f6e:	ldr.w	r7, [r9, #32]
    1f72:	ldr.w	r3, [r9, #36]	; 0x24
    1f76:	ldr.w	r2, [r9, #40]	; 0x28
    1f7a:	b.w	540 <loop+0x78>
    1f7e:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1f80:	movs	r6, #1
    1f82:	ldr	r0, [pc, #360]	; (20ec <loop+0x1c24>)
    1f84:	strb.w	r6, [lr]
    1f88:	bl	26bc <usb_serial_write>
    1f8c:	ldr	r0, [pc, #344]	; (20e8 <loop+0x1c20>)
    1f8e:	bl	4230 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1f92:	ldr.w	r5, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1f96:	ldrb.w	sl, [r5]
    1f9a:	mov	r0, sl
    1f9c:	bl	2cd8 <digitalRead>
    1fa0:	clz	r1, r0
    1fa4:	lsrs	r1, r1, #5
    1fa6:	mov	r0, sl
    1fa8:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1fac:	ldr.w	r3, [r8]
    1fb0:	str	r3, [sp, #228]	; 0xe4
      blinking = true;
      blinkingCounter = times;
    1fb2:	movw	r2, #999	; 0x3e7
	return ret;
    1fb6:	ldr	r3, [sp, #228]	; 0xe4
    1fb8:	str	r2, [r5, #20]
      lastBlink = millis();  
    1fba:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1fbc:	strb	r6, [r5, #16]
    1fbe:	ldr.w	r3, [r9, #36]	; 0x24
    1fc2:	ldr.w	r5, [r9, #32]
    1fc6:	ldr.w	r2, [r9, #40]	; 0x28
    1fca:	b.w	63c <loop+0x174>
    1fce:	movs	r1, #5
    1fd0:	ldr	r0, [pc, #284]	; (20f0 <loop+0x1c28>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1fd2:	strb.w	r7, [lr]
    1fd6:	bl	26bc <usb_serial_write>
    1fda:	ldr	r0, [pc, #268]	; (20e8 <loop+0x1c20>)
    1fdc:	bl	4230 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1fe0:	ldr.w	r6, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1fe4:	ldrb.w	fp, [r6]
    1fe8:	mov	r0, fp
    1fea:	bl	2cd8 <digitalRead>
    1fee:	clz	r1, r0
    1ff2:	lsrs	r1, r1, #5
    1ff4:	mov	r0, fp
    1ff6:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ffa:	ldr.w	r3, [r8]
    1ffe:	str	r3, [sp, #256]	; 0x100
        m_leds[4]->on();
    2000:	ldr.w	r3, [sl, #36]	; 0x24
	return ret;
    2004:	ldr	r1, [sp, #256]	; 0x100
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    2006:	str	r1, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    2008:	movs	r2, #1
      blinkingCounter = times;
    200a:	str	r7, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    200c:	strb	r2, [r6, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    200e:	mov	r1, r2
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    2010:	strb	r7, [r3, #16]
      m_state = 1;
    2012:	str	r2, [r3, #4]
      digitalWrite(m_pin, m_state);
    2014:	ldrb	r0, [r3, #0]
    2016:	bl	2ccc <digitalWrite>
    201a:	ldr.w	r3, [r9, #36]	; 0x24
    201e:	ldr.w	r7, [r9, #32]
    2022:	ldr.w	r2, [r9, #40]	; 0x28
    2026:	b.w	738 <loop+0x270>
    202a:	movs	r1, #5
    202c:	ldr	r0, [pc, #192]	; (20f0 <loop+0x1c28>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    202e:	strb.w	r5, [lr]
    2032:	bl	26bc <usb_serial_write>
    2036:	ldr	r0, [pc, #176]	; (20e8 <loop+0x1c20>)
    2038:	bl	4230 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    203c:	ldr.w	r7, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    2040:	ldrb.w	fp, [r7]
    2044:	mov	r0, fp
    2046:	bl	2cd8 <digitalRead>
    204a:	clz	r1, r0
    204e:	lsrs	r1, r1, #5
    2050:	mov	r0, fp
    2052:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2056:	ldr.w	r3, [r8]
    205a:	str	r3, [sp, #268]	; 0x10c
        m_leds[4]->on();
    205c:	ldr.w	r3, [sl, #36]	; 0x24
	return ret;
    2060:	ldr	r1, [sp, #268]	; 0x10c
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    2062:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    2064:	movs	r2, #1
      blinkingCounter = times;
    2066:	str	r5, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    2068:	strb	r2, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    206a:	mov	r1, r2
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    206c:	strb	r5, [r3, #16]
      m_state = 1;
    206e:	str	r2, [r3, #4]
      digitalWrite(m_pin, m_state);
    2070:	ldrb	r0, [r3, #0]
    2072:	bl	2ccc <digitalWrite>
    2076:	ldr.w	r3, [r9, #36]	; 0x24
    207a:	ldr.w	r5, [r9, #32]
    207e:	ldr.w	r2, [r9, #40]	; 0x28
    2082:	b.w	7da <loop+0x312>
    2086:	movs	r1, #5
    2088:	ldr	r0, [pc, #100]	; (20f0 <loop+0x1c28>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    208a:	strb.w	r7, [lr]
    208e:	bl	26bc <usb_serial_write>
    2092:	ldr	r0, [pc, #84]	; (20e8 <loop+0x1c20>)
    2094:	bl	4230 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    2098:	ldr.w	r5, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    209c:	ldrb.w	fp, [r5]
    20a0:	mov	r0, fp
    20a2:	bl	2cd8 <digitalRead>
    20a6:	clz	r1, r0
    20aa:	lsrs	r1, r1, #5
    20ac:	mov	r0, fp
    20ae:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20b2:	ldr.w	r3, [r8]
    20b6:	str	r3, [sp, #208]	; 0xd0
        m_leds[4]->on();
    20b8:	ldr.w	r3, [sl, #36]	; 0x24
	return ret;
    20bc:	ldr	r1, [sp, #208]	; 0xd0
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    20be:	str	r1, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    20c0:	movs	r2, #1
      blinkingCounter = times;
    20c2:	str	r7, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    20c4:	strb	r2, [r5, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    20c6:	mov	r1, r2
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    20c8:	strb	r7, [r3, #16]
      m_state = 1;
    20ca:	str	r2, [r3, #4]
      digitalWrite(m_pin, m_state);
    20cc:	ldrb	r0, [r3, #0]
    20ce:	bl	2ccc <digitalWrite>
    20d2:	ldr.w	r3, [r9, #36]	; 0x24
    20d6:	ldr.w	r7, [r9, #32]
    20da:	ldr.w	r2, [r9, #40]	; 0x28
    20de:	b.w	540 <loop+0x78>
    20e2:	nop
    20e4:	.word	0x00005660
    20e8:	.word	0x1fff0c70
    20ec:	.word	0x00005690
    20f0:	.word	0x000056a8
    20f4:	movs	r1, #5
    20f6:	ldr	r0, [pc, #524]	; (2304 <loop+0x1e3c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    20f8:	strb.w	r5, [lr]
    20fc:	bl	26bc <usb_serial_write>
    2100:	ldr	r0, [pc, #516]	; (2308 <loop+0x1e40>)
    2102:	bl	4230 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    2106:	ldr.w	r6, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    210a:	ldrb.w	fp, [r6]
    210e:	mov	r0, fp
    2110:	bl	2cd8 <digitalRead>
    2114:	clz	r1, r0
    2118:	lsrs	r1, r1, #5
    211a:	mov	r0, fp
    211c:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2120:	ldr.w	r3, [r8]
    2124:	str	r3, [sp, #232]	; 0xe8
        m_leds[4]->on();
    2126:	ldr.w	r3, [sl, #36]	; 0x24
	return ret;
    212a:	ldr	r1, [sp, #232]	; 0xe8
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    212c:	str	r1, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    212e:	movs	r2, #1
      blinkingCounter = times;
    2130:	str	r5, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    2132:	strb	r2, [r6, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    2134:	mov	r1, r2
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    2136:	strb	r5, [r3, #16]
      m_state = 1;
    2138:	str	r2, [r3, #4]
      digitalWrite(m_pin, m_state);
    213a:	ldrb	r0, [r3, #0]
    213c:	bl	2ccc <digitalWrite>
    2140:	ldr.w	r3, [r9, #36]	; 0x24
    2144:	ldr.w	r5, [r9, #32]
    2148:	ldr.w	r2, [r9, #40]	; 0x28
    214c:	b.w	63c <loop+0x174>
    2150:	movs	r1, #5
    2152:	ldr	r0, [pc, #432]	; (2304 <loop+0x1e3c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    2154:	strb.w	r7, [lr]
    2158:	bl	26bc <usb_serial_write>
    215c:	ldr	r0, [pc, #424]	; (2308 <loop+0x1e40>)
    215e:	bl	4230 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    2162:	ldr.w	r5, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    2166:	ldrb.w	fp, [r5]
    216a:	mov	r0, fp
    216c:	bl	2cd8 <digitalRead>
    2170:	clz	r1, r0
    2174:	lsrs	r1, r1, #5
    2176:	mov	r0, fp
    2178:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    217c:	ldr.w	r3, [r8]
    2180:	str	r3, [sp, #244]	; 0xf4
        m_leds[4]->on();
    2182:	ldr.w	r3, [sl, #36]	; 0x24
	return ret;
    2186:	ldr	r1, [sp, #244]	; 0xf4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    2188:	str	r1, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    218a:	movs	r2, #1
      blinkingCounter = times;
    218c:	str	r7, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    218e:	strb	r2, [r5, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    2190:	mov	r1, r2
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    2192:	strb	r7, [r3, #16]
      m_state = 1;
    2194:	str	r2, [r3, #4]
      digitalWrite(m_pin, m_state);
    2196:	ldrb	r0, [r3, #0]
    2198:	bl	2ccc <digitalWrite>
    219c:	ldr.w	r3, [r9, #36]	; 0x24
    21a0:	ldr.w	r7, [r9, #32]
    21a4:	ldr.w	r2, [r9, #40]	; 0x28
    21a8:	b.w	6ba <loop+0x1f2>
    21ac:	movs	r1, #5
    21ae:	ldr	r0, [pc, #340]	; (2304 <loop+0x1e3c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    21b0:	strb.w	r6, [lr]
    21b4:	bl	26bc <usb_serial_write>
    21b8:	ldr	r0, [pc, #332]	; (2308 <loop+0x1e40>)
    21ba:	bl	4230 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    21be:	ldr.w	r7, [sl, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    21c2:	ldrb.w	fp, [r7]
    21c6:	mov	r0, fp
    21c8:	bl	2cd8 <digitalRead>
    21cc:	clz	r1, r0
    21d0:	lsrs	r1, r1, #5
    21d2:	mov	r0, fp
    21d4:	bl	2ccc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21d8:	ldr.w	r3, [r8]
    21dc:	str	r3, [sp, #220]	; 0xdc
        m_leds[4]->on();
    21de:	ldr.w	r3, [sl, #36]	; 0x24
	return ret;
    21e2:	ldr	r1, [sp, #220]	; 0xdc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    21e4:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    21e6:	movs	r2, #1
      blinkingCounter = times;
    21e8:	str	r6, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    21ea:	strb	r2, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    21ec:	mov	r1, r2
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    21ee:	strb	r6, [r3, #16]
      m_state = 1;
    21f0:	str	r2, [r3, #4]
      digitalWrite(m_pin, m_state);
    21f2:	ldrb	r0, [r3, #0]
    21f4:	bl	2ccc <digitalWrite>
    21f8:	ldr.w	r3, [r9, #36]	; 0x24
    21fc:	ldr.w	r6, [r9, #32]
    2200:	ldr.w	r2, [r9, #40]	; 0x28
    2204:	b.w	5be <loop+0xf6>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2208:	movs	r3, #2
    220a:	movs	r1, #10
    220c:	ldr	r0, [pc, #252]	; (230c <loop+0x1e44>)
    220e:	strb.w	r3, [lr]
    2212:	bl	26bc <usb_serial_write>
    2216:	ldr	r0, [pc, #240]	; (2308 <loop+0x1e40>)
    2218:	bl	4230 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    221c:	mov	r1, r6
    221e:	ldr.w	r0, [sl, #36]	; 0x24
    2222:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    2226:	ldr.w	r3, [sl, #36]	; 0x24
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    222a:	mov	r1, r6
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    222c:	strb	r6, [r3, #16]
      m_state = 0;
    222e:	str	r6, [r3, #4]
    2230:	b.n	21f2 <loop+0x1d2a>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2232:	movs	r3, #2
    2234:	movs	r1, #10
    2236:	ldr	r0, [pc, #212]	; (230c <loop+0x1e44>)
    2238:	strb.w	r3, [lr]
    223c:	bl	26bc <usb_serial_write>
    2240:	ldr	r0, [pc, #196]	; (2308 <loop+0x1e40>)
    2242:	bl	4230 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    2246:	mov	r1, r7
    2248:	ldr.w	r0, [sl, #36]	; 0x24
    224c:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    2250:	ldr.w	r3, [sl, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    2254:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2256:	strb	r7, [r3, #16]
      m_state = 0;
    2258:	str	r7, [r3, #4]
    225a:	b.n	2196 <loop+0x1cce>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    225c:	movs	r3, #2
    225e:	movs	r1, #10
    2260:	ldr	r0, [pc, #168]	; (230c <loop+0x1e44>)
    2262:	strb.w	r3, [lr]
    2266:	bl	26bc <usb_serial_write>
    226a:	ldr	r0, [pc, #156]	; (2308 <loop+0x1e40>)
    226c:	bl	4230 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    2270:	mov	r1, r7
    2272:	ldr.w	r0, [sl, #36]	; 0x24
    2276:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    227a:	ldr.w	r3, [sl, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    227e:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2280:	strb	r7, [r3, #16]
      m_state = 0;
    2282:	str	r7, [r3, #4]
    2284:	b.n	2014 <loop+0x1b4c>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2286:	movs	r3, #2
    2288:	movs	r1, #10
    228a:	ldr	r0, [pc, #128]	; (230c <loop+0x1e44>)
    228c:	strb.w	r3, [lr]
    2290:	bl	26bc <usb_serial_write>
    2294:	ldr	r0, [pc, #112]	; (2308 <loop+0x1e40>)
    2296:	bl	4230 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    229a:	mov	r1, r5
    229c:	ldr.w	r0, [sl, #36]	; 0x24
    22a0:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    22a4:	ldr.w	r3, [sl, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    22a8:	mov	r1, r5
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    22aa:	strb	r5, [r3, #16]
      m_state = 0;
    22ac:	str	r5, [r3, #4]
    22ae:	b.n	2070 <loop+0x1ba8>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    22b0:	movs	r3, #2
    22b2:	movs	r1, #10
    22b4:	ldr	r0, [pc, #84]	; (230c <loop+0x1e44>)
    22b6:	strb.w	r3, [lr]
    22ba:	bl	26bc <usb_serial_write>
    22be:	ldr	r0, [pc, #72]	; (2308 <loop+0x1e40>)
    22c0:	bl	4230 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    22c4:	mov	r1, r7
    22c6:	ldr.w	r0, [sl, #36]	; 0x24
    22ca:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    22ce:	ldr.w	r3, [sl, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    22d2:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    22d4:	strb	r7, [r3, #16]
      m_state = 0;
    22d6:	str	r7, [r3, #4]
    22d8:	b.n	20cc <loop+0x1c04>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    22da:	movs	r3, #2
    22dc:	movs	r1, #10
    22de:	ldr	r0, [pc, #44]	; (230c <loop+0x1e44>)
    22e0:	strb.w	r3, [lr]
    22e4:	bl	26bc <usb_serial_write>
    22e8:	ldr	r0, [pc, #28]	; (2308 <loop+0x1e40>)
    22ea:	bl	4230 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    22ee:	mov	r1, r5
    22f0:	ldr.w	r0, [sl, #36]	; 0x24
    22f4:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    22f8:	ldr.w	r3, [sl, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    22fc:	mov	r1, r5
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    22fe:	strb	r5, [r3, #16]
      m_state = 0;
    2300:	str	r5, [r3, #4]
    2302:	b.n	213a <loop+0x1c72>
    2304:	.word	0x000056a8
    2308:	.word	0x1fff0c70
    230c:	.word	0x0000569c

00002310 <_GLOBAL__sub_I_currentMode>:
    2310:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "definitions.h"
#include "controller.h"
#include "transport.h"
#include "step.h"

Led led1(3, LOW);
    2314:	movs	r2, #0
    2316:	movs	r1, #3
    2318:	ldr	r0, [pc, #612]	; (2580 <_GLOBAL__sub_I_currentMode+0x270>)
    Modes m_mode;
    boolean m_reverse;
    boolean m_shiftMode;
    int m_page = 1;

    Sequence (Step* steps[4], Led* leds[6]) {
    231a:	ldr	r5, [pc, #616]	; (2584 <_GLOBAL__sub_I_currentMode+0x274>)
    231c:	ldr	r7, [pc, #616]	; (2588 <_GLOBAL__sub_I_currentMode+0x278>)
    231e:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    2322:	movs	r2, #0
    2324:	movs	r1, #5
    2326:	ldr	r0, [pc, #612]	; (258c <_GLOBAL__sub_I_currentMode+0x27c>)
    2328:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    232c:	movs	r2, #0
    232e:	movs	r1, #7
    2330:	ldr	r0, [pc, #604]	; (2590 <_GLOBAL__sub_I_currentMode+0x280>)
    2332:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    2336:	movs	r2, #0
    2338:	movs	r1, #9
    233a:	ldr	r0, [pc, #600]	; (2594 <_GLOBAL__sub_I_currentMode+0x284>)
    233c:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    2340:	movs	r2, #0
    2342:	movs	r1, #11
    2344:	ldr	r0, [pc, #592]	; (2598 <_GLOBAL__sub_I_currentMode+0x288>)
    2346:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    234a:	movs	r2, #0
    234c:	movs	r1, #24
    234e:	ldr	r0, [pc, #588]	; (259c <_GLOBAL__sub_I_currentMode+0x28c>)
    2350:	bl	46c <Led::Led(int, int)>
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2354:	ldr	r2, [pc, #584]	; (25a0 <_GLOBAL__sub_I_currentMode+0x290>)
    2356:	ldr	r3, [pc, #588]	; (25a4 <_GLOBAL__sub_I_currentMode+0x294>)
    2358:	ldr.w	lr, [pc, #656]	; 25ec <_GLOBAL__sub_I_currentMode+0x2dc>
    235c:	str.w	lr, [r2]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2360:	movs	r0, #100	; 0x64
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    2362:	movs	r6, #0
      m_controller = controller;
      m_pitch = 38;
    2364:	movs	r4, #38	; 0x26
      m_velocity = 100;
      m_length = 4;
    2366:	movs	r1, #4

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2368:	str	r0, [r2, #12]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    236a:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    236c:	str	r4, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    236e:	str	r1, [r2, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2370:	ldr	r2, [pc, #564]	; (25a8 <_GLOBAL__sub_I_currentMode+0x298>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2372:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2374:	str.w	lr, [r3]
      m_state = false;
    2378:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    237a:	str	r4, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    237c:	str	r1, [r3, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    237e:	ldr	r3, [pc, #556]	; (25ac <_GLOBAL__sub_I_currentMode+0x29c>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2380:	str	r0, [r2, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2382:	str.w	lr, [r2]
      m_state = false;
    2386:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    2388:	str	r4, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    238a:	str	r1, [r2, #16]
    238c:	movs	r2, #1

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    238e:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2390:	str.w	lr, [r3]
      m_state = false;
    2394:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    2396:	str	r4, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    2398:	str	r1, [r3, #16]
    239a:	str	r2, [r5, #48]	; 0x30
    239c:	add.w	r3, r5, #16
    23a0:	add.w	r0, r5, #40	; 0x28
    23a4:	mov	r2, r7
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
    23a6:	ldr.w	r1, [r2], #4
    23aa:	str.w	r1, [r3, #4]!
    boolean m_reverse;
    boolean m_shiftMode;
    int m_page = 1;

    Sequence (Step* steps[4], Led* leds[6]) {
      for (int i = 0; i < 6; i++) {
    23ae:	cmp	r0, r3
    23b0:	bne.n	23a6 <_GLOBAL__sub_I_currentMode+0x96>
      
      m_currentStep = 0;
      m_mode = PITCH;
      m_reverse = false;
      
      m_leds[4]->toggle();
    23b2:	ldr	r4, [r5, #36]	; 0x24
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    23b4:	ldr	r2, [pc, #504]	; (25b0 <_GLOBAL__sub_I_currentMode+0x2a0>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    23b6:	ldr	r3, [r4, #4]
    23b8:	ldr	r1, [r2, #0]
    23ba:	ldr	r0, [r2, #4]
    23bc:	ldr	r6, [r2, #12]
    23be:	str	r1, [r5, #4]
    23c0:	clz	r3, r3
    23c4:	lsrs	r3, r3, #5
    23c6:	ldr	r1, [r2, #8]
    23c8:	str	r0, [r5, #8]
      };
      
      m_currentStep = 0;
    23ca:	movs	r2, #0
      m_mode = PITCH;
    23cc:	strb.w	r2, [r5, #44]	; 0x2c
      m_reverse = false;
    23d0:	strb.w	r2, [r5, #45]	; 0x2d
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    23d4:	str	r1, [r5, #12]
    23d6:	str	r6, [r5, #16]
    23d8:	movs	r1, #8
    23da:	str	r3, [r4, #4]
    23dc:	ldr	r0, [pc, #468]	; (25b4 <_GLOBAL__sub_I_currentMode+0x2a4>)
      };
      
      m_currentStep = 0;
    23de:	str	r2, [r5, #0]
    23e0:	bl	26bc <usb_serial_write>
    23e4:	ldr	r0, [pc, #464]	; (25b8 <_GLOBAL__sub_I_currentMode+0x2a8>)
    23e6:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    23ea:	ldrb	r1, [r4, #4]
    23ec:	ldrb	r0, [r4, #0]
    23ee:	bl	2ccc <digitalWrite>

      if (blinking) {
    23f2:	ldrb	r3, [r4, #16]
    23f4:	cbz	r3, 2404 <_GLOBAL__sub_I_currentMode+0xf4>
        digitalWrite(m_pin, !m_state);
    23f6:	ldr	r1, [r4, #4]
    23f8:	ldrb	r0, [r4, #0]
    23fa:	clz	r1, r1
    23fe:	lsrs	r1, r1, #5
    2400:	bl	2ccc <digitalWrite>
      m_mode = PITCH;
      m_reverse = false;
      
      m_leds[4]->toggle();
      m_leds[5]->toggle();
    2404:	ldr	r4, [r5, #40]	; 0x28
    2406:	ldr	r0, [pc, #428]	; (25b4 <_GLOBAL__sub_I_currentMode+0x2a4>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    2408:	ldr	r3, [r4, #4]
    240a:	clz	r3, r3
    240e:	lsrs	r3, r3, #5
    2410:	str	r3, [r4, #4]
    2412:	movs	r1, #8
    2414:	bl	26bc <usb_serial_write>
    2418:	ldr	r0, [pc, #412]	; (25b8 <_GLOBAL__sub_I_currentMode+0x2a8>)
    241a:	bl	4230 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    241e:	ldrb	r1, [r4, #4]
    2420:	ldrb	r0, [r4, #0]
    2422:	bl	2ccc <digitalWrite>

      if (blinking) {
    2426:	ldrb	r3, [r4, #16]
    2428:	cbz	r3, 2438 <_GLOBAL__sub_I_currentMode+0x128>
        digitalWrite(m_pin, !m_state);
    242a:	ldr	r1, [r4, #4]
    242c:	ldrb	r0, [r4, #0]
    242e:	clz	r1, r1
    2432:	lsrs	r1, r1, #5
    2434:	bl	2ccc <digitalWrite>
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    2438:	ldr	r6, [pc, #384]	; (25bc <_GLOBAL__sub_I_currentMode+0x2ac>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    243a:	ldr	r2, [pc, #388]	; (25c0 <_GLOBAL__sub_I_currentMode+0x2b0>)
    243c:	str	r5, [r6, #12]
    243e:	movs	r4, #0
      m_id = id;
      m_pin = pin;
    2440:	mov.w	r9, #2
    2444:	movs	r3, #24
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2446:	mov.w	sl, #1
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    244a:	mov	r1, r4
    244c:	mov	r0, r9
    244e:	str	r3, [r6, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2450:	ldr	r3, [r7, #0]
    2452:	strb.w	r4, [r2, #48]	; 0x30
      m_id = id;
      m_pin = pin;
    2456:	mov.w	r8, #4
      m_shiftButton = shiftButton;
    245a:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    245c:	strb	r4, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    245e:	str	r3, [r2, #24]
    2460:	str	r4, [r6, #8]
      m_state = false;
    2462:	strb	r4, [r6, #0]
    2464:	str	r5, [r2, #28]
      m_id = id;
    2466:	str.w	sl, [r2]
      m_pin = pin;
    246a:	str.w	r9, [r2, #56]	; 0x38
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    246e:	bl	2cf4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2472:	ldr	r2, [pc, #336]	; (25c4 <_GLOBAL__sub_I_currentMode+0x2b4>)
    2474:	ldr	r3, [r7, #4]
    2476:	strb.w	r4, [r2, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    247a:	mov	r1, r4
    247c:	mov	r0, r8
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    247e:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    2480:	strb	r4, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2482:	str	r3, [r2, #24]
    2484:	str	r5, [r2, #28]
      m_id = id;
    2486:	str.w	r9, [r2]
      m_pin = pin;
    248a:	str.w	r8, [r2, #56]	; 0x38
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    248e:	bl	2cf4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2492:	ldr	r3, [pc, #308]	; (25c8 <_GLOBAL__sub_I_currentMode+0x2b8>)
    2494:	ldr	r2, [r7, #8]
    2496:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    249a:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    249c:	mov.w	fp, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    24a0:	movs	r0, #6
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    24a2:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    24a4:	strb	r4, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24a6:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    24a8:	str	r0, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24aa:	str	r5, [r3, #28]
      m_id = id;
    24ac:	str.w	fp, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    24b0:	bl	2cf4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24b4:	ldr	r3, [pc, #276]	; (25cc <_GLOBAL__sub_I_currentMode+0x2bc>)
    24b6:	ldr	r0, [r7, #12]
    24b8:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    24ba:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    24bc:	mov	r1, r4
    24be:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24c0:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    24c4:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    24c6:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    24c8:	str	r2, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24ca:	str	r5, [r3, #28]
      m_id = id;
    24cc:	str.w	r8, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    24d0:	bl	2cf4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24d4:	ldr	r3, [pc, #248]	; (25d0 <_GLOBAL__sub_I_currentMode+0x2c0>)
    24d6:	ldr	r0, [r7, #16]
    24d8:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    24da:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    24dc:	movs	r0, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    24de:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    24e0:	str	r0, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    24e2:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24e4:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    24e8:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    24ea:	str	r2, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24ec:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    24ee:	strb.w	sl, [r3, #16]
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    24f2:	bl	2cf4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24f6:	ldr	r3, [pc, #220]	; (25d4 <_GLOBAL__sub_I_currentMode+0x2c4>)
    24f8:	ldr	r7, [r7, #20]
    24fa:	str	r7, [r3, #24]
      m_id = id;
    24fc:	movs	r2, #6
    24fe:	str	r2, [r3, #0]
      m_pin = pin;
    2500:	movs	r2, #12
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2502:	ldr	r7, [pc, #212]	; (25d8 <_GLOBAL__sub_I_currentMode+0x2c8>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2504:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2508:	mov	r0, r2
    250a:	mov	r1, r4
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    250c:	strb	r4, [r3, #16]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    250e:	str	r2, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2510:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    2512:	strb.w	sl, [r3, #17]

      pinMode(pin, INPUT);
    2516:	bl	2cf4 <pinMode>
    251a:	ldr	r0, [pc, #192]	; (25dc <_GLOBAL__sub_I_currentMode+0x2cc>)
    251c:	ldr	r1, [pc, #192]	; (25e0 <_GLOBAL__sub_I_currentMode+0x2d0>)
    251e:	ldr	r2, [pc, #196]	; (25e4 <_GLOBAL__sub_I_currentMode+0x2d4>)
    2520:	ldr	r3, [pc, #196]	; (25e8 <_GLOBAL__sub_I_currentMode+0x2d8>)
      m_pin = pin;
      m_knobType = knobType;
    2522:	strb	r4, [r7, #24]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2524:	mov.w	ip, #14
      m_knobType = knobType;
      m_id = id;
    2528:	str	r4, [r7, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    252a:	strb.w	ip, [r7]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    252e:	str	r6, [r7, #20]
    2530:	str	r5, [r7, #16]
      m_pin = pin;
    2532:	mov.w	lr, #15
    2536:	mov.w	ip, #16
    253a:	movs	r7, #17
    253c:	movs	r4, #18
    253e:	strb.w	lr, [r0]
    2542:	strb.w	ip, [r1]
    2546:	strb	r7, [r2, #0]
    2548:	strb	r4, [r3, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    254a:	str	r6, [r0, #20]
    254c:	str	r5, [r0, #16]
      m_pin = pin;
      m_knobType = knobType;
    254e:	strb.w	sl, [r0, #24]
      m_id = id;
    2552:	str.w	sl, [r0, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2556:	str	r6, [r1, #20]
    2558:	str	r5, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    255a:	strb.w	r9, [r1, #24]
      m_id = id;
    255e:	str.w	r9, [r1, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2562:	str	r6, [r2, #20]
    2564:	str	r5, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    2566:	strb.w	fp, [r2, #24]
      m_id = id;
    256a:	str.w	fp, [r2, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    256e:	str	r6, [r3, #20]
    2570:	str	r5, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    2572:	strb.w	r8, [r3, #24]
      m_id = id;
    2576:	str.w	r8, [r3, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    257a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    257e:	nop
    2580:	.word	0x1fff1898
    2584:	.word	0x1fff1774
    2588:	.word	0x1fff0c50
    258c:	.word	0x1fff18b0
    2590:	.word	0x1fff18c8
    2594:	.word	0x1fff18e0
    2598:	.word	0x1fff15d8
    259c:	.word	0x1fff15f0
    25a0:	.word	0x1fff17a8
    25a4:	.word	0x1fff17bc
    25a8:	.word	0x1fff17d0
    25ac:	.word	0x1fff17e4
    25b0:	.word	0x1fff0c40
    25b4:	.word	0x00005660
    25b8:	.word	0x1fff0c70
    25bc:	.word	0x1fff1884
    25c0:	.word	0x1fff160c
    25c4:	.word	0x1fff1648
    25c8:	.word	0x1fff1684
    25cc:	.word	0x1fff16c0
    25d0:	.word	0x1fff16fc
    25d4:	.word	0x1fff1738
    25d8:	.word	0x1fff17f8
    25dc:	.word	0x1fff1814
    25e0:	.word	0x1fff1830
    25e4:	.word	0x1fff184c
    25e8:	.word	0x1fff1868
    25ec:	.word	0x1fff1608

000025f0 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    25f0:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    25f2:	ldr	r5, [pc, #60]	; (2630 <usb_serial_getchar+0x40>)
    25f4:	ldr	r0, [r5, #0]
    25f6:	cbz	r0, 2618 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    25f8:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    25fa:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    25fc:	adds	r1, r0, r3
    25fe:	adds	r3, #1
	if (i >= rx_packet->len) {
    2600:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    2602:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    2604:	bcs.n	260c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    2606:	strh	r3, [r0, #2]
	}
	return c;
    2608:	mov	r0, r4
}
    260a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    260c:	bl	349c <usb_free>
		rx_packet = NULL;
    2610:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    2612:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    2614:	str	r3, [r5, #0]
    2616:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2618:	ldr	r3, [pc, #24]	; (2634 <usb_serial_getchar+0x44>)
    261a:	ldrb	r3, [r3, #0]
    261c:	cbz	r3, 262a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    261e:	movs	r0, #2
    2620:	bl	34e8 <usb_rx>
    2624:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    2626:	cmp	r0, #0
    2628:	bne.n	25f8 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    262a:	mov.w	r0, #4294967295
    262e:	pop	{r3, r4, r5, pc}
    2630:	.word	0x1fff1904
    2634:	.word	0x1fff1a64

00002638 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    2638:	push	{r4, lr}
	if (!rx_packet) {
    263a:	ldr	r4, [pc, #36]	; (2660 <usb_serial_peekchar+0x28>)
    263c:	ldr	r0, [r4, #0]
    263e:	cbz	r0, 2648 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    2640:	ldrh	r3, [r0, #2]
    2642:	add	r0, r3
    2644:	ldrb	r0, [r0, #8]
}
    2646:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2648:	ldr	r3, [pc, #24]	; (2664 <usb_serial_peekchar+0x2c>)
    264a:	ldrb	r3, [r3, #0]
    264c:	cbz	r3, 265a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    264e:	movs	r0, #2
    2650:	bl	34e8 <usb_rx>
    2654:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    2656:	cmp	r0, #0
    2658:	bne.n	2640 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    265a:	mov.w	r0, #4294967295
    265e:	pop	{r4, pc}
    2660:	.word	0x1fff1904
    2664:	.word	0x1fff1a64

00002668 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2668:	ldr	r3, [pc, #16]	; (267c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    266a:	ldr	r2, [pc, #20]	; (2680 <usb_serial_available+0x18>)
    266c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    266e:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2670:	cbz	r3, 267a <usb_serial_available+0x12>
    2672:	ldrh	r2, [r3, #0]
    2674:	ldrh	r3, [r3, #2]
    2676:	subs	r3, r2, r3
    2678:	add	r0, r3
	return count;
}
    267a:	bx	lr
    267c:	.word	0x1fff1904
    2680:	.word	0x1fff1ef8

00002684 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    2684:	ldr	r3, [pc, #44]	; (26b4 <usb_serial_flush_input+0x30>)
    2686:	ldrb	r3, [r3, #0]
    2688:	cbz	r3, 26b2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    268a:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    268c:	ldr	r4, [pc, #40]	; (26b8 <usb_serial_flush_input+0x34>)
    268e:	ldr	r0, [r4, #0]
    2690:	cbz	r0, 26a6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    2692:	bl	349c <usb_free>
		rx_packet = NULL;
    2696:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2698:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    269a:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    269c:	bl	34e8 <usb_rx>
		if (!rx) break;
    26a0:	cbz	r0, 26b0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    26a2:	bl	349c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    26a6:	movs	r0, #2
    26a8:	bl	34e8 <usb_rx>
		if (!rx) break;
    26ac:	cmp	r0, #0
    26ae:	bne.n	26a2 <usb_serial_flush_input+0x1e>
    26b0:	pop	{r4, pc}
    26b2:	bx	lr
    26b4:	.word	0x1fff1a64
    26b8:	.word	0x1fff1904

000026bc <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    26bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    26c0:	ldr.w	r9, [pc, #248]	; 27bc <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    26c4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    26c6:	movs	r2, #1
    26c8:	strb.w	r2, [r9]
	while (size > 0) {
    26cc:	str	r1, [sp, #4]
    26ce:	cbz	r1, 272c <usb_serial_write+0x70>
    26d0:	ldr.w	r8, [pc, #236]	; 27c0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    26d4:	ldr	r7, [pc, #212]	; (27ac <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    26d6:	ldr	r6, [sp, #4]
    26d8:	mov	fp, r0
		if (!tx_packet) {
    26da:	ldr.w	r0, [r8]
    26de:	cbz	r0, 274e <usb_serial_write+0x92>
    26e0:	ldr	r5, [pc, #204]	; (27b0 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    26e2:	ldrh	r4, [r0, #2]
    26e4:	rsb	r1, r4, #64	; 0x40
    26e8:	cmp	r1, r6
    26ea:	it	cs
    26ec:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    26ee:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    26f2:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    26f4:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    26f8:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    26fa:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    26fc:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    2700:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    2704:	cbz	r1, 271c <usb_serial_write+0x60>
    2706:	subs	r4, #1
    2708:	add	r2, r4
    270a:	add	r1, fp
    270c:	ldrb.w	r4, [fp], #1
    2710:	strb.w	r4, [r2, #1]!
    2714:	cmp	fp, r1
    2716:	bne.n	270c <usb_serial_write+0x50>
    2718:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    271c:	cmp.w	lr, #63	; 0x3f
    2720:	bhi.n	273a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2722:	ldr	r2, [pc, #144]	; (27b4 <usb_serial_write+0xf8>)
    2724:	movs	r1, #5
    2726:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    2728:	cmp	r6, #0
    272a:	bne.n	26da <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    272c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    272e:	movs	r3, #0
    2730:	strb.w	r3, [r9]
	return ret;
}
    2734:	add	sp, #12
    2736:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    273a:	movs	r2, #64	; 0x40
    273c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    273e:	mov	r1, r0
    2740:	movs	r0, #3
    2742:	bl	3638 <usb_tx>
			tx_packet = NULL;
    2746:	movs	r2, #0
    2748:	str.w	r2, [r8]
    274c:	b.n	2722 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    274e:	ldrb	r2, [r7, #0]
    2750:	cbz	r2, 279c <usb_serial_write+0xe0>
    2752:	ldr	r4, [pc, #100]	; (27b8 <usb_serial_write+0xfc>)
    2754:	ldr	r5, [pc, #88]	; (27b0 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    2756:	mov.w	sl, #1
    275a:	b.n	276c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    275c:	subs	r4, #1
    275e:	beq.n	278e <usb_serial_write+0xd2>
    2760:	ldrb	r2, [r5, #0]
    2762:	cbnz	r2, 278e <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    2764:	bl	413c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2768:	ldrb	r2, [r7, #0]
    276a:	cbz	r2, 279c <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    276c:	movs	r0, #3
    276e:	bl	3524 <usb_tx_packet_count>
    2772:	cmp	r0, #7
    2774:	bhi.n	275c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    2776:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    277a:	bl	345c <usb_malloc>
    277e:	str.w	r0, [r8]
					if (tx_packet) break;
    2782:	cmp	r0, #0
    2784:	bne.n	26e2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    2786:	ldr	r3, [pc, #52]	; (27bc <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2788:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    278a:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    278c:	bne.n	2760 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    278e:	movs	r3, #1
					return -1;
    2790:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    2794:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    2796:	add	sp, #12
    2798:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    279c:	movs	r3, #0
					return -1;
    279e:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    27a2:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    27a6:	add	sp, #12
    27a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27ac:	.word	0x1fff1a64
    27b0:	.word	0x1fff1900
    27b4:	.word	0x1fff18f8
    27b8:	.word	0x00014821
    27bc:	.word	0x1fff18f9
    27c0:	.word	0x1fff18fc

000027c4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    27c4:	push	{lr}
    27c6:	sub	sp, #12
    27c8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    27ca:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    27cc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    27d0:	mov	r0, r3
    27d2:	bl	26bc <usb_serial_write>
}
    27d6:	add	sp, #12
    27d8:	ldr.w	pc, [sp], #4

000027dc <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    27dc:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    27de:	ldr	r5, [pc, #56]	; (2818 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    27e0:	ldr	r4, [pc, #56]	; (281c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    27e2:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    27e4:	movs	r3, #1
    27e6:	strb	r3, [r4, #0]
	if (!tx_packet) {
    27e8:	cbz	r0, 27f6 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    27ea:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    27ec:	movs	r3, #0
    27ee:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    27f0:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    27f4:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    27f6:	ldr	r3, [pc, #40]	; (2820 <usb_serial_write_buffer_free+0x44>)
    27f8:	ldrb	r3, [r3, #0]
    27fa:	cbnz	r3, 2802 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    27fc:	movs	r0, #0
    27fe:	strb	r0, [r4, #0]
			return 0;
    2800:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2802:	movs	r0, #3
    2804:	bl	3524 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    2808:	cmp	r0, #7
    280a:	bhi.n	27fc <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    280c:	bl	345c <usb_malloc>
    2810:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2812:	cmp	r0, #0
    2814:	bne.n	27ea <usb_serial_write_buffer_free+0xe>
    2816:	b.n	27fc <usb_serial_write_buffer_free+0x20>
    2818:	.word	0x1fff18fc
    281c:	.word	0x1fff18f9
    2820:	.word	0x1fff1a64

00002824 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    2824:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    2826:	ldr	r3, [pc, #68]	; (286c <usb_serial_flush_output+0x48>)
    2828:	ldrb	r3, [r3, #0]
    282a:	cbz	r3, 2850 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    282c:	ldr	r6, [pc, #64]	; (2870 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    282e:	ldr	r5, [pc, #68]	; (2874 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    2830:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2832:	movs	r7, #1
    2834:	strb	r7, [r5, #0]
	if (tx_packet) {
    2836:	cbz	r4, 2852 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    2838:	ldr	r2, [pc, #60]	; (2878 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    283a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    283c:	movs	r7, #0
    283e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2840:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    2842:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2844:	movs	r0, #3
    2846:	bl	3638 <usb_tx>
		tx_packet = NULL;
    284a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    284c:	movs	r3, #0
    284e:	strb	r3, [r5, #0]
    2850:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2852:	bl	345c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    2856:	ldr	r3, [pc, #32]	; (2878 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    2858:	cbz	r0, 2866 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    285a:	mov	r1, r0
    285c:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    285e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    2860:	bl	3638 <usb_tx>
    2864:	b.n	284c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2866:	strb	r7, [r3, #0]
    2868:	b.n	284c <usb_serial_flush_output+0x28>
    286a:	nop
    286c:	.word	0x1fff1a64
    2870:	.word	0x1fff18fc
    2874:	.word	0x1fff18f9
    2878:	.word	0x1fff18f8

0000287c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    287c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    287e:	ldr	r3, [pc, #56]	; (28b8 <usb_serial_flush_callback+0x3c>)
    2880:	ldrb	r3, [r3, #0]
    2882:	cbnz	r3, 28a2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2884:	ldr	r4, [pc, #52]	; (28bc <usb_serial_flush_callback+0x40>)
    2886:	ldr	r1, [r4, #0]
    2888:	cbz	r1, 28a4 <usb_serial_flush_callback+0x28>
    288a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    288e:	ldrh	r3, [r1, #2]
    2890:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2892:	movs	r0, #3
    2894:	bl	3638 <usb_tx>
		tx_packet = NULL;
    2898:	str	r5, [r4, #0]
    289a:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    289c:	ldr	r3, [pc, #32]	; (28c0 <usb_serial_flush_callback+0x44>)
    289e:	movs	r2, #1
    28a0:	strb	r2, [r3, #0]
    28a2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    28a4:	bl	345c <usb_malloc>
		if (tx) {
    28a8:	cmp	r0, #0
    28aa:	beq.n	289c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    28ac:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    28ae:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    28b2:	movs	r0, #3
    28b4:	b.w	3638 <usb_tx>
    28b8:	.word	0x1fff18f9
    28bc:	.word	0x1fff18fc
    28c0:	.word	0x1fff18f8

000028c4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    28c4:	ldr	r2, [pc, #220]	; (29a4 <wait_for_cal+0xe0>)
    28c6:	ldr	r1, [pc, #224]	; (29a8 <wait_for_cal+0xe4>)
    28c8:	ldr	r3, [r2, #0]
    28ca:	lsls	r3, r3, #24
    28cc:	bmi.n	28c8 <wait_for_cal+0x4>
    28ce:	ldr	r3, [r1, #0]
    28d0:	ands.w	r3, r3, #128	; 0x80
    28d4:	bne.n	28c8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    28d6:	cpsid	i
	if (calibrating) {
    28d8:	ldr	r1, [pc, #208]	; (29ac <wait_for_cal+0xe8>)
    28da:	ldrb	r2, [r1, #0]
    28dc:	cmp	r2, #0
    28de:	beq.n	29a0 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    28e0:	ldr	r2, [pc, #204]	; (29b0 <wait_for_cal+0xec>)
    28e2:	ldr	r0, [pc, #208]	; (29b4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    28e4:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    28e6:	ldr	r4, [pc, #208]	; (29b8 <wait_for_cal+0xf4>)
    28e8:	ldr	r7, [r2, #0]
    28ea:	ldr	r6, [r0, #0]
    28ec:	ldr	r5, [r4, #0]
    28ee:	ldr	r4, [r2, #12]
    28f0:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    28f2:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    28f4:	adds	r2, #20
    28f6:	ldr	r0, [r0, #0]
    28f8:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    28fa:	ldr	r7, [pc, #192]	; (29bc <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    28fc:	add	r5, r6
    28fe:	add	r4, r5
    2900:	add	r0, r4
    2902:	add	r2, r0
    2904:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2908:	ldr	r6, [pc, #180]	; (29c0 <wait_for_cal+0xfc>)
    290a:	ldr	r0, [pc, #184]	; (29c4 <wait_for_cal+0x100>)
    290c:	ldr	r5, [pc, #184]	; (29c8 <wait_for_cal+0x104>)
    290e:	ldr	r4, [pc, #188]	; (29cc <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2910:	orr.w	r2, r2, #32768	; 0x8000
    2914:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2916:	ldr	r7, [r6, #0]
    2918:	ldr	r6, [r0, #0]
    291a:	ldr	r5, [r5, #0]
    291c:	ldr	r2, [pc, #176]	; (29d0 <wait_for_cal+0x10c>)
    291e:	ldr	r4, [r4, #0]
    2920:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2922:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2924:	ldr	r0, [r0, #0]
    2926:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2928:	ldr	r7, [pc, #168]	; (29d4 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    292a:	add	r5, r6
    292c:	add	r4, r5
    292e:	add	r0, r4
    2930:	add	r2, r0
    2932:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2936:	ldr	r6, [pc, #160]	; (29d8 <wait_for_cal+0x114>)
    2938:	ldr	r0, [pc, #160]	; (29dc <wait_for_cal+0x118>)
    293a:	ldr	r5, [pc, #164]	; (29e0 <wait_for_cal+0x11c>)
    293c:	ldr	r4, [pc, #164]	; (29e4 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    293e:	orr.w	r2, r2, #32768	; 0x8000
    2942:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2944:	ldr	r7, [r6, #0]
    2946:	ldr	r6, [r0, #0]
    2948:	ldr	r5, [r5, #0]
    294a:	ldr	r2, [pc, #156]	; (29e8 <wait_for_cal+0x124>)
    294c:	ldr	r4, [r4, #0]
    294e:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2950:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2952:	ldr	r0, [r0, #0]
    2954:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2956:	ldr	r7, [pc, #148]	; (29ec <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    2958:	add	r5, r6
    295a:	add	r4, r5
    295c:	add	r0, r4
    295e:	add	r2, r0
    2960:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2964:	ldr	r6, [pc, #136]	; (29f0 <wait_for_cal+0x12c>)
    2966:	ldr	r0, [pc, #140]	; (29f4 <wait_for_cal+0x130>)
    2968:	ldr	r5, [pc, #140]	; (29f8 <wait_for_cal+0x134>)
    296a:	ldr	r4, [pc, #144]	; (29fc <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    296c:	orr.w	r2, r2, #32768	; 0x8000
    2970:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2972:	ldr	r7, [r6, #0]
    2974:	ldr	r6, [r0, #0]
    2976:	ldr	r5, [r5, #0]
    2978:	ldr	r2, [pc, #132]	; (2a00 <wait_for_cal+0x13c>)
    297a:	ldr	r4, [r4, #0]
    297c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    297e:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2980:	ldr	r0, [r0, #0]
    2982:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    2984:	add	r5, r6
    2986:	add	r4, r5
    2988:	add	r0, r4
    298a:	add	r2, r0
    298c:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    2990:	ldr	r0, [pc, #112]	; (2a04 <wait_for_cal+0x140>)
    2992:	orr.w	r2, r2, #32768	; 0x8000
    2996:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    2998:	strb	r3, [r1, #0]
	}
	__enable_irq();
    299a:	cpsie	i
}
    299c:	pop	{r4, r5, r6, r7}
    299e:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    29a0:	cpsie	i
    29a2:	bx	lr
    29a4:	.word	0x4003b024
    29a8:	.word	0x400bb024
    29ac:	.word	0x1fff190a
    29b0:	.word	0x4003b038
    29b4:	.word	0x4003b03c
    29b8:	.word	0x4003b040
    29bc:	.word	0x4003b02c
    29c0:	.word	0x4003b058
    29c4:	.word	0x4003b05c
    29c8:	.word	0x4003b060
    29cc:	.word	0x4003b064
    29d0:	.word	0x4003b06c
    29d4:	.word	0x4003b030
    29d8:	.word	0x400bb038
    29dc:	.word	0x400bb03c
    29e0:	.word	0x400bb040
    29e4:	.word	0x400bb044
    29e8:	.word	0x400bb04c
    29ec:	.word	0x400bb02c
    29f0:	.word	0x400bb058
    29f4:	.word	0x400bb05c
    29f8:	.word	0x400bb060
    29fc:	.word	0x400bb064
    2a00:	.word	0x400bb06c
    2a04:	.word	0x400bb030

00002a08 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2a08:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2a0a:	ldr	r0, [pc, #164]	; (2ab0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2a0c:	ldr	r2, [pc, #164]	; (2ab4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2a0e:	ldr	r3, [pc, #168]	; (2ab8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a10:	ldr	r5, [pc, #168]	; (2abc <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2a12:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2a14:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2a16:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2a18:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    2a1a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a1c:	ldr	r4, [pc, #160]	; (2ac0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2a1e:	cmp	r3, #8
    2a20:	beq.n	2a84 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2a22:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a24:	ldr	r0, [pc, #156]	; (2ac4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a26:	ldr	r1, [pc, #160]	; (2ac8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2a28:	beq.n	2a9a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2a2a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2a2c:	ite	eq
    2a2e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2a30:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2a32:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2a34:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2a36:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2a38:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2a3a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2a3c:	ldr	r3, [pc, #140]	; (2acc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a3e:	ldr	r1, [pc, #144]	; (2ad0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2a40:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a42:	ldr	r2, [pc, #144]	; (2ad4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2a44:	cbz	r3, 2a76 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a46:	movs	r3, #1
    2a48:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a4a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2a4c:	ldr	r3, [pc, #136]	; (2ad8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2a4e:	ldr	r1, [pc, #140]	; (2adc <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2a50:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2a52:	ldr	r2, [pc, #140]	; (2ae0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2a54:	cmp	r3, #1
    2a56:	bls.n	2aa6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2a58:	cmp	r3, #4
    2a5a:	bls.n	2a7c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2a5c:	cmp	r3, #8
    2a5e:	bls.n	2a9e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2a60:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2a62:	ite	ls
    2a64:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2a66:	movhi	r3, #135	; 0x87
    2a68:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2a6a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2a6c:	ldr	r3, [pc, #116]	; (2ae4 <analog_init+0xdc>)
    2a6e:	movs	r2, #1
    2a70:	strb	r2, [r3, #0]
}
    2a72:	pop	{r4, r5}
    2a74:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2a76:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2a78:	str	r3, [r2, #0]
    2a7a:	b.n	2a4c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2a7c:	movs	r3, #132	; 0x84
    2a7e:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2a80:	str	r3, [r2, #0]
    2a82:	b.n	2a6c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a84:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a88:	ldr	r1, [pc, #60]	; (2ac8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a8a:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a8c:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a8e:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a90:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a92:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a94:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a96:	str	r3, [r1, #0]
    2a98:	b.n	2a3c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a9a:	movs	r2, #57	; 0x39
    2a9c:	b.n	2a8e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2a9e:	movs	r3, #133	; 0x85
    2aa0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2aa2:	str	r3, [r2, #0]
    2aa4:	b.n	2a6c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2aa6:	movs	r3, #128	; 0x80
    2aa8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2aaa:	str	r3, [r2, #0]
    2aac:	b.n	2a6c <analog_init+0x64>
    2aae:	nop
    2ab0:	.word	0x40074000
    2ab4:	.word	0x40074001
    2ab8:	.word	0x1fff0c68
    2abc:	.word	0x4003b008
    2ac0:	.word	0x4003b00c
    2ac4:	.word	0x400bb008
    2ac8:	.word	0x400bb00c
    2acc:	.word	0x1fff190d
    2ad0:	.word	0x4003b020
    2ad4:	.word	0x400bb020
    2ad8:	.word	0x1fff0c69
    2adc:	.word	0x4003b024
    2ae0:	.word	0x400bb024
    2ae4:	.word	0x1fff190a

00002ae8 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2ae8:	cmp	r0, #71	; 0x47
    2aea:	bhi.n	2b4c <analogRead+0x64>
	channel = pin2sc1a[pin];
    2aec:	ldr	r3, [pc, #204]	; (2bbc <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    2aee:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    2af2:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    2af4:	cmp	r6, #255	; 0xff
    2af6:	beq.n	2b50 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2af8:	ldr	r3, [pc, #196]	; (2bc0 <analogRead+0xd8>)
    2afa:	ldrb	r3, [r3, #0]
    2afc:	cmp	r3, #0
    2afe:	bne.n	2b56 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2b00:	lsls	r2, r6, #24
    2b02:	bmi.n	2b5e <analogRead+0x76>
#endif

	__disable_irq();
    2b04:	cpsid	i
    2b06:	ldr	r5, [pc, #188]	; (2bc4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2b08:	ldr	r4, [pc, #188]	; (2bc8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    2b0a:	mov	r7, r5
    2b0c:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2b0e:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2b10:	strb	r3, [r5, #0]
	__enable_irq();
    2b12:	cpsie	i
	while (1) {
		__disable_irq();
    2b14:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2b16:	ldr	r3, [r4, #0]
    2b18:	lsls	r3, r3, #24
    2b1a:	bmi.n	2b36 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2b1c:	ldrb	r3, [r7, #0]
    2b1e:	cbnz	r3, 2b28 <analogRead+0x40>
    2b20:	b.n	2b0c <analogRead+0x24>
    2b22:	ldrb	r3, [r5, #0]
    2b24:	cmp	r3, #0
    2b26:	beq.n	2b0c <analogRead+0x24>
		__enable_irq();
    2b28:	cpsie	i
		yield();
    2b2a:	bl	413c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2b2e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2b30:	ldr	r3, [r4, #0]
    2b32:	lsls	r0, r3, #24
    2b34:	bpl.n	2b22 <analogRead+0x3a>
			result = ADC0_RA;
    2b36:	ldr	r3, [pc, #148]	; (2bcc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2b38:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2b3a:	movs	r2, #0
    2b3c:	strb	r2, [r5, #0]
			__enable_irq();
    2b3e:	cpsie	i
			result >>= analog_right_shift;
    2b40:	ldr	r2, [pc, #140]	; (2bd0 <analogRead+0xe8>)
    2b42:	ldrb	r0, [r2, #0]
    2b44:	asr.w	r0, r3, r0
			return result;
    2b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2b4c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2b4e:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2b50:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2b52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2b56:	bl	28c4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2b5a:	lsls	r2, r6, #24
    2b5c:	bpl.n	2b04 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2b5e:	cpsid	i
    2b60:	ldr	r5, [pc, #112]	; (2bd4 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2b62:	ldr.w	r8, [pc, #124]	; 2be0 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2b66:	ldr	r4, [pc, #112]	; (2bd8 <analogRead+0xf0>)
    2b68:	and.w	r7, r6, #64	; 0x40
    2b6c:	uxtb	r7, r7
    2b6e:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2b72:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2b76:	cbz	r7, 2bb0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2b78:	bic.w	r3, r3, #16
    2b7c:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2b80:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2b82:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2b84:	ldr	r2, [pc, #76]	; (2bd4 <analogRead+0xec>)
    2b86:	strb	r3, [r5, #0]
	__enable_irq();
    2b88:	cpsie	i
	while (1) {
		__disable_irq();
    2b8a:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2b8c:	ldr	r3, [r4, #0]
    2b8e:	lsls	r1, r3, #24
    2b90:	bmi.n	2bac <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    2b92:	ldrb	r3, [r2, #0]
    2b94:	cbnz	r3, 2b9e <analogRead+0xb6>
    2b96:	b.n	2b72 <analogRead+0x8a>
    2b98:	ldrb	r3, [r5, #0]
    2b9a:	cmp	r3, #0
    2b9c:	beq.n	2b72 <analogRead+0x8a>
		__enable_irq();
    2b9e:	cpsie	i
		yield();
    2ba0:	bl	413c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2ba4:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2ba6:	ldr	r3, [r4, #0]
    2ba8:	lsls	r3, r3, #24
    2baa:	bpl.n	2b98 <analogRead+0xb0>
			result = ADC1_RA;
    2bac:	ldr	r3, [pc, #44]	; (2bdc <analogRead+0xf4>)
    2bae:	b.n	2b38 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2bb0:	orr.w	r3, r3, #16
    2bb4:	str.w	r3, [r8]
    2bb8:	b.n	2b80 <analogRead+0x98>
    2bba:	nop
    2bbc:	.word	0x000056d4
    2bc0:	.word	0x1fff190a
    2bc4:	.word	0x1fff190c
    2bc8:	.word	0x4003b000
    2bcc:	.word	0x4003b010
    2bd0:	.word	0x1fff1909
    2bd4:	.word	0x1fff190b
    2bd8:	.word	0x400bb000
    2bdc:	.word	0x400bb010
    2be0:	.word	0x400bb00c

00002be4 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2be4:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2be6:	ldr	r3, [pc, #68]	; (2c2c <digitalWrite.part.1+0x48>)
    2be8:	ldr.w	r2, [r3, r0, lsl #3]
    2bec:	ldrb.w	r4, [r2, #640]	; 0x280
    2bf0:	cbz	r4, 2c00 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    2bf2:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2bf4:	cbz	r1, 2c16 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2bf6:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2bfa:	ldr.w	r4, [sp], #4
    2bfe:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2c00:	add.w	r3, r3, r0, lsl #3
    2c04:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2c06:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2c08:	cbnz	r1, 2c20 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2c0a:	bic.w	r2, r2, #2
    2c0e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2c10:	ldr.w	r4, [sp], #4
    2c14:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2c16:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2c1a:	ldr.w	r4, [sp], #4
    2c1e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2c20:	orr.w	r2, r2, #3
    2c24:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2c26:	ldr.w	r4, [sp], #4
    2c2a:	bx	lr
    2c2c:	.word	0x0000571c

00002c30 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2c30:	ldr	r2, [pc, #112]	; (2ca4 <pinMode.part.2+0x74>)
    2c32:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2c36:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2c38:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2c3a:	beq.n	2c60 <pinMode.part.2+0x30>
    2c3c:	cmp	r1, #4
    2c3e:	beq.n	2c78 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2c40:	ldr.w	r0, [r2, r0, lsl #3]
    2c44:	movs	r2, #0
    2c46:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2c4a:	cbz	r1, 2c58 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2c4c:	cmp	r1, #2
    2c4e:	beq.n	2c92 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2c50:	cmp	r1, #3
    2c52:	beq.n	2c9a <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2c54:	str	r2, [r3, #0]
    2c56:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2c58:	mov.w	r2, #256	; 0x100
    2c5c:	str	r2, [r3, #0]
    2c5e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c60:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c64:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c68:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c6c:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2c6e:	ldr	r2, [r3, #0]
    2c70:	bic.w	r2, r2, #32
    2c74:	str	r2, [r3, #0]
    2c76:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c78:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c7c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c80:	movs	r0, #1
    2c82:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c86:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2c88:	ldr	r2, [r3, #0]
    2c8a:	orr.w	r2, r2, #32
    2c8e:	str	r2, [r3, #0]
    2c90:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2c92:	movw	r2, #259	; 0x103
    2c96:	str	r2, [r3, #0]
    2c98:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2c9a:	mov.w	r2, #258	; 0x102
    2c9e:	str	r2, [r3, #0]
    2ca0:	bx	lr
    2ca2:	nop
    2ca4:	.word	0x0000571c

00002ca8 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2ca8:	push	{r4, r5}
	RTC_SR = 0;
    2caa:	ldr	r3, [pc, #20]	; (2cc0 <rtc_set+0x18>)
	RTC_TPR = 0;
    2cac:	ldr	r5, [pc, #20]	; (2cc4 <rtc_set+0x1c>)
	RTC_TSR = t;
    2cae:	ldr	r4, [pc, #24]	; (2cc8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2cb0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    2cb2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2cb4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    2cb6:	str	r2, [r5, #0]
	RTC_TSR = t;
    2cb8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2cba:	str	r1, [r3, #0]
}
    2cbc:	pop	{r4, r5}
    2cbe:	bx	lr
    2cc0:	.word	0x4003d014
    2cc4:	.word	0x4003d004
    2cc8:	.word	0x4003d000

00002ccc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2ccc:	cmp	r0, #63	; 0x3f
    2cce:	bhi.n	2cd4 <digitalWrite+0x8>
    2cd0:	b.w	2be4 <digitalWrite.part.1>
    2cd4:	bx	lr
    2cd6:	nop

00002cd8 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2cd8:	cmp	r0, #63	; 0x3f
    2cda:	bhi.n	2cea <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2cdc:	ldr	r3, [pc, #16]	; (2cf0 <digitalRead+0x18>)
    2cde:	ldr.w	r3, [r3, r0, lsl #3]
    2ce2:	ldrb.w	r0, [r3, #512]	; 0x200
    2ce6:	uxtb	r0, r0
    2ce8:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2cea:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    2cec:	bx	lr
    2cee:	nop
    2cf0:	.word	0x0000571c

00002cf4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2cf4:	cmp	r0, #63	; 0x3f
    2cf6:	bhi.n	2cfc <pinMode+0x8>
    2cf8:	b.w	2c30 <pinMode.part.2>
    2cfc:	bx	lr
    2cfe:	nop

00002d00 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2d00:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2d04:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2d06:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2d08:	ldr	r7, [pc, #136]	; (2d94 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2d0a:	ldr	r3, [pc, #140]	; (2d98 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d0c:	ldr	r2, [pc, #140]	; (2d9c <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2d0e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2d10:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d12:	ldr	r2, [r2, #0]
	__enable_irq();
    2d14:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d16:	lsls	r2, r2, #5
    2d18:	bpl.n	2d20 <delay+0x20>
    2d1a:	cmp	r3, #50	; 0x32
    2d1c:	it	hi
    2d1e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2d20:	cbz	r5, 2d90 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2d22:	rsb	r3, r3, #179200	; 0x2bc00
    2d26:	addw	r3, r3, #799	; 0x31f
    2d2a:	ldr	r6, [pc, #116]	; (2da0 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2d2c:	ldr.w	r9, [pc, #104]	; 2d98 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d30:	ldr.w	r8, [pc, #104]	; 2d9c <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2d34:	lsrs	r3, r3, #2
    2d36:	mov.w	r2, #1000	; 0x3e8
    2d3a:	umull	r1, r3, r6, r3
    2d3e:	mul.w	r4, r2, r4
    2d42:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2d46:	cpsid	i
	current = SYST_CVR;
    2d48:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2d4c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d4e:	ldr.w	lr, [r8]
	__enable_irq();
    2d52:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d54:	rsb	r3, r1, #179200	; 0x2bc00
    2d58:	addw	r3, r3, #799	; 0x31f
    2d5c:	lsrs	r3, r3, #2
    2d5e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d62:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d66:	rsb	r3, r4, r3, lsr #2
    2d6a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d6e:	beq.n	2d76 <delay+0x76>
    2d70:	cmp	r1, #50	; 0x32
    2d72:	it	hi
    2d74:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d76:	mla	r3, r0, r2, r3
    2d7a:	cmp.w	r3, #1000	; 0x3e8
    2d7e:	bcc.n	2d8a <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2d80:	subs	r5, #1
    2d82:	beq.n	2d90 <delay+0x90>
				start += 1000;
    2d84:	add.w	r4, r4, #1000	; 0x3e8
    2d88:	b.n	2d46 <delay+0x46>
			}
			yield();
    2d8a:	bl	413c <yield>
		}
    2d8e:	b.n	2d46 <delay+0x46>
    2d90:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d94:	.word	0x1fff1910
    2d98:	.word	0xe000e018
    2d9c:	.word	0xe000ed04
    2da0:	.word	0x16c16c17

00002da4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2da4:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2da6:	ldr	r3, [pc, #312]	; (2ee0 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2da8:	ldr	r0, [pc, #312]	; (2ee4 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2daa:	ldr.w	ip, [pc, #348]	; 2f08 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2dae:	ldr	r4, [pc, #312]	; (2ee8 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2db0:	ldr	r1, [pc, #312]	; (2eec <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2db2:	ldr.w	lr, [pc, #344]	; 2f0c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2db6:	ldr	r6, [pc, #312]	; (2ef0 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2db8:	ldr	r5, [pc, #312]	; (2ef4 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2dba:	ldr	r7, [pc, #316]	; (2ef8 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2dbc:	mov.w	r2, #134217728	; 0x8000000
    2dc0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2dc2:	mov.w	r2, #268435456	; 0x10000000
    2dc6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2dc8:	mov.w	r2, #536870912	; 0x20000000
    2dcc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2dce:	mov.w	r2, #1073741824	; 0x40000000
    2dd2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2dd4:	mov.w	r2, #2147483648	; 0x80000000
    2dd8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2dda:	movs	r2, #0
    2ddc:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2dde:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2de0:	movw	r0, #61439	; 0xefff
    2de4:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2de8:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2dec:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2dee:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2df2:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2df4:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2df6:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2df8:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2dfc:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2dfe:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2e02:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2e04:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2e08:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2e0a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2e0e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2e12:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2e16:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2e1a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2e1e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2e20:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2e24:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2e26:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2e28:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2e2a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2e2e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2e30:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2e32:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e34:	ldr	r4, [pc, #196]	; (2efc <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2e36:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2e38:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e3a:	movs	r1, #9
    2e3c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2e3e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e42:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2e46:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e48:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2e4a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e4c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2e4e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2e50:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e52:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2e56:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e5a:	add.w	r7, r7, #520192	; 0x7f000
    2e5e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2e60:	addw	r4, r4, #2044	; 0x7fc
    2e64:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e66:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2e68:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2e6a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e6c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2e70:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2e72:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2e76:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2e7a:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e7c:	sub.w	r4, r4, #460800	; 0x70800
    2e80:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2e84:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2e86:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e88:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e8c:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2e8e:	ldr	r0, [pc, #112]	; (2f00 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e90:	orr.w	r1, r1, #512	; 0x200
    2e94:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2e96:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2e98:	ldr	r4, [pc, #104]	; (2f04 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2e9a:	add.w	lr, lr, #65280	; 0xff00
    2e9e:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2ea2:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2ea6:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2eaa:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2eae:	orr.w	r1, r1, #33554432	; 0x2000000
    2eb2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2eb4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2eb8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2ebc:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2ebe:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2ec0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    2ec2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2ec4:	str	r2, [r4, #0]
#endif
	analog_init();
    2ec6:	bl	2a08 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2eca:	movs	r0, #25
    2ecc:	bl	2d00 <delay>
	usb_init();
    2ed0:	bl	406c <usb_init>
	delay(275);
    2ed4:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2ed8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2edc:	b.w	2d00 <delay>
    2ee0:	.word	0xe000e104
    2ee4:	.word	0x40038004
    2ee8:	.word	0x40038014
    2eec:	.word	0x4003801c
    2ef0:	.word	0x40038024
    2ef4:	.word	0x4003802c
    2ef8:	.word	0x40038034
    2efc:	.word	0x40038000
    2f00:	.word	0x40048004
    2f04:	.word	0x400c9000
    2f08:	.word	0x40038008
    2f0c:	.word	0x4003800c

00002f10 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2f10:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2f12:	ldr	r3, [pc, #56]	; (2f4c <sysex_byte+0x3c>)
    2f14:	ldr	r4, [pc, #56]	; (2f50 <sysex_byte+0x40>)
    2f16:	ldr	r3, [r3, #0]
    2f18:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2f1a:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2f1c:	cbz	r3, 2f42 <sysex_byte+0x32>
    2f1e:	cmp.w	r1, #290	; 0x122
    2f22:	bcs.n	2f30 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2f24:	ldr	r2, [pc, #44]	; (2f54 <sysex_byte+0x44>)
    2f26:	adds	r3, r1, #1
    2f28:	strb	r5, [r2, r1]
    2f2a:	uxth	r3, r3
    2f2c:	strh	r3, [r4, #0]
	}
}
    2f2e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2f30:	movs	r2, #0
    2f32:	ldr	r0, [pc, #32]	; (2f54 <sysex_byte+0x44>)
    2f34:	blx	r3
    2f36:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2f38:	ldr	r2, [pc, #24]	; (2f54 <sysex_byte+0x44>)
    2f3a:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2f3c:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2f3e:	strh	r3, [r4, #0]
	}
}
    2f40:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2f42:	cmp.w	r1, #290	; 0x122
    2f46:	bcc.n	2f24 <sysex_byte+0x14>
    2f48:	pop	{r3, r4, r5, pc}
    2f4a:	nop
    2f4c:	.word	0x1fff1938
    2f50:	.word	0x1fff1dce
    2f54:	.word	0x1fff1dd4

00002f58 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2f58:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2f5c:	ldr	r6, [pc, #132]	; (2fe4 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2f5e:	ldr	r7, [pc, #136]	; (2fe8 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2f60:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2f62:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2f64:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2f66:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2f68:	cbz	r1, 2f98 <usb_midi_write_packed+0x40>
    2f6a:	ldr	r5, [pc, #128]	; (2fec <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2f6c:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2f6e:	add.w	r2, r1, r3, lsl #2
    2f72:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2f74:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2f76:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2f78:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2f7c:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2f7e:	bhi.n	2f8a <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2f80:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2f82:	movs	r3, #0
    2f84:	strb	r3, [r7, #0]
    2f86:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2f8a:	movs	r3, #64	; 0x40
    2f8c:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2f8e:	movs	r0, #4
    2f90:	bl	3638 <usb_tx>
		tx_packet = NULL;
    2f94:	str	r4, [r6, #0]
    2f96:	b.n	2f82 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2f98:	ldr.w	r9, [pc, #84]	; 2ff0 <usb_midi_write_packed+0x98>
    2f9c:	ldrb.w	r3, [r9]
    2fa0:	cmp	r3, #0
    2fa2:	beq.n	2f86 <usb_midi_write_packed+0x2e>
    2fa4:	ldr	r5, [pc, #68]	; (2fec <usb_midi_write_packed+0x94>)
    2fa6:	movw	r4, #48001	; 0xbb81
    2faa:	b.n	2fbe <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2fac:	subs	r4, #1
    2fae:	beq.n	2fd6 <usb_midi_write_packed+0x7e>
    2fb0:	ldrb	r3, [r5, #0]
    2fb2:	cbnz	r3, 2fd6 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    2fb4:	bl	413c <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2fb8:	ldrb.w	r3, [r9]
    2fbc:	cbz	r3, 2fde <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2fbe:	movs	r0, #4
    2fc0:	bl	3524 <usb_tx_packet_count>
    2fc4:	cmp	r0, #5
    2fc6:	bhi.n	2fac <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2fc8:	bl	345c <usb_malloc>
    2fcc:	mov	r1, r0
    2fce:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2fd0:	cmp	r0, #0
    2fd2:	beq.n	2fac <usb_midi_write_packed+0x54>
    2fd4:	b.n	2f6c <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    2fd6:	movs	r3, #1
    2fd8:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2fda:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2fde:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2fe2:	nop
    2fe4:	.word	0x1fff1954
    2fe8:	.word	0x1fff1928
    2fec:	.word	0x1fff1958
    2ff0:	.word	0x1fff1a64

00002ff4 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    2ff4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    2ff6:	ldr	r3, [pc, #32]	; (3018 <usb_midi_flush_output+0x24>)
    2ff8:	ldrb	r4, [r3, #0]
    2ffa:	cbnz	r4, 3006 <usb_midi_flush_output+0x12>
    2ffc:	ldr	r5, [pc, #28]	; (301c <usb_midi_flush_output+0x28>)
    2ffe:	ldr	r1, [r5, #0]
    3000:	cbz	r1, 3006 <usb_midi_flush_output+0x12>
    3002:	ldrh	r3, [r1, #2]
    3004:	cbnz	r3, 3008 <usb_midi_flush_output+0x14>
    3006:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    3008:	lsls	r3, r3, #2
    300a:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    300c:	movs	r0, #4
    300e:	bl	3638 <usb_tx>
		tx_packet = NULL;
    3012:	str	r4, [r5, #0]
    3014:	pop	{r3, r4, r5, pc}
    3016:	nop
    3018:	.word	0x1fff1928
    301c:	.word	0x1fff1954

00003020 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    3020:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    3024:	ldr	r6, [pc, #692]	; (32dc <usb_midi_read+0x2bc>)
    3026:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    3028:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    302a:	cmp	r3, #0
    302c:	beq.w	3154 <usb_midi_read+0x134>
    3030:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    3032:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    3034:	lsrs	r1, r2, #2
    3036:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    303a:	adds	r2, #4
	if (index < rx_packet->len) {
    303c:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    303e:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    3040:	bcs.n	30c8 <usb_midi_read+0xa8>
		rx_packet->index = index;
    3042:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    3044:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    3048:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    304c:	ldr	r1, [pc, #656]	; (32e0 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    304e:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    3052:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    3056:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    305a:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    305c:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    3060:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    3062:	bls.n	309a <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    3064:	subs	r3, r6, #2
    3066:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    3068:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    306c:	bls.n	310c <usb_midi_read+0xec>
    306e:	cmp	r6, #5
    3070:	beq.n	3104 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    3072:	cmp	r6, #4
    3074:	beq.w	33c0 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    3078:	subs	r3, r6, #5
    307a:	cmp	r3, #2
    307c:	bls.n	317e <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    307e:	cmp	r6, #15
    3080:	bne.n	30a0 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    3082:	cmp	r0, #247	; 0xf7
    3084:	bhi.n	310c <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    3086:	cmp	r0, #240	; 0xf0
    3088:	beq.n	3090 <usb_midi_read+0x70>
    308a:	ldr	r3, [pc, #600]	; (32e4 <usb_midi_read+0x2c4>)
    308c:	ldrh	r3, [r3, #0]
    308e:	cbz	r3, 30a0 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    3090:	bl	2f10 <sysex_byte>
		}
	}
	return 0;
    3094:	movs	r0, #0
    3096:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    309a:	cbz	r7, 30a6 <usb_midi_read+0x86>
    309c:	cmp	r5, r7
    309e:	beq.n	30a6 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    30a0:	movs	r0, #0
    30a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    30a6:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    30a8:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    30ac:	beq.w	31be <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    30b0:	cmp	r6, #9
    30b2:	beq.n	30d8 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    30b4:	cmp	r6, #10
    30b6:	bne.w	31e2 <usb_midi_read+0x1c2>
    30ba:	cmp	r3, #10
    30bc:	bne.n	30a0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    30be:	ldr	r3, [pc, #552]	; (32e8 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    30c0:	ldr	r2, [pc, #552]	; (32ec <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    30c2:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    30c4:	movs	r1, #160	; 0xa0
    30c6:	b.n	31cc <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    30c8:	mov	r0, r3
    30ca:	bl	349c <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    30ce:	movs	r0, #5
    30d0:	bl	34e8 <usb_rx>
    30d4:	str	r0, [r6, #0]
    30d6:	b.n	3044 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    30d8:	cmp	r3, #9
    30da:	bne.n	30a0 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    30dc:	lsrs	r7, r4, #24
    30de:	beq.w	33d8 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    30e2:	ldr	r3, [pc, #524]	; (32f0 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    30e4:	ldr	r2, [pc, #516]	; (32ec <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    30e6:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    30e8:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    30ea:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    30ee:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    30f0:	uxtb	r5, r5
    30f2:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    30f4:	cmp	r3, #0
    30f6:	beq.w	3234 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    30fa:	mov	r2, r4
    30fc:	mov	r1, r6
    30fe:	mov	r0, r5
    3100:	blx	r3
    3102:	b.n	3234 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    3104:	cmp	r0, #240	; 0xf0
    3106:	bls.n	3190 <usb_midi_read+0x170>
    3108:	cmp	r0, #247	; 0xf7
    310a:	beq.n	3190 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    310c:	subs	r0, #241	; 0xf1
    310e:	cmp	r0, #14
    3110:	bhi.n	30a0 <usb_midi_read+0x80>
    3112:	add	r3, pc, #4	; (adr r3, 3118 <usb_midi_read+0xf8>)
    3114:	ldr.w	pc, [r3, r0, lsl #2]
    3118:	.word	0x000032cf
    311c:	.word	0x000032b3
    3120:	.word	0x000032a1
    3124:	.word	0x000030a1
    3128:	.word	0x000030a1
    312c:	.word	0x00003293
    3130:	.word	0x000030a1
    3134:	.word	0x00003373
    3138:	.word	0x000030a1
    313c:	.word	0x0000333d
    3140:	.word	0x00003357
    3144:	.word	0x0000327b
    3148:	.word	0x000030a1
    314c:	.word	0x00003263
    3150:	.word	0x00003247
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    3154:	ldr	r3, [pc, #412]	; (32f4 <usb_midi_read+0x2d4>)
    3156:	ldrb	r3, [r3, #0]
    3158:	cmp	r3, #0
    315a:	beq.n	30a0 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    315c:	movs	r0, #5
    315e:	bl	34e8 <usb_rx>
    3162:	mov	r3, r0
    3164:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    3166:	cmp	r0, #0
    3168:	beq.n	30a0 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    316a:	ldrh	r5, [r0, #0]
    316c:	cmp	r5, #0
    316e:	bne.w	3032 <usb_midi_read+0x12>
			usb_free(rx_packet);
    3172:	bl	349c <usb_free>
			rx_packet = NULL;
    3176:	str	r5, [r6, #0]
			return 0;
    3178:	mov	r0, r5
    317a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    317e:	bl	2f10 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    3182:	ubfx	r0, r4, #16, #8
    3186:	bl	2f10 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    318a:	cmp	r6, #7
    318c:	bne.n	3194 <usb_midi_read+0x174>
    318e:	lsrs	r0, r4, #24
    3190:	bl	2f10 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    3194:	ldr	r3, [pc, #332]	; (32e4 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    3196:	ldr	r2, [pc, #352]	; (32f8 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    3198:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    319a:	ldr	r0, [pc, #352]	; (32fc <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    319c:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    319e:	ldr	r5, [pc, #352]	; (3300 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    31a0:	ldr	r2, [pc, #328]	; (32ec <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    31a2:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    31a4:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    31a6:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    31a8:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    31aa:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    31ac:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    31ae:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    31b0:	cbz	r4, 31f6 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    31b2:	movs	r2, #1
    31b4:	ldr	r0, [pc, #332]	; (3304 <usb_midi_read+0x2e4>)
    31b6:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    31b8:	movs	r0, #1
    31ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    31be:	cmp	r3, #8
    31c0:	bne.w	30a0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    31c4:	ldr	r3, [pc, #320]	; (3308 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    31c6:	ldr	r2, [pc, #292]	; (32ec <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    31c8:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    31ca:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    31cc:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    31d0:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    31d2:	uxtb	r5, r5
    31d4:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    31d6:	cbz	r3, 3234 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    31d8:	mov	r0, r5
    31da:	mov	r2, r4
    31dc:	mov	r1, r6
    31de:	blx	r3
    31e0:	b.n	3234 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    31e2:	cmp	r6, #11
    31e4:	bne.n	320a <usb_midi_read+0x1ea>
    31e6:	cmp	r3, #11
    31e8:	bne.w	30a0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    31ec:	ldr	r3, [pc, #284]	; (330c <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    31ee:	ldr	r2, [pc, #252]	; (32ec <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    31f0:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    31f2:	movs	r1, #176	; 0xb0
    31f4:	b.n	31cc <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    31f6:	ldr	r3, [pc, #280]	; (3310 <usb_midi_read+0x2f0>)
    31f8:	ldr	r3, [r3, #0]
    31fa:	cmp	r3, #0
    31fc:	beq.w	33f6 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    3200:	ldr	r0, [pc, #256]	; (3304 <usb_midi_read+0x2e4>)
    3202:	blx	r3
		}
		return 1;
    3204:	movs	r0, #1
    3206:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    320a:	cmp	r6, #12
    320c:	bne.w	3410 <usb_midi_read+0x3f0>
    3210:	cmp	r3, #12
    3212:	bne.w	30a0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    3216:	ldr	r3, [pc, #252]	; (3314 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    3218:	ldr	r2, [pc, #208]	; (32ec <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    321a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    321c:	movs	r1, #192	; 0xc0
    321e:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    3220:	uxtb	r5, r5
    3222:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    3226:	cmp	r3, #0
    3228:	beq.w	33bc <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    322c:	mov	r0, r5
    322e:	mov	r1, r6
    3230:	lsrs	r4, r4, #24
    3232:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    3234:	ldr	r1, [pc, #224]	; (3318 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    3236:	ldr	r2, [pc, #196]	; (32fc <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    3238:	ldr	r3, [pc, #196]	; (3300 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    323a:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    323c:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    323e:	strb	r4, [r3, #0]
		return 1;
    3240:	movs	r0, #1
    3242:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    3246:	ldr	r3, [pc, #212]	; (331c <usb_midi_read+0x2fc>)
    3248:	ldr	r3, [r3, #0]
    324a:	cmp	r3, #0
    324c:	beq.w	33fc <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    3250:	blx	r3
    3252:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    3256:	ldr	r3, [pc, #148]	; (32ec <usb_midi_read+0x2cc>)
    3258:	uxtb	r5, r5
    325a:	lsrs	r4, r4, #24
    325c:	strb.w	r8, [r3]
		goto return_message;
    3260:	b.n	3234 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    3262:	ldr	r3, [pc, #188]	; (3320 <usb_midi_read+0x300>)
    3264:	ldr	r3, [r3, #0]
    3266:	cmp	r3, #0
    3268:	bne.n	3250 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    326a:	ldr	r3, [pc, #184]	; (3324 <usb_midi_read+0x304>)
    326c:	ldr	r3, [r3, #0]
    326e:	cbz	r3, 329a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    3270:	movs	r0, #254	; 0xfe
    3272:	blx	r3
    3274:	ubfx	r6, r4, #16, #8
    3278:	b.n	3256 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    327a:	ldr	r3, [pc, #172]	; (3328 <usb_midi_read+0x308>)
    327c:	ldr	r3, [r3, #0]
    327e:	cmp	r3, #0
    3280:	bne.n	3250 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    3282:	ldr	r3, [pc, #160]	; (3324 <usb_midi_read+0x304>)
    3284:	ldr	r3, [r3, #0]
    3286:	cbz	r3, 329a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    3288:	movs	r0, #252	; 0xfc
    328a:	blx	r3
    328c:	ubfx	r6, r4, #16, #8
    3290:	b.n	3256 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    3292:	ldr	r3, [pc, #152]	; (332c <usb_midi_read+0x30c>)
    3294:	ldr	r3, [r3, #0]
    3296:	cmp	r3, #0
    3298:	bne.n	3250 <usb_midi_read+0x230>
    329a:	ubfx	r6, r4, #16, #8
    329e:	b.n	3256 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    32a0:	ldr	r3, [pc, #140]	; (3330 <usb_midi_read+0x310>)
    32a2:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    32a4:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    32a8:	cmp	r3, #0
    32aa:	beq.n	3256 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    32ac:	mov	r0, r6
    32ae:	blx	r3
    32b0:	b.n	3256 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    32b2:	ldr	r3, [pc, #128]	; (3334 <usb_midi_read+0x314>)
    32b4:	ldr	r2, [r3, #0]
    32b6:	cmp	r2, #0
    32b8:	beq.n	329a <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    32ba:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    32bc:	lsrs	r3, r4, #17
    32be:	and.w	r0, r6, #127	; 0x7f
    32c2:	and.w	r3, r3, #16256	; 0x3f80
    32c6:	orrs	r0, r3
    32c8:	uxtb	r6, r6
    32ca:	blx	r2
    32cc:	b.n	3256 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    32ce:	ldr	r3, [pc, #104]	; (3338 <usb_midi_read+0x318>)
    32d0:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    32d2:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    32d6:	cmp	r3, #0
    32d8:	bne.n	32ac <usb_midi_read+0x28c>
    32da:	b.n	3256 <usb_midi_read+0x236>
    32dc:	.word	0x1fff1960
    32e0:	.word	0x1fff1dd2
    32e4:	.word	0x1fff1dce
    32e8:	.word	0x1fff193c
    32ec:	.word	0x1fff1dcc
    32f0:	.word	0x1fff1970
    32f4:	.word	0x1fff1a64
    32f8:	.word	0x1fff1938
    32fc:	.word	0x1fff1dd0
    3300:	.word	0x1fff1dd1
    3304:	.word	0x1fff1dd4
    3308:	.word	0x1fff1968
    330c:	.word	0x1fff196c
    3310:	.word	0x1fff1950
    3314:	.word	0x1fff192c
    3318:	.word	0x1fff1dd3
    331c:	.word	0x1fff1918
    3320:	.word	0x1fff191c
    3324:	.word	0x1fff1920
    3328:	.word	0x1fff195c
    332c:	.word	0x1fff194c
    3330:	.word	0x1fff1964
    3334:	.word	0x1fff1934
    3338:	.word	0x1fff1948
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    333c:	ldr	r3, [pc, #252]	; (343c <usb_midi_read+0x41c>)
    333e:	ldr	r3, [r3, #0]
    3340:	cmp	r3, #0
    3342:	bne.n	3250 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    3344:	ldr	r3, [pc, #248]	; (3440 <usb_midi_read+0x420>)
    3346:	ldr	r3, [r3, #0]
    3348:	cmp	r3, #0
    334a:	beq.n	329a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    334c:	movs	r0, #250	; 0xfa
    334e:	blx	r3
    3350:	ubfx	r6, r4, #16, #8
    3354:	b.n	3256 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    3356:	ldr	r3, [pc, #236]	; (3444 <usb_midi_read+0x424>)
    3358:	ldr	r3, [r3, #0]
    335a:	cmp	r3, #0
    335c:	bne.w	3250 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    3360:	ldr	r3, [pc, #220]	; (3440 <usb_midi_read+0x420>)
    3362:	ldr	r3, [r3, #0]
    3364:	cmp	r3, #0
    3366:	beq.n	329a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    3368:	movs	r0, #251	; 0xfb
    336a:	blx	r3
    336c:	ubfx	r6, r4, #16, #8
    3370:	b.n	3256 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    3372:	ldr	r3, [pc, #212]	; (3448 <usb_midi_read+0x428>)
    3374:	ldr	r3, [r3, #0]
    3376:	cmp	r3, #0
    3378:	bne.w	3250 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    337c:	ldr	r3, [pc, #192]	; (3440 <usb_midi_read+0x420>)
    337e:	ldr	r3, [r3, #0]
    3380:	cmp	r3, #0
    3382:	beq.n	329a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    3384:	movs	r0, #248	; 0xf8
    3386:	blx	r3
    3388:	ubfx	r6, r4, #16, #8
    338c:	b.n	3256 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    338e:	cmp	r3, #14
    3390:	bne.w	30a0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    3394:	ldr	r2, [pc, #180]	; (344c <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    3396:	ldr	r3, [pc, #184]	; (3450 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    3398:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    339a:	movs	r1, #224	; 0xe0
    339c:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    339e:	cmp	r2, #0
    33a0:	beq.n	3432 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    33a2:	lsrs	r6, r4, #16
    33a4:	lsrs	r1, r4, #17
    33a6:	and.w	r3, r6, #127	; 0x7f
    33aa:	and.w	r1, r1, #16256	; 0x3f80
    33ae:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    33b0:	uxtb	r5, r5
    33b2:	sub.w	r1, r1, #8192	; 0x2000
    33b6:	mov	r0, r5
    33b8:	blx	r2
    33ba:	uxtb	r6, r6
    33bc:	lsrs	r4, r4, #24
    33be:	b.n	3234 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    33c0:	bl	2f10 <sysex_byte>
		sysex_byte(n >> 16);
    33c4:	ubfx	r0, r4, #16, #8
    33c8:	bl	2f10 <sysex_byte>
		sysex_byte(n >> 24);
    33cc:	lsrs	r0, r4, #24
    33ce:	bl	2f10 <sysex_byte>
		return 0;
    33d2:	movs	r0, #0
    33d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    33d8:	ldr	r3, [pc, #120]	; (3454 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    33da:	ldr	r2, [pc, #116]	; (3450 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    33dc:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    33de:	movs	r1, #128	; 0x80
    33e0:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    33e2:	uxtb	r5, r5
    33e4:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    33e8:	cbz	r3, 340c <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    33ea:	mov	r1, r6
    33ec:	mov	r0, r5
    33ee:	mov	r2, r7
    33f0:	blx	r3
    33f2:	mov	r4, r7
    33f4:	b.n	3234 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    33f6:	movs	r0, #1
    33f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    33fc:	ldr	r3, [pc, #64]	; (3440 <usb_midi_read+0x420>)
    33fe:	ldr	r3, [r3, #0]
    3400:	cmp	r3, #0
    3402:	beq.w	329a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    3406:	movs	r0, #255	; 0xff
    3408:	blx	r3
    340a:	b.n	329a <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    340c:	mov	r4, r3
    340e:	b.n	3234 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    3410:	cmp	r6, #13
    3412:	bne.n	338e <usb_midi_read+0x36e>
    3414:	cmp	r3, #13
    3416:	bne.w	30a0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    341a:	ldr	r3, [pc, #60]	; (3458 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    341c:	ldr	r2, [pc, #48]	; (3450 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    341e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    3420:	movs	r1, #208	; 0xd0
    3422:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    3424:	uxtb	r5, r5
    3426:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    342a:	cmp	r3, #0
    342c:	bne.w	322c <usb_midi_read+0x20c>
    3430:	b.n	33bc <usb_midi_read+0x39c>
    3432:	ubfx	r6, r4, #16, #8
    3436:	uxtb	r5, r5
    3438:	lsrs	r4, r4, #24
    343a:	b.n	3234 <usb_midi_read+0x214>
    343c:	.word	0x1fff1944
    3440:	.word	0x1fff1920
    3444:	.word	0x1fff1924
    3448:	.word	0x1fff1914
    344c:	.word	0x1fff1930
    3450:	.word	0x1fff1dcc
    3454:	.word	0x1fff1968
    3458:	.word	0x1fff1940

0000345c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    345c:	cpsid	i
	avail = usb_buffer_available;
    345e:	ldr	r0, [pc, #52]	; (3494 <usb_malloc+0x38>)
    3460:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    3462:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    3466:	cmp	r3, #29
    3468:	bgt.n	348c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    346a:	mov.w	r1, #2147483648	; 0x80000000
    346e:	lsrs	r1, r3
    3470:	bic.w	r2, r2, r1
    3474:	str	r2, [r0, #0]
	__enable_irq();
    3476:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3478:	ldr	r0, [pc, #28]	; (3498 <usb_malloc+0x3c>)
    347a:	add.w	r3, r3, r3, lsl #3
    347e:	lsls	r3, r3, #3
    3480:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    3482:	movs	r1, #0
    3484:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    3486:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    3488:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    348a:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    348c:	cpsie	i
		return NULL;
    348e:	movs	r0, #0
    3490:	bx	lr
    3492:	nop
    3494:	.word	0x1fff0c6c
    3498:	.word	0x1fff03d0

0000349c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    349c:	ldr	r3, [pc, #52]	; (34d4 <usb_free+0x38>)
    349e:	ldr	r2, [pc, #56]	; (34d8 <usb_free+0x3c>)
    34a0:	subs	r3, r0, r3
    34a2:	umull	r2, r3, r2, r3
    34a6:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    34a8:	cmp	r3, #29
    34aa:	bhi.n	34c6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    34ac:	ldr	r2, [pc, #44]	; (34dc <usb_free+0x40>)
    34ae:	ldrb	r2, [r2, #0]
    34b0:	cbnz	r2, 34c8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    34b2:	cpsid	i
	usb_buffer_available |= mask;
    34b4:	ldr	r0, [pc, #40]	; (34e0 <usb_free+0x44>)
    34b6:	mov.w	r1, #2147483648	; 0x80000000
    34ba:	ldr	r2, [r0, #0]
    34bc:	lsr.w	r3, r1, r3
    34c0:	orrs	r2, r3
    34c2:	str	r2, [r0, #0]
	__enable_irq();
    34c4:	cpsie	i
    34c6:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    34c8:	ldr	r2, [pc, #24]	; (34e4 <usb_free+0x48>)
    34ca:	ldrb	r2, [r2, #0]
    34cc:	cmp	r2, #0
    34ce:	beq.n	34b2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    34d0:	b.w	3550 <usb_rx_memory>
    34d4:	.word	0x1fff03d0
    34d8:	.word	0x38e38e39
    34dc:	.word	0x1fff1a59
    34e0:	.word	0x1fff0c6c
    34e4:	.word	0x1fff1a64

000034e8 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    34e8:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    34ea:	cmp	r3, #4
    34ec:	bhi.n	3518 <usb_rx+0x30>
	__disable_irq();
    34ee:	cpsid	i
	ret = rx_first[endpoint];
    34f0:	ldr	r1, [pc, #40]	; (351c <usb_rx+0x34>)
    34f2:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    34f6:	cbz	r0, 3514 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    34f8:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    34fa:	ldr	r4, [pc, #36]	; (3520 <usb_rx+0x38>)
    34fc:	ldrh	r5, [r0, #0]
    34fe:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    3502:	ldr	r6, [r0, #4]
    3504:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    3508:	subs	r2, r2, r5
    350a:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    350e:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3510:	pop	{r4, r5, r6}
    3512:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    3514:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3516:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3518:	movs	r0, #0
    351a:	bx	lr
    351c:	.word	0x1fff19d0
    3520:	.word	0x1fff1ef8

00003524 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    3524:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3526:	cmp	r0, #4
    3528:	bhi.n	3542 <usb_tx_packet_count+0x1e>
	__disable_irq();
    352a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    352c:	ldr	r3, [pc, #28]	; (354c <usb_tx_packet_count+0x28>)
    352e:	ldr.w	r3, [r3, r0, lsl #2]
    3532:	cbz	r3, 3546 <usb_tx_packet_count+0x22>
    3534:	movs	r0, #0
    3536:	ldr	r3, [r3, #4]
    3538:	adds	r0, #1
    353a:	cmp	r3, #0
    353c:	bne.n	3536 <usb_tx_packet_count+0x12>
	__enable_irq();
    353e:	cpsie	i
	return count;
    3540:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3542:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    3544:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    3546:	mov	r0, r3
    3548:	b.n	353e <usb_tx_packet_count+0x1a>
    354a:	nop
    354c:	.word	0x1fff1a28

00003550 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    3550:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    3552:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3554:	ldr	r2, [pc, #204]	; (3624 <usb_rx_memory+0xd4>)
    3556:	ldrb	r3, [r2, #0]
    3558:	lsls	r3, r3, #28
    355a:	bpl.n	356a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    355c:	ldr	r3, [pc, #200]	; (3628 <usb_rx_memory+0xd8>)
    355e:	ldr	r1, [r3, #32]
    3560:	cmp	r1, #0
    3562:	beq.n	35ec <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3564:	ldr	r1, [r3, #40]	; 0x28
    3566:	cmp	r1, #0
    3568:	beq.n	3608 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    356a:	ldrb	r3, [r2, #1]
    356c:	lsls	r5, r3, #28
    356e:	bpl.n	357e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3570:	ldr	r3, [pc, #180]	; (3628 <usb_rx_memory+0xd8>)
    3572:	ldr	r1, [r3, #64]	; 0x40
    3574:	cmp	r1, #0
    3576:	beq.n	3614 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3578:	ldr	r1, [r3, #72]	; 0x48
    357a:	cmp	r1, #0
    357c:	beq.n	360c <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    357e:	ldrb	r3, [r2, #2]
    3580:	lsls	r4, r3, #28
    3582:	bpl.n	3592 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3584:	ldr	r3, [pc, #160]	; (3628 <usb_rx_memory+0xd8>)
    3586:	ldr	r1, [r3, #96]	; 0x60
    3588:	cmp	r1, #0
    358a:	beq.n	3618 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    358c:	ldr	r1, [r3, #104]	; 0x68
    358e:	cmp	r1, #0
    3590:	beq.n	3610 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3592:	ldrb	r3, [r2, #3]
    3594:	lsls	r1, r3, #28
    3596:	bpl.n	35a8 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3598:	ldr	r3, [pc, #140]	; (3628 <usb_rx_memory+0xd8>)
    359a:	ldr.w	r1, [r3, #128]	; 0x80
    359e:	cmp	r1, #0
    35a0:	beq.n	3620 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35a2:	ldr.w	r1, [r3, #136]	; 0x88
    35a6:	cbz	r1, 35ce <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    35a8:	ldrb	r3, [r2, #4]
    35aa:	lsls	r3, r3, #28
    35ac:	bpl.n	35c0 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    35ae:	ldr	r3, [pc, #120]	; (3628 <usb_rx_memory+0xd8>)
    35b0:	ldr.w	r2, [r3, #160]	; 0xa0
    35b4:	cmp	r2, #0
    35b6:	beq.n	361c <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35b8:	ldr.w	r2, [r3, #168]	; 0xa8
    35bc:	movs	r4, #21
    35be:	cbz	r2, 35d0 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    35c0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    35c2:	ldr	r3, [pc, #104]	; (362c <usb_rx_memory+0xdc>)
    35c4:	movs	r2, #0
    35c6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    35c8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    35ca:	b.w	349c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35ce:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35d0:	ldr	r1, [pc, #88]	; (362c <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    35d2:	ldr	r5, [pc, #92]	; (3630 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    35d4:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    35d6:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    35da:	add.w	r3, r3, r4, lsl #3
    35de:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35e0:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    35e2:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35e4:	strb	r2, [r1, #0]
				__enable_irq();
    35e6:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    35e8:	pop	{r4, r5}
    35ea:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    35ec:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35ee:	ldr	r4, [pc, #60]	; (362c <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    35f0:	ldr	r5, [pc, #64]	; (3634 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    35f2:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    35f4:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    35f8:	add.w	r3, r3, r2, lsl #3
    35fc:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35fe:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3600:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3602:	strb	r2, [r4, #0]
				__enable_irq();
    3604:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    3606:	b.n	35e8 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3608:	movs	r4, #5
    360a:	b.n	35d0 <usb_rx_memory+0x80>
    360c:	movs	r4, #9
    360e:	b.n	35d0 <usb_rx_memory+0x80>
    3610:	movs	r4, #13
    3612:	b.n	35d0 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3614:	movs	r2, #8
    3616:	b.n	35ee <usb_rx_memory+0x9e>
    3618:	movs	r2, #12
    361a:	b.n	35ee <usb_rx_memory+0x9e>
    361c:	movs	r2, #20
    361e:	b.n	35ee <usb_rx_memory+0x9e>
    3620:	movs	r2, #16
    3622:	b.n	35ee <usb_rx_memory+0x9e>
    3624:	.word	0x00005948
    3628:	.word	0x1fff0000
    362c:	.word	0x1fff1a59
    3630:	.word	0x004000c8
    3634:	.word	0x00400088

00003638 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3638:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    363a:	cmp	r3, #4
    363c:	bhi.n	367a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    363e:	ldr	r2, [pc, #108]	; (36ac <usb_tx+0x74>)
    3640:	lsls	r0, r0, #5
    3642:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    3646:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3648:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    364a:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    364c:	ldr	r4, [pc, #96]	; (36b0 <usb_tx+0x78>)
    364e:	ldrb	r2, [r4, r3]
    3650:	cmp	r2, #3
    3652:	bhi.n	368c <usb_tx+0x54>
    3654:	tbb	[pc, r2]
    3658:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    365c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    365e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3660:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3662:	tst.w	r0, #8
    3666:	ite	ne
    3668:	movne	r3, #200	; 0xc8
    366a:	moveq	r3, #136	; 0x88
    366c:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3670:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3672:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3674:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    3676:	cpsie	i
}
    3678:	pop	{r4, r5}
    367a:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    367c:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    367e:	movs	r2, #2
		break;
    3680:	b.n	365e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    3682:	movs	r2, #5
    3684:	b.n	365e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    3686:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    3688:	movs	r2, #4
		break;
    368a:	b.n	365e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    368c:	ldr	r2, [pc, #36]	; (36b4 <usb_tx+0x7c>)
    368e:	ldr.w	r0, [r2, r3, lsl #2]
    3692:	cbz	r0, 36a4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3694:	ldr	r2, [pc, #32]	; (36b8 <usb_tx+0x80>)
    3696:	ldr.w	r0, [r2, r3, lsl #2]
    369a:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    369c:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    36a0:	cpsie	i
		return;
    36a2:	b.n	3678 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    36a4:	str.w	r1, [r2, r3, lsl #2]
    36a8:	ldr	r2, [pc, #12]	; (36b8 <usb_tx+0x80>)
    36aa:	b.n	369c <usb_tx+0x64>
    36ac:	.word	0x1fff0000
    36b0:	.word	0x1fff1a68
    36b4:	.word	0x1fff1a28
    36b8:	.word	0x1fff1a3c

000036bc <usb_isr>:
}



void usb_isr(void)
{
    36bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    36c0:	ldr.w	fp, [pc, #776]	; 39cc <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    36c4:	ldr.w	sl, [pc, #776]	; 39d0 <usb_isr+0x314>
}



void usb_isr(void)
{
    36c8:	sub	sp, #28
    36ca:	b.n	3756 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    36cc:	ldr	r7, [pc, #680]	; (3978 <usb_isr+0x2bc>)
    36ce:	mov.w	r8, r3, lsr #2
    36d2:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    36d6:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    36d8:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    36dc:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    36e0:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    36e2:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    36e6:	and.w	r4, r3, #255	; 0xff
    36ea:	cmp	r3, #0
    36ec:	bne.w	38f0 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    36f0:	ldr.w	r3, [r7, r8, lsl #3]
    36f4:	lsrs	r3, r3, #16
    36f6:	uxth	r1, r3
    36f8:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    36fc:	cmp	r3, #0
    36fe:	beq.w	38de <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    3702:	ldr	r3, [pc, #632]	; (397c <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3704:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    3708:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    370c:	ldr.w	r2, [r3, r6, lsl #2]
    3710:	cmp	r2, #0
    3712:	beq.w	3b80 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    3716:	ldr	r5, [pc, #616]	; (3980 <usb_isr+0x2c4>)
    3718:	ldr.w	r3, [r5, r6, lsl #2]
    371c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    371e:	ldr	r4, [pc, #612]	; (3984 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    3720:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3724:	ldrh.w	r3, [r4, r6, lsl #1]
    3728:	add	r1, r3
    372a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    372e:	bl	345c <usb_malloc>
					if (packet) {
    3732:	cmp	r0, #0
    3734:	beq.w	3b72 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    3738:	ldr	r2, [pc, #588]	; (3988 <usb_isr+0x2cc>)
    373a:	ldr	r3, [pc, #592]	; (398c <usb_isr+0x2d0>)
    373c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3740:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3744:	it	ne
    3746:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3748:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    374c:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3750:	movs	r3, #8
    3752:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3756:	ldrb.w	r4, [fp]
    375a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    375c:	lsls	r0, r4, #29
    375e:	bpl.n	379a <usb_isr+0xde>
		if (usb_configuration) {
    3760:	ldr	r3, [pc, #556]	; (3990 <usb_isr+0x2d4>)
    3762:	ldrb	r3, [r3, #0]
    3764:	cbz	r3, 3794 <usb_isr+0xd8>
			t = usb_reboot_timer;
    3766:	ldr	r1, [pc, #556]	; (3994 <usb_isr+0x2d8>)
    3768:	ldrb	r2, [r1, #0]
			if (t) {
    376a:	and.w	r3, r2, #255	; 0xff
    376e:	cbz	r2, 377a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    3770:	subs	r3, #1
    3772:	uxtb	r3, r3
    3774:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    3776:	cbnz	r3, 377a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3778:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    377a:	ldr	r1, [pc, #540]	; (3998 <usb_isr+0x2dc>)
    377c:	ldrb	r2, [r1, #0]
			if (t) {
    377e:	and.w	r3, r2, #255	; 0xff
    3782:	cbz	r2, 3790 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    3784:	subs	r3, #1
    3786:	uxtb	r3, r3
    3788:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    378a:	cmp	r3, #0
    378c:	beq.w	3b1e <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    3790:	bl	2ff4 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    3794:	movs	r3, #4
    3796:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    379a:	and.w	r3, r4, #8
    379e:	and.w	r2, r3, #255	; 0xff
    37a2:	cmp	r3, #0
    37a4:	beq.w	3938 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    37a8:	ldrb.w	r3, [sl]
    37ac:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    37ae:	lsrs	r6, r3, #4
    37b0:	bne.n	36cc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    37b2:	lsrs	r4, r3, #2
    37b4:	ldr.w	r9, [pc, #448]	; 3978 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    37b8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    37bc:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    37c0:	ubfx	r2, r2, #2, #4
    37c4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    37c6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    37c8:	cmp	r2, #12
    37ca:	bhi.w	38d6 <usb_isr+0x21a>
    37ce:	tbb	[pc, r2]
    37d2:	.short	0x7878
    37d4:	.word	0x82828282
    37d8:	.word	0x82438282
    37dc:	.short	0x8282
    37de:	.byte	0x07
    37df:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    37e0:	ldr	r0, [r1, #0]
    37e2:	ldr	r5, [pc, #440]	; (399c <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    37e4:	ldr	r3, [pc, #416]	; (3988 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    37e6:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37e8:	ldr	r7, [pc, #436]	; (39a0 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    37ea:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37ee:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    37f0:	ldr	r6, [pc, #432]	; (39a4 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    37f2:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37f4:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37f8:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    37fa:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37fc:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    37fe:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3802:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3804:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    3808:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    380c:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    380e:	bhi.w	39d4 <usb_isr+0x318>
    3812:	cmp.w	r1, #1664	; 0x680
    3816:	bcs.w	3e40 <usb_isr+0x784>
    381a:	cmp.w	r1, #258	; 0x102
    381e:	beq.w	3bee <usb_isr+0x532>
    3822:	bhi.w	3bb8 <usb_isr+0x4fc>
    3826:	cmp	r1, #128	; 0x80
    3828:	beq.w	3e74 <usb_isr+0x7b8>
    382c:	cmp	r1, #130	; 0x82
    382e:	bne.w	3bfa <usb_isr+0x53e>
    3832:	ldrh	r1, [r5, #4]
    3834:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3838:	cmp	r1, #5
    383a:	bhi.w	3bfa <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    383e:	ldr	r3, [pc, #360]	; (39a8 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3840:	ldr	r4, [pc, #360]	; (39ac <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3842:	lsls	r1, r1, #2
    3844:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3846:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3848:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    384a:	ldrb	r2, [r3, #0]
    384c:	lsls	r3, r2, #30
    384e:	bpl.w	3f84 <usb_isr+0x8c8>
    3852:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    3854:	movs	r0, #2
    3856:	b.n	3c82 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3858:	ldr	r7, [pc, #324]	; (39a0 <usb_isr+0x2e4>)
    385a:	ldr	r2, [r7, #0]
		if (data) {
    385c:	cbz	r2, 38ac <usb_isr+0x1f0>
			size = ep0_tx_len;
    385e:	ldr	r3, [pc, #336]	; (39b0 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3860:	ldr	r6, [pc, #320]	; (39a4 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3862:	ldr	r1, [pc, #336]	; (39b4 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3864:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3866:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3868:	ldrb	r5, [r1, #0]
    386a:	cmp	r0, #64	; 0x40
    386c:	mov	lr, r0
    386e:	orr.w	r8, r5, #2
    3872:	it	cs
    3874:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3878:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    387a:	eor.w	r4, r4, #1
    387e:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3880:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3884:	ite	eq
    3886:	moveq	r4, #136	; 0x88
    3888:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    388a:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    388e:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3890:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3894:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3898:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    389a:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    389c:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    38a0:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    38a2:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    38a4:	cmp	r0, #0
    38a6:	beq.w	3a16 <usb_isr+0x35a>
    38aa:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    38ac:	ldr	r3, [pc, #236]	; (399c <usb_isr+0x2e0>)
    38ae:	ldrh	r2, [r3, #0]
    38b0:	cmp.w	r2, #1280	; 0x500
    38b4:	bne.n	38d6 <usb_isr+0x21a>
			setup.bRequest = 0;
    38b6:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    38b8:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    38ba:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    38bc:	ldr	r3, [pc, #248]	; (39b8 <usb_isr+0x2fc>)
    38be:	strb	r2, [r3, #0]
    38c0:	b.n	38d6 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    38c2:	ldr	r2, [pc, #216]	; (399c <usb_isr+0x2e0>)
    38c4:	ldrh	r0, [r2, #0]
    38c6:	movw	r2, #8225	; 0x2021
    38ca:	cmp	r0, r2
    38cc:	beq.w	3a20 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    38d0:	ldr	r2, [pc, #180]	; (3988 <usb_isr+0x2cc>)
    38d2:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    38d6:	ldr	r2, [pc, #228]	; (39bc <usb_isr+0x300>)
    38d8:	movs	r3, #1
    38da:	strb	r3, [r2, #0]
    38dc:	b.n	3750 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    38de:	ldr	r2, [pc, #168]	; (3988 <usb_isr+0x2cc>)
    38e0:	ldr	r3, [pc, #168]	; (398c <usb_isr+0x2d0>)
    38e2:	tst.w	r9, #8
    38e6:	it	ne
    38e8:	movne	r3, r2
    38ea:	str.w	r3, [r7, r8, lsl #3]
    38ee:	b.n	3750 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    38f0:	bl	349c <usb_free>
				packet = tx_first[endpoint];
    38f4:	ldr	r2, [pc, #200]	; (39c0 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    38f6:	ldr	r1, [pc, #204]	; (39c4 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    38f8:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    38fc:	cmp	r3, #0
    38fe:	beq.w	3b88 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3902:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3904:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3906:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    390a:	add.w	r2, r3, #8
    390e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    3912:	cmp	r4, #3
    3914:	bhi.n	3922 <usb_isr+0x266>
    3916:	tbb	[pc, r4]
    391a:	.short	0x022c
    391c:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    391e:	movs	r2, #2
    3920:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    3922:	ldrh	r2, [r3, #0]
    3924:	tst.w	r9, #8
    3928:	ite	eq
    392a:	moveq	r3, #136	; 0x88
    392c:	movne	r3, #200	; 0xc8
    392e:	orr.w	r3, r3, r2, lsl #16
    3932:	str.w	r3, [r7, r8, lsl #3]
    3936:	b.n	3750 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3938:	lsls	r0, r4, #31
    393a:	bmi.w	3b24 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    393e:	lsls	r1, r4, #24
    3940:	bmi.w	3ba4 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3944:	lsls	r2, r4, #30
    3946:	bpl.n	3956 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    3948:	ldr	r2, [pc, #124]	; (39c8 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    394a:	ldr	r1, [pc, #128]	; (39cc <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    394c:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    394e:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3950:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    3952:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3954:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    3956:	lsls	r3, r4, #27
    3958:	bpl.n	3960 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    395a:	ldr	r3, [pc, #112]	; (39cc <usb_isr+0x310>)
    395c:	movs	r2, #16
    395e:	strb	r2, [r3, #0]
	}

}
    3960:	add	sp, #28
    3962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3966:	movs	r2, #4
    3968:	strb	r2, [r1, r6]
						break;
    396a:	b.n	3922 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    396c:	movs	r2, #5
    396e:	strb	r2, [r1, r6]
						break;
    3970:	b.n	3922 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3972:	movs	r2, #3
    3974:	strb	r2, [r1, r6]
						break;
    3976:	b.n	3922 <usb_isr+0x266>
    3978:	.word	0x1fff0000
    397c:	.word	0x1fff19d0
    3980:	.word	0x1fff1978
    3984:	.word	0x1fff1ef8
    3988:	.word	0x004000c8
    398c:	.word	0x00400088
    3990:	.word	0x1fff1a64
    3994:	.word	0x1fff19e5
    3998:	.word	0x1fff18f8
    399c:	.word	0x1fff1a50
    39a0:	.word	0x1fff1974
    39a4:	.word	0x1fff19e4
    39a8:	.word	0x400720c0
    39ac:	.word	0x1fff1a5c
    39b0:	.word	0x1fff198c
    39b4:	.word	0x1fff1a58
    39b8:	.word	0x40072098
    39bc:	.word	0x40072094
    39c0:	.word	0x1fff1a28
    39c4:	.word	0x1fff1a68
    39c8:	.word	0x40072088
    39cc:	.word	0x40072080
    39d0:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    39d4:	movw	r4, #8225	; 0x2021
    39d8:	cmp	r1, r4
    39da:	beq.w	3b16 <usb_isr+0x45a>
    39de:	bhi.n	3a74 <usb_isr+0x3b8>
    39e0:	cmp.w	r1, #2176	; 0x880
    39e4:	beq.w	3c7a <usb_isr+0x5be>
    39e8:	cmp.w	r1, #2304	; 0x900
    39ec:	bne.w	3bfa <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    39f0:	ldr	r2, [pc, #712]	; (3cbc <usb_isr+0x600>)
    39f2:	ldr	r4, [pc, #716]	; (3cc0 <usb_isr+0x604>)
    39f4:	ldrb	r1, [r5, #2]
    39f6:	strb	r1, [r2, #0]
    39f8:	add.w	r5, r4, #160	; 0xa0
    39fc:	b.n	3a06 <usb_isr+0x34a>
    39fe:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3a00:	cmp	r5, r4
    3a02:	beq.w	3d18 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    3a06:	ldr	r3, [r4, #32]
    3a08:	lsls	r1, r3, #24
    3a0a:	bpl.n	39fe <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3a0c:	ldr	r0, [r4, #36]	; 0x24
    3a0e:	subs	r0, #8
    3a10:	bl	349c <usb_free>
    3a14:	b.n	39fe <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3a16:	cmp.w	lr, #64	; 0x40
    3a1a:	it	ne
    3a1c:	movne	r2, #0
    3a1e:	b.n	38aa <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3a20:	ldr	r2, [pc, #672]	; (3cc4 <usb_isr+0x608>)
    3a22:	ldrb	r5, [r1, #0]
    3a24:	ldrb	r0, [r1, #1]
    3a26:	strb	r5, [r2, #0]
    3a28:	strb	r0, [r2, #1]
    3a2a:	ldrb	r5, [r1, #2]
    3a2c:	ldrb	r0, [r1, #3]
    3a2e:	strb	r5, [r2, #2]
    3a30:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3a32:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3a34:	ldrb	r5, [r1, #4]
    3a36:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3a38:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3a3a:	ldrb	r5, [r1, #5]
    3a3c:	ldrb	r1, [r1, #6]
    3a3e:	strb	r5, [r2, #5]
    3a40:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3a42:	beq.w	3c72 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a46:	ldr	r1, [pc, #640]	; (3cc8 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a48:	ldr	r6, [pc, #640]	; (3ccc <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a4a:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a4c:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3a4e:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a52:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a54:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3a58:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a5a:	ite	eq
    3a5c:	moveq	r1, #136	; 0x88
    3a5e:	movne	r1, #200	; 0xc8
    3a60:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a64:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3a68:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a6c:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3a6e:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a70:	str	r1, [r2, #4]
    3a72:	b.n	38d0 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3a74:	movw	r4, #8737	; 0x2221
    3a78:	cmp	r1, r4
    3a7a:	bne.w	3e8e <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3a7e:	ldr.w	ip, [pc, #656]	; 3d10 <usb_isr+0x654>
    3a82:	ldr	r3, [pc, #588]	; (3cd0 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3a84:	ldr	r1, [pc, #588]	; (3cd4 <usb_isr+0x618>)
    3a86:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3a88:	ldr.w	r5, [ip]
    3a8c:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3a8e:	str	r0, [sp, #4]
    3a90:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3a92:	movs	r0, #0
    3a94:	str	r0, [sp, #8]
    3a96:	mov	r8, r0
    3a98:	mov	ip, r0
    3a9a:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a9c:	ldr	r1, [pc, #552]	; (3cc8 <usb_isr+0x60c>)
    3a9e:	ldrb	r5, [r1, #0]
    3aa0:	orr.w	lr, r5, #2
    3aa4:	add.w	r3, r9, lr, lsl #3
    3aa8:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3aaa:	ldr	r3, [sp, #4]
    3aac:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3aae:	ldr	r3, [sp, #12]
    3ab0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ab2:	ite	eq
    3ab4:	moveq	r4, #136	; 0x88
    3ab6:	movne	r4, #200	; 0xc8
    3ab8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3abc:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ac0:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3ac4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3ac6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ac8:	ldr.w	lr, [pc, #500]	; 3cc0 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    3acc:	ldr	r3, [pc, #508]	; (3ccc <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    3ace:	ldr.w	r8, [pc, #504]	; 3cc8 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3ad2:	cmp	r0, #0
    3ad4:	bne.w	3c08 <usb_isr+0x54c>
    3ad8:	cmp.w	ip, #64	; 0x40
    3adc:	bne.n	3b16 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3ade:	orr.w	ip, r4, #2
    3ae2:	add.w	r3, r9, ip, lsl #3
    3ae6:	ldr	r4, [sp, #8]
    3ae8:	ldr.w	lr, [pc, #468]	; 3cc0 <usb_isr+0x604>
    3aec:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3aee:	cmp	r2, #0
    3af0:	bne.w	3c34 <usb_isr+0x578>
    3af4:	lsls	r2, r0, #16
    3af6:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3afa:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3afe:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b02:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3b04:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3b06:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b08:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3b0a:	cmp	r0, #64	; 0x40
    3b0c:	bne.n	3b16 <usb_isr+0x45a>
    3b0e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3b10:	ldr	r2, [pc, #452]	; (3cd8 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3b12:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3b14:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3b16:	ldr	r2, [pc, #452]	; (3cdc <usb_isr+0x620>)
    3b18:	movs	r3, #1
    3b1a:	strb	r3, [r2, #0]
    3b1c:	b.n	38d6 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3b1e:	bl	287c <usb_serial_flush_callback>
    3b22:	b.n	3790 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3b24:	ldr	r3, [pc, #408]	; (3cc0 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3b26:	ldr	r0, [pc, #436]	; (3cdc <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3b28:	ldr	r1, [pc, #412]	; (3cc8 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3b2a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3b2c:	mov.w	lr, #2
    3b30:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b34:	ldr	r7, [pc, #424]	; (3ce0 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3b36:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3b38:	ldr	r1, [pc, #424]	; (3ce4 <usb_isr+0x628>)
    3b3a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3b3c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3b3e:	ldr	r6, [pc, #424]	; (3ce8 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3b40:	ldr	r5, [pc, #424]	; (3cec <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3b42:	ldr	r4, [pc, #428]	; (3cf0 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3b44:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b46:	movs	r1, #13
    3b48:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3b4a:	movs	r1, #255	; 0xff
    3b4c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3b4e:	ldr.w	lr, [pc, #452]	; 3d14 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3b52:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3b54:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3b56:	ldr	r5, [pc, #412]	; (3cf4 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3b58:	ldr	r2, [pc, #412]	; (3cf8 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3b5a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3b5e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3b60:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3b62:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3b66:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3b68:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3b6a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3b6c:	add	sp, #28
    3b6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3b72:	ldr	r2, [pc, #392]	; (3cfc <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3b74:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3b78:	ldrb	r3, [r2, #0]
    3b7a:	adds	r3, #1
    3b7c:	strb	r3, [r2, #0]
    3b7e:	b.n	3750 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3b80:	str.w	r0, [r3, r6, lsl #2]
    3b84:	ldr	r5, [pc, #376]	; (3d00 <usb_isr+0x644>)
    3b86:	b.n	371e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3b88:	ldrb	r3, [r1, r6]
    3b8a:	cmp	r3, #3
    3b8c:	bhi.n	3c64 <usb_isr+0x5a8>
    3b8e:	add	r2, pc, #4	; (adr r2, 3b94 <usb_isr+0x4d8>)
    3b90:	ldr.w	pc, [r2, r3, lsl #2]
    3b94:	.word	0x00003751
    3b98:	.word	0x00003751
    3b9c:	.word	0x00003be9
    3ba0:	.word	0x00003be3
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3ba4:	ldr	r1, [pc, #312]	; (3ce0 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    3ba6:	ldr	r3, [pc, #324]	; (3cec <usb_isr+0x630>)
    3ba8:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3baa:	movs	r0, #13
    3bac:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3bae:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3bb0:	lsls	r2, r4, #30
    3bb2:	bpl.w	3956 <usb_isr+0x29a>
    3bb6:	b.n	3948 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3bb8:	movw	r2, #770	; 0x302
    3bbc:	cmp	r1, r2
    3bbe:	bne.w	3e7e <usb_isr+0x7c2>
    3bc2:	ldrh	r1, [r5, #4]
    3bc4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3bc8:	cmp	r1, #5
    3bca:	bhi.n	3bfa <usb_isr+0x53e>
    3bcc:	ldrh	r2, [r5, #2]
    3bce:	cbnz	r2, 3bfa <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3bd0:	ldr	r4, [pc, #268]	; (3ce0 <usb_isr+0x624>)
    3bd2:	str	r0, [sp, #4]
    3bd4:	lsls	r1, r1, #2
    3bd6:	add	r4, r1
    3bd8:	ldrb	r1, [r4, #0]
    3bda:	orr.w	r1, r1, #2
    3bde:	strb	r1, [r4, #0]
    3be0:	b.n	3a92 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3be2:	movs	r3, #1
    3be4:	strb	r3, [r1, r6]
						break;
    3be6:	b.n	3750 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3be8:	movs	r3, #0
    3bea:	strb	r3, [r1, r6]
						break;
    3bec:	b.n	3750 <usb_isr+0x94>
    3bee:	ldrh	r1, [r5, #4]
    3bf0:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3bf4:	cmp	r1, #5
    3bf6:	bls.w	3e98 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3bfa:	ldr	r2, [pc, #228]	; (3ce0 <usb_isr+0x624>)
    3bfc:	movs	r3, #15
    3bfe:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3c00:	ldr	r2, [pc, #216]	; (3cdc <usb_isr+0x620>)
    3c02:	movs	r3, #1
    3c04:	strb	r3, [r2, #0]
    3c06:	b.n	38d6 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3c08:	cmp	r0, #64	; 0x40
    3c0a:	bls.w	3ade <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3c0e:	orr.w	r4, r4, #2
    3c12:	add.w	r1, lr, r4, lsl #3
    3c16:	ldr	r6, [sp, #8]
    3c18:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c1a:	cbz	r2, 3c4c <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3c1c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c20:	ldr	r2, [pc, #224]	; (3d04 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3c22:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c24:	mov	r3, r6
    3c26:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3c28:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c2c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c2e:	str.w	r2, [lr, r4, lsl #3]
    3c32:	b.n	3b10 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3c34:	ldrb.w	r3, [sp, #4]
    3c38:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c3a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c3c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3c3e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c40:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c44:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c46:	str.w	r2, [lr, ip, lsl #3]
    3c4a:	b.n	3b0a <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3c4c:	ldrb.w	r1, [sp, #4]
    3c50:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c52:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c54:	ldr	r2, [pc, #140]	; (3ce4 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3c56:	strb.w	r5, [r8]
    3c5a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c5c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c5e:	str.w	r2, [lr, r4, lsl #3]
    3c62:	b.n	3b10 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3c64:	tst.w	r9, #8
    3c68:	ite	eq
    3c6a:	moveq	r3, #2
    3c6c:	movne	r3, #3
    3c6e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3c70:	b.n	3750 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3c72:	ldr	r2, [pc, #148]	; (3d08 <usb_isr+0x64c>)
    3c74:	movs	r1, #15
    3c76:	strb	r1, [r2, #0]
    3c78:	b.n	3a46 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3c7a:	ldr	r2, [pc, #64]	; (3cbc <usb_isr+0x600>)
    3c7c:	ldr	r4, [pc, #140]	; (3d0c <usb_isr+0x650>)
    3c7e:	ldrb	r2, [r2, #0]
    3c80:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3c82:	ldrh	r2, [r5, #6]
    3c84:	cmp	r2, r0
    3c86:	bcs.w	404c <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3c8a:	ldr	r1, [pc, #60]	; (3cc8 <usb_isr+0x60c>)
    3c8c:	ldrb	r5, [r1, #0]
    3c8e:	cmp	r2, #64	; 0x40
    3c90:	mov	ip, r2
    3c92:	orr.w	lr, r5, #2
    3c96:	it	cs
    3c98:	movcs.w	ip, #64	; 0x40
    3c9c:	add.w	r3, r4, ip
    3ca0:	add.w	r0, r9, lr, lsl #3
    3ca4:	str	r3, [sp, #8]
    3ca6:	movs	r3, #1
    3ca8:	str	r4, [r0, #4]
    3caa:	mov.w	r8, ip, lsl #16
    3cae:	rsb	r0, ip, r2
    3cb2:	str	r3, [sp, #4]
    3cb4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3cb6:	movs	r4, #200	; 0xc8
    3cb8:	b.n	3ab8 <usb_isr+0x3fc>
    3cba:	nop
    3cbc:	.word	0x1fff1a64
    3cc0:	.word	0x1fff0000
    3cc4:	.word	0x1fff1dc0
    3cc8:	.word	0x1fff1a58
    3ccc:	.word	0x1fff19e4
    3cd0:	.word	0x1fff1dc8
    3cd4:	.word	0x1fff1908
    3cd8:	.word	0x1fff198c
    3cdc:	.word	0x40072094
    3ce0:	.word	0x400720c0
    3ce4:	.word	0x00400088
    3ce8:	.word	0x40072088
    3cec:	.word	0x40072080
    3cf0:	.word	0x40072098
    3cf4:	.word	0x1fff1990
    3cf8:	.word	0x1fff19e8
    3cfc:	.word	0x1fff1a59
    3d00:	.word	0x1fff1978
    3d04:	.word	0x004000c8
    3d08:	.word	0x1fff19e5
    3d0c:	.word	0x1fff1a5c
    3d10:	.word	0x1fff1910
    3d14:	.word	0x4007208c
    3d18:	ldr	r4, [pc, #704]	; (3fdc <usb_isr+0x920>)
    3d1a:	ldr	r2, [pc, #708]	; (3fe0 <usb_isr+0x924>)
    3d1c:	ldr	r1, [pc, #708]	; (3fe4 <usb_isr+0x928>)
    3d1e:	ldr	r0, [pc, #712]	; (3fe8 <usb_isr+0x92c>)
    3d20:	ldr	r5, [pc, #712]	; (3fec <usb_isr+0x930>)
    3d22:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3d24:	movs	r3, #0
    3d26:	ldr	r4, [pc, #712]	; (3ff0 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3d28:	str	r4, [sp, #8]
    3d2a:	str	r6, [sp, #20]
    3d2c:	str	r5, [sp, #12]
    3d2e:	mov	r8, r0
    3d30:	mov	r4, r3
    3d32:	str	r7, [sp, #16]
    3d34:	mov	r6, r2
    3d36:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3d38:	ldr	r0, [r6, #0]
			while (p) {
    3d3a:	cbz	r0, 3d48 <usb_isr+0x68c>
				n = p->next;
    3d3c:	ldr	r7, [r0, #4]
				usb_free(p);
    3d3e:	bl	349c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3d42:	mov	r0, r7
    3d44:	cmp	r7, #0
    3d46:	bne.n	3d3c <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3d48:	movs	r3, #0
    3d4a:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3d4c:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3d4e:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3d50:	mov	r2, r3
    3d52:	movs	r3, #0
    3d54:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3d58:	cbz	r0, 3d66 <usb_isr+0x6aa>
				n = p->next;
    3d5a:	ldr	r7, [r0, #4]
				usb_free(p);
    3d5c:	bl	349c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3d60:	mov	r0, r7
    3d62:	cmp	r7, #0
    3d64:	bne.n	3d5a <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3d66:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3d68:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3d6a:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3d6c:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3d6e:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3d72:	ldr	r2, [sp, #8]
    3d74:	mov.w	r1, #0
			switch (tx_state[i]) {
    3d78:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3d7a:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3d7e:	cmp	r3, #3
    3d80:	bhi.n	3d92 <usb_isr+0x6d6>
    3d82:	tbb	[pc, r3]
    3d86:	.short	0x0258
    3d88:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3d8a:	ldr	r3, [sp, #4]
    3d8c:	mov.w	r2, #1
    3d90:	strb	r2, [r3, #0]
    3d92:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3d94:	adds	r4, #1
    3d96:	adds	r3, #1
    3d98:	cmp	r4, #5
    3d9a:	add.w	r6, r6, #4
    3d9e:	add.w	r5, r5, #4
    3da2:	str	r3, [sp, #4]
    3da4:	bne.n	3d38 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3da6:	ldr	r4, [pc, #588]	; (3ff4 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3da8:	ldr	r5, [pc, #588]	; (3ff8 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3daa:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3dac:	ldr	r3, [pc, #588]	; (3ffc <usb_isr+0x940>)
    3dae:	ldr	r7, [sp, #16]
    3db0:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3db2:	movs	r1, #0
    3db4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3db6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3db8:	lsls	r2, r2, #28
    3dba:	bmi.n	3eb2 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3dbc:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3dbe:	ldr	r1, [pc, #576]	; (4000 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dc0:	ldr.w	r8, [pc, #588]	; 4010 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3dc4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dc6:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dc8:	mov.w	r1, #0
    3dcc:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3dd0:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dd4:	bmi.w	3f5e <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3dd8:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3dda:	ldr	r1, [pc, #552]	; (4004 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3ddc:	ldr.w	r8, [pc, #560]	; 4010 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3de0:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3de2:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3de4:	mov.w	r1, #0
    3de8:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3dec:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3df0:	bmi.w	3f36 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3df4:	ldr	r1, [pc, #528]	; (4008 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3df6:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3df8:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dfa:	movs	r1, #0
    3dfc:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3e00:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e04:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e06:	ldr.w	r8, [pc, #520]	; 4010 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e0a:	bmi.n	3f08 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3e0c:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3e0e:	ldr	r1, [pc, #508]	; (400c <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e10:	ldr	r4, [pc, #508]	; (4010 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3e12:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e14:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e16:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e18:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3e1c:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e20:	bmi.n	3ede <usb_isr+0x822>
    3e22:	ldrb	r3, [r6, #0]
    3e24:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e26:	movs	r1, #0
    3e28:	eor.w	r2, r3, #1
    3e2c:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3e30:	str.w	r1, [r9, #184]	; 0xb8
    3e34:	b.n	3a92 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3e36:	ldr	r3, [sp, #4]
    3e38:	mov.w	r2, #0
    3e3c:	strb	r2, [r3, #0]
    3e3e:	b.n	3d92 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3e40:	ldr	r2, [pc, #464]	; (4014 <usb_isr+0x958>)
    3e42:	ldr	r4, [r2, #4]
    3e44:	cmp	r4, #0
    3e46:	beq.w	3bfa <usb_isr+0x53e>
    3e4a:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3e4c:	ldrh.w	lr, [r5, #4]
    3e50:	b.n	3e5c <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3e52:	adds	r2, #12
			if (list->addr == NULL) break;
    3e54:	ldr	r4, [r2, #4]
    3e56:	cmp	r4, #0
    3e58:	beq.w	3bfa <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3e5c:	ldrh	r3, [r2, #0]
    3e5e:	cmp	r3, r0
    3e60:	bne.n	3e52 <usb_isr+0x796>
    3e62:	ldrh	r3, [r2, #2]
    3e64:	cmp	r3, lr
    3e66:	bne.n	3e52 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3e68:	lsrs	r0, r0, #8
    3e6a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3e6c:	ite	eq
    3e6e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3e70:	ldrhne	r0, [r2, #8]
    3e72:	b.n	3c82 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3e74:	ldr	r4, [pc, #416]	; (4018 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3e76:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3e78:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3e7a:	strb	r2, [r4, #1]
    3e7c:	b.n	3c82 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3e7e:	cmp.w	r1, #1280	; 0x500
    3e82:	bne.w	3bfa <usb_isr+0x53e>
    3e86:	movs	r3, #1
    3e88:	movs	r2, #0
    3e8a:	str	r3, [sp, #4]
    3e8c:	b.n	3a92 <usb_isr+0x3d6>
    3e8e:	movw	r2, #8993	; 0x2321
    3e92:	cmp	r1, r2
    3e94:	beq.n	3e86 <usb_isr+0x7ca>
    3e96:	b.n	3bfa <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3e98:	ldrh	r2, [r5, #2]
    3e9a:	cmp	r2, #0
    3e9c:	bne.w	3bfa <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3ea0:	ldr	r4, [pc, #376]	; (401c <usb_isr+0x960>)
    3ea2:	str	r0, [sp, #4]
    3ea4:	lsls	r1, r1, #2
    3ea6:	add	r4, r1
    3ea8:	ldrb	r1, [r4, #0]
    3eaa:	bic.w	r1, r1, #2
    3eae:	strb	r1, [r4, #0]
    3eb0:	b.n	3a92 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3eb2:	bl	345c <usb_malloc>
				if (p) {
    3eb6:	cmp	r0, #0
    3eb8:	beq.w	4028 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3ebc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ebe:	ldr	r2, [pc, #352]	; (4020 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3ec0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ec4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3ec8:	bl	345c <usb_malloc>
				if (p) {
    3ecc:	cmp	r0, #0
    3ece:	beq.n	3fd0 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3ed0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ed2:	ldr	r2, [pc, #336]	; (4024 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3ed4:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ed8:	str.w	r2, [r9, #40]	; 0x28
    3edc:	b.n	3dbc <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3ede:	bl	345c <usb_malloc>
				if (p) {
    3ee2:	cmp	r0, #0
    3ee4:	beq.n	3f94 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3ee6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ee8:	ldr	r2, [pc, #308]	; (4020 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3eea:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3eee:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3ef2:	bl	345c <usb_malloc>
				if (p) {
    3ef6:	cmp	r0, #0
    3ef8:	beq.n	3f88 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3efa:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3efc:	ldr	r2, [pc, #292]	; (4024 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3efe:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f02:	str.w	r2, [r9, #168]	; 0xa8
    3f06:	b.n	3e22 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f08:	bl	345c <usb_malloc>
				if (p) {
    3f0c:	cmp	r0, #0
    3f0e:	beq.w	4040 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f12:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f14:	ldr	r2, [pc, #264]	; (4020 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f16:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f1a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f1e:	bl	345c <usb_malloc>
				if (p) {
    3f22:	cmp	r0, #0
    3f24:	beq.w	4034 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3f28:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f2a:	ldr	r2, [pc, #248]	; (4024 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f2c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f30:	str.w	r2, [r9, #136]	; 0x88
    3f34:	b.n	3e0c <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f36:	bl	345c <usb_malloc>
				if (p) {
    3f3a:	cmp	r0, #0
    3f3c:	beq.n	3fc4 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f3e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f40:	ldr	r2, [pc, #220]	; (4020 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f42:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f46:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f4a:	bl	345c <usb_malloc>
				if (p) {
    3f4e:	cbz	r0, 3fb8 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3f50:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f52:	ldr	r2, [pc, #208]	; (4024 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f54:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f58:	str.w	r2, [r9, #104]	; 0x68
    3f5c:	b.n	3df4 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f5e:	bl	345c <usb_malloc>
				if (p) {
    3f62:	cbz	r0, 3fac <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f64:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f66:	ldr	r2, [pc, #184]	; (4020 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f68:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f6c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f70:	bl	345c <usb_malloc>
				if (p) {
    3f74:	cbz	r0, 3fa0 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3f76:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f78:	ldr	r2, [pc, #168]	; (4024 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f7a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f7e:	str.w	r2, [r9, #72]	; 0x48
    3f82:	b.n	3dd8 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3f84:	movs	r0, #2
    3f86:	b.n	3c82 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3f88:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3f8a:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3f8e:	adds	r2, #1
    3f90:	strb	r2, [r5, #0]
    3f92:	b.n	3e22 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3f94:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3f96:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3f9a:	adds	r2, #1
    3f9c:	strb	r2, [r5, #0]
    3f9e:	b.n	3ef2 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3fa0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3fa2:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3fa6:	adds	r2, #1
    3fa8:	strb	r2, [r5, #0]
    3faa:	b.n	3dd8 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3fac:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3fae:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3fb2:	adds	r2, #1
    3fb4:	strb	r2, [r5, #0]
    3fb6:	b.n	3f70 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3fb8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3fba:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3fbe:	adds	r2, #1
    3fc0:	strb	r2, [r5, #0]
    3fc2:	b.n	3df4 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3fc4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3fc6:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3fca:	adds	r2, #1
    3fcc:	strb	r2, [r5, #0]
    3fce:	b.n	3f4a <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3fd0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3fd2:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3fd6:	adds	r2, #1
    3fd8:	strb	r2, [r5, #0]
    3fda:	b.n	3dbc <usb_isr+0x700>
    3fdc:	.word	0x1fff1a68
    3fe0:	.word	0x1fff19d0
    3fe4:	.word	0x1fff1a28
    3fe8:	.word	0x1fff1a3c
    3fec:	.word	0x1fff1978
    3ff0:	.word	0x1fff1ef8
    3ff4:	.word	0x00005948
    3ff8:	.word	0x1fff1a59
    3ffc:	.word	0x400720c4
    4000:	.word	0x400720c8
    4004:	.word	0x400720cc
    4008:	.word	0x400720d0
    400c:	.word	0x400720d4
    4010:	.word	0x1fff0000
    4014:	.word	0x00005950
    4018:	.word	0x1fff1a5c
    401c:	.word	0x400720c0
    4020:	.word	0x00400088
    4024:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4028:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    402a:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    402e:	adds	r2, #1
    4030:	strb	r2, [r5, #0]
    4032:	b.n	3ec8 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4034:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4036:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    403a:	adds	r2, #1
    403c:	strb	r2, [r5, #0]
    403e:	b.n	3e0c <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4040:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4042:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    4046:	adds	r2, #1
    4048:	strb	r2, [r5, #0]
    404a:	b.n	3f1e <usb_isr+0x862>
    404c:	cmp	r0, #64	; 0x40
    404e:	mov	ip, r0
    4050:	it	cs
    4052:	movcs.w	ip, #64	; 0x40
    4056:	add.w	r3, r4, ip
    405a:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    405c:	movs	r3, #1
    405e:	rsb	r0, ip, r0
    4062:	mov.w	r8, ip, lsl #16
    4066:	movs	r2, #0
    4068:	str	r3, [sp, #4]
    406a:	b.n	3a9c <usb_isr+0x3e0>

0000406c <usb_init>:
}



void usb_init(void)
{
    406c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4070:	ldr	r4, [pc, #156]	; (4110 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4072:	bl	493c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4076:	movs	r2, #0
    4078:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    407c:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    407e:	str	r2, [r3, #0]
		table[i].addr = 0;
    4080:	str	r2, [r3, #4]
    4082:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    4084:	cmp	r3, r0
		table[i].desc = 0;
    4086:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    408a:	bne.n	407e <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    408c:	ldr	r0, [pc, #132]	; (4114 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    408e:	ldr	r2, [pc, #136]	; (4118 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4090:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    4092:	ldr.w	lr, [pc, #156]	; 4130 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    4096:	ldr	r6, [pc, #132]	; (411c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4098:	ldr	r5, [pc, #132]	; (4120 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    409a:	ldr	r7, [pc, #136]	; (4124 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    409c:	ldr.w	ip, [pc, #148]	; 4134 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    40a0:	ldr.w	r8, [pc, #148]	; 4138 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    40a4:	orr.w	r3, r3, #262144	; 0x40000
    40a8:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    40aa:	ldr	r3, [r2, #0]
    40ac:	orr.w	r3, r3, #50331648	; 0x3000000
    40b0:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    40b2:	movs	r3, #3
    40b4:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    40b8:	movs	r3, #160	; 0xa0
    40ba:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    40bc:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    40c0:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40c4:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    40c8:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40ca:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    40cc:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    40d0:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    40d2:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40d4:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    40d6:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40d8:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40da:	ldr	r5, [pc, #76]	; (4128 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    40dc:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    40e0:	ldr	r0, [pc, #72]	; (412c <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    40e2:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    40e6:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    40e8:	movs	r3, #1
    40ea:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    40ee:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    40f2:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40f6:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    40f8:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    40fa:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40fe:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4100:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    4102:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    4106:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    410a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    410e:	nop
    4110:	.word	0x1fff0000
    4114:	.word	0x40048034
    4118:	.word	0x4000d800
    411c:	.word	0x40072140
    4120:	.word	0x4007209c
    4124:	.word	0x400720b0
    4128:	.word	0xe000e435
    412c:	.word	0xe000e104
    4130:	.word	0x40072144
    4134:	.word	0x40072080
    4138:	.word	0x40072088

0000413c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    413c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    413e:	ldr	r4, [pc, #176]	; (41f0 <yield+0xb4>)
    4140:	ldrb	r3, [r4, #0]
    4142:	cbz	r3, 4146 <yield+0xa>
    4144:	pop	{r3, r4, r5, pc}
	running = 1;
    4146:	movs	r3, #1
    4148:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    414a:	bl	2668 <usb_serial_available>
	if (Serial.available()) serialEvent();
    414e:	cmp	r0, #0
    4150:	bne.n	41d8 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    4152:	bl	470c <serial_available>
	if (Serial1.available()) serialEvent1();
    4156:	cmp	r0, #0
    4158:	bne.n	41d2 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    415a:	bl	43f4 <serial2_available>
	if (Serial2.available()) serialEvent2();
    415e:	cmp	r0, #0
    4160:	bne.n	41cc <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    4162:	bl	4a0c <serial3_available>
	if (Serial3.available()) serialEvent3();
    4166:	cbnz	r0, 41c6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    4168:	bl	4520 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    416c:	cbnz	r0, 41c0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    416e:	bl	42fc <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    4172:	cbnz	r0, 41ba <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    4174:	bl	4838 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    4178:	cbnz	r0, 41b4 <yield+0x78>
#endif
	running = 0;
    417a:	movs	r3, #0
    417c:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    417e:	mrs	r3, IPSR
		if (ipsr != 0) return;
    4182:	cmp	r3, #0
    4184:	bne.n	4144 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4186:	mrs	r1, PRIMASK
		__disable_irq();
    418a:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    418c:	ldr	r3, [pc, #100]	; (41f4 <yield+0xb8>)
    418e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4190:	cbz	r0, 41de <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    4192:	ldr	r4, [pc, #100]	; (41f8 <yield+0xbc>)
    4194:	ldrb	r2, [r4, #0]
    4196:	cbnz	r2, 41de <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    4198:	ldr	r5, [r0, #20]
    419a:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    419c:	movs	r3, #1
    419e:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    41a0:	cbz	r5, 41e6 <yield+0xaa>
			firstYield->_prev = nullptr;
    41a2:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    41a4:	cbnz	r1, 41a8 <yield+0x6c>
    41a6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    41a8:	movs	r5, #0
    41aa:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    41ac:	ldr	r3, [r0, #8]
    41ae:	blx	r3
		runningFromYield = false;
    41b0:	strb	r5, [r4, #0]
    41b2:	b.n	4144 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    41b4:	bl	42f8 <serialEvent6()>
    41b8:	b.n	417a <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    41ba:	bl	4200 <serialEvent5()>
    41be:	b.n	4174 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    41c0:	bl	42e4 <serialEvent4()>
    41c4:	b.n	416e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    41c6:	bl	4b08 <serialEvent3()>
    41ca:	b.n	4168 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    41cc:	bl	42e0 <serialEvent2()>
    41d0:	b.n	4162 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    41d2:	bl	4b04 <serialEvent1()>
    41d6:	b.n	415a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    41d8:	bl	422c <serialEvent()>
    41dc:	b.n	4152 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    41de:	cmp	r1, #0
    41e0:	bne.n	4144 <yield+0x8>
    41e2:	cpsie	i
    41e4:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    41e6:	ldr	r3, [pc, #20]	; (41fc <yield+0xc0>)
    41e8:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    41ea:	cmp	r1, #0
    41ec:	bne.n	41a8 <yield+0x6c>
    41ee:	b.n	41a6 <yield+0x6a>
    41f0:	.word	0x1fff1a6d
    41f4:	.word	0x1fff1d80
    41f8:	.word	0x1fff1d84
    41fc:	.word	0x1fff1d7c

00004200 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    4200:	bx	lr
    4202:	nop

00004204 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    4204:	b.w	2684 <usb_serial_flush_input>

00004208 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    4208:	b.w	2638 <usb_serial_peekchar>

0000420c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    420c:	b.w	25f0 <usb_serial_getchar>

00004210 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4210:	b.w	2668 <usb_serial_available>

00004214 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4214:	b.w	2824 <usb_serial_flush_output>

00004218 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4218:	b.w	27dc <usb_serial_write_buffer_free>

0000421c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    421c:	mov	r0, r1
    421e:	mov	r1, r2
    4220:	b.w	26bc <usb_serial_write>

00004224 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4224:	mov	r0, r1
    4226:	b.w	27c4 <usb_serial_putchar>
    422a:	nop

0000422c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    422c:	bx	lr
    422e:	nop

00004230 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4230:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    4232:	ldr	r2, [pc, #24]	; (424c <Print::println()+0x1c>)
	return write(buf, 2);
    4234:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4236:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    4238:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    423a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    423c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    423e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    4242:	movs	r2, #2
    4244:	blx	r3
}
    4246:	add	sp, #12
    4248:	ldr.w	pc, [sp], #4
    424c:	.word	0x00005944

00004250 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    4250:	push	{r4, r5, r6, r7, lr}
    4252:	mov	r7, r0
    4254:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    4256:	cmp	r2, #0
    4258:	beq.n	42c2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    425a:	cmp	r2, #1
    425c:	it	eq
    425e:	moveq	r2, #10
	}


	if (n == 0) {
    4260:	cbz	r1, 42b8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    4262:	movs	r4, #33	; 0x21
    4264:	b.n	4268 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    4266:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    4268:	udiv	r5, r1, r2
    426c:	mls	r1, r2, r5, r1
    4270:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4272:	cmp	r1, #9
    4274:	add.w	r1, r0, #48	; 0x30
    4278:	it	ls
    427a:	uxtbls	r0, r1
    427c:	add	r1, sp, #40	; 0x28
    427e:	it	hi
    4280:	addhi	r0, #55	; 0x37
    4282:	add	r1, r4
    4284:	it	hi
    4286:	uxtbhi	r0, r0
    4288:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    428c:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    428e:	mov	r1, r5
    4290:	cmp	r5, #0
    4292:	bne.n	4266 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    4294:	cbz	r3, 42a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    4296:	subs	r4, #1
    4298:	uxtb	r4, r4
		buf[i] = '-';
    429a:	add	r3, sp, #40	; 0x28
    429c:	add	r3, r4
    429e:	movs	r2, #45	; 0x2d
    42a0:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    42a4:	ldr	r3, [r7, #0]
    42a6:	add	r2, sp, #4
    42a8:	adds	r1, r2, r4
    42aa:	ldr	r3, [r3, #4]
    42ac:	mov	r0, r7
    42ae:	rsb	r2, r4, #34	; 0x22
    42b2:	blx	r3
}
    42b4:	add	sp, #44	; 0x2c
    42b6:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    42b8:	movs	r2, #48	; 0x30
    42ba:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    42be:	movs	r4, #33	; 0x21
    42c0:	b.n	4294 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    42c2:	ldr	r3, [r0, #0]
    42c4:	uxtb	r1, r1
    42c6:	ldr	r3, [r3, #0]
    42c8:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    42ca:	add	sp, #44	; 0x2c
    42cc:	pop	{r4, r5, r6, r7, pc}
    42ce:	nop

000042d0 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    42d0:	cmp	r1, #0
		sign = '-';
		n = -n;
    42d2:	itte	lt
    42d4:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    42d6:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    42d8:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    42da:	movs	r2, #10
    42dc:	b.w	4250 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000042e0 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    42e0:	bx	lr
    42e2:	nop

000042e4 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    42e4:	bx	lr
    42e6:	nop

000042e8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    42e8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    42ea:	bl	4c4 <setup>
	while (1) {
		loop();
    42ee:	bl	4c8 <loop>
		yield();
    42f2:	bl	413c <yield>
    42f6:	b.n	42ee <main+0x6>

000042f8 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    42f8:	bx	lr
    42fa:	nop

000042fc <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    42fc:	ldr	r2, [pc, #20]	; (4314 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    42fe:	ldr	r3, [pc, #24]	; (4318 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4300:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4302:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4304:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4306:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4308:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    430a:	it	cc
    430c:	addcc	r0, #64	; 0x40
    430e:	subs	r0, r0, r3
}
    4310:	bx	lr
    4312:	nop
    4314:	.word	0x1fff1a74
    4318:	.word	0x1fff1a75

0000431c <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    431c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    431e:	ldr	r3, [pc, #172]	; (43cc <uart4_status_isr+0xb0>)
    4320:	ldrb	r2, [r3, #4]
    4322:	lsls	r4, r2, #26
    4324:	bpl.n	4366 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    4326:	ldr	r0, [pc, #168]	; (43d0 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    4328:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    432a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    432c:	ldr	r1, [pc, #164]	; (43d4 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    432e:	adds	r3, #1
    4330:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4332:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    4334:	it	gt
    4336:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4338:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    433a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    433c:	beq.n	4346 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    433e:	ldr	r4, [pc, #152]	; (43d8 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    4340:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4342:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4344:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4346:	ldr	r2, [pc, #148]	; (43dc <uart4_status_isr+0xc0>)
    4348:	ldr	r1, [r2, #0]
    434a:	cbz	r1, 4366 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    434c:	ldr	r2, [pc, #144]	; (43e0 <uart4_status_isr+0xc4>)
    434e:	ldrb	r2, [r2, #0]
    4350:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4352:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    4354:	itet	cc
    4356:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    435a:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    435c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    435e:	cmp	r3, #39	; 0x27
    4360:	itt	gt
    4362:	movgt	r3, #1
    4364:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    4366:	ldr	r2, [pc, #100]	; (43cc <uart4_status_isr+0xb0>)
    4368:	ldrb	r3, [r2, #3]
    436a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    436c:	lsls	r0, r3, #24
    436e:	bmi.n	4394 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    4370:	lsls	r2, r3, #25
    4372:	bpl.n	4390 <uart4_status_isr+0x74>
    4374:	ldr	r3, [pc, #84]	; (43cc <uart4_status_isr+0xb0>)
    4376:	ldrb	r3, [r3, #4]
    4378:	lsls	r3, r3, #25
    437a:	bpl.n	4390 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    437c:	ldr	r3, [pc, #100]	; (43e4 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    437e:	ldr	r1, [pc, #104]	; (43e8 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4380:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    4382:	movs	r2, #0
    4384:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4386:	cbz	r3, 438a <uart4_status_isr+0x6e>
    4388:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    438a:	ldr	r3, [pc, #64]	; (43cc <uart4_status_isr+0xb0>)
    438c:	movs	r2, #44	; 0x2c
    438e:	strb	r2, [r3, #3]
	}
}
    4390:	pop	{r4, r5}
    4392:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    4394:	ldrb	r1, [r2, #4]
    4396:	lsls	r1, r1, #24
    4398:	bpl.n	4370 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    439a:	ldr	r1, [pc, #80]	; (43ec <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    439c:	ldr	r0, [pc, #64]	; (43e0 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    439e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    43a0:	ldrb	r1, [r0, #0]
    43a2:	uxtb	r1, r1
		if (head == tail) {
    43a4:	cmp	r4, r1
    43a6:	beq.n	43c4 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    43a8:	adds	r2, r1, #1
    43aa:	cmp	r2, #39	; 0x27
    43ac:	itt	hi
    43ae:	movhi	r1, #0
    43b0:	movhi	r2, r1
			n = tx_buffer[tail];
    43b2:	ldr	r5, [pc, #60]	; (43f0 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    43b4:	ldr	r4, [pc, #20]	; (43cc <uart4_status_isr+0xb0>)
    43b6:	it	ls
    43b8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    43ba:	ldrb	r2, [r5, r2]
    43bc:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    43be:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    43c0:	strb	r1, [r0, #0]
    43c2:	b.n	4370 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    43c4:	movs	r1, #108	; 0x6c
    43c6:	strb	r1, [r2, #3]
    43c8:	b.n	4370 <uart4_status_isr+0x54>
    43ca:	nop
    43cc:	.word	0x400ea000
    43d0:	.word	0x1fff1a74
    43d4:	.word	0x1fff1a75
    43d8:	.word	0x1fff1aa0
    43dc:	.word	0x1fff1a70
    43e0:	.word	0x1fff1ae1
    43e4:	.word	0x1fff1ae4
    43e8:	.word	0x1fff1ae0
    43ec:	.word	0x1fff1ae8
    43f0:	.word	0x1fff1a78

000043f4 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43f4:	ldr	r2, [pc, #20]	; (440c <serial2_available+0x18>)
	tail = rx_buffer_tail;
    43f6:	ldr	r3, [pc, #24]	; (4410 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43f8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    43fa:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43fc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    43fe:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4400:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    4402:	it	cc
    4404:	addcc	r0, #64	; 0x40
    4406:	subs	r0, r0, r3
}
    4408:	bx	lr
    440a:	nop
    440c:	.word	0x1fff1b5c
    4410:	.word	0x1fff1af1

00004414 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    4414:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4416:	ldr	r3, [pc, #224]	; (44f8 <uart1_status_isr+0xe4>)
    4418:	ldrb	r2, [r3, #4]
    441a:	tst.w	r2, #48	; 0x30
    441e:	beq.n	447a <uart1_status_isr+0x66>
		__disable_irq();
    4420:	cpsid	i
		avail = UART1_RCFIFO;
    4422:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4424:	and.w	r2, r1, #255	; 0xff
    4428:	cmp	r1, #0
    442a:	beq.n	44a8 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    442c:	cpsie	i
			head = rx_buffer_head;
    442e:	ldr	r7, [pc, #204]	; (44fc <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4430:	ldr	r1, [pc, #204]	; (4500 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4432:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4434:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4436:	ldr	r6, [pc, #204]	; (4504 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4438:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    443a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    443c:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    443e:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4440:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4442:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4444:	it	cs
    4446:	movcs	r3, #0
				if (newhead != tail) {
    4448:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    444a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    444e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4450:	itt	ne
    4452:	strbne	r1, [r6, r3]
    4454:	movne	r0, r3
				}
			} while (--avail > 0);
    4456:	ands.w	r2, r2, #255	; 0xff
    445a:	bne.n	443e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    445c:	ldr	r3, [pc, #168]	; (4508 <uart1_status_isr+0xf4>)
    445e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4460:	uxtb	r2, r0
    4462:	strb	r2, [r7, #0]
			if (rts_pin) {
    4464:	cbz	r3, 447a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4466:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4468:	itet	cc
    446a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    446e:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4470:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4472:	cmp	r0, #39	; 0x27
    4474:	itt	gt
    4476:	movgt	r2, #1
    4478:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    447a:	ldr	r1, [pc, #124]	; (44f8 <uart1_status_isr+0xe4>)
    447c:	ldrb	r2, [r1, #3]
    447e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4480:	lsls	r5, r2, #24
    4482:	bmi.n	44b2 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    4484:	lsls	r2, r2, #25
    4486:	bpl.n	44a4 <uart1_status_isr+0x90>
    4488:	ldr	r3, [pc, #108]	; (44f8 <uart1_status_isr+0xe4>)
    448a:	ldrb	r3, [r3, #4]
    448c:	lsls	r3, r3, #25
    448e:	bpl.n	44a4 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4490:	ldr	r3, [pc, #120]	; (450c <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    4492:	ldr	r1, [pc, #124]	; (4510 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4494:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    4496:	movs	r2, #0
    4498:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    449a:	cbz	r3, 449e <uart1_status_isr+0x8a>
    449c:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    449e:	ldr	r3, [pc, #88]	; (44f8 <uart1_status_isr+0xe4>)
    44a0:	movs	r2, #60	; 0x3c
    44a2:	strb	r2, [r3, #3]
	}
}
    44a4:	pop	{r4, r5, r6, r7}
    44a6:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    44a8:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    44aa:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    44ac:	strb	r2, [r3, #17]
			__enable_irq();
    44ae:	cpsie	i
    44b0:	b.n	447a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    44b2:	ldrb	r3, [r1, #4]
    44b4:	lsls	r4, r3, #24
    44b6:	bpl.n	4484 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    44b8:	ldr	r3, [pc, #88]	; (4514 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    44ba:	ldr	r6, [pc, #92]	; (4518 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    44bc:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    44be:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    44c0:	uxtb	r4, r4
		tail = tx_buffer_tail;
    44c2:	uxtb	r3, r3
		do {
			if (tail == head) break;
    44c4:	cmp	r4, r3
    44c6:	beq.n	44e6 <uart1_status_isr+0xd2>
    44c8:	ldr	r5, [pc, #80]	; (451c <uart1_status_isr+0x108>)
    44ca:	b.n	44d0 <uart1_status_isr+0xbc>
    44cc:	cmp	r3, r4
    44ce:	beq.n	44e6 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    44d0:	adds	r3, #1
    44d2:	cmp	r3, #40	; 0x28
    44d4:	it	cs
    44d6:	movcs	r3, #0
			avail = UART1_S1;
    44d8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    44da:	ldrb	r0, [r5, r3]
    44dc:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    44de:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    44e0:	ldrb	r0, [r1, #20]
    44e2:	cmp	r0, #7
    44e4:	bls.n	44cc <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    44e6:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    44e8:	ldr	r1, [pc, #12]	; (44f8 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    44ea:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    44ec:	ldrb	r3, [r1, #4]
    44ee:	lsls	r0, r3, #24
    44f0:	itt	mi
    44f2:	movmi	r3, #124	; 0x7c
    44f4:	strbmi	r3, [r1, #3]
    44f6:	b.n	4484 <uart1_status_isr+0x70>
    44f8:	.word	0x4006b000
    44fc:	.word	0x1fff1b5c
    4500:	.word	0x1fff1af1
    4504:	.word	0x1fff1b1c
    4508:	.word	0x1fff1aec
    450c:	.word	0x1fff1b60
    4510:	.word	0x1fff1af0
    4514:	.word	0x1fff1b64
    4518:	.word	0x1fff1b5d
    451c:	.word	0x1fff1af4

00004520 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4520:	ldr	r2, [pc, #20]	; (4538 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    4522:	ldr	r3, [pc, #24]	; (453c <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4524:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4526:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4528:	uxtb	r0, r0
	tail = rx_buffer_tail;
    452a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    452c:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    452e:	it	cc
    4530:	addcc	r0, #64	; 0x40
    4532:	subs	r0, r0, r3
}
    4534:	bx	lr
    4536:	nop
    4538:	.word	0x1fff1b6c
    453c:	.word	0x1fff1b6d

00004540 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    4540:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    4542:	ldr	r3, [pc, #172]	; (45f0 <uart3_status_isr+0xb0>)
    4544:	ldrb	r2, [r3, #4]
    4546:	lsls	r4, r2, #26
    4548:	bpl.n	458a <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    454a:	ldr	r0, [pc, #168]	; (45f4 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    454c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    454e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4550:	ldr	r1, [pc, #164]	; (45f8 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4552:	adds	r3, #1
    4554:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4556:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4558:	it	gt
    455a:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    455c:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    455e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4560:	beq.n	456a <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    4562:	ldr	r4, [pc, #152]	; (45fc <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    4564:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4566:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4568:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    456a:	ldr	r2, [pc, #148]	; (4600 <uart3_status_isr+0xc0>)
    456c:	ldr	r1, [r2, #0]
    456e:	cbz	r1, 458a <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4570:	ldr	r2, [pc, #144]	; (4604 <uart3_status_isr+0xc4>)
    4572:	ldrb	r2, [r2, #0]
    4574:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4576:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4578:	itet	cc
    457a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    457e:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4580:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4582:	cmp	r3, #39	; 0x27
    4584:	itt	gt
    4586:	movgt	r3, #1
    4588:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    458a:	ldr	r2, [pc, #100]	; (45f0 <uart3_status_isr+0xb0>)
    458c:	ldrb	r3, [r2, #3]
    458e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    4590:	lsls	r0, r3, #24
    4592:	bmi.n	45b8 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    4594:	lsls	r2, r3, #25
    4596:	bpl.n	45b4 <uart3_status_isr+0x74>
    4598:	ldr	r3, [pc, #84]	; (45f0 <uart3_status_isr+0xb0>)
    459a:	ldrb	r3, [r3, #4]
    459c:	lsls	r3, r3, #25
    459e:	bpl.n	45b4 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    45a0:	ldr	r3, [pc, #100]	; (4608 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    45a2:	ldr	r1, [pc, #104]	; (460c <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    45a4:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    45a6:	movs	r2, #0
    45a8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    45aa:	cbz	r3, 45ae <uart3_status_isr+0x6e>
    45ac:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    45ae:	ldr	r3, [pc, #64]	; (45f0 <uart3_status_isr+0xb0>)
    45b0:	movs	r2, #44	; 0x2c
    45b2:	strb	r2, [r3, #3]
	}
}
    45b4:	pop	{r4, r5}
    45b6:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    45b8:	ldrb	r1, [r2, #4]
    45ba:	lsls	r1, r1, #24
    45bc:	bpl.n	4594 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    45be:	ldr	r1, [pc, #80]	; (4610 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    45c0:	ldr	r0, [pc, #64]	; (4604 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    45c2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    45c4:	ldrb	r1, [r0, #0]
    45c6:	uxtb	r1, r1
		if (head == tail) {
    45c8:	cmp	r4, r1
    45ca:	beq.n	45e8 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    45cc:	adds	r2, r1, #1
    45ce:	cmp	r2, #39	; 0x27
    45d0:	itt	hi
    45d2:	movhi	r1, #0
    45d4:	movhi	r2, r1
			n = tx_buffer[tail];
    45d6:	ldr	r5, [pc, #60]	; (4614 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    45d8:	ldr	r4, [pc, #20]	; (45f0 <uart3_status_isr+0xb0>)
    45da:	it	ls
    45dc:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    45de:	ldrb	r2, [r5, r2]
    45e0:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    45e2:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    45e4:	strb	r1, [r0, #0]
    45e6:	b.n	4594 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    45e8:	movs	r1, #108	; 0x6c
    45ea:	strb	r1, [r2, #3]
    45ec:	b.n	4594 <uart3_status_isr+0x54>
    45ee:	nop
    45f0:	.word	0x4006d000
    45f4:	.word	0x1fff1b6c
    45f8:	.word	0x1fff1b6d
    45fc:	.word	0x1fff1b98
    4600:	.word	0x1fff1b68
    4604:	.word	0x1fff1bd9
    4608:	.word	0x1fff1bdc
    460c:	.word	0x1fff1bd8
    4610:	.word	0x1fff1be0
    4614:	.word	0x1fff1b70

00004618 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    4618:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    461a:	ldr	r4, [pc, #64]	; (465c <fault_isr+0x44>)
    461c:	b.n	4630 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    461e:	ldr	r3, [r4, #0]
    4620:	lsls	r1, r3, #21
    4622:	bmi.n	4640 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4624:	ldr	r3, [r4, #0]
    4626:	lsls	r2, r3, #20
    4628:	bmi.n	464a <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    462a:	ldr	r3, [r4, #0]
    462c:	lsls	r3, r3, #19
    462e:	bmi.n	4654 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4630:	ldr	r3, [r4, #0]
    4632:	lsls	r0, r3, #13
    4634:	bpl.n	461e <fault_isr+0x6>
    4636:	bl	36bc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    463a:	ldr	r3, [r4, #0]
    463c:	lsls	r1, r3, #21
    463e:	bpl.n	4624 <fault_isr+0xc>
    4640:	bl	472c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4644:	ldr	r3, [r4, #0]
    4646:	lsls	r2, r3, #20
    4648:	bpl.n	462a <fault_isr+0x12>
    464a:	bl	4414 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    464e:	ldr	r3, [r4, #0]
    4650:	lsls	r3, r3, #19
    4652:	bpl.n	4630 <fault_isr+0x18>
    4654:	bl	4a2c <uart2_status_isr>
    4658:	b.n	4630 <fault_isr+0x18>
    465a:	nop
    465c:	.word	0x40048034

00004660 <unused_isr>:
	}
}

void unused_isr(void)
{
    4660:	push	{r3, lr}
	fault_isr();
    4662:	bl	4618 <fault_isr>
    4666:	nop

00004668 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4668:	ldr	r3, [pc, #4]	; (4670 <startup_early_hook+0x8>)
    466a:	movs	r2, #16
    466c:	strh	r2, [r3, #0]
    466e:	bx	lr
    4670:	.word	0x40052000

00004674 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    4674:	bx	lr
    4676:	nop

00004678 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    4678:	ldr	r1, [pc, #36]	; (46a0 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    467a:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    467c:	ldr	r3, [r1, #0]
	if (incr != 0) {
    467e:	cbz	r0, 468e <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    4680:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    4682:	add	r0, r3
    4684:	sub.w	r2, r2, #8192	; 0x2000
    4688:	cmp	r0, r2
    468a:	bcs.n	4692 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    468c:	str	r0, [r1, #0]
	}
	return prev;
    468e:	mov	r0, r3
}
    4690:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    4692:	bl	4d00 <__errno>
    4696:	movs	r3, #12
    4698:	str	r3, [r0, #0]
			return (void *)-1;
    469a:	mov.w	r0, #4294967295
    469e:	pop	{r3, pc}
    46a0:	.word	0x1fff0c80

000046a4 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    46a4:	ldr	r2, [pc, #32]	; (46c8 <kinetis_hsrun_disable+0x24>)
    46a6:	ldrb	r3, [r2, #0]
    46a8:	cmp	r3, #128	; 0x80
    46aa:	beq.n	46b0 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    46ac:	movs	r0, #0
}
    46ae:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    46b0:	ldr	r1, [pc, #24]	; (46cc <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    46b2:	ldr	r3, [pc, #28]	; (46d0 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    46b4:	ldr	r0, [pc, #28]	; (46d4 <kinetis_hsrun_disable+0x30>)
    46b6:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    46b8:	movs	r1, #0
    46ba:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    46bc:	ldrb	r3, [r2, #0]
    46be:	cmp	r3, #128	; 0x80
    46c0:	beq.n	46bc <kinetis_hsrun_disable+0x18>
		return 1;
    46c2:	movs	r0, #1
    46c4:	bx	lr
    46c6:	nop
    46c8:	.word	0x4007e003
    46cc:	.word	0x40048044
    46d0:	.word	0x4007e001
    46d4:	.word	0x22280000

000046d8 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    46d8:	ldr	r2, [pc, #36]	; (4700 <kinetis_hsrun_enable+0x28>)
    46da:	ldrb	r3, [r2, #0]
    46dc:	cmp	r3, #1
    46de:	beq.n	46e4 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    46e0:	movs	r0, #0
}
    46e2:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    46e4:	add.w	r3, r3, #1073741824	; 0x40000000
    46e8:	add.w	r3, r3, #516096	; 0x7e000
    46ec:	movs	r1, #96	; 0x60
    46ee:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    46f0:	ldrb	r3, [r2, #0]
    46f2:	cmp	r3, #128	; 0x80
    46f4:	bne.n	46f0 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    46f6:	ldr	r3, [pc, #12]	; (4704 <kinetis_hsrun_enable+0x2c>)
    46f8:	ldr	r2, [pc, #12]	; (4708 <kinetis_hsrun_enable+0x30>)
    46fa:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    46fc:	movs	r0, #1
    46fe:	bx	lr
    4700:	.word	0x4007e003
    4704:	.word	0x40048044
    4708:	.word	0x02060000

0000470c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    470c:	ldr	r2, [pc, #20]	; (4724 <serial_available+0x18>)
	tail = rx_buffer_tail;
    470e:	ldr	r3, [pc, #24]	; (4728 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4710:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4712:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4714:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4716:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4718:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    471a:	it	cc
    471c:	addcc	r0, #64	; 0x40
    471e:	subs	r0, r0, r3
}
    4720:	bx	lr
    4722:	nop
    4724:	.word	0x1fff1be8
    4728:	.word	0x1fff1be9

0000472c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    472c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    472e:	ldr	r3, [pc, #224]	; (4810 <uart0_status_isr+0xe4>)
    4730:	ldrb	r2, [r3, #4]
    4732:	tst.w	r2, #48	; 0x30
    4736:	beq.n	4792 <uart0_status_isr+0x66>
		__disable_irq();
    4738:	cpsid	i
		avail = UART0_RCFIFO;
    473a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    473c:	and.w	r2, r1, #255	; 0xff
    4740:	cmp	r1, #0
    4742:	beq.n	47c0 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4744:	cpsie	i
			head = rx_buffer_head;
    4746:	ldr	r7, [pc, #204]	; (4814 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4748:	ldr	r1, [pc, #204]	; (4818 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    474a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    474c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    474e:	ldr	r6, [pc, #204]	; (481c <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4750:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4752:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4754:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    4756:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4758:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    475a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    475c:	it	cs
    475e:	movcs	r3, #0
				if (newhead != tail) {
    4760:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4762:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4766:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4768:	itt	ne
    476a:	strbne	r1, [r6, r3]
    476c:	movne	r0, r3
				}
			} while (--avail > 0);
    476e:	ands.w	r2, r2, #255	; 0xff
    4772:	bne.n	4756 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4774:	ldr	r3, [pc, #168]	; (4820 <uart0_status_isr+0xf4>)
    4776:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4778:	uxtb	r2, r0
    477a:	strb	r2, [r7, #0]
			if (rts_pin) {
    477c:	cbz	r3, 4792 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    477e:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4780:	itet	cc
    4782:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4786:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4788:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    478a:	cmp	r0, #39	; 0x27
    478c:	itt	gt
    478e:	movgt	r2, #1
    4790:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    4792:	ldr	r1, [pc, #124]	; (4810 <uart0_status_isr+0xe4>)
    4794:	ldrb	r2, [r1, #3]
    4796:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4798:	lsls	r5, r2, #24
    479a:	bmi.n	47ca <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    479c:	lsls	r2, r2, #25
    479e:	bpl.n	47bc <uart0_status_isr+0x90>
    47a0:	ldr	r3, [pc, #108]	; (4810 <uart0_status_isr+0xe4>)
    47a2:	ldrb	r3, [r3, #4]
    47a4:	lsls	r3, r3, #25
    47a6:	bpl.n	47bc <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    47a8:	ldr	r3, [pc, #120]	; (4824 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    47aa:	ldr	r1, [pc, #124]	; (4828 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    47ac:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    47ae:	movs	r2, #0
    47b0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    47b2:	cbz	r3, 47b6 <uart0_status_isr+0x8a>
    47b4:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    47b6:	ldr	r3, [pc, #88]	; (4810 <uart0_status_isr+0xe4>)
    47b8:	movs	r2, #60	; 0x3c
    47ba:	strb	r2, [r3, #3]
	}
}
    47bc:	pop	{r4, r5, r6, r7}
    47be:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    47c0:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    47c2:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    47c4:	strb	r2, [r3, #17]
			__enable_irq();
    47c6:	cpsie	i
    47c8:	b.n	4792 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    47ca:	ldrb	r3, [r1, #4]
    47cc:	lsls	r4, r3, #24
    47ce:	bpl.n	479c <uart0_status_isr+0x70>
		head = tx_buffer_head;
    47d0:	ldr	r3, [pc, #88]	; (482c <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    47d2:	ldr	r6, [pc, #92]	; (4830 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    47d4:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    47d6:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    47d8:	uxtb	r4, r4
		tail = tx_buffer_tail;
    47da:	uxtb	r3, r3
		do {
			if (tail == head) break;
    47dc:	cmp	r4, r3
    47de:	beq.n	47fe <uart0_status_isr+0xd2>
    47e0:	ldr	r5, [pc, #80]	; (4834 <uart0_status_isr+0x108>)
    47e2:	b.n	47e8 <uart0_status_isr+0xbc>
    47e4:	cmp	r3, r4
    47e6:	beq.n	47fe <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    47e8:	adds	r3, #1
    47ea:	cmp	r3, #64	; 0x40
    47ec:	it	cs
    47ee:	movcs	r3, #0
			avail = UART0_S1;
    47f0:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    47f2:	ldrb	r0, [r5, r3]
    47f4:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    47f6:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    47f8:	ldrb	r0, [r1, #20]
    47fa:	cmp	r0, #7
    47fc:	bls.n	47e4 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    47fe:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4800:	ldr	r1, [pc, #12]	; (4810 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    4802:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4804:	ldrb	r3, [r1, #4]
    4806:	lsls	r0, r3, #24
    4808:	itt	mi
    480a:	movmi	r3, #124	; 0x7c
    480c:	strbmi	r3, [r1, #3]
    480e:	b.n	479c <uart0_status_isr+0x70>
    4810:	.word	0x4006a000
    4814:	.word	0x1fff1be8
    4818:	.word	0x1fff1be9
    481c:	.word	0x1fff1c2c
    4820:	.word	0x1fff1be4
    4824:	.word	0x1fff1c70
    4828:	.word	0x1fff1c6c
    482c:	.word	0x1fff1c74
    4830:	.word	0x1fff1c6d
    4834:	.word	0x1fff1bec

00004838 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4838:	ldr	r2, [pc, #20]	; (4850 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    483a:	ldr	r3, [pc, #24]	; (4854 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    483c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    483e:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4840:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4842:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4844:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    4846:	it	cc
    4848:	addcc	r0, #64	; 0x40
    484a:	subs	r0, r0, r3
}
    484c:	bx	lr
    484e:	nop
    4850:	.word	0x1fff1c7c
    4854:	.word	0x1fff1c7d

00004858 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    4858:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    485a:	ldr	r3, [pc, #176]	; (490c <lpuart0_status_isr+0xb4>)
    485c:	ldr	r2, [r3, #4]
    485e:	lsls	r4, r2, #10
    4860:	bpl.n	48a2 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4862:	ldr	r0, [pc, #172]	; (4910 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    4864:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    4866:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4868:	ldr	r1, [pc, #168]	; (4914 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    486a:	adds	r3, #1
    486c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    486e:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4870:	it	gt
    4872:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4874:	cmp	r3, r1
    4876:	beq.n	4882 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    4878:	ldr	r4, [pc, #156]	; (4918 <lpuart0_status_isr+0xc0>)
    487a:	uxtb	r2, r2
			rx_buffer_head = head;
    487c:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    487e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4880:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4882:	ldr	r2, [pc, #152]	; (491c <lpuart0_status_isr+0xc4>)
    4884:	ldr	r1, [r2, #0]
    4886:	cbz	r1, 48a2 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4888:	ldr	r2, [pc, #148]	; (4920 <lpuart0_status_isr+0xc8>)
    488a:	ldrb	r2, [r2, #0]
    488c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    488e:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4890:	itet	cc
    4892:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4896:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4898:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    489a:	cmp	r3, #39	; 0x27
    489c:	itt	gt
    489e:	movgt	r3, #1
    48a0:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    48a2:	ldr	r2, [pc, #104]	; (490c <lpuart0_status_isr+0xb4>)
    48a4:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    48a6:	lsls	r0, r3, #8
    48a8:	bpl.n	48b0 <lpuart0_status_isr+0x58>
    48aa:	ldr	r2, [r2, #4]
    48ac:	lsls	r1, r2, #8
    48ae:	bmi.n	48d4 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    48b0:	lsls	r2, r3, #9
    48b2:	bpl.n	48d0 <lpuart0_status_isr+0x78>
    48b4:	ldr	r3, [pc, #84]	; (490c <lpuart0_status_isr+0xb4>)
    48b6:	ldr	r3, [r3, #4]
    48b8:	lsls	r3, r3, #9
    48ba:	bpl.n	48d0 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    48bc:	ldr	r3, [pc, #100]	; (4924 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    48be:	ldr	r1, [pc, #104]	; (4928 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    48c0:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    48c2:	movs	r2, #0
    48c4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    48c6:	cbz	r3, 48ca <lpuart0_status_isr+0x72>
    48c8:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    48ca:	ldr	r3, [pc, #96]	; (492c <lpuart0_status_isr+0xd4>)
    48cc:	movs	r2, #0
    48ce:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    48d0:	pop	{r4, r5}
    48d2:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    48d4:	ldr	r2, [pc, #88]	; (4930 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    48d6:	ldr	r1, [pc, #72]	; (4920 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    48d8:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    48da:	ldrb	r2, [r1, #0]
    48dc:	uxtb	r2, r2
		if (head == tail) {
    48de:	cmp	r0, r2
    48e0:	beq.n	48fe <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    48e2:	adds	r2, #1
    48e4:	cmp	r2, #39	; 0x27
    48e6:	itt	hi
    48e8:	movhi	r0, #0
    48ea:	movhi	r2, r0
			n = tx_buffer[tail];
    48ec:	ldr	r5, [pc, #68]	; (4934 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    48ee:	ldr	r4, [pc, #28]	; (490c <lpuart0_status_isr+0xb4>)
    48f0:	it	ls
    48f2:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    48f4:	ldrb	r2, [r5, r2]
    48f6:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    48f8:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    48fa:	strb	r0, [r1, #0]
    48fc:	b.n	48b0 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    48fe:	ldr	r0, [pc, #56]	; (4938 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4900:	ldr	r2, [pc, #40]	; (492c <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4902:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4904:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4906:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4908:	str	r1, [r2, #0]
    490a:	b.n	48b0 <lpuart0_status_isr+0x58>
    490c:	.word	0x400c4000
    4910:	.word	0x1fff1c7c
    4914:	.word	0x1fff1c7d
    4918:	.word	0x1fff1ca8
    491c:	.word	0x1fff1c78
    4920:	.word	0x1fff1ce9
    4924:	.word	0x1fff1cec
    4928:	.word	0x1fff1ce8
    492c:	.word	0x43880158
    4930:	.word	0x1fff1cf0
    4934:	.word	0x1fff1c80
    4938:	.word	0x4388015c

0000493c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    493c:	push	{r4, lr}
    493e:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4940:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    4942:	bl	46a4 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    4946:	ldr	r2, [pc, #96]	; (49a8 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4948:	ldr	r3, [pc, #96]	; (49ac <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    494a:	ldr	r1, [pc, #100]	; (49b0 <usb_init_serialnumber+0x74>)
    494c:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    494e:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4950:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4952:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4954:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4956:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4958:	ldrb	r3, [r2, #0]
    495a:	lsls	r3, r3, #24
    495c:	bpl.n	4958 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    495e:	ldr	r3, [pc, #84]	; (49b4 <usb_init_serialnumber+0x78>)
    4960:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    4962:	bl	46d8 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    4966:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4968:	ldr	r3, [pc, #76]	; (49b8 <usb_init_serialnumber+0x7c>)
    496a:	cmp	r4, r3
    496c:	itt	ls
    496e:	addls.w	r4, r4, r4, lsl #2
    4972:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    4974:	mov	r0, r4
    4976:	ldr	r4, [pc, #68]	; (49bc <usb_init_serialnumber+0x80>)
    4978:	add	r1, sp, #4
    497a:	movs	r2, #10
    497c:	bl	49c0 <ultoa>
    4980:	add	r1, sp, #4
    4982:	mov	r0, r4
	for (i=0; i<10; i++) {
    4984:	movs	r3, #0
		char c = buf[i];
    4986:	ldrb.w	r2, [r1], #1
    498a:	adds	r3, #1
		if (!c) break;
    498c:	cbz	r2, 499e <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    498e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4990:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4994:	bne.n	4986 <usb_init_serialnumber+0x4a>
    4996:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4998:	strb	r3, [r4, #0]
}
    499a:	add	sp, #16
    499c:	pop	{r4, pc}
    499e:	lsls	r3, r3, #1
    49a0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    49a2:	strb	r3, [r4, #0]
}
    49a4:	add	sp, #16
    49a6:	pop	{r4, pc}
    49a8:	.word	0x40020004
    49ac:	.word	0x40020000
    49b0:	.word	0x41070000
    49b4:	.word	0x4002000c
    49b8:	.word	0x0098967f
    49bc:	.word	0x1fff0d64

000049c0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    49c0:	push	{r4, r5, r6, r7}
    49c2:	subs	r5, r1, #1
    49c4:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    49c6:	movs	r4, #0
    49c8:	b.n	49cc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    49ca:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    49cc:	udiv	r3, r0, r2
    49d0:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    49d4:	cmp	r0, #9
    49d6:	add.w	r7, r0, #48	; 0x30
    49da:	itet	hi
    49dc:	addhi	r0, #55	; 0x37
    49de:	uxtbls	r0, r7
    49e0:	uxtbhi	r0, r0
    49e2:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    49e6:	mov	r0, r3
    49e8:	cmp	r3, #0
    49ea:	bne.n	49ca <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    49ec:	adds	r2, r1, r4
    49ee:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    49f0:	cbz	r4, 4a06 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    49f2:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    49f4:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    49f8:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    49fa:	adds	r3, #1
    49fc:	subs	r0, r4, r3
    49fe:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4a00:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4a04:	blt.n	49f2 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4a06:	mov	r0, r1
    4a08:	pop	{r4, r5, r6, r7}
    4a0a:	bx	lr

00004a0c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4a0c:	ldr	r2, [pc, #20]	; (4a24 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    4a0e:	ldr	r3, [pc, #24]	; (4a28 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4a10:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4a12:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4a14:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4a16:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4a18:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    4a1a:	it	cc
    4a1c:	addcc	r0, #64	; 0x40
    4a1e:	subs	r0, r0, r3
}
    4a20:	bx	lr
    4a22:	nop
    4a24:	.word	0x1fff1cf8
    4a28:	.word	0x1fff1cf9

00004a2c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4a2c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    4a2e:	ldr	r3, [pc, #172]	; (4adc <uart2_status_isr+0xb0>)
    4a30:	ldrb	r2, [r3, #4]
    4a32:	lsls	r4, r2, #26
    4a34:	bpl.n	4a76 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4a36:	ldr	r0, [pc, #168]	; (4ae0 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4a38:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4a3a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a3c:	ldr	r1, [pc, #164]	; (4ae4 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4a3e:	adds	r3, #1
    4a40:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a42:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4a44:	it	gt
    4a46:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a48:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4a4a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a4c:	beq.n	4a56 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    4a4e:	ldr	r4, [pc, #152]	; (4ae8 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    4a50:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4a52:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4a54:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4a56:	ldr	r2, [pc, #148]	; (4aec <uart2_status_isr+0xc0>)
    4a58:	ldr	r1, [r2, #0]
    4a5a:	cbz	r1, 4a76 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4a5c:	ldr	r2, [pc, #144]	; (4af0 <uart2_status_isr+0xc4>)
    4a5e:	ldrb	r2, [r2, #0]
    4a60:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4a62:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4a64:	itet	cc
    4a66:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4a6a:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4a6c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4a6e:	cmp	r3, #39	; 0x27
    4a70:	itt	gt
    4a72:	movgt	r3, #1
    4a74:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4a76:	ldr	r2, [pc, #100]	; (4adc <uart2_status_isr+0xb0>)
    4a78:	ldrb	r3, [r2, #3]
    4a7a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4a7c:	lsls	r0, r3, #24
    4a7e:	bmi.n	4aa4 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4a80:	lsls	r2, r3, #25
    4a82:	bpl.n	4aa0 <uart2_status_isr+0x74>
    4a84:	ldr	r3, [pc, #84]	; (4adc <uart2_status_isr+0xb0>)
    4a86:	ldrb	r3, [r3, #4]
    4a88:	lsls	r3, r3, #25
    4a8a:	bpl.n	4aa0 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4a8c:	ldr	r3, [pc, #100]	; (4af4 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4a8e:	ldr	r1, [pc, #104]	; (4af8 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4a90:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4a92:	movs	r2, #0
    4a94:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4a96:	cbz	r3, 4a9a <uart2_status_isr+0x6e>
    4a98:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    4a9a:	ldr	r3, [pc, #64]	; (4adc <uart2_status_isr+0xb0>)
    4a9c:	movs	r2, #44	; 0x2c
    4a9e:	strb	r2, [r3, #3]
	}
}
    4aa0:	pop	{r4, r5}
    4aa2:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4aa4:	ldrb	r1, [r2, #4]
    4aa6:	lsls	r1, r1, #24
    4aa8:	bpl.n	4a80 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    4aaa:	ldr	r1, [pc, #80]	; (4afc <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4aac:	ldr	r0, [pc, #64]	; (4af0 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4aae:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4ab0:	ldrb	r1, [r0, #0]
    4ab2:	uxtb	r1, r1
		if (head == tail) {
    4ab4:	cmp	r4, r1
    4ab6:	beq.n	4ad4 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4ab8:	adds	r2, r1, #1
    4aba:	cmp	r2, #39	; 0x27
    4abc:	itt	hi
    4abe:	movhi	r1, #0
    4ac0:	movhi	r2, r1
			n = tx_buffer[tail];
    4ac2:	ldr	r5, [pc, #60]	; (4b00 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4ac4:	ldr	r4, [pc, #20]	; (4adc <uart2_status_isr+0xb0>)
    4ac6:	it	ls
    4ac8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4aca:	ldrb	r2, [r5, r2]
    4acc:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4ace:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4ad0:	strb	r1, [r0, #0]
    4ad2:	b.n	4a80 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4ad4:	movs	r1, #108	; 0x6c
    4ad6:	strb	r1, [r2, #3]
    4ad8:	b.n	4a80 <uart2_status_isr+0x54>
    4ada:	nop
    4adc:	.word	0x4006c000
    4ae0:	.word	0x1fff1cf8
    4ae4:	.word	0x1fff1cf9
    4ae8:	.word	0x1fff1d24
    4aec:	.word	0x1fff1cf4
    4af0:	.word	0x1fff1d65
    4af4:	.word	0x1fff1d68
    4af8:	.word	0x1fff1d64
    4afc:	.word	0x1fff1d6c
    4b00:	.word	0x1fff1cfc

00004b04 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4b04:	bx	lr
    4b06:	nop

00004b08 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4b08:	bx	lr
    4b0a:	nop

00004b0c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4b0c:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4b0e:	mrs	r2, PRIMASK
		__disable_irq();
    4b12:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4b14:	ldrb	r3, [r0, #29]
    4b16:	cbnz	r3, 4b26 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4b18:	ldrb	r1, [r0, #28]
    4b1a:	cmp	r1, #1
    4b1c:	beq.n	4b30 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4b1e:	cmp	r1, #3
    4b20:	beq.n	4b44 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4b22:	movs	r3, #1
    4b24:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4b26:	cbnz	r2, 4b2a <EventResponder::triggerEventNotImmediate()+0x1e>
    4b28:	cpsie	i
	}
	enableInterrupts(irq);
}
    4b2a:	ldr.w	r4, [sp], #4
    4b2e:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4b30:	ldr	r4, [pc, #68]	; (4b78 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4b32:	ldr	r1, [r4, #0]
    4b34:	cbz	r1, 4b60 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4b36:	ldr	r1, [pc, #68]	; (4b7c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4b38:	str	r3, [r0, #20]
				_prev = lastYield;
    4b3a:	ldr	r3, [r1, #0]
    4b3c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4b3e:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4b40:	str	r0, [r3, #20]
    4b42:	b.n	4b22 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4b44:	ldr	r4, [pc, #56]	; (4b80 <EventResponder::triggerEventNotImmediate()+0x74>)
    4b46:	ldr	r1, [r4, #0]
    4b48:	cbz	r1, 4b6c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4b4a:	ldr	r1, [pc, #56]	; (4b84 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4b4c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4b4e:	ldr	r3, [r1, #0]
    4b50:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4b52:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4b54:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4b56:	ldr	r3, [pc, #48]	; (4b88 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4b58:	mov.w	r1, #268435456	; 0x10000000
    4b5c:	str	r1, [r3, #0]
    4b5e:	b.n	4b22 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4b60:	ldr	r3, [pc, #24]	; (4b7c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4b62:	str	r1, [r0, #20]
				_prev = nullptr;
    4b64:	str	r1, [r0, #24]
				firstYield = this;
    4b66:	str	r0, [r4, #0]
				lastYield = this;
    4b68:	str	r0, [r3, #0]
    4b6a:	b.n	4b22 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4b6c:	ldr	r3, [pc, #20]	; (4b84 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4b6e:	str	r1, [r0, #20]
				_prev = nullptr;
    4b70:	str	r1, [r0, #24]
				firstInterrupt = this;
    4b72:	str	r0, [r4, #0]
				lastInterrupt = this;
    4b74:	str	r0, [r3, #0]
    4b76:	b.n	4b56 <EventResponder::triggerEventNotImmediate()+0x4a>
    4b78:	.word	0x1fff1d80
    4b7c:	.word	0x1fff1d7c
    4b80:	.word	0x1fff1d70
    4b84:	.word	0x1fff1d74
    4b88:	.word	0xe000ed04

00004b8c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4b8c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4b8e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4b90:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4b92:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4b94:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4b96:	beq.n	4ba0 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4b98:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4b9c:	b.w	4b0c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4ba0:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4ba2:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4ba6:	bx	r3

00004ba8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4ba8:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4baa:	mrs	r2, PRIMASK
		__disable_irq();
    4bae:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4bb0:	ldr	r4, [pc, #48]	; (4be4 <EventResponder::runFromInterrupt()+0x3c>)
    4bb2:	ldr	r0, [r4, #0]
		if (first) {
    4bb4:	cbz	r0, 4bd8 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4bb6:	ldr	r6, [pc, #48]	; (4be8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4bb8:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4bba:	ldr	r3, [r0, #20]
    4bbc:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4bbe:	cbz	r3, 4bde <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4bc0:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4bc2:	cbnz	r2, 4bc6 <EventResponder::runFromInterrupt()+0x1e>
    4bc4:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4bc6:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4bc8:	ldr	r3, [r0, #8]
    4bca:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4bcc:	mrs	r2, PRIMASK
		__disable_irq();
    4bd0:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4bd2:	ldr	r0, [r4, #0]
		if (first) {
    4bd4:	cmp	r0, #0
    4bd6:	bne.n	4bba <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4bd8:	cbnz	r2, 4bdc <EventResponder::runFromInterrupt()+0x34>
    4bda:	cpsie	i
    4bdc:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4bde:	str	r3, [r6, #0]
    4be0:	b.n	4bc2 <EventResponder::runFromInterrupt()+0x1a>
    4be2:	nop
    4be4:	.word	0x1fff1d70
    4be8:	.word	0x1fff1d74

00004bec <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4bec:	b.w	4ba8 <EventResponder::runFromInterrupt()>

00004bf0 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4bf0:	ldr	r2, [pc, #96]	; (4c54 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4bf2:	push	{r4, r5}
	if (listActive == nullptr) {
    4bf4:	ldr	r4, [r2, #0]
    4bf6:	cmp	r4, #0
    4bf8:	beq.n	4c4a <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4bfa:	ldr	r3, [r0, #0]
    4bfc:	ldr	r1, [r4, #0]
    4bfe:	cmp	r3, r1
    4c00:	bcs.n	4c20 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4c02:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4c04:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4c06:	str	r4, [r0, #8]
		_prev = nullptr;
    4c08:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4c0a:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4c0c:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4c0e:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4c10:	movs	r3, #2
    4c12:	strb	r3, [r0, #20]
}
    4c14:	pop	{r4, r5}
    4c16:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4c18:	ldr	r1, [r2, #0]
    4c1a:	cmp	r3, r1
    4c1c:	mov	r4, r2
    4c1e:	bcc.n	4c32 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4c20:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4c22:	subs	r3, r3, r1
    4c24:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4c26:	cmp	r2, #0
    4c28:	bne.n	4c18 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4c2a:	str	r2, [r0, #8]
		_prev = timer;
    4c2c:	str	r4, [r0, #12]
		timer->_next = this;
    4c2e:	str	r0, [r4, #8]
    4c30:	b.n	4c10 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4c32:	ldr	r2, [r2, #12]
    4c34:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4c36:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4c38:	str	r0, [r4, #12]
				_prev->_next = this;
    4c3a:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4c3c:	subs	r3, r1, r3
				_state = TimerActive;
    4c3e:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4c40:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4c42:	str	r3, [r4, #0]
				_state = TimerActive;
    4c44:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4c46:	pop	{r4, r5}
    4c48:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4c4a:	str	r4, [r0, #8]
		_prev = nullptr;
    4c4c:	str	r4, [r0, #12]
		listActive = this;
    4c4e:	str	r0, [r2, #0]
    4c50:	b.n	4c10 <MillisTimer::addToActiveList()+0x20>
    4c52:	nop
    4c54:	.word	0x1fff1d78

00004c58 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4c58:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4c5a:	ldr	r6, [pc, #136]	; (4ce4 <MillisTimer::runFromTimer()+0x8c>)
    4c5c:	ldr	r4, [r6, #0]
	while (timer) {
    4c5e:	cbz	r4, 4cac <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4c60:	ldr	r3, [r4, #0]
    4c62:	cmp	r3, #0
    4c64:	bne.n	4cdc <MillisTimer::runFromTimer()+0x84>
    4c66:	ldr	r7, [pc, #128]	; (4ce8 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4c68:	mov	r5, r3
    4c6a:	b.n	4c76 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4c6c:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4c6e:	cbz	r4, 4cac <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4c70:	ldr	r3, [r4, #0]
    4c72:	cmp	r3, #0
    4c74:	bne.n	4cdc <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4c76:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4c78:	cbz	r3, 4c7c <MillisTimer::runFromTimer()+0x24>
    4c7a:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4c7c:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4c7e:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4c80:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4c82:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4c84:	ldr	r3, [r3, #0]
    4c86:	cmp	r3, r7
    4c88:	bne.n	4cce <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4c8a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4c8c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4c8e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4c90:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4c92:	beq.n	4cd6 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4c94:	bl	4b0c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4c98:	ldr	r3, [r4, #4]
    4c9a:	cmp	r3, #0
    4c9c:	beq.n	4c6c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4c9e:	str	r3, [r4, #0]
				timer->addToActiveList();
    4ca0:	mov	r0, r4
    4ca2:	bl	4bf0 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4ca6:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4ca8:	cmp	r4, #0
    4caa:	bne.n	4c70 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4cac:	mrs	r3, PRIMASK
		__disable_irq();
    4cb0:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4cb2:	ldr	r2, [pc, #56]	; (4cec <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4cb4:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4cb6:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4cb8:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4cba:	cbnz	r3, 4cbe <MillisTimer::runFromTimer()+0x66>
    4cbc:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4cbe:	cbz	r0, 4ccc <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4cc0:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4cc2:	bl	4bf0 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4cc6:	mov	r0, r4
    4cc8:	cmp	r0, #0
    4cca:	bne.n	4cc0 <MillisTimer::runFromTimer()+0x68>
    4ccc:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4cce:	mov	r2, r4
    4cd0:	movs	r1, #0
    4cd2:	blx	r3
    4cd4:	b.n	4c98 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4cd6:	ldr	r3, [r0, #8]
    4cd8:	blx	r3
    4cda:	b.n	4c98 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4cdc:	subs	r3, #1
    4cde:	str	r3, [r4, #0]
			break;
    4ce0:	b.n	4cac <MillisTimer::runFromTimer()+0x54>
    4ce2:	nop
    4ce4:	.word	0x1fff1d78
    4ce8:	.word	0x00004b8d
    4cec:	.word	0x1fff1d88

00004cf0 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4cf0:	ldr	r2, [pc, #8]	; (4cfc <systick_isr+0xc>)
    4cf2:	ldr	r3, [r2, #0]
    4cf4:	adds	r3, #1
    4cf6:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4cf8:	b.w	4c58 <MillisTimer::runFromTimer()>
    4cfc:	.word	0x1fff1910

00004d00 <__errno>:
    4d00:	ldr	r3, [pc, #4]	; (4d08 <__errno+0x8>)
    4d02:	ldr	r0, [r3, #0]
    4d04:	bx	lr
    4d06:	nop
    4d08:	.word	0x1fff11a8

00004d0c <__libc_init_array>:
    4d0c:	push	{r4, r5, r6, lr}
    4d0e:	ldr	r6, [pc, #60]	; (4d4c <__libc_init_array+0x40>)
    4d10:	ldr	r5, [pc, #60]	; (4d50 <__libc_init_array+0x44>)
    4d12:	subs	r6, r6, r5
    4d14:	asrs	r6, r6, #2
    4d16:	it	ne
    4d18:	movne	r4, #0
    4d1a:	beq.n	4d28 <__libc_init_array+0x1c>
    4d1c:	adds	r4, #1
    4d1e:	ldr.w	r3, [r5], #4
    4d22:	blx	r3
    4d24:	cmp	r6, r4
    4d26:	bne.n	4d1c <__libc_init_array+0x10>
    4d28:	ldr	r6, [pc, #40]	; (4d54 <__libc_init_array+0x48>)
    4d2a:	ldr	r5, [pc, #44]	; (4d58 <__libc_init_array+0x4c>)
    4d2c:	subs	r6, r6, r5
    4d2e:	bl	59a8 <_init>
    4d32:	asrs	r6, r6, #2
    4d34:	it	ne
    4d36:	movne	r4, #0
    4d38:	beq.n	4d48 <__libc_init_array+0x3c>
    4d3a:	adds	r4, #1
    4d3c:	ldr.w	r3, [r5], #4
    4d40:	blx	r3
    4d42:	cmp	r6, r4
    4d44:	bne.n	4d3a <__libc_init_array+0x2e>
    4d46:	pop	{r4, r5, r6, pc}
    4d48:	pop	{r4, r5, r6, pc}
    4d4a:	nop
    4d4c:	.word	0x000059b4
    4d50:	.word	0x000059b4
    4d54:	.word	0x000059c0
    4d58:	.word	0x000059b4

00004d5c <malloc>:
    4d5c:	ldr	r3, [pc, #8]	; (4d68 <malloc+0xc>)
    4d5e:	mov	r1, r0
    4d60:	ldr	r0, [r3, #0]
    4d62:	b.w	4d6c <_malloc_r>
    4d66:	nop
    4d68:	.word	0x1fff11a8

00004d6c <_malloc_r>:
    4d6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d70:	add.w	r5, r1, #11
    4d74:	cmp	r5, #22
    4d76:	sub	sp, #12
    4d78:	mov	r6, r0
    4d7a:	bls.w	4ebc <_malloc_r+0x150>
    4d7e:	bics.w	r5, r5, #7
    4d82:	bmi.w	4f04 <_malloc_r+0x198>
    4d86:	cmp	r1, r5
    4d88:	bhi.w	4f04 <_malloc_r+0x198>
    4d8c:	bl	52dc <__malloc_lock>
    4d90:	cmp.w	r5, #504	; 0x1f8
    4d94:	bcc.w	52d0 <_malloc_r+0x564>
    4d98:	lsrs	r3, r5, #9
    4d9a:	beq.w	4f12 <_malloc_r+0x1a6>
    4d9e:	cmp	r3, #4
    4da0:	bhi.w	50aa <_malloc_r+0x33e>
    4da4:	lsrs	r0, r5, #6
    4da6:	add.w	lr, r0, #57	; 0x39
    4daa:	mov.w	r3, lr, lsl #1
    4dae:	adds	r0, #56	; 0x38
    4db0:	ldr	r7, [pc, #784]	; (50c4 <_malloc_r+0x358>)
    4db2:	add.w	r3, r7, r3, lsl #2
    4db6:	sub.w	r1, r3, #8
    4dba:	ldr	r4, [r3, #4]
    4dbc:	cmp	r1, r4
    4dbe:	bne.n	4dd0 <_malloc_r+0x64>
    4dc0:	b.n	4f1c <_malloc_r+0x1b0>
    4dc2:	cmp	r2, #0
    4dc4:	bge.w	4f20 <_malloc_r+0x1b4>
    4dc8:	ldr	r4, [r4, #12]
    4dca:	cmp	r1, r4
    4dcc:	beq.w	4f1c <_malloc_r+0x1b0>
    4dd0:	ldr	r3, [r4, #4]
    4dd2:	bic.w	r3, r3, #3
    4dd6:	subs	r2, r3, r5
    4dd8:	cmp	r2, #15
    4dda:	ble.n	4dc2 <_malloc_r+0x56>
    4ddc:	ldr	r1, [pc, #740]	; (50c4 <_malloc_r+0x358>)
    4dde:	ldr	r4, [r7, #16]
    4de0:	add.w	lr, r1, #8
    4de4:	cmp	r4, lr
    4de6:	beq.w	5150 <_malloc_r+0x3e4>
    4dea:	ldr	r3, [r4, #4]
    4dec:	bic.w	r3, r3, #3
    4df0:	subs	r2, r3, r5
    4df2:	cmp	r2, #15
    4df4:	bgt.w	512a <_malloc_r+0x3be>
    4df8:	cmp	r2, #0
    4dfa:	str.w	lr, [r1, #20]
    4dfe:	str.w	lr, [r1, #16]
    4e02:	bge.w	4f42 <_malloc_r+0x1d6>
    4e06:	cmp.w	r3, #512	; 0x200
    4e0a:	bcs.w	50dc <_malloc_r+0x370>
    4e0e:	lsrs	r3, r3, #3
    4e10:	add.w	ip, r3, #1
    4e14:	movs	r2, #1
    4e16:	asrs	r3, r3, #2
    4e18:	lsl.w	r3, r2, r3
    4e1c:	ldr	r2, [r1, #4]
    4e1e:	ldr.w	r8, [r1, ip, lsl #3]
    4e22:	str.w	r8, [r4, #8]
    4e26:	add.w	r9, r1, ip, lsl #3
    4e2a:	orrs	r2, r3
    4e2c:	sub.w	r3, r9, #8
    4e30:	str	r3, [r4, #12]
    4e32:	str	r2, [r1, #4]
    4e34:	str.w	r4, [r1, ip, lsl #3]
    4e38:	str.w	r4, [r8, #12]
    4e3c:	asrs	r3, r0, #2
    4e3e:	movs	r4, #1
    4e40:	lsls	r4, r3
    4e42:	cmp	r4, r2
    4e44:	bhi.w	4f5c <_malloc_r+0x1f0>
    4e48:	tst	r4, r2
    4e4a:	bne.n	4e5a <_malloc_r+0xee>
    4e4c:	bic.w	r0, r0, #3
    4e50:	lsls	r4, r4, #1
    4e52:	tst	r4, r2
    4e54:	add.w	r0, r0, #4
    4e58:	beq.n	4e50 <_malloc_r+0xe4>
    4e5a:	add.w	r9, r7, r0, lsl #3
    4e5e:	mov	ip, r9
    4e60:	mov	r8, r0
    4e62:	ldr.w	r1, [ip, #12]
    4e66:	cmp	ip, r1
    4e68:	bne.n	4e7a <_malloc_r+0x10e>
    4e6a:	b.n	5154 <_malloc_r+0x3e8>
    4e6c:	cmp	r2, #0
    4e6e:	bge.w	5174 <_malloc_r+0x408>
    4e72:	ldr	r1, [r1, #12]
    4e74:	cmp	ip, r1
    4e76:	beq.w	5154 <_malloc_r+0x3e8>
    4e7a:	ldr	r3, [r1, #4]
    4e7c:	bic.w	r3, r3, #3
    4e80:	subs	r2, r3, r5
    4e82:	cmp	r2, #15
    4e84:	ble.n	4e6c <_malloc_r+0x100>
    4e86:	mov	r4, r1
    4e88:	ldr.w	ip, [r1, #12]
    4e8c:	ldr.w	r8, [r4, #8]!
    4e90:	adds	r3, r1, r5
    4e92:	orr.w	r5, r5, #1
    4e96:	str	r5, [r1, #4]
    4e98:	orr.w	r1, r2, #1
    4e9c:	str.w	ip, [r8, #12]
    4ea0:	mov	r0, r6
    4ea2:	str.w	r8, [ip, #8]
    4ea6:	str	r3, [r7, #20]
    4ea8:	str	r3, [r7, #16]
    4eaa:	str.w	lr, [r3, #12]
    4eae:	str.w	lr, [r3, #8]
    4eb2:	str	r1, [r3, #4]
    4eb4:	str	r2, [r3, r2]
    4eb6:	bl	52e0 <__malloc_unlock>
    4eba:	b.n	4efc <_malloc_r+0x190>
    4ebc:	cmp	r1, #16
    4ebe:	bhi.n	4f04 <_malloc_r+0x198>
    4ec0:	bl	52dc <__malloc_lock>
    4ec4:	movs	r5, #16
    4ec6:	movs	r3, #6
    4ec8:	movs	r0, #2
    4eca:	ldr	r7, [pc, #504]	; (50c4 <_malloc_r+0x358>)
    4ecc:	add.w	r3, r7, r3, lsl #2
    4ed0:	sub.w	r2, r3, #8
    4ed4:	ldr	r4, [r3, #4]
    4ed6:	cmp	r4, r2
    4ed8:	beq.w	5166 <_malloc_r+0x3fa>
    4edc:	ldr	r3, [r4, #4]
    4ede:	ldr	r1, [r4, #12]
    4ee0:	ldr	r5, [r4, #8]
    4ee2:	bic.w	r3, r3, #3
    4ee6:	add	r3, r4
    4ee8:	mov	r0, r6
    4eea:	ldr	r2, [r3, #4]
    4eec:	str	r1, [r5, #12]
    4eee:	orr.w	r2, r2, #1
    4ef2:	str	r5, [r1, #8]
    4ef4:	str	r2, [r3, #4]
    4ef6:	bl	52e0 <__malloc_unlock>
    4efa:	adds	r4, #8
    4efc:	mov	r0, r4
    4efe:	add	sp, #12
    4f00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f04:	movs	r4, #0
    4f06:	movs	r3, #12
    4f08:	mov	r0, r4
    4f0a:	str	r3, [r6, #0]
    4f0c:	add	sp, #12
    4f0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f12:	movs	r3, #128	; 0x80
    4f14:	mov.w	lr, #64	; 0x40
    4f18:	movs	r0, #63	; 0x3f
    4f1a:	b.n	4db0 <_malloc_r+0x44>
    4f1c:	mov	r0, lr
    4f1e:	b.n	4ddc <_malloc_r+0x70>
    4f20:	add	r3, r4
    4f22:	ldr	r1, [r4, #12]
    4f24:	ldr	r2, [r3, #4]
    4f26:	ldr	r5, [r4, #8]
    4f28:	orr.w	r2, r2, #1
    4f2c:	str	r1, [r5, #12]
    4f2e:	mov	r0, r6
    4f30:	str	r5, [r1, #8]
    4f32:	str	r2, [r3, #4]
    4f34:	bl	52e0 <__malloc_unlock>
    4f38:	adds	r4, #8
    4f3a:	mov	r0, r4
    4f3c:	add	sp, #12
    4f3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f42:	add	r3, r4
    4f44:	mov	r0, r6
    4f46:	ldr	r2, [r3, #4]
    4f48:	orr.w	r2, r2, #1
    4f4c:	str	r2, [r3, #4]
    4f4e:	bl	52e0 <__malloc_unlock>
    4f52:	adds	r4, #8
    4f54:	mov	r0, r4
    4f56:	add	sp, #12
    4f58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f5c:	ldr	r4, [r7, #8]
    4f5e:	ldr	r3, [r4, #4]
    4f60:	bic.w	r8, r3, #3
    4f64:	cmp	r8, r5
    4f66:	bcc.n	4f72 <_malloc_r+0x206>
    4f68:	rsb	r3, r5, r8
    4f6c:	cmp	r3, #15
    4f6e:	bgt.w	508a <_malloc_r+0x31e>
    4f72:	ldr	r3, [pc, #340]	; (50c8 <_malloc_r+0x35c>)
    4f74:	ldr.w	r9, [pc, #352]	; 50d8 <_malloc_r+0x36c>
    4f78:	ldr	r2, [r3, #0]
    4f7a:	ldr.w	r3, [r9]
    4f7e:	adds	r3, #1
    4f80:	add	r2, r5
    4f82:	add.w	sl, r4, r8
    4f86:	beq.w	524a <_malloc_r+0x4de>
    4f8a:	add.w	r2, r2, #4096	; 0x1000
    4f8e:	adds	r2, #15
    4f90:	bic.w	r2, r2, #4080	; 0xff0
    4f94:	bic.w	r2, r2, #15
    4f98:	mov	r1, r2
    4f9a:	mov	r0, r6
    4f9c:	str	r2, [sp, #4]
    4f9e:	bl	52e4 <_sbrk_r>
    4fa2:	cmp.w	r0, #4294967295
    4fa6:	mov	fp, r0
    4fa8:	ldr	r2, [sp, #4]
    4faa:	beq.w	525e <_malloc_r+0x4f2>
    4fae:	cmp	sl, r0
    4fb0:	bhi.w	51ac <_malloc_r+0x440>
    4fb4:	ldr	r3, [pc, #276]	; (50cc <_malloc_r+0x360>)
    4fb6:	ldr	r1, [r3, #0]
    4fb8:	cmp	sl, fp
    4fba:	add	r1, r2
    4fbc:	str	r1, [r3, #0]
    4fbe:	beq.w	5268 <_malloc_r+0x4fc>
    4fc2:	ldr.w	r0, [r9]
    4fc6:	ldr.w	lr, [pc, #272]	; 50d8 <_malloc_r+0x36c>
    4fca:	adds	r0, #1
    4fcc:	ittet	ne
    4fce:	rsbne	sl, sl, fp
    4fd2:	addne	r1, sl
    4fd4:	streq.w	fp, [lr]
    4fd8:	strne	r1, [r3, #0]
    4fda:	ands.w	r1, fp, #7
    4fde:	beq.w	5210 <_malloc_r+0x4a4>
    4fe2:	rsb	r0, r1, #8
    4fe6:	rsb	r1, r1, #4096	; 0x1000
    4fea:	add	fp, r0
    4fec:	adds	r1, #8
    4fee:	add	r2, fp
    4ff0:	ubfx	r2, r2, #0, #12
    4ff4:	rsb	r9, r2, r1
    4ff8:	mov	r1, r9
    4ffa:	mov	r0, r6
    4ffc:	str	r3, [sp, #4]
    4ffe:	bl	52e4 <_sbrk_r>
    5002:	adds	r3, r0, #1
    5004:	ldr	r3, [sp, #4]
    5006:	beq.w	5288 <_malloc_r+0x51c>
    500a:	rsb	r2, fp, r0
    500e:	add	r2, r9
    5010:	orr.w	r2, r2, #1
    5014:	ldr	r1, [r3, #0]
    5016:	str.w	fp, [r7, #8]
    501a:	add	r1, r9
    501c:	cmp	r4, r7
    501e:	str.w	r2, [fp, #4]
    5022:	str	r1, [r3, #0]
    5024:	ldr.w	r9, [pc, #164]	; 50cc <_malloc_r+0x360>
    5028:	beq.n	5058 <_malloc_r+0x2ec>
    502a:	cmp.w	r8, #15
    502e:	bls.w	522c <_malloc_r+0x4c0>
    5032:	ldr	r2, [r4, #4]
    5034:	sub.w	r3, r8, #12
    5038:	bic.w	r3, r3, #7
    503c:	adds	r0, r4, r3
    503e:	and.w	r2, r2, #1
    5042:	mov.w	lr, #5
    5046:	orrs	r2, r3
    5048:	cmp	r3, #15
    504a:	str	r2, [r4, #4]
    504c:	str.w	lr, [r0, #4]
    5050:	str.w	lr, [r0, #8]
    5054:	bhi.w	5290 <_malloc_r+0x524>
    5058:	ldr	r3, [pc, #116]	; (50d0 <_malloc_r+0x364>)
    505a:	ldr	r4, [r7, #8]
    505c:	ldr	r2, [r3, #0]
    505e:	cmp	r1, r2
    5060:	it	hi
    5062:	strhi	r1, [r3, #0]
    5064:	ldr	r3, [pc, #108]	; (50d4 <_malloc_r+0x368>)
    5066:	ldr	r2, [r3, #0]
    5068:	cmp	r1, r2
    506a:	ldr	r2, [r4, #4]
    506c:	it	hi
    506e:	strhi	r1, [r3, #0]
    5070:	bic.w	r2, r2, #3
    5074:	cmp	r5, r2
    5076:	sub.w	r3, r2, r5
    507a:	bhi.n	5080 <_malloc_r+0x314>
    507c:	cmp	r3, #15
    507e:	bgt.n	508a <_malloc_r+0x31e>
    5080:	mov	r0, r6
    5082:	bl	52e0 <__malloc_unlock>
    5086:	movs	r4, #0
    5088:	b.n	4efc <_malloc_r+0x190>
    508a:	adds	r2, r4, r5
    508c:	orr.w	r3, r3, #1
    5090:	orr.w	r5, r5, #1
    5094:	str	r5, [r4, #4]
    5096:	mov	r0, r6
    5098:	str	r2, [r7, #8]
    509a:	str	r3, [r2, #4]
    509c:	bl	52e0 <__malloc_unlock>
    50a0:	adds	r4, #8
    50a2:	mov	r0, r4
    50a4:	add	sp, #12
    50a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50aa:	cmp	r3, #20
    50ac:	bls.n	5192 <_malloc_r+0x426>
    50ae:	cmp	r3, #84	; 0x54
    50b0:	bhi.w	51fc <_malloc_r+0x490>
    50b4:	lsrs	r0, r5, #12
    50b6:	add.w	lr, r0, #111	; 0x6f
    50ba:	mov.w	r3, lr, lsl #1
    50be:	adds	r0, #110	; 0x6e
    50c0:	b.n	4db0 <_malloc_r+0x44>
    50c2:	nop
    50c4:	.word	0x1fff11ac
    50c8:	.word	0x1fff1d94
    50cc:	.word	0x1fff1d98
    50d0:	.word	0x1fff1d90
    50d4:	.word	0x1fff1d8c
    50d8:	.word	0x1fff15b8
    50dc:	lsrs	r2, r3, #9
    50de:	cmp	r2, #4
    50e0:	bls.n	51a0 <_malloc_r+0x434>
    50e2:	cmp	r2, #20
    50e4:	bhi.w	524e <_malloc_r+0x4e2>
    50e8:	add.w	r1, r2, #92	; 0x5c
    50ec:	lsls	r1, r1, #1
    50ee:	adds	r2, #91	; 0x5b
    50f0:	add.w	ip, r7, r1, lsl #2
    50f4:	ldr.w	r1, [r7, r1, lsl #2]
    50f8:	ldr.w	r8, [pc, #476]	; 52d8 <_malloc_r+0x56c>
    50fc:	sub.w	ip, ip, #8
    5100:	cmp	ip, r1
    5102:	beq.w	5216 <_malloc_r+0x4aa>
    5106:	ldr	r2, [r1, #4]
    5108:	bic.w	r2, r2, #3
    510c:	cmp	r3, r2
    510e:	bcs.n	5116 <_malloc_r+0x3aa>
    5110:	ldr	r1, [r1, #8]
    5112:	cmp	ip, r1
    5114:	bne.n	5106 <_malloc_r+0x39a>
    5116:	ldr.w	ip, [r1, #12]
    511a:	ldr	r2, [r7, #4]
    511c:	str.w	ip, [r4, #12]
    5120:	str	r1, [r4, #8]
    5122:	str.w	r4, [ip, #8]
    5126:	str	r4, [r1, #12]
    5128:	b.n	4e3c <_malloc_r+0xd0>
    512a:	adds	r3, r4, r5
    512c:	orr.w	r7, r2, #1
    5130:	orr.w	r5, r5, #1
    5134:	str	r5, [r4, #4]
    5136:	mov	r0, r6
    5138:	str	r3, [r1, #20]
    513a:	str	r3, [r1, #16]
    513c:	str.w	lr, [r3, #12]
    5140:	str.w	lr, [r3, #8]
    5144:	str	r7, [r3, #4]
    5146:	str	r2, [r3, r2]
    5148:	adds	r4, #8
    514a:	bl	52e0 <__malloc_unlock>
    514e:	b.n	4efc <_malloc_r+0x190>
    5150:	ldr	r2, [r1, #4]
    5152:	b.n	4e3c <_malloc_r+0xd0>
    5154:	add.w	r8, r8, #1
    5158:	tst.w	r8, #3
    515c:	add.w	ip, ip, #8
    5160:	bne.w	4e62 <_malloc_r+0xf6>
    5164:	b.n	51c8 <_malloc_r+0x45c>
    5166:	ldr	r4, [r3, #12]
    5168:	cmp	r3, r4
    516a:	it	eq
    516c:	addeq	r0, #2
    516e:	beq.w	4ddc <_malloc_r+0x70>
    5172:	b.n	4edc <_malloc_r+0x170>
    5174:	add	r3, r1
    5176:	mov	r4, r1
    5178:	ldr	r2, [r3, #4]
    517a:	ldr	r1, [r1, #12]
    517c:	ldr.w	r5, [r4, #8]!
    5180:	orr.w	r2, r2, #1
    5184:	str	r2, [r3, #4]
    5186:	mov	r0, r6
    5188:	str	r1, [r5, #12]
    518a:	str	r5, [r1, #8]
    518c:	bl	52e0 <__malloc_unlock>
    5190:	b.n	4efc <_malloc_r+0x190>
    5192:	add.w	lr, r3, #92	; 0x5c
    5196:	add.w	r0, r3, #91	; 0x5b
    519a:	mov.w	r3, lr, lsl #1
    519e:	b.n	4db0 <_malloc_r+0x44>
    51a0:	lsrs	r2, r3, #6
    51a2:	add.w	r1, r2, #57	; 0x39
    51a6:	lsls	r1, r1, #1
    51a8:	adds	r2, #56	; 0x38
    51aa:	b.n	50f0 <_malloc_r+0x384>
    51ac:	cmp	r4, r7
    51ae:	ldr	r3, [pc, #296]	; (52d8 <_malloc_r+0x56c>)
    51b0:	beq.w	4fb4 <_malloc_r+0x248>
    51b4:	ldr	r4, [r3, #8]
    51b6:	ldr	r2, [r4, #4]
    51b8:	bic.w	r2, r2, #3
    51bc:	b.n	5074 <_malloc_r+0x308>
    51be:	ldr.w	r3, [r9], #-8
    51c2:	cmp	r9, r3
    51c4:	bne.w	52cc <_malloc_r+0x560>
    51c8:	tst.w	r0, #3
    51cc:	add.w	r0, r0, #4294967295
    51d0:	bne.n	51be <_malloc_r+0x452>
    51d2:	ldr	r3, [r7, #4]
    51d4:	bic.w	r3, r3, r4
    51d8:	str	r3, [r7, #4]
    51da:	lsls	r4, r4, #1
    51dc:	cmp	r4, r3
    51de:	bhi.w	4f5c <_malloc_r+0x1f0>
    51e2:	cmp	r4, #0
    51e4:	beq.w	4f5c <_malloc_r+0x1f0>
    51e8:	tst	r4, r3
    51ea:	mov	r0, r8
    51ec:	bne.w	4e5a <_malloc_r+0xee>
    51f0:	lsls	r4, r4, #1
    51f2:	tst	r4, r3
    51f4:	add.w	r0, r0, #4
    51f8:	beq.n	51f0 <_malloc_r+0x484>
    51fa:	b.n	4e5a <_malloc_r+0xee>
    51fc:	cmp.w	r3, #340	; 0x154
    5200:	bhi.n	5234 <_malloc_r+0x4c8>
    5202:	lsrs	r0, r5, #15
    5204:	add.w	lr, r0, #120	; 0x78
    5208:	mov.w	r3, lr, lsl #1
    520c:	adds	r0, #119	; 0x77
    520e:	b.n	4db0 <_malloc_r+0x44>
    5210:	mov.w	r1, #4096	; 0x1000
    5214:	b.n	4fee <_malloc_r+0x282>
    5216:	movs	r1, #1
    5218:	ldr.w	r3, [r8, #4]
    521c:	asrs	r2, r2, #2
    521e:	lsl.w	r2, r1, r2
    5222:	orrs	r2, r3
    5224:	str.w	r2, [r8, #4]
    5228:	mov	r1, ip
    522a:	b.n	511c <_malloc_r+0x3b0>
    522c:	movs	r3, #1
    522e:	str.w	r3, [fp, #4]
    5232:	b.n	5080 <_malloc_r+0x314>
    5234:	movw	r2, #1364	; 0x554
    5238:	cmp	r3, r2
    523a:	bhi.n	527e <_malloc_r+0x512>
    523c:	lsrs	r0, r5, #18
    523e:	add.w	lr, r0, #125	; 0x7d
    5242:	mov.w	r3, lr, lsl #1
    5246:	adds	r0, #124	; 0x7c
    5248:	b.n	4db0 <_malloc_r+0x44>
    524a:	adds	r2, #16
    524c:	b.n	4f98 <_malloc_r+0x22c>
    524e:	cmp	r2, #84	; 0x54
    5250:	bhi.n	52a0 <_malloc_r+0x534>
    5252:	lsrs	r2, r3, #12
    5254:	add.w	r1, r2, #111	; 0x6f
    5258:	lsls	r1, r1, #1
    525a:	adds	r2, #110	; 0x6e
    525c:	b.n	50f0 <_malloc_r+0x384>
    525e:	ldr	r4, [r7, #8]
    5260:	ldr	r2, [r4, #4]
    5262:	bic.w	r2, r2, #3
    5266:	b.n	5074 <_malloc_r+0x308>
    5268:	ubfx	r0, sl, #0, #12
    526c:	cmp	r0, #0
    526e:	bne.w	4fc2 <_malloc_r+0x256>
    5272:	add	r2, r8
    5274:	ldr	r3, [r7, #8]
    5276:	orr.w	r2, r2, #1
    527a:	str	r2, [r3, #4]
    527c:	b.n	5058 <_malloc_r+0x2ec>
    527e:	movs	r3, #254	; 0xfe
    5280:	mov.w	lr, #127	; 0x7f
    5284:	movs	r0, #126	; 0x7e
    5286:	b.n	4db0 <_malloc_r+0x44>
    5288:	movs	r2, #1
    528a:	mov.w	r9, #0
    528e:	b.n	5014 <_malloc_r+0x2a8>
    5290:	add.w	r1, r4, #8
    5294:	mov	r0, r6
    5296:	bl	53ec <_free_r>
    529a:	ldr.w	r1, [r9]
    529e:	b.n	5058 <_malloc_r+0x2ec>
    52a0:	cmp.w	r2, #340	; 0x154
    52a4:	bhi.n	52b2 <_malloc_r+0x546>
    52a6:	lsrs	r2, r3, #15
    52a8:	add.w	r1, r2, #120	; 0x78
    52ac:	lsls	r1, r1, #1
    52ae:	adds	r2, #119	; 0x77
    52b0:	b.n	50f0 <_malloc_r+0x384>
    52b2:	movw	r1, #1364	; 0x554
    52b6:	cmp	r2, r1
    52b8:	bhi.n	52c6 <_malloc_r+0x55a>
    52ba:	lsrs	r2, r3, #18
    52bc:	add.w	r1, r2, #125	; 0x7d
    52c0:	lsls	r1, r1, #1
    52c2:	adds	r2, #124	; 0x7c
    52c4:	b.n	50f0 <_malloc_r+0x384>
    52c6:	movs	r1, #254	; 0xfe
    52c8:	movs	r2, #126	; 0x7e
    52ca:	b.n	50f0 <_malloc_r+0x384>
    52cc:	ldr	r3, [r7, #4]
    52ce:	b.n	51da <_malloc_r+0x46e>
    52d0:	lsrs	r0, r5, #3
    52d2:	adds	r3, r0, #1
    52d4:	lsls	r3, r3, #1
    52d6:	b.n	4eca <_malloc_r+0x15e>
    52d8:	.word	0x1fff11ac

000052dc <__malloc_lock>:
    52dc:	bx	lr
    52de:	nop

000052e0 <__malloc_unlock>:
    52e0:	bx	lr
    52e2:	nop

000052e4 <_sbrk_r>:
    52e4:	push	{r3, r4, r5, lr}
    52e6:	ldr	r4, [pc, #28]	; (5304 <_sbrk_r+0x20>)
    52e8:	movs	r3, #0
    52ea:	mov	r5, r0
    52ec:	mov	r0, r1
    52ee:	str	r3, [r4, #0]
    52f0:	bl	4678 <_sbrk>
    52f4:	adds	r3, r0, #1
    52f6:	beq.n	52fa <_sbrk_r+0x16>
    52f8:	pop	{r3, r4, r5, pc}
    52fa:	ldr	r3, [r4, #0]
    52fc:	cmp	r3, #0
    52fe:	beq.n	52f8 <_sbrk_r+0x14>
    5300:	str	r3, [r5, #0]
    5302:	pop	{r3, r4, r5, pc}
    5304:	.word	0x1fff1f04

00005308 <register_fini>:
    5308:	ldr	r3, [pc, #8]	; (5314 <register_fini+0xc>)
    530a:	cbz	r3, 5312 <register_fini+0xa>
    530c:	ldr	r0, [pc, #8]	; (5318 <register_fini+0x10>)
    530e:	b.w	531c <atexit>
    5312:	bx	lr
    5314:	.word	0x00000000
    5318:	.word	0x00005329

0000531c <atexit>:
    531c:	movs	r3, #0
    531e:	mov	r1, r0
    5320:	mov	r2, r3
    5322:	mov	r0, r3
    5324:	b.w	55bc <__register_exitproc>

00005328 <__libc_fini_array>:
    5328:	push	{r3, r4, r5, lr}
    532a:	ldr	r5, [pc, #28]	; (5348 <__libc_fini_array+0x20>)
    532c:	ldr	r4, [pc, #28]	; (534c <__libc_fini_array+0x24>)
    532e:	subs	r4, r5, r4
    5330:	asrs	r4, r4, #2
    5332:	beq.n	5340 <__libc_fini_array+0x18>
    5334:	subs	r4, #1
    5336:	ldr.w	r3, [r5, #-4]!
    533a:	blx	r3
    533c:	cmp	r4, #0
    533e:	bne.n	5334 <__libc_fini_array+0xc>
    5340:	ldmia.w	sp!, {r3, r4, r5, lr}
    5344:	b.w	59c0 <__init_array_end>
	...

00005350 <_malloc_trim_r>:
    5350:	push	{r3, r4, r5, r6, r7, lr}
    5352:	ldr	r7, [pc, #140]	; (53e0 <_malloc_trim_r+0x90>)
    5354:	mov	r4, r1
    5356:	mov	r6, r0
    5358:	bl	52dc <__malloc_lock>
    535c:	ldr	r3, [r7, #8]
    535e:	ldr	r5, [r3, #4]
    5360:	bic.w	r5, r5, #3
    5364:	subs	r1, r5, r4
    5366:	addw	r1, r1, #4079	; 0xfef
    536a:	bic.w	r1, r1, #4080	; 0xff0
    536e:	bic.w	r1, r1, #15
    5372:	sub.w	r4, r1, #4096	; 0x1000
    5376:	cmp.w	r4, #4096	; 0x1000
    537a:	blt.n	538c <_malloc_trim_r+0x3c>
    537c:	movs	r1, #0
    537e:	mov	r0, r6
    5380:	bl	52e4 <_sbrk_r>
    5384:	ldr	r3, [r7, #8]
    5386:	add	r3, r5
    5388:	cmp	r0, r3
    538a:	beq.n	5396 <_malloc_trim_r+0x46>
    538c:	mov	r0, r6
    538e:	bl	52e0 <__malloc_unlock>
    5392:	movs	r0, #0
    5394:	pop	{r3, r4, r5, r6, r7, pc}
    5396:	negs	r1, r4
    5398:	mov	r0, r6
    539a:	bl	52e4 <_sbrk_r>
    539e:	adds	r0, #1
    53a0:	beq.n	53be <_malloc_trim_r+0x6e>
    53a2:	ldr	r3, [pc, #64]	; (53e4 <_malloc_trim_r+0x94>)
    53a4:	ldr	r2, [r7, #8]
    53a6:	ldr	r1, [r3, #0]
    53a8:	subs	r5, r5, r4
    53aa:	orr.w	r5, r5, #1
    53ae:	mov	r0, r6
    53b0:	subs	r1, r1, r4
    53b2:	str	r5, [r2, #4]
    53b4:	str	r1, [r3, #0]
    53b6:	bl	52e0 <__malloc_unlock>
    53ba:	movs	r0, #1
    53bc:	pop	{r3, r4, r5, r6, r7, pc}
    53be:	movs	r1, #0
    53c0:	mov	r0, r6
    53c2:	bl	52e4 <_sbrk_r>
    53c6:	ldr	r2, [r7, #8]
    53c8:	subs	r3, r0, r2
    53ca:	cmp	r3, #15
    53cc:	ble.n	538c <_malloc_trim_r+0x3c>
    53ce:	ldr	r4, [pc, #24]	; (53e8 <_malloc_trim_r+0x98>)
    53d0:	ldr	r1, [pc, #16]	; (53e4 <_malloc_trim_r+0x94>)
    53d2:	ldr	r4, [r4, #0]
    53d4:	orr.w	r3, r3, #1
    53d8:	subs	r0, r0, r4
    53da:	str	r3, [r2, #4]
    53dc:	str	r0, [r1, #0]
    53de:	b.n	538c <_malloc_trim_r+0x3c>
    53e0:	.word	0x1fff11ac
    53e4:	.word	0x1fff1d98
    53e8:	.word	0x1fff15b8

000053ec <_free_r>:
    53ec:	cmp	r1, #0
    53ee:	beq.n	547c <_free_r+0x90>
    53f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53f4:	mov	r5, r1
    53f6:	mov	r8, r0
    53f8:	bl	52dc <__malloc_lock>
    53fc:	ldr.w	r7, [r5, #-4]
    5400:	ldr	r1, [pc, #424]	; (55ac <_free_r+0x1c0>)
    5402:	bic.w	r3, r7, #1
    5406:	sub.w	r4, r5, #8
    540a:	adds	r2, r4, r3
    540c:	ldr	r6, [r1, #8]
    540e:	ldr	r0, [r2, #4]
    5410:	cmp	r2, r6
    5412:	bic.w	r0, r0, #3
    5416:	beq.n	54de <_free_r+0xf2>
    5418:	lsls	r6, r7, #31
    541a:	str	r0, [r2, #4]
    541c:	bmi.n	5436 <_free_r+0x4a>
    541e:	ldr.w	r7, [r5, #-8]
    5422:	subs	r4, r4, r7
    5424:	add.w	lr, r1, #8
    5428:	ldr	r5, [r4, #8]
    542a:	cmp	r5, lr
    542c:	add	r3, r7
    542e:	beq.n	5510 <_free_r+0x124>
    5430:	ldr	r7, [r4, #12]
    5432:	str	r7, [r5, #12]
    5434:	str	r5, [r7, #8]
    5436:	adds	r5, r2, r0
    5438:	ldr	r5, [r5, #4]
    543a:	lsls	r5, r5, #31
    543c:	bpl.n	54c4 <_free_r+0xd8>
    543e:	orr.w	r2, r3, #1
    5442:	str	r2, [r4, #4]
    5444:	str	r3, [r4, r3]
    5446:	cmp.w	r3, #512	; 0x200
    544a:	bcs.n	547e <_free_r+0x92>
    544c:	lsrs	r3, r3, #3
    544e:	adds	r2, r3, #1
    5450:	ldr	r5, [r1, #4]
    5452:	ldr.w	r7, [r1, r2, lsl #3]
    5456:	str	r7, [r4, #8]
    5458:	movs	r0, #1
    545a:	asrs	r3, r3, #2
    545c:	lsl.w	r3, r0, r3
    5460:	add.w	r0, r1, r2, lsl #3
    5464:	orrs	r5, r3
    5466:	subs	r0, #8
    5468:	str	r0, [r4, #12]
    546a:	str	r5, [r1, #4]
    546c:	str.w	r4, [r1, r2, lsl #3]
    5470:	str	r4, [r7, #12]
    5472:	mov	r0, r8
    5474:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5478:	b.w	52e0 <__malloc_unlock>
    547c:	bx	lr
    547e:	lsrs	r2, r3, #9
    5480:	cmp	r2, #4
    5482:	bhi.n	552c <_free_r+0x140>
    5484:	lsrs	r2, r3, #6
    5486:	add.w	r7, r2, #57	; 0x39
    548a:	lsls	r7, r7, #1
    548c:	add.w	r5, r2, #56	; 0x38
    5490:	add.w	r0, r1, r7, lsl #2
    5494:	ldr.w	r2, [r1, r7, lsl #2]
    5498:	ldr	r1, [pc, #272]	; (55ac <_free_r+0x1c0>)
    549a:	subs	r0, #8
    549c:	cmp	r0, r2
    549e:	beq.n	553c <_free_r+0x150>
    54a0:	ldr	r1, [r2, #4]
    54a2:	bic.w	r1, r1, #3
    54a6:	cmp	r3, r1
    54a8:	bcs.n	54b0 <_free_r+0xc4>
    54aa:	ldr	r2, [r2, #8]
    54ac:	cmp	r0, r2
    54ae:	bne.n	54a0 <_free_r+0xb4>
    54b0:	ldr	r0, [r2, #12]
    54b2:	str	r0, [r4, #12]
    54b4:	str	r2, [r4, #8]
    54b6:	str	r4, [r0, #8]
    54b8:	str	r4, [r2, #12]
    54ba:	mov	r0, r8
    54bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    54c0:	b.w	52e0 <__malloc_unlock>
    54c4:	ldr	r5, [r2, #8]
    54c6:	ldr	r7, [pc, #232]	; (55b0 <_free_r+0x1c4>)
    54c8:	cmp	r5, r7
    54ca:	add	r3, r0
    54cc:	beq.n	554e <_free_r+0x162>
    54ce:	ldr	r0, [r2, #12]
    54d0:	str	r0, [r5, #12]
    54d2:	orr.w	r2, r3, #1
    54d6:	str	r5, [r0, #8]
    54d8:	str	r2, [r4, #4]
    54da:	str	r3, [r4, r3]
    54dc:	b.n	5446 <_free_r+0x5a>
    54de:	lsls	r7, r7, #31
    54e0:	add	r3, r0
    54e2:	bmi.n	54f4 <_free_r+0x108>
    54e4:	ldr.w	r2, [r5, #-8]
    54e8:	subs	r4, r4, r2
    54ea:	add	r3, r2
    54ec:	ldr	r0, [r4, #8]
    54ee:	ldr	r2, [r4, #12]
    54f0:	str	r2, [r0, #12]
    54f2:	str	r0, [r2, #8]
    54f4:	ldr	r2, [pc, #188]	; (55b4 <_free_r+0x1c8>)
    54f6:	ldr	r2, [r2, #0]
    54f8:	orr.w	r0, r3, #1
    54fc:	cmp	r3, r2
    54fe:	str	r0, [r4, #4]
    5500:	str	r4, [r1, #8]
    5502:	bcc.n	5472 <_free_r+0x86>
    5504:	ldr	r3, [pc, #176]	; (55b8 <_free_r+0x1cc>)
    5506:	mov	r0, r8
    5508:	ldr	r1, [r3, #0]
    550a:	bl	5350 <_malloc_trim_r>
    550e:	b.n	5472 <_free_r+0x86>
    5510:	adds	r1, r2, r0
    5512:	ldr	r1, [r1, #4]
    5514:	lsls	r1, r1, #31
    5516:	bmi.n	55a2 <_free_r+0x1b6>
    5518:	ldr	r1, [r2, #8]
    551a:	ldr	r2, [r2, #12]
    551c:	str	r2, [r1, #12]
    551e:	add	r3, r0
    5520:	orr.w	r0, r3, #1
    5524:	str	r1, [r2, #8]
    5526:	str	r0, [r4, #4]
    5528:	str	r3, [r4, r3]
    552a:	b.n	5472 <_free_r+0x86>
    552c:	cmp	r2, #20
    552e:	bhi.n	5560 <_free_r+0x174>
    5530:	add.w	r7, r2, #92	; 0x5c
    5534:	lsls	r7, r7, #1
    5536:	add.w	r5, r2, #91	; 0x5b
    553a:	b.n	5490 <_free_r+0xa4>
    553c:	asrs	r2, r5, #2
    553e:	ldr	r3, [r1, #4]
    5540:	movs	r5, #1
    5542:	lsl.w	r2, r5, r2
    5546:	orrs	r3, r2
    5548:	str	r3, [r1, #4]
    554a:	mov	r2, r0
    554c:	b.n	54b2 <_free_r+0xc6>
    554e:	orr.w	r2, r3, #1
    5552:	str	r4, [r1, #20]
    5554:	str	r4, [r1, #16]
    5556:	str	r5, [r4, #12]
    5558:	str	r5, [r4, #8]
    555a:	str	r2, [r4, #4]
    555c:	str	r3, [r4, r3]
    555e:	b.n	5472 <_free_r+0x86>
    5560:	cmp	r2, #84	; 0x54
    5562:	bhi.n	5572 <_free_r+0x186>
    5564:	lsrs	r2, r3, #12
    5566:	add.w	r7, r2, #111	; 0x6f
    556a:	lsls	r7, r7, #1
    556c:	add.w	r5, r2, #110	; 0x6e
    5570:	b.n	5490 <_free_r+0xa4>
    5572:	cmp.w	r2, #340	; 0x154
    5576:	bhi.n	5586 <_free_r+0x19a>
    5578:	lsrs	r2, r3, #15
    557a:	add.w	r7, r2, #120	; 0x78
    557e:	lsls	r7, r7, #1
    5580:	add.w	r5, r2, #119	; 0x77
    5584:	b.n	5490 <_free_r+0xa4>
    5586:	movw	r0, #1364	; 0x554
    558a:	cmp	r2, r0
    558c:	bhi.n	559c <_free_r+0x1b0>
    558e:	lsrs	r2, r3, #18
    5590:	add.w	r7, r2, #125	; 0x7d
    5594:	lsls	r7, r7, #1
    5596:	add.w	r5, r2, #124	; 0x7c
    559a:	b.n	5490 <_free_r+0xa4>
    559c:	movs	r7, #254	; 0xfe
    559e:	movs	r5, #126	; 0x7e
    55a0:	b.n	5490 <_free_r+0xa4>
    55a2:	orr.w	r2, r3, #1
    55a6:	str	r2, [r4, #4]
    55a8:	str	r3, [r4, r3]
    55aa:	b.n	5472 <_free_r+0x86>
    55ac:	.word	0x1fff11ac
    55b0:	.word	0x1fff11b4
    55b4:	.word	0x1fff15b4
    55b8:	.word	0x1fff1d94

000055bc <__register_exitproc>:
    55bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    55c0:	ldr	r4, [pc, #148]	; (5658 <__register_exitproc+0x9c>)
    55c2:	ldr	r5, [r4, #0]
    55c4:	ldr.w	r4, [r5, #328]	; 0x148
    55c8:	mov	r6, r0
    55ca:	mov	r8, r1
    55cc:	mov	sl, r2
    55ce:	mov	r9, r3
    55d0:	cbz	r4, 5644 <__register_exitproc+0x88>
    55d2:	ldr	r0, [r4, #4]
    55d4:	cmp	r0, #31
    55d6:	bgt.n	5608 <__register_exitproc+0x4c>
    55d8:	adds	r3, r0, #1
    55da:	cbz	r6, 55fa <__register_exitproc+0x3e>
    55dc:	add.w	r5, r4, r0, lsl #2
    55e0:	movs	r2, #1
    55e2:	str.w	sl, [r5, #136]	; 0x88
    55e6:	ldr.w	r1, [r4, #392]	; 0x188
    55ea:	lsls	r2, r0
    55ec:	orrs	r1, r2
    55ee:	cmp	r6, #2
    55f0:	str.w	r1, [r4, #392]	; 0x188
    55f4:	str.w	r9, [r5, #264]	; 0x108
    55f8:	beq.n	5638 <__register_exitproc+0x7c>
    55fa:	adds	r0, #2
    55fc:	str	r3, [r4, #4]
    55fe:	str.w	r8, [r4, r0, lsl #2]
    5602:	movs	r0, #0
    5604:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5608:	ldr	r3, [pc, #80]	; (565c <__register_exitproc+0xa0>)
    560a:	cbz	r3, 564e <__register_exitproc+0x92>
    560c:	mov.w	r0, #400	; 0x190
    5610:	bl	4d5c <malloc>
    5614:	mov	r4, r0
    5616:	cbz	r0, 564e <__register_exitproc+0x92>
    5618:	ldr.w	r3, [r5, #328]	; 0x148
    561c:	movs	r7, #0
    561e:	stmia.w	r0, {r3, r7}
    5622:	str.w	r4, [r5, #328]	; 0x148
    5626:	mov	r0, r7
    5628:	movs	r3, #1
    562a:	str.w	r7, [r4, #392]	; 0x188
    562e:	str.w	r7, [r4, #396]	; 0x18c
    5632:	cmp	r6, #0
    5634:	beq.n	55fa <__register_exitproc+0x3e>
    5636:	b.n	55dc <__register_exitproc+0x20>
    5638:	ldr.w	r1, [r4, #396]	; 0x18c
    563c:	orrs	r2, r1
    563e:	str.w	r2, [r4, #396]	; 0x18c
    5642:	b.n	55fa <__register_exitproc+0x3e>
    5644:	add.w	r4, r5, #332	; 0x14c
    5648:	str.w	r4, [r5, #328]	; 0x148
    564c:	b.n	55d2 <__register_exitproc+0x16>
    564e:	mov.w	r0, #4294967295
    5652:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5656:	nop
    5658:	.word	0x000059a4
    565c:	.word	0x00004d5d
    5660:	.word	0x67676f54
    5664:	.word	0x676e696c
    5668:	.word	0x00000000
    566c:	.word	0x7370704f
    5670:	.word	0x6e61202c
    5674:	.word	0x6b6e7520
    5678:	.word	0x6e776f6e
    567c:	.word	0x44494d20
    5680:	.word	0x656d2049
    5684:	.word	0x67617373
    5688:	.word	0x79742065
    568c:	.word	0x00216570
    5690:	.word	0x4f4c4556
    5694:	.word	0x59544943
    5698:	.word	0x00000000
    569c:	.word	0x45544f4e
    56a0:	.word	0x474e454c
    56a4:	.word	0x00004854
    56a8:	.word	0x43544950
    56ac:	.word	0x00000048
    56b0:	.word	0x6f636553
    56b4:	.word	0x2073646e
    56b8:	.word	0x646c6568
    56bc:	.word	0x0000203a
    56c0:	.word	0x6c6c694d
    56c4:	.word	0x63657369
    56c8:	.word	0x73646e6f
    56cc:	.word	0x6c656820
    56d0:	.word	0x00203a64

000056d4 <pin2sc1a>:
    56d4:	................
    56e4:	................
    56f4:	................
    5704:	................
    5714:	........

0000571c <digital_pin_to_info_PGM>:
    571c:	@..C@..@D..CD..@
    572c:	...C...@0..C0..@
    573c:	4..C4..@...C...@
    574c:	...C...@...C...@
    575c:	...C...@...C...@
    576c:	...C...@...C...@
    577c:	...C...@...C...@
    578c:	...C...@...C...@
    579c:	...C...@...C...@
    57ac:	...C...@...C...@
    57bc:	...C...@...C...@
    57cc:	...C...@...C...@
    57dc:	h .Ch..@...C...@
    57ec:	8..C8..@<..C<..@
    57fc:	@..C@..@H..CH..@
    580c:	L..CL..@(..C(..@
    581c:	,..C,..@` .C`..@
    582c:	d .Cd..@ ..C ..@
    583c:	$..C$..@(..C(..@
    584c:	,..C,..@D..CD..@
    585c:	p..Cp..@t..Ct..@
    586c:	h..Ch..@P..CP..@
    587c:	X..CX..@\..C\..@
    588c:	T..CT..@ ..C ..@
    589c:	$..C$..@...C...@
    58ac:	...C...@8..C8..@
    58bc:	4..C4..@0..C0..@
    58cc:	<..C<..@,..C,..@
    58dc:	( .C(..@, .C,..@
    58ec:	. .C...@. .C...@
    58fc:	. .C...@. .C...@
    590c:	. .C...@. .C...@

0000591c <vtable for usb_serial_class>:
	...
    5924:	%B...B...B...B..
    5934:	.B...B...B...B..
    5944:	....

00005948 <usb_endpoint_config_table>:
    5948:	........

00005950 <usb_descriptor_list>:
    5950:	................
    5960:	............`...
    5970:	................
    5980:	....H...........
    5990:	d...............
    59a0:	....

000059a4 <_global_impure_ptr>:
    59a4:	....

000059a8 <_init>:
    59a8:	push	{r3, r4, r5, r6, r7, lr}
    59aa:	nop
    59ac:	pop	{r3, r4, r5, r6, r7}
    59ae:	pop	{r3}
    59b0:	mov	lr, r3
    59b2:	bx	lr

000059b4 <__init_array_start>:
    59b4:	.word	0x00005309

000059b8 <__frame_dummy_init_array_entry>:
    59b8:	5....#..

Disassembly of section .fini:

000059c0 <_fini>:
    59c0:	push	{r3, r4, r5, r6, r7, lr}
    59c2:	nop

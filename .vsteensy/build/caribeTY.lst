
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00005134 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15b0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003dcc l     F .text	0000000c startup_default_early_hook
00003dd8 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15b0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15b4 l       .bss	00000000 object.8610
0000512c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001bd0 l     F .text	00000214 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff182d l     O .bss	00000001 tx_noautoflush
1fff1830 l     O .bss	00000004 tx_packet
1fff1834 l     O .bss	00000001 transmit_previous_timeout
1fff1838 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000020b8 l     F .text	00000144 wait_for_cal
1fff183d l     O .bss	00000001 analog_right_shift
1fff183e l     O .bss	00000001 calibrating
00004e48 l     O .text	00000048 pin2sc1a
1fff0c58 l     O .data	00000001 analog_config_bits
1fff183f l     O .bss	00000001 analogReadBusyADC1
1fff1840 l     O .bss	00000001 analogReadBusyADC0
1fff1841 l     O .bss	00000001 analog_reference_internal
1fff0c59 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000023d8 l     F .text	0000004c digitalWrite.part.1
00002424 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002704 l     F .text	00000048 sysex_byte
1fff185c l     O .bss	00000001 tx_noautoflush
1fff1888 l     O .bss	00000004 tx_packet
1fff188c l     O .bss	00000001 transmit_previous_timeout
1fff1894 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c5c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18a8 l     O .bss	00000004 ep0_tx_ptr
1fff18ac l     O .bss	00000014 rx_last
1fff18c0 l     O .bss	00000002 ep0_tx_len
1fff18c4 l     O .bss	00000040 ep0_rx0_buf
1fff1904 l     O .bss	00000014 rx_first
1fff1918 l     O .bss	00000001 ep0_tx_data_toggle
1fff191c l     O .bss	00000040 ep0_rx1_buf
1fff195c l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1970 l     O .bss	00000014 tx_last
1fff1984 l     O .bss	00000008 setup
1fff198c l     O .bss	00000001 ep0_tx_bdt_bank
1fff1990 l     O .bss	00000008 reply_buffer
1fff199c l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19a1 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19a4 l     O .bss	00000004 rts_pin
1fff19a8 l     O .bss	00000001 rx_buffer_head
1fff19a9 l     O .bss	00000001 rx_buffer_tail
1fff19ac l     O .bss	00000028 tx_buffer
1fff19d4 l     O .bss	00000040 rx_buffer
1fff1a14 l     O .bss	00000001 transmitting
1fff1a15 l     O .bss	00000001 tx_buffer_tail
1fff1a18 l     O .bss	00000004 transmit_pin
1fff1a1c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a20 l     O .bss	00000004 rts_pin
1fff1a24 l     O .bss	00000001 transmitting
1fff1a25 l     O .bss	00000001 rx_buffer_tail
1fff1a28 l     O .bss	00000028 tx_buffer
1fff1a50 l     O .bss	00000040 rx_buffer
1fff1a90 l     O .bss	00000001 rx_buffer_head
1fff1a91 l     O .bss	00000001 tx_buffer_tail
1fff1a94 l     O .bss	00000004 transmit_pin
1fff1a98 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a9c l     O .bss	00000004 rts_pin
1fff1aa0 l     O .bss	00000001 rx_buffer_head
1fff1aa1 l     O .bss	00000001 rx_buffer_tail
1fff1aa4 l     O .bss	00000028 tx_buffer
1fff1acc l     O .bss	00000040 rx_buffer
1fff1b0c l     O .bss	00000001 transmitting
1fff1b0d l     O .bss	00000001 tx_buffer_tail
1fff1b10 l     O .bss	00000004 transmit_pin
1fff1b14 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b18 l     O .bss	00000004 rts_pin
1fff1b1c l     O .bss	00000001 rx_buffer_head
1fff1b1d l     O .bss	00000001 rx_buffer_tail
1fff1b20 l     O .bss	00000040 tx_buffer
1fff1b60 l     O .bss	00000040 rx_buffer
1fff1ba0 l     O .bss	00000001 transmitting
1fff1ba1 l     O .bss	00000001 tx_buffer_tail
1fff1ba4 l     O .bss	00000004 transmit_pin
1fff1ba8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1bac l     O .bss	00000004 rts_pin
1fff1bb0 l     O .bss	00000001 rx_buffer_head
1fff1bb1 l     O .bss	00000001 rx_buffer_tail
1fff1bb4 l     O .bss	00000028 tx_buffer
1fff1bdc l     O .bss	00000040 rx_buffer
1fff1c1c l     O .bss	00000001 transmitting
1fff1c1d l     O .bss	00000001 tx_buffer_tail
1fff1c20 l     O .bss	00000004 transmit_pin
1fff1c24 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c74 l     O .data	00000012 device_descriptor
1fff0ca0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c28 l     O .bss	00000004 rts_pin
1fff1c2c l     O .bss	00000001 rx_buffer_head
1fff1c2d l     O .bss	00000001 rx_buffer_tail
1fff1c30 l     O .bss	00000028 tx_buffer
1fff1c58 l     O .bss	00000040 rx_buffer
1fff1c98 l     O .bss	00000001 transmitting
1fff1c99 l     O .bss	00000001 tx_buffer_tail
1fff1c9c l     O .bss	00000004 transmit_pin
1fff1ca0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004a6c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15b0 l       .bss	00000000 __bss_start__
1fff1e3c l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003dc4  w    F .text	00000006 adc0_isr
00001e5c g     F .text	0000001c usb_serial_available
00003c84 g     F .text	00000020 serial4_available
00003930  w    F .text	000000c4 yield
1fff0c88 g     O .data	00000018 usb_string_manufacturer_name_default
00003e70 g     F .text	00000020 serial_available
1fff1860 g     O .bss	00000004 usb_midi_handleProgramChange
00003d7c  w    F .text	00000048 hard_fault_isr
00003dc4  w    F .text	00000006 dma_ch6_isr
00003a24 g     F .text	00000020 Print::println()
00003b58 g     F .text	00000020 serial2_available
00003dc4  w    F .text	00000006 uart0_lon_isr
00002d44 g     F .text	000000e8 usb_rx_memory
000039f4  w    F .text	00000002 serialEvent5()
00003dc4  w    F .text	00000006 dma_ch8_isr
00003f9c g     F .text	00000020 serial6_available
00004a44 g     F .text	00000002 __malloc_unlock
1fff1874 g     O .bss	00000004 usb_midi_handleAfterTouch
000021fc g     F .text	000000e0 analog_init
00002e2c g     F .text	00000084 usb_tx
00003dc4  w    F .text	00000006 portcd_isr
1fff1884 g     O .bss	00000004 usb_midi_handleSysExComplete
000043bc g     F .text	00000098 MillisTimer::runFromTimer()
00003dc4  w    F .text	00000006 can1_rx_warn_isr
00005138 g       .fini	00000000 __exidx_end
00003dc4  w    F .text	00000006 dma_error_isr
1fff1d00 g     O .bss	00000001 usb_midi_msg_type
1fff1cb8 g     O .bss	00000001 EventResponder::runningFromYield
00003dc4  w    F .text	00000006 i2c0_isr
00004464 g     F .text	0000000c __errno
00003dc4  w    F .text	00000006 portd_isr
00003dc4  w    F .text	00000006 enet_error_isr
1fff1ca4 g     O .bss	00000004 EventResponder::firstInterrupt
00003dc4  w    F .text	00000006 tpm1_isr
00003a10  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004e90 g     O .text	00000200 digital_pin_to_info_PGM
1fff1e38 g     O .bss	00000004 errno
00005138 g       .fini	00000000 _etext
1fff15b0 g       .bss	00000000 _sbss
00003a5c  w    F .text	00000002 serialEvent6()
1fff1870 g     O .bss	00000004 usb_midi_handleVelocityChange
000024cc g     F .text	0000001c digitalRead
00003dc4  w    F .text	00000006 porte_isr
00000494 g     F .text	0000173c loop
00003dc4  w    F .text	00000006 portb_isr
000027e8 g     F .text	0000002c usb_midi_flush_output
00003dc4  w    F .text	00000006 spi1_isr
00003ca4 g     F .text	000000d8 uart3_status_isr
00004268  w    F .text	00000002 serialEvent1()
1fff15fc g     O .bss	00000018 led4
00003dc4  w    F .text	00000006 mcm_isr
00004354 g     F .text	00000068 MillisTimer::addToActiveList()
00002814 g     F .text	0000043c usb_midi_read
1fff184c g     O .bss	00000004 usb_midi_handleSystemReset
1fff1ca8 g     O .bss	00000004 EventResponder::lastInterrupt
00003b78 g     F .text	0000010c uart1_status_isr
1fff1d02 g     O .bss	00000002 usb_midi_msg_sysex_len
00003dc4  w    F .text	00000006 randnum_isr
1fff1854 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1844 g     O .bss	00000004 systick_millis_count
00003d7c  w    F .text	00000048 bus_fault_isr
00003dc4  w    F .text	00000006 watchdog_isr
00003dc4  w    F .text	00000006 i2c1_isr
1fff1998 g     O .bss	00000001 usb_configuration
00003dc4  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003a44  w    F .text	00000002 serialEvent2()
00003dc4  w    F .text	00000006 i2c2_isr
1fff0c88  w    O .data	00000018 usb_string_manufacturer_name
1fff1e2c g     O .bss	0000000a usb_rx_byte_count_data
00003dc4  w    F .text	00000006 pit1_isr
000044c0 g     F .text	00000010 malloc
00003dc4  w    F .text	00000006 dma_ch4_isr
00003dc4  w    F .text	00000006 software_isr
00003dc4  w    F .text	00000006 dma_ch7_isr
000042f0  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003860 g     F .text	000000d0 usb_init
00003dc4  w    F .text	00000006 lptmr_isr
1fff1cc8 g     O .bss	00000004 __malloc_top_pad
0000249c g     F .text	00000024 rtc_set
1fff17a8 g     O .bss	00000024 button5
1fff1808 g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff18a4 g     O .bss	00000004 usb_midi_handleNoteOn
00003e3c g     F .text	00000034 kinetis_hsrun_enable
00004a48 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001de4 g     F .text	00000048 usb_serial_getchar
00003dc4  w    F .text	00000006 can1_bus_off_isr
00003dc4  w    F .text	00000006 ftm2_isr
1fff1cf4 g     O .bss	00000008 usb_cdc_line_coding
000024c0 g     F .text	0000000a digitalWrite
00003dc4  w    F .text	00000006 uart5_status_isr
00003fbc g     F .text	000000e4 lpuart0_status_isr
1fff1cb0 g     O .bss	00000004 EventResponder::lastYield
000050bc g     O .text	00000005 usb_endpoint_config_table
00003dc4  w    F .text	00000006 dma_ch9_isr
00003dc4  w    F .text	00000006 pit2_isr
00004170 g     F .text	00000020 serial3_available
1fff1cc4 g     O .bss	00000004 __malloc_max_sbrked_mem
000024e8 g     F .text	0000000a pinMode
00002c90 g     F .text	0000004c usb_free
00003dc4  w    F .text	00000006 i2c3_isr
1fff162c g     O .bss	00000018 led1
1fff186c g     O .bss	00000004 usb_midi_handleSysExPartial
00005138 g       .fini	00000000 __exidx_start
00003dc4  w    F .text	00000006 pit0_isr
1fff1d04 g     O .bss	00000001 usb_midi_msg_data1
1fff1cb4 g     O .bss	00000004 EventResponder::firstYield
00005118 g     O .text	00000004 _global_impure_ptr
00003dc4  w    F .text	00000006 can1_error_isr
00004470 g     F .text	00000050 __libc_init_array
1fff1e3c g       .bss	00000000 __bss_end
00003dc4  w    F .text	00000006 can0_wakeup_isr
00003dc4  w    F .text	00000006 flash_cmd_isr
1fff17f0 g     O .bss	00000018 knob5
000039f8  w    F .text	00000004 usb_serial_class::clear()
00004190 g     F .text	000000d8 uart2_status_isr
00003ddc g     F .text	0000002c _sbrk
1fff1cbc g     O .bss	00000004 MillisTimer::listWaiting
1fff0c70 g     O .data	00000004 __brkval
1fff183c g     O .bss	00000001 usb_cdc_line_rtsdtr
00002070 g     F .text	00000048 usb_serial_flush_callback
0000511c g     F .text	00000000 _init
00003dc4  w    F .text	00000006 svcall_isr
00003dc4  w    F .text	00000006 dma_ch15_isr
00003dc4  w    F .text	00000006 uart1_error_isr
00004a8c g     F .text	00000028 __libc_fini_array
00003dc4  w    F .text	00000006 usbhs_phy_isr
1fff1e3c g       .bss	00000000 _ebss
00003dc4 g     F .text	00000006 unused_isr
00003dc4  w    F .text	00000006 spi0_isr
00003dc4  w    F .text	00000006 dma_ch3_isr
00003dc4  w    F .text	00000006 flash_error_isr
1fff1644 g     O .bss	00000018 knob2
00003a60 g     F .text	00000020 serial5_available
00003dc4  w    F .text	00000006 uart5_error_isr
00003dc4  w    F .text	00000006 rtc_seconds_isr
00003dc4  w    F .text	00000006 pdb_isr
00003d7c  w    F .text	00000048 usage_fault_isr
00003dc4  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003dc4  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1cfc g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000018 leds
00004454 g     F .text	00000010 systick_isr
00003dc4  w    F .text	00000006 rtc_alarm_isr
00003dc4  w    F .text	00000006 dma_ch2_isr
1fff0c60 g     O .data	00000010 Serial
00003dc4  w    F .text	00000006 ftm1_isr
00003a18  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003dcc  w    F .text	0000000c startup_early_hook
00003dc4  w    F .text	00000006 dma_ch13_isr
00003dc4  w    F .text	00000006 uart2_error_isr
00001e2c g     F .text	00000030 usb_serial_peekchar
1fff0d54 g     O .data	00000016 usb_string_serial_number_default
00003d7c g     F .text	00000048 fault_isr
00004b50 g     F .text	000001d0 _free_r
1fff1890 g     O .bss	00000004 usb_midi_handleStop
00003dc4  w    F .text	00000006 usb_charge_isr
00003a08  w    F .text	00000004 usb_serial_class::flush()
00003dc4  w    F .text	00000006 cmt_isr
00003dc4  w    F .text	00000006 usbhs_isr
1fff18a0 g     O .bss	00000004 usb_midi_handleControlChange
1fff15a8 g     O .data	00000004 __malloc_sbrk_base
00003a00  w    F .text	00000004 usb_serial_class::read()
00003dc4  w    F .text	00000006 ftm3_isr
00003dc4  w    F .text	00000006 tsi0_isr
1fff1690 g     O .bss	00000018 led6
1fff16a8 g     O .bss	00000018 knob1
00003dc4  w    F .text	00000006 spi2_isr
00003a48  w    F .text	00000002 serialEvent4()
00003a20  w    F .text	00000002 serialEvent()
1fff1919 g     O .bss	00000001 usb_reboot_timer
00004d20 g     F .text	000000a4 __register_exitproc
00001e78 g     F .text	00000038 usb_serial_flush_input
00001fb8 g     F .text	00000018 usb_serial_putchar
1fff1ccc g     O .bss	00000028 __malloc_current_mallinfo
00003dc4  w    F .text	00000006 can0_bus_off_isr
1fff1614 g     O .bss	00000018 led5
1fff198d g     O .bss	00000001 usb_rx_memory_needed
00002eb0 g     F .text	000009b0 usb_isr
1fff189c g     O .bss	00000004 usb_midi_handleNoteOff
00005090  w    O .text	00000028 vtable for usb_serial_class
1fff1660 g     O .bss	00000018 knob3
00003dc4  w    F .text	00000006 uart3_error_isr
1fff1cac g     O .bss	00000004 MillisTimer::listActive
00003dc4  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003dc4  w    F .text	00000006 low_voltage_isr
1fff16e4 g     O .bss	00000024 button2
1fff119c g     O .data	00000408 __malloc_av_
00003dc4  w    F .text	00000006 can0_error_isr
00002598 g     F .text	0000016c _init_Teensyduino_internal_
00002018 g     F .text	00000058 usb_serial_flush_output
00003dc4  w    F .text	00000006 dma_ch12_isr
00004a40 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003dc4  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003dc4  w    F .text	00000006 pit3_isr
00003dc4  w    F .text	00000006 enet_rx_isr
00003dc4  w    F .text	00000006 portc_isr
00003a4c g     F .text	00000010 main
1fff1cc0 g     O .bss	00000004 __malloc_max_total_mem
1fff15e4 g     O .bss	00000018 led3
00003d7c  w    F .text	00000048 memmanage_fault_isr
000040a0 g     F .text	00000084 usb_init_serialnumber
1fff165c g     O .bss	00000001 currentMode
00005134 g       .text	00000000 __init_array_end
000044d0 g     F .text	00000570 _malloc_r
00003dc4  w    F .text	00000006 debugmonitor_isr
1fff1868 g     O .bss	00000004 usb_midi_handleSongPosition
00004270 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1858 g     O .bss	00000004 usb_midi_handleContinue
1fff1d05 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003dc4  w    F .text	00000006 cmp1_isr
1fff1708 g     O .bss	00000024 button3
00003dc4  w    F .text	00000006 ftm0_isr
00004ab4 g     F .text	0000009c _malloc_trim_r
1fff0d50 g     O .data	00000004 string0
00001eb0 g     F .text	00000108 usb_serial_write
00003dd8  w    F .text	00000002 startup_late_hook
00003a04  w    F .text	00000004 usb_serial_class::available()
1fff1d06 g     O .bss	00000001 usb_midi_msg_cable
1fff0d38  w    O .data	00000018 usb_string_product_name
000024f4 g     F .text	000000a4 delay
00003dc4  w    F .text	00000006 tpm0_isr
00005134 g     F .fini	00000000 _fini
00003dc4  w    F .text	00000006 i2s0_rx_isr
00003dc4  w    F .text	00000006 uart4_error_isr
0000274c g     F .text	0000009c usb_midi_write_packed
00004a80 g     F .text	0000000c atexit
00003dc4  w    F .text	00000006 can0_message_isr
1fff1198 g     O .data	00000004 _impure_ptr
00003dc4  w    F .text	00000006 can1_message_isr
00003dc4  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1880 g     O .bss	00000004 usb_midi_handleTuneRequest
00005128 g       .text	00000000 __preinit_array_end
00003dc4  w    F .text	00000006 sdhc_isr
1fff1d07 g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
000050c4 g     O .text	00000054 usb_descriptor_list
00002cdc g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1678 g     O .bss	00000018 knob4
00003dc4  w    F .text	00000006 dma_ch10_isr
1fff1730 g     O .bss	00000078 sequence1
1fff1878 g     O .bss	00000004 usb_midi_handleStart
00003dc4  w    F .text	00000006 uart0_error_isr
00002c50 g     F .text	00000040 usb_malloc
00003dc4  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001fd0 g     F .text	00000048 usb_serial_write_buffer_free
00003dc4  w    F .text	00000006 enet_timer_isr
1fff17cc g     O .bss	00000024 button6
1fff16c0 g     O .bss	00000024 button1
1fff15ac g       .data	00000000 _edata
00003dc4  w    F .text	00000006 i2s0_tx_isr
00003dc4  w    F .text	00000006 adc1_isr
00003a0c  w    F .text	00000004 usb_serial_class::availableForWrite()
00003dc4  w    F .text	00000006 cmp0_isr
1fff1848 g     O .bss	00000004 usb_midi_handleClock
00004124 g     F .text	0000004c ultoa
0000430c g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15a4 g     O .data	00000004 __malloc_trim_threshold
000039fc  w    F .text	00000004 usb_serial_class::peek()
1fff182c g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1864 g     O .bss	00000004 usb_midi_handlePitchChange
00003dc4  w    F .text	00000006 pit_isr
1fff187c g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003dc4  w    F .text	00000006 dac0_isr
00005128 g       .text	00000000 __init_array_start
00003dc4  w    F .text	00000006 can1_tx_warn_isr
000022dc g     F .text	000000fc analogRead
1fff1d08 g     O .bss	00000122 usb_midi_msg_sysex
00003e90 g     F .text	0000010c uart0_status_isr
00003dc4  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d38 g     O .data	00000018 usb_string_product_name_default
00003dc4  w    F .text	00000006 dma_ch1_isr
00002d18 g     F .text	0000002c usb_tx_packet_count
00003dc4  w    F .text	00000006 dma_ch5_isr
00003dc4  w    F .text	00000006 can0_rx_warn_isr
00003dc4  w    F .text	00000006 can0_tx_warn_isr
00003a80 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003e08 g     F .text	00000034 kinetis_hsrun_disable
00005128 g       .text	00000000 __preinit_array_start
0000426c  w    F .text	00000002 serialEvent3()
1fff1898 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15cc g     O .bss	00000018 led2
00003dc4  w    F .text	00000006 cmp2_isr
00004350 g     F .text	00000004 pendablesrvreq_isr
00003dc4  w    F .text	00000006 wakeup_isr
00003dc4  w    F .text	00000006 cmp3_isr
1fff1850 g     O .bss	00000004 usb_midi_handleActiveSensing
00003dc4  w    F .text	00000006 tpm2_isr
00003dc4  w    F .text	00000006 dma_ch0_isr
1fff0d54  w    O .data	00000016 usb_string_serial_number
00003dc4  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....=..}=..
      10:	}=..}=..}=..}=..
      20:	}=..}=..}=...=..
      30:	.=..}=..QC..UD..
      40:	.=...=...=...=..
      50:	.=...=...=...=..
      60:	.=...=...=...=..
      70:	.=...=...=...=..
      80:	.=...=...=...=..
      90:	.=...=...=...=..
      a0:	.=...=...=...=..
      b0:	.=...=...=...>..
      c0:	.=..y;...=...A..
      d0:	.=...<...=...=..
      e0:	.=...=...=...=..
      f0:	.=...=...=...=..
     100:	.=...=...=...=..
     110:	.=.......=...=..
     120:	.=...=...=...=..
     130:	.=...=...=...=..
     140:	.=...=...:...=..
     150:	.=...=...=...=..
     160:	.=...=...=...=..
     170:	.=...=...=...=..
     180:	.=...=...=...=..
     190:	.=...=...?...=..
     1a0:	.=...=...=...=..
     1b0:	.=...=...=...=..
     1c0:	.=...=...=...=..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3dcc <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	2598 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	249c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	249c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4470 <__libc_init_array>

	startup_late_hook();
     33a:	bl	3dd8 <startup_late_hook>
	main();
     33e:	bl	3a4c <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15ac
     374:	.word	0x00005134
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15b0
     380:	.word	0x1fff1e3c
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15b0
     42c:	.word	0x00000000
     430:	.word	0x00005138

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15b4
     460:	.word	0x00005138
     464:	.word	0x1fff15ac
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	24e8 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	24c0 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);
Knob knob5(A4, sequence1, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #236	; 0xec
     49c:	bl	2814 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	b1c <loop+0x688>
     4a6:	ldr	r4, [pc, #692]	; (75c <loop+0x2c8>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #692]	; (760 <loop+0x2cc>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	24cc <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	b4c <loop+0x6b8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #60]	; 0x3c
	return ret;
     4c4:	ldr	r3, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #56]	; 0x38
	return ret;
     4cc:	ldr	r1, [sp, #56]	; 0x38
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #652]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r3, r1
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #644]	; (760 <loop+0x2cc>)
     4da:	cmp	r5, r3
     4dc:	beq.w	b68 <loop+0x6d4>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r5, #0
     4e4:	beq.w	baa <loop+0x716>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r5, [pc, #632]	; (764 <loop+0x2d0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r5, #32]
     4f0:	bl	24cc <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r5, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r6, r0
     4fc:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	b58 <loop+0x6c4>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #52]	; 0x34
	return ret;
     506:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     508:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #48]	; 0x30
	return ret;
     50e:	ldr	r1, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #584]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r1, r3
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r5, #4]
     51a:	ldr	r7, [pc, #584]	; (764 <loop+0x2d0>)
     51c:	cmp	r6, r3
     51e:	beq.w	b60 <loop+0x6cc>
          m_state = reading;
     522:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r6, #0
     526:	beq.w	be0 <loop+0x74c>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r6, [pc, #572]	; (768 <loop+0x2d4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r6, #32]
     532:	bl	24cc <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r6, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r5, r0
     53e:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	b50 <loop+0x6bc>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #44]	; 0x2c
	return ret;
     548:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     54a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #40]	; 0x28
	return ret;
     550:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #520]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r6, #4]
     55c:	ldr	r7, [pc, #520]	; (768 <loop+0x2d4>)
     55e:	cmp	r5, r3
     560:	beq.w	b6c <loop+0x6d8>
          m_state = reading;
     564:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r5, #0
     568:	beq.w	c16 <loop+0x782>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r5, [pc, #508]	; (76c <loop+0x2d8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r5, #32]
     574:	bl	24cc <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r5, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r6, r0
     580:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	b48 <loop+0x6b4>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #36]	; 0x24
	return ret;
     58a:	ldr	r3, [sp, #36]	; 0x24
        m_lastDebounceTime = millis();
     58c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #32]
	return ret;
     592:	ldr	r1, [sp, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #452]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r1, r3
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r5, #4]
     59e:	ldr	r7, [pc, #460]	; (76c <loop+0x2d8>)
     5a0:	cmp	r6, r3
     5a2:	beq.w	b70 <loop+0x6dc>
          m_state = reading;
     5a6:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r6, #0
     5aa:	beq.w	c4c <loop+0x7b8>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #448]	; (770 <loop+0x2dc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	24cc <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	b44 <loop+0x6b0>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #28]
	return ret;
     5cc:	ldr	r3, [sp, #28]
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #24]
	return ret;
     5d4:	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #388]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #396]	; (770 <loop+0x2dc>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	b64 <loop+0x6d0>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r5, #0
     5ec:	beq.w	c82 <loop+0x7ee>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f0:	ldr	r5, [pc, #384]	; (774 <loop+0x2e0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r5, #32]
     5f8:	bl	24cc <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5fc:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5fe:	str	r0, [r5, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     600:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     602:	mov	r6, r0
     604:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     606:	beq.w	b54 <loop+0x6c0>
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #20]
	return ret;
     60e:	ldr	r3, [sp, #20]
        m_lastDebounceTime = millis();
     610:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #16]
	return ret;
     616:	ldr	r1, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     618:	ldr.w	r8, [pc, #320]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     61c:	cmp	r1, r3
     61e:	beq.n	632 <loop+0x19e>
        if (reading != m_state) {
     620:	ldr	r3, [r5, #4]
     622:	ldr	r7, [pc, #336]	; (774 <loop+0x2e0>)
     624:	cmp	r6, r3
     626:	beq.w	b5c <loop+0x6c8>
          m_state = reading;
     62a:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     62c:	cmp	r6, #0
     62e:	beq.w	b74 <loop+0x6e0>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     632:	ldr	r6, [pc, #324]	; (778 <loop+0x2e4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     634:	str	r2, [r5, #8]
     636:	ldrb	r3, [r6, #16]
     638:	cmp	r3, #0
     63a:	bne.w	ac0 <loop+0x62c>
     63e:	ldr	r5, [pc, #316]	; (77c <loop+0x2e8>)
     640:	ldrb	r3, [r5, #16]
     642:	cmp	r3, #0
     644:	bne.w	a4e <loop+0x5ba>
     648:	ldr	r5, [pc, #308]	; (780 <loop+0x2ec>)
     64a:	ldrb	r3, [r5, #16]
     64c:	cmp	r3, #0
     64e:	bne.w	9f2 <loop+0x55e>
     652:	ldr	r5, [pc, #304]	; (784 <loop+0x2f0>)
     654:	ldrb	r3, [r5, #16]
     656:	cmp	r3, #0
     658:	bne.w	996 <loop+0x502>
     65c:	ldr	r5, [pc, #296]	; (788 <loop+0x2f4>)
     65e:	ldrb	r3, [r5, #16]
     660:	cmp	r3, #0
     662:	bne.w	93a <loop+0x4a6>
     666:	ldr	r5, [pc, #292]	; (78c <loop+0x2f8>)
     668:	ldrb	r3, [r5, #16]
     66a:	cmp	r3, #0
     66c:	bne.w	8de <loop+0x44a>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     670:	ldr	r4, [pc, #284]	; (790 <loop+0x2fc>)
     672:	ldrb	r0, [r4, #0]
     674:	bl	22dc <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     678:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     67a:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     67c:	cmp	r0, r3
     67e:	beq.n	6dc <loop+0x248>
     680:	subs	r3, r0, r3
     682:	cmp	r3, #0
     684:	it	lt
     686:	neglt	r3, r3
     688:	cmp	r3, #10
     68a:	ble.n	6dc <loop+0x248>
    void onChange () {
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
     68c:	ldrb	r3, [r4, #20]
     68e:	cmp	r3, #4
     690:	beq.w	cf8 <loop+0x864>
        m_sequence.controlTempo(m_value);
      }

      if (currentMode == GLOBAL) {
     694:	ldr	r3, [pc, #252]	; (794 <loop+0x300>)
     696:	ldrb	r3, [r3, #0]
     698:	cbz	r3, 6da <loop+0x246>
        } else if (m_knobType == THIRD) {

        } else if (m_knobType == FOURTH) {  
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     69a:	cmp	r3, #2
     69c:	beq.w	ece <loop+0xa3a>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     6a0:	cmp	r3, #1
     6a2:	beq.w	1334 <loop+0xea0>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     6a6:	cmp	r3, #3
     6a8:	bne.n	6da <loop+0x246>
        m_sequence.controlLength(m_value, m_id);
     6aa:	ldr	r5, [r4, #16]
     6ac:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     6ae:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     6b0:	movw	r6, #1022	; 0x3fe
     6b4:	rsb	r3, r2, #1
     6b8:	cmp	r3, r6
     6ba:	ble.w	f3a <loop+0xaa6>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     6be:	ldr	r6, [pc, #216]	; (798 <loop+0x304>)
     6c0:	mul.w	r3, r3, r0
     6c4:	smull	r7, r6, r6, r3
     6c8:	add	r6, r3
     6ca:	asrs	r3, r3, #31
     6cc:	rsb	r3, r3, r6, asr #9
     6d0:	add	r2, r3
      notesLengths[id] = newValue;
     6d2:	add.w	r3, r1, #18
     6d6:	str.w	r2, [r5, r3, lsl #2]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     6da:	str	r0, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6dc:	ldr	r4, [pc, #188]	; (79c <loop+0x308>)
     6de:	ldrb	r0, [r4, #0]
     6e0:	bl	22dc <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6e4:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6e6:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6e8:	cmp	r0, r3
     6ea:	beq.n	748 <loop+0x2b4>
     6ec:	subs	r3, r0, r3
     6ee:	cmp	r3, #0
     6f0:	it	lt
     6f2:	neglt	r3, r3
     6f4:	cmp	r3, #10
     6f6:	ble.n	748 <loop+0x2b4>
    void onChange () {
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
     6f8:	ldrb	r3, [r4, #20]
     6fa:	cmp	r3, #4
     6fc:	beq.w	cdc <loop+0x848>
        m_sequence.controlTempo(m_value);
      }

      if (currentMode == GLOBAL) {
     700:	ldr	r3, [pc, #144]	; (794 <loop+0x300>)
     702:	ldrb	r3, [r3, #0]
     704:	cbz	r3, 746 <loop+0x2b2>
        } else if (m_knobType == THIRD) {

        } else if (m_knobType == FOURTH) {  
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     706:	cmp	r3, #2
     708:	beq.w	eb2 <loop+0xa1e>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     70c:	cmp	r3, #1
     70e:	beq.w	1316 <loop+0xe82>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     712:	cmp	r3, #3
     714:	bne.n	746 <loop+0x2b2>
        m_sequence.controlLength(m_value, m_id);
     716:	ldr	r5, [r4, #16]
     718:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     71a:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     71c:	movw	r6, #1022	; 0x3fe
     720:	rsb	r3, r2, #1
     724:	cmp	r3, r6
     726:	ble.w	f24 <loop+0xa90>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     72a:	ldr	r6, [pc, #108]	; (798 <loop+0x304>)
     72c:	mul.w	r3, r3, r0
     730:	smull	r7, r6, r6, r3
     734:	add	r6, r3
     736:	asrs	r3, r3, #31
     738:	rsb	r3, r3, r6, asr #9
     73c:	add	r2, r3
      notesLengths[id] = newValue;
     73e:	add.w	r3, r1, #18
     742:	str.w	r2, [r5, r3, lsl #2]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     746:	str	r0, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     748:	ldr	r4, [pc, #84]	; (7a0 <loop+0x30c>)
     74a:	ldrb	r0, [r4, #0]
     74c:	bl	22dc <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     750:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     752:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     754:	cmp	r0, r3
     756:	beq.n	800 <loop+0x36c>
     758:	b.n	7a4 <loop+0x310>
     75a:	nop
     75c:	.word	0x1fff1844
     760:	.word	0x1fff16c0
     764:	.word	0x1fff16e4
     768:	.word	0x1fff1708
     76c:	.word	0x1fff1808
     770:	.word	0x1fff17a8
     774:	.word	0x1fff17cc
     778:	.word	0x1fff162c
     77c:	.word	0x1fff15cc
     780:	.word	0x1fff15e4
     784:	.word	0x1fff15fc
     788:	.word	0x1fff1614
     78c:	.word	0x1fff1690
     790:	.word	0x1fff16a8
     794:	.word	0x1fff165c
     798:	.word	0x80200803
     79c:	.word	0x1fff1644
     7a0:	.word	0x1fff1660
     7a4:	subs	r3, r0, r3
     7a6:	cmp	r3, #0
     7a8:	it	lt
     7aa:	neglt	r3, r3
     7ac:	cmp	r3, #10
     7ae:	ble.n	800 <loop+0x36c>
    void onChange () {
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
     7b0:	ldrb	r3, [r4, #20]
     7b2:	cmp	r3, #4
     7b4:	beq.w	d4c <loop+0x8b8>
        m_sequence.controlTempo(m_value);
      }

      if (currentMode == GLOBAL) {
     7b8:	ldr	r3, [pc, #752]	; (aac <loop+0x618>)
     7ba:	ldrb	r3, [r3, #0]
     7bc:	cbz	r3, 7fe <loop+0x36a>
        } else if (m_knobType == THIRD) {

        } else if (m_knobType == FOURTH) {  
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     7be:	cmp	r3, #2
     7c0:	beq.w	f08 <loop+0xa74>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     7c4:	cmp	r3, #1
     7c6:	beq.w	12bc <loop+0xe28>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     7ca:	cmp	r3, #3
     7cc:	bne.n	7fe <loop+0x36a>
        m_sequence.controlLength(m_value, m_id);
     7ce:	ldr	r5, [r4, #16]
     7d0:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     7d2:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     7d4:	movw	r6, #1022	; 0x3fe
     7d8:	rsb	r3, r2, #1
     7dc:	cmp	r3, r6
     7de:	ble.w	f7e <loop+0xaea>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     7e2:	ldr	r6, [pc, #716]	; (ab0 <loop+0x61c>)
     7e4:	mul.w	r3, r3, r0
     7e8:	smull	r7, r6, r6, r3
     7ec:	add	r6, r3
     7ee:	asrs	r3, r3, #31
     7f0:	rsb	r3, r3, r6, asr #9
     7f4:	add	r2, r3
      notesLengths[id] = newValue;
     7f6:	add.w	r3, r1, #18
     7fa:	str.w	r2, [r5, r3, lsl #2]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7fe:	str	r0, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     800:	ldr	r4, [pc, #688]	; (ab4 <loop+0x620>)
     802:	ldrb	r0, [r4, #0]
     804:	bl	22dc <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     808:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     80a:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     80c:	cmp	r0, r3
     80e:	beq.n	86c <loop+0x3d8>
     810:	subs	r3, r0, r3
     812:	cmp	r3, #0
     814:	it	lt
     816:	neglt	r3, r3
     818:	cmp	r3, #10
     81a:	ble.n	86c <loop+0x3d8>
    void onChange () {
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
     81c:	ldrb	r3, [r4, #20]
     81e:	cmp	r3, #4
     820:	beq.w	d14 <loop+0x880>
        m_sequence.controlTempo(m_value);
      }

      if (currentMode == GLOBAL) {
     824:	ldr	r3, [pc, #644]	; (aac <loop+0x618>)
     826:	ldrb	r3, [r3, #0]
     828:	cbz	r3, 86a <loop+0x3d6>
        } else if (m_knobType == THIRD) {

        } else if (m_knobType == FOURTH) {  
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     82a:	cmp	r3, #2
     82c:	beq.w	eec <loop+0xa58>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     830:	cmp	r3, #1
     832:	beq.w	12f8 <loop+0xe64>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     836:	cmp	r3, #3
     838:	bne.n	86a <loop+0x3d6>
        m_sequence.controlLength(m_value, m_id);
     83a:	ldr	r5, [r4, #16]
     83c:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     83e:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     840:	movw	r6, #1022	; 0x3fe
     844:	rsb	r3, r2, #1
     848:	cmp	r3, r6
     84a:	ble.w	f68 <loop+0xad4>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     84e:	ldr	r6, [pc, #608]	; (ab0 <loop+0x61c>)
     850:	mul.w	r3, r3, r0
     854:	smull	r7, r6, r6, r3
     858:	add	r6, r3
     85a:	asrs	r3, r3, #31
     85c:	rsb	r3, r3, r6, asr #9
     860:	add	r2, r3
      notesLengths[id] = newValue;
     862:	add.w	r3, r1, #18
     866:	str.w	r2, [r5, r3, lsl #2]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     86a:	str	r0, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     86c:	ldr	r4, [pc, #584]	; (ab8 <loop+0x624>)
     86e:	ldrb	r0, [r4, #0]
     870:	bl	22dc <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     874:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     876:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     878:	cmp	r0, r3
     87a:	beq.n	8d8 <loop+0x444>
     87c:	subs	r3, r0, r3
     87e:	cmp	r3, #0
     880:	it	lt
     882:	neglt	r3, r3
     884:	cmp	r3, #10
     886:	ble.n	8d8 <loop+0x444>
    void onChange () {
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
     888:	ldrb	r3, [r4, #20]
     88a:	cmp	r3, #4
     88c:	beq.w	d30 <loop+0x89c>
        m_sequence.controlTempo(m_value);
      }

      if (currentMode == GLOBAL) {
     890:	ldr	r3, [pc, #536]	; (aac <loop+0x618>)
     892:	ldrb	r3, [r3, #0]
     894:	cbz	r3, 8d6 <loop+0x442>
        } else if (m_knobType == THIRD) {

        } else if (m_knobType == FOURTH) {  
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     896:	cmp	r3, #2
     898:	beq.w	e96 <loop+0xa02>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     89c:	cmp	r3, #1
     89e:	beq.w	12da <loop+0xe46>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     8a2:	cmp	r3, #3
     8a4:	bne.n	8d6 <loop+0x442>
        m_sequence.controlLength(m_value, m_id);
     8a6:	ldr	r5, [r4, #16]
     8a8:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     8aa:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     8ac:	movw	r6, #1022	; 0x3fe
     8b0:	rsb	r3, r2, #1
     8b4:	cmp	r3, r6
     8b6:	ble.w	f52 <loop+0xabe>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     8ba:	ldr	r6, [pc, #500]	; (ab0 <loop+0x61c>)
     8bc:	mul.w	r3, r3, r0
     8c0:	smull	r7, r6, r6, r3
     8c4:	add	r6, r3
     8c6:	asrs	r3, r3, #31
     8c8:	rsb	r3, r3, r6, asr #9
     8cc:	add	r2, r3
      notesLengths[id] = newValue;
     8ce:	add.w	r3, r1, #18
     8d2:	str.w	r2, [r5, r3, lsl #2]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     8d6:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     8d8:	add	sp, #236	; 0xec
     8da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8de:	ldr	r3, [r4, #0]
     8e0:	str	r3, [sp, #224]	; 0xe0
	return ret;
     8e2:	ldr	r3, [sp, #224]	; 0xe0
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     8e4:	ldr	r1, [r5, #8]
     8e6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8e8:	ldr	r4, [pc, #464]	; (abc <loop+0x628>)
     8ea:	subs	r3, r3, r1
     8ec:	cmp	r3, r2
     8ee:	bls.w	670 <loop+0x1dc>
        digitalWrite(m_pin, !digitalRead(m_pin));
     8f2:	ldrb	r6, [r5, #0]
     8f4:	mov	r0, r6
     8f6:	bl	24cc <digitalRead>
     8fa:	clz	r1, r0
     8fe:	lsrs	r1, r1, #5
     900:	mov	r0, r6
     902:	bl	24c0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     906:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     908:	movs	r2, #0

        if (blinkingCounter > 0) {
     90a:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     90c:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     90e:	ble.w	670 <loop+0x1dc>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     912:	ldrb	r6, [r5, #0]
     914:	mov	r0, r6
     916:	bl	24cc <digitalRead>
     91a:	clz	r1, r0
     91e:	lsrs	r1, r1, #5
     920:	mov	r0, r6
     922:	bl	24c0 <digitalWrite>
     926:	ldr	r3, [r4, #0]
     928:	str	r3, [sp, #228]	; 0xe4
	return ret;
     92a:	ldr	r3, [sp, #228]	; 0xe4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     92c:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     92e:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     930:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     934:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     936:	str	r3, [r5, #20]
     938:	b.n	670 <loop+0x1dc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     93a:	ldr	r3, [r4, #0]
     93c:	str	r3, [sp, #216]	; 0xd8
	return ret;
     93e:	ldr	r3, [sp, #216]	; 0xd8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     940:	ldr	r1, [r5, #8]
     942:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     944:	ldr	r6, [pc, #372]	; (abc <loop+0x628>)
     946:	subs	r3, r3, r1
     948:	cmp	r3, r2
     94a:	bls.w	666 <loop+0x1d2>
        digitalWrite(m_pin, !digitalRead(m_pin));
     94e:	ldrb	r7, [r5, #0]
     950:	mov	r0, r7
     952:	bl	24cc <digitalRead>
     956:	clz	r1, r0
     95a:	lsrs	r1, r1, #5
     95c:	mov	r0, r7
     95e:	bl	24c0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     962:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     964:	movs	r2, #0

        if (blinkingCounter > 0) {
     966:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     968:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     96a:	ble.w	666 <loop+0x1d2>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     96e:	ldrb	r7, [r5, #0]
     970:	mov	r0, r7
     972:	bl	24cc <digitalRead>
     976:	clz	r1, r0
     97a:	lsrs	r1, r1, #5
     97c:	mov	r0, r7
     97e:	bl	24c0 <digitalWrite>
     982:	ldr	r3, [r6, #0]
     984:	str	r3, [sp, #220]	; 0xdc
	return ret;
     986:	ldr	r3, [sp, #220]	; 0xdc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     988:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     98a:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     98c:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     990:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     992:	str	r3, [r5, #20]
     994:	b.n	666 <loop+0x1d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     996:	ldr	r3, [r4, #0]
     998:	str	r3, [sp, #208]	; 0xd0
	return ret;
     99a:	ldr	r3, [sp, #208]	; 0xd0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     99c:	ldr	r1, [r5, #8]
     99e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9a0:	ldr	r6, [pc, #280]	; (abc <loop+0x628>)
     9a2:	subs	r3, r3, r1
     9a4:	cmp	r3, r2
     9a6:	bls.w	65c <loop+0x1c8>
        digitalWrite(m_pin, !digitalRead(m_pin));
     9aa:	ldrb	r7, [r5, #0]
     9ac:	mov	r0, r7
     9ae:	bl	24cc <digitalRead>
     9b2:	clz	r1, r0
     9b6:	lsrs	r1, r1, #5
     9b8:	mov	r0, r7
     9ba:	bl	24c0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9be:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9c0:	movs	r2, #0

        if (blinkingCounter > 0) {
     9c2:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9c4:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9c6:	ble.w	65c <loop+0x1c8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9ca:	ldrb	r7, [r5, #0]
     9cc:	mov	r0, r7
     9ce:	bl	24cc <digitalRead>
     9d2:	clz	r1, r0
     9d6:	lsrs	r1, r1, #5
     9d8:	mov	r0, r7
     9da:	bl	24c0 <digitalWrite>
     9de:	ldr	r3, [r6, #0]
     9e0:	str	r3, [sp, #212]	; 0xd4
	return ret;
     9e2:	ldr	r3, [sp, #212]	; 0xd4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     9e4:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9e6:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9e8:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9ec:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9ee:	str	r3, [r5, #20]
     9f0:	b.n	65c <loop+0x1c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9f2:	ldr	r3, [r4, #0]
     9f4:	str	r3, [sp, #200]	; 0xc8
	return ret;
     9f6:	ldr	r3, [sp, #200]	; 0xc8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     9f8:	ldr	r1, [r5, #8]
     9fa:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9fc:	ldr	r6, [pc, #188]	; (abc <loop+0x628>)
     9fe:	subs	r3, r3, r1
     a00:	cmp	r3, r2
     a02:	bls.w	652 <loop+0x1be>
        digitalWrite(m_pin, !digitalRead(m_pin));
     a06:	ldrb	r7, [r5, #0]
     a08:	mov	r0, r7
     a0a:	bl	24cc <digitalRead>
     a0e:	clz	r1, r0
     a12:	lsrs	r1, r1, #5
     a14:	mov	r0, r7
     a16:	bl	24c0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     a1a:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a1c:	movs	r2, #0

        if (blinkingCounter > 0) {
     a1e:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a20:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     a22:	ble.w	652 <loop+0x1be>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a26:	ldrb	r7, [r5, #0]
     a28:	mov	r0, r7
     a2a:	bl	24cc <digitalRead>
     a2e:	clz	r1, r0
     a32:	lsrs	r1, r1, #5
     a34:	mov	r0, r7
     a36:	bl	24c0 <digitalWrite>
     a3a:	ldr	r3, [r6, #0]
     a3c:	str	r3, [sp, #204]	; 0xcc
	return ret;
     a3e:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a40:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a42:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a44:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a48:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a4a:	str	r3, [r5, #20]
     a4c:	b.n	652 <loop+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a4e:	ldr	r3, [r4, #0]
     a50:	str	r3, [sp, #192]	; 0xc0
	return ret;
     a52:	ldr	r3, [sp, #192]	; 0xc0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     a54:	ldr	r1, [r5, #8]
     a56:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a58:	ldr	r6, [pc, #96]	; (abc <loop+0x628>)
     a5a:	subs	r3, r3, r1
     a5c:	cmp	r3, r2
     a5e:	bls.w	648 <loop+0x1b4>
        digitalWrite(m_pin, !digitalRead(m_pin));
     a62:	ldrb	r7, [r5, #0]
     a64:	mov	r0, r7
     a66:	bl	24cc <digitalRead>
     a6a:	clz	r1, r0
     a6e:	lsrs	r1, r1, #5
     a70:	mov	r0, r7
     a72:	bl	24c0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     a76:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a78:	movs	r2, #0

        if (blinkingCounter > 0) {
     a7a:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a7c:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     a7e:	ble.w	648 <loop+0x1b4>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a82:	ldrb	r7, [r5, #0]
     a84:	mov	r0, r7
     a86:	bl	24cc <digitalRead>
     a8a:	clz	r1, r0
     a8e:	lsrs	r1, r1, #5
     a90:	mov	r0, r7
     a92:	bl	24c0 <digitalWrite>
     a96:	ldr	r3, [r6, #0]
     a98:	str	r3, [sp, #196]	; 0xc4
	return ret;
     a9a:	ldr	r3, [sp, #196]	; 0xc4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a9c:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a9e:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     aa0:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     aa4:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     aa6:	str	r3, [r5, #20]
     aa8:	b.n	648 <loop+0x1b4>
     aaa:	nop
     aac:	.word	0x1fff165c
     ab0:	.word	0x80200803
     ab4:	.word	0x1fff1678
     ab8:	.word	0x1fff17f0
     abc:	.word	0x1fff1844
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ac0:	ldr	r3, [r4, #0]
     ac2:	str	r3, [sp, #184]	; 0xb8
	return ret;
     ac4:	ldr	r3, [sp, #184]	; 0xb8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     ac6:	ldr	r1, [r6, #8]
     ac8:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     aca:	ldr	r5, [pc, #716]	; (d98 <loop+0x904>)
     acc:	subs	r3, r3, r1
     ace:	cmp	r3, r2
     ad0:	bls.w	63e <loop+0x1aa>
        digitalWrite(m_pin, !digitalRead(m_pin));
     ad4:	ldrb	r7, [r6, #0]
     ad6:	mov	r0, r7
     ad8:	bl	24cc <digitalRead>
     adc:	clz	r1, r0
     ae0:	lsrs	r1, r1, #5
     ae2:	mov	r0, r7
     ae4:	bl	24c0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     ae8:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     aea:	movs	r2, #0

        if (blinkingCounter > 0) {
     aec:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     aee:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     af0:	ble.w	63e <loop+0x1aa>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     af4:	ldrb	r7, [r6, #0]
     af6:	mov	r0, r7
     af8:	bl	24cc <digitalRead>
     afc:	clz	r1, r0
     b00:	lsrs	r1, r1, #5
     b02:	mov	r0, r7
     b04:	bl	24c0 <digitalWrite>
     b08:	ldr	r3, [r5, #0]
     b0a:	str	r3, [sp, #188]	; 0xbc
	return ret;
     b0c:	ldr	r3, [sp, #188]	; 0xbc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     b0e:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b10:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     b12:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b16:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     b18:	str	r3, [r6, #20]
     b1a:	b.n	63e <loop+0x1aa>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     b1c:	ldr	r3, [pc, #636]	; (d9c <loop+0x908>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     b1e:	ldrb	r3, [r3, #0]
     b20:	cmp	r3, #250	; 0xfa
     b22:	beq.w	dac <loop+0x918>
     b26:	cmp	r3, #252	; 0xfc
     b28:	beq.w	cb8 <loop+0x824>
     b2c:	cmp	r3, #248	; 0xf8
     b2e:	beq.w	d66 <loop+0x8d2>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     b32:	movs	r1, #35	; 0x23
     b34:	ldr	r0, [pc, #616]	; (da0 <loop+0x90c>)
     b36:	ldr	r4, [pc, #608]	; (d98 <loop+0x904>)
     b38:	bl	1eb0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     b3c:	ldr	r0, [pc, #612]	; (da4 <loop+0x910>)
     b3e:	bl	3a24 <Print::println()>
     b42:	b.n	4a8 <loop+0x14>
     b44:	ldr	r3, [r6, #20]
     b46:	b.n	5d0 <loop+0x13c>
     b48:	ldr	r3, [r5, #20]
     b4a:	b.n	58e <loop+0xfa>
     b4c:	ldr	r3, [r6, #20]
     b4e:	b.n	4c8 <loop+0x34>
     b50:	ldr	r3, [r6, #20]
     b52:	b.n	54c <loop+0xb8>
     b54:	ldr	r3, [r5, #20]
     b56:	b.n	612 <loop+0x17e>
     b58:	ldr	r3, [r5, #20]
     b5a:	b.n	50a <loop+0x76>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     b5c:	mov	r2, r6
     b5e:	b.n	632 <loop+0x19e>
     b60:	mov	r2, r6
     b62:	b.n	52a <loop+0x96>
     b64:	mov	r2, r5
     b66:	b.n	5f0 <loop+0x15c>
     b68:	mov	r2, r5
     b6a:	b.n	4e8 <loop+0x54>
     b6c:	mov	r2, r5
     b6e:	b.n	56c <loop+0xd8>
     b70:	mov	r2, r6
     b72:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b74:	ldrb	r3, [r7, #16]
     b76:	cmp	r3, #0
     b78:	bne.w	fde <loop+0xb4a>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b7c:	ldrb	r3, [r7, #17]
     b7e:	cmp	r3, #0
     b80:	bne.w	139a <loop+0xf06>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b84:	ldr	r3, [r7, #24]
     b86:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b8a:	clz	r1, r1
     b8e:	lsrs	r1, r1, #5
     b90:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b92:	uxtb	r0, r0
     b94:	bl	24c0 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b98:	ldr	r3, [r7, #0]
     b9a:	ldr	r0, [r7, #28]
     b9c:	ldr	r2, [r7, #12]
     b9e:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     ba0:	ldrb	r1, [r0, r3]
     ba2:	eor.w	r1, r1, #1
     ba6:	strb	r1, [r0, r3]
     ba8:	b.n	632 <loop+0x19e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     baa:	ldrb	r3, [r7, #16]
     bac:	cmp	r3, #0
     bae:	bne.w	1244 <loop+0xdb0>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     bb2:	ldrb	r3, [r7, #17]
     bb4:	cmp	r3, #0
     bb6:	bne.w	1376 <loop+0xee2>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     bba:	ldr	r3, [r7, #24]
     bbc:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     bc0:	clz	r1, r1
     bc4:	lsrs	r1, r1, #5
     bc6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bc8:	uxtb	r0, r0
     bca:	bl	24c0 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     bce:	ldr	r3, [r7, #0]
     bd0:	ldr	r0, [r7, #28]
     bd2:	ldr	r2, [r7, #12]
     bd4:	subs	r3, #1
     bd6:	ldrb	r1, [r0, r3]
     bd8:	eor.w	r1, r1, #1
     bdc:	strb	r1, [r0, r3]
     bde:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     be0:	ldrb	r3, [r7, #16]
     be2:	cmp	r3, #0
     be4:	bne.w	11cc <loop+0xd38>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     be8:	ldrb	r3, [r7, #17]
     bea:	cmp	r3, #0
     bec:	bne.w	1352 <loop+0xebe>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     bf0:	ldr	r3, [r7, #24]
     bf2:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     bf6:	clz	r1, r1
     bfa:	lsrs	r1, r1, #5
     bfc:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bfe:	uxtb	r0, r0
     c00:	bl	24c0 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     c04:	ldr	r3, [r7, #0]
     c06:	ldr	r0, [r7, #28]
     c08:	ldr	r2, [r7, #12]
     c0a:	subs	r3, #1
     c0c:	ldrb	r1, [r0, r3]
     c0e:	eor.w	r1, r1, #1
     c12:	strb	r1, [r0, r3]
     c14:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c16:	ldrb	r3, [r7, #16]
     c18:	cmp	r3, #0
     c1a:	bne.w	1154 <loop+0xcc0>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     c1e:	ldrb	r3, [r7, #17]
     c20:	cmp	r3, #0
     c22:	bne.w	1406 <loop+0xf72>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     c26:	ldr	r3, [r7, #24]
     c28:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c2c:	clz	r1, r1
     c30:	lsrs	r1, r1, #5
     c32:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c34:	uxtb	r0, r0
     c36:	bl	24c0 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     c3a:	ldr	r3, [r7, #0]
     c3c:	ldr	r0, [r7, #28]
     c3e:	ldr	r2, [r7, #12]
     c40:	subs	r3, #1
     c42:	ldrb	r1, [r0, r3]
     c44:	eor.w	r1, r1, #1
     c48:	strb	r1, [r0, r3]
     c4a:	b.n	56c <loop+0xd8>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c4c:	ldrb	r3, [r7, #16]
     c4e:	cmp	r3, #0
     c50:	bne.w	10dc <loop+0xc48>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     c54:	ldrb	r3, [r7, #17]
     c56:	cmp	r3, #0
     c58:	bne.w	13e2 <loop+0xf4e>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     c5c:	ldr	r3, [r7, #24]
     c5e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c62:	clz	r1, r1
     c66:	lsrs	r1, r1, #5
     c68:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c6a:	uxtb	r0, r0
     c6c:	bl	24c0 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     c70:	ldr	r3, [r7, #0]
     c72:	ldr	r0, [r7, #28]
     c74:	ldr	r2, [r7, #12]
     c76:	subs	r3, #1
     c78:	ldrb	r1, [r0, r3]
     c7a:	eor.w	r1, r1, #1
     c7e:	strb	r1, [r0, r3]
     c80:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c82:	ldrb	r3, [r7, #16]
     c84:	cmp	r3, #0
     c86:	bne.w	1056 <loop+0xbc2>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     c8a:	ldrb	r3, [r7, #17]
     c8c:	cmp	r3, #0
     c8e:	bne.w	13be <loop+0xf2a>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     c92:	ldr	r3, [r7, #24]
     c94:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c98:	clz	r1, r1
     c9c:	lsrs	r1, r1, #5
     c9e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ca0:	uxtb	r0, r0
     ca2:	bl	24c0 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     ca6:	ldr	r3, [r7, #0]
     ca8:	ldr	r0, [r7, #28]
     caa:	ldr	r2, [r7, #12]
     cac:	subs	r3, #1
     cae:	ldrb	r1, [r0, r3]
     cb0:	eor.w	r1, r1, #1
     cb4:	strb	r1, [r0, r3]
     cb6:	b.n	5f0 <loop+0x15c>
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     cb8:	ldr	r3, [pc, #236]	; (da8 <loop+0x914>)
     cba:	ldr	r4, [pc, #220]	; (d98 <loop+0x904>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[5]->toggle();
     cbc:	ldr	r2, [r3, #108]	; 0x6c
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     cbe:	movs	r5, #0
      ppqn = 0;
     cc0:	str	r5, [r3, #28]
      m_currentStep = 0;
     cc2:	str	r5, [r3, #8]
     cc4:	ldmia.w	r2, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     cc8:	clz	r1, r1
     ccc:	lsrs	r1, r1, #5
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     cce:	strb	r5, [r3, #4]

      digitalWrite(m_pin, m_state); 
     cd0:	uxtb	r0, r0
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     cd2:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     cd4:	bl	24c0 <digitalWrite>
     cd8:	b.w	4a8 <loop+0x14>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     cdc:	cmp.w	r0, #400	; 0x190
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
        m_sequence.controlTempo(m_value);
     ce0:	ldr	r3, [r4, #16]
     ce2:	bge.w	e2e <loop+0x99a>
        max_ppqn = 6;

        if (ppqn >= 6) {
     ce6:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ce8:	movs	r1, #6

        if (ppqn >= 6) {
     cea:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     cec:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     cee:	ble.w	700 <loop+0x26c>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     cf2:	movs	r2, #0
     cf4:	str	r2, [r3, #28]
     cf6:	b.n	700 <loop+0x26c>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     cf8:	cmp.w	r0, #400	; 0x190
     cfc:	ldr	r3, [r4, #16]
     cfe:	bge.w	e48 <loop+0x9b4>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d02:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d04:	movs	r1, #6

        if (ppqn >= 6) {
     d06:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d08:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     d0a:	ble.w	694 <loop+0x200>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     d0e:	movs	r2, #0
     d10:	str	r2, [r3, #28]
     d12:	b.n	694 <loop+0x200>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     d14:	cmp.w	r0, #400	; 0x190
     d18:	ldr	r3, [r4, #16]
     d1a:	bge.w	e62 <loop+0x9ce>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d1e:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d20:	movs	r1, #6

        if (ppqn >= 6) {
     d22:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d24:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     d26:	ble.w	824 <loop+0x390>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     d2a:	movs	r2, #0
     d2c:	str	r2, [r3, #28]
     d2e:	b.n	824 <loop+0x390>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     d30:	cmp.w	r0, #400	; 0x190
     d34:	ldr	r3, [r4, #16]
     d36:	bge.w	e7c <loop+0x9e8>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d3a:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d3c:	movs	r1, #6

        if (ppqn >= 6) {
     d3e:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d40:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     d42:	ble.w	890 <loop+0x3fc>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     d46:	movs	r2, #0
     d48:	str	r2, [r3, #28]
     d4a:	b.n	890 <loop+0x3fc>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     d4c:	cmp.w	r0, #400	; 0x190
     d50:	ldr	r3, [r4, #16]
     d52:	bge.n	e14 <loop+0x980>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d54:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d56:	movs	r1, #6

        if (ppqn >= 6) {
     d58:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d5a:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     d5c:	ble.w	7b8 <loop+0x324>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     d60:	movs	r2, #0
     d62:	str	r2, [r3, #28]
     d64:	b.n	7b8 <loop+0x324>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d66:	ldr	r5, [pc, #64]	; (da8 <loop+0x914>)

      if (ppqn >= notesLengths[m_currentStep]) {
     d68:	ldr	r2, [r5, #8]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d6a:	ldr	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     d6c:	adds	r2, #18
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d6e:	adds	r3, #1

      if (ppqn >= notesLengths[m_currentStep]) {
     d70:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d74:	str	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     d76:	cmp	r3, r2
     d78:	bge.w	142a <loop+0xf96>
        // of the active note to see if i do the stop step
        stopStep();
      }


      if (ppqn == max_ppqn) {
     d7c:	ldr	r2, [r5, #32]
     d7e:	ldr	r6, [pc, #40]	; (da8 <loop+0x914>)
     d80:	cmp	r2, r3
     d82:	bne.w	4a6 <loop+0x12>
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
     d86:	ldrb	r3, [r6, #4]
     d88:	cmp	r3, #0
     d8a:	bne.w	161a <loop+0x1186>
     d8e:	ldr	r4, [pc, #8]	; (d98 <loop+0x904>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     d90:	movs	r3, #0
     d92:	str	r3, [r5, #28]
     d94:	b.w	4a8 <loop+0x14>
     d98:	.word	0x1fff1844
     d9c:	.word	0x1fff1d00
     da0:	.word	0x00004df4
     da4:	.word	0x1fff0c60
     da8:	.word	0x1fff1730
      }
    };

    void startPPQN () {
      m_state = true;
     dac:	ldr	r5, [pc, #800]	; (10d0 <loop+0xc3c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dae:	ldr	r4, [pc, #804]	; (10d4 <loop+0xc40>)
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     db0:	ldr	r3, [r5, #8]
     db2:	adds	r3, #22
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     db4:	mov.w	r8, #1
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     db8:	ldr.w	r6, [r5, r3, lsl #2]
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     dbc:	strb.w	r8, [r5, #4]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     dc0:	ldrb.w	r9, [r6]
      ppqn = 0;
     dc4:	movs	r7, #0
     dc6:	mov	r0, r9
     dc8:	str	r7, [r5, #28]
     dca:	bl	24cc <digitalRead>
     dce:	clz	r1, r0
     dd2:	lsrs	r1, r1, #5
     dd4:	mov	r0, r9
     dd6:	bl	24c0 <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep].m_state) {
     dda:	ldr	r3, [r5, #8]
     ddc:	ldr	r2, [r4, #0]
     dde:	str	r2, [sp, #12]
     de0:	ldrb	r2, [r5, r3]
	return ret;
     de2:	ldr	r1, [sp, #12]
      blinking = true;
     de4:	strb.w	r8, [r6, #16]
      blinkingCounter = times;
     de8:	str	r7, [r6, #20]
      lastBlink = millis();  
     dea:	str	r1, [r6, #8]
     dec:	cmp	r2, #0
     dee:	bne.w	1434 <loop+0xfa0>
          playStep(m_currentStep);
        }

        m_currentStep++;
     df2:	adds	r3, #1

        if (m_currentStep > 3) {
     df4:	cmp	r3, #3
          m_currentStep = 0;
     df6:	it	gt
     df8:	movgt	r3, #0
     dfa:	str	r3, [r5, #8]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[5]->toggle();
     dfc:	ldr	r3, [r5, #108]	; 0x6c
     dfe:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     e02:	clz	r1, r1
     e06:	lsrs	r1, r1, #5
     e08:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     e0a:	uxtb	r0, r0
     e0c:	bl	24c0 <digitalWrite>
     e10:	b.w	4a8 <loop+0x14>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e14:	sub.w	r2, r0, #400	; 0x190
     e18:	cmp.w	r2, #400	; 0x190
     e1c:	bcs.w	fa4 <loop+0xb10>
        max_ppqn = 8;

        if (ppqn >= 8) {
     e20:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e22:	movs	r1, #8

        if (ppqn >= 8) {
     e24:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e26:	str	r1, [r3, #32]

        if (ppqn >= 8) {
     e28:	ble.w	7b8 <loop+0x324>
     e2c:	b.n	d60 <loop+0x8cc>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e2e:	sub.w	r2, r0, #400	; 0x190
     e32:	cmp.w	r2, #400	; 0x190
     e36:	bcs.w	f94 <loop+0xb00>
        max_ppqn = 8;

        if (ppqn >= 8) {
     e3a:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e3c:	movs	r1, #8

        if (ppqn >= 8) {
     e3e:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e40:	str	r1, [r3, #32]

        if (ppqn >= 8) {
     e42:	ble.w	700 <loop+0x26c>
     e46:	b.n	cf2 <loop+0x85e>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e48:	sub.w	r2, r0, #400	; 0x190
     e4c:	cmp.w	r2, #400	; 0x190
     e50:	bcs.w	fce <loop+0xb3a>
        max_ppqn = 8;

        if (ppqn >= 8) {
     e54:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e56:	movs	r1, #8

        if (ppqn >= 8) {
     e58:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e5a:	str	r1, [r3, #32]

        if (ppqn >= 8) {
     e5c:	ble.w	694 <loop+0x200>
     e60:	b.n	d0e <loop+0x87a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e62:	sub.w	r2, r0, #400	; 0x190
     e66:	cmp.w	r2, #400	; 0x190
     e6a:	bcs.w	fc0 <loop+0xb2c>
        max_ppqn = 8;

        if (ppqn >= 8) {
     e6e:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e70:	movs	r1, #8

        if (ppqn >= 8) {
     e72:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e74:	str	r1, [r3, #32]

        if (ppqn >= 8) {
     e76:	ble.w	824 <loop+0x390>
     e7a:	b.n	d2a <loop+0x896>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e7c:	sub.w	r2, r0, #400	; 0x190
     e80:	cmp.w	r2, #400	; 0x190
     e84:	bcs.w	fb2 <loop+0xb1e>
        max_ppqn = 8;

        if (ppqn >= 8) {
     e88:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e8a:	movs	r1, #8

        if (ppqn >= 8) {
     e8c:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e8e:	str	r1, [r3, #32]

        if (ppqn >= 8) {
     e90:	ble.w	890 <loop+0x3fc>
     e94:	b.n	d46 <loop+0x8b2>
      notes[id] = newValue;
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
     e96:	ldr	r3, [r4, #12]
     e98:	ldr	r1, [r4, #16]
     e9a:	add.w	r2, r3, #14
     e9e:	subs.w	r3, r0, r0, lsl #6
     ea2:	it	mi
     ea4:	addwmi	r3, r3, #1023	; 0x3ff
     ea8:	asrs	r3, r3, #10
     eaa:	adds	r3, #127	; 0x7f
     eac:	str.w	r3, [r1, r2, lsl #2]
     eb0:	b.n	8d6 <loop+0x442>
     eb2:	ldr	r3, [r4, #12]
     eb4:	ldr	r1, [r4, #16]
     eb6:	add.w	r2, r3, #14
     eba:	subs.w	r3, r0, r0, lsl #6
     ebe:	it	mi
     ec0:	addwmi	r3, r3, #1023	; 0x3ff
     ec4:	asrs	r3, r3, #10
     ec6:	adds	r3, #127	; 0x7f
     ec8:	str.w	r3, [r1, r2, lsl #2]
     ecc:	b.n	746 <loop+0x2b2>
     ece:	ldr	r3, [r4, #12]
     ed0:	ldr	r1, [r4, #16]
     ed2:	add.w	r2, r3, #14
     ed6:	subs.w	r3, r0, r0, lsl #6
     eda:	it	mi
     edc:	addwmi	r3, r3, #1023	; 0x3ff
     ee0:	asrs	r3, r3, #10
     ee2:	adds	r3, #127	; 0x7f
     ee4:	str.w	r3, [r1, r2, lsl #2]
     ee8:	b.w	6da <loop+0x246>
     eec:	ldr	r3, [r4, #12]
     eee:	ldr	r1, [r4, #16]
     ef0:	add.w	r2, r3, #14
     ef4:	subs.w	r3, r0, r0, lsl #6
     ef8:	it	mi
     efa:	addwmi	r3, r3, #1023	; 0x3ff
     efe:	asrs	r3, r3, #10
     f00:	adds	r3, #127	; 0x7f
     f02:	str.w	r3, [r1, r2, lsl #2]
     f06:	b.n	86a <loop+0x3d6>
     f08:	ldr	r3, [r4, #12]
     f0a:	ldr	r1, [r4, #16]
     f0c:	add.w	r2, r3, #14
     f10:	subs.w	r3, r0, r0, lsl #6
     f14:	it	mi
     f16:	addwmi	r3, r3, #1023	; 0x3ff
     f1a:	asrs	r3, r3, #10
     f1c:	adds	r3, #127	; 0x7f
     f1e:	str.w	r3, [r1, r2, lsl #2]
     f22:	b.n	7fe <loop+0x36a>
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     f24:	rsb	r3, r2, #2
     f28:	mul.w	r3, r0, r3
     f2c:	cmp	r3, #0
     f2e:	it	lt
     f30:	addwlt	r3, r3, #1023	; 0x3ff
     f34:	add.w	r2, r2, r3, asr #10
     f38:	b.n	73e <loop+0x2aa>
     f3a:	rsb	r3, r2, #2
     f3e:	mul.w	r3, r0, r3
     f42:	cmp	r3, #0
     f44:	it	lt
     f46:	addwlt	r3, r3, #1023	; 0x3ff
     f4a:	add.w	r2, r2, r3, asr #10
     f4e:	b.w	6d2 <loop+0x23e>
     f52:	rsb	r3, r2, #2
     f56:	mul.w	r3, r0, r3
     f5a:	cmp	r3, #0
     f5c:	it	lt
     f5e:	addwlt	r3, r3, #1023	; 0x3ff
     f62:	add.w	r2, r2, r3, asr #10
     f66:	b.n	8ce <loop+0x43a>
     f68:	rsb	r3, r2, #2
     f6c:	mul.w	r3, r0, r3
     f70:	cmp	r3, #0
     f72:	it	lt
     f74:	addwlt	r3, r3, #1023	; 0x3ff
     f78:	add.w	r2, r2, r3, asr #10
     f7c:	b.n	862 <loop+0x3ce>
     f7e:	rsb	r3, r2, #2
     f82:	mul.w	r3, r0, r3
     f86:	cmp	r3, #0
     f88:	it	lt
     f8a:	addwlt	r3, r3, #1023	; 0x3ff
     f8e:	add.w	r2, r2, r3, asr #10
     f92:	b.n	7f6 <loop+0x362>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f94:	sub.w	r2, r0, #800	; 0x320
     f98:	cmp	r2, #223	; 0xdf
        max_ppqn = 12;
     f9a:	itt	ls
     f9c:	movls	r2, #12
     f9e:	strls	r2, [r3, #32]
     fa0:	b.w	700 <loop+0x26c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     fa4:	sub.w	r2, r0, #800	; 0x320
     fa8:	cmp	r2, #223	; 0xdf
        max_ppqn = 12;
     faa:	itt	ls
     fac:	movls	r2, #12
     fae:	strls	r2, [r3, #32]
     fb0:	b.n	7b8 <loop+0x324>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     fb2:	sub.w	r2, r0, #800	; 0x320
     fb6:	cmp	r2, #223	; 0xdf
        max_ppqn = 12;
     fb8:	itt	ls
     fba:	movls	r2, #12
     fbc:	strls	r2, [r3, #32]
     fbe:	b.n	890 <loop+0x3fc>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     fc0:	sub.w	r2, r0, #800	; 0x320
     fc4:	cmp	r2, #223	; 0xdf
        max_ppqn = 12;
     fc6:	itt	ls
     fc8:	movls	r2, #12
     fca:	strls	r2, [r3, #32]
     fcc:	b.n	824 <loop+0x390>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     fce:	sub.w	r2, r0, #800	; 0x320
     fd2:	cmp	r2, #223	; 0xdf
        max_ppqn = 12;
     fd4:	itt	ls
     fd6:	movls	r2, #12
     fd8:	strls	r2, [r3, #32]
     fda:	b.w	694 <loop+0x200>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     fde:	ldr	r3, [r7, #24]
     fe0:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     fe4:	clz	r1, r1
     fe8:	lsrs	r1, r1, #5
     fea:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     fec:	uxtb	r0, r0
     fee:	bl	24c0 <digitalWrite>
        m_sequence.toggleGlobalMode();
     ff2:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
     ff6:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ffa:	ldrb.w	sl, [r9]
     ffe:	mov	r0, sl
    1000:	bl	24cc <digitalRead>
    1004:	clz	r1, r0
    1008:	lsrs	r1, r1, #5
    100a:	mov	r0, sl
    100c:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1010:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    1014:	ldr.w	lr, [pc, #192]	; 10d8 <loop+0xc44>
    1018:	str	r3, [sp, #164]	; 0xa4
	return ret;
    101a:	ldr	r3, [sp, #164]	; 0xa4
    101c:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1020:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1024:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1026:	movs	r3, #1
    1028:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    102c:	str.w	r2, [r9, #20]
    1030:	cmp.w	sl, #0
    1034:	beq.w	14fa <loop+0x1066>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1038:	cmp.w	sl, #1
    103c:	beq.w	1868 <loop+0x13d4>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    1040:	cmp.w	sl, #2
    1044:	beq.w	19dc <loop+0x1548>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1048:	cmp.w	sl, #3
    104c:	beq.w	17da <loop+0x1346>
    1050:	ldr	r2, [r7, #12]
    1052:	b.w	632 <loop+0x19e>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1056:	ldr	r3, [r7, #24]
    1058:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    105c:	clz	r1, r1
    1060:	lsrs	r1, r1, #5
    1062:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1064:	uxtb	r0, r0
    1066:	bl	24c0 <digitalWrite>
        m_sequence.toggleGlobalMode();
    106a:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    106e:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1072:	ldrb.w	sl, [r9]
    1076:	mov	r0, sl
    1078:	bl	24cc <digitalRead>
    107c:	clz	r1, r0
    1080:	lsrs	r1, r1, #5
    1082:	mov	r0, sl
    1084:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1088:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    108c:	ldr.w	lr, [pc, #72]	; 10d8 <loop+0xc44>
    1090:	str	r3, [sp, #144]	; 0x90
	return ret;
    1092:	ldr	r3, [sp, #144]	; 0x90
    1094:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1098:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    109c:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    109e:	movs	r3, #1
    10a0:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    10a4:	str.w	r2, [r9, #20]
    10a8:	cmp.w	sl, #0
    10ac:	beq.w	146a <loop+0xfd6>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    10b0:	cmp.w	sl, #1
    10b4:	beq.w	1994 <loop+0x1500>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    10b8:	cmp.w	sl, #2
    10bc:	beq.w	1afc <loop+0x1668>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    10c0:	cmp.w	sl, #3
    10c4:	beq.w	16c2 <loop+0x122e>
    10c8:	ldr	r2, [r7, #12]
    10ca:	b.w	5f0 <loop+0x15c>
    10ce:	nop
    10d0:	.word	0x1fff1730
    10d4:	.word	0x1fff1844
    10d8:	.word	0x1fff165c
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    10dc:	ldr	r3, [r7, #24]
    10de:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    10e2:	clz	r1, r1
    10e6:	lsrs	r1, r1, #5
    10e8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    10ea:	uxtb	r0, r0
    10ec:	bl	24c0 <digitalWrite>
        m_sequence.toggleGlobalMode();
    10f0:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    10f4:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10f8:	ldrb.w	sl, [r9]
    10fc:	mov	r0, sl
    10fe:	bl	24cc <digitalRead>
    1102:	clz	r1, r0
    1106:	lsrs	r1, r1, #5
    1108:	mov	r0, sl
    110a:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    110e:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    1112:	ldr.w	lr, [pc, #1380]	; 1678 <loop+0x11e4>
    1116:	str	r3, [sp, #124]	; 0x7c
	return ret;
    1118:	ldr	r3, [sp, #124]	; 0x7c
    111a:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    111e:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1122:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1124:	movs	r3, #1
    1126:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    112a:	str.w	r2, [r9, #20]
    112e:	cmp.w	sl, #0
    1132:	beq.w	158a <loop+0x10f6>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1136:	cmp.w	sl, #1
    113a:	beq.w	18f8 <loop+0x1464>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    113e:	cmp.w	sl, #2
    1142:	beq.w	1b44 <loop+0x16b0>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1146:	cmp.w	sl, #3
    114a:	beq.w	1708 <loop+0x1274>
    114e:	ldr	r2, [r7, #12]
    1150:	b.w	5ae <loop+0x11a>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1154:	ldr	r3, [r7, #24]
    1156:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    115a:	clz	r1, r1
    115e:	lsrs	r1, r1, #5
    1160:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1162:	uxtb	r0, r0
    1164:	bl	24c0 <digitalWrite>
        m_sequence.toggleGlobalMode();
    1168:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    116c:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1170:	ldrb.w	sl, [r9]
    1174:	mov	r0, sl
    1176:	bl	24cc <digitalRead>
    117a:	clz	r1, r0
    117e:	lsrs	r1, r1, #5
    1180:	mov	r0, sl
    1182:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1186:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    118a:	ldr.w	lr, [pc, #1260]	; 1678 <loop+0x11e4>
    118e:	str	r3, [sp, #104]	; 0x68
	return ret;
    1190:	ldr	r3, [sp, #104]	; 0x68
    1192:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1196:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    119a:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    119c:	movs	r3, #1
    119e:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    11a2:	str.w	r2, [r9, #20]
    11a6:	cmp.w	sl, #0
    11aa:	beq.w	14b2 <loop+0x101e>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    11ae:	cmp.w	sl, #1
    11b2:	beq.w	1820 <loop+0x138c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    11b6:	cmp.w	sl, #2
    11ba:	beq.w	1a6c <loop+0x15d8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    11be:	cmp.w	sl, #3
    11c2:	beq.w	174e <loop+0x12ba>
    11c6:	ldr	r2, [r7, #12]
    11c8:	b.w	56c <loop+0xd8>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    11cc:	ldr	r3, [r7, #24]
    11ce:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    11d2:	clz	r1, r1
    11d6:	lsrs	r1, r1, #5
    11d8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    11da:	uxtb	r0, r0
    11dc:	bl	24c0 <digitalWrite>
        m_sequence.toggleGlobalMode();
    11e0:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    11e4:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11e8:	ldrb.w	sl, [r9]
    11ec:	mov	r0, sl
    11ee:	bl	24cc <digitalRead>
    11f2:	clz	r1, r0
    11f6:	lsrs	r1, r1, #5
    11f8:	mov	r0, sl
    11fa:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11fe:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    1202:	ldr.w	lr, [pc, #1140]	; 1678 <loop+0x11e4>
    1206:	str	r3, [sp, #84]	; 0x54
	return ret;
    1208:	ldr	r3, [sp, #84]	; 0x54
    120a:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    120e:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1212:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1214:	movs	r3, #1
    1216:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    121a:	str.w	r2, [r9, #20]
    121e:	cmp.w	sl, #0
    1222:	beq.w	1542 <loop+0x10ae>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1226:	cmp.w	sl, #1
    122a:	beq.w	18b0 <loop+0x141c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    122e:	cmp.w	sl, #2
    1232:	beq.w	1ab4 <loop+0x1620>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1236:	cmp.w	sl, #3
    123a:	beq.w	1794 <loop+0x1300>
    123e:	ldr	r2, [r7, #12]
    1240:	b.w	52a <loop+0x96>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1244:	ldr	r3, [r7, #24]
    1246:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    124a:	clz	r1, r1
    124e:	lsrs	r1, r1, #5
    1250:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1252:	uxtb	r0, r0
    1254:	bl	24c0 <digitalWrite>
        m_sequence.toggleGlobalMode();
    1258:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    125c:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1260:	ldrb.w	sl, [r9]
    1264:	mov	r0, sl
    1266:	bl	24cc <digitalRead>
    126a:	clz	r1, r0
    126e:	lsrs	r1, r1, #5
    1270:	mov	r0, sl
    1272:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1276:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    127a:	ldr.w	lr, [pc, #1020]	; 1678 <loop+0x11e4>
    127e:	str	r3, [sp, #64]	; 0x40
	return ret;
    1280:	ldr	r3, [sp, #64]	; 0x40
    1282:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1286:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    128a:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    128c:	movs	r3, #1
    128e:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    1292:	str.w	r2, [r9, #20]
    1296:	cmp.w	sl, #0
    129a:	beq.w	15d2 <loop+0x113e>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    129e:	cmp.w	sl, #1
    12a2:	beq.w	1940 <loop+0x14ac>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    12a6:	cmp.w	sl, #2
    12aa:	beq.w	1a24 <loop+0x1590>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    12ae:	cmp.w	sl, #3
    12b2:	beq.w	167c <loop+0x11e8>
    12b6:	ldr	r2, [r7, #12]
    12b8:	b.w	4e8 <loop+0x54>
      notesLengths[id] = newValue;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      notes[id] = newValue;
    12bc:	sub.w	r3, r0, r0, lsl #2
    12c0:	ldr	r2, [r4, #12]
    12c2:	ldr	r1, [r4, #16]
    12c4:	lsls	r3, r3, #2
    12c6:	it	mi
    12c8:	addwmi	r3, r3, #1023	; 0x3ff
    12cc:	adds	r2, #10
    12ce:	asrs	r3, r3, #10
    12d0:	adds	r3, #51	; 0x33
    12d2:	str.w	r3, [r1, r2, lsl #2]
    12d6:	b.w	7fe <loop+0x36a>
    12da:	sub.w	r3, r0, r0, lsl #2
    12de:	ldr	r2, [r4, #12]
    12e0:	ldr	r1, [r4, #16]
    12e2:	lsls	r3, r3, #2
    12e4:	it	mi
    12e6:	addwmi	r3, r3, #1023	; 0x3ff
    12ea:	adds	r2, #10
    12ec:	asrs	r3, r3, #10
    12ee:	adds	r3, #51	; 0x33
    12f0:	str.w	r3, [r1, r2, lsl #2]
    12f4:	b.w	8d6 <loop+0x442>
    12f8:	sub.w	r3, r0, r0, lsl #2
    12fc:	ldr	r2, [r4, #12]
    12fe:	ldr	r1, [r4, #16]
    1300:	lsls	r3, r3, #2
    1302:	it	mi
    1304:	addwmi	r3, r3, #1023	; 0x3ff
    1308:	adds	r2, #10
    130a:	asrs	r3, r3, #10
    130c:	adds	r3, #51	; 0x33
    130e:	str.w	r3, [r1, r2, lsl #2]
    1312:	b.w	86a <loop+0x3d6>
    1316:	sub.w	r3, r0, r0, lsl #2
    131a:	ldr	r2, [r4, #12]
    131c:	ldr	r1, [r4, #16]
    131e:	lsls	r3, r3, #2
    1320:	it	mi
    1322:	addwmi	r3, r3, #1023	; 0x3ff
    1326:	adds	r2, #10
    1328:	asrs	r3, r3, #10
    132a:	adds	r3, #51	; 0x33
    132c:	str.w	r3, [r1, r2, lsl #2]
    1330:	b.w	746 <loop+0x2b2>
    1334:	sub.w	r3, r0, r0, lsl #2
    1338:	ldr	r2, [r4, #12]
    133a:	ldr	r1, [r4, #16]
    133c:	lsls	r3, r3, #2
    133e:	it	mi
    1340:	addwmi	r3, r3, #1023	; 0x3ff
    1344:	adds	r2, #10
    1346:	asrs	r3, r3, #10
    1348:	adds	r3, #51	; 0x33
    134a:	str.w	r3, [r1, r2, lsl #2]
    134e:	b.w	6da <loop+0x246>
      } else if (m_state == LOW && m_playButton) {
        m_led.toggle();
    1352:	ldr	r3, [r7, #24]
    1354:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1358:	clz	r1, r1
    135c:	lsrs	r1, r1, #5
    135e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1360:	uxtb	r0, r0
    1362:	bl	24c0 <digitalWrite>
    1366:	movs	r1, #4
    1368:	ldr	r0, [pc, #760]	; (1664 <loop+0x11d0>)
    136a:	bl	1eb0 <usb_serial_write>
    136e:	ldr	r0, [pc, #760]	; (1668 <loop+0x11d4>)
    1370:	bl	3a24 <Print::println()>
    1374:	b.n	123e <loop+0xdaa>
    1376:	ldr	r3, [r7, #24]
    1378:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    137c:	clz	r1, r1
    1380:	lsrs	r1, r1, #5
    1382:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1384:	uxtb	r0, r0
    1386:	bl	24c0 <digitalWrite>
    138a:	movs	r1, #4
    138c:	ldr	r0, [pc, #724]	; (1664 <loop+0x11d0>)
    138e:	bl	1eb0 <usb_serial_write>
    1392:	ldr	r0, [pc, #724]	; (1668 <loop+0x11d4>)
    1394:	bl	3a24 <Print::println()>
    1398:	b.n	12b6 <loop+0xe22>
    139a:	ldr	r3, [r7, #24]
    139c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13a0:	clz	r1, r1
    13a4:	lsrs	r1, r1, #5
    13a6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13a8:	uxtb	r0, r0
    13aa:	bl	24c0 <digitalWrite>
    13ae:	movs	r1, #4
    13b0:	ldr	r0, [pc, #688]	; (1664 <loop+0x11d0>)
    13b2:	bl	1eb0 <usb_serial_write>
    13b6:	ldr	r0, [pc, #688]	; (1668 <loop+0x11d4>)
    13b8:	bl	3a24 <Print::println()>
    13bc:	b.n	1050 <loop+0xbbc>
    13be:	ldr	r3, [r7, #24]
    13c0:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13c4:	clz	r1, r1
    13c8:	lsrs	r1, r1, #5
    13ca:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13cc:	uxtb	r0, r0
    13ce:	bl	24c0 <digitalWrite>
    13d2:	movs	r1, #4
    13d4:	ldr	r0, [pc, #652]	; (1664 <loop+0x11d0>)
    13d6:	bl	1eb0 <usb_serial_write>
    13da:	ldr	r0, [pc, #652]	; (1668 <loop+0x11d4>)
    13dc:	bl	3a24 <Print::println()>
    13e0:	b.n	10c8 <loop+0xc34>
    13e2:	ldr	r3, [r7, #24]
    13e4:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13e8:	clz	r1, r1
    13ec:	lsrs	r1, r1, #5
    13ee:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13f0:	uxtb	r0, r0
    13f2:	bl	24c0 <digitalWrite>
    13f6:	movs	r1, #4
    13f8:	ldr	r0, [pc, #616]	; (1664 <loop+0x11d0>)
    13fa:	bl	1eb0 <usb_serial_write>
    13fe:	ldr	r0, [pc, #616]	; (1668 <loop+0x11d4>)
    1400:	bl	3a24 <Print::println()>
    1404:	b.n	114e <loop+0xcba>
    1406:	ldr	r3, [r7, #24]
    1408:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    140c:	clz	r1, r1
    1410:	lsrs	r1, r1, #5
    1412:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1414:	uxtb	r0, r0
    1416:	bl	24c0 <digitalWrite>
    141a:	movs	r1, #4
    141c:	ldr	r0, [pc, #580]	; (1664 <loop+0x11d0>)
    141e:	bl	1eb0 <usb_serial_write>
    1422:	ldr	r0, [pc, #580]	; (1668 <loop+0x11d4>)
    1424:	bl	3a24 <Print::println()>
    1428:	b.n	11c6 <loop+0xd32>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    142a:	ldr	r0, [pc, #576]	; (166c <loop+0x11d8>)
    142c:	bl	274c <usb_midi_write_packed>
    1430:	ldr	r3, [r5, #28]
    1432:	b.n	d7c <loop+0x8e8>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1434:	add.w	r6, r3, #10
    1438:	adds	r3, #14
    143a:	ldr.w	r2, [r5, r6, lsl #2]
    143e:	ldr.w	r3, [r5, r3, lsl #2]
    1442:	lsls	r2, r2, #16
    1444:	lsls	r0, r3, #24
    1446:	and.w	r3, r0, #2130706432	; 0x7f000000
    144a:	and.w	r0, r2, #8323072	; 0x7f0000
    144e:	orrs	r0, r3
    1450:	orr.w	r0, r0, #40704	; 0x9f00
    1454:	orr.w	r0, r0, #9
    1458:	bl	274c <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    145c:	bl	27e8 <usb_midi_flush_output>
      activeNote = notes[step];
    1460:	ldr.w	r2, [r5, r6, lsl #2]
    1464:	ldr	r3, [r5, #8]
    1466:	str	r2, [r5, #36]	; 0x24
    1468:	b.n	df2 <loop+0x95e>
    146a:	movs	r1, #5
    146c:	ldr	r0, [pc, #512]	; (1670 <loop+0x11dc>)
    146e:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1470:	strb.w	r3, [lr]
    1474:	str	r3, [sp, #0]
    1476:	bl	1eb0 <usb_serial_write>
    147a:	ldr	r0, [pc, #492]	; (1668 <loop+0x11d4>)
    147c:	bl	3a24 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    1480:	ldr.w	r5, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1484:	ldrb.w	r9, [r5]
    1488:	mov	r0, r9
    148a:	bl	24cc <digitalRead>
    148e:	clz	r1, r0
    1492:	lsrs	r1, r1, #5
    1494:	mov	r0, r9
    1496:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    149a:	ldr.w	r1, [r8]
    149e:	str	r1, [sp, #148]	; 0x94
      blinking = true;
      blinkingCounter = times;
    14a0:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14a2:	ldr	r3, [sp, #0]
	return ret;
    14a4:	ldr	r1, [sp, #148]	; 0x94
      blinkingCounter = times;
    14a6:	str	r2, [r5, #20]
    14a8:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14aa:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    14ac:	str	r1, [r5, #8]
    14ae:	b.w	5f0 <loop+0x15c>
    14b2:	movs	r1, #5
    14b4:	ldr	r0, [pc, #440]	; (1670 <loop+0x11dc>)
    14b6:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    14b8:	strb.w	r3, [lr]
    14bc:	str	r3, [sp, #0]
    14be:	bl	1eb0 <usb_serial_write>
    14c2:	ldr	r0, [pc, #420]	; (1668 <loop+0x11d4>)
    14c4:	bl	3a24 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    14c8:	ldr.w	r5, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14cc:	ldrb.w	r9, [r5]
    14d0:	mov	r0, r9
    14d2:	bl	24cc <digitalRead>
    14d6:	clz	r1, r0
    14da:	lsrs	r1, r1, #5
    14dc:	mov	r0, r9
    14de:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14e2:	ldr.w	r1, [r8]
    14e6:	str	r1, [sp, #108]	; 0x6c
      blinking = true;
      blinkingCounter = times;
    14e8:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14ea:	ldr	r3, [sp, #0]
	return ret;
    14ec:	ldr	r1, [sp, #108]	; 0x6c
      blinkingCounter = times;
    14ee:	str	r2, [r5, #20]
    14f0:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14f2:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    14f4:	str	r1, [r5, #8]
    14f6:	b.w	56c <loop+0xd8>
    14fa:	movs	r1, #5
    14fc:	ldr	r0, [pc, #368]	; (1670 <loop+0x11dc>)
    14fe:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1500:	strb.w	r3, [lr]
    1504:	str	r3, [sp, #0]
    1506:	bl	1eb0 <usb_serial_write>
    150a:	ldr	r0, [pc, #348]	; (1668 <loop+0x11d4>)
    150c:	bl	3a24 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    1510:	ldr.w	r6, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1514:	ldrb.w	r9, [r6]
    1518:	mov	r0, r9
    151a:	bl	24cc <digitalRead>
    151e:	clz	r1, r0
    1522:	lsrs	r1, r1, #5
    1524:	mov	r0, r9
    1526:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    152a:	ldr.w	r1, [r8]
    152e:	str	r1, [sp, #168]	; 0xa8
      blinking = true;
      blinkingCounter = times;
    1530:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1532:	ldr	r3, [sp, #0]
	return ret;
    1534:	ldr	r1, [sp, #168]	; 0xa8
      blinkingCounter = times;
    1536:	str	r2, [r6, #20]
    1538:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    153a:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    153c:	str	r1, [r6, #8]
    153e:	b.w	632 <loop+0x19e>
    1542:	movs	r1, #5
    1544:	ldr	r0, [pc, #296]	; (1670 <loop+0x11dc>)
    1546:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1548:	strb.w	r3, [lr]
    154c:	str	r3, [sp, #0]
    154e:	bl	1eb0 <usb_serial_write>
    1552:	ldr	r0, [pc, #276]	; (1668 <loop+0x11d4>)
    1554:	bl	3a24 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    1558:	ldr.w	r6, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    155c:	ldrb.w	r9, [r6]
    1560:	mov	r0, r9
    1562:	bl	24cc <digitalRead>
    1566:	clz	r1, r0
    156a:	lsrs	r1, r1, #5
    156c:	mov	r0, r9
    156e:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1572:	ldr.w	r1, [r8]
    1576:	str	r1, [sp, #88]	; 0x58
      blinking = true;
      blinkingCounter = times;
    1578:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    157a:	ldr	r3, [sp, #0]
	return ret;
    157c:	ldr	r1, [sp, #88]	; 0x58
      blinkingCounter = times;
    157e:	str	r2, [r6, #20]
    1580:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1582:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1584:	str	r1, [r6, #8]
    1586:	b.w	52a <loop+0x96>
    158a:	movs	r1, #5
    158c:	ldr	r0, [pc, #224]	; (1670 <loop+0x11dc>)
    158e:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1590:	strb.w	r3, [lr]
    1594:	str	r3, [sp, #0]
    1596:	bl	1eb0 <usb_serial_write>
    159a:	ldr	r0, [pc, #204]	; (1668 <loop+0x11d4>)
    159c:	bl	3a24 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    15a0:	ldr.w	r6, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15a4:	ldrb.w	r9, [r6]
    15a8:	mov	r0, r9
    15aa:	bl	24cc <digitalRead>
    15ae:	clz	r1, r0
    15b2:	lsrs	r1, r1, #5
    15b4:	mov	r0, r9
    15b6:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15ba:	ldr.w	r1, [r8]
    15be:	str	r1, [sp, #128]	; 0x80
      blinking = true;
      blinkingCounter = times;
    15c0:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15c2:	ldr	r3, [sp, #0]
	return ret;
    15c4:	ldr	r1, [sp, #128]	; 0x80
      blinkingCounter = times;
    15c6:	str	r2, [r6, #20]
    15c8:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15ca:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    15cc:	str	r1, [r6, #8]
    15ce:	b.w	5ae <loop+0x11a>
    15d2:	movs	r1, #5
    15d4:	ldr	r0, [pc, #152]	; (1670 <loop+0x11dc>)
    15d6:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    15d8:	strb.w	r3, [lr]
    15dc:	str	r3, [sp, #0]
    15de:	bl	1eb0 <usb_serial_write>
    15e2:	ldr	r0, [pc, #132]	; (1668 <loop+0x11d4>)
    15e4:	bl	3a24 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    15e8:	ldr.w	r5, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15ec:	ldrb.w	r9, [r5]
    15f0:	mov	r0, r9
    15f2:	bl	24cc <digitalRead>
    15f6:	clz	r1, r0
    15fa:	lsrs	r1, r1, #5
    15fc:	mov	r0, r9
    15fe:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1602:	ldr.w	r1, [r8]
    1606:	str	r1, [sp, #68]	; 0x44
      blinking = true;
      blinkingCounter = times;
    1608:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    160a:	ldr	r3, [sp, #0]
	return ret;
    160c:	ldr	r1, [sp, #68]	; 0x44
      blinkingCounter = times;
    160e:	str	r2, [r5, #20]
    1610:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1612:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1614:	str	r1, [r5, #8]
    1616:	b.w	4e8 <loop+0x54>
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
    161a:	ldr	r3, [r6, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    161c:	ldr	r4, [pc, #84]	; (1674 <loop+0x11e0>)
    161e:	adds	r3, #22
    1620:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1624:	ldrb.w	r8, [r7]
    1628:	mov	r0, r8
    162a:	bl	24cc <digitalRead>
    162e:	clz	r1, r0
    1632:	lsrs	r1, r1, #5
    1634:	mov	r0, r8
    1636:	bl	24c0 <digitalWrite>
    163a:	ldr	r2, [r4, #0]

        if (m_steps[m_currentStep].m_state) {
    163c:	ldr	r3, [r6, #8]
    163e:	str	r2, [sp, #8]
	return ret;
    1640:	ldr	r1, [sp, #8]
    1642:	ldrb	r2, [r6, r3]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1644:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1646:	movs	r0, #1
      blinkingCounter = times;
    1648:	movs	r1, #0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    164a:	strb	r0, [r7, #16]
      blinkingCounter = times;
    164c:	str	r1, [r7, #20]
    164e:	cmp	r2, #0
    1650:	bne.w	1b8c <loop+0x16f8>
          playStep(m_currentStep);
        }

        m_currentStep++;
    1654:	adds	r3, #1

        if (m_currentStep > 3) {
    1656:	cmp	r3, #3
          m_currentStep = 0;
    1658:	it	gt
    165a:	movgt	r3, #0
    165c:	str	r3, [r5, #8]
    165e:	b.w	d90 <loop+0x8fc>
    1662:	nop
    1664:	.word	0x00004e40
    1668:	.word	0x1fff0c60
    166c:	.word	0x7f7bbf0b
    1670:	.word	0x00004e18
    1674:	.word	0x1fff1844
    1678:	.word	0x1fff165c
    167c:	movs	r1, #6
    167e:	ldr	r0, [pc, #776]	; (1988 <loop+0x14f4>)
    1680:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1682:	strb.w	r5, [lr]
    1686:	bl	1eb0 <usb_serial_write>
    168a:	ldr	r0, [pc, #768]	; (198c <loop+0x14f8>)
    168c:	bl	3a24 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    1690:	ldr.w	r5, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1694:	ldrb.w	r9, [r5]
    1698:	mov	r0, r9
    169a:	bl	24cc <digitalRead>
    169e:	clz	r1, r0
    16a2:	lsrs	r1, r1, #5
    16a4:	mov	r0, r9
    16a6:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16aa:	ldr.w	r2, [r8]
    16ae:	str	r2, [sp, #80]	; 0x50
      blinking = true;
    16b0:	ldr	r3, [sp, #0]
	return ret;
    16b2:	ldr	r1, [sp, #80]	; 0x50
    16b4:	ldr	r2, [r7, #12]
    16b6:	strb	r3, [r5, #16]
      blinkingCounter = times;
    16b8:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    16bc:	str	r1, [r5, #8]
    16be:	b.w	4e8 <loop+0x54>
    16c2:	movs	r1, #6
    16c4:	ldr	r0, [pc, #704]	; (1988 <loop+0x14f4>)
    16c6:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    16c8:	strb.w	r5, [lr]
    16cc:	bl	1eb0 <usb_serial_write>
    16d0:	ldr	r0, [pc, #696]	; (198c <loop+0x14f8>)
    16d2:	bl	3a24 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    16d6:	ldr.w	r5, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16da:	ldrb.w	r9, [r5]
    16de:	mov	r0, r9
    16e0:	bl	24cc <digitalRead>
    16e4:	clz	r1, r0
    16e8:	lsrs	r1, r1, #5
    16ea:	mov	r0, r9
    16ec:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16f0:	ldr.w	r2, [r8]
    16f4:	str	r2, [sp, #160]	; 0xa0
      blinking = true;
    16f6:	ldr	r3, [sp, #0]
	return ret;
    16f8:	ldr	r1, [sp, #160]	; 0xa0
    16fa:	ldr	r2, [r7, #12]
    16fc:	strb	r3, [r5, #16]
      blinkingCounter = times;
    16fe:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    1702:	str	r1, [r5, #8]
    1704:	b.w	5f0 <loop+0x15c>
    1708:	movs	r1, #6
    170a:	ldr	r0, [pc, #636]	; (1988 <loop+0x14f4>)
    170c:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    170e:	strb.w	r6, [lr]
    1712:	bl	1eb0 <usb_serial_write>
    1716:	ldr	r0, [pc, #628]	; (198c <loop+0x14f8>)
    1718:	bl	3a24 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    171c:	ldr.w	r6, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1720:	ldrb.w	r9, [r6]
    1724:	mov	r0, r9
    1726:	bl	24cc <digitalRead>
    172a:	clz	r1, r0
    172e:	lsrs	r1, r1, #5
    1730:	mov	r0, r9
    1732:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1736:	ldr.w	r2, [r8]
    173a:	str	r2, [sp, #140]	; 0x8c
      blinking = true;
    173c:	ldr	r3, [sp, #0]
	return ret;
    173e:	ldr	r1, [sp, #140]	; 0x8c
    1740:	ldr	r2, [r7, #12]
    1742:	strb	r3, [r6, #16]
      blinkingCounter = times;
    1744:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1748:	str	r1, [r6, #8]
    174a:	b.w	5ae <loop+0x11a>
    174e:	movs	r1, #6
    1750:	ldr	r0, [pc, #564]	; (1988 <loop+0x14f4>)
    1752:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1754:	strb.w	r5, [lr]
    1758:	bl	1eb0 <usb_serial_write>
    175c:	ldr	r0, [pc, #556]	; (198c <loop+0x14f8>)
    175e:	bl	3a24 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    1762:	ldr.w	r5, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1766:	ldrb.w	r9, [r5]
    176a:	mov	r0, r9
    176c:	bl	24cc <digitalRead>
    1770:	clz	r1, r0
    1774:	lsrs	r1, r1, #5
    1776:	mov	r0, r9
    1778:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    177c:	ldr.w	r2, [r8]
    1780:	str	r2, [sp, #120]	; 0x78
      blinking = true;
    1782:	ldr	r3, [sp, #0]
	return ret;
    1784:	ldr	r1, [sp, #120]	; 0x78
    1786:	ldr	r2, [r7, #12]
    1788:	strb	r3, [r5, #16]
      blinkingCounter = times;
    178a:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    178e:	str	r1, [r5, #8]
    1790:	b.w	56c <loop+0xd8>
    1794:	movs	r1, #6
    1796:	ldr	r0, [pc, #496]	; (1988 <loop+0x14f4>)
    1798:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    179a:	strb.w	r6, [lr]
    179e:	bl	1eb0 <usb_serial_write>
    17a2:	ldr	r0, [pc, #488]	; (198c <loop+0x14f8>)
    17a4:	bl	3a24 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    17a8:	ldr.w	r6, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17ac:	ldrb.w	r9, [r6]
    17b0:	mov	r0, r9
    17b2:	bl	24cc <digitalRead>
    17b6:	clz	r1, r0
    17ba:	lsrs	r1, r1, #5
    17bc:	mov	r0, r9
    17be:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17c2:	ldr.w	r2, [r8]
    17c6:	str	r2, [sp, #100]	; 0x64
      blinking = true;
    17c8:	ldr	r3, [sp, #0]
	return ret;
    17ca:	ldr	r1, [sp, #100]	; 0x64
    17cc:	ldr	r2, [r7, #12]
    17ce:	strb	r3, [r6, #16]
      blinkingCounter = times;
    17d0:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    17d4:	str	r1, [r6, #8]
    17d6:	b.w	52a <loop+0x96>
    17da:	movs	r1, #6
    17dc:	ldr	r0, [pc, #424]	; (1988 <loop+0x14f4>)
    17de:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    17e0:	strb.w	r6, [lr]
    17e4:	bl	1eb0 <usb_serial_write>
    17e8:	ldr	r0, [pc, #416]	; (198c <loop+0x14f8>)
    17ea:	bl	3a24 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    17ee:	ldr.w	r6, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17f2:	ldrb.w	r9, [r6]
    17f6:	mov	r0, r9
    17f8:	bl	24cc <digitalRead>
    17fc:	clz	r1, r0
    1800:	lsrs	r1, r1, #5
    1802:	mov	r0, r9
    1804:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1808:	ldr.w	r2, [r8]
    180c:	str	r2, [sp, #180]	; 0xb4
      blinking = true;
    180e:	ldr	r3, [sp, #0]
	return ret;
    1810:	ldr	r1, [sp, #180]	; 0xb4
    1812:	ldr	r2, [r7, #12]
    1814:	strb	r3, [r6, #16]
      blinkingCounter = times;
    1816:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    181a:	str	r1, [r6, #8]
    181c:	b.w	632 <loop+0x19e>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1820:	movs	r3, #2
    1822:	movs	r1, #8
    1824:	ldr	r0, [pc, #360]	; (1990 <loop+0x14fc>)
    1826:	str	r2, [sp, #0]
    1828:	strb.w	r3, [lr]
    182c:	bl	1eb0 <usb_serial_write>
    1830:	ldr	r0, [pc, #344]	; (198c <loop+0x14f8>)
    1832:	bl	3a24 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    1836:	ldr.w	r5, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    183a:	ldrb.w	r9, [r5]
    183e:	mov	r0, r9
    1840:	bl	24cc <digitalRead>
    1844:	clz	r1, r0
    1848:	lsrs	r1, r1, #5
    184a:	mov	r0, r9
    184c:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1850:	ldr.w	r3, [r8]
    1854:	str	r3, [sp, #112]	; 0x70
      blinking = true;
      blinkingCounter = times;
    1856:	ldr	r2, [sp, #0]
	return ret;
    1858:	ldr	r3, [sp, #112]	; 0x70
    185a:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    185c:	strb.w	sl, [r5, #16]
    1860:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    1862:	str	r3, [r5, #8]
    1864:	b.w	56c <loop+0xd8>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1868:	movs	r3, #2
    186a:	movs	r1, #8
    186c:	ldr	r0, [pc, #288]	; (1990 <loop+0x14fc>)
    186e:	str	r2, [sp, #0]
    1870:	strb.w	r3, [lr]
    1874:	bl	1eb0 <usb_serial_write>
    1878:	ldr	r0, [pc, #272]	; (198c <loop+0x14f8>)
    187a:	bl	3a24 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    187e:	ldr.w	r6, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1882:	ldrb.w	r9, [r6]
    1886:	mov	r0, r9
    1888:	bl	24cc <digitalRead>
    188c:	clz	r1, r0
    1890:	lsrs	r1, r1, #5
    1892:	mov	r0, r9
    1894:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1898:	ldr.w	r3, [r8]
    189c:	str	r3, [sp, #172]	; 0xac
      blinking = true;
      blinkingCounter = times;
    189e:	ldr	r2, [sp, #0]
	return ret;
    18a0:	ldr	r3, [sp, #172]	; 0xac
    18a2:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18a4:	strb.w	sl, [r6, #16]
    18a8:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    18aa:	str	r3, [r6, #8]
    18ac:	b.w	632 <loop+0x19e>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    18b0:	movs	r3, #2
    18b2:	movs	r1, #8
    18b4:	ldr	r0, [pc, #216]	; (1990 <loop+0x14fc>)
    18b6:	str	r2, [sp, #0]
    18b8:	strb.w	r3, [lr]
    18bc:	bl	1eb0 <usb_serial_write>
    18c0:	ldr	r0, [pc, #200]	; (198c <loop+0x14f8>)
    18c2:	bl	3a24 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    18c6:	ldr.w	r6, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18ca:	ldrb.w	r9, [r6]
    18ce:	mov	r0, r9
    18d0:	bl	24cc <digitalRead>
    18d4:	clz	r1, r0
    18d8:	lsrs	r1, r1, #5
    18da:	mov	r0, r9
    18dc:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18e0:	ldr.w	r3, [r8]
    18e4:	str	r3, [sp, #92]	; 0x5c
      blinking = true;
      blinkingCounter = times;
    18e6:	ldr	r2, [sp, #0]
	return ret;
    18e8:	ldr	r3, [sp, #92]	; 0x5c
    18ea:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18ec:	strb.w	sl, [r6, #16]
    18f0:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    18f2:	str	r3, [r6, #8]
    18f4:	b.w	52a <loop+0x96>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    18f8:	movs	r3, #2
    18fa:	movs	r1, #8
    18fc:	ldr	r0, [pc, #144]	; (1990 <loop+0x14fc>)
    18fe:	str	r2, [sp, #0]
    1900:	strb.w	r3, [lr]
    1904:	bl	1eb0 <usb_serial_write>
    1908:	ldr	r0, [pc, #128]	; (198c <loop+0x14f8>)
    190a:	bl	3a24 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    190e:	ldr.w	r6, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1912:	ldrb.w	r9, [r6]
    1916:	mov	r0, r9
    1918:	bl	24cc <digitalRead>
    191c:	clz	r1, r0
    1920:	lsrs	r1, r1, #5
    1922:	mov	r0, r9
    1924:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1928:	ldr.w	r3, [r8]
    192c:	str	r3, [sp, #132]	; 0x84
      blinking = true;
      blinkingCounter = times;
    192e:	ldr	r2, [sp, #0]
	return ret;
    1930:	ldr	r3, [sp, #132]	; 0x84
    1932:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1934:	strb.w	sl, [r6, #16]
    1938:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    193a:	str	r3, [r6, #8]
    193c:	b.w	5ae <loop+0x11a>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1940:	movs	r3, #2
    1942:	movs	r1, #8
    1944:	ldr	r0, [pc, #72]	; (1990 <loop+0x14fc>)
    1946:	str	r2, [sp, #0]
    1948:	strb.w	r3, [lr]
    194c:	bl	1eb0 <usb_serial_write>
    1950:	ldr	r0, [pc, #56]	; (198c <loop+0x14f8>)
    1952:	bl	3a24 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    1956:	ldr.w	r5, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    195a:	ldrb.w	r9, [r5]
    195e:	mov	r0, r9
    1960:	bl	24cc <digitalRead>
    1964:	clz	r1, r0
    1968:	lsrs	r1, r1, #5
    196a:	mov	r0, r9
    196c:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1970:	ldr.w	r3, [r8]
    1974:	str	r3, [sp, #72]	; 0x48
      blinking = true;
      blinkingCounter = times;
    1976:	ldr	r2, [sp, #0]
	return ret;
    1978:	ldr	r3, [sp, #72]	; 0x48
    197a:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    197c:	strb.w	sl, [r5, #16]
    1980:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    1982:	str	r3, [r5, #8]
    1984:	b.w	4e8 <loop+0x54>
    1988:	.word	0x00004e38
    198c:	.word	0x1fff0c60
    1990:	.word	0x00004e20
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1994:	movs	r3, #2
    1996:	movs	r1, #8
    1998:	ldr	r0, [pc, #552]	; (1bc4 <loop+0x1730>)
    199a:	str	r2, [sp, #0]
    199c:	strb.w	r3, [lr]
    19a0:	bl	1eb0 <usb_serial_write>
    19a4:	ldr	r0, [pc, #544]	; (1bc8 <loop+0x1734>)
    19a6:	bl	3a24 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    19aa:	ldr.w	r5, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    19ae:	ldrb.w	r9, [r5]
    19b2:	mov	r0, r9
    19b4:	bl	24cc <digitalRead>
    19b8:	clz	r1, r0
    19bc:	lsrs	r1, r1, #5
    19be:	mov	r0, r9
    19c0:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19c4:	ldr.w	r3, [r8]
    19c8:	str	r3, [sp, #152]	; 0x98
      blinking = true;
      blinkingCounter = times;
    19ca:	ldr	r2, [sp, #0]
	return ret;
    19cc:	ldr	r3, [sp, #152]	; 0x98
    19ce:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    19d0:	strb.w	sl, [r5, #16]
    19d4:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    19d6:	str	r3, [r5, #8]
    19d8:	b.w	5f0 <loop+0x15c>
    19dc:	movs	r1, #10
    19de:	ldr	r0, [pc, #492]	; (1bcc <loop+0x1738>)
    19e0:	str	r3, [sp, #4]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    19e2:	strb.w	r2, [lr]
    19e6:	str	r2, [sp, #0]
    19e8:	bl	1eb0 <usb_serial_write>
    19ec:	ldr	r0, [pc, #472]	; (1bc8 <loop+0x1734>)
    19ee:	bl	3a24 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    19f2:	ldr.w	r6, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    19f6:	ldrb.w	r9, [r6]
    19fa:	mov	r0, r9
    19fc:	bl	24cc <digitalRead>
    1a00:	clz	r1, r0
    1a04:	lsrs	r1, r1, #5
    1a06:	mov	r0, r9
    1a08:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a0c:	ldr.w	r1, [r8]
    1a10:	str	r1, [sp, #176]	; 0xb0
      blinking = true;
      blinkingCounter = times;
    1a12:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a14:	ldr	r3, [sp, #4]
	return ret;
    1a16:	ldr	r1, [sp, #176]	; 0xb0
      blinkingCounter = times;
    1a18:	str	r2, [r6, #20]
    1a1a:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a1c:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1a1e:	str	r1, [r6, #8]
    1a20:	b.w	632 <loop+0x19e>
    1a24:	movs	r1, #10
    1a26:	ldr	r0, [pc, #420]	; (1bcc <loop+0x1738>)
    1a28:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1a2a:	strb.w	r2, [lr]
    1a2e:	str	r2, [sp, #0]
    1a30:	bl	1eb0 <usb_serial_write>
    1a34:	ldr	r0, [pc, #400]	; (1bc8 <loop+0x1734>)
    1a36:	bl	3a24 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1a3a:	ldr.w	r5, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1a3e:	ldrb.w	r9, [r5]
    1a42:	mov	r0, r9
    1a44:	bl	24cc <digitalRead>
    1a48:	clz	r1, r0
    1a4c:	lsrs	r1, r1, #5
    1a4e:	mov	r0, r9
    1a50:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a54:	ldr.w	r1, [r8]
    1a58:	str	r1, [sp, #76]	; 0x4c
      blinking = true;
      blinkingCounter = times;
    1a5a:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a5c:	ldr	r3, [sp, #4]
	return ret;
    1a5e:	ldr	r1, [sp, #76]	; 0x4c
      blinkingCounter = times;
    1a60:	str	r2, [r5, #20]
    1a62:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a64:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1a66:	str	r1, [r5, #8]
    1a68:	b.w	4e8 <loop+0x54>
    1a6c:	movs	r1, #10
    1a6e:	ldr	r0, [pc, #348]	; (1bcc <loop+0x1738>)
    1a70:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1a72:	strb.w	r2, [lr]
    1a76:	str	r2, [sp, #0]
    1a78:	bl	1eb0 <usb_serial_write>
    1a7c:	ldr	r0, [pc, #328]	; (1bc8 <loop+0x1734>)
    1a7e:	bl	3a24 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1a82:	ldr.w	r5, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1a86:	ldrb.w	r9, [r5]
    1a8a:	mov	r0, r9
    1a8c:	bl	24cc <digitalRead>
    1a90:	clz	r1, r0
    1a94:	lsrs	r1, r1, #5
    1a96:	mov	r0, r9
    1a98:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a9c:	ldr.w	r1, [r8]
    1aa0:	str	r1, [sp, #116]	; 0x74
      blinking = true;
      blinkingCounter = times;
    1aa2:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1aa4:	ldr	r3, [sp, #4]
	return ret;
    1aa6:	ldr	r1, [sp, #116]	; 0x74
      blinkingCounter = times;
    1aa8:	str	r2, [r5, #20]
    1aaa:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1aac:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1aae:	str	r1, [r5, #8]
    1ab0:	b.w	56c <loop+0xd8>
    1ab4:	movs	r1, #10
    1ab6:	ldr	r0, [pc, #276]	; (1bcc <loop+0x1738>)
    1ab8:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1aba:	strb.w	r2, [lr]
    1abe:	str	r2, [sp, #0]
    1ac0:	bl	1eb0 <usb_serial_write>
    1ac4:	ldr	r0, [pc, #256]	; (1bc8 <loop+0x1734>)
    1ac6:	bl	3a24 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1aca:	ldr.w	r6, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1ace:	ldrb.w	r9, [r6]
    1ad2:	mov	r0, r9
    1ad4:	bl	24cc <digitalRead>
    1ad8:	clz	r1, r0
    1adc:	lsrs	r1, r1, #5
    1ade:	mov	r0, r9
    1ae0:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ae4:	ldr.w	r1, [r8]
    1ae8:	str	r1, [sp, #96]	; 0x60
      blinking = true;
      blinkingCounter = times;
    1aea:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1aec:	ldr	r3, [sp, #4]
	return ret;
    1aee:	ldr	r1, [sp, #96]	; 0x60
      blinkingCounter = times;
    1af0:	str	r2, [r6, #20]
    1af2:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1af4:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1af6:	str	r1, [r6, #8]
    1af8:	b.w	52a <loop+0x96>
    1afc:	movs	r1, #10
    1afe:	ldr	r0, [pc, #204]	; (1bcc <loop+0x1738>)
    1b00:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1b02:	strb.w	r2, [lr]
    1b06:	str	r2, [sp, #0]
    1b08:	bl	1eb0 <usb_serial_write>
    1b0c:	ldr	r0, [pc, #184]	; (1bc8 <loop+0x1734>)
    1b0e:	bl	3a24 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1b12:	ldr.w	r5, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1b16:	ldrb.w	r9, [r5]
    1b1a:	mov	r0, r9
    1b1c:	bl	24cc <digitalRead>
    1b20:	clz	r1, r0
    1b24:	lsrs	r1, r1, #5
    1b26:	mov	r0, r9
    1b28:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b2c:	ldr.w	r1, [r8]
    1b30:	str	r1, [sp, #156]	; 0x9c
      blinking = true;
      blinkingCounter = times;
    1b32:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b34:	ldr	r3, [sp, #4]
	return ret;
    1b36:	ldr	r1, [sp, #156]	; 0x9c
      blinkingCounter = times;
    1b38:	str	r2, [r5, #20]
    1b3a:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b3c:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1b3e:	str	r1, [r5, #8]
    1b40:	b.w	5f0 <loop+0x15c>
    1b44:	movs	r1, #10
    1b46:	ldr	r0, [pc, #132]	; (1bcc <loop+0x1738>)
    1b48:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1b4a:	strb.w	r2, [lr]
    1b4e:	str	r2, [sp, #0]
    1b50:	bl	1eb0 <usb_serial_write>
    1b54:	ldr	r0, [pc, #112]	; (1bc8 <loop+0x1734>)
    1b56:	bl	3a24 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1b5a:	ldr.w	r6, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1b5e:	ldrb.w	r9, [r6]
    1b62:	mov	r0, r9
    1b64:	bl	24cc <digitalRead>
    1b68:	clz	r1, r0
    1b6c:	lsrs	r1, r1, #5
    1b6e:	mov	r0, r9
    1b70:	bl	24c0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b74:	ldr.w	r1, [r8]
    1b78:	str	r1, [sp, #136]	; 0x88
      blinking = true;
      blinkingCounter = times;
    1b7a:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b7c:	ldr	r3, [sp, #4]
	return ret;
    1b7e:	ldr	r1, [sp, #136]	; 0x88
      blinkingCounter = times;
    1b80:	str	r2, [r6, #20]
    1b82:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b84:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1b86:	str	r1, [r6, #8]
    1b88:	b.w	5ae <loop+0x11a>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1b8c:	add.w	r7, r3, #10
    1b90:	adds	r3, #14
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1b92:	ldr.w	r2, [r6, r7, lsl #2]
    1b96:	ldr.w	r3, [r6, r3, lsl #2]
    1b9a:	lsls	r0, r2, #16
    1b9c:	lsls	r3, r3, #24
    1b9e:	and.w	r3, r3, #2130706432	; 0x7f000000
    1ba2:	and.w	r0, r0, #8323072	; 0x7f0000
    1ba6:	orrs	r0, r3
    1ba8:	orr.w	r0, r0, #40704	; 0x9f00
    1bac:	orr.w	r0, r0, #9
    1bb0:	bl	274c <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1bb4:	bl	27e8 <usb_midi_flush_output>
      activeNote = notes[step];
    1bb8:	ldr.w	r2, [r6, r7, lsl #2]
    1bbc:	ldr	r3, [r6, #8]
    1bbe:	str	r2, [r6, #36]	; 0x24
    1bc0:	b.n	1654 <loop+0x11c0>
    1bc2:	nop
    1bc4:	.word	0x00004e20
    1bc8:	.word	0x1fff0c60
    1bcc:	.word	0x00004e2c

00001bd0 <_GLOBAL__sub_I_currentMode>:
    1bd0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;
const int playPin = 12;

Led led1(3, LOW);
    1bd4:	movs	r2, #0
    1bd6:	movs	r1, #3
    1bd8:	ldr	r0, [pc, #436]	; (1d90 <_GLOBAL__sub_I_currentMode+0x1c0>)
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1bda:	ldr	r5, [pc, #440]	; (1d94 <_GLOBAL__sub_I_currentMode+0x1c4>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1bdc:	ldr	r4, [pc, #440]	; (1d98 <_GLOBAL__sub_I_currentMode+0x1c8>)
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1bde:	ldr	r6, [pc, #444]	; (1d9c <_GLOBAL__sub_I_currentMode+0x1cc>)
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1be0:	ldr.w	r9, [pc, #508]	; 1de0 <_GLOBAL__sub_I_currentMode+0x210>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1be4:	ldr	r7, [pc, #440]	; (1da0 <_GLOBAL__sub_I_currentMode+0x1d0>)
    1be6:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    1bea:	movs	r2, #0
    1bec:	movs	r1, #5
    1bee:	ldr	r0, [pc, #436]	; (1da4 <_GLOBAL__sub_I_currentMode+0x1d4>)
    1bf0:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    1bf4:	movs	r2, #0
    1bf6:	movs	r1, #7
    1bf8:	ldr	r0, [pc, #428]	; (1da8 <_GLOBAL__sub_I_currentMode+0x1d8>)
    1bfa:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    1bfe:	movs	r2, #0
    1c00:	movs	r1, #9
    1c02:	ldr	r0, [pc, #424]	; (1dac <_GLOBAL__sub_I_currentMode+0x1dc>)
    1c04:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    1c08:	movs	r2, #0
    1c0a:	movs	r1, #11
    1c0c:	ldr	r0, [pc, #416]	; (1db0 <_GLOBAL__sub_I_currentMode+0x1e0>)
    1c0e:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    1c12:	movs	r2, #0
    1c14:	movs	r1, #24
    1c16:	ldr	r0, [pc, #412]	; (1db4 <_GLOBAL__sub_I_currentMode+0x1e4>)
    1c18:	bl	46c <Led::Led(int, int)>
    1c1c:	ldmia.w	r5, {r0, r1, r2, r3}
    1c20:	add.w	lr, r5, #16
    1c24:	add.w	ip, r4, #40	; 0x28
    1c28:	stmia.w	ip, {r0, r1, r2, r3}
    1c2c:	ldmia.w	lr, {r0, r1, r2, r3}
    1c30:	adds	r5, #32
    1c32:	add.w	lr, r4, #56	; 0x38
    1c36:	stmia.w	lr, {r0, r1, r2, r3}
    1c3a:	ldmia.w	r5, {r0, r1, r2, r3}
    1c3e:	movs	r5, #120	; 0x78
    1c40:	add.w	lr, r4, #72	; 0x48
    1c44:	mov.w	ip, #24
    1c48:	mov.w	r8, #0
    1c4c:	str	r5, [r4, #12]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1c4e:	movs	r5, #0
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1c50:	str.w	ip, [r4, #32]
    1c54:	strd	r8, r9, [r4, #16]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1c58:	strb	r5, [r4, #0]
    1c5a:	strb	r5, [r4, #1]
    1c5c:	strb	r5, [r4, #2]
    1c5e:	strb	r5, [r4, #3]
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1c60:	str	r5, [r4, #24]
    1c62:	str	r5, [r4, #28]
    1c64:	str	r5, [r4, #36]	; 0x24
    1c66:	stmia.w	lr, {r0, r1, r2, r3}
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    1c6a:	adds	r0, r6, #4
    1c6c:	ldmia	r0, {r0, r1, r2}
      m_id = id;
      m_pin = pin;
    1c6e:	mov.w	r8, #2
    1c72:	str	r2, [r4, #100]	; 0x64
      m_leds[4] = leds[4];
    1c74:	ldr	r2, [r6, #16]
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1c76:	ldr	r3, [r6, #0]
      m_leds[1] = leds[1];
    1c78:	str	r0, [r4, #92]	; 0x5c
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1c7a:	mov.w	r9, #1
      m_leds[2] = leds[2];
    1c7e:	str	r1, [r4, #96]	; 0x60
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1c80:	mov	r0, r8
    1c82:	mov	r1, r5
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1c84:	str	r2, [r4, #104]	; 0x68
      m_leds[5] = leds[5];
    1c86:	ldr	r2, [r6, #20]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1c88:	str	r3, [r7, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1c8a:	strb	r5, [r7, #16]
      m_playButton = playButton;
    1c8c:	strb	r5, [r7, #17]
      m_state = state;
    1c8e:	strb	r5, [r4, #4]
      m_currentStep = 0;
    1c90:	str	r5, [r4, #8]
      m_mode = GLOBAL;
    1c92:	strb.w	r5, [r4, #112]	; 0x70
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1c96:	str	r2, [r4, #108]	; 0x6c
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1c98:	str	r3, [r4, #88]	; 0x58
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1c9a:	str	r4, [r7, #28]
      m_id = id;
    1c9c:	str.w	r9, [r7]
      m_pin = pin;
    1ca0:	str.w	r8, [r7, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ca4:	bl	24e8 <pinMode>
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1ca8:	movs	r7, #4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1caa:	ldr	r3, [pc, #268]	; (1db8 <_GLOBAL__sub_I_currentMode+0x1e8>)
    1cac:	ldr	r2, [r6, #4]
    1cae:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cb0:	mov	r1, r5
    1cb2:	mov	r0, r7
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1cb4:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1cb6:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1cb8:	mov.w	fp, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cbc:	str	r4, [r3, #28]
      m_id = id;
    1cbe:	str.w	r8, [r3]
      m_pin = pin;
    1cc2:	str	r7, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cc4:	bl	24e8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cc8:	ldr	r3, [pc, #240]	; (1dbc <_GLOBAL__sub_I_currentMode+0x1ec>)
    1cca:	ldr	r2, [r6, #8]
    1ccc:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cce:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1cd0:	mov.w	sl, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cd4:	mov	r0, fp
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1cd6:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1cd8:	strb	r5, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cda:	str	r4, [r3, #28]
      m_id = id;
    1cdc:	str.w	sl, [r3]
      m_pin = pin;
    1ce0:	str.w	fp, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ce4:	bl	24e8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ce8:	ldr	r3, [pc, #212]	; (1dc0 <_GLOBAL__sub_I_currentMode+0x1f0>)
    1cea:	ldr	r2, [r6, #12]
    1cec:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1cee:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cf0:	mov	r0, r2
    1cf2:	mov	r1, r5
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1cf4:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1cf6:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1cf8:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cfa:	str	r4, [r3, #28]
      m_id = id;
    1cfc:	str	r7, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cfe:	bl	24e8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d02:	ldr	r3, [pc, #192]	; (1dc4 <_GLOBAL__sub_I_currentMode+0x1f4>)
    1d04:	ldr	r2, [r6, #16]
    1d06:	str	r2, [r3, #24]
      m_id = id;
    1d08:	movs	r1, #5
      m_pin = pin;
    1d0a:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1d0c:	str	r1, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d0e:	mov	r0, r2
    1d10:	mov	r1, r5
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1d12:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1d14:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d16:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1d18:	strb.w	r9, [r3, #16]
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d1c:	bl	24e8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d20:	ldr	r3, [pc, #164]	; (1dc8 <_GLOBAL__sub_I_currentMode+0x1f8>)
    1d22:	ldr	r2, [r6, #20]
    1d24:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1d26:	movs	r6, #12
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d28:	mov	r0, r6
    1d2a:	mov	r1, r5
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1d2c:	str	r6, [r3, #32]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1d2e:	ldr	r6, [pc, #156]	; (1dcc <_GLOBAL__sub_I_currentMode+0x1fc>)
      m_shiftButton = shiftButton;
    1d30:	strb	r5, [r3, #16]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1d32:	str.w	fp, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d36:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1d38:	strb.w	r9, [r3, #17]

      pinMode(pin, INPUT);
    1d3c:	bl	24e8 <pinMode>
    1d40:	ldr	r0, [pc, #140]	; (1dd0 <_GLOBAL__sub_I_currentMode+0x200>)
    1d42:	ldr	r1, [pc, #144]	; (1dd4 <_GLOBAL__sub_I_currentMode+0x204>)
    1d44:	ldr	r2, [pc, #144]	; (1dd8 <_GLOBAL__sub_I_currentMode+0x208>)
    1d46:	ldr	r3, [pc, #148]	; (1ddc <_GLOBAL__sub_I_currentMode+0x20c>)
      m_pin = pin;
      m_knobType = knobType;
    1d48:	strb	r5, [r6, #20]
      m_id = id;
    1d4a:	str	r5, [r6, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1d4c:	mov.w	lr, #15
    1d50:	movs	r5, #14
    1d52:	strb	r5, [r6, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1d54:	str	r4, [r6, #16]
    1d56:	str	r4, [r0, #16]
      m_pin = pin;
    1d58:	movs	r6, #16
      m_knobType = knobType;
    1d5a:	strb.w	r9, [r0, #20]
      m_id = id;
    1d5e:	str.w	r9, [r0, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1d62:	movs	r5, #17
    1d64:	strb.w	lr, [r0]
    1d68:	movs	r0, #18
    1d6a:	strb	r6, [r1, #0]
    1d6c:	strb	r5, [r2, #0]
    1d6e:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1d70:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1d72:	strb.w	r8, [r1, #20]
      m_id = id;
    1d76:	str.w	r8, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1d7a:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    1d7c:	strb.w	sl, [r2, #20]
      m_id = id;
    1d80:	str.w	sl, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1d84:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1d86:	strb	r7, [r3, #20]
      m_id = id;
    1d88:	str	r7, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1d8a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d8e:	nop
    1d90:	.word	0x1fff162c
    1d94:	.word	0x00004dc4
    1d98:	.word	0x1fff1730
    1d9c:	.word	0x1fff0c40
    1da0:	.word	0x1fff16c0
    1da4:	.word	0x1fff15cc
    1da8:	.word	0x1fff15e4
    1dac:	.word	0x1fff15fc
    1db0:	.word	0x1fff1614
    1db4:	.word	0x1fff1690
    1db8:	.word	0x1fff16e4
    1dbc:	.word	0x1fff1708
    1dc0:	.word	0x1fff1808
    1dc4:	.word	0x1fff17a8
    1dc8:	.word	0x1fff17cc
    1dcc:	.word	0x1fff16a8
    1dd0:	.word	0x1fff1644
    1dd4:	.word	0x1fff1660
    1dd8:	.word	0x1fff1678
    1ddc:	.word	0x1fff17f0
    1de0:	.word	0x407f4000

00001de4 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1de4:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1de6:	ldr	r5, [pc, #60]	; (1e24 <usb_serial_getchar+0x40>)
    1de8:	ldr	r0, [r5, #0]
    1dea:	cbz	r0, 1e0c <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1dec:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1dee:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1df0:	adds	r1, r0, r3
    1df2:	adds	r3, #1
	if (i >= rx_packet->len) {
    1df4:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1df6:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1df8:	bcs.n	1e00 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1dfa:	strh	r3, [r0, #2]
	}
	return c;
    1dfc:	mov	r0, r4
}
    1dfe:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1e00:	bl	2c90 <usb_free>
		rx_packet = NULL;
    1e04:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1e06:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1e08:	str	r3, [r5, #0]
    1e0a:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e0c:	ldr	r3, [pc, #24]	; (1e28 <usb_serial_getchar+0x44>)
    1e0e:	ldrb	r3, [r3, #0]
    1e10:	cbz	r3, 1e1e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1e12:	movs	r0, #2
    1e14:	bl	2cdc <usb_rx>
    1e18:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1e1a:	cmp	r0, #0
    1e1c:	bne.n	1dec <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e1e:	mov.w	r0, #4294967295
    1e22:	pop	{r3, r4, r5, pc}
    1e24:	.word	0x1fff1838
    1e28:	.word	0x1fff1998

00001e2c <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1e2c:	push	{r4, lr}
	if (!rx_packet) {
    1e2e:	ldr	r4, [pc, #36]	; (1e54 <usb_serial_peekchar+0x28>)
    1e30:	ldr	r0, [r4, #0]
    1e32:	cbz	r0, 1e3c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1e34:	ldrh	r3, [r0, #2]
    1e36:	add	r0, r3
    1e38:	ldrb	r0, [r0, #8]
}
    1e3a:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e3c:	ldr	r3, [pc, #24]	; (1e58 <usb_serial_peekchar+0x2c>)
    1e3e:	ldrb	r3, [r3, #0]
    1e40:	cbz	r3, 1e4e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1e42:	movs	r0, #2
    1e44:	bl	2cdc <usb_rx>
    1e48:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1e4a:	cmp	r0, #0
    1e4c:	bne.n	1e34 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e4e:	mov.w	r0, #4294967295
    1e52:	pop	{r4, pc}
    1e54:	.word	0x1fff1838
    1e58:	.word	0x1fff1998

00001e5c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1e5c:	ldr	r3, [pc, #16]	; (1e70 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1e5e:	ldr	r2, [pc, #20]	; (1e74 <usb_serial_available+0x18>)
    1e60:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1e62:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1e64:	cbz	r3, 1e6e <usb_serial_available+0x12>
    1e66:	ldrh	r2, [r3, #0]
    1e68:	ldrh	r3, [r3, #2]
    1e6a:	subs	r3, r2, r3
    1e6c:	add	r0, r3
	return count;
}
    1e6e:	bx	lr
    1e70:	.word	0x1fff1838
    1e74:	.word	0x1fff1e2c

00001e78 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1e78:	ldr	r3, [pc, #44]	; (1ea8 <usb_serial_flush_input+0x30>)
    1e7a:	ldrb	r3, [r3, #0]
    1e7c:	cbz	r3, 1ea6 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1e7e:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1e80:	ldr	r4, [pc, #40]	; (1eac <usb_serial_flush_input+0x34>)
    1e82:	ldr	r0, [r4, #0]
    1e84:	cbz	r0, 1e9a <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1e86:	bl	2c90 <usb_free>
		rx_packet = NULL;
    1e8a:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1e8c:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1e8e:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1e90:	bl	2cdc <usb_rx>
		if (!rx) break;
    1e94:	cbz	r0, 1ea4 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1e96:	bl	2c90 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1e9a:	movs	r0, #2
    1e9c:	bl	2cdc <usb_rx>
		if (!rx) break;
    1ea0:	cmp	r0, #0
    1ea2:	bne.n	1e96 <usb_serial_flush_input+0x1e>
    1ea4:	pop	{r4, pc}
    1ea6:	bx	lr
    1ea8:	.word	0x1fff1998
    1eac:	.word	0x1fff1838

00001eb0 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1eb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1eb4:	ldr.w	r9, [pc, #248]	; 1fb0 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1eb8:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1eba:	movs	r2, #1
    1ebc:	strb.w	r2, [r9]
	while (size > 0) {
    1ec0:	str	r1, [sp, #4]
    1ec2:	cbz	r1, 1f20 <usb_serial_write+0x70>
    1ec4:	ldr.w	r8, [pc, #236]	; 1fb4 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1ec8:	ldr	r7, [pc, #212]	; (1fa0 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1eca:	ldr	r6, [sp, #4]
    1ecc:	mov	fp, r0
		if (!tx_packet) {
    1ece:	ldr.w	r0, [r8]
    1ed2:	cbz	r0, 1f42 <usb_serial_write+0x92>
    1ed4:	ldr	r5, [pc, #204]	; (1fa4 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1ed6:	ldrh	r4, [r0, #2]
    1ed8:	rsb	r1, r4, #64	; 0x40
    1edc:	cmp	r1, r6
    1ede:	it	cs
    1ee0:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1ee2:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1ee6:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1ee8:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1eec:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1eee:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1ef0:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1ef4:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1ef8:	cbz	r1, 1f10 <usb_serial_write+0x60>
    1efa:	subs	r4, #1
    1efc:	add	r2, r4
    1efe:	add	r1, fp
    1f00:	ldrb.w	r4, [fp], #1
    1f04:	strb.w	r4, [r2, #1]!
    1f08:	cmp	fp, r1
    1f0a:	bne.n	1f00 <usb_serial_write+0x50>
    1f0c:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1f10:	cmp.w	lr, #63	; 0x3f
    1f14:	bhi.n	1f2e <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1f16:	ldr	r2, [pc, #144]	; (1fa8 <usb_serial_write+0xf8>)
    1f18:	movs	r1, #5
    1f1a:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1f1c:	cmp	r6, #0
    1f1e:	bne.n	1ece <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1f20:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1f22:	movs	r3, #0
    1f24:	strb.w	r3, [r9]
	return ret;
}
    1f28:	add	sp, #12
    1f2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1f2e:	movs	r2, #64	; 0x40
    1f30:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1f32:	mov	r1, r0
    1f34:	movs	r0, #3
    1f36:	bl	2e2c <usb_tx>
			tx_packet = NULL;
    1f3a:	movs	r2, #0
    1f3c:	str.w	r2, [r8]
    1f40:	b.n	1f16 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1f42:	ldrb	r2, [r7, #0]
    1f44:	cbz	r2, 1f90 <usb_serial_write+0xe0>
    1f46:	ldr	r4, [pc, #100]	; (1fac <usb_serial_write+0xfc>)
    1f48:	ldr	r5, [pc, #88]	; (1fa4 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1f4a:	mov.w	sl, #1
    1f4e:	b.n	1f60 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f50:	subs	r4, #1
    1f52:	beq.n	1f82 <usb_serial_write+0xd2>
    1f54:	ldrb	r2, [r5, #0]
    1f56:	cbnz	r2, 1f82 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1f58:	bl	3930 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1f5c:	ldrb	r2, [r7, #0]
    1f5e:	cbz	r2, 1f90 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1f60:	movs	r0, #3
    1f62:	bl	2d18 <usb_tx_packet_count>
    1f66:	cmp	r0, #7
    1f68:	bhi.n	1f50 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1f6a:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1f6e:	bl	2c50 <usb_malloc>
    1f72:	str.w	r0, [r8]
					if (tx_packet) break;
    1f76:	cmp	r0, #0
    1f78:	bne.n	1ed6 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1f7a:	ldr	r3, [pc, #52]	; (1fb0 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f7c:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1f7e:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f80:	bne.n	1f54 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1f82:	movs	r3, #1
					return -1;
    1f84:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1f88:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1f8a:	add	sp, #12
    1f8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1f90:	movs	r3, #0
					return -1;
    1f92:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1f96:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1f9a:	add	sp, #12
    1f9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fa0:	.word	0x1fff1998
    1fa4:	.word	0x1fff1834
    1fa8:	.word	0x1fff182c
    1fac:	.word	0x00014821
    1fb0:	.word	0x1fff182d
    1fb4:	.word	0x1fff1830

00001fb8 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1fb8:	push	{lr}
    1fba:	sub	sp, #12
    1fbc:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1fbe:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1fc0:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1fc4:	mov	r0, r3
    1fc6:	bl	1eb0 <usb_serial_write>
}
    1fca:	add	sp, #12
    1fcc:	ldr.w	pc, [sp], #4

00001fd0 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1fd0:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1fd2:	ldr	r5, [pc, #56]	; (200c <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1fd4:	ldr	r4, [pc, #56]	; (2010 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1fd6:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1fd8:	movs	r3, #1
    1fda:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1fdc:	cbz	r0, 1fea <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1fde:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1fe0:	movs	r3, #0
    1fe2:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1fe4:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1fe8:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1fea:	ldr	r3, [pc, #40]	; (2014 <usb_serial_write_buffer_free+0x44>)
    1fec:	ldrb	r3, [r3, #0]
    1fee:	cbnz	r3, 1ff6 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1ff0:	movs	r0, #0
    1ff2:	strb	r0, [r4, #0]
			return 0;
    1ff4:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1ff6:	movs	r0, #3
    1ff8:	bl	2d18 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1ffc:	cmp	r0, #7
    1ffe:	bhi.n	1ff0 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    2000:	bl	2c50 <usb_malloc>
    2004:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2006:	cmp	r0, #0
    2008:	bne.n	1fde <usb_serial_write_buffer_free+0xe>
    200a:	b.n	1ff0 <usb_serial_write_buffer_free+0x20>
    200c:	.word	0x1fff1830
    2010:	.word	0x1fff182d
    2014:	.word	0x1fff1998

00002018 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    2018:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    201a:	ldr	r3, [pc, #68]	; (2060 <usb_serial_flush_output+0x48>)
    201c:	ldrb	r3, [r3, #0]
    201e:	cbz	r3, 2044 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    2020:	ldr	r6, [pc, #64]	; (2064 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2022:	ldr	r5, [pc, #68]	; (2068 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    2024:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2026:	movs	r7, #1
    2028:	strb	r7, [r5, #0]
	if (tx_packet) {
    202a:	cbz	r4, 2046 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    202c:	ldr	r2, [pc, #60]	; (206c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    202e:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    2030:	movs	r7, #0
    2032:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2034:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    2036:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2038:	movs	r0, #3
    203a:	bl	2e2c <usb_tx>
		tx_packet = NULL;
    203e:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    2040:	movs	r3, #0
    2042:	strb	r3, [r5, #0]
    2044:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2046:	bl	2c50 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    204a:	ldr	r3, [pc, #32]	; (206c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    204c:	cbz	r0, 205a <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    204e:	mov	r1, r0
    2050:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    2052:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    2054:	bl	2e2c <usb_tx>
    2058:	b.n	2040 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    205a:	strb	r7, [r3, #0]
    205c:	b.n	2040 <usb_serial_flush_output+0x28>
    205e:	nop
    2060:	.word	0x1fff1998
    2064:	.word	0x1fff1830
    2068:	.word	0x1fff182d
    206c:	.word	0x1fff182c

00002070 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    2070:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    2072:	ldr	r3, [pc, #56]	; (20ac <usb_serial_flush_callback+0x3c>)
    2074:	ldrb	r3, [r3, #0]
    2076:	cbnz	r3, 2096 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2078:	ldr	r4, [pc, #52]	; (20b0 <usb_serial_flush_callback+0x40>)
    207a:	ldr	r1, [r4, #0]
    207c:	cbz	r1, 2098 <usb_serial_flush_callback+0x28>
    207e:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    2082:	ldrh	r3, [r1, #2]
    2084:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2086:	movs	r0, #3
    2088:	bl	2e2c <usb_tx>
		tx_packet = NULL;
    208c:	str	r5, [r4, #0]
    208e:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2090:	ldr	r3, [pc, #32]	; (20b4 <usb_serial_flush_callback+0x44>)
    2092:	movs	r2, #1
    2094:	strb	r2, [r3, #0]
    2096:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2098:	bl	2c50 <usb_malloc>
		if (tx) {
    209c:	cmp	r0, #0
    209e:	beq.n	2090 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    20a0:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    20a2:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    20a6:	movs	r0, #3
    20a8:	b.w	2e2c <usb_tx>
    20ac:	.word	0x1fff182d
    20b0:	.word	0x1fff1830
    20b4:	.word	0x1fff182c

000020b8 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    20b8:	ldr	r2, [pc, #220]	; (2198 <wait_for_cal+0xe0>)
    20ba:	ldr	r1, [pc, #224]	; (219c <wait_for_cal+0xe4>)
    20bc:	ldr	r3, [r2, #0]
    20be:	lsls	r3, r3, #24
    20c0:	bmi.n	20bc <wait_for_cal+0x4>
    20c2:	ldr	r3, [r1, #0]
    20c4:	ands.w	r3, r3, #128	; 0x80
    20c8:	bne.n	20bc <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    20ca:	cpsid	i
	if (calibrating) {
    20cc:	ldr	r1, [pc, #208]	; (21a0 <wait_for_cal+0xe8>)
    20ce:	ldrb	r2, [r1, #0]
    20d0:	cmp	r2, #0
    20d2:	beq.n	2194 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    20d4:	ldr	r2, [pc, #204]	; (21a4 <wait_for_cal+0xec>)
    20d6:	ldr	r0, [pc, #208]	; (21a8 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    20d8:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    20da:	ldr	r4, [pc, #208]	; (21ac <wait_for_cal+0xf4>)
    20dc:	ldr	r7, [r2, #0]
    20de:	ldr	r6, [r0, #0]
    20e0:	ldr	r5, [r4, #0]
    20e2:	ldr	r4, [r2, #12]
    20e4:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    20e6:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    20e8:	adds	r2, #20
    20ea:	ldr	r0, [r0, #0]
    20ec:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    20ee:	ldr	r7, [pc, #192]	; (21b0 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    20f0:	add	r5, r6
    20f2:	add	r4, r5
    20f4:	add	r0, r4
    20f6:	add	r2, r0
    20f8:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    20fc:	ldr	r6, [pc, #180]	; (21b4 <wait_for_cal+0xfc>)
    20fe:	ldr	r0, [pc, #184]	; (21b8 <wait_for_cal+0x100>)
    2100:	ldr	r5, [pc, #184]	; (21bc <wait_for_cal+0x104>)
    2102:	ldr	r4, [pc, #188]	; (21c0 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2104:	orr.w	r2, r2, #32768	; 0x8000
    2108:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    210a:	ldr	r7, [r6, #0]
    210c:	ldr	r6, [r0, #0]
    210e:	ldr	r5, [r5, #0]
    2110:	ldr	r2, [pc, #176]	; (21c4 <wait_for_cal+0x10c>)
    2112:	ldr	r4, [r4, #0]
    2114:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2116:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2118:	ldr	r0, [r0, #0]
    211a:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    211c:	ldr	r7, [pc, #168]	; (21c8 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    211e:	add	r5, r6
    2120:	add	r4, r5
    2122:	add	r0, r4
    2124:	add	r2, r0
    2126:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    212a:	ldr	r6, [pc, #160]	; (21cc <wait_for_cal+0x114>)
    212c:	ldr	r0, [pc, #160]	; (21d0 <wait_for_cal+0x118>)
    212e:	ldr	r5, [pc, #164]	; (21d4 <wait_for_cal+0x11c>)
    2130:	ldr	r4, [pc, #164]	; (21d8 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2132:	orr.w	r2, r2, #32768	; 0x8000
    2136:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2138:	ldr	r7, [r6, #0]
    213a:	ldr	r6, [r0, #0]
    213c:	ldr	r5, [r5, #0]
    213e:	ldr	r2, [pc, #156]	; (21dc <wait_for_cal+0x124>)
    2140:	ldr	r4, [r4, #0]
    2142:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2144:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2146:	ldr	r0, [r0, #0]
    2148:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    214a:	ldr	r7, [pc, #148]	; (21e0 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    214c:	add	r5, r6
    214e:	add	r4, r5
    2150:	add	r0, r4
    2152:	add	r2, r0
    2154:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2158:	ldr	r6, [pc, #136]	; (21e4 <wait_for_cal+0x12c>)
    215a:	ldr	r0, [pc, #140]	; (21e8 <wait_for_cal+0x130>)
    215c:	ldr	r5, [pc, #140]	; (21ec <wait_for_cal+0x134>)
    215e:	ldr	r4, [pc, #144]	; (21f0 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2160:	orr.w	r2, r2, #32768	; 0x8000
    2164:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2166:	ldr	r7, [r6, #0]
    2168:	ldr	r6, [r0, #0]
    216a:	ldr	r5, [r5, #0]
    216c:	ldr	r2, [pc, #132]	; (21f4 <wait_for_cal+0x13c>)
    216e:	ldr	r4, [r4, #0]
    2170:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2172:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2174:	ldr	r0, [r0, #0]
    2176:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    2178:	add	r5, r6
    217a:	add	r4, r5
    217c:	add	r0, r4
    217e:	add	r2, r0
    2180:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    2184:	ldr	r0, [pc, #112]	; (21f8 <wait_for_cal+0x140>)
    2186:	orr.w	r2, r2, #32768	; 0x8000
    218a:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    218c:	strb	r3, [r1, #0]
	}
	__enable_irq();
    218e:	cpsie	i
}
    2190:	pop	{r4, r5, r6, r7}
    2192:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    2194:	cpsie	i
    2196:	bx	lr
    2198:	.word	0x4003b024
    219c:	.word	0x400bb024
    21a0:	.word	0x1fff183e
    21a4:	.word	0x4003b038
    21a8:	.word	0x4003b03c
    21ac:	.word	0x4003b040
    21b0:	.word	0x4003b02c
    21b4:	.word	0x4003b058
    21b8:	.word	0x4003b05c
    21bc:	.word	0x4003b060
    21c0:	.word	0x4003b064
    21c4:	.word	0x4003b06c
    21c8:	.word	0x4003b030
    21cc:	.word	0x400bb038
    21d0:	.word	0x400bb03c
    21d4:	.word	0x400bb040
    21d8:	.word	0x400bb044
    21dc:	.word	0x400bb04c
    21e0:	.word	0x400bb02c
    21e4:	.word	0x400bb058
    21e8:	.word	0x400bb05c
    21ec:	.word	0x400bb060
    21f0:	.word	0x400bb064
    21f4:	.word	0x400bb06c
    21f8:	.word	0x400bb030

000021fc <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    21fc:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    21fe:	ldr	r0, [pc, #164]	; (22a4 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2200:	ldr	r2, [pc, #164]	; (22a8 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2202:	ldr	r3, [pc, #168]	; (22ac <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2204:	ldr	r5, [pc, #168]	; (22b0 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2206:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2208:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    220a:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    220c:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    220e:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2210:	ldr	r4, [pc, #160]	; (22b4 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2212:	cmp	r3, #8
    2214:	beq.n	2278 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2216:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2218:	ldr	r0, [pc, #156]	; (22b8 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    221a:	ldr	r1, [pc, #160]	; (22bc <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    221c:	beq.n	228e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    221e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2220:	ite	eq
    2222:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2224:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2226:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2228:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    222a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    222c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    222e:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2230:	ldr	r3, [pc, #140]	; (22c0 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2232:	ldr	r1, [pc, #144]	; (22c4 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2234:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2236:	ldr	r2, [pc, #144]	; (22c8 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2238:	cbz	r3, 226a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    223a:	movs	r3, #1
    223c:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    223e:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2240:	ldr	r3, [pc, #136]	; (22cc <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2242:	ldr	r1, [pc, #140]	; (22d0 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2244:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2246:	ldr	r2, [pc, #140]	; (22d4 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2248:	cmp	r3, #1
    224a:	bls.n	229a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    224c:	cmp	r3, #4
    224e:	bls.n	2270 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2250:	cmp	r3, #8
    2252:	bls.n	2292 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2254:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2256:	ite	ls
    2258:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    225a:	movhi	r3, #135	; 0x87
    225c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    225e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2260:	ldr	r3, [pc, #116]	; (22d8 <analog_init+0xdc>)
    2262:	movs	r2, #1
    2264:	strb	r2, [r3, #0]
}
    2266:	pop	{r4, r5}
    2268:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    226a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    226c:	str	r3, [r2, #0]
    226e:	b.n	2240 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2270:	movs	r3, #132	; 0x84
    2272:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2274:	str	r3, [r2, #0]
    2276:	b.n	2260 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2278:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    227c:	ldr	r1, [pc, #60]	; (22bc <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    227e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2280:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2282:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2284:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2286:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2288:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    228a:	str	r3, [r1, #0]
    228c:	b.n	2230 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    228e:	movs	r2, #57	; 0x39
    2290:	b.n	2282 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2292:	movs	r3, #133	; 0x85
    2294:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2296:	str	r3, [r2, #0]
    2298:	b.n	2260 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    229a:	movs	r3, #128	; 0x80
    229c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    229e:	str	r3, [r2, #0]
    22a0:	b.n	2260 <analog_init+0x64>
    22a2:	nop
    22a4:	.word	0x40074000
    22a8:	.word	0x40074001
    22ac:	.word	0x1fff0c58
    22b0:	.word	0x4003b008
    22b4:	.word	0x4003b00c
    22b8:	.word	0x400bb008
    22bc:	.word	0x400bb00c
    22c0:	.word	0x1fff1841
    22c4:	.word	0x4003b020
    22c8:	.word	0x400bb020
    22cc:	.word	0x1fff0c59
    22d0:	.word	0x4003b024
    22d4:	.word	0x400bb024
    22d8:	.word	0x1fff183e

000022dc <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    22dc:	cmp	r0, #71	; 0x47
    22de:	bhi.n	2340 <analogRead+0x64>
	channel = pin2sc1a[pin];
    22e0:	ldr	r3, [pc, #204]	; (23b0 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    22e2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    22e6:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    22e8:	cmp	r6, #255	; 0xff
    22ea:	beq.n	2344 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    22ec:	ldr	r3, [pc, #196]	; (23b4 <analogRead+0xd8>)
    22ee:	ldrb	r3, [r3, #0]
    22f0:	cmp	r3, #0
    22f2:	bne.n	234a <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    22f4:	lsls	r2, r6, #24
    22f6:	bmi.n	2352 <analogRead+0x76>
#endif

	__disable_irq();
    22f8:	cpsid	i
    22fa:	ldr	r5, [pc, #188]	; (23b8 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    22fc:	ldr	r4, [pc, #188]	; (23bc <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    22fe:	mov	r7, r5
    2300:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2302:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2304:	strb	r3, [r5, #0]
	__enable_irq();
    2306:	cpsie	i
	while (1) {
		__disable_irq();
    2308:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    230a:	ldr	r3, [r4, #0]
    230c:	lsls	r3, r3, #24
    230e:	bmi.n	232a <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2310:	ldrb	r3, [r7, #0]
    2312:	cbnz	r3, 231c <analogRead+0x40>
    2314:	b.n	2300 <analogRead+0x24>
    2316:	ldrb	r3, [r5, #0]
    2318:	cmp	r3, #0
    231a:	beq.n	2300 <analogRead+0x24>
		__enable_irq();
    231c:	cpsie	i
		yield();
    231e:	bl	3930 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2322:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2324:	ldr	r3, [r4, #0]
    2326:	lsls	r0, r3, #24
    2328:	bpl.n	2316 <analogRead+0x3a>
			result = ADC0_RA;
    232a:	ldr	r3, [pc, #148]	; (23c0 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    232c:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    232e:	movs	r2, #0
    2330:	strb	r2, [r5, #0]
			__enable_irq();
    2332:	cpsie	i
			result >>= analog_right_shift;
    2334:	ldr	r2, [pc, #140]	; (23c4 <analogRead+0xe8>)
    2336:	ldrb	r0, [r2, #0]
    2338:	asr.w	r0, r3, r0
			return result;
    233c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2340:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2342:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2344:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2346:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    234a:	bl	20b8 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    234e:	lsls	r2, r6, #24
    2350:	bpl.n	22f8 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2352:	cpsid	i
    2354:	ldr	r5, [pc, #112]	; (23c8 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2356:	ldr.w	r8, [pc, #124]	; 23d4 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    235a:	ldr	r4, [pc, #112]	; (23cc <analogRead+0xf0>)
    235c:	and.w	r7, r6, #64	; 0x40
    2360:	uxtb	r7, r7
    2362:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2366:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    236a:	cbz	r7, 23a4 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    236c:	bic.w	r3, r3, #16
    2370:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2374:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2376:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2378:	ldr	r2, [pc, #76]	; (23c8 <analogRead+0xec>)
    237a:	strb	r3, [r5, #0]
	__enable_irq();
    237c:	cpsie	i
	while (1) {
		__disable_irq();
    237e:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2380:	ldr	r3, [r4, #0]
    2382:	lsls	r1, r3, #24
    2384:	bmi.n	23a0 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    2386:	ldrb	r3, [r2, #0]
    2388:	cbnz	r3, 2392 <analogRead+0xb6>
    238a:	b.n	2366 <analogRead+0x8a>
    238c:	ldrb	r3, [r5, #0]
    238e:	cmp	r3, #0
    2390:	beq.n	2366 <analogRead+0x8a>
		__enable_irq();
    2392:	cpsie	i
		yield();
    2394:	bl	3930 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2398:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    239a:	ldr	r3, [r4, #0]
    239c:	lsls	r3, r3, #24
    239e:	bpl.n	238c <analogRead+0xb0>
			result = ADC1_RA;
    23a0:	ldr	r3, [pc, #44]	; (23d0 <analogRead+0xf4>)
    23a2:	b.n	232c <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    23a4:	orr.w	r3, r3, #16
    23a8:	str.w	r3, [r8]
    23ac:	b.n	2374 <analogRead+0x98>
    23ae:	nop
    23b0:	.word	0x00004e48
    23b4:	.word	0x1fff183e
    23b8:	.word	0x1fff1840
    23bc:	.word	0x4003b000
    23c0:	.word	0x4003b010
    23c4:	.word	0x1fff183d
    23c8:	.word	0x1fff183f
    23cc:	.word	0x400bb000
    23d0:	.word	0x400bb010
    23d4:	.word	0x400bb00c

000023d8 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    23d8:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    23da:	ldr	r3, [pc, #68]	; (2420 <digitalWrite.part.1+0x48>)
    23dc:	ldr.w	r2, [r3, r0, lsl #3]
    23e0:	ldrb.w	r4, [r2, #640]	; 0x280
    23e4:	cbz	r4, 23f4 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    23e6:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    23e8:	cbz	r1, 240a <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    23ea:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    23ee:	ldr.w	r4, [sp], #4
    23f2:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    23f4:	add.w	r3, r3, r0, lsl #3
    23f8:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    23fa:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    23fc:	cbnz	r1, 2414 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    23fe:	bic.w	r2, r2, #2
    2402:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2404:	ldr.w	r4, [sp], #4
    2408:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    240a:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    240e:	ldr.w	r4, [sp], #4
    2412:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2414:	orr.w	r2, r2, #3
    2418:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    241a:	ldr.w	r4, [sp], #4
    241e:	bx	lr
    2420:	.word	0x00004e90

00002424 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2424:	ldr	r2, [pc, #112]	; (2498 <pinMode.part.2+0x74>)
    2426:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    242a:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    242c:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    242e:	beq.n	2454 <pinMode.part.2+0x30>
    2430:	cmp	r1, #4
    2432:	beq.n	246c <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2434:	ldr.w	r0, [r2, r0, lsl #3]
    2438:	movs	r2, #0
    243a:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    243e:	cbz	r1, 244c <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2440:	cmp	r1, #2
    2442:	beq.n	2486 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2444:	cmp	r1, #3
    2446:	beq.n	248e <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2448:	str	r2, [r3, #0]
    244a:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    244c:	mov.w	r2, #256	; 0x100
    2450:	str	r2, [r3, #0]
    2452:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2454:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2458:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    245c:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2460:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2462:	ldr	r2, [r3, #0]
    2464:	bic.w	r2, r2, #32
    2468:	str	r2, [r3, #0]
    246a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    246c:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2470:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2474:	movs	r0, #1
    2476:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    247a:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    247c:	ldr	r2, [r3, #0]
    247e:	orr.w	r2, r2, #32
    2482:	str	r2, [r3, #0]
    2484:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2486:	movw	r2, #259	; 0x103
    248a:	str	r2, [r3, #0]
    248c:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    248e:	mov.w	r2, #258	; 0x102
    2492:	str	r2, [r3, #0]
    2494:	bx	lr
    2496:	nop
    2498:	.word	0x00004e90

0000249c <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    249c:	push	{r4, r5}
	RTC_SR = 0;
    249e:	ldr	r3, [pc, #20]	; (24b4 <rtc_set+0x18>)
	RTC_TPR = 0;
    24a0:	ldr	r5, [pc, #20]	; (24b8 <rtc_set+0x1c>)
	RTC_TSR = t;
    24a2:	ldr	r4, [pc, #24]	; (24bc <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    24a4:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    24a6:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    24a8:	str	r2, [r3, #0]
	RTC_TPR = 0;
    24aa:	str	r2, [r5, #0]
	RTC_TSR = t;
    24ac:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    24ae:	str	r1, [r3, #0]
}
    24b0:	pop	{r4, r5}
    24b2:	bx	lr
    24b4:	.word	0x4003d014
    24b8:	.word	0x4003d004
    24bc:	.word	0x4003d000

000024c0 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    24c0:	cmp	r0, #63	; 0x3f
    24c2:	bhi.n	24c8 <digitalWrite+0x8>
    24c4:	b.w	23d8 <digitalWrite.part.1>
    24c8:	bx	lr
    24ca:	nop

000024cc <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    24cc:	cmp	r0, #63	; 0x3f
    24ce:	bhi.n	24de <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    24d0:	ldr	r3, [pc, #16]	; (24e4 <digitalRead+0x18>)
    24d2:	ldr.w	r3, [r3, r0, lsl #3]
    24d6:	ldrb.w	r0, [r3, #512]	; 0x200
    24da:	uxtb	r0, r0
    24dc:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    24de:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    24e0:	bx	lr
    24e2:	nop
    24e4:	.word	0x00004e90

000024e8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    24e8:	cmp	r0, #63	; 0x3f
    24ea:	bhi.n	24f0 <pinMode+0x8>
    24ec:	b.w	2424 <pinMode.part.2>
    24f0:	bx	lr
    24f2:	nop

000024f4 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    24f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24f8:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    24fa:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    24fc:	ldr	r7, [pc, #136]	; (2588 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    24fe:	ldr	r3, [pc, #140]	; (258c <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2500:	ldr	r2, [pc, #140]	; (2590 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2502:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2504:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2506:	ldr	r2, [r2, #0]
	__enable_irq();
    2508:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    250a:	lsls	r2, r2, #5
    250c:	bpl.n	2514 <delay+0x20>
    250e:	cmp	r3, #50	; 0x32
    2510:	it	hi
    2512:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2514:	cbz	r5, 2584 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2516:	rsb	r3, r3, #179200	; 0x2bc00
    251a:	addw	r3, r3, #799	; 0x31f
    251e:	ldr	r6, [pc, #116]	; (2594 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2520:	ldr.w	r9, [pc, #104]	; 258c <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2524:	ldr.w	r8, [pc, #104]	; 2590 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2528:	lsrs	r3, r3, #2
    252a:	mov.w	r2, #1000	; 0x3e8
    252e:	umull	r1, r3, r6, r3
    2532:	mul.w	r4, r2, r4
    2536:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    253a:	cpsid	i
	current = SYST_CVR;
    253c:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2540:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2542:	ldr.w	lr, [r8]
	__enable_irq();
    2546:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2548:	rsb	r3, r1, #179200	; 0x2bc00
    254c:	addw	r3, r3, #799	; 0x31f
    2550:	lsrs	r3, r3, #2
    2552:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2556:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    255a:	rsb	r3, r4, r3, lsr #2
    255e:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2562:	beq.n	256a <delay+0x76>
    2564:	cmp	r1, #50	; 0x32
    2566:	it	hi
    2568:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    256a:	mla	r3, r0, r2, r3
    256e:	cmp.w	r3, #1000	; 0x3e8
    2572:	bcc.n	257e <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2574:	subs	r5, #1
    2576:	beq.n	2584 <delay+0x90>
				start += 1000;
    2578:	add.w	r4, r4, #1000	; 0x3e8
    257c:	b.n	253a <delay+0x46>
			}
			yield();
    257e:	bl	3930 <yield>
		}
    2582:	b.n	253a <delay+0x46>
    2584:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2588:	.word	0x1fff1844
    258c:	.word	0xe000e018
    2590:	.word	0xe000ed04
    2594:	.word	0x16c16c17

00002598 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2598:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    259a:	ldr	r3, [pc, #312]	; (26d4 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    259c:	ldr	r0, [pc, #312]	; (26d8 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    259e:	ldr.w	ip, [pc, #348]	; 26fc <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    25a2:	ldr	r4, [pc, #312]	; (26dc <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    25a4:	ldr	r1, [pc, #312]	; (26e0 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25a6:	ldr.w	lr, [pc, #344]	; 2700 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    25aa:	ldr	r6, [pc, #312]	; (26e4 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    25ac:	ldr	r5, [pc, #312]	; (26e8 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    25ae:	ldr	r7, [pc, #316]	; (26ec <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    25b0:	mov.w	r2, #134217728	; 0x8000000
    25b4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    25b6:	mov.w	r2, #268435456	; 0x10000000
    25ba:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    25bc:	mov.w	r2, #536870912	; 0x20000000
    25c0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    25c2:	mov.w	r2, #1073741824	; 0x40000000
    25c6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    25c8:	mov.w	r2, #2147483648	; 0x80000000
    25cc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    25ce:	movs	r2, #0
    25d0:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25d2:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    25d4:	movw	r0, #61439	; 0xefff
    25d8:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25dc:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    25e0:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    25e2:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    25e6:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    25e8:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    25ea:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    25ec:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    25f0:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    25f2:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    25f6:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    25f8:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    25fc:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    25fe:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2602:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2606:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    260a:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    260e:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2612:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2614:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2618:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    261a:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    261c:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    261e:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2622:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2624:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2626:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2628:	ldr	r4, [pc, #196]	; (26f0 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    262a:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    262c:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    262e:	movs	r1, #9
    2630:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2632:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2636:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    263a:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    263c:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    263e:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2640:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2642:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2644:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2646:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    264a:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    264e:	add.w	r7, r7, #520192	; 0x7f000
    2652:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2654:	addw	r4, r4, #2044	; 0x7fc
    2658:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    265a:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    265c:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    265e:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2660:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2664:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2666:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    266a:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    266e:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2670:	sub.w	r4, r4, #460800	; 0x70800
    2674:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2678:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    267a:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    267c:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2680:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2682:	ldr	r0, [pc, #112]	; (26f4 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2684:	orr.w	r1, r1, #512	; 0x200
    2688:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    268a:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    268c:	ldr	r4, [pc, #104]	; (26f8 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    268e:	add.w	lr, lr, #65280	; 0xff00
    2692:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2696:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    269a:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    269e:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    26a2:	orr.w	r1, r1, #33554432	; 0x2000000
    26a6:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    26a8:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    26ac:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    26b0:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    26b2:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    26b4:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    26b6:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    26b8:	str	r2, [r4, #0]
#endif
	analog_init();
    26ba:	bl	21fc <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    26be:	movs	r0, #25
    26c0:	bl	24f4 <delay>
	usb_init();
    26c4:	bl	3860 <usb_init>
	delay(275);
    26c8:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    26cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    26d0:	b.w	24f4 <delay>
    26d4:	.word	0xe000e104
    26d8:	.word	0x40038004
    26dc:	.word	0x40038014
    26e0:	.word	0x4003801c
    26e4:	.word	0x40038024
    26e8:	.word	0x4003802c
    26ec:	.word	0x40038034
    26f0:	.word	0x40038000
    26f4:	.word	0x40048004
    26f8:	.word	0x400c9000
    26fc:	.word	0x40038008
    2700:	.word	0x4003800c

00002704 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2704:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2706:	ldr	r3, [pc, #56]	; (2740 <sysex_byte+0x3c>)
    2708:	ldr	r4, [pc, #56]	; (2744 <sysex_byte+0x40>)
    270a:	ldr	r3, [r3, #0]
    270c:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    270e:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2710:	cbz	r3, 2736 <sysex_byte+0x32>
    2712:	cmp.w	r1, #290	; 0x122
    2716:	bcs.n	2724 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2718:	ldr	r2, [pc, #44]	; (2748 <sysex_byte+0x44>)
    271a:	adds	r3, r1, #1
    271c:	strb	r5, [r2, r1]
    271e:	uxth	r3, r3
    2720:	strh	r3, [r4, #0]
	}
}
    2722:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2724:	movs	r2, #0
    2726:	ldr	r0, [pc, #32]	; (2748 <sysex_byte+0x44>)
    2728:	blx	r3
    272a:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    272c:	ldr	r2, [pc, #24]	; (2748 <sysex_byte+0x44>)
    272e:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2730:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2732:	strh	r3, [r4, #0]
	}
}
    2734:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2736:	cmp.w	r1, #290	; 0x122
    273a:	bcc.n	2718 <sysex_byte+0x14>
    273c:	pop	{r3, r4, r5, pc}
    273e:	nop
    2740:	.word	0x1fff186c
    2744:	.word	0x1fff1d02
    2748:	.word	0x1fff1d08

0000274c <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    274c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2750:	ldr	r6, [pc, #132]	; (27d8 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2752:	ldr	r7, [pc, #136]	; (27dc <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2754:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2756:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2758:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    275a:	strb	r3, [r7, #0]
	if (!tx_packet) {
    275c:	cbz	r1, 278c <usb_midi_write_packed+0x40>
    275e:	ldr	r5, [pc, #128]	; (27e0 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2760:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2762:	add.w	r2, r1, r3, lsl #2
    2766:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2768:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    276a:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    276c:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2770:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2772:	bhi.n	277e <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2774:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2776:	movs	r3, #0
    2778:	strb	r3, [r7, #0]
    277a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    277e:	movs	r3, #64	; 0x40
    2780:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2782:	movs	r0, #4
    2784:	bl	2e2c <usb_tx>
		tx_packet = NULL;
    2788:	str	r4, [r6, #0]
    278a:	b.n	2776 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    278c:	ldr.w	r9, [pc, #84]	; 27e4 <usb_midi_write_packed+0x98>
    2790:	ldrb.w	r3, [r9]
    2794:	cmp	r3, #0
    2796:	beq.n	277a <usb_midi_write_packed+0x2e>
    2798:	ldr	r5, [pc, #68]	; (27e0 <usb_midi_write_packed+0x94>)
    279a:	movw	r4, #48001	; 0xbb81
    279e:	b.n	27b2 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    27a0:	subs	r4, #1
    27a2:	beq.n	27ca <usb_midi_write_packed+0x7e>
    27a4:	ldrb	r3, [r5, #0]
    27a6:	cbnz	r3, 27ca <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    27a8:	bl	3930 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    27ac:	ldrb.w	r3, [r9]
    27b0:	cbz	r3, 27d2 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    27b2:	movs	r0, #4
    27b4:	bl	2d18 <usb_tx_packet_count>
    27b8:	cmp	r0, #5
    27ba:	bhi.n	27a0 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    27bc:	bl	2c50 <usb_malloc>
    27c0:	mov	r1, r0
    27c2:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    27c4:	cmp	r0, #0
    27c6:	beq.n	27a0 <usb_midi_write_packed+0x54>
    27c8:	b.n	2760 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    27ca:	movs	r3, #1
    27cc:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    27ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27d6:	nop
    27d8:	.word	0x1fff1888
    27dc:	.word	0x1fff185c
    27e0:	.word	0x1fff188c
    27e4:	.word	0x1fff1998

000027e8 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    27e8:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    27ea:	ldr	r3, [pc, #32]	; (280c <usb_midi_flush_output+0x24>)
    27ec:	ldrb	r4, [r3, #0]
    27ee:	cbnz	r4, 27fa <usb_midi_flush_output+0x12>
    27f0:	ldr	r5, [pc, #28]	; (2810 <usb_midi_flush_output+0x28>)
    27f2:	ldr	r1, [r5, #0]
    27f4:	cbz	r1, 27fa <usb_midi_flush_output+0x12>
    27f6:	ldrh	r3, [r1, #2]
    27f8:	cbnz	r3, 27fc <usb_midi_flush_output+0x14>
    27fa:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    27fc:	lsls	r3, r3, #2
    27fe:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2800:	movs	r0, #4
    2802:	bl	2e2c <usb_tx>
		tx_packet = NULL;
    2806:	str	r4, [r5, #0]
    2808:	pop	{r3, r4, r5, pc}
    280a:	nop
    280c:	.word	0x1fff185c
    2810:	.word	0x1fff1888

00002814 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2814:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2818:	ldr	r6, [pc, #692]	; (2ad0 <usb_midi_read+0x2bc>)
    281a:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    281c:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    281e:	cmp	r3, #0
    2820:	beq.w	2948 <usb_midi_read+0x134>
    2824:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2826:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2828:	lsrs	r1, r2, #2
    282a:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    282e:	adds	r2, #4
	if (index < rx_packet->len) {
    2830:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2832:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2834:	bcs.n	28bc <usb_midi_read+0xa8>
		rx_packet->index = index;
    2836:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2838:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    283c:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2840:	ldr	r1, [pc, #656]	; (2ad4 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2842:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2846:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    284a:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    284e:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2850:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2854:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2856:	bls.n	288e <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2858:	subs	r3, r6, #2
    285a:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    285c:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2860:	bls.n	2900 <usb_midi_read+0xec>
    2862:	cmp	r6, #5
    2864:	beq.n	28f8 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2866:	cmp	r6, #4
    2868:	beq.w	2bb4 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    286c:	subs	r3, r6, #5
    286e:	cmp	r3, #2
    2870:	bls.n	2972 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    2872:	cmp	r6, #15
    2874:	bne.n	2894 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    2876:	cmp	r0, #247	; 0xf7
    2878:	bhi.n	2900 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    287a:	cmp	r0, #240	; 0xf0
    287c:	beq.n	2884 <usb_midi_read+0x70>
    287e:	ldr	r3, [pc, #600]	; (2ad8 <usb_midi_read+0x2c4>)
    2880:	ldrh	r3, [r3, #0]
    2882:	cbz	r3, 2894 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2884:	bl	2704 <sysex_byte>
		}
	}
	return 0;
    2888:	movs	r0, #0
    288a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    288e:	cbz	r7, 289a <usb_midi_read+0x86>
    2890:	cmp	r5, r7
    2892:	beq.n	289a <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2894:	movs	r0, #0
    2896:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    289a:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    289c:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    28a0:	beq.w	29b2 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    28a4:	cmp	r6, #9
    28a6:	beq.n	28cc <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    28a8:	cmp	r6, #10
    28aa:	bne.w	29d6 <usb_midi_read+0x1c2>
    28ae:	cmp	r3, #10
    28b0:	bne.n	2894 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    28b2:	ldr	r3, [pc, #552]	; (2adc <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    28b4:	ldr	r2, [pc, #552]	; (2ae0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    28b6:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    28b8:	movs	r1, #160	; 0xa0
    28ba:	b.n	29c0 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    28bc:	mov	r0, r3
    28be:	bl	2c90 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    28c2:	movs	r0, #5
    28c4:	bl	2cdc <usb_rx>
    28c8:	str	r0, [r6, #0]
    28ca:	b.n	2838 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    28cc:	cmp	r3, #9
    28ce:	bne.n	2894 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    28d0:	lsrs	r7, r4, #24
    28d2:	beq.w	2bcc <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    28d6:	ldr	r3, [pc, #524]	; (2ae4 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    28d8:	ldr	r2, [pc, #516]	; (2ae0 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    28da:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    28dc:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    28de:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    28e2:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    28e4:	uxtb	r5, r5
    28e6:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    28e8:	cmp	r3, #0
    28ea:	beq.w	2a28 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    28ee:	mov	r2, r4
    28f0:	mov	r1, r6
    28f2:	mov	r0, r5
    28f4:	blx	r3
    28f6:	b.n	2a28 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    28f8:	cmp	r0, #240	; 0xf0
    28fa:	bls.n	2984 <usb_midi_read+0x170>
    28fc:	cmp	r0, #247	; 0xf7
    28fe:	beq.n	2984 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    2900:	subs	r0, #241	; 0xf1
    2902:	cmp	r0, #14
    2904:	bhi.n	2894 <usb_midi_read+0x80>
    2906:	add	r3, pc, #4	; (adr r3, 290c <usb_midi_read+0xf8>)
    2908:	ldr.w	pc, [r3, r0, lsl #2]
    290c:	.word	0x00002ac3
    2910:	.word	0x00002aa7
    2914:	.word	0x00002a95
    2918:	.word	0x00002895
    291c:	.word	0x00002895
    2920:	.word	0x00002a87
    2924:	.word	0x00002895
    2928:	.word	0x00002b67
    292c:	.word	0x00002895
    2930:	.word	0x00002b31
    2934:	.word	0x00002b4b
    2938:	.word	0x00002a6f
    293c:	.word	0x00002895
    2940:	.word	0x00002a57
    2944:	.word	0x00002a3b
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2948:	ldr	r3, [pc, #412]	; (2ae8 <usb_midi_read+0x2d4>)
    294a:	ldrb	r3, [r3, #0]
    294c:	cmp	r3, #0
    294e:	beq.n	2894 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2950:	movs	r0, #5
    2952:	bl	2cdc <usb_rx>
    2956:	mov	r3, r0
    2958:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    295a:	cmp	r0, #0
    295c:	beq.n	2894 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    295e:	ldrh	r5, [r0, #0]
    2960:	cmp	r5, #0
    2962:	bne.w	2826 <usb_midi_read+0x12>
			usb_free(rx_packet);
    2966:	bl	2c90 <usb_free>
			rx_packet = NULL;
    296a:	str	r5, [r6, #0]
			return 0;
    296c:	mov	r0, r5
    296e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    2972:	bl	2704 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    2976:	ubfx	r0, r4, #16, #8
    297a:	bl	2704 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    297e:	cmp	r6, #7
    2980:	bne.n	2988 <usb_midi_read+0x174>
    2982:	lsrs	r0, r4, #24
    2984:	bl	2704 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    2988:	ldr	r3, [pc, #332]	; (2ad8 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    298a:	ldr	r2, [pc, #352]	; (2aec <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    298c:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    298e:	ldr	r0, [pc, #352]	; (2af0 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2990:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2992:	ldr	r5, [pc, #352]	; (2af4 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2994:	ldr	r2, [pc, #328]	; (2ae0 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    2996:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2998:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    299a:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    299c:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    299e:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    29a0:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    29a2:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    29a4:	cbz	r4, 29ea <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    29a6:	movs	r2, #1
    29a8:	ldr	r0, [pc, #332]	; (2af8 <usb_midi_read+0x2e4>)
    29aa:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    29ac:	movs	r0, #1
    29ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    29b2:	cmp	r3, #8
    29b4:	bne.w	2894 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    29b8:	ldr	r3, [pc, #320]	; (2afc <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    29ba:	ldr	r2, [pc, #292]	; (2ae0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    29bc:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    29be:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    29c0:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    29c4:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    29c6:	uxtb	r5, r5
    29c8:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    29ca:	cbz	r3, 2a28 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    29cc:	mov	r0, r5
    29ce:	mov	r2, r4
    29d0:	mov	r1, r6
    29d2:	blx	r3
    29d4:	b.n	2a28 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    29d6:	cmp	r6, #11
    29d8:	bne.n	29fe <usb_midi_read+0x1ea>
    29da:	cmp	r3, #11
    29dc:	bne.w	2894 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    29e0:	ldr	r3, [pc, #284]	; (2b00 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    29e2:	ldr	r2, [pc, #252]	; (2ae0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    29e4:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    29e6:	movs	r1, #176	; 0xb0
    29e8:	b.n	29c0 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    29ea:	ldr	r3, [pc, #280]	; (2b04 <usb_midi_read+0x2f0>)
    29ec:	ldr	r3, [r3, #0]
    29ee:	cmp	r3, #0
    29f0:	beq.w	2bea <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    29f4:	ldr	r0, [pc, #256]	; (2af8 <usb_midi_read+0x2e4>)
    29f6:	blx	r3
		}
		return 1;
    29f8:	movs	r0, #1
    29fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    29fe:	cmp	r6, #12
    2a00:	bne.w	2c04 <usb_midi_read+0x3f0>
    2a04:	cmp	r3, #12
    2a06:	bne.w	2894 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2a0a:	ldr	r3, [pc, #252]	; (2b08 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2a0c:	ldr	r2, [pc, #208]	; (2ae0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    2a0e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2a10:	movs	r1, #192	; 0xc0
    2a12:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2a14:	uxtb	r5, r5
    2a16:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2a1a:	cmp	r3, #0
    2a1c:	beq.w	2bb0 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2a20:	mov	r0, r5
    2a22:	mov	r1, r6
    2a24:	lsrs	r4, r4, #24
    2a26:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2a28:	ldr	r1, [pc, #224]	; (2b0c <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2a2a:	ldr	r2, [pc, #196]	; (2af0 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2a2c:	ldr	r3, [pc, #196]	; (2af4 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2a2e:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2a30:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    2a32:	strb	r4, [r3, #0]
		return 1;
    2a34:	movs	r0, #1
    2a36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2a3a:	ldr	r3, [pc, #212]	; (2b10 <usb_midi_read+0x2fc>)
    2a3c:	ldr	r3, [r3, #0]
    2a3e:	cmp	r3, #0
    2a40:	beq.w	2bf0 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2a44:	blx	r3
    2a46:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2a4a:	ldr	r3, [pc, #148]	; (2ae0 <usb_midi_read+0x2cc>)
    2a4c:	uxtb	r5, r5
    2a4e:	lsrs	r4, r4, #24
    2a50:	strb.w	r8, [r3]
		goto return_message;
    2a54:	b.n	2a28 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    2a56:	ldr	r3, [pc, #188]	; (2b14 <usb_midi_read+0x300>)
    2a58:	ldr	r3, [r3, #0]
    2a5a:	cmp	r3, #0
    2a5c:	bne.n	2a44 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2a5e:	ldr	r3, [pc, #184]	; (2b18 <usb_midi_read+0x304>)
    2a60:	ldr	r3, [r3, #0]
    2a62:	cbz	r3, 2a8e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2a64:	movs	r0, #254	; 0xfe
    2a66:	blx	r3
    2a68:	ubfx	r6, r4, #16, #8
    2a6c:	b.n	2a4a <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2a6e:	ldr	r3, [pc, #172]	; (2b1c <usb_midi_read+0x308>)
    2a70:	ldr	r3, [r3, #0]
    2a72:	cmp	r3, #0
    2a74:	bne.n	2a44 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    2a76:	ldr	r3, [pc, #160]	; (2b18 <usb_midi_read+0x304>)
    2a78:	ldr	r3, [r3, #0]
    2a7a:	cbz	r3, 2a8e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2a7c:	movs	r0, #252	; 0xfc
    2a7e:	blx	r3
    2a80:	ubfx	r6, r4, #16, #8
    2a84:	b.n	2a4a <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    2a86:	ldr	r3, [pc, #152]	; (2b20 <usb_midi_read+0x30c>)
    2a88:	ldr	r3, [r3, #0]
    2a8a:	cmp	r3, #0
    2a8c:	bne.n	2a44 <usb_midi_read+0x230>
    2a8e:	ubfx	r6, r4, #16, #8
    2a92:	b.n	2a4a <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2a94:	ldr	r3, [pc, #140]	; (2b24 <usb_midi_read+0x310>)
    2a96:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    2a98:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2a9c:	cmp	r3, #0
    2a9e:	beq.n	2a4a <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2aa0:	mov	r0, r6
    2aa2:	blx	r3
    2aa4:	b.n	2a4a <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    2aa6:	ldr	r3, [pc, #128]	; (2b28 <usb_midi_read+0x314>)
    2aa8:	ldr	r2, [r3, #0]
    2aaa:	cmp	r2, #0
    2aac:	beq.n	2a8e <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2aae:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2ab0:	lsrs	r3, r4, #17
    2ab2:	and.w	r0, r6, #127	; 0x7f
    2ab6:	and.w	r3, r3, #16256	; 0x3f80
    2aba:	orrs	r0, r3
    2abc:	uxtb	r6, r6
    2abe:	blx	r2
    2ac0:	b.n	2a4a <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2ac2:	ldr	r3, [pc, #104]	; (2b2c <usb_midi_read+0x318>)
    2ac4:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    2ac6:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2aca:	cmp	r3, #0
    2acc:	bne.n	2aa0 <usb_midi_read+0x28c>
    2ace:	b.n	2a4a <usb_midi_read+0x236>
    2ad0:	.word	0x1fff1894
    2ad4:	.word	0x1fff1d06
    2ad8:	.word	0x1fff1d02
    2adc:	.word	0x1fff1870
    2ae0:	.word	0x1fff1d00
    2ae4:	.word	0x1fff18a4
    2ae8:	.word	0x1fff1998
    2aec:	.word	0x1fff186c
    2af0:	.word	0x1fff1d04
    2af4:	.word	0x1fff1d05
    2af8:	.word	0x1fff1d08
    2afc:	.word	0x1fff189c
    2b00:	.word	0x1fff18a0
    2b04:	.word	0x1fff1884
    2b08:	.word	0x1fff1860
    2b0c:	.word	0x1fff1d07
    2b10:	.word	0x1fff184c
    2b14:	.word	0x1fff1850
    2b18:	.word	0x1fff1854
    2b1c:	.word	0x1fff1890
    2b20:	.word	0x1fff1880
    2b24:	.word	0x1fff1898
    2b28:	.word	0x1fff1868
    2b2c:	.word	0x1fff187c
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2b30:	ldr	r3, [pc, #252]	; (2c30 <usb_midi_read+0x41c>)
    2b32:	ldr	r3, [r3, #0]
    2b34:	cmp	r3, #0
    2b36:	bne.n	2a44 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2b38:	ldr	r3, [pc, #248]	; (2c34 <usb_midi_read+0x420>)
    2b3a:	ldr	r3, [r3, #0]
    2b3c:	cmp	r3, #0
    2b3e:	beq.n	2a8e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2b40:	movs	r0, #250	; 0xfa
    2b42:	blx	r3
    2b44:	ubfx	r6, r4, #16, #8
    2b48:	b.n	2a4a <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2b4a:	ldr	r3, [pc, #236]	; (2c38 <usb_midi_read+0x424>)
    2b4c:	ldr	r3, [r3, #0]
    2b4e:	cmp	r3, #0
    2b50:	bne.w	2a44 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2b54:	ldr	r3, [pc, #220]	; (2c34 <usb_midi_read+0x420>)
    2b56:	ldr	r3, [r3, #0]
    2b58:	cmp	r3, #0
    2b5a:	beq.n	2a8e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2b5c:	movs	r0, #251	; 0xfb
    2b5e:	blx	r3
    2b60:	ubfx	r6, r4, #16, #8
    2b64:	b.n	2a4a <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2b66:	ldr	r3, [pc, #212]	; (2c3c <usb_midi_read+0x428>)
    2b68:	ldr	r3, [r3, #0]
    2b6a:	cmp	r3, #0
    2b6c:	bne.w	2a44 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2b70:	ldr	r3, [pc, #192]	; (2c34 <usb_midi_read+0x420>)
    2b72:	ldr	r3, [r3, #0]
    2b74:	cmp	r3, #0
    2b76:	beq.n	2a8e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2b78:	movs	r0, #248	; 0xf8
    2b7a:	blx	r3
    2b7c:	ubfx	r6, r4, #16, #8
    2b80:	b.n	2a4a <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2b82:	cmp	r3, #14
    2b84:	bne.w	2894 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2b88:	ldr	r2, [pc, #180]	; (2c40 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2b8a:	ldr	r3, [pc, #184]	; (2c44 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2b8c:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2b8e:	movs	r1, #224	; 0xe0
    2b90:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    2b92:	cmp	r2, #0
    2b94:	beq.n	2c26 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    2b96:	lsrs	r6, r4, #16
    2b98:	lsrs	r1, r4, #17
    2b9a:	and.w	r3, r6, #127	; 0x7f
    2b9e:	and.w	r1, r1, #16256	; 0x3f80
    2ba2:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    2ba4:	uxtb	r5, r5
    2ba6:	sub.w	r1, r1, #8192	; 0x2000
    2baa:	mov	r0, r5
    2bac:	blx	r2
    2bae:	uxtb	r6, r6
    2bb0:	lsrs	r4, r4, #24
    2bb2:	b.n	2a28 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    2bb4:	bl	2704 <sysex_byte>
		sysex_byte(n >> 16);
    2bb8:	ubfx	r0, r4, #16, #8
    2bbc:	bl	2704 <sysex_byte>
		sysex_byte(n >> 24);
    2bc0:	lsrs	r0, r4, #24
    2bc2:	bl	2704 <sysex_byte>
		return 0;
    2bc6:	movs	r0, #0
    2bc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2bcc:	ldr	r3, [pc, #120]	; (2c48 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2bce:	ldr	r2, [pc, #116]	; (2c44 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    2bd0:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2bd2:	movs	r1, #128	; 0x80
    2bd4:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2bd6:	uxtb	r5, r5
    2bd8:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2bdc:	cbz	r3, 2c00 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2bde:	mov	r1, r6
    2be0:	mov	r0, r5
    2be2:	mov	r2, r7
    2be4:	blx	r3
    2be6:	mov	r4, r7
    2be8:	b.n	2a28 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2bea:	movs	r0, #1
    2bec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2bf0:	ldr	r3, [pc, #64]	; (2c34 <usb_midi_read+0x420>)
    2bf2:	ldr	r3, [r3, #0]
    2bf4:	cmp	r3, #0
    2bf6:	beq.w	2a8e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    2bfa:	movs	r0, #255	; 0xff
    2bfc:	blx	r3
    2bfe:	b.n	2a8e <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2c00:	mov	r4, r3
    2c02:	b.n	2a28 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2c04:	cmp	r6, #13
    2c06:	bne.n	2b82 <usb_midi_read+0x36e>
    2c08:	cmp	r3, #13
    2c0a:	bne.w	2894 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2c0e:	ldr	r3, [pc, #60]	; (2c4c <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2c10:	ldr	r2, [pc, #48]	; (2c44 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2c12:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2c14:	movs	r1, #208	; 0xd0
    2c16:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2c18:	uxtb	r5, r5
    2c1a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2c1e:	cmp	r3, #0
    2c20:	bne.w	2a20 <usb_midi_read+0x20c>
    2c24:	b.n	2bb0 <usb_midi_read+0x39c>
    2c26:	ubfx	r6, r4, #16, #8
    2c2a:	uxtb	r5, r5
    2c2c:	lsrs	r4, r4, #24
    2c2e:	b.n	2a28 <usb_midi_read+0x214>
    2c30:	.word	0x1fff1878
    2c34:	.word	0x1fff1854
    2c38:	.word	0x1fff1858
    2c3c:	.word	0x1fff1848
    2c40:	.word	0x1fff1864
    2c44:	.word	0x1fff1d00
    2c48:	.word	0x1fff189c
    2c4c:	.word	0x1fff1874

00002c50 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2c50:	cpsid	i
	avail = usb_buffer_available;
    2c52:	ldr	r0, [pc, #52]	; (2c88 <usb_malloc+0x38>)
    2c54:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2c56:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2c5a:	cmp	r3, #29
    2c5c:	bgt.n	2c80 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2c5e:	mov.w	r1, #2147483648	; 0x80000000
    2c62:	lsrs	r1, r3
    2c64:	bic.w	r2, r2, r1
    2c68:	str	r2, [r0, #0]
	__enable_irq();
    2c6a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2c6c:	ldr	r0, [pc, #28]	; (2c8c <usb_malloc+0x3c>)
    2c6e:	add.w	r3, r3, r3, lsl #3
    2c72:	lsls	r3, r3, #3
    2c74:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2c76:	movs	r1, #0
    2c78:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2c7a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2c7c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2c7e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2c80:	cpsie	i
		return NULL;
    2c82:	movs	r0, #0
    2c84:	bx	lr
    2c86:	nop
    2c88:	.word	0x1fff0c5c
    2c8c:	.word	0x1fff03d0

00002c90 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2c90:	ldr	r3, [pc, #52]	; (2cc8 <usb_free+0x38>)
    2c92:	ldr	r2, [pc, #56]	; (2ccc <usb_free+0x3c>)
    2c94:	subs	r3, r0, r3
    2c96:	umull	r2, r3, r2, r3
    2c9a:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2c9c:	cmp	r3, #29
    2c9e:	bhi.n	2cba <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2ca0:	ldr	r2, [pc, #44]	; (2cd0 <usb_free+0x40>)
    2ca2:	ldrb	r2, [r2, #0]
    2ca4:	cbnz	r2, 2cbc <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2ca6:	cpsid	i
	usb_buffer_available |= mask;
    2ca8:	ldr	r0, [pc, #40]	; (2cd4 <usb_free+0x44>)
    2caa:	mov.w	r1, #2147483648	; 0x80000000
    2cae:	ldr	r2, [r0, #0]
    2cb0:	lsr.w	r3, r1, r3
    2cb4:	orrs	r2, r3
    2cb6:	str	r2, [r0, #0]
	__enable_irq();
    2cb8:	cpsie	i
    2cba:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2cbc:	ldr	r2, [pc, #24]	; (2cd8 <usb_free+0x48>)
    2cbe:	ldrb	r2, [r2, #0]
    2cc0:	cmp	r2, #0
    2cc2:	beq.n	2ca6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2cc4:	b.w	2d44 <usb_rx_memory>
    2cc8:	.word	0x1fff03d0
    2ccc:	.word	0x38e38e39
    2cd0:	.word	0x1fff198d
    2cd4:	.word	0x1fff0c5c
    2cd8:	.word	0x1fff1998

00002cdc <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2cdc:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2cde:	cmp	r3, #4
    2ce0:	bhi.n	2d0c <usb_rx+0x30>
	__disable_irq();
    2ce2:	cpsid	i
	ret = rx_first[endpoint];
    2ce4:	ldr	r1, [pc, #40]	; (2d10 <usb_rx+0x34>)
    2ce6:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2cea:	cbz	r0, 2d08 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2cec:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2cee:	ldr	r4, [pc, #36]	; (2d14 <usb_rx+0x38>)
    2cf0:	ldrh	r5, [r0, #0]
    2cf2:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2cf6:	ldr	r6, [r0, #4]
    2cf8:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2cfc:	subs	r2, r2, r5
    2cfe:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2d02:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2d04:	pop	{r4, r5, r6}
    2d06:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2d08:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2d0a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2d0c:	movs	r0, #0
    2d0e:	bx	lr
    2d10:	.word	0x1fff1904
    2d14:	.word	0x1fff1e2c

00002d18 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2d18:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2d1a:	cmp	r0, #4
    2d1c:	bhi.n	2d36 <usb_tx_packet_count+0x1e>
	__disable_irq();
    2d1e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2d20:	ldr	r3, [pc, #28]	; (2d40 <usb_tx_packet_count+0x28>)
    2d22:	ldr.w	r3, [r3, r0, lsl #2]
    2d26:	cbz	r3, 2d3a <usb_tx_packet_count+0x22>
    2d28:	movs	r0, #0
    2d2a:	ldr	r3, [r3, #4]
    2d2c:	adds	r0, #1
    2d2e:	cmp	r3, #0
    2d30:	bne.n	2d2a <usb_tx_packet_count+0x12>
	__enable_irq();
    2d32:	cpsie	i
	return count;
    2d34:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2d36:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2d38:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2d3a:	mov	r0, r3
    2d3c:	b.n	2d32 <usb_tx_packet_count+0x1a>
    2d3e:	nop
    2d40:	.word	0x1fff195c

00002d44 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2d44:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2d46:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d48:	ldr	r2, [pc, #204]	; (2e18 <usb_rx_memory+0xd4>)
    2d4a:	ldrb	r3, [r2, #0]
    2d4c:	lsls	r3, r3, #28
    2d4e:	bpl.n	2d5e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d50:	ldr	r3, [pc, #200]	; (2e1c <usb_rx_memory+0xd8>)
    2d52:	ldr	r1, [r3, #32]
    2d54:	cmp	r1, #0
    2d56:	beq.n	2de0 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d58:	ldr	r1, [r3, #40]	; 0x28
    2d5a:	cmp	r1, #0
    2d5c:	beq.n	2dfc <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d5e:	ldrb	r3, [r2, #1]
    2d60:	lsls	r5, r3, #28
    2d62:	bpl.n	2d72 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d64:	ldr	r3, [pc, #180]	; (2e1c <usb_rx_memory+0xd8>)
    2d66:	ldr	r1, [r3, #64]	; 0x40
    2d68:	cmp	r1, #0
    2d6a:	beq.n	2e08 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d6c:	ldr	r1, [r3, #72]	; 0x48
    2d6e:	cmp	r1, #0
    2d70:	beq.n	2e00 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d72:	ldrb	r3, [r2, #2]
    2d74:	lsls	r4, r3, #28
    2d76:	bpl.n	2d86 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d78:	ldr	r3, [pc, #160]	; (2e1c <usb_rx_memory+0xd8>)
    2d7a:	ldr	r1, [r3, #96]	; 0x60
    2d7c:	cmp	r1, #0
    2d7e:	beq.n	2e0c <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d80:	ldr	r1, [r3, #104]	; 0x68
    2d82:	cmp	r1, #0
    2d84:	beq.n	2e04 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d86:	ldrb	r3, [r2, #3]
    2d88:	lsls	r1, r3, #28
    2d8a:	bpl.n	2d9c <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d8c:	ldr	r3, [pc, #140]	; (2e1c <usb_rx_memory+0xd8>)
    2d8e:	ldr.w	r1, [r3, #128]	; 0x80
    2d92:	cmp	r1, #0
    2d94:	beq.n	2e14 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d96:	ldr.w	r1, [r3, #136]	; 0x88
    2d9a:	cbz	r1, 2dc2 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d9c:	ldrb	r3, [r2, #4]
    2d9e:	lsls	r3, r3, #28
    2da0:	bpl.n	2db4 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2da2:	ldr	r3, [pc, #120]	; (2e1c <usb_rx_memory+0xd8>)
    2da4:	ldr.w	r2, [r3, #160]	; 0xa0
    2da8:	cmp	r2, #0
    2daa:	beq.n	2e10 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2dac:	ldr.w	r2, [r3, #168]	; 0xa8
    2db0:	movs	r4, #21
    2db2:	cbz	r2, 2dc4 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2db4:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2db6:	ldr	r3, [pc, #104]	; (2e20 <usb_rx_memory+0xdc>)
    2db8:	movs	r2, #0
    2dba:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2dbc:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2dbe:	b.w	2c90 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2dc2:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2dc4:	ldr	r1, [pc, #88]	; (2e20 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2dc6:	ldr	r5, [pc, #92]	; (2e24 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2dc8:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2dca:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2dce:	add.w	r3, r3, r4, lsl #3
    2dd2:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2dd4:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2dd6:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2dd8:	strb	r2, [r1, #0]
				__enable_irq();
    2dda:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2ddc:	pop	{r4, r5}
    2dde:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2de0:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2de2:	ldr	r4, [pc, #60]	; (2e20 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2de4:	ldr	r5, [pc, #64]	; (2e28 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2de6:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2de8:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2dec:	add.w	r3, r3, r2, lsl #3
    2df0:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2df2:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2df4:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2df6:	strb	r2, [r4, #0]
				__enable_irq();
    2df8:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2dfa:	b.n	2ddc <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2dfc:	movs	r4, #5
    2dfe:	b.n	2dc4 <usb_rx_memory+0x80>
    2e00:	movs	r4, #9
    2e02:	b.n	2dc4 <usb_rx_memory+0x80>
    2e04:	movs	r4, #13
    2e06:	b.n	2dc4 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2e08:	movs	r2, #8
    2e0a:	b.n	2de2 <usb_rx_memory+0x9e>
    2e0c:	movs	r2, #12
    2e0e:	b.n	2de2 <usb_rx_memory+0x9e>
    2e10:	movs	r2, #20
    2e12:	b.n	2de2 <usb_rx_memory+0x9e>
    2e14:	movs	r2, #16
    2e16:	b.n	2de2 <usb_rx_memory+0x9e>
    2e18:	.word	0x000050bc
    2e1c:	.word	0x1fff0000
    2e20:	.word	0x1fff198d
    2e24:	.word	0x004000c8
    2e28:	.word	0x00400088

00002e2c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2e2c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2e2e:	cmp	r3, #4
    2e30:	bhi.n	2e6e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2e32:	ldr	r2, [pc, #108]	; (2ea0 <usb_tx+0x74>)
    2e34:	lsls	r0, r0, #5
    2e36:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2e3a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2e3c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2e3e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2e40:	ldr	r4, [pc, #96]	; (2ea4 <usb_tx+0x78>)
    2e42:	ldrb	r2, [r4, r3]
    2e44:	cmp	r2, #3
    2e46:	bhi.n	2e80 <usb_tx+0x54>
    2e48:	tbb	[pc, r2]
    2e4c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2e50:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e52:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2e54:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e56:	tst.w	r0, #8
    2e5a:	ite	ne
    2e5c:	movne	r3, #200	; 0xc8
    2e5e:	moveq	r3, #136	; 0x88
    2e60:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2e64:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e66:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2e68:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2e6a:	cpsie	i
}
    2e6c:	pop	{r4, r5}
    2e6e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2e70:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2e72:	movs	r2, #2
		break;
    2e74:	b.n	2e52 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2e76:	movs	r2, #5
    2e78:	b.n	2e52 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2e7a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2e7c:	movs	r2, #4
		break;
    2e7e:	b.n	2e52 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2e80:	ldr	r2, [pc, #36]	; (2ea8 <usb_tx+0x7c>)
    2e82:	ldr.w	r0, [r2, r3, lsl #2]
    2e86:	cbz	r0, 2e98 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2e88:	ldr	r2, [pc, #32]	; (2eac <usb_tx+0x80>)
    2e8a:	ldr.w	r0, [r2, r3, lsl #2]
    2e8e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2e90:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2e94:	cpsie	i
		return;
    2e96:	b.n	2e6c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2e98:	str.w	r1, [r2, r3, lsl #2]
    2e9c:	ldr	r2, [pc, #12]	; (2eac <usb_tx+0x80>)
    2e9e:	b.n	2e90 <usb_tx+0x64>
    2ea0:	.word	0x1fff0000
    2ea4:	.word	0x1fff199c
    2ea8:	.word	0x1fff195c
    2eac:	.word	0x1fff1970

00002eb0 <usb_isr>:
}



void usb_isr(void)
{
    2eb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2eb4:	ldr.w	fp, [pc, #776]	; 31c0 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2eb8:	ldr.w	sl, [pc, #776]	; 31c4 <usb_isr+0x314>
}



void usb_isr(void)
{
    2ebc:	sub	sp, #28
    2ebe:	b.n	2f4a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2ec0:	ldr	r7, [pc, #680]	; (316c <usb_isr+0x2bc>)
    2ec2:	mov.w	r8, r3, lsr #2
    2ec6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2eca:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2ecc:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2ed0:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2ed4:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2ed6:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2eda:	and.w	r4, r3, #255	; 0xff
    2ede:	cmp	r3, #0
    2ee0:	bne.w	30e4 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2ee4:	ldr.w	r3, [r7, r8, lsl #3]
    2ee8:	lsrs	r3, r3, #16
    2eea:	uxth	r1, r3
    2eec:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2ef0:	cmp	r3, #0
    2ef2:	beq.w	30d2 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2ef6:	ldr	r3, [pc, #632]	; (3170 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2ef8:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2efc:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2f00:	ldr.w	r2, [r3, r6, lsl #2]
    2f04:	cmp	r2, #0
    2f06:	beq.w	3374 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2f0a:	ldr	r5, [pc, #616]	; (3174 <usb_isr+0x2c4>)
    2f0c:	ldr.w	r3, [r5, r6, lsl #2]
    2f10:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2f12:	ldr	r4, [pc, #612]	; (3178 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2f14:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2f18:	ldrh.w	r3, [r4, r6, lsl #1]
    2f1c:	add	r1, r3
    2f1e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2f22:	bl	2c50 <usb_malloc>
					if (packet) {
    2f26:	cmp	r0, #0
    2f28:	beq.w	3366 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2f2c:	ldr	r2, [pc, #588]	; (317c <usb_isr+0x2cc>)
    2f2e:	ldr	r3, [pc, #592]	; (3180 <usb_isr+0x2d0>)
    2f30:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2f34:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2f38:	it	ne
    2f3a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2f3c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2f40:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2f44:	movs	r3, #8
    2f46:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2f4a:	ldrb.w	r4, [fp]
    2f4e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2f50:	lsls	r0, r4, #29
    2f52:	bpl.n	2f8e <usb_isr+0xde>
		if (usb_configuration) {
    2f54:	ldr	r3, [pc, #556]	; (3184 <usb_isr+0x2d4>)
    2f56:	ldrb	r3, [r3, #0]
    2f58:	cbz	r3, 2f88 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2f5a:	ldr	r1, [pc, #556]	; (3188 <usb_isr+0x2d8>)
    2f5c:	ldrb	r2, [r1, #0]
			if (t) {
    2f5e:	and.w	r3, r2, #255	; 0xff
    2f62:	cbz	r2, 2f6e <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2f64:	subs	r3, #1
    2f66:	uxtb	r3, r3
    2f68:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2f6a:	cbnz	r3, 2f6e <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2f6c:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2f6e:	ldr	r1, [pc, #540]	; (318c <usb_isr+0x2dc>)
    2f70:	ldrb	r2, [r1, #0]
			if (t) {
    2f72:	and.w	r3, r2, #255	; 0xff
    2f76:	cbz	r2, 2f84 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2f78:	subs	r3, #1
    2f7a:	uxtb	r3, r3
    2f7c:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2f7e:	cmp	r3, #0
    2f80:	beq.w	3312 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2f84:	bl	27e8 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2f88:	movs	r3, #4
    2f8a:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2f8e:	and.w	r3, r4, #8
    2f92:	and.w	r2, r3, #255	; 0xff
    2f96:	cmp	r3, #0
    2f98:	beq.w	312c <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2f9c:	ldrb.w	r3, [sl]
    2fa0:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2fa2:	lsrs	r6, r3, #4
    2fa4:	bne.n	2ec0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2fa6:	lsrs	r4, r3, #2
    2fa8:	ldr.w	r9, [pc, #448]	; 316c <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2fac:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2fb0:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2fb4:	ubfx	r2, r2, #2, #4
    2fb8:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2fba:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2fbc:	cmp	r2, #12
    2fbe:	bhi.w	30ca <usb_isr+0x21a>
    2fc2:	tbb	[pc, r2]
    2fc6:	.short	0x7878
    2fc8:	.word	0x82828282
    2fcc:	.word	0x82438282
    2fd0:	.short	0x8282
    2fd2:	.byte	0x07
    2fd3:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2fd4:	ldr	r0, [r1, #0]
    2fd6:	ldr	r5, [pc, #440]	; (3190 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2fd8:	ldr	r3, [pc, #416]	; (317c <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2fda:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2fdc:	ldr	r7, [pc, #436]	; (3194 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2fde:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2fe2:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2fe4:	ldr	r6, [pc, #432]	; (3198 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2fe6:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2fe8:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2fec:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2fee:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2ff0:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2ff2:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2ff6:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2ff8:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2ffc:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3000:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3002:	bhi.w	31c8 <usb_isr+0x318>
    3006:	cmp.w	r1, #1664	; 0x680
    300a:	bcs.w	3634 <usb_isr+0x784>
    300e:	cmp.w	r1, #258	; 0x102
    3012:	beq.w	33e2 <usb_isr+0x532>
    3016:	bhi.w	33ac <usb_isr+0x4fc>
    301a:	cmp	r1, #128	; 0x80
    301c:	beq.w	3668 <usb_isr+0x7b8>
    3020:	cmp	r1, #130	; 0x82
    3022:	bne.w	33ee <usb_isr+0x53e>
    3026:	ldrh	r1, [r5, #4]
    3028:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    302c:	cmp	r1, #5
    302e:	bhi.w	33ee <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3032:	ldr	r3, [pc, #360]	; (319c <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3034:	ldr	r4, [pc, #360]	; (31a0 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3036:	lsls	r1, r1, #2
    3038:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    303a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    303c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    303e:	ldrb	r2, [r3, #0]
    3040:	lsls	r3, r2, #30
    3042:	bpl.w	3778 <usb_isr+0x8c8>
    3046:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    3048:	movs	r0, #2
    304a:	b.n	3476 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    304c:	ldr	r7, [pc, #324]	; (3194 <usb_isr+0x2e4>)
    304e:	ldr	r2, [r7, #0]
		if (data) {
    3050:	cbz	r2, 30a0 <usb_isr+0x1f0>
			size = ep0_tx_len;
    3052:	ldr	r3, [pc, #336]	; (31a4 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3054:	ldr	r6, [pc, #320]	; (3198 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3056:	ldr	r1, [pc, #336]	; (31a8 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3058:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    305a:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    305c:	ldrb	r5, [r1, #0]
    305e:	cmp	r0, #64	; 0x40
    3060:	mov	lr, r0
    3062:	orr.w	r8, r5, #2
    3066:	it	cs
    3068:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    306c:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    306e:	eor.w	r4, r4, #1
    3072:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3074:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3078:	ite	eq
    307a:	moveq	r4, #136	; 0x88
    307c:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    307e:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3082:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3084:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3088:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    308c:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    308e:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3090:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3094:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3096:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3098:	cmp	r0, #0
    309a:	beq.w	320a <usb_isr+0x35a>
    309e:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    30a0:	ldr	r3, [pc, #236]	; (3190 <usb_isr+0x2e0>)
    30a2:	ldrh	r2, [r3, #0]
    30a4:	cmp.w	r2, #1280	; 0x500
    30a8:	bne.n	30ca <usb_isr+0x21a>
			setup.bRequest = 0;
    30aa:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    30ac:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    30ae:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    30b0:	ldr	r3, [pc, #248]	; (31ac <usb_isr+0x2fc>)
    30b2:	strb	r2, [r3, #0]
    30b4:	b.n	30ca <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    30b6:	ldr	r2, [pc, #216]	; (3190 <usb_isr+0x2e0>)
    30b8:	ldrh	r0, [r2, #0]
    30ba:	movw	r2, #8225	; 0x2021
    30be:	cmp	r0, r2
    30c0:	beq.w	3214 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    30c4:	ldr	r2, [pc, #180]	; (317c <usb_isr+0x2cc>)
    30c6:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    30ca:	ldr	r2, [pc, #228]	; (31b0 <usb_isr+0x300>)
    30cc:	movs	r3, #1
    30ce:	strb	r3, [r2, #0]
    30d0:	b.n	2f44 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    30d2:	ldr	r2, [pc, #168]	; (317c <usb_isr+0x2cc>)
    30d4:	ldr	r3, [pc, #168]	; (3180 <usb_isr+0x2d0>)
    30d6:	tst.w	r9, #8
    30da:	it	ne
    30dc:	movne	r3, r2
    30de:	str.w	r3, [r7, r8, lsl #3]
    30e2:	b.n	2f44 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    30e4:	bl	2c90 <usb_free>
				packet = tx_first[endpoint];
    30e8:	ldr	r2, [pc, #200]	; (31b4 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    30ea:	ldr	r1, [pc, #204]	; (31b8 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    30ec:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    30f0:	cmp	r3, #0
    30f2:	beq.w	337c <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    30f6:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    30f8:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    30fa:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    30fe:	add.w	r2, r3, #8
    3102:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    3106:	cmp	r4, #3
    3108:	bhi.n	3116 <usb_isr+0x266>
    310a:	tbb	[pc, r4]
    310e:	.short	0x022c
    3110:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    3112:	movs	r2, #2
    3114:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    3116:	ldrh	r2, [r3, #0]
    3118:	tst.w	r9, #8
    311c:	ite	eq
    311e:	moveq	r3, #136	; 0x88
    3120:	movne	r3, #200	; 0xc8
    3122:	orr.w	r3, r3, r2, lsl #16
    3126:	str.w	r3, [r7, r8, lsl #3]
    312a:	b.n	2f44 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    312c:	lsls	r0, r4, #31
    312e:	bmi.w	3318 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3132:	lsls	r1, r4, #24
    3134:	bmi.w	3398 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3138:	lsls	r2, r4, #30
    313a:	bpl.n	314a <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    313c:	ldr	r2, [pc, #124]	; (31bc <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    313e:	ldr	r1, [pc, #128]	; (31c0 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3140:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3142:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3144:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    3146:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3148:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    314a:	lsls	r3, r4, #27
    314c:	bpl.n	3154 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    314e:	ldr	r3, [pc, #112]	; (31c0 <usb_isr+0x310>)
    3150:	movs	r2, #16
    3152:	strb	r2, [r3, #0]
	}

}
    3154:	add	sp, #28
    3156:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    315a:	movs	r2, #4
    315c:	strb	r2, [r1, r6]
						break;
    315e:	b.n	3116 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3160:	movs	r2, #5
    3162:	strb	r2, [r1, r6]
						break;
    3164:	b.n	3116 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3166:	movs	r2, #3
    3168:	strb	r2, [r1, r6]
						break;
    316a:	b.n	3116 <usb_isr+0x266>
    316c:	.word	0x1fff0000
    3170:	.word	0x1fff1904
    3174:	.word	0x1fff18ac
    3178:	.word	0x1fff1e2c
    317c:	.word	0x004000c8
    3180:	.word	0x00400088
    3184:	.word	0x1fff1998
    3188:	.word	0x1fff1919
    318c:	.word	0x1fff182c
    3190:	.word	0x1fff1984
    3194:	.word	0x1fff18a8
    3198:	.word	0x1fff1918
    319c:	.word	0x400720c0
    31a0:	.word	0x1fff1990
    31a4:	.word	0x1fff18c0
    31a8:	.word	0x1fff198c
    31ac:	.word	0x40072098
    31b0:	.word	0x40072094
    31b4:	.word	0x1fff195c
    31b8:	.word	0x1fff199c
    31bc:	.word	0x40072088
    31c0:	.word	0x40072080
    31c4:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    31c8:	movw	r4, #8225	; 0x2021
    31cc:	cmp	r1, r4
    31ce:	beq.w	330a <usb_isr+0x45a>
    31d2:	bhi.n	3268 <usb_isr+0x3b8>
    31d4:	cmp.w	r1, #2176	; 0x880
    31d8:	beq.w	346e <usb_isr+0x5be>
    31dc:	cmp.w	r1, #2304	; 0x900
    31e0:	bne.w	33ee <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    31e4:	ldr	r2, [pc, #712]	; (34b0 <usb_isr+0x600>)
    31e6:	ldr	r4, [pc, #716]	; (34b4 <usb_isr+0x604>)
    31e8:	ldrb	r1, [r5, #2]
    31ea:	strb	r1, [r2, #0]
    31ec:	add.w	r5, r4, #160	; 0xa0
    31f0:	b.n	31fa <usb_isr+0x34a>
    31f2:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    31f4:	cmp	r5, r4
    31f6:	beq.w	350c <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    31fa:	ldr	r3, [r4, #32]
    31fc:	lsls	r1, r3, #24
    31fe:	bpl.n	31f2 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3200:	ldr	r0, [r4, #36]	; 0x24
    3202:	subs	r0, #8
    3204:	bl	2c90 <usb_free>
    3208:	b.n	31f2 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    320a:	cmp.w	lr, #64	; 0x40
    320e:	it	ne
    3210:	movne	r2, #0
    3212:	b.n	309e <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3214:	ldr	r2, [pc, #672]	; (34b8 <usb_isr+0x608>)
    3216:	ldrb	r5, [r1, #0]
    3218:	ldrb	r0, [r1, #1]
    321a:	strb	r5, [r2, #0]
    321c:	strb	r0, [r2, #1]
    321e:	ldrb	r5, [r1, #2]
    3220:	ldrb	r0, [r1, #3]
    3222:	strb	r5, [r2, #2]
    3224:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3226:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3228:	ldrb	r5, [r1, #4]
    322a:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    322c:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    322e:	ldrb	r5, [r1, #5]
    3230:	ldrb	r1, [r1, #6]
    3232:	strb	r5, [r2, #5]
    3234:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3236:	beq.w	3466 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    323a:	ldr	r1, [pc, #640]	; (34bc <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    323c:	ldr	r6, [pc, #640]	; (34c0 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    323e:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3240:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3242:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3246:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3248:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    324c:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    324e:	ite	eq
    3250:	moveq	r1, #136	; 0x88
    3252:	movne	r1, #200	; 0xc8
    3254:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3258:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    325c:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3260:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3262:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3264:	str	r1, [r2, #4]
    3266:	b.n	30c4 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3268:	movw	r4, #8737	; 0x2221
    326c:	cmp	r1, r4
    326e:	bne.w	3682 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3272:	ldr.w	ip, [pc, #656]	; 3504 <usb_isr+0x654>
    3276:	ldr	r3, [pc, #588]	; (34c4 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3278:	ldr	r1, [pc, #588]	; (34c8 <usb_isr+0x618>)
    327a:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    327c:	ldr.w	r5, [ip]
    3280:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3282:	str	r0, [sp, #4]
    3284:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3286:	movs	r0, #0
    3288:	str	r0, [sp, #8]
    328a:	mov	r8, r0
    328c:	mov	ip, r0
    328e:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3290:	ldr	r1, [pc, #552]	; (34bc <usb_isr+0x60c>)
    3292:	ldrb	r5, [r1, #0]
    3294:	orr.w	lr, r5, #2
    3298:	add.w	r3, r9, lr, lsl #3
    329c:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    329e:	ldr	r3, [sp, #4]
    32a0:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32a2:	ldr	r3, [sp, #12]
    32a4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32a6:	ite	eq
    32a8:	moveq	r4, #136	; 0x88
    32aa:	movne	r4, #200	; 0xc8
    32ac:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    32b0:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32b4:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    32b8:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    32ba:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32bc:	ldr.w	lr, [pc, #500]	; 34b4 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    32c0:	ldr	r3, [pc, #508]	; (34c0 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    32c2:	ldr.w	r8, [pc, #504]	; 34bc <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    32c6:	cmp	r0, #0
    32c8:	bne.w	33fc <usb_isr+0x54c>
    32cc:	cmp.w	ip, #64	; 0x40
    32d0:	bne.n	330a <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32d2:	orr.w	ip, r4, #2
    32d6:	add.w	r3, r9, ip, lsl #3
    32da:	ldr	r4, [sp, #8]
    32dc:	ldr.w	lr, [pc, #468]	; 34b4 <usb_isr+0x604>
    32e0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32e2:	cmp	r2, #0
    32e4:	bne.w	3428 <usb_isr+0x578>
    32e8:	lsls	r2, r0, #16
    32ea:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    32ee:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32f2:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    32f6:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    32f8:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    32fa:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    32fc:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    32fe:	cmp	r0, #64	; 0x40
    3300:	bne.n	330a <usb_isr+0x45a>
    3302:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3304:	ldr	r2, [pc, #452]	; (34cc <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3306:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3308:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    330a:	ldr	r2, [pc, #452]	; (34d0 <usb_isr+0x620>)
    330c:	movs	r3, #1
    330e:	strb	r3, [r2, #0]
    3310:	b.n	30ca <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3312:	bl	2070 <usb_serial_flush_callback>
    3316:	b.n	2f84 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3318:	ldr	r3, [pc, #408]	; (34b4 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    331a:	ldr	r0, [pc, #436]	; (34d0 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    331c:	ldr	r1, [pc, #412]	; (34bc <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    331e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3320:	mov.w	lr, #2
    3324:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3328:	ldr	r7, [pc, #424]	; (34d4 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    332a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    332c:	ldr	r1, [pc, #424]	; (34d8 <usb_isr+0x628>)
    332e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3330:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3332:	ldr	r6, [pc, #424]	; (34dc <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3334:	ldr	r5, [pc, #424]	; (34e0 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3336:	ldr	r4, [pc, #428]	; (34e4 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3338:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    333a:	movs	r1, #13
    333c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    333e:	movs	r1, #255	; 0xff
    3340:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3342:	ldr.w	lr, [pc, #452]	; 3508 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3346:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3348:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    334a:	ldr	r5, [pc, #412]	; (34e8 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    334c:	ldr	r2, [pc, #412]	; (34ec <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    334e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3352:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3354:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3356:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    335a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    335c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    335e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3360:	add	sp, #28
    3362:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3366:	ldr	r2, [pc, #392]	; (34f0 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3368:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    336c:	ldrb	r3, [r2, #0]
    336e:	adds	r3, #1
    3370:	strb	r3, [r2, #0]
    3372:	b.n	2f44 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3374:	str.w	r0, [r3, r6, lsl #2]
    3378:	ldr	r5, [pc, #376]	; (34f4 <usb_isr+0x644>)
    337a:	b.n	2f12 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    337c:	ldrb	r3, [r1, r6]
    337e:	cmp	r3, #3
    3380:	bhi.n	3458 <usb_isr+0x5a8>
    3382:	add	r2, pc, #4	; (adr r2, 3388 <usb_isr+0x4d8>)
    3384:	ldr.w	pc, [r2, r3, lsl #2]
    3388:	.word	0x00002f45
    338c:	.word	0x00002f45
    3390:	.word	0x000033dd
    3394:	.word	0x000033d7
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3398:	ldr	r1, [pc, #312]	; (34d4 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    339a:	ldr	r3, [pc, #324]	; (34e0 <usb_isr+0x630>)
    339c:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    339e:	movs	r0, #13
    33a0:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    33a2:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    33a4:	lsls	r2, r4, #30
    33a6:	bpl.w	314a <usb_isr+0x29a>
    33aa:	b.n	313c <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    33ac:	movw	r2, #770	; 0x302
    33b0:	cmp	r1, r2
    33b2:	bne.w	3672 <usb_isr+0x7c2>
    33b6:	ldrh	r1, [r5, #4]
    33b8:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    33bc:	cmp	r1, #5
    33be:	bhi.n	33ee <usb_isr+0x53e>
    33c0:	ldrh	r2, [r5, #2]
    33c2:	cbnz	r2, 33ee <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    33c4:	ldr	r4, [pc, #268]	; (34d4 <usb_isr+0x624>)
    33c6:	str	r0, [sp, #4]
    33c8:	lsls	r1, r1, #2
    33ca:	add	r4, r1
    33cc:	ldrb	r1, [r4, #0]
    33ce:	orr.w	r1, r1, #2
    33d2:	strb	r1, [r4, #0]
    33d4:	b.n	3286 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    33d6:	movs	r3, #1
    33d8:	strb	r3, [r1, r6]
						break;
    33da:	b.n	2f44 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    33dc:	movs	r3, #0
    33de:	strb	r3, [r1, r6]
						break;
    33e0:	b.n	2f44 <usb_isr+0x94>
    33e2:	ldrh	r1, [r5, #4]
    33e4:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    33e8:	cmp	r1, #5
    33ea:	bls.w	368c <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    33ee:	ldr	r2, [pc, #228]	; (34d4 <usb_isr+0x624>)
    33f0:	movs	r3, #15
    33f2:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    33f4:	ldr	r2, [pc, #216]	; (34d0 <usb_isr+0x620>)
    33f6:	movs	r3, #1
    33f8:	strb	r3, [r2, #0]
    33fa:	b.n	30ca <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    33fc:	cmp	r0, #64	; 0x40
    33fe:	bls.w	32d2 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3402:	orr.w	r4, r4, #2
    3406:	add.w	r1, lr, r4, lsl #3
    340a:	ldr	r6, [sp, #8]
    340c:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    340e:	cbz	r2, 3440 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3410:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3414:	ldr	r2, [pc, #224]	; (34f8 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3416:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3418:	mov	r3, r6
    341a:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    341c:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3420:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3422:	str.w	r2, [lr, r4, lsl #3]
    3426:	b.n	3304 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3428:	ldrb.w	r3, [sp, #4]
    342c:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    342e:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3430:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3432:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3434:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3438:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    343a:	str.w	r2, [lr, ip, lsl #3]
    343e:	b.n	32fe <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3440:	ldrb.w	r1, [sp, #4]
    3444:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3446:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3448:	ldr	r2, [pc, #140]	; (34d8 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    344a:	strb.w	r5, [r8]
    344e:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3450:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3452:	str.w	r2, [lr, r4, lsl #3]
    3456:	b.n	3304 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3458:	tst.w	r9, #8
    345c:	ite	eq
    345e:	moveq	r3, #2
    3460:	movne	r3, #3
    3462:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3464:	b.n	2f44 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3466:	ldr	r2, [pc, #148]	; (34fc <usb_isr+0x64c>)
    3468:	movs	r1, #15
    346a:	strb	r1, [r2, #0]
    346c:	b.n	323a <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    346e:	ldr	r2, [pc, #64]	; (34b0 <usb_isr+0x600>)
    3470:	ldr	r4, [pc, #140]	; (3500 <usb_isr+0x650>)
    3472:	ldrb	r2, [r2, #0]
    3474:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3476:	ldrh	r2, [r5, #6]
    3478:	cmp	r2, r0
    347a:	bcs.w	3840 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    347e:	ldr	r1, [pc, #60]	; (34bc <usb_isr+0x60c>)
    3480:	ldrb	r5, [r1, #0]
    3482:	cmp	r2, #64	; 0x40
    3484:	mov	ip, r2
    3486:	orr.w	lr, r5, #2
    348a:	it	cs
    348c:	movcs.w	ip, #64	; 0x40
    3490:	add.w	r3, r4, ip
    3494:	add.w	r0, r9, lr, lsl #3
    3498:	str	r3, [sp, #8]
    349a:	movs	r3, #1
    349c:	str	r4, [r0, #4]
    349e:	mov.w	r8, ip, lsl #16
    34a2:	rsb	r0, ip, r2
    34a6:	str	r3, [sp, #4]
    34a8:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34aa:	movs	r4, #200	; 0xc8
    34ac:	b.n	32ac <usb_isr+0x3fc>
    34ae:	nop
    34b0:	.word	0x1fff1998
    34b4:	.word	0x1fff0000
    34b8:	.word	0x1fff1cf4
    34bc:	.word	0x1fff198c
    34c0:	.word	0x1fff1918
    34c4:	.word	0x1fff1cfc
    34c8:	.word	0x1fff183c
    34cc:	.word	0x1fff18c0
    34d0:	.word	0x40072094
    34d4:	.word	0x400720c0
    34d8:	.word	0x00400088
    34dc:	.word	0x40072088
    34e0:	.word	0x40072080
    34e4:	.word	0x40072098
    34e8:	.word	0x1fff18c4
    34ec:	.word	0x1fff191c
    34f0:	.word	0x1fff198d
    34f4:	.word	0x1fff18ac
    34f8:	.word	0x004000c8
    34fc:	.word	0x1fff1919
    3500:	.word	0x1fff1990
    3504:	.word	0x1fff1844
    3508:	.word	0x4007208c
    350c:	ldr	r4, [pc, #704]	; (37d0 <usb_isr+0x920>)
    350e:	ldr	r2, [pc, #708]	; (37d4 <usb_isr+0x924>)
    3510:	ldr	r1, [pc, #708]	; (37d8 <usb_isr+0x928>)
    3512:	ldr	r0, [pc, #712]	; (37dc <usb_isr+0x92c>)
    3514:	ldr	r5, [pc, #712]	; (37e0 <usb_isr+0x930>)
    3516:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3518:	movs	r3, #0
    351a:	ldr	r4, [pc, #712]	; (37e4 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    351c:	str	r4, [sp, #8]
    351e:	str	r6, [sp, #20]
    3520:	str	r5, [sp, #12]
    3522:	mov	r8, r0
    3524:	mov	r4, r3
    3526:	str	r7, [sp, #16]
    3528:	mov	r6, r2
    352a:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    352c:	ldr	r0, [r6, #0]
			while (p) {
    352e:	cbz	r0, 353c <usb_isr+0x68c>
				n = p->next;
    3530:	ldr	r7, [r0, #4]
				usb_free(p);
    3532:	bl	2c90 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3536:	mov	r0, r7
    3538:	cmp	r7, #0
    353a:	bne.n	3530 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    353c:	movs	r3, #0
    353e:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3540:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3542:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3544:	mov	r2, r3
    3546:	movs	r3, #0
    3548:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    354c:	cbz	r0, 355a <usb_isr+0x6aa>
				n = p->next;
    354e:	ldr	r7, [r0, #4]
				usb_free(p);
    3550:	bl	2c90 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3554:	mov	r0, r7
    3556:	cmp	r7, #0
    3558:	bne.n	354e <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    355a:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    355c:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    355e:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3560:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3562:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3566:	ldr	r2, [sp, #8]
    3568:	mov.w	r1, #0
			switch (tx_state[i]) {
    356c:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    356e:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3572:	cmp	r3, #3
    3574:	bhi.n	3586 <usb_isr+0x6d6>
    3576:	tbb	[pc, r3]
    357a:	.short	0x0258
    357c:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    357e:	ldr	r3, [sp, #4]
    3580:	mov.w	r2, #1
    3584:	strb	r2, [r3, #0]
    3586:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3588:	adds	r4, #1
    358a:	adds	r3, #1
    358c:	cmp	r4, #5
    358e:	add.w	r6, r6, #4
    3592:	add.w	r5, r5, #4
    3596:	str	r3, [sp, #4]
    3598:	bne.n	352c <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    359a:	ldr	r4, [pc, #588]	; (37e8 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    359c:	ldr	r5, [pc, #588]	; (37ec <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    359e:	ldrb	r2, [r4, #0]
			*reg = epconf;
    35a0:	ldr	r3, [pc, #588]	; (37f0 <usb_isr+0x940>)
    35a2:	ldr	r7, [sp, #16]
    35a4:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    35a6:	movs	r1, #0
    35a8:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35aa:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35ac:	lsls	r2, r2, #28
    35ae:	bmi.n	36a6 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35b0:	ldrb	r2, [r4, #1]
			*reg = epconf;
    35b2:	ldr	r1, [pc, #576]	; (37f4 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35b4:	ldr.w	r8, [pc, #588]	; 3804 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35b8:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35ba:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35bc:	mov.w	r1, #0
    35c0:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    35c4:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35c8:	bmi.w	3752 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35cc:	ldrb	r2, [r4, #2]
			*reg = epconf;
    35ce:	ldr	r1, [pc, #552]	; (37f8 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35d0:	ldr.w	r8, [pc, #560]	; 3804 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35d4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35d6:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35d8:	mov.w	r1, #0
    35dc:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    35e0:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35e4:	bmi.w	372a <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35e8:	ldr	r1, [pc, #528]	; (37fc <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35ea:	ldrb	r2, [r4, #3]
			*reg = epconf;
    35ec:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35ee:	movs	r1, #0
    35f0:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    35f4:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35f8:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35fa:	ldr.w	r8, [pc, #520]	; 3804 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35fe:	bmi.n	36fc <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3600:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3602:	ldr	r1, [pc, #508]	; (3800 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3604:	ldr	r4, [pc, #508]	; (3804 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3606:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3608:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    360a:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    360c:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3610:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3614:	bmi.n	36d2 <usb_isr+0x822>
    3616:	ldrb	r3, [r6, #0]
    3618:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    361a:	movs	r1, #0
    361c:	eor.w	r2, r3, #1
    3620:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3624:	str.w	r1, [r9, #184]	; 0xb8
    3628:	b.n	3286 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    362a:	ldr	r3, [sp, #4]
    362c:	mov.w	r2, #0
    3630:	strb	r2, [r3, #0]
    3632:	b.n	3586 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3634:	ldr	r2, [pc, #464]	; (3808 <usb_isr+0x958>)
    3636:	ldr	r4, [r2, #4]
    3638:	cmp	r4, #0
    363a:	beq.w	33ee <usb_isr+0x53e>
    363e:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3640:	ldrh.w	lr, [r5, #4]
    3644:	b.n	3650 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3646:	adds	r2, #12
			if (list->addr == NULL) break;
    3648:	ldr	r4, [r2, #4]
    364a:	cmp	r4, #0
    364c:	beq.w	33ee <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3650:	ldrh	r3, [r2, #0]
    3652:	cmp	r3, r0
    3654:	bne.n	3646 <usb_isr+0x796>
    3656:	ldrh	r3, [r2, #2]
    3658:	cmp	r3, lr
    365a:	bne.n	3646 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    365c:	lsrs	r0, r0, #8
    365e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3660:	ite	eq
    3662:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3664:	ldrhne	r0, [r2, #8]
    3666:	b.n	3476 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3668:	ldr	r4, [pc, #416]	; (380c <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    366a:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    366c:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    366e:	strb	r2, [r4, #1]
    3670:	b.n	3476 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3672:	cmp.w	r1, #1280	; 0x500
    3676:	bne.w	33ee <usb_isr+0x53e>
    367a:	movs	r3, #1
    367c:	movs	r2, #0
    367e:	str	r3, [sp, #4]
    3680:	b.n	3286 <usb_isr+0x3d6>
    3682:	movw	r2, #8993	; 0x2321
    3686:	cmp	r1, r2
    3688:	beq.n	367a <usb_isr+0x7ca>
    368a:	b.n	33ee <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    368c:	ldrh	r2, [r5, #2]
    368e:	cmp	r2, #0
    3690:	bne.w	33ee <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3694:	ldr	r4, [pc, #376]	; (3810 <usb_isr+0x960>)
    3696:	str	r0, [sp, #4]
    3698:	lsls	r1, r1, #2
    369a:	add	r4, r1
    369c:	ldrb	r1, [r4, #0]
    369e:	bic.w	r1, r1, #2
    36a2:	strb	r1, [r4, #0]
    36a4:	b.n	3286 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    36a6:	bl	2c50 <usb_malloc>
				if (p) {
    36aa:	cmp	r0, #0
    36ac:	beq.w	381c <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    36b0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36b2:	ldr	r2, [pc, #352]	; (3814 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    36b4:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36b8:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    36bc:	bl	2c50 <usb_malloc>
				if (p) {
    36c0:	cmp	r0, #0
    36c2:	beq.n	37c4 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    36c4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    36c6:	ldr	r2, [pc, #336]	; (3818 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    36c8:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    36cc:	str.w	r2, [r9, #40]	; 0x28
    36d0:	b.n	35b0 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    36d2:	bl	2c50 <usb_malloc>
				if (p) {
    36d6:	cmp	r0, #0
    36d8:	beq.n	3788 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    36da:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36dc:	ldr	r2, [pc, #308]	; (3814 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    36de:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36e2:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    36e6:	bl	2c50 <usb_malloc>
				if (p) {
    36ea:	cmp	r0, #0
    36ec:	beq.n	377c <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    36ee:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    36f0:	ldr	r2, [pc, #292]	; (3818 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    36f2:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    36f6:	str.w	r2, [r9, #168]	; 0xa8
    36fa:	b.n	3616 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    36fc:	bl	2c50 <usb_malloc>
				if (p) {
    3700:	cmp	r0, #0
    3702:	beq.w	3834 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3706:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3708:	ldr	r2, [pc, #264]	; (3814 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    370a:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    370e:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3712:	bl	2c50 <usb_malloc>
				if (p) {
    3716:	cmp	r0, #0
    3718:	beq.w	3828 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    371c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    371e:	ldr	r2, [pc, #248]	; (3818 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3720:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3724:	str.w	r2, [r9, #136]	; 0x88
    3728:	b.n	3600 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    372a:	bl	2c50 <usb_malloc>
				if (p) {
    372e:	cmp	r0, #0
    3730:	beq.n	37b8 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3732:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3734:	ldr	r2, [pc, #220]	; (3814 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3736:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    373a:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    373e:	bl	2c50 <usb_malloc>
				if (p) {
    3742:	cbz	r0, 37ac <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3744:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3746:	ldr	r2, [pc, #208]	; (3818 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3748:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    374c:	str.w	r2, [r9, #104]	; 0x68
    3750:	b.n	35e8 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3752:	bl	2c50 <usb_malloc>
				if (p) {
    3756:	cbz	r0, 37a0 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3758:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    375a:	ldr	r2, [pc, #184]	; (3814 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    375c:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3760:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3764:	bl	2c50 <usb_malloc>
				if (p) {
    3768:	cbz	r0, 3794 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    376a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    376c:	ldr	r2, [pc, #168]	; (3818 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    376e:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3772:	str.w	r2, [r9, #72]	; 0x48
    3776:	b.n	35cc <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3778:	movs	r0, #2
    377a:	b.n	3476 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    377c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    377e:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3782:	adds	r2, #1
    3784:	strb	r2, [r5, #0]
    3786:	b.n	3616 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3788:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    378a:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    378e:	adds	r2, #1
    3790:	strb	r2, [r5, #0]
    3792:	b.n	36e6 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3794:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3796:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    379a:	adds	r2, #1
    379c:	strb	r2, [r5, #0]
    379e:	b.n	35cc <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    37a0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    37a2:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    37a6:	adds	r2, #1
    37a8:	strb	r2, [r5, #0]
    37aa:	b.n	3764 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    37ac:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    37ae:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    37b2:	adds	r2, #1
    37b4:	strb	r2, [r5, #0]
    37b6:	b.n	35e8 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    37b8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    37ba:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    37be:	adds	r2, #1
    37c0:	strb	r2, [r5, #0]
    37c2:	b.n	373e <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    37c4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    37c6:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    37ca:	adds	r2, #1
    37cc:	strb	r2, [r5, #0]
    37ce:	b.n	35b0 <usb_isr+0x700>
    37d0:	.word	0x1fff199c
    37d4:	.word	0x1fff1904
    37d8:	.word	0x1fff195c
    37dc:	.word	0x1fff1970
    37e0:	.word	0x1fff18ac
    37e4:	.word	0x1fff1e2c
    37e8:	.word	0x000050bc
    37ec:	.word	0x1fff198d
    37f0:	.word	0x400720c4
    37f4:	.word	0x400720c8
    37f8:	.word	0x400720cc
    37fc:	.word	0x400720d0
    3800:	.word	0x400720d4
    3804:	.word	0x1fff0000
    3808:	.word	0x000050c4
    380c:	.word	0x1fff1990
    3810:	.word	0x400720c0
    3814:	.word	0x00400088
    3818:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    381c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    381e:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3822:	adds	r2, #1
    3824:	strb	r2, [r5, #0]
    3826:	b.n	36bc <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3828:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    382a:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    382e:	adds	r2, #1
    3830:	strb	r2, [r5, #0]
    3832:	b.n	3600 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3834:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3836:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    383a:	adds	r2, #1
    383c:	strb	r2, [r5, #0]
    383e:	b.n	3712 <usb_isr+0x862>
    3840:	cmp	r0, #64	; 0x40
    3842:	mov	ip, r0
    3844:	it	cs
    3846:	movcs.w	ip, #64	; 0x40
    384a:	add.w	r3, r4, ip
    384e:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3850:	movs	r3, #1
    3852:	rsb	r0, ip, r0
    3856:	mov.w	r8, ip, lsl #16
    385a:	movs	r2, #0
    385c:	str	r3, [sp, #4]
    385e:	b.n	3290 <usb_isr+0x3e0>

00003860 <usb_init>:
}



void usb_init(void)
{
    3860:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3864:	ldr	r4, [pc, #156]	; (3904 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3866:	bl	40a0 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    386a:	movs	r2, #0
    386c:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3870:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3872:	str	r2, [r3, #0]
		table[i].addr = 0;
    3874:	str	r2, [r3, #4]
    3876:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3878:	cmp	r3, r0
		table[i].desc = 0;
    387a:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    387e:	bne.n	3872 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3880:	ldr	r0, [pc, #132]	; (3908 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3882:	ldr	r2, [pc, #136]	; (390c <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3884:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3886:	ldr.w	lr, [pc, #156]	; 3924 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    388a:	ldr	r6, [pc, #132]	; (3910 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    388c:	ldr	r5, [pc, #132]	; (3914 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    388e:	ldr	r7, [pc, #136]	; (3918 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3890:	ldr.w	ip, [pc, #148]	; 3928 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3894:	ldr.w	r8, [pc, #148]	; 392c <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3898:	orr.w	r3, r3, #262144	; 0x40000
    389c:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    389e:	ldr	r3, [r2, #0]
    38a0:	orr.w	r3, r3, #50331648	; 0x3000000
    38a4:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    38a6:	movs	r3, #3
    38a8:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    38ac:	movs	r3, #160	; 0xa0
    38ae:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    38b0:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    38b4:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38b8:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    38bc:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38be:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    38c0:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    38c4:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    38c6:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38c8:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    38ca:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38cc:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    38ce:	ldr	r5, [pc, #76]	; (391c <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    38d0:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    38d4:	ldr	r0, [pc, #72]	; (3920 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    38d6:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    38da:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    38dc:	movs	r3, #1
    38de:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    38e2:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    38e6:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    38ea:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    38ec:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    38ee:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    38f2:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    38f4:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    38f6:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    38fa:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    38fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3902:	nop
    3904:	.word	0x1fff0000
    3908:	.word	0x40048034
    390c:	.word	0x4000d800
    3910:	.word	0x40072140
    3914:	.word	0x4007209c
    3918:	.word	0x400720b0
    391c:	.word	0xe000e435
    3920:	.word	0xe000e104
    3924:	.word	0x40072144
    3928:	.word	0x40072080
    392c:	.word	0x40072088

00003930 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3930:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3932:	ldr	r4, [pc, #176]	; (39e4 <yield+0xb4>)
    3934:	ldrb	r3, [r4, #0]
    3936:	cbz	r3, 393a <yield+0xa>
    3938:	pop	{r3, r4, r5, pc}
	running = 1;
    393a:	movs	r3, #1
    393c:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    393e:	bl	1e5c <usb_serial_available>
	if (Serial.available()) serialEvent();
    3942:	cmp	r0, #0
    3944:	bne.n	39cc <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3946:	bl	3e70 <serial_available>
	if (Serial1.available()) serialEvent1();
    394a:	cmp	r0, #0
    394c:	bne.n	39c6 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    394e:	bl	3b58 <serial2_available>
	if (Serial2.available()) serialEvent2();
    3952:	cmp	r0, #0
    3954:	bne.n	39c0 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3956:	bl	4170 <serial3_available>
	if (Serial3.available()) serialEvent3();
    395a:	cbnz	r0, 39ba <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    395c:	bl	3c84 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3960:	cbnz	r0, 39b4 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    3962:	bl	3a60 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3966:	cbnz	r0, 39ae <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3968:	bl	3f9c <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    396c:	cbnz	r0, 39a8 <yield+0x78>
#endif
	running = 0;
    396e:	movs	r3, #0
    3970:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3972:	mrs	r3, IPSR
		if (ipsr != 0) return;
    3976:	cmp	r3, #0
    3978:	bne.n	3938 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    397a:	mrs	r1, PRIMASK
		__disable_irq();
    397e:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3980:	ldr	r3, [pc, #100]	; (39e8 <yield+0xb8>)
    3982:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3984:	cbz	r0, 39d2 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3986:	ldr	r4, [pc, #100]	; (39ec <yield+0xbc>)
    3988:	ldrb	r2, [r4, #0]
    398a:	cbnz	r2, 39d2 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    398c:	ldr	r5, [r0, #20]
    398e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3990:	movs	r3, #1
    3992:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3994:	cbz	r5, 39da <yield+0xaa>
			firstYield->_prev = nullptr;
    3996:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3998:	cbnz	r1, 399c <yield+0x6c>
    399a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    399c:	movs	r5, #0
    399e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    39a0:	ldr	r3, [r0, #8]
    39a2:	blx	r3
		runningFromYield = false;
    39a4:	strb	r5, [r4, #0]
    39a6:	b.n	3938 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    39a8:	bl	3a5c <serialEvent6()>
    39ac:	b.n	396e <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    39ae:	bl	39f4 <serialEvent5()>
    39b2:	b.n	3968 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    39b4:	bl	3a48 <serialEvent4()>
    39b8:	b.n	3962 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    39ba:	bl	426c <serialEvent3()>
    39be:	b.n	395c <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    39c0:	bl	3a44 <serialEvent2()>
    39c4:	b.n	3956 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    39c6:	bl	4268 <serialEvent1()>
    39ca:	b.n	394e <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    39cc:	bl	3a20 <serialEvent()>
    39d0:	b.n	3946 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39d2:	cmp	r1, #0
    39d4:	bne.n	3938 <yield+0x8>
    39d6:	cpsie	i
    39d8:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    39da:	ldr	r3, [pc, #20]	; (39f0 <yield+0xc0>)
    39dc:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39de:	cmp	r1, #0
    39e0:	bne.n	399c <yield+0x6c>
    39e2:	b.n	399a <yield+0x6a>
    39e4:	.word	0x1fff19a1
    39e8:	.word	0x1fff1cb4
    39ec:	.word	0x1fff1cb8
    39f0:	.word	0x1fff1cb0

000039f4 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    39f4:	bx	lr
    39f6:	nop

000039f8 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    39f8:	b.w	1e78 <usb_serial_flush_input>

000039fc <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    39fc:	b.w	1e2c <usb_serial_peekchar>

00003a00 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3a00:	b.w	1de4 <usb_serial_getchar>

00003a04 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3a04:	b.w	1e5c <usb_serial_available>

00003a08 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3a08:	b.w	2018 <usb_serial_flush_output>

00003a0c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3a0c:	b.w	1fd0 <usb_serial_write_buffer_free>

00003a10 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3a10:	mov	r0, r1
    3a12:	mov	r1, r2
    3a14:	b.w	1eb0 <usb_serial_write>

00003a18 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3a18:	mov	r0, r1
    3a1a:	b.w	1fb8 <usb_serial_putchar>
    3a1e:	nop

00003a20 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3a20:	bx	lr
    3a22:	nop

00003a24 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3a24:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3a26:	ldr	r2, [pc, #24]	; (3a40 <Print::println()+0x1c>)
	return write(buf, 2);
    3a28:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3a2a:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3a2c:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3a2e:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3a30:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3a32:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3a36:	movs	r2, #2
    3a38:	blx	r3
}
    3a3a:	add	sp, #12
    3a3c:	ldr.w	pc, [sp], #4
    3a40:	.word	0x000050b8

00003a44 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3a44:	bx	lr
    3a46:	nop

00003a48 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3a48:	bx	lr
    3a4a:	nop

00003a4c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3a4c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3a4e:	bl	490 <setup>
	while (1) {
		loop();
    3a52:	bl	494 <loop>
		yield();
    3a56:	bl	3930 <yield>
    3a5a:	b.n	3a52 <main+0x6>

00003a5c <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3a5c:	bx	lr
    3a5e:	nop

00003a60 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a60:	ldr	r2, [pc, #20]	; (3a78 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3a62:	ldr	r3, [pc, #24]	; (3a7c <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a64:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3a66:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a68:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3a6a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3a6c:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3a6e:	it	cc
    3a70:	addcc	r0, #64	; 0x40
    3a72:	subs	r0, r0, r3
}
    3a74:	bx	lr
    3a76:	nop
    3a78:	.word	0x1fff19a8
    3a7c:	.word	0x1fff19a9

00003a80 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3a80:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3a82:	ldr	r3, [pc, #172]	; (3b30 <uart4_status_isr+0xb0>)
    3a84:	ldrb	r2, [r3, #4]
    3a86:	lsls	r4, r2, #26
    3a88:	bpl.n	3aca <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3a8a:	ldr	r0, [pc, #168]	; (3b34 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3a8c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3a8e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a90:	ldr	r1, [pc, #164]	; (3b38 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3a92:	adds	r3, #1
    3a94:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a96:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3a98:	it	gt
    3a9a:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a9c:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3a9e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3aa0:	beq.n	3aaa <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    3aa2:	ldr	r4, [pc, #152]	; (3b3c <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    3aa4:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3aa6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3aa8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3aaa:	ldr	r2, [pc, #148]	; (3b40 <uart4_status_isr+0xc0>)
    3aac:	ldr	r1, [r2, #0]
    3aae:	cbz	r1, 3aca <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3ab0:	ldr	r2, [pc, #144]	; (3b44 <uart4_status_isr+0xc4>)
    3ab2:	ldrb	r2, [r2, #0]
    3ab4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3ab6:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3ab8:	itet	cc
    3aba:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3abe:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3ac0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ac2:	cmp	r3, #39	; 0x27
    3ac4:	itt	gt
    3ac6:	movgt	r3, #1
    3ac8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    3aca:	ldr	r2, [pc, #100]	; (3b30 <uart4_status_isr+0xb0>)
    3acc:	ldrb	r3, [r2, #3]
    3ace:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3ad0:	lsls	r0, r3, #24
    3ad2:	bmi.n	3af8 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3ad4:	lsls	r2, r3, #25
    3ad6:	bpl.n	3af4 <uart4_status_isr+0x74>
    3ad8:	ldr	r3, [pc, #84]	; (3b30 <uart4_status_isr+0xb0>)
    3ada:	ldrb	r3, [r3, #4]
    3adc:	lsls	r3, r3, #25
    3ade:	bpl.n	3af4 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3ae0:	ldr	r3, [pc, #100]	; (3b48 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ae2:	ldr	r1, [pc, #104]	; (3b4c <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3ae4:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ae6:	movs	r2, #0
    3ae8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3aea:	cbz	r3, 3aee <uart4_status_isr+0x6e>
    3aec:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    3aee:	ldr	r3, [pc, #64]	; (3b30 <uart4_status_isr+0xb0>)
    3af0:	movs	r2, #44	; 0x2c
    3af2:	strb	r2, [r3, #3]
	}
}
    3af4:	pop	{r4, r5}
    3af6:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3af8:	ldrb	r1, [r2, #4]
    3afa:	lsls	r1, r1, #24
    3afc:	bpl.n	3ad4 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3afe:	ldr	r1, [pc, #80]	; (3b50 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3b00:	ldr	r0, [pc, #64]	; (3b44 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3b02:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3b04:	ldrb	r1, [r0, #0]
    3b06:	uxtb	r1, r1
		if (head == tail) {
    3b08:	cmp	r4, r1
    3b0a:	beq.n	3b28 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3b0c:	adds	r2, r1, #1
    3b0e:	cmp	r2, #39	; 0x27
    3b10:	itt	hi
    3b12:	movhi	r1, #0
    3b14:	movhi	r2, r1
			n = tx_buffer[tail];
    3b16:	ldr	r5, [pc, #60]	; (3b54 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3b18:	ldr	r4, [pc, #20]	; (3b30 <uart4_status_isr+0xb0>)
    3b1a:	it	ls
    3b1c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3b1e:	ldrb	r2, [r5, r2]
    3b20:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3b22:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3b24:	strb	r1, [r0, #0]
    3b26:	b.n	3ad4 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3b28:	movs	r1, #108	; 0x6c
    3b2a:	strb	r1, [r2, #3]
    3b2c:	b.n	3ad4 <uart4_status_isr+0x54>
    3b2e:	nop
    3b30:	.word	0x400ea000
    3b34:	.word	0x1fff19a8
    3b38:	.word	0x1fff19a9
    3b3c:	.word	0x1fff19d4
    3b40:	.word	0x1fff19a4
    3b44:	.word	0x1fff1a15
    3b48:	.word	0x1fff1a18
    3b4c:	.word	0x1fff1a14
    3b50:	.word	0x1fff1a1c
    3b54:	.word	0x1fff19ac

00003b58 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b58:	ldr	r2, [pc, #20]	; (3b70 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3b5a:	ldr	r3, [pc, #24]	; (3b74 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b5c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3b5e:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b60:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3b62:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3b64:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3b66:	it	cc
    3b68:	addcc	r0, #64	; 0x40
    3b6a:	subs	r0, r0, r3
}
    3b6c:	bx	lr
    3b6e:	nop
    3b70:	.word	0x1fff1a90
    3b74:	.word	0x1fff1a25

00003b78 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3b78:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3b7a:	ldr	r3, [pc, #224]	; (3c5c <uart1_status_isr+0xe4>)
    3b7c:	ldrb	r2, [r3, #4]
    3b7e:	tst.w	r2, #48	; 0x30
    3b82:	beq.n	3bde <uart1_status_isr+0x66>
		__disable_irq();
    3b84:	cpsid	i
		avail = UART1_RCFIFO;
    3b86:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3b88:	and.w	r2, r1, #255	; 0xff
    3b8c:	cmp	r1, #0
    3b8e:	beq.n	3c0c <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3b90:	cpsie	i
			head = rx_buffer_head;
    3b92:	ldr	r7, [pc, #204]	; (3c60 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3b94:	ldr	r1, [pc, #204]	; (3c64 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3b96:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3b98:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3b9a:	ldr	r6, [pc, #204]	; (3c68 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3b9c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3b9e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3ba0:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3ba2:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3ba4:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3ba6:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3ba8:	it	cs
    3baa:	movcs	r3, #0
				if (newhead != tail) {
    3bac:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3bae:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3bb2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3bb4:	itt	ne
    3bb6:	strbne	r1, [r6, r3]
    3bb8:	movne	r0, r3
				}
			} while (--avail > 0);
    3bba:	ands.w	r2, r2, #255	; 0xff
    3bbe:	bne.n	3ba2 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3bc0:	ldr	r3, [pc, #168]	; (3c6c <uart1_status_isr+0xf4>)
    3bc2:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3bc4:	uxtb	r2, r0
    3bc6:	strb	r2, [r7, #0]
			if (rts_pin) {
    3bc8:	cbz	r3, 3bde <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3bca:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3bcc:	itet	cc
    3bce:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3bd2:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3bd4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3bd6:	cmp	r0, #39	; 0x27
    3bd8:	itt	gt
    3bda:	movgt	r2, #1
    3bdc:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3bde:	ldr	r1, [pc, #124]	; (3c5c <uart1_status_isr+0xe4>)
    3be0:	ldrb	r2, [r1, #3]
    3be2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3be4:	lsls	r5, r2, #24
    3be6:	bmi.n	3c16 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    3be8:	lsls	r2, r2, #25
    3bea:	bpl.n	3c08 <uart1_status_isr+0x90>
    3bec:	ldr	r3, [pc, #108]	; (3c5c <uart1_status_isr+0xe4>)
    3bee:	ldrb	r3, [r3, #4]
    3bf0:	lsls	r3, r3, #25
    3bf2:	bpl.n	3c08 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3bf4:	ldr	r3, [pc, #120]	; (3c70 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3bf6:	ldr	r1, [pc, #124]	; (3c74 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3bf8:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3bfa:	movs	r2, #0
    3bfc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3bfe:	cbz	r3, 3c02 <uart1_status_isr+0x8a>
    3c00:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3c02:	ldr	r3, [pc, #88]	; (3c5c <uart1_status_isr+0xe4>)
    3c04:	movs	r2, #60	; 0x3c
    3c06:	strb	r2, [r3, #3]
	}
}
    3c08:	pop	{r4, r5, r6, r7}
    3c0a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3c0c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3c0e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3c10:	strb	r2, [r3, #17]
			__enable_irq();
    3c12:	cpsie	i
    3c14:	b.n	3bde <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3c16:	ldrb	r3, [r1, #4]
    3c18:	lsls	r4, r3, #24
    3c1a:	bpl.n	3be8 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3c1c:	ldr	r3, [pc, #88]	; (3c78 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3c1e:	ldr	r6, [pc, #92]	; (3c7c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c20:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3c22:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c24:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3c26:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3c28:	cmp	r4, r3
    3c2a:	beq.n	3c4a <uart1_status_isr+0xd2>
    3c2c:	ldr	r5, [pc, #80]	; (3c80 <uart1_status_isr+0x108>)
    3c2e:	b.n	3c34 <uart1_status_isr+0xbc>
    3c30:	cmp	r3, r4
    3c32:	beq.n	3c4a <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3c34:	adds	r3, #1
    3c36:	cmp	r3, #40	; 0x28
    3c38:	it	cs
    3c3a:	movcs	r3, #0
			avail = UART1_S1;
    3c3c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3c3e:	ldrb	r0, [r5, r3]
    3c40:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3c42:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3c44:	ldrb	r0, [r1, #20]
    3c46:	cmp	r0, #7
    3c48:	bls.n	3c30 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3c4a:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3c4c:	ldr	r1, [pc, #12]	; (3c5c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3c4e:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3c50:	ldrb	r3, [r1, #4]
    3c52:	lsls	r0, r3, #24
    3c54:	itt	mi
    3c56:	movmi	r3, #124	; 0x7c
    3c58:	strbmi	r3, [r1, #3]
    3c5a:	b.n	3be8 <uart1_status_isr+0x70>
    3c5c:	.word	0x4006b000
    3c60:	.word	0x1fff1a90
    3c64:	.word	0x1fff1a25
    3c68:	.word	0x1fff1a50
    3c6c:	.word	0x1fff1a20
    3c70:	.word	0x1fff1a94
    3c74:	.word	0x1fff1a24
    3c78:	.word	0x1fff1a98
    3c7c:	.word	0x1fff1a91
    3c80:	.word	0x1fff1a28

00003c84 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c84:	ldr	r2, [pc, #20]	; (3c9c <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3c86:	ldr	r3, [pc, #24]	; (3ca0 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c88:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3c8a:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c8c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3c8e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3c90:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3c92:	it	cc
    3c94:	addcc	r0, #64	; 0x40
    3c96:	subs	r0, r0, r3
}
    3c98:	bx	lr
    3c9a:	nop
    3c9c:	.word	0x1fff1aa0
    3ca0:	.word	0x1fff1aa1

00003ca4 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3ca4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3ca6:	ldr	r3, [pc, #172]	; (3d54 <uart3_status_isr+0xb0>)
    3ca8:	ldrb	r2, [r3, #4]
    3caa:	lsls	r4, r2, #26
    3cac:	bpl.n	3cee <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3cae:	ldr	r0, [pc, #168]	; (3d58 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3cb0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3cb2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cb4:	ldr	r1, [pc, #164]	; (3d5c <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3cb6:	adds	r3, #1
    3cb8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cba:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3cbc:	it	gt
    3cbe:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cc0:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3cc2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cc4:	beq.n	3cce <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3cc6:	ldr	r4, [pc, #152]	; (3d60 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3cc8:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3cca:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3ccc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3cce:	ldr	r2, [pc, #148]	; (3d64 <uart3_status_isr+0xc0>)
    3cd0:	ldr	r1, [r2, #0]
    3cd2:	cbz	r1, 3cee <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3cd4:	ldr	r2, [pc, #144]	; (3d68 <uart3_status_isr+0xc4>)
    3cd6:	ldrb	r2, [r2, #0]
    3cd8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3cda:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3cdc:	itet	cc
    3cde:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3ce2:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3ce4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ce6:	cmp	r3, #39	; 0x27
    3ce8:	itt	gt
    3cea:	movgt	r3, #1
    3cec:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3cee:	ldr	r2, [pc, #100]	; (3d54 <uart3_status_isr+0xb0>)
    3cf0:	ldrb	r3, [r2, #3]
    3cf2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3cf4:	lsls	r0, r3, #24
    3cf6:	bmi.n	3d1c <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3cf8:	lsls	r2, r3, #25
    3cfa:	bpl.n	3d18 <uart3_status_isr+0x74>
    3cfc:	ldr	r3, [pc, #84]	; (3d54 <uart3_status_isr+0xb0>)
    3cfe:	ldrb	r3, [r3, #4]
    3d00:	lsls	r3, r3, #25
    3d02:	bpl.n	3d18 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3d04:	ldr	r3, [pc, #100]	; (3d6c <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d06:	ldr	r1, [pc, #104]	; (3d70 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3d08:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d0a:	movs	r2, #0
    3d0c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3d0e:	cbz	r3, 3d12 <uart3_status_isr+0x6e>
    3d10:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3d12:	ldr	r3, [pc, #64]	; (3d54 <uart3_status_isr+0xb0>)
    3d14:	movs	r2, #44	; 0x2c
    3d16:	strb	r2, [r3, #3]
	}
}
    3d18:	pop	{r4, r5}
    3d1a:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3d1c:	ldrb	r1, [r2, #4]
    3d1e:	lsls	r1, r1, #24
    3d20:	bpl.n	3cf8 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3d22:	ldr	r1, [pc, #80]	; (3d74 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3d24:	ldr	r0, [pc, #64]	; (3d68 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d26:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3d28:	ldrb	r1, [r0, #0]
    3d2a:	uxtb	r1, r1
		if (head == tail) {
    3d2c:	cmp	r4, r1
    3d2e:	beq.n	3d4c <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3d30:	adds	r2, r1, #1
    3d32:	cmp	r2, #39	; 0x27
    3d34:	itt	hi
    3d36:	movhi	r1, #0
    3d38:	movhi	r2, r1
			n = tx_buffer[tail];
    3d3a:	ldr	r5, [pc, #60]	; (3d78 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3d3c:	ldr	r4, [pc, #20]	; (3d54 <uart3_status_isr+0xb0>)
    3d3e:	it	ls
    3d40:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3d42:	ldrb	r2, [r5, r2]
    3d44:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3d46:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3d48:	strb	r1, [r0, #0]
    3d4a:	b.n	3cf8 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3d4c:	movs	r1, #108	; 0x6c
    3d4e:	strb	r1, [r2, #3]
    3d50:	b.n	3cf8 <uart3_status_isr+0x54>
    3d52:	nop
    3d54:	.word	0x4006d000
    3d58:	.word	0x1fff1aa0
    3d5c:	.word	0x1fff1aa1
    3d60:	.word	0x1fff1acc
    3d64:	.word	0x1fff1a9c
    3d68:	.word	0x1fff1b0d
    3d6c:	.word	0x1fff1b10
    3d70:	.word	0x1fff1b0c
    3d74:	.word	0x1fff1b14
    3d78:	.word	0x1fff1aa4

00003d7c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3d7c:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3d7e:	ldr	r4, [pc, #64]	; (3dc0 <fault_isr+0x44>)
    3d80:	b.n	3d94 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3d82:	ldr	r3, [r4, #0]
    3d84:	lsls	r1, r3, #21
    3d86:	bmi.n	3da4 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3d88:	ldr	r3, [r4, #0]
    3d8a:	lsls	r2, r3, #20
    3d8c:	bmi.n	3dae <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3d8e:	ldr	r3, [r4, #0]
    3d90:	lsls	r3, r3, #19
    3d92:	bmi.n	3db8 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3d94:	ldr	r3, [r4, #0]
    3d96:	lsls	r0, r3, #13
    3d98:	bpl.n	3d82 <fault_isr+0x6>
    3d9a:	bl	2eb0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3d9e:	ldr	r3, [r4, #0]
    3da0:	lsls	r1, r3, #21
    3da2:	bpl.n	3d88 <fault_isr+0xc>
    3da4:	bl	3e90 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3da8:	ldr	r3, [r4, #0]
    3daa:	lsls	r2, r3, #20
    3dac:	bpl.n	3d8e <fault_isr+0x12>
    3dae:	bl	3b78 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3db2:	ldr	r3, [r4, #0]
    3db4:	lsls	r3, r3, #19
    3db6:	bpl.n	3d94 <fault_isr+0x18>
    3db8:	bl	4190 <uart2_status_isr>
    3dbc:	b.n	3d94 <fault_isr+0x18>
    3dbe:	nop
    3dc0:	.word	0x40048034

00003dc4 <unused_isr>:
	}
}

void unused_isr(void)
{
    3dc4:	push	{r3, lr}
	fault_isr();
    3dc6:	bl	3d7c <fault_isr>
    3dca:	nop

00003dcc <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3dcc:	ldr	r3, [pc, #4]	; (3dd4 <startup_early_hook+0x8>)
    3dce:	movs	r2, #16
    3dd0:	strh	r2, [r3, #0]
    3dd2:	bx	lr
    3dd4:	.word	0x40052000

00003dd8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3dd8:	bx	lr
    3dda:	nop

00003ddc <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3ddc:	ldr	r1, [pc, #36]	; (3e04 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3dde:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3de0:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3de2:	cbz	r0, 3df2 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3de4:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3de6:	add	r0, r3
    3de8:	sub.w	r2, r2, #8192	; 0x2000
    3dec:	cmp	r0, r2
    3dee:	bcs.n	3df6 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3df0:	str	r0, [r1, #0]
	}
	return prev;
    3df2:	mov	r0, r3
}
    3df4:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3df6:	bl	4464 <__errno>
    3dfa:	movs	r3, #12
    3dfc:	str	r3, [r0, #0]
			return (void *)-1;
    3dfe:	mov.w	r0, #4294967295
    3e02:	pop	{r3, pc}
    3e04:	.word	0x1fff0c70

00003e08 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3e08:	ldr	r2, [pc, #32]	; (3e2c <kinetis_hsrun_disable+0x24>)
    3e0a:	ldrb	r3, [r2, #0]
    3e0c:	cmp	r3, #128	; 0x80
    3e0e:	beq.n	3e14 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3e10:	movs	r0, #0
}
    3e12:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3e14:	ldr	r1, [pc, #24]	; (3e30 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3e16:	ldr	r3, [pc, #28]	; (3e34 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3e18:	ldr	r0, [pc, #28]	; (3e38 <kinetis_hsrun_disable+0x30>)
    3e1a:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3e1c:	movs	r1, #0
    3e1e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3e20:	ldrb	r3, [r2, #0]
    3e22:	cmp	r3, #128	; 0x80
    3e24:	beq.n	3e20 <kinetis_hsrun_disable+0x18>
		return 1;
    3e26:	movs	r0, #1
    3e28:	bx	lr
    3e2a:	nop
    3e2c:	.word	0x4007e003
    3e30:	.word	0x40048044
    3e34:	.word	0x4007e001
    3e38:	.word	0x22280000

00003e3c <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3e3c:	ldr	r2, [pc, #36]	; (3e64 <kinetis_hsrun_enable+0x28>)
    3e3e:	ldrb	r3, [r2, #0]
    3e40:	cmp	r3, #1
    3e42:	beq.n	3e48 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3e44:	movs	r0, #0
}
    3e46:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3e48:	add.w	r3, r3, #1073741824	; 0x40000000
    3e4c:	add.w	r3, r3, #516096	; 0x7e000
    3e50:	movs	r1, #96	; 0x60
    3e52:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3e54:	ldrb	r3, [r2, #0]
    3e56:	cmp	r3, #128	; 0x80
    3e58:	bne.n	3e54 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3e5a:	ldr	r3, [pc, #12]	; (3e68 <kinetis_hsrun_enable+0x2c>)
    3e5c:	ldr	r2, [pc, #12]	; (3e6c <kinetis_hsrun_enable+0x30>)
    3e5e:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3e60:	movs	r0, #1
    3e62:	bx	lr
    3e64:	.word	0x4007e003
    3e68:	.word	0x40048044
    3e6c:	.word	0x02060000

00003e70 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e70:	ldr	r2, [pc, #20]	; (3e88 <serial_available+0x18>)
	tail = rx_buffer_tail;
    3e72:	ldr	r3, [pc, #24]	; (3e8c <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e74:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3e76:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e78:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3e7a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3e7c:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3e7e:	it	cc
    3e80:	addcc	r0, #64	; 0x40
    3e82:	subs	r0, r0, r3
}
    3e84:	bx	lr
    3e86:	nop
    3e88:	.word	0x1fff1b1c
    3e8c:	.word	0x1fff1b1d

00003e90 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3e90:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3e92:	ldr	r3, [pc, #224]	; (3f74 <uart0_status_isr+0xe4>)
    3e94:	ldrb	r2, [r3, #4]
    3e96:	tst.w	r2, #48	; 0x30
    3e9a:	beq.n	3ef6 <uart0_status_isr+0x66>
		__disable_irq();
    3e9c:	cpsid	i
		avail = UART0_RCFIFO;
    3e9e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3ea0:	and.w	r2, r1, #255	; 0xff
    3ea4:	cmp	r1, #0
    3ea6:	beq.n	3f24 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3ea8:	cpsie	i
			head = rx_buffer_head;
    3eaa:	ldr	r7, [pc, #204]	; (3f78 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3eac:	ldr	r1, [pc, #204]	; (3f7c <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3eae:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3eb0:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3eb2:	ldr	r6, [pc, #204]	; (3f80 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3eb4:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3eb6:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3eb8:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3eba:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3ebc:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3ebe:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3ec0:	it	cs
    3ec2:	movcs	r3, #0
				if (newhead != tail) {
    3ec4:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3ec6:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3eca:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3ecc:	itt	ne
    3ece:	strbne	r1, [r6, r3]
    3ed0:	movne	r0, r3
				}
			} while (--avail > 0);
    3ed2:	ands.w	r2, r2, #255	; 0xff
    3ed6:	bne.n	3eba <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3ed8:	ldr	r3, [pc, #168]	; (3f84 <uart0_status_isr+0xf4>)
    3eda:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3edc:	uxtb	r2, r0
    3ede:	strb	r2, [r7, #0]
			if (rts_pin) {
    3ee0:	cbz	r3, 3ef6 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3ee2:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3ee4:	itet	cc
    3ee6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3eea:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3eec:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3eee:	cmp	r0, #39	; 0x27
    3ef0:	itt	gt
    3ef2:	movgt	r2, #1
    3ef4:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3ef6:	ldr	r1, [pc, #124]	; (3f74 <uart0_status_isr+0xe4>)
    3ef8:	ldrb	r2, [r1, #3]
    3efa:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3efc:	lsls	r5, r2, #24
    3efe:	bmi.n	3f2e <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3f00:	lsls	r2, r2, #25
    3f02:	bpl.n	3f20 <uart0_status_isr+0x90>
    3f04:	ldr	r3, [pc, #108]	; (3f74 <uart0_status_isr+0xe4>)
    3f06:	ldrb	r3, [r3, #4]
    3f08:	lsls	r3, r3, #25
    3f0a:	bpl.n	3f20 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3f0c:	ldr	r3, [pc, #120]	; (3f88 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f0e:	ldr	r1, [pc, #124]	; (3f8c <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3f10:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f12:	movs	r2, #0
    3f14:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3f16:	cbz	r3, 3f1a <uart0_status_isr+0x8a>
    3f18:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3f1a:	ldr	r3, [pc, #88]	; (3f74 <uart0_status_isr+0xe4>)
    3f1c:	movs	r2, #60	; 0x3c
    3f1e:	strb	r2, [r3, #3]
	}
}
    3f20:	pop	{r4, r5, r6, r7}
    3f22:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3f24:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3f26:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3f28:	strb	r2, [r3, #17]
			__enable_irq();
    3f2a:	cpsie	i
    3f2c:	b.n	3ef6 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3f2e:	ldrb	r3, [r1, #4]
    3f30:	lsls	r4, r3, #24
    3f32:	bpl.n	3f00 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3f34:	ldr	r3, [pc, #88]	; (3f90 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3f36:	ldr	r6, [pc, #92]	; (3f94 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f38:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3f3a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f3c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3f3e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3f40:	cmp	r4, r3
    3f42:	beq.n	3f62 <uart0_status_isr+0xd2>
    3f44:	ldr	r5, [pc, #80]	; (3f98 <uart0_status_isr+0x108>)
    3f46:	b.n	3f4c <uart0_status_isr+0xbc>
    3f48:	cmp	r3, r4
    3f4a:	beq.n	3f62 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3f4c:	adds	r3, #1
    3f4e:	cmp	r3, #64	; 0x40
    3f50:	it	cs
    3f52:	movcs	r3, #0
			avail = UART0_S1;
    3f54:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3f56:	ldrb	r0, [r5, r3]
    3f58:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3f5a:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3f5c:	ldrb	r0, [r1, #20]
    3f5e:	cmp	r0, #7
    3f60:	bls.n	3f48 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3f62:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3f64:	ldr	r1, [pc, #12]	; (3f74 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3f66:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3f68:	ldrb	r3, [r1, #4]
    3f6a:	lsls	r0, r3, #24
    3f6c:	itt	mi
    3f6e:	movmi	r3, #124	; 0x7c
    3f70:	strbmi	r3, [r1, #3]
    3f72:	b.n	3f00 <uart0_status_isr+0x70>
    3f74:	.word	0x4006a000
    3f78:	.word	0x1fff1b1c
    3f7c:	.word	0x1fff1b1d
    3f80:	.word	0x1fff1b60
    3f84:	.word	0x1fff1b18
    3f88:	.word	0x1fff1ba4
    3f8c:	.word	0x1fff1ba0
    3f90:	.word	0x1fff1ba8
    3f94:	.word	0x1fff1ba1
    3f98:	.word	0x1fff1b20

00003f9c <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f9c:	ldr	r2, [pc, #20]	; (3fb4 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3f9e:	ldr	r3, [pc, #24]	; (3fb8 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3fa0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3fa2:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3fa4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3fa6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3fa8:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3faa:	it	cc
    3fac:	addcc	r0, #64	; 0x40
    3fae:	subs	r0, r0, r3
}
    3fb0:	bx	lr
    3fb2:	nop
    3fb4:	.word	0x1fff1bb0
    3fb8:	.word	0x1fff1bb1

00003fbc <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3fbc:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3fbe:	ldr	r3, [pc, #176]	; (4070 <lpuart0_status_isr+0xb4>)
    3fc0:	ldr	r2, [r3, #4]
    3fc2:	lsls	r4, r2, #10
    3fc4:	bpl.n	4006 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3fc6:	ldr	r0, [pc, #172]	; (4074 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3fc8:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3fca:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fcc:	ldr	r1, [pc, #168]	; (4078 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3fce:	adds	r3, #1
    3fd0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fd2:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3fd4:	it	gt
    3fd6:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fd8:	cmp	r3, r1
    3fda:	beq.n	3fe6 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3fdc:	ldr	r4, [pc, #156]	; (407c <lpuart0_status_isr+0xc0>)
    3fde:	uxtb	r2, r2
			rx_buffer_head = head;
    3fe0:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3fe2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3fe4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3fe6:	ldr	r2, [pc, #152]	; (4080 <lpuart0_status_isr+0xc4>)
    3fe8:	ldr	r1, [r2, #0]
    3fea:	cbz	r1, 4006 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3fec:	ldr	r2, [pc, #148]	; (4084 <lpuart0_status_isr+0xc8>)
    3fee:	ldrb	r2, [r2, #0]
    3ff0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3ff2:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3ff4:	itet	cc
    3ff6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3ffa:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3ffc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ffe:	cmp	r3, #39	; 0x27
    4000:	itt	gt
    4002:	movgt	r3, #1
    4004:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    4006:	ldr	r2, [pc, #104]	; (4070 <lpuart0_status_isr+0xb4>)
    4008:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    400a:	lsls	r0, r3, #8
    400c:	bpl.n	4014 <lpuart0_status_isr+0x58>
    400e:	ldr	r2, [r2, #4]
    4010:	lsls	r1, r2, #8
    4012:	bmi.n	4038 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    4014:	lsls	r2, r3, #9
    4016:	bpl.n	4034 <lpuart0_status_isr+0x78>
    4018:	ldr	r3, [pc, #84]	; (4070 <lpuart0_status_isr+0xb4>)
    401a:	ldr	r3, [r3, #4]
    401c:	lsls	r3, r3, #9
    401e:	bpl.n	4034 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4020:	ldr	r3, [pc, #100]	; (4088 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    4022:	ldr	r1, [pc, #104]	; (408c <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    4024:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    4026:	movs	r2, #0
    4028:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    402a:	cbz	r3, 402e <lpuart0_status_isr+0x72>
    402c:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    402e:	ldr	r3, [pc, #96]	; (4090 <lpuart0_status_isr+0xd4>)
    4030:	movs	r2, #0
    4032:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    4034:	pop	{r4, r5}
    4036:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    4038:	ldr	r2, [pc, #88]	; (4094 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    403a:	ldr	r1, [pc, #72]	; (4084 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    403c:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    403e:	ldrb	r2, [r1, #0]
    4040:	uxtb	r2, r2
		if (head == tail) {
    4042:	cmp	r0, r2
    4044:	beq.n	4062 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    4046:	adds	r2, #1
    4048:	cmp	r2, #39	; 0x27
    404a:	itt	hi
    404c:	movhi	r0, #0
    404e:	movhi	r2, r0
			n = tx_buffer[tail];
    4050:	ldr	r5, [pc, #68]	; (4098 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    4052:	ldr	r4, [pc, #28]	; (4070 <lpuart0_status_isr+0xb4>)
    4054:	it	ls
    4056:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4058:	ldrb	r2, [r5, r2]
    405a:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    405c:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    405e:	strb	r0, [r1, #0]
    4060:	b.n	4014 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4062:	ldr	r0, [pc, #56]	; (409c <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4064:	ldr	r2, [pc, #40]	; (4090 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4066:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4068:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    406a:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    406c:	str	r1, [r2, #0]
    406e:	b.n	4014 <lpuart0_status_isr+0x58>
    4070:	.word	0x400c4000
    4074:	.word	0x1fff1bb0
    4078:	.word	0x1fff1bb1
    407c:	.word	0x1fff1bdc
    4080:	.word	0x1fff1bac
    4084:	.word	0x1fff1c1d
    4088:	.word	0x1fff1c20
    408c:	.word	0x1fff1c1c
    4090:	.word	0x43880158
    4094:	.word	0x1fff1c24
    4098:	.word	0x1fff1bb4
    409c:	.word	0x4388015c

000040a0 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    40a0:	push	{r4, lr}
    40a2:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    40a4:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    40a6:	bl	3e08 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    40aa:	ldr	r2, [pc, #96]	; (410c <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    40ac:	ldr	r3, [pc, #96]	; (4110 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    40ae:	ldr	r1, [pc, #100]	; (4114 <usb_init_serialnumber+0x74>)
    40b0:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    40b2:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    40b4:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    40b6:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    40b8:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    40ba:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    40bc:	ldrb	r3, [r2, #0]
    40be:	lsls	r3, r3, #24
    40c0:	bpl.n	40bc <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    40c2:	ldr	r3, [pc, #84]	; (4118 <usb_init_serialnumber+0x78>)
    40c4:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    40c6:	bl	3e3c <kinetis_hsrun_enable>
#endif
	__enable_irq();
    40ca:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    40cc:	ldr	r3, [pc, #76]	; (411c <usb_init_serialnumber+0x7c>)
    40ce:	cmp	r4, r3
    40d0:	itt	ls
    40d2:	addls.w	r4, r4, r4, lsl #2
    40d6:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    40d8:	mov	r0, r4
    40da:	ldr	r4, [pc, #68]	; (4120 <usb_init_serialnumber+0x80>)
    40dc:	add	r1, sp, #4
    40de:	movs	r2, #10
    40e0:	bl	4124 <ultoa>
    40e4:	add	r1, sp, #4
    40e6:	mov	r0, r4
	for (i=0; i<10; i++) {
    40e8:	movs	r3, #0
		char c = buf[i];
    40ea:	ldrb.w	r2, [r1], #1
    40ee:	adds	r3, #1
		if (!c) break;
    40f0:	cbz	r2, 4102 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    40f2:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    40f4:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    40f8:	bne.n	40ea <usb_init_serialnumber+0x4a>
    40fa:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    40fc:	strb	r3, [r4, #0]
}
    40fe:	add	sp, #16
    4100:	pop	{r4, pc}
    4102:	lsls	r3, r3, #1
    4104:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4106:	strb	r3, [r4, #0]
}
    4108:	add	sp, #16
    410a:	pop	{r4, pc}
    410c:	.word	0x40020004
    4110:	.word	0x40020000
    4114:	.word	0x41070000
    4118:	.word	0x4002000c
    411c:	.word	0x0098967f
    4120:	.word	0x1fff0d54

00004124 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4124:	push	{r4, r5, r6, r7}
    4126:	subs	r5, r1, #1
    4128:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    412a:	movs	r4, #0
    412c:	b.n	4130 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    412e:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4130:	udiv	r3, r0, r2
    4134:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4138:	cmp	r0, #9
    413a:	add.w	r7, r0, #48	; 0x30
    413e:	itet	hi
    4140:	addhi	r0, #55	; 0x37
    4142:	uxtbls	r0, r7
    4144:	uxtbhi	r0, r0
    4146:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    414a:	mov	r0, r3
    414c:	cmp	r3, #0
    414e:	bne.n	412e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4150:	adds	r2, r1, r4
    4152:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4154:	cbz	r4, 416a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4156:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4158:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    415c:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    415e:	adds	r3, #1
    4160:	subs	r0, r4, r3
    4162:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4164:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4168:	blt.n	4156 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    416a:	mov	r0, r1
    416c:	pop	{r4, r5, r6, r7}
    416e:	bx	lr

00004170 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4170:	ldr	r2, [pc, #20]	; (4188 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    4172:	ldr	r3, [pc, #24]	; (418c <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4174:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4176:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4178:	uxtb	r0, r0
	tail = rx_buffer_tail;
    417a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    417c:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    417e:	it	cc
    4180:	addcc	r0, #64	; 0x40
    4182:	subs	r0, r0, r3
}
    4184:	bx	lr
    4186:	nop
    4188:	.word	0x1fff1c2c
    418c:	.word	0x1fff1c2d

00004190 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4190:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    4192:	ldr	r3, [pc, #172]	; (4240 <uart2_status_isr+0xb0>)
    4194:	ldrb	r2, [r3, #4]
    4196:	lsls	r4, r2, #26
    4198:	bpl.n	41da <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    419a:	ldr	r0, [pc, #168]	; (4244 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    419c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    419e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41a0:	ldr	r1, [pc, #164]	; (4248 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    41a2:	adds	r3, #1
    41a4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41a6:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    41a8:	it	gt
    41aa:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41ac:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    41ae:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41b0:	beq.n	41ba <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    41b2:	ldr	r4, [pc, #152]	; (424c <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    41b4:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    41b6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    41b8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    41ba:	ldr	r2, [pc, #148]	; (4250 <uart2_status_isr+0xc0>)
    41bc:	ldr	r1, [r2, #0]
    41be:	cbz	r1, 41da <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    41c0:	ldr	r2, [pc, #144]	; (4254 <uart2_status_isr+0xc4>)
    41c2:	ldrb	r2, [r2, #0]
    41c4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    41c6:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    41c8:	itet	cc
    41ca:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    41ce:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    41d0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    41d2:	cmp	r3, #39	; 0x27
    41d4:	itt	gt
    41d6:	movgt	r3, #1
    41d8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    41da:	ldr	r2, [pc, #100]	; (4240 <uart2_status_isr+0xb0>)
    41dc:	ldrb	r3, [r2, #3]
    41de:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    41e0:	lsls	r0, r3, #24
    41e2:	bmi.n	4208 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    41e4:	lsls	r2, r3, #25
    41e6:	bpl.n	4204 <uart2_status_isr+0x74>
    41e8:	ldr	r3, [pc, #84]	; (4240 <uart2_status_isr+0xb0>)
    41ea:	ldrb	r3, [r3, #4]
    41ec:	lsls	r3, r3, #25
    41ee:	bpl.n	4204 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    41f0:	ldr	r3, [pc, #100]	; (4258 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    41f2:	ldr	r1, [pc, #104]	; (425c <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    41f4:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    41f6:	movs	r2, #0
    41f8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    41fa:	cbz	r3, 41fe <uart2_status_isr+0x6e>
    41fc:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    41fe:	ldr	r3, [pc, #64]	; (4240 <uart2_status_isr+0xb0>)
    4200:	movs	r2, #44	; 0x2c
    4202:	strb	r2, [r3, #3]
	}
}
    4204:	pop	{r4, r5}
    4206:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4208:	ldrb	r1, [r2, #4]
    420a:	lsls	r1, r1, #24
    420c:	bpl.n	41e4 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    420e:	ldr	r1, [pc, #80]	; (4260 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4210:	ldr	r0, [pc, #64]	; (4254 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4212:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4214:	ldrb	r1, [r0, #0]
    4216:	uxtb	r1, r1
		if (head == tail) {
    4218:	cmp	r4, r1
    421a:	beq.n	4238 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    421c:	adds	r2, r1, #1
    421e:	cmp	r2, #39	; 0x27
    4220:	itt	hi
    4222:	movhi	r1, #0
    4224:	movhi	r2, r1
			n = tx_buffer[tail];
    4226:	ldr	r5, [pc, #60]	; (4264 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4228:	ldr	r4, [pc, #20]	; (4240 <uart2_status_isr+0xb0>)
    422a:	it	ls
    422c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    422e:	ldrb	r2, [r5, r2]
    4230:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4232:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4234:	strb	r1, [r0, #0]
    4236:	b.n	41e4 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4238:	movs	r1, #108	; 0x6c
    423a:	strb	r1, [r2, #3]
    423c:	b.n	41e4 <uart2_status_isr+0x54>
    423e:	nop
    4240:	.word	0x4006c000
    4244:	.word	0x1fff1c2c
    4248:	.word	0x1fff1c2d
    424c:	.word	0x1fff1c58
    4250:	.word	0x1fff1c28
    4254:	.word	0x1fff1c99
    4258:	.word	0x1fff1c9c
    425c:	.word	0x1fff1c98
    4260:	.word	0x1fff1ca0
    4264:	.word	0x1fff1c30

00004268 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4268:	bx	lr
    426a:	nop

0000426c <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    426c:	bx	lr
    426e:	nop

00004270 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4270:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4272:	mrs	r2, PRIMASK
		__disable_irq();
    4276:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4278:	ldrb	r3, [r0, #29]
    427a:	cbnz	r3, 428a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    427c:	ldrb	r1, [r0, #28]
    427e:	cmp	r1, #1
    4280:	beq.n	4294 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4282:	cmp	r1, #3
    4284:	beq.n	42a8 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4286:	movs	r3, #1
    4288:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    428a:	cbnz	r2, 428e <EventResponder::triggerEventNotImmediate()+0x1e>
    428c:	cpsie	i
	}
	enableInterrupts(irq);
}
    428e:	ldr.w	r4, [sp], #4
    4292:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4294:	ldr	r4, [pc, #68]	; (42dc <EventResponder::triggerEventNotImmediate()+0x6c>)
    4296:	ldr	r1, [r4, #0]
    4298:	cbz	r1, 42c4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    429a:	ldr	r1, [pc, #68]	; (42e0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    429c:	str	r3, [r0, #20]
				_prev = lastYield;
    429e:	ldr	r3, [r1, #0]
    42a0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    42a2:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    42a4:	str	r0, [r3, #20]
    42a6:	b.n	4286 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    42a8:	ldr	r4, [pc, #56]	; (42e4 <EventResponder::triggerEventNotImmediate()+0x74>)
    42aa:	ldr	r1, [r4, #0]
    42ac:	cbz	r1, 42d0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    42ae:	ldr	r1, [pc, #56]	; (42e8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    42b0:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    42b2:	ldr	r3, [r1, #0]
    42b4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    42b6:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    42b8:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    42ba:	ldr	r3, [pc, #48]	; (42ec <EventResponder::triggerEventNotImmediate()+0x7c>)
    42bc:	mov.w	r1, #268435456	; 0x10000000
    42c0:	str	r1, [r3, #0]
    42c2:	b.n	4286 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    42c4:	ldr	r3, [pc, #24]	; (42e0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    42c6:	str	r1, [r0, #20]
				_prev = nullptr;
    42c8:	str	r1, [r0, #24]
				firstYield = this;
    42ca:	str	r0, [r4, #0]
				lastYield = this;
    42cc:	str	r0, [r3, #0]
    42ce:	b.n	4286 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    42d0:	ldr	r3, [pc, #20]	; (42e8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    42d2:	str	r1, [r0, #20]
				_prev = nullptr;
    42d4:	str	r1, [r0, #24]
				firstInterrupt = this;
    42d6:	str	r0, [r4, #0]
				lastInterrupt = this;
    42d8:	str	r0, [r3, #0]
    42da:	b.n	42ba <EventResponder::triggerEventNotImmediate()+0x4a>
    42dc:	.word	0x1fff1cb4
    42e0:	.word	0x1fff1cb0
    42e4:	.word	0x1fff1ca4
    42e8:	.word	0x1fff1ca8
    42ec:	.word	0xe000ed04

000042f0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    42f0:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    42f2:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    42f4:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    42f6:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    42f8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    42fa:	beq.n	4304 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    42fc:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4300:	b.w	4270 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4304:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4306:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    430a:	bx	r3

0000430c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    430c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    430e:	mrs	r2, PRIMASK
		__disable_irq();
    4312:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4314:	ldr	r4, [pc, #48]	; (4348 <EventResponder::runFromInterrupt()+0x3c>)
    4316:	ldr	r0, [r4, #0]
		if (first) {
    4318:	cbz	r0, 433c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    431a:	ldr	r6, [pc, #48]	; (434c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    431c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    431e:	ldr	r3, [r0, #20]
    4320:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4322:	cbz	r3, 4342 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4324:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4326:	cbnz	r2, 432a <EventResponder::runFromInterrupt()+0x1e>
    4328:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    432a:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    432c:	ldr	r3, [r0, #8]
    432e:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4330:	mrs	r2, PRIMASK
		__disable_irq();
    4334:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4336:	ldr	r0, [r4, #0]
		if (first) {
    4338:	cmp	r0, #0
    433a:	bne.n	431e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    433c:	cbnz	r2, 4340 <EventResponder::runFromInterrupt()+0x34>
    433e:	cpsie	i
    4340:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4342:	str	r3, [r6, #0]
    4344:	b.n	4326 <EventResponder::runFromInterrupt()+0x1a>
    4346:	nop
    4348:	.word	0x1fff1ca4
    434c:	.word	0x1fff1ca8

00004350 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4350:	b.w	430c <EventResponder::runFromInterrupt()>

00004354 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4354:	ldr	r2, [pc, #96]	; (43b8 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4356:	push	{r4, r5}
	if (listActive == nullptr) {
    4358:	ldr	r4, [r2, #0]
    435a:	cmp	r4, #0
    435c:	beq.n	43ae <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    435e:	ldr	r3, [r0, #0]
    4360:	ldr	r1, [r4, #0]
    4362:	cmp	r3, r1
    4364:	bcs.n	4384 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4366:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4368:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    436a:	str	r4, [r0, #8]
		_prev = nullptr;
    436c:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    436e:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4370:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4372:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4374:	movs	r3, #2
    4376:	strb	r3, [r0, #20]
}
    4378:	pop	{r4, r5}
    437a:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    437c:	ldr	r1, [r2, #0]
    437e:	cmp	r3, r1
    4380:	mov	r4, r2
    4382:	bcc.n	4396 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4384:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4386:	subs	r3, r3, r1
    4388:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    438a:	cmp	r2, #0
    438c:	bne.n	437c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    438e:	str	r2, [r0, #8]
		_prev = timer;
    4390:	str	r4, [r0, #12]
		timer->_next = this;
    4392:	str	r0, [r4, #8]
    4394:	b.n	4374 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4396:	ldr	r2, [r2, #12]
    4398:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    439a:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    439c:	str	r0, [r4, #12]
				_prev->_next = this;
    439e:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    43a0:	subs	r3, r1, r3
				_state = TimerActive;
    43a2:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    43a4:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    43a6:	str	r3, [r4, #0]
				_state = TimerActive;
    43a8:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    43aa:	pop	{r4, r5}
    43ac:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    43ae:	str	r4, [r0, #8]
		_prev = nullptr;
    43b0:	str	r4, [r0, #12]
		listActive = this;
    43b2:	str	r0, [r2, #0]
    43b4:	b.n	4374 <MillisTimer::addToActiveList()+0x20>
    43b6:	nop
    43b8:	.word	0x1fff1cac

000043bc <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    43bc:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    43be:	ldr	r6, [pc, #136]	; (4448 <MillisTimer::runFromTimer()+0x8c>)
    43c0:	ldr	r4, [r6, #0]
	while (timer) {
    43c2:	cbz	r4, 4410 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    43c4:	ldr	r3, [r4, #0]
    43c6:	cmp	r3, #0
    43c8:	bne.n	4440 <MillisTimer::runFromTimer()+0x84>
    43ca:	ldr	r7, [pc, #128]	; (444c <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    43cc:	mov	r5, r3
    43ce:	b.n	43da <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    43d0:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    43d2:	cbz	r4, 4410 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    43d4:	ldr	r3, [r4, #0]
    43d6:	cmp	r3, #0
    43d8:	bne.n	4440 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    43da:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    43dc:	cbz	r3, 43e0 <MillisTimer::runFromTimer()+0x24>
    43de:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    43e0:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    43e2:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    43e4:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    43e6:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    43e8:	ldr	r3, [r3, #0]
    43ea:	cmp	r3, r7
    43ec:	bne.n	4432 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    43ee:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    43f0:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    43f2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    43f4:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    43f6:	beq.n	443a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    43f8:	bl	4270 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    43fc:	ldr	r3, [r4, #4]
    43fe:	cmp	r3, #0
    4400:	beq.n	43d0 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4402:	str	r3, [r4, #0]
				timer->addToActiveList();
    4404:	mov	r0, r4
    4406:	bl	4354 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    440a:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    440c:	cmp	r4, #0
    440e:	bne.n	43d4 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4410:	mrs	r3, PRIMASK
		__disable_irq();
    4414:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4416:	ldr	r2, [pc, #56]	; (4450 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4418:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    441a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    441c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    441e:	cbnz	r3, 4422 <MillisTimer::runFromTimer()+0x66>
    4420:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4422:	cbz	r0, 4430 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4424:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4426:	bl	4354 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    442a:	mov	r0, r4
    442c:	cmp	r0, #0
    442e:	bne.n	4424 <MillisTimer::runFromTimer()+0x68>
    4430:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4432:	mov	r2, r4
    4434:	movs	r1, #0
    4436:	blx	r3
    4438:	b.n	43fc <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    443a:	ldr	r3, [r0, #8]
    443c:	blx	r3
    443e:	b.n	43fc <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4440:	subs	r3, #1
    4442:	str	r3, [r4, #0]
			break;
    4444:	b.n	4410 <MillisTimer::runFromTimer()+0x54>
    4446:	nop
    4448:	.word	0x1fff1cac
    444c:	.word	0x000042f1
    4450:	.word	0x1fff1cbc

00004454 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4454:	ldr	r2, [pc, #8]	; (4460 <systick_isr+0xc>)
    4456:	ldr	r3, [r2, #0]
    4458:	adds	r3, #1
    445a:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    445c:	b.w	43bc <MillisTimer::runFromTimer()>
    4460:	.word	0x1fff1844

00004464 <__errno>:
    4464:	ldr	r3, [pc, #4]	; (446c <__errno+0x8>)
    4466:	ldr	r0, [r3, #0]
    4468:	bx	lr
    446a:	nop
    446c:	.word	0x1fff1198

00004470 <__libc_init_array>:
    4470:	push	{r4, r5, r6, lr}
    4472:	ldr	r6, [pc, #60]	; (44b0 <__libc_init_array+0x40>)
    4474:	ldr	r5, [pc, #60]	; (44b4 <__libc_init_array+0x44>)
    4476:	subs	r6, r6, r5
    4478:	asrs	r6, r6, #2
    447a:	it	ne
    447c:	movne	r4, #0
    447e:	beq.n	448c <__libc_init_array+0x1c>
    4480:	adds	r4, #1
    4482:	ldr.w	r3, [r5], #4
    4486:	blx	r3
    4488:	cmp	r6, r4
    448a:	bne.n	4480 <__libc_init_array+0x10>
    448c:	ldr	r6, [pc, #40]	; (44b8 <__libc_init_array+0x48>)
    448e:	ldr	r5, [pc, #44]	; (44bc <__libc_init_array+0x4c>)
    4490:	subs	r6, r6, r5
    4492:	bl	511c <_init>
    4496:	asrs	r6, r6, #2
    4498:	it	ne
    449a:	movne	r4, #0
    449c:	beq.n	44ac <__libc_init_array+0x3c>
    449e:	adds	r4, #1
    44a0:	ldr.w	r3, [r5], #4
    44a4:	blx	r3
    44a6:	cmp	r6, r4
    44a8:	bne.n	449e <__libc_init_array+0x2e>
    44aa:	pop	{r4, r5, r6, pc}
    44ac:	pop	{r4, r5, r6, pc}
    44ae:	nop
    44b0:	.word	0x00005128
    44b4:	.word	0x00005128
    44b8:	.word	0x00005134
    44bc:	.word	0x00005128

000044c0 <malloc>:
    44c0:	ldr	r3, [pc, #8]	; (44cc <malloc+0xc>)
    44c2:	mov	r1, r0
    44c4:	ldr	r0, [r3, #0]
    44c6:	b.w	44d0 <_malloc_r>
    44ca:	nop
    44cc:	.word	0x1fff1198

000044d0 <_malloc_r>:
    44d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44d4:	add.w	r5, r1, #11
    44d8:	cmp	r5, #22
    44da:	sub	sp, #12
    44dc:	mov	r6, r0
    44de:	bls.w	4620 <_malloc_r+0x150>
    44e2:	bics.w	r5, r5, #7
    44e6:	bmi.w	4668 <_malloc_r+0x198>
    44ea:	cmp	r1, r5
    44ec:	bhi.w	4668 <_malloc_r+0x198>
    44f0:	bl	4a40 <__malloc_lock>
    44f4:	cmp.w	r5, #504	; 0x1f8
    44f8:	bcc.w	4a34 <_malloc_r+0x564>
    44fc:	lsrs	r3, r5, #9
    44fe:	beq.w	4676 <_malloc_r+0x1a6>
    4502:	cmp	r3, #4
    4504:	bhi.w	480e <_malloc_r+0x33e>
    4508:	lsrs	r0, r5, #6
    450a:	add.w	lr, r0, #57	; 0x39
    450e:	mov.w	r3, lr, lsl #1
    4512:	adds	r0, #56	; 0x38
    4514:	ldr	r7, [pc, #784]	; (4828 <_malloc_r+0x358>)
    4516:	add.w	r3, r7, r3, lsl #2
    451a:	sub.w	r1, r3, #8
    451e:	ldr	r4, [r3, #4]
    4520:	cmp	r1, r4
    4522:	bne.n	4534 <_malloc_r+0x64>
    4524:	b.n	4680 <_malloc_r+0x1b0>
    4526:	cmp	r2, #0
    4528:	bge.w	4684 <_malloc_r+0x1b4>
    452c:	ldr	r4, [r4, #12]
    452e:	cmp	r1, r4
    4530:	beq.w	4680 <_malloc_r+0x1b0>
    4534:	ldr	r3, [r4, #4]
    4536:	bic.w	r3, r3, #3
    453a:	subs	r2, r3, r5
    453c:	cmp	r2, #15
    453e:	ble.n	4526 <_malloc_r+0x56>
    4540:	ldr	r1, [pc, #740]	; (4828 <_malloc_r+0x358>)
    4542:	ldr	r4, [r7, #16]
    4544:	add.w	lr, r1, #8
    4548:	cmp	r4, lr
    454a:	beq.w	48b4 <_malloc_r+0x3e4>
    454e:	ldr	r3, [r4, #4]
    4550:	bic.w	r3, r3, #3
    4554:	subs	r2, r3, r5
    4556:	cmp	r2, #15
    4558:	bgt.w	488e <_malloc_r+0x3be>
    455c:	cmp	r2, #0
    455e:	str.w	lr, [r1, #20]
    4562:	str.w	lr, [r1, #16]
    4566:	bge.w	46a6 <_malloc_r+0x1d6>
    456a:	cmp.w	r3, #512	; 0x200
    456e:	bcs.w	4840 <_malloc_r+0x370>
    4572:	lsrs	r3, r3, #3
    4574:	add.w	ip, r3, #1
    4578:	movs	r2, #1
    457a:	asrs	r3, r3, #2
    457c:	lsl.w	r3, r2, r3
    4580:	ldr	r2, [r1, #4]
    4582:	ldr.w	r8, [r1, ip, lsl #3]
    4586:	str.w	r8, [r4, #8]
    458a:	add.w	r9, r1, ip, lsl #3
    458e:	orrs	r2, r3
    4590:	sub.w	r3, r9, #8
    4594:	str	r3, [r4, #12]
    4596:	str	r2, [r1, #4]
    4598:	str.w	r4, [r1, ip, lsl #3]
    459c:	str.w	r4, [r8, #12]
    45a0:	asrs	r3, r0, #2
    45a2:	movs	r4, #1
    45a4:	lsls	r4, r3
    45a6:	cmp	r4, r2
    45a8:	bhi.w	46c0 <_malloc_r+0x1f0>
    45ac:	tst	r4, r2
    45ae:	bne.n	45be <_malloc_r+0xee>
    45b0:	bic.w	r0, r0, #3
    45b4:	lsls	r4, r4, #1
    45b6:	tst	r4, r2
    45b8:	add.w	r0, r0, #4
    45bc:	beq.n	45b4 <_malloc_r+0xe4>
    45be:	add.w	r9, r7, r0, lsl #3
    45c2:	mov	ip, r9
    45c4:	mov	r8, r0
    45c6:	ldr.w	r1, [ip, #12]
    45ca:	cmp	ip, r1
    45cc:	bne.n	45de <_malloc_r+0x10e>
    45ce:	b.n	48b8 <_malloc_r+0x3e8>
    45d0:	cmp	r2, #0
    45d2:	bge.w	48d8 <_malloc_r+0x408>
    45d6:	ldr	r1, [r1, #12]
    45d8:	cmp	ip, r1
    45da:	beq.w	48b8 <_malloc_r+0x3e8>
    45de:	ldr	r3, [r1, #4]
    45e0:	bic.w	r3, r3, #3
    45e4:	subs	r2, r3, r5
    45e6:	cmp	r2, #15
    45e8:	ble.n	45d0 <_malloc_r+0x100>
    45ea:	mov	r4, r1
    45ec:	ldr.w	ip, [r1, #12]
    45f0:	ldr.w	r8, [r4, #8]!
    45f4:	adds	r3, r1, r5
    45f6:	orr.w	r5, r5, #1
    45fa:	str	r5, [r1, #4]
    45fc:	orr.w	r1, r2, #1
    4600:	str.w	ip, [r8, #12]
    4604:	mov	r0, r6
    4606:	str.w	r8, [ip, #8]
    460a:	str	r3, [r7, #20]
    460c:	str	r3, [r7, #16]
    460e:	str.w	lr, [r3, #12]
    4612:	str.w	lr, [r3, #8]
    4616:	str	r1, [r3, #4]
    4618:	str	r2, [r3, r2]
    461a:	bl	4a44 <__malloc_unlock>
    461e:	b.n	4660 <_malloc_r+0x190>
    4620:	cmp	r1, #16
    4622:	bhi.n	4668 <_malloc_r+0x198>
    4624:	bl	4a40 <__malloc_lock>
    4628:	movs	r5, #16
    462a:	movs	r3, #6
    462c:	movs	r0, #2
    462e:	ldr	r7, [pc, #504]	; (4828 <_malloc_r+0x358>)
    4630:	add.w	r3, r7, r3, lsl #2
    4634:	sub.w	r2, r3, #8
    4638:	ldr	r4, [r3, #4]
    463a:	cmp	r4, r2
    463c:	beq.w	48ca <_malloc_r+0x3fa>
    4640:	ldr	r3, [r4, #4]
    4642:	ldr	r1, [r4, #12]
    4644:	ldr	r5, [r4, #8]
    4646:	bic.w	r3, r3, #3
    464a:	add	r3, r4
    464c:	mov	r0, r6
    464e:	ldr	r2, [r3, #4]
    4650:	str	r1, [r5, #12]
    4652:	orr.w	r2, r2, #1
    4656:	str	r5, [r1, #8]
    4658:	str	r2, [r3, #4]
    465a:	bl	4a44 <__malloc_unlock>
    465e:	adds	r4, #8
    4660:	mov	r0, r4
    4662:	add	sp, #12
    4664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4668:	movs	r4, #0
    466a:	movs	r3, #12
    466c:	mov	r0, r4
    466e:	str	r3, [r6, #0]
    4670:	add	sp, #12
    4672:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4676:	movs	r3, #128	; 0x80
    4678:	mov.w	lr, #64	; 0x40
    467c:	movs	r0, #63	; 0x3f
    467e:	b.n	4514 <_malloc_r+0x44>
    4680:	mov	r0, lr
    4682:	b.n	4540 <_malloc_r+0x70>
    4684:	add	r3, r4
    4686:	ldr	r1, [r4, #12]
    4688:	ldr	r2, [r3, #4]
    468a:	ldr	r5, [r4, #8]
    468c:	orr.w	r2, r2, #1
    4690:	str	r1, [r5, #12]
    4692:	mov	r0, r6
    4694:	str	r5, [r1, #8]
    4696:	str	r2, [r3, #4]
    4698:	bl	4a44 <__malloc_unlock>
    469c:	adds	r4, #8
    469e:	mov	r0, r4
    46a0:	add	sp, #12
    46a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46a6:	add	r3, r4
    46a8:	mov	r0, r6
    46aa:	ldr	r2, [r3, #4]
    46ac:	orr.w	r2, r2, #1
    46b0:	str	r2, [r3, #4]
    46b2:	bl	4a44 <__malloc_unlock>
    46b6:	adds	r4, #8
    46b8:	mov	r0, r4
    46ba:	add	sp, #12
    46bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46c0:	ldr	r4, [r7, #8]
    46c2:	ldr	r3, [r4, #4]
    46c4:	bic.w	r8, r3, #3
    46c8:	cmp	r8, r5
    46ca:	bcc.n	46d6 <_malloc_r+0x206>
    46cc:	rsb	r3, r5, r8
    46d0:	cmp	r3, #15
    46d2:	bgt.w	47ee <_malloc_r+0x31e>
    46d6:	ldr	r3, [pc, #340]	; (482c <_malloc_r+0x35c>)
    46d8:	ldr.w	r9, [pc, #352]	; 483c <_malloc_r+0x36c>
    46dc:	ldr	r2, [r3, #0]
    46de:	ldr.w	r3, [r9]
    46e2:	adds	r3, #1
    46e4:	add	r2, r5
    46e6:	add.w	sl, r4, r8
    46ea:	beq.w	49ae <_malloc_r+0x4de>
    46ee:	add.w	r2, r2, #4096	; 0x1000
    46f2:	adds	r2, #15
    46f4:	bic.w	r2, r2, #4080	; 0xff0
    46f8:	bic.w	r2, r2, #15
    46fc:	mov	r1, r2
    46fe:	mov	r0, r6
    4700:	str	r2, [sp, #4]
    4702:	bl	4a48 <_sbrk_r>
    4706:	cmp.w	r0, #4294967295
    470a:	mov	fp, r0
    470c:	ldr	r2, [sp, #4]
    470e:	beq.w	49c2 <_malloc_r+0x4f2>
    4712:	cmp	sl, r0
    4714:	bhi.w	4910 <_malloc_r+0x440>
    4718:	ldr	r3, [pc, #276]	; (4830 <_malloc_r+0x360>)
    471a:	ldr	r1, [r3, #0]
    471c:	cmp	sl, fp
    471e:	add	r1, r2
    4720:	str	r1, [r3, #0]
    4722:	beq.w	49cc <_malloc_r+0x4fc>
    4726:	ldr.w	r0, [r9]
    472a:	ldr.w	lr, [pc, #272]	; 483c <_malloc_r+0x36c>
    472e:	adds	r0, #1
    4730:	ittet	ne
    4732:	rsbne	sl, sl, fp
    4736:	addne	r1, sl
    4738:	streq.w	fp, [lr]
    473c:	strne	r1, [r3, #0]
    473e:	ands.w	r1, fp, #7
    4742:	beq.w	4974 <_malloc_r+0x4a4>
    4746:	rsb	r0, r1, #8
    474a:	rsb	r1, r1, #4096	; 0x1000
    474e:	add	fp, r0
    4750:	adds	r1, #8
    4752:	add	r2, fp
    4754:	ubfx	r2, r2, #0, #12
    4758:	rsb	r9, r2, r1
    475c:	mov	r1, r9
    475e:	mov	r0, r6
    4760:	str	r3, [sp, #4]
    4762:	bl	4a48 <_sbrk_r>
    4766:	adds	r3, r0, #1
    4768:	ldr	r3, [sp, #4]
    476a:	beq.w	49ec <_malloc_r+0x51c>
    476e:	rsb	r2, fp, r0
    4772:	add	r2, r9
    4774:	orr.w	r2, r2, #1
    4778:	ldr	r1, [r3, #0]
    477a:	str.w	fp, [r7, #8]
    477e:	add	r1, r9
    4780:	cmp	r4, r7
    4782:	str.w	r2, [fp, #4]
    4786:	str	r1, [r3, #0]
    4788:	ldr.w	r9, [pc, #164]	; 4830 <_malloc_r+0x360>
    478c:	beq.n	47bc <_malloc_r+0x2ec>
    478e:	cmp.w	r8, #15
    4792:	bls.w	4990 <_malloc_r+0x4c0>
    4796:	ldr	r2, [r4, #4]
    4798:	sub.w	r3, r8, #12
    479c:	bic.w	r3, r3, #7
    47a0:	adds	r0, r4, r3
    47a2:	and.w	r2, r2, #1
    47a6:	mov.w	lr, #5
    47aa:	orrs	r2, r3
    47ac:	cmp	r3, #15
    47ae:	str	r2, [r4, #4]
    47b0:	str.w	lr, [r0, #4]
    47b4:	str.w	lr, [r0, #8]
    47b8:	bhi.w	49f4 <_malloc_r+0x524>
    47bc:	ldr	r3, [pc, #116]	; (4834 <_malloc_r+0x364>)
    47be:	ldr	r4, [r7, #8]
    47c0:	ldr	r2, [r3, #0]
    47c2:	cmp	r1, r2
    47c4:	it	hi
    47c6:	strhi	r1, [r3, #0]
    47c8:	ldr	r3, [pc, #108]	; (4838 <_malloc_r+0x368>)
    47ca:	ldr	r2, [r3, #0]
    47cc:	cmp	r1, r2
    47ce:	ldr	r2, [r4, #4]
    47d0:	it	hi
    47d2:	strhi	r1, [r3, #0]
    47d4:	bic.w	r2, r2, #3
    47d8:	cmp	r5, r2
    47da:	sub.w	r3, r2, r5
    47de:	bhi.n	47e4 <_malloc_r+0x314>
    47e0:	cmp	r3, #15
    47e2:	bgt.n	47ee <_malloc_r+0x31e>
    47e4:	mov	r0, r6
    47e6:	bl	4a44 <__malloc_unlock>
    47ea:	movs	r4, #0
    47ec:	b.n	4660 <_malloc_r+0x190>
    47ee:	adds	r2, r4, r5
    47f0:	orr.w	r3, r3, #1
    47f4:	orr.w	r5, r5, #1
    47f8:	str	r5, [r4, #4]
    47fa:	mov	r0, r6
    47fc:	str	r2, [r7, #8]
    47fe:	str	r3, [r2, #4]
    4800:	bl	4a44 <__malloc_unlock>
    4804:	adds	r4, #8
    4806:	mov	r0, r4
    4808:	add	sp, #12
    480a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    480e:	cmp	r3, #20
    4810:	bls.n	48f6 <_malloc_r+0x426>
    4812:	cmp	r3, #84	; 0x54
    4814:	bhi.w	4960 <_malloc_r+0x490>
    4818:	lsrs	r0, r5, #12
    481a:	add.w	lr, r0, #111	; 0x6f
    481e:	mov.w	r3, lr, lsl #1
    4822:	adds	r0, #110	; 0x6e
    4824:	b.n	4514 <_malloc_r+0x44>
    4826:	nop
    4828:	.word	0x1fff119c
    482c:	.word	0x1fff1cc8
    4830:	.word	0x1fff1ccc
    4834:	.word	0x1fff1cc4
    4838:	.word	0x1fff1cc0
    483c:	.word	0x1fff15a8
    4840:	lsrs	r2, r3, #9
    4842:	cmp	r2, #4
    4844:	bls.n	4904 <_malloc_r+0x434>
    4846:	cmp	r2, #20
    4848:	bhi.w	49b2 <_malloc_r+0x4e2>
    484c:	add.w	r1, r2, #92	; 0x5c
    4850:	lsls	r1, r1, #1
    4852:	adds	r2, #91	; 0x5b
    4854:	add.w	ip, r7, r1, lsl #2
    4858:	ldr.w	r1, [r7, r1, lsl #2]
    485c:	ldr.w	r8, [pc, #476]	; 4a3c <_malloc_r+0x56c>
    4860:	sub.w	ip, ip, #8
    4864:	cmp	ip, r1
    4866:	beq.w	497a <_malloc_r+0x4aa>
    486a:	ldr	r2, [r1, #4]
    486c:	bic.w	r2, r2, #3
    4870:	cmp	r3, r2
    4872:	bcs.n	487a <_malloc_r+0x3aa>
    4874:	ldr	r1, [r1, #8]
    4876:	cmp	ip, r1
    4878:	bne.n	486a <_malloc_r+0x39a>
    487a:	ldr.w	ip, [r1, #12]
    487e:	ldr	r2, [r7, #4]
    4880:	str.w	ip, [r4, #12]
    4884:	str	r1, [r4, #8]
    4886:	str.w	r4, [ip, #8]
    488a:	str	r4, [r1, #12]
    488c:	b.n	45a0 <_malloc_r+0xd0>
    488e:	adds	r3, r4, r5
    4890:	orr.w	r7, r2, #1
    4894:	orr.w	r5, r5, #1
    4898:	str	r5, [r4, #4]
    489a:	mov	r0, r6
    489c:	str	r3, [r1, #20]
    489e:	str	r3, [r1, #16]
    48a0:	str.w	lr, [r3, #12]
    48a4:	str.w	lr, [r3, #8]
    48a8:	str	r7, [r3, #4]
    48aa:	str	r2, [r3, r2]
    48ac:	adds	r4, #8
    48ae:	bl	4a44 <__malloc_unlock>
    48b2:	b.n	4660 <_malloc_r+0x190>
    48b4:	ldr	r2, [r1, #4]
    48b6:	b.n	45a0 <_malloc_r+0xd0>
    48b8:	add.w	r8, r8, #1
    48bc:	tst.w	r8, #3
    48c0:	add.w	ip, ip, #8
    48c4:	bne.w	45c6 <_malloc_r+0xf6>
    48c8:	b.n	492c <_malloc_r+0x45c>
    48ca:	ldr	r4, [r3, #12]
    48cc:	cmp	r3, r4
    48ce:	it	eq
    48d0:	addeq	r0, #2
    48d2:	beq.w	4540 <_malloc_r+0x70>
    48d6:	b.n	4640 <_malloc_r+0x170>
    48d8:	add	r3, r1
    48da:	mov	r4, r1
    48dc:	ldr	r2, [r3, #4]
    48de:	ldr	r1, [r1, #12]
    48e0:	ldr.w	r5, [r4, #8]!
    48e4:	orr.w	r2, r2, #1
    48e8:	str	r2, [r3, #4]
    48ea:	mov	r0, r6
    48ec:	str	r1, [r5, #12]
    48ee:	str	r5, [r1, #8]
    48f0:	bl	4a44 <__malloc_unlock>
    48f4:	b.n	4660 <_malloc_r+0x190>
    48f6:	add.w	lr, r3, #92	; 0x5c
    48fa:	add.w	r0, r3, #91	; 0x5b
    48fe:	mov.w	r3, lr, lsl #1
    4902:	b.n	4514 <_malloc_r+0x44>
    4904:	lsrs	r2, r3, #6
    4906:	add.w	r1, r2, #57	; 0x39
    490a:	lsls	r1, r1, #1
    490c:	adds	r2, #56	; 0x38
    490e:	b.n	4854 <_malloc_r+0x384>
    4910:	cmp	r4, r7
    4912:	ldr	r3, [pc, #296]	; (4a3c <_malloc_r+0x56c>)
    4914:	beq.w	4718 <_malloc_r+0x248>
    4918:	ldr	r4, [r3, #8]
    491a:	ldr	r2, [r4, #4]
    491c:	bic.w	r2, r2, #3
    4920:	b.n	47d8 <_malloc_r+0x308>
    4922:	ldr.w	r3, [r9], #-8
    4926:	cmp	r9, r3
    4928:	bne.w	4a30 <_malloc_r+0x560>
    492c:	tst.w	r0, #3
    4930:	add.w	r0, r0, #4294967295
    4934:	bne.n	4922 <_malloc_r+0x452>
    4936:	ldr	r3, [r7, #4]
    4938:	bic.w	r3, r3, r4
    493c:	str	r3, [r7, #4]
    493e:	lsls	r4, r4, #1
    4940:	cmp	r4, r3
    4942:	bhi.w	46c0 <_malloc_r+0x1f0>
    4946:	cmp	r4, #0
    4948:	beq.w	46c0 <_malloc_r+0x1f0>
    494c:	tst	r4, r3
    494e:	mov	r0, r8
    4950:	bne.w	45be <_malloc_r+0xee>
    4954:	lsls	r4, r4, #1
    4956:	tst	r4, r3
    4958:	add.w	r0, r0, #4
    495c:	beq.n	4954 <_malloc_r+0x484>
    495e:	b.n	45be <_malloc_r+0xee>
    4960:	cmp.w	r3, #340	; 0x154
    4964:	bhi.n	4998 <_malloc_r+0x4c8>
    4966:	lsrs	r0, r5, #15
    4968:	add.w	lr, r0, #120	; 0x78
    496c:	mov.w	r3, lr, lsl #1
    4970:	adds	r0, #119	; 0x77
    4972:	b.n	4514 <_malloc_r+0x44>
    4974:	mov.w	r1, #4096	; 0x1000
    4978:	b.n	4752 <_malloc_r+0x282>
    497a:	movs	r1, #1
    497c:	ldr.w	r3, [r8, #4]
    4980:	asrs	r2, r2, #2
    4982:	lsl.w	r2, r1, r2
    4986:	orrs	r2, r3
    4988:	str.w	r2, [r8, #4]
    498c:	mov	r1, ip
    498e:	b.n	4880 <_malloc_r+0x3b0>
    4990:	movs	r3, #1
    4992:	str.w	r3, [fp, #4]
    4996:	b.n	47e4 <_malloc_r+0x314>
    4998:	movw	r2, #1364	; 0x554
    499c:	cmp	r3, r2
    499e:	bhi.n	49e2 <_malloc_r+0x512>
    49a0:	lsrs	r0, r5, #18
    49a2:	add.w	lr, r0, #125	; 0x7d
    49a6:	mov.w	r3, lr, lsl #1
    49aa:	adds	r0, #124	; 0x7c
    49ac:	b.n	4514 <_malloc_r+0x44>
    49ae:	adds	r2, #16
    49b0:	b.n	46fc <_malloc_r+0x22c>
    49b2:	cmp	r2, #84	; 0x54
    49b4:	bhi.n	4a04 <_malloc_r+0x534>
    49b6:	lsrs	r2, r3, #12
    49b8:	add.w	r1, r2, #111	; 0x6f
    49bc:	lsls	r1, r1, #1
    49be:	adds	r2, #110	; 0x6e
    49c0:	b.n	4854 <_malloc_r+0x384>
    49c2:	ldr	r4, [r7, #8]
    49c4:	ldr	r2, [r4, #4]
    49c6:	bic.w	r2, r2, #3
    49ca:	b.n	47d8 <_malloc_r+0x308>
    49cc:	ubfx	r0, sl, #0, #12
    49d0:	cmp	r0, #0
    49d2:	bne.w	4726 <_malloc_r+0x256>
    49d6:	add	r2, r8
    49d8:	ldr	r3, [r7, #8]
    49da:	orr.w	r2, r2, #1
    49de:	str	r2, [r3, #4]
    49e0:	b.n	47bc <_malloc_r+0x2ec>
    49e2:	movs	r3, #254	; 0xfe
    49e4:	mov.w	lr, #127	; 0x7f
    49e8:	movs	r0, #126	; 0x7e
    49ea:	b.n	4514 <_malloc_r+0x44>
    49ec:	movs	r2, #1
    49ee:	mov.w	r9, #0
    49f2:	b.n	4778 <_malloc_r+0x2a8>
    49f4:	add.w	r1, r4, #8
    49f8:	mov	r0, r6
    49fa:	bl	4b50 <_free_r>
    49fe:	ldr.w	r1, [r9]
    4a02:	b.n	47bc <_malloc_r+0x2ec>
    4a04:	cmp.w	r2, #340	; 0x154
    4a08:	bhi.n	4a16 <_malloc_r+0x546>
    4a0a:	lsrs	r2, r3, #15
    4a0c:	add.w	r1, r2, #120	; 0x78
    4a10:	lsls	r1, r1, #1
    4a12:	adds	r2, #119	; 0x77
    4a14:	b.n	4854 <_malloc_r+0x384>
    4a16:	movw	r1, #1364	; 0x554
    4a1a:	cmp	r2, r1
    4a1c:	bhi.n	4a2a <_malloc_r+0x55a>
    4a1e:	lsrs	r2, r3, #18
    4a20:	add.w	r1, r2, #125	; 0x7d
    4a24:	lsls	r1, r1, #1
    4a26:	adds	r2, #124	; 0x7c
    4a28:	b.n	4854 <_malloc_r+0x384>
    4a2a:	movs	r1, #254	; 0xfe
    4a2c:	movs	r2, #126	; 0x7e
    4a2e:	b.n	4854 <_malloc_r+0x384>
    4a30:	ldr	r3, [r7, #4]
    4a32:	b.n	493e <_malloc_r+0x46e>
    4a34:	lsrs	r0, r5, #3
    4a36:	adds	r3, r0, #1
    4a38:	lsls	r3, r3, #1
    4a3a:	b.n	462e <_malloc_r+0x15e>
    4a3c:	.word	0x1fff119c

00004a40 <__malloc_lock>:
    4a40:	bx	lr
    4a42:	nop

00004a44 <__malloc_unlock>:
    4a44:	bx	lr
    4a46:	nop

00004a48 <_sbrk_r>:
    4a48:	push	{r3, r4, r5, lr}
    4a4a:	ldr	r4, [pc, #28]	; (4a68 <_sbrk_r+0x20>)
    4a4c:	movs	r3, #0
    4a4e:	mov	r5, r0
    4a50:	mov	r0, r1
    4a52:	str	r3, [r4, #0]
    4a54:	bl	3ddc <_sbrk>
    4a58:	adds	r3, r0, #1
    4a5a:	beq.n	4a5e <_sbrk_r+0x16>
    4a5c:	pop	{r3, r4, r5, pc}
    4a5e:	ldr	r3, [r4, #0]
    4a60:	cmp	r3, #0
    4a62:	beq.n	4a5c <_sbrk_r+0x14>
    4a64:	str	r3, [r5, #0]
    4a66:	pop	{r3, r4, r5, pc}
    4a68:	.word	0x1fff1e38

00004a6c <register_fini>:
    4a6c:	ldr	r3, [pc, #8]	; (4a78 <register_fini+0xc>)
    4a6e:	cbz	r3, 4a76 <register_fini+0xa>
    4a70:	ldr	r0, [pc, #8]	; (4a7c <register_fini+0x10>)
    4a72:	b.w	4a80 <atexit>
    4a76:	bx	lr
    4a78:	.word	0x00000000
    4a7c:	.word	0x00004a8d

00004a80 <atexit>:
    4a80:	movs	r3, #0
    4a82:	mov	r1, r0
    4a84:	mov	r2, r3
    4a86:	mov	r0, r3
    4a88:	b.w	4d20 <__register_exitproc>

00004a8c <__libc_fini_array>:
    4a8c:	push	{r3, r4, r5, lr}
    4a8e:	ldr	r5, [pc, #28]	; (4aac <__libc_fini_array+0x20>)
    4a90:	ldr	r4, [pc, #28]	; (4ab0 <__libc_fini_array+0x24>)
    4a92:	subs	r4, r5, r4
    4a94:	asrs	r4, r4, #2
    4a96:	beq.n	4aa4 <__libc_fini_array+0x18>
    4a98:	subs	r4, #1
    4a9a:	ldr.w	r3, [r5, #-4]!
    4a9e:	blx	r3
    4aa0:	cmp	r4, #0
    4aa2:	bne.n	4a98 <__libc_fini_array+0xc>
    4aa4:	ldmia.w	sp!, {r3, r4, r5, lr}
    4aa8:	b.w	5134 <__init_array_end>
	...

00004ab4 <_malloc_trim_r>:
    4ab4:	push	{r3, r4, r5, r6, r7, lr}
    4ab6:	ldr	r7, [pc, #140]	; (4b44 <_malloc_trim_r+0x90>)
    4ab8:	mov	r4, r1
    4aba:	mov	r6, r0
    4abc:	bl	4a40 <__malloc_lock>
    4ac0:	ldr	r3, [r7, #8]
    4ac2:	ldr	r5, [r3, #4]
    4ac4:	bic.w	r5, r5, #3
    4ac8:	subs	r1, r5, r4
    4aca:	addw	r1, r1, #4079	; 0xfef
    4ace:	bic.w	r1, r1, #4080	; 0xff0
    4ad2:	bic.w	r1, r1, #15
    4ad6:	sub.w	r4, r1, #4096	; 0x1000
    4ada:	cmp.w	r4, #4096	; 0x1000
    4ade:	blt.n	4af0 <_malloc_trim_r+0x3c>
    4ae0:	movs	r1, #0
    4ae2:	mov	r0, r6
    4ae4:	bl	4a48 <_sbrk_r>
    4ae8:	ldr	r3, [r7, #8]
    4aea:	add	r3, r5
    4aec:	cmp	r0, r3
    4aee:	beq.n	4afa <_malloc_trim_r+0x46>
    4af0:	mov	r0, r6
    4af2:	bl	4a44 <__malloc_unlock>
    4af6:	movs	r0, #0
    4af8:	pop	{r3, r4, r5, r6, r7, pc}
    4afa:	negs	r1, r4
    4afc:	mov	r0, r6
    4afe:	bl	4a48 <_sbrk_r>
    4b02:	adds	r0, #1
    4b04:	beq.n	4b22 <_malloc_trim_r+0x6e>
    4b06:	ldr	r3, [pc, #64]	; (4b48 <_malloc_trim_r+0x94>)
    4b08:	ldr	r2, [r7, #8]
    4b0a:	ldr	r1, [r3, #0]
    4b0c:	subs	r5, r5, r4
    4b0e:	orr.w	r5, r5, #1
    4b12:	mov	r0, r6
    4b14:	subs	r1, r1, r4
    4b16:	str	r5, [r2, #4]
    4b18:	str	r1, [r3, #0]
    4b1a:	bl	4a44 <__malloc_unlock>
    4b1e:	movs	r0, #1
    4b20:	pop	{r3, r4, r5, r6, r7, pc}
    4b22:	movs	r1, #0
    4b24:	mov	r0, r6
    4b26:	bl	4a48 <_sbrk_r>
    4b2a:	ldr	r2, [r7, #8]
    4b2c:	subs	r3, r0, r2
    4b2e:	cmp	r3, #15
    4b30:	ble.n	4af0 <_malloc_trim_r+0x3c>
    4b32:	ldr	r4, [pc, #24]	; (4b4c <_malloc_trim_r+0x98>)
    4b34:	ldr	r1, [pc, #16]	; (4b48 <_malloc_trim_r+0x94>)
    4b36:	ldr	r4, [r4, #0]
    4b38:	orr.w	r3, r3, #1
    4b3c:	subs	r0, r0, r4
    4b3e:	str	r3, [r2, #4]
    4b40:	str	r0, [r1, #0]
    4b42:	b.n	4af0 <_malloc_trim_r+0x3c>
    4b44:	.word	0x1fff119c
    4b48:	.word	0x1fff1ccc
    4b4c:	.word	0x1fff15a8

00004b50 <_free_r>:
    4b50:	cmp	r1, #0
    4b52:	beq.n	4be0 <_free_r+0x90>
    4b54:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b58:	mov	r5, r1
    4b5a:	mov	r8, r0
    4b5c:	bl	4a40 <__malloc_lock>
    4b60:	ldr.w	r7, [r5, #-4]
    4b64:	ldr	r1, [pc, #424]	; (4d10 <_free_r+0x1c0>)
    4b66:	bic.w	r3, r7, #1
    4b6a:	sub.w	r4, r5, #8
    4b6e:	adds	r2, r4, r3
    4b70:	ldr	r6, [r1, #8]
    4b72:	ldr	r0, [r2, #4]
    4b74:	cmp	r2, r6
    4b76:	bic.w	r0, r0, #3
    4b7a:	beq.n	4c42 <_free_r+0xf2>
    4b7c:	lsls	r6, r7, #31
    4b7e:	str	r0, [r2, #4]
    4b80:	bmi.n	4b9a <_free_r+0x4a>
    4b82:	ldr.w	r7, [r5, #-8]
    4b86:	subs	r4, r4, r7
    4b88:	add.w	lr, r1, #8
    4b8c:	ldr	r5, [r4, #8]
    4b8e:	cmp	r5, lr
    4b90:	add	r3, r7
    4b92:	beq.n	4c74 <_free_r+0x124>
    4b94:	ldr	r7, [r4, #12]
    4b96:	str	r7, [r5, #12]
    4b98:	str	r5, [r7, #8]
    4b9a:	adds	r5, r2, r0
    4b9c:	ldr	r5, [r5, #4]
    4b9e:	lsls	r5, r5, #31
    4ba0:	bpl.n	4c28 <_free_r+0xd8>
    4ba2:	orr.w	r2, r3, #1
    4ba6:	str	r2, [r4, #4]
    4ba8:	str	r3, [r4, r3]
    4baa:	cmp.w	r3, #512	; 0x200
    4bae:	bcs.n	4be2 <_free_r+0x92>
    4bb0:	lsrs	r3, r3, #3
    4bb2:	adds	r2, r3, #1
    4bb4:	ldr	r5, [r1, #4]
    4bb6:	ldr.w	r7, [r1, r2, lsl #3]
    4bba:	str	r7, [r4, #8]
    4bbc:	movs	r0, #1
    4bbe:	asrs	r3, r3, #2
    4bc0:	lsl.w	r3, r0, r3
    4bc4:	add.w	r0, r1, r2, lsl #3
    4bc8:	orrs	r5, r3
    4bca:	subs	r0, #8
    4bcc:	str	r0, [r4, #12]
    4bce:	str	r5, [r1, #4]
    4bd0:	str.w	r4, [r1, r2, lsl #3]
    4bd4:	str	r4, [r7, #12]
    4bd6:	mov	r0, r8
    4bd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4bdc:	b.w	4a44 <__malloc_unlock>
    4be0:	bx	lr
    4be2:	lsrs	r2, r3, #9
    4be4:	cmp	r2, #4
    4be6:	bhi.n	4c90 <_free_r+0x140>
    4be8:	lsrs	r2, r3, #6
    4bea:	add.w	r7, r2, #57	; 0x39
    4bee:	lsls	r7, r7, #1
    4bf0:	add.w	r5, r2, #56	; 0x38
    4bf4:	add.w	r0, r1, r7, lsl #2
    4bf8:	ldr.w	r2, [r1, r7, lsl #2]
    4bfc:	ldr	r1, [pc, #272]	; (4d10 <_free_r+0x1c0>)
    4bfe:	subs	r0, #8
    4c00:	cmp	r0, r2
    4c02:	beq.n	4ca0 <_free_r+0x150>
    4c04:	ldr	r1, [r2, #4]
    4c06:	bic.w	r1, r1, #3
    4c0a:	cmp	r3, r1
    4c0c:	bcs.n	4c14 <_free_r+0xc4>
    4c0e:	ldr	r2, [r2, #8]
    4c10:	cmp	r0, r2
    4c12:	bne.n	4c04 <_free_r+0xb4>
    4c14:	ldr	r0, [r2, #12]
    4c16:	str	r0, [r4, #12]
    4c18:	str	r2, [r4, #8]
    4c1a:	str	r4, [r0, #8]
    4c1c:	str	r4, [r2, #12]
    4c1e:	mov	r0, r8
    4c20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c24:	b.w	4a44 <__malloc_unlock>
    4c28:	ldr	r5, [r2, #8]
    4c2a:	ldr	r7, [pc, #232]	; (4d14 <_free_r+0x1c4>)
    4c2c:	cmp	r5, r7
    4c2e:	add	r3, r0
    4c30:	beq.n	4cb2 <_free_r+0x162>
    4c32:	ldr	r0, [r2, #12]
    4c34:	str	r0, [r5, #12]
    4c36:	orr.w	r2, r3, #1
    4c3a:	str	r5, [r0, #8]
    4c3c:	str	r2, [r4, #4]
    4c3e:	str	r3, [r4, r3]
    4c40:	b.n	4baa <_free_r+0x5a>
    4c42:	lsls	r7, r7, #31
    4c44:	add	r3, r0
    4c46:	bmi.n	4c58 <_free_r+0x108>
    4c48:	ldr.w	r2, [r5, #-8]
    4c4c:	subs	r4, r4, r2
    4c4e:	add	r3, r2
    4c50:	ldr	r0, [r4, #8]
    4c52:	ldr	r2, [r4, #12]
    4c54:	str	r2, [r0, #12]
    4c56:	str	r0, [r2, #8]
    4c58:	ldr	r2, [pc, #188]	; (4d18 <_free_r+0x1c8>)
    4c5a:	ldr	r2, [r2, #0]
    4c5c:	orr.w	r0, r3, #1
    4c60:	cmp	r3, r2
    4c62:	str	r0, [r4, #4]
    4c64:	str	r4, [r1, #8]
    4c66:	bcc.n	4bd6 <_free_r+0x86>
    4c68:	ldr	r3, [pc, #176]	; (4d1c <_free_r+0x1cc>)
    4c6a:	mov	r0, r8
    4c6c:	ldr	r1, [r3, #0]
    4c6e:	bl	4ab4 <_malloc_trim_r>
    4c72:	b.n	4bd6 <_free_r+0x86>
    4c74:	adds	r1, r2, r0
    4c76:	ldr	r1, [r1, #4]
    4c78:	lsls	r1, r1, #31
    4c7a:	bmi.n	4d06 <_free_r+0x1b6>
    4c7c:	ldr	r1, [r2, #8]
    4c7e:	ldr	r2, [r2, #12]
    4c80:	str	r2, [r1, #12]
    4c82:	add	r3, r0
    4c84:	orr.w	r0, r3, #1
    4c88:	str	r1, [r2, #8]
    4c8a:	str	r0, [r4, #4]
    4c8c:	str	r3, [r4, r3]
    4c8e:	b.n	4bd6 <_free_r+0x86>
    4c90:	cmp	r2, #20
    4c92:	bhi.n	4cc4 <_free_r+0x174>
    4c94:	add.w	r7, r2, #92	; 0x5c
    4c98:	lsls	r7, r7, #1
    4c9a:	add.w	r5, r2, #91	; 0x5b
    4c9e:	b.n	4bf4 <_free_r+0xa4>
    4ca0:	asrs	r2, r5, #2
    4ca2:	ldr	r3, [r1, #4]
    4ca4:	movs	r5, #1
    4ca6:	lsl.w	r2, r5, r2
    4caa:	orrs	r3, r2
    4cac:	str	r3, [r1, #4]
    4cae:	mov	r2, r0
    4cb0:	b.n	4c16 <_free_r+0xc6>
    4cb2:	orr.w	r2, r3, #1
    4cb6:	str	r4, [r1, #20]
    4cb8:	str	r4, [r1, #16]
    4cba:	str	r5, [r4, #12]
    4cbc:	str	r5, [r4, #8]
    4cbe:	str	r2, [r4, #4]
    4cc0:	str	r3, [r4, r3]
    4cc2:	b.n	4bd6 <_free_r+0x86>
    4cc4:	cmp	r2, #84	; 0x54
    4cc6:	bhi.n	4cd6 <_free_r+0x186>
    4cc8:	lsrs	r2, r3, #12
    4cca:	add.w	r7, r2, #111	; 0x6f
    4cce:	lsls	r7, r7, #1
    4cd0:	add.w	r5, r2, #110	; 0x6e
    4cd4:	b.n	4bf4 <_free_r+0xa4>
    4cd6:	cmp.w	r2, #340	; 0x154
    4cda:	bhi.n	4cea <_free_r+0x19a>
    4cdc:	lsrs	r2, r3, #15
    4cde:	add.w	r7, r2, #120	; 0x78
    4ce2:	lsls	r7, r7, #1
    4ce4:	add.w	r5, r2, #119	; 0x77
    4ce8:	b.n	4bf4 <_free_r+0xa4>
    4cea:	movw	r0, #1364	; 0x554
    4cee:	cmp	r2, r0
    4cf0:	bhi.n	4d00 <_free_r+0x1b0>
    4cf2:	lsrs	r2, r3, #18
    4cf4:	add.w	r7, r2, #125	; 0x7d
    4cf8:	lsls	r7, r7, #1
    4cfa:	add.w	r5, r2, #124	; 0x7c
    4cfe:	b.n	4bf4 <_free_r+0xa4>
    4d00:	movs	r7, #254	; 0xfe
    4d02:	movs	r5, #126	; 0x7e
    4d04:	b.n	4bf4 <_free_r+0xa4>
    4d06:	orr.w	r2, r3, #1
    4d0a:	str	r2, [r4, #4]
    4d0c:	str	r3, [r4, r3]
    4d0e:	b.n	4bd6 <_free_r+0x86>
    4d10:	.word	0x1fff119c
    4d14:	.word	0x1fff11a4
    4d18:	.word	0x1fff15a4
    4d1c:	.word	0x1fff1cc8

00004d20 <__register_exitproc>:
    4d20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d24:	ldr	r4, [pc, #148]	; (4dbc <__register_exitproc+0x9c>)
    4d26:	ldr	r5, [r4, #0]
    4d28:	ldr.w	r4, [r5, #328]	; 0x148
    4d2c:	mov	r6, r0
    4d2e:	mov	r8, r1
    4d30:	mov	sl, r2
    4d32:	mov	r9, r3
    4d34:	cbz	r4, 4da8 <__register_exitproc+0x88>
    4d36:	ldr	r0, [r4, #4]
    4d38:	cmp	r0, #31
    4d3a:	bgt.n	4d6c <__register_exitproc+0x4c>
    4d3c:	adds	r3, r0, #1
    4d3e:	cbz	r6, 4d5e <__register_exitproc+0x3e>
    4d40:	add.w	r5, r4, r0, lsl #2
    4d44:	movs	r2, #1
    4d46:	str.w	sl, [r5, #136]	; 0x88
    4d4a:	ldr.w	r1, [r4, #392]	; 0x188
    4d4e:	lsls	r2, r0
    4d50:	orrs	r1, r2
    4d52:	cmp	r6, #2
    4d54:	str.w	r1, [r4, #392]	; 0x188
    4d58:	str.w	r9, [r5, #264]	; 0x108
    4d5c:	beq.n	4d9c <__register_exitproc+0x7c>
    4d5e:	adds	r0, #2
    4d60:	str	r3, [r4, #4]
    4d62:	str.w	r8, [r4, r0, lsl #2]
    4d66:	movs	r0, #0
    4d68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d6c:	ldr	r3, [pc, #80]	; (4dc0 <__register_exitproc+0xa0>)
    4d6e:	cbz	r3, 4db2 <__register_exitproc+0x92>
    4d70:	mov.w	r0, #400	; 0x190
    4d74:	bl	44c0 <malloc>
    4d78:	mov	r4, r0
    4d7a:	cbz	r0, 4db2 <__register_exitproc+0x92>
    4d7c:	ldr.w	r3, [r5, #328]	; 0x148
    4d80:	movs	r7, #0
    4d82:	stmia.w	r0, {r3, r7}
    4d86:	str.w	r4, [r5, #328]	; 0x148
    4d8a:	mov	r0, r7
    4d8c:	movs	r3, #1
    4d8e:	str.w	r7, [r4, #392]	; 0x188
    4d92:	str.w	r7, [r4, #396]	; 0x18c
    4d96:	cmp	r6, #0
    4d98:	beq.n	4d5e <__register_exitproc+0x3e>
    4d9a:	b.n	4d40 <__register_exitproc+0x20>
    4d9c:	ldr.w	r1, [r4, #396]	; 0x18c
    4da0:	orrs	r2, r1
    4da2:	str.w	r2, [r4, #396]	; 0x18c
    4da6:	b.n	4d5e <__register_exitproc+0x3e>
    4da8:	add.w	r4, r5, #332	; 0x14c
    4dac:	str.w	r4, [r5, #328]	; 0x148
    4db0:	b.n	4d36 <__register_exitproc+0x16>
    4db2:	mov.w	r0, #4294967295
    4db6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dba:	nop
    4dbc:	.word	0x00005118
    4dc0:	.word	0x000044c1
    4dc4:	.word	0x00000026
    4dc8:	.word	0x00000029
    4dcc:	.word	0x0000002d
    4dd0:	.word	0x00000033
    4dd4:	.word	0x00000064
    4dd8:	.word	0x00000064
    4ddc:	.word	0x00000064
    4de0:	.word	0x00000064
    4de4:	.word	0x00000001
    4de8:	.word	0x00000001
    4dec:	.word	0x00000001
    4df0:	.word	0x00000001
    4df4:	.word	0x7370704f
    4df8:	.word	0x6e61202c
    4dfc:	.word	0x6b6e7520
    4e00:	.word	0x6e776f6e
    4e04:	.word	0x44494d20
    4e08:	.word	0x656d2049
    4e0c:	.word	0x67617373
    4e10:	.word	0x79742065
    4e14:	.word	0x00216570
    4e18:	.word	0x43544950
    4e1c:	.word	0x00000048
    4e20:	.word	0x4f4c4556
    4e24:	.word	0x59544943
    4e28:	.word	0x00000000
    4e2c:	.word	0x45544f4e
    4e30:	.word	0x474e454c
    4e34:	.word	0x00004854
    4e38:	.word	0x424f4c47
    4e3c:	.word	0x00004c41
    4e40:	.word	0x79616c50
    4e44:	.word	0x00000000

00004e48 <pin2sc1a>:
    4e48:	................
    4e58:	................
    4e68:	................
    4e78:	................
    4e88:	........

00004e90 <digital_pin_to_info_PGM>:
    4e90:	@..C@..@D..CD..@
    4ea0:	...C...@0..C0..@
    4eb0:	4..C4..@...C...@
    4ec0:	...C...@...C...@
    4ed0:	...C...@...C...@
    4ee0:	...C...@...C...@
    4ef0:	...C...@...C...@
    4f00:	...C...@...C...@
    4f10:	...C...@...C...@
    4f20:	...C...@...C...@
    4f30:	...C...@...C...@
    4f40:	...C...@...C...@
    4f50:	h .Ch..@...C...@
    4f60:	8..C8..@<..C<..@
    4f70:	@..C@..@H..CH..@
    4f80:	L..CL..@(..C(..@
    4f90:	,..C,..@` .C`..@
    4fa0:	d .Cd..@ ..C ..@
    4fb0:	$..C$..@(..C(..@
    4fc0:	,..C,..@D..CD..@
    4fd0:	p..Cp..@t..Ct..@
    4fe0:	h..Ch..@P..CP..@
    4ff0:	X..CX..@\..C\..@
    5000:	T..CT..@ ..C ..@
    5010:	$..C$..@...C...@
    5020:	...C...@8..C8..@
    5030:	4..C4..@0..C0..@
    5040:	<..C<..@,..C,..@
    5050:	( .C(..@, .C,..@
    5060:	. .C...@. .C...@
    5070:	. .C...@. .C...@
    5080:	. .C...@. .C...@

00005090 <vtable for usb_serial_class>:
	...
    5098:	.:...:...:...:..
    50a8:	.:...:...9...9..
    50b8:	....

000050bc <usb_endpoint_config_table>:
    50bc:	........

000050c4 <usb_descriptor_list>:
    50c4:	....t...........
    50d4:	............P...
    50e4:	................
    50f4:	....8...........
    5104:	T...............
    5114:	....

00005118 <_global_impure_ptr>:
    5118:	p...

0000511c <_init>:
    511c:	push	{r3, r4, r5, r6, r7, lr}
    511e:	nop
    5120:	pop	{r3, r4, r5, r6, r7}
    5122:	pop	{r3}
    5124:	mov	lr, r3
    5126:	bx	lr

00005128 <__init_array_start>:
    5128:	.word	0x00004a6d

0000512c <__frame_dummy_init_array_entry>:
    512c:	5.......

Disassembly of section .fini:

00005134 <_fini>:
    5134:	push	{r3, r4, r5, r6, r7, lr}
    5136:	nop

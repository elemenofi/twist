
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004e0c l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003adc l     F .text	0000000c startup_default_early_hook
00003ae8 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
00004e04 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001878 l     F .text	0000027c _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1869 l     O .bss	00000001 tx_noautoflush
1fff186c l     O .bss	00000004 tx_packet
1fff1870 l     O .bss	00000001 transmit_previous_timeout
1fff1874 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001dc8 l     F .text	00000144 wait_for_cal
1fff1879 l     O .bss	00000001 analog_right_shift
1fff187a l     O .bss	00000001 calibrating
00004b20 l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff187b l     O .bss	00000001 analogReadBusyADC1
1fff187c l     O .bss	00000001 analogReadBusyADC0
1fff187d l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000020e8 l     F .text	0000004c digitalWrite.part.1
00002134 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002414 l     F .text	00000048 sysex_byte
1fff1898 l     O .bss	00000001 tx_noautoflush
1fff18c4 l     O .bss	00000004 tx_packet
1fff18c8 l     O .bss	00000001 transmit_previous_timeout
1fff18d0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18e4 l     O .bss	00000004 ep0_tx_ptr
1fff18e8 l     O .bss	00000014 rx_last
1fff18fc l     O .bss	00000002 ep0_tx_len
1fff1900 l     O .bss	00000040 ep0_rx0_buf
1fff1940 l     O .bss	00000014 rx_first
1fff1954 l     O .bss	00000001 ep0_tx_data_toggle
1fff1958 l     O .bss	00000040 ep0_rx1_buf
1fff1998 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff19ac l     O .bss	00000014 tx_last
1fff19c0 l     O .bss	00000008 setup
1fff19c8 l     O .bss	00000001 ep0_tx_bdt_bank
1fff19cc l     O .bss	00000008 reply_buffer
1fff19d8 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19dd l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19e0 l     O .bss	00000004 rts_pin
1fff19e4 l     O .bss	00000001 rx_buffer_head
1fff19e5 l     O .bss	00000001 rx_buffer_tail
1fff19e8 l     O .bss	00000028 tx_buffer
1fff1a10 l     O .bss	00000040 rx_buffer
1fff1a50 l     O .bss	00000001 transmitting
1fff1a51 l     O .bss	00000001 tx_buffer_tail
1fff1a54 l     O .bss	00000004 transmit_pin
1fff1a58 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a5c l     O .bss	00000004 rts_pin
1fff1a60 l     O .bss	00000001 transmitting
1fff1a61 l     O .bss	00000001 rx_buffer_tail
1fff1a64 l     O .bss	00000028 tx_buffer
1fff1a8c l     O .bss	00000040 rx_buffer
1fff1acc l     O .bss	00000001 rx_buffer_head
1fff1acd l     O .bss	00000001 tx_buffer_tail
1fff1ad0 l     O .bss	00000004 transmit_pin
1fff1ad4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1ad8 l     O .bss	00000004 rts_pin
1fff1adc l     O .bss	00000001 rx_buffer_head
1fff1add l     O .bss	00000001 rx_buffer_tail
1fff1ae0 l     O .bss	00000028 tx_buffer
1fff1b08 l     O .bss	00000040 rx_buffer
1fff1b48 l     O .bss	00000001 transmitting
1fff1b49 l     O .bss	00000001 tx_buffer_tail
1fff1b4c l     O .bss	00000004 transmit_pin
1fff1b50 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b54 l     O .bss	00000004 rts_pin
1fff1b58 l     O .bss	00000001 rx_buffer_head
1fff1b59 l     O .bss	00000001 rx_buffer_tail
1fff1b5c l     O .bss	00000040 tx_buffer
1fff1b9c l     O .bss	00000040 rx_buffer
1fff1bdc l     O .bss	00000001 transmitting
1fff1bdd l     O .bss	00000001 tx_buffer_tail
1fff1be0 l     O .bss	00000004 transmit_pin
1fff1be4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1be8 l     O .bss	00000004 rts_pin
1fff1bec l     O .bss	00000001 rx_buffer_head
1fff1bed l     O .bss	00000001 rx_buffer_tail
1fff1bf0 l     O .bss	00000028 tx_buffer
1fff1c18 l     O .bss	00000040 rx_buffer
1fff1c58 l     O .bss	00000001 transmitting
1fff1c59 l     O .bss	00000001 tx_buffer_tail
1fff1c5c l     O .bss	00000004 transmit_pin
1fff1c60 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c64 l     O .bss	00000004 rts_pin
1fff1c68 l     O .bss	00000001 rx_buffer_head
1fff1c69 l     O .bss	00000001 rx_buffer_tail
1fff1c6c l     O .bss	00000028 tx_buffer
1fff1c94 l     O .bss	00000040 rx_buffer
1fff1cd4 l     O .bss	00000001 transmitting
1fff1cd5 l     O .bss	00000001 tx_buffer_tail
1fff1cd8 l     O .bss	00000004 transmit_pin
1fff1cdc l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000477c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1e78 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003ad4  w    F .text	00000006 adc0_isr
00001b6c g     F .text	0000001c usb_serial_available
00003994 g     F .text	00000020 serial4_available
00003640  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
00003b80 g     F .text	00000020 serial_available
1fff189c g     O .bss	00000004 usb_midi_handleProgramChange
00003a8c  w    F .text	00000048 hard_fault_isr
00003ad4  w    F .text	00000006 dma_ch6_isr
00003734 g     F .text	00000020 Print::println()
00003868 g     F .text	00000020 serial2_available
00003ad4  w    F .text	00000006 uart0_lon_isr
00002a54 g     F .text	000000e8 usb_rx_memory
00003704  w    F .text	00000002 serialEvent5()
00003ad4  w    F .text	00000006 dma_ch8_isr
00003cac g     F .text	00000020 serial6_available
00004754 g     F .text	00000002 __malloc_unlock
1fff18b0 g     O .bss	00000004 usb_midi_handleAfterTouch
00001f0c g     F .text	000000e0 analog_init
00002b3c g     F .text	00000084 usb_tx
00003ad4  w    F .text	00000006 portcd_isr
1fff18c0 g     O .bss	00000004 usb_midi_handleSysExComplete
000040cc g     F .text	00000098 MillisTimer::runFromTimer()
00003ad4  w    F .text	00000006 can1_rx_warn_isr
00004e10 g       .fini	00000000 __exidx_end
00003ad4  w    F .text	00000006 dma_error_isr
1fff1d3c g     O .bss	00000001 usb_midi_msg_type
1fff1cf4 g     O .bss	00000001 EventResponder::runningFromYield
00003ad4  w    F .text	00000006 i2c0_isr
00004174 g     F .text	0000000c __errno
00003ad4  w    F .text	00000006 portd_isr
00003ad4  w    F .text	00000006 enet_error_isr
1fff1ce0 g     O .bss	00000004 EventResponder::firstInterrupt
00003ad4  w    F .text	00000006 tpm1_isr
00003720  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004b68 g     O .text	00000200 digital_pin_to_info_PGM
1fff1e74 g     O .bss	00000004 errno
00004e10 g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
0000376c  w    F .text	00000002 serialEvent6()
1fff18ac g     O .bss	00000004 usb_midi_handleVelocityChange
000021dc g     F .text	0000001c digitalRead
00003ad4  w    F .text	00000006 porte_isr
00000494 g     F .text	000013e4 loop
00003ad4  w    F .text	00000006 portb_isr
1fff170c g     O .bss	00000014 step3
000024f8 g     F .text	0000002c usb_midi_flush_output
00003ad4  w    F .text	00000006 spi1_isr
000039b4 g     F .text	000000d8 uart3_status_isr
00003f78  w    F .text	00000002 serialEvent1()
1fff1850 g     O .bss	00000018 led4
00003ad4  w    F .text	00000006 mcm_isr
00004064 g     F .text	00000068 MillisTimer::addToActiveList()
00002524 g     F .text	0000043c usb_midi_read
1fff1888 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1ce4 g     O .bss	00000004 EventResponder::lastInterrupt
00003888 g     F .text	0000010c uart1_status_isr
1fff1d3e g     O .bss	00000002 usb_midi_msg_sysex_len
00003ad4  w    F .text	00000006 randnum_isr
1fff1890 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1880 g     O .bss	00000004 systick_millis_count
00003a8c  w    F .text	00000048 bus_fault_isr
00003ad4  w    F .text	00000006 watchdog_isr
00003ad4  w    F .text	00000006 i2c1_isr
1fff19d4 g     O .bss	00000001 usb_configuration
00003ad4  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003754  w    F .text	00000002 serialEvent2()
00003ad4  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1e68 g     O .bss	0000000a usb_rx_byte_count_data
00003ad4  w    F .text	00000006 pit1_isr
000041d0 g     F .text	00000010 malloc
00003ad4  w    F .text	00000006 dma_ch4_isr
00003ad4  w    F .text	00000006 software_isr
00003ad4  w    F .text	00000006 dma_ch7_isr
00004000  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003570 g     F .text	000000d0 usb_init
00003ad4  w    F .text	00000006 lptmr_isr
1fff1d04 g     O .bss	00000004 __malloc_top_pad
000021ac g     F .text	00000024 rtc_set
1fff169c g     O .bss	00000024 button5
1fff1678 g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff18e0 g     O .bss	00000004 usb_midi_handleNoteOn
00003b4c g     F .text	00000034 kinetis_hsrun_enable
00004758 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001af4 g     F .text	00000048 usb_serial_getchar
00003ad4  w    F .text	00000006 can1_bus_off_isr
00003ad4  w    F .text	00000006 ftm2_isr
1fff1d30 g     O .bss	00000008 usb_cdc_line_coding
000021d0 g     F .text	0000000a digitalWrite
00003ad4  w    F .text	00000006 uart5_status_isr
00003ccc g     F .text	000000e4 lpuart0_status_isr
1fff1cec g     O .bss	00000004 EventResponder::lastYield
00004d94 g     O .text	00000005 usb_endpoint_config_table
00003ad4  w    F .text	00000006 dma_ch9_isr
00003ad4  w    F .text	00000006 pit2_isr
00003e80 g     F .text	00000020 serial3_available
1fff1720 g     O .bss	00000014 step4
1fff1d00 g     O .bss	00000004 __malloc_max_sbrked_mem
000021f8 g     F .text	0000000a pinMode
000029a0 g     F .text	0000004c usb_free
00003ad4  w    F .text	00000006 i2c3_isr
1fff1808 g     O .bss	00000018 led1
1fff18a8 g     O .bss	00000004 usb_midi_handleSysExPartial
00004e10 g       .fini	00000000 __exidx_start
00003ad4  w    F .text	00000006 pit0_isr
1fff1d40 g     O .bss	00000001 usb_midi_msg_data1
1fff1cf0 g     O .bss	00000004 EventResponder::firstYield
00004df0 g     O .text	00000004 _global_impure_ptr
00003ad4  w    F .text	00000006 can1_error_isr
00004180 g     F .text	00000050 __libc_init_array
1fff1e78 g       .bss	00000000 __bss_end
00003ad4  w    F .text	00000006 can0_wakeup_isr
00003ad4  w    F .text	00000006 flash_cmd_isr
1fff17a4 g     O .bss	0000001c knob5
00003708  w    F .text	00000004 usb_serial_class::clear()
00003ea0 g     F .text	000000d8 uart2_status_isr
00003aec g     F .text	0000002c _sbrk
1fff1cf8 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff1878 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001d80 g     F .text	00000048 usb_serial_flush_callback
00004df4 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
00003ad4  w    F .text	00000006 svcall_isr
00003ad4  w    F .text	00000006 dma_ch15_isr
00003ad4  w    F .text	00000006 uart1_error_isr
0000479c g     F .text	00000028 __libc_fini_array
00003ad4  w    F .text	00000006 usbhs_phy_isr
1fff1e78 g       .bss	00000000 _ebss
00003ad4 g     F .text	00000006 unused_isr
00003ad4  w    F .text	00000006 spi0_isr
00003ad4  w    F .text	00000006 dma_ch3_isr
00003ad4  w    F .text	00000006 flash_error_isr
1fff1750 g     O .bss	0000001c knob2
00003770 g     F .text	00000020 serial5_available
00003ad4  w    F .text	00000006 uart5_error_isr
00003ad4  w    F .text	00000006 rtc_seconds_isr
00003ad4  w    F .text	00000006 pdb_isr
00003a8c  w    F .text	00000048 usage_fault_isr
00003ad4  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003ad4  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1d38 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff17f4 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
00004164 g     F .text	00000010 systick_isr
00003ad4  w    F .text	00000006 rtc_alarm_isr
00003ad4  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
00003ad4  w    F .text	00000006 ftm1_isr
00003728  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003adc  w    F .text	0000000c startup_early_hook
00003ad4  w    F .text	00000006 dma_ch13_isr
00003ad4  w    F .text	00000006 uart2_error_isr
00001b3c g     F .text	00000030 usb_serial_peekchar
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
00003a8c g     F .text	00000048 fault_isr
00004860 g     F .text	000001d0 _free_r
1fff18cc g     O .bss	00000004 usb_midi_handleStop
00003ad4  w    F .text	00000006 usb_charge_isr
00003718  w    F .text	00000004 usb_serial_class::flush()
00003ad4  w    F .text	00000006 cmt_isr
00003ad4  w    F .text	00000006 usbhs_isr
1fff18dc g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
00003710  w    F .text	00000004 usb_serial_class::read()
00003ad4  w    F .text	00000006 ftm3_isr
00003ad4  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff1734 g     O .bss	0000001c knob1
00003ad4  w    F .text	00000006 spi2_isr
00003758  w    F .text	00000002 serialEvent4()
00003730  w    F .text	00000002 serialEvent()
1fff1955 g     O .bss	00000001 usb_reboot_timer
00004a30 g     F .text	000000a4 __register_exitproc
00001b88 g     F .text	00000038 usb_serial_flush_input
00001cc8 g     F .text	00000018 usb_serial_putchar
1fff1d08 g     O .bss	00000028 __malloc_current_mallinfo
00003ad4  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff19c9 g     O .bss	00000001 usb_rx_memory_needed
00002bc0 g     F .text	000009b0 usb_isr
1fff16e4 g     O .bss	00000014 step1
1fff18d8 g     O .bss	00000004 usb_midi_handleNoteOff
00004d68  w    O .text	00000028 vtable for usb_serial_class
1fff176c g     O .bss	0000001c knob3
00003ad4  w    F .text	00000006 uart3_error_isr
1fff1ce8 g     O .bss	00000004 MillisTimer::listActive
00003ad4  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003ad4  w    F .text	00000006 low_voltage_isr
1fff1630 g     O .bss	00000024 button2
1fff11ac g     O .data	00000408 __malloc_av_
00003ad4  w    F .text	00000006 can0_error_isr
000022a8 g     F .text	0000016c _init_Teensyduino_internal_
00001d28 g     F .text	00000058 usb_serial_flush_output
00003ad4  w    F .text	00000006 dma_ch12_isr
00004750 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003ad4  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003ad4  w    F .text	00000006 pit3_isr
00003ad4  w    F .text	00000006 enet_rx_isr
00003ad4  w    F .text	00000006 portc_isr
0000375c g     F .text	00000010 main
1fff1cfc g     O .bss	00000004 __malloc_max_total_mem
1fff1838 g     O .bss	00000018 led3
00003a8c  w    F .text	00000048 memmanage_fault_isr
00003db0 g     F .text	00000084 usb_init_serialnumber
1fff1804 g     O .bss	00000001 currentMode
00004e0c g       .text	00000000 __init_array_end
000041e0 g     F .text	00000570 _malloc_r
00003ad4  w    F .text	00000006 debugmonitor_isr
1fff18a4 g     O .bss	00000004 usb_midi_handleSongPosition
00003f80 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1894 g     O .bss	00000004 usb_midi_handleContinue
1fff1d41 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003ad4  w    F .text	00000006 cmp1_isr
1fff1654 g     O .bss	00000024 button3
00003ad4  w    F .text	00000006 ftm0_isr
000047c4 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
00001bc0 g     F .text	00000108 usb_serial_write
00003ae8  w    F .text	00000002 startup_late_hook
00003714  w    F .text	00000004 usb_serial_class::available()
1fff1d42 g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
00002204 g     F .text	000000a4 delay
00003ad4  w    F .text	00000006 tpm0_isr
00004e0c g     F .fini	00000000 _fini
1fff16f8 g     O .bss	00000014 step2
00003ad4  w    F .text	00000006 i2s0_rx_isr
00003ad4  w    F .text	00000006 uart4_error_isr
0000245c g     F .text	0000009c usb_midi_write_packed
00004790 g     F .text	0000000c atexit
00003ad4  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
00003ad4  w    F .text	00000006 can1_message_isr
00003ad4  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff18bc g     O .bss	00000004 usb_midi_handleTuneRequest
00004e00 g       .text	00000000 __preinit_array_end
00003ad4  w    F .text	00000006 sdhc_isr
1fff1d43 g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00004d9c g     O .text	00000054 usb_descriptor_list
000029ec g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1788 g     O .bss	0000001c knob4
00003ad4  w    F .text	00000006 dma_ch10_isr
1fff17c0 g     O .bss	00000034 sequence1
1fff18b4 g     O .bss	00000004 usb_midi_handleStart
00003ad4  w    F .text	00000006 uart0_error_isr
00002960 g     F .text	00000040 usb_malloc
00003ad4  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001ce0 g     F .text	00000048 usb_serial_write_buffer_free
00003ad4  w    F .text	00000006 enet_timer_isr
1fff16c0 g     O .bss	00000024 button6
1fff160c g     O .bss	00000024 button1
1fff15bc g       .data	00000000 _edata
00003ad4  w    F .text	00000006 i2s0_tx_isr
00003ad4  w    F .text	00000006 adc1_isr
0000371c  w    F .text	00000004 usb_serial_class::availableForWrite()
00003ad4  w    F .text	00000006 cmp0_isr
1fff1884 g     O .bss	00000004 usb_midi_handleClock
00003e34 g     F .text	0000004c ultoa
0000401c g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
0000370c  w    F .text	00000004 usb_serial_class::peek()
1fff1868 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff18a0 g     O .bss	00000004 usb_midi_handlePitchChange
00003ad4  w    F .text	00000006 pit_isr
1fff18b8 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003ad4  w    F .text	00000006 dac0_isr
00004e00 g       .text	00000000 __init_array_start
00003ad4  w    F .text	00000006 can1_tx_warn_isr
00001fec g     F .text	000000fc analogRead
1fff1d44 g     O .bss	00000122 usb_midi_msg_sysex
00003ba0 g     F .text	0000010c uart0_status_isr
00003ad4  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
00003ad4  w    F .text	00000006 dma_ch1_isr
00002a28 g     F .text	0000002c usb_tx_packet_count
00003ad4  w    F .text	00000006 dma_ch5_isr
00003ad4  w    F .text	00000006 can0_rx_warn_isr
00003ad4  w    F .text	00000006 can0_tx_warn_isr
00003790 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003b18 g     F .text	00000034 kinetis_hsrun_disable
00004e00 g       .text	00000000 __preinit_array_start
00003f7c  w    F .text	00000002 serialEvent3()
1fff18d4 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff1820 g     O .bss	00000018 led2
00003ad4  w    F .text	00000006 cmp2_isr
00004060 g     F .text	00000004 pendablesrvreq_isr
00003ad4  w    F .text	00000006 wakeup_isr
00003ad4  w    F .text	00000006 cmp3_isr
1fff188c g     O .bss	00000004 usb_midi_handleActiveSensing
00003ad4  w    F .text	00000006 tpm2_isr
00003ad4  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
00003ad4  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....:...:..
      10:	.:...:...:...:..
      20:	.:...:...:...:..
      30:	.:...:..a@..eA..
      40:	.:...:...:...:..
      50:	.:...:...:...:..
      60:	.:...:...:...:..
      70:	.:...:...:...:..
      80:	.:...:...:...:..
      90:	.:...:...:...:..
      a0:	.:...:...:...:..
      b0:	.:...:...:...;..
      c0:	.:...8...:...>..
      d0:	.:...9...:...:..
      e0:	.:...:...:...:..
      f0:	.:...:...:...:..
     100:	.:...:...:...:..
     110:	.:...+...:...:..
     120:	.:...:...:...:..
     130:	.:...:...:...:..
     140:	.:...:...7...:..
     150:	.:...:...:...:..
     160:	.:...:...:...:..
     170:	.:...:...:...:..
     180:	.:...:...:...:..
     190:	.:...:...<...:..
     1a0:	.:...:...:...:..
     1b0:	.:...:...:...:..
     1c0:	.:...:...:...:..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3adc <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	22a8 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	21ac <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	21ac <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4180 <__libc_init_array>

	startup_late_hook();
     33a:	bl	3ae8 <startup_late_hook>
	main();
     33e:	bl	375c <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x00004e0c
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1e78
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x00004e10

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x00004e10
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	21f8 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	21d0 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, transport, SECOND, 1);
Knob knob3(A2, sequence1, transport, THIRD, 2);
Knob knob4(A3, sequence1, transport, FOURTH, 3);
Knob knob5(A4, sequence1, transport, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #212	; 0xd4
     49c:	bl	2524 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	acc <loop+0x638>
     4a6:	ldr	r4, [pc, #644]	; (72c <loop+0x298>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #644]	; (730 <loop+0x29c>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	21dc <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	af4 <loop+0x660>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #84]	; 0x54
	return ret;
     4c4:	ldr	r3, [sp, #84]	; 0x54
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #80]	; 0x50
	return ret;
     4cc:	ldr	r1, [sp, #80]	; 0x50
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #604]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r3, r1
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #596]	; (730 <loop+0x29c>)
     4da:	cmp	r5, r3
     4dc:	beq.w	b1c <loop+0x688>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r5, #0
     4e4:	beq.w	b24 <loop+0x690>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r5, [pc, #584]	; (734 <loop+0x2a0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r5, #32]
     4f0:	bl	21dc <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r5, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r6, r0
     4fc:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	b08 <loop+0x674>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #76]	; 0x4c
	return ret;
     506:	ldr	r3, [sp, #76]	; 0x4c
        m_lastDebounceTime = millis();
     508:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #72]	; 0x48
	return ret;
     50e:	ldr	r1, [sp, #72]	; 0x48
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #536]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r1, r3
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r5, #4]
     51a:	ldr	r7, [pc, #536]	; (734 <loop+0x2a0>)
     51c:	cmp	r6, r3
     51e:	beq.w	b10 <loop+0x67c>
          m_state = reading;
     522:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r6, #0
     526:	beq.w	b5e <loop+0x6ca>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r6, [pc, #524]	; (738 <loop+0x2a4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r6, #32]
     532:	bl	21dc <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r6, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r5, r0
     53e:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	b04 <loop+0x670>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #68]	; 0x44
	return ret;
     548:	ldr	r3, [sp, #68]	; 0x44
        m_lastDebounceTime = millis();
     54a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #64]	; 0x40
	return ret;
     550:	ldr	r1, [sp, #64]	; 0x40
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #472]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r3, r1
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r6, #4]
     55c:	ldr	r7, [pc, #472]	; (738 <loop+0x2a4>)
     55e:	cmp	r5, r3
     560:	beq.w	b0c <loop+0x678>
          m_state = reading;
     564:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r5, #0
     568:	beq.w	b98 <loop+0x704>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r5, [pc, #460]	; (73c <loop+0x2a8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r5, #32]
     574:	bl	21dc <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r5, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r6, r0
     580:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	b00 <loop+0x66c>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #60]	; 0x3c
	return ret;
     58a:	ldr	r3, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     58c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #56]	; 0x38
	return ret;
     592:	ldr	r1, [sp, #56]	; 0x38
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #404]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r1, r3
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r5, #4]
     59e:	ldr	r7, [pc, #412]	; (73c <loop+0x2a8>)
     5a0:	cmp	r6, r3
     5a2:	beq.w	b18 <loop+0x684>
          m_state = reading;
     5a6:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r6, #0
     5aa:	beq.w	bd2 <loop+0x73e>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #400]	; (740 <loop+0x2ac>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	21dc <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	afc <loop+0x668>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #52]	; 0x34
	return ret;
     5cc:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #48]	; 0x30
	return ret;
     5d4:	ldr	r1, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #340]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #348]	; (740 <loop+0x2ac>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	b14 <loop+0x680>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r5, #0
     5ec:	beq.w	c0c <loop+0x778>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f0:	ldr	r5, [pc, #336]	; (744 <loop+0x2b0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r5, #32]
     5f8:	bl	21dc <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5fc:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5fe:	str	r0, [r5, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     600:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     602:	mov	r6, r0
     604:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     606:	beq.w	af8 <loop+0x664>
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #44]	; 0x2c
	return ret;
     60e:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     610:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #40]	; 0x28
	return ret;
     616:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     618:	ldr.w	r8, [pc, #272]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     61c:	cmp	r1, r3
     61e:	beq.n	666 <loop+0x1d2>
        if (reading != m_state) {
     620:	ldr	r3, [r5, #4]
     622:	ldr	r7, [pc, #288]	; (744 <loop+0x2b0>)
     624:	cmp	r6, r3
     626:	beq.w	b20 <loop+0x68c>
          m_state = reading;
     62a:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     62c:	cbnz	r6, 666 <loop+0x1d2>
     62e:	ldrb	r3, [r7, #16]
     630:	cmp	r3, #0
     632:	bne.w	fde <loop+0xb4a>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     636:	ldrb	r3, [r7, #17]
     638:	cmp	r3, #0
     63a:	bne.w	12e0 <loop+0xe4c>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     63e:	ldr	r3, [r7, #24]
     640:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     644:	clz	r1, r1
     648:	lsrs	r1, r1, #5
     64a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     64c:	uxtb	r0, r0
     64e:	bl	21d0 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     652:	ldr	r3, [r7, #0]
     654:	ldr	r1, [r7, #28]
     656:	ldr	r2, [r7, #12]
     658:	adds	r3, #1
     65a:	ldr.w	r1, [r1, r3, lsl #2]
      m_velocity = 100;
      m_length = 1;
    };

    void toggle () {
      m_state = !m_state;
     65e:	ldrb	r3, [r1, #4]
     660:	eor.w	r3, r3, #1
     664:	strb	r3, [r1, #4]
    };

    int check () {
      if (!blinking) {
     666:	ldr	r6, [pc, #224]	; (748 <loop+0x2b4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     668:	str	r2, [r5, #8]
     66a:	ldrb	r3, [r6, #16]
     66c:	cbz	r3, 682 <loop+0x1ee>
     66e:	ldr	r3, [r4, #0]
     670:	str	r3, [sp, #36]	; 0x24
	return ret;
     672:	ldr	r3, [sp, #36]	; 0x24
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     674:	ldr	r1, [r6, #8]
     676:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     678:	ldr	r5, [pc, #176]	; (72c <loop+0x298>)
     67a:	subs	r3, r3, r1
     67c:	cmp	r3, r2
     67e:	bhi.w	950 <loop+0x4bc>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     682:	ldr	r5, [pc, #200]	; (74c <loop+0x2b8>)
     684:	ldrb	r3, [r5, #16]
     686:	cbz	r3, 69c <loop+0x208>
     688:	ldr	r3, [r4, #0]
     68a:	str	r3, [sp, #32]
	return ret;
     68c:	ldr	r3, [sp, #32]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     68e:	ldr	r1, [r5, #8]
     690:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     692:	ldr	r6, [pc, #152]	; (72c <loop+0x298>)
     694:	subs	r3, r3, r1
     696:	cmp	r3, r2
     698:	bhi.w	a84 <loop+0x5f0>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     69c:	ldr	r5, [pc, #176]	; (750 <loop+0x2bc>)
     69e:	ldrb	r3, [r5, #16]
     6a0:	cbz	r3, 6b6 <loop+0x222>
     6a2:	ldr	r3, [r4, #0]
     6a4:	str	r3, [sp, #28]
	return ret;
     6a6:	ldr	r3, [sp, #28]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6a8:	ldr	r1, [r5, #8]
     6aa:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6ac:	ldr	r6, [pc, #124]	; (72c <loop+0x298>)
     6ae:	subs	r3, r3, r1
     6b0:	cmp	r3, r2
     6b2:	bhi.w	a28 <loop+0x594>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     6b6:	ldr	r5, [pc, #156]	; (754 <loop+0x2c0>)
     6b8:	ldrb	r3, [r5, #16]
     6ba:	cbz	r3, 6d0 <loop+0x23c>
     6bc:	ldr	r3, [r4, #0]
     6be:	str	r3, [sp, #24]
	return ret;
     6c0:	ldr	r3, [sp, #24]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6c2:	ldr	r1, [r5, #8]
     6c4:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6c6:	ldr	r6, [pc, #100]	; (72c <loop+0x298>)
     6c8:	subs	r3, r3, r1
     6ca:	cmp	r3, r2
     6cc:	bhi.w	9e0 <loop+0x54c>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     6d0:	ldr	r5, [pc, #132]	; (758 <loop+0x2c4>)
     6d2:	ldrb	r3, [r5, #16]
     6d4:	cbz	r3, 6ea <loop+0x256>
     6d6:	ldr	r3, [r4, #0]
     6d8:	str	r3, [sp, #20]
	return ret;
     6da:	ldr	r3, [sp, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6dc:	ldr	r1, [r5, #8]
     6de:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6e0:	ldr	r6, [pc, #72]	; (72c <loop+0x298>)
     6e2:	subs	r3, r3, r1
     6e4:	cmp	r3, r2
     6e6:	bhi.w	998 <loop+0x504>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     6ea:	ldr	r5, [pc, #112]	; (75c <loop+0x2c8>)
     6ec:	ldrb	r3, [r5, #16]
     6ee:	cbz	r3, 704 <loop+0x270>
     6f0:	ldr	r3, [r4, #0]
     6f2:	str	r3, [sp, #16]
	return ret;
     6f4:	ldr	r3, [sp, #16]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6f6:	ldr	r1, [r5, #8]
     6f8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6fa:	ldr	r4, [pc, #48]	; (72c <loop+0x298>)
     6fc:	subs	r3, r3, r1
     6fe:	cmp	r3, r2
     700:	bhi.w	908 <loop+0x474>
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     704:	ldr	r4, [pc, #88]	; (760 <loop+0x2cc>)
     706:	ldrb	r0, [r4, #0]
     708:	bl	1fec <analogRead>

      int diff = abs(m_value - m_lastValue);
     70c:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     70e:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     710:	cmp	r0, r3
     712:	beq.n	79a <loop+0x306>
     714:	subs	r3, r0, r3
     716:	cmp	r3, #0
     718:	it	lt
     71a:	neglt	r3, r3
     71c:	cmp	r3, #10
     71e:	ble.n	79a <loop+0x306>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     720:	ldrb	r3, [r4, #24]
     722:	cmp	r3, #4
     724:	beq.w	d38 <loop+0x8a4>
     728:	b.n	764 <loop+0x2d0>
     72a:	nop
     72c:	.word	0x1fff1880
     730:	.word	0x1fff160c
     734:	.word	0x1fff1630
     738:	.word	0x1fff1654
     73c:	.word	0x1fff1678
     740:	.word	0x1fff169c
     744:	.word	0x1fff16c0
     748:	.word	0x1fff1808
     74c:	.word	0x1fff1820
     750:	.word	0x1fff1838
     754:	.word	0x1fff1850
     758:	.word	0x1fff15d8
     75c:	.word	0x1fff15f0
     760:	.word	0x1fff1734
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     764:	ldr	r3, [pc, #776]	; (a70 <loop+0x5dc>)
     766:	ldrb	r3, [r3, #0]
     768:	cmp	r3, #1
     76a:	beq.w	e80 <loop+0x9ec>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     76e:	cmp	r3, #0
     770:	beq.w	ce2 <loop+0x84e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     774:	cmp	r3, #2
     776:	bne.n	798 <loop+0x304>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     778:	ldr	r3, [r4, #12]
     77a:	ldr	r1, [r4, #16]
     77c:	adds	r2, r3, #2
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     77e:	mvn.w	r3, #21
     782:	mul.w	r3, r3, r0
     786:	cmp	r3, #0
     788:	it	lt
     78a:	addwlt	r3, r3, #1023	; 0x3ff
     78e:	ldr.w	r2, [r1, r2, lsl #2]
     792:	asrs	r3, r3, #10
     794:	adds	r3, #24
     796:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     798:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     79a:	ldr	r4, [pc, #728]	; (a74 <loop+0x5e0>)
     79c:	ldrb	r0, [r4, #0]
     79e:	bl	1fec <analogRead>

      int diff = abs(m_value - m_lastValue);
     7a2:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7a4:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     7a6:	cmp	r0, r3
     7a8:	beq.n	7f4 <loop+0x360>
     7aa:	subs	r3, r0, r3
     7ac:	cmp	r3, #0
     7ae:	it	lt
     7b0:	neglt	r3, r3
     7b2:	cmp	r3, #10
     7b4:	ble.n	7f4 <loop+0x360>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     7b6:	ldrb	r3, [r4, #24]
     7b8:	cmp	r3, #4
     7ba:	beq.w	d70 <loop+0x8dc>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     7be:	ldr	r3, [pc, #688]	; (a70 <loop+0x5dc>)
     7c0:	ldrb	r3, [r3, #0]
     7c2:	cmp	r3, #1
     7c4:	beq.w	e9c <loop+0xa08>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     7c8:	cmp	r3, #0
     7ca:	beq.w	ca6 <loop+0x812>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     7ce:	cmp	r3, #2
     7d0:	bne.n	7f2 <loop+0x35e>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     7d2:	ldr	r3, [r4, #12]
     7d4:	ldr	r1, [r4, #16]
     7d6:	adds	r2, r3, #2
     7d8:	mvn.w	r3, #21
     7dc:	mul.w	r3, r3, r0
     7e0:	cmp	r3, #0
     7e2:	it	lt
     7e4:	addwlt	r3, r3, #1023	; 0x3ff
     7e8:	ldr.w	r2, [r1, r2, lsl #2]
     7ec:	asrs	r3, r3, #10
     7ee:	adds	r3, #24
     7f0:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7f2:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7f4:	ldr	r4, [pc, #640]	; (a78 <loop+0x5e4>)
     7f6:	ldrb	r0, [r4, #0]
     7f8:	bl	1fec <analogRead>

      int diff = abs(m_value - m_lastValue);
     7fc:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7fe:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     800:	cmp	r0, r3
     802:	beq.n	84e <loop+0x3ba>
     804:	subs	r3, r0, r3
     806:	cmp	r3, #0
     808:	it	lt
     80a:	neglt	r3, r3
     80c:	cmp	r3, #10
     80e:	ble.n	84e <loop+0x3ba>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     810:	ldrb	r3, [r4, #24]
     812:	cmp	r3, #4
     814:	beq.w	d00 <loop+0x86c>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     818:	ldr	r3, [pc, #596]	; (a70 <loop+0x5dc>)
     81a:	ldrb	r3, [r3, #0]
     81c:	cmp	r3, #1
     81e:	beq.w	ef0 <loop+0xa5c>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     822:	cmp	r3, #0
     824:	beq.w	cc4 <loop+0x830>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     828:	cmp	r3, #2
     82a:	bne.n	84c <loop+0x3b8>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     82c:	ldr	r3, [r4, #12]
     82e:	ldr	r1, [r4, #16]
     830:	adds	r2, r3, #2
     832:	mvn.w	r3, #21
     836:	mul.w	r3, r3, r0
     83a:	cmp	r3, #0
     83c:	it	lt
     83e:	addwlt	r3, r3, #1023	; 0x3ff
     842:	ldr.w	r2, [r1, r2, lsl #2]
     846:	asrs	r3, r3, #10
     848:	adds	r3, #24
     84a:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     84c:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     84e:	ldr	r4, [pc, #556]	; (a7c <loop+0x5e8>)
     850:	ldrb	r0, [r4, #0]
     852:	bl	1fec <analogRead>

      int diff = abs(m_value - m_lastValue);
     856:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     858:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     85a:	cmp	r0, r3
     85c:	beq.n	8a8 <loop+0x414>
     85e:	subs	r3, r0, r3
     860:	cmp	r3, #0
     862:	it	lt
     864:	neglt	r3, r3
     866:	cmp	r3, #10
     868:	ble.n	8a8 <loop+0x414>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     86a:	ldrb	r3, [r4, #24]
     86c:	cmp	r3, #4
     86e:	beq.w	d54 <loop+0x8c0>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     872:	ldr	r3, [pc, #508]	; (a70 <loop+0x5dc>)
     874:	ldrb	r3, [r3, #0]
     876:	cmp	r3, #1
     878:	beq.w	eb8 <loop+0xa24>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     87c:	cmp	r3, #0
     87e:	beq.w	c6a <loop+0x7d6>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     882:	cmp	r3, #2
     884:	bne.n	8a6 <loop+0x412>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     886:	ldr	r3, [r4, #12]
     888:	ldr	r1, [r4, #16]
     88a:	adds	r2, r3, #2
     88c:	mvn.w	r3, #21
     890:	mul.w	r3, r3, r0
     894:	cmp	r3, #0
     896:	it	lt
     898:	addwlt	r3, r3, #1023	; 0x3ff
     89c:	ldr.w	r2, [r1, r2, lsl #2]
     8a0:	asrs	r3, r3, #10
     8a2:	adds	r3, #24
     8a4:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     8a6:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     8a8:	ldr	r4, [pc, #468]	; (a80 <loop+0x5ec>)
     8aa:	ldrb	r0, [r4, #0]
     8ac:	bl	1fec <analogRead>

      int diff = abs(m_value - m_lastValue);
     8b0:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     8b2:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     8b4:	cmp	r0, r3
     8b6:	beq.n	902 <loop+0x46e>
     8b8:	subs	r3, r0, r3
     8ba:	cmp	r3, #0
     8bc:	it	lt
     8be:	neglt	r3, r3
     8c0:	cmp	r3, #10
     8c2:	ble.n	902 <loop+0x46e>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     8c4:	ldrb	r3, [r4, #24]
     8c6:	cmp	r3, #4
     8c8:	beq.w	d1c <loop+0x888>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     8cc:	ldr	r3, [pc, #416]	; (a70 <loop+0x5dc>)
     8ce:	ldrb	r3, [r3, #0]
     8d0:	cmp	r3, #1
     8d2:	beq.w	ed4 <loop+0xa40>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     8d6:	cmp	r3, #0
     8d8:	beq.w	c88 <loop+0x7f4>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     8dc:	cmp	r3, #2
     8de:	bne.n	900 <loop+0x46c>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     8e0:	ldr	r3, [r4, #12]
     8e2:	ldr	r1, [r4, #16]
     8e4:	adds	r2, r3, #2
     8e6:	mvn.w	r3, #21
     8ea:	mul.w	r3, r3, r0
     8ee:	cmp	r3, #0
     8f0:	it	lt
     8f2:	addwlt	r3, r3, #1023	; 0x3ff
     8f6:	ldr.w	r2, [r1, r2, lsl #2]
     8fa:	asrs	r3, r3, #10
     8fc:	adds	r3, #24
     8fe:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     900:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     902:	add	sp, #212	; 0xd4
     904:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        digitalWrite(m_pin, !digitalRead(m_pin));
     908:	ldrb	r6, [r5, #0]
     90a:	mov	r0, r6
     90c:	bl	21dc <digitalRead>
     910:	clz	r1, r0
     914:	lsrs	r1, r1, #5
     916:	mov	r0, r6
     918:	bl	21d0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     91c:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     91e:	movs	r2, #0

        if (blinkingCounter > 0) {
     920:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     922:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     924:	ble.w	704 <loop+0x270>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     928:	ldrb	r6, [r5, #0]
     92a:	mov	r0, r6
     92c:	bl	21dc <digitalRead>
     930:	clz	r1, r0
     934:	lsrs	r1, r1, #5
     936:	mov	r0, r6
     938:	bl	21d0 <digitalWrite>
     93c:	ldr	r3, [r4, #0]
     93e:	str	r3, [sp, #204]	; 0xcc
	return ret;
     940:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     942:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     944:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     946:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     94a:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     94c:	str	r3, [r5, #20]
     94e:	b.n	704 <loop+0x270>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     950:	ldrb	r7, [r6, #0]
     952:	mov	r0, r7
     954:	bl	21dc <digitalRead>
     958:	clz	r1, r0
     95c:	lsrs	r1, r1, #5
     95e:	mov	r0, r7
     960:	bl	21d0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     964:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     966:	movs	r2, #0

        if (blinkingCounter > 0) {
     968:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     96a:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     96c:	ble.w	682 <loop+0x1ee>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     970:	ldrb	r7, [r6, #0]
     972:	mov	r0, r7
     974:	bl	21dc <digitalRead>
     978:	clz	r1, r0
     97c:	lsrs	r1, r1, #5
     97e:	mov	r0, r7
     980:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     984:	ldr	r3, [r5, #0]
     986:	str	r3, [sp, #184]	; 0xb8
	return ret;
     988:	ldr	r3, [sp, #184]	; 0xb8
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     98a:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     98c:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     98e:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     992:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     994:	str	r3, [r6, #20]
     996:	b.n	682 <loop+0x1ee>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     998:	ldrb	r7, [r5, #0]
     99a:	mov	r0, r7
     99c:	bl	21dc <digitalRead>
     9a0:	clz	r1, r0
     9a4:	lsrs	r1, r1, #5
     9a6:	mov	r0, r7
     9a8:	bl	21d0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9ac:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9ae:	movs	r2, #0

        if (blinkingCounter > 0) {
     9b0:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9b2:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9b4:	ble.w	6ea <loop+0x256>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9b8:	ldrb	r7, [r5, #0]
     9ba:	mov	r0, r7
     9bc:	bl	21dc <digitalRead>
     9c0:	clz	r1, r0
     9c4:	lsrs	r1, r1, #5
     9c6:	mov	r0, r7
     9c8:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9cc:	ldr	r3, [r6, #0]
     9ce:	str	r3, [sp, #200]	; 0xc8
	return ret;
     9d0:	ldr	r3, [sp, #200]	; 0xc8
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     9d2:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9d4:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9d6:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9da:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9dc:	str	r3, [r5, #20]
     9de:	b.n	6ea <loop+0x256>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     9e0:	ldrb	r7, [r5, #0]
     9e2:	mov	r0, r7
     9e4:	bl	21dc <digitalRead>
     9e8:	clz	r1, r0
     9ec:	lsrs	r1, r1, #5
     9ee:	mov	r0, r7
     9f0:	bl	21d0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9f4:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9f6:	movs	r2, #0

        if (blinkingCounter > 0) {
     9f8:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9fa:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9fc:	ble.w	6d0 <loop+0x23c>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a00:	ldrb	r7, [r5, #0]
     a02:	mov	r0, r7
     a04:	bl	21dc <digitalRead>
     a08:	clz	r1, r0
     a0c:	lsrs	r1, r1, #5
     a0e:	mov	r0, r7
     a10:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a14:	ldr	r3, [r6, #0]
     a16:	str	r3, [sp, #196]	; 0xc4
	return ret;
     a18:	ldr	r3, [sp, #196]	; 0xc4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a1a:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a1c:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a1e:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a22:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a24:	str	r3, [r5, #20]
     a26:	b.n	6d0 <loop+0x23c>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     a28:	ldrb	r7, [r5, #0]
     a2a:	mov	r0, r7
     a2c:	bl	21dc <digitalRead>
     a30:	clz	r1, r0
     a34:	lsrs	r1, r1, #5
     a36:	mov	r0, r7
     a38:	bl	21d0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     a3c:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a3e:	movs	r2, #0

        if (blinkingCounter > 0) {
     a40:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a42:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     a44:	ble.w	6b6 <loop+0x222>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a48:	ldrb	r7, [r5, #0]
     a4a:	mov	r0, r7
     a4c:	bl	21dc <digitalRead>
     a50:	clz	r1, r0
     a54:	lsrs	r1, r1, #5
     a56:	mov	r0, r7
     a58:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a5c:	ldr	r3, [r6, #0]
     a5e:	str	r3, [sp, #192]	; 0xc0
	return ret;
     a60:	ldr	r3, [sp, #192]	; 0xc0
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a62:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a64:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a66:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a6a:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a6c:	str	r3, [r5, #20]
     a6e:	b.n	6b6 <loop+0x222>
     a70:	.word	0x1fff1804
     a74:	.word	0x1fff1750
     a78:	.word	0x1fff176c
     a7c:	.word	0x1fff1788
     a80:	.word	0x1fff17a4
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     a84:	ldrb	r7, [r5, #0]
     a86:	mov	r0, r7
     a88:	bl	21dc <digitalRead>
     a8c:	clz	r1, r0
     a90:	lsrs	r1, r1, #5
     a92:	mov	r0, r7
     a94:	bl	21d0 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     a98:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a9a:	movs	r2, #0

        if (blinkingCounter > 0) {
     a9c:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a9e:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     aa0:	ble.w	69c <loop+0x208>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     aa4:	ldrb	r7, [r5, #0]
     aa6:	mov	r0, r7
     aa8:	bl	21dc <digitalRead>
     aac:	clz	r1, r0
     ab0:	lsrs	r1, r1, #5
     ab2:	mov	r0, r7
     ab4:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ab8:	ldr	r3, [r6, #0]
     aba:	str	r3, [sp, #188]	; 0xbc
	return ret;
     abc:	ldr	r3, [sp, #188]	; 0xbc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     abe:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ac0:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     ac2:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ac6:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     ac8:	str	r3, [r5, #20]
     aca:	b.n	69c <loop+0x208>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     acc:	ldr	r3, [pc, #700]	; (d8c <loop+0x8f8>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     ace:	ldrb	r3, [r3, #0]
     ad0:	cmp	r3, #250	; 0xfa
     ad2:	beq.w	e18 <loop+0x984>
     ad6:	cmp	r3, #252	; 0xfc
     ad8:	beq.w	c46 <loop+0x7b2>
     adc:	cmp	r3, #248	; 0xf8
     ade:	beq.w	da0 <loop+0x90c>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     ae2:	movs	r1, #35	; 0x23
     ae4:	ldr	r0, [pc, #680]	; (d90 <loop+0x8fc>)
     ae6:	ldr	r4, [pc, #684]	; (d94 <loop+0x900>)
     ae8:	bl	1bc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     aec:	ldr	r0, [pc, #680]	; (d98 <loop+0x904>)
     aee:	bl	3734 <Print::println()>
     af2:	b.n	4a8 <loop+0x14>
     af4:	ldr	r3, [r6, #20]
     af6:	b.n	4c8 <loop+0x34>
     af8:	ldr	r3, [r5, #20]
     afa:	b.n	612 <loop+0x17e>
     afc:	ldr	r3, [r6, #20]
     afe:	b.n	5d0 <loop+0x13c>
     b00:	ldr	r3, [r5, #20]
     b02:	b.n	58e <loop+0xfa>
     b04:	ldr	r3, [r6, #20]
     b06:	b.n	54c <loop+0xb8>
     b08:	ldr	r3, [r5, #20]
     b0a:	b.n	50a <loop+0x76>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     b0c:	mov	r2, r5
     b0e:	b.n	56c <loop+0xd8>
     b10:	mov	r2, r6
     b12:	b.n	52a <loop+0x96>
     b14:	mov	r2, r5
     b16:	b.n	5f0 <loop+0x15c>
     b18:	mov	r2, r6
     b1a:	b.n	5ae <loop+0x11a>
     b1c:	mov	r2, r5
     b1e:	b.n	4e8 <loop+0x54>
     b20:	mov	r2, r6
     b22:	b.n	666 <loop+0x1d2>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b24:	ldrb	r3, [r7, #16]
     b26:	cmp	r3, #0
     b28:	bne.w	104a <loop+0xbb6>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b2c:	ldrb	r3, [r7, #17]
     b2e:	cmp	r3, #0
     b30:	bne.w	1274 <loop+0xde0>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b34:	ldr	r3, [r7, #24]
     b36:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b3a:	clz	r1, r1
     b3e:	lsrs	r1, r1, #5
     b40:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b42:	uxtb	r0, r0
     b44:	bl	21d0 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     b48:	ldr	r3, [r7, #0]
     b4a:	ldr	r1, [r7, #28]
     b4c:	ldr	r2, [r7, #12]
     b4e:	adds	r3, #1
     b50:	ldr.w	r1, [r1, r3, lsl #2]
      m_velocity = 100;
      m_length = 1;
    };

    void toggle () {
      m_state = !m_state;
     b54:	ldrb	r3, [r1, #4]
     b56:	eor.w	r3, r3, #1
     b5a:	strb	r3, [r1, #4]
     b5c:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b5e:	ldrb	r3, [r7, #16]
     b60:	cmp	r3, #0
     b62:	bne.w	1208 <loop+0xd74>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b66:	ldrb	r3, [r7, #17]
     b68:	cmp	r3, #0
     b6a:	bne.w	1328 <loop+0xe94>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b6e:	ldr	r3, [r7, #24]
     b70:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b74:	clz	r1, r1
     b78:	lsrs	r1, r1, #5
     b7a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b7c:	uxtb	r0, r0
     b7e:	bl	21d0 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     b82:	ldr	r3, [r7, #0]
     b84:	ldr	r1, [r7, #28]
     b86:	ldr	r2, [r7, #12]
     b88:	adds	r3, #1
     b8a:	ldr.w	r1, [r1, r3, lsl #2]
     b8e:	ldrb	r3, [r1, #4]
     b90:	eor.w	r3, r3, #1
     b94:	strb	r3, [r1, #4]
     b96:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b98:	ldrb	r3, [r7, #16]
     b9a:	cmp	r3, #0
     b9c:	bne.w	119c <loop+0xd08>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     ba0:	ldrb	r3, [r7, #17]
     ba2:	cmp	r3, #0
     ba4:	bne.w	1298 <loop+0xe04>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     ba8:	ldr	r3, [r7, #24]
     baa:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     bae:	clz	r1, r1
     bb2:	lsrs	r1, r1, #5
     bb4:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bb6:	uxtb	r0, r0
     bb8:	bl	21d0 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     bbc:	ldr	r3, [r7, #0]
     bbe:	ldr	r1, [r7, #28]
     bc0:	ldr	r2, [r7, #12]
     bc2:	adds	r3, #1
     bc4:	ldr.w	r1, [r1, r3, lsl #2]
     bc8:	ldrb	r3, [r1, #4]
     bca:	eor.w	r3, r3, #1
     bce:	strb	r3, [r1, #4]
     bd0:	b.n	56c <loop+0xd8>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     bd2:	ldrb	r3, [r7, #16]
     bd4:	cmp	r3, #0
     bd6:	bne.w	1130 <loop+0xc9c>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     bda:	ldrb	r3, [r7, #17]
     bdc:	cmp	r3, #0
     bde:	bne.w	1304 <loop+0xe70>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     be2:	ldr	r3, [r7, #24]
     be4:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     be8:	clz	r1, r1
     bec:	lsrs	r1, r1, #5
     bee:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bf0:	uxtb	r0, r0
     bf2:	bl	21d0 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     bf6:	ldr	r3, [r7, #0]
     bf8:	ldr	r1, [r7, #28]
     bfa:	ldr	r2, [r7, #12]
     bfc:	adds	r3, #1
     bfe:	ldr.w	r1, [r1, r3, lsl #2]
     c02:	ldrb	r3, [r1, #4]
     c04:	eor.w	r3, r3, #1
     c08:	strb	r3, [r1, #4]
     c0a:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c0c:	ldrb	r3, [r7, #16]
     c0e:	cmp	r3, #0
     c10:	bne.w	10c4 <loop+0xc30>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     c14:	ldrb	r3, [r7, #17]
     c16:	cmp	r3, #0
     c18:	bne.w	12bc <loop+0xe28>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     c1c:	ldr	r3, [r7, #24]
     c1e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c22:	clz	r1, r1
     c26:	lsrs	r1, r1, #5
     c28:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c2a:	uxtb	r0, r0
     c2c:	bl	21d0 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     c30:	ldr	r3, [r7, #0]
     c32:	ldr	r1, [r7, #28]
     c34:	ldr	r2, [r7, #12]
     c36:	adds	r3, #1
     c38:	ldr.w	r1, [r1, r3, lsl #2]
     c3c:	ldrb	r3, [r1, #4]
     c3e:	eor.w	r3, r3, #1
     c42:	strb	r3, [r1, #4]
     c44:	b.n	5f0 <loop+0x15c>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c46:	ldr	r2, [pc, #340]	; (d9c <loop+0x908>)
     c48:	ldr	r4, [pc, #328]	; (d94 <loop+0x900>)
      ppqn = 0;
      m_sequence.resetStep();
     c4a:	ldr	r1, [r2, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c4c:	movs	r5, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
     c4e:	ldr	r3, [r1, #44]	; 0x2c
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
     c50:	str	r5, [r2, #8]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
     c52:	str	r5, [r1, #4]
     c54:	ldmia.w	r3, {r0, r1}
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c58:	strb	r5, [r2, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c5a:	clz	r1, r1
     c5e:	lsrs	r1, r1, #5
     c60:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c62:	uxtb	r0, r0
     c64:	bl	21d0 <digitalWrite>
     c68:	b.n	4a8 <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
     c6a:	ldr	r3, [r4, #12]
     c6c:	ldr	r1, [r4, #16]
     c6e:	adds	r2, r3, #2
      m_length = newValue;
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
     c70:	sub.w	r3, r0, r0, lsl #2
     c74:	lsls	r3, r3, #2
     c76:	it	mi
     c78:	addwmi	r3, r3, #1023	; 0x3ff
     c7c:	ldr.w	r2, [r1, r2, lsl #2]
     c80:	asrs	r3, r3, #10
     c82:	adds	r3, #51	; 0x33
     c84:	str	r3, [r2, #8]
     c86:	b.n	8a6 <loop+0x412>
     c88:	ldr	r3, [r4, #12]
     c8a:	ldr	r1, [r4, #16]
     c8c:	adds	r2, r3, #2
     c8e:	sub.w	r3, r0, r0, lsl #2
     c92:	lsls	r3, r3, #2
     c94:	it	mi
     c96:	addwmi	r3, r3, #1023	; 0x3ff
     c9a:	ldr.w	r2, [r1, r2, lsl #2]
     c9e:	asrs	r3, r3, #10
     ca0:	adds	r3, #51	; 0x33
     ca2:	str	r3, [r2, #8]
     ca4:	b.n	900 <loop+0x46c>
     ca6:	ldr	r3, [r4, #12]
     ca8:	ldr	r1, [r4, #16]
     caa:	adds	r2, r3, #2
     cac:	sub.w	r3, r0, r0, lsl #2
     cb0:	lsls	r3, r3, #2
     cb2:	it	mi
     cb4:	addwmi	r3, r3, #1023	; 0x3ff
     cb8:	ldr.w	r2, [r1, r2, lsl #2]
     cbc:	asrs	r3, r3, #10
     cbe:	adds	r3, #51	; 0x33
     cc0:	str	r3, [r2, #8]
     cc2:	b.n	7f2 <loop+0x35e>
     cc4:	ldr	r3, [r4, #12]
     cc6:	ldr	r1, [r4, #16]
     cc8:	adds	r2, r3, #2
     cca:	sub.w	r3, r0, r0, lsl #2
     cce:	lsls	r3, r3, #2
     cd0:	it	mi
     cd2:	addwmi	r3, r3, #1023	; 0x3ff
     cd6:	ldr.w	r2, [r1, r2, lsl #2]
     cda:	asrs	r3, r3, #10
     cdc:	adds	r3, #51	; 0x33
     cde:	str	r3, [r2, #8]
     ce0:	b.n	84c <loop+0x3b8>
     ce2:	ldr	r3, [r4, #12]
     ce4:	ldr	r1, [r4, #16]
     ce6:	adds	r2, r3, #2
     ce8:	sub.w	r3, r0, r0, lsl #2
     cec:	lsls	r3, r3, #2
     cee:	it	mi
     cf0:	addwmi	r3, r3, #1023	; 0x3ff
     cf4:	ldr.w	r2, [r1, r2, lsl #2]
     cf8:	asrs	r3, r3, #10
     cfa:	adds	r3, #51	; 0x33
     cfc:	str	r3, [r2, #8]
     cfe:	b.n	798 <loop+0x304>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     d00:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
     d04:	ldr	r3, [r4, #20]
     d06:	bge.w	f0c <loop+0xa78>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d0a:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d0c:	movs	r1, #6

        if (ppqn >= 6) {
     d0e:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d10:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     d12:	ble.n	d18 <loop+0x884>
          ppqn = 0;
     d14:	movs	r2, #0
     d16:	str	r2, [r3, #8]
     d18:	ldr	r0, [r4, #4]
     d1a:	b.n	84c <loop+0x3b8>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     d1c:	cmp.w	r0, #400	; 0x190
     d20:	ldr	r3, [r4, #20]
     d22:	bge.w	f7c <loop+0xae8>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d26:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d28:	movs	r1, #6

        if (ppqn >= 6) {
     d2a:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d2c:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     d2e:	ble.n	d34 <loop+0x8a0>
          ppqn = 0;
     d30:	movs	r2, #0
     d32:	str	r2, [r3, #8]
     d34:	ldr	r0, [r4, #4]
     d36:	b.n	900 <loop+0x46c>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     d38:	cmp.w	r0, #400	; 0x190
     d3c:	ldr	r3, [r4, #20]
     d3e:	bge.w	f28 <loop+0xa94>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d42:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d44:	movs	r1, #6

        if (ppqn >= 6) {
     d46:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d48:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     d4a:	ble.n	d50 <loop+0x8bc>
          ppqn = 0;
     d4c:	movs	r2, #0
     d4e:	str	r2, [r3, #8]
     d50:	ldr	r0, [r4, #4]
     d52:	b.n	798 <loop+0x304>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     d54:	cmp.w	r0, #400	; 0x190
     d58:	ldr	r3, [r4, #20]
     d5a:	bge.w	f60 <loop+0xacc>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d5e:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d60:	movs	r1, #6

        if (ppqn >= 6) {
     d62:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d64:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     d66:	ble.n	d6c <loop+0x8d8>
          ppqn = 0;
     d68:	movs	r2, #0
     d6a:	str	r2, [r3, #8]
     d6c:	ldr	r0, [r4, #4]
     d6e:	b.n	8a6 <loop+0x412>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     d70:	cmp.w	r0, #400	; 0x190
     d74:	ldr	r3, [r4, #20]
     d76:	bge.w	f44 <loop+0xab0>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d7a:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d7c:	movs	r1, #6

        if (ppqn >= 6) {
     d7e:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d80:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     d82:	ble.n	d88 <loop+0x8f4>
          ppqn = 0;
     d84:	movs	r2, #0
     d86:	str	r2, [r3, #8]
     d88:	ldr	r0, [r4, #4]
     d8a:	b.n	7f2 <loop+0x35e>
     d8c:	.word	0x1fff1d3c
     d90:	.word	0x00004ad4
     d94:	.word	0x1fff1880
     d98:	.word	0x1fff0c70
     d9c:	.word	0x1fff17f4
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
     da0:	ldr	r5, [pc, #788]	; (10b8 <loop+0xc24>)

      if (m_sequence.stepIsOver(ppqn)) {
     da2:	ldr	r1, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
     da4:	ldr	r3, [r5, #8]
        m_currentStep = 0;
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
     da6:	ldr	r2, [r1, #4]
     da8:	adds	r2, #2
     daa:	adds	r3, #1
     dac:	ldr.w	r2, [r1, r2, lsl #2]
     db0:	str	r3, [r5, #8]

      if (m_sequence.stepIsOver(ppqn)) {
     db2:	ldr	r2, [r2, #16]
     db4:	cmp	r3, r2
     db6:	bge.w	1372 <loop+0xede>
        // of the active note to see if i do the stop step
        m_sequence.stopCurrentStep();
      }


      if (ppqn == max_ppqn) {
     dba:	ldr	r2, [r5, #4]
     dbc:	ldr	r1, [pc, #760]	; (10b8 <loop+0xc24>)
     dbe:	cmp	r2, r3
     dc0:	bne.w	4a6 <loop+0x12>
        m_sequence.doStep(); 
     dc4:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dc6:	ldr	r4, [pc, #756]	; (10bc <loop+0xc28>)
        m_leds[2]->blink(3);
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
     dc8:	ldr	r3, [r6, #4]
     dca:	adds	r3, #6
     dcc:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     dd0:	ldrb.w	r8, [r7]
     dd4:	mov	r0, r8
     dd6:	bl	21dc <digitalRead>
     dda:	clz	r1, r0
     dde:	lsrs	r1, r1, #5
     de0:	mov	r0, r8
     de2:	bl	21d0 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
     de6:	ldr	r3, [r6, #4]
     de8:	ldr	r2, [r4, #0]
     dea:	str	r2, [sp, #8]
     dec:	adds	r2, r3, #2
      blinking = true;
     dee:	movs	r1, #1
     df0:	ldr.w	r2, [r6, r2, lsl #2]
     df4:	strb	r1, [r7, #16]
      blinkingCounter = times;
     df6:	movs	r1, #0
     df8:	str	r1, [r7, #20]
     dfa:	ldrb	r1, [r2, #4]
	return ret;
     dfc:	ldr	r0, [sp, #8]
      lastBlink = millis();  
     dfe:	str	r0, [r7, #8]
     e00:	cmp	r1, #0
     e02:	bne.w	1688 <loop+0x11f4>
        m_steps[m_currentStep]->play();
      }

      m_currentStep++;
     e06:	adds	r3, #1

      if (m_currentStep > 3) {
     e08:	cmp	r3, #3
        m_currentStep = 0;
     e0a:	it	gt
     e0c:	movgt	r3, #0
     e0e:	str	r3, [r6, #4]
        ppqn = 0;
     e10:	movs	r3, #0
     e12:	str	r3, [r5, #8]
     e14:	b.w	4a8 <loop+0x14>
      }
    };

    void startPPQN () {
      m_state = true;
     e18:	ldr	r5, [pc, #668]	; (10b8 <loop+0xc24>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e1a:	ldr	r4, [pc, #672]	; (10bc <loop+0xc28>)
      ppqn = 0;
      m_sequence.doStep(); 
     e1c:	ldr	r6, [r5, #12]
        m_leds[2]->blink(3);
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
     e1e:	ldr	r3, [r6, #4]
     e20:	adds	r3, #6
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     e22:	mov.w	r9, #1
     e26:	ldr.w	r7, [r6, r3, lsl #2]
     e2a:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e2e:	ldrb.w	sl, [r7]
      ppqn = 0;
     e32:	mov.w	r8, #0
     e36:	mov	r0, sl
     e38:	str.w	r8, [r5, #8]
     e3c:	bl	21dc <digitalRead>
     e40:	clz	r1, r0
     e44:	lsrs	r1, r1, #5
     e46:	mov	r0, sl
     e48:	bl	21d0 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
     e4c:	ldr	r3, [r6, #4]
     e4e:	ldr	r2, [r4, #0]
     e50:	str	r2, [sp, #12]
     e52:	adds	r2, r3, #2
	return ret;
     e54:	ldr	r0, [sp, #12]
     e56:	ldr.w	r2, [r6, r2, lsl #2]
      blinking = true;
     e5a:	strb.w	r9, [r7, #16]
     e5e:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
     e60:	str.w	r8, [r7, #20]
      lastBlink = millis();  
     e64:	str	r0, [r7, #8]
     e66:	cmp	r1, #0
     e68:	bne.w	134c <loop+0xeb8>
        m_steps[m_currentStep]->play();
      }

      m_currentStep++;
     e6c:	adds	r3, #1

      if (m_currentStep > 3) {
     e6e:	cmp	r3, #3
        m_currentStep = 0;
     e70:	it	gt
     e72:	movgt	r3, #0
     e74:	str	r3, [r6, #4]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
     e76:	ldr	r3, [r5, #12]
     e78:	ldr	r3, [r3, #44]	; 0x2c
     e7a:	ldmia.w	r3, {r0, r1}
     e7e:	b.n	c5a <loop+0x7c6>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
     e80:	ldr	r3, [r4, #12]
     e82:	ldr	r2, [r4, #16]
     e84:	adds	r3, #2
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
     e86:	ldr.w	r2, [r2, r3, lsl #2]
     e8a:	subs.w	r3, r0, r0, lsl #6
     e8e:	it	mi
     e90:	addwmi	r3, r3, #1023	; 0x3ff
     e94:	asrs	r3, r3, #10
     e96:	adds	r3, #127	; 0x7f
     e98:	str	r3, [r2, #12]
     e9a:	b.n	798 <loop+0x304>
     e9c:	ldr	r3, [r4, #12]
     e9e:	ldr	r2, [r4, #16]
     ea0:	adds	r3, #2
     ea2:	ldr.w	r2, [r2, r3, lsl #2]
     ea6:	subs.w	r3, r0, r0, lsl #6
     eaa:	it	mi
     eac:	addwmi	r3, r3, #1023	; 0x3ff
     eb0:	asrs	r3, r3, #10
     eb2:	adds	r3, #127	; 0x7f
     eb4:	str	r3, [r2, #12]
     eb6:	b.n	7f2 <loop+0x35e>
     eb8:	ldr	r3, [r4, #12]
     eba:	ldr	r2, [r4, #16]
     ebc:	adds	r3, #2
     ebe:	ldr.w	r2, [r2, r3, lsl #2]
     ec2:	subs.w	r3, r0, r0, lsl #6
     ec6:	it	mi
     ec8:	addwmi	r3, r3, #1023	; 0x3ff
     ecc:	asrs	r3, r3, #10
     ece:	adds	r3, #127	; 0x7f
     ed0:	str	r3, [r2, #12]
     ed2:	b.n	8a6 <loop+0x412>
     ed4:	ldr	r3, [r4, #12]
     ed6:	ldr	r2, [r4, #16]
     ed8:	adds	r3, #2
     eda:	ldr.w	r2, [r2, r3, lsl #2]
     ede:	subs.w	r3, r0, r0, lsl #6
     ee2:	it	mi
     ee4:	addwmi	r3, r3, #1023	; 0x3ff
     ee8:	asrs	r3, r3, #10
     eea:	adds	r3, #127	; 0x7f
     eec:	str	r3, [r2, #12]
     eee:	b.n	900 <loop+0x46c>
     ef0:	ldr	r3, [r4, #12]
     ef2:	ldr	r2, [r4, #16]
     ef4:	adds	r3, #2
     ef6:	ldr.w	r2, [r2, r3, lsl #2]
     efa:	subs.w	r3, r0, r0, lsl #6
     efe:	it	mi
     f00:	addwmi	r3, r3, #1023	; 0x3ff
     f04:	asrs	r3, r3, #10
     f06:	adds	r3, #127	; 0x7f
     f08:	str	r3, [r2, #12]
     f0a:	b.n	84c <loop+0x3b8>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     f0c:	sub.w	r2, r0, #400	; 0x190
     f10:	cmp.w	r2, #400	; 0x190
     f14:	bcc.n	fd0 <loop+0xb3c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f16:	sub.w	r2, r0, #800	; 0x320
     f1a:	cmp	r2, #223	; 0xdf
     f1c:	bhi.w	84c <loop+0x3b8>
        max_ppqn = 12;
     f20:	movs	r2, #12
     f22:	str	r2, [r3, #4]
     f24:	ldr	r0, [r4, #4]
     f26:	b.n	84c <loop+0x3b8>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     f28:	sub.w	r2, r0, #400	; 0x190
     f2c:	cmp.w	r2, #400	; 0x190
     f30:	bcc.n	fc2 <loop+0xb2e>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f32:	sub.w	r2, r0, #800	; 0x320
     f36:	cmp	r2, #223	; 0xdf
     f38:	bhi.w	798 <loop+0x304>
        max_ppqn = 12;
     f3c:	movs	r2, #12
     f3e:	str	r2, [r3, #4]
     f40:	ldr	r0, [r4, #4]
     f42:	b.n	798 <loop+0x304>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     f44:	sub.w	r2, r0, #400	; 0x190
     f48:	cmp.w	r2, #400	; 0x190
     f4c:	bcc.n	fb4 <loop+0xb20>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f4e:	sub.w	r2, r0, #800	; 0x320
     f52:	cmp	r2, #223	; 0xdf
     f54:	bhi.w	7f2 <loop+0x35e>
        max_ppqn = 12;
     f58:	movs	r2, #12
     f5a:	str	r2, [r3, #4]
     f5c:	ldr	r0, [r4, #4]
     f5e:	b.n	7f2 <loop+0x35e>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     f60:	sub.w	r2, r0, #400	; 0x190
     f64:	cmp.w	r2, #400	; 0x190
     f68:	bcc.n	fa6 <loop+0xb12>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f6a:	sub.w	r2, r0, #800	; 0x320
     f6e:	cmp	r2, #223	; 0xdf
     f70:	bhi.w	8a6 <loop+0x412>
        max_ppqn = 12;
     f74:	movs	r2, #12
     f76:	str	r2, [r3, #4]
     f78:	ldr	r0, [r4, #4]
     f7a:	b.n	8a6 <loop+0x412>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     f7c:	sub.w	r2, r0, #400	; 0x190
     f80:	cmp.w	r2, #400	; 0x190
     f84:	bcc.n	f98 <loop+0xb04>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f86:	sub.w	r2, r0, #800	; 0x320
     f8a:	cmp	r2, #223	; 0xdf
     f8c:	bhi.w	900 <loop+0x46c>
        max_ppqn = 12;
     f90:	movs	r2, #12
     f92:	str	r2, [r3, #4]
     f94:	ldr	r0, [r4, #4]
     f96:	b.n	900 <loop+0x46c>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
     f98:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     f9a:	movs	r1, #8

        if (ppqn >= 8) {
     f9c:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     f9e:	str	r1, [r3, #4]

        if (ppqn >= 8) {
     fa0:	bgt.w	d30 <loop+0x89c>
     fa4:	b.n	d34 <loop+0x8a0>
     fa6:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fa8:	movs	r1, #8

        if (ppqn >= 8) {
     faa:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fac:	str	r1, [r3, #4]

        if (ppqn >= 8) {
     fae:	bgt.w	d68 <loop+0x8d4>
     fb2:	b.n	d6c <loop+0x8d8>
     fb4:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fb6:	movs	r1, #8

        if (ppqn >= 8) {
     fb8:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fba:	str	r1, [r3, #4]

        if (ppqn >= 8) {
     fbc:	bgt.w	d84 <loop+0x8f0>
     fc0:	b.n	d88 <loop+0x8f4>
     fc2:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fc4:	movs	r1, #8

        if (ppqn >= 8) {
     fc6:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fc8:	str	r1, [r3, #4]

        if (ppqn >= 8) {
     fca:	bgt.w	d4c <loop+0x8b8>
     fce:	b.n	d50 <loop+0x8bc>
     fd0:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fd2:	movs	r1, #8

        if (ppqn >= 8) {
     fd4:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fd6:	str	r1, [r3, #4]

        if (ppqn >= 8) {
     fd8:	bgt.w	d14 <loop+0x880>
     fdc:	b.n	d18 <loop+0x884>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     fde:	ldr	r3, [r7, #24]
     fe0:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     fe4:	clz	r1, r1
     fe8:	lsrs	r1, r1, #5
     fea:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     fec:	uxtb	r0, r0
     fee:	bl	21d0 <digitalWrite>
        m_sequence.toggleGlobalMode();
     ff2:	ldr.w	sl, [r7, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
     ff6:	ldr.w	r9, [sl, #40]	; 0x28
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ffa:	ldrb.w	fp, [r9]
     ffe:	mov	r0, fp
    1000:	bl	21dc <digitalRead>
    1004:	clz	r1, r0
    1008:	lsrs	r1, r1, #5
    100a:	mov	r0, fp
    100c:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1010:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1014:	ldr.w	lr, [pc, #168]	; 10c0 <loop+0xc2c>
    1018:	str	r3, [sp, #168]	; 0xa8
	return ret;
    101a:	ldr	r2, [sp, #168]	; 0xa8
    101c:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1020:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1024:	mov.w	fp, #1
      blinkingCounter = times;
    1028:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    102a:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
    102e:	str.w	r2, [r9, #20]
    1032:	cmp	r3, #0
    1034:	beq.w	137c <loop+0xee8>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
    1038:	cmp	r3, #1
    103a:	beq.w	16b0 <loop+0x121c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    103e:	cmp	r3, #2
    1040:	beq.w	15a8 <loop+0x1114>
    1044:	ldr	r2, [r7, #12]
    1046:	b.w	666 <loop+0x1d2>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    104a:	ldr	r3, [r7, #24]
    104c:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1050:	clz	r1, r1
    1054:	lsrs	r1, r1, #5
    1056:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1058:	uxtb	r0, r0
    105a:	bl	21d0 <digitalWrite>
        m_sequence.toggleGlobalMode();
    105e:	ldr.w	sl, [r7, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    1062:	ldr.w	r9, [sl, #40]	; 0x28
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1066:	ldrb.w	fp, [r9]
    106a:	mov	r0, fp
    106c:	bl	21dc <digitalRead>
    1070:	clz	r1, r0
    1074:	lsrs	r1, r1, #5
    1076:	mov	r0, fp
    1078:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    107c:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1080:	ldr.w	lr, [pc, #60]	; 10c0 <loop+0xc2c>
    1084:	str	r3, [sp, #88]	; 0x58
	return ret;
    1086:	ldr	r2, [sp, #88]	; 0x58
    1088:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    108c:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1090:	mov.w	fp, #1
      blinkingCounter = times;
    1094:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1096:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
    109a:	str.w	r2, [r9, #20]
    109e:	cmp	r3, #0
    10a0:	beq.w	1408 <loop+0xf74>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
    10a4:	cmp	r3, #1
    10a6:	beq.w	1822 <loop+0x138e>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    10aa:	cmp	r3, #2
    10ac:	beq.w	15e0 <loop+0x114c>
    10b0:	ldr	r2, [r7, #12]
    10b2:	b.w	4e8 <loop+0x54>
    10b6:	nop
    10b8:	.word	0x1fff17f4
    10bc:	.word	0x1fff1880
    10c0:	.word	0x1fff1804
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    10c4:	ldr	r3, [r7, #24]
    10c6:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    10ca:	clz	r1, r1
    10ce:	lsrs	r1, r1, #5
    10d0:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    10d2:	uxtb	r0, r0
    10d4:	bl	21d0 <digitalWrite>
        m_sequence.toggleGlobalMode();
    10d8:	ldr.w	sl, [r7, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    10dc:	ldr.w	r9, [sl, #40]	; 0x28
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10e0:	ldrb.w	fp, [r9]
    10e4:	mov	r0, fp
    10e6:	bl	21dc <digitalRead>
    10ea:	clz	r1, r0
    10ee:	lsrs	r1, r1, #5
    10f0:	mov	r0, fp
    10f2:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10f6:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    10fa:	ldr.w	lr, [pc, #1192]	; 15a4 <loop+0x1110>
    10fe:	str	r3, [sp, #152]	; 0x98
	return ret;
    1100:	ldr	r2, [sp, #152]	; 0x98
    1102:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1106:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    110a:	mov.w	fp, #1
      blinkingCounter = times;
    110e:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1110:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
    1114:	str.w	r2, [r9, #20]
    1118:	cmp	r3, #0
    111a:	beq.w	1494 <loop+0x1000>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
    111e:	cmp	r3, #1
    1120:	beq.w	178e <loop+0x12fa>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1124:	cmp	r3, #2
    1126:	beq.w	1618 <loop+0x1184>
    112a:	ldr	r2, [r7, #12]
    112c:	b.w	5f0 <loop+0x15c>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1130:	ldr	r3, [r7, #24]
    1132:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1136:	clz	r1, r1
    113a:	lsrs	r1, r1, #5
    113c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    113e:	uxtb	r0, r0
    1140:	bl	21d0 <digitalWrite>
        m_sequence.toggleGlobalMode();
    1144:	ldr.w	sl, [r7, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    1148:	ldr.w	r9, [sl, #40]	; 0x28
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    114c:	ldrb.w	fp, [r9]
    1150:	mov	r0, fp
    1152:	bl	21dc <digitalRead>
    1156:	clz	r1, r0
    115a:	lsrs	r1, r1, #5
    115c:	mov	r0, fp
    115e:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1162:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1166:	ldr.w	lr, [pc, #1084]	; 15a4 <loop+0x1110>
    116a:	str	r3, [sp, #136]	; 0x88
	return ret;
    116c:	ldr	r2, [sp, #136]	; 0x88
    116e:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1172:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1176:	mov.w	fp, #1
      blinkingCounter = times;
    117a:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    117c:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
    1180:	str.w	r2, [r9, #20]
    1184:	cmp	r3, #0
    1186:	beq.w	13c2 <loop+0xf2e>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
    118a:	cmp	r3, #1
    118c:	beq.w	17d8 <loop+0x1344>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1190:	cmp	r3, #2
    1192:	beq.w	1650 <loop+0x11bc>
    1196:	ldr	r2, [r7, #12]
    1198:	b.w	5ae <loop+0x11a>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    119c:	ldr	r3, [r7, #24]
    119e:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    11a2:	clz	r1, r1
    11a6:	lsrs	r1, r1, #5
    11a8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    11aa:	uxtb	r0, r0
    11ac:	bl	21d0 <digitalWrite>
        m_sequence.toggleGlobalMode();
    11b0:	ldr.w	sl, [r7, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    11b4:	ldr.w	r9, [sl, #40]	; 0x28
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11b8:	ldrb.w	fp, [r9]
    11bc:	mov	r0, fp
    11be:	bl	21dc <digitalRead>
    11c2:	clz	r1, r0
    11c6:	lsrs	r1, r1, #5
    11c8:	mov	r0, fp
    11ca:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11ce:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    11d2:	ldr.w	lr, [pc, #976]	; 15a4 <loop+0x1110>
    11d6:	str	r3, [sp, #120]	; 0x78
	return ret;
    11d8:	ldr	r2, [sp, #120]	; 0x78
    11da:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    11de:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11e2:	mov.w	fp, #1
      blinkingCounter = times;
    11e6:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11e8:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
    11ec:	str.w	r2, [r9, #20]
    11f0:	cmp	r3, #0
    11f2:	beq.w	144e <loop+0xfba>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
    11f6:	cmp	r3, #1
    11f8:	beq.w	1744 <loop+0x12b0>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    11fc:	cmp	r3, #2
    11fe:	beq.w	1520 <loop+0x108c>
    1202:	ldr	r2, [r7, #12]
    1204:	b.w	56c <loop+0xd8>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1208:	ldr	r3, [r7, #24]
    120a:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    120e:	clz	r1, r1
    1212:	lsrs	r1, r1, #5
    1214:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1216:	uxtb	r0, r0
    1218:	bl	21d0 <digitalWrite>
        m_sequence.toggleGlobalMode();
    121c:	ldr.w	sl, [r7, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    1220:	ldr.w	r9, [sl, #40]	; 0x28
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1224:	ldrb.w	fp, [r9]
    1228:	mov	r0, fp
    122a:	bl	21dc <digitalRead>
    122e:	clz	r1, r0
    1232:	lsrs	r1, r1, #5
    1234:	mov	r0, fp
    1236:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    123a:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    123e:	ldr.w	lr, [pc, #868]	; 15a4 <loop+0x1110>
    1242:	str	r3, [sp, #104]	; 0x68
	return ret;
    1244:	ldr	r2, [sp, #104]	; 0x68
    1246:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    124a:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    124e:	mov.w	fp, #1
      blinkingCounter = times;
    1252:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1254:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
    1258:	str.w	r2, [r9, #20]
    125c:	cmp	r3, #0
    125e:	beq.w	14da <loop+0x1046>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
    1262:	cmp	r3, #1
    1264:	beq.w	16fa <loop+0x1266>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1268:	cmp	r3, #2
    126a:	beq.w	1558 <loop+0x10c4>
    126e:	ldr	r2, [r7, #12]
    1270:	b.w	52a <loop+0x96>
      } else if (m_state == LOW && m_playButton) {
        m_led.toggle();
    1274:	ldr	r3, [r7, #24]
    1276:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    127a:	clz	r1, r1
    127e:	lsrs	r1, r1, #5
    1280:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1282:	uxtb	r0, r0
    1284:	bl	21d0 <digitalWrite>
    1288:	movs	r1, #4
    128a:	ldr	r0, [pc, #772]	; (1590 <loop+0x10fc>)
    128c:	bl	1bc0 <usb_serial_write>
    1290:	ldr	r0, [pc, #768]	; (1594 <loop+0x1100>)
    1292:	bl	3734 <Print::println()>
    1296:	b.n	10b0 <loop+0xc1c>
    1298:	ldr	r3, [r7, #24]
    129a:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    129e:	clz	r1, r1
    12a2:	lsrs	r1, r1, #5
    12a4:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    12a6:	uxtb	r0, r0
    12a8:	bl	21d0 <digitalWrite>
    12ac:	movs	r1, #4
    12ae:	ldr	r0, [pc, #736]	; (1590 <loop+0x10fc>)
    12b0:	bl	1bc0 <usb_serial_write>
    12b4:	ldr	r0, [pc, #732]	; (1594 <loop+0x1100>)
    12b6:	bl	3734 <Print::println()>
    12ba:	b.n	1202 <loop+0xd6e>
    12bc:	ldr	r3, [r7, #24]
    12be:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    12c2:	clz	r1, r1
    12c6:	lsrs	r1, r1, #5
    12c8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    12ca:	uxtb	r0, r0
    12cc:	bl	21d0 <digitalWrite>
    12d0:	movs	r1, #4
    12d2:	ldr	r0, [pc, #700]	; (1590 <loop+0x10fc>)
    12d4:	bl	1bc0 <usb_serial_write>
    12d8:	ldr	r0, [pc, #696]	; (1594 <loop+0x1100>)
    12da:	bl	3734 <Print::println()>
    12de:	b.n	112a <loop+0xc96>
    12e0:	ldr	r3, [r7, #24]
    12e2:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    12e6:	clz	r1, r1
    12ea:	lsrs	r1, r1, #5
    12ec:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    12ee:	uxtb	r0, r0
    12f0:	bl	21d0 <digitalWrite>
    12f4:	movs	r1, #4
    12f6:	ldr	r0, [pc, #664]	; (1590 <loop+0x10fc>)
    12f8:	bl	1bc0 <usb_serial_write>
    12fc:	ldr	r0, [pc, #660]	; (1594 <loop+0x1100>)
    12fe:	bl	3734 <Print::println()>
    1302:	b.n	1044 <loop+0xbb0>
    1304:	ldr	r3, [r7, #24]
    1306:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    130a:	clz	r1, r1
    130e:	lsrs	r1, r1, #5
    1310:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1312:	uxtb	r0, r0
    1314:	bl	21d0 <digitalWrite>
    1318:	movs	r1, #4
    131a:	ldr	r0, [pc, #628]	; (1590 <loop+0x10fc>)
    131c:	bl	1bc0 <usb_serial_write>
    1320:	ldr	r0, [pc, #624]	; (1594 <loop+0x1100>)
    1322:	bl	3734 <Print::println()>
    1326:	b.n	1196 <loop+0xd02>
    1328:	ldr	r3, [r7, #24]
    132a:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    132e:	clz	r1, r1
    1332:	lsrs	r1, r1, #5
    1334:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1336:	uxtb	r0, r0
    1338:	bl	21d0 <digitalWrite>
    133c:	movs	r1, #4
    133e:	ldr	r0, [pc, #592]	; (1590 <loop+0x10fc>)
    1340:	bl	1bc0 <usb_serial_write>
    1344:	ldr	r0, [pc, #588]	; (1594 <loop+0x1100>)
    1346:	bl	3734 <Print::println()>
    134a:	b.n	126e <loop+0xdda>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    134c:	ldr	r0, [r2, #8]
    134e:	ldr	r3, [r2, #12]
    1350:	lsls	r0, r0, #16
    1352:	lsls	r3, r3, #24
    1354:	and.w	r3, r3, #2130706432	; 0x7f000000
    1358:	and.w	r0, r0, #8323072	; 0x7f0000
    135c:	orrs	r0, r3
    135e:	orr.w	r0, r0, #40704	; 0x9f00
    1362:	orr.w	r0, r0, #9
    1366:	bl	245c <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    136a:	bl	24f8 <usb_midi_flush_output>
    136e:	ldr	r3, [r6, #4]
    1370:	b.n	e6c <loop+0x9d8>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1372:	ldr	r0, [pc, #548]	; (1598 <loop+0x1104>)
    1374:	bl	245c <usb_midi_write_packed>
    1378:	ldr	r3, [r5, #8]
    137a:	b.n	dba <loop+0x926>
    137c:	movs	r1, #8
    137e:	ldr	r0, [pc, #540]	; (159c <loop+0x1108>)
    1380:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1382:	strb.w	fp, [lr]
    1386:	bl	1bc0 <usb_serial_write>
    138a:	ldr	r0, [pc, #520]	; (1594 <loop+0x1100>)
    138c:	bl	3734 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    1390:	ldr.w	r6, [sl, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1394:	ldrb.w	r9, [r6]
    1398:	mov	r0, r9
    139a:	bl	21dc <digitalRead>
    139e:	clz	r1, r0
    13a2:	lsrs	r1, r1, #5
    13a4:	mov	r0, r9
    13a6:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13aa:	ldr.w	r3, [r8]
    13ae:	str	r3, [sp, #172]	; 0xac
	return ret;
    13b0:	ldr	r3, [sp, #172]	; 0xac
      blinking = true;
      blinkingCounter = times;
    13b2:	ldr	r2, [sp, #0]
    13b4:	str	r2, [r6, #20]
    13b6:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    13b8:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    13bc:	str	r3, [r6, #8]
    13be:	b.w	666 <loop+0x1d2>
    13c2:	movs	r1, #8
    13c4:	ldr	r0, [pc, #468]	; (159c <loop+0x1108>)
    13c6:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    13c8:	strb.w	fp, [lr]
    13cc:	bl	1bc0 <usb_serial_write>
    13d0:	ldr	r0, [pc, #448]	; (1594 <loop+0x1100>)
    13d2:	bl	3734 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    13d6:	ldr.w	r6, [sl, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    13da:	ldrb.w	r9, [r6]
    13de:	mov	r0, r9
    13e0:	bl	21dc <digitalRead>
    13e4:	clz	r1, r0
    13e8:	lsrs	r1, r1, #5
    13ea:	mov	r0, r9
    13ec:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13f0:	ldr.w	r3, [r8]
    13f4:	str	r3, [sp, #140]	; 0x8c
	return ret;
    13f6:	ldr	r3, [sp, #140]	; 0x8c
      blinking = true;
      blinkingCounter = times;
    13f8:	ldr	r2, [sp, #0]
    13fa:	str	r2, [r6, #20]
    13fc:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    13fe:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1402:	str	r3, [r6, #8]
    1404:	b.w	5ae <loop+0x11a>
    1408:	movs	r1, #8
    140a:	ldr	r0, [pc, #400]	; (159c <loop+0x1108>)
    140c:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    140e:	strb.w	fp, [lr]
    1412:	bl	1bc0 <usb_serial_write>
    1416:	ldr	r0, [pc, #380]	; (1594 <loop+0x1100>)
    1418:	bl	3734 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    141c:	ldr.w	r5, [sl, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1420:	ldrb.w	r9, [r5]
    1424:	mov	r0, r9
    1426:	bl	21dc <digitalRead>
    142a:	clz	r1, r0
    142e:	lsrs	r1, r1, #5
    1430:	mov	r0, r9
    1432:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1436:	ldr.w	r3, [r8]
    143a:	str	r3, [sp, #92]	; 0x5c
	return ret;
    143c:	ldr	r3, [sp, #92]	; 0x5c
      blinking = true;
      blinkingCounter = times;
    143e:	ldr	r2, [sp, #0]
    1440:	str	r2, [r5, #20]
    1442:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1444:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1448:	str	r3, [r5, #8]
    144a:	b.w	4e8 <loop+0x54>
    144e:	movs	r1, #8
    1450:	ldr	r0, [pc, #328]	; (159c <loop+0x1108>)
    1452:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1454:	strb.w	fp, [lr]
    1458:	bl	1bc0 <usb_serial_write>
    145c:	ldr	r0, [pc, #308]	; (1594 <loop+0x1100>)
    145e:	bl	3734 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    1462:	ldr.w	r5, [sl, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1466:	ldrb.w	r9, [r5]
    146a:	mov	r0, r9
    146c:	bl	21dc <digitalRead>
    1470:	clz	r1, r0
    1474:	lsrs	r1, r1, #5
    1476:	mov	r0, r9
    1478:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    147c:	ldr.w	r3, [r8]
    1480:	str	r3, [sp, #124]	; 0x7c
	return ret;
    1482:	ldr	r3, [sp, #124]	; 0x7c
      blinking = true;
      blinkingCounter = times;
    1484:	ldr	r2, [sp, #0]
    1486:	str	r2, [r5, #20]
    1488:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    148a:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    148e:	str	r3, [r5, #8]
    1490:	b.w	56c <loop+0xd8>
    1494:	movs	r1, #8
    1496:	ldr	r0, [pc, #260]	; (159c <loop+0x1108>)
    1498:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    149a:	strb.w	fp, [lr]
    149e:	bl	1bc0 <usb_serial_write>
    14a2:	ldr	r0, [pc, #240]	; (1594 <loop+0x1100>)
    14a4:	bl	3734 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    14a8:	ldr.w	r5, [sl, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14ac:	ldrb.w	r9, [r5]
    14b0:	mov	r0, r9
    14b2:	bl	21dc <digitalRead>
    14b6:	clz	r1, r0
    14ba:	lsrs	r1, r1, #5
    14bc:	mov	r0, r9
    14be:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14c2:	ldr.w	r3, [r8]
    14c6:	str	r3, [sp, #156]	; 0x9c
	return ret;
    14c8:	ldr	r3, [sp, #156]	; 0x9c
      blinking = true;
      blinkingCounter = times;
    14ca:	ldr	r2, [sp, #0]
    14cc:	str	r2, [r5, #20]
    14ce:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14d0:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    14d4:	str	r3, [r5, #8]
    14d6:	b.w	5f0 <loop+0x15c>
    14da:	movs	r1, #8
    14dc:	ldr	r0, [pc, #188]	; (159c <loop+0x1108>)
    14de:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    14e0:	strb.w	fp, [lr]
    14e4:	bl	1bc0 <usb_serial_write>
    14e8:	ldr	r0, [pc, #168]	; (1594 <loop+0x1100>)
    14ea:	bl	3734 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    14ee:	ldr.w	r6, [sl, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14f2:	ldrb.w	r9, [r6]
    14f6:	mov	r0, r9
    14f8:	bl	21dc <digitalRead>
    14fc:	clz	r1, r0
    1500:	lsrs	r1, r1, #5
    1502:	mov	r0, r9
    1504:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1508:	ldr.w	r3, [r8]
    150c:	str	r3, [sp, #108]	; 0x6c
	return ret;
    150e:	ldr	r3, [sp, #108]	; 0x6c
      blinking = true;
      blinkingCounter = times;
    1510:	ldr	r2, [sp, #0]
    1512:	str	r2, [r6, #20]
    1514:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1516:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    151a:	str	r3, [r6, #8]
    151c:	b.w	52a <loop+0x96>
    1520:	movs	r1, #5
    1522:	ldr	r0, [pc, #124]	; (15a0 <loop+0x110c>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1524:	strb.w	r5, [lr]
    1528:	str	r2, [sp, #0]
    152a:	bl	1bc0 <usb_serial_write>
    152e:	ldr	r0, [pc, #100]	; (1594 <loop+0x1100>)
    1530:	bl	3734 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    1534:	ldr.w	r5, [sl, #32]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1538:	ldrb.w	r9, [r5]
    153c:	mov	r0, r9
    153e:	bl	21dc <digitalRead>
    1542:	clz	r1, r0
    1546:	lsrs	r1, r1, #5
    1548:	mov	r0, r9
    154a:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    154e:	ldr.w	r3, [r8]
    1552:	str	r3, [sp, #132]	; 0x84
	return ret;
    1554:	ldr	r3, [sp, #132]	; 0x84
    1556:	b.n	1484 <loop+0xff0>
    1558:	movs	r1, #5
    155a:	ldr	r0, [pc, #68]	; (15a0 <loop+0x110c>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    155c:	strb.w	r6, [lr]
    1560:	str	r2, [sp, #0]
    1562:	bl	1bc0 <usb_serial_write>
    1566:	ldr	r0, [pc, #44]	; (1594 <loop+0x1100>)
    1568:	bl	3734 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    156c:	ldr.w	r6, [sl, #32]
    1570:	ldrb.w	r9, [r6]
    1574:	mov	r0, r9
    1576:	bl	21dc <digitalRead>
    157a:	clz	r1, r0
    157e:	lsrs	r1, r1, #5
    1580:	mov	r0, r9
    1582:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1586:	ldr.w	r3, [r8]
    158a:	str	r3, [sp, #116]	; 0x74
	return ret;
    158c:	ldr	r3, [sp, #116]	; 0x74
    158e:	b.n	1510 <loop+0x107c>
    1590:	.word	0x00004b18
    1594:	.word	0x1fff0c70
    1598:	.word	0x7f7bbf0b
    159c:	.word	0x00004af8
    15a0:	.word	0x00004b10
    15a4:	.word	0x1fff1804
    15a8:	movs	r1, #5
    15aa:	ldr	r0, [pc, #704]	; (186c <loop+0x13d8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    15ac:	strb.w	r6, [lr]
    15b0:	str	r2, [sp, #0]
    15b2:	bl	1bc0 <usb_serial_write>
    15b6:	ldr	r0, [pc, #696]	; (1870 <loop+0x13dc>)
    15b8:	bl	3734 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    15bc:	ldr.w	r6, [sl, #32]
    15c0:	ldrb.w	r9, [r6]
    15c4:	mov	r0, r9
    15c6:	bl	21dc <digitalRead>
    15ca:	clz	r1, r0
    15ce:	lsrs	r1, r1, #5
    15d0:	mov	r0, r9
    15d2:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15d6:	ldr.w	r3, [r8]
    15da:	str	r3, [sp, #180]	; 0xb4
	return ret;
    15dc:	ldr	r3, [sp, #180]	; 0xb4
    15de:	b.n	13b2 <loop+0xf1e>
    15e0:	movs	r1, #5
    15e2:	ldr	r0, [pc, #648]	; (186c <loop+0x13d8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    15e4:	strb.w	r5, [lr]
    15e8:	str	r2, [sp, #0]
    15ea:	bl	1bc0 <usb_serial_write>
    15ee:	ldr	r0, [pc, #640]	; (1870 <loop+0x13dc>)
    15f0:	bl	3734 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    15f4:	ldr.w	r5, [sl, #32]
    15f8:	ldrb.w	r9, [r5]
    15fc:	mov	r0, r9
    15fe:	bl	21dc <digitalRead>
    1602:	clz	r1, r0
    1606:	lsrs	r1, r1, #5
    1608:	mov	r0, r9
    160a:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    160e:	ldr.w	r3, [r8]
    1612:	str	r3, [sp, #100]	; 0x64
	return ret;
    1614:	ldr	r3, [sp, #100]	; 0x64
    1616:	b.n	143e <loop+0xfaa>
    1618:	movs	r1, #5
    161a:	ldr	r0, [pc, #592]	; (186c <loop+0x13d8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    161c:	strb.w	r5, [lr]
    1620:	str	r2, [sp, #0]
    1622:	bl	1bc0 <usb_serial_write>
    1626:	ldr	r0, [pc, #584]	; (1870 <loop+0x13dc>)
    1628:	bl	3734 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    162c:	ldr.w	r5, [sl, #32]
    1630:	ldrb.w	r9, [r5]
    1634:	mov	r0, r9
    1636:	bl	21dc <digitalRead>
    163a:	clz	r1, r0
    163e:	lsrs	r1, r1, #5
    1640:	mov	r0, r9
    1642:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1646:	ldr.w	r3, [r8]
    164a:	str	r3, [sp, #164]	; 0xa4
	return ret;
    164c:	ldr	r3, [sp, #164]	; 0xa4
    164e:	b.n	14ca <loop+0x1036>
    1650:	movs	r1, #5
    1652:	ldr	r0, [pc, #536]	; (186c <loop+0x13d8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1654:	strb.w	r6, [lr]
    1658:	str	r2, [sp, #0]
    165a:	bl	1bc0 <usb_serial_write>
    165e:	ldr	r0, [pc, #528]	; (1870 <loop+0x13dc>)
    1660:	bl	3734 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    1664:	ldr.w	r6, [sl, #32]
    1668:	ldrb.w	r9, [r6]
    166c:	mov	r0, r9
    166e:	bl	21dc <digitalRead>
    1672:	clz	r1, r0
    1676:	lsrs	r1, r1, #5
    1678:	mov	r0, r9
    167a:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    167e:	ldr.w	r3, [r8]
    1682:	str	r3, [sp, #148]	; 0x94
	return ret;
    1684:	ldr	r3, [sp, #148]	; 0x94
    1686:	b.n	13f8 <loop+0xf64>
    1688:	ldr	r0, [r2, #8]
    168a:	ldr	r3, [r2, #12]
    168c:	lsls	r0, r0, #16
    168e:	lsls	r3, r3, #24
    1690:	and.w	r3, r3, #2130706432	; 0x7f000000
    1694:	and.w	r0, r0, #8323072	; 0x7f0000
    1698:	orrs	r0, r3
    169a:	orr.w	r0, r0, #40704	; 0x9f00
    169e:	orr.w	r0, r0, #9
    16a2:	bl	245c <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    16a6:	bl	24f8 <usb_midi_flush_output>
    16aa:	ldr	r3, [r6, #4]
    16ac:	b.w	e06 <loop+0x972>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    16b0:	movs	r0, #2
    16b2:	strb.w	r0, [lr]
    16b6:	movs	r1, #10
    16b8:	ldr	r0, [pc, #440]	; (1874 <loop+0x13e0>)
    16ba:	str	r2, [sp, #4]
    16bc:	str	r3, [sp, #0]
    16be:	bl	1bc0 <usb_serial_write>
    16c2:	ldr	r0, [pc, #428]	; (1870 <loop+0x13dc>)
    16c4:	bl	3734 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    16c8:	ldr.w	r6, [sl, #28]
    16cc:	ldrb.w	r9, [r6]
    16d0:	mov	r0, r9
    16d2:	bl	21dc <digitalRead>
    16d6:	clz	r1, r0
    16da:	lsrs	r1, r1, #5
    16dc:	mov	r0, r9
    16de:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16e2:	ldr.w	r1, [r8]
    16e6:	str	r1, [sp, #176]	; 0xb0
      blinking = true;
      blinkingCounter = times;
    16e8:	ldr	r2, [sp, #4]
	return ret;
    16ea:	ldr	r1, [sp, #176]	; 0xb0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    16ec:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    16ee:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    16f0:	strb	r3, [r6, #16]
    16f2:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    16f4:	str	r1, [r6, #8]
    16f6:	b.w	666 <loop+0x1d2>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    16fa:	movs	r0, #2
    16fc:	strb.w	r0, [lr]
    1700:	movs	r1, #10
    1702:	ldr	r0, [pc, #368]	; (1874 <loop+0x13e0>)
    1704:	str	r2, [sp, #4]
    1706:	str	r3, [sp, #0]
    1708:	bl	1bc0 <usb_serial_write>
    170c:	ldr	r0, [pc, #352]	; (1870 <loop+0x13dc>)
    170e:	bl	3734 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    1712:	ldr.w	r6, [sl, #28]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1716:	ldrb.w	r9, [r6]
    171a:	mov	r0, r9
    171c:	bl	21dc <digitalRead>
    1720:	clz	r1, r0
    1724:	lsrs	r1, r1, #5
    1726:	mov	r0, r9
    1728:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    172c:	ldr.w	r1, [r8]
    1730:	str	r1, [sp, #112]	; 0x70
      blinking = true;
      blinkingCounter = times;
    1732:	ldr	r2, [sp, #4]
	return ret;
    1734:	ldr	r1, [sp, #112]	; 0x70
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1736:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    1738:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    173a:	strb	r3, [r6, #16]
    173c:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    173e:	str	r1, [r6, #8]
    1740:	b.w	52a <loop+0x96>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1744:	movs	r0, #2
    1746:	strb.w	r0, [lr]
    174a:	movs	r1, #10
    174c:	ldr	r0, [pc, #292]	; (1874 <loop+0x13e0>)
    174e:	str	r2, [sp, #4]
    1750:	str	r3, [sp, #0]
    1752:	bl	1bc0 <usb_serial_write>
    1756:	ldr	r0, [pc, #280]	; (1870 <loop+0x13dc>)
    1758:	bl	3734 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    175c:	ldr.w	r5, [sl, #28]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1760:	ldrb.w	r9, [r5]
    1764:	mov	r0, r9
    1766:	bl	21dc <digitalRead>
    176a:	clz	r1, r0
    176e:	lsrs	r1, r1, #5
    1770:	mov	r0, r9
    1772:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1776:	ldr.w	r1, [r8]
    177a:	str	r1, [sp, #128]	; 0x80
      blinking = true;
      blinkingCounter = times;
    177c:	ldr	r2, [sp, #4]
	return ret;
    177e:	ldr	r1, [sp, #128]	; 0x80
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1780:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    1782:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1784:	strb	r3, [r5, #16]
    1786:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    1788:	str	r1, [r5, #8]
    178a:	b.w	56c <loop+0xd8>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    178e:	movs	r0, #2
    1790:	strb.w	r0, [lr]
    1794:	movs	r1, #10
    1796:	ldr	r0, [pc, #220]	; (1874 <loop+0x13e0>)
    1798:	str	r2, [sp, #4]
    179a:	str	r3, [sp, #0]
    179c:	bl	1bc0 <usb_serial_write>
    17a0:	ldr	r0, [pc, #204]	; (1870 <loop+0x13dc>)
    17a2:	bl	3734 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    17a6:	ldr.w	r5, [sl, #28]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17aa:	ldrb.w	r9, [r5]
    17ae:	mov	r0, r9
    17b0:	bl	21dc <digitalRead>
    17b4:	clz	r1, r0
    17b8:	lsrs	r1, r1, #5
    17ba:	mov	r0, r9
    17bc:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17c0:	ldr.w	r1, [r8]
    17c4:	str	r1, [sp, #160]	; 0xa0
      blinking = true;
      blinkingCounter = times;
    17c6:	ldr	r2, [sp, #4]
	return ret;
    17c8:	ldr	r1, [sp, #160]	; 0xa0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    17ca:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    17cc:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    17ce:	strb	r3, [r5, #16]
    17d0:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    17d2:	str	r1, [r5, #8]
    17d4:	b.w	5f0 <loop+0x15c>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    17d8:	movs	r0, #2
    17da:	strb.w	r0, [lr]
    17de:	movs	r1, #10
    17e0:	ldr	r0, [pc, #144]	; (1874 <loop+0x13e0>)
    17e2:	str	r2, [sp, #4]
    17e4:	str	r3, [sp, #0]
    17e6:	bl	1bc0 <usb_serial_write>
    17ea:	ldr	r0, [pc, #132]	; (1870 <loop+0x13dc>)
    17ec:	bl	3734 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    17f0:	ldr.w	r6, [sl, #28]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17f4:	ldrb.w	r9, [r6]
    17f8:	mov	r0, r9
    17fa:	bl	21dc <digitalRead>
    17fe:	clz	r1, r0
    1802:	lsrs	r1, r1, #5
    1804:	mov	r0, r9
    1806:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    180a:	ldr.w	r1, [r8]
    180e:	str	r1, [sp, #144]	; 0x90
      blinking = true;
      blinkingCounter = times;
    1810:	ldr	r2, [sp, #4]
	return ret;
    1812:	ldr	r1, [sp, #144]	; 0x90
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1814:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    1816:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1818:	strb	r3, [r6, #16]
    181a:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    181c:	str	r1, [r6, #8]
    181e:	b.w	5ae <loop+0x11a>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1822:	movs	r0, #2
    1824:	strb.w	r0, [lr]
    1828:	movs	r1, #10
    182a:	ldr	r0, [pc, #72]	; (1874 <loop+0x13e0>)
    182c:	str	r2, [sp, #4]
    182e:	str	r3, [sp, #0]
    1830:	bl	1bc0 <usb_serial_write>
    1834:	ldr	r0, [pc, #56]	; (1870 <loop+0x13dc>)
    1836:	bl	3734 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    183a:	ldr.w	r5, [sl, #28]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    183e:	ldrb.w	r9, [r5]
    1842:	mov	r0, r9
    1844:	bl	21dc <digitalRead>
    1848:	clz	r1, r0
    184c:	lsrs	r1, r1, #5
    184e:	mov	r0, r9
    1850:	bl	21d0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1854:	ldr.w	r1, [r8]
    1858:	str	r1, [sp, #96]	; 0x60
      blinking = true;
      blinkingCounter = times;
    185a:	ldr	r2, [sp, #4]
	return ret;
    185c:	ldr	r1, [sp, #96]	; 0x60
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    185e:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    1860:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1862:	strb	r3, [r5, #16]
    1864:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    1866:	str	r1, [r5, #8]
    1868:	b.w	4e8 <loop+0x54>
    186c:	.word	0x00004b10
    1870:	.word	0x1fff0c70
    1874:	.word	0x00004b04

00001878 <_GLOBAL__sub_I_currentMode>:
    1878:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "transport.h"
#include "step.h"

Controller controller;

Led led1(3, LOW);
    187c:	movs	r2, #0
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    187e:	sub	sp, #12
#include "transport.h"
#include "step.h"

Controller controller;

Led led1(3, LOW);
    1880:	movs	r1, #3
    1882:	ldr	r0, [pc, #520]	; (1a8c <_GLOBAL__sub_I_currentMode+0x214>)
    Step* m_steps[4];
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
    1884:	ldr	r6, [pc, #520]	; (1a90 <_GLOBAL__sub_I_currentMode+0x218>)
    int m_currentStep;
    Step* m_steps[4];
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Step* steps[4], Led* leds[6]) {
    1886:	ldr	r5, [pc, #524]	; (1a94 <_GLOBAL__sub_I_currentMode+0x21c>)
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1888:	ldr.w	r9, [pc, #596]	; 1ae0 <_GLOBAL__sub_I_currentMode+0x268>
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    188c:	ldr	r7, [pc, #520]	; (1a98 <_GLOBAL__sub_I_currentMode+0x220>)
    188e:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    1892:	movs	r2, #0
    1894:	movs	r1, #5
    1896:	ldr	r0, [pc, #516]	; (1a9c <_GLOBAL__sub_I_currentMode+0x224>)
    1898:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    189c:	movs	r2, #0
    189e:	movs	r1, #7
    18a0:	ldr	r0, [pc, #508]	; (1aa0 <_GLOBAL__sub_I_currentMode+0x228>)
    18a2:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    18a6:	movs	r2, #0
    18a8:	movs	r1, #9
    18aa:	ldr	r0, [pc, #504]	; (1aa4 <_GLOBAL__sub_I_currentMode+0x22c>)
    18ac:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    18b0:	movs	r2, #0
    18b2:	movs	r1, #11
    18b4:	ldr	r0, [pc, #496]	; (1aa8 <_GLOBAL__sub_I_currentMode+0x230>)
    18b6:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    18ba:	movs	r2, #0
    18bc:	movs	r1, #24
    18be:	ldr	r0, [pc, #492]	; (1aac <_GLOBAL__sub_I_currentMode+0x234>)
    18c0:	bl	46c <Led::Led(int, int)>
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    18c4:	add.w	r0, r6, #8
    18c8:	ldmia	r0, {r0, r1, r3}
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
    18ca:	ldmia.w	r6, {r2, r4}
    18ce:	ldr.w	ip, [pc, #532]	; 1ae4 <_GLOBAL__sub_I_currentMode+0x26c>
    18d2:	ldr.w	lr, [pc, #532]	; 1ae8 <_GLOBAL__sub_I_currentMode+0x270>
    18d6:	str	r4, [r5, #28]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 1;
    18d8:	mov.w	r8, #1
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    18dc:	movs	r4, #0
      m_leds[2] = leds[2];
    18de:	str	r0, [r5, #32]
      m_leds[3] = leds[3];
    18e0:	str	r1, [r5, #36]	; 0x24
      m_controller = controller;
      m_pitch = 38;
    18e2:	movs	r0, #38	; 0x26
      m_velocity = 100;
    18e4:	movs	r1, #100	; 0x64
      m_leds[4] = leds[4];
    18e6:	str	r3, [r5, #40]	; 0x28
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    18e8:	ldr	r3, [pc, #452]	; (1ab0 <_GLOBAL__sub_I_currentMode+0x238>)
      m_state = false;
    18ea:	strb.w	r4, [ip, #4]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    18ee:	str.w	r9, [ip]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    18f2:	str.w	r0, [ip, #8]
      m_velocity = 100;
    18f6:	str.w	r1, [ip, #12]
      m_length = 1;
    18fa:	str.w	r8, [ip, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    18fe:	ldr.w	ip, [pc, #492]	; 1aec <_GLOBAL__sub_I_currentMode+0x274>
    1902:	str.w	r9, [lr]
      m_state = false;
    1906:	strb.w	r4, [lr, #4]
      m_controller = controller;
      m_pitch = 38;
    190a:	str.w	r0, [lr, #8]
      m_velocity = 100;
    190e:	str.w	r1, [lr, #12]
      m_length = 1;
    1912:	str.w	r8, [lr, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1916:	str.w	r9, [r3]
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    191a:	ldr.w	lr, [pc, #468]	; 1af0 <_GLOBAL__sub_I_currentMode+0x278>
      m_state = false;
    191e:	strb	r4, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    1920:	str	r0, [r3, #8]
      m_velocity = 100;
    1922:	str	r1, [r3, #12]
      m_length = 1;
    1924:	str.w	r8, [r3, #16]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1928:	ldr	r3, [pc, #392]	; (1ab4 <_GLOBAL__sub_I_currentMode+0x23c>)
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    192a:	str.w	r0, [ip, #8]
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    192e:	ldr	r0, [r6, #20]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1930:	str.w	r9, [ip]
      m_state = false;
    1934:	strb.w	r4, [ip, #4]
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    1938:	str.w	r1, [ip, #12]
      m_length = 1;
    193c:	str.w	r8, [ip, #16]
    Step* m_steps[4];
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
    1940:	str	r2, [r5, #24]
    int m_currentStep;
    Step* m_steps[4];
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Step* steps[4], Led* leds[6]) {
    1942:	str	r4, [r5, #0]
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1944:	str	r0, [r5, #44]	; 0x2c
    1946:	str	r2, [r3, #24]
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
    1948:	ldr.w	r2, [lr, #4]
    194c:	str	r2, [sp, #4]
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    194e:	ldr.w	r2, [lr]
    1952:	str	r2, [r5, #8]
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
    1954:	ldr.w	r2, [lr, #8]
    1958:	str	r2, [r5, #16]
      m_steps[3] = steps[3];
    195a:	ldr.w	r2, [lr, #12]
    195e:	str	r2, [r5, #20]
      m_id = id;
      m_pin = pin;
    1960:	mov.w	r9, #2
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
    1964:	ldr	r2, [sp, #4]
    1966:	str	r2, [r5, #12]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1968:	mov	r1, r4
    196a:	mov	r0, r9
    196c:	movs	r2, #24
      m_steps[2] = steps[2];
      m_steps[3] = steps[3];
      m_currentStep = 0;
    196e:	str	r4, [r5, #4]
      m_mode = PITCH;
    1970:	strb.w	r4, [r5, #48]	; 0x30
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1974:	str	r5, [r3, #28]
      m_id = id;
    1976:	str.w	r8, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
    197a:	strb	r4, [r3, #16]
      m_playButton = playButton;
    197c:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    197e:	str.w	r9, [r3, #32]
    1982:	str	r4, [r7, #8]
      m_state = false;
    1984:	strb	r4, [r7, #0]
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    1986:	str	r2, [r7, #4]
    1988:	str	r5, [r7, #12]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    198a:	bl	21f8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    198e:	ldr	r3, [pc, #296]	; (1ab8 <_GLOBAL__sub_I_currentMode+0x240>)
    1990:	ldr	r2, [r6, #4]
    1992:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1994:	mov.w	sl, #4
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1998:	mov	r1, r4
    199a:	mov	r0, sl
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    199c:	movs	r2, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    199e:	str	r5, [r3, #28]
      m_id = id;
    19a0:	str.w	r9, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
    19a4:	strb	r4, [r3, #16]
      m_playButton = playButton;
    19a6:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    19a8:	str.w	sl, [r3, #32]
    19ac:	str	r2, [sp, #4]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    19ae:	bl	21f8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    19b2:	ldr	r3, [pc, #264]	; (1abc <_GLOBAL__sub_I_currentMode+0x244>)
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    19b4:	ldr	r2, [sp, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    19b6:	ldr	r1, [r6, #8]
    19b8:	str	r1, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    19ba:	mov	r0, r2
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    19bc:	mov.w	fp, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    19c0:	mov	r1, r4
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    19c2:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    19c4:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    19c6:	strb	r4, [r3, #16]
      m_playButton = playButton;
    19c8:	strb	r4, [r3, #17]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    19ca:	str.w	fp, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    19ce:	bl	21f8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    19d2:	ldr	r3, [pc, #236]	; (1ac0 <_GLOBAL__sub_I_currentMode+0x248>)
    19d4:	ldr	r1, [r6, #12]
    19d6:	str	r1, [r3, #24]
      m_id = id;
      m_pin = pin;
    19d8:	movs	r1, #8
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    19da:	mov	r0, r1
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    19dc:	str	r1, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    19de:	mov	r1, r4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    19e0:	str	r5, [r3, #28]
      m_id = id;
    19e2:	str.w	sl, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
    19e6:	strb	r4, [r3, #16]
      m_playButton = playButton;
    19e8:	strb	r4, [r3, #17]

      pinMode(pin, INPUT);
    19ea:	bl	21f8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    19ee:	ldr	r3, [pc, #212]	; (1ac4 <_GLOBAL__sub_I_currentMode+0x24c>)
    19f0:	ldr	r1, [r6, #16]
    19f2:	str	r1, [r3, #24]
      m_id = id;
    19f4:	movs	r0, #5
      m_pin = pin;
    19f6:	movs	r1, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    19f8:	str	r0, [r3, #0]
      m_pin = pin;
    19fa:	str	r1, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    19fc:	mov	r0, r1
    19fe:	mov	r1, r4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a00:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a02:	strb.w	r8, [r3, #16]
      m_playButton = playButton;
    1a06:	strb	r4, [r3, #17]

      pinMode(pin, INPUT);
    1a08:	bl	21f8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a0c:	ldr	r3, [pc, #184]	; (1ac8 <_GLOBAL__sub_I_currentMode+0x250>)
      m_id = id;
    1a0e:	ldr	r2, [sp, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a10:	ldr	r6, [r6, #20]
      m_id = id;
    1a12:	str	r2, [r3, #0]
      m_pin = pin;
    1a14:	movs	r2, #12
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1a16:	mov	r0, r2
    1a18:	mov	r1, r4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a1a:	str	r6, [r3, #24]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a1c:	ldr	r6, [pc, #172]	; (1acc <_GLOBAL__sub_I_currentMode+0x254>)
    1a1e:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a20:	strb	r4, [r3, #16]
      m_playButton = playButton;
    1a22:	strb.w	r8, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1a26:	str	r2, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1a28:	bl	21f8 <pinMode>
    1a2c:	ldr	r0, [pc, #160]	; (1ad0 <_GLOBAL__sub_I_currentMode+0x258>)
    1a2e:	ldr	r1, [pc, #164]	; (1ad4 <_GLOBAL__sub_I_currentMode+0x25c>)
    1a30:	ldr	r2, [pc, #164]	; (1ad8 <_GLOBAL__sub_I_currentMode+0x260>)
    1a32:	ldr	r3, [pc, #168]	; (1adc <_GLOBAL__sub_I_currentMode+0x264>)
      m_pin = pin;
      m_knobType = knobType;
    1a34:	strb	r4, [r6, #24]
      m_id = id;
    1a36:	str	r4, [r6, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1a38:	mov.w	lr, #15
    1a3c:	movs	r4, #14
    1a3e:	strb	r4, [r6, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a40:	str	r5, [r6, #16]
    1a42:	str	r7, [r6, #20]
    1a44:	str	r5, [r0, #16]
      m_pin = pin;
    1a46:	movs	r6, #16
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a48:	str	r7, [r0, #20]
      m_pin = pin;
      m_knobType = knobType;
    1a4a:	strb.w	r8, [r0, #24]
      m_id = id;
    1a4e:	str.w	r8, [r0, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1a52:	movs	r4, #17
    1a54:	strb.w	lr, [r0]
    1a58:	movs	r0, #18
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a5a:	str	r5, [r1, #16]
    1a5c:	str	r7, [r1, #20]
      m_pin = pin;
      m_knobType = knobType;
    1a5e:	strb.w	r9, [r1, #24]
      m_id = id;
    1a62:	str.w	r9, [r1, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1a66:	strb	r6, [r1, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a68:	str	r5, [r2, #16]
    1a6a:	str	r7, [r2, #20]
      m_pin = pin;
      m_knobType = knobType;
    1a6c:	strb.w	fp, [r2, #24]
      m_id = id;
    1a70:	str.w	fp, [r2, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1a74:	strb	r4, [r2, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a76:	str	r5, [r3, #16]
    1a78:	str	r7, [r3, #20]
      m_pin = pin;
      m_knobType = knobType;
    1a7a:	strb.w	sl, [r3, #24]
      m_id = id;
    1a7e:	str.w	sl, [r3, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1a82:	strb	r0, [r3, #0]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    1a84:	add	sp, #12
    1a86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a8a:	nop
    1a8c:	.word	0x1fff1808
    1a90:	.word	0x1fff0c50
    1a94:	.word	0x1fff17c0
    1a98:	.word	0x1fff17f4
    1a9c:	.word	0x1fff1820
    1aa0:	.word	0x1fff1838
    1aa4:	.word	0x1fff1850
    1aa8:	.word	0x1fff15d8
    1aac:	.word	0x1fff15f0
    1ab0:	.word	0x1fff170c
    1ab4:	.word	0x1fff160c
    1ab8:	.word	0x1fff1630
    1abc:	.word	0x1fff1654
    1ac0:	.word	0x1fff1678
    1ac4:	.word	0x1fff169c
    1ac8:	.word	0x1fff16c0
    1acc:	.word	0x1fff1734
    1ad0:	.word	0x1fff1750
    1ad4:	.word	0x1fff176c
    1ad8:	.word	0x1fff1788
    1adc:	.word	0x1fff17a4
    1ae0:	.word	0x1fff1608
    1ae4:	.word	0x1fff16e4
    1ae8:	.word	0x1fff16f8
    1aec:	.word	0x1fff1720
    1af0:	.word	0x1fff0c40

00001af4 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1af4:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1af6:	ldr	r5, [pc, #60]	; (1b34 <usb_serial_getchar+0x40>)
    1af8:	ldr	r0, [r5, #0]
    1afa:	cbz	r0, 1b1c <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1afc:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1afe:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1b00:	adds	r1, r0, r3
    1b02:	adds	r3, #1
	if (i >= rx_packet->len) {
    1b04:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1b06:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1b08:	bcs.n	1b10 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1b0a:	strh	r3, [r0, #2]
	}
	return c;
    1b0c:	mov	r0, r4
}
    1b0e:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1b10:	bl	29a0 <usb_free>
		rx_packet = NULL;
    1b14:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1b16:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1b18:	str	r3, [r5, #0]
    1b1a:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1b1c:	ldr	r3, [pc, #24]	; (1b38 <usb_serial_getchar+0x44>)
    1b1e:	ldrb	r3, [r3, #0]
    1b20:	cbz	r3, 1b2e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1b22:	movs	r0, #2
    1b24:	bl	29ec <usb_rx>
    1b28:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1b2a:	cmp	r0, #0
    1b2c:	bne.n	1afc <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1b2e:	mov.w	r0, #4294967295
    1b32:	pop	{r3, r4, r5, pc}
    1b34:	.word	0x1fff1874
    1b38:	.word	0x1fff19d4

00001b3c <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1b3c:	push	{r4, lr}
	if (!rx_packet) {
    1b3e:	ldr	r4, [pc, #36]	; (1b64 <usb_serial_peekchar+0x28>)
    1b40:	ldr	r0, [r4, #0]
    1b42:	cbz	r0, 1b4c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1b44:	ldrh	r3, [r0, #2]
    1b46:	add	r0, r3
    1b48:	ldrb	r0, [r0, #8]
}
    1b4a:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1b4c:	ldr	r3, [pc, #24]	; (1b68 <usb_serial_peekchar+0x2c>)
    1b4e:	ldrb	r3, [r3, #0]
    1b50:	cbz	r3, 1b5e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1b52:	movs	r0, #2
    1b54:	bl	29ec <usb_rx>
    1b58:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1b5a:	cmp	r0, #0
    1b5c:	bne.n	1b44 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1b5e:	mov.w	r0, #4294967295
    1b62:	pop	{r4, pc}
    1b64:	.word	0x1fff1874
    1b68:	.word	0x1fff19d4

00001b6c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1b6c:	ldr	r3, [pc, #16]	; (1b80 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1b6e:	ldr	r2, [pc, #20]	; (1b84 <usb_serial_available+0x18>)
    1b70:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1b72:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1b74:	cbz	r3, 1b7e <usb_serial_available+0x12>
    1b76:	ldrh	r2, [r3, #0]
    1b78:	ldrh	r3, [r3, #2]
    1b7a:	subs	r3, r2, r3
    1b7c:	add	r0, r3
	return count;
}
    1b7e:	bx	lr
    1b80:	.word	0x1fff1874
    1b84:	.word	0x1fff1e68

00001b88 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1b88:	ldr	r3, [pc, #44]	; (1bb8 <usb_serial_flush_input+0x30>)
    1b8a:	ldrb	r3, [r3, #0]
    1b8c:	cbz	r3, 1bb6 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1b8e:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1b90:	ldr	r4, [pc, #40]	; (1bbc <usb_serial_flush_input+0x34>)
    1b92:	ldr	r0, [r4, #0]
    1b94:	cbz	r0, 1baa <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1b96:	bl	29a0 <usb_free>
		rx_packet = NULL;
    1b9a:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1b9c:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1b9e:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1ba0:	bl	29ec <usb_rx>
		if (!rx) break;
    1ba4:	cbz	r0, 1bb4 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1ba6:	bl	29a0 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1baa:	movs	r0, #2
    1bac:	bl	29ec <usb_rx>
		if (!rx) break;
    1bb0:	cmp	r0, #0
    1bb2:	bne.n	1ba6 <usb_serial_flush_input+0x1e>
    1bb4:	pop	{r4, pc}
    1bb6:	bx	lr
    1bb8:	.word	0x1fff19d4
    1bbc:	.word	0x1fff1874

00001bc0 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1bc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1bc4:	ldr.w	r9, [pc, #248]	; 1cc0 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1bc8:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1bca:	movs	r2, #1
    1bcc:	strb.w	r2, [r9]
	while (size > 0) {
    1bd0:	str	r1, [sp, #4]
    1bd2:	cbz	r1, 1c30 <usb_serial_write+0x70>
    1bd4:	ldr.w	r8, [pc, #236]	; 1cc4 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1bd8:	ldr	r7, [pc, #212]	; (1cb0 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1bda:	ldr	r6, [sp, #4]
    1bdc:	mov	fp, r0
		if (!tx_packet) {
    1bde:	ldr.w	r0, [r8]
    1be2:	cbz	r0, 1c52 <usb_serial_write+0x92>
    1be4:	ldr	r5, [pc, #204]	; (1cb4 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1be6:	ldrh	r4, [r0, #2]
    1be8:	rsb	r1, r4, #64	; 0x40
    1bec:	cmp	r1, r6
    1bee:	it	cs
    1bf0:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1bf2:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1bf6:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1bf8:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1bfc:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1bfe:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1c00:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1c04:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1c08:	cbz	r1, 1c20 <usb_serial_write+0x60>
    1c0a:	subs	r4, #1
    1c0c:	add	r2, r4
    1c0e:	add	r1, fp
    1c10:	ldrb.w	r4, [fp], #1
    1c14:	strb.w	r4, [r2, #1]!
    1c18:	cmp	fp, r1
    1c1a:	bne.n	1c10 <usb_serial_write+0x50>
    1c1c:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1c20:	cmp.w	lr, #63	; 0x3f
    1c24:	bhi.n	1c3e <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1c26:	ldr	r2, [pc, #144]	; (1cb8 <usb_serial_write+0xf8>)
    1c28:	movs	r1, #5
    1c2a:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1c2c:	cmp	r6, #0
    1c2e:	bne.n	1bde <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1c30:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1c32:	movs	r3, #0
    1c34:	strb.w	r3, [r9]
	return ret;
}
    1c38:	add	sp, #12
    1c3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1c3e:	movs	r2, #64	; 0x40
    1c40:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1c42:	mov	r1, r0
    1c44:	movs	r0, #3
    1c46:	bl	2b3c <usb_tx>
			tx_packet = NULL;
    1c4a:	movs	r2, #0
    1c4c:	str.w	r2, [r8]
    1c50:	b.n	1c26 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1c52:	ldrb	r2, [r7, #0]
    1c54:	cbz	r2, 1ca0 <usb_serial_write+0xe0>
    1c56:	ldr	r4, [pc, #100]	; (1cbc <usb_serial_write+0xfc>)
    1c58:	ldr	r5, [pc, #88]	; (1cb4 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1c5a:	mov.w	sl, #1
    1c5e:	b.n	1c70 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1c60:	subs	r4, #1
    1c62:	beq.n	1c92 <usb_serial_write+0xd2>
    1c64:	ldrb	r2, [r5, #0]
    1c66:	cbnz	r2, 1c92 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1c68:	bl	3640 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1c6c:	ldrb	r2, [r7, #0]
    1c6e:	cbz	r2, 1ca0 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1c70:	movs	r0, #3
    1c72:	bl	2a28 <usb_tx_packet_count>
    1c76:	cmp	r0, #7
    1c78:	bhi.n	1c60 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1c7a:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1c7e:	bl	2960 <usb_malloc>
    1c82:	str.w	r0, [r8]
					if (tx_packet) break;
    1c86:	cmp	r0, #0
    1c88:	bne.n	1be6 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1c8a:	ldr	r3, [pc, #52]	; (1cc0 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1c8c:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1c8e:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1c90:	bne.n	1c64 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1c92:	movs	r3, #1
					return -1;
    1c94:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1c98:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1c9a:	add	sp, #12
    1c9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1ca0:	movs	r3, #0
					return -1;
    1ca2:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1ca6:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1caa:	add	sp, #12
    1cac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cb0:	.word	0x1fff19d4
    1cb4:	.word	0x1fff1870
    1cb8:	.word	0x1fff1868
    1cbc:	.word	0x00014821
    1cc0:	.word	0x1fff1869
    1cc4:	.word	0x1fff186c

00001cc8 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1cc8:	push	{lr}
    1cca:	sub	sp, #12
    1ccc:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1cce:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1cd0:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1cd4:	mov	r0, r3
    1cd6:	bl	1bc0 <usb_serial_write>
}
    1cda:	add	sp, #12
    1cdc:	ldr.w	pc, [sp], #4

00001ce0 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1ce0:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1ce2:	ldr	r5, [pc, #56]	; (1d1c <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1ce4:	ldr	r4, [pc, #56]	; (1d20 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1ce6:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1ce8:	movs	r3, #1
    1cea:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1cec:	cbz	r0, 1cfa <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1cee:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1cf0:	movs	r3, #0
    1cf2:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1cf4:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1cf8:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1cfa:	ldr	r3, [pc, #40]	; (1d24 <usb_serial_write_buffer_free+0x44>)
    1cfc:	ldrb	r3, [r3, #0]
    1cfe:	cbnz	r3, 1d06 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1d00:	movs	r0, #0
    1d02:	strb	r0, [r4, #0]
			return 0;
    1d04:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1d06:	movs	r0, #3
    1d08:	bl	2a28 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1d0c:	cmp	r0, #7
    1d0e:	bhi.n	1d00 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1d10:	bl	2960 <usb_malloc>
    1d14:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1d16:	cmp	r0, #0
    1d18:	bne.n	1cee <usb_serial_write_buffer_free+0xe>
    1d1a:	b.n	1d00 <usb_serial_write_buffer_free+0x20>
    1d1c:	.word	0x1fff186c
    1d20:	.word	0x1fff1869
    1d24:	.word	0x1fff19d4

00001d28 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1d28:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1d2a:	ldr	r3, [pc, #68]	; (1d70 <usb_serial_flush_output+0x48>)
    1d2c:	ldrb	r3, [r3, #0]
    1d2e:	cbz	r3, 1d54 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1d30:	ldr	r6, [pc, #64]	; (1d74 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1d32:	ldr	r5, [pc, #68]	; (1d78 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1d34:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1d36:	movs	r7, #1
    1d38:	strb	r7, [r5, #0]
	if (tx_packet) {
    1d3a:	cbz	r4, 1d56 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1d3c:	ldr	r2, [pc, #60]	; (1d7c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1d3e:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1d40:	movs	r7, #0
    1d42:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1d44:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1d46:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1d48:	movs	r0, #3
    1d4a:	bl	2b3c <usb_tx>
		tx_packet = NULL;
    1d4e:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1d50:	movs	r3, #0
    1d52:	strb	r3, [r5, #0]
    1d54:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1d56:	bl	2960 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1d5a:	ldr	r3, [pc, #32]	; (1d7c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1d5c:	cbz	r0, 1d6a <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1d5e:	mov	r1, r0
    1d60:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1d62:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1d64:	bl	2b3c <usb_tx>
    1d68:	b.n	1d50 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1d6a:	strb	r7, [r3, #0]
    1d6c:	b.n	1d50 <usb_serial_flush_output+0x28>
    1d6e:	nop
    1d70:	.word	0x1fff19d4
    1d74:	.word	0x1fff186c
    1d78:	.word	0x1fff1869
    1d7c:	.word	0x1fff1868

00001d80 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1d80:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1d82:	ldr	r3, [pc, #56]	; (1dbc <usb_serial_flush_callback+0x3c>)
    1d84:	ldrb	r3, [r3, #0]
    1d86:	cbnz	r3, 1da6 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1d88:	ldr	r4, [pc, #52]	; (1dc0 <usb_serial_flush_callback+0x40>)
    1d8a:	ldr	r1, [r4, #0]
    1d8c:	cbz	r1, 1da8 <usb_serial_flush_callback+0x28>
    1d8e:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1d92:	ldrh	r3, [r1, #2]
    1d94:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1d96:	movs	r0, #3
    1d98:	bl	2b3c <usb_tx>
		tx_packet = NULL;
    1d9c:	str	r5, [r4, #0]
    1d9e:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1da0:	ldr	r3, [pc, #32]	; (1dc4 <usb_serial_flush_callback+0x44>)
    1da2:	movs	r2, #1
    1da4:	strb	r2, [r3, #0]
    1da6:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1da8:	bl	2960 <usb_malloc>
		if (tx) {
    1dac:	cmp	r0, #0
    1dae:	beq.n	1da0 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1db0:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1db2:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1db6:	movs	r0, #3
    1db8:	b.w	2b3c <usb_tx>
    1dbc:	.word	0x1fff1869
    1dc0:	.word	0x1fff186c
    1dc4:	.word	0x1fff1868

00001dc8 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1dc8:	ldr	r2, [pc, #220]	; (1ea8 <wait_for_cal+0xe0>)
    1dca:	ldr	r1, [pc, #224]	; (1eac <wait_for_cal+0xe4>)
    1dcc:	ldr	r3, [r2, #0]
    1dce:	lsls	r3, r3, #24
    1dd0:	bmi.n	1dcc <wait_for_cal+0x4>
    1dd2:	ldr	r3, [r1, #0]
    1dd4:	ands.w	r3, r3, #128	; 0x80
    1dd8:	bne.n	1dcc <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1dda:	cpsid	i
	if (calibrating) {
    1ddc:	ldr	r1, [pc, #208]	; (1eb0 <wait_for_cal+0xe8>)
    1dde:	ldrb	r2, [r1, #0]
    1de0:	cmp	r2, #0
    1de2:	beq.n	1ea4 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1de4:	ldr	r2, [pc, #204]	; (1eb4 <wait_for_cal+0xec>)
    1de6:	ldr	r0, [pc, #208]	; (1eb8 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1de8:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1dea:	ldr	r4, [pc, #208]	; (1ebc <wait_for_cal+0xf4>)
    1dec:	ldr	r7, [r2, #0]
    1dee:	ldr	r6, [r0, #0]
    1df0:	ldr	r5, [r4, #0]
    1df2:	ldr	r4, [r2, #12]
    1df4:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1df6:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1df8:	adds	r2, #20
    1dfa:	ldr	r0, [r0, #0]
    1dfc:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1dfe:	ldr	r7, [pc, #192]	; (1ec0 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1e00:	add	r5, r6
    1e02:	add	r4, r5
    1e04:	add	r0, r4
    1e06:	add	r2, r0
    1e08:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1e0c:	ldr	r6, [pc, #180]	; (1ec4 <wait_for_cal+0xfc>)
    1e0e:	ldr	r0, [pc, #184]	; (1ec8 <wait_for_cal+0x100>)
    1e10:	ldr	r5, [pc, #184]	; (1ecc <wait_for_cal+0x104>)
    1e12:	ldr	r4, [pc, #188]	; (1ed0 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1e14:	orr.w	r2, r2, #32768	; 0x8000
    1e18:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1e1a:	ldr	r7, [r6, #0]
    1e1c:	ldr	r6, [r0, #0]
    1e1e:	ldr	r5, [r5, #0]
    1e20:	ldr	r2, [pc, #176]	; (1ed4 <wait_for_cal+0x10c>)
    1e22:	ldr	r4, [r4, #0]
    1e24:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1e26:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1e28:	ldr	r0, [r0, #0]
    1e2a:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1e2c:	ldr	r7, [pc, #168]	; (1ed8 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1e2e:	add	r5, r6
    1e30:	add	r4, r5
    1e32:	add	r0, r4
    1e34:	add	r2, r0
    1e36:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1e3a:	ldr	r6, [pc, #160]	; (1edc <wait_for_cal+0x114>)
    1e3c:	ldr	r0, [pc, #160]	; (1ee0 <wait_for_cal+0x118>)
    1e3e:	ldr	r5, [pc, #164]	; (1ee4 <wait_for_cal+0x11c>)
    1e40:	ldr	r4, [pc, #164]	; (1ee8 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1e42:	orr.w	r2, r2, #32768	; 0x8000
    1e46:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1e48:	ldr	r7, [r6, #0]
    1e4a:	ldr	r6, [r0, #0]
    1e4c:	ldr	r5, [r5, #0]
    1e4e:	ldr	r2, [pc, #156]	; (1eec <wait_for_cal+0x124>)
    1e50:	ldr	r4, [r4, #0]
    1e52:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1e54:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1e56:	ldr	r0, [r0, #0]
    1e58:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1e5a:	ldr	r7, [pc, #148]	; (1ef0 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1e5c:	add	r5, r6
    1e5e:	add	r4, r5
    1e60:	add	r0, r4
    1e62:	add	r2, r0
    1e64:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1e68:	ldr	r6, [pc, #136]	; (1ef4 <wait_for_cal+0x12c>)
    1e6a:	ldr	r0, [pc, #140]	; (1ef8 <wait_for_cal+0x130>)
    1e6c:	ldr	r5, [pc, #140]	; (1efc <wait_for_cal+0x134>)
    1e6e:	ldr	r4, [pc, #144]	; (1f00 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1e70:	orr.w	r2, r2, #32768	; 0x8000
    1e74:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1e76:	ldr	r7, [r6, #0]
    1e78:	ldr	r6, [r0, #0]
    1e7a:	ldr	r5, [r5, #0]
    1e7c:	ldr	r2, [pc, #132]	; (1f04 <wait_for_cal+0x13c>)
    1e7e:	ldr	r4, [r4, #0]
    1e80:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1e82:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1e84:	ldr	r0, [r0, #0]
    1e86:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1e88:	add	r5, r6
    1e8a:	add	r4, r5
    1e8c:	add	r0, r4
    1e8e:	add	r2, r0
    1e90:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1e94:	ldr	r0, [pc, #112]	; (1f08 <wait_for_cal+0x140>)
    1e96:	orr.w	r2, r2, #32768	; 0x8000
    1e9a:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1e9c:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1e9e:	cpsie	i
}
    1ea0:	pop	{r4, r5, r6, r7}
    1ea2:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1ea4:	cpsie	i
    1ea6:	bx	lr
    1ea8:	.word	0x4003b024
    1eac:	.word	0x400bb024
    1eb0:	.word	0x1fff187a
    1eb4:	.word	0x4003b038
    1eb8:	.word	0x4003b03c
    1ebc:	.word	0x4003b040
    1ec0:	.word	0x4003b02c
    1ec4:	.word	0x4003b058
    1ec8:	.word	0x4003b05c
    1ecc:	.word	0x4003b060
    1ed0:	.word	0x4003b064
    1ed4:	.word	0x4003b06c
    1ed8:	.word	0x4003b030
    1edc:	.word	0x400bb038
    1ee0:	.word	0x400bb03c
    1ee4:	.word	0x400bb040
    1ee8:	.word	0x400bb044
    1eec:	.word	0x400bb04c
    1ef0:	.word	0x400bb02c
    1ef4:	.word	0x400bb058
    1ef8:	.word	0x400bb05c
    1efc:	.word	0x400bb060
    1f00:	.word	0x400bb064
    1f04:	.word	0x400bb06c
    1f08:	.word	0x400bb030

00001f0c <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1f0c:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1f0e:	ldr	r0, [pc, #164]	; (1fb4 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1f10:	ldr	r2, [pc, #164]	; (1fb8 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1f12:	ldr	r3, [pc, #168]	; (1fbc <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1f14:	ldr	r5, [pc, #168]	; (1fc0 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1f16:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1f18:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1f1a:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1f1c:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1f1e:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f20:	ldr	r4, [pc, #160]	; (1fc4 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1f22:	cmp	r3, #8
    1f24:	beq.n	1f88 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1f26:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1f28:	ldr	r0, [pc, #156]	; (1fc8 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f2a:	ldr	r1, [pc, #160]	; (1fcc <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1f2c:	beq.n	1f9e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1f2e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1f30:	ite	eq
    1f32:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1f34:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1f36:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1f38:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1f3a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1f3c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1f3e:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1f40:	ldr	r3, [pc, #140]	; (1fd0 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1f42:	ldr	r1, [pc, #144]	; (1fd4 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1f44:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1f46:	ldr	r2, [pc, #144]	; (1fd8 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1f48:	cbz	r3, 1f7a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1f4a:	movs	r3, #1
    1f4c:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1f4e:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1f50:	ldr	r3, [pc, #136]	; (1fdc <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1f52:	ldr	r1, [pc, #140]	; (1fe0 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1f54:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1f56:	ldr	r2, [pc, #140]	; (1fe4 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1f58:	cmp	r3, #1
    1f5a:	bls.n	1faa <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1f5c:	cmp	r3, #4
    1f5e:	bls.n	1f80 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1f60:	cmp	r3, #8
    1f62:	bls.n	1fa2 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1f64:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1f66:	ite	ls
    1f68:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1f6a:	movhi	r3, #135	; 0x87
    1f6c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1f6e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1f70:	ldr	r3, [pc, #116]	; (1fe8 <analog_init+0xdc>)
    1f72:	movs	r2, #1
    1f74:	strb	r2, [r3, #0]
}
    1f76:	pop	{r4, r5}
    1f78:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1f7a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1f7c:	str	r3, [r2, #0]
    1f7e:	b.n	1f50 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1f80:	movs	r3, #132	; 0x84
    1f82:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1f84:	str	r3, [r2, #0]
    1f86:	b.n	1f70 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1f88:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f8c:	ldr	r1, [pc, #60]	; (1fcc <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1f8e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1f90:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f92:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1f94:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f96:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1f98:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f9a:	str	r3, [r1, #0]
    1f9c:	b.n	1f40 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1f9e:	movs	r2, #57	; 0x39
    1fa0:	b.n	1f92 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1fa2:	movs	r3, #133	; 0x85
    1fa4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1fa6:	str	r3, [r2, #0]
    1fa8:	b.n	1f70 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1faa:	movs	r3, #128	; 0x80
    1fac:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1fae:	str	r3, [r2, #0]
    1fb0:	b.n	1f70 <analog_init+0x64>
    1fb2:	nop
    1fb4:	.word	0x40074000
    1fb8:	.word	0x40074001
    1fbc:	.word	0x1fff0c68
    1fc0:	.word	0x4003b008
    1fc4:	.word	0x4003b00c
    1fc8:	.word	0x400bb008
    1fcc:	.word	0x400bb00c
    1fd0:	.word	0x1fff187d
    1fd4:	.word	0x4003b020
    1fd8:	.word	0x400bb020
    1fdc:	.word	0x1fff0c69
    1fe0:	.word	0x4003b024
    1fe4:	.word	0x400bb024
    1fe8:	.word	0x1fff187a

00001fec <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1fec:	cmp	r0, #71	; 0x47
    1fee:	bhi.n	2050 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1ff0:	ldr	r3, [pc, #204]	; (20c0 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1ff2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1ff6:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1ff8:	cmp	r6, #255	; 0xff
    1ffa:	beq.n	2054 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1ffc:	ldr	r3, [pc, #196]	; (20c4 <analogRead+0xd8>)
    1ffe:	ldrb	r3, [r3, #0]
    2000:	cmp	r3, #0
    2002:	bne.n	205a <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2004:	lsls	r2, r6, #24
    2006:	bmi.n	2062 <analogRead+0x76>
#endif

	__disable_irq();
    2008:	cpsid	i
    200a:	ldr	r5, [pc, #188]	; (20c8 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    200c:	ldr	r4, [pc, #188]	; (20cc <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    200e:	mov	r7, r5
    2010:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2012:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2014:	strb	r3, [r5, #0]
	__enable_irq();
    2016:	cpsie	i
	while (1) {
		__disable_irq();
    2018:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    201a:	ldr	r3, [r4, #0]
    201c:	lsls	r3, r3, #24
    201e:	bmi.n	203a <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2020:	ldrb	r3, [r7, #0]
    2022:	cbnz	r3, 202c <analogRead+0x40>
    2024:	b.n	2010 <analogRead+0x24>
    2026:	ldrb	r3, [r5, #0]
    2028:	cmp	r3, #0
    202a:	beq.n	2010 <analogRead+0x24>
		__enable_irq();
    202c:	cpsie	i
		yield();
    202e:	bl	3640 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2032:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2034:	ldr	r3, [r4, #0]
    2036:	lsls	r0, r3, #24
    2038:	bpl.n	2026 <analogRead+0x3a>
			result = ADC0_RA;
    203a:	ldr	r3, [pc, #148]	; (20d0 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    203c:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    203e:	movs	r2, #0
    2040:	strb	r2, [r5, #0]
			__enable_irq();
    2042:	cpsie	i
			result >>= analog_right_shift;
    2044:	ldr	r2, [pc, #140]	; (20d4 <analogRead+0xe8>)
    2046:	ldrb	r0, [r2, #0]
    2048:	asr.w	r0, r3, r0
			return result;
    204c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2050:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2052:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2054:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2056:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    205a:	bl	1dc8 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    205e:	lsls	r2, r6, #24
    2060:	bpl.n	2008 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2062:	cpsid	i
    2064:	ldr	r5, [pc, #112]	; (20d8 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2066:	ldr.w	r8, [pc, #124]	; 20e4 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    206a:	ldr	r4, [pc, #112]	; (20dc <analogRead+0xf0>)
    206c:	and.w	r7, r6, #64	; 0x40
    2070:	uxtb	r7, r7
    2072:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2076:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    207a:	cbz	r7, 20b4 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    207c:	bic.w	r3, r3, #16
    2080:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2084:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2086:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2088:	ldr	r2, [pc, #76]	; (20d8 <analogRead+0xec>)
    208a:	strb	r3, [r5, #0]
	__enable_irq();
    208c:	cpsie	i
	while (1) {
		__disable_irq();
    208e:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2090:	ldr	r3, [r4, #0]
    2092:	lsls	r1, r3, #24
    2094:	bmi.n	20b0 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    2096:	ldrb	r3, [r2, #0]
    2098:	cbnz	r3, 20a2 <analogRead+0xb6>
    209a:	b.n	2076 <analogRead+0x8a>
    209c:	ldrb	r3, [r5, #0]
    209e:	cmp	r3, #0
    20a0:	beq.n	2076 <analogRead+0x8a>
		__enable_irq();
    20a2:	cpsie	i
		yield();
    20a4:	bl	3640 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    20a8:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    20aa:	ldr	r3, [r4, #0]
    20ac:	lsls	r3, r3, #24
    20ae:	bpl.n	209c <analogRead+0xb0>
			result = ADC1_RA;
    20b0:	ldr	r3, [pc, #44]	; (20e0 <analogRead+0xf4>)
    20b2:	b.n	203c <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    20b4:	orr.w	r3, r3, #16
    20b8:	str.w	r3, [r8]
    20bc:	b.n	2084 <analogRead+0x98>
    20be:	nop
    20c0:	.word	0x00004b20
    20c4:	.word	0x1fff187a
    20c8:	.word	0x1fff187c
    20cc:	.word	0x4003b000
    20d0:	.word	0x4003b010
    20d4:	.word	0x1fff1879
    20d8:	.word	0x1fff187b
    20dc:	.word	0x400bb000
    20e0:	.word	0x400bb010
    20e4:	.word	0x400bb00c

000020e8 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    20e8:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    20ea:	ldr	r3, [pc, #68]	; (2130 <digitalWrite.part.1+0x48>)
    20ec:	ldr.w	r2, [r3, r0, lsl #3]
    20f0:	ldrb.w	r4, [r2, #640]	; 0x280
    20f4:	cbz	r4, 2104 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    20f6:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    20f8:	cbz	r1, 211a <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    20fa:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    20fe:	ldr.w	r4, [sp], #4
    2102:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2104:	add.w	r3, r3, r0, lsl #3
    2108:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    210a:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    210c:	cbnz	r1, 2124 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    210e:	bic.w	r2, r2, #2
    2112:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2114:	ldr.w	r4, [sp], #4
    2118:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    211a:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    211e:	ldr.w	r4, [sp], #4
    2122:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2124:	orr.w	r2, r2, #3
    2128:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    212a:	ldr.w	r4, [sp], #4
    212e:	bx	lr
    2130:	.word	0x00004b68

00002134 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2134:	ldr	r2, [pc, #112]	; (21a8 <pinMode.part.2+0x74>)
    2136:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    213a:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    213c:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    213e:	beq.n	2164 <pinMode.part.2+0x30>
    2140:	cmp	r1, #4
    2142:	beq.n	217c <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2144:	ldr.w	r0, [r2, r0, lsl #3]
    2148:	movs	r2, #0
    214a:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    214e:	cbz	r1, 215c <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2150:	cmp	r1, #2
    2152:	beq.n	2196 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2154:	cmp	r1, #3
    2156:	beq.n	219e <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2158:	str	r2, [r3, #0]
    215a:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    215c:	mov.w	r2, #256	; 0x100
    2160:	str	r2, [r3, #0]
    2162:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2164:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2168:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    216c:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2170:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2172:	ldr	r2, [r3, #0]
    2174:	bic.w	r2, r2, #32
    2178:	str	r2, [r3, #0]
    217a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    217c:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2180:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2184:	movs	r0, #1
    2186:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    218a:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    218c:	ldr	r2, [r3, #0]
    218e:	orr.w	r2, r2, #32
    2192:	str	r2, [r3, #0]
    2194:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2196:	movw	r2, #259	; 0x103
    219a:	str	r2, [r3, #0]
    219c:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    219e:	mov.w	r2, #258	; 0x102
    21a2:	str	r2, [r3, #0]
    21a4:	bx	lr
    21a6:	nop
    21a8:	.word	0x00004b68

000021ac <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    21ac:	push	{r4, r5}
	RTC_SR = 0;
    21ae:	ldr	r3, [pc, #20]	; (21c4 <rtc_set+0x18>)
	RTC_TPR = 0;
    21b0:	ldr	r5, [pc, #20]	; (21c8 <rtc_set+0x1c>)
	RTC_TSR = t;
    21b2:	ldr	r4, [pc, #24]	; (21cc <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    21b4:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    21b6:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    21b8:	str	r2, [r3, #0]
	RTC_TPR = 0;
    21ba:	str	r2, [r5, #0]
	RTC_TSR = t;
    21bc:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    21be:	str	r1, [r3, #0]
}
    21c0:	pop	{r4, r5}
    21c2:	bx	lr
    21c4:	.word	0x4003d014
    21c8:	.word	0x4003d004
    21cc:	.word	0x4003d000

000021d0 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    21d0:	cmp	r0, #63	; 0x3f
    21d2:	bhi.n	21d8 <digitalWrite+0x8>
    21d4:	b.w	20e8 <digitalWrite.part.1>
    21d8:	bx	lr
    21da:	nop

000021dc <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    21dc:	cmp	r0, #63	; 0x3f
    21de:	bhi.n	21ee <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    21e0:	ldr	r3, [pc, #16]	; (21f4 <digitalRead+0x18>)
    21e2:	ldr.w	r3, [r3, r0, lsl #3]
    21e6:	ldrb.w	r0, [r3, #512]	; 0x200
    21ea:	uxtb	r0, r0
    21ec:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    21ee:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    21f0:	bx	lr
    21f2:	nop
    21f4:	.word	0x00004b68

000021f8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    21f8:	cmp	r0, #63	; 0x3f
    21fa:	bhi.n	2200 <pinMode+0x8>
    21fc:	b.w	2134 <pinMode.part.2>
    2200:	bx	lr
    2202:	nop

00002204 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2204:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2208:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    220a:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    220c:	ldr	r7, [pc, #136]	; (2298 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    220e:	ldr	r3, [pc, #140]	; (229c <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2210:	ldr	r2, [pc, #140]	; (22a0 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2212:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2214:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2216:	ldr	r2, [r2, #0]
	__enable_irq();
    2218:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    221a:	lsls	r2, r2, #5
    221c:	bpl.n	2224 <delay+0x20>
    221e:	cmp	r3, #50	; 0x32
    2220:	it	hi
    2222:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2224:	cbz	r5, 2294 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2226:	rsb	r3, r3, #179200	; 0x2bc00
    222a:	addw	r3, r3, #799	; 0x31f
    222e:	ldr	r6, [pc, #116]	; (22a4 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2230:	ldr.w	r9, [pc, #104]	; 229c <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2234:	ldr.w	r8, [pc, #104]	; 22a0 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2238:	lsrs	r3, r3, #2
    223a:	mov.w	r2, #1000	; 0x3e8
    223e:	umull	r1, r3, r6, r3
    2242:	mul.w	r4, r2, r4
    2246:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    224a:	cpsid	i
	current = SYST_CVR;
    224c:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2250:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2252:	ldr.w	lr, [r8]
	__enable_irq();
    2256:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2258:	rsb	r3, r1, #179200	; 0x2bc00
    225c:	addw	r3, r3, #799	; 0x31f
    2260:	lsrs	r3, r3, #2
    2262:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2266:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    226a:	rsb	r3, r4, r3, lsr #2
    226e:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2272:	beq.n	227a <delay+0x76>
    2274:	cmp	r1, #50	; 0x32
    2276:	it	hi
    2278:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    227a:	mla	r3, r0, r2, r3
    227e:	cmp.w	r3, #1000	; 0x3e8
    2282:	bcc.n	228e <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2284:	subs	r5, #1
    2286:	beq.n	2294 <delay+0x90>
				start += 1000;
    2288:	add.w	r4, r4, #1000	; 0x3e8
    228c:	b.n	224a <delay+0x46>
			}
			yield();
    228e:	bl	3640 <yield>
		}
    2292:	b.n	224a <delay+0x46>
    2294:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2298:	.word	0x1fff1880
    229c:	.word	0xe000e018
    22a0:	.word	0xe000ed04
    22a4:	.word	0x16c16c17

000022a8 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    22a8:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    22aa:	ldr	r3, [pc, #312]	; (23e4 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    22ac:	ldr	r0, [pc, #312]	; (23e8 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    22ae:	ldr.w	ip, [pc, #348]	; 240c <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    22b2:	ldr	r4, [pc, #312]	; (23ec <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    22b4:	ldr	r1, [pc, #312]	; (23f0 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    22b6:	ldr.w	lr, [pc, #344]	; 2410 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    22ba:	ldr	r6, [pc, #312]	; (23f4 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    22bc:	ldr	r5, [pc, #312]	; (23f8 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    22be:	ldr	r7, [pc, #316]	; (23fc <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    22c0:	mov.w	r2, #134217728	; 0x8000000
    22c4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    22c6:	mov.w	r2, #268435456	; 0x10000000
    22ca:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    22cc:	mov.w	r2, #536870912	; 0x20000000
    22d0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    22d2:	mov.w	r2, #1073741824	; 0x40000000
    22d6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    22d8:	mov.w	r2, #2147483648	; 0x80000000
    22dc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    22de:	movs	r2, #0
    22e0:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    22e2:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    22e4:	movw	r0, #61439	; 0xefff
    22e8:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    22ec:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    22f0:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    22f2:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    22f6:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    22f8:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    22fa:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    22fc:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2300:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2302:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2306:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2308:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    230c:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    230e:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2312:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2316:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    231a:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    231e:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2322:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2324:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2328:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    232a:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    232c:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    232e:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2332:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2334:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2336:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2338:	ldr	r4, [pc, #196]	; (2400 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    233a:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    233c:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    233e:	movs	r1, #9
    2340:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2342:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2346:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    234a:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    234c:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    234e:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2350:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2352:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2354:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2356:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    235a:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    235e:	add.w	r7, r7, #520192	; 0x7f000
    2362:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2364:	addw	r4, r4, #2044	; 0x7fc
    2368:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    236a:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    236c:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    236e:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2370:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2374:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2376:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    237a:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    237e:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2380:	sub.w	r4, r4, #460800	; 0x70800
    2384:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2388:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    238a:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    238c:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2390:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2392:	ldr	r0, [pc, #112]	; (2404 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2394:	orr.w	r1, r1, #512	; 0x200
    2398:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    239a:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    239c:	ldr	r4, [pc, #104]	; (2408 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    239e:	add.w	lr, lr, #65280	; 0xff00
    23a2:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    23a6:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    23aa:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    23ae:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    23b2:	orr.w	r1, r1, #33554432	; 0x2000000
    23b6:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    23b8:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    23bc:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    23c0:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    23c2:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    23c4:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    23c6:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    23c8:	str	r2, [r4, #0]
#endif
	analog_init();
    23ca:	bl	1f0c <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    23ce:	movs	r0, #25
    23d0:	bl	2204 <delay>
	usb_init();
    23d4:	bl	3570 <usb_init>
	delay(275);
    23d8:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    23dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    23e0:	b.w	2204 <delay>
    23e4:	.word	0xe000e104
    23e8:	.word	0x40038004
    23ec:	.word	0x40038014
    23f0:	.word	0x4003801c
    23f4:	.word	0x40038024
    23f8:	.word	0x4003802c
    23fc:	.word	0x40038034
    2400:	.word	0x40038000
    2404:	.word	0x40048004
    2408:	.word	0x400c9000
    240c:	.word	0x40038008
    2410:	.word	0x4003800c

00002414 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2414:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2416:	ldr	r3, [pc, #56]	; (2450 <sysex_byte+0x3c>)
    2418:	ldr	r4, [pc, #56]	; (2454 <sysex_byte+0x40>)
    241a:	ldr	r3, [r3, #0]
    241c:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    241e:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2420:	cbz	r3, 2446 <sysex_byte+0x32>
    2422:	cmp.w	r1, #290	; 0x122
    2426:	bcs.n	2434 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2428:	ldr	r2, [pc, #44]	; (2458 <sysex_byte+0x44>)
    242a:	adds	r3, r1, #1
    242c:	strb	r5, [r2, r1]
    242e:	uxth	r3, r3
    2430:	strh	r3, [r4, #0]
	}
}
    2432:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2434:	movs	r2, #0
    2436:	ldr	r0, [pc, #32]	; (2458 <sysex_byte+0x44>)
    2438:	blx	r3
    243a:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    243c:	ldr	r2, [pc, #24]	; (2458 <sysex_byte+0x44>)
    243e:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2440:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2442:	strh	r3, [r4, #0]
	}
}
    2444:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2446:	cmp.w	r1, #290	; 0x122
    244a:	bcc.n	2428 <sysex_byte+0x14>
    244c:	pop	{r3, r4, r5, pc}
    244e:	nop
    2450:	.word	0x1fff18a8
    2454:	.word	0x1fff1d3e
    2458:	.word	0x1fff1d44

0000245c <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    245c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2460:	ldr	r6, [pc, #132]	; (24e8 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2462:	ldr	r7, [pc, #136]	; (24ec <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2464:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2466:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2468:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    246a:	strb	r3, [r7, #0]
	if (!tx_packet) {
    246c:	cbz	r1, 249c <usb_midi_write_packed+0x40>
    246e:	ldr	r5, [pc, #128]	; (24f0 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2470:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2472:	add.w	r2, r1, r3, lsl #2
    2476:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2478:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    247a:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    247c:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2480:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2482:	bhi.n	248e <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2484:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2486:	movs	r3, #0
    2488:	strb	r3, [r7, #0]
    248a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    248e:	movs	r3, #64	; 0x40
    2490:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2492:	movs	r0, #4
    2494:	bl	2b3c <usb_tx>
		tx_packet = NULL;
    2498:	str	r4, [r6, #0]
    249a:	b.n	2486 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    249c:	ldr.w	r9, [pc, #84]	; 24f4 <usb_midi_write_packed+0x98>
    24a0:	ldrb.w	r3, [r9]
    24a4:	cmp	r3, #0
    24a6:	beq.n	248a <usb_midi_write_packed+0x2e>
    24a8:	ldr	r5, [pc, #68]	; (24f0 <usb_midi_write_packed+0x94>)
    24aa:	movw	r4, #48001	; 0xbb81
    24ae:	b.n	24c2 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    24b0:	subs	r4, #1
    24b2:	beq.n	24da <usb_midi_write_packed+0x7e>
    24b4:	ldrb	r3, [r5, #0]
    24b6:	cbnz	r3, 24da <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    24b8:	bl	3640 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    24bc:	ldrb.w	r3, [r9]
    24c0:	cbz	r3, 24e2 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    24c2:	movs	r0, #4
    24c4:	bl	2a28 <usb_tx_packet_count>
    24c8:	cmp	r0, #5
    24ca:	bhi.n	24b0 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    24cc:	bl	2960 <usb_malloc>
    24d0:	mov	r1, r0
    24d2:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    24d4:	cmp	r0, #0
    24d6:	beq.n	24b0 <usb_midi_write_packed+0x54>
    24d8:	b.n	2470 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    24da:	movs	r3, #1
    24dc:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    24de:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    24e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    24e6:	nop
    24e8:	.word	0x1fff18c4
    24ec:	.word	0x1fff1898
    24f0:	.word	0x1fff18c8
    24f4:	.word	0x1fff19d4

000024f8 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    24f8:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    24fa:	ldr	r3, [pc, #32]	; (251c <usb_midi_flush_output+0x24>)
    24fc:	ldrb	r4, [r3, #0]
    24fe:	cbnz	r4, 250a <usb_midi_flush_output+0x12>
    2500:	ldr	r5, [pc, #28]	; (2520 <usb_midi_flush_output+0x28>)
    2502:	ldr	r1, [r5, #0]
    2504:	cbz	r1, 250a <usb_midi_flush_output+0x12>
    2506:	ldrh	r3, [r1, #2]
    2508:	cbnz	r3, 250c <usb_midi_flush_output+0x14>
    250a:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    250c:	lsls	r3, r3, #2
    250e:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2510:	movs	r0, #4
    2512:	bl	2b3c <usb_tx>
		tx_packet = NULL;
    2516:	str	r4, [r5, #0]
    2518:	pop	{r3, r4, r5, pc}
    251a:	nop
    251c:	.word	0x1fff1898
    2520:	.word	0x1fff18c4

00002524 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2524:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2528:	ldr	r6, [pc, #692]	; (27e0 <usb_midi_read+0x2bc>)
    252a:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    252c:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    252e:	cmp	r3, #0
    2530:	beq.w	2658 <usb_midi_read+0x134>
    2534:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2536:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2538:	lsrs	r1, r2, #2
    253a:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    253e:	adds	r2, #4
	if (index < rx_packet->len) {
    2540:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2542:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2544:	bcs.n	25cc <usb_midi_read+0xa8>
		rx_packet->index = index;
    2546:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2548:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    254c:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2550:	ldr	r1, [pc, #656]	; (27e4 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2552:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2556:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    255a:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    255e:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2560:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2564:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2566:	bls.n	259e <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2568:	subs	r3, r6, #2
    256a:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    256c:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2570:	bls.n	2610 <usb_midi_read+0xec>
    2572:	cmp	r6, #5
    2574:	beq.n	2608 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2576:	cmp	r6, #4
    2578:	beq.w	28c4 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    257c:	subs	r3, r6, #5
    257e:	cmp	r3, #2
    2580:	bls.n	2682 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    2582:	cmp	r6, #15
    2584:	bne.n	25a4 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    2586:	cmp	r0, #247	; 0xf7
    2588:	bhi.n	2610 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    258a:	cmp	r0, #240	; 0xf0
    258c:	beq.n	2594 <usb_midi_read+0x70>
    258e:	ldr	r3, [pc, #600]	; (27e8 <usb_midi_read+0x2c4>)
    2590:	ldrh	r3, [r3, #0]
    2592:	cbz	r3, 25a4 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2594:	bl	2414 <sysex_byte>
		}
	}
	return 0;
    2598:	movs	r0, #0
    259a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    259e:	cbz	r7, 25aa <usb_midi_read+0x86>
    25a0:	cmp	r5, r7
    25a2:	beq.n	25aa <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    25a4:	movs	r0, #0
    25a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    25aa:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    25ac:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    25b0:	beq.w	26c2 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    25b4:	cmp	r6, #9
    25b6:	beq.n	25dc <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    25b8:	cmp	r6, #10
    25ba:	bne.w	26e6 <usb_midi_read+0x1c2>
    25be:	cmp	r3, #10
    25c0:	bne.n	25a4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    25c2:	ldr	r3, [pc, #552]	; (27ec <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    25c4:	ldr	r2, [pc, #552]	; (27f0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    25c6:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    25c8:	movs	r1, #160	; 0xa0
    25ca:	b.n	26d0 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    25cc:	mov	r0, r3
    25ce:	bl	29a0 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    25d2:	movs	r0, #5
    25d4:	bl	29ec <usb_rx>
    25d8:	str	r0, [r6, #0]
    25da:	b.n	2548 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    25dc:	cmp	r3, #9
    25de:	bne.n	25a4 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    25e0:	lsrs	r7, r4, #24
    25e2:	beq.w	28dc <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    25e6:	ldr	r3, [pc, #524]	; (27f4 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    25e8:	ldr	r2, [pc, #516]	; (27f0 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    25ea:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    25ec:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    25ee:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    25f2:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    25f4:	uxtb	r5, r5
    25f6:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    25f8:	cmp	r3, #0
    25fa:	beq.w	2738 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    25fe:	mov	r2, r4
    2600:	mov	r1, r6
    2602:	mov	r0, r5
    2604:	blx	r3
    2606:	b.n	2738 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2608:	cmp	r0, #240	; 0xf0
    260a:	bls.n	2694 <usb_midi_read+0x170>
    260c:	cmp	r0, #247	; 0xf7
    260e:	beq.n	2694 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    2610:	subs	r0, #241	; 0xf1
    2612:	cmp	r0, #14
    2614:	bhi.n	25a4 <usb_midi_read+0x80>
    2616:	add	r3, pc, #4	; (adr r3, 261c <usb_midi_read+0xf8>)
    2618:	ldr.w	pc, [r3, r0, lsl #2]
    261c:	.word	0x000027d3
    2620:	.word	0x000027b7
    2624:	.word	0x000027a5
    2628:	.word	0x000025a5
    262c:	.word	0x000025a5
    2630:	.word	0x00002797
    2634:	.word	0x000025a5
    2638:	.word	0x00002877
    263c:	.word	0x000025a5
    2640:	.word	0x00002841
    2644:	.word	0x0000285b
    2648:	.word	0x0000277f
    264c:	.word	0x000025a5
    2650:	.word	0x00002767
    2654:	.word	0x0000274b
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2658:	ldr	r3, [pc, #412]	; (27f8 <usb_midi_read+0x2d4>)
    265a:	ldrb	r3, [r3, #0]
    265c:	cmp	r3, #0
    265e:	beq.n	25a4 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2660:	movs	r0, #5
    2662:	bl	29ec <usb_rx>
    2666:	mov	r3, r0
    2668:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    266a:	cmp	r0, #0
    266c:	beq.n	25a4 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    266e:	ldrh	r5, [r0, #0]
    2670:	cmp	r5, #0
    2672:	bne.w	2536 <usb_midi_read+0x12>
			usb_free(rx_packet);
    2676:	bl	29a0 <usb_free>
			rx_packet = NULL;
    267a:	str	r5, [r6, #0]
			return 0;
    267c:	mov	r0, r5
    267e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    2682:	bl	2414 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    2686:	ubfx	r0, r4, #16, #8
    268a:	bl	2414 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    268e:	cmp	r6, #7
    2690:	bne.n	2698 <usb_midi_read+0x174>
    2692:	lsrs	r0, r4, #24
    2694:	bl	2414 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    2698:	ldr	r3, [pc, #332]	; (27e8 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    269a:	ldr	r2, [pc, #352]	; (27fc <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    269c:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    269e:	ldr	r0, [pc, #352]	; (2800 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    26a0:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    26a2:	ldr	r5, [pc, #352]	; (2804 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    26a4:	ldr	r2, [pc, #328]	; (27f0 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    26a6:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    26a8:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    26aa:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    26ac:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    26ae:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    26b0:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    26b2:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    26b4:	cbz	r4, 26fa <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    26b6:	movs	r2, #1
    26b8:	ldr	r0, [pc, #332]	; (2808 <usb_midi_read+0x2e4>)
    26ba:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    26bc:	movs	r0, #1
    26be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    26c2:	cmp	r3, #8
    26c4:	bne.w	25a4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    26c8:	ldr	r3, [pc, #320]	; (280c <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    26ca:	ldr	r2, [pc, #292]	; (27f0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    26cc:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    26ce:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    26d0:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    26d4:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    26d6:	uxtb	r5, r5
    26d8:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    26da:	cbz	r3, 2738 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    26dc:	mov	r0, r5
    26de:	mov	r2, r4
    26e0:	mov	r1, r6
    26e2:	blx	r3
    26e4:	b.n	2738 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    26e6:	cmp	r6, #11
    26e8:	bne.n	270e <usb_midi_read+0x1ea>
    26ea:	cmp	r3, #11
    26ec:	bne.w	25a4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    26f0:	ldr	r3, [pc, #284]	; (2810 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    26f2:	ldr	r2, [pc, #252]	; (27f0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    26f4:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    26f6:	movs	r1, #176	; 0xb0
    26f8:	b.n	26d0 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    26fa:	ldr	r3, [pc, #280]	; (2814 <usb_midi_read+0x2f0>)
    26fc:	ldr	r3, [r3, #0]
    26fe:	cmp	r3, #0
    2700:	beq.w	28fa <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    2704:	ldr	r0, [pc, #256]	; (2808 <usb_midi_read+0x2e4>)
    2706:	blx	r3
		}
		return 1;
    2708:	movs	r0, #1
    270a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    270e:	cmp	r6, #12
    2710:	bne.w	2914 <usb_midi_read+0x3f0>
    2714:	cmp	r3, #12
    2716:	bne.w	25a4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    271a:	ldr	r3, [pc, #252]	; (2818 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    271c:	ldr	r2, [pc, #208]	; (27f0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    271e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2720:	movs	r1, #192	; 0xc0
    2722:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2724:	uxtb	r5, r5
    2726:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    272a:	cmp	r3, #0
    272c:	beq.w	28c0 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2730:	mov	r0, r5
    2732:	mov	r1, r6
    2734:	lsrs	r4, r4, #24
    2736:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2738:	ldr	r1, [pc, #224]	; (281c <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    273a:	ldr	r2, [pc, #196]	; (2800 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    273c:	ldr	r3, [pc, #196]	; (2804 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    273e:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2740:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    2742:	strb	r4, [r3, #0]
		return 1;
    2744:	movs	r0, #1
    2746:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    274a:	ldr	r3, [pc, #212]	; (2820 <usb_midi_read+0x2fc>)
    274c:	ldr	r3, [r3, #0]
    274e:	cmp	r3, #0
    2750:	beq.w	2900 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2754:	blx	r3
    2756:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    275a:	ldr	r3, [pc, #148]	; (27f0 <usb_midi_read+0x2cc>)
    275c:	uxtb	r5, r5
    275e:	lsrs	r4, r4, #24
    2760:	strb.w	r8, [r3]
		goto return_message;
    2764:	b.n	2738 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    2766:	ldr	r3, [pc, #188]	; (2824 <usb_midi_read+0x300>)
    2768:	ldr	r3, [r3, #0]
    276a:	cmp	r3, #0
    276c:	bne.n	2754 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    276e:	ldr	r3, [pc, #184]	; (2828 <usb_midi_read+0x304>)
    2770:	ldr	r3, [r3, #0]
    2772:	cbz	r3, 279e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2774:	movs	r0, #254	; 0xfe
    2776:	blx	r3
    2778:	ubfx	r6, r4, #16, #8
    277c:	b.n	275a <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    277e:	ldr	r3, [pc, #172]	; (282c <usb_midi_read+0x308>)
    2780:	ldr	r3, [r3, #0]
    2782:	cmp	r3, #0
    2784:	bne.n	2754 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    2786:	ldr	r3, [pc, #160]	; (2828 <usb_midi_read+0x304>)
    2788:	ldr	r3, [r3, #0]
    278a:	cbz	r3, 279e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    278c:	movs	r0, #252	; 0xfc
    278e:	blx	r3
    2790:	ubfx	r6, r4, #16, #8
    2794:	b.n	275a <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    2796:	ldr	r3, [pc, #152]	; (2830 <usb_midi_read+0x30c>)
    2798:	ldr	r3, [r3, #0]
    279a:	cmp	r3, #0
    279c:	bne.n	2754 <usb_midi_read+0x230>
    279e:	ubfx	r6, r4, #16, #8
    27a2:	b.n	275a <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    27a4:	ldr	r3, [pc, #140]	; (2834 <usb_midi_read+0x310>)
    27a6:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    27a8:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    27ac:	cmp	r3, #0
    27ae:	beq.n	275a <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    27b0:	mov	r0, r6
    27b2:	blx	r3
    27b4:	b.n	275a <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    27b6:	ldr	r3, [pc, #128]	; (2838 <usb_midi_read+0x314>)
    27b8:	ldr	r2, [r3, #0]
    27ba:	cmp	r2, #0
    27bc:	beq.n	279e <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    27be:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    27c0:	lsrs	r3, r4, #17
    27c2:	and.w	r0, r6, #127	; 0x7f
    27c6:	and.w	r3, r3, #16256	; 0x3f80
    27ca:	orrs	r0, r3
    27cc:	uxtb	r6, r6
    27ce:	blx	r2
    27d0:	b.n	275a <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    27d2:	ldr	r3, [pc, #104]	; (283c <usb_midi_read+0x318>)
    27d4:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    27d6:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    27da:	cmp	r3, #0
    27dc:	bne.n	27b0 <usb_midi_read+0x28c>
    27de:	b.n	275a <usb_midi_read+0x236>
    27e0:	.word	0x1fff18d0
    27e4:	.word	0x1fff1d42
    27e8:	.word	0x1fff1d3e
    27ec:	.word	0x1fff18ac
    27f0:	.word	0x1fff1d3c
    27f4:	.word	0x1fff18e0
    27f8:	.word	0x1fff19d4
    27fc:	.word	0x1fff18a8
    2800:	.word	0x1fff1d40
    2804:	.word	0x1fff1d41
    2808:	.word	0x1fff1d44
    280c:	.word	0x1fff18d8
    2810:	.word	0x1fff18dc
    2814:	.word	0x1fff18c0
    2818:	.word	0x1fff189c
    281c:	.word	0x1fff1d43
    2820:	.word	0x1fff1888
    2824:	.word	0x1fff188c
    2828:	.word	0x1fff1890
    282c:	.word	0x1fff18cc
    2830:	.word	0x1fff18bc
    2834:	.word	0x1fff18d4
    2838:	.word	0x1fff18a4
    283c:	.word	0x1fff18b8
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2840:	ldr	r3, [pc, #252]	; (2940 <usb_midi_read+0x41c>)
    2842:	ldr	r3, [r3, #0]
    2844:	cmp	r3, #0
    2846:	bne.n	2754 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2848:	ldr	r3, [pc, #248]	; (2944 <usb_midi_read+0x420>)
    284a:	ldr	r3, [r3, #0]
    284c:	cmp	r3, #0
    284e:	beq.n	279e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2850:	movs	r0, #250	; 0xfa
    2852:	blx	r3
    2854:	ubfx	r6, r4, #16, #8
    2858:	b.n	275a <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    285a:	ldr	r3, [pc, #236]	; (2948 <usb_midi_read+0x424>)
    285c:	ldr	r3, [r3, #0]
    285e:	cmp	r3, #0
    2860:	bne.w	2754 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2864:	ldr	r3, [pc, #220]	; (2944 <usb_midi_read+0x420>)
    2866:	ldr	r3, [r3, #0]
    2868:	cmp	r3, #0
    286a:	beq.n	279e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    286c:	movs	r0, #251	; 0xfb
    286e:	blx	r3
    2870:	ubfx	r6, r4, #16, #8
    2874:	b.n	275a <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2876:	ldr	r3, [pc, #212]	; (294c <usb_midi_read+0x428>)
    2878:	ldr	r3, [r3, #0]
    287a:	cmp	r3, #0
    287c:	bne.w	2754 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2880:	ldr	r3, [pc, #192]	; (2944 <usb_midi_read+0x420>)
    2882:	ldr	r3, [r3, #0]
    2884:	cmp	r3, #0
    2886:	beq.n	279e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2888:	movs	r0, #248	; 0xf8
    288a:	blx	r3
    288c:	ubfx	r6, r4, #16, #8
    2890:	b.n	275a <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2892:	cmp	r3, #14
    2894:	bne.w	25a4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2898:	ldr	r2, [pc, #180]	; (2950 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    289a:	ldr	r3, [pc, #184]	; (2954 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    289c:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    289e:	movs	r1, #224	; 0xe0
    28a0:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    28a2:	cmp	r2, #0
    28a4:	beq.n	2936 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    28a6:	lsrs	r6, r4, #16
    28a8:	lsrs	r1, r4, #17
    28aa:	and.w	r3, r6, #127	; 0x7f
    28ae:	and.w	r1, r1, #16256	; 0x3f80
    28b2:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    28b4:	uxtb	r5, r5
    28b6:	sub.w	r1, r1, #8192	; 0x2000
    28ba:	mov	r0, r5
    28bc:	blx	r2
    28be:	uxtb	r6, r6
    28c0:	lsrs	r4, r4, #24
    28c2:	b.n	2738 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    28c4:	bl	2414 <sysex_byte>
		sysex_byte(n >> 16);
    28c8:	ubfx	r0, r4, #16, #8
    28cc:	bl	2414 <sysex_byte>
		sysex_byte(n >> 24);
    28d0:	lsrs	r0, r4, #24
    28d2:	bl	2414 <sysex_byte>
		return 0;
    28d6:	movs	r0, #0
    28d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    28dc:	ldr	r3, [pc, #120]	; (2958 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    28de:	ldr	r2, [pc, #116]	; (2954 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    28e0:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    28e2:	movs	r1, #128	; 0x80
    28e4:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    28e6:	uxtb	r5, r5
    28e8:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    28ec:	cbz	r3, 2910 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    28ee:	mov	r1, r6
    28f0:	mov	r0, r5
    28f2:	mov	r2, r7
    28f4:	blx	r3
    28f6:	mov	r4, r7
    28f8:	b.n	2738 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    28fa:	movs	r0, #1
    28fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2900:	ldr	r3, [pc, #64]	; (2944 <usb_midi_read+0x420>)
    2902:	ldr	r3, [r3, #0]
    2904:	cmp	r3, #0
    2906:	beq.w	279e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    290a:	movs	r0, #255	; 0xff
    290c:	blx	r3
    290e:	b.n	279e <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2910:	mov	r4, r3
    2912:	b.n	2738 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2914:	cmp	r6, #13
    2916:	bne.n	2892 <usb_midi_read+0x36e>
    2918:	cmp	r3, #13
    291a:	bne.w	25a4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    291e:	ldr	r3, [pc, #60]	; (295c <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2920:	ldr	r2, [pc, #48]	; (2954 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2922:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2924:	movs	r1, #208	; 0xd0
    2926:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2928:	uxtb	r5, r5
    292a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    292e:	cmp	r3, #0
    2930:	bne.w	2730 <usb_midi_read+0x20c>
    2934:	b.n	28c0 <usb_midi_read+0x39c>
    2936:	ubfx	r6, r4, #16, #8
    293a:	uxtb	r5, r5
    293c:	lsrs	r4, r4, #24
    293e:	b.n	2738 <usb_midi_read+0x214>
    2940:	.word	0x1fff18b4
    2944:	.word	0x1fff1890
    2948:	.word	0x1fff1894
    294c:	.word	0x1fff1884
    2950:	.word	0x1fff18a0
    2954:	.word	0x1fff1d3c
    2958:	.word	0x1fff18d8
    295c:	.word	0x1fff18b0

00002960 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2960:	cpsid	i
	avail = usb_buffer_available;
    2962:	ldr	r0, [pc, #52]	; (2998 <usb_malloc+0x38>)
    2964:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2966:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    296a:	cmp	r3, #29
    296c:	bgt.n	2990 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    296e:	mov.w	r1, #2147483648	; 0x80000000
    2972:	lsrs	r1, r3
    2974:	bic.w	r2, r2, r1
    2978:	str	r2, [r0, #0]
	__enable_irq();
    297a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    297c:	ldr	r0, [pc, #28]	; (299c <usb_malloc+0x3c>)
    297e:	add.w	r3, r3, r3, lsl #3
    2982:	lsls	r3, r3, #3
    2984:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2986:	movs	r1, #0
    2988:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    298a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    298c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    298e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2990:	cpsie	i
		return NULL;
    2992:	movs	r0, #0
    2994:	bx	lr
    2996:	nop
    2998:	.word	0x1fff0c6c
    299c:	.word	0x1fff03d0

000029a0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    29a0:	ldr	r3, [pc, #52]	; (29d8 <usb_free+0x38>)
    29a2:	ldr	r2, [pc, #56]	; (29dc <usb_free+0x3c>)
    29a4:	subs	r3, r0, r3
    29a6:	umull	r2, r3, r2, r3
    29aa:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    29ac:	cmp	r3, #29
    29ae:	bhi.n	29ca <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    29b0:	ldr	r2, [pc, #44]	; (29e0 <usb_free+0x40>)
    29b2:	ldrb	r2, [r2, #0]
    29b4:	cbnz	r2, 29cc <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    29b6:	cpsid	i
	usb_buffer_available |= mask;
    29b8:	ldr	r0, [pc, #40]	; (29e4 <usb_free+0x44>)
    29ba:	mov.w	r1, #2147483648	; 0x80000000
    29be:	ldr	r2, [r0, #0]
    29c0:	lsr.w	r3, r1, r3
    29c4:	orrs	r2, r3
    29c6:	str	r2, [r0, #0]
	__enable_irq();
    29c8:	cpsie	i
    29ca:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    29cc:	ldr	r2, [pc, #24]	; (29e8 <usb_free+0x48>)
    29ce:	ldrb	r2, [r2, #0]
    29d0:	cmp	r2, #0
    29d2:	beq.n	29b6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    29d4:	b.w	2a54 <usb_rx_memory>
    29d8:	.word	0x1fff03d0
    29dc:	.word	0x38e38e39
    29e0:	.word	0x1fff19c9
    29e4:	.word	0x1fff0c6c
    29e8:	.word	0x1fff19d4

000029ec <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    29ec:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    29ee:	cmp	r3, #4
    29f0:	bhi.n	2a1c <usb_rx+0x30>
	__disable_irq();
    29f2:	cpsid	i
	ret = rx_first[endpoint];
    29f4:	ldr	r1, [pc, #40]	; (2a20 <usb_rx+0x34>)
    29f6:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    29fa:	cbz	r0, 2a18 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    29fc:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    29fe:	ldr	r4, [pc, #36]	; (2a24 <usb_rx+0x38>)
    2a00:	ldrh	r5, [r0, #0]
    2a02:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2a06:	ldr	r6, [r0, #4]
    2a08:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2a0c:	subs	r2, r2, r5
    2a0e:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2a12:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2a14:	pop	{r4, r5, r6}
    2a16:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2a18:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2a1a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2a1c:	movs	r0, #0
    2a1e:	bx	lr
    2a20:	.word	0x1fff1940
    2a24:	.word	0x1fff1e68

00002a28 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2a28:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2a2a:	cmp	r0, #4
    2a2c:	bhi.n	2a46 <usb_tx_packet_count+0x1e>
	__disable_irq();
    2a2e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2a30:	ldr	r3, [pc, #28]	; (2a50 <usb_tx_packet_count+0x28>)
    2a32:	ldr.w	r3, [r3, r0, lsl #2]
    2a36:	cbz	r3, 2a4a <usb_tx_packet_count+0x22>
    2a38:	movs	r0, #0
    2a3a:	ldr	r3, [r3, #4]
    2a3c:	adds	r0, #1
    2a3e:	cmp	r3, #0
    2a40:	bne.n	2a3a <usb_tx_packet_count+0x12>
	__enable_irq();
    2a42:	cpsie	i
	return count;
    2a44:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2a46:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2a48:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2a4a:	mov	r0, r3
    2a4c:	b.n	2a42 <usb_tx_packet_count+0x1a>
    2a4e:	nop
    2a50:	.word	0x1fff1998

00002a54 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2a54:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2a56:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2a58:	ldr	r2, [pc, #204]	; (2b28 <usb_rx_memory+0xd4>)
    2a5a:	ldrb	r3, [r2, #0]
    2a5c:	lsls	r3, r3, #28
    2a5e:	bpl.n	2a6e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2a60:	ldr	r3, [pc, #200]	; (2b2c <usb_rx_memory+0xd8>)
    2a62:	ldr	r1, [r3, #32]
    2a64:	cmp	r1, #0
    2a66:	beq.n	2af0 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2a68:	ldr	r1, [r3, #40]	; 0x28
    2a6a:	cmp	r1, #0
    2a6c:	beq.n	2b0c <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2a6e:	ldrb	r3, [r2, #1]
    2a70:	lsls	r5, r3, #28
    2a72:	bpl.n	2a82 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2a74:	ldr	r3, [pc, #180]	; (2b2c <usb_rx_memory+0xd8>)
    2a76:	ldr	r1, [r3, #64]	; 0x40
    2a78:	cmp	r1, #0
    2a7a:	beq.n	2b18 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2a7c:	ldr	r1, [r3, #72]	; 0x48
    2a7e:	cmp	r1, #0
    2a80:	beq.n	2b10 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2a82:	ldrb	r3, [r2, #2]
    2a84:	lsls	r4, r3, #28
    2a86:	bpl.n	2a96 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2a88:	ldr	r3, [pc, #160]	; (2b2c <usb_rx_memory+0xd8>)
    2a8a:	ldr	r1, [r3, #96]	; 0x60
    2a8c:	cmp	r1, #0
    2a8e:	beq.n	2b1c <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2a90:	ldr	r1, [r3, #104]	; 0x68
    2a92:	cmp	r1, #0
    2a94:	beq.n	2b14 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2a96:	ldrb	r3, [r2, #3]
    2a98:	lsls	r1, r3, #28
    2a9a:	bpl.n	2aac <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2a9c:	ldr	r3, [pc, #140]	; (2b2c <usb_rx_memory+0xd8>)
    2a9e:	ldr.w	r1, [r3, #128]	; 0x80
    2aa2:	cmp	r1, #0
    2aa4:	beq.n	2b24 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2aa6:	ldr.w	r1, [r3, #136]	; 0x88
    2aaa:	cbz	r1, 2ad2 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2aac:	ldrb	r3, [r2, #4]
    2aae:	lsls	r3, r3, #28
    2ab0:	bpl.n	2ac4 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2ab2:	ldr	r3, [pc, #120]	; (2b2c <usb_rx_memory+0xd8>)
    2ab4:	ldr.w	r2, [r3, #160]	; 0xa0
    2ab8:	cmp	r2, #0
    2aba:	beq.n	2b20 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2abc:	ldr.w	r2, [r3, #168]	; 0xa8
    2ac0:	movs	r4, #21
    2ac2:	cbz	r2, 2ad4 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2ac4:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2ac6:	ldr	r3, [pc, #104]	; (2b30 <usb_rx_memory+0xdc>)
    2ac8:	movs	r2, #0
    2aca:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2acc:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2ace:	b.w	29a0 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2ad2:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2ad4:	ldr	r1, [pc, #88]	; (2b30 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2ad6:	ldr	r5, [pc, #92]	; (2b34 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2ad8:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2ada:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2ade:	add.w	r3, r3, r4, lsl #3
    2ae2:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2ae4:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2ae6:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2ae8:	strb	r2, [r1, #0]
				__enable_irq();
    2aea:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2aec:	pop	{r4, r5}
    2aee:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2af0:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2af2:	ldr	r4, [pc, #60]	; (2b30 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2af4:	ldr	r5, [pc, #64]	; (2b38 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2af6:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2af8:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2afc:	add.w	r3, r3, r2, lsl #3
    2b00:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2b02:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2b04:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2b06:	strb	r2, [r4, #0]
				__enable_irq();
    2b08:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2b0a:	b.n	2aec <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b0c:	movs	r4, #5
    2b0e:	b.n	2ad4 <usb_rx_memory+0x80>
    2b10:	movs	r4, #9
    2b12:	b.n	2ad4 <usb_rx_memory+0x80>
    2b14:	movs	r4, #13
    2b16:	b.n	2ad4 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b18:	movs	r2, #8
    2b1a:	b.n	2af2 <usb_rx_memory+0x9e>
    2b1c:	movs	r2, #12
    2b1e:	b.n	2af2 <usb_rx_memory+0x9e>
    2b20:	movs	r2, #20
    2b22:	b.n	2af2 <usb_rx_memory+0x9e>
    2b24:	movs	r2, #16
    2b26:	b.n	2af2 <usb_rx_memory+0x9e>
    2b28:	.word	0x00004d94
    2b2c:	.word	0x1fff0000
    2b30:	.word	0x1fff19c9
    2b34:	.word	0x004000c8
    2b38:	.word	0x00400088

00002b3c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2b3c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2b3e:	cmp	r3, #4
    2b40:	bhi.n	2b7e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2b42:	ldr	r2, [pc, #108]	; (2bb0 <usb_tx+0x74>)
    2b44:	lsls	r0, r0, #5
    2b46:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2b4a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2b4c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2b4e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2b50:	ldr	r4, [pc, #96]	; (2bb4 <usb_tx+0x78>)
    2b52:	ldrb	r2, [r4, r3]
    2b54:	cmp	r2, #3
    2b56:	bhi.n	2b90 <usb_tx+0x54>
    2b58:	tbb	[pc, r2]
    2b5c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2b60:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2b62:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2b64:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2b66:	tst.w	r0, #8
    2b6a:	ite	ne
    2b6c:	movne	r3, #200	; 0xc8
    2b6e:	moveq	r3, #136	; 0x88
    2b70:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2b74:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2b76:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2b78:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2b7a:	cpsie	i
}
    2b7c:	pop	{r4, r5}
    2b7e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2b80:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2b82:	movs	r2, #2
		break;
    2b84:	b.n	2b62 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2b86:	movs	r2, #5
    2b88:	b.n	2b62 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2b8a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2b8c:	movs	r2, #4
		break;
    2b8e:	b.n	2b62 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2b90:	ldr	r2, [pc, #36]	; (2bb8 <usb_tx+0x7c>)
    2b92:	ldr.w	r0, [r2, r3, lsl #2]
    2b96:	cbz	r0, 2ba8 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2b98:	ldr	r2, [pc, #32]	; (2bbc <usb_tx+0x80>)
    2b9a:	ldr.w	r0, [r2, r3, lsl #2]
    2b9e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2ba0:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2ba4:	cpsie	i
		return;
    2ba6:	b.n	2b7c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2ba8:	str.w	r1, [r2, r3, lsl #2]
    2bac:	ldr	r2, [pc, #12]	; (2bbc <usb_tx+0x80>)
    2bae:	b.n	2ba0 <usb_tx+0x64>
    2bb0:	.word	0x1fff0000
    2bb4:	.word	0x1fff19d8
    2bb8:	.word	0x1fff1998
    2bbc:	.word	0x1fff19ac

00002bc0 <usb_isr>:
}



void usb_isr(void)
{
    2bc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2bc4:	ldr.w	fp, [pc, #776]	; 2ed0 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2bc8:	ldr.w	sl, [pc, #776]	; 2ed4 <usb_isr+0x314>
}



void usb_isr(void)
{
    2bcc:	sub	sp, #28
    2bce:	b.n	2c5a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2bd0:	ldr	r7, [pc, #680]	; (2e7c <usb_isr+0x2bc>)
    2bd2:	mov.w	r8, r3, lsr #2
    2bd6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2bda:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2bdc:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2be0:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2be4:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2be6:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2bea:	and.w	r4, r3, #255	; 0xff
    2bee:	cmp	r3, #0
    2bf0:	bne.w	2df4 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2bf4:	ldr.w	r3, [r7, r8, lsl #3]
    2bf8:	lsrs	r3, r3, #16
    2bfa:	uxth	r1, r3
    2bfc:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2c00:	cmp	r3, #0
    2c02:	beq.w	2de2 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2c06:	ldr	r3, [pc, #632]	; (2e80 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2c08:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2c0c:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2c10:	ldr.w	r2, [r3, r6, lsl #2]
    2c14:	cmp	r2, #0
    2c16:	beq.w	3084 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2c1a:	ldr	r5, [pc, #616]	; (2e84 <usb_isr+0x2c4>)
    2c1c:	ldr.w	r3, [r5, r6, lsl #2]
    2c20:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2c22:	ldr	r4, [pc, #612]	; (2e88 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2c24:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2c28:	ldrh.w	r3, [r4, r6, lsl #1]
    2c2c:	add	r1, r3
    2c2e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2c32:	bl	2960 <usb_malloc>
					if (packet) {
    2c36:	cmp	r0, #0
    2c38:	beq.w	3076 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2c3c:	ldr	r2, [pc, #588]	; (2e8c <usb_isr+0x2cc>)
    2c3e:	ldr	r3, [pc, #592]	; (2e90 <usb_isr+0x2d0>)
    2c40:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2c44:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2c48:	it	ne
    2c4a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2c4c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2c50:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2c54:	movs	r3, #8
    2c56:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2c5a:	ldrb.w	r4, [fp]
    2c5e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2c60:	lsls	r0, r4, #29
    2c62:	bpl.n	2c9e <usb_isr+0xde>
		if (usb_configuration) {
    2c64:	ldr	r3, [pc, #556]	; (2e94 <usb_isr+0x2d4>)
    2c66:	ldrb	r3, [r3, #0]
    2c68:	cbz	r3, 2c98 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2c6a:	ldr	r1, [pc, #556]	; (2e98 <usb_isr+0x2d8>)
    2c6c:	ldrb	r2, [r1, #0]
			if (t) {
    2c6e:	and.w	r3, r2, #255	; 0xff
    2c72:	cbz	r2, 2c7e <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2c74:	subs	r3, #1
    2c76:	uxtb	r3, r3
    2c78:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2c7a:	cbnz	r3, 2c7e <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2c7c:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2c7e:	ldr	r1, [pc, #540]	; (2e9c <usb_isr+0x2dc>)
    2c80:	ldrb	r2, [r1, #0]
			if (t) {
    2c82:	and.w	r3, r2, #255	; 0xff
    2c86:	cbz	r2, 2c94 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2c88:	subs	r3, #1
    2c8a:	uxtb	r3, r3
    2c8c:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2c8e:	cmp	r3, #0
    2c90:	beq.w	3022 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2c94:	bl	24f8 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2c98:	movs	r3, #4
    2c9a:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2c9e:	and.w	r3, r4, #8
    2ca2:	and.w	r2, r3, #255	; 0xff
    2ca6:	cmp	r3, #0
    2ca8:	beq.w	2e3c <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2cac:	ldrb.w	r3, [sl]
    2cb0:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2cb2:	lsrs	r6, r3, #4
    2cb4:	bne.n	2bd0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2cb6:	lsrs	r4, r3, #2
    2cb8:	ldr.w	r9, [pc, #448]	; 2e7c <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2cbc:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2cc0:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2cc4:	ubfx	r2, r2, #2, #4
    2cc8:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2cca:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2ccc:	cmp	r2, #12
    2cce:	bhi.w	2dda <usb_isr+0x21a>
    2cd2:	tbb	[pc, r2]
    2cd6:	.short	0x7878
    2cd8:	.word	0x82828282
    2cdc:	.word	0x82438282
    2ce0:	.short	0x8282
    2ce2:	.byte	0x07
    2ce3:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2ce4:	ldr	r0, [r1, #0]
    2ce6:	ldr	r5, [pc, #440]	; (2ea0 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2ce8:	ldr	r3, [pc, #416]	; (2e8c <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2cea:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2cec:	ldr	r7, [pc, #436]	; (2ea4 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2cee:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2cf2:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2cf4:	ldr	r6, [pc, #432]	; (2ea8 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2cf6:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2cf8:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2cfc:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2cfe:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2d00:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2d02:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2d06:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2d08:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2d0c:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2d10:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2d12:	bhi.w	2ed8 <usb_isr+0x318>
    2d16:	cmp.w	r1, #1664	; 0x680
    2d1a:	bcs.w	3344 <usb_isr+0x784>
    2d1e:	cmp.w	r1, #258	; 0x102
    2d22:	beq.w	30f2 <usb_isr+0x532>
    2d26:	bhi.w	30bc <usb_isr+0x4fc>
    2d2a:	cmp	r1, #128	; 0x80
    2d2c:	beq.w	3378 <usb_isr+0x7b8>
    2d30:	cmp	r1, #130	; 0x82
    2d32:	bne.w	30fe <usb_isr+0x53e>
    2d36:	ldrh	r1, [r5, #4]
    2d38:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2d3c:	cmp	r1, #5
    2d3e:	bhi.w	30fe <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2d42:	ldr	r3, [pc, #360]	; (2eac <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2d44:	ldr	r4, [pc, #360]	; (2eb0 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2d46:	lsls	r1, r1, #2
    2d48:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2d4a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2d4c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2d4e:	ldrb	r2, [r3, #0]
    2d50:	lsls	r3, r2, #30
    2d52:	bpl.w	3488 <usb_isr+0x8c8>
    2d56:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2d58:	movs	r0, #2
    2d5a:	b.n	3186 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2d5c:	ldr	r7, [pc, #324]	; (2ea4 <usb_isr+0x2e4>)
    2d5e:	ldr	r2, [r7, #0]
		if (data) {
    2d60:	cbz	r2, 2db0 <usb_isr+0x1f0>
			size = ep0_tx_len;
    2d62:	ldr	r3, [pc, #336]	; (2eb4 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d64:	ldr	r6, [pc, #320]	; (2ea8 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d66:	ldr	r1, [pc, #336]	; (2eb8 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2d68:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d6a:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d6c:	ldrb	r5, [r1, #0]
    2d6e:	cmp	r0, #64	; 0x40
    2d70:	mov	lr, r0
    2d72:	orr.w	r8, r5, #2
    2d76:	it	cs
    2d78:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d7c:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2d7e:	eor.w	r4, r4, #1
    2d82:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2d84:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d88:	ite	eq
    2d8a:	moveq	r4, #136	; 0x88
    2d8c:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d8e:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2d92:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2d94:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d98:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d9c:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2d9e:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2da0:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2da4:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2da6:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2da8:	cmp	r0, #0
    2daa:	beq.w	2f1a <usb_isr+0x35a>
    2dae:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2db0:	ldr	r3, [pc, #236]	; (2ea0 <usb_isr+0x2e0>)
    2db2:	ldrh	r2, [r3, #0]
    2db4:	cmp.w	r2, #1280	; 0x500
    2db8:	bne.n	2dda <usb_isr+0x21a>
			setup.bRequest = 0;
    2dba:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2dbc:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2dbe:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2dc0:	ldr	r3, [pc, #248]	; (2ebc <usb_isr+0x2fc>)
    2dc2:	strb	r2, [r3, #0]
    2dc4:	b.n	2dda <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2dc6:	ldr	r2, [pc, #216]	; (2ea0 <usb_isr+0x2e0>)
    2dc8:	ldrh	r0, [r2, #0]
    2dca:	movw	r2, #8225	; 0x2021
    2dce:	cmp	r0, r2
    2dd0:	beq.w	2f24 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2dd4:	ldr	r2, [pc, #180]	; (2e8c <usb_isr+0x2cc>)
    2dd6:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2dda:	ldr	r2, [pc, #228]	; (2ec0 <usb_isr+0x300>)
    2ddc:	movs	r3, #1
    2dde:	strb	r3, [r2, #0]
    2de0:	b.n	2c54 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2de2:	ldr	r2, [pc, #168]	; (2e8c <usb_isr+0x2cc>)
    2de4:	ldr	r3, [pc, #168]	; (2e90 <usb_isr+0x2d0>)
    2de6:	tst.w	r9, #8
    2dea:	it	ne
    2dec:	movne	r3, r2
    2dee:	str.w	r3, [r7, r8, lsl #3]
    2df2:	b.n	2c54 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2df4:	bl	29a0 <usb_free>
				packet = tx_first[endpoint];
    2df8:	ldr	r2, [pc, #200]	; (2ec4 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2dfa:	ldr	r1, [pc, #204]	; (2ec8 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2dfc:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2e00:	cmp	r3, #0
    2e02:	beq.w	308c <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2e06:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2e08:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2e0a:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2e0e:	add.w	r2, r3, #8
    2e12:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2e16:	cmp	r4, #3
    2e18:	bhi.n	2e26 <usb_isr+0x266>
    2e1a:	tbb	[pc, r4]
    2e1e:	.short	0x022c
    2e20:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2e22:	movs	r2, #2
    2e24:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2e26:	ldrh	r2, [r3, #0]
    2e28:	tst.w	r9, #8
    2e2c:	ite	eq
    2e2e:	moveq	r3, #136	; 0x88
    2e30:	movne	r3, #200	; 0xc8
    2e32:	orr.w	r3, r3, r2, lsl #16
    2e36:	str.w	r3, [r7, r8, lsl #3]
    2e3a:	b.n	2c54 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2e3c:	lsls	r0, r4, #31
    2e3e:	bmi.w	3028 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2e42:	lsls	r1, r4, #24
    2e44:	bmi.w	30a8 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2e48:	lsls	r2, r4, #30
    2e4a:	bpl.n	2e5a <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2e4c:	ldr	r2, [pc, #124]	; (2ecc <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2e4e:	ldr	r1, [pc, #128]	; (2ed0 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2e50:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2e52:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2e54:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2e56:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2e58:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2e5a:	lsls	r3, r4, #27
    2e5c:	bpl.n	2e64 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2e5e:	ldr	r3, [pc, #112]	; (2ed0 <usb_isr+0x310>)
    2e60:	movs	r2, #16
    2e62:	strb	r2, [r3, #0]
	}

}
    2e64:	add	sp, #28
    2e66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2e6a:	movs	r2, #4
    2e6c:	strb	r2, [r1, r6]
						break;
    2e6e:	b.n	2e26 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2e70:	movs	r2, #5
    2e72:	strb	r2, [r1, r6]
						break;
    2e74:	b.n	2e26 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2e76:	movs	r2, #3
    2e78:	strb	r2, [r1, r6]
						break;
    2e7a:	b.n	2e26 <usb_isr+0x266>
    2e7c:	.word	0x1fff0000
    2e80:	.word	0x1fff1940
    2e84:	.word	0x1fff18e8
    2e88:	.word	0x1fff1e68
    2e8c:	.word	0x004000c8
    2e90:	.word	0x00400088
    2e94:	.word	0x1fff19d4
    2e98:	.word	0x1fff1955
    2e9c:	.word	0x1fff1868
    2ea0:	.word	0x1fff19c0
    2ea4:	.word	0x1fff18e4
    2ea8:	.word	0x1fff1954
    2eac:	.word	0x400720c0
    2eb0:	.word	0x1fff19cc
    2eb4:	.word	0x1fff18fc
    2eb8:	.word	0x1fff19c8
    2ebc:	.word	0x40072098
    2ec0:	.word	0x40072094
    2ec4:	.word	0x1fff1998
    2ec8:	.word	0x1fff19d8
    2ecc:	.word	0x40072088
    2ed0:	.word	0x40072080
    2ed4:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2ed8:	movw	r4, #8225	; 0x2021
    2edc:	cmp	r1, r4
    2ede:	beq.w	301a <usb_isr+0x45a>
    2ee2:	bhi.n	2f78 <usb_isr+0x3b8>
    2ee4:	cmp.w	r1, #2176	; 0x880
    2ee8:	beq.w	317e <usb_isr+0x5be>
    2eec:	cmp.w	r1, #2304	; 0x900
    2ef0:	bne.w	30fe <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2ef4:	ldr	r2, [pc, #712]	; (31c0 <usb_isr+0x600>)
    2ef6:	ldr	r4, [pc, #716]	; (31c4 <usb_isr+0x604>)
    2ef8:	ldrb	r1, [r5, #2]
    2efa:	strb	r1, [r2, #0]
    2efc:	add.w	r5, r4, #160	; 0xa0
    2f00:	b.n	2f0a <usb_isr+0x34a>
    2f02:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2f04:	cmp	r5, r4
    2f06:	beq.w	321c <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2f0a:	ldr	r3, [r4, #32]
    2f0c:	lsls	r1, r3, #24
    2f0e:	bpl.n	2f02 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2f10:	ldr	r0, [r4, #36]	; 0x24
    2f12:	subs	r0, #8
    2f14:	bl	29a0 <usb_free>
    2f18:	b.n	2f02 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2f1a:	cmp.w	lr, #64	; 0x40
    2f1e:	it	ne
    2f20:	movne	r2, #0
    2f22:	b.n	2dae <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2f24:	ldr	r2, [pc, #672]	; (31c8 <usb_isr+0x608>)
    2f26:	ldrb	r5, [r1, #0]
    2f28:	ldrb	r0, [r1, #1]
    2f2a:	strb	r5, [r2, #0]
    2f2c:	strb	r0, [r2, #1]
    2f2e:	ldrb	r5, [r1, #2]
    2f30:	ldrb	r0, [r1, #3]
    2f32:	strb	r5, [r2, #2]
    2f34:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2f36:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2f38:	ldrb	r5, [r1, #4]
    2f3a:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2f3c:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2f3e:	ldrb	r5, [r1, #5]
    2f40:	ldrb	r1, [r1, #6]
    2f42:	strb	r5, [r2, #5]
    2f44:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2f46:	beq.w	3176 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f4a:	ldr	r1, [pc, #640]	; (31cc <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f4c:	ldr	r6, [pc, #640]	; (31d0 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f4e:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f50:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2f52:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f56:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f58:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2f5c:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f5e:	ite	eq
    2f60:	moveq	r1, #136	; 0x88
    2f62:	movne	r1, #200	; 0xc8
    2f64:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f68:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2f6c:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f70:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2f72:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f74:	str	r1, [r2, #4]
    2f76:	b.n	2dd4 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2f78:	movw	r4, #8737	; 0x2221
    2f7c:	cmp	r1, r4
    2f7e:	bne.w	3392 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2f82:	ldr.w	ip, [pc, #656]	; 3214 <usb_isr+0x654>
    2f86:	ldr	r3, [pc, #588]	; (31d4 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2f88:	ldr	r1, [pc, #588]	; (31d8 <usb_isr+0x618>)
    2f8a:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2f8c:	ldr.w	r5, [ip]
    2f90:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2f92:	str	r0, [sp, #4]
    2f94:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2f96:	movs	r0, #0
    2f98:	str	r0, [sp, #8]
    2f9a:	mov	r8, r0
    2f9c:	mov	ip, r0
    2f9e:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fa0:	ldr	r1, [pc, #552]	; (31cc <usb_isr+0x60c>)
    2fa2:	ldrb	r5, [r1, #0]
    2fa4:	orr.w	lr, r5, #2
    2fa8:	add.w	r3, r9, lr, lsl #3
    2fac:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fae:	ldr	r3, [sp, #4]
    2fb0:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fb2:	ldr	r3, [sp, #12]
    2fb4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fb6:	ite	eq
    2fb8:	moveq	r4, #136	; 0x88
    2fba:	movne	r4, #200	; 0xc8
    2fbc:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2fc0:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fc4:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2fc8:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2fca:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fcc:	ldr.w	lr, [pc, #500]	; 31c4 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2fd0:	ldr	r3, [pc, #508]	; (31d0 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    2fd2:	ldr.w	r8, [pc, #504]	; 31cc <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2fd6:	cmp	r0, #0
    2fd8:	bne.w	310c <usb_isr+0x54c>
    2fdc:	cmp.w	ip, #64	; 0x40
    2fe0:	bne.n	301a <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fe2:	orr.w	ip, r4, #2
    2fe6:	add.w	r3, r9, ip, lsl #3
    2fea:	ldr	r4, [sp, #8]
    2fec:	ldr.w	lr, [pc, #468]	; 31c4 <usb_isr+0x604>
    2ff0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ff2:	cmp	r2, #0
    2ff4:	bne.w	3138 <usb_isr+0x578>
    2ff8:	lsls	r2, r0, #16
    2ffa:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2ffe:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3002:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3006:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3008:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    300a:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    300c:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    300e:	cmp	r0, #64	; 0x40
    3010:	bne.n	301a <usb_isr+0x45a>
    3012:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3014:	ldr	r2, [pc, #452]	; (31dc <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3016:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3018:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    301a:	ldr	r2, [pc, #452]	; (31e0 <usb_isr+0x620>)
    301c:	movs	r3, #1
    301e:	strb	r3, [r2, #0]
    3020:	b.n	2dda <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3022:	bl	1d80 <usb_serial_flush_callback>
    3026:	b.n	2c94 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3028:	ldr	r3, [pc, #408]	; (31c4 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    302a:	ldr	r0, [pc, #436]	; (31e0 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    302c:	ldr	r1, [pc, #412]	; (31cc <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    302e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3030:	mov.w	lr, #2
    3034:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3038:	ldr	r7, [pc, #424]	; (31e4 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    303a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    303c:	ldr	r1, [pc, #424]	; (31e8 <usb_isr+0x628>)
    303e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3040:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3042:	ldr	r6, [pc, #424]	; (31ec <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3044:	ldr	r5, [pc, #424]	; (31f0 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3046:	ldr	r4, [pc, #428]	; (31f4 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3048:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    304a:	movs	r1, #13
    304c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    304e:	movs	r1, #255	; 0xff
    3050:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3052:	ldr.w	lr, [pc, #452]	; 3218 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3056:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3058:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    305a:	ldr	r5, [pc, #412]	; (31f8 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    305c:	ldr	r2, [pc, #412]	; (31fc <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    305e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3062:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3064:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3066:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    306a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    306c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    306e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3070:	add	sp, #28
    3072:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3076:	ldr	r2, [pc, #392]	; (3200 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3078:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    307c:	ldrb	r3, [r2, #0]
    307e:	adds	r3, #1
    3080:	strb	r3, [r2, #0]
    3082:	b.n	2c54 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3084:	str.w	r0, [r3, r6, lsl #2]
    3088:	ldr	r5, [pc, #376]	; (3204 <usb_isr+0x644>)
    308a:	b.n	2c22 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    308c:	ldrb	r3, [r1, r6]
    308e:	cmp	r3, #3
    3090:	bhi.n	3168 <usb_isr+0x5a8>
    3092:	add	r2, pc, #4	; (adr r2, 3098 <usb_isr+0x4d8>)
    3094:	ldr.w	pc, [r2, r3, lsl #2]
    3098:	.word	0x00002c55
    309c:	.word	0x00002c55
    30a0:	.word	0x000030ed
    30a4:	.word	0x000030e7
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    30a8:	ldr	r1, [pc, #312]	; (31e4 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    30aa:	ldr	r3, [pc, #324]	; (31f0 <usb_isr+0x630>)
    30ac:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    30ae:	movs	r0, #13
    30b0:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    30b2:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    30b4:	lsls	r2, r4, #30
    30b6:	bpl.w	2e5a <usb_isr+0x29a>
    30ba:	b.n	2e4c <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    30bc:	movw	r2, #770	; 0x302
    30c0:	cmp	r1, r2
    30c2:	bne.w	3382 <usb_isr+0x7c2>
    30c6:	ldrh	r1, [r5, #4]
    30c8:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    30cc:	cmp	r1, #5
    30ce:	bhi.n	30fe <usb_isr+0x53e>
    30d0:	ldrh	r2, [r5, #2]
    30d2:	cbnz	r2, 30fe <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    30d4:	ldr	r4, [pc, #268]	; (31e4 <usb_isr+0x624>)
    30d6:	str	r0, [sp, #4]
    30d8:	lsls	r1, r1, #2
    30da:	add	r4, r1
    30dc:	ldrb	r1, [r4, #0]
    30de:	orr.w	r1, r1, #2
    30e2:	strb	r1, [r4, #0]
    30e4:	b.n	2f96 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    30e6:	movs	r3, #1
    30e8:	strb	r3, [r1, r6]
						break;
    30ea:	b.n	2c54 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    30ec:	movs	r3, #0
    30ee:	strb	r3, [r1, r6]
						break;
    30f0:	b.n	2c54 <usb_isr+0x94>
    30f2:	ldrh	r1, [r5, #4]
    30f4:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    30f8:	cmp	r1, #5
    30fa:	bls.w	339c <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    30fe:	ldr	r2, [pc, #228]	; (31e4 <usb_isr+0x624>)
    3100:	movs	r3, #15
    3102:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3104:	ldr	r2, [pc, #216]	; (31e0 <usb_isr+0x620>)
    3106:	movs	r3, #1
    3108:	strb	r3, [r2, #0]
    310a:	b.n	2dda <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    310c:	cmp	r0, #64	; 0x40
    310e:	bls.w	2fe2 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3112:	orr.w	r4, r4, #2
    3116:	add.w	r1, lr, r4, lsl #3
    311a:	ldr	r6, [sp, #8]
    311c:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    311e:	cbz	r2, 3150 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3120:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3124:	ldr	r2, [pc, #224]	; (3208 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3126:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3128:	mov	r3, r6
    312a:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    312c:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3130:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3132:	str.w	r2, [lr, r4, lsl #3]
    3136:	b.n	3014 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3138:	ldrb.w	r3, [sp, #4]
    313c:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    313e:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3140:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3142:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3144:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3148:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    314a:	str.w	r2, [lr, ip, lsl #3]
    314e:	b.n	300e <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3150:	ldrb.w	r1, [sp, #4]
    3154:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3156:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3158:	ldr	r2, [pc, #140]	; (31e8 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    315a:	strb.w	r5, [r8]
    315e:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3160:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3162:	str.w	r2, [lr, r4, lsl #3]
    3166:	b.n	3014 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3168:	tst.w	r9, #8
    316c:	ite	eq
    316e:	moveq	r3, #2
    3170:	movne	r3, #3
    3172:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3174:	b.n	2c54 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3176:	ldr	r2, [pc, #148]	; (320c <usb_isr+0x64c>)
    3178:	movs	r1, #15
    317a:	strb	r1, [r2, #0]
    317c:	b.n	2f4a <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    317e:	ldr	r2, [pc, #64]	; (31c0 <usb_isr+0x600>)
    3180:	ldr	r4, [pc, #140]	; (3210 <usb_isr+0x650>)
    3182:	ldrb	r2, [r2, #0]
    3184:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3186:	ldrh	r2, [r5, #6]
    3188:	cmp	r2, r0
    318a:	bcs.w	3550 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    318e:	ldr	r1, [pc, #60]	; (31cc <usb_isr+0x60c>)
    3190:	ldrb	r5, [r1, #0]
    3192:	cmp	r2, #64	; 0x40
    3194:	mov	ip, r2
    3196:	orr.w	lr, r5, #2
    319a:	it	cs
    319c:	movcs.w	ip, #64	; 0x40
    31a0:	add.w	r3, r4, ip
    31a4:	add.w	r0, r9, lr, lsl #3
    31a8:	str	r3, [sp, #8]
    31aa:	movs	r3, #1
    31ac:	str	r4, [r0, #4]
    31ae:	mov.w	r8, ip, lsl #16
    31b2:	rsb	r0, ip, r2
    31b6:	str	r3, [sp, #4]
    31b8:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31ba:	movs	r4, #200	; 0xc8
    31bc:	b.n	2fbc <usb_isr+0x3fc>
    31be:	nop
    31c0:	.word	0x1fff19d4
    31c4:	.word	0x1fff0000
    31c8:	.word	0x1fff1d30
    31cc:	.word	0x1fff19c8
    31d0:	.word	0x1fff1954
    31d4:	.word	0x1fff1d38
    31d8:	.word	0x1fff1878
    31dc:	.word	0x1fff18fc
    31e0:	.word	0x40072094
    31e4:	.word	0x400720c0
    31e8:	.word	0x00400088
    31ec:	.word	0x40072088
    31f0:	.word	0x40072080
    31f4:	.word	0x40072098
    31f8:	.word	0x1fff1900
    31fc:	.word	0x1fff1958
    3200:	.word	0x1fff19c9
    3204:	.word	0x1fff18e8
    3208:	.word	0x004000c8
    320c:	.word	0x1fff1955
    3210:	.word	0x1fff19cc
    3214:	.word	0x1fff1880
    3218:	.word	0x4007208c
    321c:	ldr	r4, [pc, #704]	; (34e0 <usb_isr+0x920>)
    321e:	ldr	r2, [pc, #708]	; (34e4 <usb_isr+0x924>)
    3220:	ldr	r1, [pc, #708]	; (34e8 <usb_isr+0x928>)
    3222:	ldr	r0, [pc, #712]	; (34ec <usb_isr+0x92c>)
    3224:	ldr	r5, [pc, #712]	; (34f0 <usb_isr+0x930>)
    3226:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3228:	movs	r3, #0
    322a:	ldr	r4, [pc, #712]	; (34f4 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    322c:	str	r4, [sp, #8]
    322e:	str	r6, [sp, #20]
    3230:	str	r5, [sp, #12]
    3232:	mov	r8, r0
    3234:	mov	r4, r3
    3236:	str	r7, [sp, #16]
    3238:	mov	r6, r2
    323a:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    323c:	ldr	r0, [r6, #0]
			while (p) {
    323e:	cbz	r0, 324c <usb_isr+0x68c>
				n = p->next;
    3240:	ldr	r7, [r0, #4]
				usb_free(p);
    3242:	bl	29a0 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3246:	mov	r0, r7
    3248:	cmp	r7, #0
    324a:	bne.n	3240 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    324c:	movs	r3, #0
    324e:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3250:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3252:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3254:	mov	r2, r3
    3256:	movs	r3, #0
    3258:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    325c:	cbz	r0, 326a <usb_isr+0x6aa>
				n = p->next;
    325e:	ldr	r7, [r0, #4]
				usb_free(p);
    3260:	bl	29a0 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3264:	mov	r0, r7
    3266:	cmp	r7, #0
    3268:	bne.n	325e <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    326a:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    326c:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    326e:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3270:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3272:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3276:	ldr	r2, [sp, #8]
    3278:	mov.w	r1, #0
			switch (tx_state[i]) {
    327c:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    327e:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3282:	cmp	r3, #3
    3284:	bhi.n	3296 <usb_isr+0x6d6>
    3286:	tbb	[pc, r3]
    328a:	.short	0x0258
    328c:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    328e:	ldr	r3, [sp, #4]
    3290:	mov.w	r2, #1
    3294:	strb	r2, [r3, #0]
    3296:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3298:	adds	r4, #1
    329a:	adds	r3, #1
    329c:	cmp	r4, #5
    329e:	add.w	r6, r6, #4
    32a2:	add.w	r5, r5, #4
    32a6:	str	r3, [sp, #4]
    32a8:	bne.n	323c <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    32aa:	ldr	r4, [pc, #588]	; (34f8 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    32ac:	ldr	r5, [pc, #588]	; (34fc <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    32ae:	ldrb	r2, [r4, #0]
			*reg = epconf;
    32b0:	ldr	r3, [pc, #588]	; (3500 <usb_isr+0x940>)
    32b2:	ldr	r7, [sp, #16]
    32b4:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    32b6:	movs	r1, #0
    32b8:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    32ba:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32bc:	lsls	r2, r2, #28
    32be:	bmi.n	33b6 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    32c0:	ldrb	r2, [r4, #1]
			*reg = epconf;
    32c2:	ldr	r1, [pc, #576]	; (3504 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32c4:	ldr.w	r8, [pc, #588]	; 3514 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    32c8:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32ca:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32cc:	mov.w	r1, #0
    32d0:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    32d4:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32d8:	bmi.w	3462 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    32dc:	ldrb	r2, [r4, #2]
			*reg = epconf;
    32de:	ldr	r1, [pc, #552]	; (3508 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32e0:	ldr.w	r8, [pc, #560]	; 3514 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    32e4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32e6:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32e8:	mov.w	r1, #0
    32ec:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    32f0:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32f4:	bmi.w	343a <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    32f8:	ldr	r1, [pc, #528]	; (350c <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    32fa:	ldrb	r2, [r4, #3]
			*reg = epconf;
    32fc:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32fe:	movs	r1, #0
    3300:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3304:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3308:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    330a:	ldr.w	r8, [pc, #520]	; 3514 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    330e:	bmi.n	340c <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3310:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3312:	ldr	r1, [pc, #508]	; (3510 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3314:	ldr	r4, [pc, #508]	; (3514 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3316:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3318:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    331a:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    331c:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3320:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3324:	bmi.n	33e2 <usb_isr+0x822>
    3326:	ldrb	r3, [r6, #0]
    3328:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    332a:	movs	r1, #0
    332c:	eor.w	r2, r3, #1
    3330:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3334:	str.w	r1, [r9, #184]	; 0xb8
    3338:	b.n	2f96 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    333a:	ldr	r3, [sp, #4]
    333c:	mov.w	r2, #0
    3340:	strb	r2, [r3, #0]
    3342:	b.n	3296 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3344:	ldr	r2, [pc, #464]	; (3518 <usb_isr+0x958>)
    3346:	ldr	r4, [r2, #4]
    3348:	cmp	r4, #0
    334a:	beq.w	30fe <usb_isr+0x53e>
    334e:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3350:	ldrh.w	lr, [r5, #4]
    3354:	b.n	3360 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3356:	adds	r2, #12
			if (list->addr == NULL) break;
    3358:	ldr	r4, [r2, #4]
    335a:	cmp	r4, #0
    335c:	beq.w	30fe <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3360:	ldrh	r3, [r2, #0]
    3362:	cmp	r3, r0
    3364:	bne.n	3356 <usb_isr+0x796>
    3366:	ldrh	r3, [r2, #2]
    3368:	cmp	r3, lr
    336a:	bne.n	3356 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    336c:	lsrs	r0, r0, #8
    336e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3370:	ite	eq
    3372:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3374:	ldrhne	r0, [r2, #8]
    3376:	b.n	3186 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3378:	ldr	r4, [pc, #416]	; (351c <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    337a:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    337c:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    337e:	strb	r2, [r4, #1]
    3380:	b.n	3186 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3382:	cmp.w	r1, #1280	; 0x500
    3386:	bne.w	30fe <usb_isr+0x53e>
    338a:	movs	r3, #1
    338c:	movs	r2, #0
    338e:	str	r3, [sp, #4]
    3390:	b.n	2f96 <usb_isr+0x3d6>
    3392:	movw	r2, #8993	; 0x2321
    3396:	cmp	r1, r2
    3398:	beq.n	338a <usb_isr+0x7ca>
    339a:	b.n	30fe <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    339c:	ldrh	r2, [r5, #2]
    339e:	cmp	r2, #0
    33a0:	bne.w	30fe <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    33a4:	ldr	r4, [pc, #376]	; (3520 <usb_isr+0x960>)
    33a6:	str	r0, [sp, #4]
    33a8:	lsls	r1, r1, #2
    33aa:	add	r4, r1
    33ac:	ldrb	r1, [r4, #0]
    33ae:	bic.w	r1, r1, #2
    33b2:	strb	r1, [r4, #0]
    33b4:	b.n	2f96 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    33b6:	bl	2960 <usb_malloc>
				if (p) {
    33ba:	cmp	r0, #0
    33bc:	beq.w	352c <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    33c0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    33c2:	ldr	r2, [pc, #352]	; (3524 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    33c4:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    33c8:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    33cc:	bl	2960 <usb_malloc>
				if (p) {
    33d0:	cmp	r0, #0
    33d2:	beq.n	34d4 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    33d4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    33d6:	ldr	r2, [pc, #336]	; (3528 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    33d8:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    33dc:	str.w	r2, [r9, #40]	; 0x28
    33e0:	b.n	32c0 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    33e2:	bl	2960 <usb_malloc>
				if (p) {
    33e6:	cmp	r0, #0
    33e8:	beq.n	3498 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    33ea:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    33ec:	ldr	r2, [pc, #308]	; (3524 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    33ee:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    33f2:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    33f6:	bl	2960 <usb_malloc>
				if (p) {
    33fa:	cmp	r0, #0
    33fc:	beq.n	348c <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    33fe:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3400:	ldr	r2, [pc, #292]	; (3528 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3402:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3406:	str.w	r2, [r9, #168]	; 0xa8
    340a:	b.n	3326 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    340c:	bl	2960 <usb_malloc>
				if (p) {
    3410:	cmp	r0, #0
    3412:	beq.w	3544 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3416:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3418:	ldr	r2, [pc, #264]	; (3524 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    341a:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    341e:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3422:	bl	2960 <usb_malloc>
				if (p) {
    3426:	cmp	r0, #0
    3428:	beq.w	3538 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    342c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    342e:	ldr	r2, [pc, #248]	; (3528 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3430:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3434:	str.w	r2, [r9, #136]	; 0x88
    3438:	b.n	3310 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    343a:	bl	2960 <usb_malloc>
				if (p) {
    343e:	cmp	r0, #0
    3440:	beq.n	34c8 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3442:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3444:	ldr	r2, [pc, #220]	; (3524 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3446:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    344a:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    344e:	bl	2960 <usb_malloc>
				if (p) {
    3452:	cbz	r0, 34bc <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3454:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3456:	ldr	r2, [pc, #208]	; (3528 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3458:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    345c:	str.w	r2, [r9, #104]	; 0x68
    3460:	b.n	32f8 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3462:	bl	2960 <usb_malloc>
				if (p) {
    3466:	cbz	r0, 34b0 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3468:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    346a:	ldr	r2, [pc, #184]	; (3524 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    346c:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3470:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3474:	bl	2960 <usb_malloc>
				if (p) {
    3478:	cbz	r0, 34a4 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    347a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    347c:	ldr	r2, [pc, #168]	; (3528 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    347e:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3482:	str.w	r2, [r9, #72]	; 0x48
    3486:	b.n	32dc <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3488:	movs	r0, #2
    348a:	b.n	3186 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    348c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    348e:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3492:	adds	r2, #1
    3494:	strb	r2, [r5, #0]
    3496:	b.n	3326 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3498:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    349a:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    349e:	adds	r2, #1
    34a0:	strb	r2, [r5, #0]
    34a2:	b.n	33f6 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    34a4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    34a6:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    34aa:	adds	r2, #1
    34ac:	strb	r2, [r5, #0]
    34ae:	b.n	32dc <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    34b0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    34b2:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    34b6:	adds	r2, #1
    34b8:	strb	r2, [r5, #0]
    34ba:	b.n	3474 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    34bc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    34be:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    34c2:	adds	r2, #1
    34c4:	strb	r2, [r5, #0]
    34c6:	b.n	32f8 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    34c8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    34ca:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    34ce:	adds	r2, #1
    34d0:	strb	r2, [r5, #0]
    34d2:	b.n	344e <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    34d4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    34d6:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    34da:	adds	r2, #1
    34dc:	strb	r2, [r5, #0]
    34de:	b.n	32c0 <usb_isr+0x700>
    34e0:	.word	0x1fff19d8
    34e4:	.word	0x1fff1940
    34e8:	.word	0x1fff1998
    34ec:	.word	0x1fff19ac
    34f0:	.word	0x1fff18e8
    34f4:	.word	0x1fff1e68
    34f8:	.word	0x00004d94
    34fc:	.word	0x1fff19c9
    3500:	.word	0x400720c4
    3504:	.word	0x400720c8
    3508:	.word	0x400720cc
    350c:	.word	0x400720d0
    3510:	.word	0x400720d4
    3514:	.word	0x1fff0000
    3518:	.word	0x00004d9c
    351c:	.word	0x1fff19cc
    3520:	.word	0x400720c0
    3524:	.word	0x00400088
    3528:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    352c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    352e:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3532:	adds	r2, #1
    3534:	strb	r2, [r5, #0]
    3536:	b.n	33cc <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3538:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    353a:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    353e:	adds	r2, #1
    3540:	strb	r2, [r5, #0]
    3542:	b.n	3310 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3544:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3546:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    354a:	adds	r2, #1
    354c:	strb	r2, [r5, #0]
    354e:	b.n	3422 <usb_isr+0x862>
    3550:	cmp	r0, #64	; 0x40
    3552:	mov	ip, r0
    3554:	it	cs
    3556:	movcs.w	ip, #64	; 0x40
    355a:	add.w	r3, r4, ip
    355e:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3560:	movs	r3, #1
    3562:	rsb	r0, ip, r0
    3566:	mov.w	r8, ip, lsl #16
    356a:	movs	r2, #0
    356c:	str	r3, [sp, #4]
    356e:	b.n	2fa0 <usb_isr+0x3e0>

00003570 <usb_init>:
}



void usb_init(void)
{
    3570:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3574:	ldr	r4, [pc, #156]	; (3614 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3576:	bl	3db0 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    357a:	movs	r2, #0
    357c:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3580:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3582:	str	r2, [r3, #0]
		table[i].addr = 0;
    3584:	str	r2, [r3, #4]
    3586:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3588:	cmp	r3, r0
		table[i].desc = 0;
    358a:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    358e:	bne.n	3582 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3590:	ldr	r0, [pc, #132]	; (3618 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3592:	ldr	r2, [pc, #136]	; (361c <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3594:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3596:	ldr.w	lr, [pc, #156]	; 3634 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    359a:	ldr	r6, [pc, #132]	; (3620 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    359c:	ldr	r5, [pc, #132]	; (3624 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    359e:	ldr	r7, [pc, #136]	; (3628 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    35a0:	ldr.w	ip, [pc, #148]	; 3638 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    35a4:	ldr.w	r8, [pc, #148]	; 363c <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    35a8:	orr.w	r3, r3, #262144	; 0x40000
    35ac:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    35ae:	ldr	r3, [r2, #0]
    35b0:	orr.w	r3, r3, #50331648	; 0x3000000
    35b4:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    35b6:	movs	r3, #3
    35b8:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    35bc:	movs	r3, #160	; 0xa0
    35be:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    35c0:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    35c4:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    35c8:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    35cc:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    35ce:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    35d0:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    35d4:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    35d6:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    35d8:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    35da:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    35dc:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    35de:	ldr	r5, [pc, #76]	; (362c <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    35e0:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    35e4:	ldr	r0, [pc, #72]	; (3630 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    35e6:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    35ea:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    35ec:	movs	r3, #1
    35ee:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    35f2:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    35f6:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    35fa:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    35fc:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    35fe:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3602:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3604:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3606:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    360a:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    360e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3612:	nop
    3614:	.word	0x1fff0000
    3618:	.word	0x40048034
    361c:	.word	0x4000d800
    3620:	.word	0x40072140
    3624:	.word	0x4007209c
    3628:	.word	0x400720b0
    362c:	.word	0xe000e435
    3630:	.word	0xe000e104
    3634:	.word	0x40072144
    3638:	.word	0x40072080
    363c:	.word	0x40072088

00003640 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3640:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3642:	ldr	r4, [pc, #176]	; (36f4 <yield+0xb4>)
    3644:	ldrb	r3, [r4, #0]
    3646:	cbz	r3, 364a <yield+0xa>
    3648:	pop	{r3, r4, r5, pc}
	running = 1;
    364a:	movs	r3, #1
    364c:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    364e:	bl	1b6c <usb_serial_available>
	if (Serial.available()) serialEvent();
    3652:	cmp	r0, #0
    3654:	bne.n	36dc <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3656:	bl	3b80 <serial_available>
	if (Serial1.available()) serialEvent1();
    365a:	cmp	r0, #0
    365c:	bne.n	36d6 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    365e:	bl	3868 <serial2_available>
	if (Serial2.available()) serialEvent2();
    3662:	cmp	r0, #0
    3664:	bne.n	36d0 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3666:	bl	3e80 <serial3_available>
	if (Serial3.available()) serialEvent3();
    366a:	cbnz	r0, 36ca <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    366c:	bl	3994 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3670:	cbnz	r0, 36c4 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    3672:	bl	3770 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3676:	cbnz	r0, 36be <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3678:	bl	3cac <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    367c:	cbnz	r0, 36b8 <yield+0x78>
#endif
	running = 0;
    367e:	movs	r3, #0
    3680:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3682:	mrs	r3, IPSR
		if (ipsr != 0) return;
    3686:	cmp	r3, #0
    3688:	bne.n	3648 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    368a:	mrs	r1, PRIMASK
		__disable_irq();
    368e:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3690:	ldr	r3, [pc, #100]	; (36f8 <yield+0xb8>)
    3692:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3694:	cbz	r0, 36e2 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3696:	ldr	r4, [pc, #100]	; (36fc <yield+0xbc>)
    3698:	ldrb	r2, [r4, #0]
    369a:	cbnz	r2, 36e2 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    369c:	ldr	r5, [r0, #20]
    369e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    36a0:	movs	r3, #1
    36a2:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    36a4:	cbz	r5, 36ea <yield+0xaa>
			firstYield->_prev = nullptr;
    36a6:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    36a8:	cbnz	r1, 36ac <yield+0x6c>
    36aa:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    36ac:	movs	r5, #0
    36ae:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    36b0:	ldr	r3, [r0, #8]
    36b2:	blx	r3
		runningFromYield = false;
    36b4:	strb	r5, [r4, #0]
    36b6:	b.n	3648 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    36b8:	bl	376c <serialEvent6()>
    36bc:	b.n	367e <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    36be:	bl	3704 <serialEvent5()>
    36c2:	b.n	3678 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    36c4:	bl	3758 <serialEvent4()>
    36c8:	b.n	3672 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    36ca:	bl	3f7c <serialEvent3()>
    36ce:	b.n	366c <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    36d0:	bl	3754 <serialEvent2()>
    36d4:	b.n	3666 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    36d6:	bl	3f78 <serialEvent1()>
    36da:	b.n	365e <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    36dc:	bl	3730 <serialEvent()>
    36e0:	b.n	3656 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    36e2:	cmp	r1, #0
    36e4:	bne.n	3648 <yield+0x8>
    36e6:	cpsie	i
    36e8:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    36ea:	ldr	r3, [pc, #20]	; (3700 <yield+0xc0>)
    36ec:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    36ee:	cmp	r1, #0
    36f0:	bne.n	36ac <yield+0x6c>
    36f2:	b.n	36aa <yield+0x6a>
    36f4:	.word	0x1fff19dd
    36f8:	.word	0x1fff1cf0
    36fc:	.word	0x1fff1cf4
    3700:	.word	0x1fff1cec

00003704 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    3704:	bx	lr
    3706:	nop

00003708 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3708:	b.w	1b88 <usb_serial_flush_input>

0000370c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    370c:	b.w	1b3c <usb_serial_peekchar>

00003710 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3710:	b.w	1af4 <usb_serial_getchar>

00003714 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3714:	b.w	1b6c <usb_serial_available>

00003718 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3718:	b.w	1d28 <usb_serial_flush_output>

0000371c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    371c:	b.w	1ce0 <usb_serial_write_buffer_free>

00003720 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3720:	mov	r0, r1
    3722:	mov	r1, r2
    3724:	b.w	1bc0 <usb_serial_write>

00003728 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3728:	mov	r0, r1
    372a:	b.w	1cc8 <usb_serial_putchar>
    372e:	nop

00003730 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3730:	bx	lr
    3732:	nop

00003734 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3734:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3736:	ldr	r2, [pc, #24]	; (3750 <Print::println()+0x1c>)
	return write(buf, 2);
    3738:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    373a:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    373c:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    373e:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3740:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3742:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3746:	movs	r2, #2
    3748:	blx	r3
}
    374a:	add	sp, #12
    374c:	ldr.w	pc, [sp], #4
    3750:	.word	0x00004d90

00003754 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3754:	bx	lr
    3756:	nop

00003758 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3758:	bx	lr
    375a:	nop

0000375c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    375c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    375e:	bl	490 <setup>
	while (1) {
		loop();
    3762:	bl	494 <loop>
		yield();
    3766:	bl	3640 <yield>
    376a:	b.n	3762 <main+0x6>

0000376c <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    376c:	bx	lr
    376e:	nop

00003770 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3770:	ldr	r2, [pc, #20]	; (3788 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3772:	ldr	r3, [pc, #24]	; (378c <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3774:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3776:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3778:	uxtb	r0, r0
	tail = rx_buffer_tail;
    377a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    377c:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    377e:	it	cc
    3780:	addcc	r0, #64	; 0x40
    3782:	subs	r0, r0, r3
}
    3784:	bx	lr
    3786:	nop
    3788:	.word	0x1fff19e4
    378c:	.word	0x1fff19e5

00003790 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3790:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3792:	ldr	r3, [pc, #172]	; (3840 <uart4_status_isr+0xb0>)
    3794:	ldrb	r2, [r3, #4]
    3796:	lsls	r4, r2, #26
    3798:	bpl.n	37da <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    379a:	ldr	r0, [pc, #168]	; (3844 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    379c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    379e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37a0:	ldr	r1, [pc, #164]	; (3848 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    37a2:	adds	r3, #1
    37a4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37a6:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    37a8:	it	gt
    37aa:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37ac:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    37ae:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37b0:	beq.n	37ba <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    37b2:	ldr	r4, [pc, #152]	; (384c <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    37b4:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    37b6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    37b8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    37ba:	ldr	r2, [pc, #148]	; (3850 <uart4_status_isr+0xc0>)
    37bc:	ldr	r1, [r2, #0]
    37be:	cbz	r1, 37da <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    37c0:	ldr	r2, [pc, #144]	; (3854 <uart4_status_isr+0xc4>)
    37c2:	ldrb	r2, [r2, #0]
    37c4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    37c6:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    37c8:	itet	cc
    37ca:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    37ce:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    37d0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    37d2:	cmp	r3, #39	; 0x27
    37d4:	itt	gt
    37d6:	movgt	r3, #1
    37d8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    37da:	ldr	r2, [pc, #100]	; (3840 <uart4_status_isr+0xb0>)
    37dc:	ldrb	r3, [r2, #3]
    37de:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    37e0:	lsls	r0, r3, #24
    37e2:	bmi.n	3808 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    37e4:	lsls	r2, r3, #25
    37e6:	bpl.n	3804 <uart4_status_isr+0x74>
    37e8:	ldr	r3, [pc, #84]	; (3840 <uart4_status_isr+0xb0>)
    37ea:	ldrb	r3, [r3, #4]
    37ec:	lsls	r3, r3, #25
    37ee:	bpl.n	3804 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    37f0:	ldr	r3, [pc, #100]	; (3858 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    37f2:	ldr	r1, [pc, #104]	; (385c <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    37f4:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    37f6:	movs	r2, #0
    37f8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    37fa:	cbz	r3, 37fe <uart4_status_isr+0x6e>
    37fc:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    37fe:	ldr	r3, [pc, #64]	; (3840 <uart4_status_isr+0xb0>)
    3800:	movs	r2, #44	; 0x2c
    3802:	strb	r2, [r3, #3]
	}
}
    3804:	pop	{r4, r5}
    3806:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3808:	ldrb	r1, [r2, #4]
    380a:	lsls	r1, r1, #24
    380c:	bpl.n	37e4 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    380e:	ldr	r1, [pc, #80]	; (3860 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3810:	ldr	r0, [pc, #64]	; (3854 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3812:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3814:	ldrb	r1, [r0, #0]
    3816:	uxtb	r1, r1
		if (head == tail) {
    3818:	cmp	r4, r1
    381a:	beq.n	3838 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    381c:	adds	r2, r1, #1
    381e:	cmp	r2, #39	; 0x27
    3820:	itt	hi
    3822:	movhi	r1, #0
    3824:	movhi	r2, r1
			n = tx_buffer[tail];
    3826:	ldr	r5, [pc, #60]	; (3864 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3828:	ldr	r4, [pc, #20]	; (3840 <uart4_status_isr+0xb0>)
    382a:	it	ls
    382c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    382e:	ldrb	r2, [r5, r2]
    3830:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3832:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3834:	strb	r1, [r0, #0]
    3836:	b.n	37e4 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3838:	movs	r1, #108	; 0x6c
    383a:	strb	r1, [r2, #3]
    383c:	b.n	37e4 <uart4_status_isr+0x54>
    383e:	nop
    3840:	.word	0x400ea000
    3844:	.word	0x1fff19e4
    3848:	.word	0x1fff19e5
    384c:	.word	0x1fff1a10
    3850:	.word	0x1fff19e0
    3854:	.word	0x1fff1a51
    3858:	.word	0x1fff1a54
    385c:	.word	0x1fff1a50
    3860:	.word	0x1fff1a58
    3864:	.word	0x1fff19e8

00003868 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3868:	ldr	r2, [pc, #20]	; (3880 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    386a:	ldr	r3, [pc, #24]	; (3884 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    386c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    386e:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3870:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3872:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3874:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3876:	it	cc
    3878:	addcc	r0, #64	; 0x40
    387a:	subs	r0, r0, r3
}
    387c:	bx	lr
    387e:	nop
    3880:	.word	0x1fff1acc
    3884:	.word	0x1fff1a61

00003888 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3888:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    388a:	ldr	r3, [pc, #224]	; (396c <uart1_status_isr+0xe4>)
    388c:	ldrb	r2, [r3, #4]
    388e:	tst.w	r2, #48	; 0x30
    3892:	beq.n	38ee <uart1_status_isr+0x66>
		__disable_irq();
    3894:	cpsid	i
		avail = UART1_RCFIFO;
    3896:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3898:	and.w	r2, r1, #255	; 0xff
    389c:	cmp	r1, #0
    389e:	beq.n	391c <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    38a0:	cpsie	i
			head = rx_buffer_head;
    38a2:	ldr	r7, [pc, #204]	; (3970 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    38a4:	ldr	r1, [pc, #204]	; (3974 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    38a6:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    38a8:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    38aa:	ldr	r6, [pc, #204]	; (3978 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    38ac:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    38ae:	uxtb	r0, r0
			tail = rx_buffer_tail;
    38b0:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    38b2:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    38b4:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    38b6:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    38b8:	it	cs
    38ba:	movcs	r3, #0
				if (newhead != tail) {
    38bc:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    38be:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    38c2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    38c4:	itt	ne
    38c6:	strbne	r1, [r6, r3]
    38c8:	movne	r0, r3
				}
			} while (--avail > 0);
    38ca:	ands.w	r2, r2, #255	; 0xff
    38ce:	bne.n	38b2 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    38d0:	ldr	r3, [pc, #168]	; (397c <uart1_status_isr+0xf4>)
    38d2:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    38d4:	uxtb	r2, r0
    38d6:	strb	r2, [r7, #0]
			if (rts_pin) {
    38d8:	cbz	r3, 38ee <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    38da:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    38dc:	itet	cc
    38de:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    38e2:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    38e4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    38e6:	cmp	r0, #39	; 0x27
    38e8:	itt	gt
    38ea:	movgt	r2, #1
    38ec:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    38ee:	ldr	r1, [pc, #124]	; (396c <uart1_status_isr+0xe4>)
    38f0:	ldrb	r2, [r1, #3]
    38f2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    38f4:	lsls	r5, r2, #24
    38f6:	bmi.n	3926 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    38f8:	lsls	r2, r2, #25
    38fa:	bpl.n	3918 <uart1_status_isr+0x90>
    38fc:	ldr	r3, [pc, #108]	; (396c <uart1_status_isr+0xe4>)
    38fe:	ldrb	r3, [r3, #4]
    3900:	lsls	r3, r3, #25
    3902:	bpl.n	3918 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3904:	ldr	r3, [pc, #120]	; (3980 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3906:	ldr	r1, [pc, #124]	; (3984 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3908:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    390a:	movs	r2, #0
    390c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    390e:	cbz	r3, 3912 <uart1_status_isr+0x8a>
    3910:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3912:	ldr	r3, [pc, #88]	; (396c <uart1_status_isr+0xe4>)
    3914:	movs	r2, #60	; 0x3c
    3916:	strb	r2, [r3, #3]
	}
}
    3918:	pop	{r4, r5, r6, r7}
    391a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    391c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    391e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3920:	strb	r2, [r3, #17]
			__enable_irq();
    3922:	cpsie	i
    3924:	b.n	38ee <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3926:	ldrb	r3, [r1, #4]
    3928:	lsls	r4, r3, #24
    392a:	bpl.n	38f8 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    392c:	ldr	r3, [pc, #88]	; (3988 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    392e:	ldr	r6, [pc, #92]	; (398c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3930:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3932:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3934:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3936:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3938:	cmp	r4, r3
    393a:	beq.n	395a <uart1_status_isr+0xd2>
    393c:	ldr	r5, [pc, #80]	; (3990 <uart1_status_isr+0x108>)
    393e:	b.n	3944 <uart1_status_isr+0xbc>
    3940:	cmp	r3, r4
    3942:	beq.n	395a <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3944:	adds	r3, #1
    3946:	cmp	r3, #40	; 0x28
    3948:	it	cs
    394a:	movcs	r3, #0
			avail = UART1_S1;
    394c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    394e:	ldrb	r0, [r5, r3]
    3950:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3952:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3954:	ldrb	r0, [r1, #20]
    3956:	cmp	r0, #7
    3958:	bls.n	3940 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    395a:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    395c:	ldr	r1, [pc, #12]	; (396c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    395e:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3960:	ldrb	r3, [r1, #4]
    3962:	lsls	r0, r3, #24
    3964:	itt	mi
    3966:	movmi	r3, #124	; 0x7c
    3968:	strbmi	r3, [r1, #3]
    396a:	b.n	38f8 <uart1_status_isr+0x70>
    396c:	.word	0x4006b000
    3970:	.word	0x1fff1acc
    3974:	.word	0x1fff1a61
    3978:	.word	0x1fff1a8c
    397c:	.word	0x1fff1a5c
    3980:	.word	0x1fff1ad0
    3984:	.word	0x1fff1a60
    3988:	.word	0x1fff1ad4
    398c:	.word	0x1fff1acd
    3990:	.word	0x1fff1a64

00003994 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3994:	ldr	r2, [pc, #20]	; (39ac <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3996:	ldr	r3, [pc, #24]	; (39b0 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3998:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    399a:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    399c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    399e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    39a0:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    39a2:	it	cc
    39a4:	addcc	r0, #64	; 0x40
    39a6:	subs	r0, r0, r3
}
    39a8:	bx	lr
    39aa:	nop
    39ac:	.word	0x1fff1adc
    39b0:	.word	0x1fff1add

000039b4 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    39b4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    39b6:	ldr	r3, [pc, #172]	; (3a64 <uart3_status_isr+0xb0>)
    39b8:	ldrb	r2, [r3, #4]
    39ba:	lsls	r4, r2, #26
    39bc:	bpl.n	39fe <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    39be:	ldr	r0, [pc, #168]	; (3a68 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    39c0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    39c2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39c4:	ldr	r1, [pc, #164]	; (3a6c <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    39c6:	adds	r3, #1
    39c8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39ca:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    39cc:	it	gt
    39ce:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39d0:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    39d2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39d4:	beq.n	39de <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    39d6:	ldr	r4, [pc, #152]	; (3a70 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    39d8:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    39da:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    39dc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    39de:	ldr	r2, [pc, #148]	; (3a74 <uart3_status_isr+0xc0>)
    39e0:	ldr	r1, [r2, #0]
    39e2:	cbz	r1, 39fe <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    39e4:	ldr	r2, [pc, #144]	; (3a78 <uart3_status_isr+0xc4>)
    39e6:	ldrb	r2, [r2, #0]
    39e8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    39ea:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    39ec:	itet	cc
    39ee:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    39f2:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    39f4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    39f6:	cmp	r3, #39	; 0x27
    39f8:	itt	gt
    39fa:	movgt	r3, #1
    39fc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    39fe:	ldr	r2, [pc, #100]	; (3a64 <uart3_status_isr+0xb0>)
    3a00:	ldrb	r3, [r2, #3]
    3a02:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3a04:	lsls	r0, r3, #24
    3a06:	bmi.n	3a2c <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3a08:	lsls	r2, r3, #25
    3a0a:	bpl.n	3a28 <uart3_status_isr+0x74>
    3a0c:	ldr	r3, [pc, #84]	; (3a64 <uart3_status_isr+0xb0>)
    3a0e:	ldrb	r3, [r3, #4]
    3a10:	lsls	r3, r3, #25
    3a12:	bpl.n	3a28 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3a14:	ldr	r3, [pc, #100]	; (3a7c <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3a16:	ldr	r1, [pc, #104]	; (3a80 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3a18:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3a1a:	movs	r2, #0
    3a1c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3a1e:	cbz	r3, 3a22 <uart3_status_isr+0x6e>
    3a20:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3a22:	ldr	r3, [pc, #64]	; (3a64 <uart3_status_isr+0xb0>)
    3a24:	movs	r2, #44	; 0x2c
    3a26:	strb	r2, [r3, #3]
	}
}
    3a28:	pop	{r4, r5}
    3a2a:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3a2c:	ldrb	r1, [r2, #4]
    3a2e:	lsls	r1, r1, #24
    3a30:	bpl.n	3a08 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3a32:	ldr	r1, [pc, #80]	; (3a84 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3a34:	ldr	r0, [pc, #64]	; (3a78 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3a36:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3a38:	ldrb	r1, [r0, #0]
    3a3a:	uxtb	r1, r1
		if (head == tail) {
    3a3c:	cmp	r4, r1
    3a3e:	beq.n	3a5c <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3a40:	adds	r2, r1, #1
    3a42:	cmp	r2, #39	; 0x27
    3a44:	itt	hi
    3a46:	movhi	r1, #0
    3a48:	movhi	r2, r1
			n = tx_buffer[tail];
    3a4a:	ldr	r5, [pc, #60]	; (3a88 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3a4c:	ldr	r4, [pc, #20]	; (3a64 <uart3_status_isr+0xb0>)
    3a4e:	it	ls
    3a50:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3a52:	ldrb	r2, [r5, r2]
    3a54:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3a56:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3a58:	strb	r1, [r0, #0]
    3a5a:	b.n	3a08 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3a5c:	movs	r1, #108	; 0x6c
    3a5e:	strb	r1, [r2, #3]
    3a60:	b.n	3a08 <uart3_status_isr+0x54>
    3a62:	nop
    3a64:	.word	0x4006d000
    3a68:	.word	0x1fff1adc
    3a6c:	.word	0x1fff1add
    3a70:	.word	0x1fff1b08
    3a74:	.word	0x1fff1ad8
    3a78:	.word	0x1fff1b49
    3a7c:	.word	0x1fff1b4c
    3a80:	.word	0x1fff1b48
    3a84:	.word	0x1fff1b50
    3a88:	.word	0x1fff1ae0

00003a8c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3a8c:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3a8e:	ldr	r4, [pc, #64]	; (3ad0 <fault_isr+0x44>)
    3a90:	b.n	3aa4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3a92:	ldr	r3, [r4, #0]
    3a94:	lsls	r1, r3, #21
    3a96:	bmi.n	3ab4 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3a98:	ldr	r3, [r4, #0]
    3a9a:	lsls	r2, r3, #20
    3a9c:	bmi.n	3abe <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3a9e:	ldr	r3, [r4, #0]
    3aa0:	lsls	r3, r3, #19
    3aa2:	bmi.n	3ac8 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3aa4:	ldr	r3, [r4, #0]
    3aa6:	lsls	r0, r3, #13
    3aa8:	bpl.n	3a92 <fault_isr+0x6>
    3aaa:	bl	2bc0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3aae:	ldr	r3, [r4, #0]
    3ab0:	lsls	r1, r3, #21
    3ab2:	bpl.n	3a98 <fault_isr+0xc>
    3ab4:	bl	3ba0 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3ab8:	ldr	r3, [r4, #0]
    3aba:	lsls	r2, r3, #20
    3abc:	bpl.n	3a9e <fault_isr+0x12>
    3abe:	bl	3888 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3ac2:	ldr	r3, [r4, #0]
    3ac4:	lsls	r3, r3, #19
    3ac6:	bpl.n	3aa4 <fault_isr+0x18>
    3ac8:	bl	3ea0 <uart2_status_isr>
    3acc:	b.n	3aa4 <fault_isr+0x18>
    3ace:	nop
    3ad0:	.word	0x40048034

00003ad4 <unused_isr>:
	}
}

void unused_isr(void)
{
    3ad4:	push	{r3, lr}
	fault_isr();
    3ad6:	bl	3a8c <fault_isr>
    3ada:	nop

00003adc <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3adc:	ldr	r3, [pc, #4]	; (3ae4 <startup_early_hook+0x8>)
    3ade:	movs	r2, #16
    3ae0:	strh	r2, [r3, #0]
    3ae2:	bx	lr
    3ae4:	.word	0x40052000

00003ae8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3ae8:	bx	lr
    3aea:	nop

00003aec <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3aec:	ldr	r1, [pc, #36]	; (3b14 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3aee:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3af0:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3af2:	cbz	r0, 3b02 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3af4:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3af6:	add	r0, r3
    3af8:	sub.w	r2, r2, #8192	; 0x2000
    3afc:	cmp	r0, r2
    3afe:	bcs.n	3b06 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3b00:	str	r0, [r1, #0]
	}
	return prev;
    3b02:	mov	r0, r3
}
    3b04:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3b06:	bl	4174 <__errno>
    3b0a:	movs	r3, #12
    3b0c:	str	r3, [r0, #0]
			return (void *)-1;
    3b0e:	mov.w	r0, #4294967295
    3b12:	pop	{r3, pc}
    3b14:	.word	0x1fff0c80

00003b18 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3b18:	ldr	r2, [pc, #32]	; (3b3c <kinetis_hsrun_disable+0x24>)
    3b1a:	ldrb	r3, [r2, #0]
    3b1c:	cmp	r3, #128	; 0x80
    3b1e:	beq.n	3b24 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3b20:	movs	r0, #0
}
    3b22:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3b24:	ldr	r1, [pc, #24]	; (3b40 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3b26:	ldr	r3, [pc, #28]	; (3b44 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3b28:	ldr	r0, [pc, #28]	; (3b48 <kinetis_hsrun_disable+0x30>)
    3b2a:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3b2c:	movs	r1, #0
    3b2e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3b30:	ldrb	r3, [r2, #0]
    3b32:	cmp	r3, #128	; 0x80
    3b34:	beq.n	3b30 <kinetis_hsrun_disable+0x18>
		return 1;
    3b36:	movs	r0, #1
    3b38:	bx	lr
    3b3a:	nop
    3b3c:	.word	0x4007e003
    3b40:	.word	0x40048044
    3b44:	.word	0x4007e001
    3b48:	.word	0x22280000

00003b4c <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3b4c:	ldr	r2, [pc, #36]	; (3b74 <kinetis_hsrun_enable+0x28>)
    3b4e:	ldrb	r3, [r2, #0]
    3b50:	cmp	r3, #1
    3b52:	beq.n	3b58 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3b54:	movs	r0, #0
}
    3b56:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3b58:	add.w	r3, r3, #1073741824	; 0x40000000
    3b5c:	add.w	r3, r3, #516096	; 0x7e000
    3b60:	movs	r1, #96	; 0x60
    3b62:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3b64:	ldrb	r3, [r2, #0]
    3b66:	cmp	r3, #128	; 0x80
    3b68:	bne.n	3b64 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3b6a:	ldr	r3, [pc, #12]	; (3b78 <kinetis_hsrun_enable+0x2c>)
    3b6c:	ldr	r2, [pc, #12]	; (3b7c <kinetis_hsrun_enable+0x30>)
    3b6e:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3b70:	movs	r0, #1
    3b72:	bx	lr
    3b74:	.word	0x4007e003
    3b78:	.word	0x40048044
    3b7c:	.word	0x02060000

00003b80 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b80:	ldr	r2, [pc, #20]	; (3b98 <serial_available+0x18>)
	tail = rx_buffer_tail;
    3b82:	ldr	r3, [pc, #24]	; (3b9c <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b84:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3b86:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b88:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3b8a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3b8c:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3b8e:	it	cc
    3b90:	addcc	r0, #64	; 0x40
    3b92:	subs	r0, r0, r3
}
    3b94:	bx	lr
    3b96:	nop
    3b98:	.word	0x1fff1b58
    3b9c:	.word	0x1fff1b59

00003ba0 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3ba0:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3ba2:	ldr	r3, [pc, #224]	; (3c84 <uart0_status_isr+0xe4>)
    3ba4:	ldrb	r2, [r3, #4]
    3ba6:	tst.w	r2, #48	; 0x30
    3baa:	beq.n	3c06 <uart0_status_isr+0x66>
		__disable_irq();
    3bac:	cpsid	i
		avail = UART0_RCFIFO;
    3bae:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3bb0:	and.w	r2, r1, #255	; 0xff
    3bb4:	cmp	r1, #0
    3bb6:	beq.n	3c34 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3bb8:	cpsie	i
			head = rx_buffer_head;
    3bba:	ldr	r7, [pc, #204]	; (3c88 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3bbc:	ldr	r1, [pc, #204]	; (3c8c <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3bbe:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3bc0:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3bc2:	ldr	r6, [pc, #204]	; (3c90 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3bc4:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3bc6:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3bc8:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3bca:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3bcc:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3bce:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3bd0:	it	cs
    3bd2:	movcs	r3, #0
				if (newhead != tail) {
    3bd4:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3bd6:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3bda:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3bdc:	itt	ne
    3bde:	strbne	r1, [r6, r3]
    3be0:	movne	r0, r3
				}
			} while (--avail > 0);
    3be2:	ands.w	r2, r2, #255	; 0xff
    3be6:	bne.n	3bca <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3be8:	ldr	r3, [pc, #168]	; (3c94 <uart0_status_isr+0xf4>)
    3bea:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3bec:	uxtb	r2, r0
    3bee:	strb	r2, [r7, #0]
			if (rts_pin) {
    3bf0:	cbz	r3, 3c06 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3bf2:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3bf4:	itet	cc
    3bf6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3bfa:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3bfc:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3bfe:	cmp	r0, #39	; 0x27
    3c00:	itt	gt
    3c02:	movgt	r2, #1
    3c04:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3c06:	ldr	r1, [pc, #124]	; (3c84 <uart0_status_isr+0xe4>)
    3c08:	ldrb	r2, [r1, #3]
    3c0a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3c0c:	lsls	r5, r2, #24
    3c0e:	bmi.n	3c3e <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3c10:	lsls	r2, r2, #25
    3c12:	bpl.n	3c30 <uart0_status_isr+0x90>
    3c14:	ldr	r3, [pc, #108]	; (3c84 <uart0_status_isr+0xe4>)
    3c16:	ldrb	r3, [r3, #4]
    3c18:	lsls	r3, r3, #25
    3c1a:	bpl.n	3c30 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3c1c:	ldr	r3, [pc, #120]	; (3c98 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c1e:	ldr	r1, [pc, #124]	; (3c9c <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3c20:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c22:	movs	r2, #0
    3c24:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3c26:	cbz	r3, 3c2a <uart0_status_isr+0x8a>
    3c28:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3c2a:	ldr	r3, [pc, #88]	; (3c84 <uart0_status_isr+0xe4>)
    3c2c:	movs	r2, #60	; 0x3c
    3c2e:	strb	r2, [r3, #3]
	}
}
    3c30:	pop	{r4, r5, r6, r7}
    3c32:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3c34:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3c36:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3c38:	strb	r2, [r3, #17]
			__enable_irq();
    3c3a:	cpsie	i
    3c3c:	b.n	3c06 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3c3e:	ldrb	r3, [r1, #4]
    3c40:	lsls	r4, r3, #24
    3c42:	bpl.n	3c10 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3c44:	ldr	r3, [pc, #88]	; (3ca0 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3c46:	ldr	r6, [pc, #92]	; (3ca4 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c48:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3c4a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c4c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3c4e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3c50:	cmp	r4, r3
    3c52:	beq.n	3c72 <uart0_status_isr+0xd2>
    3c54:	ldr	r5, [pc, #80]	; (3ca8 <uart0_status_isr+0x108>)
    3c56:	b.n	3c5c <uart0_status_isr+0xbc>
    3c58:	cmp	r3, r4
    3c5a:	beq.n	3c72 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3c5c:	adds	r3, #1
    3c5e:	cmp	r3, #64	; 0x40
    3c60:	it	cs
    3c62:	movcs	r3, #0
			avail = UART0_S1;
    3c64:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3c66:	ldrb	r0, [r5, r3]
    3c68:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3c6a:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3c6c:	ldrb	r0, [r1, #20]
    3c6e:	cmp	r0, #7
    3c70:	bls.n	3c58 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3c72:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3c74:	ldr	r1, [pc, #12]	; (3c84 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3c76:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3c78:	ldrb	r3, [r1, #4]
    3c7a:	lsls	r0, r3, #24
    3c7c:	itt	mi
    3c7e:	movmi	r3, #124	; 0x7c
    3c80:	strbmi	r3, [r1, #3]
    3c82:	b.n	3c10 <uart0_status_isr+0x70>
    3c84:	.word	0x4006a000
    3c88:	.word	0x1fff1b58
    3c8c:	.word	0x1fff1b59
    3c90:	.word	0x1fff1b9c
    3c94:	.word	0x1fff1b54
    3c98:	.word	0x1fff1be0
    3c9c:	.word	0x1fff1bdc
    3ca0:	.word	0x1fff1be4
    3ca4:	.word	0x1fff1bdd
    3ca8:	.word	0x1fff1b5c

00003cac <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3cac:	ldr	r2, [pc, #20]	; (3cc4 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3cae:	ldr	r3, [pc, #24]	; (3cc8 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3cb0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3cb2:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3cb4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3cb6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3cb8:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3cba:	it	cc
    3cbc:	addcc	r0, #64	; 0x40
    3cbe:	subs	r0, r0, r3
}
    3cc0:	bx	lr
    3cc2:	nop
    3cc4:	.word	0x1fff1bec
    3cc8:	.word	0x1fff1bed

00003ccc <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3ccc:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3cce:	ldr	r3, [pc, #176]	; (3d80 <lpuart0_status_isr+0xb4>)
    3cd0:	ldr	r2, [r3, #4]
    3cd2:	lsls	r4, r2, #10
    3cd4:	bpl.n	3d16 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3cd6:	ldr	r0, [pc, #172]	; (3d84 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3cd8:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3cda:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cdc:	ldr	r1, [pc, #168]	; (3d88 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3cde:	adds	r3, #1
    3ce0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ce2:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3ce4:	it	gt
    3ce6:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ce8:	cmp	r3, r1
    3cea:	beq.n	3cf6 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3cec:	ldr	r4, [pc, #156]	; (3d8c <lpuart0_status_isr+0xc0>)
    3cee:	uxtb	r2, r2
			rx_buffer_head = head;
    3cf0:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3cf2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3cf4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3cf6:	ldr	r2, [pc, #152]	; (3d90 <lpuart0_status_isr+0xc4>)
    3cf8:	ldr	r1, [r2, #0]
    3cfa:	cbz	r1, 3d16 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3cfc:	ldr	r2, [pc, #148]	; (3d94 <lpuart0_status_isr+0xc8>)
    3cfe:	ldrb	r2, [r2, #0]
    3d00:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3d02:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3d04:	itet	cc
    3d06:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3d0a:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3d0c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3d0e:	cmp	r3, #39	; 0x27
    3d10:	itt	gt
    3d12:	movgt	r3, #1
    3d14:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3d16:	ldr	r2, [pc, #104]	; (3d80 <lpuart0_status_isr+0xb4>)
    3d18:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3d1a:	lsls	r0, r3, #8
    3d1c:	bpl.n	3d24 <lpuart0_status_isr+0x58>
    3d1e:	ldr	r2, [r2, #4]
    3d20:	lsls	r1, r2, #8
    3d22:	bmi.n	3d48 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3d24:	lsls	r2, r3, #9
    3d26:	bpl.n	3d44 <lpuart0_status_isr+0x78>
    3d28:	ldr	r3, [pc, #84]	; (3d80 <lpuart0_status_isr+0xb4>)
    3d2a:	ldr	r3, [r3, #4]
    3d2c:	lsls	r3, r3, #9
    3d2e:	bpl.n	3d44 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3d30:	ldr	r3, [pc, #100]	; (3d98 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3d32:	ldr	r1, [pc, #104]	; (3d9c <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3d34:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3d36:	movs	r2, #0
    3d38:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3d3a:	cbz	r3, 3d3e <lpuart0_status_isr+0x72>
    3d3c:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3d3e:	ldr	r3, [pc, #96]	; (3da0 <lpuart0_status_isr+0xd4>)
    3d40:	movs	r2, #0
    3d42:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3d44:	pop	{r4, r5}
    3d46:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3d48:	ldr	r2, [pc, #88]	; (3da4 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3d4a:	ldr	r1, [pc, #72]	; (3d94 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3d4c:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3d4e:	ldrb	r2, [r1, #0]
    3d50:	uxtb	r2, r2
		if (head == tail) {
    3d52:	cmp	r0, r2
    3d54:	beq.n	3d72 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3d56:	adds	r2, #1
    3d58:	cmp	r2, #39	; 0x27
    3d5a:	itt	hi
    3d5c:	movhi	r0, #0
    3d5e:	movhi	r2, r0
			n = tx_buffer[tail];
    3d60:	ldr	r5, [pc, #68]	; (3da8 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3d62:	ldr	r4, [pc, #28]	; (3d80 <lpuart0_status_isr+0xb4>)
    3d64:	it	ls
    3d66:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3d68:	ldrb	r2, [r5, r2]
    3d6a:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3d6c:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3d6e:	strb	r0, [r1, #0]
    3d70:	b.n	3d24 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3d72:	ldr	r0, [pc, #56]	; (3dac <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3d74:	ldr	r2, [pc, #40]	; (3da0 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3d76:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3d78:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3d7a:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3d7c:	str	r1, [r2, #0]
    3d7e:	b.n	3d24 <lpuart0_status_isr+0x58>
    3d80:	.word	0x400c4000
    3d84:	.word	0x1fff1bec
    3d88:	.word	0x1fff1bed
    3d8c:	.word	0x1fff1c18
    3d90:	.word	0x1fff1be8
    3d94:	.word	0x1fff1c59
    3d98:	.word	0x1fff1c5c
    3d9c:	.word	0x1fff1c58
    3da0:	.word	0x43880158
    3da4:	.word	0x1fff1c60
    3da8:	.word	0x1fff1bf0
    3dac:	.word	0x4388015c

00003db0 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3db0:	push	{r4, lr}
    3db2:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3db4:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3db6:	bl	3b18 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3dba:	ldr	r2, [pc, #96]	; (3e1c <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3dbc:	ldr	r3, [pc, #96]	; (3e20 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3dbe:	ldr	r1, [pc, #100]	; (3e24 <usb_init_serialnumber+0x74>)
    3dc0:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3dc2:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3dc4:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3dc6:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3dc8:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3dca:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3dcc:	ldrb	r3, [r2, #0]
    3dce:	lsls	r3, r3, #24
    3dd0:	bpl.n	3dcc <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3dd2:	ldr	r3, [pc, #84]	; (3e28 <usb_init_serialnumber+0x78>)
    3dd4:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3dd6:	bl	3b4c <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3dda:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3ddc:	ldr	r3, [pc, #76]	; (3e2c <usb_init_serialnumber+0x7c>)
    3dde:	cmp	r4, r3
    3de0:	itt	ls
    3de2:	addls.w	r4, r4, r4, lsl #2
    3de6:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3de8:	mov	r0, r4
    3dea:	ldr	r4, [pc, #68]	; (3e30 <usb_init_serialnumber+0x80>)
    3dec:	add	r1, sp, #4
    3dee:	movs	r2, #10
    3df0:	bl	3e34 <ultoa>
    3df4:	add	r1, sp, #4
    3df6:	mov	r0, r4
	for (i=0; i<10; i++) {
    3df8:	movs	r3, #0
		char c = buf[i];
    3dfa:	ldrb.w	r2, [r1], #1
    3dfe:	adds	r3, #1
		if (!c) break;
    3e00:	cbz	r2, 3e12 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3e02:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3e04:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3e08:	bne.n	3dfa <usb_init_serialnumber+0x4a>
    3e0a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3e0c:	strb	r3, [r4, #0]
}
    3e0e:	add	sp, #16
    3e10:	pop	{r4, pc}
    3e12:	lsls	r3, r3, #1
    3e14:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3e16:	strb	r3, [r4, #0]
}
    3e18:	add	sp, #16
    3e1a:	pop	{r4, pc}
    3e1c:	.word	0x40020004
    3e20:	.word	0x40020000
    3e24:	.word	0x41070000
    3e28:	.word	0x4002000c
    3e2c:	.word	0x0098967f
    3e30:	.word	0x1fff0d64

00003e34 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3e34:	push	{r4, r5, r6, r7}
    3e36:	subs	r5, r1, #1
    3e38:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3e3a:	movs	r4, #0
    3e3c:	b.n	3e40 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3e3e:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3e40:	udiv	r3, r0, r2
    3e44:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3e48:	cmp	r0, #9
    3e4a:	add.w	r7, r0, #48	; 0x30
    3e4e:	itet	hi
    3e50:	addhi	r0, #55	; 0x37
    3e52:	uxtbls	r0, r7
    3e54:	uxtbhi	r0, r0
    3e56:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3e5a:	mov	r0, r3
    3e5c:	cmp	r3, #0
    3e5e:	bne.n	3e3e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3e60:	adds	r2, r1, r4
    3e62:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3e64:	cbz	r4, 3e7a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3e66:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3e68:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3e6c:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3e6e:	adds	r3, #1
    3e70:	subs	r0, r4, r3
    3e72:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3e74:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3e78:	blt.n	3e66 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3e7a:	mov	r0, r1
    3e7c:	pop	{r4, r5, r6, r7}
    3e7e:	bx	lr

00003e80 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e80:	ldr	r2, [pc, #20]	; (3e98 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3e82:	ldr	r3, [pc, #24]	; (3e9c <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e84:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3e86:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e88:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3e8a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3e8c:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3e8e:	it	cc
    3e90:	addcc	r0, #64	; 0x40
    3e92:	subs	r0, r0, r3
}
    3e94:	bx	lr
    3e96:	nop
    3e98:	.word	0x1fff1c68
    3e9c:	.word	0x1fff1c69

00003ea0 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3ea0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3ea2:	ldr	r3, [pc, #172]	; (3f50 <uart2_status_isr+0xb0>)
    3ea4:	ldrb	r2, [r3, #4]
    3ea6:	lsls	r4, r2, #26
    3ea8:	bpl.n	3eea <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3eaa:	ldr	r0, [pc, #168]	; (3f54 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3eac:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3eae:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3eb0:	ldr	r1, [pc, #164]	; (3f58 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3eb2:	adds	r3, #1
    3eb4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3eb6:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3eb8:	it	gt
    3eba:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ebc:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3ebe:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ec0:	beq.n	3eca <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3ec2:	ldr	r4, [pc, #152]	; (3f5c <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3ec4:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3ec6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3ec8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3eca:	ldr	r2, [pc, #148]	; (3f60 <uart2_status_isr+0xc0>)
    3ecc:	ldr	r1, [r2, #0]
    3ece:	cbz	r1, 3eea <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3ed0:	ldr	r2, [pc, #144]	; (3f64 <uart2_status_isr+0xc4>)
    3ed2:	ldrb	r2, [r2, #0]
    3ed4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3ed6:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3ed8:	itet	cc
    3eda:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3ede:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3ee0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ee2:	cmp	r3, #39	; 0x27
    3ee4:	itt	gt
    3ee6:	movgt	r3, #1
    3ee8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3eea:	ldr	r2, [pc, #100]	; (3f50 <uart2_status_isr+0xb0>)
    3eec:	ldrb	r3, [r2, #3]
    3eee:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3ef0:	lsls	r0, r3, #24
    3ef2:	bmi.n	3f18 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3ef4:	lsls	r2, r3, #25
    3ef6:	bpl.n	3f14 <uart2_status_isr+0x74>
    3ef8:	ldr	r3, [pc, #84]	; (3f50 <uart2_status_isr+0xb0>)
    3efa:	ldrb	r3, [r3, #4]
    3efc:	lsls	r3, r3, #25
    3efe:	bpl.n	3f14 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3f00:	ldr	r3, [pc, #100]	; (3f68 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f02:	ldr	r1, [pc, #104]	; (3f6c <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3f04:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f06:	movs	r2, #0
    3f08:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3f0a:	cbz	r3, 3f0e <uart2_status_isr+0x6e>
    3f0c:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3f0e:	ldr	r3, [pc, #64]	; (3f50 <uart2_status_isr+0xb0>)
    3f10:	movs	r2, #44	; 0x2c
    3f12:	strb	r2, [r3, #3]
	}
}
    3f14:	pop	{r4, r5}
    3f16:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3f18:	ldrb	r1, [r2, #4]
    3f1a:	lsls	r1, r1, #24
    3f1c:	bpl.n	3ef4 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3f1e:	ldr	r1, [pc, #80]	; (3f70 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3f20:	ldr	r0, [pc, #64]	; (3f64 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f22:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3f24:	ldrb	r1, [r0, #0]
    3f26:	uxtb	r1, r1
		if (head == tail) {
    3f28:	cmp	r4, r1
    3f2a:	beq.n	3f48 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3f2c:	adds	r2, r1, #1
    3f2e:	cmp	r2, #39	; 0x27
    3f30:	itt	hi
    3f32:	movhi	r1, #0
    3f34:	movhi	r2, r1
			n = tx_buffer[tail];
    3f36:	ldr	r5, [pc, #60]	; (3f74 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3f38:	ldr	r4, [pc, #20]	; (3f50 <uart2_status_isr+0xb0>)
    3f3a:	it	ls
    3f3c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3f3e:	ldrb	r2, [r5, r2]
    3f40:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3f42:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3f44:	strb	r1, [r0, #0]
    3f46:	b.n	3ef4 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3f48:	movs	r1, #108	; 0x6c
    3f4a:	strb	r1, [r2, #3]
    3f4c:	b.n	3ef4 <uart2_status_isr+0x54>
    3f4e:	nop
    3f50:	.word	0x4006c000
    3f54:	.word	0x1fff1c68
    3f58:	.word	0x1fff1c69
    3f5c:	.word	0x1fff1c94
    3f60:	.word	0x1fff1c64
    3f64:	.word	0x1fff1cd5
    3f68:	.word	0x1fff1cd8
    3f6c:	.word	0x1fff1cd4
    3f70:	.word	0x1fff1cdc
    3f74:	.word	0x1fff1c6c

00003f78 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3f78:	bx	lr
    3f7a:	nop

00003f7c <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3f7c:	bx	lr
    3f7e:	nop

00003f80 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3f80:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3f82:	mrs	r2, PRIMASK
		__disable_irq();
    3f86:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3f88:	ldrb	r3, [r0, #29]
    3f8a:	cbnz	r3, 3f9a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3f8c:	ldrb	r1, [r0, #28]
    3f8e:	cmp	r1, #1
    3f90:	beq.n	3fa4 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3f92:	cmp	r1, #3
    3f94:	beq.n	3fb8 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3f96:	movs	r3, #1
    3f98:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3f9a:	cbnz	r2, 3f9e <EventResponder::triggerEventNotImmediate()+0x1e>
    3f9c:	cpsie	i
	}
	enableInterrupts(irq);
}
    3f9e:	ldr.w	r4, [sp], #4
    3fa2:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3fa4:	ldr	r4, [pc, #68]	; (3fec <EventResponder::triggerEventNotImmediate()+0x6c>)
    3fa6:	ldr	r1, [r4, #0]
    3fa8:	cbz	r1, 3fd4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3faa:	ldr	r1, [pc, #68]	; (3ff0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3fac:	str	r3, [r0, #20]
				_prev = lastYield;
    3fae:	ldr	r3, [r1, #0]
    3fb0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3fb2:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3fb4:	str	r0, [r3, #20]
    3fb6:	b.n	3f96 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3fb8:	ldr	r4, [pc, #56]	; (3ff4 <EventResponder::triggerEventNotImmediate()+0x74>)
    3fba:	ldr	r1, [r4, #0]
    3fbc:	cbz	r1, 3fe0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3fbe:	ldr	r1, [pc, #56]	; (3ff8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3fc0:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3fc2:	ldr	r3, [r1, #0]
    3fc4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3fc6:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3fc8:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3fca:	ldr	r3, [pc, #48]	; (3ffc <EventResponder::triggerEventNotImmediate()+0x7c>)
    3fcc:	mov.w	r1, #268435456	; 0x10000000
    3fd0:	str	r1, [r3, #0]
    3fd2:	b.n	3f96 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3fd4:	ldr	r3, [pc, #24]	; (3ff0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3fd6:	str	r1, [r0, #20]
				_prev = nullptr;
    3fd8:	str	r1, [r0, #24]
				firstYield = this;
    3fda:	str	r0, [r4, #0]
				lastYield = this;
    3fdc:	str	r0, [r3, #0]
    3fde:	b.n	3f96 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3fe0:	ldr	r3, [pc, #20]	; (3ff8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3fe2:	str	r1, [r0, #20]
				_prev = nullptr;
    3fe4:	str	r1, [r0, #24]
				firstInterrupt = this;
    3fe6:	str	r0, [r4, #0]
				lastInterrupt = this;
    3fe8:	str	r0, [r3, #0]
    3fea:	b.n	3fca <EventResponder::triggerEventNotImmediate()+0x4a>
    3fec:	.word	0x1fff1cf0
    3ff0:	.word	0x1fff1cec
    3ff4:	.word	0x1fff1ce0
    3ff8:	.word	0x1fff1ce4
    3ffc:	.word	0xe000ed04

00004000 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4000:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4002:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4004:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4006:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4008:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    400a:	beq.n	4014 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    400c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4010:	b.w	3f80 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4014:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4016:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    401a:	bx	r3

0000401c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    401c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    401e:	mrs	r2, PRIMASK
		__disable_irq();
    4022:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4024:	ldr	r4, [pc, #48]	; (4058 <EventResponder::runFromInterrupt()+0x3c>)
    4026:	ldr	r0, [r4, #0]
		if (first) {
    4028:	cbz	r0, 404c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    402a:	ldr	r6, [pc, #48]	; (405c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    402c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    402e:	ldr	r3, [r0, #20]
    4030:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4032:	cbz	r3, 4052 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4034:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4036:	cbnz	r2, 403a <EventResponder::runFromInterrupt()+0x1e>
    4038:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    403a:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    403c:	ldr	r3, [r0, #8]
    403e:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4040:	mrs	r2, PRIMASK
		__disable_irq();
    4044:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4046:	ldr	r0, [r4, #0]
		if (first) {
    4048:	cmp	r0, #0
    404a:	bne.n	402e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    404c:	cbnz	r2, 4050 <EventResponder::runFromInterrupt()+0x34>
    404e:	cpsie	i
    4050:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4052:	str	r3, [r6, #0]
    4054:	b.n	4036 <EventResponder::runFromInterrupt()+0x1a>
    4056:	nop
    4058:	.word	0x1fff1ce0
    405c:	.word	0x1fff1ce4

00004060 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4060:	b.w	401c <EventResponder::runFromInterrupt()>

00004064 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4064:	ldr	r2, [pc, #96]	; (40c8 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4066:	push	{r4, r5}
	if (listActive == nullptr) {
    4068:	ldr	r4, [r2, #0]
    406a:	cmp	r4, #0
    406c:	beq.n	40be <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    406e:	ldr	r3, [r0, #0]
    4070:	ldr	r1, [r4, #0]
    4072:	cmp	r3, r1
    4074:	bcs.n	4094 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4076:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4078:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    407a:	str	r4, [r0, #8]
		_prev = nullptr;
    407c:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    407e:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4080:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4082:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4084:	movs	r3, #2
    4086:	strb	r3, [r0, #20]
}
    4088:	pop	{r4, r5}
    408a:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    408c:	ldr	r1, [r2, #0]
    408e:	cmp	r3, r1
    4090:	mov	r4, r2
    4092:	bcc.n	40a6 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4094:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4096:	subs	r3, r3, r1
    4098:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    409a:	cmp	r2, #0
    409c:	bne.n	408c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    409e:	str	r2, [r0, #8]
		_prev = timer;
    40a0:	str	r4, [r0, #12]
		timer->_next = this;
    40a2:	str	r0, [r4, #8]
    40a4:	b.n	4084 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    40a6:	ldr	r2, [r2, #12]
    40a8:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    40aa:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    40ac:	str	r0, [r4, #12]
				_prev->_next = this;
    40ae:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    40b0:	subs	r3, r1, r3
				_state = TimerActive;
    40b2:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    40b4:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    40b6:	str	r3, [r4, #0]
				_state = TimerActive;
    40b8:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    40ba:	pop	{r4, r5}
    40bc:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    40be:	str	r4, [r0, #8]
		_prev = nullptr;
    40c0:	str	r4, [r0, #12]
		listActive = this;
    40c2:	str	r0, [r2, #0]
    40c4:	b.n	4084 <MillisTimer::addToActiveList()+0x20>
    40c6:	nop
    40c8:	.word	0x1fff1ce8

000040cc <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    40cc:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    40ce:	ldr	r6, [pc, #136]	; (4158 <MillisTimer::runFromTimer()+0x8c>)
    40d0:	ldr	r4, [r6, #0]
	while (timer) {
    40d2:	cbz	r4, 4120 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    40d4:	ldr	r3, [r4, #0]
    40d6:	cmp	r3, #0
    40d8:	bne.n	4150 <MillisTimer::runFromTimer()+0x84>
    40da:	ldr	r7, [pc, #128]	; (415c <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    40dc:	mov	r5, r3
    40de:	b.n	40ea <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    40e0:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    40e2:	cbz	r4, 4120 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    40e4:	ldr	r3, [r4, #0]
    40e6:	cmp	r3, #0
    40e8:	bne.n	4150 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    40ea:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    40ec:	cbz	r3, 40f0 <MillisTimer::runFromTimer()+0x24>
    40ee:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    40f0:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    40f2:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    40f4:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    40f6:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    40f8:	ldr	r3, [r3, #0]
    40fa:	cmp	r3, r7
    40fc:	bne.n	4142 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    40fe:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4100:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4102:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4104:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4106:	beq.n	414a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4108:	bl	3f80 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    410c:	ldr	r3, [r4, #4]
    410e:	cmp	r3, #0
    4110:	beq.n	40e0 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4112:	str	r3, [r4, #0]
				timer->addToActiveList();
    4114:	mov	r0, r4
    4116:	bl	4064 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    411a:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    411c:	cmp	r4, #0
    411e:	bne.n	40e4 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4120:	mrs	r3, PRIMASK
		__disable_irq();
    4124:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4126:	ldr	r2, [pc, #56]	; (4160 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4128:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    412a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    412c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    412e:	cbnz	r3, 4132 <MillisTimer::runFromTimer()+0x66>
    4130:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4132:	cbz	r0, 4140 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4134:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4136:	bl	4064 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    413a:	mov	r0, r4
    413c:	cmp	r0, #0
    413e:	bne.n	4134 <MillisTimer::runFromTimer()+0x68>
    4140:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4142:	mov	r2, r4
    4144:	movs	r1, #0
    4146:	blx	r3
    4148:	b.n	410c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    414a:	ldr	r3, [r0, #8]
    414c:	blx	r3
    414e:	b.n	410c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4150:	subs	r3, #1
    4152:	str	r3, [r4, #0]
			break;
    4154:	b.n	4120 <MillisTimer::runFromTimer()+0x54>
    4156:	nop
    4158:	.word	0x1fff1ce8
    415c:	.word	0x00004001
    4160:	.word	0x1fff1cf8

00004164 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4164:	ldr	r2, [pc, #8]	; (4170 <systick_isr+0xc>)
    4166:	ldr	r3, [r2, #0]
    4168:	adds	r3, #1
    416a:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    416c:	b.w	40cc <MillisTimer::runFromTimer()>
    4170:	.word	0x1fff1880

00004174 <__errno>:
    4174:	ldr	r3, [pc, #4]	; (417c <__errno+0x8>)
    4176:	ldr	r0, [r3, #0]
    4178:	bx	lr
    417a:	nop
    417c:	.word	0x1fff11a8

00004180 <__libc_init_array>:
    4180:	push	{r4, r5, r6, lr}
    4182:	ldr	r6, [pc, #60]	; (41c0 <__libc_init_array+0x40>)
    4184:	ldr	r5, [pc, #60]	; (41c4 <__libc_init_array+0x44>)
    4186:	subs	r6, r6, r5
    4188:	asrs	r6, r6, #2
    418a:	it	ne
    418c:	movne	r4, #0
    418e:	beq.n	419c <__libc_init_array+0x1c>
    4190:	adds	r4, #1
    4192:	ldr.w	r3, [r5], #4
    4196:	blx	r3
    4198:	cmp	r6, r4
    419a:	bne.n	4190 <__libc_init_array+0x10>
    419c:	ldr	r6, [pc, #40]	; (41c8 <__libc_init_array+0x48>)
    419e:	ldr	r5, [pc, #44]	; (41cc <__libc_init_array+0x4c>)
    41a0:	subs	r6, r6, r5
    41a2:	bl	4df4 <_init>
    41a6:	asrs	r6, r6, #2
    41a8:	it	ne
    41aa:	movne	r4, #0
    41ac:	beq.n	41bc <__libc_init_array+0x3c>
    41ae:	adds	r4, #1
    41b0:	ldr.w	r3, [r5], #4
    41b4:	blx	r3
    41b6:	cmp	r6, r4
    41b8:	bne.n	41ae <__libc_init_array+0x2e>
    41ba:	pop	{r4, r5, r6, pc}
    41bc:	pop	{r4, r5, r6, pc}
    41be:	nop
    41c0:	.word	0x00004e00
    41c4:	.word	0x00004e00
    41c8:	.word	0x00004e0c
    41cc:	.word	0x00004e00

000041d0 <malloc>:
    41d0:	ldr	r3, [pc, #8]	; (41dc <malloc+0xc>)
    41d2:	mov	r1, r0
    41d4:	ldr	r0, [r3, #0]
    41d6:	b.w	41e0 <_malloc_r>
    41da:	nop
    41dc:	.word	0x1fff11a8

000041e0 <_malloc_r>:
    41e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41e4:	add.w	r5, r1, #11
    41e8:	cmp	r5, #22
    41ea:	sub	sp, #12
    41ec:	mov	r6, r0
    41ee:	bls.w	4330 <_malloc_r+0x150>
    41f2:	bics.w	r5, r5, #7
    41f6:	bmi.w	4378 <_malloc_r+0x198>
    41fa:	cmp	r1, r5
    41fc:	bhi.w	4378 <_malloc_r+0x198>
    4200:	bl	4750 <__malloc_lock>
    4204:	cmp.w	r5, #504	; 0x1f8
    4208:	bcc.w	4744 <_malloc_r+0x564>
    420c:	lsrs	r3, r5, #9
    420e:	beq.w	4386 <_malloc_r+0x1a6>
    4212:	cmp	r3, #4
    4214:	bhi.w	451e <_malloc_r+0x33e>
    4218:	lsrs	r0, r5, #6
    421a:	add.w	lr, r0, #57	; 0x39
    421e:	mov.w	r3, lr, lsl #1
    4222:	adds	r0, #56	; 0x38
    4224:	ldr	r7, [pc, #784]	; (4538 <_malloc_r+0x358>)
    4226:	add.w	r3, r7, r3, lsl #2
    422a:	sub.w	r1, r3, #8
    422e:	ldr	r4, [r3, #4]
    4230:	cmp	r1, r4
    4232:	bne.n	4244 <_malloc_r+0x64>
    4234:	b.n	4390 <_malloc_r+0x1b0>
    4236:	cmp	r2, #0
    4238:	bge.w	4394 <_malloc_r+0x1b4>
    423c:	ldr	r4, [r4, #12]
    423e:	cmp	r1, r4
    4240:	beq.w	4390 <_malloc_r+0x1b0>
    4244:	ldr	r3, [r4, #4]
    4246:	bic.w	r3, r3, #3
    424a:	subs	r2, r3, r5
    424c:	cmp	r2, #15
    424e:	ble.n	4236 <_malloc_r+0x56>
    4250:	ldr	r1, [pc, #740]	; (4538 <_malloc_r+0x358>)
    4252:	ldr	r4, [r7, #16]
    4254:	add.w	lr, r1, #8
    4258:	cmp	r4, lr
    425a:	beq.w	45c4 <_malloc_r+0x3e4>
    425e:	ldr	r3, [r4, #4]
    4260:	bic.w	r3, r3, #3
    4264:	subs	r2, r3, r5
    4266:	cmp	r2, #15
    4268:	bgt.w	459e <_malloc_r+0x3be>
    426c:	cmp	r2, #0
    426e:	str.w	lr, [r1, #20]
    4272:	str.w	lr, [r1, #16]
    4276:	bge.w	43b6 <_malloc_r+0x1d6>
    427a:	cmp.w	r3, #512	; 0x200
    427e:	bcs.w	4550 <_malloc_r+0x370>
    4282:	lsrs	r3, r3, #3
    4284:	add.w	ip, r3, #1
    4288:	movs	r2, #1
    428a:	asrs	r3, r3, #2
    428c:	lsl.w	r3, r2, r3
    4290:	ldr	r2, [r1, #4]
    4292:	ldr.w	r8, [r1, ip, lsl #3]
    4296:	str.w	r8, [r4, #8]
    429a:	add.w	r9, r1, ip, lsl #3
    429e:	orrs	r2, r3
    42a0:	sub.w	r3, r9, #8
    42a4:	str	r3, [r4, #12]
    42a6:	str	r2, [r1, #4]
    42a8:	str.w	r4, [r1, ip, lsl #3]
    42ac:	str.w	r4, [r8, #12]
    42b0:	asrs	r3, r0, #2
    42b2:	movs	r4, #1
    42b4:	lsls	r4, r3
    42b6:	cmp	r4, r2
    42b8:	bhi.w	43d0 <_malloc_r+0x1f0>
    42bc:	tst	r4, r2
    42be:	bne.n	42ce <_malloc_r+0xee>
    42c0:	bic.w	r0, r0, #3
    42c4:	lsls	r4, r4, #1
    42c6:	tst	r4, r2
    42c8:	add.w	r0, r0, #4
    42cc:	beq.n	42c4 <_malloc_r+0xe4>
    42ce:	add.w	r9, r7, r0, lsl #3
    42d2:	mov	ip, r9
    42d4:	mov	r8, r0
    42d6:	ldr.w	r1, [ip, #12]
    42da:	cmp	ip, r1
    42dc:	bne.n	42ee <_malloc_r+0x10e>
    42de:	b.n	45c8 <_malloc_r+0x3e8>
    42e0:	cmp	r2, #0
    42e2:	bge.w	45e8 <_malloc_r+0x408>
    42e6:	ldr	r1, [r1, #12]
    42e8:	cmp	ip, r1
    42ea:	beq.w	45c8 <_malloc_r+0x3e8>
    42ee:	ldr	r3, [r1, #4]
    42f0:	bic.w	r3, r3, #3
    42f4:	subs	r2, r3, r5
    42f6:	cmp	r2, #15
    42f8:	ble.n	42e0 <_malloc_r+0x100>
    42fa:	mov	r4, r1
    42fc:	ldr.w	ip, [r1, #12]
    4300:	ldr.w	r8, [r4, #8]!
    4304:	adds	r3, r1, r5
    4306:	orr.w	r5, r5, #1
    430a:	str	r5, [r1, #4]
    430c:	orr.w	r1, r2, #1
    4310:	str.w	ip, [r8, #12]
    4314:	mov	r0, r6
    4316:	str.w	r8, [ip, #8]
    431a:	str	r3, [r7, #20]
    431c:	str	r3, [r7, #16]
    431e:	str.w	lr, [r3, #12]
    4322:	str.w	lr, [r3, #8]
    4326:	str	r1, [r3, #4]
    4328:	str	r2, [r3, r2]
    432a:	bl	4754 <__malloc_unlock>
    432e:	b.n	4370 <_malloc_r+0x190>
    4330:	cmp	r1, #16
    4332:	bhi.n	4378 <_malloc_r+0x198>
    4334:	bl	4750 <__malloc_lock>
    4338:	movs	r5, #16
    433a:	movs	r3, #6
    433c:	movs	r0, #2
    433e:	ldr	r7, [pc, #504]	; (4538 <_malloc_r+0x358>)
    4340:	add.w	r3, r7, r3, lsl #2
    4344:	sub.w	r2, r3, #8
    4348:	ldr	r4, [r3, #4]
    434a:	cmp	r4, r2
    434c:	beq.w	45da <_malloc_r+0x3fa>
    4350:	ldr	r3, [r4, #4]
    4352:	ldr	r1, [r4, #12]
    4354:	ldr	r5, [r4, #8]
    4356:	bic.w	r3, r3, #3
    435a:	add	r3, r4
    435c:	mov	r0, r6
    435e:	ldr	r2, [r3, #4]
    4360:	str	r1, [r5, #12]
    4362:	orr.w	r2, r2, #1
    4366:	str	r5, [r1, #8]
    4368:	str	r2, [r3, #4]
    436a:	bl	4754 <__malloc_unlock>
    436e:	adds	r4, #8
    4370:	mov	r0, r4
    4372:	add	sp, #12
    4374:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4378:	movs	r4, #0
    437a:	movs	r3, #12
    437c:	mov	r0, r4
    437e:	str	r3, [r6, #0]
    4380:	add	sp, #12
    4382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4386:	movs	r3, #128	; 0x80
    4388:	mov.w	lr, #64	; 0x40
    438c:	movs	r0, #63	; 0x3f
    438e:	b.n	4224 <_malloc_r+0x44>
    4390:	mov	r0, lr
    4392:	b.n	4250 <_malloc_r+0x70>
    4394:	add	r3, r4
    4396:	ldr	r1, [r4, #12]
    4398:	ldr	r2, [r3, #4]
    439a:	ldr	r5, [r4, #8]
    439c:	orr.w	r2, r2, #1
    43a0:	str	r1, [r5, #12]
    43a2:	mov	r0, r6
    43a4:	str	r5, [r1, #8]
    43a6:	str	r2, [r3, #4]
    43a8:	bl	4754 <__malloc_unlock>
    43ac:	adds	r4, #8
    43ae:	mov	r0, r4
    43b0:	add	sp, #12
    43b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43b6:	add	r3, r4
    43b8:	mov	r0, r6
    43ba:	ldr	r2, [r3, #4]
    43bc:	orr.w	r2, r2, #1
    43c0:	str	r2, [r3, #4]
    43c2:	bl	4754 <__malloc_unlock>
    43c6:	adds	r4, #8
    43c8:	mov	r0, r4
    43ca:	add	sp, #12
    43cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43d0:	ldr	r4, [r7, #8]
    43d2:	ldr	r3, [r4, #4]
    43d4:	bic.w	r8, r3, #3
    43d8:	cmp	r8, r5
    43da:	bcc.n	43e6 <_malloc_r+0x206>
    43dc:	rsb	r3, r5, r8
    43e0:	cmp	r3, #15
    43e2:	bgt.w	44fe <_malloc_r+0x31e>
    43e6:	ldr	r3, [pc, #340]	; (453c <_malloc_r+0x35c>)
    43e8:	ldr.w	r9, [pc, #352]	; 454c <_malloc_r+0x36c>
    43ec:	ldr	r2, [r3, #0]
    43ee:	ldr.w	r3, [r9]
    43f2:	adds	r3, #1
    43f4:	add	r2, r5
    43f6:	add.w	sl, r4, r8
    43fa:	beq.w	46be <_malloc_r+0x4de>
    43fe:	add.w	r2, r2, #4096	; 0x1000
    4402:	adds	r2, #15
    4404:	bic.w	r2, r2, #4080	; 0xff0
    4408:	bic.w	r2, r2, #15
    440c:	mov	r1, r2
    440e:	mov	r0, r6
    4410:	str	r2, [sp, #4]
    4412:	bl	4758 <_sbrk_r>
    4416:	cmp.w	r0, #4294967295
    441a:	mov	fp, r0
    441c:	ldr	r2, [sp, #4]
    441e:	beq.w	46d2 <_malloc_r+0x4f2>
    4422:	cmp	sl, r0
    4424:	bhi.w	4620 <_malloc_r+0x440>
    4428:	ldr	r3, [pc, #276]	; (4540 <_malloc_r+0x360>)
    442a:	ldr	r1, [r3, #0]
    442c:	cmp	sl, fp
    442e:	add	r1, r2
    4430:	str	r1, [r3, #0]
    4432:	beq.w	46dc <_malloc_r+0x4fc>
    4436:	ldr.w	r0, [r9]
    443a:	ldr.w	lr, [pc, #272]	; 454c <_malloc_r+0x36c>
    443e:	adds	r0, #1
    4440:	ittet	ne
    4442:	rsbne	sl, sl, fp
    4446:	addne	r1, sl
    4448:	streq.w	fp, [lr]
    444c:	strne	r1, [r3, #0]
    444e:	ands.w	r1, fp, #7
    4452:	beq.w	4684 <_malloc_r+0x4a4>
    4456:	rsb	r0, r1, #8
    445a:	rsb	r1, r1, #4096	; 0x1000
    445e:	add	fp, r0
    4460:	adds	r1, #8
    4462:	add	r2, fp
    4464:	ubfx	r2, r2, #0, #12
    4468:	rsb	r9, r2, r1
    446c:	mov	r1, r9
    446e:	mov	r0, r6
    4470:	str	r3, [sp, #4]
    4472:	bl	4758 <_sbrk_r>
    4476:	adds	r3, r0, #1
    4478:	ldr	r3, [sp, #4]
    447a:	beq.w	46fc <_malloc_r+0x51c>
    447e:	rsb	r2, fp, r0
    4482:	add	r2, r9
    4484:	orr.w	r2, r2, #1
    4488:	ldr	r1, [r3, #0]
    448a:	str.w	fp, [r7, #8]
    448e:	add	r1, r9
    4490:	cmp	r4, r7
    4492:	str.w	r2, [fp, #4]
    4496:	str	r1, [r3, #0]
    4498:	ldr.w	r9, [pc, #164]	; 4540 <_malloc_r+0x360>
    449c:	beq.n	44cc <_malloc_r+0x2ec>
    449e:	cmp.w	r8, #15
    44a2:	bls.w	46a0 <_malloc_r+0x4c0>
    44a6:	ldr	r2, [r4, #4]
    44a8:	sub.w	r3, r8, #12
    44ac:	bic.w	r3, r3, #7
    44b0:	adds	r0, r4, r3
    44b2:	and.w	r2, r2, #1
    44b6:	mov.w	lr, #5
    44ba:	orrs	r2, r3
    44bc:	cmp	r3, #15
    44be:	str	r2, [r4, #4]
    44c0:	str.w	lr, [r0, #4]
    44c4:	str.w	lr, [r0, #8]
    44c8:	bhi.w	4704 <_malloc_r+0x524>
    44cc:	ldr	r3, [pc, #116]	; (4544 <_malloc_r+0x364>)
    44ce:	ldr	r4, [r7, #8]
    44d0:	ldr	r2, [r3, #0]
    44d2:	cmp	r1, r2
    44d4:	it	hi
    44d6:	strhi	r1, [r3, #0]
    44d8:	ldr	r3, [pc, #108]	; (4548 <_malloc_r+0x368>)
    44da:	ldr	r2, [r3, #0]
    44dc:	cmp	r1, r2
    44de:	ldr	r2, [r4, #4]
    44e0:	it	hi
    44e2:	strhi	r1, [r3, #0]
    44e4:	bic.w	r2, r2, #3
    44e8:	cmp	r5, r2
    44ea:	sub.w	r3, r2, r5
    44ee:	bhi.n	44f4 <_malloc_r+0x314>
    44f0:	cmp	r3, #15
    44f2:	bgt.n	44fe <_malloc_r+0x31e>
    44f4:	mov	r0, r6
    44f6:	bl	4754 <__malloc_unlock>
    44fa:	movs	r4, #0
    44fc:	b.n	4370 <_malloc_r+0x190>
    44fe:	adds	r2, r4, r5
    4500:	orr.w	r3, r3, #1
    4504:	orr.w	r5, r5, #1
    4508:	str	r5, [r4, #4]
    450a:	mov	r0, r6
    450c:	str	r2, [r7, #8]
    450e:	str	r3, [r2, #4]
    4510:	bl	4754 <__malloc_unlock>
    4514:	adds	r4, #8
    4516:	mov	r0, r4
    4518:	add	sp, #12
    451a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    451e:	cmp	r3, #20
    4520:	bls.n	4606 <_malloc_r+0x426>
    4522:	cmp	r3, #84	; 0x54
    4524:	bhi.w	4670 <_malloc_r+0x490>
    4528:	lsrs	r0, r5, #12
    452a:	add.w	lr, r0, #111	; 0x6f
    452e:	mov.w	r3, lr, lsl #1
    4532:	adds	r0, #110	; 0x6e
    4534:	b.n	4224 <_malloc_r+0x44>
    4536:	nop
    4538:	.word	0x1fff11ac
    453c:	.word	0x1fff1d04
    4540:	.word	0x1fff1d08
    4544:	.word	0x1fff1d00
    4548:	.word	0x1fff1cfc
    454c:	.word	0x1fff15b8
    4550:	lsrs	r2, r3, #9
    4552:	cmp	r2, #4
    4554:	bls.n	4614 <_malloc_r+0x434>
    4556:	cmp	r2, #20
    4558:	bhi.w	46c2 <_malloc_r+0x4e2>
    455c:	add.w	r1, r2, #92	; 0x5c
    4560:	lsls	r1, r1, #1
    4562:	adds	r2, #91	; 0x5b
    4564:	add.w	ip, r7, r1, lsl #2
    4568:	ldr.w	r1, [r7, r1, lsl #2]
    456c:	ldr.w	r8, [pc, #476]	; 474c <_malloc_r+0x56c>
    4570:	sub.w	ip, ip, #8
    4574:	cmp	ip, r1
    4576:	beq.w	468a <_malloc_r+0x4aa>
    457a:	ldr	r2, [r1, #4]
    457c:	bic.w	r2, r2, #3
    4580:	cmp	r3, r2
    4582:	bcs.n	458a <_malloc_r+0x3aa>
    4584:	ldr	r1, [r1, #8]
    4586:	cmp	ip, r1
    4588:	bne.n	457a <_malloc_r+0x39a>
    458a:	ldr.w	ip, [r1, #12]
    458e:	ldr	r2, [r7, #4]
    4590:	str.w	ip, [r4, #12]
    4594:	str	r1, [r4, #8]
    4596:	str.w	r4, [ip, #8]
    459a:	str	r4, [r1, #12]
    459c:	b.n	42b0 <_malloc_r+0xd0>
    459e:	adds	r3, r4, r5
    45a0:	orr.w	r7, r2, #1
    45a4:	orr.w	r5, r5, #1
    45a8:	str	r5, [r4, #4]
    45aa:	mov	r0, r6
    45ac:	str	r3, [r1, #20]
    45ae:	str	r3, [r1, #16]
    45b0:	str.w	lr, [r3, #12]
    45b4:	str.w	lr, [r3, #8]
    45b8:	str	r7, [r3, #4]
    45ba:	str	r2, [r3, r2]
    45bc:	adds	r4, #8
    45be:	bl	4754 <__malloc_unlock>
    45c2:	b.n	4370 <_malloc_r+0x190>
    45c4:	ldr	r2, [r1, #4]
    45c6:	b.n	42b0 <_malloc_r+0xd0>
    45c8:	add.w	r8, r8, #1
    45cc:	tst.w	r8, #3
    45d0:	add.w	ip, ip, #8
    45d4:	bne.w	42d6 <_malloc_r+0xf6>
    45d8:	b.n	463c <_malloc_r+0x45c>
    45da:	ldr	r4, [r3, #12]
    45dc:	cmp	r3, r4
    45de:	it	eq
    45e0:	addeq	r0, #2
    45e2:	beq.w	4250 <_malloc_r+0x70>
    45e6:	b.n	4350 <_malloc_r+0x170>
    45e8:	add	r3, r1
    45ea:	mov	r4, r1
    45ec:	ldr	r2, [r3, #4]
    45ee:	ldr	r1, [r1, #12]
    45f0:	ldr.w	r5, [r4, #8]!
    45f4:	orr.w	r2, r2, #1
    45f8:	str	r2, [r3, #4]
    45fa:	mov	r0, r6
    45fc:	str	r1, [r5, #12]
    45fe:	str	r5, [r1, #8]
    4600:	bl	4754 <__malloc_unlock>
    4604:	b.n	4370 <_malloc_r+0x190>
    4606:	add.w	lr, r3, #92	; 0x5c
    460a:	add.w	r0, r3, #91	; 0x5b
    460e:	mov.w	r3, lr, lsl #1
    4612:	b.n	4224 <_malloc_r+0x44>
    4614:	lsrs	r2, r3, #6
    4616:	add.w	r1, r2, #57	; 0x39
    461a:	lsls	r1, r1, #1
    461c:	adds	r2, #56	; 0x38
    461e:	b.n	4564 <_malloc_r+0x384>
    4620:	cmp	r4, r7
    4622:	ldr	r3, [pc, #296]	; (474c <_malloc_r+0x56c>)
    4624:	beq.w	4428 <_malloc_r+0x248>
    4628:	ldr	r4, [r3, #8]
    462a:	ldr	r2, [r4, #4]
    462c:	bic.w	r2, r2, #3
    4630:	b.n	44e8 <_malloc_r+0x308>
    4632:	ldr.w	r3, [r9], #-8
    4636:	cmp	r9, r3
    4638:	bne.w	4740 <_malloc_r+0x560>
    463c:	tst.w	r0, #3
    4640:	add.w	r0, r0, #4294967295
    4644:	bne.n	4632 <_malloc_r+0x452>
    4646:	ldr	r3, [r7, #4]
    4648:	bic.w	r3, r3, r4
    464c:	str	r3, [r7, #4]
    464e:	lsls	r4, r4, #1
    4650:	cmp	r4, r3
    4652:	bhi.w	43d0 <_malloc_r+0x1f0>
    4656:	cmp	r4, #0
    4658:	beq.w	43d0 <_malloc_r+0x1f0>
    465c:	tst	r4, r3
    465e:	mov	r0, r8
    4660:	bne.w	42ce <_malloc_r+0xee>
    4664:	lsls	r4, r4, #1
    4666:	tst	r4, r3
    4668:	add.w	r0, r0, #4
    466c:	beq.n	4664 <_malloc_r+0x484>
    466e:	b.n	42ce <_malloc_r+0xee>
    4670:	cmp.w	r3, #340	; 0x154
    4674:	bhi.n	46a8 <_malloc_r+0x4c8>
    4676:	lsrs	r0, r5, #15
    4678:	add.w	lr, r0, #120	; 0x78
    467c:	mov.w	r3, lr, lsl #1
    4680:	adds	r0, #119	; 0x77
    4682:	b.n	4224 <_malloc_r+0x44>
    4684:	mov.w	r1, #4096	; 0x1000
    4688:	b.n	4462 <_malloc_r+0x282>
    468a:	movs	r1, #1
    468c:	ldr.w	r3, [r8, #4]
    4690:	asrs	r2, r2, #2
    4692:	lsl.w	r2, r1, r2
    4696:	orrs	r2, r3
    4698:	str.w	r2, [r8, #4]
    469c:	mov	r1, ip
    469e:	b.n	4590 <_malloc_r+0x3b0>
    46a0:	movs	r3, #1
    46a2:	str.w	r3, [fp, #4]
    46a6:	b.n	44f4 <_malloc_r+0x314>
    46a8:	movw	r2, #1364	; 0x554
    46ac:	cmp	r3, r2
    46ae:	bhi.n	46f2 <_malloc_r+0x512>
    46b0:	lsrs	r0, r5, #18
    46b2:	add.w	lr, r0, #125	; 0x7d
    46b6:	mov.w	r3, lr, lsl #1
    46ba:	adds	r0, #124	; 0x7c
    46bc:	b.n	4224 <_malloc_r+0x44>
    46be:	adds	r2, #16
    46c0:	b.n	440c <_malloc_r+0x22c>
    46c2:	cmp	r2, #84	; 0x54
    46c4:	bhi.n	4714 <_malloc_r+0x534>
    46c6:	lsrs	r2, r3, #12
    46c8:	add.w	r1, r2, #111	; 0x6f
    46cc:	lsls	r1, r1, #1
    46ce:	adds	r2, #110	; 0x6e
    46d0:	b.n	4564 <_malloc_r+0x384>
    46d2:	ldr	r4, [r7, #8]
    46d4:	ldr	r2, [r4, #4]
    46d6:	bic.w	r2, r2, #3
    46da:	b.n	44e8 <_malloc_r+0x308>
    46dc:	ubfx	r0, sl, #0, #12
    46e0:	cmp	r0, #0
    46e2:	bne.w	4436 <_malloc_r+0x256>
    46e6:	add	r2, r8
    46e8:	ldr	r3, [r7, #8]
    46ea:	orr.w	r2, r2, #1
    46ee:	str	r2, [r3, #4]
    46f0:	b.n	44cc <_malloc_r+0x2ec>
    46f2:	movs	r3, #254	; 0xfe
    46f4:	mov.w	lr, #127	; 0x7f
    46f8:	movs	r0, #126	; 0x7e
    46fa:	b.n	4224 <_malloc_r+0x44>
    46fc:	movs	r2, #1
    46fe:	mov.w	r9, #0
    4702:	b.n	4488 <_malloc_r+0x2a8>
    4704:	add.w	r1, r4, #8
    4708:	mov	r0, r6
    470a:	bl	4860 <_free_r>
    470e:	ldr.w	r1, [r9]
    4712:	b.n	44cc <_malloc_r+0x2ec>
    4714:	cmp.w	r2, #340	; 0x154
    4718:	bhi.n	4726 <_malloc_r+0x546>
    471a:	lsrs	r2, r3, #15
    471c:	add.w	r1, r2, #120	; 0x78
    4720:	lsls	r1, r1, #1
    4722:	adds	r2, #119	; 0x77
    4724:	b.n	4564 <_malloc_r+0x384>
    4726:	movw	r1, #1364	; 0x554
    472a:	cmp	r2, r1
    472c:	bhi.n	473a <_malloc_r+0x55a>
    472e:	lsrs	r2, r3, #18
    4730:	add.w	r1, r2, #125	; 0x7d
    4734:	lsls	r1, r1, #1
    4736:	adds	r2, #124	; 0x7c
    4738:	b.n	4564 <_malloc_r+0x384>
    473a:	movs	r1, #254	; 0xfe
    473c:	movs	r2, #126	; 0x7e
    473e:	b.n	4564 <_malloc_r+0x384>
    4740:	ldr	r3, [r7, #4]
    4742:	b.n	464e <_malloc_r+0x46e>
    4744:	lsrs	r0, r5, #3
    4746:	adds	r3, r0, #1
    4748:	lsls	r3, r3, #1
    474a:	b.n	433e <_malloc_r+0x15e>
    474c:	.word	0x1fff11ac

00004750 <__malloc_lock>:
    4750:	bx	lr
    4752:	nop

00004754 <__malloc_unlock>:
    4754:	bx	lr
    4756:	nop

00004758 <_sbrk_r>:
    4758:	push	{r3, r4, r5, lr}
    475a:	ldr	r4, [pc, #28]	; (4778 <_sbrk_r+0x20>)
    475c:	movs	r3, #0
    475e:	mov	r5, r0
    4760:	mov	r0, r1
    4762:	str	r3, [r4, #0]
    4764:	bl	3aec <_sbrk>
    4768:	adds	r3, r0, #1
    476a:	beq.n	476e <_sbrk_r+0x16>
    476c:	pop	{r3, r4, r5, pc}
    476e:	ldr	r3, [r4, #0]
    4770:	cmp	r3, #0
    4772:	beq.n	476c <_sbrk_r+0x14>
    4774:	str	r3, [r5, #0]
    4776:	pop	{r3, r4, r5, pc}
    4778:	.word	0x1fff1e74

0000477c <register_fini>:
    477c:	ldr	r3, [pc, #8]	; (4788 <register_fini+0xc>)
    477e:	cbz	r3, 4786 <register_fini+0xa>
    4780:	ldr	r0, [pc, #8]	; (478c <register_fini+0x10>)
    4782:	b.w	4790 <atexit>
    4786:	bx	lr
    4788:	.word	0x00000000
    478c:	.word	0x0000479d

00004790 <atexit>:
    4790:	movs	r3, #0
    4792:	mov	r1, r0
    4794:	mov	r2, r3
    4796:	mov	r0, r3
    4798:	b.w	4a30 <__register_exitproc>

0000479c <__libc_fini_array>:
    479c:	push	{r3, r4, r5, lr}
    479e:	ldr	r5, [pc, #28]	; (47bc <__libc_fini_array+0x20>)
    47a0:	ldr	r4, [pc, #28]	; (47c0 <__libc_fini_array+0x24>)
    47a2:	subs	r4, r5, r4
    47a4:	asrs	r4, r4, #2
    47a6:	beq.n	47b4 <__libc_fini_array+0x18>
    47a8:	subs	r4, #1
    47aa:	ldr.w	r3, [r5, #-4]!
    47ae:	blx	r3
    47b0:	cmp	r4, #0
    47b2:	bne.n	47a8 <__libc_fini_array+0xc>
    47b4:	ldmia.w	sp!, {r3, r4, r5, lr}
    47b8:	b.w	4e0c <__init_array_end>
	...

000047c4 <_malloc_trim_r>:
    47c4:	push	{r3, r4, r5, r6, r7, lr}
    47c6:	ldr	r7, [pc, #140]	; (4854 <_malloc_trim_r+0x90>)
    47c8:	mov	r4, r1
    47ca:	mov	r6, r0
    47cc:	bl	4750 <__malloc_lock>
    47d0:	ldr	r3, [r7, #8]
    47d2:	ldr	r5, [r3, #4]
    47d4:	bic.w	r5, r5, #3
    47d8:	subs	r1, r5, r4
    47da:	addw	r1, r1, #4079	; 0xfef
    47de:	bic.w	r1, r1, #4080	; 0xff0
    47e2:	bic.w	r1, r1, #15
    47e6:	sub.w	r4, r1, #4096	; 0x1000
    47ea:	cmp.w	r4, #4096	; 0x1000
    47ee:	blt.n	4800 <_malloc_trim_r+0x3c>
    47f0:	movs	r1, #0
    47f2:	mov	r0, r6
    47f4:	bl	4758 <_sbrk_r>
    47f8:	ldr	r3, [r7, #8]
    47fa:	add	r3, r5
    47fc:	cmp	r0, r3
    47fe:	beq.n	480a <_malloc_trim_r+0x46>
    4800:	mov	r0, r6
    4802:	bl	4754 <__malloc_unlock>
    4806:	movs	r0, #0
    4808:	pop	{r3, r4, r5, r6, r7, pc}
    480a:	negs	r1, r4
    480c:	mov	r0, r6
    480e:	bl	4758 <_sbrk_r>
    4812:	adds	r0, #1
    4814:	beq.n	4832 <_malloc_trim_r+0x6e>
    4816:	ldr	r3, [pc, #64]	; (4858 <_malloc_trim_r+0x94>)
    4818:	ldr	r2, [r7, #8]
    481a:	ldr	r1, [r3, #0]
    481c:	subs	r5, r5, r4
    481e:	orr.w	r5, r5, #1
    4822:	mov	r0, r6
    4824:	subs	r1, r1, r4
    4826:	str	r5, [r2, #4]
    4828:	str	r1, [r3, #0]
    482a:	bl	4754 <__malloc_unlock>
    482e:	movs	r0, #1
    4830:	pop	{r3, r4, r5, r6, r7, pc}
    4832:	movs	r1, #0
    4834:	mov	r0, r6
    4836:	bl	4758 <_sbrk_r>
    483a:	ldr	r2, [r7, #8]
    483c:	subs	r3, r0, r2
    483e:	cmp	r3, #15
    4840:	ble.n	4800 <_malloc_trim_r+0x3c>
    4842:	ldr	r4, [pc, #24]	; (485c <_malloc_trim_r+0x98>)
    4844:	ldr	r1, [pc, #16]	; (4858 <_malloc_trim_r+0x94>)
    4846:	ldr	r4, [r4, #0]
    4848:	orr.w	r3, r3, #1
    484c:	subs	r0, r0, r4
    484e:	str	r3, [r2, #4]
    4850:	str	r0, [r1, #0]
    4852:	b.n	4800 <_malloc_trim_r+0x3c>
    4854:	.word	0x1fff11ac
    4858:	.word	0x1fff1d08
    485c:	.word	0x1fff15b8

00004860 <_free_r>:
    4860:	cmp	r1, #0
    4862:	beq.n	48f0 <_free_r+0x90>
    4864:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4868:	mov	r5, r1
    486a:	mov	r8, r0
    486c:	bl	4750 <__malloc_lock>
    4870:	ldr.w	r7, [r5, #-4]
    4874:	ldr	r1, [pc, #424]	; (4a20 <_free_r+0x1c0>)
    4876:	bic.w	r3, r7, #1
    487a:	sub.w	r4, r5, #8
    487e:	adds	r2, r4, r3
    4880:	ldr	r6, [r1, #8]
    4882:	ldr	r0, [r2, #4]
    4884:	cmp	r2, r6
    4886:	bic.w	r0, r0, #3
    488a:	beq.n	4952 <_free_r+0xf2>
    488c:	lsls	r6, r7, #31
    488e:	str	r0, [r2, #4]
    4890:	bmi.n	48aa <_free_r+0x4a>
    4892:	ldr.w	r7, [r5, #-8]
    4896:	subs	r4, r4, r7
    4898:	add.w	lr, r1, #8
    489c:	ldr	r5, [r4, #8]
    489e:	cmp	r5, lr
    48a0:	add	r3, r7
    48a2:	beq.n	4984 <_free_r+0x124>
    48a4:	ldr	r7, [r4, #12]
    48a6:	str	r7, [r5, #12]
    48a8:	str	r5, [r7, #8]
    48aa:	adds	r5, r2, r0
    48ac:	ldr	r5, [r5, #4]
    48ae:	lsls	r5, r5, #31
    48b0:	bpl.n	4938 <_free_r+0xd8>
    48b2:	orr.w	r2, r3, #1
    48b6:	str	r2, [r4, #4]
    48b8:	str	r3, [r4, r3]
    48ba:	cmp.w	r3, #512	; 0x200
    48be:	bcs.n	48f2 <_free_r+0x92>
    48c0:	lsrs	r3, r3, #3
    48c2:	adds	r2, r3, #1
    48c4:	ldr	r5, [r1, #4]
    48c6:	ldr.w	r7, [r1, r2, lsl #3]
    48ca:	str	r7, [r4, #8]
    48cc:	movs	r0, #1
    48ce:	asrs	r3, r3, #2
    48d0:	lsl.w	r3, r0, r3
    48d4:	add.w	r0, r1, r2, lsl #3
    48d8:	orrs	r5, r3
    48da:	subs	r0, #8
    48dc:	str	r0, [r4, #12]
    48de:	str	r5, [r1, #4]
    48e0:	str.w	r4, [r1, r2, lsl #3]
    48e4:	str	r4, [r7, #12]
    48e6:	mov	r0, r8
    48e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    48ec:	b.w	4754 <__malloc_unlock>
    48f0:	bx	lr
    48f2:	lsrs	r2, r3, #9
    48f4:	cmp	r2, #4
    48f6:	bhi.n	49a0 <_free_r+0x140>
    48f8:	lsrs	r2, r3, #6
    48fa:	add.w	r7, r2, #57	; 0x39
    48fe:	lsls	r7, r7, #1
    4900:	add.w	r5, r2, #56	; 0x38
    4904:	add.w	r0, r1, r7, lsl #2
    4908:	ldr.w	r2, [r1, r7, lsl #2]
    490c:	ldr	r1, [pc, #272]	; (4a20 <_free_r+0x1c0>)
    490e:	subs	r0, #8
    4910:	cmp	r0, r2
    4912:	beq.n	49b0 <_free_r+0x150>
    4914:	ldr	r1, [r2, #4]
    4916:	bic.w	r1, r1, #3
    491a:	cmp	r3, r1
    491c:	bcs.n	4924 <_free_r+0xc4>
    491e:	ldr	r2, [r2, #8]
    4920:	cmp	r0, r2
    4922:	bne.n	4914 <_free_r+0xb4>
    4924:	ldr	r0, [r2, #12]
    4926:	str	r0, [r4, #12]
    4928:	str	r2, [r4, #8]
    492a:	str	r4, [r0, #8]
    492c:	str	r4, [r2, #12]
    492e:	mov	r0, r8
    4930:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4934:	b.w	4754 <__malloc_unlock>
    4938:	ldr	r5, [r2, #8]
    493a:	ldr	r7, [pc, #232]	; (4a24 <_free_r+0x1c4>)
    493c:	cmp	r5, r7
    493e:	add	r3, r0
    4940:	beq.n	49c2 <_free_r+0x162>
    4942:	ldr	r0, [r2, #12]
    4944:	str	r0, [r5, #12]
    4946:	orr.w	r2, r3, #1
    494a:	str	r5, [r0, #8]
    494c:	str	r2, [r4, #4]
    494e:	str	r3, [r4, r3]
    4950:	b.n	48ba <_free_r+0x5a>
    4952:	lsls	r7, r7, #31
    4954:	add	r3, r0
    4956:	bmi.n	4968 <_free_r+0x108>
    4958:	ldr.w	r2, [r5, #-8]
    495c:	subs	r4, r4, r2
    495e:	add	r3, r2
    4960:	ldr	r0, [r4, #8]
    4962:	ldr	r2, [r4, #12]
    4964:	str	r2, [r0, #12]
    4966:	str	r0, [r2, #8]
    4968:	ldr	r2, [pc, #188]	; (4a28 <_free_r+0x1c8>)
    496a:	ldr	r2, [r2, #0]
    496c:	orr.w	r0, r3, #1
    4970:	cmp	r3, r2
    4972:	str	r0, [r4, #4]
    4974:	str	r4, [r1, #8]
    4976:	bcc.n	48e6 <_free_r+0x86>
    4978:	ldr	r3, [pc, #176]	; (4a2c <_free_r+0x1cc>)
    497a:	mov	r0, r8
    497c:	ldr	r1, [r3, #0]
    497e:	bl	47c4 <_malloc_trim_r>
    4982:	b.n	48e6 <_free_r+0x86>
    4984:	adds	r1, r2, r0
    4986:	ldr	r1, [r1, #4]
    4988:	lsls	r1, r1, #31
    498a:	bmi.n	4a16 <_free_r+0x1b6>
    498c:	ldr	r1, [r2, #8]
    498e:	ldr	r2, [r2, #12]
    4990:	str	r2, [r1, #12]
    4992:	add	r3, r0
    4994:	orr.w	r0, r3, #1
    4998:	str	r1, [r2, #8]
    499a:	str	r0, [r4, #4]
    499c:	str	r3, [r4, r3]
    499e:	b.n	48e6 <_free_r+0x86>
    49a0:	cmp	r2, #20
    49a2:	bhi.n	49d4 <_free_r+0x174>
    49a4:	add.w	r7, r2, #92	; 0x5c
    49a8:	lsls	r7, r7, #1
    49aa:	add.w	r5, r2, #91	; 0x5b
    49ae:	b.n	4904 <_free_r+0xa4>
    49b0:	asrs	r2, r5, #2
    49b2:	ldr	r3, [r1, #4]
    49b4:	movs	r5, #1
    49b6:	lsl.w	r2, r5, r2
    49ba:	orrs	r3, r2
    49bc:	str	r3, [r1, #4]
    49be:	mov	r2, r0
    49c0:	b.n	4926 <_free_r+0xc6>
    49c2:	orr.w	r2, r3, #1
    49c6:	str	r4, [r1, #20]
    49c8:	str	r4, [r1, #16]
    49ca:	str	r5, [r4, #12]
    49cc:	str	r5, [r4, #8]
    49ce:	str	r2, [r4, #4]
    49d0:	str	r3, [r4, r3]
    49d2:	b.n	48e6 <_free_r+0x86>
    49d4:	cmp	r2, #84	; 0x54
    49d6:	bhi.n	49e6 <_free_r+0x186>
    49d8:	lsrs	r2, r3, #12
    49da:	add.w	r7, r2, #111	; 0x6f
    49de:	lsls	r7, r7, #1
    49e0:	add.w	r5, r2, #110	; 0x6e
    49e4:	b.n	4904 <_free_r+0xa4>
    49e6:	cmp.w	r2, #340	; 0x154
    49ea:	bhi.n	49fa <_free_r+0x19a>
    49ec:	lsrs	r2, r3, #15
    49ee:	add.w	r7, r2, #120	; 0x78
    49f2:	lsls	r7, r7, #1
    49f4:	add.w	r5, r2, #119	; 0x77
    49f8:	b.n	4904 <_free_r+0xa4>
    49fa:	movw	r0, #1364	; 0x554
    49fe:	cmp	r2, r0
    4a00:	bhi.n	4a10 <_free_r+0x1b0>
    4a02:	lsrs	r2, r3, #18
    4a04:	add.w	r7, r2, #125	; 0x7d
    4a08:	lsls	r7, r7, #1
    4a0a:	add.w	r5, r2, #124	; 0x7c
    4a0e:	b.n	4904 <_free_r+0xa4>
    4a10:	movs	r7, #254	; 0xfe
    4a12:	movs	r5, #126	; 0x7e
    4a14:	b.n	4904 <_free_r+0xa4>
    4a16:	orr.w	r2, r3, #1
    4a1a:	str	r2, [r4, #4]
    4a1c:	str	r3, [r4, r3]
    4a1e:	b.n	48e6 <_free_r+0x86>
    4a20:	.word	0x1fff11ac
    4a24:	.word	0x1fff11b4
    4a28:	.word	0x1fff15b4
    4a2c:	.word	0x1fff1d04

00004a30 <__register_exitproc>:
    4a30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a34:	ldr	r4, [pc, #148]	; (4acc <__register_exitproc+0x9c>)
    4a36:	ldr	r5, [r4, #0]
    4a38:	ldr.w	r4, [r5, #328]	; 0x148
    4a3c:	mov	r6, r0
    4a3e:	mov	r8, r1
    4a40:	mov	sl, r2
    4a42:	mov	r9, r3
    4a44:	cbz	r4, 4ab8 <__register_exitproc+0x88>
    4a46:	ldr	r0, [r4, #4]
    4a48:	cmp	r0, #31
    4a4a:	bgt.n	4a7c <__register_exitproc+0x4c>
    4a4c:	adds	r3, r0, #1
    4a4e:	cbz	r6, 4a6e <__register_exitproc+0x3e>
    4a50:	add.w	r5, r4, r0, lsl #2
    4a54:	movs	r2, #1
    4a56:	str.w	sl, [r5, #136]	; 0x88
    4a5a:	ldr.w	r1, [r4, #392]	; 0x188
    4a5e:	lsls	r2, r0
    4a60:	orrs	r1, r2
    4a62:	cmp	r6, #2
    4a64:	str.w	r1, [r4, #392]	; 0x188
    4a68:	str.w	r9, [r5, #264]	; 0x108
    4a6c:	beq.n	4aac <__register_exitproc+0x7c>
    4a6e:	adds	r0, #2
    4a70:	str	r3, [r4, #4]
    4a72:	str.w	r8, [r4, r0, lsl #2]
    4a76:	movs	r0, #0
    4a78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a7c:	ldr	r3, [pc, #80]	; (4ad0 <__register_exitproc+0xa0>)
    4a7e:	cbz	r3, 4ac2 <__register_exitproc+0x92>
    4a80:	mov.w	r0, #400	; 0x190
    4a84:	bl	41d0 <malloc>
    4a88:	mov	r4, r0
    4a8a:	cbz	r0, 4ac2 <__register_exitproc+0x92>
    4a8c:	ldr.w	r3, [r5, #328]	; 0x148
    4a90:	movs	r7, #0
    4a92:	stmia.w	r0, {r3, r7}
    4a96:	str.w	r4, [r5, #328]	; 0x148
    4a9a:	mov	r0, r7
    4a9c:	movs	r3, #1
    4a9e:	str.w	r7, [r4, #392]	; 0x188
    4aa2:	str.w	r7, [r4, #396]	; 0x18c
    4aa6:	cmp	r6, #0
    4aa8:	beq.n	4a6e <__register_exitproc+0x3e>
    4aaa:	b.n	4a50 <__register_exitproc+0x20>
    4aac:	ldr.w	r1, [r4, #396]	; 0x18c
    4ab0:	orrs	r2, r1
    4ab2:	str.w	r2, [r4, #396]	; 0x18c
    4ab6:	b.n	4a6e <__register_exitproc+0x3e>
    4ab8:	add.w	r4, r5, #332	; 0x14c
    4abc:	str.w	r4, [r5, #328]	; 0x148
    4ac0:	b.n	4a46 <__register_exitproc+0x16>
    4ac2:	mov.w	r0, #4294967295
    4ac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4aca:	nop
    4acc:	.word	0x00004df0
    4ad0:	.word	0x000041d1
    4ad4:	.word	0x7370704f
    4ad8:	.word	0x6e61202c
    4adc:	.word	0x6b6e7520
    4ae0:	.word	0x6e776f6e
    4ae4:	.word	0x44494d20
    4ae8:	.word	0x656d2049
    4aec:	.word	0x67617373
    4af0:	.word	0x79742065
    4af4:	.word	0x00216570
    4af8:	.word	0x4f4c4556
    4afc:	.word	0x59544943
    4b00:	.word	0x00000000
    4b04:	.word	0x45544f4e
    4b08:	.word	0x474e454c
    4b0c:	.word	0x00004854
    4b10:	.word	0x43544950
    4b14:	.word	0x00000048
    4b18:	.word	0x79616c50
    4b1c:	.word	0x00000000

00004b20 <pin2sc1a>:
    4b20:	................
    4b30:	................
    4b40:	................
    4b50:	................
    4b60:	........

00004b68 <digital_pin_to_info_PGM>:
    4b68:	@..C@..@D..CD..@
    4b78:	...C...@0..C0..@
    4b88:	4..C4..@...C...@
    4b98:	...C...@...C...@
    4ba8:	...C...@...C...@
    4bb8:	...C...@...C...@
    4bc8:	...C...@...C...@
    4bd8:	...C...@...C...@
    4be8:	...C...@...C...@
    4bf8:	...C...@...C...@
    4c08:	...C...@...C...@
    4c18:	...C...@...C...@
    4c28:	h .Ch..@...C...@
    4c38:	8..C8..@<..C<..@
    4c48:	@..C@..@H..CH..@
    4c58:	L..CL..@(..C(..@
    4c68:	,..C,..@` .C`..@
    4c78:	d .Cd..@ ..C ..@
    4c88:	$..C$..@(..C(..@
    4c98:	,..C,..@D..CD..@
    4ca8:	p..Cp..@t..Ct..@
    4cb8:	h..Ch..@P..CP..@
    4cc8:	X..CX..@\..C\..@
    4cd8:	T..CT..@ ..C ..@
    4ce8:	$..C$..@...C...@
    4cf8:	...C...@8..C8..@
    4d08:	4..C4..@0..C0..@
    4d18:	<..C<..@,..C,..@
    4d28:	( .C(..@, .C,..@
    4d38:	. .C...@. .C...@
    4d48:	. .C...@. .C...@
    4d58:	. .C...@. .C...@

00004d68 <vtable for usb_serial_class>:
	...
    4d70:	)7..!7...7...7..
    4d80:	.7...7...7...7..
    4d90:	....

00004d94 <usb_endpoint_config_table>:
    4d94:	........

00004d9c <usb_descriptor_list>:
    4d9c:	................
    4dac:	............`...
    4dbc:	................
    4dcc:	....H...........
    4ddc:	d...............
    4dec:	....

00004df0 <_global_impure_ptr>:
    4df0:	....

00004df4 <_init>:
    4df4:	push	{r3, r4, r5, r6, r7, lr}
    4df6:	nop
    4df8:	pop	{r3, r4, r5, r6, r7}
    4dfa:	pop	{r3}
    4dfc:	mov	lr, r3
    4dfe:	bx	lr

00004e00 <__init_array_start>:
    4e00:	.word	0x0000477d

00004e04 <__frame_dummy_init_array_entry>:
    4e04:	5...y...

Disassembly of section .fini:

00004e0c <_fini>:
    4e0c:	push	{r3, r4, r5, r6, r7, lr}
    4e0e:	nop

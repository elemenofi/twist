
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000055cc l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00004264 l     F .text	0000000c startup_default_early_hook
00004270 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
000055c4 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001f10 l     F .text	000002dc _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff18f5 l     O .bss	00000001 tx_noautoflush
1fff18f8 l     O .bss	00000004 tx_packet
1fff18fc l     O .bss	00000001 transmit_previous_timeout
1fff1900 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000024c0 l     F .text	00000144 wait_for_cal
1fff1905 l     O .bss	00000001 analog_right_shift
1fff1906 l     O .bss	00000001 calibrating
000052e0 l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff1907 l     O .bss	00000001 analogReadBusyADC1
1fff1908 l     O .bss	00000001 analogReadBusyADC0
1fff1909 l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000027e0 l     F .text	0000004c digitalWrite.part.1
0000282c l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002b0c l     F .text	00000048 sysex_byte
1fff1924 l     O .bss	00000001 tx_noautoflush
1fff1950 l     O .bss	00000004 tx_packet
1fff1954 l     O .bss	00000001 transmit_previous_timeout
1fff195c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1970 l     O .bss	00000004 ep0_tx_ptr
1fff1974 l     O .bss	00000014 rx_last
1fff1988 l     O .bss	00000002 ep0_tx_len
1fff198c l     O .bss	00000040 ep0_rx0_buf
1fff19cc l     O .bss	00000014 rx_first
1fff19e0 l     O .bss	00000001 ep0_tx_data_toggle
1fff19e4 l     O .bss	00000040 ep0_rx1_buf
1fff1a24 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1a38 l     O .bss	00000014 tx_last
1fff1a4c l     O .bss	00000008 setup
1fff1a54 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1a58 l     O .bss	00000008 reply_buffer
1fff1a64 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1a69 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1a6c l     O .bss	00000004 rts_pin
1fff1a70 l     O .bss	00000001 rx_buffer_head
1fff1a71 l     O .bss	00000001 rx_buffer_tail
1fff1a74 l     O .bss	00000028 tx_buffer
1fff1a9c l     O .bss	00000040 rx_buffer
1fff1adc l     O .bss	00000001 transmitting
1fff1add l     O .bss	00000001 tx_buffer_tail
1fff1ae0 l     O .bss	00000004 transmit_pin
1fff1ae4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1ae8 l     O .bss	00000004 rts_pin
1fff1aec l     O .bss	00000001 transmitting
1fff1aed l     O .bss	00000001 rx_buffer_tail
1fff1af0 l     O .bss	00000028 tx_buffer
1fff1b18 l     O .bss	00000040 rx_buffer
1fff1b58 l     O .bss	00000001 rx_buffer_head
1fff1b59 l     O .bss	00000001 tx_buffer_tail
1fff1b5c l     O .bss	00000004 transmit_pin
1fff1b60 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1b64 l     O .bss	00000004 rts_pin
1fff1b68 l     O .bss	00000001 rx_buffer_head
1fff1b69 l     O .bss	00000001 rx_buffer_tail
1fff1b6c l     O .bss	00000028 tx_buffer
1fff1b94 l     O .bss	00000040 rx_buffer
1fff1bd4 l     O .bss	00000001 transmitting
1fff1bd5 l     O .bss	00000001 tx_buffer_tail
1fff1bd8 l     O .bss	00000004 transmit_pin
1fff1bdc l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1be0 l     O .bss	00000004 rts_pin
1fff1be4 l     O .bss	00000001 rx_buffer_head
1fff1be5 l     O .bss	00000001 rx_buffer_tail
1fff1be8 l     O .bss	00000040 tx_buffer
1fff1c28 l     O .bss	00000040 rx_buffer
1fff1c68 l     O .bss	00000001 transmitting
1fff1c69 l     O .bss	00000001 tx_buffer_tail
1fff1c6c l     O .bss	00000004 transmit_pin
1fff1c70 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1c74 l     O .bss	00000004 rts_pin
1fff1c78 l     O .bss	00000001 rx_buffer_head
1fff1c79 l     O .bss	00000001 rx_buffer_tail
1fff1c7c l     O .bss	00000028 tx_buffer
1fff1ca4 l     O .bss	00000040 rx_buffer
1fff1ce4 l     O .bss	00000001 transmitting
1fff1ce5 l     O .bss	00000001 tx_buffer_tail
1fff1ce8 l     O .bss	00000004 transmit_pin
1fff1cec l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1cf0 l     O .bss	00000004 rts_pin
1fff1cf4 l     O .bss	00000001 rx_buffer_head
1fff1cf5 l     O .bss	00000001 rx_buffer_tail
1fff1cf8 l     O .bss	00000028 tx_buffer
1fff1d20 l     O .bss	00000040 rx_buffer
1fff1d60 l     O .bss	00000001 transmitting
1fff1d61 l     O .bss	00000001 tx_buffer_tail
1fff1d64 l     O .bss	00000004 transmit_pin
1fff1d68 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004f04 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1f04 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000425c  w    F .text	00000006 adc0_isr
00002264 g     F .text	0000001c usb_serial_available
0000411c g     F .text	00000020 serial4_available
00003d38  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
00004308 g     F .text	00000020 serial_available
1fff1928 g     O .bss	00000004 usb_midi_handleProgramChange
1fff1774 g     O .bss	00000030 sequence
00004214  w    F .text	00000048 hard_fault_isr
0000425c  w    F .text	00000006 dma_ch6_isr
00003e2c g     F .text	00000020 Print::println()
00003ff0 g     F .text	00000020 serial2_available
0000425c  w    F .text	00000006 uart0_lon_isr
0000314c g     F .text	000000e8 usb_rx_memory
00003dfc  w    F .text	00000002 serialEvent5()
0000425c  w    F .text	00000006 dma_ch8_isr
00004434 g     F .text	00000020 serial6_available
00004edc g     F .text	00000002 __malloc_unlock
1fff193c g     O .bss	00000004 usb_midi_handleAfterTouch
00002604 g     F .text	000000e0 analog_init
00003234 g     F .text	00000084 usb_tx
0000425c  w    F .text	00000006 portcd_isr
1fff194c g     O .bss	00000004 usb_midi_handleSysExComplete
00004854 g     F .text	00000098 MillisTimer::runFromTimer()
0000425c  w    F .text	00000006 can1_rx_warn_isr
000055d0 g       .fini	00000000 __exidx_end
0000425c  w    F .text	00000006 dma_error_isr
1fff1dc8 g     O .bss	00000001 usb_midi_msg_type
1fff1d80 g     O .bss	00000001 EventResponder::runningFromYield
0000425c  w    F .text	00000006 i2c0_isr
000048fc g     F .text	0000000c __errno
0000425c  w    F .text	00000006 portd_isr
0000425c  w    F .text	00000006 enet_error_isr
1fff1d6c g     O .bss	00000004 EventResponder::firstInterrupt
0000425c  w    F .text	00000006 tpm1_isr
00003e18  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00005328 g     O .text	00000200 digital_pin_to_info_PGM
1fff1f00 g     O .bss	00000004 errno
000055d0 g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
00003ef4  w    F .text	00000002 serialEvent6()
1fff1938 g     O .bss	00000004 usb_midi_handleVelocityChange
000028d4 g     F .text	0000001c digitalRead
0000425c  w    F .text	00000006 porte_isr
000004c8 g     F .text	00001a48 loop
0000425c  w    F .text	00000006 portb_isr
1fff17cc g     O .bss	00000014 step3
00002bf0 g     F .text	0000002c usb_midi_flush_output
0000425c  w    F .text	00000006 spi1_isr
0000413c g     F .text	000000d8 uart3_status_isr
00004700  w    F .text	00000002 serialEvent1()
1fff18dc g     O .bss	00000018 led4
0000425c  w    F .text	00000006 mcm_isr
000047ec g     F .text	00000068 MillisTimer::addToActiveList()
00002c1c g     F .text	0000043c usb_midi_read
1fff1914 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1d70 g     O .bss	00000004 EventResponder::lastInterrupt
00004010 g     F .text	0000010c uart1_status_isr
1fff1dca g     O .bss	00000002 usb_midi_msg_sysex_len
0000425c  w    F .text	00000006 randnum_isr
1fff191c g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff190c g     O .bss	00000004 systick_millis_count
00004214  w    F .text	00000048 bus_fault_isr
0000425c  w    F .text	00000006 watchdog_isr
0000425c  w    F .text	00000006 i2c1_isr
1fff1a60 g     O .bss	00000001 usb_configuration
0000425c  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003edc  w    F .text	00000002 serialEvent2()
0000425c  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1ef4 g     O .bss	0000000a usb_rx_byte_count_data
0000425c  w    F .text	00000006 pit1_isr
00004958 g     F .text	00000010 malloc
0000425c  w    F .text	00000006 dma_ch4_isr
0000425c  w    F .text	00000006 software_isr
0000425c  w    F .text	00000006 dma_ch7_isr
00004788  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003c68 g     F .text	000000d0 usb_init
0000425c  w    F .text	00000006 lptmr_isr
1fff1d90 g     O .bss	00000004 __malloc_top_pad
000028a4 g     F .text	00000024 rtc_set
1fff16fc g     O .bss	0000003c button5
1fff16c0 g     O .bss	0000003c button4
1fff0c40 g       .data	00000000 _sdata
1fff196c g     O .bss	00000004 usb_midi_handleNoteOn
000042d4 g     F .text	00000034 kinetis_hsrun_enable
00004ee0 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
000021ec g     F .text	00000048 usb_serial_getchar
0000425c  w    F .text	00000006 can1_bus_off_isr
0000425c  w    F .text	00000006 ftm2_isr
1fff1dbc g     O .bss	00000008 usb_cdc_line_coding
000028c8 g     F .text	0000000a digitalWrite
0000425c  w    F .text	00000006 uart5_status_isr
00004454 g     F .text	000000e4 lpuart0_status_isr
1fff1d78 g     O .bss	00000004 EventResponder::lastYield
00005554 g     O .text	00000005 usb_endpoint_config_table
0000425c  w    F .text	00000006 dma_ch9_isr
0000425c  w    F .text	00000006 pit2_isr
00004608 g     F .text	00000020 serial3_available
1fff17e0 g     O .bss	00000014 step4
1fff1d8c g     O .bss	00000004 __malloc_max_sbrked_mem
000028f0 g     F .text	0000000a pinMode
00003098 g     F .text	0000004c usb_free
0000425c  w    F .text	00000006 i2c3_isr
1fff1894 g     O .bss	00000018 led1
1fff1934 g     O .bss	00000004 usb_midi_handleSysExPartial
000055d0 g       .fini	00000000 __exidx_start
0000425c  w    F .text	00000006 pit0_isr
1fff1dcc g     O .bss	00000001 usb_midi_msg_data1
1fff1d7c g     O .bss	00000004 EventResponder::firstYield
000055b0 g     O .text	00000004 _global_impure_ptr
0000425c  w    F .text	00000006 can1_error_isr
00004908 g     F .text	00000050 __libc_init_array
1fff1f04 g       .bss	00000000 __bss_end
0000425c  w    F .text	00000006 can0_wakeup_isr
0000425c  w    F .text	00000006 flash_cmd_isr
1fff1864 g     O .bss	0000001c knob5
00003e00  w    F .text	00000004 usb_serial_class::clear()
00004628 g     F .text	000000d8 uart2_status_isr
00004274 g     F .text	0000002c _sbrk
1fff1d84 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff1904 g     O .bss	00000001 usb_cdc_line_rtsdtr
00002478 g     F .text	00000048 usb_serial_flush_callback
000055b4 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
0000425c  w    F .text	00000006 svcall_isr
0000425c  w    F .text	00000006 dma_ch15_isr
0000425c  w    F .text	00000006 uart1_error_isr
00004f24 g     F .text	00000028 __libc_fini_array
0000425c  w    F .text	00000006 usbhs_phy_isr
1fff1f04 g       .bss	00000000 _ebss
0000425c g     F .text	00000006 unused_isr
0000425c  w    F .text	00000006 spi0_isr
0000425c  w    F .text	00000006 dma_ch3_isr
0000425c  w    F .text	00000006 flash_error_isr
1fff1810 g     O .bss	0000001c knob2
00003ef8 g     F .text	00000020 serial5_available
0000425c  w    F .text	00000006 uart5_error_isr
0000425c  w    F .text	00000006 rtc_seconds_isr
0000425c  w    F .text	00000006 pdb_isr
00004214  w    F .text	00000048 usage_fault_isr
0000425c  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
0000425c  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1dc4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff1880 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
000048ec g     F .text	00000010 systick_isr
0000425c  w    F .text	00000006 rtc_alarm_isr
0000425c  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
0000425c  w    F .text	00000006 ftm1_isr
00003e20  w    F .text	00000006 usb_serial_class::write(unsigned char)
00004264  w    F .text	0000000c startup_early_hook
0000425c  w    F .text	00000006 dma_ch13_isr
0000425c  w    F .text	00000006 uart2_error_isr
00002234 g     F .text	00000030 usb_serial_peekchar
00000490  w    F .text	00000034 Led::blink(int)
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
00004214 g     F .text	00000048 fault_isr
00004fe8 g     F .text	000001d0 _free_r
1fff1958 g     O .bss	00000004 usb_midi_handleStop
0000425c  w    F .text	00000006 usb_charge_isr
00003e10  w    F .text	00000004 usb_serial_class::flush()
0000425c  w    F .text	00000006 cmt_isr
0000425c  w    F .text	00000006 usbhs_isr
1fff1968 g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
00003e08  w    F .text	00000004 usb_serial_class::read()
0000425c  w    F .text	00000006 ftm3_isr
0000425c  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff17f4 g     O .bss	0000001c knob1
0000425c  w    F .text	00000006 spi2_isr
00003ee0  w    F .text	00000002 serialEvent4()
00003e28  w    F .text	00000002 serialEvent()
1fff19e1 g     O .bss	00000001 usb_reboot_timer
000051b8 g     F .text	000000a4 __register_exitproc
00002280 g     F .text	00000038 usb_serial_flush_input
000023c0 g     F .text	00000018 usb_serial_putchar
1fff1d94 g     O .bss	00000028 __malloc_current_mallinfo
0000425c  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff1a55 g     O .bss	00000001 usb_rx_memory_needed
000032b8 g     F .text	000009b0 usb_isr
1fff17a4 g     O .bss	00000014 step1
1fff1964 g     O .bss	00000004 usb_midi_handleNoteOff
00005528  w    O .text	00000028 vtable for usb_serial_class
1fff182c g     O .bss	0000001c knob3
0000425c  w    F .text	00000006 uart3_error_isr
1fff1d74 g     O .bss	00000004 MillisTimer::listActive
0000425c  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
0000425c  w    F .text	00000006 low_voltage_isr
1fff1648 g     O .bss	0000003c button2
1fff11ac g     O .data	00000408 __malloc_av_
0000425c  w    F .text	00000006 can0_error_isr
000029a0 g     F .text	0000016c _init_Teensyduino_internal_
00002420 g     F .text	00000058 usb_serial_flush_output
0000425c  w    F .text	00000006 dma_ch12_isr
00004ed8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
0000425c  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000425c  w    F .text	00000006 pit3_isr
0000425c  w    F .text	00000006 enet_rx_isr
0000425c  w    F .text	00000006 portc_isr
00003ee4 g     F .text	00000010 main
1fff1d88 g     O .bss	00000004 __malloc_max_total_mem
1fff18c4 g     O .bss	00000018 led3
00004214  w    F .text	00000048 memmanage_fault_isr
00004538 g     F .text	00000084 usb_init_serialnumber
1fff1890 g     O .bss	00000001 currentMode
000055cc g       .text	00000000 __init_array_end
00004968 g     F .text	00000570 _malloc_r
0000425c  w    F .text	00000006 debugmonitor_isr
1fff1930 g     O .bss	00000004 usb_midi_handleSongPosition
00004708 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1920 g     O .bss	00000004 usb_midi_handleContinue
1fff1dcd g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
0000425c  w    F .text	00000006 cmp1_isr
1fff1684 g     O .bss	0000003c button3
0000425c  w    F .text	00000006 ftm0_isr
00004f4c g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
000022b8 g     F .text	00000108 usb_serial_write
00004270  w    F .text	00000002 startup_late_hook
00003e0c  w    F .text	00000004 usb_serial_class::available()
1fff1dce g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
000028fc g     F .text	000000a4 delay
0000425c  w    F .text	00000006 tpm0_isr
000055cc g     F .fini	00000000 _fini
1fff17b8 g     O .bss	00000014 step2
0000425c  w    F .text	00000006 i2s0_rx_isr
0000425c  w    F .text	00000006 uart4_error_isr
00003ecc g     F .text	00000010 Print::print(long)
00002b54 g     F .text	0000009c usb_midi_write_packed
00004f18 g     F .text	0000000c atexit
0000425c  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
0000425c  w    F .text	00000006 can1_message_isr
0000425c  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1948 g     O .bss	00000004 usb_midi_handleTuneRequest
000055c0 g       .text	00000000 __preinit_array_end
0000425c  w    F .text	00000006 sdhc_isr
1fff1dcf g     O .bss	00000001 usb_midi_msg_channel
000004c4 g     F .text	00000002 setup
0000555c g     O .text	00000054 usb_descriptor_list
000030e4 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1848 g     O .bss	0000001c knob4
0000425c  w    F .text	00000006 dma_ch10_isr
1fff1940 g     O .bss	00000004 usb_midi_handleStart
0000425c  w    F .text	00000006 uart0_error_isr
00003058 g     F .text	00000040 usb_malloc
0000425c  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
000023d8 g     F .text	00000048 usb_serial_write_buffer_free
0000425c  w    F .text	00000006 enet_timer_isr
1fff1738 g     O .bss	0000003c button6
1fff160c g     O .bss	0000003c button1
1fff15bc g       .data	00000000 _edata
0000425c  w    F .text	00000006 i2s0_tx_isr
0000425c  w    F .text	00000006 adc1_isr
00003e14  w    F .text	00000004 usb_serial_class::availableForWrite()
0000425c  w    F .text	00000006 cmp0_isr
1fff1910 g     O .bss	00000004 usb_midi_handleClock
000045bc g     F .text	0000004c ultoa
000047a4 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
00003e04  w    F .text	00000004 usb_serial_class::peek()
1fff18f4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff192c g     O .bss	00000004 usb_midi_handlePitchChange
0000425c  w    F .text	00000006 pit_isr
1fff1944 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
0000425c  w    F .text	00000006 dac0_isr
000055c0 g       .text	00000000 __init_array_start
0000425c  w    F .text	00000006 can1_tx_warn_isr
000026e4 g     F .text	000000fc analogRead
1fff1dd0 g     O .bss	00000122 usb_midi_msg_sysex
00004328 g     F .text	0000010c uart0_status_isr
0000425c  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
0000425c  w    F .text	00000006 dma_ch1_isr
00003120 g     F .text	0000002c usb_tx_packet_count
0000425c  w    F .text	00000006 dma_ch5_isr
0000425c  w    F .text	00000006 can0_rx_warn_isr
0000425c  w    F .text	00000006 can0_tx_warn_isr
00003f18 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000042a0 g     F .text	00000034 kinetis_hsrun_disable
000055c0 g       .text	00000000 __preinit_array_start
00004704  w    F .text	00000002 serialEvent3()
1fff1960 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff18ac g     O .bss	00000018 led2
0000425c  w    F .text	00000006 cmp2_isr
000047e8 g     F .text	00000004 pendablesrvreq_isr
0000425c  w    F .text	00000006 wakeup_isr
0000425c  w    F .text	00000006 cmp3_isr
00003e4c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
1fff1918 g     O .bss	00000004 usb_midi_handleActiveSensing
0000425c  w    F .text	00000006 tpm2_isr
0000425c  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
0000425c  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ....]B...B..
      10:	.B...B...B...B..
      20:	.B...B...B..]B..
      30:	]B...B...G...H..
      40:	]B..]B..]B..]B..
      50:	]B..]B..]B..]B..
      60:	]B..]B..]B..]B..
      70:	]B..]B..]B..]B..
      80:	]B..]B..]B..]B..
      90:	]B..]B..]B..]B..
      a0:	]B..]B..]B..]B..
      b0:	]B..]B..]B..)C..
      c0:	]B...@..]B..)F..
      d0:	]B..=A..]B..]B..
      e0:	]B..]B..]B..]B..
      f0:	]B..]B..]B..]B..
     100:	]B..]B..]B..]B..
     110:	]B...2..]B..]B..
     120:	]B..]B..]B..]B..
     130:	]B..]B..]B..]B..
     140:	]B..]B...?..]B..
     150:	]B..]B..]B..]B..
     160:	]B..]B..]B..]B..
     170:	]B..]B..]B..]B..
     180:	]B..]B..]B..]B..
     190:	]B..]B..UD..]B..
     1a0:	]B..]B..]B..]B..
     1b0:	]B..]B..]B..]B..
     1c0:	]B..]B..]B..]B..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	4264 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	29a0 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	28a4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	28a4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4908 <__libc_init_array>

	startup_late_hook();
     33a:	bl	4270 <startup_late_hook>
	main();
     33e:	bl	3ee4 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x000055cc
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1f04
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x000055d0

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x000055d0
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #75	; 0x4b
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	28f0 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	28c8 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <Led::blink(int)>:

    void blink (int times = 0) {
     490:	push	{r4, r5, r6, lr}
      digitalWrite(m_pin, !digitalRead(m_pin));
     492:	ldrb	r5, [r0, #0]

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     494:	sub	sp, #8
     496:	mov	r4, r0
      digitalWrite(m_pin, !digitalRead(m_pin));
     498:	mov	r0, r5

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     49a:	mov	r6, r1
      digitalWrite(m_pin, !digitalRead(m_pin));
     49c:	bl	28d4 <digitalRead>
     4a0:	clz	r1, r0
     4a4:	lsrs	r1, r1, #5
     4a6:	mov	r0, r5
     4a8:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ac:	ldr	r3, [pc, #16]	; (4c0 <Led::blink(int)+0x30>)
      blinking = true;
      blinkingCounter = times;
     4ae:	str	r6, [r4, #20]
     4b0:	ldr	r3, [r3, #0]
     4b2:	str	r3, [sp, #4]
	return ret;
     4b4:	ldr	r3, [sp, #4]
      lastBlink = millis();  
     4b6:	str	r3, [r4, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     4b8:	movs	r2, #1
     4ba:	strb	r2, [r4, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    };
     4bc:	add	sp, #8
     4be:	pop	{r4, r5, r6, pc}
     4c0:	.word	0x1fff190c

000004c4 <setup>:
Knob knob3(A2, sequence, transport, THIRD, 2);
Knob knob4(A3, sequence, transport, FOURTH, 3);
Knob knob5(A4, sequence, transport, FIFTH, 4);
// implement a scale knob that transposes the sequencer

void setup() {
     4c4:	bx	lr
     4c6:	nop

000004c8 <loop>:
  Serial.begin(9600);
}

void loop() {
     4c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     4cc:	movs	r0, #0
     4ce:	sub	sp, #248	; 0xf8
     4d0:	bl	2c1c <usb_midi_read>
  if (usbMIDI.read()) {
     4d4:	cmp	r0, #0
     4d6:	bne.w	cfc <loop+0x834>
     4da:	ldr	r4, [pc, #700]	; (798 <loop+0x2d0>)

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     4dc:	ldr	r6, [pc, #700]	; (79c <loop+0x2d4>)
     4de:	ldrb.w	r0, [r6, #56]	; 0x38
     4e2:	bl	28d4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     4e6:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     4e8:	mov	r7, r0
     4ea:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     4ec:	ldrb.w	r5, [r6, #48]	; 0x30
     4f0:	beq.w	d2c <loop+0x864>
     4f4:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4f6:	ldr	r2, [r4, #0]
     4f8:	str	r2, [sp, #188]	; 0xbc
	return ret;
     4fa:	ldr	r1, [sp, #188]	; 0xbc
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     4fc:	ldr	r2, [pc, #672]	; (7a0 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     4fe:	ldr	r0, [pc, #668]	; (79c <loop+0x2d4>)
     500:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     502:	smull	r1, r2, r2, r3
     506:	asrs	r1, r3, #31
     508:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     50c:	cmp	r5, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     50e:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     510:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     512:	beq.w	d26 <loop+0x85e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     516:	ldr	r1, [r4, #0]
     518:	str	r1, [sp, #184]	; 0xb8
	return ret;
     51a:	ldr	r1, [sp, #184]	; 0xb8
        m_lastDebounceTime = millis();
     51c:	str	r1, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     51e:	ldr	r0, [r4, #0]
     520:	str	r0, [sp, #180]	; 0xb4
	return ret;
     522:	ldr	r0, [sp, #180]	; 0xb4
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     524:	cmp	r0, r1
     526:	beq.n	53c <loop+0x74>
        // and the current changed
        if (current != m_state) {
     528:	ldr	r1, [r6, #4]
     52a:	ldr.w	r8, [pc, #624]	; 79c <loop+0x2d4>
     52e:	cmp	r7, r1
     530:	beq.n	53c <loop+0x74>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     532:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     534:	str.w	r7, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     538:	ble.w	1084 <loop+0xbbc>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
     53c:	cmp	r3, #50	; 0x32
     53e:	ble.n	550 <loop+0x88>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     540:	cbnz	r7, 550 <loop+0x88>
     542:	ldrb.w	r3, [r6, #48]	; 0x30
     546:	ldr	r5, [pc, #596]	; (79c <loop+0x2d4>)
     548:	cmp	r3, #1
     54a:	beq.w	1434 <loop+0xf6c>
     54e:	ldr	r7, [r6, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     550:	ldr	r5, [pc, #592]	; (7a4 <loop+0x2dc>)
          }
          // ===============================================================================
        }
      }

      previous = current;
     552:	strb.w	r7, [r6, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     556:	ldrb.w	r0, [r5, #56]	; 0x38
          // ===============================================================================
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     55a:	str	r2, [r6, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     55c:	bl	28d4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     560:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     562:	mov	r7, r0
     564:	str	r0, [r5, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     566:	ldrb.w	r6, [r5, #48]	; 0x30
     56a:	beq.w	dd2 <loop+0x90a>
     56e:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     570:	ldr	r2, [r4, #0]
     572:	str	r2, [sp, #168]	; 0xa8
	return ret;
     574:	ldr	r1, [sp, #168]	; 0xa8
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     576:	ldr	r2, [pc, #552]	; (7a0 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     578:	ldr	r0, [pc, #552]	; (7a4 <loop+0x2dc>)
     57a:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     57c:	smull	r1, r2, r2, r3
     580:	asrs	r1, r3, #31
     582:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     586:	cmp	r6, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     588:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     58a:	str	r2, [r5, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     58c:	beq.w	dcc <loop+0x904>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     590:	ldr	r1, [r4, #0]
     592:	str	r1, [sp, #164]	; 0xa4
	return ret;
     594:	ldr	r1, [sp, #164]	; 0xa4
        m_lastDebounceTime = millis();
     596:	str	r1, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     598:	ldr	r0, [r4, #0]
     59a:	str	r0, [sp, #160]	; 0xa0
	return ret;
     59c:	ldr	r0, [sp, #160]	; 0xa0
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     59e:	cmp	r0, r1
     5a0:	beq.n	5b6 <loop+0xee>
        // and the current changed
        if (current != m_state) {
     5a2:	ldr	r1, [r5, #4]
     5a4:	ldr.w	r8, [pc, #508]	; 7a4 <loop+0x2dc>
     5a8:	cmp	r1, r7
     5aa:	beq.n	5b6 <loop+0xee>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     5ac:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     5ae:	str.w	r7, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     5b2:	ble.w	10ee <loop+0xc26>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
     5b6:	cmp	r3, #50	; 0x32
     5b8:	ble.n	5ca <loop+0x102>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     5ba:	cbnz	r7, 5ca <loop+0x102>
     5bc:	ldrb.w	r3, [r5, #48]	; 0x30
     5c0:	ldr	r6, [pc, #480]	; (7a4 <loop+0x2dc>)
     5c2:	cmp	r3, #1
     5c4:	beq.w	1468 <loop+0xfa0>
     5c8:	ldr	r7, [r5, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5ca:	ldr	r6, [pc, #476]	; (7a8 <loop+0x2e0>)
          }
          // ===============================================================================
        }
      }

      previous = current;
     5cc:	strb.w	r7, [r5, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5d0:	ldrb.w	r0, [r6, #56]	; 0x38
          // ===============================================================================
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     5d4:	str	r2, [r5, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5d6:	bl	28d4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     5da:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5dc:	mov	r7, r0
     5de:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     5e0:	ldrb.w	r5, [r6, #48]	; 0x30
     5e4:	beq.w	e84 <loop+0x9bc>
     5e8:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5ea:	ldr	r2, [r4, #0]
     5ec:	str	r2, [sp, #148]	; 0x94
	return ret;
     5ee:	ldr	r1, [sp, #148]	; 0x94
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     5f0:	ldr	r2, [pc, #428]	; (7a0 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     5f2:	ldr	r0, [pc, #436]	; (7a8 <loop+0x2e0>)
     5f4:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     5f6:	smull	r1, r2, r2, r3
     5fa:	asrs	r1, r3, #31
     5fc:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     600:	cmp	r5, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     602:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     604:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     606:	beq.w	e7e <loop+0x9b6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     60a:	ldr	r1, [r4, #0]
     60c:	str	r1, [sp, #144]	; 0x90
	return ret;
     60e:	ldr	r1, [sp, #144]	; 0x90
        m_lastDebounceTime = millis();
     610:	str	r1, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r0, [r4, #0]
     614:	str	r0, [sp, #140]	; 0x8c
	return ret;
     616:	ldr	r0, [sp, #140]	; 0x8c
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     618:	cmp	r0, r1
     61a:	beq.n	630 <loop+0x168>
        // and the current changed
        if (current != m_state) {
     61c:	ldr	r1, [r6, #4]
     61e:	ldr.w	r8, [pc, #392]	; 7a8 <loop+0x2e0>
     622:	cmp	r1, r7
     624:	beq.n	630 <loop+0x168>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     626:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     628:	str.w	r7, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     62c:	ble.w	f9c <loop+0xad4>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
     630:	cmp	r3, #50	; 0x32
     632:	ble.n	644 <loop+0x17c>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     634:	cbnz	r7, 644 <loop+0x17c>
     636:	ldrb.w	r3, [r6, #48]	; 0x30
     63a:	ldr	r5, [pc, #364]	; (7a8 <loop+0x2e0>)
     63c:	cmp	r3, #1
     63e:	beq.w	149c <loop+0xfd4>
     642:	ldr	r7, [r6, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     644:	ldr	r5, [pc, #356]	; (7ac <loop+0x2e4>)
          }
          // ===============================================================================
        }
      }

      previous = current;
     646:	strb.w	r7, [r6, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     64a:	ldrb.w	r0, [r5, #56]	; 0x38
          // ===============================================================================
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     64e:	str	r2, [r6, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     650:	bl	28d4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     654:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     656:	mov	r7, r0
     658:	str	r0, [r5, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     65a:	ldrb.w	r6, [r5, #48]	; 0x30
     65e:	beq.w	e0e <loop+0x946>
     662:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     664:	ldr	r2, [r4, #0]
     666:	str	r2, [sp, #128]	; 0x80
	return ret;
     668:	ldr	r1, [sp, #128]	; 0x80
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     66a:	ldr	r2, [pc, #308]	; (7a0 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     66c:	ldr	r0, [pc, #316]	; (7ac <loop+0x2e4>)
     66e:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     670:	smull	r1, r2, r2, r3
     674:	asrs	r1, r3, #31
     676:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     67a:	cmp	r6, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     67c:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     67e:	str	r2, [r5, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     680:	beq.w	e0a <loop+0x942>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     684:	ldr	r1, [r4, #0]
     686:	str	r1, [sp, #124]	; 0x7c
	return ret;
     688:	ldr	r1, [sp, #124]	; 0x7c
        m_lastDebounceTime = millis();
     68a:	str	r1, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     68c:	ldr	r0, [r4, #0]
     68e:	str	r0, [sp, #120]	; 0x78
	return ret;
     690:	ldr	r0, [sp, #120]	; 0x78
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     692:	cmp	r0, r1
     694:	beq.n	6aa <loop+0x1e2>
        // and the current changed
        if (current != m_state) {
     696:	ldr	r1, [r5, #4]
     698:	ldr.w	r8, [pc, #272]	; 7ac <loop+0x2e4>
     69c:	cmp	r1, r7
     69e:	beq.n	6aa <loop+0x1e2>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     6a0:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     6a2:	str.w	r7, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     6a6:	ble.w	1006 <loop+0xb3e>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
     6aa:	cmp	r3, #50	; 0x32
     6ac:	ble.n	6be <loop+0x1f6>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     6ae:	cbnz	r7, 6be <loop+0x1f6>
     6b0:	ldrb.w	r3, [r5, #48]	; 0x30
     6b4:	ldr	r6, [pc, #244]	; (7ac <loop+0x2e4>)
     6b6:	cmp	r3, #1
     6b8:	beq.w	14d0 <loop+0x1008>
     6bc:	ldr	r7, [r5, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6be:	ldr	r6, [pc, #240]	; (7b0 <loop+0x2e8>)
          }
          // ===============================================================================
        }
      }

      previous = current;
     6c0:	strb.w	r7, [r5, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6c4:	ldrb.w	r0, [r6, #56]	; 0x38
          // ===============================================================================
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     6c8:	str	r2, [r5, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6ca:	bl	28d4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     6ce:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6d0:	mov	r7, r0
     6d2:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     6d4:	ldrb.w	r5, [r6, #48]	; 0x30
     6d8:	beq.w	e48 <loop+0x980>
     6dc:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6de:	ldr	r2, [r4, #0]
     6e0:	str	r2, [sp, #108]	; 0x6c
	return ret;
     6e2:	ldr	r1, [sp, #108]	; 0x6c
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     6e4:	ldr	r2, [pc, #184]	; (7a0 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     6e6:	ldr	r0, [pc, #200]	; (7b0 <loop+0x2e8>)
     6e8:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     6ea:	smull	r1, r2, r2, r3
     6ee:	asrs	r1, r3, #31
     6f0:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     6f4:	cmp	r5, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     6f6:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     6f8:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     6fa:	beq.w	e44 <loop+0x97c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6fe:	ldr	r1, [r4, #0]
     700:	str	r1, [sp, #104]	; 0x68
	return ret;
     702:	ldr	r1, [sp, #104]	; 0x68
        m_lastDebounceTime = millis();
     704:	str	r1, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     706:	ldr	r0, [r4, #0]
     708:	str	r0, [sp, #100]	; 0x64
	return ret;
     70a:	ldr	r0, [sp, #100]	; 0x64
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     70c:	cmp	r0, r1
     70e:	beq.n	724 <loop+0x25c>
        // and the current changed
        if (current != m_state) {
     710:	ldr	r1, [r6, #4]
     712:	ldr.w	r8, [pc, #156]	; 7b0 <loop+0x2e8>
     716:	cmp	r1, r7
     718:	beq.n	724 <loop+0x25c>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     71a:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     71c:	str.w	r7, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     720:	ble.w	1158 <loop+0xc90>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
     724:	cmp	r3, #50	; 0x32
     726:	ble.n	738 <loop+0x270>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     728:	cbnz	r7, 738 <loop+0x270>
     72a:	ldrb.w	r3, [r6, #48]	; 0x30
     72e:	ldr	r5, [pc, #128]	; (7b0 <loop+0x2e8>)
     730:	cmp	r3, #1
     732:	beq.w	13cc <loop+0xf04>
     736:	ldr	r7, [r6, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     738:	ldr	r5, [pc, #120]	; (7b4 <loop+0x2ec>)
          }
          // ===============================================================================
        }
      }

      previous = current;
     73a:	strb.w	r7, [r6, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     73e:	ldrb.w	r0, [r5, #56]	; 0x38
          // ===============================================================================
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     742:	str	r2, [r6, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     744:	bl	28d4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     748:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     74a:	mov	r6, r0
     74c:	str	r0, [r5, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     74e:	ldrb.w	r7, [r5, #48]	; 0x30
     752:	beq.w	d68 <loop+0x8a0>
     756:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     758:	ldr	r2, [r4, #0]
     75a:	str	r2, [sp, #88]	; 0x58
	return ret;
     75c:	ldr	r1, [sp, #88]	; 0x58
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     75e:	ldr	r2, [pc, #64]	; (7a0 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     760:	ldr	r0, [pc, #80]	; (7b4 <loop+0x2ec>)
     762:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     764:	smull	r1, r2, r2, r3
     768:	asrs	r1, r3, #31
     76a:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     76e:	cmp	r7, r6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     770:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     772:	str	r2, [r5, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     774:	beq.w	d64 <loop+0x89c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     778:	ldr	r1, [r4, #0]
     77a:	str	r1, [sp, #84]	; 0x54
	return ret;
     77c:	ldr	r1, [sp, #84]	; 0x54
        m_lastDebounceTime = millis();
     77e:	str	r1, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     780:	ldr	r0, [r4, #0]
     782:	str	r0, [sp, #80]	; 0x50
	return ret;
     784:	ldr	r0, [sp, #80]	; 0x50
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     786:	cmp	r0, r1
     788:	beq.n	7c2 <loop+0x2fa>
        // and the current changed
        if (current != m_state) {
     78a:	ldr	r1, [r5, #4]
     78c:	ldr.w	r8, [pc, #36]	; 7b4 <loop+0x2ec>
     790:	cmp	r1, r6
     792:	beq.n	7c2 <loop+0x2fa>
     794:	b.n	7b8 <loop+0x2f0>
     796:	nop
     798:	.word	0x1fff190c
     79c:	.word	0x1fff160c
     7a0:	.word	0x10624dd3
     7a4:	.word	0x1fff1648
     7a8:	.word	0x1fff1684
     7ac:	.word	0x1fff16c0
     7b0:	.word	0x1fff16fc
     7b4:	.word	0x1fff1738
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     7b8:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     7ba:	str.w	r6, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     7be:	ble.w	11c2 <loop+0xcfa>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
     7c2:	cmp	r3, #50	; 0x32
     7c4:	ble.n	7d6 <loop+0x30e>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     7c6:	cbnz	r6, 7d6 <loop+0x30e>
     7c8:	ldrb.w	r3, [r5, #48]	; 0x30
     7cc:	ldr	r7, [pc, #648]	; (a58 <loop+0x590>)
     7ce:	cmp	r3, #1
     7d0:	beq.w	1400 <loop+0xf38>
     7d4:	ldr	r6, [r5, #32]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
     7d6:	ldr	r7, [pc, #644]	; (a5c <loop+0x594>)
          }
          // ===============================================================================
        }
      }

      previous = current;
     7d8:	strb.w	r6, [r5, #48]	; 0x30
     7dc:	ldrb	r3, [r7, #16]
      prev_secs_held = secs_held;
     7de:	str	r2, [r5, #44]	; 0x2c
     7e0:	cmp	r3, #0
     7e2:	beq.w	cb4 <loop+0x7ec>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7e6:	ldr	r3, [r4, #0]
     7e8:	str	r3, [sp, #72]	; 0x48
	return ret;
     7ea:	ldr	r3, [sp, #72]	; 0x48
     7ec:	ldr	r1, [r7, #8]
     7ee:	ldr	r2, [r7, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7f0:	ldr	r6, [pc, #620]	; (a60 <loop+0x598>)
     7f2:	subs	r3, r3, r1
     7f4:	cmp	r2, r3
     7f6:	bcc.w	c94 <loop+0x7cc>
     7fa:	ldr	r5, [pc, #616]	; (a64 <loop+0x59c>)
     7fc:	ldrb	r3, [r5, #16]
     7fe:	cmp	r3, #0
     800:	beq.w	c4c <loop+0x784>
     804:	ldr	r3, [r4, #0]
     806:	str	r3, [sp, #60]	; 0x3c
	return ret;
     808:	ldr	r3, [sp, #60]	; 0x3c
     80a:	ldr	r1, [r5, #8]
     80c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     80e:	ldr	r7, [pc, #592]	; (a60 <loop+0x598>)
     810:	subs	r3, r3, r1
     812:	cmp	r2, r3
     814:	bcc.w	c2c <loop+0x764>
     818:	ldr	r5, [pc, #588]	; (a68 <loop+0x5a0>)
     81a:	ldrb	r3, [r5, #16]
     81c:	cmp	r3, #0
     81e:	beq.w	be4 <loop+0x71c>
     822:	ldr	r3, [r4, #0]
     824:	str	r3, [sp, #48]	; 0x30
	return ret;
     826:	ldr	r3, [sp, #48]	; 0x30
     828:	ldr	r1, [r5, #8]
     82a:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     82c:	ldr	r7, [pc, #560]	; (a60 <loop+0x598>)
     82e:	subs	r3, r3, r1
     830:	cmp	r2, r3
     832:	bcc.w	bc4 <loop+0x6fc>
     836:	ldr	r5, [pc, #564]	; (a6c <loop+0x5a4>)
     838:	ldrb	r3, [r5, #16]
     83a:	cmp	r3, #0
     83c:	beq.w	b7c <loop+0x6b4>
     840:	ldr	r3, [r4, #0]
     842:	str	r3, [sp, #36]	; 0x24
	return ret;
     844:	ldr	r3, [sp, #36]	; 0x24
     846:	ldr	r1, [r5, #8]
     848:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     84a:	ldr	r7, [pc, #532]	; (a60 <loop+0x598>)
     84c:	subs	r3, r3, r1
     84e:	cmp	r2, r3
     850:	bcc.w	b5c <loop+0x694>
     854:	ldr	r5, [pc, #536]	; (a70 <loop+0x5a8>)
     856:	ldrb	r3, [r5, #16]
     858:	cmp	r3, #0
     85a:	beq.w	b14 <loop+0x64c>
     85e:	ldr	r3, [r4, #0]
     860:	str	r3, [sp, #24]
	return ret;
     862:	ldr	r3, [sp, #24]
     864:	ldr	r1, [r5, #8]
     866:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     868:	ldr	r7, [pc, #500]	; (a60 <loop+0x598>)
     86a:	subs	r3, r3, r1
     86c:	cmp	r2, r3
     86e:	bcc.w	af4 <loop+0x62c>
     872:	ldr	r5, [pc, #512]	; (a74 <loop+0x5ac>)
     874:	ldrb	r3, [r5, #16]
     876:	cmp	r3, #0
     878:	beq.w	ab0 <loop+0x5e8>
     87c:	ldr	r3, [r4, #0]
     87e:	str	r3, [sp, #12]
	return ret;
     880:	ldr	r3, [sp, #12]
     882:	ldr	r1, [r5, #8]
     884:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     886:	ldr	r7, [pc, #472]	; (a60 <loop+0x598>)
     888:	subs	r3, r3, r1
     88a:	cmp	r2, r3
     88c:	bcc.w	a90 <loop+0x5c8>
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     890:	ldr	r4, [pc, #484]	; (a78 <loop+0x5b0>)
     892:	ldrb	r0, [r4, #0]
     894:	bl	26e4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     898:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     89a:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     89c:	cmp	r0, r3
     89e:	beq.n	8ea <loop+0x422>
     8a0:	subs	r3, r0, r3
     8a2:	cmp	r3, #0
     8a4:	it	lt
     8a6:	neglt	r3, r3
     8a8:	cmp	r3, #10
     8aa:	ble.n	8ea <loop+0x422>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     8ac:	ldrb	r3, [r4, #24]
     8ae:	cmp	r3, #4
     8b0:	beq.w	1540 <loop+0x1078>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     8b4:	ldr	r3, [pc, #452]	; (a7c <loop+0x5b4>)
     8b6:	ldrb	r3, [r3, #0]
     8b8:	cmp	r3, #1
     8ba:	beq.w	16da <loop+0x1212>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     8be:	cmp	r3, #0
     8c0:	beq.w	f42 <loop+0xa7a>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     8c4:	cmp	r3, #2
     8c6:	bne.n	8e8 <loop+0x420>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     8c8:	ldr	r2, [r4, #16]
     8ca:	ldr	r1, [r4, #12]
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     8cc:	mvn.w	r3, #21
     8d0:	mul.w	r3, r3, r0
     8d4:	cmp	r3, #0
     8d6:	add.w	r2, r2, r1, lsl #2
     8da:	it	lt
     8dc:	addwlt	r3, r3, #1023	; 0x3ff
     8e0:	ldr	r2, [r2, #4]
     8e2:	asrs	r3, r3, #10
     8e4:	adds	r3, #24
     8e6:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     8e8:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     8ea:	ldr	r4, [pc, #404]	; (a80 <loop+0x5b8>)
     8ec:	ldrb	r0, [r4, #0]
     8ee:	bl	26e4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     8f2:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     8f4:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     8f6:	cmp	r0, r3
     8f8:	beq.n	944 <loop+0x47c>
     8fa:	subs	r3, r0, r3
     8fc:	cmp	r3, #0
     8fe:	it	lt
     900:	neglt	r3, r3
     902:	cmp	r3, #10
     904:	ble.n	944 <loop+0x47c>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     906:	ldrb	r3, [r4, #24]
     908:	cmp	r3, #4
     90a:	beq.w	1504 <loop+0x103c>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     90e:	ldr	r3, [pc, #364]	; (a7c <loop+0x5b4>)
     910:	ldrb	r3, [r3, #0]
     912:	cmp	r3, #1
     914:	beq.w	1752 <loop+0x128a>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     918:	cmp	r3, #0
     91a:	beq.w	f60 <loop+0xa98>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     91e:	cmp	r3, #2
     920:	bne.n	942 <loop+0x47a>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     922:	ldr	r2, [r4, #16]
     924:	ldr	r1, [r4, #12]
     926:	mvn.w	r3, #21
     92a:	mul.w	r3, r3, r0
     92e:	cmp	r3, #0
     930:	add.w	r2, r2, r1, lsl #2
     934:	it	lt
     936:	addwlt	r3, r3, #1023	; 0x3ff
     93a:	ldr	r2, [r2, #4]
     93c:	asrs	r3, r3, #10
     93e:	adds	r3, #24
     940:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     942:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     944:	ldr	r4, [pc, #316]	; (a84 <loop+0x5bc>)
     946:	ldrb	r0, [r4, #0]
     948:	bl	26e4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     94c:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     94e:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     950:	cmp	r0, r3
     952:	beq.n	99e <loop+0x4d6>
     954:	subs	r3, r0, r3
     956:	cmp	r3, #0
     958:	it	lt
     95a:	neglt	r3, r3
     95c:	cmp	r3, #10
     95e:	ble.n	99e <loop+0x4d6>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     960:	ldrb	r3, [r4, #24]
     962:	cmp	r3, #4
     964:	beq.w	155e <loop+0x1096>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     968:	ldr	r3, [pc, #272]	; (a7c <loop+0x5b4>)
     96a:	ldrb	r3, [r3, #0]
     96c:	cmp	r3, #1
     96e:	beq.w	1716 <loop+0x124e>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     972:	cmp	r3, #0
     974:	beq.w	f7e <loop+0xab6>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     978:	cmp	r3, #2
     97a:	bne.n	99c <loop+0x4d4>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     97c:	ldr	r2, [r4, #16]
     97e:	ldr	r1, [r4, #12]
     980:	mvn.w	r3, #21
     984:	mul.w	r3, r3, r0
     988:	cmp	r3, #0
     98a:	add.w	r2, r2, r1, lsl #2
     98e:	it	lt
     990:	addwlt	r3, r3, #1023	; 0x3ff
     994:	ldr	r2, [r2, #4]
     996:	asrs	r3, r3, #10
     998:	adds	r3, #24
     99a:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     99c:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     99e:	ldr	r4, [pc, #232]	; (a88 <loop+0x5c0>)
     9a0:	ldrb	r0, [r4, #0]
     9a2:	bl	26e4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     9a6:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     9a8:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     9aa:	cmp	r0, r3
     9ac:	beq.n	9f8 <loop+0x530>
     9ae:	subs	r3, r0, r3
     9b0:	cmp	r3, #0
     9b2:	it	lt
     9b4:	neglt	r3, r3
     9b6:	cmp	r3, #10
     9b8:	ble.n	9f8 <loop+0x530>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     9ba:	ldrb	r3, [r4, #24]
     9bc:	cmp	r3, #4
     9be:	beq.w	1522 <loop+0x105a>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     9c2:	ldr	r3, [pc, #184]	; (a7c <loop+0x5b4>)
     9c4:	ldrb	r3, [r3, #0]
     9c6:	cmp	r3, #1
     9c8:	beq.w	1734 <loop+0x126c>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     9cc:	cmp	r3, #0
     9ce:	beq.w	f06 <loop+0xa3e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     9d2:	cmp	r3, #2
     9d4:	bne.n	9f6 <loop+0x52e>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     9d6:	ldr	r2, [r4, #16]
     9d8:	ldr	r1, [r4, #12]
     9da:	mvn.w	r3, #21
     9de:	mul.w	r3, r3, r0
     9e2:	cmp	r3, #0
     9e4:	add.w	r2, r2, r1, lsl #2
     9e8:	it	lt
     9ea:	addwlt	r3, r3, #1023	; 0x3ff
     9ee:	ldr	r2, [r2, #4]
     9f0:	asrs	r3, r3, #10
     9f2:	adds	r3, #24
     9f4:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     9f6:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     9f8:	ldr	r4, [pc, #144]	; (a8c <loop+0x5c4>)
     9fa:	ldrb	r0, [r4, #0]
     9fc:	bl	26e4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     a00:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     a02:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     a04:	cmp	r0, r3
     a06:	beq.n	a52 <loop+0x58a>
     a08:	subs	r3, r0, r3
     a0a:	cmp	r3, #0
     a0c:	it	lt
     a0e:	neglt	r3, r3
     a10:	cmp	r3, #10
     a12:	ble.n	a52 <loop+0x58a>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     a14:	ldrb	r3, [r4, #24]
     a16:	cmp	r3, #4
     a18:	beq.w	157c <loop+0x10b4>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     a1c:	ldr	r3, [pc, #92]	; (a7c <loop+0x5b4>)
     a1e:	ldrb	r3, [r3, #0]
     a20:	cmp	r3, #1
     a22:	beq.w	16f8 <loop+0x1230>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     a26:	cmp	r3, #0
     a28:	beq.w	f24 <loop+0xa5c>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     a2c:	cmp	r3, #2
     a2e:	bne.n	a50 <loop+0x588>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     a30:	ldr	r2, [r4, #16]
     a32:	ldr	r1, [r4, #12]
     a34:	mvn.w	r3, #21
     a38:	mul.w	r3, r3, r0
     a3c:	cmp	r3, #0
     a3e:	add.w	r2, r2, r1, lsl #2
     a42:	it	lt
     a44:	addwlt	r3, r3, #1023	; 0x3ff
     a48:	ldr	r2, [r2, #4]
     a4a:	asrs	r3, r3, #10
     a4c:	adds	r3, #24
     a4e:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     a50:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     a52:	add	sp, #248	; 0xf8
     a54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a58:	.word	0x1fff1738
     a5c:	.word	0x1fff1894
     a60:	.word	0x1fff190c
     a64:	.word	0x1fff18ac
     a68:	.word	0x1fff18c4
     a6c:	.word	0x1fff18dc
     a70:	.word	0x1fff15d8
     a74:	.word	0x1fff15f0
     a78:	.word	0x1fff17f4
     a7c:	.word	0x1fff1890
     a80:	.word	0x1fff1810
     a84:	.word	0x1fff182c
     a88:	.word	0x1fff1848
     a8c:	.word	0x1fff1864
        digitalWrite(m_pin, !digitalRead(m_pin));
     a90:	ldrb	r6, [r5, #0]
     a92:	mov	r0, r6
     a94:	bl	28d4 <digitalRead>
     a98:	clz	r1, r0
     a9c:	lsrs	r1, r1, #5
     a9e:	mov	r0, r6
     aa0:	bl	28c8 <digitalWrite>
     aa4:	ldr	r3, [r7, #0]
     aa6:	str	r3, [sp, #16]
	return ret;
     aa8:	ldr	r3, [sp, #16]
        blinking = false;
        lastBlink = millis();        
     aaa:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     aac:	movs	r3, #0
     aae:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     ab0:	ldr	r6, [r5, #20]
     ab2:	ldr	r5, [pc, #748]	; (da0 <loop+0x8d8>)
     ab4:	cmp	r6, #0
     ab6:	ble.w	890 <loop+0x3c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     aba:	ldr	r3, [r4, #0]
     abc:	str	r3, [sp, #8]
	return ret;
     abe:	ldr	r3, [sp, #8]
     ac0:	ldr	r1, [r5, #8]
     ac2:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ac4:	ldr	r7, [pc, #732]	; (da4 <loop+0x8dc>)
     ac6:	subs	r3, r3, r1
     ac8:	cmp	r2, r3
     aca:	bcs.w	890 <loop+0x3c8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ace:	ldrb	r4, [r5, #0]
     ad0:	mov	r0, r4
     ad2:	bl	28d4 <digitalRead>
     ad6:	clz	r1, r0
     ada:	lsrs	r1, r1, #5
     adc:	mov	r0, r4
     ade:	bl	28c8 <digitalWrite>
     ae2:	ldr	r3, [r7, #0]
     ae4:	str	r3, [sp, #244]	; 0xf4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     ae6:	subs	r6, #2
	return ret;
     ae8:	ldr	r2, [sp, #244]	; 0xf4
     aea:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     aec:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     aee:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     af0:	strb	r3, [r5, #16]
     af2:	b.n	890 <loop+0x3c8>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     af4:	ldrb	r6, [r5, #0]
     af6:	mov	r0, r6
     af8:	bl	28d4 <digitalRead>
     afc:	clz	r1, r0
     b00:	lsrs	r1, r1, #5
     b02:	mov	r0, r6
     b04:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b08:	ldr	r3, [r7, #0]
     b0a:	str	r3, [sp, #28]
	return ret;
     b0c:	ldr	r3, [sp, #28]
        blinking = false;
        lastBlink = millis();        
     b0e:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b10:	movs	r3, #0
     b12:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b14:	ldr	r6, [r5, #20]
     b16:	ldr	r5, [pc, #656]	; (da8 <loop+0x8e0>)
     b18:	cmp	r6, #0
     b1a:	ble.w	872 <loop+0x3aa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b1e:	ldr	r3, [r4, #0]
     b20:	str	r3, [sp, #20]
	return ret;
     b22:	ldr	r3, [sp, #20]
     b24:	ldr	r1, [r5, #8]
     b26:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b28:	ldr.w	r8, [pc, #632]	; da4 <loop+0x8dc>
     b2c:	subs	r3, r3, r1
     b2e:	cmp	r2, r3
     b30:	bcs.w	872 <loop+0x3aa>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b34:	ldrb	r7, [r5, #0]
     b36:	mov	r0, r7
     b38:	bl	28d4 <digitalRead>
     b3c:	clz	r1, r0
     b40:	lsrs	r1, r1, #5
     b42:	mov	r0, r7
     b44:	bl	28c8 <digitalWrite>
     b48:	ldr.w	r3, [r8]
     b4c:	str	r3, [sp, #240]	; 0xf0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b4e:	subs	r6, #2
	return ret;
     b50:	ldr	r2, [sp, #240]	; 0xf0
     b52:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b54:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     b56:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b58:	strb	r3, [r5, #16]
     b5a:	b.n	872 <loop+0x3aa>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     b5c:	ldrb	r6, [r5, #0]
     b5e:	mov	r0, r6
     b60:	bl	28d4 <digitalRead>
     b64:	clz	r1, r0
     b68:	lsrs	r1, r1, #5
     b6a:	mov	r0, r6
     b6c:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b70:	ldr	r3, [r7, #0]
     b72:	str	r3, [sp, #40]	; 0x28
	return ret;
     b74:	ldr	r3, [sp, #40]	; 0x28
        blinking = false;
        lastBlink = millis();        
     b76:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b78:	movs	r3, #0
     b7a:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b7c:	ldr	r6, [r5, #20]
     b7e:	ldr	r5, [pc, #556]	; (dac <loop+0x8e4>)
     b80:	cmp	r6, #0
     b82:	ble.w	854 <loop+0x38c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b86:	ldr	r3, [r4, #0]
     b88:	str	r3, [sp, #32]
	return ret;
     b8a:	ldr	r3, [sp, #32]
     b8c:	ldr	r1, [r5, #8]
     b8e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b90:	ldr.w	r8, [pc, #528]	; da4 <loop+0x8dc>
     b94:	subs	r3, r3, r1
     b96:	cmp	r2, r3
     b98:	bcs.w	854 <loop+0x38c>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b9c:	ldrb	r7, [r5, #0]
     b9e:	mov	r0, r7
     ba0:	bl	28d4 <digitalRead>
     ba4:	clz	r1, r0
     ba8:	lsrs	r1, r1, #5
     baa:	mov	r0, r7
     bac:	bl	28c8 <digitalWrite>
     bb0:	ldr.w	r3, [r8]
     bb4:	str	r3, [sp, #236]	; 0xec
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     bb6:	subs	r6, #2
	return ret;
     bb8:	ldr	r2, [sp, #236]	; 0xec
     bba:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     bbc:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     bbe:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     bc0:	strb	r3, [r5, #16]
     bc2:	b.n	854 <loop+0x38c>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     bc4:	ldrb	r6, [r5, #0]
     bc6:	mov	r0, r6
     bc8:	bl	28d4 <digitalRead>
     bcc:	clz	r1, r0
     bd0:	lsrs	r1, r1, #5
     bd2:	mov	r0, r6
     bd4:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bd8:	ldr	r3, [r7, #0]
     bda:	str	r3, [sp, #52]	; 0x34
	return ret;
     bdc:	ldr	r3, [sp, #52]	; 0x34
        blinking = false;
        lastBlink = millis();        
     bde:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     be0:	movs	r3, #0
     be2:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     be4:	ldr	r6, [r5, #20]
     be6:	ldr	r5, [pc, #456]	; (db0 <loop+0x8e8>)
     be8:	cmp	r6, #0
     bea:	ble.w	836 <loop+0x36e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bee:	ldr	r3, [r4, #0]
     bf0:	str	r3, [sp, #44]	; 0x2c
	return ret;
     bf2:	ldr	r3, [sp, #44]	; 0x2c
     bf4:	ldr	r1, [r5, #8]
     bf6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bf8:	ldr.w	r8, [pc, #424]	; da4 <loop+0x8dc>
     bfc:	subs	r3, r3, r1
     bfe:	cmp	r2, r3
     c00:	bcs.w	836 <loop+0x36e>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c04:	ldrb	r7, [r5, #0]
     c06:	mov	r0, r7
     c08:	bl	28d4 <digitalRead>
     c0c:	clz	r1, r0
     c10:	lsrs	r1, r1, #5
     c12:	mov	r0, r7
     c14:	bl	28c8 <digitalWrite>
     c18:	ldr.w	r3, [r8]
     c1c:	str	r3, [sp, #232]	; 0xe8
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     c1e:	subs	r6, #2
	return ret;
     c20:	ldr	r2, [sp, #232]	; 0xe8
     c22:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c24:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     c26:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c28:	strb	r3, [r5, #16]
     c2a:	b.n	836 <loop+0x36e>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     c2c:	ldrb	r6, [r5, #0]
     c2e:	mov	r0, r6
     c30:	bl	28d4 <digitalRead>
     c34:	clz	r1, r0
     c38:	lsrs	r1, r1, #5
     c3a:	mov	r0, r6
     c3c:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c40:	ldr	r3, [r7, #0]
     c42:	str	r3, [sp, #64]	; 0x40
	return ret;
     c44:	ldr	r3, [sp, #64]	; 0x40
        blinking = false;
        lastBlink = millis();        
     c46:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     c48:	movs	r3, #0
     c4a:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     c4c:	ldr	r6, [r5, #20]
     c4e:	ldr	r5, [pc, #356]	; (db4 <loop+0x8ec>)
     c50:	cmp	r6, #0
     c52:	ble.w	818 <loop+0x350>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c56:	ldr	r3, [r4, #0]
     c58:	str	r3, [sp, #56]	; 0x38
	return ret;
     c5a:	ldr	r3, [sp, #56]	; 0x38
     c5c:	ldr	r1, [r5, #8]
     c5e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c60:	ldr.w	r8, [pc, #320]	; da4 <loop+0x8dc>
     c64:	subs	r3, r3, r1
     c66:	cmp	r2, r3
     c68:	bcs.w	818 <loop+0x350>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c6c:	ldrb	r7, [r5, #0]
     c6e:	mov	r0, r7
     c70:	bl	28d4 <digitalRead>
     c74:	clz	r1, r0
     c78:	lsrs	r1, r1, #5
     c7a:	mov	r0, r7
     c7c:	bl	28c8 <digitalWrite>
     c80:	ldr.w	r3, [r8]
     c84:	str	r3, [sp, #228]	; 0xe4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     c86:	subs	r6, #2
	return ret;
     c88:	ldr	r2, [sp, #228]	; 0xe4
     c8a:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c8c:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     c8e:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c90:	strb	r3, [r5, #16]
     c92:	b.n	818 <loop+0x350>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     c94:	ldrb	r5, [r7, #0]
     c96:	mov	r0, r5
     c98:	bl	28d4 <digitalRead>
     c9c:	clz	r1, r0
     ca0:	lsrs	r1, r1, #5
     ca2:	mov	r0, r5
     ca4:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ca8:	ldr	r3, [r6, #0]
     caa:	str	r3, [sp, #76]	; 0x4c
	return ret;
     cac:	ldr	r3, [sp, #76]	; 0x4c
        blinking = false;
        lastBlink = millis();        
     cae:	str	r3, [r7, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     cb0:	movs	r3, #0
     cb2:	strb	r3, [r7, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     cb4:	ldr	r6, [r7, #20]
     cb6:	ldr	r5, [pc, #256]	; (db8 <loop+0x8f0>)
     cb8:	cmp	r6, #0
     cba:	ble.w	7fa <loop+0x332>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cbe:	ldr	r3, [r4, #0]
     cc0:	str	r3, [sp, #68]	; 0x44
	return ret;
     cc2:	ldr	r3, [sp, #68]	; 0x44
     cc4:	ldr	r1, [r5, #8]
     cc6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cc8:	ldr.w	r8, [pc, #216]	; da4 <loop+0x8dc>
     ccc:	subs	r3, r3, r1
     cce:	cmp	r2, r3
     cd0:	bcs.w	7fa <loop+0x332>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     cd4:	ldrb	r7, [r5, #0]
     cd6:	mov	r0, r7
     cd8:	bl	28d4 <digitalRead>
     cdc:	clz	r1, r0
     ce0:	lsrs	r1, r1, #5
     ce2:	mov	r0, r7
     ce4:	bl	28c8 <digitalWrite>
     ce8:	ldr.w	r3, [r8]
     cec:	str	r3, [sp, #224]	; 0xe0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     cee:	subs	r6, #2
	return ret;
     cf0:	ldr	r2, [sp, #224]	; 0xe0
     cf2:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     cf4:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     cf6:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     cf8:	strb	r3, [r5, #16]
     cfa:	b.n	7fa <loop+0x332>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     cfc:	ldr	r3, [pc, #188]	; (dbc <loop+0x8f4>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     cfe:	ldrb	r3, [r3, #0]
     d00:	cmp	r3, #250	; 0xfa
     d02:	beq.w	159a <loop+0x10d2>
     d06:	cmp	r3, #252	; 0xfc
     d08:	beq.w	ebc <loop+0x9f4>
     d0c:	cmp	r3, #248	; 0xf8
     d0e:	beq.w	1658 <loop+0x1190>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     d12:	movs	r1, #35	; 0x23
     d14:	ldr	r0, [pc, #168]	; (dc0 <loop+0x8f8>)
     d16:	ldr	r4, [pc, #140]	; (da4 <loop+0x8dc>)
     d18:	bl	22b8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     d1c:	ldr	r0, [pc, #164]	; (dc4 <loop+0x8fc>)
     d1e:	bl	3e2c <Print::println()>
     d22:	b.w	4dc <loop+0x14>
     d26:	ldr	r1, [r0, #20]
     d28:	b.w	51e <loop+0x56>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     d2c:	cmp	r5, #0
     d2e:	bne.w	4f4 <loop+0x2c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d32:	ldr	r3, [r4, #0]
     d34:	str	r3, [sp, #196]	; 0xc4
	return ret;
     d36:	ldr	r2, [sp, #196]	; 0xc4
     d38:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d3a:	ldr.w	sl, [pc, #104]	; da4 <loop+0x8dc>
     d3e:	subs	r2, r2, r3
     d40:	cmp	r2, #200	; 0xc8
     d42:	bhi.w	122c <loop+0xd64>
     d46:	ldr.w	r2, [sl]
     d4a:	str	r2, [sp, #188]	; 0xbc
	return ret;
     d4c:	ldr	r1, [sp, #188]	; 0xbc
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     d4e:	ldr	r2, [pc, #120]	; (dc8 <loop+0x900>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     d50:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     d52:	smull	r1, r2, r2, r3
     d56:	asrs	r1, r3, #31
     d58:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     d5c:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     d5e:	str	r2, [r6, #40]	; 0x28
     d60:	b.w	516 <loop+0x4e>
     d64:	ldr	r1, [r0, #20]
     d66:	b.n	780 <loop+0x2b8>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     d68:	cmp	r7, #0
     d6a:	bne.w	756 <loop+0x28e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d6e:	ldr	r3, [r4, #0]
     d70:	str	r3, [sp, #96]	; 0x60
	return ret;
     d72:	ldr	r2, [sp, #96]	; 0x60
     d74:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d76:	ldr.w	sl, [pc, #44]	; da4 <loop+0x8dc>
     d7a:	subs	r2, r2, r3
     d7c:	cmp	r2, #200	; 0xc8
     d7e:	bhi.w	12f8 <loop+0xe30>
     d82:	ldr.w	r2, [sl]
     d86:	str	r2, [sp, #88]	; 0x58
	return ret;
     d88:	ldr	r1, [sp, #88]	; 0x58
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     d8a:	ldr	r2, [pc, #60]	; (dc8 <loop+0x900>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     d8c:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     d8e:	smull	r1, r2, r2, r3
     d92:	asrs	r1, r3, #31
     d94:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     d98:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     d9a:	str	r2, [r5, #40]	; 0x28
     d9c:	b.n	778 <loop+0x2b0>
     d9e:	nop
     da0:	.word	0x1fff15f0
     da4:	.word	0x1fff190c
     da8:	.word	0x1fff15d8
     dac:	.word	0x1fff18dc
     db0:	.word	0x1fff18c4
     db4:	.word	0x1fff18ac
     db8:	.word	0x1fff1894
     dbc:	.word	0x1fff1dc8
     dc0:	.word	0x00005268
     dc4:	.word	0x1fff0c70
     dc8:	.word	0x10624dd3
     dcc:	ldr	r1, [r0, #20]
     dce:	b.w	598 <loop+0xd0>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     dd2:	cmp	r6, #0
     dd4:	bne.w	56e <loop+0xa6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dd8:	ldr	r3, [r4, #0]
     dda:	str	r3, [sp, #176]	; 0xb0
	return ret;
     ddc:	ldr	r2, [sp, #176]	; 0xb0
     dde:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     de0:	ldr.w	sl, [pc, #668]	; 1080 <loop+0xbb8>
     de4:	subs	r2, r2, r3
     de6:	cmp	r2, #200	; 0xc8
     de8:	bhi.w	1388 <loop+0xec0>
     dec:	ldr.w	r2, [sl]
     df0:	str	r2, [sp, #168]	; 0xa8
	return ret;
     df2:	ldr	r1, [sp, #168]	; 0xa8
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     df4:	ldr	r2, [pc, #632]	; (1070 <loop+0xba8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     df6:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     df8:	smull	r1, r2, r2, r3
     dfc:	asrs	r1, r3, #31
     dfe:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e02:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     e04:	str	r2, [r5, #40]	; 0x28
     e06:	b.w	590 <loop+0xc8>
     e0a:	ldr	r1, [r0, #20]
     e0c:	b.n	68c <loop+0x1c4>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     e0e:	cmp	r6, #0
     e10:	bne.w	662 <loop+0x19a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e14:	ldr	r3, [r4, #0]
     e16:	str	r3, [sp, #136]	; 0x88
	return ret;
     e18:	ldr	r2, [sp, #136]	; 0x88
     e1a:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e1c:	ldr.w	sl, [pc, #608]	; 1080 <loop+0xbb8>
     e20:	subs	r2, r2, r3
     e22:	cmp	r2, #200	; 0xc8
     e24:	bhi.w	1270 <loop+0xda8>
     e28:	ldr.w	r2, [sl]
     e2c:	str	r2, [sp, #128]	; 0x80
	return ret;
     e2e:	ldr	r1, [sp, #128]	; 0x80
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     e30:	ldr	r2, [pc, #572]	; (1070 <loop+0xba8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e32:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     e34:	smull	r1, r2, r2, r3
     e38:	asrs	r1, r3, #31
     e3a:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e3e:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     e40:	str	r2, [r5, #40]	; 0x28
     e42:	b.n	684 <loop+0x1bc>
     e44:	ldr	r1, [r0, #20]
     e46:	b.n	706 <loop+0x23e>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     e48:	cmp	r5, #0
     e4a:	bne.w	6dc <loop+0x214>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e4e:	ldr	r3, [r4, #0]
     e50:	str	r3, [sp, #116]	; 0x74
	return ret;
     e52:	ldr	r2, [sp, #116]	; 0x74
     e54:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e56:	ldr.w	sl, [pc, #552]	; 1080 <loop+0xbb8>
     e5a:	subs	r2, r2, r3
     e5c:	cmp	r2, #200	; 0xc8
     e5e:	bhi.w	133c <loop+0xe74>
     e62:	ldr.w	r2, [sl]
     e66:	str	r2, [sp, #108]	; 0x6c
	return ret;
     e68:	ldr	r1, [sp, #108]	; 0x6c
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     e6a:	ldr	r2, [pc, #516]	; (1070 <loop+0xba8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e6c:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     e6e:	smull	r1, r2, r2, r3
     e72:	asrs	r1, r3, #31
     e74:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e78:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     e7a:	str	r2, [r6, #40]	; 0x28
     e7c:	b.n	6fe <loop+0x236>
     e7e:	ldr	r1, [r0, #20]
     e80:	b.w	612 <loop+0x14a>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     e84:	cmp	r5, #0
     e86:	bne.w	5e8 <loop+0x120>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e8a:	ldr	r3, [r4, #0]
     e8c:	str	r3, [sp, #156]	; 0x9c
	return ret;
     e8e:	ldr	r2, [sp, #156]	; 0x9c
     e90:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e92:	ldr.w	sl, [pc, #492]	; 1080 <loop+0xbb8>
     e96:	subs	r2, r2, r3
     e98:	cmp	r2, #200	; 0xc8
     e9a:	bhi.w	12b4 <loop+0xdec>
     e9e:	ldr.w	r2, [sl]
     ea2:	str	r2, [sp, #148]	; 0x94
	return ret;
     ea4:	ldr	r1, [sp, #148]	; 0x94
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     ea6:	ldr	r2, [pc, #456]	; (1070 <loop+0xba8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     ea8:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     eaa:	smull	r1, r2, r2, r3
     eae:	asrs	r1, r3, #31
     eb0:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     eb4:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     eb6:	str	r2, [r6, #40]	; 0x28
     eb8:	b.w	60a <loop+0x142>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     ebc:	ldr	r2, [pc, #436]	; (1074 <loop+0xbac>)
     ebe:	ldr	r0, [pc, #440]	; (1078 <loop+0xbb0>)
      ppqn = 0;
      m_sequence.resetStep();
     ec0:	ldr	r1, [r2, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     ec2:	movs	r3, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
     ec4:	ldr	r4, [r1, #40]	; 0x28
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
     ec6:	str	r3, [r2, #8]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     ec8:	strb	r3, [r2, #0]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
     eca:	str	r3, [r1, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ecc:	ldr	r3, [r4, #4]
     ece:	clz	r3, r3
     ed2:	lsrs	r3, r3, #5
     ed4:	str	r3, [r4, #4]
     ed6:	movs	r1, #8
     ed8:	bl	22b8 <usb_serial_write>
     edc:	ldr	r0, [pc, #412]	; (107c <loop+0xbb4>)
     ede:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     ee2:	ldrb	r1, [r4, #4]
     ee4:	ldrb	r0, [r4, #0]
     ee6:	bl	28c8 <digitalWrite>

      if (blinking) {
     eea:	ldrb	r3, [r4, #16]
     eec:	cmp	r3, #0
     eee:	beq.w	4da <loop+0x12>
        digitalWrite(m_pin, !m_state);
     ef2:	ldr	r1, [r4, #4]
     ef4:	ldrb	r0, [r4, #0]
     ef6:	ldr	r4, [pc, #392]	; (1080 <loop+0xbb8>)
     ef8:	clz	r1, r1
     efc:	lsrs	r1, r1, #5
     efe:	bl	28c8 <digitalWrite>
     f02:	b.w	4dc <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
     f06:	ldr	r3, [r4, #16]
     f08:	ldr	r2, [r4, #12]
     f0a:	add.w	r2, r3, r2, lsl #2
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
     f0e:	sub.w	r3, r0, r0, lsl #2
     f12:	lsls	r3, r3, #2
     f14:	it	mi
     f16:	addwmi	r3, r3, #1023	; 0x3ff
     f1a:	ldr	r2, [r2, #4]
     f1c:	asrs	r3, r3, #10
     f1e:	adds	r3, #51	; 0x33
     f20:	str	r3, [r2, #8]
     f22:	b.n	9f6 <loop+0x52e>
     f24:	ldr	r3, [r4, #16]
     f26:	ldr	r2, [r4, #12]
     f28:	add.w	r2, r3, r2, lsl #2
     f2c:	sub.w	r3, r0, r0, lsl #2
     f30:	lsls	r3, r3, #2
     f32:	it	mi
     f34:	addwmi	r3, r3, #1023	; 0x3ff
     f38:	ldr	r2, [r2, #4]
     f3a:	asrs	r3, r3, #10
     f3c:	adds	r3, #51	; 0x33
     f3e:	str	r3, [r2, #8]
     f40:	b.n	a50 <loop+0x588>
     f42:	ldr	r3, [r4, #16]
     f44:	ldr	r2, [r4, #12]
     f46:	add.w	r2, r3, r2, lsl #2
     f4a:	sub.w	r3, r0, r0, lsl #2
     f4e:	lsls	r3, r3, #2
     f50:	it	mi
     f52:	addwmi	r3, r3, #1023	; 0x3ff
     f56:	ldr	r2, [r2, #4]
     f58:	asrs	r3, r3, #10
     f5a:	adds	r3, #51	; 0x33
     f5c:	str	r3, [r2, #8]
     f5e:	b.n	8e8 <loop+0x420>
     f60:	ldr	r3, [r4, #16]
     f62:	ldr	r2, [r4, #12]
     f64:	add.w	r2, r3, r2, lsl #2
     f68:	sub.w	r3, r0, r0, lsl #2
     f6c:	lsls	r3, r3, #2
     f6e:	it	mi
     f70:	addwmi	r3, r3, #1023	; 0x3ff
     f74:	ldr	r2, [r2, #4]
     f76:	asrs	r3, r3, #10
     f78:	adds	r3, #51	; 0x33
     f7a:	str	r3, [r2, #8]
     f7c:	b.n	942 <loop+0x47a>
     f7e:	ldr	r3, [r4, #16]
     f80:	ldr	r2, [r4, #12]
     f82:	add.w	r2, r3, r2, lsl #2
     f86:	sub.w	r3, r0, r0, lsl #2
     f8a:	lsls	r3, r3, #2
     f8c:	it	mi
     f8e:	addwmi	r3, r3, #1023	; 0x3ff
     f92:	ldr	r2, [r2, #4]
     f94:	asrs	r3, r3, #10
     f96:	adds	r3, #51	; 0x33
     f98:	str	r3, [r2, #8]
     f9a:	b.n	99c <loop+0x4d4>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     f9c:	cmp	r7, #0
     f9e:	bne.w	644 <loop+0x17c>
     fa2:	ldrb.w	r1, [r8, #16]
     fa6:	cmp	r1, #0
     fa8:	bne.w	1912 <loop+0x144a>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     fac:	ldrb.w	r3, [r8, #17]
        m_led.toggle();
     fb0:	ldr.w	r5, [r8, #24]
     fb4:	ldr	r0, [pc, #192]	; (1078 <loop+0xbb0>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     fb6:	cmp	r3, #0
     fb8:	bne.w	1a74 <loop+0x15ac>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     fbc:	ldr	r3, [r5, #4]
     fbe:	clz	r3, r3
     fc2:	lsrs	r3, r3, #5
     fc4:	str	r3, [r5, #4]
     fc6:	movs	r1, #8
     fc8:	bl	22b8 <usb_serial_write>
     fcc:	ldr	r0, [pc, #172]	; (107c <loop+0xbb4>)
     fce:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     fd2:	ldrb	r1, [r5, #4]
     fd4:	ldrb	r0, [r5, #0]
     fd6:	bl	28c8 <digitalWrite>

      if (blinking) {
     fda:	ldrb	r3, [r5, #16]
     fdc:	cbz	r3, fec <loop+0xb24>
        digitalWrite(m_pin, !m_state);
     fde:	ldr	r1, [r5, #4]
     fe0:	ldrb	r0, [r5, #0]
     fe2:	clz	r1, r1
     fe6:	lsrs	r1, r1, #5
     fe8:	bl	28c8 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     fec:	ldr	r2, [r6, #28]
     fee:	ldr	r1, [r6, #0]
     ff0:	ldr	r3, [r6, #36]	; 0x24
     ff2:	ldr.w	r0, [r2, r1, lsl #2]
     ff6:	ldr	r7, [r6, #32]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
     ff8:	ldrb	r1, [r0, #4]
     ffa:	ldr	r2, [r6, #40]	; 0x28
     ffc:	eor.w	r1, r1, #1
    1000:	strb	r1, [r0, #4]
    1002:	b.w	630 <loop+0x168>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    1006:	cmp	r7, #0
    1008:	bne.w	6be <loop+0x1f6>
    100c:	ldrb.w	r1, [r8, #16]
    1010:	cmp	r1, #0
    1012:	bne.w	18c2 <loop+0x13fa>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
    1016:	ldrb.w	r3, [r8, #17]
        m_led.toggle();
    101a:	ldr.w	r6, [r8, #24]
    101e:	ldr	r0, [pc, #88]	; (1078 <loop+0xbb0>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
    1020:	cmp	r3, #0
    1022:	bne.w	1b04 <loop+0x163c>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1026:	ldr	r3, [r6, #4]
    1028:	clz	r3, r3
    102c:	lsrs	r3, r3, #5
    102e:	str	r3, [r6, #4]
    1030:	movs	r1, #8
    1032:	bl	22b8 <usb_serial_write>
    1036:	ldr	r0, [pc, #68]	; (107c <loop+0xbb4>)
    1038:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    103c:	ldrb	r1, [r6, #4]
    103e:	ldrb	r0, [r6, #0]
    1040:	bl	28c8 <digitalWrite>

      if (blinking) {
    1044:	ldrb	r3, [r6, #16]
    1046:	cbz	r3, 1056 <loop+0xb8e>
        digitalWrite(m_pin, !m_state);
    1048:	ldr	r1, [r6, #4]
    104a:	ldrb	r0, [r6, #0]
    104c:	clz	r1, r1
    1050:	lsrs	r1, r1, #5
    1052:	bl	28c8 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
    1056:	ldr	r2, [r5, #28]
    1058:	ldr	r1, [r5, #0]
    105a:	ldr	r3, [r5, #36]	; 0x24
    105c:	ldr.w	r0, [r2, r1, lsl #2]
    1060:	ldr	r7, [r5, #32]
    1062:	ldrb	r1, [r0, #4]
    1064:	ldr	r2, [r5, #40]	; 0x28
    1066:	eor.w	r1, r1, #1
    106a:	strb	r1, [r0, #4]
    106c:	b.w	6aa <loop+0x1e2>
    1070:	.word	0x10624dd3
    1074:	.word	0x1fff1880
    1078:	.word	0x0000525c
    107c:	.word	0x1fff0c70
    1080:	.word	0x1fff190c

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    1084:	cmp	r7, #0
    1086:	bne.w	550 <loop+0x88>
    108a:	ldrb.w	r1, [r8, #16]
    108e:	cmp	r1, #0
    1090:	bne.w	189a <loop+0x13d2>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
    1094:	ldrb.w	r3, [r8, #17]
        m_led.toggle();
    1098:	ldr.w	r5, [r8, #24]
    109c:	ldr	r0, [pc, #736]	; (1380 <loop+0xeb8>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
    109e:	cmp	r3, #0
    10a0:	bne.w	199c <loop+0x14d4>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    10a4:	ldr	r3, [r5, #4]
    10a6:	clz	r3, r3
    10aa:	lsrs	r3, r3, #5
    10ac:	str	r3, [r5, #4]
    10ae:	movs	r1, #8
    10b0:	bl	22b8 <usb_serial_write>
    10b4:	ldr	r0, [pc, #716]	; (1384 <loop+0xebc>)
    10b6:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    10ba:	ldrb	r1, [r5, #4]
    10bc:	ldrb	r0, [r5, #0]
    10be:	bl	28c8 <digitalWrite>

      if (blinking) {
    10c2:	ldrb	r3, [r5, #16]
    10c4:	cbz	r3, 10d4 <loop+0xc0c>
        digitalWrite(m_pin, !m_state);
    10c6:	ldr	r1, [r5, #4]
    10c8:	ldrb	r0, [r5, #0]
    10ca:	clz	r1, r1
    10ce:	lsrs	r1, r1, #5
    10d0:	bl	28c8 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
    10d4:	ldr	r2, [r6, #28]
    10d6:	ldr	r1, [r6, #0]
    10d8:	ldr	r3, [r6, #36]	; 0x24
    10da:	ldr.w	r0, [r2, r1, lsl #2]
    10de:	ldr	r7, [r6, #32]
    10e0:	ldrb	r1, [r0, #4]
    10e2:	ldr	r2, [r6, #40]	; 0x28
    10e4:	eor.w	r1, r1, #1
    10e8:	strb	r1, [r0, #4]
    10ea:	b.w	53c <loop+0x74>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    10ee:	cmp	r7, #0
    10f0:	bne.w	5ca <loop+0x102>
    10f4:	ldrb.w	r1, [r8, #16]
    10f8:	cmp	r1, #0
    10fa:	bne.w	18ea <loop+0x1422>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
    10fe:	ldrb.w	r3, [r8, #17]
        m_led.toggle();
    1102:	ldr.w	r6, [r8, #24]
    1106:	ldr	r0, [pc, #632]	; (1380 <loop+0xeb8>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
    1108:	cmp	r3, #0
    110a:	bne.w	1a2c <loop+0x1564>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    110e:	ldr	r3, [r6, #4]
    1110:	clz	r3, r3
    1114:	lsrs	r3, r3, #5
    1116:	str	r3, [r6, #4]
    1118:	movs	r1, #8
    111a:	bl	22b8 <usb_serial_write>
    111e:	ldr	r0, [pc, #612]	; (1384 <loop+0xebc>)
    1120:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1124:	ldrb	r1, [r6, #4]
    1126:	ldrb	r0, [r6, #0]
    1128:	bl	28c8 <digitalWrite>

      if (blinking) {
    112c:	ldrb	r3, [r6, #16]
    112e:	cbz	r3, 113e <loop+0xc76>
        digitalWrite(m_pin, !m_state);
    1130:	ldr	r1, [r6, #4]
    1132:	ldrb	r0, [r6, #0]
    1134:	clz	r1, r1
    1138:	lsrs	r1, r1, #5
    113a:	bl	28c8 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
    113e:	ldr	r2, [r5, #28]
    1140:	ldr	r1, [r5, #0]
    1142:	ldr	r3, [r5, #36]	; 0x24
    1144:	ldr.w	r0, [r2, r1, lsl #2]
    1148:	ldr	r7, [r5, #32]
    114a:	ldrb	r1, [r0, #4]
    114c:	ldr	r2, [r5, #40]	; 0x28
    114e:	eor.w	r1, r1, #1
    1152:	strb	r1, [r0, #4]
    1154:	b.w	5b6 <loop+0xee>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    1158:	cmp	r7, #0
    115a:	bne.w	738 <loop+0x270>
    115e:	ldrb.w	r1, [r8, #16]
    1162:	cmp	r1, #0
    1164:	bne.w	1962 <loop+0x149a>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
    1168:	ldrb.w	r3, [r8, #17]
        m_led.toggle();
    116c:	ldr.w	r5, [r8, #24]
    1170:	ldr	r0, [pc, #524]	; (1380 <loop+0xeb8>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
    1172:	cmp	r3, #0
    1174:	bne.w	19e4 <loop+0x151c>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1178:	ldr	r3, [r5, #4]
    117a:	clz	r3, r3
    117e:	lsrs	r3, r3, #5
    1180:	str	r3, [r5, #4]
    1182:	movs	r1, #8
    1184:	bl	22b8 <usb_serial_write>
    1188:	ldr	r0, [pc, #504]	; (1384 <loop+0xebc>)
    118a:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    118e:	ldrb	r1, [r5, #4]
    1190:	ldrb	r0, [r5, #0]
    1192:	bl	28c8 <digitalWrite>

      if (blinking) {
    1196:	ldrb	r3, [r5, #16]
    1198:	cbz	r3, 11a8 <loop+0xce0>
        digitalWrite(m_pin, !m_state);
    119a:	ldr	r1, [r5, #4]
    119c:	ldrb	r0, [r5, #0]
    119e:	clz	r1, r1
    11a2:	lsrs	r1, r1, #5
    11a4:	bl	28c8 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
    11a8:	ldr	r2, [r6, #28]
    11aa:	ldr	r1, [r6, #0]
    11ac:	ldr	r3, [r6, #36]	; 0x24
    11ae:	ldr.w	r0, [r2, r1, lsl #2]
    11b2:	ldr	r7, [r6, #32]
    11b4:	ldrb	r1, [r0, #4]
    11b6:	ldr	r2, [r6, #40]	; 0x28
    11b8:	eor.w	r1, r1, #1
    11bc:	strb	r1, [r0, #4]
    11be:	b.w	724 <loop+0x25c>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    11c2:	cmp	r6, #0
    11c4:	bne.w	7d6 <loop+0x30e>
    11c8:	ldrb.w	r1, [r8, #16]
    11cc:	cmp	r1, #0
    11ce:	bne.w	193a <loop+0x1472>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
    11d2:	ldrb.w	r3, [r8, #17]
        m_led.toggle();
    11d6:	ldr.w	r6, [r8, #24]
    11da:	ldr	r0, [pc, #420]	; (1380 <loop+0xeb8>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
    11dc:	cmp	r3, #0
    11de:	bne.w	1abc <loop+0x15f4>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    11e2:	ldr	r3, [r6, #4]
    11e4:	clz	r3, r3
    11e8:	lsrs	r3, r3, #5
    11ea:	str	r3, [r6, #4]
    11ec:	movs	r1, #8
    11ee:	bl	22b8 <usb_serial_write>
    11f2:	ldr	r0, [pc, #400]	; (1384 <loop+0xebc>)
    11f4:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    11f8:	ldrb	r1, [r6, #4]
    11fa:	ldrb	r0, [r6, #0]
    11fc:	bl	28c8 <digitalWrite>

      if (blinking) {
    1200:	ldrb	r3, [r6, #16]
    1202:	cbz	r3, 1212 <loop+0xd4a>
        digitalWrite(m_pin, !m_state);
    1204:	ldr	r1, [r6, #4]
    1206:	ldrb	r0, [r6, #0]
    1208:	clz	r1, r1
    120c:	lsrs	r1, r1, #5
    120e:	bl	28c8 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
    1212:	ldr	r2, [r5, #28]
    1214:	ldr	r1, [r5, #0]
    1216:	ldr	r3, [r5, #36]	; 0x24
    1218:	ldr.w	r0, [r2, r1, lsl #2]
    121c:	ldr	r6, [r5, #32]
    121e:	ldrb	r1, [r0, #4]
    1220:	ldr	r2, [r5, #40]	; 0x28
    1222:	eor.w	r1, r1, #1
    1226:	strb	r1, [r0, #4]
    1228:	b.w	7c2 <loop+0x2fa>
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
    122c:	ldr.w	r8, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1230:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1234:	ldrb.w	r9, [r8]
    1238:	str	r3, [sp, #192]	; 0xc0
	return ret;
    123a:	ldr	r3, [sp, #192]	; 0xc0
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    123c:	str	r3, [r6, #52]	; 0x34
    123e:	mov	r0, r9
    1240:	bl	28d4 <digitalRead>
    1244:	clz	r1, r0
    1248:	lsrs	r1, r1, #5
    124a:	mov	r0, r9
    124c:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1250:	ldr.w	r3, [sl]
    1254:	str	r3, [sp, #200]	; 0xc8
	return ret;
    1256:	ldr	r3, [sp, #200]	; 0xc8
      blinking = true;
    1258:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    125c:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1260:	str.w	r5, [r8, #20]
    1264:	ldrb.w	r5, [r6, #48]	; 0x30
    1268:	ldr	r3, [r6, #52]	; 0x34
    126a:	ldr	r7, [r6, #32]
    126c:	b.w	4f6 <loop+0x2e>
        m_led.blink();
    1270:	ldr.w	r8, [r5, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1274:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1278:	ldrb.w	r9, [r8]
    127c:	str	r3, [sp, #132]	; 0x84
	return ret;
    127e:	ldr	r3, [sp, #132]	; 0x84
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    1280:	str	r3, [r5, #52]	; 0x34
    1282:	mov	r0, r9
    1284:	bl	28d4 <digitalRead>
    1288:	clz	r1, r0
    128c:	lsrs	r1, r1, #5
    128e:	mov	r0, r9
    1290:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1294:	ldr.w	r3, [sl]
    1298:	str	r3, [sp, #212]	; 0xd4
	return ret;
    129a:	ldr	r3, [sp, #212]	; 0xd4
      blinking = true;
    129c:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    12a0:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    12a4:	str.w	r6, [r8, #20]
    12a8:	ldrb.w	r6, [r5, #48]	; 0x30
    12ac:	ldr	r3, [r5, #52]	; 0x34
    12ae:	ldr	r7, [r5, #32]
    12b0:	b.w	664 <loop+0x19c>
        m_led.blink();
    12b4:	ldr.w	r8, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12b8:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12bc:	ldrb.w	r9, [r8]
    12c0:	str	r3, [sp, #152]	; 0x98
	return ret;
    12c2:	ldr	r3, [sp, #152]	; 0x98
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    12c4:	str	r3, [r6, #52]	; 0x34
    12c6:	mov	r0, r9
    12c8:	bl	28d4 <digitalRead>
    12cc:	clz	r1, r0
    12d0:	lsrs	r1, r1, #5
    12d2:	mov	r0, r9
    12d4:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12d8:	ldr.w	r3, [sl]
    12dc:	str	r3, [sp, #208]	; 0xd0
	return ret;
    12de:	ldr	r3, [sp, #208]	; 0xd0
      blinking = true;
    12e0:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    12e4:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    12e8:	str.w	r5, [r8, #20]
    12ec:	ldrb.w	r5, [r6, #48]	; 0x30
    12f0:	ldr	r3, [r6, #52]	; 0x34
    12f2:	ldr	r7, [r6, #32]
    12f4:	b.w	5ea <loop+0x122>
        m_led.blink();
    12f8:	ldr.w	r8, [r5, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12fc:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1300:	ldrb.w	r9, [r8]
    1304:	str	r3, [sp, #92]	; 0x5c
	return ret;
    1306:	ldr	r3, [sp, #92]	; 0x5c
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    1308:	str	r3, [r5, #52]	; 0x34
    130a:	mov	r0, r9
    130c:	bl	28d4 <digitalRead>
    1310:	clz	r1, r0
    1314:	lsrs	r1, r1, #5
    1316:	mov	r0, r9
    1318:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    131c:	ldr.w	r3, [sl]
    1320:	str	r3, [sp, #220]	; 0xdc
	return ret;
    1322:	ldr	r3, [sp, #220]	; 0xdc
      blinking = true;
    1324:	strb.w	r6, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1328:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    132c:	str.w	r7, [r8, #20]
    1330:	ldrb.w	r7, [r5, #48]	; 0x30
    1334:	ldr	r3, [r5, #52]	; 0x34
    1336:	ldr	r6, [r5, #32]
    1338:	b.w	758 <loop+0x290>
        m_led.blink();
    133c:	ldr.w	r8, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1340:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1344:	ldrb.w	r9, [r8]
    1348:	str	r3, [sp, #112]	; 0x70
	return ret;
    134a:	ldr	r3, [sp, #112]	; 0x70
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    134c:	str	r3, [r6, #52]	; 0x34
    134e:	mov	r0, r9
    1350:	bl	28d4 <digitalRead>
    1354:	clz	r1, r0
    1358:	lsrs	r1, r1, #5
    135a:	mov	r0, r9
    135c:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1360:	ldr.w	r3, [sl]
    1364:	str	r3, [sp, #216]	; 0xd8
	return ret;
    1366:	ldr	r3, [sp, #216]	; 0xd8
      blinking = true;
    1368:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    136c:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1370:	str.w	r5, [r8, #20]
    1374:	ldrb.w	r5, [r6, #48]	; 0x30
    1378:	ldr	r3, [r6, #52]	; 0x34
    137a:	ldr	r7, [r6, #32]
    137c:	b.w	6de <loop+0x216>
    1380:	.word	0x0000525c
    1384:	.word	0x1fff0c70
        m_led.blink();
    1388:	ldr.w	r8, [r5, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    138c:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1390:	ldrb.w	r9, [r8]
    1394:	str	r3, [sp, #172]	; 0xac
	return ret;
    1396:	ldr	r3, [sp, #172]	; 0xac
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    1398:	str	r3, [r5, #52]	; 0x34
    139a:	mov	r0, r9
    139c:	bl	28d4 <digitalRead>
    13a0:	clz	r1, r0
    13a4:	lsrs	r1, r1, #5
    13a6:	mov	r0, r9
    13a8:	bl	28c8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13ac:	ldr.w	r3, [sl]
    13b0:	str	r3, [sp, #204]	; 0xcc
	return ret;
    13b2:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
    13b4:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    13b8:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    13bc:	str.w	r6, [r8, #20]
    13c0:	ldrb.w	r6, [r5, #48]	; 0x30
    13c4:	ldr	r3, [r5, #52]	; 0x34
    13c6:	ldr	r7, [r5, #32]
    13c8:	b.w	570 <loop+0xa8>
        if (current == LOW && previous == HIGH) {
          // HERE YOU WOULD ADD VARIOUS ACTIONS AND TIMES FOR YOUR OWN CODE
          // ==============================================================================

          // Button held for 1-3 seconds, print out some info
          if (secs_held >= 1) {
    13cc:	cmp	r2, #0
    13ce:	ble.w	736 <loop+0x26e>
    13d2:	movs	r1, #26
    13d4:	ldr	r0, [pc, #616]	; (1640 <loop+0x1178>)
    13d6:	bl	22b8 <usb_serial_write>
            Serial.print("It Works!!! Seconds held: ");
            Serial.print(secs_held);
    13da:	ldr	r1, [r5, #40]	; 0x28
    13dc:	ldr	r0, [pc, #612]	; (1644 <loop+0x117c>)
    13de:	bl	3ecc <Print::print(long)>
    13e2:	movs	r1, #22
    13e4:	ldr	r0, [pc, #608]	; (1648 <loop+0x1180>)
    13e6:	bl	22b8 <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
    13ea:	ldr	r1, [r5, #36]	; 0x24
    13ec:	ldr	r0, [pc, #596]	; (1644 <loop+0x117c>)
    13ee:	bl	3ecc <Print::print(long)>
    13f2:	ldr	r0, [pc, #592]	; (1644 <loop+0x117c>)
    13f4:	bl	3e2c <Print::println()>
    13f8:	ldr	r7, [r5, #32]
    13fa:	ldr	r2, [r5, #40]	; 0x28
    13fc:	b.w	738 <loop+0x270>
        if (current == LOW && previous == HIGH) {
          // HERE YOU WOULD ADD VARIOUS ACTIONS AND TIMES FOR YOUR OWN CODE
          // ==============================================================================

          // Button held for 1-3 seconds, print out some info
          if (secs_held >= 1) {
    1400:	cmp	r2, #0
    1402:	ble.w	7d4 <loop+0x30c>
    1406:	movs	r1, #26
    1408:	ldr	r0, [pc, #564]	; (1640 <loop+0x1178>)
    140a:	bl	22b8 <usb_serial_write>
            Serial.print("It Works!!! Seconds held: ");
            Serial.print(secs_held);
    140e:	ldr	r1, [r7, #40]	; 0x28
    1410:	ldr	r0, [pc, #560]	; (1644 <loop+0x117c>)
    1412:	bl	3ecc <Print::print(long)>
    1416:	movs	r1, #22
    1418:	ldr	r0, [pc, #556]	; (1648 <loop+0x1180>)
    141a:	bl	22b8 <usb_serial_write>
    141e:	ldr	r1, [r7, #36]	; 0x24
    1420:	ldr	r0, [pc, #544]	; (1644 <loop+0x117c>)
    1422:	bl	3ecc <Print::print(long)>
    1426:	ldr	r0, [pc, #540]	; (1644 <loop+0x117c>)
    1428:	bl	3e2c <Print::println()>
    142c:	ldr	r6, [r7, #32]
    142e:	ldr	r2, [r7, #40]	; 0x28
    1430:	b.w	7d6 <loop+0x30e>
        if (current == LOW && previous == HIGH) {
          // HERE YOU WOULD ADD VARIOUS ACTIONS AND TIMES FOR YOUR OWN CODE
          // ==============================================================================

          // Button held for 1-3 seconds, print out some info
          if (secs_held >= 1) {
    1434:	cmp	r2, #0
    1436:	ble.w	54e <loop+0x86>
    143a:	movs	r1, #26
    143c:	ldr	r0, [pc, #512]	; (1640 <loop+0x1178>)
    143e:	bl	22b8 <usb_serial_write>
            Serial.print("It Works!!! Seconds held: ");
            Serial.print(secs_held);
    1442:	ldr	r1, [r5, #40]	; 0x28
    1444:	ldr	r0, [pc, #508]	; (1644 <loop+0x117c>)
    1446:	bl	3ecc <Print::print(long)>
    144a:	movs	r1, #22
    144c:	ldr	r0, [pc, #504]	; (1648 <loop+0x1180>)
    144e:	bl	22b8 <usb_serial_write>
    1452:	ldr	r1, [r5, #36]	; 0x24
    1454:	ldr	r0, [pc, #492]	; (1644 <loop+0x117c>)
    1456:	bl	3ecc <Print::print(long)>
    145a:	ldr	r0, [pc, #488]	; (1644 <loop+0x117c>)
    145c:	bl	3e2c <Print::println()>
    1460:	ldr	r7, [r5, #32]
    1462:	ldr	r2, [r5, #40]	; 0x28
    1464:	b.w	550 <loop+0x88>
        if (current == LOW && previous == HIGH) {
          // HERE YOU WOULD ADD VARIOUS ACTIONS AND TIMES FOR YOUR OWN CODE
          // ==============================================================================

          // Button held for 1-3 seconds, print out some info
          if (secs_held >= 1) {
    1468:	cmp	r2, #0
    146a:	ble.w	5c8 <loop+0x100>
    146e:	movs	r1, #26
    1470:	ldr	r0, [pc, #460]	; (1640 <loop+0x1178>)
    1472:	bl	22b8 <usb_serial_write>
            Serial.print("It Works!!! Seconds held: ");
            Serial.print(secs_held);
    1476:	ldr	r1, [r6, #40]	; 0x28
    1478:	ldr	r0, [pc, #456]	; (1644 <loop+0x117c>)
    147a:	bl	3ecc <Print::print(long)>
    147e:	movs	r1, #22
    1480:	ldr	r0, [pc, #452]	; (1648 <loop+0x1180>)
    1482:	bl	22b8 <usb_serial_write>
    1486:	ldr	r1, [r6, #36]	; 0x24
    1488:	ldr	r0, [pc, #440]	; (1644 <loop+0x117c>)
    148a:	bl	3ecc <Print::print(long)>
    148e:	ldr	r0, [pc, #436]	; (1644 <loop+0x117c>)
    1490:	bl	3e2c <Print::println()>
    1494:	ldr	r7, [r6, #32]
    1496:	ldr	r2, [r6, #40]	; 0x28
    1498:	b.w	5ca <loop+0x102>
        if (current == LOW && previous == HIGH) {
          // HERE YOU WOULD ADD VARIOUS ACTIONS AND TIMES FOR YOUR OWN CODE
          // ==============================================================================

          // Button held for 1-3 seconds, print out some info
          if (secs_held >= 1) {
    149c:	cmp	r2, #0
    149e:	ble.w	642 <loop+0x17a>
    14a2:	movs	r1, #26
    14a4:	ldr	r0, [pc, #408]	; (1640 <loop+0x1178>)
    14a6:	bl	22b8 <usb_serial_write>
            Serial.print("It Works!!! Seconds held: ");
            Serial.print(secs_held);
    14aa:	ldr	r1, [r5, #40]	; 0x28
    14ac:	ldr	r0, [pc, #404]	; (1644 <loop+0x117c>)
    14ae:	bl	3ecc <Print::print(long)>
    14b2:	movs	r1, #22
    14b4:	ldr	r0, [pc, #400]	; (1648 <loop+0x1180>)
    14b6:	bl	22b8 <usb_serial_write>
    14ba:	ldr	r1, [r5, #36]	; 0x24
    14bc:	ldr	r0, [pc, #388]	; (1644 <loop+0x117c>)
    14be:	bl	3ecc <Print::print(long)>
    14c2:	ldr	r0, [pc, #384]	; (1644 <loop+0x117c>)
    14c4:	bl	3e2c <Print::println()>
    14c8:	ldr	r7, [r5, #32]
    14ca:	ldr	r2, [r5, #40]	; 0x28
    14cc:	b.w	644 <loop+0x17c>
        if (current == LOW && previous == HIGH) {
          // HERE YOU WOULD ADD VARIOUS ACTIONS AND TIMES FOR YOUR OWN CODE
          // ==============================================================================

          // Button held for 1-3 seconds, print out some info
          if (secs_held >= 1) {
    14d0:	cmp	r2, #0
    14d2:	ble.w	6bc <loop+0x1f4>
    14d6:	movs	r1, #26
    14d8:	ldr	r0, [pc, #356]	; (1640 <loop+0x1178>)
    14da:	bl	22b8 <usb_serial_write>
            Serial.print("It Works!!! Seconds held: ");
            Serial.print(secs_held);
    14de:	ldr	r1, [r6, #40]	; 0x28
    14e0:	ldr	r0, [pc, #352]	; (1644 <loop+0x117c>)
    14e2:	bl	3ecc <Print::print(long)>
    14e6:	movs	r1, #22
    14e8:	ldr	r0, [pc, #348]	; (1648 <loop+0x1180>)
    14ea:	bl	22b8 <usb_serial_write>
    14ee:	ldr	r1, [r6, #36]	; 0x24
    14f0:	ldr	r0, [pc, #336]	; (1644 <loop+0x117c>)
    14f2:	bl	3ecc <Print::print(long)>
    14f6:	ldr	r0, [pc, #332]	; (1644 <loop+0x117c>)
    14f8:	bl	3e2c <Print::println()>
    14fc:	ldr	r7, [r6, #32]
    14fe:	ldr	r2, [r6, #40]	; 0x28
    1500:	b.w	6be <loop+0x1f6>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1504:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
    1508:	ldr	r3, [r4, #20]
    150a:	bge.w	1770 <loop+0x12a8>
        max_ppqn = 6;

        if (ppqn >= 6) {
    150e:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1510:	movs	r1, #6

        if (ppqn >= 6) {
    1512:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1514:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1516:	ble.n	151c <loop+0x1054>
          ppqn = 0;
    1518:	movs	r2, #0
    151a:	str	r2, [r3, #8]
    151c:	ldr	r0, [r4, #4]
    151e:	b.w	942 <loop+0x47a>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1522:	cmp.w	r0, #400	; 0x190
    1526:	ldr	r3, [r4, #20]
    1528:	bge.w	17e8 <loop+0x1320>
        max_ppqn = 6;

        if (ppqn >= 6) {
    152c:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    152e:	movs	r1, #6

        if (ppqn >= 6) {
    1530:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1532:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1534:	ble.n	153a <loop+0x1072>
          ppqn = 0;
    1536:	movs	r2, #0
    1538:	str	r2, [r3, #8]
    153a:	ldr	r0, [r4, #4]
    153c:	b.w	9f6 <loop+0x52e>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1540:	cmp.w	r0, #400	; 0x190
    1544:	ldr	r3, [r4, #20]
    1546:	bge.w	178e <loop+0x12c6>
        max_ppqn = 6;

        if (ppqn >= 6) {
    154a:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    154c:	movs	r1, #6

        if (ppqn >= 6) {
    154e:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1550:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1552:	ble.n	1558 <loop+0x1090>
          ppqn = 0;
    1554:	movs	r2, #0
    1556:	str	r2, [r3, #8]
    1558:	ldr	r0, [r4, #4]
    155a:	b.w	8e8 <loop+0x420>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    155e:	cmp.w	r0, #400	; 0x190
    1562:	ldr	r3, [r4, #20]
    1564:	bge.w	17ca <loop+0x1302>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1568:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    156a:	movs	r1, #6

        if (ppqn >= 6) {
    156c:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    156e:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1570:	ble.n	1576 <loop+0x10ae>
          ppqn = 0;
    1572:	movs	r2, #0
    1574:	str	r2, [r3, #8]
    1576:	ldr	r0, [r4, #4]
    1578:	b.w	99c <loop+0x4d4>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    157c:	cmp.w	r0, #400	; 0x190
    1580:	ldr	r3, [r4, #20]
    1582:	bge.w	17ac <loop+0x12e4>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1586:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1588:	movs	r1, #6

        if (ppqn >= 6) {
    158a:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    158c:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    158e:	ble.n	1594 <loop+0x10cc>
          ppqn = 0;
    1590:	movs	r2, #0
    1592:	str	r2, [r3, #8]
    1594:	ldr	r0, [r4, #4]
    1596:	b.w	a50 <loop+0x588>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    159a:	ldr	r5, [pc, #176]	; (164c <loop+0x1184>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    159c:	ldr	r4, [pc, #176]	; (1650 <loop+0x1188>)
      ppqn = 0;
      m_sequence.doStep(); 
    159e:	ldr	r6, [r5, #12]
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    15a0:	ldr	r3, [r6, #0]
    15a2:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    15a6:	mov.w	r9, #1
    15aa:	ldr	r7, [r3, #20]
    15ac:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15b0:	ldrb.w	sl, [r7]
      ppqn = 0;
    15b4:	mov.w	r8, #0
    15b8:	mov	r0, sl
    15ba:	str.w	r8, [r5, #8]
    15be:	bl	28d4 <digitalRead>
    15c2:	clz	r1, r0
    15c6:	lsrs	r1, r1, #5
    15c8:	mov	r0, sl
    15ca:	bl	28c8 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    15ce:	ldr	r3, [r6, #0]
    15d0:	ldr	r2, [r4, #0]
    15d2:	str	r2, [sp, #4]
    15d4:	add.w	r2, r6, r3, lsl #2
	return ret;
    15d8:	ldr	r0, [sp, #4]
    15da:	ldr	r2, [r2, #4]
      blinking = true;
    15dc:	strb.w	r9, [r7, #16]
    15e0:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
    15e2:	str.w	r8, [r7, #20]
      lastBlink = millis();  
    15e6:	str	r0, [r7, #8]
    15e8:	cmp	r1, #0
    15ea:	bne.w	1862 <loop+0x139a>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    15ee:	ldrb.w	r2, [r6, #45]	; 0x2d
    15f2:	cmp	r2, #0
    15f4:	beq.w	1806 <loop+0x133e>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    15f8:	subs	r2, r3, #1
    15fa:	cmp	r3, #0
    15fc:	beq.w	1888 <loop+0x13c0>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1600:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    1602:	ldr	r3, [r5, #12]
    1604:	ldr	r0, [pc, #76]	; (1654 <loop+0x118c>)
    1606:	ldr	r5, [r3, #40]	; 0x28
    };

    void toggle () {
      m_state = !m_state;
    1608:	ldr	r3, [r5, #4]
    160a:	clz	r3, r3
    160e:	lsrs	r3, r3, #5
    1610:	str	r3, [r5, #4]
    1612:	movs	r1, #8
    1614:	bl	22b8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1618:	ldr	r0, [pc, #40]	; (1644 <loop+0x117c>)
    161a:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    161e:	ldrb	r1, [r5, #4]
    1620:	ldrb	r0, [r5, #0]
    1622:	bl	28c8 <digitalWrite>

      if (blinking) {
    1626:	ldrb	r3, [r5, #16]
    1628:	cmp	r3, #0
    162a:	beq.w	4dc <loop+0x14>
        digitalWrite(m_pin, !m_state);
    162e:	ldr	r1, [r5, #4]
    1630:	ldrb	r0, [r5, #0]
    1632:	clz	r1, r1
    1636:	lsrs	r1, r1, #5
    1638:	bl	28c8 <digitalWrite>
    163c:	b.w	4dc <loop+0x14>
    1640:	.word	0x000052ac
    1644:	.word	0x1fff0c70
    1648:	.word	0x000052c8
    164c:	.word	0x1fff1880
    1650:	.word	0x1fff190c
    1654:	.word	0x0000525c
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    1658:	ldr	r5, [pc, #816]	; (198c <loop+0x14c4>)

      m_sequence.stopSteps(ppqn);
    165a:	ldr	r2, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    165c:	ldr	r3, [r5, #8]
        }
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
    165e:	ldr	r1, [r2, #0]
    1660:	add.w	r2, r2, r1, lsl #2
    1664:	adds	r3, #1
    1666:	ldr	r2, [r2, #4]
    1668:	str	r3, [r5, #8]
    void reverse () {
      m_reverse = !m_reverse;
    };

    void stopSteps (int ppqn) {
      if (stepIsOver(ppqn)) {
    166a:	ldr	r2, [r2, #16]
    166c:	cmp	r3, r2
    166e:	bge.w	1858 <loop+0x1390>

      m_sequence.stopSteps(ppqn);

      if (ppqn == max_ppqn) {
    1672:	ldr	r2, [r5, #4]
    1674:	ldr	r1, [pc, #788]	; (198c <loop+0x14c4>)
    1676:	cmp	r2, r3
    1678:	bne.w	4da <loop+0x12>
        m_sequence.doStep(); 
    167c:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    167e:	ldr	r4, [pc, #784]	; (1990 <loop+0x14c8>)
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    1680:	ldr	r3, [r6, #0]
    1682:	add.w	r3, r6, r3, lsl #2
    1686:	ldr	r7, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1688:	ldrb.w	r8, [r7]
    168c:	mov	r0, r8
    168e:	bl	28d4 <digitalRead>
    1692:	clz	r1, r0
    1696:	lsrs	r1, r1, #5
    1698:	mov	r0, r8
    169a:	bl	28c8 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    169e:	ldr	r3, [r6, #0]
    16a0:	ldr	r2, [r4, #0]
    16a2:	str	r2, [sp, #0]
    16a4:	add.w	r2, r6, r3, lsl #2
      blinking = true;
    16a8:	movs	r1, #1
    16aa:	ldr	r2, [r2, #4]
    16ac:	strb	r1, [r7, #16]
      blinkingCounter = times;
    16ae:	movs	r1, #0
    16b0:	str	r1, [r7, #20]
    16b2:	ldrb	r1, [r2, #4]
	return ret;
    16b4:	ldr	r0, [sp, #0]
      lastBlink = millis();  
    16b6:	str	r0, [r7, #8]
    16b8:	cmp	r1, #0
    16ba:	bne.w	1b4c <loop+0x1684>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    16be:	ldrb.w	r2, [r6, #45]	; 0x2d
    16c2:	cmp	r2, #0
    16c4:	bne.w	188e <loop+0x13c6>
        m_currentStep++;
    16c8:	adds	r3, #1
    16ca:	cmp	r3, #3
    16cc:	it	gt
    16ce:	movgt	r3, #0
    16d0:	str	r3, [r6, #0]
        ppqn = 0;
    16d2:	movs	r3, #0
    16d4:	str	r3, [r5, #8]
    16d6:	b.w	4dc <loop+0x14>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
    16da:	ldr	r2, [r4, #12]
    16dc:	ldr	r3, [r4, #16]
    16de:	add.w	r3, r3, r2, lsl #2
      m_pitch = newValue;
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
    16e2:	ldr	r2, [r3, #4]
    16e4:	subs.w	r3, r0, r0, lsl #6
    16e8:	it	mi
    16ea:	addwmi	r3, r3, #1023	; 0x3ff
    16ee:	asrs	r3, r3, #10
    16f0:	adds	r3, #127	; 0x7f
    16f2:	str	r3, [r2, #12]
    16f4:	b.w	8e8 <loop+0x420>
    16f8:	ldr	r2, [r4, #12]
    16fa:	ldr	r3, [r4, #16]
    16fc:	add.w	r3, r3, r2, lsl #2
    1700:	ldr	r2, [r3, #4]
    1702:	subs.w	r3, r0, r0, lsl #6
    1706:	it	mi
    1708:	addwmi	r3, r3, #1023	; 0x3ff
    170c:	asrs	r3, r3, #10
    170e:	adds	r3, #127	; 0x7f
    1710:	str	r3, [r2, #12]
    1712:	b.w	a50 <loop+0x588>
    1716:	ldr	r2, [r4, #12]
    1718:	ldr	r3, [r4, #16]
    171a:	add.w	r3, r3, r2, lsl #2
    171e:	ldr	r2, [r3, #4]
    1720:	subs.w	r3, r0, r0, lsl #6
    1724:	it	mi
    1726:	addwmi	r3, r3, #1023	; 0x3ff
    172a:	asrs	r3, r3, #10
    172c:	adds	r3, #127	; 0x7f
    172e:	str	r3, [r2, #12]
    1730:	b.w	99c <loop+0x4d4>
    1734:	ldr	r2, [r4, #12]
    1736:	ldr	r3, [r4, #16]
    1738:	add.w	r3, r3, r2, lsl #2
    173c:	ldr	r2, [r3, #4]
    173e:	subs.w	r3, r0, r0, lsl #6
    1742:	it	mi
    1744:	addwmi	r3, r3, #1023	; 0x3ff
    1748:	asrs	r3, r3, #10
    174a:	adds	r3, #127	; 0x7f
    174c:	str	r3, [r2, #12]
    174e:	b.w	9f6 <loop+0x52e>
    1752:	ldr	r2, [r4, #12]
    1754:	ldr	r3, [r4, #16]
    1756:	add.w	r3, r3, r2, lsl #2
    175a:	ldr	r2, [r3, #4]
    175c:	subs.w	r3, r0, r0, lsl #6
    1760:	it	mi
    1762:	addwmi	r3, r3, #1023	; 0x3ff
    1766:	asrs	r3, r3, #10
    1768:	adds	r3, #127	; 0x7f
    176a:	str	r3, [r2, #12]
    176c:	b.w	942 <loop+0x47a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1770:	sub.w	r2, r0, #400	; 0x190
    1774:	cmp.w	r2, #400	; 0x190
    1778:	bcc.n	184a <loop+0x1382>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    177a:	sub.w	r2, r0, #800	; 0x320
    177e:	cmp	r2, #223	; 0xdf
    1780:	bhi.w	942 <loop+0x47a>
        max_ppqn = 10;
    1784:	movs	r2, #10
    1786:	str	r2, [r3, #4]
    1788:	ldr	r0, [r4, #4]
    178a:	b.w	942 <loop+0x47a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    178e:	sub.w	r2, r0, #400	; 0x190
    1792:	cmp.w	r2, #400	; 0x190
    1796:	bcc.n	183c <loop+0x1374>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1798:	sub.w	r2, r0, #800	; 0x320
    179c:	cmp	r2, #223	; 0xdf
    179e:	bhi.w	8e8 <loop+0x420>
        max_ppqn = 10;
    17a2:	movs	r2, #10
    17a4:	str	r2, [r3, #4]
    17a6:	ldr	r0, [r4, #4]
    17a8:	b.w	8e8 <loop+0x420>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    17ac:	sub.w	r2, r0, #400	; 0x190
    17b0:	cmp.w	r2, #400	; 0x190
    17b4:	bcc.n	182e <loop+0x1366>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    17b6:	sub.w	r2, r0, #800	; 0x320
    17ba:	cmp	r2, #223	; 0xdf
    17bc:	bhi.w	a50 <loop+0x588>
        max_ppqn = 10;
    17c0:	movs	r2, #10
    17c2:	str	r2, [r3, #4]
    17c4:	ldr	r0, [r4, #4]
    17c6:	b.w	a50 <loop+0x588>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    17ca:	sub.w	r2, r0, #400	; 0x190
    17ce:	cmp.w	r2, #400	; 0x190
    17d2:	bcc.n	1820 <loop+0x1358>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    17d4:	sub.w	r2, r0, #800	; 0x320
    17d8:	cmp	r2, #223	; 0xdf
    17da:	bhi.w	99c <loop+0x4d4>
        max_ppqn = 10;
    17de:	movs	r2, #10
    17e0:	str	r2, [r3, #4]
    17e2:	ldr	r0, [r4, #4]
    17e4:	b.w	99c <loop+0x4d4>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    17e8:	sub.w	r2, r0, #400	; 0x190
    17ec:	cmp.w	r2, #400	; 0x190
    17f0:	bcc.n	1812 <loop+0x134a>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    17f2:	sub.w	r2, r0, #800	; 0x320
    17f6:	cmp	r2, #223	; 0xdf
    17f8:	bhi.w	9f6 <loop+0x52e>
        max_ppqn = 10;
    17fc:	movs	r2, #10
    17fe:	str	r2, [r3, #4]
    1800:	ldr	r0, [r4, #4]
    1802:	b.w	9f6 <loop+0x52e>
    1806:	adds	r3, #1
    1808:	cmp	r3, #3
    180a:	it	gt
    180c:	movgt	r3, #0
    180e:	str	r3, [r6, #0]
    1810:	b.n	1602 <loop+0x113a>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    1812:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1814:	movs	r1, #8

        if (ppqn >= 8) {
    1816:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1818:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    181a:	bgt.w	1536 <loop+0x106e>
    181e:	b.n	153a <loop+0x1072>
    1820:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1822:	movs	r1, #8

        if (ppqn >= 8) {
    1824:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1826:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1828:	bgt.w	1572 <loop+0x10aa>
    182c:	b.n	1576 <loop+0x10ae>
    182e:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1830:	movs	r1, #8

        if (ppqn >= 8) {
    1832:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1834:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1836:	bgt.w	1590 <loop+0x10c8>
    183a:	b.n	1594 <loop+0x10cc>
    183c:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    183e:	movs	r1, #8

        if (ppqn >= 8) {
    1840:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1842:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1844:	bgt.w	1554 <loop+0x108c>
    1848:	b.n	1558 <loop+0x1090>
    184a:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    184c:	movs	r1, #8

        if (ppqn >= 8) {
    184e:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1850:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1852:	bgt.w	1518 <loop+0x1050>
    1856:	b.n	151c <loop+0x1054>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1858:	ldr	r0, [pc, #312]	; (1994 <loop+0x14cc>)
    185a:	bl	2b54 <usb_midi_write_packed>
    185e:	ldr	r3, [r5, #8]
    1860:	b.n	1672 <loop+0x11aa>
    1862:	ldr	r0, [r2, #8]
    1864:	ldr	r3, [r2, #12]
    1866:	lsls	r0, r0, #16
    1868:	lsls	r3, r3, #24
    186a:	and.w	r3, r3, #2130706432	; 0x7f000000
    186e:	and.w	r0, r0, #8323072	; 0x7f0000
    1872:	orrs	r0, r3
    1874:	orr.w	r0, r0, #40704	; 0x9f00
    1878:	orr.w	r0, r0, #9
    187c:	bl	2b54 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1880:	bl	2bf0 <usb_midi_flush_output>
    1884:	ldr	r3, [r6, #0]
    1886:	b.n	15ee <loop+0x1126>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1888:	movs	r3, #3
    188a:	str	r3, [r6, #0]
    188c:	b.n	1602 <loop+0x113a>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    188e:	subs	r2, r3, #1
    1890:	cmp	r3, #0
    1892:	beq.w	1b72 <loop+0x16aa>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1896:	str	r2, [r6, #0]
    1898:	b.n	16d2 <loop+0x120a>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    189a:	ldr.w	lr, [pc, #252]	; 1998 <loop+0x14d0>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
    189e:	ldr.w	r9, [r8, #28]
    18a2:	ldrb.w	r1, [lr]
    18a6:	cmp	r1, #0
    18a8:	beq.w	1c38 <loop+0x1770>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    18ac:	cmp	r1, #1
    18ae:	beq.w	1eb0 <loop+0x19e8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    18b2:	cmp	r1, #2
    18b4:	beq.w	1d18 <loop+0x1850>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
    18b8:	cmp	r3, #50	; 0x32
    18ba:	bgt.w	54e <loop+0x86>
    18be:	b.w	550 <loop+0x88>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    18c2:	ldr.w	lr, [pc, #212]	; 1998 <loop+0x14d0>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
    18c6:	ldr.w	r9, [r8, #28]
    18ca:	ldrb.w	r1, [lr]
    18ce:	cmp	r1, #0
    18d0:	beq.w	1c68 <loop+0x17a0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    18d4:	cmp	r1, #1
    18d6:	beq.w	1eda <loop+0x1a12>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    18da:	cmp	r1, #2
    18dc:	beq.w	1d90 <loop+0x18c8>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
    18e0:	cmp	r3, #50	; 0x32
    18e2:	bgt.w	6bc <loop+0x1f4>
    18e6:	b.w	6be <loop+0x1f6>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    18ea:	ldr.w	lr, [pc, #172]	; 1998 <loop+0x14d0>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
    18ee:	ldr.w	r9, [r8, #28]
    18f2:	ldrb.w	r1, [lr]
    18f6:	cmp	r1, #0
    18f8:	beq.w	1bd8 <loop+0x1710>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    18fc:	cmp	r1, #1
    18fe:	beq.w	1e08 <loop+0x1940>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1902:	cmp	r1, #2
    1904:	beq.w	1d54 <loop+0x188c>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
    1908:	cmp	r3, #50	; 0x32
    190a:	bgt.w	5c8 <loop+0x100>
    190e:	b.w	5ca <loop+0x102>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1912:	ldr.w	lr, [pc, #132]	; 1998 <loop+0x14d0>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
    1916:	ldr.w	r9, [r8, #28]
    191a:	ldrb.w	r1, [lr]
    191e:	cmp	r1, #0
    1920:	beq.w	1c08 <loop+0x1740>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1924:	cmp	r1, #1
    1926:	beq.w	1e32 <loop+0x196a>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    192a:	cmp	r1, #2
    192c:	beq.w	1dcc <loop+0x1904>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
    1930:	cmp	r3, #50	; 0x32
    1932:	bgt.w	642 <loop+0x17a>
    1936:	b.w	644 <loop+0x17c>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    193a:	ldr.w	lr, [pc, #92]	; 1998 <loop+0x14d0>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
    193e:	ldr.w	r9, [r8, #28]
    1942:	ldrb.w	r1, [lr]
    1946:	cmp	r1, #0
    1948:	beq.w	1b78 <loop+0x16b0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    194c:	cmp	r1, #1
    194e:	beq.w	1e5c <loop+0x1994>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1952:	cmp	r1, #2
    1954:	beq.w	1ca0 <loop+0x17d8>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
    1958:	cmp	r3, #50	; 0x32
    195a:	bgt.w	7d4 <loop+0x30c>
    195e:	b.w	7d6 <loop+0x30e>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1962:	ldr.w	lr, [pc, #52]	; 1998 <loop+0x14d0>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
    1966:	ldr.w	r9, [r8, #28]
    196a:	ldrb.w	r1, [lr]
    196e:	cmp	r1, #0
    1970:	beq.w	1ba8 <loop+0x16e0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1974:	cmp	r1, #1
    1976:	beq.w	1e86 <loop+0x19be>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    197a:	cmp	r1, #2
    197c:	beq.w	1cdc <loop+0x1814>
        onClick();
      }
 
      // This if statement is a basic debouncing tool, the button must be pushed for at least
      // 100 milliseconds in a row for it to be considered as a push.
      if (millis_held > 50) {
    1980:	cmp	r3, #50	; 0x32
    1982:	bgt.w	736 <loop+0x26e>
    1986:	b.w	738 <loop+0x270>
    198a:	nop
    198c:	.word	0x1fff1880
    1990:	.word	0x1fff190c
    1994:	.word	0x7f7bbf0b
    1998:	.word	0x1fff1890
    };

    void toggle () {
      m_state = !m_state;
    199c:	ldrne	r3, [r5, #4]
    199e:	clz	r3, r3
    19a2:	lsrs	r3, r3, #5
    19a4:	str	r3, [r5, #4]
    19a6:	movs	r1, #8
    19a8:	bl	22b8 <usb_serial_write>
    19ac:	ldr	r0, [pc, #744]	; (1c98 <loop+0x17d0>)
    19ae:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    19b2:	ldrb	r1, [r5, #4]
    19b4:	ldrb	r0, [r5, #0]
    19b6:	bl	28c8 <digitalWrite>

      if (blinking) {
    19ba:	ldrb	r3, [r5, #16]
    19bc:	cbz	r3, 19cc <loop+0x1504>
        digitalWrite(m_pin, !m_state);
    19be:	ldr	r1, [r5, #4]
    19c0:	ldrb	r0, [r5, #0]
    19c2:	clz	r1, r1
    19c6:	lsrs	r1, r1, #5
    19c8:	bl	28c8 <digitalWrite>
    19cc:	ldr	r0, [r6, #28]
    19ce:	ldr	r3, [r6, #36]	; 0x24
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    19d0:	ldrb.w	r1, [r0, #45]	; 0x2d
    19d4:	ldr	r7, [r6, #32]
    19d6:	ldr	r2, [r6, #40]	; 0x28
    19d8:	eor.w	r1, r1, #1
    19dc:	strb.w	r1, [r0, #45]	; 0x2d
    19e0:	b.w	53c <loop+0x74>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19e4:	ldr	r3, [r5, #4]
    19e6:	clz	r3, r3
    19ea:	lsrs	r3, r3, #5
    19ec:	str	r3, [r5, #4]
    19ee:	movs	r1, #8
    19f0:	bl	22b8 <usb_serial_write>
    19f4:	ldr	r0, [pc, #672]	; (1c98 <loop+0x17d0>)
    19f6:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    19fa:	ldrb	r1, [r5, #4]
    19fc:	ldrb	r0, [r5, #0]
    19fe:	bl	28c8 <digitalWrite>

      if (blinking) {
    1a02:	ldrb	r3, [r5, #16]
    1a04:	cbz	r3, 1a14 <loop+0x154c>
        digitalWrite(m_pin, !m_state);
    1a06:	ldr	r1, [r5, #4]
    1a08:	ldrb	r0, [r5, #0]
    1a0a:	clz	r1, r1
    1a0e:	lsrs	r1, r1, #5
    1a10:	bl	28c8 <digitalWrite>
    1a14:	ldr	r0, [r6, #28]
    1a16:	ldr	r3, [r6, #36]	; 0x24
    1a18:	ldrb.w	r1, [r0, #45]	; 0x2d
    1a1c:	ldr	r7, [r6, #32]
    1a1e:	ldr	r2, [r6, #40]	; 0x28
    1a20:	eor.w	r1, r1, #1
    1a24:	strb.w	r1, [r0, #45]	; 0x2d
    1a28:	b.w	724 <loop+0x25c>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a2c:	ldr	r3, [r6, #4]
    1a2e:	clz	r3, r3
    1a32:	lsrs	r3, r3, #5
    1a34:	str	r3, [r6, #4]
    1a36:	movs	r1, #8
    1a38:	bl	22b8 <usb_serial_write>
    1a3c:	ldr	r0, [pc, #600]	; (1c98 <loop+0x17d0>)
    1a3e:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1a42:	ldrb	r1, [r6, #4]
    1a44:	ldrb	r0, [r6, #0]
    1a46:	bl	28c8 <digitalWrite>

      if (blinking) {
    1a4a:	ldrb	r3, [r6, #16]
    1a4c:	cbz	r3, 1a5c <loop+0x1594>
        digitalWrite(m_pin, !m_state);
    1a4e:	ldr	r1, [r6, #4]
    1a50:	ldrb	r0, [r6, #0]
    1a52:	clz	r1, r1
    1a56:	lsrs	r1, r1, #5
    1a58:	bl	28c8 <digitalWrite>
    1a5c:	ldr	r0, [r5, #28]
    1a5e:	ldr	r3, [r5, #36]	; 0x24
    1a60:	ldrb.w	r1, [r0, #45]	; 0x2d
    1a64:	ldr	r7, [r5, #32]
    1a66:	ldr	r2, [r5, #40]	; 0x28
    1a68:	eor.w	r1, r1, #1
    1a6c:	strb.w	r1, [r0, #45]	; 0x2d
    1a70:	b.w	5b6 <loop+0xee>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a74:	ldr	r3, [r5, #4]
    1a76:	clz	r3, r3
    1a7a:	lsrs	r3, r3, #5
    1a7c:	str	r3, [r5, #4]
    1a7e:	movs	r1, #8
    1a80:	bl	22b8 <usb_serial_write>
    1a84:	ldr	r0, [pc, #528]	; (1c98 <loop+0x17d0>)
    1a86:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1a8a:	ldrb	r1, [r5, #4]
    1a8c:	ldrb	r0, [r5, #0]
    1a8e:	bl	28c8 <digitalWrite>

      if (blinking) {
    1a92:	ldrb	r3, [r5, #16]
    1a94:	cbz	r3, 1aa4 <loop+0x15dc>
        digitalWrite(m_pin, !m_state);
    1a96:	ldr	r1, [r5, #4]
    1a98:	ldrb	r0, [r5, #0]
    1a9a:	clz	r1, r1
    1a9e:	lsrs	r1, r1, #5
    1aa0:	bl	28c8 <digitalWrite>
    1aa4:	ldr	r0, [r6, #28]
    1aa6:	ldr	r3, [r6, #36]	; 0x24
    1aa8:	ldrb.w	r1, [r0, #45]	; 0x2d
    1aac:	ldr	r7, [r6, #32]
    1aae:	ldr	r2, [r6, #40]	; 0x28
    1ab0:	eor.w	r1, r1, #1
    1ab4:	strb.w	r1, [r0, #45]	; 0x2d
    1ab8:	b.w	630 <loop+0x168>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1abc:	ldr	r3, [r6, #4]
    1abe:	clz	r3, r3
    1ac2:	lsrs	r3, r3, #5
    1ac4:	str	r3, [r6, #4]
    1ac6:	movs	r1, #8
    1ac8:	bl	22b8 <usb_serial_write>
    1acc:	ldr	r0, [pc, #456]	; (1c98 <loop+0x17d0>)
    1ace:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1ad2:	ldrb	r1, [r6, #4]
    1ad4:	ldrb	r0, [r6, #0]
    1ad6:	bl	28c8 <digitalWrite>

      if (blinking) {
    1ada:	ldrb	r3, [r6, #16]
    1adc:	cbz	r3, 1aec <loop+0x1624>
        digitalWrite(m_pin, !m_state);
    1ade:	ldr	r1, [r6, #4]
    1ae0:	ldrb	r0, [r6, #0]
    1ae2:	clz	r1, r1
    1ae6:	lsrs	r1, r1, #5
    1ae8:	bl	28c8 <digitalWrite>
    1aec:	ldr	r0, [r5, #28]
    1aee:	ldr	r3, [r5, #36]	; 0x24
    1af0:	ldrb.w	r1, [r0, #45]	; 0x2d
    1af4:	ldr	r6, [r5, #32]
    1af6:	ldr	r2, [r5, #40]	; 0x28
    1af8:	eor.w	r1, r1, #1
    1afc:	strb.w	r1, [r0, #45]	; 0x2d
    1b00:	b.w	7c2 <loop+0x2fa>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1b04:	ldr	r3, [r6, #4]
    1b06:	clz	r3, r3
    1b0a:	lsrs	r3, r3, #5
    1b0c:	str	r3, [r6, #4]
    1b0e:	movs	r1, #8
    1b10:	bl	22b8 <usb_serial_write>
    1b14:	ldr	r0, [pc, #384]	; (1c98 <loop+0x17d0>)
    1b16:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1b1a:	ldrb	r1, [r6, #4]
    1b1c:	ldrb	r0, [r6, #0]
    1b1e:	bl	28c8 <digitalWrite>

      if (blinking) {
    1b22:	ldrb	r3, [r6, #16]
    1b24:	cbz	r3, 1b34 <loop+0x166c>
        digitalWrite(m_pin, !m_state);
    1b26:	ldr	r1, [r6, #4]
    1b28:	ldrb	r0, [r6, #0]
    1b2a:	clz	r1, r1
    1b2e:	lsrs	r1, r1, #5
    1b30:	bl	28c8 <digitalWrite>
    1b34:	ldr	r0, [r5, #28]
    1b36:	ldr	r3, [r5, #36]	; 0x24
    1b38:	ldrb.w	r1, [r0, #45]	; 0x2d
    1b3c:	ldr	r7, [r5, #32]
    1b3e:	ldr	r2, [r5, #40]	; 0x28
    1b40:	eor.w	r1, r1, #1
    1b44:	strb.w	r1, [r0, #45]	; 0x2d
    1b48:	b.w	6aa <loop+0x1e2>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1b4c:	ldr	r0, [r2, #8]
    1b4e:	ldr	r3, [r2, #12]
    1b50:	lsls	r0, r0, #16
    1b52:	lsls	r3, r3, #24
    1b54:	and.w	r3, r3, #2130706432	; 0x7f000000
    1b58:	and.w	r0, r0, #8323072	; 0x7f0000
    1b5c:	orrs	r0, r3
    1b5e:	orr.w	r0, r0, #40704	; 0x9f00
    1b62:	orr.w	r0, r0, #9
    1b66:	bl	2b54 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1b6a:	bl	2bf0 <usb_midi_flush_output>
    1b6e:	ldr	r3, [r6, #0]
    1b70:	b.n	16be <loop+0x11f6>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1b72:	movs	r3, #3
    1b74:	str	r3, [r6, #0]
    1b76:	b.n	16d2 <loop+0x120a>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1b78:	movs	r3, #1
    1b7a:	movs	r1, #8
    1b7c:	ldr	r0, [pc, #284]	; (1c9c <loop+0x17d4>)
    1b7e:	strb.w	r3, [lr]
    1b82:	bl	22b8 <usb_serial_write>
    1b86:	ldr	r0, [pc, #272]	; (1c98 <loop+0x17d0>)
    1b88:	bl	3e2c <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1b8c:	ldr.w	r0, [r9, #36]	; 0x24
    1b90:	movw	r1, #999	; 0x3e7
    1b94:	bl	490 <Led::blink(int)>
    1b98:	ldr.w	r3, [r8, #36]	; 0x24
    1b9c:	ldr.w	r6, [r8, #32]
    1ba0:	ldr.w	r2, [r8, #40]	; 0x28
    1ba4:	b.w	7c2 <loop+0x2fa>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1ba8:	movs	r3, #1
    1baa:	movs	r1, #8
    1bac:	ldr	r0, [pc, #236]	; (1c9c <loop+0x17d4>)
    1bae:	strb.w	r3, [lr]
    1bb2:	bl	22b8 <usb_serial_write>
    1bb6:	ldr	r0, [pc, #224]	; (1c98 <loop+0x17d0>)
    1bb8:	bl	3e2c <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1bbc:	ldr.w	r0, [r9, #36]	; 0x24
    1bc0:	movw	r1, #999	; 0x3e7
    1bc4:	bl	490 <Led::blink(int)>
    1bc8:	ldr.w	r3, [r8, #36]	; 0x24
    1bcc:	ldr.w	r7, [r8, #32]
    1bd0:	ldr.w	r2, [r8, #40]	; 0x28
    1bd4:	b.w	724 <loop+0x25c>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1bd8:	movs	r3, #1
    1bda:	movs	r1, #8
    1bdc:	ldr	r0, [pc, #188]	; (1c9c <loop+0x17d4>)
    1bde:	strb.w	r3, [lr]
    1be2:	bl	22b8 <usb_serial_write>
    1be6:	ldr	r0, [pc, #176]	; (1c98 <loop+0x17d0>)
    1be8:	bl	3e2c <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1bec:	ldr.w	r0, [r9, #36]	; 0x24
    1bf0:	movw	r1, #999	; 0x3e7
    1bf4:	bl	490 <Led::blink(int)>
    1bf8:	ldr.w	r3, [r8, #36]	; 0x24
    1bfc:	ldr.w	r7, [r8, #32]
    1c00:	ldr.w	r2, [r8, #40]	; 0x28
    1c04:	b.w	5b6 <loop+0xee>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1c08:	movs	r3, #1
    1c0a:	movs	r1, #8
    1c0c:	ldr	r0, [pc, #140]	; (1c9c <loop+0x17d4>)
    1c0e:	strb.w	r3, [lr]
    1c12:	bl	22b8 <usb_serial_write>
    1c16:	ldr	r0, [pc, #128]	; (1c98 <loop+0x17d0>)
    1c18:	bl	3e2c <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1c1c:	ldr.w	r0, [r9, #36]	; 0x24
    1c20:	movw	r1, #999	; 0x3e7
    1c24:	bl	490 <Led::blink(int)>
    1c28:	ldr.w	r3, [r8, #36]	; 0x24
    1c2c:	ldr.w	r7, [r8, #32]
    1c30:	ldr.w	r2, [r8, #40]	; 0x28
    1c34:	b.w	630 <loop+0x168>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1c38:	movs	r3, #1
    1c3a:	movs	r1, #8
    1c3c:	ldr	r0, [pc, #92]	; (1c9c <loop+0x17d4>)
    1c3e:	strb.w	r3, [lr]
    1c42:	bl	22b8 <usb_serial_write>
    1c46:	ldr	r0, [pc, #80]	; (1c98 <loop+0x17d0>)
    1c48:	bl	3e2c <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1c4c:	ldr.w	r0, [r9, #36]	; 0x24
    1c50:	movw	r1, #999	; 0x3e7
    1c54:	bl	490 <Led::blink(int)>
    1c58:	ldr.w	r3, [r8, #36]	; 0x24
    1c5c:	ldr.w	r7, [r8, #32]
    1c60:	ldr.w	r2, [r8, #40]	; 0x28
    1c64:	b.w	53c <loop+0x74>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1c68:	movs	r3, #1
    1c6a:	movs	r1, #8
    1c6c:	ldr	r0, [pc, #44]	; (1c9c <loop+0x17d4>)
    1c6e:	strb.w	r3, [lr]
    1c72:	bl	22b8 <usb_serial_write>
    1c76:	ldr	r0, [pc, #32]	; (1c98 <loop+0x17d0>)
    1c78:	bl	3e2c <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1c7c:	ldr.w	r0, [r9, #36]	; 0x24
    1c80:	movw	r1, #999	; 0x3e7
    1c84:	bl	490 <Led::blink(int)>
    1c88:	ldr.w	r3, [r8, #36]	; 0x24
    1c8c:	ldr.w	r7, [r8, #32]
    1c90:	ldr.w	r2, [r8, #40]	; 0x28
    1c94:	b.w	6aa <loop+0x1e2>
    1c98:	.word	0x1fff0c70
    1c9c:	.word	0x0000528c
    1ca0:	movs	r1, #5
    1ca2:	ldr	r0, [pc, #608]	; (1f04 <loop+0x1a3c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1ca4:	strb.w	r6, [lr]
    1ca8:	bl	22b8 <usb_serial_write>
    1cac:	ldr	r0, [pc, #600]	; (1f08 <loop+0x1a40>)
    1cae:	bl	3e2c <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1cb2:	mov	r1, r6
    1cb4:	ldr.w	r0, [r9, #36]	; 0x24
    1cb8:	bl	490 <Led::blink(int)>
        m_leds[4]->on();
    1cbc:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1cc0:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1cc2:	strb	r6, [r3, #16]
      m_state = 1;
    1cc4:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1cc6:	ldrb	r0, [r3, #0]
    1cc8:	bl	28c8 <digitalWrite>
    1ccc:	ldr.w	r3, [r8, #36]	; 0x24
    1cd0:	ldr.w	r6, [r8, #32]
    1cd4:	ldr.w	r2, [r8, #40]	; 0x28
    1cd8:	b.w	7c2 <loop+0x2fa>
    1cdc:	movs	r1, #5
    1cde:	ldr	r0, [pc, #548]	; (1f04 <loop+0x1a3c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1ce0:	strb.w	r7, [lr]
    1ce4:	bl	22b8 <usb_serial_write>
    1ce8:	ldr	r0, [pc, #540]	; (1f08 <loop+0x1a40>)
    1cea:	bl	3e2c <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1cee:	mov	r1, r7
    1cf0:	ldr.w	r0, [r9, #36]	; 0x24
    1cf4:	bl	490 <Led::blink(int)>
        m_leds[4]->on();
    1cf8:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1cfc:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1cfe:	strb	r7, [r3, #16]
      m_state = 1;
    1d00:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1d02:	ldrb	r0, [r3, #0]
    1d04:	bl	28c8 <digitalWrite>
    1d08:	ldr.w	r3, [r8, #36]	; 0x24
    1d0c:	ldr.w	r7, [r8, #32]
    1d10:	ldr.w	r2, [r8, #40]	; 0x28
    1d14:	b.w	724 <loop+0x25c>
    1d18:	movs	r1, #5
    1d1a:	ldr	r0, [pc, #488]	; (1f04 <loop+0x1a3c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1d1c:	strb.w	r7, [lr]
    1d20:	bl	22b8 <usb_serial_write>
    1d24:	ldr	r0, [pc, #480]	; (1f08 <loop+0x1a40>)
    1d26:	bl	3e2c <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1d2a:	mov	r1, r7
    1d2c:	ldr.w	r0, [r9, #36]	; 0x24
    1d30:	bl	490 <Led::blink(int)>
        m_leds[4]->on();
    1d34:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1d38:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1d3a:	strb	r7, [r3, #16]
      m_state = 1;
    1d3c:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1d3e:	ldrb	r0, [r3, #0]
    1d40:	bl	28c8 <digitalWrite>
    1d44:	ldr.w	r3, [r8, #36]	; 0x24
    1d48:	ldr.w	r7, [r8, #32]
    1d4c:	ldr.w	r2, [r8, #40]	; 0x28
    1d50:	b.w	53c <loop+0x74>
    1d54:	movs	r1, #5
    1d56:	ldr	r0, [pc, #428]	; (1f04 <loop+0x1a3c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1d58:	strb.w	r7, [lr]
    1d5c:	bl	22b8 <usb_serial_write>
    1d60:	ldr	r0, [pc, #420]	; (1f08 <loop+0x1a40>)
    1d62:	bl	3e2c <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1d66:	mov	r1, r7
    1d68:	ldr.w	r0, [r9, #36]	; 0x24
    1d6c:	bl	490 <Led::blink(int)>
        m_leds[4]->on();
    1d70:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1d74:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1d76:	strb	r7, [r3, #16]
      m_state = 1;
    1d78:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1d7a:	ldrb	r0, [r3, #0]
    1d7c:	bl	28c8 <digitalWrite>
    1d80:	ldr.w	r3, [r8, #36]	; 0x24
    1d84:	ldr.w	r7, [r8, #32]
    1d88:	ldr.w	r2, [r8, #40]	; 0x28
    1d8c:	b.w	5b6 <loop+0xee>
    1d90:	movs	r1, #5
    1d92:	ldr	r0, [pc, #368]	; (1f04 <loop+0x1a3c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1d94:	strb.w	r7, [lr]
    1d98:	bl	22b8 <usb_serial_write>
    1d9c:	ldr	r0, [pc, #360]	; (1f08 <loop+0x1a40>)
    1d9e:	bl	3e2c <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1da2:	mov	r1, r7
    1da4:	ldr.w	r0, [r9, #36]	; 0x24
    1da8:	bl	490 <Led::blink(int)>
        m_leds[4]->on();
    1dac:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1db0:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1db2:	strb	r7, [r3, #16]
      m_state = 1;
    1db4:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1db6:	ldrb	r0, [r3, #0]
    1db8:	bl	28c8 <digitalWrite>
    1dbc:	ldr.w	r3, [r8, #36]	; 0x24
    1dc0:	ldr.w	r7, [r8, #32]
    1dc4:	ldr.w	r2, [r8, #40]	; 0x28
    1dc8:	b.w	6aa <loop+0x1e2>
    1dcc:	movs	r1, #5
    1dce:	ldr	r0, [pc, #308]	; (1f04 <loop+0x1a3c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1dd0:	strb.w	r7, [lr]
    1dd4:	bl	22b8 <usb_serial_write>
    1dd8:	ldr	r0, [pc, #300]	; (1f08 <loop+0x1a40>)
    1dda:	bl	3e2c <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1dde:	mov	r1, r7
    1de0:	ldr.w	r0, [r9, #36]	; 0x24
    1de4:	bl	490 <Led::blink(int)>
        m_leds[4]->on();
    1de8:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1dec:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1dee:	strb	r7, [r3, #16]
      m_state = 1;
    1df0:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1df2:	ldrb	r0, [r3, #0]
    1df4:	bl	28c8 <digitalWrite>
    1df8:	ldr.w	r3, [r8, #36]	; 0x24
    1dfc:	ldr.w	r7, [r8, #32]
    1e00:	ldr.w	r2, [r8, #40]	; 0x28
    1e04:	b.w	630 <loop+0x168>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1e08:	movs	r3, #2
    1e0a:	movs	r1, #10
    1e0c:	ldr	r0, [pc, #252]	; (1f0c <loop+0x1a44>)
    1e0e:	strb.w	r3, [lr]
    1e12:	bl	22b8 <usb_serial_write>
    1e16:	ldr	r0, [pc, #240]	; (1f08 <loop+0x1a40>)
    1e18:	bl	3e2c <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    1e1c:	mov	r1, r7
    1e1e:	ldr.w	r0, [r9, #36]	; 0x24
    1e22:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    1e26:	ldr.w	r3, [r9, #36]	; 0x24
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    1e2a:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    1e2c:	strb	r7, [r3, #16]
      m_state = 0;
    1e2e:	str	r7, [r3, #4]
    1e30:	b.n	1d7a <loop+0x18b2>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1e32:	movs	r3, #2
    1e34:	movs	r1, #10
    1e36:	ldr	r0, [pc, #212]	; (1f0c <loop+0x1a44>)
    1e38:	strb.w	r3, [lr]
    1e3c:	bl	22b8 <usb_serial_write>
    1e40:	ldr	r0, [pc, #196]	; (1f08 <loop+0x1a40>)
    1e42:	bl	3e2c <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    1e46:	mov	r1, r7
    1e48:	ldr.w	r0, [r9, #36]	; 0x24
    1e4c:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    1e50:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    1e54:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    1e56:	strb	r7, [r3, #16]
      m_state = 0;
    1e58:	str	r7, [r3, #4]
    1e5a:	b.n	1df2 <loop+0x192a>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1e5c:	movs	r3, #2
    1e5e:	movs	r1, #10
    1e60:	ldr	r0, [pc, #168]	; (1f0c <loop+0x1a44>)
    1e62:	strb.w	r3, [lr]
    1e66:	bl	22b8 <usb_serial_write>
    1e6a:	ldr	r0, [pc, #156]	; (1f08 <loop+0x1a40>)
    1e6c:	bl	3e2c <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    1e70:	mov	r1, r6
    1e72:	ldr.w	r0, [r9, #36]	; 0x24
    1e76:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    1e7a:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    1e7e:	mov	r1, r6
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    1e80:	strb	r6, [r3, #16]
      m_state = 0;
    1e82:	str	r6, [r3, #4]
    1e84:	b.n	1cc6 <loop+0x17fe>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1e86:	movs	r3, #2
    1e88:	movs	r1, #10
    1e8a:	ldr	r0, [pc, #128]	; (1f0c <loop+0x1a44>)
    1e8c:	strb.w	r3, [lr]
    1e90:	bl	22b8 <usb_serial_write>
    1e94:	ldr	r0, [pc, #112]	; (1f08 <loop+0x1a40>)
    1e96:	bl	3e2c <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    1e9a:	mov	r1, r7
    1e9c:	ldr.w	r0, [r9, #36]	; 0x24
    1ea0:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    1ea4:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    1ea8:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    1eaa:	strb	r7, [r3, #16]
      m_state = 0;
    1eac:	str	r7, [r3, #4]
    1eae:	b.n	1d02 <loop+0x183a>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1eb0:	movs	r3, #2
    1eb2:	movs	r1, #10
    1eb4:	ldr	r0, [pc, #84]	; (1f0c <loop+0x1a44>)
    1eb6:	strb.w	r3, [lr]
    1eba:	bl	22b8 <usb_serial_write>
    1ebe:	ldr	r0, [pc, #72]	; (1f08 <loop+0x1a40>)
    1ec0:	bl	3e2c <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    1ec4:	mov	r1, r7
    1ec6:	ldr.w	r0, [r9, #36]	; 0x24
    1eca:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    1ece:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    1ed2:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    1ed4:	strb	r7, [r3, #16]
      m_state = 0;
    1ed6:	str	r7, [r3, #4]
    1ed8:	b.n	1d3e <loop+0x1876>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1eda:	movs	r3, #2
    1edc:	movs	r1, #10
    1ede:	ldr	r0, [pc, #44]	; (1f0c <loop+0x1a44>)
    1ee0:	strb.w	r3, [lr]
    1ee4:	bl	22b8 <usb_serial_write>
    1ee8:	ldr	r0, [pc, #28]	; (1f08 <loop+0x1a40>)
    1eea:	bl	3e2c <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    1eee:	mov	r1, r7
    1ef0:	ldr.w	r0, [r9, #36]	; 0x24
    1ef4:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    1ef8:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    1efc:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    1efe:	strb	r7, [r3, #16]
      m_state = 0;
    1f00:	str	r7, [r3, #4]
    1f02:	b.n	1db6 <loop+0x18ee>
    1f04:	.word	0x000052a4
    1f08:	.word	0x1fff0c70
    1f0c:	.word	0x00005298

00001f10 <_GLOBAL__sub_I_currentMode>:
    1f10:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "definitions.h"
#include "controller.h"
#include "transport.h"
#include "step.h"

Led led1(3, LOW);
    1f14:	movs	r2, #0
    1f16:	movs	r1, #3
    1f18:	ldr	r0, [pc, #604]	; (2178 <_GLOBAL__sub_I_currentMode+0x268>)
    1f1a:	ldr	r7, [pc, #608]	; (217c <_GLOBAL__sub_I_currentMode+0x26c>)
    1f1c:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    1f20:	movs	r2, #0
    1f22:	movs	r1, #5
    1f24:	ldr	r0, [pc, #600]	; (2180 <_GLOBAL__sub_I_currentMode+0x270>)
    1f26:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    1f2a:	movs	r2, #0
    1f2c:	movs	r1, #7
    1f2e:	ldr	r0, [pc, #596]	; (2184 <_GLOBAL__sub_I_currentMode+0x274>)
    1f30:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    1f34:	movs	r2, #0
    1f36:	movs	r1, #9
    1f38:	ldr	r0, [pc, #588]	; (2188 <_GLOBAL__sub_I_currentMode+0x278>)
    1f3a:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    1f3e:	movs	r2, #0
    1f40:	movs	r1, #11
    1f42:	ldr	r0, [pc, #584]	; (218c <_GLOBAL__sub_I_currentMode+0x27c>)
    1f44:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    1f48:	movs	r2, #0
    1f4a:	movs	r1, #24
    1f4c:	ldr	r0, [pc, #576]	; (2190 <_GLOBAL__sub_I_currentMode+0x280>)
    1f4e:	bl	46c <Led::Led(int, int)>
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1f52:	ldr	r2, [pc, #576]	; (2194 <_GLOBAL__sub_I_currentMode+0x284>)
    1f54:	ldr	r3, [pc, #576]	; (2198 <_GLOBAL__sub_I_currentMode+0x288>)
    1f56:	ldr.w	lr, [pc, #656]	; 21e8 <_GLOBAL__sub_I_currentMode+0x2d8>
    1f5a:	ldr	r1, [pc, #576]	; (219c <_GLOBAL__sub_I_currentMode+0x28c>)
    1f5c:	str.w	lr, [r2]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    1f60:	movs	r0, #4
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    1f62:	movs	r6, #0
      m_controller = controller;
      m_pitch = 38;
    1f64:	movs	r5, #38	; 0x26
      m_velocity = 100;
    1f66:	movs	r4, #100	; 0x64
      m_length = 4;
    1f68:	str	r0, [r2, #16]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    1f6a:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    1f6c:	str	r5, [r2, #8]
      m_velocity = 100;
    1f6e:	str	r4, [r2, #12]
      m_length = 4;
    1f70:	str	r0, [r3, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1f72:	ldr	r2, [pc, #556]	; (21a0 <_GLOBAL__sub_I_currentMode+0x290>)
    1f74:	str.w	lr, [r3]
      m_state = false;
    1f78:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    1f7a:	str	r5, [r3, #8]
      m_velocity = 100;
    1f7c:	str	r4, [r3, #12]
    1f7e:	ldr	r3, [pc, #548]	; (21a4 <_GLOBAL__sub_I_currentMode+0x294>)
      m_length = 4;
    1f80:	str	r0, [r2, #16]
    1f82:	str	r0, [r1, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1f84:	str.w	lr, [r2]
      m_state = false;
    1f88:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    1f8a:	str	r5, [r2, #8]
      m_velocity = 100;
    1f8c:	str	r4, [r2, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1f8e:	str.w	lr, [r1]
      m_state = false;
    1f92:	strb	r6, [r1, #4]
      m_controller = controller;
      m_pitch = 38;
    1f94:	str	r5, [r1, #8]
      m_velocity = 100;
    1f96:	str	r4, [r1, #12]
    1f98:	mov	r2, r7
    1f9a:	add.w	r0, r3, #24
    boolean m_reverse;
    boolean m_shiftMode;

    Sequence (Step* steps[4], Led* leds[6]) {
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
    1f9e:	ldr.w	r1, [r2], #4
    1fa2:	str.w	r1, [r3, #4]!
    Modes m_mode;
    boolean m_reverse;
    boolean m_shiftMode;

    Sequence (Step* steps[4], Led* leds[6]) {
      for (int i = 0; i < 6; i++) {
    1fa6:	cmp	r0, r3
    1fa8:	bne.n	1f9e <_GLOBAL__sub_I_currentMode+0x8e>
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    1faa:	ldr	r5, [pc, #508]	; (21a8 <_GLOBAL__sub_I_currentMode+0x298>)
    1fac:	ldr	r2, [pc, #508]	; (21ac <_GLOBAL__sub_I_currentMode+0x29c>)
      
      m_currentStep = 0;
      m_mode = PITCH;
      m_reverse = false;
      
      m_leds[4]->toggle();
    1fae:	ldr	r4, [r5, #36]	; 0x24
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    1fb0:	ldr	r1, [r2, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1fb2:	ldr	r3, [r4, #4]
    1fb4:	ldr	r0, [r2, #4]
    1fb6:	ldr	r6, [r2, #12]
    1fb8:	str	r1, [r5, #4]
    1fba:	clz	r3, r3
    1fbe:	ldr	r1, [r2, #8]
    1fc0:	str	r0, [r5, #8]
      };
      
      m_currentStep = 0;
    1fc2:	movs	r2, #0
    1fc4:	lsrs	r3, r3, #5
      m_mode = PITCH;
    1fc6:	strb.w	r2, [r5, #44]	; 0x2c
      m_reverse = false;
    1fca:	strb.w	r2, [r5, #45]	; 0x2d
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    1fce:	str	r1, [r5, #12]
    1fd0:	str	r6, [r5, #16]
    1fd2:	movs	r1, #8
    1fd4:	str	r3, [r4, #4]
    1fd6:	ldr	r0, [pc, #472]	; (21b0 <_GLOBAL__sub_I_currentMode+0x2a0>)
      };
      
      m_currentStep = 0;
    1fd8:	str	r2, [r5, #0]
    1fda:	bl	22b8 <usb_serial_write>
    1fde:	ldr	r0, [pc, #468]	; (21b4 <_GLOBAL__sub_I_currentMode+0x2a4>)
    1fe0:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1fe4:	ldrb	r1, [r4, #4]
    1fe6:	ldrb	r0, [r4, #0]
    1fe8:	bl	28c8 <digitalWrite>

      if (blinking) {
    1fec:	ldrb	r3, [r4, #16]
    1fee:	cbz	r3, 1ffe <_GLOBAL__sub_I_currentMode+0xee>
        digitalWrite(m_pin, !m_state);
    1ff0:	ldr	r1, [r4, #4]
    1ff2:	ldrb	r0, [r4, #0]
    1ff4:	clz	r1, r1
    1ff8:	lsrs	r1, r1, #5
    1ffa:	bl	28c8 <digitalWrite>
      m_mode = PITCH;
      m_reverse = false;
      
      m_leds[4]->toggle();
      m_leds[5]->toggle();
    1ffe:	ldr	r4, [r5, #40]	; 0x28
    2000:	ldr	r0, [pc, #428]	; (21b0 <_GLOBAL__sub_I_currentMode+0x2a0>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    2002:	ldr	r3, [r4, #4]
    2004:	clz	r3, r3
    2008:	lsrs	r3, r3, #5
    200a:	str	r3, [r4, #4]
    200c:	movs	r1, #8
    200e:	bl	22b8 <usb_serial_write>
    2012:	ldr	r0, [pc, #416]	; (21b4 <_GLOBAL__sub_I_currentMode+0x2a4>)
    2014:	bl	3e2c <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    2018:	ldrb	r1, [r4, #4]
    201a:	ldrb	r0, [r4, #0]
    201c:	bl	28c8 <digitalWrite>

      if (blinking) {
    2020:	ldrb	r3, [r4, #16]
    2022:	cbz	r3, 2032 <_GLOBAL__sub_I_currentMode+0x122>
        digitalWrite(m_pin, !m_state);
    2024:	ldr	r1, [r4, #4]
    2026:	ldrb	r0, [r4, #0]
    2028:	clz	r1, r1
    202c:	lsrs	r1, r1, #5
    202e:	bl	28c8 <digitalWrite>
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    2032:	ldr	r6, [pc, #388]	; (21b8 <_GLOBAL__sub_I_currentMode+0x2a8>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2034:	ldr	r2, [pc, #388]	; (21bc <_GLOBAL__sub_I_currentMode+0x2ac>)
    2036:	str	r5, [r6, #12]
    2038:	movs	r4, #0
      m_id = id;
      m_pin = pin;
    203a:	mov.w	r9, #2
    203e:	movs	r3, #24
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2040:	mov.w	sl, #1
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2044:	mov	r1, r4
    2046:	mov	r0, r9
    2048:	str	r3, [r6, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    204a:	ldr	r3, [r7, #0]
    204c:	strb.w	r4, [r2, #48]	; 0x30
      m_id = id;
      m_pin = pin;
    2050:	mov.w	r8, #4
      m_shiftButton = shiftButton;
    2054:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    2056:	strb	r4, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2058:	str	r3, [r2, #24]
    205a:	str	r4, [r6, #8]
      m_state = false;
    205c:	strb	r4, [r6, #0]
    205e:	str	r5, [r2, #28]
      m_id = id;
    2060:	str.w	sl, [r2]
      m_pin = pin;
    2064:	str.w	r9, [r2, #56]	; 0x38
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2068:	bl	28f0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    206c:	ldr	r2, [pc, #336]	; (21c0 <_GLOBAL__sub_I_currentMode+0x2b0>)
    206e:	ldr	r3, [r7, #4]
    2070:	strb.w	r4, [r2, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2074:	mov	r1, r4
    2076:	mov	r0, r8
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    2078:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    207a:	strb	r4, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    207c:	str	r3, [r2, #24]
    207e:	str	r5, [r2, #28]
      m_id = id;
    2080:	str.w	r9, [r2]
      m_pin = pin;
    2084:	str.w	r8, [r2, #56]	; 0x38
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2088:	bl	28f0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    208c:	ldr	r3, [pc, #308]	; (21c4 <_GLOBAL__sub_I_currentMode+0x2b4>)
    208e:	ldr	r2, [r7, #8]
    2090:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2094:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2096:	mov.w	fp, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    209a:	movs	r0, #6
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    209c:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    209e:	strb	r4, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    20a0:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    20a2:	str	r0, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    20a4:	str	r5, [r3, #28]
      m_id = id;
    20a6:	str.w	fp, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    20aa:	bl	28f0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    20ae:	ldr	r3, [pc, #280]	; (21c8 <_GLOBAL__sub_I_currentMode+0x2b8>)
    20b0:	ldr	r0, [r7, #12]
    20b2:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    20b4:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    20b6:	mov	r1, r4
    20b8:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    20ba:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    20be:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    20c0:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    20c2:	str	r2, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    20c4:	str	r5, [r3, #28]
      m_id = id;
    20c6:	str.w	r8, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    20ca:	bl	28f0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    20ce:	ldr	r3, [pc, #252]	; (21cc <_GLOBAL__sub_I_currentMode+0x2bc>)
    20d0:	ldr	r0, [r7, #16]
    20d2:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    20d4:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    20d6:	movs	r0, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    20d8:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    20da:	str	r0, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    20dc:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    20de:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    20e2:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    20e4:	str	r2, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    20e6:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    20e8:	strb.w	sl, [r3, #16]
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    20ec:	bl	28f0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    20f0:	ldr	r3, [pc, #220]	; (21d0 <_GLOBAL__sub_I_currentMode+0x2c0>)
    20f2:	ldr	r7, [r7, #20]
    20f4:	str	r7, [r3, #24]
      m_id = id;
    20f6:	movs	r2, #6
    20f8:	str	r2, [r3, #0]
      m_pin = pin;
    20fa:	movs	r2, #12
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    20fc:	ldr	r7, [pc, #212]	; (21d4 <_GLOBAL__sub_I_currentMode+0x2c4>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    20fe:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2102:	mov	r0, r2
    2104:	mov	r1, r4
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    2106:	strb	r4, [r3, #16]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    2108:	str	r2, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    210a:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    210c:	strb.w	sl, [r3, #17]

      pinMode(pin, INPUT);
    2110:	bl	28f0 <pinMode>
    2114:	ldr	r0, [pc, #192]	; (21d8 <_GLOBAL__sub_I_currentMode+0x2c8>)
    2116:	ldr	r1, [pc, #196]	; (21dc <_GLOBAL__sub_I_currentMode+0x2cc>)
    2118:	ldr	r2, [pc, #196]	; (21e0 <_GLOBAL__sub_I_currentMode+0x2d0>)
    211a:	ldr	r3, [pc, #200]	; (21e4 <_GLOBAL__sub_I_currentMode+0x2d4>)
      m_pin = pin;
      m_knobType = knobType;
    211c:	strb	r4, [r7, #24]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    211e:	mov.w	ip, #14
      m_knobType = knobType;
      m_id = id;
    2122:	str	r4, [r7, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2124:	strb.w	ip, [r7]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2128:	str	r6, [r7, #20]
    212a:	str	r5, [r7, #16]
      m_pin = pin;
    212c:	mov.w	lr, #15
    2130:	mov.w	ip, #16
    2134:	movs	r7, #17
    2136:	movs	r4, #18
    2138:	strb.w	lr, [r0]
    213c:	strb.w	ip, [r1]
    2140:	strb	r7, [r2, #0]
    2142:	strb	r4, [r3, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2144:	str	r6, [r0, #20]
    2146:	str	r5, [r0, #16]
      m_pin = pin;
      m_knobType = knobType;
    2148:	strb.w	sl, [r0, #24]
      m_id = id;
    214c:	str.w	sl, [r0, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2150:	str	r6, [r1, #20]
    2152:	str	r5, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    2154:	strb.w	r9, [r1, #24]
      m_id = id;
    2158:	str.w	r9, [r1, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    215c:	str	r6, [r2, #20]
    215e:	str	r5, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    2160:	strb.w	fp, [r2, #24]
      m_id = id;
    2164:	str.w	fp, [r2, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2168:	str	r6, [r3, #20]
    216a:	str	r5, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    216c:	strb.w	r8, [r3, #24]
      m_id = id;
    2170:	str.w	r8, [r3, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2174:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2178:	.word	0x1fff1894
    217c:	.word	0x1fff0c50
    2180:	.word	0x1fff18ac
    2184:	.word	0x1fff18c4
    2188:	.word	0x1fff18dc
    218c:	.word	0x1fff15d8
    2190:	.word	0x1fff15f0
    2194:	.word	0x1fff17a4
    2198:	.word	0x1fff17b8
    219c:	.word	0x1fff17cc
    21a0:	.word	0x1fff17e0
    21a4:	.word	0x1fff1784
    21a8:	.word	0x1fff1774
    21ac:	.word	0x1fff0c40
    21b0:	.word	0x0000525c
    21b4:	.word	0x1fff0c70
    21b8:	.word	0x1fff1880
    21bc:	.word	0x1fff160c
    21c0:	.word	0x1fff1648
    21c4:	.word	0x1fff1684
    21c8:	.word	0x1fff16c0
    21cc:	.word	0x1fff16fc
    21d0:	.word	0x1fff1738
    21d4:	.word	0x1fff17f4
    21d8:	.word	0x1fff1810
    21dc:	.word	0x1fff182c
    21e0:	.word	0x1fff1848
    21e4:	.word	0x1fff1864
    21e8:	.word	0x1fff1608

000021ec <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    21ec:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    21ee:	ldr	r5, [pc, #60]	; (222c <usb_serial_getchar+0x40>)
    21f0:	ldr	r0, [r5, #0]
    21f2:	cbz	r0, 2214 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    21f4:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    21f6:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    21f8:	adds	r1, r0, r3
    21fa:	adds	r3, #1
	if (i >= rx_packet->len) {
    21fc:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    21fe:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    2200:	bcs.n	2208 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    2202:	strh	r3, [r0, #2]
	}
	return c;
    2204:	mov	r0, r4
}
    2206:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    2208:	bl	3098 <usb_free>
		rx_packet = NULL;
    220c:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    220e:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    2210:	str	r3, [r5, #0]
    2212:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2214:	ldr	r3, [pc, #24]	; (2230 <usb_serial_getchar+0x44>)
    2216:	ldrb	r3, [r3, #0]
    2218:	cbz	r3, 2226 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    221a:	movs	r0, #2
    221c:	bl	30e4 <usb_rx>
    2220:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    2222:	cmp	r0, #0
    2224:	bne.n	21f4 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2226:	mov.w	r0, #4294967295
    222a:	pop	{r3, r4, r5, pc}
    222c:	.word	0x1fff1900
    2230:	.word	0x1fff1a60

00002234 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    2234:	push	{r4, lr}
	if (!rx_packet) {
    2236:	ldr	r4, [pc, #36]	; (225c <usb_serial_peekchar+0x28>)
    2238:	ldr	r0, [r4, #0]
    223a:	cbz	r0, 2244 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    223c:	ldrh	r3, [r0, #2]
    223e:	add	r0, r3
    2240:	ldrb	r0, [r0, #8]
}
    2242:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2244:	ldr	r3, [pc, #24]	; (2260 <usb_serial_peekchar+0x2c>)
    2246:	ldrb	r3, [r3, #0]
    2248:	cbz	r3, 2256 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    224a:	movs	r0, #2
    224c:	bl	30e4 <usb_rx>
    2250:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    2252:	cmp	r0, #0
    2254:	bne.n	223c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2256:	mov.w	r0, #4294967295
    225a:	pop	{r4, pc}
    225c:	.word	0x1fff1900
    2260:	.word	0x1fff1a60

00002264 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2264:	ldr	r3, [pc, #16]	; (2278 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    2266:	ldr	r2, [pc, #20]	; (227c <usb_serial_available+0x18>)
    2268:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    226a:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    226c:	cbz	r3, 2276 <usb_serial_available+0x12>
    226e:	ldrh	r2, [r3, #0]
    2270:	ldrh	r3, [r3, #2]
    2272:	subs	r3, r2, r3
    2274:	add	r0, r3
	return count;
}
    2276:	bx	lr
    2278:	.word	0x1fff1900
    227c:	.word	0x1fff1ef4

00002280 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    2280:	ldr	r3, [pc, #44]	; (22b0 <usb_serial_flush_input+0x30>)
    2282:	ldrb	r3, [r3, #0]
    2284:	cbz	r3, 22ae <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    2286:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    2288:	ldr	r4, [pc, #40]	; (22b4 <usb_serial_flush_input+0x34>)
    228a:	ldr	r0, [r4, #0]
    228c:	cbz	r0, 22a2 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    228e:	bl	3098 <usb_free>
		rx_packet = NULL;
    2292:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2294:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    2296:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2298:	bl	30e4 <usb_rx>
		if (!rx) break;
    229c:	cbz	r0, 22ac <usb_serial_flush_input+0x2c>
		usb_free(rx);
    229e:	bl	3098 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    22a2:	movs	r0, #2
    22a4:	bl	30e4 <usb_rx>
		if (!rx) break;
    22a8:	cmp	r0, #0
    22aa:	bne.n	229e <usb_serial_flush_input+0x1e>
    22ac:	pop	{r4, pc}
    22ae:	bx	lr
    22b0:	.word	0x1fff1a60
    22b4:	.word	0x1fff1900

000022b8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    22b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    22bc:	ldr.w	r9, [pc, #248]	; 23b8 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    22c0:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    22c2:	movs	r2, #1
    22c4:	strb.w	r2, [r9]
	while (size > 0) {
    22c8:	str	r1, [sp, #4]
    22ca:	cbz	r1, 2328 <usb_serial_write+0x70>
    22cc:	ldr.w	r8, [pc, #236]	; 23bc <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    22d0:	ldr	r7, [pc, #212]	; (23a8 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    22d2:	ldr	r6, [sp, #4]
    22d4:	mov	fp, r0
		if (!tx_packet) {
    22d6:	ldr.w	r0, [r8]
    22da:	cbz	r0, 234a <usb_serial_write+0x92>
    22dc:	ldr	r5, [pc, #204]	; (23ac <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    22de:	ldrh	r4, [r0, #2]
    22e0:	rsb	r1, r4, #64	; 0x40
    22e4:	cmp	r1, r6
    22e6:	it	cs
    22e8:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    22ea:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    22ee:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    22f0:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    22f4:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    22f6:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    22f8:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    22fc:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    2300:	cbz	r1, 2318 <usb_serial_write+0x60>
    2302:	subs	r4, #1
    2304:	add	r2, r4
    2306:	add	r1, fp
    2308:	ldrb.w	r4, [fp], #1
    230c:	strb.w	r4, [r2, #1]!
    2310:	cmp	fp, r1
    2312:	bne.n	2308 <usb_serial_write+0x50>
    2314:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    2318:	cmp.w	lr, #63	; 0x3f
    231c:	bhi.n	2336 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    231e:	ldr	r2, [pc, #144]	; (23b0 <usb_serial_write+0xf8>)
    2320:	movs	r1, #5
    2322:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    2324:	cmp	r6, #0
    2326:	bne.n	22d6 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    2328:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    232a:	movs	r3, #0
    232c:	strb.w	r3, [r9]
	return ret;
}
    2330:	add	sp, #12
    2332:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    2336:	movs	r2, #64	; 0x40
    2338:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    233a:	mov	r1, r0
    233c:	movs	r0, #3
    233e:	bl	3234 <usb_tx>
			tx_packet = NULL;
    2342:	movs	r2, #0
    2344:	str.w	r2, [r8]
    2348:	b.n	231e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    234a:	ldrb	r2, [r7, #0]
    234c:	cbz	r2, 2398 <usb_serial_write+0xe0>
    234e:	ldr	r4, [pc, #100]	; (23b4 <usb_serial_write+0xfc>)
    2350:	ldr	r5, [pc, #88]	; (23ac <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    2352:	mov.w	sl, #1
    2356:	b.n	2368 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2358:	subs	r4, #1
    235a:	beq.n	238a <usb_serial_write+0xd2>
    235c:	ldrb	r2, [r5, #0]
    235e:	cbnz	r2, 238a <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    2360:	bl	3d38 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2364:	ldrb	r2, [r7, #0]
    2366:	cbz	r2, 2398 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2368:	movs	r0, #3
    236a:	bl	3120 <usb_tx_packet_count>
    236e:	cmp	r0, #7
    2370:	bhi.n	2358 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    2372:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    2376:	bl	3058 <usb_malloc>
    237a:	str.w	r0, [r8]
					if (tx_packet) break;
    237e:	cmp	r0, #0
    2380:	bne.n	22de <usb_serial_write+0x26>
					tx_noautoflush = 0;
    2382:	ldr	r3, [pc, #52]	; (23b8 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2384:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    2386:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2388:	bne.n	235c <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    238a:	movs	r3, #1
					return -1;
    238c:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    2390:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    2392:	add	sp, #12
    2394:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    2398:	movs	r3, #0
					return -1;
    239a:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    239e:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    23a2:	add	sp, #12
    23a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23a8:	.word	0x1fff1a60
    23ac:	.word	0x1fff18fc
    23b0:	.word	0x1fff18f4
    23b4:	.word	0x00014821
    23b8:	.word	0x1fff18f5
    23bc:	.word	0x1fff18f8

000023c0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    23c0:	push	{lr}
    23c2:	sub	sp, #12
    23c4:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    23c6:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    23c8:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    23cc:	mov	r0, r3
    23ce:	bl	22b8 <usb_serial_write>
}
    23d2:	add	sp, #12
    23d4:	ldr.w	pc, [sp], #4

000023d8 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    23d8:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    23da:	ldr	r5, [pc, #56]	; (2414 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    23dc:	ldr	r4, [pc, #56]	; (2418 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    23de:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    23e0:	movs	r3, #1
    23e2:	strb	r3, [r4, #0]
	if (!tx_packet) {
    23e4:	cbz	r0, 23f2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    23e6:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    23e8:	movs	r3, #0
    23ea:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    23ec:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    23f0:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    23f2:	ldr	r3, [pc, #40]	; (241c <usb_serial_write_buffer_free+0x44>)
    23f4:	ldrb	r3, [r3, #0]
    23f6:	cbnz	r3, 23fe <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    23f8:	movs	r0, #0
    23fa:	strb	r0, [r4, #0]
			return 0;
    23fc:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    23fe:	movs	r0, #3
    2400:	bl	3120 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    2404:	cmp	r0, #7
    2406:	bhi.n	23f8 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    2408:	bl	3058 <usb_malloc>
    240c:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    240e:	cmp	r0, #0
    2410:	bne.n	23e6 <usb_serial_write_buffer_free+0xe>
    2412:	b.n	23f8 <usb_serial_write_buffer_free+0x20>
    2414:	.word	0x1fff18f8
    2418:	.word	0x1fff18f5
    241c:	.word	0x1fff1a60

00002420 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    2420:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    2422:	ldr	r3, [pc, #68]	; (2468 <usb_serial_flush_output+0x48>)
    2424:	ldrb	r3, [r3, #0]
    2426:	cbz	r3, 244c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    2428:	ldr	r6, [pc, #64]	; (246c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    242a:	ldr	r5, [pc, #68]	; (2470 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    242c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    242e:	movs	r7, #1
    2430:	strb	r7, [r5, #0]
	if (tx_packet) {
    2432:	cbz	r4, 244e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    2434:	ldr	r2, [pc, #60]	; (2474 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    2436:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    2438:	movs	r7, #0
    243a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    243c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    243e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2440:	movs	r0, #3
    2442:	bl	3234 <usb_tx>
		tx_packet = NULL;
    2446:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    2448:	movs	r3, #0
    244a:	strb	r3, [r5, #0]
    244c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    244e:	bl	3058 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    2452:	ldr	r3, [pc, #32]	; (2474 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    2454:	cbz	r0, 2462 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    2456:	mov	r1, r0
    2458:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    245a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    245c:	bl	3234 <usb_tx>
    2460:	b.n	2448 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2462:	strb	r7, [r3, #0]
    2464:	b.n	2448 <usb_serial_flush_output+0x28>
    2466:	nop
    2468:	.word	0x1fff1a60
    246c:	.word	0x1fff18f8
    2470:	.word	0x1fff18f5
    2474:	.word	0x1fff18f4

00002478 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    2478:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    247a:	ldr	r3, [pc, #56]	; (24b4 <usb_serial_flush_callback+0x3c>)
    247c:	ldrb	r3, [r3, #0]
    247e:	cbnz	r3, 249e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2480:	ldr	r4, [pc, #52]	; (24b8 <usb_serial_flush_callback+0x40>)
    2482:	ldr	r1, [r4, #0]
    2484:	cbz	r1, 24a0 <usb_serial_flush_callback+0x28>
    2486:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    248a:	ldrh	r3, [r1, #2]
    248c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    248e:	movs	r0, #3
    2490:	bl	3234 <usb_tx>
		tx_packet = NULL;
    2494:	str	r5, [r4, #0]
    2496:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2498:	ldr	r3, [pc, #32]	; (24bc <usb_serial_flush_callback+0x44>)
    249a:	movs	r2, #1
    249c:	strb	r2, [r3, #0]
    249e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    24a0:	bl	3058 <usb_malloc>
		if (tx) {
    24a4:	cmp	r0, #0
    24a6:	beq.n	2498 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    24a8:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    24aa:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    24ae:	movs	r0, #3
    24b0:	b.w	3234 <usb_tx>
    24b4:	.word	0x1fff18f5
    24b8:	.word	0x1fff18f8
    24bc:	.word	0x1fff18f4

000024c0 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    24c0:	ldr	r2, [pc, #220]	; (25a0 <wait_for_cal+0xe0>)
    24c2:	ldr	r1, [pc, #224]	; (25a4 <wait_for_cal+0xe4>)
    24c4:	ldr	r3, [r2, #0]
    24c6:	lsls	r3, r3, #24
    24c8:	bmi.n	24c4 <wait_for_cal+0x4>
    24ca:	ldr	r3, [r1, #0]
    24cc:	ands.w	r3, r3, #128	; 0x80
    24d0:	bne.n	24c4 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    24d2:	cpsid	i
	if (calibrating) {
    24d4:	ldr	r1, [pc, #208]	; (25a8 <wait_for_cal+0xe8>)
    24d6:	ldrb	r2, [r1, #0]
    24d8:	cmp	r2, #0
    24da:	beq.n	259c <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    24dc:	ldr	r2, [pc, #204]	; (25ac <wait_for_cal+0xec>)
    24de:	ldr	r0, [pc, #208]	; (25b0 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    24e0:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    24e2:	ldr	r4, [pc, #208]	; (25b4 <wait_for_cal+0xf4>)
    24e4:	ldr	r7, [r2, #0]
    24e6:	ldr	r6, [r0, #0]
    24e8:	ldr	r5, [r4, #0]
    24ea:	ldr	r4, [r2, #12]
    24ec:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    24ee:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    24f0:	adds	r2, #20
    24f2:	ldr	r0, [r0, #0]
    24f4:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    24f6:	ldr	r7, [pc, #192]	; (25b8 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    24f8:	add	r5, r6
    24fa:	add	r4, r5
    24fc:	add	r0, r4
    24fe:	add	r2, r0
    2500:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2504:	ldr	r6, [pc, #180]	; (25bc <wait_for_cal+0xfc>)
    2506:	ldr	r0, [pc, #184]	; (25c0 <wait_for_cal+0x100>)
    2508:	ldr	r5, [pc, #184]	; (25c4 <wait_for_cal+0x104>)
    250a:	ldr	r4, [pc, #188]	; (25c8 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    250c:	orr.w	r2, r2, #32768	; 0x8000
    2510:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2512:	ldr	r7, [r6, #0]
    2514:	ldr	r6, [r0, #0]
    2516:	ldr	r5, [r5, #0]
    2518:	ldr	r2, [pc, #176]	; (25cc <wait_for_cal+0x10c>)
    251a:	ldr	r4, [r4, #0]
    251c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    251e:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2520:	ldr	r0, [r0, #0]
    2522:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2524:	ldr	r7, [pc, #168]	; (25d0 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    2526:	add	r5, r6
    2528:	add	r4, r5
    252a:	add	r0, r4
    252c:	add	r2, r0
    252e:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2532:	ldr	r6, [pc, #160]	; (25d4 <wait_for_cal+0x114>)
    2534:	ldr	r0, [pc, #160]	; (25d8 <wait_for_cal+0x118>)
    2536:	ldr	r5, [pc, #164]	; (25dc <wait_for_cal+0x11c>)
    2538:	ldr	r4, [pc, #164]	; (25e0 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    253a:	orr.w	r2, r2, #32768	; 0x8000
    253e:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2540:	ldr	r7, [r6, #0]
    2542:	ldr	r6, [r0, #0]
    2544:	ldr	r5, [r5, #0]
    2546:	ldr	r2, [pc, #156]	; (25e4 <wait_for_cal+0x124>)
    2548:	ldr	r4, [r4, #0]
    254a:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    254c:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    254e:	ldr	r0, [r0, #0]
    2550:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2552:	ldr	r7, [pc, #148]	; (25e8 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    2554:	add	r5, r6
    2556:	add	r4, r5
    2558:	add	r0, r4
    255a:	add	r2, r0
    255c:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2560:	ldr	r6, [pc, #136]	; (25ec <wait_for_cal+0x12c>)
    2562:	ldr	r0, [pc, #140]	; (25f0 <wait_for_cal+0x130>)
    2564:	ldr	r5, [pc, #140]	; (25f4 <wait_for_cal+0x134>)
    2566:	ldr	r4, [pc, #144]	; (25f8 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2568:	orr.w	r2, r2, #32768	; 0x8000
    256c:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    256e:	ldr	r7, [r6, #0]
    2570:	ldr	r6, [r0, #0]
    2572:	ldr	r5, [r5, #0]
    2574:	ldr	r2, [pc, #132]	; (25fc <wait_for_cal+0x13c>)
    2576:	ldr	r4, [r4, #0]
    2578:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    257a:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    257c:	ldr	r0, [r0, #0]
    257e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    2580:	add	r5, r6
    2582:	add	r4, r5
    2584:	add	r0, r4
    2586:	add	r2, r0
    2588:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    258c:	ldr	r0, [pc, #112]	; (2600 <wait_for_cal+0x140>)
    258e:	orr.w	r2, r2, #32768	; 0x8000
    2592:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    2594:	strb	r3, [r1, #0]
	}
	__enable_irq();
    2596:	cpsie	i
}
    2598:	pop	{r4, r5, r6, r7}
    259a:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    259c:	cpsie	i
    259e:	bx	lr
    25a0:	.word	0x4003b024
    25a4:	.word	0x400bb024
    25a8:	.word	0x1fff1906
    25ac:	.word	0x4003b038
    25b0:	.word	0x4003b03c
    25b4:	.word	0x4003b040
    25b8:	.word	0x4003b02c
    25bc:	.word	0x4003b058
    25c0:	.word	0x4003b05c
    25c4:	.word	0x4003b060
    25c8:	.word	0x4003b064
    25cc:	.word	0x4003b06c
    25d0:	.word	0x4003b030
    25d4:	.word	0x400bb038
    25d8:	.word	0x400bb03c
    25dc:	.word	0x400bb040
    25e0:	.word	0x400bb044
    25e4:	.word	0x400bb04c
    25e8:	.word	0x400bb02c
    25ec:	.word	0x400bb058
    25f0:	.word	0x400bb05c
    25f4:	.word	0x400bb060
    25f8:	.word	0x400bb064
    25fc:	.word	0x400bb06c
    2600:	.word	0x400bb030

00002604 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2604:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2606:	ldr	r0, [pc, #164]	; (26ac <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2608:	ldr	r2, [pc, #164]	; (26b0 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    260a:	ldr	r3, [pc, #168]	; (26b4 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    260c:	ldr	r5, [pc, #168]	; (26b8 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    260e:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2610:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2612:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2614:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    2616:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2618:	ldr	r4, [pc, #160]	; (26bc <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    261a:	cmp	r3, #8
    261c:	beq.n	2680 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    261e:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2620:	ldr	r0, [pc, #156]	; (26c0 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2622:	ldr	r1, [pc, #160]	; (26c4 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2624:	beq.n	2696 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2626:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2628:	ite	eq
    262a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    262c:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    262e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2630:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2632:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2634:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2636:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2638:	ldr	r3, [pc, #140]	; (26c8 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    263a:	ldr	r1, [pc, #144]	; (26cc <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    263c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    263e:	ldr	r2, [pc, #144]	; (26d0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2640:	cbz	r3, 2672 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2642:	movs	r3, #1
    2644:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2646:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2648:	ldr	r3, [pc, #136]	; (26d4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    264a:	ldr	r1, [pc, #140]	; (26d8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    264c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    264e:	ldr	r2, [pc, #140]	; (26dc <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2650:	cmp	r3, #1
    2652:	bls.n	26a2 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2654:	cmp	r3, #4
    2656:	bls.n	2678 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2658:	cmp	r3, #8
    265a:	bls.n	269a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    265c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    265e:	ite	ls
    2660:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2662:	movhi	r3, #135	; 0x87
    2664:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2666:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2668:	ldr	r3, [pc, #116]	; (26e0 <analog_init+0xdc>)
    266a:	movs	r2, #1
    266c:	strb	r2, [r3, #0]
}
    266e:	pop	{r4, r5}
    2670:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2672:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2674:	str	r3, [r2, #0]
    2676:	b.n	2648 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2678:	movs	r3, #132	; 0x84
    267a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    267c:	str	r3, [r2, #0]
    267e:	b.n	2668 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2680:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2684:	ldr	r1, [pc, #60]	; (26c4 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2686:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2688:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    268a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    268c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    268e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2690:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2692:	str	r3, [r1, #0]
    2694:	b.n	2638 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2696:	movs	r2, #57	; 0x39
    2698:	b.n	268a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    269a:	movs	r3, #133	; 0x85
    269c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    269e:	str	r3, [r2, #0]
    26a0:	b.n	2668 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    26a2:	movs	r3, #128	; 0x80
    26a4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    26a6:	str	r3, [r2, #0]
    26a8:	b.n	2668 <analog_init+0x64>
    26aa:	nop
    26ac:	.word	0x40074000
    26b0:	.word	0x40074001
    26b4:	.word	0x1fff0c68
    26b8:	.word	0x4003b008
    26bc:	.word	0x4003b00c
    26c0:	.word	0x400bb008
    26c4:	.word	0x400bb00c
    26c8:	.word	0x1fff1909
    26cc:	.word	0x4003b020
    26d0:	.word	0x400bb020
    26d4:	.word	0x1fff0c69
    26d8:	.word	0x4003b024
    26dc:	.word	0x400bb024
    26e0:	.word	0x1fff1906

000026e4 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    26e4:	cmp	r0, #71	; 0x47
    26e6:	bhi.n	2748 <analogRead+0x64>
	channel = pin2sc1a[pin];
    26e8:	ldr	r3, [pc, #204]	; (27b8 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    26ea:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    26ee:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    26f0:	cmp	r6, #255	; 0xff
    26f2:	beq.n	274c <analogRead+0x68>

	if (calibrating) wait_for_cal();
    26f4:	ldr	r3, [pc, #196]	; (27bc <analogRead+0xd8>)
    26f6:	ldrb	r3, [r3, #0]
    26f8:	cmp	r3, #0
    26fa:	bne.n	2752 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    26fc:	lsls	r2, r6, #24
    26fe:	bmi.n	275a <analogRead+0x76>
#endif

	__disable_irq();
    2700:	cpsid	i
    2702:	ldr	r5, [pc, #188]	; (27c0 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2704:	ldr	r4, [pc, #188]	; (27c4 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    2706:	mov	r7, r5
    2708:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    270a:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    270c:	strb	r3, [r5, #0]
	__enable_irq();
    270e:	cpsie	i
	while (1) {
		__disable_irq();
    2710:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2712:	ldr	r3, [r4, #0]
    2714:	lsls	r3, r3, #24
    2716:	bmi.n	2732 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2718:	ldrb	r3, [r7, #0]
    271a:	cbnz	r3, 2724 <analogRead+0x40>
    271c:	b.n	2708 <analogRead+0x24>
    271e:	ldrb	r3, [r5, #0]
    2720:	cmp	r3, #0
    2722:	beq.n	2708 <analogRead+0x24>
		__enable_irq();
    2724:	cpsie	i
		yield();
    2726:	bl	3d38 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    272a:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    272c:	ldr	r3, [r4, #0]
    272e:	lsls	r0, r3, #24
    2730:	bpl.n	271e <analogRead+0x3a>
			result = ADC0_RA;
    2732:	ldr	r3, [pc, #148]	; (27c8 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2734:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2736:	movs	r2, #0
    2738:	strb	r2, [r5, #0]
			__enable_irq();
    273a:	cpsie	i
			result >>= analog_right_shift;
    273c:	ldr	r2, [pc, #140]	; (27cc <analogRead+0xe8>)
    273e:	ldrb	r0, [r2, #0]
    2740:	asr.w	r0, r3, r0
			return result;
    2744:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2748:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    274a:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    274c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    274e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2752:	bl	24c0 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2756:	lsls	r2, r6, #24
    2758:	bpl.n	2700 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    275a:	cpsid	i
    275c:	ldr	r5, [pc, #112]	; (27d0 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    275e:	ldr.w	r8, [pc, #124]	; 27dc <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2762:	ldr	r4, [pc, #112]	; (27d4 <analogRead+0xf0>)
    2764:	and.w	r7, r6, #64	; 0x40
    2768:	uxtb	r7, r7
    276a:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    276e:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2772:	cbz	r7, 27ac <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2774:	bic.w	r3, r3, #16
    2778:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    277c:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    277e:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2780:	ldr	r2, [pc, #76]	; (27d0 <analogRead+0xec>)
    2782:	strb	r3, [r5, #0]
	__enable_irq();
    2784:	cpsie	i
	while (1) {
		__disable_irq();
    2786:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2788:	ldr	r3, [r4, #0]
    278a:	lsls	r1, r3, #24
    278c:	bmi.n	27a8 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    278e:	ldrb	r3, [r2, #0]
    2790:	cbnz	r3, 279a <analogRead+0xb6>
    2792:	b.n	276e <analogRead+0x8a>
    2794:	ldrb	r3, [r5, #0]
    2796:	cmp	r3, #0
    2798:	beq.n	276e <analogRead+0x8a>
		__enable_irq();
    279a:	cpsie	i
		yield();
    279c:	bl	3d38 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    27a0:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    27a2:	ldr	r3, [r4, #0]
    27a4:	lsls	r3, r3, #24
    27a6:	bpl.n	2794 <analogRead+0xb0>
			result = ADC1_RA;
    27a8:	ldr	r3, [pc, #44]	; (27d8 <analogRead+0xf4>)
    27aa:	b.n	2734 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    27ac:	orr.w	r3, r3, #16
    27b0:	str.w	r3, [r8]
    27b4:	b.n	277c <analogRead+0x98>
    27b6:	nop
    27b8:	.word	0x000052e0
    27bc:	.word	0x1fff1906
    27c0:	.word	0x1fff1908
    27c4:	.word	0x4003b000
    27c8:	.word	0x4003b010
    27cc:	.word	0x1fff1905
    27d0:	.word	0x1fff1907
    27d4:	.word	0x400bb000
    27d8:	.word	0x400bb010
    27dc:	.word	0x400bb00c

000027e0 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    27e0:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    27e2:	ldr	r3, [pc, #68]	; (2828 <digitalWrite.part.1+0x48>)
    27e4:	ldr.w	r2, [r3, r0, lsl #3]
    27e8:	ldrb.w	r4, [r2, #640]	; 0x280
    27ec:	cbz	r4, 27fc <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    27ee:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    27f0:	cbz	r1, 2812 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    27f2:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    27f6:	ldr.w	r4, [sp], #4
    27fa:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    27fc:	add.w	r3, r3, r0, lsl #3
    2800:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2802:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2804:	cbnz	r1, 281c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2806:	bic.w	r2, r2, #2
    280a:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    280c:	ldr.w	r4, [sp], #4
    2810:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2812:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2816:	ldr.w	r4, [sp], #4
    281a:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    281c:	orr.w	r2, r2, #3
    2820:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2822:	ldr.w	r4, [sp], #4
    2826:	bx	lr
    2828:	.word	0x00005328

0000282c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    282c:	ldr	r2, [pc, #112]	; (28a0 <pinMode.part.2+0x74>)
    282e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2832:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2834:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2836:	beq.n	285c <pinMode.part.2+0x30>
    2838:	cmp	r1, #4
    283a:	beq.n	2874 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    283c:	ldr.w	r0, [r2, r0, lsl #3]
    2840:	movs	r2, #0
    2842:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2846:	cbz	r1, 2854 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2848:	cmp	r1, #2
    284a:	beq.n	288e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    284c:	cmp	r1, #3
    284e:	beq.n	2896 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2850:	str	r2, [r3, #0]
    2852:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2854:	mov.w	r2, #256	; 0x100
    2858:	str	r2, [r3, #0]
    285a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    285c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2860:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2864:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2868:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    286a:	ldr	r2, [r3, #0]
    286c:	bic.w	r2, r2, #32
    2870:	str	r2, [r3, #0]
    2872:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2874:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2878:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    287c:	movs	r0, #1
    287e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2882:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2884:	ldr	r2, [r3, #0]
    2886:	orr.w	r2, r2, #32
    288a:	str	r2, [r3, #0]
    288c:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    288e:	movw	r2, #259	; 0x103
    2892:	str	r2, [r3, #0]
    2894:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2896:	mov.w	r2, #258	; 0x102
    289a:	str	r2, [r3, #0]
    289c:	bx	lr
    289e:	nop
    28a0:	.word	0x00005328

000028a4 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    28a4:	push	{r4, r5}
	RTC_SR = 0;
    28a6:	ldr	r3, [pc, #20]	; (28bc <rtc_set+0x18>)
	RTC_TPR = 0;
    28a8:	ldr	r5, [pc, #20]	; (28c0 <rtc_set+0x1c>)
	RTC_TSR = t;
    28aa:	ldr	r4, [pc, #24]	; (28c4 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    28ac:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    28ae:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    28b0:	str	r2, [r3, #0]
	RTC_TPR = 0;
    28b2:	str	r2, [r5, #0]
	RTC_TSR = t;
    28b4:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    28b6:	str	r1, [r3, #0]
}
    28b8:	pop	{r4, r5}
    28ba:	bx	lr
    28bc:	.word	0x4003d014
    28c0:	.word	0x4003d004
    28c4:	.word	0x4003d000

000028c8 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    28c8:	cmp	r0, #63	; 0x3f
    28ca:	bhi.n	28d0 <digitalWrite+0x8>
    28cc:	b.w	27e0 <digitalWrite.part.1>
    28d0:	bx	lr
    28d2:	nop

000028d4 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    28d4:	cmp	r0, #63	; 0x3f
    28d6:	bhi.n	28e6 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    28d8:	ldr	r3, [pc, #16]	; (28ec <digitalRead+0x18>)
    28da:	ldr.w	r3, [r3, r0, lsl #3]
    28de:	ldrb.w	r0, [r3, #512]	; 0x200
    28e2:	uxtb	r0, r0
    28e4:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    28e6:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    28e8:	bx	lr
    28ea:	nop
    28ec:	.word	0x00005328

000028f0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    28f0:	cmp	r0, #63	; 0x3f
    28f2:	bhi.n	28f8 <pinMode+0x8>
    28f4:	b.w	282c <pinMode.part.2>
    28f8:	bx	lr
    28fa:	nop

000028fc <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    28fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2900:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2902:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2904:	ldr	r7, [pc, #136]	; (2990 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2906:	ldr	r3, [pc, #140]	; (2994 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2908:	ldr	r2, [pc, #140]	; (2998 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    290a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    290c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    290e:	ldr	r2, [r2, #0]
	__enable_irq();
    2910:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2912:	lsls	r2, r2, #5
    2914:	bpl.n	291c <delay+0x20>
    2916:	cmp	r3, #50	; 0x32
    2918:	it	hi
    291a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    291c:	cbz	r5, 298c <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    291e:	rsb	r3, r3, #179200	; 0x2bc00
    2922:	addw	r3, r3, #799	; 0x31f
    2926:	ldr	r6, [pc, #116]	; (299c <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2928:	ldr.w	r9, [pc, #104]	; 2994 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    292c:	ldr.w	r8, [pc, #104]	; 2998 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2930:	lsrs	r3, r3, #2
    2932:	mov.w	r2, #1000	; 0x3e8
    2936:	umull	r1, r3, r6, r3
    293a:	mul.w	r4, r2, r4
    293e:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2942:	cpsid	i
	current = SYST_CVR;
    2944:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2948:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    294a:	ldr.w	lr, [r8]
	__enable_irq();
    294e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2950:	rsb	r3, r1, #179200	; 0x2bc00
    2954:	addw	r3, r3, #799	; 0x31f
    2958:	lsrs	r3, r3, #2
    295a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    295e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2962:	rsb	r3, r4, r3, lsr #2
    2966:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    296a:	beq.n	2972 <delay+0x76>
    296c:	cmp	r1, #50	; 0x32
    296e:	it	hi
    2970:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2972:	mla	r3, r0, r2, r3
    2976:	cmp.w	r3, #1000	; 0x3e8
    297a:	bcc.n	2986 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    297c:	subs	r5, #1
    297e:	beq.n	298c <delay+0x90>
				start += 1000;
    2980:	add.w	r4, r4, #1000	; 0x3e8
    2984:	b.n	2942 <delay+0x46>
			}
			yield();
    2986:	bl	3d38 <yield>
		}
    298a:	b.n	2942 <delay+0x46>
    298c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2990:	.word	0x1fff190c
    2994:	.word	0xe000e018
    2998:	.word	0xe000ed04
    299c:	.word	0x16c16c17

000029a0 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    29a0:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    29a2:	ldr	r3, [pc, #312]	; (2adc <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    29a4:	ldr	r0, [pc, #312]	; (2ae0 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    29a6:	ldr.w	ip, [pc, #348]	; 2b04 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    29aa:	ldr	r4, [pc, #312]	; (2ae4 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    29ac:	ldr	r1, [pc, #312]	; (2ae8 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    29ae:	ldr.w	lr, [pc, #344]	; 2b08 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    29b2:	ldr	r6, [pc, #312]	; (2aec <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    29b4:	ldr	r5, [pc, #312]	; (2af0 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    29b6:	ldr	r7, [pc, #316]	; (2af4 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    29b8:	mov.w	r2, #134217728	; 0x8000000
    29bc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    29be:	mov.w	r2, #268435456	; 0x10000000
    29c2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    29c4:	mov.w	r2, #536870912	; 0x20000000
    29c8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    29ca:	mov.w	r2, #1073741824	; 0x40000000
    29ce:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    29d0:	mov.w	r2, #2147483648	; 0x80000000
    29d4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    29d6:	movs	r2, #0
    29d8:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    29da:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    29dc:	movw	r0, #61439	; 0xefff
    29e0:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    29e4:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    29e8:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    29ea:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    29ee:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    29f0:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    29f2:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    29f4:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    29f8:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    29fa:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    29fe:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2a00:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2a04:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2a06:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2a0a:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2a0e:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2a12:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2a16:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2a1a:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2a1c:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2a20:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2a22:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2a24:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2a26:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2a2a:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2a2c:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2a2e:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2a30:	ldr	r4, [pc, #196]	; (2af8 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2a32:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2a34:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2a36:	movs	r1, #9
    2a38:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2a3a:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2a3e:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2a42:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2a44:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2a46:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2a48:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2a4a:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2a4c:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2a4e:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2a52:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2a56:	add.w	r7, r7, #520192	; 0x7f000
    2a5a:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2a5c:	addw	r4, r4, #2044	; 0x7fc
    2a60:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2a62:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2a64:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2a66:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2a68:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2a6c:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2a6e:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2a72:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2a76:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2a78:	sub.w	r4, r4, #460800	; 0x70800
    2a7c:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2a80:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2a82:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2a84:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2a88:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2a8a:	ldr	r0, [pc, #112]	; (2afc <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2a8c:	orr.w	r1, r1, #512	; 0x200
    2a90:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2a92:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2a94:	ldr	r4, [pc, #104]	; (2b00 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2a96:	add.w	lr, lr, #65280	; 0xff00
    2a9a:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2a9e:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2aa2:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2aa6:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2aaa:	orr.w	r1, r1, #33554432	; 0x2000000
    2aae:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2ab0:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2ab4:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2ab8:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2aba:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2abc:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    2abe:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2ac0:	str	r2, [r4, #0]
#endif
	analog_init();
    2ac2:	bl	2604 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2ac6:	movs	r0, #25
    2ac8:	bl	28fc <delay>
	usb_init();
    2acc:	bl	3c68 <usb_init>
	delay(275);
    2ad0:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2ad4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2ad8:	b.w	28fc <delay>
    2adc:	.word	0xe000e104
    2ae0:	.word	0x40038004
    2ae4:	.word	0x40038014
    2ae8:	.word	0x4003801c
    2aec:	.word	0x40038024
    2af0:	.word	0x4003802c
    2af4:	.word	0x40038034
    2af8:	.word	0x40038000
    2afc:	.word	0x40048004
    2b00:	.word	0x400c9000
    2b04:	.word	0x40038008
    2b08:	.word	0x4003800c

00002b0c <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2b0c:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2b0e:	ldr	r3, [pc, #56]	; (2b48 <sysex_byte+0x3c>)
    2b10:	ldr	r4, [pc, #56]	; (2b4c <sysex_byte+0x40>)
    2b12:	ldr	r3, [r3, #0]
    2b14:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2b16:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2b18:	cbz	r3, 2b3e <sysex_byte+0x32>
    2b1a:	cmp.w	r1, #290	; 0x122
    2b1e:	bcs.n	2b2c <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2b20:	ldr	r2, [pc, #44]	; (2b50 <sysex_byte+0x44>)
    2b22:	adds	r3, r1, #1
    2b24:	strb	r5, [r2, r1]
    2b26:	uxth	r3, r3
    2b28:	strh	r3, [r4, #0]
	}
}
    2b2a:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2b2c:	movs	r2, #0
    2b2e:	ldr	r0, [pc, #32]	; (2b50 <sysex_byte+0x44>)
    2b30:	blx	r3
    2b32:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2b34:	ldr	r2, [pc, #24]	; (2b50 <sysex_byte+0x44>)
    2b36:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2b38:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2b3a:	strh	r3, [r4, #0]
	}
}
    2b3c:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2b3e:	cmp.w	r1, #290	; 0x122
    2b42:	bcc.n	2b20 <sysex_byte+0x14>
    2b44:	pop	{r3, r4, r5, pc}
    2b46:	nop
    2b48:	.word	0x1fff1934
    2b4c:	.word	0x1fff1dca
    2b50:	.word	0x1fff1dd0

00002b54 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2b54:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2b58:	ldr	r6, [pc, #132]	; (2be0 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2b5a:	ldr	r7, [pc, #136]	; (2be4 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2b5c:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2b5e:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2b60:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2b62:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2b64:	cbz	r1, 2b94 <usb_midi_write_packed+0x40>
    2b66:	ldr	r5, [pc, #128]	; (2be8 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2b68:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2b6a:	add.w	r2, r1, r3, lsl #2
    2b6e:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2b70:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2b72:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2b74:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2b78:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2b7a:	bhi.n	2b86 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2b7c:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2b7e:	movs	r3, #0
    2b80:	strb	r3, [r7, #0]
    2b82:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2b86:	movs	r3, #64	; 0x40
    2b88:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2b8a:	movs	r0, #4
    2b8c:	bl	3234 <usb_tx>
		tx_packet = NULL;
    2b90:	str	r4, [r6, #0]
    2b92:	b.n	2b7e <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2b94:	ldr.w	r9, [pc, #84]	; 2bec <usb_midi_write_packed+0x98>
    2b98:	ldrb.w	r3, [r9]
    2b9c:	cmp	r3, #0
    2b9e:	beq.n	2b82 <usb_midi_write_packed+0x2e>
    2ba0:	ldr	r5, [pc, #68]	; (2be8 <usb_midi_write_packed+0x94>)
    2ba2:	movw	r4, #48001	; 0xbb81
    2ba6:	b.n	2bba <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2ba8:	subs	r4, #1
    2baa:	beq.n	2bd2 <usb_midi_write_packed+0x7e>
    2bac:	ldrb	r3, [r5, #0]
    2bae:	cbnz	r3, 2bd2 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    2bb0:	bl	3d38 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2bb4:	ldrb.w	r3, [r9]
    2bb8:	cbz	r3, 2bda <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2bba:	movs	r0, #4
    2bbc:	bl	3120 <usb_tx_packet_count>
    2bc0:	cmp	r0, #5
    2bc2:	bhi.n	2ba8 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2bc4:	bl	3058 <usb_malloc>
    2bc8:	mov	r1, r0
    2bca:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2bcc:	cmp	r0, #0
    2bce:	beq.n	2ba8 <usb_midi_write_packed+0x54>
    2bd0:	b.n	2b68 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    2bd2:	movs	r3, #1
    2bd4:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2bd6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2bda:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2bde:	nop
    2be0:	.word	0x1fff1950
    2be4:	.word	0x1fff1924
    2be8:	.word	0x1fff1954
    2bec:	.word	0x1fff1a60

00002bf0 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    2bf0:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    2bf2:	ldr	r3, [pc, #32]	; (2c14 <usb_midi_flush_output+0x24>)
    2bf4:	ldrb	r4, [r3, #0]
    2bf6:	cbnz	r4, 2c02 <usb_midi_flush_output+0x12>
    2bf8:	ldr	r5, [pc, #28]	; (2c18 <usb_midi_flush_output+0x28>)
    2bfa:	ldr	r1, [r5, #0]
    2bfc:	cbz	r1, 2c02 <usb_midi_flush_output+0x12>
    2bfe:	ldrh	r3, [r1, #2]
    2c00:	cbnz	r3, 2c04 <usb_midi_flush_output+0x14>
    2c02:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2c04:	lsls	r3, r3, #2
    2c06:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2c08:	movs	r0, #4
    2c0a:	bl	3234 <usb_tx>
		tx_packet = NULL;
    2c0e:	str	r4, [r5, #0]
    2c10:	pop	{r3, r4, r5, pc}
    2c12:	nop
    2c14:	.word	0x1fff1924
    2c18:	.word	0x1fff1950

00002c1c <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2c1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2c20:	ldr	r6, [pc, #692]	; (2ed8 <usb_midi_read+0x2bc>)
    2c22:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2c24:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2c26:	cmp	r3, #0
    2c28:	beq.w	2d50 <usb_midi_read+0x134>
    2c2c:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2c2e:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2c30:	lsrs	r1, r2, #2
    2c32:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    2c36:	adds	r2, #4
	if (index < rx_packet->len) {
    2c38:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2c3a:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2c3c:	bcs.n	2cc4 <usb_midi_read+0xa8>
		rx_packet->index = index;
    2c3e:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2c40:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2c44:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2c48:	ldr	r1, [pc, #656]	; (2edc <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2c4a:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2c4e:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    2c52:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2c56:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2c58:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2c5c:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2c5e:	bls.n	2c96 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2c60:	subs	r3, r6, #2
    2c62:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2c64:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2c68:	bls.n	2d08 <usb_midi_read+0xec>
    2c6a:	cmp	r6, #5
    2c6c:	beq.n	2d00 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2c6e:	cmp	r6, #4
    2c70:	beq.w	2fbc <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2c74:	subs	r3, r6, #5
    2c76:	cmp	r3, #2
    2c78:	bls.n	2d7a <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    2c7a:	cmp	r6, #15
    2c7c:	bne.n	2c9c <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    2c7e:	cmp	r0, #247	; 0xf7
    2c80:	bhi.n	2d08 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    2c82:	cmp	r0, #240	; 0xf0
    2c84:	beq.n	2c8c <usb_midi_read+0x70>
    2c86:	ldr	r3, [pc, #600]	; (2ee0 <usb_midi_read+0x2c4>)
    2c88:	ldrh	r3, [r3, #0]
    2c8a:	cbz	r3, 2c9c <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2c8c:	bl	2b0c <sysex_byte>
		}
	}
	return 0;
    2c90:	movs	r0, #0
    2c92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    2c96:	cbz	r7, 2ca2 <usb_midi_read+0x86>
    2c98:	cmp	r5, r7
    2c9a:	beq.n	2ca2 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2c9c:	movs	r0, #0
    2c9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2ca2:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2ca4:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2ca8:	beq.w	2dba <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2cac:	cmp	r6, #9
    2cae:	beq.n	2cd4 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    2cb0:	cmp	r6, #10
    2cb2:	bne.w	2dde <usb_midi_read+0x1c2>
    2cb6:	cmp	r3, #10
    2cb8:	bne.n	2c9c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    2cba:	ldr	r3, [pc, #552]	; (2ee4 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2cbc:	ldr	r2, [pc, #552]	; (2ee8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    2cbe:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2cc0:	movs	r1, #160	; 0xa0
    2cc2:	b.n	2dc8 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    2cc4:	mov	r0, r3
    2cc6:	bl	3098 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2cca:	movs	r0, #5
    2ccc:	bl	30e4 <usb_rx>
    2cd0:	str	r0, [r6, #0]
    2cd2:	b.n	2c40 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2cd4:	cmp	r3, #9
    2cd6:	bne.n	2c9c <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    2cd8:	lsrs	r7, r4, #24
    2cda:	beq.w	2fd4 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2cde:	ldr	r3, [pc, #524]	; (2eec <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2ce0:	ldr	r2, [pc, #516]	; (2ee8 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    2ce2:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2ce4:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2ce6:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2cea:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2cec:	uxtb	r5, r5
    2cee:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2cf0:	cmp	r3, #0
    2cf2:	beq.w	2e30 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2cf6:	mov	r2, r4
    2cf8:	mov	r1, r6
    2cfa:	mov	r0, r5
    2cfc:	blx	r3
    2cfe:	b.n	2e30 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2d00:	cmp	r0, #240	; 0xf0
    2d02:	bls.n	2d8c <usb_midi_read+0x170>
    2d04:	cmp	r0, #247	; 0xf7
    2d06:	beq.n	2d8c <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    2d08:	subs	r0, #241	; 0xf1
    2d0a:	cmp	r0, #14
    2d0c:	bhi.n	2c9c <usb_midi_read+0x80>
    2d0e:	add	r3, pc, #4	; (adr r3, 2d14 <usb_midi_read+0xf8>)
    2d10:	ldr.w	pc, [r3, r0, lsl #2]
    2d14:	.word	0x00002ecb
    2d18:	.word	0x00002eaf
    2d1c:	.word	0x00002e9d
    2d20:	.word	0x00002c9d
    2d24:	.word	0x00002c9d
    2d28:	.word	0x00002e8f
    2d2c:	.word	0x00002c9d
    2d30:	.word	0x00002f6f
    2d34:	.word	0x00002c9d
    2d38:	.word	0x00002f39
    2d3c:	.word	0x00002f53
    2d40:	.word	0x00002e77
    2d44:	.word	0x00002c9d
    2d48:	.word	0x00002e5f
    2d4c:	.word	0x00002e43
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2d50:	ldr	r3, [pc, #412]	; (2ef0 <usb_midi_read+0x2d4>)
    2d52:	ldrb	r3, [r3, #0]
    2d54:	cmp	r3, #0
    2d56:	beq.n	2c9c <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2d58:	movs	r0, #5
    2d5a:	bl	30e4 <usb_rx>
    2d5e:	mov	r3, r0
    2d60:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    2d62:	cmp	r0, #0
    2d64:	beq.n	2c9c <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    2d66:	ldrh	r5, [r0, #0]
    2d68:	cmp	r5, #0
    2d6a:	bne.w	2c2e <usb_midi_read+0x12>
			usb_free(rx_packet);
    2d6e:	bl	3098 <usb_free>
			rx_packet = NULL;
    2d72:	str	r5, [r6, #0]
			return 0;
    2d74:	mov	r0, r5
    2d76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    2d7a:	bl	2b0c <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    2d7e:	ubfx	r0, r4, #16, #8
    2d82:	bl	2b0c <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    2d86:	cmp	r6, #7
    2d88:	bne.n	2d90 <usb_midi_read+0x174>
    2d8a:	lsrs	r0, r4, #24
    2d8c:	bl	2b0c <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    2d90:	ldr	r3, [pc, #332]	; (2ee0 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2d92:	ldr	r2, [pc, #352]	; (2ef4 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2d94:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    2d96:	ldr	r0, [pc, #352]	; (2ef8 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2d98:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2d9a:	ldr	r5, [pc, #352]	; (2efc <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2d9c:	ldr	r2, [pc, #328]	; (2ee8 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    2d9e:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2da0:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2da2:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2da4:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2da6:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2da8:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2daa:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    2dac:	cbz	r4, 2df2 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    2dae:	movs	r2, #1
    2db0:	ldr	r0, [pc, #332]	; (2f00 <usb_midi_read+0x2e4>)
    2db2:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2db4:	movs	r0, #1
    2db6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2dba:	cmp	r3, #8
    2dbc:	bne.w	2c9c <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    2dc0:	ldr	r3, [pc, #320]	; (2f04 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2dc2:	ldr	r2, [pc, #292]	; (2ee8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    2dc4:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2dc6:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2dc8:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2dcc:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2dce:	uxtb	r5, r5
    2dd0:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    2dd2:	cbz	r3, 2e30 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2dd4:	mov	r0, r5
    2dd6:	mov	r2, r4
    2dd8:	mov	r1, r6
    2dda:	blx	r3
    2ddc:	b.n	2e30 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    2dde:	cmp	r6, #11
    2de0:	bne.n	2e06 <usb_midi_read+0x1ea>
    2de2:	cmp	r3, #11
    2de4:	bne.w	2c9c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    2de8:	ldr	r3, [pc, #284]	; (2f08 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2dea:	ldr	r2, [pc, #252]	; (2ee8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    2dec:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2dee:	movs	r1, #176	; 0xb0
    2df0:	b.n	2dc8 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    2df2:	ldr	r3, [pc, #280]	; (2f0c <usb_midi_read+0x2f0>)
    2df4:	ldr	r3, [r3, #0]
    2df6:	cmp	r3, #0
    2df8:	beq.w	2ff2 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    2dfc:	ldr	r0, [pc, #256]	; (2f00 <usb_midi_read+0x2e4>)
    2dfe:	blx	r3
		}
		return 1;
    2e00:	movs	r0, #1
    2e02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    2e06:	cmp	r6, #12
    2e08:	bne.w	300c <usb_midi_read+0x3f0>
    2e0c:	cmp	r3, #12
    2e0e:	bne.w	2c9c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2e12:	ldr	r3, [pc, #252]	; (2f10 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2e14:	ldr	r2, [pc, #208]	; (2ee8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    2e16:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2e18:	movs	r1, #192	; 0xc0
    2e1a:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2e1c:	uxtb	r5, r5
    2e1e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2e22:	cmp	r3, #0
    2e24:	beq.w	2fb8 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2e28:	mov	r0, r5
    2e2a:	mov	r1, r6
    2e2c:	lsrs	r4, r4, #24
    2e2e:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2e30:	ldr	r1, [pc, #224]	; (2f14 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2e32:	ldr	r2, [pc, #196]	; (2ef8 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2e34:	ldr	r3, [pc, #196]	; (2efc <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2e36:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2e38:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    2e3a:	strb	r4, [r3, #0]
		return 1;
    2e3c:	movs	r0, #1
    2e3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2e42:	ldr	r3, [pc, #212]	; (2f18 <usb_midi_read+0x2fc>)
    2e44:	ldr	r3, [r3, #0]
    2e46:	cmp	r3, #0
    2e48:	beq.w	2ff8 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2e4c:	blx	r3
    2e4e:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2e52:	ldr	r3, [pc, #148]	; (2ee8 <usb_midi_read+0x2cc>)
    2e54:	uxtb	r5, r5
    2e56:	lsrs	r4, r4, #24
    2e58:	strb.w	r8, [r3]
		goto return_message;
    2e5c:	b.n	2e30 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    2e5e:	ldr	r3, [pc, #188]	; (2f1c <usb_midi_read+0x300>)
    2e60:	ldr	r3, [r3, #0]
    2e62:	cmp	r3, #0
    2e64:	bne.n	2e4c <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2e66:	ldr	r3, [pc, #184]	; (2f20 <usb_midi_read+0x304>)
    2e68:	ldr	r3, [r3, #0]
    2e6a:	cbz	r3, 2e96 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2e6c:	movs	r0, #254	; 0xfe
    2e6e:	blx	r3
    2e70:	ubfx	r6, r4, #16, #8
    2e74:	b.n	2e52 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2e76:	ldr	r3, [pc, #172]	; (2f24 <usb_midi_read+0x308>)
    2e78:	ldr	r3, [r3, #0]
    2e7a:	cmp	r3, #0
    2e7c:	bne.n	2e4c <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    2e7e:	ldr	r3, [pc, #160]	; (2f20 <usb_midi_read+0x304>)
    2e80:	ldr	r3, [r3, #0]
    2e82:	cbz	r3, 2e96 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2e84:	movs	r0, #252	; 0xfc
    2e86:	blx	r3
    2e88:	ubfx	r6, r4, #16, #8
    2e8c:	b.n	2e52 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    2e8e:	ldr	r3, [pc, #152]	; (2f28 <usb_midi_read+0x30c>)
    2e90:	ldr	r3, [r3, #0]
    2e92:	cmp	r3, #0
    2e94:	bne.n	2e4c <usb_midi_read+0x230>
    2e96:	ubfx	r6, r4, #16, #8
    2e9a:	b.n	2e52 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2e9c:	ldr	r3, [pc, #140]	; (2f2c <usb_midi_read+0x310>)
    2e9e:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    2ea0:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2ea4:	cmp	r3, #0
    2ea6:	beq.n	2e52 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2ea8:	mov	r0, r6
    2eaa:	blx	r3
    2eac:	b.n	2e52 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    2eae:	ldr	r3, [pc, #128]	; (2f30 <usb_midi_read+0x314>)
    2eb0:	ldr	r2, [r3, #0]
    2eb2:	cmp	r2, #0
    2eb4:	beq.n	2e96 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2eb6:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2eb8:	lsrs	r3, r4, #17
    2eba:	and.w	r0, r6, #127	; 0x7f
    2ebe:	and.w	r3, r3, #16256	; 0x3f80
    2ec2:	orrs	r0, r3
    2ec4:	uxtb	r6, r6
    2ec6:	blx	r2
    2ec8:	b.n	2e52 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2eca:	ldr	r3, [pc, #104]	; (2f34 <usb_midi_read+0x318>)
    2ecc:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    2ece:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2ed2:	cmp	r3, #0
    2ed4:	bne.n	2ea8 <usb_midi_read+0x28c>
    2ed6:	b.n	2e52 <usb_midi_read+0x236>
    2ed8:	.word	0x1fff195c
    2edc:	.word	0x1fff1dce
    2ee0:	.word	0x1fff1dca
    2ee4:	.word	0x1fff1938
    2ee8:	.word	0x1fff1dc8
    2eec:	.word	0x1fff196c
    2ef0:	.word	0x1fff1a60
    2ef4:	.word	0x1fff1934
    2ef8:	.word	0x1fff1dcc
    2efc:	.word	0x1fff1dcd
    2f00:	.word	0x1fff1dd0
    2f04:	.word	0x1fff1964
    2f08:	.word	0x1fff1968
    2f0c:	.word	0x1fff194c
    2f10:	.word	0x1fff1928
    2f14:	.word	0x1fff1dcf
    2f18:	.word	0x1fff1914
    2f1c:	.word	0x1fff1918
    2f20:	.word	0x1fff191c
    2f24:	.word	0x1fff1958
    2f28:	.word	0x1fff1948
    2f2c:	.word	0x1fff1960
    2f30:	.word	0x1fff1930
    2f34:	.word	0x1fff1944
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2f38:	ldr	r3, [pc, #252]	; (3038 <usb_midi_read+0x41c>)
    2f3a:	ldr	r3, [r3, #0]
    2f3c:	cmp	r3, #0
    2f3e:	bne.n	2e4c <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2f40:	ldr	r3, [pc, #248]	; (303c <usb_midi_read+0x420>)
    2f42:	ldr	r3, [r3, #0]
    2f44:	cmp	r3, #0
    2f46:	beq.n	2e96 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2f48:	movs	r0, #250	; 0xfa
    2f4a:	blx	r3
    2f4c:	ubfx	r6, r4, #16, #8
    2f50:	b.n	2e52 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2f52:	ldr	r3, [pc, #236]	; (3040 <usb_midi_read+0x424>)
    2f54:	ldr	r3, [r3, #0]
    2f56:	cmp	r3, #0
    2f58:	bne.w	2e4c <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2f5c:	ldr	r3, [pc, #220]	; (303c <usb_midi_read+0x420>)
    2f5e:	ldr	r3, [r3, #0]
    2f60:	cmp	r3, #0
    2f62:	beq.n	2e96 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2f64:	movs	r0, #251	; 0xfb
    2f66:	blx	r3
    2f68:	ubfx	r6, r4, #16, #8
    2f6c:	b.n	2e52 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2f6e:	ldr	r3, [pc, #212]	; (3044 <usb_midi_read+0x428>)
    2f70:	ldr	r3, [r3, #0]
    2f72:	cmp	r3, #0
    2f74:	bne.w	2e4c <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2f78:	ldr	r3, [pc, #192]	; (303c <usb_midi_read+0x420>)
    2f7a:	ldr	r3, [r3, #0]
    2f7c:	cmp	r3, #0
    2f7e:	beq.n	2e96 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2f80:	movs	r0, #248	; 0xf8
    2f82:	blx	r3
    2f84:	ubfx	r6, r4, #16, #8
    2f88:	b.n	2e52 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2f8a:	cmp	r3, #14
    2f8c:	bne.w	2c9c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2f90:	ldr	r2, [pc, #180]	; (3048 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2f92:	ldr	r3, [pc, #184]	; (304c <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2f94:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2f96:	movs	r1, #224	; 0xe0
    2f98:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    2f9a:	cmp	r2, #0
    2f9c:	beq.n	302e <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    2f9e:	lsrs	r6, r4, #16
    2fa0:	lsrs	r1, r4, #17
    2fa2:	and.w	r3, r6, #127	; 0x7f
    2fa6:	and.w	r1, r1, #16256	; 0x3f80
    2faa:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    2fac:	uxtb	r5, r5
    2fae:	sub.w	r1, r1, #8192	; 0x2000
    2fb2:	mov	r0, r5
    2fb4:	blx	r2
    2fb6:	uxtb	r6, r6
    2fb8:	lsrs	r4, r4, #24
    2fba:	b.n	2e30 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    2fbc:	bl	2b0c <sysex_byte>
		sysex_byte(n >> 16);
    2fc0:	ubfx	r0, r4, #16, #8
    2fc4:	bl	2b0c <sysex_byte>
		sysex_byte(n >> 24);
    2fc8:	lsrs	r0, r4, #24
    2fca:	bl	2b0c <sysex_byte>
		return 0;
    2fce:	movs	r0, #0
    2fd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2fd4:	ldr	r3, [pc, #120]	; (3050 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2fd6:	ldr	r2, [pc, #116]	; (304c <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    2fd8:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2fda:	movs	r1, #128	; 0x80
    2fdc:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2fde:	uxtb	r5, r5
    2fe0:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2fe4:	cbz	r3, 3008 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2fe6:	mov	r1, r6
    2fe8:	mov	r0, r5
    2fea:	mov	r2, r7
    2fec:	blx	r3
    2fee:	mov	r4, r7
    2ff0:	b.n	2e30 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2ff2:	movs	r0, #1
    2ff4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2ff8:	ldr	r3, [pc, #64]	; (303c <usb_midi_read+0x420>)
    2ffa:	ldr	r3, [r3, #0]
    2ffc:	cmp	r3, #0
    2ffe:	beq.w	2e96 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    3002:	movs	r0, #255	; 0xff
    3004:	blx	r3
    3006:	b.n	2e96 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    3008:	mov	r4, r3
    300a:	b.n	2e30 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    300c:	cmp	r6, #13
    300e:	bne.n	2f8a <usb_midi_read+0x36e>
    3010:	cmp	r3, #13
    3012:	bne.w	2c9c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    3016:	ldr	r3, [pc, #60]	; (3054 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    3018:	ldr	r2, [pc, #48]	; (304c <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    301a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    301c:	movs	r1, #208	; 0xd0
    301e:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    3020:	uxtb	r5, r5
    3022:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    3026:	cmp	r3, #0
    3028:	bne.w	2e28 <usb_midi_read+0x20c>
    302c:	b.n	2fb8 <usb_midi_read+0x39c>
    302e:	ubfx	r6, r4, #16, #8
    3032:	uxtb	r5, r5
    3034:	lsrs	r4, r4, #24
    3036:	b.n	2e30 <usb_midi_read+0x214>
    3038:	.word	0x1fff1940
    303c:	.word	0x1fff191c
    3040:	.word	0x1fff1920
    3044:	.word	0x1fff1910
    3048:	.word	0x1fff192c
    304c:	.word	0x1fff1dc8
    3050:	.word	0x1fff1964
    3054:	.word	0x1fff193c

00003058 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3058:	cpsid	i
	avail = usb_buffer_available;
    305a:	ldr	r0, [pc, #52]	; (3090 <usb_malloc+0x38>)
    305c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    305e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    3062:	cmp	r3, #29
    3064:	bgt.n	3088 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    3066:	mov.w	r1, #2147483648	; 0x80000000
    306a:	lsrs	r1, r3
    306c:	bic.w	r2, r2, r1
    3070:	str	r2, [r0, #0]
	__enable_irq();
    3072:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3074:	ldr	r0, [pc, #28]	; (3094 <usb_malloc+0x3c>)
    3076:	add.w	r3, r3, r3, lsl #3
    307a:	lsls	r3, r3, #3
    307c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    307e:	movs	r1, #0
    3080:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    3082:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    3084:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    3086:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3088:	cpsie	i
		return NULL;
    308a:	movs	r0, #0
    308c:	bx	lr
    308e:	nop
    3090:	.word	0x1fff0c6c
    3094:	.word	0x1fff03d0

00003098 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3098:	ldr	r3, [pc, #52]	; (30d0 <usb_free+0x38>)
    309a:	ldr	r2, [pc, #56]	; (30d4 <usb_free+0x3c>)
    309c:	subs	r3, r0, r3
    309e:	umull	r2, r3, r2, r3
    30a2:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    30a4:	cmp	r3, #29
    30a6:	bhi.n	30c2 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    30a8:	ldr	r2, [pc, #44]	; (30d8 <usb_free+0x40>)
    30aa:	ldrb	r2, [r2, #0]
    30ac:	cbnz	r2, 30c4 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    30ae:	cpsid	i
	usb_buffer_available |= mask;
    30b0:	ldr	r0, [pc, #40]	; (30dc <usb_free+0x44>)
    30b2:	mov.w	r1, #2147483648	; 0x80000000
    30b6:	ldr	r2, [r0, #0]
    30b8:	lsr.w	r3, r1, r3
    30bc:	orrs	r2, r3
    30be:	str	r2, [r0, #0]
	__enable_irq();
    30c0:	cpsie	i
    30c2:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    30c4:	ldr	r2, [pc, #24]	; (30e0 <usb_free+0x48>)
    30c6:	ldrb	r2, [r2, #0]
    30c8:	cmp	r2, #0
    30ca:	beq.n	30ae <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    30cc:	b.w	314c <usb_rx_memory>
    30d0:	.word	0x1fff03d0
    30d4:	.word	0x38e38e39
    30d8:	.word	0x1fff1a55
    30dc:	.word	0x1fff0c6c
    30e0:	.word	0x1fff1a60

000030e4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    30e4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    30e6:	cmp	r3, #4
    30e8:	bhi.n	3114 <usb_rx+0x30>
	__disable_irq();
    30ea:	cpsid	i
	ret = rx_first[endpoint];
    30ec:	ldr	r1, [pc, #40]	; (3118 <usb_rx+0x34>)
    30ee:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    30f2:	cbz	r0, 3110 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    30f4:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    30f6:	ldr	r4, [pc, #36]	; (311c <usb_rx+0x38>)
    30f8:	ldrh	r5, [r0, #0]
    30fa:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    30fe:	ldr	r6, [r0, #4]
    3100:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    3104:	subs	r2, r2, r5
    3106:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    310a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    310c:	pop	{r4, r5, r6}
    310e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    3110:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3112:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3114:	movs	r0, #0
    3116:	bx	lr
    3118:	.word	0x1fff19cc
    311c:	.word	0x1fff1ef4

00003120 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    3120:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3122:	cmp	r0, #4
    3124:	bhi.n	313e <usb_tx_packet_count+0x1e>
	__disable_irq();
    3126:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3128:	ldr	r3, [pc, #28]	; (3148 <usb_tx_packet_count+0x28>)
    312a:	ldr.w	r3, [r3, r0, lsl #2]
    312e:	cbz	r3, 3142 <usb_tx_packet_count+0x22>
    3130:	movs	r0, #0
    3132:	ldr	r3, [r3, #4]
    3134:	adds	r0, #1
    3136:	cmp	r3, #0
    3138:	bne.n	3132 <usb_tx_packet_count+0x12>
	__enable_irq();
    313a:	cpsie	i
	return count;
    313c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    313e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    3140:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    3142:	mov	r0, r3
    3144:	b.n	313a <usb_tx_packet_count+0x1a>
    3146:	nop
    3148:	.word	0x1fff1a24

0000314c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    314c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    314e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3150:	ldr	r2, [pc, #204]	; (3220 <usb_rx_memory+0xd4>)
    3152:	ldrb	r3, [r2, #0]
    3154:	lsls	r3, r3, #28
    3156:	bpl.n	3166 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3158:	ldr	r3, [pc, #200]	; (3224 <usb_rx_memory+0xd8>)
    315a:	ldr	r1, [r3, #32]
    315c:	cmp	r1, #0
    315e:	beq.n	31e8 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3160:	ldr	r1, [r3, #40]	; 0x28
    3162:	cmp	r1, #0
    3164:	beq.n	3204 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3166:	ldrb	r3, [r2, #1]
    3168:	lsls	r5, r3, #28
    316a:	bpl.n	317a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    316c:	ldr	r3, [pc, #180]	; (3224 <usb_rx_memory+0xd8>)
    316e:	ldr	r1, [r3, #64]	; 0x40
    3170:	cmp	r1, #0
    3172:	beq.n	3210 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3174:	ldr	r1, [r3, #72]	; 0x48
    3176:	cmp	r1, #0
    3178:	beq.n	3208 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    317a:	ldrb	r3, [r2, #2]
    317c:	lsls	r4, r3, #28
    317e:	bpl.n	318e <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3180:	ldr	r3, [pc, #160]	; (3224 <usb_rx_memory+0xd8>)
    3182:	ldr	r1, [r3, #96]	; 0x60
    3184:	cmp	r1, #0
    3186:	beq.n	3214 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3188:	ldr	r1, [r3, #104]	; 0x68
    318a:	cmp	r1, #0
    318c:	beq.n	320c <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    318e:	ldrb	r3, [r2, #3]
    3190:	lsls	r1, r3, #28
    3192:	bpl.n	31a4 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3194:	ldr	r3, [pc, #140]	; (3224 <usb_rx_memory+0xd8>)
    3196:	ldr.w	r1, [r3, #128]	; 0x80
    319a:	cmp	r1, #0
    319c:	beq.n	321c <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    319e:	ldr.w	r1, [r3, #136]	; 0x88
    31a2:	cbz	r1, 31ca <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    31a4:	ldrb	r3, [r2, #4]
    31a6:	lsls	r3, r3, #28
    31a8:	bpl.n	31bc <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    31aa:	ldr	r3, [pc, #120]	; (3224 <usb_rx_memory+0xd8>)
    31ac:	ldr.w	r2, [r3, #160]	; 0xa0
    31b0:	cmp	r2, #0
    31b2:	beq.n	3218 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    31b4:	ldr.w	r2, [r3, #168]	; 0xa8
    31b8:	movs	r4, #21
    31ba:	cbz	r2, 31cc <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    31bc:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    31be:	ldr	r3, [pc, #104]	; (3228 <usb_rx_memory+0xdc>)
    31c0:	movs	r2, #0
    31c2:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    31c4:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    31c6:	b.w	3098 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    31ca:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    31cc:	ldr	r1, [pc, #88]	; (3228 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    31ce:	ldr	r5, [pc, #92]	; (322c <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    31d0:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    31d2:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    31d6:	add.w	r3, r3, r4, lsl #3
    31da:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    31dc:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    31de:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    31e0:	strb	r2, [r1, #0]
				__enable_irq();
    31e2:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    31e4:	pop	{r4, r5}
    31e6:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    31e8:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    31ea:	ldr	r4, [pc, #60]	; (3228 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    31ec:	ldr	r5, [pc, #64]	; (3230 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    31ee:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    31f0:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    31f4:	add.w	r3, r3, r2, lsl #3
    31f8:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    31fa:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    31fc:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    31fe:	strb	r2, [r4, #0]
				__enable_irq();
    3200:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    3202:	b.n	31e4 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3204:	movs	r4, #5
    3206:	b.n	31cc <usb_rx_memory+0x80>
    3208:	movs	r4, #9
    320a:	b.n	31cc <usb_rx_memory+0x80>
    320c:	movs	r4, #13
    320e:	b.n	31cc <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3210:	movs	r2, #8
    3212:	b.n	31ea <usb_rx_memory+0x9e>
    3214:	movs	r2, #12
    3216:	b.n	31ea <usb_rx_memory+0x9e>
    3218:	movs	r2, #20
    321a:	b.n	31ea <usb_rx_memory+0x9e>
    321c:	movs	r2, #16
    321e:	b.n	31ea <usb_rx_memory+0x9e>
    3220:	.word	0x00005554
    3224:	.word	0x1fff0000
    3228:	.word	0x1fff1a55
    322c:	.word	0x004000c8
    3230:	.word	0x00400088

00003234 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3234:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    3236:	cmp	r3, #4
    3238:	bhi.n	3276 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    323a:	ldr	r2, [pc, #108]	; (32a8 <usb_tx+0x74>)
    323c:	lsls	r0, r0, #5
    323e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    3242:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3244:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    3246:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3248:	ldr	r4, [pc, #96]	; (32ac <usb_tx+0x78>)
    324a:	ldrb	r2, [r4, r3]
    324c:	cmp	r2, #3
    324e:	bhi.n	3288 <usb_tx+0x54>
    3250:	tbb	[pc, r2]
    3254:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3258:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    325a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    325c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    325e:	tst.w	r0, #8
    3262:	ite	ne
    3264:	movne	r3, #200	; 0xc8
    3266:	moveq	r3, #136	; 0x88
    3268:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    326c:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    326e:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3270:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    3272:	cpsie	i
}
    3274:	pop	{r4, r5}
    3276:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3278:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    327a:	movs	r2, #2
		break;
    327c:	b.n	325a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    327e:	movs	r2, #5
    3280:	b.n	325a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    3282:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    3284:	movs	r2, #4
		break;
    3286:	b.n	325a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3288:	ldr	r2, [pc, #36]	; (32b0 <usb_tx+0x7c>)
    328a:	ldr.w	r0, [r2, r3, lsl #2]
    328e:	cbz	r0, 32a0 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3290:	ldr	r2, [pc, #32]	; (32b4 <usb_tx+0x80>)
    3292:	ldr.w	r0, [r2, r3, lsl #2]
    3296:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3298:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    329c:	cpsie	i
		return;
    329e:	b.n	3274 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    32a0:	str.w	r1, [r2, r3, lsl #2]
    32a4:	ldr	r2, [pc, #12]	; (32b4 <usb_tx+0x80>)
    32a6:	b.n	3298 <usb_tx+0x64>
    32a8:	.word	0x1fff0000
    32ac:	.word	0x1fff1a64
    32b0:	.word	0x1fff1a24
    32b4:	.word	0x1fff1a38

000032b8 <usb_isr>:
}



void usb_isr(void)
{
    32b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    32bc:	ldr.w	fp, [pc, #776]	; 35c8 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    32c0:	ldr.w	sl, [pc, #776]	; 35cc <usb_isr+0x314>
}



void usb_isr(void)
{
    32c4:	sub	sp, #28
    32c6:	b.n	3352 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    32c8:	ldr	r7, [pc, #680]	; (3574 <usb_isr+0x2bc>)
    32ca:	mov.w	r8, r3, lsr #2
    32ce:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    32d2:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    32d4:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    32d8:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    32dc:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    32de:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    32e2:	and.w	r4, r3, #255	; 0xff
    32e6:	cmp	r3, #0
    32e8:	bne.w	34ec <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    32ec:	ldr.w	r3, [r7, r8, lsl #3]
    32f0:	lsrs	r3, r3, #16
    32f2:	uxth	r1, r3
    32f4:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    32f8:	cmp	r3, #0
    32fa:	beq.w	34da <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    32fe:	ldr	r3, [pc, #632]	; (3578 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3300:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    3304:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    3308:	ldr.w	r2, [r3, r6, lsl #2]
    330c:	cmp	r2, #0
    330e:	beq.w	377c <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    3312:	ldr	r5, [pc, #616]	; (357c <usb_isr+0x2c4>)
    3314:	ldr.w	r3, [r5, r6, lsl #2]
    3318:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    331a:	ldr	r4, [pc, #612]	; (3580 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    331c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3320:	ldrh.w	r3, [r4, r6, lsl #1]
    3324:	add	r1, r3
    3326:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    332a:	bl	3058 <usb_malloc>
					if (packet) {
    332e:	cmp	r0, #0
    3330:	beq.w	376e <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    3334:	ldr	r2, [pc, #588]	; (3584 <usb_isr+0x2cc>)
    3336:	ldr	r3, [pc, #592]	; (3588 <usb_isr+0x2d0>)
    3338:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    333c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3340:	it	ne
    3342:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3344:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    3348:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    334c:	movs	r3, #8
    334e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3352:	ldrb.w	r4, [fp]
    3356:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    3358:	lsls	r0, r4, #29
    335a:	bpl.n	3396 <usb_isr+0xde>
		if (usb_configuration) {
    335c:	ldr	r3, [pc, #556]	; (358c <usb_isr+0x2d4>)
    335e:	ldrb	r3, [r3, #0]
    3360:	cbz	r3, 3390 <usb_isr+0xd8>
			t = usb_reboot_timer;
    3362:	ldr	r1, [pc, #556]	; (3590 <usb_isr+0x2d8>)
    3364:	ldrb	r2, [r1, #0]
			if (t) {
    3366:	and.w	r3, r2, #255	; 0xff
    336a:	cbz	r2, 3376 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    336c:	subs	r3, #1
    336e:	uxtb	r3, r3
    3370:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    3372:	cbnz	r3, 3376 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3374:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    3376:	ldr	r1, [pc, #540]	; (3594 <usb_isr+0x2dc>)
    3378:	ldrb	r2, [r1, #0]
			if (t) {
    337a:	and.w	r3, r2, #255	; 0xff
    337e:	cbz	r2, 338c <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    3380:	subs	r3, #1
    3382:	uxtb	r3, r3
    3384:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    3386:	cmp	r3, #0
    3388:	beq.w	371a <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    338c:	bl	2bf0 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    3390:	movs	r3, #4
    3392:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    3396:	and.w	r3, r4, #8
    339a:	and.w	r2, r3, #255	; 0xff
    339e:	cmp	r3, #0
    33a0:	beq.w	3534 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    33a4:	ldrb.w	r3, [sl]
    33a8:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    33aa:	lsrs	r6, r3, #4
    33ac:	bne.n	32c8 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    33ae:	lsrs	r4, r3, #2
    33b0:	ldr.w	r9, [pc, #448]	; 3574 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    33b4:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    33b8:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    33bc:	ubfx	r2, r2, #2, #4
    33c0:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    33c2:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    33c4:	cmp	r2, #12
    33c6:	bhi.w	34d2 <usb_isr+0x21a>
    33ca:	tbb	[pc, r2]
    33ce:	.short	0x7878
    33d0:	.word	0x82828282
    33d4:	.word	0x82438282
    33d8:	.short	0x8282
    33da:	.byte	0x07
    33db:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    33dc:	ldr	r0, [r1, #0]
    33de:	ldr	r5, [pc, #440]	; (3598 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    33e0:	ldr	r3, [pc, #416]	; (3584 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    33e2:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    33e4:	ldr	r7, [pc, #436]	; (359c <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    33e6:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    33ea:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    33ec:	ldr	r6, [pc, #432]	; (35a0 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    33ee:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    33f0:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    33f4:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    33f6:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    33f8:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    33fa:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    33fe:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3400:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    3404:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3408:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    340a:	bhi.w	35d0 <usb_isr+0x318>
    340e:	cmp.w	r1, #1664	; 0x680
    3412:	bcs.w	3a3c <usb_isr+0x784>
    3416:	cmp.w	r1, #258	; 0x102
    341a:	beq.w	37ea <usb_isr+0x532>
    341e:	bhi.w	37b4 <usb_isr+0x4fc>
    3422:	cmp	r1, #128	; 0x80
    3424:	beq.w	3a70 <usb_isr+0x7b8>
    3428:	cmp	r1, #130	; 0x82
    342a:	bne.w	37f6 <usb_isr+0x53e>
    342e:	ldrh	r1, [r5, #4]
    3430:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3434:	cmp	r1, #5
    3436:	bhi.w	37f6 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    343a:	ldr	r3, [pc, #360]	; (35a4 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    343c:	ldr	r4, [pc, #360]	; (35a8 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    343e:	lsls	r1, r1, #2
    3440:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3442:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3444:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3446:	ldrb	r2, [r3, #0]
    3448:	lsls	r3, r2, #30
    344a:	bpl.w	3b80 <usb_isr+0x8c8>
    344e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    3450:	movs	r0, #2
    3452:	b.n	387e <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3454:	ldr	r7, [pc, #324]	; (359c <usb_isr+0x2e4>)
    3456:	ldr	r2, [r7, #0]
		if (data) {
    3458:	cbz	r2, 34a8 <usb_isr+0x1f0>
			size = ep0_tx_len;
    345a:	ldr	r3, [pc, #336]	; (35ac <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    345c:	ldr	r6, [pc, #320]	; (35a0 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    345e:	ldr	r1, [pc, #336]	; (35b0 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3460:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3462:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3464:	ldrb	r5, [r1, #0]
    3466:	cmp	r0, #64	; 0x40
    3468:	mov	lr, r0
    346a:	orr.w	r8, r5, #2
    346e:	it	cs
    3470:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3474:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    3476:	eor.w	r4, r4, #1
    347a:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    347c:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3480:	ite	eq
    3482:	moveq	r4, #136	; 0x88
    3484:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3486:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    348a:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    348c:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3490:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3494:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3496:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3498:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    349c:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    349e:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    34a0:	cmp	r0, #0
    34a2:	beq.w	3612 <usb_isr+0x35a>
    34a6:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    34a8:	ldr	r3, [pc, #236]	; (3598 <usb_isr+0x2e0>)
    34aa:	ldrh	r2, [r3, #0]
    34ac:	cmp.w	r2, #1280	; 0x500
    34b0:	bne.n	34d2 <usb_isr+0x21a>
			setup.bRequest = 0;
    34b2:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    34b4:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    34b6:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    34b8:	ldr	r3, [pc, #248]	; (35b4 <usb_isr+0x2fc>)
    34ba:	strb	r2, [r3, #0]
    34bc:	b.n	34d2 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    34be:	ldr	r2, [pc, #216]	; (3598 <usb_isr+0x2e0>)
    34c0:	ldrh	r0, [r2, #0]
    34c2:	movw	r2, #8225	; 0x2021
    34c6:	cmp	r0, r2
    34c8:	beq.w	361c <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    34cc:	ldr	r2, [pc, #180]	; (3584 <usb_isr+0x2cc>)
    34ce:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    34d2:	ldr	r2, [pc, #228]	; (35b8 <usb_isr+0x300>)
    34d4:	movs	r3, #1
    34d6:	strb	r3, [r2, #0]
    34d8:	b.n	334c <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    34da:	ldr	r2, [pc, #168]	; (3584 <usb_isr+0x2cc>)
    34dc:	ldr	r3, [pc, #168]	; (3588 <usb_isr+0x2d0>)
    34de:	tst.w	r9, #8
    34e2:	it	ne
    34e4:	movne	r3, r2
    34e6:	str.w	r3, [r7, r8, lsl #3]
    34ea:	b.n	334c <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    34ec:	bl	3098 <usb_free>
				packet = tx_first[endpoint];
    34f0:	ldr	r2, [pc, #200]	; (35bc <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    34f2:	ldr	r1, [pc, #204]	; (35c0 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    34f4:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    34f8:	cmp	r3, #0
    34fa:	beq.w	3784 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    34fe:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3500:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3502:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    3506:	add.w	r2, r3, #8
    350a:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    350e:	cmp	r4, #3
    3510:	bhi.n	351e <usb_isr+0x266>
    3512:	tbb	[pc, r4]
    3516:	.short	0x022c
    3518:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    351a:	movs	r2, #2
    351c:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    351e:	ldrh	r2, [r3, #0]
    3520:	tst.w	r9, #8
    3524:	ite	eq
    3526:	moveq	r3, #136	; 0x88
    3528:	movne	r3, #200	; 0xc8
    352a:	orr.w	r3, r3, r2, lsl #16
    352e:	str.w	r3, [r7, r8, lsl #3]
    3532:	b.n	334c <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3534:	lsls	r0, r4, #31
    3536:	bmi.w	3720 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    353a:	lsls	r1, r4, #24
    353c:	bmi.w	37a0 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3540:	lsls	r2, r4, #30
    3542:	bpl.n	3552 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    3544:	ldr	r2, [pc, #124]	; (35c4 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3546:	ldr	r1, [pc, #128]	; (35c8 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3548:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    354a:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    354c:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    354e:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3550:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    3552:	lsls	r3, r4, #27
    3554:	bpl.n	355c <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    3556:	ldr	r3, [pc, #112]	; (35c8 <usb_isr+0x310>)
    3558:	movs	r2, #16
    355a:	strb	r2, [r3, #0]
	}

}
    355c:	add	sp, #28
    355e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3562:	movs	r2, #4
    3564:	strb	r2, [r1, r6]
						break;
    3566:	b.n	351e <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3568:	movs	r2, #5
    356a:	strb	r2, [r1, r6]
						break;
    356c:	b.n	351e <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    356e:	movs	r2, #3
    3570:	strb	r2, [r1, r6]
						break;
    3572:	b.n	351e <usb_isr+0x266>
    3574:	.word	0x1fff0000
    3578:	.word	0x1fff19cc
    357c:	.word	0x1fff1974
    3580:	.word	0x1fff1ef4
    3584:	.word	0x004000c8
    3588:	.word	0x00400088
    358c:	.word	0x1fff1a60
    3590:	.word	0x1fff19e1
    3594:	.word	0x1fff18f4
    3598:	.word	0x1fff1a4c
    359c:	.word	0x1fff1970
    35a0:	.word	0x1fff19e0
    35a4:	.word	0x400720c0
    35a8:	.word	0x1fff1a58
    35ac:	.word	0x1fff1988
    35b0:	.word	0x1fff1a54
    35b4:	.word	0x40072098
    35b8:	.word	0x40072094
    35bc:	.word	0x1fff1a24
    35c0:	.word	0x1fff1a64
    35c4:	.word	0x40072088
    35c8:	.word	0x40072080
    35cc:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    35d0:	movw	r4, #8225	; 0x2021
    35d4:	cmp	r1, r4
    35d6:	beq.w	3712 <usb_isr+0x45a>
    35da:	bhi.n	3670 <usb_isr+0x3b8>
    35dc:	cmp.w	r1, #2176	; 0x880
    35e0:	beq.w	3876 <usb_isr+0x5be>
    35e4:	cmp.w	r1, #2304	; 0x900
    35e8:	bne.w	37f6 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    35ec:	ldr	r2, [pc, #712]	; (38b8 <usb_isr+0x600>)
    35ee:	ldr	r4, [pc, #716]	; (38bc <usb_isr+0x604>)
    35f0:	ldrb	r1, [r5, #2]
    35f2:	strb	r1, [r2, #0]
    35f4:	add.w	r5, r4, #160	; 0xa0
    35f8:	b.n	3602 <usb_isr+0x34a>
    35fa:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    35fc:	cmp	r5, r4
    35fe:	beq.w	3914 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    3602:	ldr	r3, [r4, #32]
    3604:	lsls	r1, r3, #24
    3606:	bpl.n	35fa <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3608:	ldr	r0, [r4, #36]	; 0x24
    360a:	subs	r0, #8
    360c:	bl	3098 <usb_free>
    3610:	b.n	35fa <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3612:	cmp.w	lr, #64	; 0x40
    3616:	it	ne
    3618:	movne	r2, #0
    361a:	b.n	34a6 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    361c:	ldr	r2, [pc, #672]	; (38c0 <usb_isr+0x608>)
    361e:	ldrb	r5, [r1, #0]
    3620:	ldrb	r0, [r1, #1]
    3622:	strb	r5, [r2, #0]
    3624:	strb	r0, [r2, #1]
    3626:	ldrb	r5, [r1, #2]
    3628:	ldrb	r0, [r1, #3]
    362a:	strb	r5, [r2, #2]
    362c:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    362e:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3630:	ldrb	r5, [r1, #4]
    3632:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3634:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3636:	ldrb	r5, [r1, #5]
    3638:	ldrb	r1, [r1, #6]
    363a:	strb	r5, [r2, #5]
    363c:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    363e:	beq.w	386e <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3642:	ldr	r1, [pc, #640]	; (38c4 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3644:	ldr	r6, [pc, #640]	; (38c8 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3646:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3648:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    364a:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    364e:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3650:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3654:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3656:	ite	eq
    3658:	moveq	r1, #136	; 0x88
    365a:	movne	r1, #200	; 0xc8
    365c:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3660:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3664:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3668:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    366a:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    366c:	str	r1, [r2, #4]
    366e:	b.n	34cc <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3670:	movw	r4, #8737	; 0x2221
    3674:	cmp	r1, r4
    3676:	bne.w	3a8a <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    367a:	ldr.w	ip, [pc, #656]	; 390c <usb_isr+0x654>
    367e:	ldr	r3, [pc, #588]	; (38cc <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3680:	ldr	r1, [pc, #588]	; (38d0 <usb_isr+0x618>)
    3682:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3684:	ldr.w	r5, [ip]
    3688:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    368a:	str	r0, [sp, #4]
    368c:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    368e:	movs	r0, #0
    3690:	str	r0, [sp, #8]
    3692:	mov	r8, r0
    3694:	mov	ip, r0
    3696:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3698:	ldr	r1, [pc, #552]	; (38c4 <usb_isr+0x60c>)
    369a:	ldrb	r5, [r1, #0]
    369c:	orr.w	lr, r5, #2
    36a0:	add.w	r3, r9, lr, lsl #3
    36a4:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36a6:	ldr	r3, [sp, #4]
    36a8:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36aa:	ldr	r3, [sp, #12]
    36ac:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36ae:	ite	eq
    36b0:	moveq	r4, #136	; 0x88
    36b2:	movne	r4, #200	; 0xc8
    36b4:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    36b8:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36bc:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    36c0:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    36c2:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36c4:	ldr.w	lr, [pc, #500]	; 38bc <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    36c8:	ldr	r3, [pc, #508]	; (38c8 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    36ca:	ldr.w	r8, [pc, #504]	; 38c4 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    36ce:	cmp	r0, #0
    36d0:	bne.w	3804 <usb_isr+0x54c>
    36d4:	cmp.w	ip, #64	; 0x40
    36d8:	bne.n	3712 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36da:	orr.w	ip, r4, #2
    36de:	add.w	r3, r9, ip, lsl #3
    36e2:	ldr	r4, [sp, #8]
    36e4:	ldr.w	lr, [pc, #468]	; 38bc <usb_isr+0x604>
    36e8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36ea:	cmp	r2, #0
    36ec:	bne.w	3830 <usb_isr+0x578>
    36f0:	lsls	r2, r0, #16
    36f2:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    36f6:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36fa:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    36fe:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3700:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3702:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3704:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3706:	cmp	r0, #64	; 0x40
    3708:	bne.n	3712 <usb_isr+0x45a>
    370a:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    370c:	ldr	r2, [pc, #452]	; (38d4 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    370e:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3710:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3712:	ldr	r2, [pc, #452]	; (38d8 <usb_isr+0x620>)
    3714:	movs	r3, #1
    3716:	strb	r3, [r2, #0]
    3718:	b.n	34d2 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    371a:	bl	2478 <usb_serial_flush_callback>
    371e:	b.n	338c <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3720:	ldr	r3, [pc, #408]	; (38bc <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3722:	ldr	r0, [pc, #436]	; (38d8 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3724:	ldr	r1, [pc, #412]	; (38c4 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3726:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3728:	mov.w	lr, #2
    372c:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3730:	ldr	r7, [pc, #424]	; (38dc <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3732:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3734:	ldr	r1, [pc, #424]	; (38e0 <usb_isr+0x628>)
    3736:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3738:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    373a:	ldr	r6, [pc, #424]	; (38e4 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    373c:	ldr	r5, [pc, #424]	; (38e8 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    373e:	ldr	r4, [pc, #428]	; (38ec <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3740:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3742:	movs	r1, #13
    3744:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3746:	movs	r1, #255	; 0xff
    3748:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    374a:	ldr.w	lr, [pc, #452]	; 3910 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    374e:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3750:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3752:	ldr	r5, [pc, #412]	; (38f0 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3754:	ldr	r2, [pc, #412]	; (38f4 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3756:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    375a:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    375c:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    375e:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3762:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3764:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3766:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3768:	add	sp, #28
    376a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    376e:	ldr	r2, [pc, #392]	; (38f8 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3770:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3774:	ldrb	r3, [r2, #0]
    3776:	adds	r3, #1
    3778:	strb	r3, [r2, #0]
    377a:	b.n	334c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    377c:	str.w	r0, [r3, r6, lsl #2]
    3780:	ldr	r5, [pc, #376]	; (38fc <usb_isr+0x644>)
    3782:	b.n	331a <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3784:	ldrb	r3, [r1, r6]
    3786:	cmp	r3, #3
    3788:	bhi.n	3860 <usb_isr+0x5a8>
    378a:	add	r2, pc, #4	; (adr r2, 3790 <usb_isr+0x4d8>)
    378c:	ldr.w	pc, [r2, r3, lsl #2]
    3790:	.word	0x0000334d
    3794:	.word	0x0000334d
    3798:	.word	0x000037e5
    379c:	.word	0x000037df
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    37a0:	ldr	r1, [pc, #312]	; (38dc <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    37a2:	ldr	r3, [pc, #324]	; (38e8 <usb_isr+0x630>)
    37a4:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    37a6:	movs	r0, #13
    37a8:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    37aa:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    37ac:	lsls	r2, r4, #30
    37ae:	bpl.w	3552 <usb_isr+0x29a>
    37b2:	b.n	3544 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37b4:	movw	r2, #770	; 0x302
    37b8:	cmp	r1, r2
    37ba:	bne.w	3a7a <usb_isr+0x7c2>
    37be:	ldrh	r1, [r5, #4]
    37c0:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    37c4:	cmp	r1, #5
    37c6:	bhi.n	37f6 <usb_isr+0x53e>
    37c8:	ldrh	r2, [r5, #2]
    37ca:	cbnz	r2, 37f6 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    37cc:	ldr	r4, [pc, #268]	; (38dc <usb_isr+0x624>)
    37ce:	str	r0, [sp, #4]
    37d0:	lsls	r1, r1, #2
    37d2:	add	r4, r1
    37d4:	ldrb	r1, [r4, #0]
    37d6:	orr.w	r1, r1, #2
    37da:	strb	r1, [r4, #0]
    37dc:	b.n	368e <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    37de:	movs	r3, #1
    37e0:	strb	r3, [r1, r6]
						break;
    37e2:	b.n	334c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    37e4:	movs	r3, #0
    37e6:	strb	r3, [r1, r6]
						break;
    37e8:	b.n	334c <usb_isr+0x94>
    37ea:	ldrh	r1, [r5, #4]
    37ec:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    37f0:	cmp	r1, #5
    37f2:	bls.w	3a94 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    37f6:	ldr	r2, [pc, #228]	; (38dc <usb_isr+0x624>)
    37f8:	movs	r3, #15
    37fa:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    37fc:	ldr	r2, [pc, #216]	; (38d8 <usb_isr+0x620>)
    37fe:	movs	r3, #1
    3800:	strb	r3, [r2, #0]
    3802:	b.n	34d2 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3804:	cmp	r0, #64	; 0x40
    3806:	bls.w	36da <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    380a:	orr.w	r4, r4, #2
    380e:	add.w	r1, lr, r4, lsl #3
    3812:	ldr	r6, [sp, #8]
    3814:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3816:	cbz	r2, 3848 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3818:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    381c:	ldr	r2, [pc, #224]	; (3900 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    381e:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3820:	mov	r3, r6
    3822:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3824:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3828:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    382a:	str.w	r2, [lr, r4, lsl #3]
    382e:	b.n	370c <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3830:	ldrb.w	r3, [sp, #4]
    3834:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3836:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3838:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    383a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    383c:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3840:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3842:	str.w	r2, [lr, ip, lsl #3]
    3846:	b.n	3706 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3848:	ldrb.w	r1, [sp, #4]
    384c:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    384e:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3850:	ldr	r2, [pc, #140]	; (38e0 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3852:	strb.w	r5, [r8]
    3856:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3858:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    385a:	str.w	r2, [lr, r4, lsl #3]
    385e:	b.n	370c <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3860:	tst.w	r9, #8
    3864:	ite	eq
    3866:	moveq	r3, #2
    3868:	movne	r3, #3
    386a:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    386c:	b.n	334c <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    386e:	ldr	r2, [pc, #148]	; (3904 <usb_isr+0x64c>)
    3870:	movs	r1, #15
    3872:	strb	r1, [r2, #0]
    3874:	b.n	3642 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3876:	ldr	r2, [pc, #64]	; (38b8 <usb_isr+0x600>)
    3878:	ldr	r4, [pc, #140]	; (3908 <usb_isr+0x650>)
    387a:	ldrb	r2, [r2, #0]
    387c:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    387e:	ldrh	r2, [r5, #6]
    3880:	cmp	r2, r0
    3882:	bcs.w	3c48 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3886:	ldr	r1, [pc, #60]	; (38c4 <usb_isr+0x60c>)
    3888:	ldrb	r5, [r1, #0]
    388a:	cmp	r2, #64	; 0x40
    388c:	mov	ip, r2
    388e:	orr.w	lr, r5, #2
    3892:	it	cs
    3894:	movcs.w	ip, #64	; 0x40
    3898:	add.w	r3, r4, ip
    389c:	add.w	r0, r9, lr, lsl #3
    38a0:	str	r3, [sp, #8]
    38a2:	movs	r3, #1
    38a4:	str	r4, [r0, #4]
    38a6:	mov.w	r8, ip, lsl #16
    38aa:	rsb	r0, ip, r2
    38ae:	str	r3, [sp, #4]
    38b0:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38b2:	movs	r4, #200	; 0xc8
    38b4:	b.n	36b4 <usb_isr+0x3fc>
    38b6:	nop
    38b8:	.word	0x1fff1a60
    38bc:	.word	0x1fff0000
    38c0:	.word	0x1fff1dbc
    38c4:	.word	0x1fff1a54
    38c8:	.word	0x1fff19e0
    38cc:	.word	0x1fff1dc4
    38d0:	.word	0x1fff1904
    38d4:	.word	0x1fff1988
    38d8:	.word	0x40072094
    38dc:	.word	0x400720c0
    38e0:	.word	0x00400088
    38e4:	.word	0x40072088
    38e8:	.word	0x40072080
    38ec:	.word	0x40072098
    38f0:	.word	0x1fff198c
    38f4:	.word	0x1fff19e4
    38f8:	.word	0x1fff1a55
    38fc:	.word	0x1fff1974
    3900:	.word	0x004000c8
    3904:	.word	0x1fff19e1
    3908:	.word	0x1fff1a58
    390c:	.word	0x1fff190c
    3910:	.word	0x4007208c
    3914:	ldr	r4, [pc, #704]	; (3bd8 <usb_isr+0x920>)
    3916:	ldr	r2, [pc, #708]	; (3bdc <usb_isr+0x924>)
    3918:	ldr	r1, [pc, #708]	; (3be0 <usb_isr+0x928>)
    391a:	ldr	r0, [pc, #712]	; (3be4 <usb_isr+0x92c>)
    391c:	ldr	r5, [pc, #712]	; (3be8 <usb_isr+0x930>)
    391e:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3920:	movs	r3, #0
    3922:	ldr	r4, [pc, #712]	; (3bec <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3924:	str	r4, [sp, #8]
    3926:	str	r6, [sp, #20]
    3928:	str	r5, [sp, #12]
    392a:	mov	r8, r0
    392c:	mov	r4, r3
    392e:	str	r7, [sp, #16]
    3930:	mov	r6, r2
    3932:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3934:	ldr	r0, [r6, #0]
			while (p) {
    3936:	cbz	r0, 3944 <usb_isr+0x68c>
				n = p->next;
    3938:	ldr	r7, [r0, #4]
				usb_free(p);
    393a:	bl	3098 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    393e:	mov	r0, r7
    3940:	cmp	r7, #0
    3942:	bne.n	3938 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3944:	movs	r3, #0
    3946:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3948:	ldr	r3, [sp, #12]
			p = tx_first[i];
    394a:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    394c:	mov	r2, r3
    394e:	movs	r3, #0
    3950:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3954:	cbz	r0, 3962 <usb_isr+0x6aa>
				n = p->next;
    3956:	ldr	r7, [r0, #4]
				usb_free(p);
    3958:	bl	3098 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    395c:	mov	r0, r7
    395e:	cmp	r7, #0
    3960:	bne.n	3956 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3962:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3964:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3966:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3968:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    396a:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    396e:	ldr	r2, [sp, #8]
    3970:	mov.w	r1, #0
			switch (tx_state[i]) {
    3974:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3976:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    397a:	cmp	r3, #3
    397c:	bhi.n	398e <usb_isr+0x6d6>
    397e:	tbb	[pc, r3]
    3982:	.short	0x0258
    3984:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3986:	ldr	r3, [sp, #4]
    3988:	mov.w	r2, #1
    398c:	strb	r2, [r3, #0]
    398e:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3990:	adds	r4, #1
    3992:	adds	r3, #1
    3994:	cmp	r4, #5
    3996:	add.w	r6, r6, #4
    399a:	add.w	r5, r5, #4
    399e:	str	r3, [sp, #4]
    39a0:	bne.n	3934 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    39a2:	ldr	r4, [pc, #588]	; (3bf0 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    39a4:	ldr	r5, [pc, #588]	; (3bf4 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    39a6:	ldrb	r2, [r4, #0]
			*reg = epconf;
    39a8:	ldr	r3, [pc, #588]	; (3bf8 <usb_isr+0x940>)
    39aa:	ldr	r7, [sp, #16]
    39ac:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    39ae:	movs	r1, #0
    39b0:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    39b2:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    39b4:	lsls	r2, r2, #28
    39b6:	bmi.n	3aae <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    39b8:	ldrb	r2, [r4, #1]
			*reg = epconf;
    39ba:	ldr	r1, [pc, #576]	; (3bfc <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    39bc:	ldr.w	r8, [pc, #588]	; 3c0c <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    39c0:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    39c2:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    39c4:	mov.w	r1, #0
    39c8:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    39cc:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    39d0:	bmi.w	3b5a <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    39d4:	ldrb	r2, [r4, #2]
			*reg = epconf;
    39d6:	ldr	r1, [pc, #552]	; (3c00 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    39d8:	ldr.w	r8, [pc, #560]	; 3c0c <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    39dc:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    39de:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    39e0:	mov.w	r1, #0
    39e4:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    39e8:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    39ec:	bmi.w	3b32 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    39f0:	ldr	r1, [pc, #528]	; (3c04 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    39f2:	ldrb	r2, [r4, #3]
			*reg = epconf;
    39f4:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    39f6:	movs	r1, #0
    39f8:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    39fc:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3a00:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3a02:	ldr.w	r8, [pc, #520]	; 3c0c <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3a06:	bmi.n	3b04 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3a08:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3a0a:	ldr	r1, [pc, #508]	; (3c08 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3a0c:	ldr	r4, [pc, #508]	; (3c0c <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3a0e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3a10:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3a12:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3a14:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3a18:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3a1c:	bmi.n	3ada <usb_isr+0x822>
    3a1e:	ldrb	r3, [r6, #0]
    3a20:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3a22:	movs	r1, #0
    3a24:	eor.w	r2, r3, #1
    3a28:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3a2c:	str.w	r1, [r9, #184]	; 0xb8
    3a30:	b.n	368e <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3a32:	ldr	r3, [sp, #4]
    3a34:	mov.w	r2, #0
    3a38:	strb	r2, [r3, #0]
    3a3a:	b.n	398e <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3a3c:	ldr	r2, [pc, #464]	; (3c10 <usb_isr+0x958>)
    3a3e:	ldr	r4, [r2, #4]
    3a40:	cmp	r4, #0
    3a42:	beq.w	37f6 <usb_isr+0x53e>
    3a46:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3a48:	ldrh.w	lr, [r5, #4]
    3a4c:	b.n	3a58 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3a4e:	adds	r2, #12
			if (list->addr == NULL) break;
    3a50:	ldr	r4, [r2, #4]
    3a52:	cmp	r4, #0
    3a54:	beq.w	37f6 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3a58:	ldrh	r3, [r2, #0]
    3a5a:	cmp	r3, r0
    3a5c:	bne.n	3a4e <usb_isr+0x796>
    3a5e:	ldrh	r3, [r2, #2]
    3a60:	cmp	r3, lr
    3a62:	bne.n	3a4e <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3a64:	lsrs	r0, r0, #8
    3a66:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3a68:	ite	eq
    3a6a:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3a6c:	ldrhne	r0, [r2, #8]
    3a6e:	b.n	387e <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3a70:	ldr	r4, [pc, #416]	; (3c14 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3a72:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3a74:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3a76:	strb	r2, [r4, #1]
    3a78:	b.n	387e <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3a7a:	cmp.w	r1, #1280	; 0x500
    3a7e:	bne.w	37f6 <usb_isr+0x53e>
    3a82:	movs	r3, #1
    3a84:	movs	r2, #0
    3a86:	str	r3, [sp, #4]
    3a88:	b.n	368e <usb_isr+0x3d6>
    3a8a:	movw	r2, #8993	; 0x2321
    3a8e:	cmp	r1, r2
    3a90:	beq.n	3a82 <usb_isr+0x7ca>
    3a92:	b.n	37f6 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3a94:	ldrh	r2, [r5, #2]
    3a96:	cmp	r2, #0
    3a98:	bne.w	37f6 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3a9c:	ldr	r4, [pc, #376]	; (3c18 <usb_isr+0x960>)
    3a9e:	str	r0, [sp, #4]
    3aa0:	lsls	r1, r1, #2
    3aa2:	add	r4, r1
    3aa4:	ldrb	r1, [r4, #0]
    3aa6:	bic.w	r1, r1, #2
    3aaa:	strb	r1, [r4, #0]
    3aac:	b.n	368e <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3aae:	bl	3058 <usb_malloc>
				if (p) {
    3ab2:	cmp	r0, #0
    3ab4:	beq.w	3c24 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3ab8:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3aba:	ldr	r2, [pc, #352]	; (3c1c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3abc:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ac0:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3ac4:	bl	3058 <usb_malloc>
				if (p) {
    3ac8:	cmp	r0, #0
    3aca:	beq.n	3bcc <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3acc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ace:	ldr	r2, [pc, #336]	; (3c20 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3ad0:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ad4:	str.w	r2, [r9, #40]	; 0x28
    3ad8:	b.n	39b8 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3ada:	bl	3058 <usb_malloc>
				if (p) {
    3ade:	cmp	r0, #0
    3ae0:	beq.n	3b90 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3ae2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ae4:	ldr	r2, [pc, #308]	; (3c1c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3ae6:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3aea:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3aee:	bl	3058 <usb_malloc>
				if (p) {
    3af2:	cmp	r0, #0
    3af4:	beq.n	3b84 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3af6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3af8:	ldr	r2, [pc, #292]	; (3c20 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3afa:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3afe:	str.w	r2, [r9, #168]	; 0xa8
    3b02:	b.n	3a1e <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3b04:	bl	3058 <usb_malloc>
				if (p) {
    3b08:	cmp	r0, #0
    3b0a:	beq.w	3c3c <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3b0e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b10:	ldr	r2, [pc, #264]	; (3c1c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3b12:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b16:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3b1a:	bl	3058 <usb_malloc>
				if (p) {
    3b1e:	cmp	r0, #0
    3b20:	beq.w	3c30 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3b24:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b26:	ldr	r2, [pc, #248]	; (3c20 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3b28:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b2c:	str.w	r2, [r9, #136]	; 0x88
    3b30:	b.n	3a08 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3b32:	bl	3058 <usb_malloc>
				if (p) {
    3b36:	cmp	r0, #0
    3b38:	beq.n	3bc0 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3b3a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b3c:	ldr	r2, [pc, #220]	; (3c1c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3b3e:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b42:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3b46:	bl	3058 <usb_malloc>
				if (p) {
    3b4a:	cbz	r0, 3bb4 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3b4c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b4e:	ldr	r2, [pc, #208]	; (3c20 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3b50:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b54:	str.w	r2, [r9, #104]	; 0x68
    3b58:	b.n	39f0 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3b5a:	bl	3058 <usb_malloc>
				if (p) {
    3b5e:	cbz	r0, 3ba8 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3b60:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b62:	ldr	r2, [pc, #184]	; (3c1c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3b64:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b68:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3b6c:	bl	3058 <usb_malloc>
				if (p) {
    3b70:	cbz	r0, 3b9c <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3b72:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b74:	ldr	r2, [pc, #168]	; (3c20 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3b76:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b7a:	str.w	r2, [r9, #72]	; 0x48
    3b7e:	b.n	39d4 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3b80:	movs	r0, #2
    3b82:	b.n	387e <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3b84:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3b86:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3b8a:	adds	r2, #1
    3b8c:	strb	r2, [r5, #0]
    3b8e:	b.n	3a1e <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3b90:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3b92:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3b96:	adds	r2, #1
    3b98:	strb	r2, [r5, #0]
    3b9a:	b.n	3aee <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3b9c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3b9e:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3ba2:	adds	r2, #1
    3ba4:	strb	r2, [r5, #0]
    3ba6:	b.n	39d4 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3ba8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3baa:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3bae:	adds	r2, #1
    3bb0:	strb	r2, [r5, #0]
    3bb2:	b.n	3b6c <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3bb4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3bb6:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3bba:	adds	r2, #1
    3bbc:	strb	r2, [r5, #0]
    3bbe:	b.n	39f0 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3bc0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3bc2:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3bc6:	adds	r2, #1
    3bc8:	strb	r2, [r5, #0]
    3bca:	b.n	3b46 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3bcc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3bce:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3bd2:	adds	r2, #1
    3bd4:	strb	r2, [r5, #0]
    3bd6:	b.n	39b8 <usb_isr+0x700>
    3bd8:	.word	0x1fff1a64
    3bdc:	.word	0x1fff19cc
    3be0:	.word	0x1fff1a24
    3be4:	.word	0x1fff1a38
    3be8:	.word	0x1fff1974
    3bec:	.word	0x1fff1ef4
    3bf0:	.word	0x00005554
    3bf4:	.word	0x1fff1a55
    3bf8:	.word	0x400720c4
    3bfc:	.word	0x400720c8
    3c00:	.word	0x400720cc
    3c04:	.word	0x400720d0
    3c08:	.word	0x400720d4
    3c0c:	.word	0x1fff0000
    3c10:	.word	0x0000555c
    3c14:	.word	0x1fff1a58
    3c18:	.word	0x400720c0
    3c1c:	.word	0x00400088
    3c20:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3c24:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3c26:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3c2a:	adds	r2, #1
    3c2c:	strb	r2, [r5, #0]
    3c2e:	b.n	3ac4 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3c30:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3c32:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3c36:	adds	r2, #1
    3c38:	strb	r2, [r5, #0]
    3c3a:	b.n	3a08 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3c3c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3c3e:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    3c42:	adds	r2, #1
    3c44:	strb	r2, [r5, #0]
    3c46:	b.n	3b1a <usb_isr+0x862>
    3c48:	cmp	r0, #64	; 0x40
    3c4a:	mov	ip, r0
    3c4c:	it	cs
    3c4e:	movcs.w	ip, #64	; 0x40
    3c52:	add.w	r3, r4, ip
    3c56:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3c58:	movs	r3, #1
    3c5a:	rsb	r0, ip, r0
    3c5e:	mov.w	r8, ip, lsl #16
    3c62:	movs	r2, #0
    3c64:	str	r3, [sp, #4]
    3c66:	b.n	3698 <usb_isr+0x3e0>

00003c68 <usb_init>:
}



void usb_init(void)
{
    3c68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c6c:	ldr	r4, [pc, #156]	; (3d0c <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3c6e:	bl	4538 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c72:	movs	r2, #0
    3c74:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3c78:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c7a:	str	r2, [r3, #0]
		table[i].addr = 0;
    3c7c:	str	r2, [r3, #4]
    3c7e:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3c80:	cmp	r3, r0
		table[i].desc = 0;
    3c82:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3c86:	bne.n	3c7a <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3c88:	ldr	r0, [pc, #132]	; (3d10 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3c8a:	ldr	r2, [pc, #136]	; (3d14 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3c8c:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3c8e:	ldr.w	lr, [pc, #156]	; 3d2c <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3c92:	ldr	r6, [pc, #132]	; (3d18 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3c94:	ldr	r5, [pc, #132]	; (3d1c <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3c96:	ldr	r7, [pc, #136]	; (3d20 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3c98:	ldr.w	ip, [pc, #148]	; 3d30 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3c9c:	ldr.w	r8, [pc, #148]	; 3d34 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3ca0:	orr.w	r3, r3, #262144	; 0x40000
    3ca4:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3ca6:	ldr	r3, [r2, #0]
    3ca8:	orr.w	r3, r3, #50331648	; 0x3000000
    3cac:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3cae:	movs	r3, #3
    3cb0:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3cb4:	movs	r3, #160	; 0xa0
    3cb6:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3cb8:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3cbc:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3cc0:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3cc4:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3cc6:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3cc8:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3ccc:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3cce:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3cd0:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3cd2:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3cd4:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3cd6:	ldr	r5, [pc, #76]	; (3d24 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3cd8:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3cdc:	ldr	r0, [pc, #72]	; (3d28 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    3cde:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    3ce2:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3ce4:	movs	r3, #1
    3ce6:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3cea:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3cee:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3cf2:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3cf4:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3cf6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3cfa:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3cfc:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3cfe:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3d02:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3d06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d0a:	nop
    3d0c:	.word	0x1fff0000
    3d10:	.word	0x40048034
    3d14:	.word	0x4000d800
    3d18:	.word	0x40072140
    3d1c:	.word	0x4007209c
    3d20:	.word	0x400720b0
    3d24:	.word	0xe000e435
    3d28:	.word	0xe000e104
    3d2c:	.word	0x40072144
    3d30:	.word	0x40072080
    3d34:	.word	0x40072088

00003d38 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3d38:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3d3a:	ldr	r4, [pc, #176]	; (3dec <yield+0xb4>)
    3d3c:	ldrb	r3, [r4, #0]
    3d3e:	cbz	r3, 3d42 <yield+0xa>
    3d40:	pop	{r3, r4, r5, pc}
	running = 1;
    3d42:	movs	r3, #1
    3d44:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3d46:	bl	2264 <usb_serial_available>
	if (Serial.available()) serialEvent();
    3d4a:	cmp	r0, #0
    3d4c:	bne.n	3dd4 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3d4e:	bl	4308 <serial_available>
	if (Serial1.available()) serialEvent1();
    3d52:	cmp	r0, #0
    3d54:	bne.n	3dce <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    3d56:	bl	3ff0 <serial2_available>
	if (Serial2.available()) serialEvent2();
    3d5a:	cmp	r0, #0
    3d5c:	bne.n	3dc8 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3d5e:	bl	4608 <serial3_available>
	if (Serial3.available()) serialEvent3();
    3d62:	cbnz	r0, 3dc2 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3d64:	bl	411c <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3d68:	cbnz	r0, 3dbc <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    3d6a:	bl	3ef8 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3d6e:	cbnz	r0, 3db6 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3d70:	bl	4434 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3d74:	cbnz	r0, 3db0 <yield+0x78>
#endif
	running = 0;
    3d76:	movs	r3, #0
    3d78:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3d7a:	mrs	r3, IPSR
		if (ipsr != 0) return;
    3d7e:	cmp	r3, #0
    3d80:	bne.n	3d40 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d82:	mrs	r1, PRIMASK
		__disable_irq();
    3d86:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3d88:	ldr	r3, [pc, #100]	; (3df0 <yield+0xb8>)
    3d8a:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3d8c:	cbz	r0, 3dda <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3d8e:	ldr	r4, [pc, #100]	; (3df4 <yield+0xbc>)
    3d90:	ldrb	r2, [r4, #0]
    3d92:	cbnz	r2, 3dda <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3d94:	ldr	r5, [r0, #20]
    3d96:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3d98:	movs	r3, #1
    3d9a:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3d9c:	cbz	r5, 3de2 <yield+0xaa>
			firstYield->_prev = nullptr;
    3d9e:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3da0:	cbnz	r1, 3da4 <yield+0x6c>
    3da2:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3da4:	movs	r5, #0
    3da6:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3da8:	ldr	r3, [r0, #8]
    3daa:	blx	r3
		runningFromYield = false;
    3dac:	strb	r5, [r4, #0]
    3dae:	b.n	3d40 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3db0:	bl	3ef4 <serialEvent6()>
    3db4:	b.n	3d76 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3db6:	bl	3dfc <serialEvent5()>
    3dba:	b.n	3d70 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3dbc:	bl	3ee0 <serialEvent4()>
    3dc0:	b.n	3d6a <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    3dc2:	bl	4704 <serialEvent3()>
    3dc6:	b.n	3d64 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    3dc8:	bl	3edc <serialEvent2()>
    3dcc:	b.n	3d5e <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    3dce:	bl	4700 <serialEvent1()>
    3dd2:	b.n	3d56 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    3dd4:	bl	3e28 <serialEvent()>
    3dd8:	b.n	3d4e <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3dda:	cmp	r1, #0
    3ddc:	bne.n	3d40 <yield+0x8>
    3dde:	cpsie	i
    3de0:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3de2:	ldr	r3, [pc, #20]	; (3df8 <yield+0xc0>)
    3de4:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3de6:	cmp	r1, #0
    3de8:	bne.n	3da4 <yield+0x6c>
    3dea:	b.n	3da2 <yield+0x6a>
    3dec:	.word	0x1fff1a69
    3df0:	.word	0x1fff1d7c
    3df4:	.word	0x1fff1d80
    3df8:	.word	0x1fff1d78

00003dfc <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    3dfc:	bx	lr
    3dfe:	nop

00003e00 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3e00:	b.w	2280 <usb_serial_flush_input>

00003e04 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3e04:	b.w	2234 <usb_serial_peekchar>

00003e08 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3e08:	b.w	21ec <usb_serial_getchar>

00003e0c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3e0c:	b.w	2264 <usb_serial_available>

00003e10 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3e10:	b.w	2420 <usb_serial_flush_output>

00003e14 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3e14:	b.w	23d8 <usb_serial_write_buffer_free>

00003e18 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3e18:	mov	r0, r1
    3e1a:	mov	r1, r2
    3e1c:	b.w	22b8 <usb_serial_write>

00003e20 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3e20:	mov	r0, r1
    3e22:	b.w	23c0 <usb_serial_putchar>
    3e26:	nop

00003e28 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3e28:	bx	lr
    3e2a:	nop

00003e2c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3e2c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3e2e:	ldr	r2, [pc, #24]	; (3e48 <Print::println()+0x1c>)
	return write(buf, 2);
    3e30:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3e32:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3e34:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3e36:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3e38:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3e3a:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3e3e:	movs	r2, #2
    3e40:	blx	r3
}
    3e42:	add	sp, #12
    3e44:	ldr.w	pc, [sp], #4
    3e48:	.word	0x00005550

00003e4c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3e4c:	push	{r4, r5, r6, r7, lr}
    3e4e:	mov	r7, r0
    3e50:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3e52:	cmp	r2, #0
    3e54:	beq.n	3ebe <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    3e56:	cmp	r2, #1
    3e58:	it	eq
    3e5a:	moveq	r2, #10
	}


	if (n == 0) {
    3e5c:	cbz	r1, 3eb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    3e5e:	movs	r4, #33	; 0x21
    3e60:	b.n	3e64 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3e62:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3e64:	udiv	r5, r1, r2
    3e68:	mls	r1, r2, r5, r1
    3e6c:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3e6e:	cmp	r1, #9
    3e70:	add.w	r1, r0, #48	; 0x30
    3e74:	it	ls
    3e76:	uxtbls	r0, r1
    3e78:	add	r1, sp, #40	; 0x28
    3e7a:	it	hi
    3e7c:	addhi	r0, #55	; 0x37
    3e7e:	add	r1, r4
    3e80:	it	hi
    3e82:	uxtbhi	r0, r0
    3e84:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    3e88:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    3e8a:	mov	r1, r5
    3e8c:	cmp	r5, #0
    3e8e:	bne.n	3e62 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    3e90:	cbz	r3, 3ea0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    3e92:	subs	r4, #1
    3e94:	uxtb	r4, r4
		buf[i] = '-';
    3e96:	add	r3, sp, #40	; 0x28
    3e98:	add	r3, r4
    3e9a:	movs	r2, #45	; 0x2d
    3e9c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3ea0:	ldr	r3, [r7, #0]
    3ea2:	add	r2, sp, #4
    3ea4:	adds	r1, r2, r4
    3ea6:	ldr	r3, [r3, #4]
    3ea8:	mov	r0, r7
    3eaa:	rsb	r2, r4, #34	; 0x22
    3eae:	blx	r3
}
    3eb0:	add	sp, #44	; 0x2c
    3eb2:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3eb4:	movs	r2, #48	; 0x30
    3eb6:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    3eba:	movs	r4, #33	; 0x21
    3ebc:	b.n	3e90 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3ebe:	ldr	r3, [r0, #0]
    3ec0:	uxtb	r1, r1
    3ec2:	ldr	r3, [r3, #0]
    3ec4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    3ec6:	add	sp, #44	; 0x2c
    3ec8:	pop	{r4, r5, r6, r7, pc}
    3eca:	nop

00003ecc <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    3ecc:	cmp	r1, #0
		sign = '-';
		n = -n;
    3ece:	itte	lt
    3ed0:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    3ed2:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    3ed4:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    3ed6:	movs	r2, #10
    3ed8:	b.w	3e4c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00003edc <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3edc:	bx	lr
    3ede:	nop

00003ee0 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3ee0:	bx	lr
    3ee2:	nop

00003ee4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3ee4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3ee6:	bl	4c4 <setup>
	while (1) {
		loop();
    3eea:	bl	4c8 <loop>
		yield();
    3eee:	bl	3d38 <yield>
    3ef2:	b.n	3eea <main+0x6>

00003ef4 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3ef4:	bx	lr
    3ef6:	nop

00003ef8 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ef8:	ldr	r2, [pc, #20]	; (3f10 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3efa:	ldr	r3, [pc, #24]	; (3f14 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3efc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3efe:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f00:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3f02:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3f04:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3f06:	it	cc
    3f08:	addcc	r0, #64	; 0x40
    3f0a:	subs	r0, r0, r3
}
    3f0c:	bx	lr
    3f0e:	nop
    3f10:	.word	0x1fff1a70
    3f14:	.word	0x1fff1a71

00003f18 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3f18:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3f1a:	ldr	r3, [pc, #172]	; (3fc8 <uart4_status_isr+0xb0>)
    3f1c:	ldrb	r2, [r3, #4]
    3f1e:	lsls	r4, r2, #26
    3f20:	bpl.n	3f62 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3f22:	ldr	r0, [pc, #168]	; (3fcc <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3f24:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3f26:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f28:	ldr	r1, [pc, #164]	; (3fd0 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3f2a:	adds	r3, #1
    3f2c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f2e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3f30:	it	gt
    3f32:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f34:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3f36:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f38:	beq.n	3f42 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    3f3a:	ldr	r4, [pc, #152]	; (3fd4 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    3f3c:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3f3e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3f40:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3f42:	ldr	r2, [pc, #148]	; (3fd8 <uart4_status_isr+0xc0>)
    3f44:	ldr	r1, [r2, #0]
    3f46:	cbz	r1, 3f62 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3f48:	ldr	r2, [pc, #144]	; (3fdc <uart4_status_isr+0xc4>)
    3f4a:	ldrb	r2, [r2, #0]
    3f4c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3f4e:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3f50:	itet	cc
    3f52:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3f56:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3f58:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3f5a:	cmp	r3, #39	; 0x27
    3f5c:	itt	gt
    3f5e:	movgt	r3, #1
    3f60:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    3f62:	ldr	r2, [pc, #100]	; (3fc8 <uart4_status_isr+0xb0>)
    3f64:	ldrb	r3, [r2, #3]
    3f66:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3f68:	lsls	r0, r3, #24
    3f6a:	bmi.n	3f90 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3f6c:	lsls	r2, r3, #25
    3f6e:	bpl.n	3f8c <uart4_status_isr+0x74>
    3f70:	ldr	r3, [pc, #84]	; (3fc8 <uart4_status_isr+0xb0>)
    3f72:	ldrb	r3, [r3, #4]
    3f74:	lsls	r3, r3, #25
    3f76:	bpl.n	3f8c <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3f78:	ldr	r3, [pc, #100]	; (3fe0 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f7a:	ldr	r1, [pc, #104]	; (3fe4 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3f7c:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f7e:	movs	r2, #0
    3f80:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3f82:	cbz	r3, 3f86 <uart4_status_isr+0x6e>
    3f84:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    3f86:	ldr	r3, [pc, #64]	; (3fc8 <uart4_status_isr+0xb0>)
    3f88:	movs	r2, #44	; 0x2c
    3f8a:	strb	r2, [r3, #3]
	}
}
    3f8c:	pop	{r4, r5}
    3f8e:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3f90:	ldrb	r1, [r2, #4]
    3f92:	lsls	r1, r1, #24
    3f94:	bpl.n	3f6c <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3f96:	ldr	r1, [pc, #80]	; (3fe8 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3f98:	ldr	r0, [pc, #64]	; (3fdc <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f9a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3f9c:	ldrb	r1, [r0, #0]
    3f9e:	uxtb	r1, r1
		if (head == tail) {
    3fa0:	cmp	r4, r1
    3fa2:	beq.n	3fc0 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3fa4:	adds	r2, r1, #1
    3fa6:	cmp	r2, #39	; 0x27
    3fa8:	itt	hi
    3faa:	movhi	r1, #0
    3fac:	movhi	r2, r1
			n = tx_buffer[tail];
    3fae:	ldr	r5, [pc, #60]	; (3fec <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3fb0:	ldr	r4, [pc, #20]	; (3fc8 <uart4_status_isr+0xb0>)
    3fb2:	it	ls
    3fb4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3fb6:	ldrb	r2, [r5, r2]
    3fb8:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3fba:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3fbc:	strb	r1, [r0, #0]
    3fbe:	b.n	3f6c <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3fc0:	movs	r1, #108	; 0x6c
    3fc2:	strb	r1, [r2, #3]
    3fc4:	b.n	3f6c <uart4_status_isr+0x54>
    3fc6:	nop
    3fc8:	.word	0x400ea000
    3fcc:	.word	0x1fff1a70
    3fd0:	.word	0x1fff1a71
    3fd4:	.word	0x1fff1a9c
    3fd8:	.word	0x1fff1a6c
    3fdc:	.word	0x1fff1add
    3fe0:	.word	0x1fff1ae0
    3fe4:	.word	0x1fff1adc
    3fe8:	.word	0x1fff1ae4
    3fec:	.word	0x1fff1a74

00003ff0 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ff0:	ldr	r2, [pc, #20]	; (4008 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3ff2:	ldr	r3, [pc, #24]	; (400c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ff4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3ff6:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ff8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3ffa:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3ffc:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3ffe:	it	cc
    4000:	addcc	r0, #64	; 0x40
    4002:	subs	r0, r0, r3
}
    4004:	bx	lr
    4006:	nop
    4008:	.word	0x1fff1b58
    400c:	.word	0x1fff1aed

00004010 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    4010:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4012:	ldr	r3, [pc, #224]	; (40f4 <uart1_status_isr+0xe4>)
    4014:	ldrb	r2, [r3, #4]
    4016:	tst.w	r2, #48	; 0x30
    401a:	beq.n	4076 <uart1_status_isr+0x66>
		__disable_irq();
    401c:	cpsid	i
		avail = UART1_RCFIFO;
    401e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4020:	and.w	r2, r1, #255	; 0xff
    4024:	cmp	r1, #0
    4026:	beq.n	40a4 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4028:	cpsie	i
			head = rx_buffer_head;
    402a:	ldr	r7, [pc, #204]	; (40f8 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    402c:	ldr	r1, [pc, #204]	; (40fc <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    402e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4030:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4032:	ldr	r6, [pc, #204]	; (4100 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4034:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4036:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4038:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    403a:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    403c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    403e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4040:	it	cs
    4042:	movcs	r3, #0
				if (newhead != tail) {
    4044:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4046:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    404a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    404c:	itt	ne
    404e:	strbne	r1, [r6, r3]
    4050:	movne	r0, r3
				}
			} while (--avail > 0);
    4052:	ands.w	r2, r2, #255	; 0xff
    4056:	bne.n	403a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4058:	ldr	r3, [pc, #168]	; (4104 <uart1_status_isr+0xf4>)
    405a:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    405c:	uxtb	r2, r0
    405e:	strb	r2, [r7, #0]
			if (rts_pin) {
    4060:	cbz	r3, 4076 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4062:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4064:	itet	cc
    4066:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    406a:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    406c:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    406e:	cmp	r0, #39	; 0x27
    4070:	itt	gt
    4072:	movgt	r2, #1
    4074:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    4076:	ldr	r1, [pc, #124]	; (40f4 <uart1_status_isr+0xe4>)
    4078:	ldrb	r2, [r1, #3]
    407a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    407c:	lsls	r5, r2, #24
    407e:	bmi.n	40ae <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    4080:	lsls	r2, r2, #25
    4082:	bpl.n	40a0 <uart1_status_isr+0x90>
    4084:	ldr	r3, [pc, #108]	; (40f4 <uart1_status_isr+0xe4>)
    4086:	ldrb	r3, [r3, #4]
    4088:	lsls	r3, r3, #25
    408a:	bpl.n	40a0 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    408c:	ldr	r3, [pc, #120]	; (4108 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    408e:	ldr	r1, [pc, #124]	; (410c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4090:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    4092:	movs	r2, #0
    4094:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4096:	cbz	r3, 409a <uart1_status_isr+0x8a>
    4098:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    409a:	ldr	r3, [pc, #88]	; (40f4 <uart1_status_isr+0xe4>)
    409c:	movs	r2, #60	; 0x3c
    409e:	strb	r2, [r3, #3]
	}
}
    40a0:	pop	{r4, r5, r6, r7}
    40a2:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    40a4:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    40a6:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    40a8:	strb	r2, [r3, #17]
			__enable_irq();
    40aa:	cpsie	i
    40ac:	b.n	4076 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    40ae:	ldrb	r3, [r1, #4]
    40b0:	lsls	r4, r3, #24
    40b2:	bpl.n	4080 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    40b4:	ldr	r3, [pc, #88]	; (4110 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    40b6:	ldr	r6, [pc, #92]	; (4114 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    40b8:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    40ba:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    40bc:	uxtb	r4, r4
		tail = tx_buffer_tail;
    40be:	uxtb	r3, r3
		do {
			if (tail == head) break;
    40c0:	cmp	r4, r3
    40c2:	beq.n	40e2 <uart1_status_isr+0xd2>
    40c4:	ldr	r5, [pc, #80]	; (4118 <uart1_status_isr+0x108>)
    40c6:	b.n	40cc <uart1_status_isr+0xbc>
    40c8:	cmp	r3, r4
    40ca:	beq.n	40e2 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    40cc:	adds	r3, #1
    40ce:	cmp	r3, #40	; 0x28
    40d0:	it	cs
    40d2:	movcs	r3, #0
			avail = UART1_S1;
    40d4:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    40d6:	ldrb	r0, [r5, r3]
    40d8:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    40da:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    40dc:	ldrb	r0, [r1, #20]
    40de:	cmp	r0, #7
    40e0:	bls.n	40c8 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    40e2:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    40e4:	ldr	r1, [pc, #12]	; (40f4 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    40e6:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    40e8:	ldrb	r3, [r1, #4]
    40ea:	lsls	r0, r3, #24
    40ec:	itt	mi
    40ee:	movmi	r3, #124	; 0x7c
    40f0:	strbmi	r3, [r1, #3]
    40f2:	b.n	4080 <uart1_status_isr+0x70>
    40f4:	.word	0x4006b000
    40f8:	.word	0x1fff1b58
    40fc:	.word	0x1fff1aed
    4100:	.word	0x1fff1b18
    4104:	.word	0x1fff1ae8
    4108:	.word	0x1fff1b5c
    410c:	.word	0x1fff1aec
    4110:	.word	0x1fff1b60
    4114:	.word	0x1fff1b59
    4118:	.word	0x1fff1af0

0000411c <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    411c:	ldr	r2, [pc, #20]	; (4134 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    411e:	ldr	r3, [pc, #24]	; (4138 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4120:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4122:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4124:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4126:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4128:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    412a:	it	cc
    412c:	addcc	r0, #64	; 0x40
    412e:	subs	r0, r0, r3
}
    4130:	bx	lr
    4132:	nop
    4134:	.word	0x1fff1b68
    4138:	.word	0x1fff1b69

0000413c <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    413c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    413e:	ldr	r3, [pc, #172]	; (41ec <uart3_status_isr+0xb0>)
    4140:	ldrb	r2, [r3, #4]
    4142:	lsls	r4, r2, #26
    4144:	bpl.n	4186 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4146:	ldr	r0, [pc, #168]	; (41f0 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    4148:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    414a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    414c:	ldr	r1, [pc, #164]	; (41f4 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    414e:	adds	r3, #1
    4150:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4152:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4154:	it	gt
    4156:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4158:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    415a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    415c:	beq.n	4166 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    415e:	ldr	r4, [pc, #152]	; (41f8 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    4160:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4162:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4164:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4166:	ldr	r2, [pc, #148]	; (41fc <uart3_status_isr+0xc0>)
    4168:	ldr	r1, [r2, #0]
    416a:	cbz	r1, 4186 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    416c:	ldr	r2, [pc, #144]	; (4200 <uart3_status_isr+0xc4>)
    416e:	ldrb	r2, [r2, #0]
    4170:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4172:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4174:	itet	cc
    4176:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    417a:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    417c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    417e:	cmp	r3, #39	; 0x27
    4180:	itt	gt
    4182:	movgt	r3, #1
    4184:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    4186:	ldr	r2, [pc, #100]	; (41ec <uart3_status_isr+0xb0>)
    4188:	ldrb	r3, [r2, #3]
    418a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    418c:	lsls	r0, r3, #24
    418e:	bmi.n	41b4 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    4190:	lsls	r2, r3, #25
    4192:	bpl.n	41b0 <uart3_status_isr+0x74>
    4194:	ldr	r3, [pc, #84]	; (41ec <uart3_status_isr+0xb0>)
    4196:	ldrb	r3, [r3, #4]
    4198:	lsls	r3, r3, #25
    419a:	bpl.n	41b0 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    419c:	ldr	r3, [pc, #100]	; (4204 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    419e:	ldr	r1, [pc, #104]	; (4208 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    41a0:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    41a2:	movs	r2, #0
    41a4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    41a6:	cbz	r3, 41aa <uart3_status_isr+0x6e>
    41a8:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    41aa:	ldr	r3, [pc, #64]	; (41ec <uart3_status_isr+0xb0>)
    41ac:	movs	r2, #44	; 0x2c
    41ae:	strb	r2, [r3, #3]
	}
}
    41b0:	pop	{r4, r5}
    41b2:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    41b4:	ldrb	r1, [r2, #4]
    41b6:	lsls	r1, r1, #24
    41b8:	bpl.n	4190 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    41ba:	ldr	r1, [pc, #80]	; (420c <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    41bc:	ldr	r0, [pc, #64]	; (4200 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    41be:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    41c0:	ldrb	r1, [r0, #0]
    41c2:	uxtb	r1, r1
		if (head == tail) {
    41c4:	cmp	r4, r1
    41c6:	beq.n	41e4 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    41c8:	adds	r2, r1, #1
    41ca:	cmp	r2, #39	; 0x27
    41cc:	itt	hi
    41ce:	movhi	r1, #0
    41d0:	movhi	r2, r1
			n = tx_buffer[tail];
    41d2:	ldr	r5, [pc, #60]	; (4210 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    41d4:	ldr	r4, [pc, #20]	; (41ec <uart3_status_isr+0xb0>)
    41d6:	it	ls
    41d8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    41da:	ldrb	r2, [r5, r2]
    41dc:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    41de:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    41e0:	strb	r1, [r0, #0]
    41e2:	b.n	4190 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    41e4:	movs	r1, #108	; 0x6c
    41e6:	strb	r1, [r2, #3]
    41e8:	b.n	4190 <uart3_status_isr+0x54>
    41ea:	nop
    41ec:	.word	0x4006d000
    41f0:	.word	0x1fff1b68
    41f4:	.word	0x1fff1b69
    41f8:	.word	0x1fff1b94
    41fc:	.word	0x1fff1b64
    4200:	.word	0x1fff1bd5
    4204:	.word	0x1fff1bd8
    4208:	.word	0x1fff1bd4
    420c:	.word	0x1fff1bdc
    4210:	.word	0x1fff1b6c

00004214 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    4214:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4216:	ldr	r4, [pc, #64]	; (4258 <fault_isr+0x44>)
    4218:	b.n	422c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    421a:	ldr	r3, [r4, #0]
    421c:	lsls	r1, r3, #21
    421e:	bmi.n	423c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4220:	ldr	r3, [r4, #0]
    4222:	lsls	r2, r3, #20
    4224:	bmi.n	4246 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4226:	ldr	r3, [r4, #0]
    4228:	lsls	r3, r3, #19
    422a:	bmi.n	4250 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    422c:	ldr	r3, [r4, #0]
    422e:	lsls	r0, r3, #13
    4230:	bpl.n	421a <fault_isr+0x6>
    4232:	bl	32b8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4236:	ldr	r3, [r4, #0]
    4238:	lsls	r1, r3, #21
    423a:	bpl.n	4220 <fault_isr+0xc>
    423c:	bl	4328 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4240:	ldr	r3, [r4, #0]
    4242:	lsls	r2, r3, #20
    4244:	bpl.n	4226 <fault_isr+0x12>
    4246:	bl	4010 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    424a:	ldr	r3, [r4, #0]
    424c:	lsls	r3, r3, #19
    424e:	bpl.n	422c <fault_isr+0x18>
    4250:	bl	4628 <uart2_status_isr>
    4254:	b.n	422c <fault_isr+0x18>
    4256:	nop
    4258:	.word	0x40048034

0000425c <unused_isr>:
	}
}

void unused_isr(void)
{
    425c:	push	{r3, lr}
	fault_isr();
    425e:	bl	4214 <fault_isr>
    4262:	nop

00004264 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4264:	ldr	r3, [pc, #4]	; (426c <startup_early_hook+0x8>)
    4266:	movs	r2, #16
    4268:	strh	r2, [r3, #0]
    426a:	bx	lr
    426c:	.word	0x40052000

00004270 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    4270:	bx	lr
    4272:	nop

00004274 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    4274:	ldr	r1, [pc, #36]	; (429c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    4276:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    4278:	ldr	r3, [r1, #0]
	if (incr != 0) {
    427a:	cbz	r0, 428a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    427c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    427e:	add	r0, r3
    4280:	sub.w	r2, r2, #8192	; 0x2000
    4284:	cmp	r0, r2
    4286:	bcs.n	428e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    4288:	str	r0, [r1, #0]
	}
	return prev;
    428a:	mov	r0, r3
}
    428c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    428e:	bl	48fc <__errno>
    4292:	movs	r3, #12
    4294:	str	r3, [r0, #0]
			return (void *)-1;
    4296:	mov.w	r0, #4294967295
    429a:	pop	{r3, pc}
    429c:	.word	0x1fff0c80

000042a0 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    42a0:	ldr	r2, [pc, #32]	; (42c4 <kinetis_hsrun_disable+0x24>)
    42a2:	ldrb	r3, [r2, #0]
    42a4:	cmp	r3, #128	; 0x80
    42a6:	beq.n	42ac <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    42a8:	movs	r0, #0
}
    42aa:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    42ac:	ldr	r1, [pc, #24]	; (42c8 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    42ae:	ldr	r3, [pc, #28]	; (42cc <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    42b0:	ldr	r0, [pc, #28]	; (42d0 <kinetis_hsrun_disable+0x30>)
    42b2:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    42b4:	movs	r1, #0
    42b6:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    42b8:	ldrb	r3, [r2, #0]
    42ba:	cmp	r3, #128	; 0x80
    42bc:	beq.n	42b8 <kinetis_hsrun_disable+0x18>
		return 1;
    42be:	movs	r0, #1
    42c0:	bx	lr
    42c2:	nop
    42c4:	.word	0x4007e003
    42c8:	.word	0x40048044
    42cc:	.word	0x4007e001
    42d0:	.word	0x22280000

000042d4 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    42d4:	ldr	r2, [pc, #36]	; (42fc <kinetis_hsrun_enable+0x28>)
    42d6:	ldrb	r3, [r2, #0]
    42d8:	cmp	r3, #1
    42da:	beq.n	42e0 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    42dc:	movs	r0, #0
}
    42de:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    42e0:	add.w	r3, r3, #1073741824	; 0x40000000
    42e4:	add.w	r3, r3, #516096	; 0x7e000
    42e8:	movs	r1, #96	; 0x60
    42ea:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    42ec:	ldrb	r3, [r2, #0]
    42ee:	cmp	r3, #128	; 0x80
    42f0:	bne.n	42ec <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    42f2:	ldr	r3, [pc, #12]	; (4300 <kinetis_hsrun_enable+0x2c>)
    42f4:	ldr	r2, [pc, #12]	; (4304 <kinetis_hsrun_enable+0x30>)
    42f6:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    42f8:	movs	r0, #1
    42fa:	bx	lr
    42fc:	.word	0x4007e003
    4300:	.word	0x40048044
    4304:	.word	0x02060000

00004308 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4308:	ldr	r2, [pc, #20]	; (4320 <serial_available+0x18>)
	tail = rx_buffer_tail;
    430a:	ldr	r3, [pc, #24]	; (4324 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    430c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    430e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4310:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4312:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4314:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    4316:	it	cc
    4318:	addcc	r0, #64	; 0x40
    431a:	subs	r0, r0, r3
}
    431c:	bx	lr
    431e:	nop
    4320:	.word	0x1fff1be4
    4324:	.word	0x1fff1be5

00004328 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    4328:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    432a:	ldr	r3, [pc, #224]	; (440c <uart0_status_isr+0xe4>)
    432c:	ldrb	r2, [r3, #4]
    432e:	tst.w	r2, #48	; 0x30
    4332:	beq.n	438e <uart0_status_isr+0x66>
		__disable_irq();
    4334:	cpsid	i
		avail = UART0_RCFIFO;
    4336:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4338:	and.w	r2, r1, #255	; 0xff
    433c:	cmp	r1, #0
    433e:	beq.n	43bc <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4340:	cpsie	i
			head = rx_buffer_head;
    4342:	ldr	r7, [pc, #204]	; (4410 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4344:	ldr	r1, [pc, #204]	; (4414 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4346:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4348:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    434a:	ldr	r6, [pc, #204]	; (4418 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    434c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    434e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4350:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    4352:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4354:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4356:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4358:	it	cs
    435a:	movcs	r3, #0
				if (newhead != tail) {
    435c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    435e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4362:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4364:	itt	ne
    4366:	strbne	r1, [r6, r3]
    4368:	movne	r0, r3
				}
			} while (--avail > 0);
    436a:	ands.w	r2, r2, #255	; 0xff
    436e:	bne.n	4352 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4370:	ldr	r3, [pc, #168]	; (441c <uart0_status_isr+0xf4>)
    4372:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4374:	uxtb	r2, r0
    4376:	strb	r2, [r7, #0]
			if (rts_pin) {
    4378:	cbz	r3, 438e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    437a:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    437c:	itet	cc
    437e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4382:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4384:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4386:	cmp	r0, #39	; 0x27
    4388:	itt	gt
    438a:	movgt	r2, #1
    438c:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    438e:	ldr	r1, [pc, #124]	; (440c <uart0_status_isr+0xe4>)
    4390:	ldrb	r2, [r1, #3]
    4392:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4394:	lsls	r5, r2, #24
    4396:	bmi.n	43c6 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    4398:	lsls	r2, r2, #25
    439a:	bpl.n	43b8 <uart0_status_isr+0x90>
    439c:	ldr	r3, [pc, #108]	; (440c <uart0_status_isr+0xe4>)
    439e:	ldrb	r3, [r3, #4]
    43a0:	lsls	r3, r3, #25
    43a2:	bpl.n	43b8 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    43a4:	ldr	r3, [pc, #120]	; (4420 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    43a6:	ldr	r1, [pc, #124]	; (4424 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    43a8:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    43aa:	movs	r2, #0
    43ac:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    43ae:	cbz	r3, 43b2 <uart0_status_isr+0x8a>
    43b0:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    43b2:	ldr	r3, [pc, #88]	; (440c <uart0_status_isr+0xe4>)
    43b4:	movs	r2, #60	; 0x3c
    43b6:	strb	r2, [r3, #3]
	}
}
    43b8:	pop	{r4, r5, r6, r7}
    43ba:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    43bc:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    43be:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    43c0:	strb	r2, [r3, #17]
			__enable_irq();
    43c2:	cpsie	i
    43c4:	b.n	438e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    43c6:	ldrb	r3, [r1, #4]
    43c8:	lsls	r4, r3, #24
    43ca:	bpl.n	4398 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    43cc:	ldr	r3, [pc, #88]	; (4428 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    43ce:	ldr	r6, [pc, #92]	; (442c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    43d0:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    43d2:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    43d4:	uxtb	r4, r4
		tail = tx_buffer_tail;
    43d6:	uxtb	r3, r3
		do {
			if (tail == head) break;
    43d8:	cmp	r4, r3
    43da:	beq.n	43fa <uart0_status_isr+0xd2>
    43dc:	ldr	r5, [pc, #80]	; (4430 <uart0_status_isr+0x108>)
    43de:	b.n	43e4 <uart0_status_isr+0xbc>
    43e0:	cmp	r3, r4
    43e2:	beq.n	43fa <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    43e4:	adds	r3, #1
    43e6:	cmp	r3, #64	; 0x40
    43e8:	it	cs
    43ea:	movcs	r3, #0
			avail = UART0_S1;
    43ec:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    43ee:	ldrb	r0, [r5, r3]
    43f0:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    43f2:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    43f4:	ldrb	r0, [r1, #20]
    43f6:	cmp	r0, #7
    43f8:	bls.n	43e0 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    43fa:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    43fc:	ldr	r1, [pc, #12]	; (440c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    43fe:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4400:	ldrb	r3, [r1, #4]
    4402:	lsls	r0, r3, #24
    4404:	itt	mi
    4406:	movmi	r3, #124	; 0x7c
    4408:	strbmi	r3, [r1, #3]
    440a:	b.n	4398 <uart0_status_isr+0x70>
    440c:	.word	0x4006a000
    4410:	.word	0x1fff1be4
    4414:	.word	0x1fff1be5
    4418:	.word	0x1fff1c28
    441c:	.word	0x1fff1be0
    4420:	.word	0x1fff1c6c
    4424:	.word	0x1fff1c68
    4428:	.word	0x1fff1c70
    442c:	.word	0x1fff1c69
    4430:	.word	0x1fff1be8

00004434 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4434:	ldr	r2, [pc, #20]	; (444c <serial6_available+0x18>)
	tail = rx_buffer_tail;
    4436:	ldr	r3, [pc, #24]	; (4450 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4438:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    443a:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    443c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    443e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4440:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    4442:	it	cc
    4444:	addcc	r0, #64	; 0x40
    4446:	subs	r0, r0, r3
}
    4448:	bx	lr
    444a:	nop
    444c:	.word	0x1fff1c78
    4450:	.word	0x1fff1c79

00004454 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    4454:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    4456:	ldr	r3, [pc, #176]	; (4508 <lpuart0_status_isr+0xb4>)
    4458:	ldr	r2, [r3, #4]
    445a:	lsls	r4, r2, #10
    445c:	bpl.n	449e <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    445e:	ldr	r0, [pc, #172]	; (450c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    4460:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    4462:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4464:	ldr	r1, [pc, #168]	; (4510 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4466:	adds	r3, #1
    4468:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    446a:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    446c:	it	gt
    446e:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4470:	cmp	r3, r1
    4472:	beq.n	447e <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    4474:	ldr	r4, [pc, #156]	; (4514 <lpuart0_status_isr+0xc0>)
    4476:	uxtb	r2, r2
			rx_buffer_head = head;
    4478:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    447a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    447c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    447e:	ldr	r2, [pc, #152]	; (4518 <lpuart0_status_isr+0xc4>)
    4480:	ldr	r1, [r2, #0]
    4482:	cbz	r1, 449e <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4484:	ldr	r2, [pc, #148]	; (451c <lpuart0_status_isr+0xc8>)
    4486:	ldrb	r2, [r2, #0]
    4488:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    448a:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    448c:	itet	cc
    448e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4492:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4494:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4496:	cmp	r3, #39	; 0x27
    4498:	itt	gt
    449a:	movgt	r3, #1
    449c:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    449e:	ldr	r2, [pc, #104]	; (4508 <lpuart0_status_isr+0xb4>)
    44a0:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    44a2:	lsls	r0, r3, #8
    44a4:	bpl.n	44ac <lpuart0_status_isr+0x58>
    44a6:	ldr	r2, [r2, #4]
    44a8:	lsls	r1, r2, #8
    44aa:	bmi.n	44d0 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    44ac:	lsls	r2, r3, #9
    44ae:	bpl.n	44cc <lpuart0_status_isr+0x78>
    44b0:	ldr	r3, [pc, #84]	; (4508 <lpuart0_status_isr+0xb4>)
    44b2:	ldr	r3, [r3, #4]
    44b4:	lsls	r3, r3, #9
    44b6:	bpl.n	44cc <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    44b8:	ldr	r3, [pc, #100]	; (4520 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    44ba:	ldr	r1, [pc, #104]	; (4524 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    44bc:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    44be:	movs	r2, #0
    44c0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    44c2:	cbz	r3, 44c6 <lpuart0_status_isr+0x72>
    44c4:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    44c6:	ldr	r3, [pc, #96]	; (4528 <lpuart0_status_isr+0xd4>)
    44c8:	movs	r2, #0
    44ca:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    44cc:	pop	{r4, r5}
    44ce:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    44d0:	ldr	r2, [pc, #88]	; (452c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    44d2:	ldr	r1, [pc, #72]	; (451c <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    44d4:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    44d6:	ldrb	r2, [r1, #0]
    44d8:	uxtb	r2, r2
		if (head == tail) {
    44da:	cmp	r0, r2
    44dc:	beq.n	44fa <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    44de:	adds	r2, #1
    44e0:	cmp	r2, #39	; 0x27
    44e2:	itt	hi
    44e4:	movhi	r0, #0
    44e6:	movhi	r2, r0
			n = tx_buffer[tail];
    44e8:	ldr	r5, [pc, #68]	; (4530 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    44ea:	ldr	r4, [pc, #28]	; (4508 <lpuart0_status_isr+0xb4>)
    44ec:	it	ls
    44ee:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    44f0:	ldrb	r2, [r5, r2]
    44f2:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    44f4:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    44f6:	strb	r0, [r1, #0]
    44f8:	b.n	44ac <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    44fa:	ldr	r0, [pc, #56]	; (4534 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    44fc:	ldr	r2, [pc, #40]	; (4528 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    44fe:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4500:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4502:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4504:	str	r1, [r2, #0]
    4506:	b.n	44ac <lpuart0_status_isr+0x58>
    4508:	.word	0x400c4000
    450c:	.word	0x1fff1c78
    4510:	.word	0x1fff1c79
    4514:	.word	0x1fff1ca4
    4518:	.word	0x1fff1c74
    451c:	.word	0x1fff1ce5
    4520:	.word	0x1fff1ce8
    4524:	.word	0x1fff1ce4
    4528:	.word	0x43880158
    452c:	.word	0x1fff1cec
    4530:	.word	0x1fff1c7c
    4534:	.word	0x4388015c

00004538 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4538:	push	{r4, lr}
    453a:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    453c:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    453e:	bl	42a0 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    4542:	ldr	r2, [pc, #96]	; (45a4 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4544:	ldr	r3, [pc, #96]	; (45a8 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    4546:	ldr	r1, [pc, #100]	; (45ac <usb_init_serialnumber+0x74>)
    4548:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    454a:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    454c:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    454e:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4550:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4552:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4554:	ldrb	r3, [r2, #0]
    4556:	lsls	r3, r3, #24
    4558:	bpl.n	4554 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    455a:	ldr	r3, [pc, #84]	; (45b0 <usb_init_serialnumber+0x78>)
    455c:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    455e:	bl	42d4 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    4562:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4564:	ldr	r3, [pc, #76]	; (45b4 <usb_init_serialnumber+0x7c>)
    4566:	cmp	r4, r3
    4568:	itt	ls
    456a:	addls.w	r4, r4, r4, lsl #2
    456e:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    4570:	mov	r0, r4
    4572:	ldr	r4, [pc, #68]	; (45b8 <usb_init_serialnumber+0x80>)
    4574:	add	r1, sp, #4
    4576:	movs	r2, #10
    4578:	bl	45bc <ultoa>
    457c:	add	r1, sp, #4
    457e:	mov	r0, r4
	for (i=0; i<10; i++) {
    4580:	movs	r3, #0
		char c = buf[i];
    4582:	ldrb.w	r2, [r1], #1
    4586:	adds	r3, #1
		if (!c) break;
    4588:	cbz	r2, 459a <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    458a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    458c:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4590:	bne.n	4582 <usb_init_serialnumber+0x4a>
    4592:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4594:	strb	r3, [r4, #0]
}
    4596:	add	sp, #16
    4598:	pop	{r4, pc}
    459a:	lsls	r3, r3, #1
    459c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    459e:	strb	r3, [r4, #0]
}
    45a0:	add	sp, #16
    45a2:	pop	{r4, pc}
    45a4:	.word	0x40020004
    45a8:	.word	0x40020000
    45ac:	.word	0x41070000
    45b0:	.word	0x4002000c
    45b4:	.word	0x0098967f
    45b8:	.word	0x1fff0d64

000045bc <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    45bc:	push	{r4, r5, r6, r7}
    45be:	subs	r5, r1, #1
    45c0:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    45c2:	movs	r4, #0
    45c4:	b.n	45c8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    45c6:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    45c8:	udiv	r3, r0, r2
    45cc:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    45d0:	cmp	r0, #9
    45d2:	add.w	r7, r0, #48	; 0x30
    45d6:	itet	hi
    45d8:	addhi	r0, #55	; 0x37
    45da:	uxtbls	r0, r7
    45dc:	uxtbhi	r0, r0
    45de:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    45e2:	mov	r0, r3
    45e4:	cmp	r3, #0
    45e6:	bne.n	45c6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    45e8:	adds	r2, r1, r4
    45ea:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    45ec:	cbz	r4, 4602 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    45ee:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    45f0:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    45f4:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    45f6:	adds	r3, #1
    45f8:	subs	r0, r4, r3
    45fa:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    45fc:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4600:	blt.n	45ee <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4602:	mov	r0, r1
    4604:	pop	{r4, r5, r6, r7}
    4606:	bx	lr

00004608 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4608:	ldr	r2, [pc, #20]	; (4620 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    460a:	ldr	r3, [pc, #24]	; (4624 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    460c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    460e:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4610:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4612:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4614:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    4616:	it	cc
    4618:	addcc	r0, #64	; 0x40
    461a:	subs	r0, r0, r3
}
    461c:	bx	lr
    461e:	nop
    4620:	.word	0x1fff1cf4
    4624:	.word	0x1fff1cf5

00004628 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4628:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    462a:	ldr	r3, [pc, #172]	; (46d8 <uart2_status_isr+0xb0>)
    462c:	ldrb	r2, [r3, #4]
    462e:	lsls	r4, r2, #26
    4630:	bpl.n	4672 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4632:	ldr	r0, [pc, #168]	; (46dc <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4634:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4636:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4638:	ldr	r1, [pc, #164]	; (46e0 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    463a:	adds	r3, #1
    463c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    463e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4640:	it	gt
    4642:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4644:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4646:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4648:	beq.n	4652 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    464a:	ldr	r4, [pc, #152]	; (46e4 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    464c:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    464e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4650:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4652:	ldr	r2, [pc, #148]	; (46e8 <uart2_status_isr+0xc0>)
    4654:	ldr	r1, [r2, #0]
    4656:	cbz	r1, 4672 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4658:	ldr	r2, [pc, #144]	; (46ec <uart2_status_isr+0xc4>)
    465a:	ldrb	r2, [r2, #0]
    465c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    465e:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4660:	itet	cc
    4662:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4666:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4668:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    466a:	cmp	r3, #39	; 0x27
    466c:	itt	gt
    466e:	movgt	r3, #1
    4670:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4672:	ldr	r2, [pc, #100]	; (46d8 <uart2_status_isr+0xb0>)
    4674:	ldrb	r3, [r2, #3]
    4676:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4678:	lsls	r0, r3, #24
    467a:	bmi.n	46a0 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    467c:	lsls	r2, r3, #25
    467e:	bpl.n	469c <uart2_status_isr+0x74>
    4680:	ldr	r3, [pc, #84]	; (46d8 <uart2_status_isr+0xb0>)
    4682:	ldrb	r3, [r3, #4]
    4684:	lsls	r3, r3, #25
    4686:	bpl.n	469c <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4688:	ldr	r3, [pc, #100]	; (46f0 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    468a:	ldr	r1, [pc, #104]	; (46f4 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    468c:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    468e:	movs	r2, #0
    4690:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4692:	cbz	r3, 4696 <uart2_status_isr+0x6e>
    4694:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    4696:	ldr	r3, [pc, #64]	; (46d8 <uart2_status_isr+0xb0>)
    4698:	movs	r2, #44	; 0x2c
    469a:	strb	r2, [r3, #3]
	}
}
    469c:	pop	{r4, r5}
    469e:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    46a0:	ldrb	r1, [r2, #4]
    46a2:	lsls	r1, r1, #24
    46a4:	bpl.n	467c <uart2_status_isr+0x54>
		head = tx_buffer_head;
    46a6:	ldr	r1, [pc, #80]	; (46f8 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    46a8:	ldr	r0, [pc, #64]	; (46ec <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    46aa:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    46ac:	ldrb	r1, [r0, #0]
    46ae:	uxtb	r1, r1
		if (head == tail) {
    46b0:	cmp	r4, r1
    46b2:	beq.n	46d0 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    46b4:	adds	r2, r1, #1
    46b6:	cmp	r2, #39	; 0x27
    46b8:	itt	hi
    46ba:	movhi	r1, #0
    46bc:	movhi	r2, r1
			n = tx_buffer[tail];
    46be:	ldr	r5, [pc, #60]	; (46fc <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    46c0:	ldr	r4, [pc, #20]	; (46d8 <uart2_status_isr+0xb0>)
    46c2:	it	ls
    46c4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    46c6:	ldrb	r2, [r5, r2]
    46c8:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    46ca:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    46cc:	strb	r1, [r0, #0]
    46ce:	b.n	467c <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    46d0:	movs	r1, #108	; 0x6c
    46d2:	strb	r1, [r2, #3]
    46d4:	b.n	467c <uart2_status_isr+0x54>
    46d6:	nop
    46d8:	.word	0x4006c000
    46dc:	.word	0x1fff1cf4
    46e0:	.word	0x1fff1cf5
    46e4:	.word	0x1fff1d20
    46e8:	.word	0x1fff1cf0
    46ec:	.word	0x1fff1d61
    46f0:	.word	0x1fff1d64
    46f4:	.word	0x1fff1d60
    46f8:	.word	0x1fff1d68
    46fc:	.word	0x1fff1cf8

00004700 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4700:	bx	lr
    4702:	nop

00004704 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4704:	bx	lr
    4706:	nop

00004708 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4708:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    470a:	mrs	r2, PRIMASK
		__disable_irq();
    470e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4710:	ldrb	r3, [r0, #29]
    4712:	cbnz	r3, 4722 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4714:	ldrb	r1, [r0, #28]
    4716:	cmp	r1, #1
    4718:	beq.n	472c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    471a:	cmp	r1, #3
    471c:	beq.n	4740 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    471e:	movs	r3, #1
    4720:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4722:	cbnz	r2, 4726 <EventResponder::triggerEventNotImmediate()+0x1e>
    4724:	cpsie	i
	}
	enableInterrupts(irq);
}
    4726:	ldr.w	r4, [sp], #4
    472a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    472c:	ldr	r4, [pc, #68]	; (4774 <EventResponder::triggerEventNotImmediate()+0x6c>)
    472e:	ldr	r1, [r4, #0]
    4730:	cbz	r1, 475c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4732:	ldr	r1, [pc, #68]	; (4778 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4734:	str	r3, [r0, #20]
				_prev = lastYield;
    4736:	ldr	r3, [r1, #0]
    4738:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    473a:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    473c:	str	r0, [r3, #20]
    473e:	b.n	471e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4740:	ldr	r4, [pc, #56]	; (477c <EventResponder::triggerEventNotImmediate()+0x74>)
    4742:	ldr	r1, [r4, #0]
    4744:	cbz	r1, 4768 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4746:	ldr	r1, [pc, #56]	; (4780 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4748:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    474a:	ldr	r3, [r1, #0]
    474c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    474e:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4750:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4752:	ldr	r3, [pc, #48]	; (4784 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4754:	mov.w	r1, #268435456	; 0x10000000
    4758:	str	r1, [r3, #0]
    475a:	b.n	471e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    475c:	ldr	r3, [pc, #24]	; (4778 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    475e:	str	r1, [r0, #20]
				_prev = nullptr;
    4760:	str	r1, [r0, #24]
				firstYield = this;
    4762:	str	r0, [r4, #0]
				lastYield = this;
    4764:	str	r0, [r3, #0]
    4766:	b.n	471e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4768:	ldr	r3, [pc, #20]	; (4780 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    476a:	str	r1, [r0, #20]
				_prev = nullptr;
    476c:	str	r1, [r0, #24]
				firstInterrupt = this;
    476e:	str	r0, [r4, #0]
				lastInterrupt = this;
    4770:	str	r0, [r3, #0]
    4772:	b.n	4752 <EventResponder::triggerEventNotImmediate()+0x4a>
    4774:	.word	0x1fff1d7c
    4778:	.word	0x1fff1d78
    477c:	.word	0x1fff1d6c
    4780:	.word	0x1fff1d70
    4784:	.word	0xe000ed04

00004788 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4788:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    478a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    478c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    478e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4790:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4792:	beq.n	479c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4794:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4798:	b.w	4708 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    479c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    479e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    47a2:	bx	r3

000047a4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    47a4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    47a6:	mrs	r2, PRIMASK
		__disable_irq();
    47aa:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    47ac:	ldr	r4, [pc, #48]	; (47e0 <EventResponder::runFromInterrupt()+0x3c>)
    47ae:	ldr	r0, [r4, #0]
		if (first) {
    47b0:	cbz	r0, 47d4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    47b2:	ldr	r6, [pc, #48]	; (47e4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    47b4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    47b6:	ldr	r3, [r0, #20]
    47b8:	str	r3, [r4, #0]
			if (firstInterrupt) {
    47ba:	cbz	r3, 47da <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    47bc:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    47be:	cbnz	r2, 47c2 <EventResponder::runFromInterrupt()+0x1e>
    47c0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    47c2:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    47c4:	ldr	r3, [r0, #8]
    47c6:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    47c8:	mrs	r2, PRIMASK
		__disable_irq();
    47cc:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    47ce:	ldr	r0, [r4, #0]
		if (first) {
    47d0:	cmp	r0, #0
    47d2:	bne.n	47b6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    47d4:	cbnz	r2, 47d8 <EventResponder::runFromInterrupt()+0x34>
    47d6:	cpsie	i
    47d8:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    47da:	str	r3, [r6, #0]
    47dc:	b.n	47be <EventResponder::runFromInterrupt()+0x1a>
    47de:	nop
    47e0:	.word	0x1fff1d6c
    47e4:	.word	0x1fff1d70

000047e8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    47e8:	b.w	47a4 <EventResponder::runFromInterrupt()>

000047ec <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    47ec:	ldr	r2, [pc, #96]	; (4850 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    47ee:	push	{r4, r5}
	if (listActive == nullptr) {
    47f0:	ldr	r4, [r2, #0]
    47f2:	cmp	r4, #0
    47f4:	beq.n	4846 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    47f6:	ldr	r3, [r0, #0]
    47f8:	ldr	r1, [r4, #0]
    47fa:	cmp	r3, r1
    47fc:	bcs.n	481c <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    47fe:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4800:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4802:	str	r4, [r0, #8]
		_prev = nullptr;
    4804:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4806:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4808:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    480a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    480c:	movs	r3, #2
    480e:	strb	r3, [r0, #20]
}
    4810:	pop	{r4, r5}
    4812:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4814:	ldr	r1, [r2, #0]
    4816:	cmp	r3, r1
    4818:	mov	r4, r2
    481a:	bcc.n	482e <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    481c:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    481e:	subs	r3, r3, r1
    4820:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4822:	cmp	r2, #0
    4824:	bne.n	4814 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4826:	str	r2, [r0, #8]
		_prev = timer;
    4828:	str	r4, [r0, #12]
		timer->_next = this;
    482a:	str	r0, [r4, #8]
    482c:	b.n	480c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    482e:	ldr	r2, [r2, #12]
    4830:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4832:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4834:	str	r0, [r4, #12]
				_prev->_next = this;
    4836:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4838:	subs	r3, r1, r3
				_state = TimerActive;
    483a:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    483c:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    483e:	str	r3, [r4, #0]
				_state = TimerActive;
    4840:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4842:	pop	{r4, r5}
    4844:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4846:	str	r4, [r0, #8]
		_prev = nullptr;
    4848:	str	r4, [r0, #12]
		listActive = this;
    484a:	str	r0, [r2, #0]
    484c:	b.n	480c <MillisTimer::addToActiveList()+0x20>
    484e:	nop
    4850:	.word	0x1fff1d74

00004854 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4854:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4856:	ldr	r6, [pc, #136]	; (48e0 <MillisTimer::runFromTimer()+0x8c>)
    4858:	ldr	r4, [r6, #0]
	while (timer) {
    485a:	cbz	r4, 48a8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    485c:	ldr	r3, [r4, #0]
    485e:	cmp	r3, #0
    4860:	bne.n	48d8 <MillisTimer::runFromTimer()+0x84>
    4862:	ldr	r7, [pc, #128]	; (48e4 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4864:	mov	r5, r3
    4866:	b.n	4872 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4868:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    486a:	cbz	r4, 48a8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    486c:	ldr	r3, [r4, #0]
    486e:	cmp	r3, #0
    4870:	bne.n	48d8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4872:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4874:	cbz	r3, 4878 <MillisTimer::runFromTimer()+0x24>
    4876:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4878:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    487a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    487c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    487e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4880:	ldr	r3, [r3, #0]
    4882:	cmp	r3, r7
    4884:	bne.n	48ca <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4886:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4888:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    488a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    488c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    488e:	beq.n	48d2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4890:	bl	4708 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4894:	ldr	r3, [r4, #4]
    4896:	cmp	r3, #0
    4898:	beq.n	4868 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    489a:	str	r3, [r4, #0]
				timer->addToActiveList();
    489c:	mov	r0, r4
    489e:	bl	47ec <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    48a2:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    48a4:	cmp	r4, #0
    48a6:	bne.n	486c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    48a8:	mrs	r3, PRIMASK
		__disable_irq();
    48ac:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    48ae:	ldr	r2, [pc, #56]	; (48e8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    48b0:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    48b2:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    48b4:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    48b6:	cbnz	r3, 48ba <MillisTimer::runFromTimer()+0x66>
    48b8:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    48ba:	cbz	r0, 48c8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    48bc:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    48be:	bl	47ec <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    48c2:	mov	r0, r4
    48c4:	cmp	r0, #0
    48c6:	bne.n	48bc <MillisTimer::runFromTimer()+0x68>
    48c8:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    48ca:	mov	r2, r4
    48cc:	movs	r1, #0
    48ce:	blx	r3
    48d0:	b.n	4894 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    48d2:	ldr	r3, [r0, #8]
    48d4:	blx	r3
    48d6:	b.n	4894 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    48d8:	subs	r3, #1
    48da:	str	r3, [r4, #0]
			break;
    48dc:	b.n	48a8 <MillisTimer::runFromTimer()+0x54>
    48de:	nop
    48e0:	.word	0x1fff1d74
    48e4:	.word	0x00004789
    48e8:	.word	0x1fff1d84

000048ec <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    48ec:	ldr	r2, [pc, #8]	; (48f8 <systick_isr+0xc>)
    48ee:	ldr	r3, [r2, #0]
    48f0:	adds	r3, #1
    48f2:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    48f4:	b.w	4854 <MillisTimer::runFromTimer()>
    48f8:	.word	0x1fff190c

000048fc <__errno>:
    48fc:	ldr	r3, [pc, #4]	; (4904 <__errno+0x8>)
    48fe:	ldr	r0, [r3, #0]
    4900:	bx	lr
    4902:	nop
    4904:	.word	0x1fff11a8

00004908 <__libc_init_array>:
    4908:	push	{r4, r5, r6, lr}
    490a:	ldr	r6, [pc, #60]	; (4948 <__libc_init_array+0x40>)
    490c:	ldr	r5, [pc, #60]	; (494c <__libc_init_array+0x44>)
    490e:	subs	r6, r6, r5
    4910:	asrs	r6, r6, #2
    4912:	it	ne
    4914:	movne	r4, #0
    4916:	beq.n	4924 <__libc_init_array+0x1c>
    4918:	adds	r4, #1
    491a:	ldr.w	r3, [r5], #4
    491e:	blx	r3
    4920:	cmp	r6, r4
    4922:	bne.n	4918 <__libc_init_array+0x10>
    4924:	ldr	r6, [pc, #40]	; (4950 <__libc_init_array+0x48>)
    4926:	ldr	r5, [pc, #44]	; (4954 <__libc_init_array+0x4c>)
    4928:	subs	r6, r6, r5
    492a:	bl	55b4 <_init>
    492e:	asrs	r6, r6, #2
    4930:	it	ne
    4932:	movne	r4, #0
    4934:	beq.n	4944 <__libc_init_array+0x3c>
    4936:	adds	r4, #1
    4938:	ldr.w	r3, [r5], #4
    493c:	blx	r3
    493e:	cmp	r6, r4
    4940:	bne.n	4936 <__libc_init_array+0x2e>
    4942:	pop	{r4, r5, r6, pc}
    4944:	pop	{r4, r5, r6, pc}
    4946:	nop
    4948:	.word	0x000055c0
    494c:	.word	0x000055c0
    4950:	.word	0x000055cc
    4954:	.word	0x000055c0

00004958 <malloc>:
    4958:	ldr	r3, [pc, #8]	; (4964 <malloc+0xc>)
    495a:	mov	r1, r0
    495c:	ldr	r0, [r3, #0]
    495e:	b.w	4968 <_malloc_r>
    4962:	nop
    4964:	.word	0x1fff11a8

00004968 <_malloc_r>:
    4968:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    496c:	add.w	r5, r1, #11
    4970:	cmp	r5, #22
    4972:	sub	sp, #12
    4974:	mov	r6, r0
    4976:	bls.w	4ab8 <_malloc_r+0x150>
    497a:	bics.w	r5, r5, #7
    497e:	bmi.w	4b00 <_malloc_r+0x198>
    4982:	cmp	r1, r5
    4984:	bhi.w	4b00 <_malloc_r+0x198>
    4988:	bl	4ed8 <__malloc_lock>
    498c:	cmp.w	r5, #504	; 0x1f8
    4990:	bcc.w	4ecc <_malloc_r+0x564>
    4994:	lsrs	r3, r5, #9
    4996:	beq.w	4b0e <_malloc_r+0x1a6>
    499a:	cmp	r3, #4
    499c:	bhi.w	4ca6 <_malloc_r+0x33e>
    49a0:	lsrs	r0, r5, #6
    49a2:	add.w	lr, r0, #57	; 0x39
    49a6:	mov.w	r3, lr, lsl #1
    49aa:	adds	r0, #56	; 0x38
    49ac:	ldr	r7, [pc, #784]	; (4cc0 <_malloc_r+0x358>)
    49ae:	add.w	r3, r7, r3, lsl #2
    49b2:	sub.w	r1, r3, #8
    49b6:	ldr	r4, [r3, #4]
    49b8:	cmp	r1, r4
    49ba:	bne.n	49cc <_malloc_r+0x64>
    49bc:	b.n	4b18 <_malloc_r+0x1b0>
    49be:	cmp	r2, #0
    49c0:	bge.w	4b1c <_malloc_r+0x1b4>
    49c4:	ldr	r4, [r4, #12]
    49c6:	cmp	r1, r4
    49c8:	beq.w	4b18 <_malloc_r+0x1b0>
    49cc:	ldr	r3, [r4, #4]
    49ce:	bic.w	r3, r3, #3
    49d2:	subs	r2, r3, r5
    49d4:	cmp	r2, #15
    49d6:	ble.n	49be <_malloc_r+0x56>
    49d8:	ldr	r1, [pc, #740]	; (4cc0 <_malloc_r+0x358>)
    49da:	ldr	r4, [r7, #16]
    49dc:	add.w	lr, r1, #8
    49e0:	cmp	r4, lr
    49e2:	beq.w	4d4c <_malloc_r+0x3e4>
    49e6:	ldr	r3, [r4, #4]
    49e8:	bic.w	r3, r3, #3
    49ec:	subs	r2, r3, r5
    49ee:	cmp	r2, #15
    49f0:	bgt.w	4d26 <_malloc_r+0x3be>
    49f4:	cmp	r2, #0
    49f6:	str.w	lr, [r1, #20]
    49fa:	str.w	lr, [r1, #16]
    49fe:	bge.w	4b3e <_malloc_r+0x1d6>
    4a02:	cmp.w	r3, #512	; 0x200
    4a06:	bcs.w	4cd8 <_malloc_r+0x370>
    4a0a:	lsrs	r3, r3, #3
    4a0c:	add.w	ip, r3, #1
    4a10:	movs	r2, #1
    4a12:	asrs	r3, r3, #2
    4a14:	lsl.w	r3, r2, r3
    4a18:	ldr	r2, [r1, #4]
    4a1a:	ldr.w	r8, [r1, ip, lsl #3]
    4a1e:	str.w	r8, [r4, #8]
    4a22:	add.w	r9, r1, ip, lsl #3
    4a26:	orrs	r2, r3
    4a28:	sub.w	r3, r9, #8
    4a2c:	str	r3, [r4, #12]
    4a2e:	str	r2, [r1, #4]
    4a30:	str.w	r4, [r1, ip, lsl #3]
    4a34:	str.w	r4, [r8, #12]
    4a38:	asrs	r3, r0, #2
    4a3a:	movs	r4, #1
    4a3c:	lsls	r4, r3
    4a3e:	cmp	r4, r2
    4a40:	bhi.w	4b58 <_malloc_r+0x1f0>
    4a44:	tst	r4, r2
    4a46:	bne.n	4a56 <_malloc_r+0xee>
    4a48:	bic.w	r0, r0, #3
    4a4c:	lsls	r4, r4, #1
    4a4e:	tst	r4, r2
    4a50:	add.w	r0, r0, #4
    4a54:	beq.n	4a4c <_malloc_r+0xe4>
    4a56:	add.w	r9, r7, r0, lsl #3
    4a5a:	mov	ip, r9
    4a5c:	mov	r8, r0
    4a5e:	ldr.w	r1, [ip, #12]
    4a62:	cmp	ip, r1
    4a64:	bne.n	4a76 <_malloc_r+0x10e>
    4a66:	b.n	4d50 <_malloc_r+0x3e8>
    4a68:	cmp	r2, #0
    4a6a:	bge.w	4d70 <_malloc_r+0x408>
    4a6e:	ldr	r1, [r1, #12]
    4a70:	cmp	ip, r1
    4a72:	beq.w	4d50 <_malloc_r+0x3e8>
    4a76:	ldr	r3, [r1, #4]
    4a78:	bic.w	r3, r3, #3
    4a7c:	subs	r2, r3, r5
    4a7e:	cmp	r2, #15
    4a80:	ble.n	4a68 <_malloc_r+0x100>
    4a82:	mov	r4, r1
    4a84:	ldr.w	ip, [r1, #12]
    4a88:	ldr.w	r8, [r4, #8]!
    4a8c:	adds	r3, r1, r5
    4a8e:	orr.w	r5, r5, #1
    4a92:	str	r5, [r1, #4]
    4a94:	orr.w	r1, r2, #1
    4a98:	str.w	ip, [r8, #12]
    4a9c:	mov	r0, r6
    4a9e:	str.w	r8, [ip, #8]
    4aa2:	str	r3, [r7, #20]
    4aa4:	str	r3, [r7, #16]
    4aa6:	str.w	lr, [r3, #12]
    4aaa:	str.w	lr, [r3, #8]
    4aae:	str	r1, [r3, #4]
    4ab0:	str	r2, [r3, r2]
    4ab2:	bl	4edc <__malloc_unlock>
    4ab6:	b.n	4af8 <_malloc_r+0x190>
    4ab8:	cmp	r1, #16
    4aba:	bhi.n	4b00 <_malloc_r+0x198>
    4abc:	bl	4ed8 <__malloc_lock>
    4ac0:	movs	r5, #16
    4ac2:	movs	r3, #6
    4ac4:	movs	r0, #2
    4ac6:	ldr	r7, [pc, #504]	; (4cc0 <_malloc_r+0x358>)
    4ac8:	add.w	r3, r7, r3, lsl #2
    4acc:	sub.w	r2, r3, #8
    4ad0:	ldr	r4, [r3, #4]
    4ad2:	cmp	r4, r2
    4ad4:	beq.w	4d62 <_malloc_r+0x3fa>
    4ad8:	ldr	r3, [r4, #4]
    4ada:	ldr	r1, [r4, #12]
    4adc:	ldr	r5, [r4, #8]
    4ade:	bic.w	r3, r3, #3
    4ae2:	add	r3, r4
    4ae4:	mov	r0, r6
    4ae6:	ldr	r2, [r3, #4]
    4ae8:	str	r1, [r5, #12]
    4aea:	orr.w	r2, r2, #1
    4aee:	str	r5, [r1, #8]
    4af0:	str	r2, [r3, #4]
    4af2:	bl	4edc <__malloc_unlock>
    4af6:	adds	r4, #8
    4af8:	mov	r0, r4
    4afa:	add	sp, #12
    4afc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b00:	movs	r4, #0
    4b02:	movs	r3, #12
    4b04:	mov	r0, r4
    4b06:	str	r3, [r6, #0]
    4b08:	add	sp, #12
    4b0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b0e:	movs	r3, #128	; 0x80
    4b10:	mov.w	lr, #64	; 0x40
    4b14:	movs	r0, #63	; 0x3f
    4b16:	b.n	49ac <_malloc_r+0x44>
    4b18:	mov	r0, lr
    4b1a:	b.n	49d8 <_malloc_r+0x70>
    4b1c:	add	r3, r4
    4b1e:	ldr	r1, [r4, #12]
    4b20:	ldr	r2, [r3, #4]
    4b22:	ldr	r5, [r4, #8]
    4b24:	orr.w	r2, r2, #1
    4b28:	str	r1, [r5, #12]
    4b2a:	mov	r0, r6
    4b2c:	str	r5, [r1, #8]
    4b2e:	str	r2, [r3, #4]
    4b30:	bl	4edc <__malloc_unlock>
    4b34:	adds	r4, #8
    4b36:	mov	r0, r4
    4b38:	add	sp, #12
    4b3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b3e:	add	r3, r4
    4b40:	mov	r0, r6
    4b42:	ldr	r2, [r3, #4]
    4b44:	orr.w	r2, r2, #1
    4b48:	str	r2, [r3, #4]
    4b4a:	bl	4edc <__malloc_unlock>
    4b4e:	adds	r4, #8
    4b50:	mov	r0, r4
    4b52:	add	sp, #12
    4b54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b58:	ldr	r4, [r7, #8]
    4b5a:	ldr	r3, [r4, #4]
    4b5c:	bic.w	r8, r3, #3
    4b60:	cmp	r8, r5
    4b62:	bcc.n	4b6e <_malloc_r+0x206>
    4b64:	rsb	r3, r5, r8
    4b68:	cmp	r3, #15
    4b6a:	bgt.w	4c86 <_malloc_r+0x31e>
    4b6e:	ldr	r3, [pc, #340]	; (4cc4 <_malloc_r+0x35c>)
    4b70:	ldr.w	r9, [pc, #352]	; 4cd4 <_malloc_r+0x36c>
    4b74:	ldr	r2, [r3, #0]
    4b76:	ldr.w	r3, [r9]
    4b7a:	adds	r3, #1
    4b7c:	add	r2, r5
    4b7e:	add.w	sl, r4, r8
    4b82:	beq.w	4e46 <_malloc_r+0x4de>
    4b86:	add.w	r2, r2, #4096	; 0x1000
    4b8a:	adds	r2, #15
    4b8c:	bic.w	r2, r2, #4080	; 0xff0
    4b90:	bic.w	r2, r2, #15
    4b94:	mov	r1, r2
    4b96:	mov	r0, r6
    4b98:	str	r2, [sp, #4]
    4b9a:	bl	4ee0 <_sbrk_r>
    4b9e:	cmp.w	r0, #4294967295
    4ba2:	mov	fp, r0
    4ba4:	ldr	r2, [sp, #4]
    4ba6:	beq.w	4e5a <_malloc_r+0x4f2>
    4baa:	cmp	sl, r0
    4bac:	bhi.w	4da8 <_malloc_r+0x440>
    4bb0:	ldr	r3, [pc, #276]	; (4cc8 <_malloc_r+0x360>)
    4bb2:	ldr	r1, [r3, #0]
    4bb4:	cmp	sl, fp
    4bb6:	add	r1, r2
    4bb8:	str	r1, [r3, #0]
    4bba:	beq.w	4e64 <_malloc_r+0x4fc>
    4bbe:	ldr.w	r0, [r9]
    4bc2:	ldr.w	lr, [pc, #272]	; 4cd4 <_malloc_r+0x36c>
    4bc6:	adds	r0, #1
    4bc8:	ittet	ne
    4bca:	rsbne	sl, sl, fp
    4bce:	addne	r1, sl
    4bd0:	streq.w	fp, [lr]
    4bd4:	strne	r1, [r3, #0]
    4bd6:	ands.w	r1, fp, #7
    4bda:	beq.w	4e0c <_malloc_r+0x4a4>
    4bde:	rsb	r0, r1, #8
    4be2:	rsb	r1, r1, #4096	; 0x1000
    4be6:	add	fp, r0
    4be8:	adds	r1, #8
    4bea:	add	r2, fp
    4bec:	ubfx	r2, r2, #0, #12
    4bf0:	rsb	r9, r2, r1
    4bf4:	mov	r1, r9
    4bf6:	mov	r0, r6
    4bf8:	str	r3, [sp, #4]
    4bfa:	bl	4ee0 <_sbrk_r>
    4bfe:	adds	r3, r0, #1
    4c00:	ldr	r3, [sp, #4]
    4c02:	beq.w	4e84 <_malloc_r+0x51c>
    4c06:	rsb	r2, fp, r0
    4c0a:	add	r2, r9
    4c0c:	orr.w	r2, r2, #1
    4c10:	ldr	r1, [r3, #0]
    4c12:	str.w	fp, [r7, #8]
    4c16:	add	r1, r9
    4c18:	cmp	r4, r7
    4c1a:	str.w	r2, [fp, #4]
    4c1e:	str	r1, [r3, #0]
    4c20:	ldr.w	r9, [pc, #164]	; 4cc8 <_malloc_r+0x360>
    4c24:	beq.n	4c54 <_malloc_r+0x2ec>
    4c26:	cmp.w	r8, #15
    4c2a:	bls.w	4e28 <_malloc_r+0x4c0>
    4c2e:	ldr	r2, [r4, #4]
    4c30:	sub.w	r3, r8, #12
    4c34:	bic.w	r3, r3, #7
    4c38:	adds	r0, r4, r3
    4c3a:	and.w	r2, r2, #1
    4c3e:	mov.w	lr, #5
    4c42:	orrs	r2, r3
    4c44:	cmp	r3, #15
    4c46:	str	r2, [r4, #4]
    4c48:	str.w	lr, [r0, #4]
    4c4c:	str.w	lr, [r0, #8]
    4c50:	bhi.w	4e8c <_malloc_r+0x524>
    4c54:	ldr	r3, [pc, #116]	; (4ccc <_malloc_r+0x364>)
    4c56:	ldr	r4, [r7, #8]
    4c58:	ldr	r2, [r3, #0]
    4c5a:	cmp	r1, r2
    4c5c:	it	hi
    4c5e:	strhi	r1, [r3, #0]
    4c60:	ldr	r3, [pc, #108]	; (4cd0 <_malloc_r+0x368>)
    4c62:	ldr	r2, [r3, #0]
    4c64:	cmp	r1, r2
    4c66:	ldr	r2, [r4, #4]
    4c68:	it	hi
    4c6a:	strhi	r1, [r3, #0]
    4c6c:	bic.w	r2, r2, #3
    4c70:	cmp	r5, r2
    4c72:	sub.w	r3, r2, r5
    4c76:	bhi.n	4c7c <_malloc_r+0x314>
    4c78:	cmp	r3, #15
    4c7a:	bgt.n	4c86 <_malloc_r+0x31e>
    4c7c:	mov	r0, r6
    4c7e:	bl	4edc <__malloc_unlock>
    4c82:	movs	r4, #0
    4c84:	b.n	4af8 <_malloc_r+0x190>
    4c86:	adds	r2, r4, r5
    4c88:	orr.w	r3, r3, #1
    4c8c:	orr.w	r5, r5, #1
    4c90:	str	r5, [r4, #4]
    4c92:	mov	r0, r6
    4c94:	str	r2, [r7, #8]
    4c96:	str	r3, [r2, #4]
    4c98:	bl	4edc <__malloc_unlock>
    4c9c:	adds	r4, #8
    4c9e:	mov	r0, r4
    4ca0:	add	sp, #12
    4ca2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ca6:	cmp	r3, #20
    4ca8:	bls.n	4d8e <_malloc_r+0x426>
    4caa:	cmp	r3, #84	; 0x54
    4cac:	bhi.w	4df8 <_malloc_r+0x490>
    4cb0:	lsrs	r0, r5, #12
    4cb2:	add.w	lr, r0, #111	; 0x6f
    4cb6:	mov.w	r3, lr, lsl #1
    4cba:	adds	r0, #110	; 0x6e
    4cbc:	b.n	49ac <_malloc_r+0x44>
    4cbe:	nop
    4cc0:	.word	0x1fff11ac
    4cc4:	.word	0x1fff1d90
    4cc8:	.word	0x1fff1d94
    4ccc:	.word	0x1fff1d8c
    4cd0:	.word	0x1fff1d88
    4cd4:	.word	0x1fff15b8
    4cd8:	lsrs	r2, r3, #9
    4cda:	cmp	r2, #4
    4cdc:	bls.n	4d9c <_malloc_r+0x434>
    4cde:	cmp	r2, #20
    4ce0:	bhi.w	4e4a <_malloc_r+0x4e2>
    4ce4:	add.w	r1, r2, #92	; 0x5c
    4ce8:	lsls	r1, r1, #1
    4cea:	adds	r2, #91	; 0x5b
    4cec:	add.w	ip, r7, r1, lsl #2
    4cf0:	ldr.w	r1, [r7, r1, lsl #2]
    4cf4:	ldr.w	r8, [pc, #476]	; 4ed4 <_malloc_r+0x56c>
    4cf8:	sub.w	ip, ip, #8
    4cfc:	cmp	ip, r1
    4cfe:	beq.w	4e12 <_malloc_r+0x4aa>
    4d02:	ldr	r2, [r1, #4]
    4d04:	bic.w	r2, r2, #3
    4d08:	cmp	r3, r2
    4d0a:	bcs.n	4d12 <_malloc_r+0x3aa>
    4d0c:	ldr	r1, [r1, #8]
    4d0e:	cmp	ip, r1
    4d10:	bne.n	4d02 <_malloc_r+0x39a>
    4d12:	ldr.w	ip, [r1, #12]
    4d16:	ldr	r2, [r7, #4]
    4d18:	str.w	ip, [r4, #12]
    4d1c:	str	r1, [r4, #8]
    4d1e:	str.w	r4, [ip, #8]
    4d22:	str	r4, [r1, #12]
    4d24:	b.n	4a38 <_malloc_r+0xd0>
    4d26:	adds	r3, r4, r5
    4d28:	orr.w	r7, r2, #1
    4d2c:	orr.w	r5, r5, #1
    4d30:	str	r5, [r4, #4]
    4d32:	mov	r0, r6
    4d34:	str	r3, [r1, #20]
    4d36:	str	r3, [r1, #16]
    4d38:	str.w	lr, [r3, #12]
    4d3c:	str.w	lr, [r3, #8]
    4d40:	str	r7, [r3, #4]
    4d42:	str	r2, [r3, r2]
    4d44:	adds	r4, #8
    4d46:	bl	4edc <__malloc_unlock>
    4d4a:	b.n	4af8 <_malloc_r+0x190>
    4d4c:	ldr	r2, [r1, #4]
    4d4e:	b.n	4a38 <_malloc_r+0xd0>
    4d50:	add.w	r8, r8, #1
    4d54:	tst.w	r8, #3
    4d58:	add.w	ip, ip, #8
    4d5c:	bne.w	4a5e <_malloc_r+0xf6>
    4d60:	b.n	4dc4 <_malloc_r+0x45c>
    4d62:	ldr	r4, [r3, #12]
    4d64:	cmp	r3, r4
    4d66:	it	eq
    4d68:	addeq	r0, #2
    4d6a:	beq.w	49d8 <_malloc_r+0x70>
    4d6e:	b.n	4ad8 <_malloc_r+0x170>
    4d70:	add	r3, r1
    4d72:	mov	r4, r1
    4d74:	ldr	r2, [r3, #4]
    4d76:	ldr	r1, [r1, #12]
    4d78:	ldr.w	r5, [r4, #8]!
    4d7c:	orr.w	r2, r2, #1
    4d80:	str	r2, [r3, #4]
    4d82:	mov	r0, r6
    4d84:	str	r1, [r5, #12]
    4d86:	str	r5, [r1, #8]
    4d88:	bl	4edc <__malloc_unlock>
    4d8c:	b.n	4af8 <_malloc_r+0x190>
    4d8e:	add.w	lr, r3, #92	; 0x5c
    4d92:	add.w	r0, r3, #91	; 0x5b
    4d96:	mov.w	r3, lr, lsl #1
    4d9a:	b.n	49ac <_malloc_r+0x44>
    4d9c:	lsrs	r2, r3, #6
    4d9e:	add.w	r1, r2, #57	; 0x39
    4da2:	lsls	r1, r1, #1
    4da4:	adds	r2, #56	; 0x38
    4da6:	b.n	4cec <_malloc_r+0x384>
    4da8:	cmp	r4, r7
    4daa:	ldr	r3, [pc, #296]	; (4ed4 <_malloc_r+0x56c>)
    4dac:	beq.w	4bb0 <_malloc_r+0x248>
    4db0:	ldr	r4, [r3, #8]
    4db2:	ldr	r2, [r4, #4]
    4db4:	bic.w	r2, r2, #3
    4db8:	b.n	4c70 <_malloc_r+0x308>
    4dba:	ldr.w	r3, [r9], #-8
    4dbe:	cmp	r9, r3
    4dc0:	bne.w	4ec8 <_malloc_r+0x560>
    4dc4:	tst.w	r0, #3
    4dc8:	add.w	r0, r0, #4294967295
    4dcc:	bne.n	4dba <_malloc_r+0x452>
    4dce:	ldr	r3, [r7, #4]
    4dd0:	bic.w	r3, r3, r4
    4dd4:	str	r3, [r7, #4]
    4dd6:	lsls	r4, r4, #1
    4dd8:	cmp	r4, r3
    4dda:	bhi.w	4b58 <_malloc_r+0x1f0>
    4dde:	cmp	r4, #0
    4de0:	beq.w	4b58 <_malloc_r+0x1f0>
    4de4:	tst	r4, r3
    4de6:	mov	r0, r8
    4de8:	bne.w	4a56 <_malloc_r+0xee>
    4dec:	lsls	r4, r4, #1
    4dee:	tst	r4, r3
    4df0:	add.w	r0, r0, #4
    4df4:	beq.n	4dec <_malloc_r+0x484>
    4df6:	b.n	4a56 <_malloc_r+0xee>
    4df8:	cmp.w	r3, #340	; 0x154
    4dfc:	bhi.n	4e30 <_malloc_r+0x4c8>
    4dfe:	lsrs	r0, r5, #15
    4e00:	add.w	lr, r0, #120	; 0x78
    4e04:	mov.w	r3, lr, lsl #1
    4e08:	adds	r0, #119	; 0x77
    4e0a:	b.n	49ac <_malloc_r+0x44>
    4e0c:	mov.w	r1, #4096	; 0x1000
    4e10:	b.n	4bea <_malloc_r+0x282>
    4e12:	movs	r1, #1
    4e14:	ldr.w	r3, [r8, #4]
    4e18:	asrs	r2, r2, #2
    4e1a:	lsl.w	r2, r1, r2
    4e1e:	orrs	r2, r3
    4e20:	str.w	r2, [r8, #4]
    4e24:	mov	r1, ip
    4e26:	b.n	4d18 <_malloc_r+0x3b0>
    4e28:	movs	r3, #1
    4e2a:	str.w	r3, [fp, #4]
    4e2e:	b.n	4c7c <_malloc_r+0x314>
    4e30:	movw	r2, #1364	; 0x554
    4e34:	cmp	r3, r2
    4e36:	bhi.n	4e7a <_malloc_r+0x512>
    4e38:	lsrs	r0, r5, #18
    4e3a:	add.w	lr, r0, #125	; 0x7d
    4e3e:	mov.w	r3, lr, lsl #1
    4e42:	adds	r0, #124	; 0x7c
    4e44:	b.n	49ac <_malloc_r+0x44>
    4e46:	adds	r2, #16
    4e48:	b.n	4b94 <_malloc_r+0x22c>
    4e4a:	cmp	r2, #84	; 0x54
    4e4c:	bhi.n	4e9c <_malloc_r+0x534>
    4e4e:	lsrs	r2, r3, #12
    4e50:	add.w	r1, r2, #111	; 0x6f
    4e54:	lsls	r1, r1, #1
    4e56:	adds	r2, #110	; 0x6e
    4e58:	b.n	4cec <_malloc_r+0x384>
    4e5a:	ldr	r4, [r7, #8]
    4e5c:	ldr	r2, [r4, #4]
    4e5e:	bic.w	r2, r2, #3
    4e62:	b.n	4c70 <_malloc_r+0x308>
    4e64:	ubfx	r0, sl, #0, #12
    4e68:	cmp	r0, #0
    4e6a:	bne.w	4bbe <_malloc_r+0x256>
    4e6e:	add	r2, r8
    4e70:	ldr	r3, [r7, #8]
    4e72:	orr.w	r2, r2, #1
    4e76:	str	r2, [r3, #4]
    4e78:	b.n	4c54 <_malloc_r+0x2ec>
    4e7a:	movs	r3, #254	; 0xfe
    4e7c:	mov.w	lr, #127	; 0x7f
    4e80:	movs	r0, #126	; 0x7e
    4e82:	b.n	49ac <_malloc_r+0x44>
    4e84:	movs	r2, #1
    4e86:	mov.w	r9, #0
    4e8a:	b.n	4c10 <_malloc_r+0x2a8>
    4e8c:	add.w	r1, r4, #8
    4e90:	mov	r0, r6
    4e92:	bl	4fe8 <_free_r>
    4e96:	ldr.w	r1, [r9]
    4e9a:	b.n	4c54 <_malloc_r+0x2ec>
    4e9c:	cmp.w	r2, #340	; 0x154
    4ea0:	bhi.n	4eae <_malloc_r+0x546>
    4ea2:	lsrs	r2, r3, #15
    4ea4:	add.w	r1, r2, #120	; 0x78
    4ea8:	lsls	r1, r1, #1
    4eaa:	adds	r2, #119	; 0x77
    4eac:	b.n	4cec <_malloc_r+0x384>
    4eae:	movw	r1, #1364	; 0x554
    4eb2:	cmp	r2, r1
    4eb4:	bhi.n	4ec2 <_malloc_r+0x55a>
    4eb6:	lsrs	r2, r3, #18
    4eb8:	add.w	r1, r2, #125	; 0x7d
    4ebc:	lsls	r1, r1, #1
    4ebe:	adds	r2, #124	; 0x7c
    4ec0:	b.n	4cec <_malloc_r+0x384>
    4ec2:	movs	r1, #254	; 0xfe
    4ec4:	movs	r2, #126	; 0x7e
    4ec6:	b.n	4cec <_malloc_r+0x384>
    4ec8:	ldr	r3, [r7, #4]
    4eca:	b.n	4dd6 <_malloc_r+0x46e>
    4ecc:	lsrs	r0, r5, #3
    4ece:	adds	r3, r0, #1
    4ed0:	lsls	r3, r3, #1
    4ed2:	b.n	4ac6 <_malloc_r+0x15e>
    4ed4:	.word	0x1fff11ac

00004ed8 <__malloc_lock>:
    4ed8:	bx	lr
    4eda:	nop

00004edc <__malloc_unlock>:
    4edc:	bx	lr
    4ede:	nop

00004ee0 <_sbrk_r>:
    4ee0:	push	{r3, r4, r5, lr}
    4ee2:	ldr	r4, [pc, #28]	; (4f00 <_sbrk_r+0x20>)
    4ee4:	movs	r3, #0
    4ee6:	mov	r5, r0
    4ee8:	mov	r0, r1
    4eea:	str	r3, [r4, #0]
    4eec:	bl	4274 <_sbrk>
    4ef0:	adds	r3, r0, #1
    4ef2:	beq.n	4ef6 <_sbrk_r+0x16>
    4ef4:	pop	{r3, r4, r5, pc}
    4ef6:	ldr	r3, [r4, #0]
    4ef8:	cmp	r3, #0
    4efa:	beq.n	4ef4 <_sbrk_r+0x14>
    4efc:	str	r3, [r5, #0]
    4efe:	pop	{r3, r4, r5, pc}
    4f00:	.word	0x1fff1f00

00004f04 <register_fini>:
    4f04:	ldr	r3, [pc, #8]	; (4f10 <register_fini+0xc>)
    4f06:	cbz	r3, 4f0e <register_fini+0xa>
    4f08:	ldr	r0, [pc, #8]	; (4f14 <register_fini+0x10>)
    4f0a:	b.w	4f18 <atexit>
    4f0e:	bx	lr
    4f10:	.word	0x00000000
    4f14:	.word	0x00004f25

00004f18 <atexit>:
    4f18:	movs	r3, #0
    4f1a:	mov	r1, r0
    4f1c:	mov	r2, r3
    4f1e:	mov	r0, r3
    4f20:	b.w	51b8 <__register_exitproc>

00004f24 <__libc_fini_array>:
    4f24:	push	{r3, r4, r5, lr}
    4f26:	ldr	r5, [pc, #28]	; (4f44 <__libc_fini_array+0x20>)
    4f28:	ldr	r4, [pc, #28]	; (4f48 <__libc_fini_array+0x24>)
    4f2a:	subs	r4, r5, r4
    4f2c:	asrs	r4, r4, #2
    4f2e:	beq.n	4f3c <__libc_fini_array+0x18>
    4f30:	subs	r4, #1
    4f32:	ldr.w	r3, [r5, #-4]!
    4f36:	blx	r3
    4f38:	cmp	r4, #0
    4f3a:	bne.n	4f30 <__libc_fini_array+0xc>
    4f3c:	ldmia.w	sp!, {r3, r4, r5, lr}
    4f40:	b.w	55cc <__init_array_end>
	...

00004f4c <_malloc_trim_r>:
    4f4c:	push	{r3, r4, r5, r6, r7, lr}
    4f4e:	ldr	r7, [pc, #140]	; (4fdc <_malloc_trim_r+0x90>)
    4f50:	mov	r4, r1
    4f52:	mov	r6, r0
    4f54:	bl	4ed8 <__malloc_lock>
    4f58:	ldr	r3, [r7, #8]
    4f5a:	ldr	r5, [r3, #4]
    4f5c:	bic.w	r5, r5, #3
    4f60:	subs	r1, r5, r4
    4f62:	addw	r1, r1, #4079	; 0xfef
    4f66:	bic.w	r1, r1, #4080	; 0xff0
    4f6a:	bic.w	r1, r1, #15
    4f6e:	sub.w	r4, r1, #4096	; 0x1000
    4f72:	cmp.w	r4, #4096	; 0x1000
    4f76:	blt.n	4f88 <_malloc_trim_r+0x3c>
    4f78:	movs	r1, #0
    4f7a:	mov	r0, r6
    4f7c:	bl	4ee0 <_sbrk_r>
    4f80:	ldr	r3, [r7, #8]
    4f82:	add	r3, r5
    4f84:	cmp	r0, r3
    4f86:	beq.n	4f92 <_malloc_trim_r+0x46>
    4f88:	mov	r0, r6
    4f8a:	bl	4edc <__malloc_unlock>
    4f8e:	movs	r0, #0
    4f90:	pop	{r3, r4, r5, r6, r7, pc}
    4f92:	negs	r1, r4
    4f94:	mov	r0, r6
    4f96:	bl	4ee0 <_sbrk_r>
    4f9a:	adds	r0, #1
    4f9c:	beq.n	4fba <_malloc_trim_r+0x6e>
    4f9e:	ldr	r3, [pc, #64]	; (4fe0 <_malloc_trim_r+0x94>)
    4fa0:	ldr	r2, [r7, #8]
    4fa2:	ldr	r1, [r3, #0]
    4fa4:	subs	r5, r5, r4
    4fa6:	orr.w	r5, r5, #1
    4faa:	mov	r0, r6
    4fac:	subs	r1, r1, r4
    4fae:	str	r5, [r2, #4]
    4fb0:	str	r1, [r3, #0]
    4fb2:	bl	4edc <__malloc_unlock>
    4fb6:	movs	r0, #1
    4fb8:	pop	{r3, r4, r5, r6, r7, pc}
    4fba:	movs	r1, #0
    4fbc:	mov	r0, r6
    4fbe:	bl	4ee0 <_sbrk_r>
    4fc2:	ldr	r2, [r7, #8]
    4fc4:	subs	r3, r0, r2
    4fc6:	cmp	r3, #15
    4fc8:	ble.n	4f88 <_malloc_trim_r+0x3c>
    4fca:	ldr	r4, [pc, #24]	; (4fe4 <_malloc_trim_r+0x98>)
    4fcc:	ldr	r1, [pc, #16]	; (4fe0 <_malloc_trim_r+0x94>)
    4fce:	ldr	r4, [r4, #0]
    4fd0:	orr.w	r3, r3, #1
    4fd4:	subs	r0, r0, r4
    4fd6:	str	r3, [r2, #4]
    4fd8:	str	r0, [r1, #0]
    4fda:	b.n	4f88 <_malloc_trim_r+0x3c>
    4fdc:	.word	0x1fff11ac
    4fe0:	.word	0x1fff1d94
    4fe4:	.word	0x1fff15b8

00004fe8 <_free_r>:
    4fe8:	cmp	r1, #0
    4fea:	beq.n	5078 <_free_r+0x90>
    4fec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ff0:	mov	r5, r1
    4ff2:	mov	r8, r0
    4ff4:	bl	4ed8 <__malloc_lock>
    4ff8:	ldr.w	r7, [r5, #-4]
    4ffc:	ldr	r1, [pc, #424]	; (51a8 <_free_r+0x1c0>)
    4ffe:	bic.w	r3, r7, #1
    5002:	sub.w	r4, r5, #8
    5006:	adds	r2, r4, r3
    5008:	ldr	r6, [r1, #8]
    500a:	ldr	r0, [r2, #4]
    500c:	cmp	r2, r6
    500e:	bic.w	r0, r0, #3
    5012:	beq.n	50da <_free_r+0xf2>
    5014:	lsls	r6, r7, #31
    5016:	str	r0, [r2, #4]
    5018:	bmi.n	5032 <_free_r+0x4a>
    501a:	ldr.w	r7, [r5, #-8]
    501e:	subs	r4, r4, r7
    5020:	add.w	lr, r1, #8
    5024:	ldr	r5, [r4, #8]
    5026:	cmp	r5, lr
    5028:	add	r3, r7
    502a:	beq.n	510c <_free_r+0x124>
    502c:	ldr	r7, [r4, #12]
    502e:	str	r7, [r5, #12]
    5030:	str	r5, [r7, #8]
    5032:	adds	r5, r2, r0
    5034:	ldr	r5, [r5, #4]
    5036:	lsls	r5, r5, #31
    5038:	bpl.n	50c0 <_free_r+0xd8>
    503a:	orr.w	r2, r3, #1
    503e:	str	r2, [r4, #4]
    5040:	str	r3, [r4, r3]
    5042:	cmp.w	r3, #512	; 0x200
    5046:	bcs.n	507a <_free_r+0x92>
    5048:	lsrs	r3, r3, #3
    504a:	adds	r2, r3, #1
    504c:	ldr	r5, [r1, #4]
    504e:	ldr.w	r7, [r1, r2, lsl #3]
    5052:	str	r7, [r4, #8]
    5054:	movs	r0, #1
    5056:	asrs	r3, r3, #2
    5058:	lsl.w	r3, r0, r3
    505c:	add.w	r0, r1, r2, lsl #3
    5060:	orrs	r5, r3
    5062:	subs	r0, #8
    5064:	str	r0, [r4, #12]
    5066:	str	r5, [r1, #4]
    5068:	str.w	r4, [r1, r2, lsl #3]
    506c:	str	r4, [r7, #12]
    506e:	mov	r0, r8
    5070:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5074:	b.w	4edc <__malloc_unlock>
    5078:	bx	lr
    507a:	lsrs	r2, r3, #9
    507c:	cmp	r2, #4
    507e:	bhi.n	5128 <_free_r+0x140>
    5080:	lsrs	r2, r3, #6
    5082:	add.w	r7, r2, #57	; 0x39
    5086:	lsls	r7, r7, #1
    5088:	add.w	r5, r2, #56	; 0x38
    508c:	add.w	r0, r1, r7, lsl #2
    5090:	ldr.w	r2, [r1, r7, lsl #2]
    5094:	ldr	r1, [pc, #272]	; (51a8 <_free_r+0x1c0>)
    5096:	subs	r0, #8
    5098:	cmp	r0, r2
    509a:	beq.n	5138 <_free_r+0x150>
    509c:	ldr	r1, [r2, #4]
    509e:	bic.w	r1, r1, #3
    50a2:	cmp	r3, r1
    50a4:	bcs.n	50ac <_free_r+0xc4>
    50a6:	ldr	r2, [r2, #8]
    50a8:	cmp	r0, r2
    50aa:	bne.n	509c <_free_r+0xb4>
    50ac:	ldr	r0, [r2, #12]
    50ae:	str	r0, [r4, #12]
    50b0:	str	r2, [r4, #8]
    50b2:	str	r4, [r0, #8]
    50b4:	str	r4, [r2, #12]
    50b6:	mov	r0, r8
    50b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    50bc:	b.w	4edc <__malloc_unlock>
    50c0:	ldr	r5, [r2, #8]
    50c2:	ldr	r7, [pc, #232]	; (51ac <_free_r+0x1c4>)
    50c4:	cmp	r5, r7
    50c6:	add	r3, r0
    50c8:	beq.n	514a <_free_r+0x162>
    50ca:	ldr	r0, [r2, #12]
    50cc:	str	r0, [r5, #12]
    50ce:	orr.w	r2, r3, #1
    50d2:	str	r5, [r0, #8]
    50d4:	str	r2, [r4, #4]
    50d6:	str	r3, [r4, r3]
    50d8:	b.n	5042 <_free_r+0x5a>
    50da:	lsls	r7, r7, #31
    50dc:	add	r3, r0
    50de:	bmi.n	50f0 <_free_r+0x108>
    50e0:	ldr.w	r2, [r5, #-8]
    50e4:	subs	r4, r4, r2
    50e6:	add	r3, r2
    50e8:	ldr	r0, [r4, #8]
    50ea:	ldr	r2, [r4, #12]
    50ec:	str	r2, [r0, #12]
    50ee:	str	r0, [r2, #8]
    50f0:	ldr	r2, [pc, #188]	; (51b0 <_free_r+0x1c8>)
    50f2:	ldr	r2, [r2, #0]
    50f4:	orr.w	r0, r3, #1
    50f8:	cmp	r3, r2
    50fa:	str	r0, [r4, #4]
    50fc:	str	r4, [r1, #8]
    50fe:	bcc.n	506e <_free_r+0x86>
    5100:	ldr	r3, [pc, #176]	; (51b4 <_free_r+0x1cc>)
    5102:	mov	r0, r8
    5104:	ldr	r1, [r3, #0]
    5106:	bl	4f4c <_malloc_trim_r>
    510a:	b.n	506e <_free_r+0x86>
    510c:	adds	r1, r2, r0
    510e:	ldr	r1, [r1, #4]
    5110:	lsls	r1, r1, #31
    5112:	bmi.n	519e <_free_r+0x1b6>
    5114:	ldr	r1, [r2, #8]
    5116:	ldr	r2, [r2, #12]
    5118:	str	r2, [r1, #12]
    511a:	add	r3, r0
    511c:	orr.w	r0, r3, #1
    5120:	str	r1, [r2, #8]
    5122:	str	r0, [r4, #4]
    5124:	str	r3, [r4, r3]
    5126:	b.n	506e <_free_r+0x86>
    5128:	cmp	r2, #20
    512a:	bhi.n	515c <_free_r+0x174>
    512c:	add.w	r7, r2, #92	; 0x5c
    5130:	lsls	r7, r7, #1
    5132:	add.w	r5, r2, #91	; 0x5b
    5136:	b.n	508c <_free_r+0xa4>
    5138:	asrs	r2, r5, #2
    513a:	ldr	r3, [r1, #4]
    513c:	movs	r5, #1
    513e:	lsl.w	r2, r5, r2
    5142:	orrs	r3, r2
    5144:	str	r3, [r1, #4]
    5146:	mov	r2, r0
    5148:	b.n	50ae <_free_r+0xc6>
    514a:	orr.w	r2, r3, #1
    514e:	str	r4, [r1, #20]
    5150:	str	r4, [r1, #16]
    5152:	str	r5, [r4, #12]
    5154:	str	r5, [r4, #8]
    5156:	str	r2, [r4, #4]
    5158:	str	r3, [r4, r3]
    515a:	b.n	506e <_free_r+0x86>
    515c:	cmp	r2, #84	; 0x54
    515e:	bhi.n	516e <_free_r+0x186>
    5160:	lsrs	r2, r3, #12
    5162:	add.w	r7, r2, #111	; 0x6f
    5166:	lsls	r7, r7, #1
    5168:	add.w	r5, r2, #110	; 0x6e
    516c:	b.n	508c <_free_r+0xa4>
    516e:	cmp.w	r2, #340	; 0x154
    5172:	bhi.n	5182 <_free_r+0x19a>
    5174:	lsrs	r2, r3, #15
    5176:	add.w	r7, r2, #120	; 0x78
    517a:	lsls	r7, r7, #1
    517c:	add.w	r5, r2, #119	; 0x77
    5180:	b.n	508c <_free_r+0xa4>
    5182:	movw	r0, #1364	; 0x554
    5186:	cmp	r2, r0
    5188:	bhi.n	5198 <_free_r+0x1b0>
    518a:	lsrs	r2, r3, #18
    518c:	add.w	r7, r2, #125	; 0x7d
    5190:	lsls	r7, r7, #1
    5192:	add.w	r5, r2, #124	; 0x7c
    5196:	b.n	508c <_free_r+0xa4>
    5198:	movs	r7, #254	; 0xfe
    519a:	movs	r5, #126	; 0x7e
    519c:	b.n	508c <_free_r+0xa4>
    519e:	orr.w	r2, r3, #1
    51a2:	str	r2, [r4, #4]
    51a4:	str	r3, [r4, r3]
    51a6:	b.n	506e <_free_r+0x86>
    51a8:	.word	0x1fff11ac
    51ac:	.word	0x1fff11b4
    51b0:	.word	0x1fff15b4
    51b4:	.word	0x1fff1d90

000051b8 <__register_exitproc>:
    51b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    51bc:	ldr	r4, [pc, #148]	; (5254 <__register_exitproc+0x9c>)
    51be:	ldr	r5, [r4, #0]
    51c0:	ldr.w	r4, [r5, #328]	; 0x148
    51c4:	mov	r6, r0
    51c6:	mov	r8, r1
    51c8:	mov	sl, r2
    51ca:	mov	r9, r3
    51cc:	cbz	r4, 5240 <__register_exitproc+0x88>
    51ce:	ldr	r0, [r4, #4]
    51d0:	cmp	r0, #31
    51d2:	bgt.n	5204 <__register_exitproc+0x4c>
    51d4:	adds	r3, r0, #1
    51d6:	cbz	r6, 51f6 <__register_exitproc+0x3e>
    51d8:	add.w	r5, r4, r0, lsl #2
    51dc:	movs	r2, #1
    51de:	str.w	sl, [r5, #136]	; 0x88
    51e2:	ldr.w	r1, [r4, #392]	; 0x188
    51e6:	lsls	r2, r0
    51e8:	orrs	r1, r2
    51ea:	cmp	r6, #2
    51ec:	str.w	r1, [r4, #392]	; 0x188
    51f0:	str.w	r9, [r5, #264]	; 0x108
    51f4:	beq.n	5234 <__register_exitproc+0x7c>
    51f6:	adds	r0, #2
    51f8:	str	r3, [r4, #4]
    51fa:	str.w	r8, [r4, r0, lsl #2]
    51fe:	movs	r0, #0
    5200:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5204:	ldr	r3, [pc, #80]	; (5258 <__register_exitproc+0xa0>)
    5206:	cbz	r3, 524a <__register_exitproc+0x92>
    5208:	mov.w	r0, #400	; 0x190
    520c:	bl	4958 <malloc>
    5210:	mov	r4, r0
    5212:	cbz	r0, 524a <__register_exitproc+0x92>
    5214:	ldr.w	r3, [r5, #328]	; 0x148
    5218:	movs	r7, #0
    521a:	stmia.w	r0, {r3, r7}
    521e:	str.w	r4, [r5, #328]	; 0x148
    5222:	mov	r0, r7
    5224:	movs	r3, #1
    5226:	str.w	r7, [r4, #392]	; 0x188
    522a:	str.w	r7, [r4, #396]	; 0x18c
    522e:	cmp	r6, #0
    5230:	beq.n	51f6 <__register_exitproc+0x3e>
    5232:	b.n	51d8 <__register_exitproc+0x20>
    5234:	ldr.w	r1, [r4, #396]	; 0x18c
    5238:	orrs	r2, r1
    523a:	str.w	r2, [r4, #396]	; 0x18c
    523e:	b.n	51f6 <__register_exitproc+0x3e>
    5240:	add.w	r4, r5, #332	; 0x14c
    5244:	str.w	r4, [r5, #328]	; 0x148
    5248:	b.n	51ce <__register_exitproc+0x16>
    524a:	mov.w	r0, #4294967295
    524e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5252:	nop
    5254:	.word	0x000055b0
    5258:	.word	0x00004959
    525c:	.word	0x67676f54
    5260:	.word	0x676e696c
    5264:	.word	0x00000000
    5268:	.word	0x7370704f
    526c:	.word	0x6e61202c
    5270:	.word	0x6b6e7520
    5274:	.word	0x6e776f6e
    5278:	.word	0x44494d20
    527c:	.word	0x656d2049
    5280:	.word	0x67617373
    5284:	.word	0x79742065
    5288:	.word	0x00216570
    528c:	.word	0x4f4c4556
    5290:	.word	0x59544943
    5294:	.word	0x00000000
    5298:	.word	0x45544f4e
    529c:	.word	0x474e454c
    52a0:	.word	0x00004854
    52a4:	.word	0x43544950
    52a8:	.word	0x00000048
    52ac:	.word	0x57207449
    52b0:	.word	0x736b726f
    52b4:	.word	0x20212121
    52b8:	.word	0x6f636553
    52bc:	.word	0x2073646e
    52c0:	.word	0x646c6568
    52c4:	.word	0x0000203a
    52c8:	.word	0x4d202020
    52cc:	.word	0x696c6c69
    52d0:	.word	0x6f636573
    52d4:	.word	0x2073646e
    52d8:	.word	0x646c6568
    52dc:	.word	0x0000203a

000052e0 <pin2sc1a>:
    52e0:	................
    52f0:	................
    5300:	................
    5310:	................
    5320:	........

00005328 <digital_pin_to_info_PGM>:
    5328:	@..C@..@D..CD..@
    5338:	...C...@0..C0..@
    5348:	4..C4..@...C...@
    5358:	...C...@...C...@
    5368:	...C...@...C...@
    5378:	...C...@...C...@
    5388:	...C...@...C...@
    5398:	...C...@...C...@
    53a8:	...C...@...C...@
    53b8:	...C...@...C...@
    53c8:	...C...@...C...@
    53d8:	...C...@...C...@
    53e8:	h .Ch..@...C...@
    53f8:	8..C8..@<..C<..@
    5408:	@..C@..@H..CH..@
    5418:	L..CL..@(..C(..@
    5428:	,..C,..@` .C`..@
    5438:	d .Cd..@ ..C ..@
    5448:	$..C$..@(..C(..@
    5458:	,..C,..@D..CD..@
    5468:	p..Cp..@t..Ct..@
    5478:	h..Ch..@P..CP..@
    5488:	X..CX..@\..C\..@
    5498:	T..CT..@ ..C ..@
    54a8:	$..C$..@...C...@
    54b8:	...C...@8..C8..@
    54c8:	4..C4..@0..C0..@
    54d8:	<..C<..@,..C,..@
    54e8:	( .C(..@, .C,..@
    54f8:	. .C...@. .C...@
    5508:	. .C...@. .C...@
    5518:	. .C...@. .C...@

00005528 <vtable for usb_serial_class>:
	...
    5530:	!>...>...>...>..
    5540:	.>...>...>...>..
    5550:	....

00005554 <usb_endpoint_config_table>:
    5554:	........

0000555c <usb_descriptor_list>:
    555c:	................
    556c:	............`...
    557c:	................
    558c:	....H...........
    559c:	d...............
    55ac:	....

000055b0 <_global_impure_ptr>:
    55b0:	....

000055b4 <_init>:
    55b4:	push	{r3, r4, r5, r6, r7, lr}
    55b6:	nop
    55b8:	pop	{r3, r4, r5, r6, r7}
    55ba:	pop	{r3}
    55bc:	mov	lr, r3
    55be:	bx	lr

000055c0 <__init_array_start>:
    55c0:	.word	0x00004f05

000055c4 <__frame_dummy_init_array_entry>:
    55c4:	5.......

Disassembly of section .fini:

000055cc <_fini>:
    55cc:	push	{r3, r4, r5, r6, r7, lr}
    55ce:	nop

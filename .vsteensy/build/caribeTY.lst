
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0000422c l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15a8 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00002ef4 l     F .text	0000000c startup_default_early_hook
00002f00 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15a8 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15ac l       .bss	00000000 object.8610
00004224 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000c88 l     F .text	000001f4 _GLOBAL__sub_I_globalMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff17e5 l     O .bss	00000001 tx_noautoflush
1fff17e8 l     O .bss	00000004 tx_packet
1fff17ec l     O .bss	00000001 transmit_previous_timeout
1fff17f0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001150 l     F .text	00000144 wait_for_cal
1fff17f5 l     O .bss	00000001 analog_right_shift
1fff17f6 l     O .bss	00000001 calibrating
00003f40 l     O .text	00000048 pin2sc1a
1fff0c54 l     O .data	00000001 analog_config_bits
1fff17f7 l     O .bss	00000001 analogReadBusyADC1
1fff17f8 l     O .bss	00000001 analogReadBusyADC0
1fff17f9 l     O .bss	00000001 analog_reference_internal
1fff0c55 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001470 l     F .text	0000004c digitalWrite.part.1
000014bc l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
0000179c l     F .text	00000048 sysex_byte
1fff1814 l     O .bss	00000001 tx_noautoflush
1fff1840 l     O .bss	00000004 tx_packet
1fff1844 l     O .bss	00000001 transmit_previous_timeout
1fff184c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c58 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1860 l     O .bss	00000004 ep0_tx_ptr
1fff1864 l     O .bss	00000014 rx_last
1fff1878 l     O .bss	00000002 ep0_tx_len
1fff187c l     O .bss	00000040 ep0_rx0_buf
1fff18bc l     O .bss	00000014 rx_first
1fff18d0 l     O .bss	00000001 ep0_tx_data_toggle
1fff18d4 l     O .bss	00000040 ep0_rx1_buf
1fff1914 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1928 l     O .bss	00000014 tx_last
1fff193c l     O .bss	00000008 setup
1fff1944 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1948 l     O .bss	00000008 reply_buffer
1fff1954 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1959 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff195c l     O .bss	00000004 rts_pin
1fff1960 l     O .bss	00000001 rx_buffer_head
1fff1961 l     O .bss	00000001 rx_buffer_tail
1fff1964 l     O .bss	00000028 tx_buffer
1fff198c l     O .bss	00000040 rx_buffer
1fff19cc l     O .bss	00000001 transmitting
1fff19cd l     O .bss	00000001 tx_buffer_tail
1fff19d0 l     O .bss	00000004 transmit_pin
1fff19d4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff19d8 l     O .bss	00000004 rts_pin
1fff19dc l     O .bss	00000001 transmitting
1fff19dd l     O .bss	00000001 rx_buffer_tail
1fff19e0 l     O .bss	00000028 tx_buffer
1fff1a08 l     O .bss	00000040 rx_buffer
1fff1a48 l     O .bss	00000001 rx_buffer_head
1fff1a49 l     O .bss	00000001 tx_buffer_tail
1fff1a4c l     O .bss	00000004 transmit_pin
1fff1a50 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a54 l     O .bss	00000004 rts_pin
1fff1a58 l     O .bss	00000001 rx_buffer_head
1fff1a59 l     O .bss	00000001 rx_buffer_tail
1fff1a5c l     O .bss	00000028 tx_buffer
1fff1a84 l     O .bss	00000040 rx_buffer
1fff1ac4 l     O .bss	00000001 transmitting
1fff1ac5 l     O .bss	00000001 tx_buffer_tail
1fff1ac8 l     O .bss	00000004 transmit_pin
1fff1acc l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1ad0 l     O .bss	00000004 rts_pin
1fff1ad4 l     O .bss	00000001 rx_buffer_head
1fff1ad5 l     O .bss	00000001 rx_buffer_tail
1fff1ad8 l     O .bss	00000040 tx_buffer
1fff1b18 l     O .bss	00000040 rx_buffer
1fff1b58 l     O .bss	00000001 transmitting
1fff1b59 l     O .bss	00000001 tx_buffer_tail
1fff1b5c l     O .bss	00000004 transmit_pin
1fff1b60 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1b64 l     O .bss	00000004 rts_pin
1fff1b68 l     O .bss	00000001 rx_buffer_head
1fff1b69 l     O .bss	00000001 rx_buffer_tail
1fff1b6c l     O .bss	00000028 tx_buffer
1fff1b94 l     O .bss	00000040 rx_buffer
1fff1bd4 l     O .bss	00000001 transmitting
1fff1bd5 l     O .bss	00000001 tx_buffer_tail
1fff1bd8 l     O .bss	00000004 transmit_pin
1fff1bdc l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c70 l     O .data	00000012 device_descriptor
1fff0c9c l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1be0 l     O .bss	00000004 rts_pin
1fff1be4 l     O .bss	00000001 rx_buffer_head
1fff1be5 l     O .bss	00000001 rx_buffer_tail
1fff1be8 l     O .bss	00000028 tx_buffer
1fff1c10 l     O .bss	00000040 rx_buffer
1fff1c50 l     O .bss	00000001 transmitting
1fff1c51 l     O .bss	00000001 tx_buffer_tail
1fff1c54 l     O .bss	00000004 transmit_pin
1fff1c58 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003b94 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d68 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15a8 l       .bss	00000000 __bss_start__
1fff1df4 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00002eec  w    F .text	00000006 adc0_isr
00000ef4 g     F .text	0000001c usb_serial_available
00002dac g     F .text	00000020 serial4_available
000029c8  w    F .text	000000c4 yield
1fff0c84 g     O .data	00000018 usb_string_manufacturer_name_default
00002f98 g     F .text	00000020 serial_available
1fff1818 g     O .bss	00000004 usb_midi_handleProgramChange
00002ea4  w    F .text	00000048 hard_fault_isr
00002eec  w    F .text	00000006 dma_ch6_isr
00002abc g     F .text	00000020 Print::println()
00002c80 g     F .text	00000020 serial2_available
00002eec  w    F .text	00000006 uart0_lon_isr
00001ddc g     F .text	000000e8 usb_rx_memory
00002a8c  w    F .text	00000002 serialEvent5()
00002eec  w    F .text	00000006 dma_ch8_isr
000030c4 g     F .text	00000020 serial6_available
00003b6c g     F .text	00000002 __malloc_unlock
1fff182c g     O .bss	00000004 usb_midi_handleAfterTouch
00001294 g     F .text	000000e0 analog_init
00001ec4 g     F .text	00000084 usb_tx
00002eec  w    F .text	00000006 portcd_isr
1fff183c g     O .bss	00000004 usb_midi_handleSysExComplete
000034e4 g     F .text	00000098 MillisTimer::runFromTimer()
00002eec  w    F .text	00000006 can1_rx_warn_isr
00004230 g       .fini	00000000 __exidx_end
00002eec  w    F .text	00000006 dma_error_isr
1fff1cb8 g     O .bss	00000001 usb_midi_msg_type
1fff1c70 g     O .bss	00000001 EventResponder::runningFromYield
00002eec  w    F .text	00000006 i2c0_isr
0000358c g     F .text	0000000c __errno
00002eec  w    F .text	00000006 portd_isr
00002eec  w    F .text	00000006 enet_error_isr
1fff1c5c g     O .bss	00000004 EventResponder::firstInterrupt
00002eec  w    F .text	00000006 tpm1_isr
00002aa8  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00003f88 g     O .text	00000200 digital_pin_to_info_PGM
1fff1df0 g     O .bss	00000004 errno
00004230 g       .fini	00000000 _etext
1fff15a8 g       .bss	00000000 _sbss
00002b84  w    F .text	00000002 serialEvent6()
1fff1828 g     O .bss	00000004 usb_midi_handleVelocityChange
00001564 g     F .text	0000001c digitalRead
00002eec  w    F .text	00000006 porte_isr
00000498 g     F .text	000007f0 loop
00002eec  w    F .text	00000006 portb_isr
00001880 g     F .text	0000002c usb_midi_flush_output
00002eec  w    F .text	00000006 spi1_isr
00002dcc g     F .text	000000d8 uart3_status_isr
00003390  w    F .text	00000002 serialEvent1()
1fff15dc g     O .bss	00000014 led4
00002eec  w    F .text	00000006 mcm_isr
0000347c g     F .text	00000068 MillisTimer::addToActiveList()
000018ac g     F .text	0000043c usb_midi_read
1fff1804 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1c60 g     O .bss	00000004 EventResponder::lastInterrupt
00002ca0 g     F .text	0000010c uart1_status_isr
1fff1cba g     O .bss	00000002 usb_midi_msg_sysex_len
00002eec  w    F .text	00000006 randnum_isr
1fff180c g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff17fc g     O .bss	00000004 systick_millis_count
00002ea4  w    F .text	00000048 bus_fault_isr
00002eec  w    F .text	00000006 watchdog_isr
00002eec  w    F .text	00000006 i2c1_isr
1fff1950 g     O .bss	00000001 usb_configuration
00002eec  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002b6c  w    F .text	00000002 serialEvent2()
00002eec  w    F .text	00000006 i2c2_isr
1fff0c84  w    O .data	00000018 usb_string_manufacturer_name
1fff1de4 g     O .bss	0000000a usb_rx_byte_count_data
00002eec  w    F .text	00000006 pit1_isr
000035e8 g     F .text	00000010 malloc
00002eec  w    F .text	00000006 dma_ch4_isr
00002eec  w    F .text	00000006 software_isr
00002eec  w    F .text	00000006 dma_ch7_isr
00003418  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
000028f8 g     F .text	000000d0 usb_init
00002eec  w    F .text	00000006 lptmr_isr
1fff1c80 g     O .bss	00000004 __malloc_top_pad
00001534 g     F .text	00000024 rtc_set
1fff1758 g     O .bss	00000028 button5
1fff17bc g     O .bss	00000028 button4
1fff0c40 g       .data	00000000 _sdata
1fff185c g     O .bss	00000004 usb_midi_handleNoteOn
00002f64 g     F .text	00000034 kinetis_hsrun_enable
00003b70 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00000e7c g     F .text	00000048 usb_serial_getchar
00002eec  w    F .text	00000006 can1_bus_off_isr
00002eec  w    F .text	00000006 ftm2_isr
1fff1cac g     O .bss	00000008 usb_cdc_line_coding
00001558 g     F .text	0000000a digitalWrite
00002eec  w    F .text	00000006 uart5_status_isr
000030e4 g     F .text	000000e4 lpuart0_status_isr
1fff1c68 g     O .bss	00000004 EventResponder::lastYield
000041b4 g     O .text	00000005 usb_endpoint_config_table
00002eec  w    F .text	00000006 dma_ch9_isr
00002eec  w    F .text	00000006 pit2_isr
00003298 g     F .text	00000020 serial3_available
1fff1c7c g     O .bss	00000004 __malloc_max_sbrked_mem
00001580 g     F .text	0000000a pinMode
00001d28 g     F .text	0000004c usb_free
00002eec  w    F .text	00000006 i2c3_isr
1fff1604 g     O .bss	00000014 led1
1fff1824 g     O .bss	00000004 usb_midi_handleSysExPartial
00004230 g       .fini	00000000 __exidx_start
00002eec  w    F .text	00000006 pit0_isr
1fff1cbc g     O .bss	00000001 usb_midi_msg_data1
1fff1c6c g     O .bss	00000004 EventResponder::firstYield
00004210 g     O .text	00000004 _global_impure_ptr
00002eec  w    F .text	00000006 can1_error_isr
00003598 g     F .text	00000050 __libc_init_array
1fff1df4 g       .bss	00000000 __bss_end
00002eec  w    F .text	00000006 can0_wakeup_isr
00002eec  w    F .text	00000006 flash_cmd_isr
00002a90  w    F .text	00000004 usb_serial_class::clear()
000032b8 g     F .text	000000d8 uart2_status_isr
00002f04 g     F .text	0000002c _sbrk
1fff1c74 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c6c g     O .data	00000004 __brkval
1fff17f4 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001108 g     F .text	00000048 usb_serial_flush_callback
00004214 g     F .text	00000000 _init
00002eec  w    F .text	00000006 svcall_isr
00002eec  w    F .text	00000006 dma_ch15_isr
00002eec  w    F .text	00000006 uart1_error_isr
00003bb4 g     F .text	00000028 __libc_fini_array
00002eec  w    F .text	00000006 usbhs_phy_isr
1fff1df4 g       .bss	00000000 _ebss
00002eec g     F .text	00000006 unused_isr
00002eec  w    F .text	00000006 spi0_isr
00002eec  w    F .text	00000006 dma_ch3_isr
00002eec  w    F .text	00000006 flash_error_isr
1fff1618 g     O .bss	00000018 knob2
00002b88 g     F .text	00000020 serial5_available
00002eec  w    F .text	00000006 uart5_error_isr
00002eec  w    F .text	00000006 rtc_seconds_isr
00002eec  w    F .text	00000006 pdb_isr
00002ea4  w    F .text	00000048 usage_fault_isr
00002eec  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00002eec  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1cb4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000014 leds
0000357c g     F .text	00000010 systick_isr
00002eec  w    F .text	00000006 rtc_alarm_isr
00002eec  w    F .text	00000006 dma_ch2_isr
1fff0c5c g     O .data	00000010 Serial
1fff1798 g     O .bss	00000024 piano
00002eec  w    F .text	00000006 ftm1_isr
00002ab0  w    F .text	00000006 usb_serial_class::write(unsigned char)
00002ef4  w    F .text	0000000c startup_early_hook
00002eec  w    F .text	00000006 dma_ch13_isr
00002eec  w    F .text	00000006 uart2_error_isr
00000ec4 g     F .text	00000030 usb_serial_peekchar
1fff0d50 g     O .data	00000016 usb_string_serial_number_default
00002ea4 g     F .text	00000048 fault_isr
00003c78 g     F .text	000001d0 _free_r
1fff1848 g     O .bss	00000004 usb_midi_handleStop
00002eec  w    F .text	00000006 usb_charge_isr
00002aa0  w    F .text	00000004 usb_serial_class::flush()
00002eec  w    F .text	00000006 cmt_isr
00002eec  w    F .text	00000006 usbhs_isr
1fff1858 g     O .bss	00000004 usb_midi_handleControlChange
1fff15a0 g     O .data	00000004 __malloc_sbrk_base
00002a98  w    F .text	00000004 usb_serial_class::read()
00002eec  w    F .text	00000006 ftm3_isr
00002eec  w    F .text	00000006 tsi0_isr
1fff1684 g     O .bss	00000018 knob1
00002eec  w    F .text	00000006 spi2_isr
00002b70  w    F .text	00000002 serialEvent4()
00002ab8  w    F .text	00000002 serialEvent()
1fff18d1 g     O .bss	00000001 usb_reboot_timer
00003e48 g     F .text	000000a4 __register_exitproc
00000f10 g     F .text	00000038 usb_serial_flush_input
00001050 g     F .text	00000018 usb_serial_putchar
1fff1c84 g     O .bss	00000028 __malloc_current_mallinfo
00002eec  w    F .text	00000006 can0_bus_off_isr
1fff15f0 g     O .bss	00000014 led5
1fff1945 g     O .bss	00000001 usb_rx_memory_needed
00001f48 g     F .text	000009b0 usb_isr
1fff1854 g     O .bss	00000004 usb_midi_handleNoteOff
00004188  w    O .text	00000028 vtable for usb_serial_class
1fff1644 g     O .bss	00000018 knob3
00002eec  w    F .text	00000006 uart3_error_isr
1fff1c64 g     O .bss	00000004 MillisTimer::listActive
00002eec  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00002eec  w    F .text	00000006 low_voltage_isr
1fff16c4 g     O .bss	00000028 button2
1fff1194 g     O .data	00000408 __malloc_av_
00002eec  w    F .text	00000006 can0_error_isr
00001630 g     F .text	0000016c _init_Teensyduino_internal_
000010b0 g     F .text	00000058 usb_serial_flush_output
00002eec  w    F .text	00000006 dma_ch12_isr
00003b68 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00002eec  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00002eec  w    F .text	00000006 pit3_isr
00002eec  w    F .text	00000006 enet_rx_isr
00002eec  w    F .text	00000006 portc_isr
00002b74 g     F .text	00000010 main
1fff1c78 g     O .bss	00000004 __malloc_max_total_mem
1fff15c8 g     O .bss	00000014 led3
00002ea4  w    F .text	00000048 memmanage_fault_isr
000031c8 g     F .text	00000084 usb_init_serialnumber
0000422c g       .text	00000000 __init_array_end
000035f8 g     F .text	00000570 _malloc_r
00002eec  w    F .text	00000006 debugmonitor_isr
1fff1820 g     O .bss	00000004 usb_midi_handleSongPosition
00003398 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1810 g     O .bss	00000004 usb_midi_handleContinue
1fff1cbd g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00002eec  w    F .text	00000006 cmp1_isr
1fff16ec g     O .bss	00000028 button3
00002eec  w    F .text	00000006 ftm0_isr
00003bdc g     F .text	0000009c _malloc_trim_r
1fff0d4c g     O .data	00000004 string0
00000f48 g     F .text	00000108 usb_serial_write
00002f00  w    F .text	00000002 startup_late_hook
00002a9c  w    F .text	00000004 usb_serial_class::available()
1fff1cbe g     O .bss	00000001 usb_midi_msg_cable
1fff0d34  w    O .data	00000018 usb_string_product_name
0000158c g     F .text	000000a4 delay
00002eec  w    F .text	00000006 tpm0_isr
0000422c g     F .fini	00000000 _fini
00002eec  w    F .text	00000006 i2s0_rx_isr
00002eec  w    F .text	00000006 uart4_error_isr
00002b5c g     F .text	00000010 Print::print(long)
000017e4 g     F .text	0000009c usb_midi_write_packed
00003ba8 g     F .text	0000000c atexit
00002eec  w    F .text	00000006 can0_message_isr
1fff1190 g     O .data	00000004 _impure_ptr
00002eec  w    F .text	00000006 can1_message_isr
00002eec  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1838 g     O .bss	00000004 usb_midi_handleTuneRequest
00004220 g       .text	00000000 __preinit_array_end
00002eec  w    F .text	00000006 sdhc_isr
1fff1cbf g     O .bss	00000001 usb_midi_msg_channel
1fff15c4 g     O .bss	00000001 globalMode
00000490 g     F .text	00000008 setup
000041bc g     O .text	00000054 usb_descriptor_list
00001d74 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1780 g     O .bss	00000018 knob4
00002eec  w    F .text	00000006 dma_ch10_isr
1fff1718 g     O .bss	00000040 sequence1
1fff1830 g     O .bss	00000004 usb_midi_handleStart
00002eec  w    F .text	00000006 uart0_error_isr
00001ce8 g     F .text	00000040 usb_malloc
00002eec  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001068 g     F .text	00000048 usb_serial_write_buffer_free
00002eec  w    F .text	00000006 enet_timer_isr
1fff165c g     O .bss	00000028 button6
1fff169c g     O .bss	00000028 button1
1fff15a4 g       .data	00000000 _edata
00002eec  w    F .text	00000006 i2s0_tx_isr
00002eec  w    F .text	00000006 adc1_isr
00002aa4  w    F .text	00000004 usb_serial_class::availableForWrite()
00002eec  w    F .text	00000006 cmp0_isr
1fff1800 g     O .bss	00000004 usb_midi_handleClock
0000324c g     F .text	0000004c ultoa
00003434 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff159c g     O .data	00000004 __malloc_trim_threshold
00002a94  w    F .text	00000004 usb_serial_class::peek()
1fff17e4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff181c g     O .bss	00000004 usb_midi_handlePitchChange
00002eec  w    F .text	00000006 pit_isr
1fff1834 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00002eec  w    F .text	00000006 dac0_isr
00004220 g       .text	00000000 __init_array_start
00002eec  w    F .text	00000006 can1_tx_warn_isr
00001374 g     F .text	000000fc analogRead
1fff1cc0 g     O .bss	00000122 usb_midi_msg_sysex
00002fb8 g     F .text	0000010c uart0_status_isr
00002eec  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d34 g     O .data	00000018 usb_string_product_name_default
00002eec  w    F .text	00000006 dma_ch1_isr
00001db0 g     F .text	0000002c usb_tx_packet_count
00002eec  w    F .text	00000006 dma_ch5_isr
00002eec  w    F .text	00000006 can0_rx_warn_isr
00002eec  w    F .text	00000006 can0_tx_warn_isr
00002ba8 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00002f30 g     F .text	00000034 kinetis_hsrun_disable
00004220 g       .text	00000000 __preinit_array_start
00003394  w    F .text	00000002 serialEvent3()
1fff1850 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff1630 g     O .bss	00000014 led2
00002eec  w    F .text	00000006 cmp2_isr
00003478 g     F .text	00000004 pendablesrvreq_isr
00002eec  w    F .text	00000006 wakeup_isr
00002eec  w    F .text	00000006 cmp3_isr
00002adc g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
1fff1808 g     O .bss	00000004 usb_midi_handleActiveSensing
00002eec  w    F .text	00000006 tpm2_isr
00002eec  w    F .text	00000006 dma_ch0_isr
1fff0d50  w    O .data	00000016 usb_string_serial_number
00002eec  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ............
      10:	................
      20:	................
      30:	........y4..}5..
      40:	................
      50:	................
      60:	................
      70:	................
      80:	................
      90:	................
      a0:	................
      b0:	............./..
      c0:	.....,.......2..
      d0:	.....-..........
      e0:	................
      f0:	................
     100:	................
     110:	....I...........
     120:	................
     130:	................
     140:	.........+......
     150:	................
     160:	................
     170:	................
     180:	................
     190:	.........0......
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	2ef4 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	1630 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	1534 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	1534 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	3598 <__libc_init_array>

	startup_late_hook();
     33a:	bl	2f00 <startup_late_hook>
	main();
     33e:	bl	2b74 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15a4
     374:	.word	0x0000422c
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15a8
     380:	.word	0x1fff1df4
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15a8
     42c:	.word	0x00000000
     430:	.word	0x00004230

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15ac
     460:	.word	0x00004230
     464:	.word	0x1fff15a4
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long lastBlink;
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long lastBlink;
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	1580 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	1558 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, LENGTH, 1);
Knob knob3(A2, sequence1, NOTE, 2);
Knob knob4(A3, sequence1, MAGIC, 3);

void setup() {
  pinMode(13, OUTPUT);
     490:	movs	r1, #1
     492:	movs	r0, #13
     494:	b.w	1580 <pinMode>

00000498 <loop>:
  Serial.begin(9600);
}

void loop() {
     498:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     49c:	movs	r0, #0
     49e:	sub	sp, #80	; 0x50
     4a0:	bl	18ac <usb_midi_read>
  if (usbMIDI.read()) {
     4a4:	cmp	r0, #0
     4a6:	bne.w	844 <loop+0x3ac>
     4aa:	ldr	r4, [pc, #624]	; (71c <loop+0x284>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ac:	ldr	r5, [pc, #624]	; (720 <loop+0x288>)
     4ae:	ldrb.w	r0, [r5, #32]
     4b2:	bl	1564 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	str	r0, [r5, #12]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4ba:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4bc:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4be:	beq.w	86e <loop+0x3d6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c2:	ldr	r3, [r4, #0]
     4c4:	str	r3, [sp, #76]	; 0x4c
	return ret;
     4c6:	ldr	r3, [sp, #76]	; 0x4c
        m_lastDebounceTime = millis();
     4c8:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ca:	ldr	r1, [r4, #0]
     4cc:	str	r1, [sp, #72]	; 0x48
	return ret;
     4ce:	ldr	r1, [sp, #72]	; 0x48
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d0:	cmp	r1, r3
     4d2:	beq.n	4e6 <loop+0x4e>
        if (reading != m_state) {
     4d4:	ldr	r3, [r5, #4]
     4d6:	ldr	r6, [pc, #584]	; (720 <loop+0x288>)
     4d8:	cmp	r0, r3
     4da:	beq.w	88a <loop+0x3f2>
          m_state = reading;
     4de:	str	r0, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     4e0:	cmp	r0, #0
     4e2:	beq.w	892 <loop+0x3fa>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e6:	ldr	r6, [pc, #572]	; (724 <loop+0x28c>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4e8:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ea:	ldrb.w	r0, [r6, #32]
     4ee:	bl	1564 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f4:	str	r0, [r6, #12]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f8:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fa:	beq.w	86a <loop+0x3d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4fe:	ldr	r3, [r4, #0]
     500:	str	r3, [sp, #68]	; 0x44
	return ret;
     502:	ldr	r3, [sp, #68]	; 0x44
        m_lastDebounceTime = millis();
     504:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     506:	ldr	r1, [r4, #0]
     508:	str	r1, [sp, #64]	; 0x40
	return ret;
     50a:	ldr	r1, [sp, #64]	; 0x40
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     50c:	cmp	r1, r3
     50e:	beq.n	522 <loop+0x8a>
        if (reading != m_state) {
     510:	ldr	r3, [r6, #4]
     512:	ldr	r5, [pc, #528]	; (724 <loop+0x28c>)
     514:	cmp	r0, r3
     516:	beq.w	882 <loop+0x3ea>
          m_state = reading;
     51a:	str	r0, [r5, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     51c:	cmp	r0, #0
     51e:	beq.w	8c6 <loop+0x42e>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     522:	ldr	r5, [pc, #516]	; (728 <loop+0x290>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     524:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     526:	ldrb.w	r0, [r5, #32]
     52a:	bl	1564 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     52e:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     530:	str	r0, [r5, #12]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     532:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     534:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	beq.w	872 <loop+0x3da>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     53a:	ldr	r3, [r4, #0]
     53c:	str	r3, [sp, #60]	; 0x3c
	return ret;
     53e:	ldr	r3, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     540:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     542:	ldr	r1, [r4, #0]
     544:	str	r1, [sp, #56]	; 0x38
	return ret;
     546:	ldr	r1, [sp, #56]	; 0x38
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     548:	cmp	r3, r1
     54a:	beq.n	55e <loop+0xc6>
        if (reading != m_state) {
     54c:	ldr	r3, [r5, #4]
     54e:	ldr	r6, [pc, #472]	; (728 <loop+0x290>)
     550:	cmp	r0, r3
     552:	beq.w	88e <loop+0x3f6>
          m_state = reading;
     556:	str	r0, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     558:	cmp	r0, #0
     55a:	beq.w	8ac <loop+0x414>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     55e:	ldr	r6, [pc, #460]	; (72c <loop+0x294>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     560:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     562:	ldrb.w	r0, [r6, #32]
     566:	bl	1564 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     56a:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	str	r0, [r6, #12]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     56e:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     572:	beq.w	87a <loop+0x3e2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     576:	ldr	r3, [r4, #0]
     578:	str	r3, [sp, #52]	; 0x34
	return ret;
     57a:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     57c:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     57e:	ldr	r1, [r4, #0]
     580:	str	r1, [sp, #48]	; 0x30
	return ret;
     582:	ldr	r1, [sp, #48]	; 0x30
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     584:	cmp	r3, r1
     586:	beq.n	59a <loop+0x102>
        if (reading != m_state) {
     588:	ldr	r3, [r6, #4]
     58a:	ldr	r5, [pc, #416]	; (72c <loop+0x294>)
     58c:	cmp	r0, r3
     58e:	beq.w	87e <loop+0x3e6>
          m_state = reading;
     592:	str	r0, [r5, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     594:	cmp	r0, #0
     596:	beq.w	8e0 <loop+0x448>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     59a:	ldr	r5, [pc, #404]	; (730 <loop+0x298>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     59c:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     59e:	ldrb.w	r0, [r5, #32]
     5a2:	bl	1564 <digitalRead>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5a6:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5a8:	str	r0, [r5, #12]
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5aa:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ac:	mov	r2, r0
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ae:	beq.w	876 <loop+0x3de>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5b2:	ldr	r3, [r4, #0]
     5b4:	str	r3, [sp, #44]	; 0x2c
	return ret;
     5b6:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     5b8:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5ba:	ldr	r1, [r4, #0]
     5bc:	str	r1, [sp, #40]	; 0x28
	return ret;
     5be:	ldr	r1, [sp, #40]	; 0x28
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5c0:	cmp	r1, r3
     5c2:	beq.n	5ea <loop+0x152>
        if (reading != m_state) {
     5c4:	ldr	r3, [r5, #4]
     5c6:	ldr	r6, [pc, #360]	; (730 <loop+0x298>)
     5c8:	cmp	r0, r3
     5ca:	beq.w	886 <loop+0x3ee>
          m_state = reading;
     5ce:	str	r0, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     5d0:	cbnz	r0, 5ea <loop+0x152>
     5d2:	ldrb	r3, [r6, #16]
     5d4:	cmp	r3, #0
     5d6:	beq.w	912 <loop+0x47a>
        if (globalMode == PITCH) {
     5da:	ldr	r1, [pc, #344]	; (734 <loop+0x29c>)
     5dc:	ldrb	r3, [r1, #0]
     5de:	cmp	r3, #0
     5e0:	beq.w	b82 <loop+0x6ea>
          globalMode = VELOCITY;
        } else if (globalMode == VELOCITY) {
     5e4:	cmp	r3, #1
     5e6:	beq.w	b7e <loop+0x6e6>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     5ea:	ldr	r6, [pc, #332]	; (738 <loop+0x2a0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5ec:	str	r2, [r5, #8]
     5ee:	ldrb	r3, [r6, #16]
     5f0:	cbz	r3, 604 <loop+0x16c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5f2:	ldr	r3, [r4, #0]
     5f4:	str	r3, [sp, #36]	; 0x24
	return ret;
     5f6:	ldr	r3, [sp, #36]	; 0x24
        if (millis() - lastBlink > blinkLength) {
     5f8:	ldr	r1, [r6, #8]
     5fa:	ldr	r2, [r6, #12]
     5fc:	subs	r3, r3, r1
     5fe:	cmp	r3, r2
     600:	bhi.w	82a <loop+0x392>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     604:	ldr	r5, [pc, #308]	; (73c <loop+0x2a4>)
     606:	ldrb	r3, [r5, #16]
     608:	cbz	r3, 61c <loop+0x184>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #32]
	return ret;
     60e:	ldr	r3, [sp, #32]
        if (millis() - lastBlink > blinkLength) {
     610:	ldr	r1, [r5, #8]
     612:	ldr	r2, [r5, #12]
     614:	subs	r3, r3, r1
     616:	cmp	r3, r2
     618:	bhi.w	810 <loop+0x378>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     61c:	ldr	r5, [pc, #288]	; (740 <loop+0x2a8>)
     61e:	ldrb	r3, [r5, #16]
     620:	cbz	r3, 634 <loop+0x19c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     622:	ldr	r3, [r4, #0]
     624:	str	r3, [sp, #28]
	return ret;
     626:	ldr	r3, [sp, #28]
        if (millis() - lastBlink > blinkLength) {
     628:	ldr	r1, [r5, #8]
     62a:	ldr	r2, [r5, #12]
     62c:	subs	r3, r3, r1
     62e:	cmp	r3, r2
     630:	bhi.w	7f6 <loop+0x35e>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     634:	ldr	r5, [pc, #268]	; (744 <loop+0x2ac>)
     636:	ldrb	r3, [r5, #16]
     638:	cbz	r3, 64c <loop+0x1b4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     63a:	ldr	r3, [r4, #0]
     63c:	str	r3, [sp, #24]
	return ret;
     63e:	ldr	r3, [sp, #24]
        if (millis() - lastBlink > blinkLength) {
     640:	ldr	r1, [r5, #8]
     642:	ldr	r2, [r5, #12]
     644:	subs	r3, r3, r1
     646:	cmp	r3, r2
     648:	bhi.w	7dc <loop+0x344>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     64c:	ldr	r5, [pc, #248]	; (748 <loop+0x2b0>)
     64e:	ldrb	r3, [r5, #16]
     650:	cbz	r3, 664 <loop+0x1cc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     652:	ldr	r3, [r4, #0]
     654:	str	r3, [sp, #20]
	return ret;
     656:	ldr	r3, [sp, #20]
        if (millis() - lastBlink > blinkLength) {
     658:	ldr	r1, [r5, #8]
     65a:	ldr	r2, [r5, #12]
     65c:	subs	r3, r3, r1
     65e:	cmp	r3, r2
     660:	bhi.w	7c2 <loop+0x32a>
      m_knobType = knobType;
      m_id = id;
    };

    void check () {
      m_value = analogRead(m_pin);
     664:	ldr	r4, [pc, #228]	; (74c <loop+0x2b4>)
     666:	ldrb	r0, [r4, #0]
     668:	bl	1374 <analogRead>


      int diff = std::abs(m_value - m_lastValue);
     66c:	ldr	r2, [r4, #8]
      m_knobType = knobType;
      m_id = id;
    };

    void check () {
      m_value = analogRead(m_pin);
     66e:	str	r0, [r4, #4]


      int diff = std::abs(m_value - m_lastValue);
     670:	subs	r3, r0, r2
     672:	cmp	r3, #0
     674:	it	lt
     676:	neglt	r3, r3
      if (m_value != m_lastValue && diff > 10) {
     678:	cmp	r0, r2
     67a:	beq.n	6aa <loop+0x212>
     67c:	cmp	r3, #10
     67e:	ble.n	6aa <loop+0x212>
        if (globalMode == VELOCITY) {
     680:	ldr	r3, [pc, #176]	; (734 <loop+0x29c>)
     682:	ldrb	r3, [r3, #0]
     684:	cmp	r3, #1
     686:	beq.w	b22 <loop+0x68a>
          m_sequence.controlVelocity(m_value, m_id);
        } else if (globalMode == PITCH) {
     68a:	cbnz	r3, 6a8 <loop+0x210>
     68c:	ldr	r3, [r4, #16]
      m_piano = piano;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_piano->notes[id] = newValue;
     68e:	ldr	r1, [r4, #12]
     690:	ldr	r2, [r3, #24]
     692:	sub.w	r3, r0, r0, lsl #2
     696:	lsls	r3, r3, #2
     698:	it	mi
     69a:	addwmi	r3, r3, #1023	; 0x3ff
     69e:	add.w	r2, r2, r1, lsl #2
     6a2:	asrs	r3, r3, #10
     6a4:	adds	r3, #51	; 0x33
     6a6:	str	r3, [r2, #4]
        } else if (m_knobType == LENGTH) {
        } else if (m_knobType == NOTE) {
        } else if (m_knobType == MAGIC) {  
        }

        m_lastValue = m_value;
     6a8:	str	r0, [r4, #8]
      m_knobType = knobType;
      m_id = id;
    };

    void check () {
      m_value = analogRead(m_pin);
     6aa:	ldr	r4, [pc, #164]	; (750 <loop+0x2b8>)
     6ac:	ldrb	r0, [r4, #0]
     6ae:	bl	1374 <analogRead>


      int diff = std::abs(m_value - m_lastValue);
     6b2:	ldr	r2, [r4, #8]
      m_knobType = knobType;
      m_id = id;
    };

    void check () {
      m_value = analogRead(m_pin);
     6b4:	str	r0, [r4, #4]


      int diff = std::abs(m_value - m_lastValue);
     6b6:	subs	r3, r0, r2
     6b8:	cmp	r3, #0
     6ba:	it	lt
     6bc:	neglt	r3, r3
      if (m_value != m_lastValue && diff > 10) {
     6be:	cmp	r0, r2
     6c0:	beq.n	6f0 <loop+0x258>
     6c2:	cmp	r3, #10
     6c4:	ble.n	6f0 <loop+0x258>
        if (globalMode == VELOCITY) {
     6c6:	ldr	r3, [pc, #108]	; (734 <loop+0x29c>)
     6c8:	ldrb	r3, [r3, #0]
     6ca:	cmp	r3, #1
     6cc:	beq.w	ac6 <loop+0x62e>
          m_sequence.controlVelocity(m_value, m_id);
        } else if (globalMode == PITCH) {
     6d0:	cbnz	r3, 6ee <loop+0x256>
     6d2:	ldr	r3, [r4, #16]
     6d4:	ldr	r1, [r4, #12]
     6d6:	ldr	r2, [r3, #24]
     6d8:	sub.w	r3, r0, r0, lsl #2
     6dc:	lsls	r3, r3, #2
     6de:	it	mi
     6e0:	addwmi	r3, r3, #1023	; 0x3ff
     6e4:	add.w	r2, r2, r1, lsl #2
     6e8:	asrs	r3, r3, #10
     6ea:	adds	r3, #51	; 0x33
     6ec:	str	r3, [r2, #4]
        } else if (m_knobType == LENGTH) {
        } else if (m_knobType == NOTE) {
        } else if (m_knobType == MAGIC) {  
        }

        m_lastValue = m_value;
     6ee:	str	r0, [r4, #8]
      m_knobType = knobType;
      m_id = id;
    };

    void check () {
      m_value = analogRead(m_pin);
     6f0:	ldr	r4, [pc, #96]	; (754 <loop+0x2bc>)
     6f2:	ldrb	r0, [r4, #0]
     6f4:	bl	1374 <analogRead>


      int diff = std::abs(m_value - m_lastValue);
     6f8:	ldr	r2, [r4, #8]
      m_knobType = knobType;
      m_id = id;
    };

    void check () {
      m_value = analogRead(m_pin);
     6fa:	str	r0, [r4, #4]


      int diff = std::abs(m_value - m_lastValue);
     6fc:	subs	r3, r0, r2
     6fe:	cmp	r3, #0
     700:	it	lt
     702:	neglt	r3, r3
      if (m_value != m_lastValue && diff > 10) {
     704:	cmp	r0, r2
     706:	beq.n	776 <loop+0x2de>
     708:	cmp	r3, #10
     70a:	ble.n	776 <loop+0x2de>
        if (globalMode == VELOCITY) {
     70c:	ldr	r3, [pc, #36]	; (734 <loop+0x29c>)
     70e:	ldrb	r3, [r3, #0]
     710:	cmp	r3, #1
     712:	beq.w	af4 <loop+0x65c>
          m_sequence.controlVelocity(m_value, m_id);
        } else if (globalMode == PITCH) {
     716:	cbnz	r3, 774 <loop+0x2dc>
     718:	b.n	758 <loop+0x2c0>
     71a:	nop
     71c:	.word	0x1fff17fc
     720:	.word	0x1fff169c
     724:	.word	0x1fff16c4
     728:	.word	0x1fff16ec
     72c:	.word	0x1fff17bc
     730:	.word	0x1fff1758
     734:	.word	0x1fff15c4
     738:	.word	0x1fff1604
     73c:	.word	0x1fff1630
     740:	.word	0x1fff15c8
     744:	.word	0x1fff15dc
     748:	.word	0x1fff15f0
     74c:	.word	0x1fff1684
     750:	.word	0x1fff1618
     754:	.word	0x1fff1644
     758:	ldr	r3, [r4, #16]
     75a:	ldr	r1, [r4, #12]
     75c:	ldr	r2, [r3, #24]
     75e:	sub.w	r3, r0, r0, lsl #2
     762:	lsls	r3, r3, #2
     764:	it	mi
     766:	addwmi	r3, r3, #1023	; 0x3ff
     76a:	add.w	r2, r2, r1, lsl #2
     76e:	asrs	r3, r3, #10
     770:	adds	r3, #51	; 0x33
     772:	str	r3, [r2, #4]
        } else if (m_knobType == LENGTH) {
        } else if (m_knobType == NOTE) {
        } else if (m_knobType == MAGIC) {  
        }

        m_lastValue = m_value;
     774:	str	r0, [r4, #8]
      m_knobType = knobType;
      m_id = id;
    };

    void check () {
      m_value = analogRead(m_pin);
     776:	ldr	r4, [pc, #692]	; (a2c <loop+0x594>)
     778:	ldrb	r0, [r4, #0]
     77a:	bl	1374 <analogRead>


      int diff = std::abs(m_value - m_lastValue);
     77e:	ldr	r2, [r4, #8]
      m_knobType = knobType;
      m_id = id;
    };

    void check () {
      m_value = analogRead(m_pin);
     780:	str	r0, [r4, #4]


      int diff = std::abs(m_value - m_lastValue);
     782:	subs	r3, r0, r2
     784:	cmp	r3, #0
     786:	it	lt
     788:	neglt	r3, r3
      if (m_value != m_lastValue && diff > 10) {
     78a:	cmp	r0, r2
     78c:	beq.n	7bc <loop+0x324>
     78e:	cmp	r3, #10
     790:	ble.n	7bc <loop+0x324>
        if (globalMode == VELOCITY) {
     792:	ldr	r3, [pc, #668]	; (a30 <loop+0x598>)
     794:	ldrb	r3, [r3, #0]
     796:	cmp	r3, #1
     798:	beq.w	b50 <loop+0x6b8>
          m_sequence.controlVelocity(m_value, m_id);
        } else if (globalMode == PITCH) {
     79c:	cbnz	r3, 7ba <loop+0x322>
     79e:	ldr	r3, [r4, #16]
     7a0:	ldr	r1, [r4, #12]
     7a2:	ldr	r2, [r3, #24]
     7a4:	sub.w	r3, r0, r0, lsl #2
     7a8:	lsls	r3, r3, #2
     7aa:	it	mi
     7ac:	addwmi	r3, r3, #1023	; 0x3ff
     7b0:	add.w	r2, r2, r1, lsl #2
     7b4:	asrs	r3, r3, #10
     7b6:	adds	r3, #51	; 0x33
     7b8:	str	r3, [r2, #4]
        } else if (m_knobType == LENGTH) {
        } else if (m_knobType == NOTE) {
        } else if (m_knobType == MAGIC) {  
        }

        m_lastValue = m_value;
     7ba:	str	r0, [r4, #8]
  led5.check();
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
}
     7bc:	add	sp, #80	; 0x50
     7be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          digitalWrite(m_pin, !digitalRead(m_pin));
     7c2:	ldrb	r4, [r5, #0]
     7c4:	mov	r0, r4
     7c6:	bl	1564 <digitalRead>
     7ca:	clz	r1, r0
     7ce:	lsrs	r1, r1, #5
     7d0:	mov	r0, r4
     7d2:	bl	1558 <digitalWrite>
          blinking = false;
     7d6:	movs	r3, #0
     7d8:	strb	r3, [r5, #16]
     7da:	b.n	664 <loop+0x1cc>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     7dc:	ldrb	r6, [r5, #0]
     7de:	mov	r0, r6
     7e0:	bl	1564 <digitalRead>
     7e4:	clz	r1, r0
     7e8:	lsrs	r1, r1, #5
     7ea:	mov	r0, r6
     7ec:	bl	1558 <digitalWrite>
          blinking = false;
     7f0:	movs	r3, #0
     7f2:	strb	r3, [r5, #16]
     7f4:	b.n	64c <loop+0x1b4>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     7f6:	ldrb	r6, [r5, #0]
     7f8:	mov	r0, r6
     7fa:	bl	1564 <digitalRead>
     7fe:	clz	r1, r0
     802:	lsrs	r1, r1, #5
     804:	mov	r0, r6
     806:	bl	1558 <digitalWrite>
          blinking = false;
     80a:	movs	r3, #0
     80c:	strb	r3, [r5, #16]
     80e:	b.n	634 <loop+0x19c>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     810:	ldrb	r6, [r5, #0]
     812:	mov	r0, r6
     814:	bl	1564 <digitalRead>
     818:	clz	r1, r0
     81c:	lsrs	r1, r1, #5
     81e:	mov	r0, r6
     820:	bl	1558 <digitalWrite>
          blinking = false;
     824:	movs	r3, #0
     826:	strb	r3, [r5, #16]
     828:	b.n	61c <loop+0x184>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     82a:	ldrb	r5, [r6, #0]
     82c:	mov	r0, r5
     82e:	bl	1564 <digitalRead>
     832:	clz	r1, r0
     836:	lsrs	r1, r1, #5
     838:	mov	r0, r5
     83a:	bl	1558 <digitalWrite>
          blinking = false;
     83e:	movs	r3, #0
     840:	strb	r3, [r6, #16]
     842:	b.n	604 <loop+0x16c>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     844:	ldr	r3, [pc, #492]	; (a34 <loop+0x59c>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     846:	ldrb	r3, [r3, #0]
     848:	cmp	r3, #250	; 0xfa
     84a:	beq.w	a4c <loop+0x5b4>
     84e:	cmp	r3, #252	; 0xfc
     850:	beq.n	8fc <loop+0x464>
     852:	cmp	r3, #248	; 0xf8
     854:	beq.w	a88 <loop+0x5f0>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     858:	movs	r1, #35	; 0x23
     85a:	ldr	r0, [pc, #476]	; (a38 <loop+0x5a0>)
     85c:	ldr	r4, [pc, #476]	; (a3c <loop+0x5a4>)
     85e:	bl	f48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     862:	ldr	r0, [pc, #476]	; (a40 <loop+0x5a8>)
     864:	bl	2abc <Print::println()>
     868:	b.n	4ac <loop+0x14>
     86a:	ldr	r3, [r6, #20]
     86c:	b.n	506 <loop+0x6e>
     86e:	ldr	r3, [r5, #20]
     870:	b.n	4ca <loop+0x32>
     872:	ldr	r3, [r5, #20]
     874:	b.n	542 <loop+0xaa>
     876:	ldr	r3, [r5, #20]
     878:	b.n	5ba <loop+0x122>
     87a:	ldr	r3, [r6, #20]
     87c:	b.n	57e <loop+0xe6>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     87e:	mov	r2, r0
     880:	b.n	59a <loop+0x102>
     882:	mov	r2, r0
     884:	b.n	522 <loop+0x8a>
     886:	mov	r2, r0
     888:	b.n	5ea <loop+0x152>
     88a:	mov	r2, r0
     88c:	b.n	4e6 <loop+0x4e>
     88e:	mov	r2, r0
     890:	b.n	55e <loop+0xc6>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     892:	ldrb	r3, [r6, #16]
     894:	cmp	r3, #0
     896:	beq.n	982 <loop+0x4ea>
        if (globalMode == PITCH) {
     898:	ldr	r1, [pc, #404]	; (a30 <loop+0x598>)
     89a:	ldrb	r3, [r1, #0]
     89c:	cmp	r3, #0
     89e:	beq.w	bd6 <loop+0x73e>
          globalMode = VELOCITY;
        } else if (globalMode == VELOCITY) {
     8a2:	cmp	r3, #1
     8a4:	bne.w	4e6 <loop+0x4e>
          globalMode = PITCH;
     8a8:	strb	r0, [r1, #0]
     8aa:	b.n	4e6 <loop+0x4e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     8ac:	ldrb	r3, [r6, #16]
     8ae:	cmp	r3, #0
     8b0:	beq.n	94a <loop+0x4b2>
        if (globalMode == PITCH) {
     8b2:	ldr	r1, [pc, #380]	; (a30 <loop+0x598>)
     8b4:	ldrb	r3, [r1, #0]
     8b6:	cmp	r3, #0
     8b8:	beq.w	bc4 <loop+0x72c>
          globalMode = VELOCITY;
        } else if (globalMode == VELOCITY) {
     8bc:	cmp	r3, #1
     8be:	bne.w	55e <loop+0xc6>
          globalMode = PITCH;
     8c2:	strb	r0, [r1, #0]
     8c4:	b.n	55e <loop+0xc6>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     8c6:	ldrb	r3, [r5, #16]
     8c8:	cmp	r3, #0
     8ca:	beq.n	9ba <loop+0x522>
        if (globalMode == PITCH) {
     8cc:	ldr	r1, [pc, #352]	; (a30 <loop+0x598>)
     8ce:	ldrb	r3, [r1, #0]
     8d0:	cmp	r3, #0
     8d2:	beq.w	bd0 <loop+0x738>
          globalMode = VELOCITY;
        } else if (globalMode == VELOCITY) {
     8d6:	cmp	r3, #1
     8d8:	bne.w	522 <loop+0x8a>
          globalMode = PITCH;
     8dc:	strb	r0, [r1, #0]
     8de:	b.n	522 <loop+0x8a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     8e0:	ldrb	r3, [r5, #16]
     8e2:	cmp	r3, #0
     8e4:	beq.w	9f2 <loop+0x55a>
        if (globalMode == PITCH) {
     8e8:	ldr	r1, [pc, #324]	; (a30 <loop+0x598>)
     8ea:	ldrb	r3, [r1, #0]
     8ec:	cmp	r3, #0
     8ee:	beq.w	bca <loop+0x732>
          globalMode = VELOCITY;
        } else if (globalMode == VELOCITY) {
     8f2:	cmp	r3, #1
     8f4:	bne.w	59a <loop+0x102>
          globalMode = PITCH;
     8f8:	strb	r0, [r1, #0]
     8fa:	b.n	59a <loop+0x102>
      doStep();
      digitalWrite(13, HIGH);
    };

    void stopPPQN () {
      m_state = false;
     8fc:	movs	r3, #0
     8fe:	ldr	r2, [pc, #324]	; (a44 <loop+0x5ac>)
     900:	ldr	r4, [pc, #312]	; (a3c <loop+0x5a4>)
     902:	strb	r3, [r2, #28]
      ppqn = 0;
      m_currentStep = 0;
      digitalWrite(13, LOW);
     904:	mov	r1, r3
     906:	movs	r0, #13
      digitalWrite(13, HIGH);
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
     908:	str	r3, [r2, #52]	; 0x34
      m_currentStep = 0;
     90a:	str	r3, [r2, #32]
      digitalWrite(13, LOW);
     90c:	bl	1558 <digitalWrite>
     910:	b.n	4ac <loop+0x14>
        }

      } else if (m_state == LOW) {
        m_led.toggle();
     912:	ldr	r7, [r6, #24]
     914:	ldr	r0, [pc, #304]	; (a48 <loop+0x5b0>)
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     916:	ldr	r3, [r7, #4]
     918:	clz	r3, r3
     91c:	lsrs	r3, r3, #5
     91e:	str	r3, [r7, #4]
     920:	movs	r1, #12
     922:	bl	f48 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     926:	ldr	r1, [r7, #0]
     928:	ldr	r0, [pc, #276]	; (a40 <loop+0x5a8>)
     92a:	bl	2b5c <Print::print(long)>

      Serial.print("Toggling led");
      Serial.print(m_pin);

      digitalWrite(m_pin, m_state); 
     92e:	ldrb	r1, [r7, #4]
     930:	ldrb	r0, [r7, #0]
     932:	bl	1558 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     936:	ldr	r3, [r6, #0]
     938:	ldr	r1, [r6, #28]
     93a:	ldr	r2, [r6, #12]
     93c:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     93e:	add	r3, r1
     940:	ldrb	r1, [r3, #20]
     942:	eor.w	r1, r1, #1
     946:	strb	r1, [r3, #20]
     948:	b.n	5ea <loop+0x152>
        } else if (globalMode == VELOCITY) {
          globalMode = PITCH;
        }

      } else if (m_state == LOW) {
        m_led.toggle();
     94a:	ldr	r7, [r6, #24]
     94c:	ldr	r0, [pc, #248]	; (a48 <loop+0x5b0>)
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     94e:	ldr	r3, [r7, #4]
     950:	clz	r3, r3
     954:	lsrs	r3, r3, #5
     956:	str	r3, [r7, #4]
     958:	movs	r1, #12
     95a:	bl	f48 <usb_serial_write>
     95e:	ldr	r1, [r7, #0]
     960:	ldr	r0, [pc, #220]	; (a40 <loop+0x5a8>)
     962:	bl	2b5c <Print::print(long)>

      Serial.print("Toggling led");
      Serial.print(m_pin);

      digitalWrite(m_pin, m_state); 
     966:	ldrb	r1, [r7, #4]
     968:	ldrb	r0, [r7, #0]
     96a:	bl	1558 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     96e:	ldr	r3, [r6, #0]
     970:	ldr	r1, [r6, #28]
     972:	ldr	r2, [r6, #12]
     974:	subs	r3, #1
     976:	add	r3, r1
     978:	ldrb	r1, [r3, #20]
     97a:	eor.w	r1, r1, #1
     97e:	strb	r1, [r3, #20]
     980:	b.n	55e <loop+0xc6>
        } else if (globalMode == VELOCITY) {
          globalMode = PITCH;
        }

      } else if (m_state == LOW) {
        m_led.toggle();
     982:	ldr	r7, [r6, #24]
     984:	ldr	r0, [pc, #192]	; (a48 <loop+0x5b0>)
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     986:	ldr	r3, [r7, #4]
     988:	clz	r3, r3
     98c:	lsrs	r3, r3, #5
     98e:	str	r3, [r7, #4]
     990:	movs	r1, #12
     992:	bl	f48 <usb_serial_write>
     996:	ldr	r1, [r7, #0]
     998:	ldr	r0, [pc, #164]	; (a40 <loop+0x5a8>)
     99a:	bl	2b5c <Print::print(long)>

      Serial.print("Toggling led");
      Serial.print(m_pin);

      digitalWrite(m_pin, m_state); 
     99e:	ldrb	r1, [r7, #4]
     9a0:	ldrb	r0, [r7, #0]
     9a2:	bl	1558 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     9a6:	ldr	r3, [r6, #0]
     9a8:	ldr	r1, [r6, #28]
     9aa:	ldr	r2, [r6, #12]
     9ac:	subs	r3, #1
     9ae:	add	r3, r1
     9b0:	ldrb	r1, [r3, #20]
     9b2:	eor.w	r1, r1, #1
     9b6:	strb	r1, [r3, #20]
     9b8:	b.n	4e6 <loop+0x4e>
        } else if (globalMode == VELOCITY) {
          globalMode = PITCH;
        }

      } else if (m_state == LOW) {
        m_led.toggle();
     9ba:	ldr	r7, [r5, #24]
     9bc:	ldr	r0, [pc, #136]	; (a48 <loop+0x5b0>)
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     9be:	ldr	r3, [r7, #4]
     9c0:	clz	r3, r3
     9c4:	lsrs	r3, r3, #5
     9c6:	str	r3, [r7, #4]
     9c8:	movs	r1, #12
     9ca:	bl	f48 <usb_serial_write>
     9ce:	ldr	r1, [r7, #0]
     9d0:	ldr	r0, [pc, #108]	; (a40 <loop+0x5a8>)
     9d2:	bl	2b5c <Print::print(long)>

      Serial.print("Toggling led");
      Serial.print(m_pin);

      digitalWrite(m_pin, m_state); 
     9d6:	ldrb	r1, [r7, #4]
     9d8:	ldrb	r0, [r7, #0]
     9da:	bl	1558 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     9de:	ldr	r3, [r5, #0]
     9e0:	ldr	r1, [r5, #28]
     9e2:	ldr	r2, [r5, #12]
     9e4:	subs	r3, #1
     9e6:	add	r3, r1
     9e8:	ldrb	r1, [r3, #20]
     9ea:	eor.w	r1, r1, #1
     9ee:	strb	r1, [r3, #20]
     9f0:	b.n	522 <loop+0x8a>
        } else if (globalMode == VELOCITY) {
          globalMode = PITCH;
        }

      } else if (m_state == LOW) {
        m_led.toggle();
     9f2:	ldr	r7, [r5, #24]
     9f4:	ldr	r0, [pc, #80]	; (a48 <loop+0x5b0>)
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     9f6:	ldr	r3, [r7, #4]
     9f8:	clz	r3, r3
     9fc:	lsrs	r3, r3, #5
     9fe:	str	r3, [r7, #4]
     a00:	movs	r1, #12
     a02:	bl	f48 <usb_serial_write>
     a06:	ldr	r1, [r7, #0]
     a08:	ldr	r0, [pc, #52]	; (a40 <loop+0x5a8>)
     a0a:	bl	2b5c <Print::print(long)>

      Serial.print("Toggling led");
      Serial.print(m_pin);

      digitalWrite(m_pin, m_state); 
     a0e:	ldrb	r1, [r7, #4]
     a10:	ldrb	r0, [r7, #0]
     a12:	bl	1558 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     a16:	ldr	r3, [r5, #0]
     a18:	ldr	r1, [r5, #28]
     a1a:	ldr	r2, [r5, #12]
     a1c:	subs	r3, #1
     a1e:	add	r3, r1
     a20:	ldrb	r1, [r3, #20]
     a22:	eor.w	r1, r1, #1
     a26:	strb	r1, [r3, #20]
     a28:	b.n	59a <loop+0x102>
     a2a:	nop
     a2c:	.word	0x1fff1780
     a30:	.word	0x1fff15c4
     a34:	.word	0x1fff1cb8
     a38:	.word	0x00003f0c
     a3c:	.word	0x1fff17fc
     a40:	.word	0x1fff0c5c
     a44:	.word	0x1fff1718
     a48:	.word	0x00003f30
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     a4c:	ldr	r5, [pc, #552]	; (c78 <loop+0x7e0>)
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     a4e:	ldr	r0, [pc, #556]	; (c7c <loop+0x7e4>)
     a50:	ldr	r3, [r5, #24]
      ppqn = 0;
     a52:	movs	r2, #0
     a54:	str	r2, [r5, #52]	; 0x34
     a56:	ldr	r3, [r3, #0]
     a58:	lsls	r3, r3, #16
     a5a:	and.w	r3, r3, #8323072	; 0x7f0000
     a5e:	orrs	r0, r3
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     a60:	movs	r6, #1
     a62:	strb	r6, [r5, #28]
     a64:	bl	17e4 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     a68:	bl	1880 <usb_midi_flush_output>
    };

    void doStep () {      
      m_piano->stopStep();
      
      if (m_state) {
     a6c:	ldrb	r3, [r5, #28]
     a6e:	cmp	r3, #0
     a70:	bne.w	b88 <loop+0x6f0>
     a74:	ldr	r4, [pc, #520]	; (c80 <loop+0x7e8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a76:	ldr	r3, [r4, #0]
     a78:	str	r3, [sp, #12]
	return ret;
     a7a:	ldr	r3, [sp, #12]
        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      }

      lastMillis = millis();
     a7c:	str	r3, [r5, #48]	; 0x30

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      digitalWrite(13, HIGH);
     a7e:	movs	r1, #1
     a80:	movs	r0, #13
     a82:	bl	1558 <digitalWrite>
     a86:	b.n	4ac <loop+0x14>
    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
    };

    void advancePPQN () {
      ++ppqn;
     a88:	ldr	r5, [pc, #492]	; (c78 <loop+0x7e0>)
     a8a:	ldr	r3, [r5, #52]	; 0x34
          
      if (ppqn == max_ppqn) {
     a8c:	ldr	r2, [r5, #56]	; 0x38
    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
    };

    void advancePPQN () {
      ++ppqn;
     a8e:	adds	r3, #1
          
      if (ppqn == max_ppqn) {
     a90:	cmp	r3, r2
    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
    };

    void advancePPQN () {
      ++ppqn;
     a92:	str	r3, [r5, #52]	; 0x34
          
      if (ppqn == max_ppqn) {
     a94:	bne.w	4aa <loop+0x12>
     a98:	ldr	r3, [r5, #24]
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     a9a:	ldr	r0, [pc, #480]	; (c7c <loop+0x7e4>)
     a9c:	ldr	r3, [r3, #0]
     a9e:	lsls	r3, r3, #16
     aa0:	and.w	r3, r3, #8323072	; 0x7f0000
     aa4:	orrs	r0, r3
     aa6:	bl	17e4 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     aaa:	bl	1880 <usb_midi_flush_output>
    };

    void doStep () {      
      m_piano->stopStep();
      
      if (m_state) {
     aae:	ldrb	r3, [r5, #28]
     ab0:	cmp	r3, #0
     ab2:	bne.w	c0c <loop+0x774>
     ab6:	ldr	r4, [pc, #456]	; (c80 <loop+0x7e8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ab8:	ldr	r3, [r4, #0]
     aba:	str	r3, [sp, #4]
	return ret;
     abc:	ldr	r3, [sp, #4]
        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      }

      lastMillis = millis();
     abe:	str	r3, [r5, #48]	; 0x30
    void advancePPQN () {
      ++ppqn;
          
      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     ac0:	movs	r3, #0
     ac2:	str	r3, [r5, #52]	; 0x34
     ac4:	b.n	4ac <loop+0x14>
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     ac6:	subs.w	r0, r0, r0, lsl #6
     aca:	it	mi
     acc:	addwmi	r0, r0, #1023	; 0x3ff
     ad0:	asrs	r0, r0, #10
     ad2:	add.w	r5, r0, #127	; 0x7f


      int diff = std::abs(m_value - m_lastValue);
      if (m_value != m_lastValue && diff > 10) {
        if (globalMode == VELOCITY) {
          m_sequence.controlVelocity(m_value, m_id);
     ad6:	ldr	r7, [r4, #16]
     ad8:	ldr	r0, [pc, #424]	; (c84 <loop+0x7ec>)
     ada:	ldr	r6, [r4, #12]
     adc:	mov	r1, r5
     ade:	bl	2b5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ae2:	ldr	r0, [pc, #416]	; (c84 <loop+0x7ec>)
     ae4:	bl	2abc <Print::println()>
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      Serial.println(newValue);
      m_piano->notesVelocities[id] = newValue;
     ae8:	ldr	r3, [r7, #24]
     aea:	ldr	r0, [r4, #4]
     aec:	add.w	r3, r3, r6, lsl #2
     af0:	str	r5, [r3, #20]
     af2:	b.n	6ee <loop+0x256>
     af4:	subs.w	r0, r0, r0, lsl #6
     af8:	it	mi
     afa:	addwmi	r0, r0, #1023	; 0x3ff
     afe:	asrs	r0, r0, #10
     b00:	add.w	r5, r0, #127	; 0x7f
     b04:	ldr	r7, [r4, #16]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     b06:	ldr	r0, [pc, #380]	; (c84 <loop+0x7ec>)
     b08:	ldr	r6, [r4, #12]
     b0a:	mov	r1, r5
     b0c:	bl	2b5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     b10:	ldr	r0, [pc, #368]	; (c84 <loop+0x7ec>)
     b12:	bl	2abc <Print::println()>
     b16:	ldr	r3, [r7, #24]
     b18:	ldr	r0, [r4, #4]
     b1a:	add.w	r3, r3, r6, lsl #2
     b1e:	str	r5, [r3, #20]
     b20:	b.n	774 <loop+0x2dc>
     b22:	subs.w	r0, r0, r0, lsl #6
     b26:	it	mi
     b28:	addwmi	r0, r0, #1023	; 0x3ff
     b2c:	asrs	r0, r0, #10
     b2e:	add.w	r5, r0, #127	; 0x7f
     b32:	ldr	r7, [r4, #16]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     b34:	ldr	r0, [pc, #332]	; (c84 <loop+0x7ec>)
     b36:	ldr	r6, [r4, #12]
     b38:	mov	r1, r5
     b3a:	bl	2b5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     b3e:	ldr	r0, [pc, #324]	; (c84 <loop+0x7ec>)
     b40:	bl	2abc <Print::println()>
     b44:	ldr	r3, [r7, #24]
     b46:	ldr	r0, [r4, #4]
     b48:	add.w	r3, r3, r6, lsl #2
     b4c:	str	r5, [r3, #20]
     b4e:	b.n	6a8 <loop+0x210>
     b50:	subs.w	r0, r0, r0, lsl #6
     b54:	it	mi
     b56:	addwmi	r0, r0, #1023	; 0x3ff
     b5a:	asrs	r0, r0, #10
     b5c:	add.w	r5, r0, #127	; 0x7f
     b60:	ldr	r7, [r4, #16]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     b62:	ldr	r0, [pc, #288]	; (c84 <loop+0x7ec>)
     b64:	ldr	r6, [r4, #12]
     b66:	mov	r1, r5
     b68:	bl	2b5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     b6c:	ldr	r0, [pc, #276]	; (c84 <loop+0x7ec>)
     b6e:	bl	2abc <Print::println()>
     b72:	ldr	r3, [r7, #24]
     b74:	ldr	r0, [r4, #4]
     b76:	add.w	r3, r3, r6, lsl #2
     b7a:	str	r5, [r3, #20]
     b7c:	b.n	7ba <loop+0x322>
    void onClick () {
      if (m_state == LOW && m_startStop) {
        if (globalMode == PITCH) {
          globalMode = VELOCITY;
        } else if (globalMode == VELOCITY) {
          globalMode = PITCH;
     b7e:	strb	r0, [r1, #0]
     b80:	b.n	5ea <loop+0x152>
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
        if (globalMode == PITCH) {
          globalMode = VELOCITY;
     b82:	movs	r3, #1
     b84:	strb	r3, [r1, #0]
     b86:	b.n	5ea <loop+0x152>

    void doStep () {      
      m_piano->stopStep();
      
      if (m_state) {
        m_leds[m_currentStep]->blink();
     b88:	ldr	r3, [r5, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b8a:	ldr	r4, [pc, #244]	; (c80 <loop+0x7e8>)
     b8c:	ldr.w	r7, [r5, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink () {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b90:	ldrb.w	r8, [r7]
     b94:	mov	r0, r8
     b96:	bl	1564 <digitalRead>
     b9a:	clz	r1, r0
     b9e:	lsrs	r1, r1, #5
     ba0:	mov	r0, r8
     ba2:	bl	1558 <digitalWrite>


        if (m_steps[m_currentStep].m_state) {
     ba6:	ldr	r3, [r5, #32]
     ba8:	ldr	r2, [r4, #0]
     baa:	str	r2, [sp, #16]
     bac:	adds	r2, r5, r3
	return ret;
     bae:	ldr	r1, [sp, #16]
     bb0:	ldrb	r2, [r2, #20]
      blinking = true;
     bb2:	strb	r6, [r7, #16]
      lastBlink = millis();  
     bb4:	str	r1, [r7, #8]
     bb6:	cbnz	r2, bdc <loop+0x744>
          m_piano->playStep(m_currentStep);
        }

        m_currentStep++;
     bb8:	adds	r3, #1

        if (m_currentStep > 3) {
     bba:	cmp	r3, #3
          m_currentStep = 0;
     bbc:	it	gt
     bbe:	movgt	r3, #0
     bc0:	str	r3, [r5, #32]
     bc2:	b.n	a76 <loop+0x5de>
     bc4:	movs	r3, #1
     bc6:	strb	r3, [r1, #0]
     bc8:	b.n	55e <loop+0xc6>
     bca:	movs	r3, #1
     bcc:	strb	r3, [r1, #0]
     bce:	b.n	59a <loop+0x102>
     bd0:	movs	r3, #1
     bd2:	strb	r3, [r1, #0]
     bd4:	b.n	522 <loop+0x8a>
     bd6:	movs	r3, #1
     bd8:	strb	r3, [r1, #0]
     bda:	b.n	4e6 <loop+0x4e>
      if (m_state) {
        m_leds[m_currentStep]->blink();


        if (m_steps[m_currentStep].m_state) {
          m_piano->playStep(m_currentStep);
     bdc:	ldr	r7, [r5, #24]
     bde:	add.w	r6, r7, r3, lsl #2
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     be2:	ldr	r2, [r6, #4]
     be4:	ldr	r3, [r6, #20]
     be6:	lsls	r0, r2, #16
     be8:	lsls	r3, r3, #24
     bea:	and.w	r3, r3, #2130706432	; 0x7f000000
     bee:	and.w	r0, r0, #8323072	; 0x7f0000
     bf2:	orrs	r0, r3
     bf4:	orr.w	r0, r0, #40704	; 0x9f00
     bf8:	orr.w	r0, r0, #9
     bfc:	bl	17e4 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     c00:	bl	1880 <usb_midi_flush_output>
      noteOff(0, activeNote, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
     c04:	ldr	r2, [r6, #4]
     c06:	ldr	r3, [r5, #32]
     c08:	str	r2, [r7, #0]
     c0a:	b.n	bb8 <loop+0x720>

    void doStep () {      
      m_piano->stopStep();
      
      if (m_state) {
        m_leds[m_currentStep]->blink();
     c0c:	ldr	r3, [r5, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c0e:	ldr	r4, [pc, #112]	; (c80 <loop+0x7e8>)
     c10:	ldr.w	r6, [r5, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink () {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c14:	ldrb	r7, [r6, #0]
     c16:	mov	r0, r7
     c18:	bl	1564 <digitalRead>
     c1c:	clz	r1, r0
     c20:	lsrs	r1, r1, #5
     c22:	mov	r0, r7
     c24:	bl	1558 <digitalWrite>


        if (m_steps[m_currentStep].m_state) {
     c28:	ldr	r3, [r5, #32]
     c2a:	ldr	r2, [r4, #0]
     c2c:	str	r2, [sp, #8]
     c2e:	adds	r2, r5, r3
      blinking = true;
     c30:	movs	r0, #1
     c32:	ldrb	r2, [r2, #20]
	return ret;
     c34:	ldr	r1, [sp, #8]
     c36:	strb	r0, [r6, #16]
      lastBlink = millis();  
     c38:	str	r1, [r6, #8]
     c3a:	cbnz	r2, c48 <loop+0x7b0>
          m_piano->playStep(m_currentStep);
        }

        m_currentStep++;
     c3c:	adds	r3, #1

        if (m_currentStep > 3) {
     c3e:	cmp	r3, #3
          m_currentStep = 0;
     c40:	it	gt
     c42:	movgt	r3, #0
     c44:	str	r3, [r5, #32]
     c46:	b.n	ab8 <loop+0x620>
      if (m_state) {
        m_leds[m_currentStep]->blink();


        if (m_steps[m_currentStep].m_state) {
          m_piano->playStep(m_currentStep);
     c48:	ldr	r7, [r5, #24]
     c4a:	add.w	r6, r7, r3, lsl #2
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     c4e:	ldr	r2, [r6, #4]
     c50:	ldr	r3, [r6, #20]
     c52:	lsls	r0, r2, #16
     c54:	lsls	r3, r3, #24
     c56:	and.w	r3, r3, #2130706432	; 0x7f000000
     c5a:	and.w	r0, r0, #8323072	; 0x7f0000
     c5e:	orrs	r0, r3
     c60:	orr.w	r0, r0, #40704	; 0x9f00
     c64:	orr.w	r0, r0, #9
     c68:	bl	17e4 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     c6c:	bl	1880 <usb_midi_flush_output>
     c70:	ldr	r2, [r6, #4]
     c72:	ldr	r3, [r5, #32]
     c74:	str	r2, [r7, #0]
     c76:	b.n	c3c <loop+0x7a4>
     c78:	.word	0x1fff1718
     c7c:	.word	0x7f008f08
     c80:	.word	0x1fff17fc
     c84:	.word	0x1fff0c5c

00000c88 <_GLOBAL__sub_I_globalMode>:
  led5.check();
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
}
     c88:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;
const int startStopPin = 12;

Led led1(3, LOW);
     c8c:	movs	r2, #0
     c8e:	movs	r1, #3
     c90:	ldr	r0, [pc, #408]	; (e2c <_GLOBAL__sub_I_globalMode+0x1a4>)
class Piano {
  private:
    int activeNote = 0;
    
  public:
    Piano () {};
     c92:	ldr	r6, [pc, #412]	; (e30 <_GLOBAL__sub_I_globalMode+0x1a8>)
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
      m_leds[0] = leds[0];
     c94:	ldr	r7, [pc, #412]	; (e34 <_GLOBAL__sub_I_globalMode+0x1ac>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     c96:	ldr	r4, [pc, #416]	; (e38 <_GLOBAL__sub_I_globalMode+0x1b0>)
    unsigned long lastMillis = 0;
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
     c98:	ldr.w	fp, [pc, #472]	; e74 <_GLOBAL__sub_I_globalMode+0x1ec>
     c9c:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
     ca0:	movs	r2, #0
     ca2:	movs	r1, #5
     ca4:	ldr	r0, [pc, #404]	; (e3c <_GLOBAL__sub_I_globalMode+0x1b4>)
     ca6:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
     caa:	movs	r2, #0
     cac:	movs	r1, #7
     cae:	ldr	r0, [pc, #400]	; (e40 <_GLOBAL__sub_I_globalMode+0x1b8>)
     cb0:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
     cb4:	movs	r2, #0
     cb6:	movs	r1, #9
     cb8:	ldr	r0, [pc, #392]	; (e44 <_GLOBAL__sub_I_globalMode+0x1bc>)
     cba:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
     cbe:	movs	r2, #0
     cc0:	movs	r1, #11
     cc2:	ldr	r0, [pc, #388]	; (e48 <_GLOBAL__sub_I_globalMode+0x1c0>)
     cc4:	bl	46c <Led::Led(int, int)>
     cc8:	ldr.w	ip, [pc, #428]	; e78 <_GLOBAL__sub_I_globalMode+0x1f0>
      m_leds[0] = leds[0];
     ccc:	ldr.w	lr, [r7]
     cd0:	str.w	lr, [r4]
     cd4:	ldmia.w	r6, {r0, r1, r2, r3}
     cd8:	mov	r8, ip
     cda:	movs	r5, #0
     cdc:	str.w	r5, [r8], #4
     ce0:	adds	r6, #16
     ce2:	stmia.w	r8, {r0, r1, r2, r3}
     ce6:	ldmia.w	r6, {r0, r1, r2, r3}
     cea:	add.w	r6, ip, #20
     cee:	stmia.w	r6, {r0, r1, r2, r3}
    unsigned long lastMillis = 0;
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
     cf2:	mov.w	sl, #0
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
     cf6:	ldr	r6, [r7, #8]
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
     cf8:	ldr	r2, [r7, #4]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     cfa:	ldr	r3, [pc, #336]	; (e4c <_GLOBAL__sub_I_globalMode+0x1c4>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     cfc:	strb	r5, [r4, #20]
    unsigned long lastMillis = 0;
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
     cfe:	movs	r0, #120	; 0x78
     d00:	movs	r1, #24
      m_id = id;
      m_pin = pin;
     d02:	mov.w	r8, #2
     d06:	strd	sl, fp, [r4, #40]	; 0x28
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     d0a:	strb	r5, [r4, #21]
     d0c:	strb	r5, [r4, #22]
     d0e:	strb	r5, [r4, #23]
    unsigned long lastMillis = 0;
    int ppqn = 0;
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
     d10:	str	r5, [r4, #48]	; 0x30
     d12:	str	r5, [r4, #52]	; 0x34
     d14:	str	r0, [r4, #36]	; 0x24
     d16:	str	r1, [r4, #56]	; 0x38
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
     d18:	str	r6, [r4, #8]
    int max_ppqn = 24;
  
  public:
    Sequence (Led* leds[5], boolean state, Piano *piano) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
     d1a:	str	r2, [r4, #4]
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
     d1c:	ldr	r2, [r7, #12]
     d1e:	str	r2, [r4, #12]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     d20:	movs	r6, #1
      m_leds[4] = leds[4];
     d22:	ldr	r2, [r7, #16]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     d24:	str.w	lr, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     d28:	mov	r1, r5
     d2a:	mov	r0, r8
      m_state = state;
      m_currentStep = 0;
      m_piano = piano;
     d2c:	str.w	ip, [r4, #24]
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     d30:	strb	r5, [r3, #16]
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     d32:	mov.w	fp, #4
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_state = state;
     d36:	strb	r5, [r4, #28]
      m_currentStep = 0;
     d38:	str	r5, [r4, #32]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     d3a:	str	r4, [r3, #28]
    Sequence (Led* leds[5], boolean state, Piano *piano) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
     d3c:	str	r2, [r4, #16]
      m_id = id;
     d3e:	str	r6, [r3, #0]
      m_pin = pin;
      m_startStop = startStop;
      m_mode = VELOCITY;
     d40:	strb.w	r6, [r3, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     d44:	str.w	r8, [r3, #32]
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     d48:	bl	1580 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     d4c:	ldr	r3, [pc, #256]	; (e50 <_GLOBAL__sub_I_globalMode+0x1c8>)
     d4e:	ldr	r2, [r7, #4]
     d50:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     d52:	mov	r1, r5
     d54:	mov	r0, fp
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     d56:	strb	r5, [r3, #16]
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     d58:	mov.w	sl, #6
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     d5c:	str	r4, [r3, #28]
      m_id = id;
     d5e:	str.w	r8, [r3]
      m_pin = pin;
      m_startStop = startStop;
      m_mode = VELOCITY;
     d62:	strb.w	r6, [r3, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     d66:	str.w	fp, [r3, #32]
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     d6a:	bl	1580 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     d6e:	ldr	r3, [pc, #228]	; (e54 <_GLOBAL__sub_I_globalMode+0x1cc>)
     d70:	ldr	r2, [r7, #8]
     d72:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     d74:	mov	r1, r5
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     d76:	mov.w	r9, #3
      m_pin = pin;
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     d7a:	mov	r0, sl
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     d7c:	strb	r5, [r3, #16]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     d7e:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
      m_mode = VELOCITY;
     d80:	strb.w	r6, [r3, #36]	; 0x24
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     d84:	str.w	r9, [r3]
      m_pin = pin;
     d88:	str.w	sl, [r3, #32]
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     d8c:	bl	1580 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     d90:	ldr	r3, [pc, #196]	; (e58 <_GLOBAL__sub_I_globalMode+0x1d0>)
     d92:	ldr	r1, [r7, #12]
     d94:	str	r1, [r3, #24]
      m_id = id;
      m_pin = pin;
     d96:	movs	r2, #8
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     d98:	mov	r0, r2
     d9a:	mov	r1, r5
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     d9c:	strb	r5, [r3, #16]
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     d9e:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     da0:	str.w	fp, [r3]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     da4:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
      m_mode = VELOCITY;
     da6:	strb.w	r6, [r3, #36]	; 0x24

      pinMode(pin, INPUT);
     daa:	bl	1580 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     dae:	ldr	r3, [pc, #172]	; (e5c <_GLOBAL__sub_I_globalMode+0x1d4>)
     db0:	ldr	r2, [r7, #16]
     db2:	str	r2, [r3, #24]
      m_id = id;
     db4:	movs	r1, #5
      m_pin = pin;
     db6:	movs	r2, #10
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     db8:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     dba:	str	r1, [r3, #0]
      m_pin = pin;
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     dbc:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     dbe:	str	r2, [r3, #32]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     dc0:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     dc2:	strb	r6, [r3, #16]
      m_mode = VELOCITY;
     dc4:	strb.w	r6, [r3, #36]	; 0x24

      pinMode(pin, INPUT);
     dc8:	bl	1580 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     dcc:	ldr	r3, [pc, #144]	; (e60 <_GLOBAL__sub_I_globalMode+0x1d8>)
     dce:	ldr	r2, [r7, #16]
     dd0:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
     dd2:	movs	r7, #12
      m_startStop = startStop;
      m_mode = VELOCITY;

      pinMode(pin, INPUT);
     dd4:	mov	r0, r7
     dd6:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     dd8:	str	r7, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     dda:	str.w	sl, [r3]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     dde:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     de0:	strb	r6, [r3, #16]
      m_mode = VELOCITY;
     de2:	strb.w	r6, [r3, #36]	; 0x24

      pinMode(pin, INPUT);
     de6:	bl	1580 <pinMode>
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
     dea:	ldr	r0, [pc, #120]	; (e64 <_GLOBAL__sub_I_globalMode+0x1dc>)
     dec:	ldr	r1, [pc, #120]	; (e68 <_GLOBAL__sub_I_globalMode+0x1e0>)
     dee:	ldr	r2, [pc, #124]	; (e6c <_GLOBAL__sub_I_globalMode+0x1e4>)
     df0:	ldr	r3, [pc, #124]	; (e70 <_GLOBAL__sub_I_globalMode+0x1e8>)
      m_pin = pin;
      m_knobType = knobType;
     df2:	strb	r5, [r0, #20]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
     df4:	mov.w	lr, #14
      m_knobType = knobType;
      m_id = id;
     df8:	str	r5, [r0, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
     dfa:	str	r4, [r0, #16]
      m_pin = pin;
     dfc:	movs	r7, #15
     dfe:	movs	r5, #16
     e00:	strb.w	lr, [r0]
     e04:	movs	r0, #17
     e06:	strb	r7, [r1, #0]
     e08:	strb	r5, [r2, #0]
     e0a:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
     e0c:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
     e0e:	strb	r6, [r1, #20]
      m_id = id;
     e10:	str	r6, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
     e12:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
     e14:	strb.w	r9, [r2, #20]
      m_id = id;
     e18:	str.w	r8, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
     e1c:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
     e1e:	strb.w	r8, [r3, #20]
      m_id = id;
     e22:	str.w	r9, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
     e26:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e2a:	nop
     e2c:	.word	0x1fff1604
     e30:	.word	0x00003eec
     e34:	.word	0x1fff0c40
     e38:	.word	0x1fff1718
     e3c:	.word	0x1fff1630
     e40:	.word	0x1fff15c8
     e44:	.word	0x1fff15dc
     e48:	.word	0x1fff15f0
     e4c:	.word	0x1fff169c
     e50:	.word	0x1fff16c4
     e54:	.word	0x1fff16ec
     e58:	.word	0x1fff17bc
     e5c:	.word	0x1fff1758
     e60:	.word	0x1fff165c
     e64:	.word	0x1fff1684
     e68:	.word	0x1fff1618
     e6c:	.word	0x1fff1644
     e70:	.word	0x1fff1780
     e74:	.word	0x407f4000
     e78:	.word	0x1fff1798

00000e7c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     e7c:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
     e7e:	ldr	r5, [pc, #60]	; (ebc <usb_serial_getchar+0x40>)
     e80:	ldr	r0, [r5, #0]
     e82:	cbz	r0, ea4 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
     e84:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
     e86:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     e88:	adds	r1, r0, r3
     e8a:	adds	r3, #1
	if (i >= rx_packet->len) {
     e8c:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     e8e:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
     e90:	bcs.n	e98 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
     e92:	strh	r3, [r0, #2]
	}
	return c;
     e94:	mov	r0, r4
}
     e96:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
     e98:	bl	1d28 <usb_free>
		rx_packet = NULL;
     e9c:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
     e9e:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
     ea0:	str	r3, [r5, #0]
     ea2:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     ea4:	ldr	r3, [pc, #24]	; (ec0 <usb_serial_getchar+0x44>)
     ea6:	ldrb	r3, [r3, #0]
     ea8:	cbz	r3, eb6 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     eaa:	movs	r0, #2
     eac:	bl	1d74 <usb_rx>
     eb0:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
     eb2:	cmp	r0, #0
     eb4:	bne.n	e84 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     eb6:	mov.w	r0, #4294967295
     eba:	pop	{r3, r4, r5, pc}
     ebc:	.word	0x1fff17f0
     ec0:	.word	0x1fff1950

00000ec4 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
     ec4:	push	{r4, lr}
	if (!rx_packet) {
     ec6:	ldr	r4, [pc, #36]	; (eec <usb_serial_peekchar+0x28>)
     ec8:	ldr	r0, [r4, #0]
     eca:	cbz	r0, ed4 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
     ecc:	ldrh	r3, [r0, #2]
     ece:	add	r0, r3
     ed0:	ldrb	r0, [r0, #8]
}
     ed2:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     ed4:	ldr	r3, [pc, #24]	; (ef0 <usb_serial_peekchar+0x2c>)
     ed6:	ldrb	r3, [r3, #0]
     ed8:	cbz	r3, ee6 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     eda:	movs	r0, #2
     edc:	bl	1d74 <usb_rx>
     ee0:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
     ee2:	cmp	r0, #0
     ee4:	bne.n	ecc <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     ee6:	mov.w	r0, #4294967295
     eea:	pop	{r4, pc}
     eec:	.word	0x1fff17f0
     ef0:	.word	0x1fff1950

00000ef4 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     ef4:	ldr	r3, [pc, #16]	; (f08 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
     ef6:	ldr	r2, [pc, #20]	; (f0c <usb_serial_available+0x18>)
     ef8:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
     efa:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     efc:	cbz	r3, f06 <usb_serial_available+0x12>
     efe:	ldrh	r2, [r3, #0]
     f00:	ldrh	r3, [r3, #2]
     f02:	subs	r3, r2, r3
     f04:	add	r0, r3
	return count;
}
     f06:	bx	lr
     f08:	.word	0x1fff17f0
     f0c:	.word	0x1fff1de4

00000f10 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
     f10:	ldr	r3, [pc, #44]	; (f40 <usb_serial_flush_input+0x30>)
     f12:	ldrb	r3, [r3, #0]
     f14:	cbz	r3, f3e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
     f16:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
     f18:	ldr	r4, [pc, #40]	; (f44 <usb_serial_flush_input+0x34>)
     f1a:	ldr	r0, [r4, #0]
     f1c:	cbz	r0, f32 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
     f1e:	bl	1d28 <usb_free>
		rx_packet = NULL;
     f22:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     f24:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
     f26:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     f28:	bl	1d74 <usb_rx>
		if (!rx) break;
     f2c:	cbz	r0, f3c <usb_serial_flush_input+0x2c>
		usb_free(rx);
     f2e:	bl	1d28 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     f32:	movs	r0, #2
     f34:	bl	1d74 <usb_rx>
		if (!rx) break;
     f38:	cmp	r0, #0
     f3a:	bne.n	f2e <usb_serial_flush_input+0x1e>
     f3c:	pop	{r4, pc}
     f3e:	bx	lr
     f40:	.word	0x1fff1950
     f44:	.word	0x1fff17f0

00000f48 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     f48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     f4c:	ldr.w	r9, [pc, #248]	; 1048 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     f50:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     f52:	movs	r2, #1
     f54:	strb.w	r2, [r9]
	while (size > 0) {
     f58:	str	r1, [sp, #4]
     f5a:	cbz	r1, fb8 <usb_serial_write+0x70>
     f5c:	ldr.w	r8, [pc, #236]	; 104c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     f60:	ldr	r7, [pc, #212]	; (1038 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
     f62:	ldr	r6, [sp, #4]
     f64:	mov	fp, r0
		if (!tx_packet) {
     f66:	ldr.w	r0, [r8]
     f6a:	cbz	r0, fda <usb_serial_write+0x92>
     f6c:	ldr	r5, [pc, #204]	; (103c <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
     f6e:	ldrh	r4, [r0, #2]
     f70:	rsb	r1, r4, #64	; 0x40
     f74:	cmp	r1, r6
     f76:	it	cs
     f78:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     f7a:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
     f7e:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     f80:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
     f84:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
     f86:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     f88:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
     f8c:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
     f90:	cbz	r1, fa8 <usb_serial_write+0x60>
     f92:	subs	r4, #1
     f94:	add	r2, r4
     f96:	add	r1, fp
     f98:	ldrb.w	r4, [fp], #1
     f9c:	strb.w	r4, [r2, #1]!
     fa0:	cmp	fp, r1
     fa2:	bne.n	f98 <usb_serial_write+0x50>
     fa4:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
     fa8:	cmp.w	lr, #63	; 0x3f
     fac:	bhi.n	fc6 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     fae:	ldr	r2, [pc, #144]	; (1040 <usb_serial_write+0xf8>)
     fb0:	movs	r1, #5
     fb2:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
     fb4:	cmp	r6, #0
     fb6:	bne.n	f66 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
     fb8:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
     fba:	movs	r3, #0
     fbc:	strb.w	r3, [r9]
	return ret;
}
     fc0:	add	sp, #12
     fc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
     fc6:	movs	r2, #64	; 0x40
     fc8:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
     fca:	mov	r1, r0
     fcc:	movs	r0, #3
     fce:	bl	1ec4 <usb_tx>
			tx_packet = NULL;
     fd2:	movs	r2, #0
     fd4:	str.w	r2, [r8]
     fd8:	b.n	fae <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     fda:	ldrb	r2, [r7, #0]
     fdc:	cbz	r2, 1028 <usb_serial_write+0xe0>
     fde:	ldr	r4, [pc, #100]	; (1044 <usb_serial_write+0xfc>)
     fe0:	ldr	r5, [pc, #88]	; (103c <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
     fe2:	mov.w	sl, #1
     fe6:	b.n	ff8 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
     fe8:	subs	r4, #1
     fea:	beq.n	101a <usb_serial_write+0xd2>
     fec:	ldrb	r2, [r5, #0]
     fee:	cbnz	r2, 101a <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
     ff0:	bl	29c8 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     ff4:	ldrb	r2, [r7, #0]
     ff6:	cbz	r2, 1028 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
     ff8:	movs	r0, #3
     ffa:	bl	1db0 <usb_tx_packet_count>
     ffe:	cmp	r0, #7
    1000:	bhi.n	fe8 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1002:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1006:	bl	1ce8 <usb_malloc>
    100a:	str.w	r0, [r8]
					if (tx_packet) break;
    100e:	cmp	r0, #0
    1010:	bne.n	f6e <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1012:	ldr	r3, [pc, #52]	; (1048 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1014:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1016:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1018:	bne.n	fec <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    101a:	movs	r3, #1
					return -1;
    101c:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1020:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1022:	add	sp, #12
    1024:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1028:	movs	r3, #0
					return -1;
    102a:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    102e:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1032:	add	sp, #12
    1034:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1038:	.word	0x1fff1950
    103c:	.word	0x1fff17ec
    1040:	.word	0x1fff17e4
    1044:	.word	0x00014821
    1048:	.word	0x1fff17e5
    104c:	.word	0x1fff17e8

00001050 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1050:	push	{lr}
    1052:	sub	sp, #12
    1054:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1056:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1058:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    105c:	mov	r0, r3
    105e:	bl	f48 <usb_serial_write>
}
    1062:	add	sp, #12
    1064:	ldr.w	pc, [sp], #4

00001068 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1068:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    106a:	ldr	r5, [pc, #56]	; (10a4 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    106c:	ldr	r4, [pc, #56]	; (10a8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    106e:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1070:	movs	r3, #1
    1072:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1074:	cbz	r0, 1082 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1076:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1078:	movs	r3, #0
    107a:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    107c:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1080:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1082:	ldr	r3, [pc, #40]	; (10ac <usb_serial_write_buffer_free+0x44>)
    1084:	ldrb	r3, [r3, #0]
    1086:	cbnz	r3, 108e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1088:	movs	r0, #0
    108a:	strb	r0, [r4, #0]
			return 0;
    108c:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    108e:	movs	r0, #3
    1090:	bl	1db0 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1094:	cmp	r0, #7
    1096:	bhi.n	1088 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1098:	bl	1ce8 <usb_malloc>
    109c:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    109e:	cmp	r0, #0
    10a0:	bne.n	1076 <usb_serial_write_buffer_free+0xe>
    10a2:	b.n	1088 <usb_serial_write_buffer_free+0x20>
    10a4:	.word	0x1fff17e8
    10a8:	.word	0x1fff17e5
    10ac:	.word	0x1fff1950

000010b0 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    10b0:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    10b2:	ldr	r3, [pc, #68]	; (10f8 <usb_serial_flush_output+0x48>)
    10b4:	ldrb	r3, [r3, #0]
    10b6:	cbz	r3, 10dc <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    10b8:	ldr	r6, [pc, #64]	; (10fc <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    10ba:	ldr	r5, [pc, #68]	; (1100 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    10bc:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    10be:	movs	r7, #1
    10c0:	strb	r7, [r5, #0]
	if (tx_packet) {
    10c2:	cbz	r4, 10de <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    10c4:	ldr	r2, [pc, #60]	; (1104 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    10c6:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    10c8:	movs	r7, #0
    10ca:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    10cc:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    10ce:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    10d0:	movs	r0, #3
    10d2:	bl	1ec4 <usb_tx>
		tx_packet = NULL;
    10d6:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    10d8:	movs	r3, #0
    10da:	strb	r3, [r5, #0]
    10dc:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    10de:	bl	1ce8 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    10e2:	ldr	r3, [pc, #32]	; (1104 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    10e4:	cbz	r0, 10f2 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    10e6:	mov	r1, r0
    10e8:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    10ea:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    10ec:	bl	1ec4 <usb_tx>
    10f0:	b.n	10d8 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    10f2:	strb	r7, [r3, #0]
    10f4:	b.n	10d8 <usb_serial_flush_output+0x28>
    10f6:	nop
    10f8:	.word	0x1fff1950
    10fc:	.word	0x1fff17e8
    1100:	.word	0x1fff17e5
    1104:	.word	0x1fff17e4

00001108 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1108:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    110a:	ldr	r3, [pc, #56]	; (1144 <usb_serial_flush_callback+0x3c>)
    110c:	ldrb	r3, [r3, #0]
    110e:	cbnz	r3, 112e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1110:	ldr	r4, [pc, #52]	; (1148 <usb_serial_flush_callback+0x40>)
    1112:	ldr	r1, [r4, #0]
    1114:	cbz	r1, 1130 <usb_serial_flush_callback+0x28>
    1116:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    111a:	ldrh	r3, [r1, #2]
    111c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    111e:	movs	r0, #3
    1120:	bl	1ec4 <usb_tx>
		tx_packet = NULL;
    1124:	str	r5, [r4, #0]
    1126:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1128:	ldr	r3, [pc, #32]	; (114c <usb_serial_flush_callback+0x44>)
    112a:	movs	r2, #1
    112c:	strb	r2, [r3, #0]
    112e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1130:	bl	1ce8 <usb_malloc>
		if (tx) {
    1134:	cmp	r0, #0
    1136:	beq.n	1128 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1138:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    113a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    113e:	movs	r0, #3
    1140:	b.w	1ec4 <usb_tx>
    1144:	.word	0x1fff17e5
    1148:	.word	0x1fff17e8
    114c:	.word	0x1fff17e4

00001150 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1150:	ldr	r2, [pc, #220]	; (1230 <wait_for_cal+0xe0>)
    1152:	ldr	r1, [pc, #224]	; (1234 <wait_for_cal+0xe4>)
    1154:	ldr	r3, [r2, #0]
    1156:	lsls	r3, r3, #24
    1158:	bmi.n	1154 <wait_for_cal+0x4>
    115a:	ldr	r3, [r1, #0]
    115c:	ands.w	r3, r3, #128	; 0x80
    1160:	bne.n	1154 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1162:	cpsid	i
	if (calibrating) {
    1164:	ldr	r1, [pc, #208]	; (1238 <wait_for_cal+0xe8>)
    1166:	ldrb	r2, [r1, #0]
    1168:	cmp	r2, #0
    116a:	beq.n	122c <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    116c:	ldr	r2, [pc, #204]	; (123c <wait_for_cal+0xec>)
    116e:	ldr	r0, [pc, #208]	; (1240 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1170:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1172:	ldr	r4, [pc, #208]	; (1244 <wait_for_cal+0xf4>)
    1174:	ldr	r7, [r2, #0]
    1176:	ldr	r6, [r0, #0]
    1178:	ldr	r5, [r4, #0]
    117a:	ldr	r4, [r2, #12]
    117c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    117e:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1180:	adds	r2, #20
    1182:	ldr	r0, [r0, #0]
    1184:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1186:	ldr	r7, [pc, #192]	; (1248 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1188:	add	r5, r6
    118a:	add	r4, r5
    118c:	add	r0, r4
    118e:	add	r2, r0
    1190:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1194:	ldr	r6, [pc, #180]	; (124c <wait_for_cal+0xfc>)
    1196:	ldr	r0, [pc, #184]	; (1250 <wait_for_cal+0x100>)
    1198:	ldr	r5, [pc, #184]	; (1254 <wait_for_cal+0x104>)
    119a:	ldr	r4, [pc, #188]	; (1258 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    119c:	orr.w	r2, r2, #32768	; 0x8000
    11a0:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    11a2:	ldr	r7, [r6, #0]
    11a4:	ldr	r6, [r0, #0]
    11a6:	ldr	r5, [r5, #0]
    11a8:	ldr	r2, [pc, #176]	; (125c <wait_for_cal+0x10c>)
    11aa:	ldr	r4, [r4, #0]
    11ac:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    11ae:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    11b0:	ldr	r0, [r0, #0]
    11b2:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    11b4:	ldr	r7, [pc, #168]	; (1260 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    11b6:	add	r5, r6
    11b8:	add	r4, r5
    11ba:	add	r0, r4
    11bc:	add	r2, r0
    11be:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    11c2:	ldr	r6, [pc, #160]	; (1264 <wait_for_cal+0x114>)
    11c4:	ldr	r0, [pc, #160]	; (1268 <wait_for_cal+0x118>)
    11c6:	ldr	r5, [pc, #164]	; (126c <wait_for_cal+0x11c>)
    11c8:	ldr	r4, [pc, #164]	; (1270 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    11ca:	orr.w	r2, r2, #32768	; 0x8000
    11ce:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    11d0:	ldr	r7, [r6, #0]
    11d2:	ldr	r6, [r0, #0]
    11d4:	ldr	r5, [r5, #0]
    11d6:	ldr	r2, [pc, #156]	; (1274 <wait_for_cal+0x124>)
    11d8:	ldr	r4, [r4, #0]
    11da:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    11dc:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    11de:	ldr	r0, [r0, #0]
    11e0:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    11e2:	ldr	r7, [pc, #148]	; (1278 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    11e4:	add	r5, r6
    11e6:	add	r4, r5
    11e8:	add	r0, r4
    11ea:	add	r2, r0
    11ec:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    11f0:	ldr	r6, [pc, #136]	; (127c <wait_for_cal+0x12c>)
    11f2:	ldr	r0, [pc, #140]	; (1280 <wait_for_cal+0x130>)
    11f4:	ldr	r5, [pc, #140]	; (1284 <wait_for_cal+0x134>)
    11f6:	ldr	r4, [pc, #144]	; (1288 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    11f8:	orr.w	r2, r2, #32768	; 0x8000
    11fc:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    11fe:	ldr	r7, [r6, #0]
    1200:	ldr	r6, [r0, #0]
    1202:	ldr	r5, [r5, #0]
    1204:	ldr	r2, [pc, #132]	; (128c <wait_for_cal+0x13c>)
    1206:	ldr	r4, [r4, #0]
    1208:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    120a:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    120c:	ldr	r0, [r0, #0]
    120e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1210:	add	r5, r6
    1212:	add	r4, r5
    1214:	add	r0, r4
    1216:	add	r2, r0
    1218:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    121c:	ldr	r0, [pc, #112]	; (1290 <wait_for_cal+0x140>)
    121e:	orr.w	r2, r2, #32768	; 0x8000
    1222:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1224:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1226:	cpsie	i
}
    1228:	pop	{r4, r5, r6, r7}
    122a:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    122c:	cpsie	i
    122e:	bx	lr
    1230:	.word	0x4003b024
    1234:	.word	0x400bb024
    1238:	.word	0x1fff17f6
    123c:	.word	0x4003b038
    1240:	.word	0x4003b03c
    1244:	.word	0x4003b040
    1248:	.word	0x4003b02c
    124c:	.word	0x4003b058
    1250:	.word	0x4003b05c
    1254:	.word	0x4003b060
    1258:	.word	0x4003b064
    125c:	.word	0x4003b06c
    1260:	.word	0x4003b030
    1264:	.word	0x400bb038
    1268:	.word	0x400bb03c
    126c:	.word	0x400bb040
    1270:	.word	0x400bb044
    1274:	.word	0x400bb04c
    1278:	.word	0x400bb02c
    127c:	.word	0x400bb058
    1280:	.word	0x400bb05c
    1284:	.word	0x400bb060
    1288:	.word	0x400bb064
    128c:	.word	0x400bb06c
    1290:	.word	0x400bb030

00001294 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1294:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1296:	ldr	r0, [pc, #164]	; (133c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1298:	ldr	r2, [pc, #164]	; (1340 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    129a:	ldr	r3, [pc, #168]	; (1344 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    129c:	ldr	r5, [pc, #168]	; (1348 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    129e:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    12a0:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    12a2:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    12a4:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    12a6:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    12a8:	ldr	r4, [pc, #160]	; (134c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    12aa:	cmp	r3, #8
    12ac:	beq.n	1310 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    12ae:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    12b0:	ldr	r0, [pc, #156]	; (1350 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    12b2:	ldr	r1, [pc, #160]	; (1354 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    12b4:	beq.n	1326 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    12b6:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    12b8:	ite	eq
    12ba:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    12bc:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    12be:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    12c0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    12c2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    12c4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    12c6:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    12c8:	ldr	r3, [pc, #140]	; (1358 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    12ca:	ldr	r1, [pc, #144]	; (135c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    12cc:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    12ce:	ldr	r2, [pc, #144]	; (1360 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    12d0:	cbz	r3, 1302 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    12d2:	movs	r3, #1
    12d4:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    12d6:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    12d8:	ldr	r3, [pc, #136]	; (1364 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    12da:	ldr	r1, [pc, #140]	; (1368 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    12dc:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    12de:	ldr	r2, [pc, #140]	; (136c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    12e0:	cmp	r3, #1
    12e2:	bls.n	1332 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    12e4:	cmp	r3, #4
    12e6:	bls.n	1308 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    12e8:	cmp	r3, #8
    12ea:	bls.n	132a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    12ec:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    12ee:	ite	ls
    12f0:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    12f2:	movhi	r3, #135	; 0x87
    12f4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    12f6:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    12f8:	ldr	r3, [pc, #116]	; (1370 <analog_init+0xdc>)
    12fa:	movs	r2, #1
    12fc:	strb	r2, [r3, #0]
}
    12fe:	pop	{r4, r5}
    1300:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1302:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1304:	str	r3, [r2, #0]
    1306:	b.n	12d8 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1308:	movs	r3, #132	; 0x84
    130a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    130c:	str	r3, [r2, #0]
    130e:	b.n	12f8 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1310:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1314:	ldr	r1, [pc, #60]	; (1354 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1316:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1318:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    131a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    131c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    131e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1320:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1322:	str	r3, [r1, #0]
    1324:	b.n	12c8 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1326:	movs	r2, #57	; 0x39
    1328:	b.n	131a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    132a:	movs	r3, #133	; 0x85
    132c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    132e:	str	r3, [r2, #0]
    1330:	b.n	12f8 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1332:	movs	r3, #128	; 0x80
    1334:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1336:	str	r3, [r2, #0]
    1338:	b.n	12f8 <analog_init+0x64>
    133a:	nop
    133c:	.word	0x40074000
    1340:	.word	0x40074001
    1344:	.word	0x1fff0c54
    1348:	.word	0x4003b008
    134c:	.word	0x4003b00c
    1350:	.word	0x400bb008
    1354:	.word	0x400bb00c
    1358:	.word	0x1fff17f9
    135c:	.word	0x4003b020
    1360:	.word	0x400bb020
    1364:	.word	0x1fff0c55
    1368:	.word	0x4003b024
    136c:	.word	0x400bb024
    1370:	.word	0x1fff17f6

00001374 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1374:	cmp	r0, #71	; 0x47
    1376:	bhi.n	13d8 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1378:	ldr	r3, [pc, #204]	; (1448 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    137a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    137e:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1380:	cmp	r6, #255	; 0xff
    1382:	beq.n	13dc <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1384:	ldr	r3, [pc, #196]	; (144c <analogRead+0xd8>)
    1386:	ldrb	r3, [r3, #0]
    1388:	cmp	r3, #0
    138a:	bne.n	13e2 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    138c:	lsls	r2, r6, #24
    138e:	bmi.n	13ea <analogRead+0x76>
#endif

	__disable_irq();
    1390:	cpsid	i
    1392:	ldr	r5, [pc, #188]	; (1450 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1394:	ldr	r4, [pc, #188]	; (1454 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1396:	mov	r7, r5
    1398:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    139a:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    139c:	strb	r3, [r5, #0]
	__enable_irq();
    139e:	cpsie	i
	while (1) {
		__disable_irq();
    13a0:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    13a2:	ldr	r3, [r4, #0]
    13a4:	lsls	r3, r3, #24
    13a6:	bmi.n	13c2 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    13a8:	ldrb	r3, [r7, #0]
    13aa:	cbnz	r3, 13b4 <analogRead+0x40>
    13ac:	b.n	1398 <analogRead+0x24>
    13ae:	ldrb	r3, [r5, #0]
    13b0:	cmp	r3, #0
    13b2:	beq.n	1398 <analogRead+0x24>
		__enable_irq();
    13b4:	cpsie	i
		yield();
    13b6:	bl	29c8 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    13ba:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    13bc:	ldr	r3, [r4, #0]
    13be:	lsls	r0, r3, #24
    13c0:	bpl.n	13ae <analogRead+0x3a>
			result = ADC0_RA;
    13c2:	ldr	r3, [pc, #148]	; (1458 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    13c4:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    13c6:	movs	r2, #0
    13c8:	strb	r2, [r5, #0]
			__enable_irq();
    13ca:	cpsie	i
			result >>= analog_right_shift;
    13cc:	ldr	r2, [pc, #140]	; (145c <analogRead+0xe8>)
    13ce:	ldrb	r0, [r2, #0]
    13d0:	asr.w	r0, r3, r0
			return result;
    13d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    13d8:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    13da:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    13dc:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    13de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    13e2:	bl	1150 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    13e6:	lsls	r2, r6, #24
    13e8:	bpl.n	1390 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    13ea:	cpsid	i
    13ec:	ldr	r5, [pc, #112]	; (1460 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    13ee:	ldr.w	r8, [pc, #124]	; 146c <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    13f2:	ldr	r4, [pc, #112]	; (1464 <analogRead+0xf0>)
    13f4:	and.w	r7, r6, #64	; 0x40
    13f8:	uxtb	r7, r7
    13fa:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    13fe:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    1402:	cbz	r7, 143c <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1404:	bic.w	r3, r3, #16
    1408:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    140c:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    140e:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    1410:	ldr	r2, [pc, #76]	; (1460 <analogRead+0xec>)
    1412:	strb	r3, [r5, #0]
	__enable_irq();
    1414:	cpsie	i
	while (1) {
		__disable_irq();
    1416:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1418:	ldr	r3, [r4, #0]
    141a:	lsls	r1, r3, #24
    141c:	bmi.n	1438 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    141e:	ldrb	r3, [r2, #0]
    1420:	cbnz	r3, 142a <analogRead+0xb6>
    1422:	b.n	13fe <analogRead+0x8a>
    1424:	ldrb	r3, [r5, #0]
    1426:	cmp	r3, #0
    1428:	beq.n	13fe <analogRead+0x8a>
		__enable_irq();
    142a:	cpsie	i
		yield();
    142c:	bl	29c8 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1430:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1432:	ldr	r3, [r4, #0]
    1434:	lsls	r3, r3, #24
    1436:	bpl.n	1424 <analogRead+0xb0>
			result = ADC1_RA;
    1438:	ldr	r3, [pc, #44]	; (1468 <analogRead+0xf4>)
    143a:	b.n	13c4 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    143c:	orr.w	r3, r3, #16
    1440:	str.w	r3, [r8]
    1444:	b.n	140c <analogRead+0x98>
    1446:	nop
    1448:	.word	0x00003f40
    144c:	.word	0x1fff17f6
    1450:	.word	0x1fff17f8
    1454:	.word	0x4003b000
    1458:	.word	0x4003b010
    145c:	.word	0x1fff17f5
    1460:	.word	0x1fff17f7
    1464:	.word	0x400bb000
    1468:	.word	0x400bb010
    146c:	.word	0x400bb00c

00001470 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1470:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1472:	ldr	r3, [pc, #68]	; (14b8 <digitalWrite.part.1+0x48>)
    1474:	ldr.w	r2, [r3, r0, lsl #3]
    1478:	ldrb.w	r4, [r2, #640]	; 0x280
    147c:	cbz	r4, 148c <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    147e:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1480:	cbz	r1, 14a2 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1482:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1486:	ldr.w	r4, [sp], #4
    148a:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    148c:	add.w	r3, r3, r0, lsl #3
    1490:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1492:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1494:	cbnz	r1, 14ac <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1496:	bic.w	r2, r2, #2
    149a:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    149c:	ldr.w	r4, [sp], #4
    14a0:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    14a2:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    14a6:	ldr.w	r4, [sp], #4
    14aa:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    14ac:	orr.w	r2, r2, #3
    14b0:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    14b2:	ldr.w	r4, [sp], #4
    14b6:	bx	lr
    14b8:	.word	0x00003f88

000014bc <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    14bc:	ldr	r2, [pc, #112]	; (1530 <pinMode.part.2+0x74>)
    14be:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    14c2:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    14c4:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    14c6:	beq.n	14ec <pinMode.part.2+0x30>
    14c8:	cmp	r1, #4
    14ca:	beq.n	1504 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    14cc:	ldr.w	r0, [r2, r0, lsl #3]
    14d0:	movs	r2, #0
    14d2:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    14d6:	cbz	r1, 14e4 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    14d8:	cmp	r1, #2
    14da:	beq.n	151e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    14dc:	cmp	r1, #3
    14de:	beq.n	1526 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    14e0:	str	r2, [r3, #0]
    14e2:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    14e4:	mov.w	r2, #256	; 0x100
    14e8:	str	r2, [r3, #0]
    14ea:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    14ec:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    14f0:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    14f4:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    14f8:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    14fa:	ldr	r2, [r3, #0]
    14fc:	bic.w	r2, r2, #32
    1500:	str	r2, [r3, #0]
    1502:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1504:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1508:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    150c:	movs	r0, #1
    150e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1512:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    1514:	ldr	r2, [r3, #0]
    1516:	orr.w	r2, r2, #32
    151a:	str	r2, [r3, #0]
    151c:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    151e:	movw	r2, #259	; 0x103
    1522:	str	r2, [r3, #0]
    1524:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    1526:	mov.w	r2, #258	; 0x102
    152a:	str	r2, [r3, #0]
    152c:	bx	lr
    152e:	nop
    1530:	.word	0x00003f88

00001534 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    1534:	push	{r4, r5}
	RTC_SR = 0;
    1536:	ldr	r3, [pc, #20]	; (154c <rtc_set+0x18>)
	RTC_TPR = 0;
    1538:	ldr	r5, [pc, #20]	; (1550 <rtc_set+0x1c>)
	RTC_TSR = t;
    153a:	ldr	r4, [pc, #24]	; (1554 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    153c:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    153e:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1540:	str	r2, [r3, #0]
	RTC_TPR = 0;
    1542:	str	r2, [r5, #0]
	RTC_TSR = t;
    1544:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    1546:	str	r1, [r3, #0]
}
    1548:	pop	{r4, r5}
    154a:	bx	lr
    154c:	.word	0x4003d014
    1550:	.word	0x4003d004
    1554:	.word	0x4003d000

00001558 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    1558:	cmp	r0, #63	; 0x3f
    155a:	bhi.n	1560 <digitalWrite+0x8>
    155c:	b.w	1470 <digitalWrite.part.1>
    1560:	bx	lr
    1562:	nop

00001564 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1564:	cmp	r0, #63	; 0x3f
    1566:	bhi.n	1576 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    1568:	ldr	r3, [pc, #16]	; (157c <digitalRead+0x18>)
    156a:	ldr.w	r3, [r3, r0, lsl #3]
    156e:	ldrb.w	r0, [r3, #512]	; 0x200
    1572:	uxtb	r0, r0
    1574:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1576:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    1578:	bx	lr
    157a:	nop
    157c:	.word	0x00003f88

00001580 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1580:	cmp	r0, #63	; 0x3f
    1582:	bhi.n	1588 <pinMode+0x8>
    1584:	b.w	14bc <pinMode.part.2>
    1588:	bx	lr
    158a:	nop

0000158c <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    158c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1590:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1592:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1594:	ldr	r7, [pc, #136]	; (1620 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1596:	ldr	r3, [pc, #140]	; (1624 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1598:	ldr	r2, [pc, #140]	; (1628 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    159a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    159c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    159e:	ldr	r2, [r2, #0]
	__enable_irq();
    15a0:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    15a2:	lsls	r2, r2, #5
    15a4:	bpl.n	15ac <delay+0x20>
    15a6:	cmp	r3, #50	; 0x32
    15a8:	it	hi
    15aa:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    15ac:	cbz	r5, 161c <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    15ae:	rsb	r3, r3, #179200	; 0x2bc00
    15b2:	addw	r3, r3, #799	; 0x31f
    15b6:	ldr	r6, [pc, #116]	; (162c <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    15b8:	ldr.w	r9, [pc, #104]	; 1624 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    15bc:	ldr.w	r8, [pc, #104]	; 1628 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    15c0:	lsrs	r3, r3, #2
    15c2:	mov.w	r2, #1000	; 0x3e8
    15c6:	umull	r1, r3, r6, r3
    15ca:	mul.w	r4, r2, r4
    15ce:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    15d2:	cpsid	i
	current = SYST_CVR;
    15d4:	ldr.w	r1, [r9]
	count = systick_millis_count;
    15d8:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    15da:	ldr.w	lr, [r8]
	__enable_irq();
    15de:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    15e0:	rsb	r3, r1, #179200	; 0x2bc00
    15e4:	addw	r3, r3, #799	; 0x31f
    15e8:	lsrs	r3, r3, #2
    15ea:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    15ee:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    15f2:	rsb	r3, r4, r3, lsr #2
    15f6:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    15fa:	beq.n	1602 <delay+0x76>
    15fc:	cmp	r1, #50	; 0x32
    15fe:	it	hi
    1600:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1602:	mla	r3, r0, r2, r3
    1606:	cmp.w	r3, #1000	; 0x3e8
    160a:	bcc.n	1616 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    160c:	subs	r5, #1
    160e:	beq.n	161c <delay+0x90>
				start += 1000;
    1610:	add.w	r4, r4, #1000	; 0x3e8
    1614:	b.n	15d2 <delay+0x46>
			}
			yield();
    1616:	bl	29c8 <yield>
		}
    161a:	b.n	15d2 <delay+0x46>
    161c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1620:	.word	0x1fff17fc
    1624:	.word	0xe000e018
    1628:	.word	0xe000ed04
    162c:	.word	0x16c16c17

00001630 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    1630:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1632:	ldr	r3, [pc, #312]	; (176c <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1634:	ldr	r0, [pc, #312]	; (1770 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    1636:	ldr.w	ip, [pc, #348]	; 1794 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    163a:	ldr	r4, [pc, #312]	; (1774 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    163c:	ldr	r1, [pc, #312]	; (1778 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    163e:	ldr.w	lr, [pc, #344]	; 1798 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    1642:	ldr	r6, [pc, #312]	; (177c <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    1644:	ldr	r5, [pc, #312]	; (1780 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    1646:	ldr	r7, [pc, #316]	; (1784 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1648:	mov.w	r2, #134217728	; 0x8000000
    164c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    164e:	mov.w	r2, #268435456	; 0x10000000
    1652:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1654:	mov.w	r2, #536870912	; 0x20000000
    1658:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    165a:	mov.w	r2, #1073741824	; 0x40000000
    165e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1660:	mov.w	r2, #2147483648	; 0x80000000
    1664:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1666:	movs	r2, #0
    1668:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    166a:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    166c:	movw	r0, #61439	; 0xefff
    1670:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1674:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1678:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    167a:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    167e:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1680:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1682:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1684:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1688:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    168a:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    168e:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1690:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1694:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1696:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    169a:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    169e:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    16a2:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    16a6:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    16aa:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    16ac:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    16b0:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    16b2:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    16b4:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    16b6:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    16ba:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    16bc:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    16be:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    16c0:	ldr	r4, [pc, #196]	; (1788 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    16c2:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    16c4:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    16c6:	movs	r1, #9
    16c8:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    16ca:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    16ce:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    16d2:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    16d4:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    16d6:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    16d8:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    16da:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    16dc:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    16de:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    16e2:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    16e6:	add.w	r7, r7, #520192	; 0x7f000
    16ea:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    16ec:	addw	r4, r4, #2044	; 0x7fc
    16f0:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    16f2:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    16f4:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    16f6:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    16f8:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    16fc:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    16fe:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    1702:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    1706:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1708:	sub.w	r4, r4, #460800	; 0x70800
    170c:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    1710:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1712:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1714:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1718:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    171a:	ldr	r0, [pc, #112]	; (178c <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    171c:	orr.w	r1, r1, #512	; 0x200
    1720:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1722:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1724:	ldr	r4, [pc, #104]	; (1790 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    1726:	add.w	lr, lr, #65280	; 0xff00
    172a:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    172e:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    1732:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    1736:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    173a:	orr.w	r1, r1, #33554432	; 0x2000000
    173e:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    1740:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    1744:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1748:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    174a:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    174c:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    174e:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1750:	str	r2, [r4, #0]
#endif
	analog_init();
    1752:	bl	1294 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    1756:	movs	r0, #25
    1758:	bl	158c <delay>
	usb_init();
    175c:	bl	28f8 <usb_init>
	delay(275);
    1760:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    1764:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    1768:	b.w	158c <delay>
    176c:	.word	0xe000e104
    1770:	.word	0x40038004
    1774:	.word	0x40038014
    1778:	.word	0x4003801c
    177c:	.word	0x40038024
    1780:	.word	0x4003802c
    1784:	.word	0x40038034
    1788:	.word	0x40038000
    178c:	.word	0x40048004
    1790:	.word	0x400c9000
    1794:	.word	0x40038008
    1798:	.word	0x4003800c

0000179c <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    179c:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    179e:	ldr	r3, [pc, #56]	; (17d8 <sysex_byte+0x3c>)
    17a0:	ldr	r4, [pc, #56]	; (17dc <sysex_byte+0x40>)
    17a2:	ldr	r3, [r3, #0]
    17a4:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    17a6:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    17a8:	cbz	r3, 17ce <sysex_byte+0x32>
    17aa:	cmp.w	r1, #290	; 0x122
    17ae:	bcs.n	17bc <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    17b0:	ldr	r2, [pc, #44]	; (17e0 <sysex_byte+0x44>)
    17b2:	adds	r3, r1, #1
    17b4:	strb	r5, [r2, r1]
    17b6:	uxth	r3, r3
    17b8:	strh	r3, [r4, #0]
	}
}
    17ba:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    17bc:	movs	r2, #0
    17be:	ldr	r0, [pc, #32]	; (17e0 <sysex_byte+0x44>)
    17c0:	blx	r3
    17c2:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    17c4:	ldr	r2, [pc, #24]	; (17e0 <sysex_byte+0x44>)
    17c6:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    17c8:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    17ca:	strh	r3, [r4, #0]
	}
}
    17cc:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    17ce:	cmp.w	r1, #290	; 0x122
    17d2:	bcc.n	17b0 <sysex_byte+0x14>
    17d4:	pop	{r3, r4, r5, pc}
    17d6:	nop
    17d8:	.word	0x1fff1824
    17dc:	.word	0x1fff1cba
    17e0:	.word	0x1fff1cc0

000017e4 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    17e4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    17e8:	ldr	r6, [pc, #132]	; (1870 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    17ea:	ldr	r7, [pc, #136]	; (1874 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    17ec:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    17ee:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    17f0:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    17f2:	strb	r3, [r7, #0]
	if (!tx_packet) {
    17f4:	cbz	r1, 1824 <usb_midi_write_packed+0x40>
    17f6:	ldr	r5, [pc, #128]	; (1878 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    17f8:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    17fa:	add.w	r2, r1, r3, lsl #2
    17fe:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1800:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1802:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1804:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1808:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    180a:	bhi.n	1816 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    180c:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    180e:	movs	r3, #0
    1810:	strb	r3, [r7, #0]
    1812:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    1816:	movs	r3, #64	; 0x40
    1818:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    181a:	movs	r0, #4
    181c:	bl	1ec4 <usb_tx>
		tx_packet = NULL;
    1820:	str	r4, [r6, #0]
    1822:	b.n	180e <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1824:	ldr.w	r9, [pc, #84]	; 187c <usb_midi_write_packed+0x98>
    1828:	ldrb.w	r3, [r9]
    182c:	cmp	r3, #0
    182e:	beq.n	1812 <usb_midi_write_packed+0x2e>
    1830:	ldr	r5, [pc, #68]	; (1878 <usb_midi_write_packed+0x94>)
    1832:	movw	r4, #48001	; 0xbb81
    1836:	b.n	184a <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1838:	subs	r4, #1
    183a:	beq.n	1862 <usb_midi_write_packed+0x7e>
    183c:	ldrb	r3, [r5, #0]
    183e:	cbnz	r3, 1862 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    1840:	bl	29c8 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1844:	ldrb.w	r3, [r9]
    1848:	cbz	r3, 186a <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    184a:	movs	r0, #4
    184c:	bl	1db0 <usb_tx_packet_count>
    1850:	cmp	r0, #5
    1852:	bhi.n	1838 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    1854:	bl	1ce8 <usb_malloc>
    1858:	mov	r1, r0
    185a:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    185c:	cmp	r0, #0
    185e:	beq.n	1838 <usb_midi_write_packed+0x54>
    1860:	b.n	17f8 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    1862:	movs	r3, #1
    1864:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    1866:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    186a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    186e:	nop
    1870:	.word	0x1fff1840
    1874:	.word	0x1fff1814
    1878:	.word	0x1fff1844
    187c:	.word	0x1fff1950

00001880 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    1880:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    1882:	ldr	r3, [pc, #32]	; (18a4 <usb_midi_flush_output+0x24>)
    1884:	ldrb	r4, [r3, #0]
    1886:	cbnz	r4, 1892 <usb_midi_flush_output+0x12>
    1888:	ldr	r5, [pc, #28]	; (18a8 <usb_midi_flush_output+0x28>)
    188a:	ldr	r1, [r5, #0]
    188c:	cbz	r1, 1892 <usb_midi_flush_output+0x12>
    188e:	ldrh	r3, [r1, #2]
    1890:	cbnz	r3, 1894 <usb_midi_flush_output+0x14>
    1892:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1894:	lsls	r3, r3, #2
    1896:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1898:	movs	r0, #4
    189a:	bl	1ec4 <usb_tx>
		tx_packet = NULL;
    189e:	str	r4, [r5, #0]
    18a0:	pop	{r3, r4, r5, pc}
    18a2:	nop
    18a4:	.word	0x1fff1814
    18a8:	.word	0x1fff1840

000018ac <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    18ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    18b0:	ldr	r6, [pc, #692]	; (1b68 <usb_midi_read+0x2bc>)
    18b2:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    18b4:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    18b6:	cmp	r3, #0
    18b8:	beq.w	19e0 <usb_midi_read+0x134>
    18bc:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    18be:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    18c0:	lsrs	r1, r2, #2
    18c2:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    18c6:	adds	r2, #4
	if (index < rx_packet->len) {
    18c8:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    18ca:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    18cc:	bcs.n	1954 <usb_midi_read+0xa8>
		rx_packet->index = index;
    18ce:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    18d0:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    18d4:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    18d8:	ldr	r1, [pc, #656]	; (1b6c <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    18da:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    18de:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    18e2:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    18e6:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    18e8:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    18ec:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    18ee:	bls.n	1926 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    18f0:	subs	r3, r6, #2
    18f2:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    18f4:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    18f8:	bls.n	1998 <usb_midi_read+0xec>
    18fa:	cmp	r6, #5
    18fc:	beq.n	1990 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    18fe:	cmp	r6, #4
    1900:	beq.w	1c4c <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    1904:	subs	r3, r6, #5
    1906:	cmp	r3, #2
    1908:	bls.n	1a0a <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    190a:	cmp	r6, #15
    190c:	bne.n	192c <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    190e:	cmp	r0, #247	; 0xf7
    1910:	bhi.n	1998 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    1912:	cmp	r0, #240	; 0xf0
    1914:	beq.n	191c <usb_midi_read+0x70>
    1916:	ldr	r3, [pc, #600]	; (1b70 <usb_midi_read+0x2c4>)
    1918:	ldrh	r3, [r3, #0]
    191a:	cbz	r3, 192c <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    191c:	bl	179c <sysex_byte>
		}
	}
	return 0;
    1920:	movs	r0, #0
    1922:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    1926:	cbz	r7, 1932 <usb_midi_read+0x86>
    1928:	cmp	r5, r7
    192a:	beq.n	1932 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    192c:	movs	r0, #0
    192e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1932:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    1934:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1938:	beq.w	1a4a <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    193c:	cmp	r6, #9
    193e:	beq.n	1964 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    1940:	cmp	r6, #10
    1942:	bne.w	1a6e <usb_midi_read+0x1c2>
    1946:	cmp	r3, #10
    1948:	bne.n	192c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    194a:	ldr	r3, [pc, #552]	; (1b74 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    194c:	ldr	r2, [pc, #552]	; (1b78 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    194e:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1950:	movs	r1, #160	; 0xa0
    1952:	b.n	1a58 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    1954:	mov	r0, r3
    1956:	bl	1d28 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    195a:	movs	r0, #5
    195c:	bl	1d74 <usb_rx>
    1960:	str	r0, [r6, #0]
    1962:	b.n	18d0 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1964:	cmp	r3, #9
    1966:	bne.n	192c <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    1968:	lsrs	r7, r4, #24
    196a:	beq.w	1c64 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    196e:	ldr	r3, [pc, #524]	; (1b7c <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1970:	ldr	r2, [pc, #516]	; (1b78 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    1972:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1974:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1976:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    197a:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    197c:	uxtb	r5, r5
    197e:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1980:	cmp	r3, #0
    1982:	beq.w	1ac0 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1986:	mov	r2, r4
    1988:	mov	r1, r6
    198a:	mov	r0, r5
    198c:	blx	r3
    198e:	b.n	1ac0 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1990:	cmp	r0, #240	; 0xf0
    1992:	bls.n	1a1c <usb_midi_read+0x170>
    1994:	cmp	r0, #247	; 0xf7
    1996:	beq.n	1a1c <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    1998:	subs	r0, #241	; 0xf1
    199a:	cmp	r0, #14
    199c:	bhi.n	192c <usb_midi_read+0x80>
    199e:	add	r3, pc, #4	; (adr r3, 19a4 <usb_midi_read+0xf8>)
    19a0:	ldr.w	pc, [r3, r0, lsl #2]
    19a4:	.word	0x00001b5b
    19a8:	.word	0x00001b3f
    19ac:	.word	0x00001b2d
    19b0:	.word	0x0000192d
    19b4:	.word	0x0000192d
    19b8:	.word	0x00001b1f
    19bc:	.word	0x0000192d
    19c0:	.word	0x00001bff
    19c4:	.word	0x0000192d
    19c8:	.word	0x00001bc9
    19cc:	.word	0x00001be3
    19d0:	.word	0x00001b07
    19d4:	.word	0x0000192d
    19d8:	.word	0x00001aef
    19dc:	.word	0x00001ad3
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    19e0:	ldr	r3, [pc, #412]	; (1b80 <usb_midi_read+0x2d4>)
    19e2:	ldrb	r3, [r3, #0]
    19e4:	cmp	r3, #0
    19e6:	beq.n	192c <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    19e8:	movs	r0, #5
    19ea:	bl	1d74 <usb_rx>
    19ee:	mov	r3, r0
    19f0:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    19f2:	cmp	r0, #0
    19f4:	beq.n	192c <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    19f6:	ldrh	r5, [r0, #0]
    19f8:	cmp	r5, #0
    19fa:	bne.w	18be <usb_midi_read+0x12>
			usb_free(rx_packet);
    19fe:	bl	1d28 <usb_free>
			rx_packet = NULL;
    1a02:	str	r5, [r6, #0]
			return 0;
    1a04:	mov	r0, r5
    1a06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    1a0a:	bl	179c <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    1a0e:	ubfx	r0, r4, #16, #8
    1a12:	bl	179c <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    1a16:	cmp	r6, #7
    1a18:	bne.n	1a20 <usb_midi_read+0x174>
    1a1a:	lsrs	r0, r4, #24
    1a1c:	bl	179c <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    1a20:	ldr	r3, [pc, #332]	; (1b70 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1a22:	ldr	r2, [pc, #352]	; (1b84 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    1a24:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    1a26:	ldr	r0, [pc, #352]	; (1b88 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1a28:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1a2a:	ldr	r5, [pc, #352]	; (1b8c <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1a2c:	ldr	r2, [pc, #328]	; (1b78 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    1a2e:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1a30:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1a32:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1a34:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1a36:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1a38:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1a3a:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    1a3c:	cbz	r4, 1a82 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    1a3e:	movs	r2, #1
    1a40:	ldr	r0, [pc, #332]	; (1b90 <usb_midi_read+0x2e4>)
    1a42:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1a44:	movs	r0, #1
    1a46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1a4a:	cmp	r3, #8
    1a4c:	bne.w	192c <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    1a50:	ldr	r3, [pc, #320]	; (1b94 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1a52:	ldr	r2, [pc, #292]	; (1b78 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    1a54:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1a56:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1a58:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1a5c:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1a5e:	uxtb	r5, r5
    1a60:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1a62:	cbz	r3, 1ac0 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1a64:	mov	r0, r5
    1a66:	mov	r2, r4
    1a68:	mov	r1, r6
    1a6a:	blx	r3
    1a6c:	b.n	1ac0 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    1a6e:	cmp	r6, #11
    1a70:	bne.n	1a96 <usb_midi_read+0x1ea>
    1a72:	cmp	r3, #11
    1a74:	bne.w	192c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1a78:	ldr	r3, [pc, #284]	; (1b98 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1a7a:	ldr	r2, [pc, #252]	; (1b78 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    1a7c:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1a7e:	movs	r1, #176	; 0xb0
    1a80:	b.n	1a58 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    1a82:	ldr	r3, [pc, #280]	; (1b9c <usb_midi_read+0x2f0>)
    1a84:	ldr	r3, [r3, #0]
    1a86:	cmp	r3, #0
    1a88:	beq.w	1c82 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    1a8c:	ldr	r0, [pc, #256]	; (1b90 <usb_midi_read+0x2e4>)
    1a8e:	blx	r3
		}
		return 1;
    1a90:	movs	r0, #1
    1a92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    1a96:	cmp	r6, #12
    1a98:	bne.w	1c9c <usb_midi_read+0x3f0>
    1a9c:	cmp	r3, #12
    1a9e:	bne.w	192c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1aa2:	ldr	r3, [pc, #252]	; (1ba0 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1aa4:	ldr	r2, [pc, #208]	; (1b78 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    1aa6:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1aa8:	movs	r1, #192	; 0xc0
    1aaa:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    1aac:	uxtb	r5, r5
    1aae:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1ab2:	cmp	r3, #0
    1ab4:	beq.w	1c48 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1ab8:	mov	r0, r5
    1aba:	mov	r1, r6
    1abc:	lsrs	r4, r4, #24
    1abe:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1ac0:	ldr	r1, [pc, #224]	; (1ba4 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    1ac2:	ldr	r2, [pc, #196]	; (1b88 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    1ac4:	ldr	r3, [pc, #196]	; (1b8c <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1ac6:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    1ac8:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    1aca:	strb	r4, [r3, #0]
		return 1;
    1acc:	movs	r0, #1
    1ace:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    1ad2:	ldr	r3, [pc, #212]	; (1ba8 <usb_midi_read+0x2fc>)
    1ad4:	ldr	r3, [r3, #0]
    1ad6:	cmp	r3, #0
    1ad8:	beq.w	1c88 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    1adc:	blx	r3
    1ade:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    1ae2:	ldr	r3, [pc, #148]	; (1b78 <usb_midi_read+0x2cc>)
    1ae4:	uxtb	r5, r5
    1ae6:	lsrs	r4, r4, #24
    1ae8:	strb.w	r8, [r3]
		goto return_message;
    1aec:	b.n	1ac0 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    1aee:	ldr	r3, [pc, #188]	; (1bac <usb_midi_read+0x300>)
    1af0:	ldr	r3, [r3, #0]
    1af2:	cmp	r3, #0
    1af4:	bne.n	1adc <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    1af6:	ldr	r3, [pc, #184]	; (1bb0 <usb_midi_read+0x304>)
    1af8:	ldr	r3, [r3, #0]
    1afa:	cbz	r3, 1b26 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    1afc:	movs	r0, #254	; 0xfe
    1afe:	blx	r3
    1b00:	ubfx	r6, r4, #16, #8
    1b04:	b.n	1ae2 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    1b06:	ldr	r3, [pc, #172]	; (1bb4 <usb_midi_read+0x308>)
    1b08:	ldr	r3, [r3, #0]
    1b0a:	cmp	r3, #0
    1b0c:	bne.n	1adc <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    1b0e:	ldr	r3, [pc, #160]	; (1bb0 <usb_midi_read+0x304>)
    1b10:	ldr	r3, [r3, #0]
    1b12:	cbz	r3, 1b26 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    1b14:	movs	r0, #252	; 0xfc
    1b16:	blx	r3
    1b18:	ubfx	r6, r4, #16, #8
    1b1c:	b.n	1ae2 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    1b1e:	ldr	r3, [pc, #152]	; (1bb8 <usb_midi_read+0x30c>)
    1b20:	ldr	r3, [r3, #0]
    1b22:	cmp	r3, #0
    1b24:	bne.n	1adc <usb_midi_read+0x230>
    1b26:	ubfx	r6, r4, #16, #8
    1b2a:	b.n	1ae2 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1b2c:	ldr	r3, [pc, #140]	; (1bbc <usb_midi_read+0x310>)
    1b2e:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    1b30:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1b34:	cmp	r3, #0
    1b36:	beq.n	1ae2 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    1b38:	mov	r0, r6
    1b3a:	blx	r3
    1b3c:	b.n	1ae2 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    1b3e:	ldr	r3, [pc, #128]	; (1bc0 <usb_midi_read+0x314>)
    1b40:	ldr	r2, [r3, #0]
    1b42:	cmp	r2, #0
    1b44:	beq.n	1b26 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    1b46:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    1b48:	lsrs	r3, r4, #17
    1b4a:	and.w	r0, r6, #127	; 0x7f
    1b4e:	and.w	r3, r3, #16256	; 0x3f80
    1b52:	orrs	r0, r3
    1b54:	uxtb	r6, r6
    1b56:	blx	r2
    1b58:	b.n	1ae2 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1b5a:	ldr	r3, [pc, #104]	; (1bc4 <usb_midi_read+0x318>)
    1b5c:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    1b5e:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1b62:	cmp	r3, #0
    1b64:	bne.n	1b38 <usb_midi_read+0x28c>
    1b66:	b.n	1ae2 <usb_midi_read+0x236>
    1b68:	.word	0x1fff184c
    1b6c:	.word	0x1fff1cbe
    1b70:	.word	0x1fff1cba
    1b74:	.word	0x1fff1828
    1b78:	.word	0x1fff1cb8
    1b7c:	.word	0x1fff185c
    1b80:	.word	0x1fff1950
    1b84:	.word	0x1fff1824
    1b88:	.word	0x1fff1cbc
    1b8c:	.word	0x1fff1cbd
    1b90:	.word	0x1fff1cc0
    1b94:	.word	0x1fff1854
    1b98:	.word	0x1fff1858
    1b9c:	.word	0x1fff183c
    1ba0:	.word	0x1fff1818
    1ba4:	.word	0x1fff1cbf
    1ba8:	.word	0x1fff1804
    1bac:	.word	0x1fff1808
    1bb0:	.word	0x1fff180c
    1bb4:	.word	0x1fff1848
    1bb8:	.word	0x1fff1838
    1bbc:	.word	0x1fff1850
    1bc0:	.word	0x1fff1820
    1bc4:	.word	0x1fff1834
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    1bc8:	ldr	r3, [pc, #252]	; (1cc8 <usb_midi_read+0x41c>)
    1bca:	ldr	r3, [r3, #0]
    1bcc:	cmp	r3, #0
    1bce:	bne.n	1adc <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    1bd0:	ldr	r3, [pc, #248]	; (1ccc <usb_midi_read+0x420>)
    1bd2:	ldr	r3, [r3, #0]
    1bd4:	cmp	r3, #0
    1bd6:	beq.n	1b26 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    1bd8:	movs	r0, #250	; 0xfa
    1bda:	blx	r3
    1bdc:	ubfx	r6, r4, #16, #8
    1be0:	b.n	1ae2 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    1be2:	ldr	r3, [pc, #236]	; (1cd0 <usb_midi_read+0x424>)
    1be4:	ldr	r3, [r3, #0]
    1be6:	cmp	r3, #0
    1be8:	bne.w	1adc <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    1bec:	ldr	r3, [pc, #220]	; (1ccc <usb_midi_read+0x420>)
    1bee:	ldr	r3, [r3, #0]
    1bf0:	cmp	r3, #0
    1bf2:	beq.n	1b26 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    1bf4:	movs	r0, #251	; 0xfb
    1bf6:	blx	r3
    1bf8:	ubfx	r6, r4, #16, #8
    1bfc:	b.n	1ae2 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    1bfe:	ldr	r3, [pc, #212]	; (1cd4 <usb_midi_read+0x428>)
    1c00:	ldr	r3, [r3, #0]
    1c02:	cmp	r3, #0
    1c04:	bne.w	1adc <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    1c08:	ldr	r3, [pc, #192]	; (1ccc <usb_midi_read+0x420>)
    1c0a:	ldr	r3, [r3, #0]
    1c0c:	cmp	r3, #0
    1c0e:	beq.n	1b26 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    1c10:	movs	r0, #248	; 0xf8
    1c12:	blx	r3
    1c14:	ubfx	r6, r4, #16, #8
    1c18:	b.n	1ae2 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    1c1a:	cmp	r3, #14
    1c1c:	bne.w	192c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    1c20:	ldr	r2, [pc, #180]	; (1cd8 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1c22:	ldr	r3, [pc, #184]	; (1cdc <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    1c24:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1c26:	movs	r1, #224	; 0xe0
    1c28:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    1c2a:	cmp	r2, #0
    1c2c:	beq.n	1cbe <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    1c2e:	lsrs	r6, r4, #16
    1c30:	lsrs	r1, r4, #17
    1c32:	and.w	r3, r6, #127	; 0x7f
    1c36:	and.w	r1, r1, #16256	; 0x3f80
    1c3a:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    1c3c:	uxtb	r5, r5
    1c3e:	sub.w	r1, r1, #8192	; 0x2000
    1c42:	mov	r0, r5
    1c44:	blx	r2
    1c46:	uxtb	r6, r6
    1c48:	lsrs	r4, r4, #24
    1c4a:	b.n	1ac0 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    1c4c:	bl	179c <sysex_byte>
		sysex_byte(n >> 16);
    1c50:	ubfx	r0, r4, #16, #8
    1c54:	bl	179c <sysex_byte>
		sysex_byte(n >> 24);
    1c58:	lsrs	r0, r4, #24
    1c5a:	bl	179c <sysex_byte>
		return 0;
    1c5e:	movs	r0, #0
    1c60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1c64:	ldr	r3, [pc, #120]	; (1ce0 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1c66:	ldr	r2, [pc, #116]	; (1cdc <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    1c68:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1c6a:	movs	r1, #128	; 0x80
    1c6c:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1c6e:	uxtb	r5, r5
    1c70:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1c74:	cbz	r3, 1c98 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1c76:	mov	r1, r6
    1c78:	mov	r0, r5
    1c7a:	mov	r2, r7
    1c7c:	blx	r3
    1c7e:	mov	r4, r7
    1c80:	b.n	1ac0 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1c82:	movs	r0, #1
    1c84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    1c88:	ldr	r3, [pc, #64]	; (1ccc <usb_midi_read+0x420>)
    1c8a:	ldr	r3, [r3, #0]
    1c8c:	cmp	r3, #0
    1c8e:	beq.w	1b26 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    1c92:	movs	r0, #255	; 0xff
    1c94:	blx	r3
    1c96:	b.n	1b26 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1c98:	mov	r4, r3
    1c9a:	b.n	1ac0 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    1c9c:	cmp	r6, #13
    1c9e:	bne.n	1c1a <usb_midi_read+0x36e>
    1ca0:	cmp	r3, #13
    1ca2:	bne.w	192c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1ca6:	ldr	r3, [pc, #60]	; (1ce4 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1ca8:	ldr	r2, [pc, #48]	; (1cdc <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    1caa:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1cac:	movs	r1, #208	; 0xd0
    1cae:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1cb0:	uxtb	r5, r5
    1cb2:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1cb6:	cmp	r3, #0
    1cb8:	bne.w	1ab8 <usb_midi_read+0x20c>
    1cbc:	b.n	1c48 <usb_midi_read+0x39c>
    1cbe:	ubfx	r6, r4, #16, #8
    1cc2:	uxtb	r5, r5
    1cc4:	lsrs	r4, r4, #24
    1cc6:	b.n	1ac0 <usb_midi_read+0x214>
    1cc8:	.word	0x1fff1830
    1ccc:	.word	0x1fff180c
    1cd0:	.word	0x1fff1810
    1cd4:	.word	0x1fff1800
    1cd8:	.word	0x1fff181c
    1cdc:	.word	0x1fff1cb8
    1ce0:	.word	0x1fff1854
    1ce4:	.word	0x1fff182c

00001ce8 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1ce8:	cpsid	i
	avail = usb_buffer_available;
    1cea:	ldr	r0, [pc, #52]	; (1d20 <usb_malloc+0x38>)
    1cec:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1cee:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    1cf2:	cmp	r3, #29
    1cf4:	bgt.n	1d18 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    1cf6:	mov.w	r1, #2147483648	; 0x80000000
    1cfa:	lsrs	r1, r3
    1cfc:	bic.w	r2, r2, r1
    1d00:	str	r2, [r0, #0]
	__enable_irq();
    1d02:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1d04:	ldr	r0, [pc, #28]	; (1d24 <usb_malloc+0x3c>)
    1d06:	add.w	r3, r3, r3, lsl #3
    1d0a:	lsls	r3, r3, #3
    1d0c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1d0e:	movs	r1, #0
    1d10:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    1d12:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    1d14:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    1d16:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    1d18:	cpsie	i
		return NULL;
    1d1a:	movs	r0, #0
    1d1c:	bx	lr
    1d1e:	nop
    1d20:	.word	0x1fff0c58
    1d24:	.word	0x1fff03d0

00001d28 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1d28:	ldr	r3, [pc, #52]	; (1d60 <usb_free+0x38>)
    1d2a:	ldr	r2, [pc, #56]	; (1d64 <usb_free+0x3c>)
    1d2c:	subs	r3, r0, r3
    1d2e:	umull	r2, r3, r2, r3
    1d32:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    1d34:	cmp	r3, #29
    1d36:	bhi.n	1d52 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1d38:	ldr	r2, [pc, #44]	; (1d68 <usb_free+0x40>)
    1d3a:	ldrb	r2, [r2, #0]
    1d3c:	cbnz	r2, 1d54 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1d3e:	cpsid	i
	usb_buffer_available |= mask;
    1d40:	ldr	r0, [pc, #40]	; (1d6c <usb_free+0x44>)
    1d42:	mov.w	r1, #2147483648	; 0x80000000
    1d46:	ldr	r2, [r0, #0]
    1d48:	lsr.w	r3, r1, r3
    1d4c:	orrs	r2, r3
    1d4e:	str	r2, [r0, #0]
	__enable_irq();
    1d50:	cpsie	i
    1d52:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1d54:	ldr	r2, [pc, #24]	; (1d70 <usb_free+0x48>)
    1d56:	ldrb	r2, [r2, #0]
    1d58:	cmp	r2, #0
    1d5a:	beq.n	1d3e <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    1d5c:	b.w	1ddc <usb_rx_memory>
    1d60:	.word	0x1fff03d0
    1d64:	.word	0x38e38e39
    1d68:	.word	0x1fff1945
    1d6c:	.word	0x1fff0c58
    1d70:	.word	0x1fff1950

00001d74 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    1d74:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1d76:	cmp	r3, #4
    1d78:	bhi.n	1da4 <usb_rx+0x30>
	__disable_irq();
    1d7a:	cpsid	i
	ret = rx_first[endpoint];
    1d7c:	ldr	r1, [pc, #40]	; (1da8 <usb_rx+0x34>)
    1d7e:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    1d82:	cbz	r0, 1da0 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    1d84:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1d86:	ldr	r4, [pc, #36]	; (1dac <usb_rx+0x38>)
    1d88:	ldrh	r5, [r0, #0]
    1d8a:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    1d8e:	ldr	r6, [r0, #4]
    1d90:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1d94:	subs	r2, r2, r5
    1d96:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    1d9a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1d9c:	pop	{r4, r5, r6}
    1d9e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    1da0:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1da2:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1da4:	movs	r0, #0
    1da6:	bx	lr
    1da8:	.word	0x1fff18bc
    1dac:	.word	0x1fff1de4

00001db0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    1db0:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1db2:	cmp	r0, #4
    1db4:	bhi.n	1dce <usb_tx_packet_count+0x1e>
	__disable_irq();
    1db6:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    1db8:	ldr	r3, [pc, #28]	; (1dd8 <usb_tx_packet_count+0x28>)
    1dba:	ldr.w	r3, [r3, r0, lsl #2]
    1dbe:	cbz	r3, 1dd2 <usb_tx_packet_count+0x22>
    1dc0:	movs	r0, #0
    1dc2:	ldr	r3, [r3, #4]
    1dc4:	adds	r0, #1
    1dc6:	cmp	r3, #0
    1dc8:	bne.n	1dc2 <usb_tx_packet_count+0x12>
	__enable_irq();
    1dca:	cpsie	i
	return count;
    1dcc:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1dce:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    1dd0:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    1dd2:	mov	r0, r3
    1dd4:	b.n	1dca <usb_tx_packet_count+0x1a>
    1dd6:	nop
    1dd8:	.word	0x1fff1914

00001ddc <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    1ddc:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    1dde:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1de0:	ldr	r2, [pc, #204]	; (1eb0 <usb_rx_memory+0xd4>)
    1de2:	ldrb	r3, [r2, #0]
    1de4:	lsls	r3, r3, #28
    1de6:	bpl.n	1df6 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1de8:	ldr	r3, [pc, #200]	; (1eb4 <usb_rx_memory+0xd8>)
    1dea:	ldr	r1, [r3, #32]
    1dec:	cmp	r1, #0
    1dee:	beq.n	1e78 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1df0:	ldr	r1, [r3, #40]	; 0x28
    1df2:	cmp	r1, #0
    1df4:	beq.n	1e94 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1df6:	ldrb	r3, [r2, #1]
    1df8:	lsls	r5, r3, #28
    1dfa:	bpl.n	1e0a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1dfc:	ldr	r3, [pc, #180]	; (1eb4 <usb_rx_memory+0xd8>)
    1dfe:	ldr	r1, [r3, #64]	; 0x40
    1e00:	cmp	r1, #0
    1e02:	beq.n	1ea0 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1e04:	ldr	r1, [r3, #72]	; 0x48
    1e06:	cmp	r1, #0
    1e08:	beq.n	1e98 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1e0a:	ldrb	r3, [r2, #2]
    1e0c:	lsls	r4, r3, #28
    1e0e:	bpl.n	1e1e <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1e10:	ldr	r3, [pc, #160]	; (1eb4 <usb_rx_memory+0xd8>)
    1e12:	ldr	r1, [r3, #96]	; 0x60
    1e14:	cmp	r1, #0
    1e16:	beq.n	1ea4 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1e18:	ldr	r1, [r3, #104]	; 0x68
    1e1a:	cmp	r1, #0
    1e1c:	beq.n	1e9c <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1e1e:	ldrb	r3, [r2, #3]
    1e20:	lsls	r1, r3, #28
    1e22:	bpl.n	1e34 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1e24:	ldr	r3, [pc, #140]	; (1eb4 <usb_rx_memory+0xd8>)
    1e26:	ldr.w	r1, [r3, #128]	; 0x80
    1e2a:	cmp	r1, #0
    1e2c:	beq.n	1eac <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1e2e:	ldr.w	r1, [r3, #136]	; 0x88
    1e32:	cbz	r1, 1e5a <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1e34:	ldrb	r3, [r2, #4]
    1e36:	lsls	r3, r3, #28
    1e38:	bpl.n	1e4c <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1e3a:	ldr	r3, [pc, #120]	; (1eb4 <usb_rx_memory+0xd8>)
    1e3c:	ldr.w	r2, [r3, #160]	; 0xa0
    1e40:	cmp	r2, #0
    1e42:	beq.n	1ea8 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1e44:	ldr.w	r2, [r3, #168]	; 0xa8
    1e48:	movs	r4, #21
    1e4a:	cbz	r2, 1e5c <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    1e4c:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    1e4e:	ldr	r3, [pc, #104]	; (1eb8 <usb_rx_memory+0xdc>)
    1e50:	movs	r2, #0
    1e52:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    1e54:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    1e56:	b.w	1d28 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1e5a:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1e5c:	ldr	r1, [pc, #88]	; (1eb8 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1e5e:	ldr	r5, [pc, #92]	; (1ebc <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    1e60:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1e62:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1e66:	add.w	r3, r3, r4, lsl #3
    1e6a:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1e6c:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1e6e:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1e70:	strb	r2, [r1, #0]
				__enable_irq();
    1e72:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    1e74:	pop	{r4, r5}
    1e76:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1e78:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1e7a:	ldr	r4, [pc, #60]	; (1eb8 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1e7c:	ldr	r5, [pc, #64]	; (1ec0 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    1e7e:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1e80:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1e84:	add.w	r3, r3, r2, lsl #3
    1e88:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1e8a:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1e8c:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1e8e:	strb	r2, [r4, #0]
				__enable_irq();
    1e90:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    1e92:	b.n	1e74 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1e94:	movs	r4, #5
    1e96:	b.n	1e5c <usb_rx_memory+0x80>
    1e98:	movs	r4, #9
    1e9a:	b.n	1e5c <usb_rx_memory+0x80>
    1e9c:	movs	r4, #13
    1e9e:	b.n	1e5c <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1ea0:	movs	r2, #8
    1ea2:	b.n	1e7a <usb_rx_memory+0x9e>
    1ea4:	movs	r2, #12
    1ea6:	b.n	1e7a <usb_rx_memory+0x9e>
    1ea8:	movs	r2, #20
    1eaa:	b.n	1e7a <usb_rx_memory+0x9e>
    1eac:	movs	r2, #16
    1eae:	b.n	1e7a <usb_rx_memory+0x9e>
    1eb0:	.word	0x000041b4
    1eb4:	.word	0x1fff0000
    1eb8:	.word	0x1fff1945
    1ebc:	.word	0x004000c8
    1ec0:	.word	0x00400088

00001ec4 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    1ec4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    1ec6:	cmp	r3, #4
    1ec8:	bhi.n	1f06 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1eca:	ldr	r2, [pc, #108]	; (1f38 <usb_tx+0x74>)
    1ecc:	lsls	r0, r0, #5
    1ece:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    1ed2:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1ed4:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    1ed6:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    1ed8:	ldr	r4, [pc, #96]	; (1f3c <usb_tx+0x78>)
    1eda:	ldrb	r2, [r4, r3]
    1edc:	cmp	r2, #3
    1ede:	bhi.n	1f18 <usb_tx+0x54>
    1ee0:	tbb	[pc, r2]
    1ee4:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    1ee8:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1eea:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    1eec:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1eee:	tst.w	r0, #8
    1ef2:	ite	ne
    1ef4:	movne	r3, #200	; 0xc8
    1ef6:	moveq	r3, #136	; 0x88
    1ef8:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1efc:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1efe:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1f00:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    1f02:	cpsie	i
}
    1f04:	pop	{r4, r5}
    1f06:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    1f08:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    1f0a:	movs	r2, #2
		break;
    1f0c:	b.n	1eea <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    1f0e:	movs	r2, #5
    1f10:	b.n	1eea <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    1f12:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    1f14:	movs	r2, #4
		break;
    1f16:	b.n	1eea <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    1f18:	ldr	r2, [pc, #36]	; (1f40 <usb_tx+0x7c>)
    1f1a:	ldr.w	r0, [r2, r3, lsl #2]
    1f1e:	cbz	r0, 1f30 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    1f20:	ldr	r2, [pc, #32]	; (1f44 <usb_tx+0x80>)
    1f22:	ldr.w	r0, [r2, r3, lsl #2]
    1f26:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    1f28:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    1f2c:	cpsie	i
		return;
    1f2e:	b.n	1f04 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    1f30:	str.w	r1, [r2, r3, lsl #2]
    1f34:	ldr	r2, [pc, #12]	; (1f44 <usb_tx+0x80>)
    1f36:	b.n	1f28 <usb_tx+0x64>
    1f38:	.word	0x1fff0000
    1f3c:	.word	0x1fff1954
    1f40:	.word	0x1fff1914
    1f44:	.word	0x1fff1928

00001f48 <usb_isr>:
}



void usb_isr(void)
{
    1f48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    1f4c:	ldr.w	fp, [pc, #776]	; 2258 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    1f50:	ldr.w	sl, [pc, #776]	; 225c <usb_isr+0x314>
}



void usb_isr(void)
{
    1f54:	sub	sp, #28
    1f56:	b.n	1fe2 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    1f58:	ldr	r7, [pc, #680]	; (2204 <usb_isr+0x2bc>)
    1f5a:	mov.w	r8, r3, lsr #2
    1f5e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    1f62:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    1f64:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    1f68:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    1f6c:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    1f6e:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    1f72:	and.w	r4, r3, #255	; 0xff
    1f76:	cmp	r3, #0
    1f78:	bne.w	217c <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    1f7c:	ldr.w	r3, [r7, r8, lsl #3]
    1f80:	lsrs	r3, r3, #16
    1f82:	uxth	r1, r3
    1f84:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    1f88:	cmp	r3, #0
    1f8a:	beq.w	216a <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    1f8e:	ldr	r3, [pc, #632]	; (2208 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    1f90:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    1f94:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    1f98:	ldr.w	r2, [r3, r6, lsl #2]
    1f9c:	cmp	r2, #0
    1f9e:	beq.w	240c <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    1fa2:	ldr	r5, [pc, #616]	; (220c <usb_isr+0x2c4>)
    1fa4:	ldr.w	r3, [r5, r6, lsl #2]
    1fa8:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    1faa:	ldr	r4, [pc, #612]	; (2210 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    1fac:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    1fb0:	ldrh.w	r3, [r4, r6, lsl #1]
    1fb4:	add	r1, r3
    1fb6:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    1fba:	bl	1ce8 <usb_malloc>
					if (packet) {
    1fbe:	cmp	r0, #0
    1fc0:	beq.w	23fe <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    1fc4:	ldr	r2, [pc, #588]	; (2214 <usb_isr+0x2cc>)
    1fc6:	ldr	r3, [pc, #592]	; (2218 <usb_isr+0x2d0>)
    1fc8:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    1fcc:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    1fd0:	it	ne
    1fd2:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    1fd4:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    1fd8:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    1fdc:	movs	r3, #8
    1fde:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    1fe2:	ldrb.w	r4, [fp]
    1fe6:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    1fe8:	lsls	r0, r4, #29
    1fea:	bpl.n	2026 <usb_isr+0xde>
		if (usb_configuration) {
    1fec:	ldr	r3, [pc, #556]	; (221c <usb_isr+0x2d4>)
    1fee:	ldrb	r3, [r3, #0]
    1ff0:	cbz	r3, 2020 <usb_isr+0xd8>
			t = usb_reboot_timer;
    1ff2:	ldr	r1, [pc, #556]	; (2220 <usb_isr+0x2d8>)
    1ff4:	ldrb	r2, [r1, #0]
			if (t) {
    1ff6:	and.w	r3, r2, #255	; 0xff
    1ffa:	cbz	r2, 2006 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    1ffc:	subs	r3, #1
    1ffe:	uxtb	r3, r3
    2000:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2002:	cbnz	r3, 2006 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2004:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2006:	ldr	r1, [pc, #540]	; (2224 <usb_isr+0x2dc>)
    2008:	ldrb	r2, [r1, #0]
			if (t) {
    200a:	and.w	r3, r2, #255	; 0xff
    200e:	cbz	r2, 201c <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2010:	subs	r3, #1
    2012:	uxtb	r3, r3
    2014:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2016:	cmp	r3, #0
    2018:	beq.w	23aa <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    201c:	bl	1880 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2020:	movs	r3, #4
    2022:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2026:	and.w	r3, r4, #8
    202a:	and.w	r2, r3, #255	; 0xff
    202e:	cmp	r3, #0
    2030:	beq.w	21c4 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2034:	ldrb.w	r3, [sl]
    2038:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    203a:	lsrs	r6, r3, #4
    203c:	bne.n	1f58 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    203e:	lsrs	r4, r3, #2
    2040:	ldr.w	r9, [pc, #448]	; 2204 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2044:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2048:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    204c:	ubfx	r2, r2, #2, #4
    2050:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2052:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2054:	cmp	r2, #12
    2056:	bhi.w	2162 <usb_isr+0x21a>
    205a:	tbb	[pc, r2]
    205e:	.short	0x7878
    2060:	.word	0x82828282
    2064:	.word	0x82438282
    2068:	.short	0x8282
    206a:	.byte	0x07
    206b:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    206c:	ldr	r0, [r1, #0]
    206e:	ldr	r5, [pc, #440]	; (2228 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2070:	ldr	r3, [pc, #416]	; (2214 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2072:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2074:	ldr	r7, [pc, #436]	; (222c <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2076:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    207a:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    207c:	ldr	r6, [pc, #432]	; (2230 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    207e:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2080:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2084:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2086:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2088:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    208a:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    208e:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2090:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2094:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2098:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    209a:	bhi.w	2260 <usb_isr+0x318>
    209e:	cmp.w	r1, #1664	; 0x680
    20a2:	bcs.w	26cc <usb_isr+0x784>
    20a6:	cmp.w	r1, #258	; 0x102
    20aa:	beq.w	247a <usb_isr+0x532>
    20ae:	bhi.w	2444 <usb_isr+0x4fc>
    20b2:	cmp	r1, #128	; 0x80
    20b4:	beq.w	2700 <usb_isr+0x7b8>
    20b8:	cmp	r1, #130	; 0x82
    20ba:	bne.w	2486 <usb_isr+0x53e>
    20be:	ldrh	r1, [r5, #4]
    20c0:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    20c4:	cmp	r1, #5
    20c6:	bhi.w	2486 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    20ca:	ldr	r3, [pc, #360]	; (2234 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    20cc:	ldr	r4, [pc, #360]	; (2238 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    20ce:	lsls	r1, r1, #2
    20d0:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    20d2:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    20d4:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    20d6:	ldrb	r2, [r3, #0]
    20d8:	lsls	r3, r2, #30
    20da:	bpl.w	2810 <usb_isr+0x8c8>
    20de:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    20e0:	movs	r0, #2
    20e2:	b.n	250e <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    20e4:	ldr	r7, [pc, #324]	; (222c <usb_isr+0x2e4>)
    20e6:	ldr	r2, [r7, #0]
		if (data) {
    20e8:	cbz	r2, 2138 <usb_isr+0x1f0>
			size = ep0_tx_len;
    20ea:	ldr	r3, [pc, #336]	; (223c <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    20ec:	ldr	r6, [pc, #320]	; (2230 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    20ee:	ldr	r1, [pc, #336]	; (2240 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    20f0:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    20f2:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    20f4:	ldrb	r5, [r1, #0]
    20f6:	cmp	r0, #64	; 0x40
    20f8:	mov	lr, r0
    20fa:	orr.w	r8, r5, #2
    20fe:	it	cs
    2100:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2104:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2106:	eor.w	r4, r4, #1
    210a:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    210c:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2110:	ite	eq
    2112:	moveq	r4, #136	; 0x88
    2114:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2116:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    211a:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    211c:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2120:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2124:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2126:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2128:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    212c:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    212e:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2130:	cmp	r0, #0
    2132:	beq.w	22a2 <usb_isr+0x35a>
    2136:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2138:	ldr	r3, [pc, #236]	; (2228 <usb_isr+0x2e0>)
    213a:	ldrh	r2, [r3, #0]
    213c:	cmp.w	r2, #1280	; 0x500
    2140:	bne.n	2162 <usb_isr+0x21a>
			setup.bRequest = 0;
    2142:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2144:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2146:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2148:	ldr	r3, [pc, #248]	; (2244 <usb_isr+0x2fc>)
    214a:	strb	r2, [r3, #0]
    214c:	b.n	2162 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    214e:	ldr	r2, [pc, #216]	; (2228 <usb_isr+0x2e0>)
    2150:	ldrh	r0, [r2, #0]
    2152:	movw	r2, #8225	; 0x2021
    2156:	cmp	r0, r2
    2158:	beq.w	22ac <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    215c:	ldr	r2, [pc, #180]	; (2214 <usb_isr+0x2cc>)
    215e:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2162:	ldr	r2, [pc, #228]	; (2248 <usb_isr+0x300>)
    2164:	movs	r3, #1
    2166:	strb	r3, [r2, #0]
    2168:	b.n	1fdc <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    216a:	ldr	r2, [pc, #168]	; (2214 <usb_isr+0x2cc>)
    216c:	ldr	r3, [pc, #168]	; (2218 <usb_isr+0x2d0>)
    216e:	tst.w	r9, #8
    2172:	it	ne
    2174:	movne	r3, r2
    2176:	str.w	r3, [r7, r8, lsl #3]
    217a:	b.n	1fdc <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    217c:	bl	1d28 <usb_free>
				packet = tx_first[endpoint];
    2180:	ldr	r2, [pc, #200]	; (224c <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2182:	ldr	r1, [pc, #204]	; (2250 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2184:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2188:	cmp	r3, #0
    218a:	beq.w	2414 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    218e:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2190:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2192:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2196:	add.w	r2, r3, #8
    219a:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    219e:	cmp	r4, #3
    21a0:	bhi.n	21ae <usb_isr+0x266>
    21a2:	tbb	[pc, r4]
    21a6:	.short	0x022c
    21a8:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    21aa:	movs	r2, #2
    21ac:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    21ae:	ldrh	r2, [r3, #0]
    21b0:	tst.w	r9, #8
    21b4:	ite	eq
    21b6:	moveq	r3, #136	; 0x88
    21b8:	movne	r3, #200	; 0xc8
    21ba:	orr.w	r3, r3, r2, lsl #16
    21be:	str.w	r3, [r7, r8, lsl #3]
    21c2:	b.n	1fdc <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    21c4:	lsls	r0, r4, #31
    21c6:	bmi.w	23b0 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    21ca:	lsls	r1, r4, #24
    21cc:	bmi.w	2430 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    21d0:	lsls	r2, r4, #30
    21d2:	bpl.n	21e2 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    21d4:	ldr	r2, [pc, #124]	; (2254 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    21d6:	ldr	r1, [pc, #128]	; (2258 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    21d8:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    21da:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    21dc:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    21de:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    21e0:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    21e2:	lsls	r3, r4, #27
    21e4:	bpl.n	21ec <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    21e6:	ldr	r3, [pc, #112]	; (2258 <usb_isr+0x310>)
    21e8:	movs	r2, #16
    21ea:	strb	r2, [r3, #0]
	}

}
    21ec:	add	sp, #28
    21ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    21f2:	movs	r2, #4
    21f4:	strb	r2, [r1, r6]
						break;
    21f6:	b.n	21ae <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    21f8:	movs	r2, #5
    21fa:	strb	r2, [r1, r6]
						break;
    21fc:	b.n	21ae <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    21fe:	movs	r2, #3
    2200:	strb	r2, [r1, r6]
						break;
    2202:	b.n	21ae <usb_isr+0x266>
    2204:	.word	0x1fff0000
    2208:	.word	0x1fff18bc
    220c:	.word	0x1fff1864
    2210:	.word	0x1fff1de4
    2214:	.word	0x004000c8
    2218:	.word	0x00400088
    221c:	.word	0x1fff1950
    2220:	.word	0x1fff18d1
    2224:	.word	0x1fff17e4
    2228:	.word	0x1fff193c
    222c:	.word	0x1fff1860
    2230:	.word	0x1fff18d0
    2234:	.word	0x400720c0
    2238:	.word	0x1fff1948
    223c:	.word	0x1fff1878
    2240:	.word	0x1fff1944
    2244:	.word	0x40072098
    2248:	.word	0x40072094
    224c:	.word	0x1fff1914
    2250:	.word	0x1fff1954
    2254:	.word	0x40072088
    2258:	.word	0x40072080
    225c:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2260:	movw	r4, #8225	; 0x2021
    2264:	cmp	r1, r4
    2266:	beq.w	23a2 <usb_isr+0x45a>
    226a:	bhi.n	2300 <usb_isr+0x3b8>
    226c:	cmp.w	r1, #2176	; 0x880
    2270:	beq.w	2506 <usb_isr+0x5be>
    2274:	cmp.w	r1, #2304	; 0x900
    2278:	bne.w	2486 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    227c:	ldr	r2, [pc, #712]	; (2548 <usb_isr+0x600>)
    227e:	ldr	r4, [pc, #716]	; (254c <usb_isr+0x604>)
    2280:	ldrb	r1, [r5, #2]
    2282:	strb	r1, [r2, #0]
    2284:	add.w	r5, r4, #160	; 0xa0
    2288:	b.n	2292 <usb_isr+0x34a>
    228a:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    228c:	cmp	r5, r4
    228e:	beq.w	25a4 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2292:	ldr	r3, [r4, #32]
    2294:	lsls	r1, r3, #24
    2296:	bpl.n	228a <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2298:	ldr	r0, [r4, #36]	; 0x24
    229a:	subs	r0, #8
    229c:	bl	1d28 <usb_free>
    22a0:	b.n	228a <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    22a2:	cmp.w	lr, #64	; 0x40
    22a6:	it	ne
    22a8:	movne	r2, #0
    22aa:	b.n	2136 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    22ac:	ldr	r2, [pc, #672]	; (2550 <usb_isr+0x608>)
    22ae:	ldrb	r5, [r1, #0]
    22b0:	ldrb	r0, [r1, #1]
    22b2:	strb	r5, [r2, #0]
    22b4:	strb	r0, [r2, #1]
    22b6:	ldrb	r5, [r1, #2]
    22b8:	ldrb	r0, [r1, #3]
    22ba:	strb	r5, [r2, #2]
    22bc:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    22be:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    22c0:	ldrb	r5, [r1, #4]
    22c2:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    22c4:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    22c6:	ldrb	r5, [r1, #5]
    22c8:	ldrb	r1, [r1, #6]
    22ca:	strb	r5, [r2, #5]
    22cc:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    22ce:	beq.w	24fe <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22d2:	ldr	r1, [pc, #640]	; (2554 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22d4:	ldr	r6, [pc, #640]	; (2558 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22d6:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22d8:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    22da:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22de:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22e0:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    22e4:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22e6:	ite	eq
    22e8:	moveq	r1, #136	; 0x88
    22ea:	movne	r1, #200	; 0xc8
    22ec:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22f0:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    22f4:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22f8:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    22fa:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22fc:	str	r1, [r2, #4]
    22fe:	b.n	215c <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2300:	movw	r4, #8737	; 0x2221
    2304:	cmp	r1, r4
    2306:	bne.w	271a <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    230a:	ldr.w	ip, [pc, #656]	; 259c <usb_isr+0x654>
    230e:	ldr	r3, [pc, #588]	; (255c <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2310:	ldr	r1, [pc, #588]	; (2560 <usb_isr+0x618>)
    2312:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2314:	ldr.w	r5, [ip]
    2318:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    231a:	str	r0, [sp, #4]
    231c:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    231e:	movs	r0, #0
    2320:	str	r0, [sp, #8]
    2322:	mov	r8, r0
    2324:	mov	ip, r0
    2326:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2328:	ldr	r1, [pc, #552]	; (2554 <usb_isr+0x60c>)
    232a:	ldrb	r5, [r1, #0]
    232c:	orr.w	lr, r5, #2
    2330:	add.w	r3, r9, lr, lsl #3
    2334:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2336:	ldr	r3, [sp, #4]
    2338:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    233a:	ldr	r3, [sp, #12]
    233c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    233e:	ite	eq
    2340:	moveq	r4, #136	; 0x88
    2342:	movne	r4, #200	; 0xc8
    2344:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2348:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    234c:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2350:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2352:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2354:	ldr.w	lr, [pc, #500]	; 254c <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2358:	ldr	r3, [pc, #508]	; (2558 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    235a:	ldr.w	r8, [pc, #504]	; 2554 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    235e:	cmp	r0, #0
    2360:	bne.w	2494 <usb_isr+0x54c>
    2364:	cmp.w	ip, #64	; 0x40
    2368:	bne.n	23a2 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    236a:	orr.w	ip, r4, #2
    236e:	add.w	r3, r9, ip, lsl #3
    2372:	ldr	r4, [sp, #8]
    2374:	ldr.w	lr, [pc, #468]	; 254c <usb_isr+0x604>
    2378:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    237a:	cmp	r2, #0
    237c:	bne.w	24c0 <usb_isr+0x578>
    2380:	lsls	r2, r0, #16
    2382:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2386:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    238a:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    238e:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2390:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2392:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2394:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2396:	cmp	r0, #64	; 0x40
    2398:	bne.n	23a2 <usb_isr+0x45a>
    239a:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    239c:	ldr	r2, [pc, #452]	; (2564 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    239e:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    23a0:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    23a2:	ldr	r2, [pc, #452]	; (2568 <usb_isr+0x620>)
    23a4:	movs	r3, #1
    23a6:	strb	r3, [r2, #0]
    23a8:	b.n	2162 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    23aa:	bl	1108 <usb_serial_flush_callback>
    23ae:	b.n	201c <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    23b0:	ldr	r3, [pc, #408]	; (254c <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    23b2:	ldr	r0, [pc, #436]	; (2568 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    23b4:	ldr	r1, [pc, #412]	; (2554 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    23b6:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    23b8:	mov.w	lr, #2
    23bc:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    23c0:	ldr	r7, [pc, #424]	; (256c <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    23c2:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    23c4:	ldr	r1, [pc, #424]	; (2570 <usb_isr+0x628>)
    23c6:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    23c8:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    23ca:	ldr	r6, [pc, #424]	; (2574 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    23cc:	ldr	r5, [pc, #424]	; (2578 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    23ce:	ldr	r4, [pc, #428]	; (257c <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    23d0:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    23d2:	movs	r1, #13
    23d4:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    23d6:	movs	r1, #255	; 0xff
    23d8:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    23da:	ldr.w	lr, [pc, #452]	; 25a0 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    23de:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    23e0:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    23e2:	ldr	r5, [pc, #412]	; (2580 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    23e4:	ldr	r2, [pc, #412]	; (2584 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    23e6:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    23ea:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    23ec:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    23ee:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    23f2:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    23f4:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    23f6:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    23f8:	add	sp, #28
    23fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    23fe:	ldr	r2, [pc, #392]	; (2588 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2400:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2404:	ldrb	r3, [r2, #0]
    2406:	adds	r3, #1
    2408:	strb	r3, [r2, #0]
    240a:	b.n	1fdc <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    240c:	str.w	r0, [r3, r6, lsl #2]
    2410:	ldr	r5, [pc, #376]	; (258c <usb_isr+0x644>)
    2412:	b.n	1faa <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2414:	ldrb	r3, [r1, r6]
    2416:	cmp	r3, #3
    2418:	bhi.n	24f0 <usb_isr+0x5a8>
    241a:	add	r2, pc, #4	; (adr r2, 2420 <usb_isr+0x4d8>)
    241c:	ldr.w	pc, [r2, r3, lsl #2]
    2420:	.word	0x00001fdd
    2424:	.word	0x00001fdd
    2428:	.word	0x00002475
    242c:	.word	0x0000246f
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2430:	ldr	r1, [pc, #312]	; (256c <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    2432:	ldr	r3, [pc, #324]	; (2578 <usb_isr+0x630>)
    2434:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2436:	movs	r0, #13
    2438:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    243a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    243c:	lsls	r2, r4, #30
    243e:	bpl.w	21e2 <usb_isr+0x29a>
    2442:	b.n	21d4 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2444:	movw	r2, #770	; 0x302
    2448:	cmp	r1, r2
    244a:	bne.w	270a <usb_isr+0x7c2>
    244e:	ldrh	r1, [r5, #4]
    2450:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2454:	cmp	r1, #5
    2456:	bhi.n	2486 <usb_isr+0x53e>
    2458:	ldrh	r2, [r5, #2]
    245a:	cbnz	r2, 2486 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    245c:	ldr	r4, [pc, #268]	; (256c <usb_isr+0x624>)
    245e:	str	r0, [sp, #4]
    2460:	lsls	r1, r1, #2
    2462:	add	r4, r1
    2464:	ldrb	r1, [r4, #0]
    2466:	orr.w	r1, r1, #2
    246a:	strb	r1, [r4, #0]
    246c:	b.n	231e <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    246e:	movs	r3, #1
    2470:	strb	r3, [r1, r6]
						break;
    2472:	b.n	1fdc <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2474:	movs	r3, #0
    2476:	strb	r3, [r1, r6]
						break;
    2478:	b.n	1fdc <usb_isr+0x94>
    247a:	ldrh	r1, [r5, #4]
    247c:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2480:	cmp	r1, #5
    2482:	bls.w	2724 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2486:	ldr	r2, [pc, #228]	; (256c <usb_isr+0x624>)
    2488:	movs	r3, #15
    248a:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    248c:	ldr	r2, [pc, #216]	; (2568 <usb_isr+0x620>)
    248e:	movs	r3, #1
    2490:	strb	r3, [r2, #0]
    2492:	b.n	2162 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2494:	cmp	r0, #64	; 0x40
    2496:	bls.w	236a <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    249a:	orr.w	r4, r4, #2
    249e:	add.w	r1, lr, r4, lsl #3
    24a2:	ldr	r6, [sp, #8]
    24a4:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24a6:	cbz	r2, 24d8 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    24a8:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24ac:	ldr	r2, [pc, #224]	; (2590 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    24ae:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    24b0:	mov	r3, r6
    24b2:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    24b4:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    24b8:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24ba:	str.w	r2, [lr, r4, lsl #3]
    24be:	b.n	239c <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    24c0:	ldrb.w	r3, [sp, #4]
    24c4:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24c6:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    24c8:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    24ca:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24cc:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    24d0:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24d2:	str.w	r2, [lr, ip, lsl #3]
    24d6:	b.n	2396 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    24d8:	ldrb.w	r1, [sp, #4]
    24dc:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    24de:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24e0:	ldr	r2, [pc, #140]	; (2570 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    24e2:	strb.w	r5, [r8]
    24e6:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    24e8:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24ea:	str.w	r2, [lr, r4, lsl #3]
    24ee:	b.n	239c <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    24f0:	tst.w	r9, #8
    24f4:	ite	eq
    24f6:	moveq	r3, #2
    24f8:	movne	r3, #3
    24fa:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    24fc:	b.n	1fdc <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    24fe:	ldr	r2, [pc, #148]	; (2594 <usb_isr+0x64c>)
    2500:	movs	r1, #15
    2502:	strb	r1, [r2, #0]
    2504:	b.n	22d2 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2506:	ldr	r2, [pc, #64]	; (2548 <usb_isr+0x600>)
    2508:	ldr	r4, [pc, #140]	; (2598 <usb_isr+0x650>)
    250a:	ldrb	r2, [r2, #0]
    250c:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    250e:	ldrh	r2, [r5, #6]
    2510:	cmp	r2, r0
    2512:	bcs.w	28d8 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2516:	ldr	r1, [pc, #60]	; (2554 <usb_isr+0x60c>)
    2518:	ldrb	r5, [r1, #0]
    251a:	cmp	r2, #64	; 0x40
    251c:	mov	ip, r2
    251e:	orr.w	lr, r5, #2
    2522:	it	cs
    2524:	movcs.w	ip, #64	; 0x40
    2528:	add.w	r3, r4, ip
    252c:	add.w	r0, r9, lr, lsl #3
    2530:	str	r3, [sp, #8]
    2532:	movs	r3, #1
    2534:	str	r4, [r0, #4]
    2536:	mov.w	r8, ip, lsl #16
    253a:	rsb	r0, ip, r2
    253e:	str	r3, [sp, #4]
    2540:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2542:	movs	r4, #200	; 0xc8
    2544:	b.n	2344 <usb_isr+0x3fc>
    2546:	nop
    2548:	.word	0x1fff1950
    254c:	.word	0x1fff0000
    2550:	.word	0x1fff1cac
    2554:	.word	0x1fff1944
    2558:	.word	0x1fff18d0
    255c:	.word	0x1fff1cb4
    2560:	.word	0x1fff17f4
    2564:	.word	0x1fff1878
    2568:	.word	0x40072094
    256c:	.word	0x400720c0
    2570:	.word	0x00400088
    2574:	.word	0x40072088
    2578:	.word	0x40072080
    257c:	.word	0x40072098
    2580:	.word	0x1fff187c
    2584:	.word	0x1fff18d4
    2588:	.word	0x1fff1945
    258c:	.word	0x1fff1864
    2590:	.word	0x004000c8
    2594:	.word	0x1fff18d1
    2598:	.word	0x1fff1948
    259c:	.word	0x1fff17fc
    25a0:	.word	0x4007208c
    25a4:	ldr	r4, [pc, #704]	; (2868 <usb_isr+0x920>)
    25a6:	ldr	r2, [pc, #708]	; (286c <usb_isr+0x924>)
    25a8:	ldr	r1, [pc, #708]	; (2870 <usb_isr+0x928>)
    25aa:	ldr	r0, [pc, #712]	; (2874 <usb_isr+0x92c>)
    25ac:	ldr	r5, [pc, #712]	; (2878 <usb_isr+0x930>)
    25ae:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    25b0:	movs	r3, #0
    25b2:	ldr	r4, [pc, #712]	; (287c <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    25b4:	str	r4, [sp, #8]
    25b6:	str	r6, [sp, #20]
    25b8:	str	r5, [sp, #12]
    25ba:	mov	r8, r0
    25bc:	mov	r4, r3
    25be:	str	r7, [sp, #16]
    25c0:	mov	r6, r2
    25c2:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    25c4:	ldr	r0, [r6, #0]
			while (p) {
    25c6:	cbz	r0, 25d4 <usb_isr+0x68c>
				n = p->next;
    25c8:	ldr	r7, [r0, #4]
				usb_free(p);
    25ca:	bl	1d28 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    25ce:	mov	r0, r7
    25d0:	cmp	r7, #0
    25d2:	bne.n	25c8 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    25d4:	movs	r3, #0
    25d6:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    25d8:	ldr	r3, [sp, #12]
			p = tx_first[i];
    25da:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    25dc:	mov	r2, r3
    25de:	movs	r3, #0
    25e0:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    25e4:	cbz	r0, 25f2 <usb_isr+0x6aa>
				n = p->next;
    25e6:	ldr	r7, [r0, #4]
				usb_free(p);
    25e8:	bl	1d28 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    25ec:	mov	r0, r7
    25ee:	cmp	r7, #0
    25f0:	bne.n	25e6 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    25f2:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    25f4:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    25f6:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    25f8:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    25fa:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    25fe:	ldr	r2, [sp, #8]
    2600:	mov.w	r1, #0
			switch (tx_state[i]) {
    2604:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    2606:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    260a:	cmp	r3, #3
    260c:	bhi.n	261e <usb_isr+0x6d6>
    260e:	tbb	[pc, r3]
    2612:	.short	0x0258
    2614:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2616:	ldr	r3, [sp, #4]
    2618:	mov.w	r2, #1
    261c:	strb	r2, [r3, #0]
    261e:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    2620:	adds	r4, #1
    2622:	adds	r3, #1
    2624:	cmp	r4, #5
    2626:	add.w	r6, r6, #4
    262a:	add.w	r5, r5, #4
    262e:	str	r3, [sp, #4]
    2630:	bne.n	25c4 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2632:	ldr	r4, [pc, #588]	; (2880 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2634:	ldr	r5, [pc, #588]	; (2884 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2636:	ldrb	r2, [r4, #0]
			*reg = epconf;
    2638:	ldr	r3, [pc, #588]	; (2888 <usb_isr+0x940>)
    263a:	ldr	r7, [sp, #16]
    263c:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    263e:	movs	r1, #0
    2640:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2642:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2644:	lsls	r2, r2, #28
    2646:	bmi.n	273e <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2648:	ldrb	r2, [r4, #1]
			*reg = epconf;
    264a:	ldr	r1, [pc, #576]	; (288c <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    264c:	ldr.w	r8, [pc, #588]	; 289c <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2650:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2652:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2654:	mov.w	r1, #0
    2658:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    265c:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2660:	bmi.w	27ea <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2664:	ldrb	r2, [r4, #2]
			*reg = epconf;
    2666:	ldr	r1, [pc, #552]	; (2890 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2668:	ldr.w	r8, [pc, #560]	; 289c <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    266c:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    266e:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2670:	mov.w	r1, #0
    2674:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    2678:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    267c:	bmi.w	27c2 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2680:	ldr	r1, [pc, #528]	; (2894 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2682:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2684:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2686:	movs	r1, #0
    2688:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    268c:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2690:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2692:	ldr.w	r8, [pc, #520]	; 289c <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2696:	bmi.n	2794 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2698:	ldrb	r2, [r4, #4]
			*reg = epconf;
    269a:	ldr	r1, [pc, #508]	; (2898 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    269c:	ldr	r4, [pc, #508]	; (289c <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    269e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    26a0:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    26a2:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    26a4:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    26a8:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    26ac:	bmi.n	276a <usb_isr+0x822>
    26ae:	ldrb	r3, [r6, #0]
    26b0:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    26b2:	movs	r1, #0
    26b4:	eor.w	r2, r3, #1
    26b8:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    26bc:	str.w	r1, [r9, #184]	; 0xb8
    26c0:	b.n	231e <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    26c2:	ldr	r3, [sp, #4]
    26c4:	mov.w	r2, #0
    26c8:	strb	r2, [r3, #0]
    26ca:	b.n	261e <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    26cc:	ldr	r2, [pc, #464]	; (28a0 <usb_isr+0x958>)
    26ce:	ldr	r4, [r2, #4]
    26d0:	cmp	r4, #0
    26d2:	beq.w	2486 <usb_isr+0x53e>
    26d6:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    26d8:	ldrh.w	lr, [r5, #4]
    26dc:	b.n	26e8 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    26de:	adds	r2, #12
			if (list->addr == NULL) break;
    26e0:	ldr	r4, [r2, #4]
    26e2:	cmp	r4, #0
    26e4:	beq.w	2486 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    26e8:	ldrh	r3, [r2, #0]
    26ea:	cmp	r3, r0
    26ec:	bne.n	26de <usb_isr+0x796>
    26ee:	ldrh	r3, [r2, #2]
    26f0:	cmp	r3, lr
    26f2:	bne.n	26de <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    26f4:	lsrs	r0, r0, #8
    26f6:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    26f8:	ite	eq
    26fa:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    26fc:	ldrhne	r0, [r2, #8]
    26fe:	b.n	250e <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2700:	ldr	r4, [pc, #416]	; (28a4 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    2702:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2704:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2706:	strb	r2, [r4, #1]
    2708:	b.n	250e <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    270a:	cmp.w	r1, #1280	; 0x500
    270e:	bne.w	2486 <usb_isr+0x53e>
    2712:	movs	r3, #1
    2714:	movs	r2, #0
    2716:	str	r3, [sp, #4]
    2718:	b.n	231e <usb_isr+0x3d6>
    271a:	movw	r2, #8993	; 0x2321
    271e:	cmp	r1, r2
    2720:	beq.n	2712 <usb_isr+0x7ca>
    2722:	b.n	2486 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2724:	ldrh	r2, [r5, #2]
    2726:	cmp	r2, #0
    2728:	bne.w	2486 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    272c:	ldr	r4, [pc, #376]	; (28a8 <usb_isr+0x960>)
    272e:	str	r0, [sp, #4]
    2730:	lsls	r1, r1, #2
    2732:	add	r4, r1
    2734:	ldrb	r1, [r4, #0]
    2736:	bic.w	r1, r1, #2
    273a:	strb	r1, [r4, #0]
    273c:	b.n	231e <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    273e:	bl	1ce8 <usb_malloc>
				if (p) {
    2742:	cmp	r0, #0
    2744:	beq.w	28b4 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    2748:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    274a:	ldr	r2, [pc, #352]	; (28ac <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    274c:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2750:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2754:	bl	1ce8 <usb_malloc>
				if (p) {
    2758:	cmp	r0, #0
    275a:	beq.n	285c <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    275c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    275e:	ldr	r2, [pc, #336]	; (28b0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2760:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2764:	str.w	r2, [r9, #40]	; 0x28
    2768:	b.n	2648 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    276a:	bl	1ce8 <usb_malloc>
				if (p) {
    276e:	cmp	r0, #0
    2770:	beq.n	2820 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    2772:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2774:	ldr	r2, [pc, #308]	; (28ac <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2776:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    277a:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    277e:	bl	1ce8 <usb_malloc>
				if (p) {
    2782:	cmp	r0, #0
    2784:	beq.n	2814 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    2786:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2788:	ldr	r2, [pc, #292]	; (28b0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    278a:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    278e:	str.w	r2, [r9, #168]	; 0xa8
    2792:	b.n	26ae <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2794:	bl	1ce8 <usb_malloc>
				if (p) {
    2798:	cmp	r0, #0
    279a:	beq.w	28cc <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    279e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27a0:	ldr	r2, [pc, #264]	; (28ac <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    27a2:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27a6:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    27aa:	bl	1ce8 <usb_malloc>
				if (p) {
    27ae:	cmp	r0, #0
    27b0:	beq.w	28c0 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    27b4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    27b6:	ldr	r2, [pc, #248]	; (28b0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    27b8:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    27bc:	str.w	r2, [r9, #136]	; 0x88
    27c0:	b.n	2698 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    27c2:	bl	1ce8 <usb_malloc>
				if (p) {
    27c6:	cmp	r0, #0
    27c8:	beq.n	2850 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    27ca:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27cc:	ldr	r2, [pc, #220]	; (28ac <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    27ce:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27d2:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    27d6:	bl	1ce8 <usb_malloc>
				if (p) {
    27da:	cbz	r0, 2844 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    27dc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    27de:	ldr	r2, [pc, #208]	; (28b0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    27e0:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    27e4:	str.w	r2, [r9, #104]	; 0x68
    27e8:	b.n	2680 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    27ea:	bl	1ce8 <usb_malloc>
				if (p) {
    27ee:	cbz	r0, 2838 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    27f0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27f2:	ldr	r2, [pc, #184]	; (28ac <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    27f4:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27f8:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    27fc:	bl	1ce8 <usb_malloc>
				if (p) {
    2800:	cbz	r0, 282c <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    2802:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2804:	ldr	r2, [pc, #168]	; (28b0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2806:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    280a:	str.w	r2, [r9, #72]	; 0x48
    280e:	b.n	2664 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    2810:	movs	r0, #2
    2812:	b.n	250e <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2814:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2816:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    281a:	adds	r2, #1
    281c:	strb	r2, [r5, #0]
    281e:	b.n	26ae <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2820:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2822:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    2826:	adds	r2, #1
    2828:	strb	r2, [r5, #0]
    282a:	b.n	277e <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    282c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    282e:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    2832:	adds	r2, #1
    2834:	strb	r2, [r5, #0]
    2836:	b.n	2664 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2838:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    283a:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    283e:	adds	r2, #1
    2840:	strb	r2, [r5, #0]
    2842:	b.n	27fc <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2844:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2846:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    284a:	adds	r2, #1
    284c:	strb	r2, [r5, #0]
    284e:	b.n	2680 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2850:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2852:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    2856:	adds	r2, #1
    2858:	strb	r2, [r5, #0]
    285a:	b.n	27d6 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    285c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    285e:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    2862:	adds	r2, #1
    2864:	strb	r2, [r5, #0]
    2866:	b.n	2648 <usb_isr+0x700>
    2868:	.word	0x1fff1954
    286c:	.word	0x1fff18bc
    2870:	.word	0x1fff1914
    2874:	.word	0x1fff1928
    2878:	.word	0x1fff1864
    287c:	.word	0x1fff1de4
    2880:	.word	0x000041b4
    2884:	.word	0x1fff1945
    2888:	.word	0x400720c4
    288c:	.word	0x400720c8
    2890:	.word	0x400720cc
    2894:	.word	0x400720d0
    2898:	.word	0x400720d4
    289c:	.word	0x1fff0000
    28a0:	.word	0x000041bc
    28a4:	.word	0x1fff1948
    28a8:	.word	0x400720c0
    28ac:	.word	0x00400088
    28b0:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    28b4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    28b6:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    28ba:	adds	r2, #1
    28bc:	strb	r2, [r5, #0]
    28be:	b.n	2754 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    28c0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    28c2:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    28c6:	adds	r2, #1
    28c8:	strb	r2, [r5, #0]
    28ca:	b.n	2698 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    28cc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    28ce:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    28d2:	adds	r2, #1
    28d4:	strb	r2, [r5, #0]
    28d6:	b.n	27aa <usb_isr+0x862>
    28d8:	cmp	r0, #64	; 0x40
    28da:	mov	ip, r0
    28dc:	it	cs
    28de:	movcs.w	ip, #64	; 0x40
    28e2:	add.w	r3, r4, ip
    28e6:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    28e8:	movs	r3, #1
    28ea:	rsb	r0, ip, r0
    28ee:	mov.w	r8, ip, lsl #16
    28f2:	movs	r2, #0
    28f4:	str	r3, [sp, #4]
    28f6:	b.n	2328 <usb_isr+0x3e0>

000028f8 <usb_init>:
}



void usb_init(void)
{
    28f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28fc:	ldr	r4, [pc, #156]	; (299c <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    28fe:	bl	31c8 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2902:	movs	r2, #0
    2904:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2908:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    290a:	str	r2, [r3, #0]
		table[i].addr = 0;
    290c:	str	r2, [r3, #4]
    290e:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2910:	cmp	r3, r0
		table[i].desc = 0;
    2912:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2916:	bne.n	290a <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2918:	ldr	r0, [pc, #132]	; (29a0 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    291a:	ldr	r2, [pc, #136]	; (29a4 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    291c:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    291e:	ldr.w	lr, [pc, #156]	; 29bc <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2922:	ldr	r6, [pc, #132]	; (29a8 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2924:	ldr	r5, [pc, #132]	; (29ac <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2926:	ldr	r7, [pc, #136]	; (29b0 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2928:	ldr.w	ip, [pc, #148]	; 29c0 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    292c:	ldr.w	r8, [pc, #148]	; 29c4 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2930:	orr.w	r3, r3, #262144	; 0x40000
    2934:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2936:	ldr	r3, [r2, #0]
    2938:	orr.w	r3, r3, #50331648	; 0x3000000
    293c:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    293e:	movs	r3, #3
    2940:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2944:	movs	r3, #160	; 0xa0
    2946:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2948:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    294c:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2950:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2954:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2956:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2958:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    295c:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    295e:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2960:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2962:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2964:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2966:	ldr	r5, [pc, #76]	; (29b4 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2968:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    296c:	ldr	r0, [pc, #72]	; (29b8 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    296e:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    2972:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2974:	movs	r3, #1
    2976:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    297a:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    297e:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2982:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2984:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2986:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    298a:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    298c:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    298e:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2992:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2996:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    299a:	nop
    299c:	.word	0x1fff0000
    29a0:	.word	0x40048034
    29a4:	.word	0x4000d800
    29a8:	.word	0x40072140
    29ac:	.word	0x4007209c
    29b0:	.word	0x400720b0
    29b4:	.word	0xe000e435
    29b8:	.word	0xe000e104
    29bc:	.word	0x40072144
    29c0:	.word	0x40072080
    29c4:	.word	0x40072088

000029c8 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    29c8:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    29ca:	ldr	r4, [pc, #176]	; (2a7c <yield+0xb4>)
    29cc:	ldrb	r3, [r4, #0]
    29ce:	cbz	r3, 29d2 <yield+0xa>
    29d0:	pop	{r3, r4, r5, pc}
	running = 1;
    29d2:	movs	r3, #1
    29d4:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    29d6:	bl	ef4 <usb_serial_available>
	if (Serial.available()) serialEvent();
    29da:	cmp	r0, #0
    29dc:	bne.n	2a64 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    29de:	bl	2f98 <serial_available>
	if (Serial1.available()) serialEvent1();
    29e2:	cmp	r0, #0
    29e4:	bne.n	2a5e <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    29e6:	bl	2c80 <serial2_available>
	if (Serial2.available()) serialEvent2();
    29ea:	cmp	r0, #0
    29ec:	bne.n	2a58 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    29ee:	bl	3298 <serial3_available>
	if (Serial3.available()) serialEvent3();
    29f2:	cbnz	r0, 2a52 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    29f4:	bl	2dac <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    29f8:	cbnz	r0, 2a4c <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    29fa:	bl	2b88 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    29fe:	cbnz	r0, 2a46 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    2a00:	bl	30c4 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2a04:	cbnz	r0, 2a40 <yield+0x78>
#endif
	running = 0;
    2a06:	movs	r3, #0
    2a08:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2a0a:	mrs	r3, IPSR
		if (ipsr != 0) return;
    2a0e:	cmp	r3, #0
    2a10:	bne.n	29d0 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2a12:	mrs	r1, PRIMASK
		__disable_irq();
    2a16:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2a18:	ldr	r3, [pc, #100]	; (2a80 <yield+0xb8>)
    2a1a:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2a1c:	cbz	r0, 2a6a <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2a1e:	ldr	r4, [pc, #100]	; (2a84 <yield+0xbc>)
    2a20:	ldrb	r2, [r4, #0]
    2a22:	cbnz	r2, 2a6a <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    2a24:	ldr	r5, [r0, #20]
    2a26:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2a28:	movs	r3, #1
    2a2a:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    2a2c:	cbz	r5, 2a72 <yield+0xaa>
			firstYield->_prev = nullptr;
    2a2e:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2a30:	cbnz	r1, 2a34 <yield+0x6c>
    2a32:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2a34:	movs	r5, #0
    2a36:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2a38:	ldr	r3, [r0, #8]
    2a3a:	blx	r3
		runningFromYield = false;
    2a3c:	strb	r5, [r4, #0]
    2a3e:	b.n	29d0 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2a40:	bl	2b84 <serialEvent6()>
    2a44:	b.n	2a06 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2a46:	bl	2a8c <serialEvent5()>
    2a4a:	b.n	2a00 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2a4c:	bl	2b70 <serialEvent4()>
    2a50:	b.n	29fa <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    2a52:	bl	3394 <serialEvent3()>
    2a56:	b.n	29f4 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    2a58:	bl	2b6c <serialEvent2()>
    2a5c:	b.n	29ee <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    2a5e:	bl	3390 <serialEvent1()>
    2a62:	b.n	29e6 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    2a64:	bl	2ab8 <serialEvent()>
    2a68:	b.n	29de <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2a6a:	cmp	r1, #0
    2a6c:	bne.n	29d0 <yield+0x8>
    2a6e:	cpsie	i
    2a70:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2a72:	ldr	r3, [pc, #20]	; (2a88 <yield+0xc0>)
    2a74:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2a76:	cmp	r1, #0
    2a78:	bne.n	2a34 <yield+0x6c>
    2a7a:	b.n	2a32 <yield+0x6a>
    2a7c:	.word	0x1fff1959
    2a80:	.word	0x1fff1c6c
    2a84:	.word	0x1fff1c70
    2a88:	.word	0x1fff1c68

00002a8c <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    2a8c:	bx	lr
    2a8e:	nop

00002a90 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2a90:	b.w	f10 <usb_serial_flush_input>

00002a94 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2a94:	b.w	ec4 <usb_serial_peekchar>

00002a98 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2a98:	b.w	e7c <usb_serial_getchar>

00002a9c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2a9c:	b.w	ef4 <usb_serial_available>

00002aa0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2aa0:	b.w	10b0 <usb_serial_flush_output>

00002aa4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2aa4:	b.w	1068 <usb_serial_write_buffer_free>

00002aa8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2aa8:	mov	r0, r1
    2aaa:	mov	r1, r2
    2aac:	b.w	f48 <usb_serial_write>

00002ab0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2ab0:	mov	r0, r1
    2ab2:	b.w	1050 <usb_serial_putchar>
    2ab6:	nop

00002ab8 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2ab8:	bx	lr
    2aba:	nop

00002abc <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2abc:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    2abe:	ldr	r2, [pc, #24]	; (2ad8 <Print::println()+0x1c>)
	return write(buf, 2);
    2ac0:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2ac2:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    2ac4:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2ac6:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2ac8:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2aca:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    2ace:	movs	r2, #2
    2ad0:	blx	r3
}
    2ad2:	add	sp, #12
    2ad4:	ldr.w	pc, [sp], #4
    2ad8:	.word	0x000041b0

00002adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2adc:	push	{r4, r5, r6, r7, lr}
    2ade:	mov	r7, r0
    2ae0:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2ae2:	cmp	r2, #0
    2ae4:	beq.n	2b4e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2ae6:	cmp	r2, #1
    2ae8:	it	eq
    2aea:	moveq	r2, #10
	}


	if (n == 0) {
    2aec:	cbz	r1, 2b44 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2aee:	movs	r4, #33	; 0x21
    2af0:	b.n	2af4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2af2:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2af4:	udiv	r5, r1, r2
    2af8:	mls	r1, r2, r5, r1
    2afc:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2afe:	cmp	r1, #9
    2b00:	add.w	r1, r0, #48	; 0x30
    2b04:	it	ls
    2b06:	uxtbls	r0, r1
    2b08:	add	r1, sp, #40	; 0x28
    2b0a:	it	hi
    2b0c:	addhi	r0, #55	; 0x37
    2b0e:	add	r1, r4
    2b10:	it	hi
    2b12:	uxtbhi	r0, r0
    2b14:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    2b18:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    2b1a:	mov	r1, r5
    2b1c:	cmp	r5, #0
    2b1e:	bne.n	2af2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2b20:	cbz	r3, 2b30 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2b22:	subs	r4, #1
    2b24:	uxtb	r4, r4
		buf[i] = '-';
    2b26:	add	r3, sp, #40	; 0x28
    2b28:	add	r3, r4
    2b2a:	movs	r2, #45	; 0x2d
    2b2c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2b30:	ldr	r3, [r7, #0]
    2b32:	add	r2, sp, #4
    2b34:	adds	r1, r2, r4
    2b36:	ldr	r3, [r3, #4]
    2b38:	mov	r0, r7
    2b3a:	rsb	r2, r4, #34	; 0x22
    2b3e:	blx	r3
}
    2b40:	add	sp, #44	; 0x2c
    2b42:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2b44:	movs	r2, #48	; 0x30
    2b46:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2b4a:	movs	r4, #33	; 0x21
    2b4c:	b.n	2b20 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2b4e:	ldr	r3, [r0, #0]
    2b50:	uxtb	r1, r1
    2b52:	ldr	r3, [r3, #0]
    2b54:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2b56:	add	sp, #44	; 0x2c
    2b58:	pop	{r4, r5, r6, r7, pc}
    2b5a:	nop

00002b5c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    2b5c:	cmp	r1, #0
		sign = '-';
		n = -n;
    2b5e:	itte	lt
    2b60:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    2b62:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    2b64:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    2b66:	movs	r2, #10
    2b68:	b.w	2adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00002b6c <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    2b6c:	bx	lr
    2b6e:	nop

00002b70 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    2b70:	bx	lr
    2b72:	nop

00002b74 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2b74:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2b76:	bl	490 <setup>
	while (1) {
		loop();
    2b7a:	bl	498 <loop>
		yield();
    2b7e:	bl	29c8 <yield>
    2b82:	b.n	2b7a <main+0x6>

00002b84 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    2b84:	bx	lr
    2b86:	nop

00002b88 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2b88:	ldr	r2, [pc, #20]	; (2ba0 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    2b8a:	ldr	r3, [pc, #24]	; (2ba4 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2b8c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2b8e:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2b90:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2b92:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2b94:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    2b96:	it	cc
    2b98:	addcc	r0, #64	; 0x40
    2b9a:	subs	r0, r0, r3
}
    2b9c:	bx	lr
    2b9e:	nop
    2ba0:	.word	0x1fff1960
    2ba4:	.word	0x1fff1961

00002ba8 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    2ba8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    2baa:	ldr	r3, [pc, #172]	; (2c58 <uart4_status_isr+0xb0>)
    2bac:	ldrb	r2, [r3, #4]
    2bae:	lsls	r4, r2, #26
    2bb0:	bpl.n	2bf2 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2bb2:	ldr	r0, [pc, #168]	; (2c5c <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2bb4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2bb6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2bb8:	ldr	r1, [pc, #164]	; (2c60 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2bba:	adds	r3, #1
    2bbc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2bbe:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2bc0:	it	gt
    2bc2:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2bc4:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2bc6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2bc8:	beq.n	2bd2 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    2bca:	ldr	r4, [pc, #152]	; (2c64 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    2bcc:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2bce:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2bd0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2bd2:	ldr	r2, [pc, #148]	; (2c68 <uart4_status_isr+0xc0>)
    2bd4:	ldr	r1, [r2, #0]
    2bd6:	cbz	r1, 2bf2 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2bd8:	ldr	r2, [pc, #144]	; (2c6c <uart4_status_isr+0xc4>)
    2bda:	ldrb	r2, [r2, #0]
    2bdc:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2bde:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2be0:	itet	cc
    2be2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2be6:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2be8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2bea:	cmp	r3, #39	; 0x27
    2bec:	itt	gt
    2bee:	movgt	r3, #1
    2bf0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    2bf2:	ldr	r2, [pc, #100]	; (2c58 <uart4_status_isr+0xb0>)
    2bf4:	ldrb	r3, [r2, #3]
    2bf6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2bf8:	lsls	r0, r3, #24
    2bfa:	bmi.n	2c20 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2bfc:	lsls	r2, r3, #25
    2bfe:	bpl.n	2c1c <uart4_status_isr+0x74>
    2c00:	ldr	r3, [pc, #84]	; (2c58 <uart4_status_isr+0xb0>)
    2c02:	ldrb	r3, [r3, #4]
    2c04:	lsls	r3, r3, #25
    2c06:	bpl.n	2c1c <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2c08:	ldr	r3, [pc, #100]	; (2c70 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2c0a:	ldr	r1, [pc, #104]	; (2c74 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2c0c:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2c0e:	movs	r2, #0
    2c10:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2c12:	cbz	r3, 2c16 <uart4_status_isr+0x6e>
    2c14:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    2c16:	ldr	r3, [pc, #64]	; (2c58 <uart4_status_isr+0xb0>)
    2c18:	movs	r2, #44	; 0x2c
    2c1a:	strb	r2, [r3, #3]
	}
}
    2c1c:	pop	{r4, r5}
    2c1e:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2c20:	ldrb	r1, [r2, #4]
    2c22:	lsls	r1, r1, #24
    2c24:	bpl.n	2bfc <uart4_status_isr+0x54>
		head = tx_buffer_head;
    2c26:	ldr	r1, [pc, #80]	; (2c78 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2c28:	ldr	r0, [pc, #64]	; (2c6c <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2c2a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2c2c:	ldrb	r1, [r0, #0]
    2c2e:	uxtb	r1, r1
		if (head == tail) {
    2c30:	cmp	r4, r1
    2c32:	beq.n	2c50 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2c34:	adds	r2, r1, #1
    2c36:	cmp	r2, #39	; 0x27
    2c38:	itt	hi
    2c3a:	movhi	r1, #0
    2c3c:	movhi	r2, r1
			n = tx_buffer[tail];
    2c3e:	ldr	r5, [pc, #60]	; (2c7c <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2c40:	ldr	r4, [pc, #20]	; (2c58 <uart4_status_isr+0xb0>)
    2c42:	it	ls
    2c44:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2c46:	ldrb	r2, [r5, r2]
    2c48:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2c4a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2c4c:	strb	r1, [r0, #0]
    2c4e:	b.n	2bfc <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    2c50:	movs	r1, #108	; 0x6c
    2c52:	strb	r1, [r2, #3]
    2c54:	b.n	2bfc <uart4_status_isr+0x54>
    2c56:	nop
    2c58:	.word	0x400ea000
    2c5c:	.word	0x1fff1960
    2c60:	.word	0x1fff1961
    2c64:	.word	0x1fff198c
    2c68:	.word	0x1fff195c
    2c6c:	.word	0x1fff19cd
    2c70:	.word	0x1fff19d0
    2c74:	.word	0x1fff19cc
    2c78:	.word	0x1fff19d4
    2c7c:	.word	0x1fff1964

00002c80 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c80:	ldr	r2, [pc, #20]	; (2c98 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    2c82:	ldr	r3, [pc, #24]	; (2c9c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c84:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2c86:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c88:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2c8a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2c8c:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    2c8e:	it	cc
    2c90:	addcc	r0, #64	; 0x40
    2c92:	subs	r0, r0, r3
}
    2c94:	bx	lr
    2c96:	nop
    2c98:	.word	0x1fff1a48
    2c9c:	.word	0x1fff19dd

00002ca0 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    2ca0:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2ca2:	ldr	r3, [pc, #224]	; (2d84 <uart1_status_isr+0xe4>)
    2ca4:	ldrb	r2, [r3, #4]
    2ca6:	tst.w	r2, #48	; 0x30
    2caa:	beq.n	2d06 <uart1_status_isr+0x66>
		__disable_irq();
    2cac:	cpsid	i
		avail = UART1_RCFIFO;
    2cae:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2cb0:	and.w	r2, r1, #255	; 0xff
    2cb4:	cmp	r1, #0
    2cb6:	beq.n	2d34 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2cb8:	cpsie	i
			head = rx_buffer_head;
    2cba:	ldr	r7, [pc, #204]	; (2d88 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2cbc:	ldr	r1, [pc, #204]	; (2d8c <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2cbe:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2cc0:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2cc2:	ldr	r6, [pc, #204]	; (2d90 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2cc4:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2cc6:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2cc8:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    2cca:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2ccc:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2cce:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2cd0:	it	cs
    2cd2:	movcs	r3, #0
				if (newhead != tail) {
    2cd4:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2cd6:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2cda:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2cdc:	itt	ne
    2cde:	strbne	r1, [r6, r3]
    2ce0:	movne	r0, r3
				}
			} while (--avail > 0);
    2ce2:	ands.w	r2, r2, #255	; 0xff
    2ce6:	bne.n	2cca <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2ce8:	ldr	r3, [pc, #168]	; (2d94 <uart1_status_isr+0xf4>)
    2cea:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2cec:	uxtb	r2, r0
    2cee:	strb	r2, [r7, #0]
			if (rts_pin) {
    2cf0:	cbz	r3, 2d06 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2cf2:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2cf4:	itet	cc
    2cf6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2cfa:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2cfc:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2cfe:	cmp	r0, #39	; 0x27
    2d00:	itt	gt
    2d02:	movgt	r2, #1
    2d04:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    2d06:	ldr	r1, [pc, #124]	; (2d84 <uart1_status_isr+0xe4>)
    2d08:	ldrb	r2, [r1, #3]
    2d0a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2d0c:	lsls	r5, r2, #24
    2d0e:	bmi.n	2d3e <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    2d10:	lsls	r2, r2, #25
    2d12:	bpl.n	2d30 <uart1_status_isr+0x90>
    2d14:	ldr	r3, [pc, #108]	; (2d84 <uart1_status_isr+0xe4>)
    2d16:	ldrb	r3, [r3, #4]
    2d18:	lsls	r3, r3, #25
    2d1a:	bpl.n	2d30 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2d1c:	ldr	r3, [pc, #120]	; (2d98 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2d1e:	ldr	r1, [pc, #124]	; (2d9c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2d20:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2d22:	movs	r2, #0
    2d24:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2d26:	cbz	r3, 2d2a <uart1_status_isr+0x8a>
    2d28:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    2d2a:	ldr	r3, [pc, #88]	; (2d84 <uart1_status_isr+0xe4>)
    2d2c:	movs	r2, #60	; 0x3c
    2d2e:	strb	r2, [r3, #3]
	}
}
    2d30:	pop	{r4, r5, r6, r7}
    2d32:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2d34:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    2d36:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2d38:	strb	r2, [r3, #17]
			__enable_irq();
    2d3a:	cpsie	i
    2d3c:	b.n	2d06 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2d3e:	ldrb	r3, [r1, #4]
    2d40:	lsls	r4, r3, #24
    2d42:	bpl.n	2d10 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    2d44:	ldr	r3, [pc, #88]	; (2da0 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    2d46:	ldr	r6, [pc, #92]	; (2da4 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2d48:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2d4a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2d4c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2d4e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2d50:	cmp	r4, r3
    2d52:	beq.n	2d72 <uart1_status_isr+0xd2>
    2d54:	ldr	r5, [pc, #80]	; (2da8 <uart1_status_isr+0x108>)
    2d56:	b.n	2d5c <uart1_status_isr+0xbc>
    2d58:	cmp	r3, r4
    2d5a:	beq.n	2d72 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2d5c:	adds	r3, #1
    2d5e:	cmp	r3, #40	; 0x28
    2d60:	it	cs
    2d62:	movcs	r3, #0
			avail = UART1_S1;
    2d64:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2d66:	ldrb	r0, [r5, r3]
    2d68:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    2d6a:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    2d6c:	ldrb	r0, [r1, #20]
    2d6e:	cmp	r0, #7
    2d70:	bls.n	2d58 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    2d72:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2d74:	ldr	r1, [pc, #12]	; (2d84 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    2d76:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2d78:	ldrb	r3, [r1, #4]
    2d7a:	lsls	r0, r3, #24
    2d7c:	itt	mi
    2d7e:	movmi	r3, #124	; 0x7c
    2d80:	strbmi	r3, [r1, #3]
    2d82:	b.n	2d10 <uart1_status_isr+0x70>
    2d84:	.word	0x4006b000
    2d88:	.word	0x1fff1a48
    2d8c:	.word	0x1fff19dd
    2d90:	.word	0x1fff1a08
    2d94:	.word	0x1fff19d8
    2d98:	.word	0x1fff1a4c
    2d9c:	.word	0x1fff19dc
    2da0:	.word	0x1fff1a50
    2da4:	.word	0x1fff1a49
    2da8:	.word	0x1fff19e0

00002dac <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2dac:	ldr	r2, [pc, #20]	; (2dc4 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    2dae:	ldr	r3, [pc, #24]	; (2dc8 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2db0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2db2:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2db4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2db6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2db8:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    2dba:	it	cc
    2dbc:	addcc	r0, #64	; 0x40
    2dbe:	subs	r0, r0, r3
}
    2dc0:	bx	lr
    2dc2:	nop
    2dc4:	.word	0x1fff1a58
    2dc8:	.word	0x1fff1a59

00002dcc <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    2dcc:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    2dce:	ldr	r3, [pc, #172]	; (2e7c <uart3_status_isr+0xb0>)
    2dd0:	ldrb	r2, [r3, #4]
    2dd2:	lsls	r4, r2, #26
    2dd4:	bpl.n	2e16 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2dd6:	ldr	r0, [pc, #168]	; (2e80 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2dd8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2dda:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2ddc:	ldr	r1, [pc, #164]	; (2e84 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2dde:	adds	r3, #1
    2de0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2de2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2de4:	it	gt
    2de6:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2de8:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2dea:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2dec:	beq.n	2df6 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    2dee:	ldr	r4, [pc, #152]	; (2e88 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    2df0:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2df2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2df4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2df6:	ldr	r2, [pc, #148]	; (2e8c <uart3_status_isr+0xc0>)
    2df8:	ldr	r1, [r2, #0]
    2dfa:	cbz	r1, 2e16 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2dfc:	ldr	r2, [pc, #144]	; (2e90 <uart3_status_isr+0xc4>)
    2dfe:	ldrb	r2, [r2, #0]
    2e00:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2e02:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2e04:	itet	cc
    2e06:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2e0a:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2e0c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2e0e:	cmp	r3, #39	; 0x27
    2e10:	itt	gt
    2e12:	movgt	r3, #1
    2e14:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    2e16:	ldr	r2, [pc, #100]	; (2e7c <uart3_status_isr+0xb0>)
    2e18:	ldrb	r3, [r2, #3]
    2e1a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2e1c:	lsls	r0, r3, #24
    2e1e:	bmi.n	2e44 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    2e20:	lsls	r2, r3, #25
    2e22:	bpl.n	2e40 <uart3_status_isr+0x74>
    2e24:	ldr	r3, [pc, #84]	; (2e7c <uart3_status_isr+0xb0>)
    2e26:	ldrb	r3, [r3, #4]
    2e28:	lsls	r3, r3, #25
    2e2a:	bpl.n	2e40 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2e2c:	ldr	r3, [pc, #100]	; (2e94 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2e2e:	ldr	r1, [pc, #104]	; (2e98 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2e30:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2e32:	movs	r2, #0
    2e34:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2e36:	cbz	r3, 2e3a <uart3_status_isr+0x6e>
    2e38:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    2e3a:	ldr	r3, [pc, #64]	; (2e7c <uart3_status_isr+0xb0>)
    2e3c:	movs	r2, #44	; 0x2c
    2e3e:	strb	r2, [r3, #3]
	}
}
    2e40:	pop	{r4, r5}
    2e42:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2e44:	ldrb	r1, [r2, #4]
    2e46:	lsls	r1, r1, #24
    2e48:	bpl.n	2e20 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    2e4a:	ldr	r1, [pc, #80]	; (2e9c <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2e4c:	ldr	r0, [pc, #64]	; (2e90 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2e4e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2e50:	ldrb	r1, [r0, #0]
    2e52:	uxtb	r1, r1
		if (head == tail) {
    2e54:	cmp	r4, r1
    2e56:	beq.n	2e74 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    2e58:	adds	r2, r1, #1
    2e5a:	cmp	r2, #39	; 0x27
    2e5c:	itt	hi
    2e5e:	movhi	r1, #0
    2e60:	movhi	r2, r1
			n = tx_buffer[tail];
    2e62:	ldr	r5, [pc, #60]	; (2ea0 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2e64:	ldr	r4, [pc, #20]	; (2e7c <uart3_status_isr+0xb0>)
    2e66:	it	ls
    2e68:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2e6a:	ldrb	r2, [r5, r2]
    2e6c:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2e6e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2e70:	strb	r1, [r0, #0]
    2e72:	b.n	2e20 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    2e74:	movs	r1, #108	; 0x6c
    2e76:	strb	r1, [r2, #3]
    2e78:	b.n	2e20 <uart3_status_isr+0x54>
    2e7a:	nop
    2e7c:	.word	0x4006d000
    2e80:	.word	0x1fff1a58
    2e84:	.word	0x1fff1a59
    2e88:	.word	0x1fff1a84
    2e8c:	.word	0x1fff1a54
    2e90:	.word	0x1fff1ac5
    2e94:	.word	0x1fff1ac8
    2e98:	.word	0x1fff1ac4
    2e9c:	.word	0x1fff1acc
    2ea0:	.word	0x1fff1a5c

00002ea4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    2ea4:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2ea6:	ldr	r4, [pc, #64]	; (2ee8 <fault_isr+0x44>)
    2ea8:	b.n	2ebc <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2eaa:	ldr	r3, [r4, #0]
    2eac:	lsls	r1, r3, #21
    2eae:	bmi.n	2ecc <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2eb0:	ldr	r3, [r4, #0]
    2eb2:	lsls	r2, r3, #20
    2eb4:	bmi.n	2ed6 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2eb6:	ldr	r3, [r4, #0]
    2eb8:	lsls	r3, r3, #19
    2eba:	bmi.n	2ee0 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2ebc:	ldr	r3, [r4, #0]
    2ebe:	lsls	r0, r3, #13
    2ec0:	bpl.n	2eaa <fault_isr+0x6>
    2ec2:	bl	1f48 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2ec6:	ldr	r3, [r4, #0]
    2ec8:	lsls	r1, r3, #21
    2eca:	bpl.n	2eb0 <fault_isr+0xc>
    2ecc:	bl	2fb8 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2ed0:	ldr	r3, [r4, #0]
    2ed2:	lsls	r2, r3, #20
    2ed4:	bpl.n	2eb6 <fault_isr+0x12>
    2ed6:	bl	2ca0 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2eda:	ldr	r3, [r4, #0]
    2edc:	lsls	r3, r3, #19
    2ede:	bpl.n	2ebc <fault_isr+0x18>
    2ee0:	bl	32b8 <uart2_status_isr>
    2ee4:	b.n	2ebc <fault_isr+0x18>
    2ee6:	nop
    2ee8:	.word	0x40048034

00002eec <unused_isr>:
	}
}

void unused_isr(void)
{
    2eec:	push	{r3, lr}
	fault_isr();
    2eee:	bl	2ea4 <fault_isr>
    2ef2:	nop

00002ef4 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    2ef4:	ldr	r3, [pc, #4]	; (2efc <startup_early_hook+0x8>)
    2ef6:	movs	r2, #16
    2ef8:	strh	r2, [r3, #0]
    2efa:	bx	lr
    2efc:	.word	0x40052000

00002f00 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    2f00:	bx	lr
    2f02:	nop

00002f04 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    2f04:	ldr	r1, [pc, #36]	; (2f2c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    2f06:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    2f08:	ldr	r3, [r1, #0]
	if (incr != 0) {
    2f0a:	cbz	r0, 2f1a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    2f0c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    2f0e:	add	r0, r3
    2f10:	sub.w	r2, r2, #8192	; 0x2000
    2f14:	cmp	r0, r2
    2f16:	bcs.n	2f1e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    2f18:	str	r0, [r1, #0]
	}
	return prev;
    2f1a:	mov	r0, r3
}
    2f1c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    2f1e:	bl	358c <__errno>
    2f22:	movs	r3, #12
    2f24:	str	r3, [r0, #0]
			return (void *)-1;
    2f26:	mov.w	r0, #4294967295
    2f2a:	pop	{r3, pc}
    2f2c:	.word	0x1fff0c6c

00002f30 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    2f30:	ldr	r2, [pc, #32]	; (2f54 <kinetis_hsrun_disable+0x24>)
    2f32:	ldrb	r3, [r2, #0]
    2f34:	cmp	r3, #128	; 0x80
    2f36:	beq.n	2f3c <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    2f38:	movs	r0, #0
}
    2f3a:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2f3c:	ldr	r1, [pc, #24]	; (2f58 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2f3e:	ldr	r3, [pc, #28]	; (2f5c <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2f40:	ldr	r0, [pc, #28]	; (2f60 <kinetis_hsrun_disable+0x30>)
    2f42:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2f44:	movs	r1, #0
    2f46:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    2f48:	ldrb	r3, [r2, #0]
    2f4a:	cmp	r3, #128	; 0x80
    2f4c:	beq.n	2f48 <kinetis_hsrun_disable+0x18>
		return 1;
    2f4e:	movs	r0, #1
    2f50:	bx	lr
    2f52:	nop
    2f54:	.word	0x4007e003
    2f58:	.word	0x40048044
    2f5c:	.word	0x4007e001
    2f60:	.word	0x22280000

00002f64 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    2f64:	ldr	r2, [pc, #36]	; (2f8c <kinetis_hsrun_enable+0x28>)
    2f66:	ldrb	r3, [r2, #0]
    2f68:	cmp	r3, #1
    2f6a:	beq.n	2f70 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    2f6c:	movs	r0, #0
}
    2f6e:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    2f70:	add.w	r3, r3, #1073741824	; 0x40000000
    2f74:	add.w	r3, r3, #516096	; 0x7e000
    2f78:	movs	r1, #96	; 0x60
    2f7a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    2f7c:	ldrb	r3, [r2, #0]
    2f7e:	cmp	r3, #128	; 0x80
    2f80:	bne.n	2f7c <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    2f82:	ldr	r3, [pc, #12]	; (2f90 <kinetis_hsrun_enable+0x2c>)
    2f84:	ldr	r2, [pc, #12]	; (2f94 <kinetis_hsrun_enable+0x30>)
    2f86:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    2f88:	movs	r0, #1
    2f8a:	bx	lr
    2f8c:	.word	0x4007e003
    2f90:	.word	0x40048044
    2f94:	.word	0x02060000

00002f98 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f98:	ldr	r2, [pc, #20]	; (2fb0 <serial_available+0x18>)
	tail = rx_buffer_tail;
    2f9a:	ldr	r3, [pc, #24]	; (2fb4 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f9c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2f9e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2fa0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2fa2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2fa4:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    2fa6:	it	cc
    2fa8:	addcc	r0, #64	; 0x40
    2faa:	subs	r0, r0, r3
}
    2fac:	bx	lr
    2fae:	nop
    2fb0:	.word	0x1fff1ad4
    2fb4:	.word	0x1fff1ad5

00002fb8 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    2fb8:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2fba:	ldr	r3, [pc, #224]	; (309c <uart0_status_isr+0xe4>)
    2fbc:	ldrb	r2, [r3, #4]
    2fbe:	tst.w	r2, #48	; 0x30
    2fc2:	beq.n	301e <uart0_status_isr+0x66>
		__disable_irq();
    2fc4:	cpsid	i
		avail = UART0_RCFIFO;
    2fc6:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2fc8:	and.w	r2, r1, #255	; 0xff
    2fcc:	cmp	r1, #0
    2fce:	beq.n	304c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2fd0:	cpsie	i
			head = rx_buffer_head;
    2fd2:	ldr	r7, [pc, #204]	; (30a0 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2fd4:	ldr	r1, [pc, #204]	; (30a4 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2fd6:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2fd8:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2fda:	ldr	r6, [pc, #204]	; (30a8 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2fdc:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2fde:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2fe0:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    2fe2:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    2fe4:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2fe6:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    2fe8:	it	cs
    2fea:	movcs	r3, #0
				if (newhead != tail) {
    2fec:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2fee:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2ff2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2ff4:	itt	ne
    2ff6:	strbne	r1, [r6, r3]
    2ff8:	movne	r0, r3
				}
			} while (--avail > 0);
    2ffa:	ands.w	r2, r2, #255	; 0xff
    2ffe:	bne.n	2fe2 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3000:	ldr	r3, [pc, #168]	; (30ac <uart0_status_isr+0xf4>)
    3002:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3004:	uxtb	r2, r0
    3006:	strb	r2, [r7, #0]
			if (rts_pin) {
    3008:	cbz	r3, 301e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    300a:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    300c:	itet	cc
    300e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3012:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3014:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3016:	cmp	r0, #39	; 0x27
    3018:	itt	gt
    301a:	movgt	r2, #1
    301c:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    301e:	ldr	r1, [pc, #124]	; (309c <uart0_status_isr+0xe4>)
    3020:	ldrb	r2, [r1, #3]
    3022:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3024:	lsls	r5, r2, #24
    3026:	bmi.n	3056 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3028:	lsls	r2, r2, #25
    302a:	bpl.n	3048 <uart0_status_isr+0x90>
    302c:	ldr	r3, [pc, #108]	; (309c <uart0_status_isr+0xe4>)
    302e:	ldrb	r3, [r3, #4]
    3030:	lsls	r3, r3, #25
    3032:	bpl.n	3048 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3034:	ldr	r3, [pc, #120]	; (30b0 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3036:	ldr	r1, [pc, #124]	; (30b4 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3038:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    303a:	movs	r2, #0
    303c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    303e:	cbz	r3, 3042 <uart0_status_isr+0x8a>
    3040:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3042:	ldr	r3, [pc, #88]	; (309c <uart0_status_isr+0xe4>)
    3044:	movs	r2, #60	; 0x3c
    3046:	strb	r2, [r3, #3]
	}
}
    3048:	pop	{r4, r5, r6, r7}
    304a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    304c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    304e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3050:	strb	r2, [r3, #17]
			__enable_irq();
    3052:	cpsie	i
    3054:	b.n	301e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3056:	ldrb	r3, [r1, #4]
    3058:	lsls	r4, r3, #24
    305a:	bpl.n	3028 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    305c:	ldr	r3, [pc, #88]	; (30b8 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    305e:	ldr	r6, [pc, #92]	; (30bc <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3060:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3062:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3064:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3066:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3068:	cmp	r4, r3
    306a:	beq.n	308a <uart0_status_isr+0xd2>
    306c:	ldr	r5, [pc, #80]	; (30c0 <uart0_status_isr+0x108>)
    306e:	b.n	3074 <uart0_status_isr+0xbc>
    3070:	cmp	r3, r4
    3072:	beq.n	308a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3074:	adds	r3, #1
    3076:	cmp	r3, #64	; 0x40
    3078:	it	cs
    307a:	movcs	r3, #0
			avail = UART0_S1;
    307c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    307e:	ldrb	r0, [r5, r3]
    3080:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3082:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3084:	ldrb	r0, [r1, #20]
    3086:	cmp	r0, #7
    3088:	bls.n	3070 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    308a:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    308c:	ldr	r1, [pc, #12]	; (309c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    308e:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3090:	ldrb	r3, [r1, #4]
    3092:	lsls	r0, r3, #24
    3094:	itt	mi
    3096:	movmi	r3, #124	; 0x7c
    3098:	strbmi	r3, [r1, #3]
    309a:	b.n	3028 <uart0_status_isr+0x70>
    309c:	.word	0x4006a000
    30a0:	.word	0x1fff1ad4
    30a4:	.word	0x1fff1ad5
    30a8:	.word	0x1fff1b18
    30ac:	.word	0x1fff1ad0
    30b0:	.word	0x1fff1b5c
    30b4:	.word	0x1fff1b58
    30b8:	.word	0x1fff1b60
    30bc:	.word	0x1fff1b59
    30c0:	.word	0x1fff1ad8

000030c4 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    30c4:	ldr	r2, [pc, #20]	; (30dc <serial6_available+0x18>)
	tail = rx_buffer_tail;
    30c6:	ldr	r3, [pc, #24]	; (30e0 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    30c8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    30ca:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    30cc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    30ce:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    30d0:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    30d2:	it	cc
    30d4:	addcc	r0, #64	; 0x40
    30d6:	subs	r0, r0, r3
}
    30d8:	bx	lr
    30da:	nop
    30dc:	.word	0x1fff1b68
    30e0:	.word	0x1fff1b69

000030e4 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    30e4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    30e6:	ldr	r3, [pc, #176]	; (3198 <lpuart0_status_isr+0xb4>)
    30e8:	ldr	r2, [r3, #4]
    30ea:	lsls	r4, r2, #10
    30ec:	bpl.n	312e <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    30ee:	ldr	r0, [pc, #172]	; (319c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    30f0:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    30f2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    30f4:	ldr	r1, [pc, #168]	; (31a0 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    30f6:	adds	r3, #1
    30f8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    30fa:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    30fc:	it	gt
    30fe:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3100:	cmp	r3, r1
    3102:	beq.n	310e <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3104:	ldr	r4, [pc, #156]	; (31a4 <lpuart0_status_isr+0xc0>)
    3106:	uxtb	r2, r2
			rx_buffer_head = head;
    3108:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    310a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    310c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    310e:	ldr	r2, [pc, #152]	; (31a8 <lpuart0_status_isr+0xc4>)
    3110:	ldr	r1, [r2, #0]
    3112:	cbz	r1, 312e <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3114:	ldr	r2, [pc, #148]	; (31ac <lpuart0_status_isr+0xc8>)
    3116:	ldrb	r2, [r2, #0]
    3118:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    311a:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    311c:	itet	cc
    311e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3122:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3124:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3126:	cmp	r3, #39	; 0x27
    3128:	itt	gt
    312a:	movgt	r3, #1
    312c:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    312e:	ldr	r2, [pc, #104]	; (3198 <lpuart0_status_isr+0xb4>)
    3130:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3132:	lsls	r0, r3, #8
    3134:	bpl.n	313c <lpuart0_status_isr+0x58>
    3136:	ldr	r2, [r2, #4]
    3138:	lsls	r1, r2, #8
    313a:	bmi.n	3160 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    313c:	lsls	r2, r3, #9
    313e:	bpl.n	315c <lpuart0_status_isr+0x78>
    3140:	ldr	r3, [pc, #84]	; (3198 <lpuart0_status_isr+0xb4>)
    3142:	ldr	r3, [r3, #4]
    3144:	lsls	r3, r3, #9
    3146:	bpl.n	315c <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3148:	ldr	r3, [pc, #100]	; (31b0 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    314a:	ldr	r1, [pc, #104]	; (31b4 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    314c:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    314e:	movs	r2, #0
    3150:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3152:	cbz	r3, 3156 <lpuart0_status_isr+0x72>
    3154:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3156:	ldr	r3, [pc, #96]	; (31b8 <lpuart0_status_isr+0xd4>)
    3158:	movs	r2, #0
    315a:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    315c:	pop	{r4, r5}
    315e:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3160:	ldr	r2, [pc, #88]	; (31bc <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3162:	ldr	r1, [pc, #72]	; (31ac <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3164:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3166:	ldrb	r2, [r1, #0]
    3168:	uxtb	r2, r2
		if (head == tail) {
    316a:	cmp	r0, r2
    316c:	beq.n	318a <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    316e:	adds	r2, #1
    3170:	cmp	r2, #39	; 0x27
    3172:	itt	hi
    3174:	movhi	r0, #0
    3176:	movhi	r2, r0
			n = tx_buffer[tail];
    3178:	ldr	r5, [pc, #68]	; (31c0 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    317a:	ldr	r4, [pc, #28]	; (3198 <lpuart0_status_isr+0xb4>)
    317c:	it	ls
    317e:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3180:	ldrb	r2, [r5, r2]
    3182:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3184:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3186:	strb	r0, [r1, #0]
    3188:	b.n	313c <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    318a:	ldr	r0, [pc, #56]	; (31c4 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    318c:	ldr	r2, [pc, #40]	; (31b8 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    318e:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3190:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3192:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3194:	str	r1, [r2, #0]
    3196:	b.n	313c <lpuart0_status_isr+0x58>
    3198:	.word	0x400c4000
    319c:	.word	0x1fff1b68
    31a0:	.word	0x1fff1b69
    31a4:	.word	0x1fff1b94
    31a8:	.word	0x1fff1b64
    31ac:	.word	0x1fff1bd5
    31b0:	.word	0x1fff1bd8
    31b4:	.word	0x1fff1bd4
    31b8:	.word	0x43880158
    31bc:	.word	0x1fff1bdc
    31c0:	.word	0x1fff1b6c
    31c4:	.word	0x4388015c

000031c8 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    31c8:	push	{r4, lr}
    31ca:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    31cc:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    31ce:	bl	2f30 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    31d2:	ldr	r2, [pc, #96]	; (3234 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    31d4:	ldr	r3, [pc, #96]	; (3238 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    31d6:	ldr	r1, [pc, #100]	; (323c <usb_init_serialnumber+0x74>)
    31d8:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    31da:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    31dc:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    31de:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    31e0:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    31e2:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    31e4:	ldrb	r3, [r2, #0]
    31e6:	lsls	r3, r3, #24
    31e8:	bpl.n	31e4 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    31ea:	ldr	r3, [pc, #84]	; (3240 <usb_init_serialnumber+0x78>)
    31ec:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    31ee:	bl	2f64 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    31f2:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    31f4:	ldr	r3, [pc, #76]	; (3244 <usb_init_serialnumber+0x7c>)
    31f6:	cmp	r4, r3
    31f8:	itt	ls
    31fa:	addls.w	r4, r4, r4, lsl #2
    31fe:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3200:	mov	r0, r4
    3202:	ldr	r4, [pc, #68]	; (3248 <usb_init_serialnumber+0x80>)
    3204:	add	r1, sp, #4
    3206:	movs	r2, #10
    3208:	bl	324c <ultoa>
    320c:	add	r1, sp, #4
    320e:	mov	r0, r4
	for (i=0; i<10; i++) {
    3210:	movs	r3, #0
		char c = buf[i];
    3212:	ldrb.w	r2, [r1], #1
    3216:	adds	r3, #1
		if (!c) break;
    3218:	cbz	r2, 322a <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    321a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    321c:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3220:	bne.n	3212 <usb_init_serialnumber+0x4a>
    3222:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3224:	strb	r3, [r4, #0]
}
    3226:	add	sp, #16
    3228:	pop	{r4, pc}
    322a:	lsls	r3, r3, #1
    322c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    322e:	strb	r3, [r4, #0]
}
    3230:	add	sp, #16
    3232:	pop	{r4, pc}
    3234:	.word	0x40020004
    3238:	.word	0x40020000
    323c:	.word	0x41070000
    3240:	.word	0x4002000c
    3244:	.word	0x0098967f
    3248:	.word	0x1fff0d50

0000324c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    324c:	push	{r4, r5, r6, r7}
    324e:	subs	r5, r1, #1
    3250:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3252:	movs	r4, #0
    3254:	b.n	3258 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3256:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3258:	udiv	r3, r0, r2
    325c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3260:	cmp	r0, #9
    3262:	add.w	r7, r0, #48	; 0x30
    3266:	itet	hi
    3268:	addhi	r0, #55	; 0x37
    326a:	uxtbls	r0, r7
    326c:	uxtbhi	r0, r0
    326e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3272:	mov	r0, r3
    3274:	cmp	r3, #0
    3276:	bne.n	3256 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3278:	adds	r2, r1, r4
    327a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    327c:	cbz	r4, 3292 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    327e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3280:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3284:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3286:	adds	r3, #1
    3288:	subs	r0, r4, r3
    328a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    328c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3290:	blt.n	327e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3292:	mov	r0, r1
    3294:	pop	{r4, r5, r6, r7}
    3296:	bx	lr

00003298 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3298:	ldr	r2, [pc, #20]	; (32b0 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    329a:	ldr	r3, [pc, #24]	; (32b4 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    329c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    329e:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    32a0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    32a2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    32a4:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    32a6:	it	cc
    32a8:	addcc	r0, #64	; 0x40
    32aa:	subs	r0, r0, r3
}
    32ac:	bx	lr
    32ae:	nop
    32b0:	.word	0x1fff1be4
    32b4:	.word	0x1fff1be5

000032b8 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    32b8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    32ba:	ldr	r3, [pc, #172]	; (3368 <uart2_status_isr+0xb0>)
    32bc:	ldrb	r2, [r3, #4]
    32be:	lsls	r4, r2, #26
    32c0:	bpl.n	3302 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    32c2:	ldr	r0, [pc, #168]	; (336c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    32c4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    32c6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    32c8:	ldr	r1, [pc, #164]	; (3370 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    32ca:	adds	r3, #1
    32cc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    32ce:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    32d0:	it	gt
    32d2:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    32d4:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    32d6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    32d8:	beq.n	32e2 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    32da:	ldr	r4, [pc, #152]	; (3374 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    32dc:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    32de:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    32e0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    32e2:	ldr	r2, [pc, #148]	; (3378 <uart2_status_isr+0xc0>)
    32e4:	ldr	r1, [r2, #0]
    32e6:	cbz	r1, 3302 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    32e8:	ldr	r2, [pc, #144]	; (337c <uart2_status_isr+0xc4>)
    32ea:	ldrb	r2, [r2, #0]
    32ec:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    32ee:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    32f0:	itet	cc
    32f2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    32f6:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    32f8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    32fa:	cmp	r3, #39	; 0x27
    32fc:	itt	gt
    32fe:	movgt	r3, #1
    3300:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3302:	ldr	r2, [pc, #100]	; (3368 <uart2_status_isr+0xb0>)
    3304:	ldrb	r3, [r2, #3]
    3306:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3308:	lsls	r0, r3, #24
    330a:	bmi.n	3330 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    330c:	lsls	r2, r3, #25
    330e:	bpl.n	332c <uart2_status_isr+0x74>
    3310:	ldr	r3, [pc, #84]	; (3368 <uart2_status_isr+0xb0>)
    3312:	ldrb	r3, [r3, #4]
    3314:	lsls	r3, r3, #25
    3316:	bpl.n	332c <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3318:	ldr	r3, [pc, #100]	; (3380 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    331a:	ldr	r1, [pc, #104]	; (3384 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    331c:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    331e:	movs	r2, #0
    3320:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3322:	cbz	r3, 3326 <uart2_status_isr+0x6e>
    3324:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3326:	ldr	r3, [pc, #64]	; (3368 <uart2_status_isr+0xb0>)
    3328:	movs	r2, #44	; 0x2c
    332a:	strb	r2, [r3, #3]
	}
}
    332c:	pop	{r4, r5}
    332e:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3330:	ldrb	r1, [r2, #4]
    3332:	lsls	r1, r1, #24
    3334:	bpl.n	330c <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3336:	ldr	r1, [pc, #80]	; (3388 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3338:	ldr	r0, [pc, #64]	; (337c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    333a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    333c:	ldrb	r1, [r0, #0]
    333e:	uxtb	r1, r1
		if (head == tail) {
    3340:	cmp	r4, r1
    3342:	beq.n	3360 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3344:	adds	r2, r1, #1
    3346:	cmp	r2, #39	; 0x27
    3348:	itt	hi
    334a:	movhi	r1, #0
    334c:	movhi	r2, r1
			n = tx_buffer[tail];
    334e:	ldr	r5, [pc, #60]	; (338c <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3350:	ldr	r4, [pc, #20]	; (3368 <uart2_status_isr+0xb0>)
    3352:	it	ls
    3354:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3356:	ldrb	r2, [r5, r2]
    3358:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    335a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    335c:	strb	r1, [r0, #0]
    335e:	b.n	330c <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3360:	movs	r1, #108	; 0x6c
    3362:	strb	r1, [r2, #3]
    3364:	b.n	330c <uart2_status_isr+0x54>
    3366:	nop
    3368:	.word	0x4006c000
    336c:	.word	0x1fff1be4
    3370:	.word	0x1fff1be5
    3374:	.word	0x1fff1c10
    3378:	.word	0x1fff1be0
    337c:	.word	0x1fff1c51
    3380:	.word	0x1fff1c54
    3384:	.word	0x1fff1c50
    3388:	.word	0x1fff1c58
    338c:	.word	0x1fff1be8

00003390 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3390:	bx	lr
    3392:	nop

00003394 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3394:	bx	lr
    3396:	nop

00003398 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3398:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    339a:	mrs	r2, PRIMASK
		__disable_irq();
    339e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    33a0:	ldrb	r3, [r0, #29]
    33a2:	cbnz	r3, 33b2 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    33a4:	ldrb	r1, [r0, #28]
    33a6:	cmp	r1, #1
    33a8:	beq.n	33bc <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    33aa:	cmp	r1, #3
    33ac:	beq.n	33d0 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    33ae:	movs	r3, #1
    33b0:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    33b2:	cbnz	r2, 33b6 <EventResponder::triggerEventNotImmediate()+0x1e>
    33b4:	cpsie	i
	}
	enableInterrupts(irq);
}
    33b6:	ldr.w	r4, [sp], #4
    33ba:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    33bc:	ldr	r4, [pc, #68]	; (3404 <EventResponder::triggerEventNotImmediate()+0x6c>)
    33be:	ldr	r1, [r4, #0]
    33c0:	cbz	r1, 33ec <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    33c2:	ldr	r1, [pc, #68]	; (3408 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    33c4:	str	r3, [r0, #20]
				_prev = lastYield;
    33c6:	ldr	r3, [r1, #0]
    33c8:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    33ca:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    33cc:	str	r0, [r3, #20]
    33ce:	b.n	33ae <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    33d0:	ldr	r4, [pc, #56]	; (340c <EventResponder::triggerEventNotImmediate()+0x74>)
    33d2:	ldr	r1, [r4, #0]
    33d4:	cbz	r1, 33f8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    33d6:	ldr	r1, [pc, #56]	; (3410 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    33d8:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    33da:	ldr	r3, [r1, #0]
    33dc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    33de:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    33e0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    33e2:	ldr	r3, [pc, #48]	; (3414 <EventResponder::triggerEventNotImmediate()+0x7c>)
    33e4:	mov.w	r1, #268435456	; 0x10000000
    33e8:	str	r1, [r3, #0]
    33ea:	b.n	33ae <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    33ec:	ldr	r3, [pc, #24]	; (3408 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    33ee:	str	r1, [r0, #20]
				_prev = nullptr;
    33f0:	str	r1, [r0, #24]
				firstYield = this;
    33f2:	str	r0, [r4, #0]
				lastYield = this;
    33f4:	str	r0, [r3, #0]
    33f6:	b.n	33ae <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    33f8:	ldr	r3, [pc, #20]	; (3410 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    33fa:	str	r1, [r0, #20]
				_prev = nullptr;
    33fc:	str	r1, [r0, #24]
				firstInterrupt = this;
    33fe:	str	r0, [r4, #0]
				lastInterrupt = this;
    3400:	str	r0, [r3, #0]
    3402:	b.n	33e2 <EventResponder::triggerEventNotImmediate()+0x4a>
    3404:	.word	0x1fff1c6c
    3408:	.word	0x1fff1c68
    340c:	.word	0x1fff1c5c
    3410:	.word	0x1fff1c60
    3414:	.word	0xe000ed04

00003418 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3418:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    341a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    341c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    341e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3420:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3422:	beq.n	342c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3424:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3428:	b.w	3398 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    342c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    342e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3432:	bx	r3

00003434 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3434:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3436:	mrs	r2, PRIMASK
		__disable_irq();
    343a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    343c:	ldr	r4, [pc, #48]	; (3470 <EventResponder::runFromInterrupt()+0x3c>)
    343e:	ldr	r0, [r4, #0]
		if (first) {
    3440:	cbz	r0, 3464 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3442:	ldr	r6, [pc, #48]	; (3474 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3444:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3446:	ldr	r3, [r0, #20]
    3448:	str	r3, [r4, #0]
			if (firstInterrupt) {
    344a:	cbz	r3, 346a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    344c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    344e:	cbnz	r2, 3452 <EventResponder::runFromInterrupt()+0x1e>
    3450:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3452:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3454:	ldr	r3, [r0, #8]
    3456:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3458:	mrs	r2, PRIMASK
		__disable_irq();
    345c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    345e:	ldr	r0, [r4, #0]
		if (first) {
    3460:	cmp	r0, #0
    3462:	bne.n	3446 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3464:	cbnz	r2, 3468 <EventResponder::runFromInterrupt()+0x34>
    3466:	cpsie	i
    3468:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    346a:	str	r3, [r6, #0]
    346c:	b.n	344e <EventResponder::runFromInterrupt()+0x1a>
    346e:	nop
    3470:	.word	0x1fff1c5c
    3474:	.word	0x1fff1c60

00003478 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3478:	b.w	3434 <EventResponder::runFromInterrupt()>

0000347c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    347c:	ldr	r2, [pc, #96]	; (34e0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    347e:	push	{r4, r5}
	if (listActive == nullptr) {
    3480:	ldr	r4, [r2, #0]
    3482:	cmp	r4, #0
    3484:	beq.n	34d6 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3486:	ldr	r3, [r0, #0]
    3488:	ldr	r1, [r4, #0]
    348a:	cmp	r3, r1
    348c:	bcs.n	34ac <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    348e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3490:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3492:	str	r4, [r0, #8]
		_prev = nullptr;
    3494:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3496:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3498:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    349a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    349c:	movs	r3, #2
    349e:	strb	r3, [r0, #20]
}
    34a0:	pop	{r4, r5}
    34a2:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    34a4:	ldr	r1, [r2, #0]
    34a6:	cmp	r3, r1
    34a8:	mov	r4, r2
    34aa:	bcc.n	34be <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    34ac:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    34ae:	subs	r3, r3, r1
    34b0:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    34b2:	cmp	r2, #0
    34b4:	bne.n	34a4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    34b6:	str	r2, [r0, #8]
		_prev = timer;
    34b8:	str	r4, [r0, #12]
		timer->_next = this;
    34ba:	str	r0, [r4, #8]
    34bc:	b.n	349c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    34be:	ldr	r2, [r2, #12]
    34c0:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    34c2:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    34c4:	str	r0, [r4, #12]
				_prev->_next = this;
    34c6:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    34c8:	subs	r3, r1, r3
				_state = TimerActive;
    34ca:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    34cc:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    34ce:	str	r3, [r4, #0]
				_state = TimerActive;
    34d0:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    34d2:	pop	{r4, r5}
    34d4:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    34d6:	str	r4, [r0, #8]
		_prev = nullptr;
    34d8:	str	r4, [r0, #12]
		listActive = this;
    34da:	str	r0, [r2, #0]
    34dc:	b.n	349c <MillisTimer::addToActiveList()+0x20>
    34de:	nop
    34e0:	.word	0x1fff1c64

000034e4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    34e4:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    34e6:	ldr	r6, [pc, #136]	; (3570 <MillisTimer::runFromTimer()+0x8c>)
    34e8:	ldr	r4, [r6, #0]
	while (timer) {
    34ea:	cbz	r4, 3538 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    34ec:	ldr	r3, [r4, #0]
    34ee:	cmp	r3, #0
    34f0:	bne.n	3568 <MillisTimer::runFromTimer()+0x84>
    34f2:	ldr	r7, [pc, #128]	; (3574 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    34f4:	mov	r5, r3
    34f6:	b.n	3502 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    34f8:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    34fa:	cbz	r4, 3538 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    34fc:	ldr	r3, [r4, #0]
    34fe:	cmp	r3, #0
    3500:	bne.n	3568 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3502:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3504:	cbz	r3, 3508 <MillisTimer::runFromTimer()+0x24>
    3506:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3508:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    350a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    350c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    350e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3510:	ldr	r3, [r3, #0]
    3512:	cmp	r3, r7
    3514:	bne.n	355a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3516:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3518:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    351a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    351c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    351e:	beq.n	3562 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3520:	bl	3398 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3524:	ldr	r3, [r4, #4]
    3526:	cmp	r3, #0
    3528:	beq.n	34f8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    352a:	str	r3, [r4, #0]
				timer->addToActiveList();
    352c:	mov	r0, r4
    352e:	bl	347c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3532:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3534:	cmp	r4, #0
    3536:	bne.n	34fc <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3538:	mrs	r3, PRIMASK
		__disable_irq();
    353c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    353e:	ldr	r2, [pc, #56]	; (3578 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3540:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3542:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3544:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3546:	cbnz	r3, 354a <MillisTimer::runFromTimer()+0x66>
    3548:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    354a:	cbz	r0, 3558 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    354c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    354e:	bl	347c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3552:	mov	r0, r4
    3554:	cmp	r0, #0
    3556:	bne.n	354c <MillisTimer::runFromTimer()+0x68>
    3558:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    355a:	mov	r2, r4
    355c:	movs	r1, #0
    355e:	blx	r3
    3560:	b.n	3524 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3562:	ldr	r3, [r0, #8]
    3564:	blx	r3
    3566:	b.n	3524 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3568:	subs	r3, #1
    356a:	str	r3, [r4, #0]
			break;
    356c:	b.n	3538 <MillisTimer::runFromTimer()+0x54>
    356e:	nop
    3570:	.word	0x1fff1c64
    3574:	.word	0x00003419
    3578:	.word	0x1fff1c74

0000357c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    357c:	ldr	r2, [pc, #8]	; (3588 <systick_isr+0xc>)
    357e:	ldr	r3, [r2, #0]
    3580:	adds	r3, #1
    3582:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3584:	b.w	34e4 <MillisTimer::runFromTimer()>
    3588:	.word	0x1fff17fc

0000358c <__errno>:
    358c:	ldr	r3, [pc, #4]	; (3594 <__errno+0x8>)
    358e:	ldr	r0, [r3, #0]
    3590:	bx	lr
    3592:	nop
    3594:	.word	0x1fff1190

00003598 <__libc_init_array>:
    3598:	push	{r4, r5, r6, lr}
    359a:	ldr	r6, [pc, #60]	; (35d8 <__libc_init_array+0x40>)
    359c:	ldr	r5, [pc, #60]	; (35dc <__libc_init_array+0x44>)
    359e:	subs	r6, r6, r5
    35a0:	asrs	r6, r6, #2
    35a2:	it	ne
    35a4:	movne	r4, #0
    35a6:	beq.n	35b4 <__libc_init_array+0x1c>
    35a8:	adds	r4, #1
    35aa:	ldr.w	r3, [r5], #4
    35ae:	blx	r3
    35b0:	cmp	r6, r4
    35b2:	bne.n	35a8 <__libc_init_array+0x10>
    35b4:	ldr	r6, [pc, #40]	; (35e0 <__libc_init_array+0x48>)
    35b6:	ldr	r5, [pc, #44]	; (35e4 <__libc_init_array+0x4c>)
    35b8:	subs	r6, r6, r5
    35ba:	bl	4214 <_init>
    35be:	asrs	r6, r6, #2
    35c0:	it	ne
    35c2:	movne	r4, #0
    35c4:	beq.n	35d4 <__libc_init_array+0x3c>
    35c6:	adds	r4, #1
    35c8:	ldr.w	r3, [r5], #4
    35cc:	blx	r3
    35ce:	cmp	r6, r4
    35d0:	bne.n	35c6 <__libc_init_array+0x2e>
    35d2:	pop	{r4, r5, r6, pc}
    35d4:	pop	{r4, r5, r6, pc}
    35d6:	nop
    35d8:	.word	0x00004220
    35dc:	.word	0x00004220
    35e0:	.word	0x0000422c
    35e4:	.word	0x00004220

000035e8 <malloc>:
    35e8:	ldr	r3, [pc, #8]	; (35f4 <malloc+0xc>)
    35ea:	mov	r1, r0
    35ec:	ldr	r0, [r3, #0]
    35ee:	b.w	35f8 <_malloc_r>
    35f2:	nop
    35f4:	.word	0x1fff1190

000035f8 <_malloc_r>:
    35f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35fc:	add.w	r5, r1, #11
    3600:	cmp	r5, #22
    3602:	sub	sp, #12
    3604:	mov	r6, r0
    3606:	bls.w	3748 <_malloc_r+0x150>
    360a:	bics.w	r5, r5, #7
    360e:	bmi.w	3790 <_malloc_r+0x198>
    3612:	cmp	r1, r5
    3614:	bhi.w	3790 <_malloc_r+0x198>
    3618:	bl	3b68 <__malloc_lock>
    361c:	cmp.w	r5, #504	; 0x1f8
    3620:	bcc.w	3b5c <_malloc_r+0x564>
    3624:	lsrs	r3, r5, #9
    3626:	beq.w	379e <_malloc_r+0x1a6>
    362a:	cmp	r3, #4
    362c:	bhi.w	3936 <_malloc_r+0x33e>
    3630:	lsrs	r0, r5, #6
    3632:	add.w	lr, r0, #57	; 0x39
    3636:	mov.w	r3, lr, lsl #1
    363a:	adds	r0, #56	; 0x38
    363c:	ldr	r7, [pc, #784]	; (3950 <_malloc_r+0x358>)
    363e:	add.w	r3, r7, r3, lsl #2
    3642:	sub.w	r1, r3, #8
    3646:	ldr	r4, [r3, #4]
    3648:	cmp	r1, r4
    364a:	bne.n	365c <_malloc_r+0x64>
    364c:	b.n	37a8 <_malloc_r+0x1b0>
    364e:	cmp	r2, #0
    3650:	bge.w	37ac <_malloc_r+0x1b4>
    3654:	ldr	r4, [r4, #12]
    3656:	cmp	r1, r4
    3658:	beq.w	37a8 <_malloc_r+0x1b0>
    365c:	ldr	r3, [r4, #4]
    365e:	bic.w	r3, r3, #3
    3662:	subs	r2, r3, r5
    3664:	cmp	r2, #15
    3666:	ble.n	364e <_malloc_r+0x56>
    3668:	ldr	r1, [pc, #740]	; (3950 <_malloc_r+0x358>)
    366a:	ldr	r4, [r7, #16]
    366c:	add.w	lr, r1, #8
    3670:	cmp	r4, lr
    3672:	beq.w	39dc <_malloc_r+0x3e4>
    3676:	ldr	r3, [r4, #4]
    3678:	bic.w	r3, r3, #3
    367c:	subs	r2, r3, r5
    367e:	cmp	r2, #15
    3680:	bgt.w	39b6 <_malloc_r+0x3be>
    3684:	cmp	r2, #0
    3686:	str.w	lr, [r1, #20]
    368a:	str.w	lr, [r1, #16]
    368e:	bge.w	37ce <_malloc_r+0x1d6>
    3692:	cmp.w	r3, #512	; 0x200
    3696:	bcs.w	3968 <_malloc_r+0x370>
    369a:	lsrs	r3, r3, #3
    369c:	add.w	ip, r3, #1
    36a0:	movs	r2, #1
    36a2:	asrs	r3, r3, #2
    36a4:	lsl.w	r3, r2, r3
    36a8:	ldr	r2, [r1, #4]
    36aa:	ldr.w	r8, [r1, ip, lsl #3]
    36ae:	str.w	r8, [r4, #8]
    36b2:	add.w	r9, r1, ip, lsl #3
    36b6:	orrs	r2, r3
    36b8:	sub.w	r3, r9, #8
    36bc:	str	r3, [r4, #12]
    36be:	str	r2, [r1, #4]
    36c0:	str.w	r4, [r1, ip, lsl #3]
    36c4:	str.w	r4, [r8, #12]
    36c8:	asrs	r3, r0, #2
    36ca:	movs	r4, #1
    36cc:	lsls	r4, r3
    36ce:	cmp	r4, r2
    36d0:	bhi.w	37e8 <_malloc_r+0x1f0>
    36d4:	tst	r4, r2
    36d6:	bne.n	36e6 <_malloc_r+0xee>
    36d8:	bic.w	r0, r0, #3
    36dc:	lsls	r4, r4, #1
    36de:	tst	r4, r2
    36e0:	add.w	r0, r0, #4
    36e4:	beq.n	36dc <_malloc_r+0xe4>
    36e6:	add.w	r9, r7, r0, lsl #3
    36ea:	mov	ip, r9
    36ec:	mov	r8, r0
    36ee:	ldr.w	r1, [ip, #12]
    36f2:	cmp	ip, r1
    36f4:	bne.n	3706 <_malloc_r+0x10e>
    36f6:	b.n	39e0 <_malloc_r+0x3e8>
    36f8:	cmp	r2, #0
    36fa:	bge.w	3a00 <_malloc_r+0x408>
    36fe:	ldr	r1, [r1, #12]
    3700:	cmp	ip, r1
    3702:	beq.w	39e0 <_malloc_r+0x3e8>
    3706:	ldr	r3, [r1, #4]
    3708:	bic.w	r3, r3, #3
    370c:	subs	r2, r3, r5
    370e:	cmp	r2, #15
    3710:	ble.n	36f8 <_malloc_r+0x100>
    3712:	mov	r4, r1
    3714:	ldr.w	ip, [r1, #12]
    3718:	ldr.w	r8, [r4, #8]!
    371c:	adds	r3, r1, r5
    371e:	orr.w	r5, r5, #1
    3722:	str	r5, [r1, #4]
    3724:	orr.w	r1, r2, #1
    3728:	str.w	ip, [r8, #12]
    372c:	mov	r0, r6
    372e:	str.w	r8, [ip, #8]
    3732:	str	r3, [r7, #20]
    3734:	str	r3, [r7, #16]
    3736:	str.w	lr, [r3, #12]
    373a:	str.w	lr, [r3, #8]
    373e:	str	r1, [r3, #4]
    3740:	str	r2, [r3, r2]
    3742:	bl	3b6c <__malloc_unlock>
    3746:	b.n	3788 <_malloc_r+0x190>
    3748:	cmp	r1, #16
    374a:	bhi.n	3790 <_malloc_r+0x198>
    374c:	bl	3b68 <__malloc_lock>
    3750:	movs	r5, #16
    3752:	movs	r3, #6
    3754:	movs	r0, #2
    3756:	ldr	r7, [pc, #504]	; (3950 <_malloc_r+0x358>)
    3758:	add.w	r3, r7, r3, lsl #2
    375c:	sub.w	r2, r3, #8
    3760:	ldr	r4, [r3, #4]
    3762:	cmp	r4, r2
    3764:	beq.w	39f2 <_malloc_r+0x3fa>
    3768:	ldr	r3, [r4, #4]
    376a:	ldr	r1, [r4, #12]
    376c:	ldr	r5, [r4, #8]
    376e:	bic.w	r3, r3, #3
    3772:	add	r3, r4
    3774:	mov	r0, r6
    3776:	ldr	r2, [r3, #4]
    3778:	str	r1, [r5, #12]
    377a:	orr.w	r2, r2, #1
    377e:	str	r5, [r1, #8]
    3780:	str	r2, [r3, #4]
    3782:	bl	3b6c <__malloc_unlock>
    3786:	adds	r4, #8
    3788:	mov	r0, r4
    378a:	add	sp, #12
    378c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3790:	movs	r4, #0
    3792:	movs	r3, #12
    3794:	mov	r0, r4
    3796:	str	r3, [r6, #0]
    3798:	add	sp, #12
    379a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    379e:	movs	r3, #128	; 0x80
    37a0:	mov.w	lr, #64	; 0x40
    37a4:	movs	r0, #63	; 0x3f
    37a6:	b.n	363c <_malloc_r+0x44>
    37a8:	mov	r0, lr
    37aa:	b.n	3668 <_malloc_r+0x70>
    37ac:	add	r3, r4
    37ae:	ldr	r1, [r4, #12]
    37b0:	ldr	r2, [r3, #4]
    37b2:	ldr	r5, [r4, #8]
    37b4:	orr.w	r2, r2, #1
    37b8:	str	r1, [r5, #12]
    37ba:	mov	r0, r6
    37bc:	str	r5, [r1, #8]
    37be:	str	r2, [r3, #4]
    37c0:	bl	3b6c <__malloc_unlock>
    37c4:	adds	r4, #8
    37c6:	mov	r0, r4
    37c8:	add	sp, #12
    37ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37ce:	add	r3, r4
    37d0:	mov	r0, r6
    37d2:	ldr	r2, [r3, #4]
    37d4:	orr.w	r2, r2, #1
    37d8:	str	r2, [r3, #4]
    37da:	bl	3b6c <__malloc_unlock>
    37de:	adds	r4, #8
    37e0:	mov	r0, r4
    37e2:	add	sp, #12
    37e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37e8:	ldr	r4, [r7, #8]
    37ea:	ldr	r3, [r4, #4]
    37ec:	bic.w	r8, r3, #3
    37f0:	cmp	r8, r5
    37f2:	bcc.n	37fe <_malloc_r+0x206>
    37f4:	rsb	r3, r5, r8
    37f8:	cmp	r3, #15
    37fa:	bgt.w	3916 <_malloc_r+0x31e>
    37fe:	ldr	r3, [pc, #340]	; (3954 <_malloc_r+0x35c>)
    3800:	ldr.w	r9, [pc, #352]	; 3964 <_malloc_r+0x36c>
    3804:	ldr	r2, [r3, #0]
    3806:	ldr.w	r3, [r9]
    380a:	adds	r3, #1
    380c:	add	r2, r5
    380e:	add.w	sl, r4, r8
    3812:	beq.w	3ad6 <_malloc_r+0x4de>
    3816:	add.w	r2, r2, #4096	; 0x1000
    381a:	adds	r2, #15
    381c:	bic.w	r2, r2, #4080	; 0xff0
    3820:	bic.w	r2, r2, #15
    3824:	mov	r1, r2
    3826:	mov	r0, r6
    3828:	str	r2, [sp, #4]
    382a:	bl	3b70 <_sbrk_r>
    382e:	cmp.w	r0, #4294967295
    3832:	mov	fp, r0
    3834:	ldr	r2, [sp, #4]
    3836:	beq.w	3aea <_malloc_r+0x4f2>
    383a:	cmp	sl, r0
    383c:	bhi.w	3a38 <_malloc_r+0x440>
    3840:	ldr	r3, [pc, #276]	; (3958 <_malloc_r+0x360>)
    3842:	ldr	r1, [r3, #0]
    3844:	cmp	sl, fp
    3846:	add	r1, r2
    3848:	str	r1, [r3, #0]
    384a:	beq.w	3af4 <_malloc_r+0x4fc>
    384e:	ldr.w	r0, [r9]
    3852:	ldr.w	lr, [pc, #272]	; 3964 <_malloc_r+0x36c>
    3856:	adds	r0, #1
    3858:	ittet	ne
    385a:	rsbne	sl, sl, fp
    385e:	addne	r1, sl
    3860:	streq.w	fp, [lr]
    3864:	strne	r1, [r3, #0]
    3866:	ands.w	r1, fp, #7
    386a:	beq.w	3a9c <_malloc_r+0x4a4>
    386e:	rsb	r0, r1, #8
    3872:	rsb	r1, r1, #4096	; 0x1000
    3876:	add	fp, r0
    3878:	adds	r1, #8
    387a:	add	r2, fp
    387c:	ubfx	r2, r2, #0, #12
    3880:	rsb	r9, r2, r1
    3884:	mov	r1, r9
    3886:	mov	r0, r6
    3888:	str	r3, [sp, #4]
    388a:	bl	3b70 <_sbrk_r>
    388e:	adds	r3, r0, #1
    3890:	ldr	r3, [sp, #4]
    3892:	beq.w	3b14 <_malloc_r+0x51c>
    3896:	rsb	r2, fp, r0
    389a:	add	r2, r9
    389c:	orr.w	r2, r2, #1
    38a0:	ldr	r1, [r3, #0]
    38a2:	str.w	fp, [r7, #8]
    38a6:	add	r1, r9
    38a8:	cmp	r4, r7
    38aa:	str.w	r2, [fp, #4]
    38ae:	str	r1, [r3, #0]
    38b0:	ldr.w	r9, [pc, #164]	; 3958 <_malloc_r+0x360>
    38b4:	beq.n	38e4 <_malloc_r+0x2ec>
    38b6:	cmp.w	r8, #15
    38ba:	bls.w	3ab8 <_malloc_r+0x4c0>
    38be:	ldr	r2, [r4, #4]
    38c0:	sub.w	r3, r8, #12
    38c4:	bic.w	r3, r3, #7
    38c8:	adds	r0, r4, r3
    38ca:	and.w	r2, r2, #1
    38ce:	mov.w	lr, #5
    38d2:	orrs	r2, r3
    38d4:	cmp	r3, #15
    38d6:	str	r2, [r4, #4]
    38d8:	str.w	lr, [r0, #4]
    38dc:	str.w	lr, [r0, #8]
    38e0:	bhi.w	3b1c <_malloc_r+0x524>
    38e4:	ldr	r3, [pc, #116]	; (395c <_malloc_r+0x364>)
    38e6:	ldr	r4, [r7, #8]
    38e8:	ldr	r2, [r3, #0]
    38ea:	cmp	r1, r2
    38ec:	it	hi
    38ee:	strhi	r1, [r3, #0]
    38f0:	ldr	r3, [pc, #108]	; (3960 <_malloc_r+0x368>)
    38f2:	ldr	r2, [r3, #0]
    38f4:	cmp	r1, r2
    38f6:	ldr	r2, [r4, #4]
    38f8:	it	hi
    38fa:	strhi	r1, [r3, #0]
    38fc:	bic.w	r2, r2, #3
    3900:	cmp	r5, r2
    3902:	sub.w	r3, r2, r5
    3906:	bhi.n	390c <_malloc_r+0x314>
    3908:	cmp	r3, #15
    390a:	bgt.n	3916 <_malloc_r+0x31e>
    390c:	mov	r0, r6
    390e:	bl	3b6c <__malloc_unlock>
    3912:	movs	r4, #0
    3914:	b.n	3788 <_malloc_r+0x190>
    3916:	adds	r2, r4, r5
    3918:	orr.w	r3, r3, #1
    391c:	orr.w	r5, r5, #1
    3920:	str	r5, [r4, #4]
    3922:	mov	r0, r6
    3924:	str	r2, [r7, #8]
    3926:	str	r3, [r2, #4]
    3928:	bl	3b6c <__malloc_unlock>
    392c:	adds	r4, #8
    392e:	mov	r0, r4
    3930:	add	sp, #12
    3932:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3936:	cmp	r3, #20
    3938:	bls.n	3a1e <_malloc_r+0x426>
    393a:	cmp	r3, #84	; 0x54
    393c:	bhi.w	3a88 <_malloc_r+0x490>
    3940:	lsrs	r0, r5, #12
    3942:	add.w	lr, r0, #111	; 0x6f
    3946:	mov.w	r3, lr, lsl #1
    394a:	adds	r0, #110	; 0x6e
    394c:	b.n	363c <_malloc_r+0x44>
    394e:	nop
    3950:	.word	0x1fff1194
    3954:	.word	0x1fff1c80
    3958:	.word	0x1fff1c84
    395c:	.word	0x1fff1c7c
    3960:	.word	0x1fff1c78
    3964:	.word	0x1fff15a0
    3968:	lsrs	r2, r3, #9
    396a:	cmp	r2, #4
    396c:	bls.n	3a2c <_malloc_r+0x434>
    396e:	cmp	r2, #20
    3970:	bhi.w	3ada <_malloc_r+0x4e2>
    3974:	add.w	r1, r2, #92	; 0x5c
    3978:	lsls	r1, r1, #1
    397a:	adds	r2, #91	; 0x5b
    397c:	add.w	ip, r7, r1, lsl #2
    3980:	ldr.w	r1, [r7, r1, lsl #2]
    3984:	ldr.w	r8, [pc, #476]	; 3b64 <_malloc_r+0x56c>
    3988:	sub.w	ip, ip, #8
    398c:	cmp	ip, r1
    398e:	beq.w	3aa2 <_malloc_r+0x4aa>
    3992:	ldr	r2, [r1, #4]
    3994:	bic.w	r2, r2, #3
    3998:	cmp	r3, r2
    399a:	bcs.n	39a2 <_malloc_r+0x3aa>
    399c:	ldr	r1, [r1, #8]
    399e:	cmp	ip, r1
    39a0:	bne.n	3992 <_malloc_r+0x39a>
    39a2:	ldr.w	ip, [r1, #12]
    39a6:	ldr	r2, [r7, #4]
    39a8:	str.w	ip, [r4, #12]
    39ac:	str	r1, [r4, #8]
    39ae:	str.w	r4, [ip, #8]
    39b2:	str	r4, [r1, #12]
    39b4:	b.n	36c8 <_malloc_r+0xd0>
    39b6:	adds	r3, r4, r5
    39b8:	orr.w	r7, r2, #1
    39bc:	orr.w	r5, r5, #1
    39c0:	str	r5, [r4, #4]
    39c2:	mov	r0, r6
    39c4:	str	r3, [r1, #20]
    39c6:	str	r3, [r1, #16]
    39c8:	str.w	lr, [r3, #12]
    39cc:	str.w	lr, [r3, #8]
    39d0:	str	r7, [r3, #4]
    39d2:	str	r2, [r3, r2]
    39d4:	adds	r4, #8
    39d6:	bl	3b6c <__malloc_unlock>
    39da:	b.n	3788 <_malloc_r+0x190>
    39dc:	ldr	r2, [r1, #4]
    39de:	b.n	36c8 <_malloc_r+0xd0>
    39e0:	add.w	r8, r8, #1
    39e4:	tst.w	r8, #3
    39e8:	add.w	ip, ip, #8
    39ec:	bne.w	36ee <_malloc_r+0xf6>
    39f0:	b.n	3a54 <_malloc_r+0x45c>
    39f2:	ldr	r4, [r3, #12]
    39f4:	cmp	r3, r4
    39f6:	it	eq
    39f8:	addeq	r0, #2
    39fa:	beq.w	3668 <_malloc_r+0x70>
    39fe:	b.n	3768 <_malloc_r+0x170>
    3a00:	add	r3, r1
    3a02:	mov	r4, r1
    3a04:	ldr	r2, [r3, #4]
    3a06:	ldr	r1, [r1, #12]
    3a08:	ldr.w	r5, [r4, #8]!
    3a0c:	orr.w	r2, r2, #1
    3a10:	str	r2, [r3, #4]
    3a12:	mov	r0, r6
    3a14:	str	r1, [r5, #12]
    3a16:	str	r5, [r1, #8]
    3a18:	bl	3b6c <__malloc_unlock>
    3a1c:	b.n	3788 <_malloc_r+0x190>
    3a1e:	add.w	lr, r3, #92	; 0x5c
    3a22:	add.w	r0, r3, #91	; 0x5b
    3a26:	mov.w	r3, lr, lsl #1
    3a2a:	b.n	363c <_malloc_r+0x44>
    3a2c:	lsrs	r2, r3, #6
    3a2e:	add.w	r1, r2, #57	; 0x39
    3a32:	lsls	r1, r1, #1
    3a34:	adds	r2, #56	; 0x38
    3a36:	b.n	397c <_malloc_r+0x384>
    3a38:	cmp	r4, r7
    3a3a:	ldr	r3, [pc, #296]	; (3b64 <_malloc_r+0x56c>)
    3a3c:	beq.w	3840 <_malloc_r+0x248>
    3a40:	ldr	r4, [r3, #8]
    3a42:	ldr	r2, [r4, #4]
    3a44:	bic.w	r2, r2, #3
    3a48:	b.n	3900 <_malloc_r+0x308>
    3a4a:	ldr.w	r3, [r9], #-8
    3a4e:	cmp	r9, r3
    3a50:	bne.w	3b58 <_malloc_r+0x560>
    3a54:	tst.w	r0, #3
    3a58:	add.w	r0, r0, #4294967295
    3a5c:	bne.n	3a4a <_malloc_r+0x452>
    3a5e:	ldr	r3, [r7, #4]
    3a60:	bic.w	r3, r3, r4
    3a64:	str	r3, [r7, #4]
    3a66:	lsls	r4, r4, #1
    3a68:	cmp	r4, r3
    3a6a:	bhi.w	37e8 <_malloc_r+0x1f0>
    3a6e:	cmp	r4, #0
    3a70:	beq.w	37e8 <_malloc_r+0x1f0>
    3a74:	tst	r4, r3
    3a76:	mov	r0, r8
    3a78:	bne.w	36e6 <_malloc_r+0xee>
    3a7c:	lsls	r4, r4, #1
    3a7e:	tst	r4, r3
    3a80:	add.w	r0, r0, #4
    3a84:	beq.n	3a7c <_malloc_r+0x484>
    3a86:	b.n	36e6 <_malloc_r+0xee>
    3a88:	cmp.w	r3, #340	; 0x154
    3a8c:	bhi.n	3ac0 <_malloc_r+0x4c8>
    3a8e:	lsrs	r0, r5, #15
    3a90:	add.w	lr, r0, #120	; 0x78
    3a94:	mov.w	r3, lr, lsl #1
    3a98:	adds	r0, #119	; 0x77
    3a9a:	b.n	363c <_malloc_r+0x44>
    3a9c:	mov.w	r1, #4096	; 0x1000
    3aa0:	b.n	387a <_malloc_r+0x282>
    3aa2:	movs	r1, #1
    3aa4:	ldr.w	r3, [r8, #4]
    3aa8:	asrs	r2, r2, #2
    3aaa:	lsl.w	r2, r1, r2
    3aae:	orrs	r2, r3
    3ab0:	str.w	r2, [r8, #4]
    3ab4:	mov	r1, ip
    3ab6:	b.n	39a8 <_malloc_r+0x3b0>
    3ab8:	movs	r3, #1
    3aba:	str.w	r3, [fp, #4]
    3abe:	b.n	390c <_malloc_r+0x314>
    3ac0:	movw	r2, #1364	; 0x554
    3ac4:	cmp	r3, r2
    3ac6:	bhi.n	3b0a <_malloc_r+0x512>
    3ac8:	lsrs	r0, r5, #18
    3aca:	add.w	lr, r0, #125	; 0x7d
    3ace:	mov.w	r3, lr, lsl #1
    3ad2:	adds	r0, #124	; 0x7c
    3ad4:	b.n	363c <_malloc_r+0x44>
    3ad6:	adds	r2, #16
    3ad8:	b.n	3824 <_malloc_r+0x22c>
    3ada:	cmp	r2, #84	; 0x54
    3adc:	bhi.n	3b2c <_malloc_r+0x534>
    3ade:	lsrs	r2, r3, #12
    3ae0:	add.w	r1, r2, #111	; 0x6f
    3ae4:	lsls	r1, r1, #1
    3ae6:	adds	r2, #110	; 0x6e
    3ae8:	b.n	397c <_malloc_r+0x384>
    3aea:	ldr	r4, [r7, #8]
    3aec:	ldr	r2, [r4, #4]
    3aee:	bic.w	r2, r2, #3
    3af2:	b.n	3900 <_malloc_r+0x308>
    3af4:	ubfx	r0, sl, #0, #12
    3af8:	cmp	r0, #0
    3afa:	bne.w	384e <_malloc_r+0x256>
    3afe:	add	r2, r8
    3b00:	ldr	r3, [r7, #8]
    3b02:	orr.w	r2, r2, #1
    3b06:	str	r2, [r3, #4]
    3b08:	b.n	38e4 <_malloc_r+0x2ec>
    3b0a:	movs	r3, #254	; 0xfe
    3b0c:	mov.w	lr, #127	; 0x7f
    3b10:	movs	r0, #126	; 0x7e
    3b12:	b.n	363c <_malloc_r+0x44>
    3b14:	movs	r2, #1
    3b16:	mov.w	r9, #0
    3b1a:	b.n	38a0 <_malloc_r+0x2a8>
    3b1c:	add.w	r1, r4, #8
    3b20:	mov	r0, r6
    3b22:	bl	3c78 <_free_r>
    3b26:	ldr.w	r1, [r9]
    3b2a:	b.n	38e4 <_malloc_r+0x2ec>
    3b2c:	cmp.w	r2, #340	; 0x154
    3b30:	bhi.n	3b3e <_malloc_r+0x546>
    3b32:	lsrs	r2, r3, #15
    3b34:	add.w	r1, r2, #120	; 0x78
    3b38:	lsls	r1, r1, #1
    3b3a:	adds	r2, #119	; 0x77
    3b3c:	b.n	397c <_malloc_r+0x384>
    3b3e:	movw	r1, #1364	; 0x554
    3b42:	cmp	r2, r1
    3b44:	bhi.n	3b52 <_malloc_r+0x55a>
    3b46:	lsrs	r2, r3, #18
    3b48:	add.w	r1, r2, #125	; 0x7d
    3b4c:	lsls	r1, r1, #1
    3b4e:	adds	r2, #124	; 0x7c
    3b50:	b.n	397c <_malloc_r+0x384>
    3b52:	movs	r1, #254	; 0xfe
    3b54:	movs	r2, #126	; 0x7e
    3b56:	b.n	397c <_malloc_r+0x384>
    3b58:	ldr	r3, [r7, #4]
    3b5a:	b.n	3a66 <_malloc_r+0x46e>
    3b5c:	lsrs	r0, r5, #3
    3b5e:	adds	r3, r0, #1
    3b60:	lsls	r3, r3, #1
    3b62:	b.n	3756 <_malloc_r+0x15e>
    3b64:	.word	0x1fff1194

00003b68 <__malloc_lock>:
    3b68:	bx	lr
    3b6a:	nop

00003b6c <__malloc_unlock>:
    3b6c:	bx	lr
    3b6e:	nop

00003b70 <_sbrk_r>:
    3b70:	push	{r3, r4, r5, lr}
    3b72:	ldr	r4, [pc, #28]	; (3b90 <_sbrk_r+0x20>)
    3b74:	movs	r3, #0
    3b76:	mov	r5, r0
    3b78:	mov	r0, r1
    3b7a:	str	r3, [r4, #0]
    3b7c:	bl	2f04 <_sbrk>
    3b80:	adds	r3, r0, #1
    3b82:	beq.n	3b86 <_sbrk_r+0x16>
    3b84:	pop	{r3, r4, r5, pc}
    3b86:	ldr	r3, [r4, #0]
    3b88:	cmp	r3, #0
    3b8a:	beq.n	3b84 <_sbrk_r+0x14>
    3b8c:	str	r3, [r5, #0]
    3b8e:	pop	{r3, r4, r5, pc}
    3b90:	.word	0x1fff1df0

00003b94 <register_fini>:
    3b94:	ldr	r3, [pc, #8]	; (3ba0 <register_fini+0xc>)
    3b96:	cbz	r3, 3b9e <register_fini+0xa>
    3b98:	ldr	r0, [pc, #8]	; (3ba4 <register_fini+0x10>)
    3b9a:	b.w	3ba8 <atexit>
    3b9e:	bx	lr
    3ba0:	.word	0x00000000
    3ba4:	.word	0x00003bb5

00003ba8 <atexit>:
    3ba8:	movs	r3, #0
    3baa:	mov	r1, r0
    3bac:	mov	r2, r3
    3bae:	mov	r0, r3
    3bb0:	b.w	3e48 <__register_exitproc>

00003bb4 <__libc_fini_array>:
    3bb4:	push	{r3, r4, r5, lr}
    3bb6:	ldr	r5, [pc, #28]	; (3bd4 <__libc_fini_array+0x20>)
    3bb8:	ldr	r4, [pc, #28]	; (3bd8 <__libc_fini_array+0x24>)
    3bba:	subs	r4, r5, r4
    3bbc:	asrs	r4, r4, #2
    3bbe:	beq.n	3bcc <__libc_fini_array+0x18>
    3bc0:	subs	r4, #1
    3bc2:	ldr.w	r3, [r5, #-4]!
    3bc6:	blx	r3
    3bc8:	cmp	r4, #0
    3bca:	bne.n	3bc0 <__libc_fini_array+0xc>
    3bcc:	ldmia.w	sp!, {r3, r4, r5, lr}
    3bd0:	b.w	422c <__init_array_end>
	...

00003bdc <_malloc_trim_r>:
    3bdc:	push	{r3, r4, r5, r6, r7, lr}
    3bde:	ldr	r7, [pc, #140]	; (3c6c <_malloc_trim_r+0x90>)
    3be0:	mov	r4, r1
    3be2:	mov	r6, r0
    3be4:	bl	3b68 <__malloc_lock>
    3be8:	ldr	r3, [r7, #8]
    3bea:	ldr	r5, [r3, #4]
    3bec:	bic.w	r5, r5, #3
    3bf0:	subs	r1, r5, r4
    3bf2:	addw	r1, r1, #4079	; 0xfef
    3bf6:	bic.w	r1, r1, #4080	; 0xff0
    3bfa:	bic.w	r1, r1, #15
    3bfe:	sub.w	r4, r1, #4096	; 0x1000
    3c02:	cmp.w	r4, #4096	; 0x1000
    3c06:	blt.n	3c18 <_malloc_trim_r+0x3c>
    3c08:	movs	r1, #0
    3c0a:	mov	r0, r6
    3c0c:	bl	3b70 <_sbrk_r>
    3c10:	ldr	r3, [r7, #8]
    3c12:	add	r3, r5
    3c14:	cmp	r0, r3
    3c16:	beq.n	3c22 <_malloc_trim_r+0x46>
    3c18:	mov	r0, r6
    3c1a:	bl	3b6c <__malloc_unlock>
    3c1e:	movs	r0, #0
    3c20:	pop	{r3, r4, r5, r6, r7, pc}
    3c22:	negs	r1, r4
    3c24:	mov	r0, r6
    3c26:	bl	3b70 <_sbrk_r>
    3c2a:	adds	r0, #1
    3c2c:	beq.n	3c4a <_malloc_trim_r+0x6e>
    3c2e:	ldr	r3, [pc, #64]	; (3c70 <_malloc_trim_r+0x94>)
    3c30:	ldr	r2, [r7, #8]
    3c32:	ldr	r1, [r3, #0]
    3c34:	subs	r5, r5, r4
    3c36:	orr.w	r5, r5, #1
    3c3a:	mov	r0, r6
    3c3c:	subs	r1, r1, r4
    3c3e:	str	r5, [r2, #4]
    3c40:	str	r1, [r3, #0]
    3c42:	bl	3b6c <__malloc_unlock>
    3c46:	movs	r0, #1
    3c48:	pop	{r3, r4, r5, r6, r7, pc}
    3c4a:	movs	r1, #0
    3c4c:	mov	r0, r6
    3c4e:	bl	3b70 <_sbrk_r>
    3c52:	ldr	r2, [r7, #8]
    3c54:	subs	r3, r0, r2
    3c56:	cmp	r3, #15
    3c58:	ble.n	3c18 <_malloc_trim_r+0x3c>
    3c5a:	ldr	r4, [pc, #24]	; (3c74 <_malloc_trim_r+0x98>)
    3c5c:	ldr	r1, [pc, #16]	; (3c70 <_malloc_trim_r+0x94>)
    3c5e:	ldr	r4, [r4, #0]
    3c60:	orr.w	r3, r3, #1
    3c64:	subs	r0, r0, r4
    3c66:	str	r3, [r2, #4]
    3c68:	str	r0, [r1, #0]
    3c6a:	b.n	3c18 <_malloc_trim_r+0x3c>
    3c6c:	.word	0x1fff1194
    3c70:	.word	0x1fff1c84
    3c74:	.word	0x1fff15a0

00003c78 <_free_r>:
    3c78:	cmp	r1, #0
    3c7a:	beq.n	3d08 <_free_r+0x90>
    3c7c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c80:	mov	r5, r1
    3c82:	mov	r8, r0
    3c84:	bl	3b68 <__malloc_lock>
    3c88:	ldr.w	r7, [r5, #-4]
    3c8c:	ldr	r1, [pc, #424]	; (3e38 <_free_r+0x1c0>)
    3c8e:	bic.w	r3, r7, #1
    3c92:	sub.w	r4, r5, #8
    3c96:	adds	r2, r4, r3
    3c98:	ldr	r6, [r1, #8]
    3c9a:	ldr	r0, [r2, #4]
    3c9c:	cmp	r2, r6
    3c9e:	bic.w	r0, r0, #3
    3ca2:	beq.n	3d6a <_free_r+0xf2>
    3ca4:	lsls	r6, r7, #31
    3ca6:	str	r0, [r2, #4]
    3ca8:	bmi.n	3cc2 <_free_r+0x4a>
    3caa:	ldr.w	r7, [r5, #-8]
    3cae:	subs	r4, r4, r7
    3cb0:	add.w	lr, r1, #8
    3cb4:	ldr	r5, [r4, #8]
    3cb6:	cmp	r5, lr
    3cb8:	add	r3, r7
    3cba:	beq.n	3d9c <_free_r+0x124>
    3cbc:	ldr	r7, [r4, #12]
    3cbe:	str	r7, [r5, #12]
    3cc0:	str	r5, [r7, #8]
    3cc2:	adds	r5, r2, r0
    3cc4:	ldr	r5, [r5, #4]
    3cc6:	lsls	r5, r5, #31
    3cc8:	bpl.n	3d50 <_free_r+0xd8>
    3cca:	orr.w	r2, r3, #1
    3cce:	str	r2, [r4, #4]
    3cd0:	str	r3, [r4, r3]
    3cd2:	cmp.w	r3, #512	; 0x200
    3cd6:	bcs.n	3d0a <_free_r+0x92>
    3cd8:	lsrs	r3, r3, #3
    3cda:	adds	r2, r3, #1
    3cdc:	ldr	r5, [r1, #4]
    3cde:	ldr.w	r7, [r1, r2, lsl #3]
    3ce2:	str	r7, [r4, #8]
    3ce4:	movs	r0, #1
    3ce6:	asrs	r3, r3, #2
    3ce8:	lsl.w	r3, r0, r3
    3cec:	add.w	r0, r1, r2, lsl #3
    3cf0:	orrs	r5, r3
    3cf2:	subs	r0, #8
    3cf4:	str	r0, [r4, #12]
    3cf6:	str	r5, [r1, #4]
    3cf8:	str.w	r4, [r1, r2, lsl #3]
    3cfc:	str	r4, [r7, #12]
    3cfe:	mov	r0, r8
    3d00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d04:	b.w	3b6c <__malloc_unlock>
    3d08:	bx	lr
    3d0a:	lsrs	r2, r3, #9
    3d0c:	cmp	r2, #4
    3d0e:	bhi.n	3db8 <_free_r+0x140>
    3d10:	lsrs	r2, r3, #6
    3d12:	add.w	r7, r2, #57	; 0x39
    3d16:	lsls	r7, r7, #1
    3d18:	add.w	r5, r2, #56	; 0x38
    3d1c:	add.w	r0, r1, r7, lsl #2
    3d20:	ldr.w	r2, [r1, r7, lsl #2]
    3d24:	ldr	r1, [pc, #272]	; (3e38 <_free_r+0x1c0>)
    3d26:	subs	r0, #8
    3d28:	cmp	r0, r2
    3d2a:	beq.n	3dc8 <_free_r+0x150>
    3d2c:	ldr	r1, [r2, #4]
    3d2e:	bic.w	r1, r1, #3
    3d32:	cmp	r3, r1
    3d34:	bcs.n	3d3c <_free_r+0xc4>
    3d36:	ldr	r2, [r2, #8]
    3d38:	cmp	r0, r2
    3d3a:	bne.n	3d2c <_free_r+0xb4>
    3d3c:	ldr	r0, [r2, #12]
    3d3e:	str	r0, [r4, #12]
    3d40:	str	r2, [r4, #8]
    3d42:	str	r4, [r0, #8]
    3d44:	str	r4, [r2, #12]
    3d46:	mov	r0, r8
    3d48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d4c:	b.w	3b6c <__malloc_unlock>
    3d50:	ldr	r5, [r2, #8]
    3d52:	ldr	r7, [pc, #232]	; (3e3c <_free_r+0x1c4>)
    3d54:	cmp	r5, r7
    3d56:	add	r3, r0
    3d58:	beq.n	3dda <_free_r+0x162>
    3d5a:	ldr	r0, [r2, #12]
    3d5c:	str	r0, [r5, #12]
    3d5e:	orr.w	r2, r3, #1
    3d62:	str	r5, [r0, #8]
    3d64:	str	r2, [r4, #4]
    3d66:	str	r3, [r4, r3]
    3d68:	b.n	3cd2 <_free_r+0x5a>
    3d6a:	lsls	r7, r7, #31
    3d6c:	add	r3, r0
    3d6e:	bmi.n	3d80 <_free_r+0x108>
    3d70:	ldr.w	r2, [r5, #-8]
    3d74:	subs	r4, r4, r2
    3d76:	add	r3, r2
    3d78:	ldr	r0, [r4, #8]
    3d7a:	ldr	r2, [r4, #12]
    3d7c:	str	r2, [r0, #12]
    3d7e:	str	r0, [r2, #8]
    3d80:	ldr	r2, [pc, #188]	; (3e40 <_free_r+0x1c8>)
    3d82:	ldr	r2, [r2, #0]
    3d84:	orr.w	r0, r3, #1
    3d88:	cmp	r3, r2
    3d8a:	str	r0, [r4, #4]
    3d8c:	str	r4, [r1, #8]
    3d8e:	bcc.n	3cfe <_free_r+0x86>
    3d90:	ldr	r3, [pc, #176]	; (3e44 <_free_r+0x1cc>)
    3d92:	mov	r0, r8
    3d94:	ldr	r1, [r3, #0]
    3d96:	bl	3bdc <_malloc_trim_r>
    3d9a:	b.n	3cfe <_free_r+0x86>
    3d9c:	adds	r1, r2, r0
    3d9e:	ldr	r1, [r1, #4]
    3da0:	lsls	r1, r1, #31
    3da2:	bmi.n	3e2e <_free_r+0x1b6>
    3da4:	ldr	r1, [r2, #8]
    3da6:	ldr	r2, [r2, #12]
    3da8:	str	r2, [r1, #12]
    3daa:	add	r3, r0
    3dac:	orr.w	r0, r3, #1
    3db0:	str	r1, [r2, #8]
    3db2:	str	r0, [r4, #4]
    3db4:	str	r3, [r4, r3]
    3db6:	b.n	3cfe <_free_r+0x86>
    3db8:	cmp	r2, #20
    3dba:	bhi.n	3dec <_free_r+0x174>
    3dbc:	add.w	r7, r2, #92	; 0x5c
    3dc0:	lsls	r7, r7, #1
    3dc2:	add.w	r5, r2, #91	; 0x5b
    3dc6:	b.n	3d1c <_free_r+0xa4>
    3dc8:	asrs	r2, r5, #2
    3dca:	ldr	r3, [r1, #4]
    3dcc:	movs	r5, #1
    3dce:	lsl.w	r2, r5, r2
    3dd2:	orrs	r3, r2
    3dd4:	str	r3, [r1, #4]
    3dd6:	mov	r2, r0
    3dd8:	b.n	3d3e <_free_r+0xc6>
    3dda:	orr.w	r2, r3, #1
    3dde:	str	r4, [r1, #20]
    3de0:	str	r4, [r1, #16]
    3de2:	str	r5, [r4, #12]
    3de4:	str	r5, [r4, #8]
    3de6:	str	r2, [r4, #4]
    3de8:	str	r3, [r4, r3]
    3dea:	b.n	3cfe <_free_r+0x86>
    3dec:	cmp	r2, #84	; 0x54
    3dee:	bhi.n	3dfe <_free_r+0x186>
    3df0:	lsrs	r2, r3, #12
    3df2:	add.w	r7, r2, #111	; 0x6f
    3df6:	lsls	r7, r7, #1
    3df8:	add.w	r5, r2, #110	; 0x6e
    3dfc:	b.n	3d1c <_free_r+0xa4>
    3dfe:	cmp.w	r2, #340	; 0x154
    3e02:	bhi.n	3e12 <_free_r+0x19a>
    3e04:	lsrs	r2, r3, #15
    3e06:	add.w	r7, r2, #120	; 0x78
    3e0a:	lsls	r7, r7, #1
    3e0c:	add.w	r5, r2, #119	; 0x77
    3e10:	b.n	3d1c <_free_r+0xa4>
    3e12:	movw	r0, #1364	; 0x554
    3e16:	cmp	r2, r0
    3e18:	bhi.n	3e28 <_free_r+0x1b0>
    3e1a:	lsrs	r2, r3, #18
    3e1c:	add.w	r7, r2, #125	; 0x7d
    3e20:	lsls	r7, r7, #1
    3e22:	add.w	r5, r2, #124	; 0x7c
    3e26:	b.n	3d1c <_free_r+0xa4>
    3e28:	movs	r7, #254	; 0xfe
    3e2a:	movs	r5, #126	; 0x7e
    3e2c:	b.n	3d1c <_free_r+0xa4>
    3e2e:	orr.w	r2, r3, #1
    3e32:	str	r2, [r4, #4]
    3e34:	str	r3, [r4, r3]
    3e36:	b.n	3cfe <_free_r+0x86>
    3e38:	.word	0x1fff1194
    3e3c:	.word	0x1fff119c
    3e40:	.word	0x1fff159c
    3e44:	.word	0x1fff1c80

00003e48 <__register_exitproc>:
    3e48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e4c:	ldr	r4, [pc, #148]	; (3ee4 <__register_exitproc+0x9c>)
    3e4e:	ldr	r5, [r4, #0]
    3e50:	ldr.w	r4, [r5, #328]	; 0x148
    3e54:	mov	r6, r0
    3e56:	mov	r8, r1
    3e58:	mov	sl, r2
    3e5a:	mov	r9, r3
    3e5c:	cbz	r4, 3ed0 <__register_exitproc+0x88>
    3e5e:	ldr	r0, [r4, #4]
    3e60:	cmp	r0, #31
    3e62:	bgt.n	3e94 <__register_exitproc+0x4c>
    3e64:	adds	r3, r0, #1
    3e66:	cbz	r6, 3e86 <__register_exitproc+0x3e>
    3e68:	add.w	r5, r4, r0, lsl #2
    3e6c:	movs	r2, #1
    3e6e:	str.w	sl, [r5, #136]	; 0x88
    3e72:	ldr.w	r1, [r4, #392]	; 0x188
    3e76:	lsls	r2, r0
    3e78:	orrs	r1, r2
    3e7a:	cmp	r6, #2
    3e7c:	str.w	r1, [r4, #392]	; 0x188
    3e80:	str.w	r9, [r5, #264]	; 0x108
    3e84:	beq.n	3ec4 <__register_exitproc+0x7c>
    3e86:	adds	r0, #2
    3e88:	str	r3, [r4, #4]
    3e8a:	str.w	r8, [r4, r0, lsl #2]
    3e8e:	movs	r0, #0
    3e90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e94:	ldr	r3, [pc, #80]	; (3ee8 <__register_exitproc+0xa0>)
    3e96:	cbz	r3, 3eda <__register_exitproc+0x92>
    3e98:	mov.w	r0, #400	; 0x190
    3e9c:	bl	35e8 <malloc>
    3ea0:	mov	r4, r0
    3ea2:	cbz	r0, 3eda <__register_exitproc+0x92>
    3ea4:	ldr.w	r3, [r5, #328]	; 0x148
    3ea8:	movs	r7, #0
    3eaa:	stmia.w	r0, {r3, r7}
    3eae:	str.w	r4, [r5, #328]	; 0x148
    3eb2:	mov	r0, r7
    3eb4:	movs	r3, #1
    3eb6:	str.w	r7, [r4, #392]	; 0x188
    3eba:	str.w	r7, [r4, #396]	; 0x18c
    3ebe:	cmp	r6, #0
    3ec0:	beq.n	3e86 <__register_exitproc+0x3e>
    3ec2:	b.n	3e68 <__register_exitproc+0x20>
    3ec4:	ldr.w	r1, [r4, #396]	; 0x18c
    3ec8:	orrs	r2, r1
    3eca:	str.w	r2, [r4, #396]	; 0x18c
    3ece:	b.n	3e86 <__register_exitproc+0x3e>
    3ed0:	add.w	r4, r5, #332	; 0x14c
    3ed4:	str.w	r4, [r5, #328]	; 0x148
    3ed8:	b.n	3e5e <__register_exitproc+0x16>
    3eda:	mov.w	r0, #4294967295
    3ede:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ee2:	nop
    3ee4:	.word	0x00004210
    3ee8:	.word	0x000035e9
    3eec:	.word	0x00000026
    3ef0:	.word	0x00000029
    3ef4:	.word	0x0000002d
    3ef8:	.word	0x00000033
    3efc:	.word	0x00000064
    3f00:	.word	0x00000064
    3f04:	.word	0x00000064
    3f08:	.word	0x00000064
    3f0c:	.word	0x7370704f
    3f10:	.word	0x6e61202c
    3f14:	.word	0x6b6e7520
    3f18:	.word	0x6e776f6e
    3f1c:	.word	0x44494d20
    3f20:	.word	0x656d2049
    3f24:	.word	0x67617373
    3f28:	.word	0x79742065
    3f2c:	.word	0x00216570
    3f30:	.word	0x67676f54
    3f34:	.word	0x676e696c
    3f38:	.word	0x64656c20
    3f3c:	.word	0x00000000

00003f40 <pin2sc1a>:
    3f40:	................
    3f50:	................
    3f60:	................
    3f70:	................
    3f80:	........

00003f88 <digital_pin_to_info_PGM>:
    3f88:	@..C@..@D..CD..@
    3f98:	...C...@0..C0..@
    3fa8:	4..C4..@...C...@
    3fb8:	...C...@...C...@
    3fc8:	...C...@...C...@
    3fd8:	...C...@...C...@
    3fe8:	...C...@...C...@
    3ff8:	...C...@...C...@
    4008:	...C...@...C...@
    4018:	...C...@...C...@
    4028:	...C...@...C...@
    4038:	...C...@...C...@
    4048:	h .Ch..@...C...@
    4058:	8..C8..@<..C<..@
    4068:	@..C@..@H..CH..@
    4078:	L..CL..@(..C(..@
    4088:	,..C,..@` .C`..@
    4098:	d .Cd..@ ..C ..@
    40a8:	$..C$..@(..C(..@
    40b8:	,..C,..@D..CD..@
    40c8:	p..Cp..@t..Ct..@
    40d8:	h..Ch..@P..CP..@
    40e8:	X..CX..@\..C\..@
    40f8:	T..CT..@ ..C ..@
    4108:	$..C$..@...C...@
    4118:	...C...@8..C8..@
    4128:	4..C4..@0..C0..@
    4138:	<..C<..@,..C,..@
    4148:	( .C(..@, .C,..@
    4158:	. .C...@. .C...@
    4168:	. .C...@. .C...@
    4178:	. .C...@. .C...@

00004188 <vtable for usb_serial_class>:
	...
    4190:	.*...*...*...*..
    41a0:	.*...*...*...*..
    41b0:	....

000041b4 <usb_endpoint_config_table>:
    41b4:	........

000041bc <usb_descriptor_list>:
    41bc:	....p...........
    41cc:	............L...
    41dc:	................
    41ec:	....4...........
    41fc:	P...............
    420c:	....

00004210 <_global_impure_ptr>:
    4210:	h...

00004214 <_init>:
    4214:	push	{r3, r4, r5, r6, r7, lr}
    4216:	nop
    4218:	pop	{r3, r4, r5, r6, r7}
    421a:	pop	{r3}
    421c:	mov	lr, r3
    421e:	bx	lr

00004220 <__init_array_start>:
    4220:	.word	0x00003b95

00004224 <__frame_dummy_init_array_entry>:
    4224:	5.......

Disassembly of section .fini:

0000422c <_fini>:
    422c:	push	{r3, r4, r5, r6, r7, lr}
    422e:	nop

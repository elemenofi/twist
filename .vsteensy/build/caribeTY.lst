
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004ef8 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15c0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003bc8 l     F .text	0000000c startup_default_early_hook
00003bd4 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15c0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c4 l       .bss	00000000 object.8610
00004ef0 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001978 l     F .text	00000268 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff186d l     O .bss	00000001 tx_noautoflush
1fff1870 l     O .bss	00000004 tx_packet
1fff1874 l     O .bss	00000001 transmit_previous_timeout
1fff1878 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001eb4 l     F .text	00000144 wait_for_cal
1fff187d l     O .bss	00000001 analog_right_shift
1fff187e l     O .bss	00000001 calibrating
00004c0c l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff187f l     O .bss	00000001 analogReadBusyADC1
1fff1880 l     O .bss	00000001 analogReadBusyADC0
1fff1881 l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000021d4 l     F .text	0000004c digitalWrite.part.1
00002220 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002500 l     F .text	00000048 sysex_byte
1fff189c l     O .bss	00000001 tx_noautoflush
1fff18c8 l     O .bss	00000004 tx_packet
1fff18cc l     O .bss	00000001 transmit_previous_timeout
1fff18d4 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18e8 l     O .bss	00000004 ep0_tx_ptr
1fff18ec l     O .bss	00000014 rx_last
1fff1900 l     O .bss	00000002 ep0_tx_len
1fff1904 l     O .bss	00000040 ep0_rx0_buf
1fff1944 l     O .bss	00000014 rx_first
1fff1958 l     O .bss	00000001 ep0_tx_data_toggle
1fff195c l     O .bss	00000040 ep0_rx1_buf
1fff199c l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff19b0 l     O .bss	00000014 tx_last
1fff19c4 l     O .bss	00000008 setup
1fff19cc l     O .bss	00000001 ep0_tx_bdt_bank
1fff19d0 l     O .bss	00000008 reply_buffer
1fff19dc l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19e1 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19e4 l     O .bss	00000004 rts_pin
1fff19e8 l     O .bss	00000001 rx_buffer_head
1fff19e9 l     O .bss	00000001 rx_buffer_tail
1fff19ec l     O .bss	00000028 tx_buffer
1fff1a14 l     O .bss	00000040 rx_buffer
1fff1a54 l     O .bss	00000001 transmitting
1fff1a55 l     O .bss	00000001 tx_buffer_tail
1fff1a58 l     O .bss	00000004 transmit_pin
1fff1a5c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a60 l     O .bss	00000004 rts_pin
1fff1a64 l     O .bss	00000001 transmitting
1fff1a65 l     O .bss	00000001 rx_buffer_tail
1fff1a68 l     O .bss	00000028 tx_buffer
1fff1a90 l     O .bss	00000040 rx_buffer
1fff1ad0 l     O .bss	00000001 rx_buffer_head
1fff1ad1 l     O .bss	00000001 tx_buffer_tail
1fff1ad4 l     O .bss	00000004 transmit_pin
1fff1ad8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1adc l     O .bss	00000004 rts_pin
1fff1ae0 l     O .bss	00000001 rx_buffer_head
1fff1ae1 l     O .bss	00000001 rx_buffer_tail
1fff1ae4 l     O .bss	00000028 tx_buffer
1fff1b0c l     O .bss	00000040 rx_buffer
1fff1b4c l     O .bss	00000001 transmitting
1fff1b4d l     O .bss	00000001 tx_buffer_tail
1fff1b50 l     O .bss	00000004 transmit_pin
1fff1b54 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b58 l     O .bss	00000004 rts_pin
1fff1b5c l     O .bss	00000001 rx_buffer_head
1fff1b5d l     O .bss	00000001 rx_buffer_tail
1fff1b60 l     O .bss	00000040 tx_buffer
1fff1ba0 l     O .bss	00000040 rx_buffer
1fff1be0 l     O .bss	00000001 transmitting
1fff1be1 l     O .bss	00000001 tx_buffer_tail
1fff1be4 l     O .bss	00000004 transmit_pin
1fff1be8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1bec l     O .bss	00000004 rts_pin
1fff1bf0 l     O .bss	00000001 rx_buffer_head
1fff1bf1 l     O .bss	00000001 rx_buffer_tail
1fff1bf4 l     O .bss	00000028 tx_buffer
1fff1c1c l     O .bss	00000040 rx_buffer
1fff1c5c l     O .bss	00000001 transmitting
1fff1c5d l     O .bss	00000001 tx_buffer_tail
1fff1c60 l     O .bss	00000004 transmit_pin
1fff1c64 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c68 l     O .bss	00000004 rts_pin
1fff1c6c l     O .bss	00000001 rx_buffer_head
1fff1c6d l     O .bss	00000001 rx_buffer_tail
1fff1c70 l     O .bss	00000028 tx_buffer
1fff1c98 l     O .bss	00000040 rx_buffer
1fff1cd8 l     O .bss	00000001 transmitting
1fff1cd9 l     O .bss	00000001 tx_buffer_tail
1fff1cdc l     O .bss	00000004 transmit_pin
1fff1ce0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004868 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15c0 l       .bss	00000000 __bss_start__
1fff1e7c l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003bc0  w    F .text	00000006 adc0_isr
00001c58 g     F .text	0000001c usb_serial_available
00003a80 g     F .text	00000020 serial4_available
0000372c  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
00003c6c g     F .text	00000020 serial_available
1fff18a0 g     O .bss	00000004 usb_midi_handleProgramChange
00003b78  w    F .text	00000048 hard_fault_isr
00003bc0  w    F .text	00000006 dma_ch6_isr
00003820 g     F .text	00000020 Print::println()
00003954 g     F .text	00000020 serial2_available
00003bc0  w    F .text	00000006 uart0_lon_isr
00002b40 g     F .text	000000e8 usb_rx_memory
000037f0  w    F .text	00000002 serialEvent5()
00003bc0  w    F .text	00000006 dma_ch8_isr
00003d98 g     F .text	00000020 serial6_available
00004840 g     F .text	00000002 __malloc_unlock
1fff18b4 g     O .bss	00000004 usb_midi_handleAfterTouch
00001ff8 g     F .text	000000e0 analog_init
00002c28 g     F .text	00000084 usb_tx
00003bc0  w    F .text	00000006 portcd_isr
1fff18c4 g     O .bss	00000004 usb_midi_handleSysExComplete
000041b8 g     F .text	00000098 MillisTimer::runFromTimer()
00003bc0  w    F .text	00000006 can1_rx_warn_isr
00004efc g       .fini	00000000 __exidx_end
00003bc0  w    F .text	00000006 dma_error_isr
1fff1d40 g     O .bss	00000001 usb_midi_msg_type
1fff1cf8 g     O .bss	00000001 EventResponder::runningFromYield
00003bc0  w    F .text	00000006 i2c0_isr
00004260 g     F .text	0000000c __errno
00003bc0  w    F .text	00000006 portd_isr
00003bc0  w    F .text	00000006 enet_error_isr
1fff1ce4 g     O .bss	00000004 EventResponder::firstInterrupt
00003bc0  w    F .text	00000006 tpm1_isr
0000380c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004c54 g     O .text	00000200 digital_pin_to_info_PGM
1fff1e78 g     O .bss	00000004 errno
00004efc g       .fini	00000000 _etext
1fff15c0 g       .bss	00000000 _sbss
00003858  w    F .text	00000002 serialEvent6()
1fff18b0 g     O .bss	00000004 usb_midi_handleVelocityChange
000022c8 g     F .text	0000001c digitalRead
00003bc0  w    F .text	00000006 porte_isr
00000494 g     F .text	000014e4 loop
00003bc0  w    F .text	00000006 portb_isr
1fff1710 g     O .bss	00000014 step3
000025e4 g     F .text	0000002c usb_midi_flush_output
00003bc0  w    F .text	00000006 spi1_isr
00003aa0 g     F .text	000000d8 uart3_status_isr
00004064  w    F .text	00000002 serialEvent1()
1fff1854 g     O .bss	00000018 led4
00003bc0  w    F .text	00000006 mcm_isr
00004150 g     F .text	00000068 MillisTimer::addToActiveList()
00002610 g     F .text	0000043c usb_midi_read
1fff188c g     O .bss	00000004 usb_midi_handleSystemReset
1fff1ce8 g     O .bss	00000004 EventResponder::lastInterrupt
00003974 g     F .text	0000010c uart1_status_isr
1fff1d42 g     O .bss	00000002 usb_midi_msg_sysex_len
00003bc0  w    F .text	00000006 randnum_isr
1fff1894 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1884 g     O .bss	00000004 systick_millis_count
00003b78  w    F .text	00000048 bus_fault_isr
00003bc0  w    F .text	00000006 watchdog_isr
00003bc0  w    F .text	00000006 i2c1_isr
1fff19d8 g     O .bss	00000001 usb_configuration
00003bc0  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003840  w    F .text	00000002 serialEvent2()
00003bc0  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1e6c g     O .bss	0000000a usb_rx_byte_count_data
00003bc0  w    F .text	00000006 pit1_isr
000042bc g     F .text	00000010 malloc
00003bc0  w    F .text	00000006 dma_ch4_isr
00003bc0  w    F .text	00000006 software_isr
00003bc0  w    F .text	00000006 dma_ch7_isr
000040ec  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
0000365c g     F .text	000000d0 usb_init
00003bc0  w    F .text	00000006 lptmr_isr
1fff1d08 g     O .bss	00000004 __malloc_top_pad
00002298 g     F .text	00000024 rtc_set
1fff16a0 g     O .bss	00000024 button5
1fff167c g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff18e4 g     O .bss	00000004 usb_midi_handleNoteOn
00003c38 g     F .text	00000034 kinetis_hsrun_enable
00004844 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001be0 g     F .text	00000048 usb_serial_getchar
00003bc0  w    F .text	00000006 can1_bus_off_isr
00003bc0  w    F .text	00000006 ftm2_isr
1fff1d34 g     O .bss	00000008 usb_cdc_line_coding
000022bc g     F .text	0000000a digitalWrite
00003bc0  w    F .text	00000006 uart5_status_isr
00003db8 g     F .text	000000e4 lpuart0_status_isr
1fff1cf0 g     O .bss	00000004 EventResponder::lastYield
00004e80 g     O .text	00000005 usb_endpoint_config_table
00003bc0  w    F .text	00000006 dma_ch9_isr
00003bc0  w    F .text	00000006 pit2_isr
00003f6c g     F .text	00000020 serial3_available
1fff1724 g     O .bss	00000014 step4
1fff1d04 g     O .bss	00000004 __malloc_max_sbrked_mem
000022e4 g     F .text	0000000a pinMode
00002a8c g     F .text	0000004c usb_free
00003bc0  w    F .text	00000006 i2c3_isr
1fff180c g     O .bss	00000018 led1
1fff18ac g     O .bss	00000004 usb_midi_handleSysExPartial
00004efc g       .fini	00000000 __exidx_start
00003bc0  w    F .text	00000006 pit0_isr
1fff1d44 g     O .bss	00000001 usb_midi_msg_data1
1fff1cf4 g     O .bss	00000004 EventResponder::firstYield
00004edc g     O .text	00000004 _global_impure_ptr
00003bc0  w    F .text	00000006 can1_error_isr
0000426c g     F .text	00000050 __libc_init_array
1fff1e7c g       .bss	00000000 __bss_end
00003bc0  w    F .text	00000006 can0_wakeup_isr
00003bc0  w    F .text	00000006 flash_cmd_isr
1fff1798 g     O .bss	00000018 knob5
000037f4  w    F .text	00000004 usb_serial_class::clear()
00003f8c g     F .text	000000d8 uart2_status_isr
00003bd8 g     F .text	0000002c _sbrk
1fff1cfc g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff187c g     O .bss	00000001 usb_cdc_line_rtsdtr
00001e6c g     F .text	00000048 usb_serial_flush_callback
00004ee0 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
00003bc0  w    F .text	00000006 svcall_isr
00003bc0  w    F .text	00000006 dma_ch15_isr
00003bc0  w    F .text	00000006 uart1_error_isr
00004888 g     F .text	00000028 __libc_fini_array
00003bc0  w    F .text	00000006 usbhs_phy_isr
1fff1e7c g       .bss	00000000 _ebss
00003bc0 g     F .text	00000006 unused_isr
00003bc0  w    F .text	00000006 spi0_isr
00003bc0  w    F .text	00000006 dma_ch3_isr
00003bc0  w    F .text	00000006 flash_error_isr
1fff1750 g     O .bss	00000018 knob2
0000385c g     F .text	00000020 serial5_available
00003bc0  w    F .text	00000006 uart5_error_isr
00003bc0  w    F .text	00000006 rtc_seconds_isr
00003bc0  w    F .text	00000006 pdb_isr
00003b78  w    F .text	00000048 usage_fault_isr
00003bc0  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003bc0  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1d3c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c50 g     O .data	00000018 leds
00004250 g     F .text	00000010 systick_isr
00003bc0  w    F .text	00000006 rtc_alarm_isr
00003bc0  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
00003bc0  w    F .text	00000006 ftm1_isr
00003814  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003bc8  w    F .text	0000000c startup_early_hook
00003bc0  w    F .text	00000006 dma_ch13_isr
00003bc0  w    F .text	00000006 uart2_error_isr
00001c28 g     F .text	00000030 usb_serial_peekchar
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
00003b78 g     F .text	00000048 fault_isr
0000494c g     F .text	000001d0 _free_r
1fff18d0 g     O .bss	00000004 usb_midi_handleStop
00003bc0  w    F .text	00000006 usb_charge_isr
00003804  w    F .text	00000004 usb_serial_class::flush()
00003bc0  w    F .text	00000006 cmt_isr
00003bc0  w    F .text	00000006 usbhs_isr
1fff18e0 g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
000037fc  w    F .text	00000004 usb_serial_class::read()
00003bc0  w    F .text	00000006 ftm3_isr
00003bc0  w    F .text	00000006 tsi0_isr
1fff15f4 g     O .bss	00000018 led6
1fff1738 g     O .bss	00000018 knob1
00003bc0  w    F .text	00000006 spi2_isr
00003844  w    F .text	00000002 serialEvent4()
0000381c  w    F .text	00000002 serialEvent()
1fff1959 g     O .bss	00000001 usb_reboot_timer
00004b1c g     F .text	000000a4 __register_exitproc
00001c74 g     F .text	00000038 usb_serial_flush_input
00001db4 g     F .text	00000018 usb_serial_putchar
1fff1d0c g     O .bss	00000028 __malloc_current_mallinfo
00003bc0  w    F .text	00000006 can0_bus_off_isr
1fff15dc g     O .bss	00000018 led5
1fff19cd g     O .bss	00000001 usb_rx_memory_needed
00002cac g     F .text	000009b0 usb_isr
1fff16e8 g     O .bss	00000014 step1
1fff18dc g     O .bss	00000004 usb_midi_handleNoteOff
00004e54  w    O .text	00000028 vtable for usb_serial_class
1fff1768 g     O .bss	00000018 knob3
00003bc0  w    F .text	00000006 uart3_error_isr
1fff1cec g     O .bss	00000004 MillisTimer::listActive
00003bc0  w    F .text	00000006 porta_isr
1fff160c g     O .bss	00000004 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003bc0  w    F .text	00000006 low_voltage_isr
1fff1634 g     O .bss	00000024 button2
1fff11ac g     O .data	00000408 __malloc_av_
00003bc0  w    F .text	00000006 can0_error_isr
00002394 g     F .text	0000016c _init_Teensyduino_internal_
00001e14 g     F .text	00000058 usb_serial_flush_output
00003bc0  w    F .text	00000006 dma_ch12_isr
0000483c g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003bc0  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003bc0  w    F .text	00000006 pit3_isr
00003bc0  w    F .text	00000006 enet_rx_isr
00003bc0  w    F .text	00000006 portc_isr
00003848 g     F .text	00000010 main
1fff1d00 g     O .bss	00000004 __malloc_max_total_mem
1fff183c g     O .bss	00000018 led3
00003b78  w    F .text	00000048 memmanage_fault_isr
00003e9c g     F .text	00000084 usb_init_serialnumber
1fff1808 g     O .bss	00000001 currentMode
00004ef8 g       .text	00000000 __init_array_end
000042cc g     F .text	00000570 _malloc_r
00003bc0  w    F .text	00000006 debugmonitor_isr
1fff18a8 g     O .bss	00000004 usb_midi_handleSongPosition
0000406c g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1898 g     O .bss	00000004 usb_midi_handleContinue
1fff1d45 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003bc0  w    F .text	00000006 cmp1_isr
1fff1658 g     O .bss	00000024 button3
00003bc0  w    F .text	00000006 ftm0_isr
000048b0 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
00001cac g     F .text	00000108 usb_serial_write
00003bd4  w    F .text	00000002 startup_late_hook
00003800  w    F .text	00000004 usb_serial_class::available()
1fff1d46 g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
000022f0 g     F .text	000000a4 delay
00003bc0  w    F .text	00000006 tpm0_isr
00004ef8 g     F .fini	00000000 _fini
1fff16fc g     O .bss	00000014 step2
00003bc0  w    F .text	00000006 i2s0_rx_isr
00003bc0  w    F .text	00000006 uart4_error_isr
00002548 g     F .text	0000009c usb_midi_write_packed
0000487c g     F .text	0000000c atexit
00003bc0  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
00003bc0  w    F .text	00000006 can1_message_isr
00003bc0  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff18c0 g     O .bss	00000004 usb_midi_handleTuneRequest
00004eec g       .text	00000000 __preinit_array_end
00003bc0  w    F .text	00000006 sdhc_isr
1fff1d47 g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00004e88 g     O .text	00000054 usb_descriptor_list
00002ad8 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1780 g     O .bss	00000018 knob4
00003bc0  w    F .text	00000006 dma_ch10_isr
1fff17b0 g     O .bss	00000058 sequence1
1fff18b8 g     O .bss	00000004 usb_midi_handleStart
00003bc0  w    F .text	00000006 uart0_error_isr
00002a4c g     F .text	00000040 usb_malloc
00003bc0  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001dcc g     F .text	00000048 usb_serial_write_buffer_free
00003bc0  w    F .text	00000006 enet_timer_isr
1fff16c4 g     O .bss	00000024 button6
1fff1610 g     O .bss	00000024 button1
1fff15bc g       .data	00000000 _edata
00003bc0  w    F .text	00000006 i2s0_tx_isr
00003bc0  w    F .text	00000006 adc1_isr
00003808  w    F .text	00000004 usb_serial_class::availableForWrite()
00003bc0  w    F .text	00000006 cmp0_isr
1fff1888 g     O .bss	00000004 usb_midi_handleClock
00003f20 g     F .text	0000004c ultoa
00004108 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
000037f8  w    F .text	00000004 usb_serial_class::peek()
1fff186c g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff18a4 g     O .bss	00000004 usb_midi_handlePitchChange
00003bc0  w    F .text	00000006 pit_isr
1fff18bc g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003bc0  w    F .text	00000006 dac0_isr
00004eec g       .text	00000000 __init_array_start
00003bc0  w    F .text	00000006 can1_tx_warn_isr
000020d8 g     F .text	000000fc analogRead
1fff1d48 g     O .bss	00000122 usb_midi_msg_sysex
00003c8c g     F .text	0000010c uart0_status_isr
00003bc0  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
00003bc0  w    F .text	00000006 dma_ch1_isr
00002b14 g     F .text	0000002c usb_tx_packet_count
00003bc0  w    F .text	00000006 dma_ch5_isr
00003bc0  w    F .text	00000006 can0_rx_warn_isr
00003bc0  w    F .text	00000006 can0_tx_warn_isr
0000387c g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003c04 g     F .text	00000034 kinetis_hsrun_disable
00004eec g       .text	00000000 __preinit_array_start
00004068  w    F .text	00000002 serialEvent3()
1fff18d8 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff1824 g     O .bss	00000018 led2
00003bc0  w    F .text	00000006 cmp2_isr
0000414c g     F .text	00000004 pendablesrvreq_isr
00003bc0  w    F .text	00000006 wakeup_isr
00003bc0  w    F .text	00000006 cmp3_isr
1fff1890 g     O .bss	00000004 usb_midi_handleActiveSensing
00003bc0  w    F .text	00000006 tpm2_isr
00003bc0  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
00003bc0  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....;..y;..
      10:	y;..y;..y;..y;..
      20:	y;..y;..y;...;..
      30:	.;..y;..MA..QB..
      40:	.;...;...;...;..
      50:	.;...;...;...;..
      60:	.;...;...;...;..
      70:	.;...;...;...;..
      80:	.;...;...;...;..
      90:	.;...;...;...;..
      a0:	.;...;...;...;..
      b0:	.;...;...;...<..
      c0:	.;..u9...;...?..
      d0:	.;...:...;...;..
      e0:	.;...;...;...;..
      f0:	.;...;...;...;..
     100:	.;...;...;...;..
     110:	.;...,...;...;..
     120:	.;...;...;...;..
     130:	.;...;...;...;..
     140:	.;...;..}8...;..
     150:	.;...;...;...;..
     160:	.;...;...;...;..
     170:	.;...;...;...;..
     180:	.;...;...;...;..
     190:	.;...;...=...;..
     1a0:	.;...;...;...;..
     1b0:	.;...;...;...;..
     1c0:	.;...;...;...;..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3bc8 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	2394 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2298 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2298 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	426c <__libc_init_array>

	startup_late_hook();
     33a:	bl	3bd4 <startup_late_hook>
	main();
     33e:	bl	3848 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x00004ef8
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15c0
     380:	.word	0x1fff1e7c
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15c0
     42c:	.word	0x00000000
     430:	.word	0x00004efc

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c4
     460:	.word	0x00004efc
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	22e4 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	22bc <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);
Knob knob5(A4, sequence1, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #212	; 0xd4
     49c:	bl	2610 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	a22 <loop+0x58e>
     4a6:	ldr	r4, [pc, #644]	; (72c <loop+0x298>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #644]	; (730 <loop+0x29c>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	22c8 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	a4a <loop+0x5b6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #84]	; 0x54
	return ret;
     4c4:	ldr	r3, [sp, #84]	; 0x54
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #80]	; 0x50
	return ret;
     4cc:	ldr	r1, [sp, #80]	; 0x50
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #604]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r3, r1
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #596]	; (730 <loop+0x29c>)
     4da:	cmp	r5, r3
     4dc:	beq.w	a98 <loop+0x604>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r5, #0
     4e4:	beq.w	aa0 <loop+0x60c>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r5, [pc, #584]	; (734 <loop+0x2a0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r5, #32]
     4f0:	bl	22c8 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r5, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r6, r0
     4fc:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	a5e <loop+0x5ca>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #76]	; 0x4c
	return ret;
     506:	ldr	r3, [sp, #76]	; 0x4c
        m_lastDebounceTime = millis();
     508:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #72]	; 0x48
	return ret;
     50e:	ldr	r1, [sp, #72]	; 0x48
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #536]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r3, r1
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r5, #4]
     51a:	ldr	r7, [pc, #536]	; (734 <loop+0x2a0>)
     51c:	cmp	r6, r3
     51e:	beq.w	a8c <loop+0x5f8>
          m_state = reading;
     522:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r6, #0
     526:	beq.w	ada <loop+0x646>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r6, [pc, #524]	; (738 <loop+0x2a4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r6, #32]
     532:	bl	22c8 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r6, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r5, r0
     53e:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	a5a <loop+0x5c6>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #68]	; 0x44
	return ret;
     548:	ldr	r3, [sp, #68]	; 0x44
        m_lastDebounceTime = millis();
     54a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #64]	; 0x40
	return ret;
     550:	ldr	r1, [sp, #64]	; 0x40
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #472]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r6, #4]
     55c:	ldr	r7, [pc, #472]	; (738 <loop+0x2a4>)
     55e:	cmp	r5, r3
     560:	beq.w	a88 <loop+0x5f4>
          m_state = reading;
     564:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r5, #0
     568:	beq.w	b14 <loop+0x680>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r5, [pc, #460]	; (73c <loop+0x2a8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r5, #32]
     574:	bl	22c8 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r5, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r6, r0
     580:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	a56 <loop+0x5c2>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #60]	; 0x3c
	return ret;
     58a:	ldr	r3, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     58c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #56]	; 0x38
	return ret;
     592:	ldr	r1, [sp, #56]	; 0x38
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #404]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r1, r3
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r5, #4]
     59e:	ldr	r7, [pc, #412]	; (73c <loop+0x2a8>)
     5a0:	cmp	r6, r3
     5a2:	beq.w	a94 <loop+0x600>
          m_state = reading;
     5a6:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r6, #0
     5aa:	beq.w	b4e <loop+0x6ba>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #400]	; (740 <loop+0x2ac>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	22c8 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	a52 <loop+0x5be>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #52]	; 0x34
	return ret;
     5cc:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #48]	; 0x30
	return ret;
     5d4:	ldr	r1, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #340]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #348]	; (740 <loop+0x2ac>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	a90 <loop+0x5fc>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r5, #0
     5ec:	beq.w	b88 <loop+0x6f4>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f0:	ldr	r5, [pc, #336]	; (744 <loop+0x2b0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r5, #32]
     5f8:	bl	22c8 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5fc:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5fe:	str	r0, [r5, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     600:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     602:	mov	r6, r0
     604:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     606:	beq.w	a4e <loop+0x5ba>
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #44]	; 0x2c
	return ret;
     60e:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     610:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #40]	; 0x28
	return ret;
     616:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     618:	ldr.w	r8, [pc, #272]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     61c:	cmp	r1, r3
     61e:	beq.n	666 <loop+0x1d2>
        if (reading != m_state) {
     620:	ldr	r3, [r5, #4]
     622:	ldr	r7, [pc, #288]	; (744 <loop+0x2b0>)
     624:	cmp	r6, r3
     626:	beq.w	a9c <loop+0x608>
          m_state = reading;
     62a:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     62c:	cbnz	r6, 666 <loop+0x1d2>
     62e:	ldrb	r3, [r7, #16]
     630:	cmp	r3, #0
     632:	bne.w	f98 <loop+0xb04>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     636:	ldrb	r3, [r7, #17]
     638:	cmp	r3, #0
     63a:	bne.w	11d8 <loop+0xd44>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     63e:	ldr	r3, [r7, #24]
     640:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     644:	clz	r1, r1
     648:	lsrs	r1, r1, #5
     64a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     64c:	uxtb	r0, r0
     64e:	bl	22bc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     652:	ldr	r3, [r7, #0]
     654:	ldr	r1, [r7, #28]
     656:	ldr	r2, [r7, #12]
     658:	adds	r3, #9
     65a:	ldr.w	r1, [r1, r3, lsl #2]
      m_velocity = 100;
      m_length = 1;
    };

    void toggle () {
      m_state = !m_state;
     65e:	ldrb	r3, [r1, #4]
     660:	eor.w	r3, r3, #1
     664:	strb	r3, [r1, #4]
    };

    int check () {
      if (!blinking) {
     666:	ldr	r6, [pc, #224]	; (748 <loop+0x2b4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     668:	str	r2, [r5, #8]
     66a:	ldrb	r3, [r6, #16]
     66c:	cbz	r3, 682 <loop+0x1ee>
     66e:	ldr	r3, [r4, #0]
     670:	str	r3, [sp, #36]	; 0x24
	return ret;
     672:	ldr	r3, [sp, #36]	; 0x24
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     674:	ldr	r1, [r6, #8]
     676:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     678:	ldr	r5, [pc, #176]	; (72c <loop+0x298>)
     67a:	subs	r3, r3, r1
     67c:	cmp	r3, r2
     67e:	bhi.w	8ba <loop+0x426>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     682:	ldr	r5, [pc, #200]	; (74c <loop+0x2b8>)
     684:	ldrb	r3, [r5, #16]
     686:	cbz	r3, 69c <loop+0x208>
     688:	ldr	r3, [r4, #0]
     68a:	str	r3, [sp, #32]
	return ret;
     68c:	ldr	r3, [sp, #32]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     68e:	ldr	r1, [r5, #8]
     690:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     692:	ldr	r6, [pc, #152]	; (72c <loop+0x298>)
     694:	subs	r3, r3, r1
     696:	cmp	r3, r2
     698:	bhi.w	9da <loop+0x546>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     69c:	ldr	r5, [pc, #176]	; (750 <loop+0x2bc>)
     69e:	ldrb	r3, [r5, #16]
     6a0:	cbz	r3, 6b6 <loop+0x222>
     6a2:	ldr	r3, [r4, #0]
     6a4:	str	r3, [sp, #28]
	return ret;
     6a6:	ldr	r3, [sp, #28]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6a8:	ldr	r1, [r5, #8]
     6aa:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6ac:	ldr	r6, [pc, #124]	; (72c <loop+0x298>)
     6ae:	subs	r3, r3, r1
     6b0:	cmp	r3, r2
     6b2:	bhi.w	992 <loop+0x4fe>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     6b6:	ldr	r5, [pc, #156]	; (754 <loop+0x2c0>)
     6b8:	ldrb	r3, [r5, #16]
     6ba:	cbz	r3, 6d0 <loop+0x23c>
     6bc:	ldr	r3, [r4, #0]
     6be:	str	r3, [sp, #24]
	return ret;
     6c0:	ldr	r3, [sp, #24]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6c2:	ldr	r1, [r5, #8]
     6c4:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6c6:	ldr	r6, [pc, #100]	; (72c <loop+0x298>)
     6c8:	subs	r3, r3, r1
     6ca:	cmp	r3, r2
     6cc:	bhi.w	94a <loop+0x4b6>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     6d0:	ldr	r5, [pc, #132]	; (758 <loop+0x2c4>)
     6d2:	ldrb	r3, [r5, #16]
     6d4:	cbz	r3, 6ea <loop+0x256>
     6d6:	ldr	r3, [r4, #0]
     6d8:	str	r3, [sp, #20]
	return ret;
     6da:	ldr	r3, [sp, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6dc:	ldr	r1, [r5, #8]
     6de:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6e0:	ldr	r6, [pc, #72]	; (72c <loop+0x298>)
     6e2:	subs	r3, r3, r1
     6e4:	cmp	r3, r2
     6e6:	bhi.w	902 <loop+0x46e>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     6ea:	ldr	r5, [pc, #112]	; (75c <loop+0x2c8>)
     6ec:	ldrb	r3, [r5, #16]
     6ee:	cbz	r3, 704 <loop+0x270>
     6f0:	ldr	r3, [r4, #0]
     6f2:	str	r3, [sp, #16]
	return ret;
     6f4:	ldr	r3, [sp, #16]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6f6:	ldr	r1, [r5, #8]
     6f8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6fa:	ldr	r4, [pc, #48]	; (72c <loop+0x298>)
     6fc:	subs	r3, r3, r1
     6fe:	cmp	r3, r2
     700:	bhi.w	872 <loop+0x3de>
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     704:	ldr	r4, [pc, #88]	; (760 <loop+0x2cc>)
     706:	ldrb	r0, [r4, #0]
     708:	bl	20d8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     70c:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     70e:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     710:	cmp	r0, r3
     712:	beq.n	77c <loop+0x2e8>
     714:	subs	r3, r0, r3
     716:	cmp	r3, #0
     718:	it	lt
     71a:	neglt	r3, r3
     71c:	cmp	r3, #10
     71e:	ble.n	77c <loop+0x2e8>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     720:	ldrb	r3, [r4, #20]
     722:	cmp	r3, #4
     724:	beq.w	12e8 <loop+0xe54>
     728:	b.n	764 <loop+0x2d0>
     72a:	nop
     72c:	.word	0x1fff1884
     730:	.word	0x1fff1610
     734:	.word	0x1fff1634
     738:	.word	0x1fff1658
     73c:	.word	0x1fff167c
     740:	.word	0x1fff16a0
     744:	.word	0x1fff16c4
     748:	.word	0x1fff180c
     74c:	.word	0x1fff1824
     750:	.word	0x1fff183c
     754:	.word	0x1fff1854
     758:	.word	0x1fff15dc
     75c:	.word	0x1fff15f4
     760:	.word	0x1fff1738
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     764:	ldr	r3, [pc, #764]	; (a64 <loop+0x5d0>)
     766:	ldrb	r3, [r3, #0]
     768:	cmp	r3, #1
     76a:	beq.w	d2a <loop+0x896>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     76e:	cmp	r3, #0
     770:	beq.w	bc2 <loop+0x72e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     774:	cmp	r3, #2
     776:	beq.w	e4e <loop+0x9ba>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     77a:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     77c:	ldr	r4, [pc, #744]	; (a68 <loop+0x5d4>)
     77e:	ldrb	r0, [r4, #0]
     780:	bl	20d8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     784:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     786:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     788:	cmp	r0, r3
     78a:	beq.n	7b8 <loop+0x324>
     78c:	subs	r3, r0, r3
     78e:	cmp	r3, #0
     790:	it	lt
     792:	neglt	r3, r3
     794:	cmp	r3, #10
     796:	ble.n	7b8 <loop+0x324>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     798:	ldrb	r3, [r4, #20]
     79a:	cmp	r3, #4
     79c:	beq.w	12ca <loop+0xe36>
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     7a0:	ldr	r3, [pc, #704]	; (a64 <loop+0x5d0>)
     7a2:	ldrb	r3, [r3, #0]
     7a4:	cmp	r3, #1
     7a6:	beq.w	d46 <loop+0x8b2>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     7aa:	cmp	r3, #0
     7ac:	beq.w	be2 <loop+0x74e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     7b0:	cmp	r3, #2
     7b2:	beq.w	db6 <loop+0x922>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7b6:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7b8:	ldr	r4, [pc, #688]	; (a6c <loop+0x5d8>)
     7ba:	ldrb	r0, [r4, #0]
     7bc:	bl	20d8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     7c0:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7c2:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     7c4:	cmp	r0, r3
     7c6:	beq.n	7f4 <loop+0x360>
     7c8:	subs	r3, r0, r3
     7ca:	cmp	r3, #0
     7cc:	it	lt
     7ce:	neglt	r3, r3
     7d0:	cmp	r3, #10
     7d2:	ble.n	7f4 <loop+0x360>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     7d4:	ldrb	r3, [r4, #20]
     7d6:	cmp	r3, #4
     7d8:	beq.w	12ac <loop+0xe18>
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     7dc:	ldr	r3, [pc, #644]	; (a64 <loop+0x5d0>)
     7de:	ldrb	r3, [r3, #0]
     7e0:	cmp	r3, #1
     7e2:	beq.w	d62 <loop+0x8ce>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     7e6:	cmp	r3, #0
     7e8:	beq.w	c02 <loop+0x76e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     7ec:	cmp	r3, #2
     7ee:	beq.w	dea <loop+0x956>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7f2:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7f4:	ldr	r4, [pc, #632]	; (a70 <loop+0x5dc>)
     7f6:	ldrb	r0, [r4, #0]
     7f8:	bl	20d8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     7fc:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7fe:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     800:	cmp	r0, r3
     802:	beq.n	830 <loop+0x39c>
     804:	subs	r3, r0, r3
     806:	cmp	r3, #0
     808:	it	lt
     80a:	neglt	r3, r3
     80c:	cmp	r3, #10
     80e:	ble.n	830 <loop+0x39c>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     810:	ldrb	r3, [r4, #20]
     812:	cmp	r3, #4
     814:	beq.w	1306 <loop+0xe72>
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     818:	ldr	r3, [pc, #584]	; (a64 <loop+0x5d0>)
     81a:	ldrb	r3, [r3, #0]
     81c:	cmp	r3, #1
     81e:	beq.w	d9a <loop+0x906>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     822:	cmp	r3, #0
     824:	beq.w	c22 <loop+0x78e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     828:	cmp	r3, #2
     82a:	beq.w	e80 <loop+0x9ec>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     82e:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     830:	ldr	r4, [pc, #576]	; (a74 <loop+0x5e0>)
     832:	ldrb	r0, [r4, #0]
     834:	bl	20d8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     838:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     83a:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     83c:	cmp	r0, r3
     83e:	beq.n	86c <loop+0x3d8>
     840:	subs	r3, r0, r3
     842:	cmp	r3, #0
     844:	it	lt
     846:	neglt	r3, r3
     848:	cmp	r3, #10
     84a:	ble.n	86c <loop+0x3d8>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     84c:	ldrb	r3, [r4, #20]
     84e:	cmp	r3, #4
     850:	beq.w	128c <loop+0xdf8>
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     854:	ldr	r3, [pc, #524]	; (a64 <loop+0x5d0>)
     856:	ldrb	r3, [r3, #0]
     858:	cmp	r3, #1
     85a:	beq.w	d7e <loop+0x8ea>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     85e:	cmp	r3, #0
     860:	beq.w	c42 <loop+0x7ae>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     864:	cmp	r3, #2
     866:	beq.w	e1c <loop+0x988>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     86a:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     86c:	add	sp, #212	; 0xd4
     86e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        digitalWrite(m_pin, !digitalRead(m_pin));
     872:	ldrb	r6, [r5, #0]
     874:	mov	r0, r6
     876:	bl	22c8 <digitalRead>
     87a:	clz	r1, r0
     87e:	lsrs	r1, r1, #5
     880:	mov	r0, r6
     882:	bl	22bc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     886:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     888:	movs	r2, #0

        if (blinkingCounter > 0) {
     88a:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     88c:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     88e:	ble.w	704 <loop+0x270>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     892:	ldrb	r6, [r5, #0]
     894:	mov	r0, r6
     896:	bl	22c8 <digitalRead>
     89a:	clz	r1, r0
     89e:	lsrs	r1, r1, #5
     8a0:	mov	r0, r6
     8a2:	bl	22bc <digitalWrite>
     8a6:	ldr	r3, [r4, #0]
     8a8:	str	r3, [sp, #204]	; 0xcc
	return ret;
     8aa:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     8ac:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8ae:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8b0:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8b4:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8b6:	str	r3, [r5, #20]
     8b8:	b.n	704 <loop+0x270>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     8ba:	ldrb	r7, [r6, #0]
     8bc:	mov	r0, r7
     8be:	bl	22c8 <digitalRead>
     8c2:	clz	r1, r0
     8c6:	lsrs	r1, r1, #5
     8c8:	mov	r0, r7
     8ca:	bl	22bc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     8ce:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8d0:	movs	r2, #0

        if (blinkingCounter > 0) {
     8d2:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8d4:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     8d6:	ble.w	682 <loop+0x1ee>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     8da:	ldrb	r7, [r6, #0]
     8dc:	mov	r0, r7
     8de:	bl	22c8 <digitalRead>
     8e2:	clz	r1, r0
     8e6:	lsrs	r1, r1, #5
     8e8:	mov	r0, r7
     8ea:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8ee:	ldr	r3, [r5, #0]
     8f0:	str	r3, [sp, #184]	; 0xb8
	return ret;
     8f2:	ldr	r3, [sp, #184]	; 0xb8
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     8f4:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8f6:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8f8:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8fc:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8fe:	str	r3, [r6, #20]
     900:	b.n	682 <loop+0x1ee>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     902:	ldrb	r7, [r5, #0]
     904:	mov	r0, r7
     906:	bl	22c8 <digitalRead>
     90a:	clz	r1, r0
     90e:	lsrs	r1, r1, #5
     910:	mov	r0, r7
     912:	bl	22bc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     916:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     918:	movs	r2, #0

        if (blinkingCounter > 0) {
     91a:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     91c:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     91e:	ble.w	6ea <loop+0x256>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     922:	ldrb	r7, [r5, #0]
     924:	mov	r0, r7
     926:	bl	22c8 <digitalRead>
     92a:	clz	r1, r0
     92e:	lsrs	r1, r1, #5
     930:	mov	r0, r7
     932:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     936:	ldr	r3, [r6, #0]
     938:	str	r3, [sp, #200]	; 0xc8
	return ret;
     93a:	ldr	r3, [sp, #200]	; 0xc8
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     93c:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     93e:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     940:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     944:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     946:	str	r3, [r5, #20]
     948:	b.n	6ea <loop+0x256>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     94a:	ldrb	r7, [r5, #0]
     94c:	mov	r0, r7
     94e:	bl	22c8 <digitalRead>
     952:	clz	r1, r0
     956:	lsrs	r1, r1, #5
     958:	mov	r0, r7
     95a:	bl	22bc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     95e:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     960:	movs	r2, #0

        if (blinkingCounter > 0) {
     962:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     964:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     966:	ble.w	6d0 <loop+0x23c>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     96a:	ldrb	r7, [r5, #0]
     96c:	mov	r0, r7
     96e:	bl	22c8 <digitalRead>
     972:	clz	r1, r0
     976:	lsrs	r1, r1, #5
     978:	mov	r0, r7
     97a:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     97e:	ldr	r3, [r6, #0]
     980:	str	r3, [sp, #196]	; 0xc4
	return ret;
     982:	ldr	r3, [sp, #196]	; 0xc4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     984:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     986:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     988:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     98c:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     98e:	str	r3, [r5, #20]
     990:	b.n	6d0 <loop+0x23c>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     992:	ldrb	r7, [r5, #0]
     994:	mov	r0, r7
     996:	bl	22c8 <digitalRead>
     99a:	clz	r1, r0
     99e:	lsrs	r1, r1, #5
     9a0:	mov	r0, r7
     9a2:	bl	22bc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9a6:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9a8:	movs	r2, #0

        if (blinkingCounter > 0) {
     9aa:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9ac:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9ae:	ble.w	6b6 <loop+0x222>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9b2:	ldrb	r7, [r5, #0]
     9b4:	mov	r0, r7
     9b6:	bl	22c8 <digitalRead>
     9ba:	clz	r1, r0
     9be:	lsrs	r1, r1, #5
     9c0:	mov	r0, r7
     9c2:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9c6:	ldr	r3, [r6, #0]
     9c8:	str	r3, [sp, #192]	; 0xc0
	return ret;
     9ca:	ldr	r3, [sp, #192]	; 0xc0
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     9cc:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9ce:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9d0:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9d4:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9d6:	str	r3, [r5, #20]
     9d8:	b.n	6b6 <loop+0x222>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     9da:	ldrb	r7, [r5, #0]
     9dc:	mov	r0, r7
     9de:	bl	22c8 <digitalRead>
     9e2:	clz	r1, r0
     9e6:	lsrs	r1, r1, #5
     9e8:	mov	r0, r7
     9ea:	bl	22bc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9ee:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9f0:	movs	r2, #0

        if (blinkingCounter > 0) {
     9f2:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9f4:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9f6:	ble.w	69c <loop+0x208>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9fa:	ldrb	r7, [r5, #0]
     9fc:	mov	r0, r7
     9fe:	bl	22c8 <digitalRead>
     a02:	clz	r1, r0
     a06:	lsrs	r1, r1, #5
     a08:	mov	r0, r7
     a0a:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a0e:	ldr	r3, [r6, #0]
     a10:	str	r3, [sp, #188]	; 0xbc
	return ret;
     a12:	ldr	r3, [sp, #188]	; 0xbc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a14:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a16:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a18:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a1c:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a1e:	str	r3, [r5, #20]
     a20:	b.n	69c <loop+0x208>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     a22:	ldr	r3, [pc, #84]	; (a78 <loop+0x5e4>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     a24:	ldrb	r3, [r3, #0]
     a26:	cmp	r3, #250	; 0xfa
     a28:	beq.w	c84 <loop+0x7f0>
     a2c:	cmp	r3, #252	; 0xfc
     a2e:	beq.w	c62 <loop+0x7ce>
     a32:	cmp	r3, #248	; 0xf8
     a34:	beq.w	cf6 <loop+0x862>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     a38:	movs	r1, #35	; 0x23
     a3a:	ldr	r0, [pc, #64]	; (a7c <loop+0x5e8>)
     a3c:	ldr	r4, [pc, #64]	; (a80 <loop+0x5ec>)
     a3e:	bl	1cac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     a42:	ldr	r0, [pc, #64]	; (a84 <loop+0x5f0>)
     a44:	bl	3820 <Print::println()>
     a48:	b.n	4a8 <loop+0x14>
     a4a:	ldr	r3, [r6, #20]
     a4c:	b.n	4c8 <loop+0x34>
     a4e:	ldr	r3, [r5, #20]
     a50:	b.n	612 <loop+0x17e>
     a52:	ldr	r3, [r6, #20]
     a54:	b.n	5d0 <loop+0x13c>
     a56:	ldr	r3, [r5, #20]
     a58:	b.n	58e <loop+0xfa>
     a5a:	ldr	r3, [r6, #20]
     a5c:	b.n	54c <loop+0xb8>
     a5e:	ldr	r3, [r5, #20]
     a60:	b.n	50a <loop+0x76>
     a62:	nop
     a64:	.word	0x1fff1808
     a68:	.word	0x1fff1750
     a6c:	.word	0x1fff1768
     a70:	.word	0x1fff1780
     a74:	.word	0x1fff1798
     a78:	.word	0x1fff1d40
     a7c:	.word	0x00004bc0
     a80:	.word	0x1fff1884
     a84:	.word	0x1fff0c70
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     a88:	mov	r2, r5
     a8a:	b.n	56c <loop+0xd8>
     a8c:	mov	r2, r6
     a8e:	b.n	52a <loop+0x96>
     a90:	mov	r2, r5
     a92:	b.n	5f0 <loop+0x15c>
     a94:	mov	r2, r6
     a96:	b.n	5ae <loop+0x11a>
     a98:	mov	r2, r5
     a9a:	b.n	4e8 <loop+0x54>
     a9c:	mov	r2, r6
     a9e:	b.n	666 <loop+0x1d2>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     aa0:	ldrb	r3, [r7, #16]
     aa2:	cmp	r3, #0
     aa4:	bne.w	1148 <loop+0xcb4>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     aa8:	ldrb	r3, [r7, #17]
     aaa:	cmp	r3, #0
     aac:	bne.w	1268 <loop+0xdd4>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     ab0:	ldr	r3, [r7, #24]
     ab2:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ab6:	clz	r1, r1
     aba:	lsrs	r1, r1, #5
     abc:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     abe:	uxtb	r0, r0
     ac0:	bl	22bc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     ac4:	ldr	r3, [r7, #0]
     ac6:	ldr	r1, [r7, #28]
     ac8:	ldr	r2, [r7, #12]
     aca:	adds	r3, #9
     acc:	ldr.w	r1, [r1, r3, lsl #2]
     ad0:	ldrb	r3, [r1, #4]
     ad2:	eor.w	r3, r3, #1
     ad6:	strb	r3, [r1, #4]
     ad8:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     ada:	ldrb	r3, [r7, #16]
     adc:	cmp	r3, #0
     ade:	bne.w	10dc <loop+0xc48>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     ae2:	ldrb	r3, [r7, #17]
     ae4:	cmp	r3, #0
     ae6:	bne.w	11fc <loop+0xd68>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     aea:	ldr	r3, [r7, #24]
     aec:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     af0:	clz	r1, r1
     af4:	lsrs	r1, r1, #5
     af6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     af8:	uxtb	r0, r0
     afa:	bl	22bc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     afe:	ldr	r3, [r7, #0]
     b00:	ldr	r1, [r7, #28]
     b02:	ldr	r2, [r7, #12]
     b04:	adds	r3, #9
     b06:	ldr.w	r1, [r1, r3, lsl #2]
     b0a:	ldrb	r3, [r1, #4]
     b0c:	eor.w	r3, r3, #1
     b10:	strb	r3, [r1, #4]
     b12:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b14:	ldrb	r3, [r7, #16]
     b16:	cmp	r3, #0
     b18:	bne.w	1070 <loop+0xbdc>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b1c:	ldrb	r3, [r7, #17]
     b1e:	cmp	r3, #0
     b20:	bne.w	1244 <loop+0xdb0>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b24:	ldr	r3, [r7, #24]
     b26:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b2a:	clz	r1, r1
     b2e:	lsrs	r1, r1, #5
     b30:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b32:	uxtb	r0, r0
     b34:	bl	22bc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     b38:	ldr	r3, [r7, #0]
     b3a:	ldr	r1, [r7, #28]
     b3c:	ldr	r2, [r7, #12]
     b3e:	adds	r3, #9
     b40:	ldr.w	r1, [r1, r3, lsl #2]
     b44:	ldrb	r3, [r1, #4]
     b46:	eor.w	r3, r3, #1
     b4a:	strb	r3, [r1, #4]
     b4c:	b.n	56c <loop+0xd8>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b4e:	ldrb	r3, [r7, #16]
     b50:	cmp	r3, #0
     b52:	bne.w	1004 <loop+0xb70>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b56:	ldrb	r3, [r7, #17]
     b58:	cmp	r3, #0
     b5a:	bne.w	11b4 <loop+0xd20>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b5e:	ldr	r3, [r7, #24]
     b60:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b64:	clz	r1, r1
     b68:	lsrs	r1, r1, #5
     b6a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b6c:	uxtb	r0, r0
     b6e:	bl	22bc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     b72:	ldr	r3, [r7, #0]
     b74:	ldr	r1, [r7, #28]
     b76:	ldr	r2, [r7, #12]
     b78:	adds	r3, #9
     b7a:	ldr.w	r1, [r1, r3, lsl #2]
     b7e:	ldrb	r3, [r1, #4]
     b80:	eor.w	r3, r3, #1
     b84:	strb	r3, [r1, #4]
     b86:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b88:	ldrb	r3, [r7, #16]
     b8a:	cmp	r3, #0
     b8c:	bne.w	f2c <loop+0xa98>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b90:	ldrb	r3, [r7, #17]
     b92:	cmp	r3, #0
     b94:	bne.w	1220 <loop+0xd8c>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b98:	ldr	r3, [r7, #24]
     b9a:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b9e:	clz	r1, r1
     ba2:	lsrs	r1, r1, #5
     ba4:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ba6:	uxtb	r0, r0
     ba8:	bl	22bc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     bac:	ldr	r3, [r7, #0]
     bae:	ldr	r1, [r7, #28]
     bb0:	ldr	r2, [r7, #12]
     bb2:	adds	r3, #9
     bb4:	ldr.w	r1, [r1, r3, lsl #2]
     bb8:	ldrb	r3, [r1, #4]
     bba:	eor.w	r3, r3, #1
     bbe:	strb	r3, [r1, #4]
     bc0:	b.n	5f0 <loop+0x15c>
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
     bc2:	ldr	r3, [r4, #12]
     bc4:	ldr	r1, [r4, #16]
     bc6:	add.w	r2, r3, #10
      m_length = newValue;
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
     bca:	sub.w	r3, r0, r0, lsl #2
     bce:	lsls	r3, r3, #2
     bd0:	it	mi
     bd2:	addwmi	r3, r3, #1023	; 0x3ff
     bd6:	ldr.w	r2, [r1, r2, lsl #2]
     bda:	asrs	r3, r3, #10
     bdc:	adds	r3, #51	; 0x33
     bde:	str	r3, [r2, #8]
     be0:	b.n	77a <loop+0x2e6>
     be2:	ldr	r3, [r4, #12]
     be4:	ldr	r1, [r4, #16]
     be6:	add.w	r2, r3, #10
     bea:	sub.w	r3, r0, r0, lsl #2
     bee:	lsls	r3, r3, #2
     bf0:	it	mi
     bf2:	addwmi	r3, r3, #1023	; 0x3ff
     bf6:	ldr.w	r2, [r1, r2, lsl #2]
     bfa:	asrs	r3, r3, #10
     bfc:	adds	r3, #51	; 0x33
     bfe:	str	r3, [r2, #8]
     c00:	b.n	7b6 <loop+0x322>
     c02:	ldr	r3, [r4, #12]
     c04:	ldr	r1, [r4, #16]
     c06:	add.w	r2, r3, #10
     c0a:	sub.w	r3, r0, r0, lsl #2
     c0e:	lsls	r3, r3, #2
     c10:	it	mi
     c12:	addwmi	r3, r3, #1023	; 0x3ff
     c16:	ldr.w	r2, [r1, r2, lsl #2]
     c1a:	asrs	r3, r3, #10
     c1c:	adds	r3, #51	; 0x33
     c1e:	str	r3, [r2, #8]
     c20:	b.n	7f2 <loop+0x35e>
     c22:	ldr	r3, [r4, #12]
     c24:	ldr	r1, [r4, #16]
     c26:	add.w	r2, r3, #10
     c2a:	sub.w	r3, r0, r0, lsl #2
     c2e:	lsls	r3, r3, #2
     c30:	it	mi
     c32:	addwmi	r3, r3, #1023	; 0x3ff
     c36:	ldr.w	r2, [r1, r2, lsl #2]
     c3a:	asrs	r3, r3, #10
     c3c:	adds	r3, #51	; 0x33
     c3e:	str	r3, [r2, #8]
     c40:	b.n	82e <loop+0x39a>
     c42:	ldr	r3, [r4, #12]
     c44:	ldr	r1, [r4, #16]
     c46:	add.w	r2, r3, #10
     c4a:	sub.w	r3, r0, r0, lsl #2
     c4e:	lsls	r3, r3, #2
     c50:	it	mi
     c52:	addwmi	r3, r3, #1023	; 0x3ff
     c56:	ldr.w	r2, [r1, r2, lsl #2]
     c5a:	asrs	r3, r3, #10
     c5c:	adds	r3, #51	; 0x33
     c5e:	str	r3, [r2, #8]
     c60:	b.n	86a <loop+0x3d6>
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c62:	ldr	r3, [pc, #700]	; (f20 <loop+0xa8c>)
     c64:	ldr	r4, [pc, #700]	; (f24 <loop+0xa90>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[5]->toggle();
     c66:	ldr	r2, [r3, #76]	; 0x4c
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c68:	movs	r5, #0
      ppqn = 0;
     c6a:	str	r5, [r3, #28]
      m_currentStep = 0;
     c6c:	str	r5, [r3, #4]
     c6e:	ldmia.w	r2, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c72:	clz	r1, r1
     c76:	lsrs	r1, r1, #5
     c78:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     c7a:	uxtb	r0, r0
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c7c:	strb	r5, [r3, #0]
     c7e:	bl	22bc <digitalWrite>
     c82:	b.n	4a8 <loop+0x14>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     c84:	ldr	r5, [pc, #664]	; (f20 <loop+0xa8c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c86:	ldr	r4, [pc, #668]	; (f24 <loop+0xa90>)
      return num;
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     c88:	ldr	r3, [r5, #4]
     c8a:	adds	r3, #14
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     c8c:	mov.w	r8, #1
      return num;
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     c90:	ldr.w	r6, [r5, r3, lsl #2]
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     c94:	strb.w	r8, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c98:	ldrb.w	r9, [r6]
      ppqn = 0;
     c9c:	movs	r7, #0
     c9e:	mov	r0, r9
     ca0:	str	r7, [r5, #28]
     ca2:	bl	22c8 <digitalRead>
     ca6:	clz	r1, r0
     caa:	lsrs	r1, r1, #5
     cac:	mov	r0, r9
     cae:	bl	22bc <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep]->m_state) {
     cb2:	ldr	r3, [r5, #4]
     cb4:	ldr	r2, [r4, #0]
     cb6:	str	r2, [sp, #12]
     cb8:	add.w	r2, r3, #10
      blinking = true;
     cbc:	strb.w	r8, [r6, #16]
     cc0:	ldr.w	r8, [r5, r2, lsl #2]
	return ret;
     cc4:	ldr	r1, [sp, #12]
     cc6:	ldrb.w	r2, [r8, #4]
      blinkingCounter = times;
     cca:	str	r7, [r6, #20]
      lastBlink = millis();  
     ccc:	str	r1, [r6, #8]
     cce:	cmp	r2, #0
     cd0:	bne.w	1324 <loop+0xe90>
          activeNote = m_steps[m_currentStep]->play();
        }

        m_currentStep++;
     cd4:	adds	r3, #1

        if (m_currentStep > 3) {
     cd6:	cmp	r3, #3
          m_currentStep = 0;
     cd8:	it	gt
     cda:	movgt	r3, #0
     cdc:	str	r3, [r5, #4]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[5]->toggle();
     cde:	ldr	r3, [r5, #76]	; 0x4c
     ce0:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     ce4:	clz	r1, r1
     ce8:	lsrs	r1, r1, #5
     cea:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     cec:	uxtb	r0, r0
     cee:	bl	22bc <digitalWrite>
     cf2:	b.w	4a8 <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     cf6:	ldr	r5, [pc, #552]	; (f20 <loop+0xa8c>)

      if (ppqn >= m_steps[m_currentStep]->m_length) {
     cf8:	ldr	r2, [r5, #4]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     cfa:	ldr	r3, [r5, #28]

      if (ppqn >= m_steps[m_currentStep]->m_length) {
     cfc:	adds	r2, #10
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     cfe:	adds	r3, #1

      if (ppqn >= m_steps[m_currentStep]->m_length) {
     d00:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d04:	str	r3, [r5, #28]

      if (ppqn >= m_steps[m_currentStep]->m_length) {
     d06:	ldr	r2, [r2, #16]
     d08:	cmp	r3, r2
     d0a:	bge.w	1354 <loop+0xec0>
        // of the active note to see if i do the stop step
        m_steps[m_currentStep]->stop();
      }


      if (ppqn == max_ppqn) {
     d0e:	ldr	r2, [r5, #32]
     d10:	ldr	r6, [pc, #524]	; (f20 <loop+0xa8c>)
     d12:	cmp	r2, r3
     d14:	bne.w	4a6 <loop+0x12>
      int num = rand() % range + min;
      return num;
    };

    void doStep () {  
      if (m_state) {
     d18:	ldrb	r3, [r6, #0]
     d1a:	cmp	r3, #0
     d1c:	bne.w	13ce <loop+0xf3a>
     d20:	ldr	r4, [pc, #512]	; (f24 <loop+0xa90>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     d22:	movs	r3, #0
     d24:	str	r3, [r5, #28]
     d26:	b.w	4a8 <loop+0x14>
    void onChange () {
      if (m_knobType == FIFTH) {
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
     d2a:	ldr	r3, [r4, #12]
     d2c:	ldr	r2, [r4, #16]
     d2e:	adds	r3, #10
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
     d30:	ldr.w	r2, [r2, r3, lsl #2]
     d34:	subs.w	r3, r0, r0, lsl #6
     d38:	it	mi
     d3a:	addwmi	r3, r3, #1023	; 0x3ff
     d3e:	asrs	r3, r3, #10
     d40:	adds	r3, #127	; 0x7f
     d42:	str	r3, [r2, #12]
     d44:	b.n	77a <loop+0x2e6>
     d46:	ldr	r3, [r4, #12]
     d48:	ldr	r2, [r4, #16]
     d4a:	adds	r3, #10
     d4c:	ldr.w	r2, [r2, r3, lsl #2]
     d50:	subs.w	r3, r0, r0, lsl #6
     d54:	it	mi
     d56:	addwmi	r3, r3, #1023	; 0x3ff
     d5a:	asrs	r3, r3, #10
     d5c:	adds	r3, #127	; 0x7f
     d5e:	str	r3, [r2, #12]
     d60:	b.n	7b6 <loop+0x322>
     d62:	ldr	r3, [r4, #12]
     d64:	ldr	r2, [r4, #16]
     d66:	adds	r3, #10
     d68:	ldr.w	r2, [r2, r3, lsl #2]
     d6c:	subs.w	r3, r0, r0, lsl #6
     d70:	it	mi
     d72:	addwmi	r3, r3, #1023	; 0x3ff
     d76:	asrs	r3, r3, #10
     d78:	adds	r3, #127	; 0x7f
     d7a:	str	r3, [r2, #12]
     d7c:	b.n	7f2 <loop+0x35e>
     d7e:	ldr	r3, [r4, #12]
     d80:	ldr	r2, [r4, #16]
     d82:	adds	r3, #10
     d84:	ldr.w	r2, [r2, r3, lsl #2]
     d88:	subs.w	r3, r0, r0, lsl #6
     d8c:	it	mi
     d8e:	addwmi	r3, r3, #1023	; 0x3ff
     d92:	asrs	r3, r3, #10
     d94:	adds	r3, #127	; 0x7f
     d96:	str	r3, [r2, #12]
     d98:	b.n	86a <loop+0x3d6>
     d9a:	ldr	r3, [r4, #12]
     d9c:	ldr	r2, [r4, #16]
     d9e:	adds	r3, #10
     da0:	ldr.w	r2, [r2, r3, lsl #2]
     da4:	subs.w	r3, r0, r0, lsl #6
     da8:	it	mi
     daa:	addwmi	r3, r3, #1023	; 0x3ff
     dae:	asrs	r3, r3, #10
     db0:	adds	r3, #127	; 0x7f
     db2:	str	r3, [r2, #12]
     db4:	b.n	82e <loop+0x39a>
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
          m_sequence.m_steps[m_id]->controlLength(m_value);
     db6:	ldr	r3, [r4, #12]
     db8:	ldr	r2, [r4, #16]
     dba:	adds	r3, #10
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     dbc:	movw	r5, #1022	; 0x3fe
     dc0:	ldr.w	r1, [r2, r3, lsl #2]
    void setPPQN (int ppqn) {
      max_ppqn = ppqn;
    }

    int getPPQN () {
      return max_ppqn;
     dc4:	ldr	r3, [r1, #0]
     dc6:	ldr	r2, [r3, #0]
     dc8:	rsb	r3, r2, #1
     dcc:	cmp	r3, r5
     dce:	ble.w	ef4 <loop+0xa60>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     dd2:	ldr	r5, [pc, #340]	; (f28 <loop+0xa94>)
     dd4:	mul.w	r3, r3, r0
     dd8:	smull	r6, r5, r5, r3
     ddc:	add	r5, r3
     dde:	asrs	r3, r3, #31
     de0:	rsb	r3, r3, r5, asr #9
     de4:	add	r2, r3
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, m_controller.getPPQN(), 1);
      m_length = newValue;
     de6:	str	r2, [r1, #16]
     de8:	b.n	7b6 <loop+0x322>
     dea:	ldr	r3, [r4, #12]
     dec:	ldr	r2, [r4, #16]
     dee:	adds	r3, #10
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     df0:	movw	r5, #1022	; 0x3fe
     df4:	ldr.w	r1, [r2, r3, lsl #2]
     df8:	ldr	r3, [r1, #0]
     dfa:	ldr	r2, [r3, #0]
     dfc:	rsb	r3, r2, #1
     e00:	cmp	r3, r5
     e02:	ble.n	ede <loop+0xa4a>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     e04:	ldr	r5, [pc, #288]	; (f28 <loop+0xa94>)
     e06:	mul.w	r3, r3, r0
     e0a:	smull	r6, r5, r5, r3
     e0e:	add	r5, r3
     e10:	asrs	r3, r3, #31
     e12:	rsb	r3, r3, r5, asr #9
     e16:	add	r2, r3
     e18:	str	r2, [r1, #16]
     e1a:	b.n	7f2 <loop+0x35e>
     e1c:	ldr	r3, [r4, #12]
     e1e:	ldr	r2, [r4, #16]
     e20:	adds	r3, #10
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     e22:	movw	r5, #1022	; 0x3fe
     e26:	ldr.w	r1, [r2, r3, lsl #2]
     e2a:	ldr	r3, [r1, #0]
     e2c:	ldr	r2, [r3, #0]
     e2e:	rsb	r3, r2, #1
     e32:	cmp	r3, r5
     e34:	ble.n	ec8 <loop+0xa34>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     e36:	ldr	r5, [pc, #240]	; (f28 <loop+0xa94>)
     e38:	mul.w	r3, r3, r0
     e3c:	smull	r6, r5, r5, r3
     e40:	add	r5, r3
     e42:	asrs	r3, r3, #31
     e44:	rsb	r3, r3, r5, asr #9
     e48:	add	r2, r3
     e4a:	str	r2, [r1, #16]
     e4c:	b.n	86a <loop+0x3d6>
     e4e:	ldr	r3, [r4, #12]
     e50:	ldr	r2, [r4, #16]
     e52:	adds	r3, #10
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     e54:	movw	r5, #1022	; 0x3fe
     e58:	ldr.w	r1, [r2, r3, lsl #2]
     e5c:	ldr	r3, [r1, #0]
     e5e:	ldr	r2, [r3, #0]
     e60:	rsb	r3, r2, #1
     e64:	cmp	r3, r5
     e66:	ble.n	eb2 <loop+0xa1e>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     e68:	ldr	r5, [pc, #188]	; (f28 <loop+0xa94>)
     e6a:	mul.w	r3, r3, r0
     e6e:	smull	r6, r5, r5, r3
     e72:	add	r5, r3
     e74:	asrs	r3, r3, #31
     e76:	rsb	r3, r3, r5, asr #9
     e7a:	add	r2, r3
     e7c:	str	r2, [r1, #16]
     e7e:	b.n	77a <loop+0x2e6>
     e80:	ldr	r3, [r4, #12]
     e82:	ldr	r2, [r4, #16]
     e84:	adds	r3, #10
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     e86:	movw	r5, #1022	; 0x3fe
     e8a:	ldr.w	r1, [r2, r3, lsl #2]
     e8e:	ldr	r3, [r1, #0]
     e90:	ldr	r2, [r3, #0]
     e92:	rsb	r3, r2, #1
     e96:	cmp	r3, r5
     e98:	ble.n	f0a <loop+0xa76>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     e9a:	ldr	r5, [pc, #140]	; (f28 <loop+0xa94>)
     e9c:	mul.w	r3, r3, r0
     ea0:	smull	r6, r5, r5, r3
     ea4:	add	r5, r3
     ea6:	asrs	r3, r3, #31
     ea8:	rsb	r3, r3, r5, asr #9
     eac:	add	r2, r3
     eae:	str	r2, [r1, #16]
     eb0:	b.n	82e <loop+0x39a>
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     eb2:	rsb	r3, r2, #2
     eb6:	mul.w	r3, r0, r3
     eba:	cmp	r3, #0
     ebc:	it	lt
     ebe:	addwlt	r3, r3, #1023	; 0x3ff
     ec2:	add.w	r2, r2, r3, asr #10
     ec6:	b.n	e7c <loop+0x9e8>
     ec8:	rsb	r3, r2, #2
     ecc:	mul.w	r3, r0, r3
     ed0:	cmp	r3, #0
     ed2:	it	lt
     ed4:	addwlt	r3, r3, #1023	; 0x3ff
     ed8:	add.w	r2, r2, r3, asr #10
     edc:	b.n	e4a <loop+0x9b6>
     ede:	rsb	r3, r2, #2
     ee2:	mul.w	r3, r0, r3
     ee6:	cmp	r3, #0
     ee8:	it	lt
     eea:	addwlt	r3, r3, #1023	; 0x3ff
     eee:	add.w	r2, r2, r3, asr #10
     ef2:	b.n	e18 <loop+0x984>
     ef4:	rsb	r3, r2, #2
     ef8:	mul.w	r3, r0, r3
     efc:	cmp	r3, #0
     efe:	it	lt
     f00:	addwlt	r3, r3, #1023	; 0x3ff
     f04:	add.w	r2, r2, r3, asr #10
     f08:	b.n	de6 <loop+0x952>
     f0a:	rsb	r3, r2, #2
     f0e:	mul.w	r3, r0, r3
     f12:	cmp	r3, #0
     f14:	it	lt
     f16:	addwlt	r3, r3, #1023	; 0x3ff
     f1a:	add.w	r2, r2, r3, asr #10
     f1e:	b.n	eae <loop+0xa1a>
     f20:	.word	0x1fff17b0
     f24:	.word	0x1fff1884
     f28:	.word	0x80200803
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     f2c:	ldr	r3, [r7, #24]
     f2e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     f32:	clz	r1, r1
     f36:	lsrs	r1, r1, #5
     f38:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     f3a:	uxtb	r0, r0
     f3c:	bl	22bc <digitalWrite>
        m_sequence.toggleGlobalMode();
     f40:	ldr.w	sl, [r7, #28]
      m_mode = PITCH;
      m_controller = controller;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
     f44:	ldr.w	r9, [sl, #72]	; 0x48
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     f48:	ldrb.w	fp, [r9]
     f4c:	mov	r0, fp
     f4e:	bl	22c8 <digitalRead>
     f52:	clz	r1, r0
     f56:	lsrs	r1, r1, #5
     f58:	mov	r0, fp
     f5a:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f5e:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
     f62:	ldr.w	lr, [pc, #1308]	; 1480 <loop+0xfec>
     f66:	str	r3, [sp, #152]	; 0x98
	return ret;
     f68:	ldr	r2, [sp, #152]	; 0x98
     f6a:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     f6e:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     f72:	mov.w	fp, #1
      blinkingCounter = times;
     f76:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     f78:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
     f7c:	str.w	r2, [r9, #20]
     f80:	cmp	r3, #0
     f82:	beq.w	1484 <loop+0xff0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
     f86:	cmp	r3, #1
     f88:	beq.w	1892 <loop+0x13fe>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     f8c:	cmp	r3, #2
     f8e:	beq.w	1628 <loop+0x1194>
     f92:	ldr	r2, [r7, #12]
     f94:	b.w	5f0 <loop+0x15c>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     f98:	ldr	r3, [r7, #24]
     f9a:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     f9e:	clz	r1, r1
     fa2:	lsrs	r1, r1, #5
     fa4:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     fa6:	uxtb	r0, r0
     fa8:	bl	22bc <digitalWrite>
        m_sequence.toggleGlobalMode();
     fac:	ldr.w	sl, [r7, #28]
      m_mode = PITCH;
      m_controller = controller;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
     fb0:	ldr.w	r9, [sl, #72]	; 0x48
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     fb4:	ldrb.w	fp, [r9]
     fb8:	mov	r0, fp
     fba:	bl	22c8 <digitalRead>
     fbe:	clz	r1, r0
     fc2:	lsrs	r1, r1, #5
     fc4:	mov	r0, fp
     fc6:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     fca:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
     fce:	ldr.w	lr, [pc, #1200]	; 1480 <loop+0xfec>
     fd2:	str	r3, [sp, #168]	; 0xa8
	return ret;
     fd4:	ldr	r2, [sp, #168]	; 0xa8
     fd6:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     fda:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     fde:	mov.w	fp, #1
      blinkingCounter = times;
     fe2:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     fe4:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
     fe8:	str.w	r2, [r9, #20]
     fec:	cmp	r3, #0
     fee:	beq.w	1556 <loop+0x10c2>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
     ff2:	cmp	r3, #1
     ff4:	beq.w	17b4 <loop+0x1320>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     ff8:	cmp	r3, #2
     ffa:	beq.w	1708 <loop+0x1274>
     ffe:	ldr	r2, [r7, #12]
    1000:	b.w	666 <loop+0x1d2>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1004:	ldr	r3, [r7, #24]
    1006:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    100a:	clz	r1, r1
    100e:	lsrs	r1, r1, #5
    1010:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1012:	uxtb	r0, r0
    1014:	bl	22bc <digitalWrite>
        m_sequence.toggleGlobalMode();
    1018:	ldr.w	sl, [r7, #28]
      m_mode = PITCH;
      m_controller = controller;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    101c:	ldr.w	r9, [sl, #72]	; 0x48
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1020:	ldrb.w	fp, [r9]
    1024:	mov	r0, fp
    1026:	bl	22c8 <digitalRead>
    102a:	clz	r1, r0
    102e:	lsrs	r1, r1, #5
    1030:	mov	r0, fp
    1032:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1036:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    103a:	ldr.w	lr, [pc, #1092]	; 1480 <loop+0xfec>
    103e:	str	r3, [sp, #136]	; 0x88
	return ret;
    1040:	ldr	r2, [sp, #136]	; 0x88
    1042:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1046:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    104a:	mov.w	fp, #1
      blinkingCounter = times;
    104e:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1050:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
    1054:	str.w	r2, [r9, #20]
    1058:	cmp	r3, #0
    105a:	beq.w	1510 <loop+0x107c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
    105e:	cmp	r3, #1
    1060:	beq.w	1926 <loop+0x1492>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1064:	cmp	r3, #2
    1066:	beq.w	1660 <loop+0x11cc>
    106a:	ldr	r2, [r7, #12]
    106c:	b.w	5ae <loop+0x11a>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1070:	ldr	r3, [r7, #24]
    1072:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1076:	clz	r1, r1
    107a:	lsrs	r1, r1, #5
    107c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    107e:	uxtb	r0, r0
    1080:	bl	22bc <digitalWrite>
        m_sequence.toggleGlobalMode();
    1084:	ldr.w	sl, [r7, #28]
      m_mode = PITCH;
      m_controller = controller;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    1088:	ldr.w	r9, [sl, #72]	; 0x48
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    108c:	ldrb.w	fp, [r9]
    1090:	mov	r0, fp
    1092:	bl	22c8 <digitalRead>
    1096:	clz	r1, r0
    109a:	lsrs	r1, r1, #5
    109c:	mov	r0, fp
    109e:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10a2:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    10a6:	ldr.w	lr, [pc, #984]	; 1480 <loop+0xfec>
    10aa:	str	r3, [sp, #120]	; 0x78
	return ret;
    10ac:	ldr	r2, [sp, #120]	; 0x78
    10ae:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    10b2:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    10b6:	mov.w	fp, #1
      blinkingCounter = times;
    10ba:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    10bc:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
    10c0:	str.w	r2, [r9, #20]
    10c4:	cmp	r3, #0
    10c6:	beq.w	159c <loop+0x1108>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
    10ca:	cmp	r3, #1
    10cc:	beq.w	17fe <loop+0x136a>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    10d0:	cmp	r3, #2
    10d2:	beq.w	1740 <loop+0x12ac>
    10d6:	ldr	r2, [r7, #12]
    10d8:	b.w	56c <loop+0xd8>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    10dc:	ldr	r3, [r7, #24]
    10de:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    10e2:	clz	r1, r1
    10e6:	lsrs	r1, r1, #5
    10e8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    10ea:	uxtb	r0, r0
    10ec:	bl	22bc <digitalWrite>
        m_sequence.toggleGlobalMode();
    10f0:	ldr.w	sl, [r7, #28]
      m_mode = PITCH;
      m_controller = controller;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    10f4:	ldr.w	r9, [sl, #72]	; 0x48
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10f8:	ldrb.w	fp, [r9]
    10fc:	mov	r0, fp
    10fe:	bl	22c8 <digitalRead>
    1102:	clz	r1, r0
    1106:	lsrs	r1, r1, #5
    1108:	mov	r0, fp
    110a:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    110e:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1112:	ldr.w	lr, [pc, #876]	; 1480 <loop+0xfec>
    1116:	str	r3, [sp, #104]	; 0x68
	return ret;
    1118:	ldr	r2, [sp, #104]	; 0x68
    111a:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    111e:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1122:	mov.w	fp, #1
      blinkingCounter = times;
    1126:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1128:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
    112c:	str.w	r2, [r9, #20]
    1130:	cmp	r3, #0
    1132:	beq.w	15e2 <loop+0x114e>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
    1136:	cmp	r3, #1
    1138:	beq.w	1848 <loop+0x13b4>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    113c:	cmp	r3, #2
    113e:	beq.w	16d0 <loop+0x123c>
    1142:	ldr	r2, [r7, #12]
    1144:	b.w	52a <loop+0x96>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1148:	ldr	r3, [r7, #24]
    114a:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    114e:	clz	r1, r1
    1152:	lsrs	r1, r1, #5
    1154:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1156:	uxtb	r0, r0
    1158:	bl	22bc <digitalWrite>
        m_sequence.toggleGlobalMode();
    115c:	ldr.w	sl, [r7, #28]
      m_mode = PITCH;
      m_controller = controller;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    1160:	ldr.w	r9, [sl, #72]	; 0x48
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1164:	ldrb.w	fp, [r9]
    1168:	mov	r0, fp
    116a:	bl	22c8 <digitalRead>
    116e:	clz	r1, r0
    1172:	lsrs	r1, r1, #5
    1174:	mov	r0, fp
    1176:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    117a:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    117e:	ldr.w	lr, [pc, #768]	; 1480 <loop+0xfec>
    1182:	str	r3, [sp, #88]	; 0x58
	return ret;
    1184:	ldr	r2, [sp, #88]	; 0x58
    1186:	ldrb.w	r3, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    118a:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    118e:	mov.w	fp, #1
      blinkingCounter = times;
    1192:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1194:	strb.w	fp, [r9, #16]
      blinkingCounter = times;
    1198:	str.w	r2, [r9, #20]
    119c:	cmp	r3, #0
    119e:	beq.w	14ca <loop+0x1036>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
    11a2:	cmp	r3, #1
    11a4:	beq.w	18dc <loop+0x1448>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    11a8:	cmp	r3, #2
    11aa:	beq.w	1698 <loop+0x1204>
    11ae:	ldr	r2, [r7, #12]
    11b0:	b.w	4e8 <loop+0x54>
      } else if (m_state == LOW && m_playButton) {
        m_led.toggle();
    11b4:	ldr	r3, [r7, #24]
    11b6:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    11ba:	clz	r1, r1
    11be:	lsrs	r1, r1, #5
    11c0:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    11c2:	uxtb	r0, r0
    11c4:	bl	22bc <digitalWrite>
    11c8:	movs	r1, #4
    11ca:	ldr	r0, [pc, #676]	; (1470 <loop+0xfdc>)
    11cc:	bl	1cac <usb_serial_write>
    11d0:	ldr	r0, [pc, #672]	; (1474 <loop+0xfe0>)
    11d2:	bl	3820 <Print::println()>
    11d6:	b.n	106a <loop+0xbd6>
    11d8:	ldr	r3, [r7, #24]
    11da:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    11de:	clz	r1, r1
    11e2:	lsrs	r1, r1, #5
    11e4:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    11e6:	uxtb	r0, r0
    11e8:	bl	22bc <digitalWrite>
    11ec:	movs	r1, #4
    11ee:	ldr	r0, [pc, #640]	; (1470 <loop+0xfdc>)
    11f0:	bl	1cac <usb_serial_write>
    11f4:	ldr	r0, [pc, #636]	; (1474 <loop+0xfe0>)
    11f6:	bl	3820 <Print::println()>
    11fa:	b.n	ffe <loop+0xb6a>
    11fc:	ldr	r3, [r7, #24]
    11fe:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1202:	clz	r1, r1
    1206:	lsrs	r1, r1, #5
    1208:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    120a:	uxtb	r0, r0
    120c:	bl	22bc <digitalWrite>
    1210:	movs	r1, #4
    1212:	ldr	r0, [pc, #604]	; (1470 <loop+0xfdc>)
    1214:	bl	1cac <usb_serial_write>
    1218:	ldr	r0, [pc, #600]	; (1474 <loop+0xfe0>)
    121a:	bl	3820 <Print::println()>
    121e:	b.n	1142 <loop+0xcae>
    1220:	ldr	r3, [r7, #24]
    1222:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1226:	clz	r1, r1
    122a:	lsrs	r1, r1, #5
    122c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    122e:	uxtb	r0, r0
    1230:	bl	22bc <digitalWrite>
    1234:	movs	r1, #4
    1236:	ldr	r0, [pc, #568]	; (1470 <loop+0xfdc>)
    1238:	bl	1cac <usb_serial_write>
    123c:	ldr	r0, [pc, #564]	; (1474 <loop+0xfe0>)
    123e:	bl	3820 <Print::println()>
    1242:	b.n	f92 <loop+0xafe>
    1244:	ldr	r3, [r7, #24]
    1246:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    124a:	clz	r1, r1
    124e:	lsrs	r1, r1, #5
    1250:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1252:	uxtb	r0, r0
    1254:	bl	22bc <digitalWrite>
    1258:	movs	r1, #4
    125a:	ldr	r0, [pc, #532]	; (1470 <loop+0xfdc>)
    125c:	bl	1cac <usb_serial_write>
    1260:	ldr	r0, [pc, #528]	; (1474 <loop+0xfe0>)
    1262:	bl	3820 <Print::println()>
    1266:	b.n	10d6 <loop+0xc42>
    1268:	ldr	r3, [r7, #24]
    126a:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    126e:	clz	r1, r1
    1272:	lsrs	r1, r1, #5
    1274:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1276:	uxtb	r0, r0
    1278:	bl	22bc <digitalWrite>
    127c:	movs	r1, #4
    127e:	ldr	r0, [pc, #496]	; (1470 <loop+0xfdc>)
    1280:	bl	1cac <usb_serial_write>
    1284:	ldr	r0, [pc, #492]	; (1474 <loop+0xfe0>)
    1286:	bl	3820 <Print::println()>
    128a:	b.n	11ae <loop+0xd1a>
        m_leds[2]->blink(3);
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
    128c:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_sequence.controlTempo(m_value);
    1290:	ldr	r2, [r4, #16]
    1292:	bge.w	13a0 <loop+0xf0c>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1296:	ldr	r1, [r2, #28]
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1298:	movs	r3, #6

        if (ppqn >= 6) {
    129a:	cmp	r1, #5
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    129c:	str	r3, [r2, #32]

        if (ppqn >= 6) {
    129e:	ble.n	12a4 <loop+0xe10>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
    12a0:	movs	r1, #0
    12a2:	str	r1, [r2, #28]
    
  public:
    Controller () {};

    void setPPQN (int ppqn) {
      max_ppqn = ppqn;
    12a4:	ldr	r2, [r2, #84]	; 0x54
    12a6:	str	r3, [r2, #0]
    12a8:	b.w	86a <loop+0x3d6>
        m_leds[2]->blink(3);
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
    12ac:	cmp.w	r0, #400	; 0x190
    12b0:	ldr	r2, [r4, #16]
    12b2:	bge.n	1374 <loop+0xee0>
        max_ppqn = 6;

        if (ppqn >= 6) {
    12b4:	ldr	r1, [r2, #28]
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    12b6:	movs	r3, #6

        if (ppqn >= 6) {
    12b8:	cmp	r1, #5
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    12ba:	str	r3, [r2, #32]

        if (ppqn >= 6) {
    12bc:	ble.n	12c2 <loop+0xe2e>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
    12be:	movs	r1, #0
    12c0:	str	r1, [r2, #28]
    12c2:	ldr	r2, [r2, #84]	; 0x54
    12c4:	str	r3, [r2, #0]
    12c6:	b.w	7f2 <loop+0x35e>
        m_leds[2]->blink(3);
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
    12ca:	cmp.w	r0, #400	; 0x190
    12ce:	ldr	r2, [r4, #16]
    12d0:	bge.n	13b8 <loop+0xf24>
        max_ppqn = 6;

        if (ppqn >= 6) {
    12d2:	ldr	r1, [r2, #28]
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    12d4:	movs	r3, #6

        if (ppqn >= 6) {
    12d6:	cmp	r1, #5
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    12d8:	str	r3, [r2, #32]

        if (ppqn >= 6) {
    12da:	ble.n	12e0 <loop+0xe4c>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
    12dc:	movs	r1, #0
    12de:	str	r1, [r2, #28]
    12e0:	ldr	r2, [r2, #84]	; 0x54
    12e2:	str	r3, [r2, #0]
    12e4:	b.w	7b6 <loop+0x322>
        m_leds[2]->blink(3);
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
    12e8:	cmp.w	r0, #400	; 0x190
    12ec:	ldr	r2, [r4, #16]
    12ee:	bge.n	138a <loop+0xef6>
        max_ppqn = 6;

        if (ppqn >= 6) {
    12f0:	ldr	r1, [r2, #28]
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    12f2:	movs	r3, #6

        if (ppqn >= 6) {
    12f4:	cmp	r1, #5
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    12f6:	str	r3, [r2, #32]

        if (ppqn >= 6) {
    12f8:	ble.n	12fe <loop+0xe6a>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
    12fa:	movs	r1, #0
    12fc:	str	r1, [r2, #28]
    12fe:	ldr	r2, [r2, #84]	; 0x54
    1300:	str	r3, [r2, #0]
    1302:	b.w	77a <loop+0x2e6>
        m_leds[2]->blink(3);
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
    1306:	cmp.w	r0, #400	; 0x190
    130a:	ldr	r2, [r4, #16]
    130c:	bge.n	135e <loop+0xeca>
        max_ppqn = 6;

        if (ppqn >= 6) {
    130e:	ldr	r1, [r2, #28]
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1310:	movs	r3, #6

        if (ppqn >= 6) {
    1312:	cmp	r1, #5
      }
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1314:	str	r3, [r2, #32]

        if (ppqn >= 6) {
    1316:	ble.n	131c <loop+0xe88>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
    1318:	movs	r1, #0
    131a:	str	r1, [r2, #28]
    131c:	ldr	r2, [r2, #84]	; 0x54
    131e:	str	r3, [r2, #0]
    1320:	b.w	82e <loop+0x39a>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1324:	ldr.w	r2, [r8, #8]
    1328:	ldr.w	r3, [r8, #12]
    132c:	lsls	r0, r2, #16
    132e:	lsls	r3, r3, #24
    1330:	and.w	r3, r3, #2130706432	; 0x7f000000
    1334:	and.w	r0, r0, #8323072	; 0x7f0000
    1338:	orrs	r0, r3
    133a:	orr.w	r0, r0, #40704	; 0x9f00
    133e:	orr.w	r0, r0, #9
    1342:	bl	2548 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1346:	bl	25e4 <usb_midi_flush_output>
      m_state = !m_state;
    };

    int play () {
      m_controller.noteOn(0, m_pitch, m_velocity);
      return m_pitch;
    134a:	ldr.w	r2, [r8, #8]
    134e:	ldr	r3, [r5, #4]
    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep]->m_state) {
          activeNote = m_steps[m_currentStep]->play();
    1350:	str	r2, [r5, #36]	; 0x24
    1352:	b.n	cd4 <loop+0x840>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1354:	ldr	r0, [pc, #288]	; (1478 <loop+0xfe4>)
    1356:	bl	2548 <usb_midi_write_packed>
    135a:	ldr	r3, [r5, #28]
    135c:	b.n	d0e <loop+0x87a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    135e:	sub.w	r3, r0, #400	; 0x190
    1362:	cmp.w	r3, #400	; 0x190
    1366:	bcs.n	142e <loop+0xf9a>
        max_ppqn = 8;

        if (ppqn >= 8) {
    1368:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    136a:	movs	r3, #8

        if (ppqn >= 8) {
    136c:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    136e:	str	r3, [r2, #32]

        if (ppqn >= 8) {
    1370:	ble.n	131c <loop+0xe88>
    1372:	b.n	1318 <loop+0xe84>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1374:	sub.w	r3, r0, #400	; 0x190
    1378:	cmp.w	r3, #400	; 0x190
    137c:	bcs.n	141e <loop+0xf8a>
        max_ppqn = 8;

        if (ppqn >= 8) {
    137e:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1380:	movs	r3, #8

        if (ppqn >= 8) {
    1382:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1384:	str	r3, [r2, #32]

        if (ppqn >= 8) {
    1386:	ble.n	12c2 <loop+0xe2e>
    1388:	b.n	12be <loop+0xe2a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    138a:	sub.w	r3, r0, #400	; 0x190
    138e:	cmp.w	r3, #400	; 0x190
    1392:	bcs.n	143e <loop+0xfaa>
        max_ppqn = 8;

        if (ppqn >= 8) {
    1394:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1396:	movs	r3, #8

        if (ppqn >= 8) {
    1398:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    139a:	str	r3, [r2, #32]

        if (ppqn >= 8) {
    139c:	ble.n	12fe <loop+0xe6a>
    139e:	b.n	12fa <loop+0xe66>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    13a0:	sub.w	r3, r0, #400	; 0x190
    13a4:	cmp.w	r3, #400	; 0x190
    13a8:	bcs.n	145e <loop+0xfca>
        max_ppqn = 8;

        if (ppqn >= 8) {
    13aa:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    13ac:	movs	r3, #8

        if (ppqn >= 8) {
    13ae:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    13b0:	str	r3, [r2, #32]

        if (ppqn >= 8) {
    13b2:	ble.w	12a4 <loop+0xe10>
    13b6:	b.n	12a0 <loop+0xe0c>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    13b8:	sub.w	r3, r0, #400	; 0x190
    13bc:	cmp.w	r3, #400	; 0x190
    13c0:	bcs.n	144e <loop+0xfba>
        max_ppqn = 8;

        if (ppqn >= 8) {
    13c2:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    13c4:	movs	r3, #8

        if (ppqn >= 8) {
    13c6:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    13c8:	str	r3, [r2, #32]

        if (ppqn >= 8) {
    13ca:	ble.n	12e0 <loop+0xe4c>
    13cc:	b.n	12dc <loop+0xe48>
      return num;
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
    13ce:	ldr	r3, [r6, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13d0:	ldr	r4, [pc, #168]	; (147c <loop+0xfe8>)
    13d2:	adds	r3, #14
    13d4:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    13d8:	ldrb.w	r8, [r7]
    13dc:	mov	r0, r8
    13de:	bl	22c8 <digitalRead>
    13e2:	clz	r1, r0
    13e6:	lsrs	r1, r1, #5
    13e8:	mov	r0, r8
    13ea:	bl	22bc <digitalWrite>

        if (m_steps[m_currentStep]->m_state) {
    13ee:	ldr	r3, [r6, #4]
    13f0:	ldr	r2, [r4, #0]
    13f2:	str	r2, [sp, #8]
    13f4:	add.w	r1, r3, #10
      blinking = true;
    13f8:	movs	r2, #1
    13fa:	ldr.w	r8, [r6, r1, lsl #2]
    13fe:	strb	r2, [r7, #16]
      blinkingCounter = times;
    1400:	movs	r2, #0
    1402:	str	r2, [r7, #20]
    1404:	ldrb.w	r2, [r8, #4]
	return ret;
    1408:	ldr	r1, [sp, #8]
      lastBlink = millis();  
    140a:	str	r1, [r7, #8]
    140c:	cmp	r2, #0
    140e:	bne.w	1778 <loop+0x12e4>
          activeNote = m_steps[m_currentStep]->play();
        }

        m_currentStep++;
    1412:	adds	r3, #1

        if (m_currentStep > 3) {
    1414:	cmp	r3, #3
          m_currentStep = 0;
    1416:	it	gt
    1418:	movgt	r3, #0
    141a:	str	r3, [r5, #4]
    141c:	b.n	d22 <loop+0x88e>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    141e:	sub.w	r3, r0, #800	; 0x320
    1422:	cmp	r3, #223	; 0xdf
        max_ppqn = 12;
    1424:	itet	ls
    1426:	movls	r3, #12
    1428:	ldrhi	r3, [r2, #32]
    142a:	strls	r3, [r2, #32]
    142c:	b.n	12c2 <loop+0xe2e>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    142e:	sub.w	r3, r0, #800	; 0x320
    1432:	cmp	r3, #223	; 0xdf
        max_ppqn = 12;
    1434:	itet	ls
    1436:	movls	r3, #12
    1438:	ldrhi	r3, [r2, #32]
    143a:	strls	r3, [r2, #32]
    143c:	b.n	131c <loop+0xe88>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    143e:	sub.w	r3, r0, #800	; 0x320
    1442:	cmp	r3, #223	; 0xdf
        max_ppqn = 12;
    1444:	itet	ls
    1446:	movls	r3, #12
    1448:	ldrhi	r3, [r2, #32]
    144a:	strls	r3, [r2, #32]
    144c:	b.n	12fe <loop+0xe6a>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    144e:	sub.w	r3, r0, #800	; 0x320
    1452:	cmp	r3, #223	; 0xdf
        max_ppqn = 12;
    1454:	itet	ls
    1456:	movls	r3, #12
    1458:	ldrhi	r3, [r2, #32]
    145a:	strls	r3, [r2, #32]
    145c:	b.n	12e0 <loop+0xe4c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    145e:	sub.w	r3, r0, #800	; 0x320
    1462:	cmp	r3, #223	; 0xdf
        max_ppqn = 12;
    1464:	itet	ls
    1466:	movls	r3, #12
    1468:	ldrhi	r3, [r2, #32]
    146a:	strls	r3, [r2, #32]
    146c:	b.n	12a4 <loop+0xe10>
    146e:	nop
    1470:	.word	0x00004c04
    1474:	.word	0x1fff0c70
    1478:	.word	0x7f7bbf0b
    147c:	.word	0x1fff1884
    1480:	.word	0x1fff1808
    1484:	movs	r1, #8
    1486:	ldr	r0, [pc, #800]	; (17a8 <loop+0x1314>)
    1488:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    148a:	strb.w	fp, [lr]
    148e:	bl	1cac <usb_serial_write>
    1492:	ldr	r0, [pc, #792]	; (17ac <loop+0x1318>)
    1494:	bl	3820 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    1498:	ldr.w	r5, [sl, #56]	; 0x38
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    149c:	ldrb.w	r9, [r5]
    14a0:	mov	r0, r9
    14a2:	bl	22c8 <digitalRead>
    14a6:	clz	r1, r0
    14aa:	lsrs	r1, r1, #5
    14ac:	mov	r0, r9
    14ae:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14b2:	ldr.w	r3, [r8]
    14b6:	str	r3, [sp, #156]	; 0x9c
	return ret;
    14b8:	ldr	r3, [sp, #156]	; 0x9c
      blinking = true;
      blinkingCounter = times;
    14ba:	ldr	r2, [sp, #0]
    14bc:	str	r2, [r5, #20]
    14be:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14c0:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    14c4:	str	r3, [r5, #8]
    14c6:	b.w	5f0 <loop+0x15c>
    14ca:	movs	r1, #8
    14cc:	ldr	r0, [pc, #728]	; (17a8 <loop+0x1314>)
    14ce:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    14d0:	strb.w	fp, [lr]
    14d4:	bl	1cac <usb_serial_write>
    14d8:	ldr	r0, [pc, #720]	; (17ac <loop+0x1318>)
    14da:	bl	3820 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    14de:	ldr.w	r5, [sl, #56]	; 0x38
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14e2:	ldrb.w	r9, [r5]
    14e6:	mov	r0, r9
    14e8:	bl	22c8 <digitalRead>
    14ec:	clz	r1, r0
    14f0:	lsrs	r1, r1, #5
    14f2:	mov	r0, r9
    14f4:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14f8:	ldr.w	r3, [r8]
    14fc:	str	r3, [sp, #92]	; 0x5c
	return ret;
    14fe:	ldr	r3, [sp, #92]	; 0x5c
      blinking = true;
      blinkingCounter = times;
    1500:	ldr	r2, [sp, #0]
    1502:	str	r2, [r5, #20]
    1504:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1506:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    150a:	str	r3, [r5, #8]
    150c:	b.w	4e8 <loop+0x54>
    1510:	movs	r1, #8
    1512:	ldr	r0, [pc, #660]	; (17a8 <loop+0x1314>)
    1514:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1516:	strb.w	fp, [lr]
    151a:	bl	1cac <usb_serial_write>
    151e:	ldr	r0, [pc, #652]	; (17ac <loop+0x1318>)
    1520:	bl	3820 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    1524:	ldr.w	r6, [sl, #56]	; 0x38
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1528:	ldrb.w	r9, [r6]
    152c:	mov	r0, r9
    152e:	bl	22c8 <digitalRead>
    1532:	clz	r1, r0
    1536:	lsrs	r1, r1, #5
    1538:	mov	r0, r9
    153a:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    153e:	ldr.w	r3, [r8]
    1542:	str	r3, [sp, #140]	; 0x8c
	return ret;
    1544:	ldr	r3, [sp, #140]	; 0x8c
      blinking = true;
      blinkingCounter = times;
    1546:	ldr	r2, [sp, #0]
    1548:	str	r2, [r6, #20]
    154a:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    154c:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1550:	str	r3, [r6, #8]
    1552:	b.w	5ae <loop+0x11a>
    1556:	movs	r1, #8
    1558:	ldr	r0, [pc, #588]	; (17a8 <loop+0x1314>)
    155a:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    155c:	strb.w	fp, [lr]
    1560:	bl	1cac <usb_serial_write>
    1564:	ldr	r0, [pc, #580]	; (17ac <loop+0x1318>)
    1566:	bl	3820 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    156a:	ldr.w	r6, [sl, #56]	; 0x38
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    156e:	ldrb.w	r9, [r6]
    1572:	mov	r0, r9
    1574:	bl	22c8 <digitalRead>
    1578:	clz	r1, r0
    157c:	lsrs	r1, r1, #5
    157e:	mov	r0, r9
    1580:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1584:	ldr.w	r3, [r8]
    1588:	str	r3, [sp, #172]	; 0xac
	return ret;
    158a:	ldr	r3, [sp, #172]	; 0xac
      blinking = true;
      blinkingCounter = times;
    158c:	ldr	r2, [sp, #0]
    158e:	str	r2, [r6, #20]
    1590:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1592:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1596:	str	r3, [r6, #8]
    1598:	b.w	666 <loop+0x1d2>
    159c:	movs	r1, #8
    159e:	ldr	r0, [pc, #520]	; (17a8 <loop+0x1314>)
    15a0:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    15a2:	strb.w	fp, [lr]
    15a6:	bl	1cac <usb_serial_write>
    15aa:	ldr	r0, [pc, #512]	; (17ac <loop+0x1318>)
    15ac:	bl	3820 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    15b0:	ldr.w	r5, [sl, #56]	; 0x38
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15b4:	ldrb.w	r9, [r5]
    15b8:	mov	r0, r9
    15ba:	bl	22c8 <digitalRead>
    15be:	clz	r1, r0
    15c2:	lsrs	r1, r1, #5
    15c4:	mov	r0, r9
    15c6:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15ca:	ldr.w	r3, [r8]
    15ce:	str	r3, [sp, #124]	; 0x7c
	return ret;
    15d0:	ldr	r3, [sp, #124]	; 0x7c
      blinking = true;
      blinkingCounter = times;
    15d2:	ldr	r2, [sp, #0]
    15d4:	str	r2, [r5, #20]
    15d6:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15d8:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    15dc:	str	r3, [r5, #8]
    15de:	b.w	56c <loop+0xd8>
    15e2:	movs	r1, #8
    15e4:	ldr	r0, [pc, #448]	; (17a8 <loop+0x1314>)
    15e6:	str	r2, [sp, #0]
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    15e8:	strb.w	fp, [lr]
    15ec:	bl	1cac <usb_serial_write>
    15f0:	ldr	r0, [pc, #440]	; (17ac <loop+0x1318>)
    15f2:	bl	3820 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
    15f6:	ldr.w	r6, [sl, #56]	; 0x38
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15fa:	ldrb.w	r9, [r6]
    15fe:	mov	r0, r9
    1600:	bl	22c8 <digitalRead>
    1604:	clz	r1, r0
    1608:	lsrs	r1, r1, #5
    160a:	mov	r0, r9
    160c:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1610:	ldr.w	r3, [r8]
    1614:	str	r3, [sp, #108]	; 0x6c
	return ret;
    1616:	ldr	r3, [sp, #108]	; 0x6c
      blinking = true;
      blinkingCounter = times;
    1618:	ldr	r2, [sp, #0]
    161a:	str	r2, [r6, #20]
    161c:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    161e:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1622:	str	r3, [r6, #8]
    1624:	b.w	52a <loop+0x96>
    1628:	movs	r1, #5
    162a:	ldr	r0, [pc, #388]	; (17b0 <loop+0x131c>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    162c:	strb.w	r5, [lr]
    1630:	str	r2, [sp, #0]
    1632:	bl	1cac <usb_serial_write>
    1636:	ldr	r0, [pc, #372]	; (17ac <loop+0x1318>)
    1638:	bl	3820 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    163c:	ldr.w	r5, [sl, #64]	; 0x40
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1640:	ldrb.w	r9, [r5]
    1644:	mov	r0, r9
    1646:	bl	22c8 <digitalRead>
    164a:	clz	r1, r0
    164e:	lsrs	r1, r1, #5
    1650:	mov	r0, r9
    1652:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1656:	ldr.w	r3, [r8]
    165a:	str	r3, [sp, #164]	; 0xa4
	return ret;
    165c:	ldr	r3, [sp, #164]	; 0xa4
    165e:	b.n	14ba <loop+0x1026>
    1660:	movs	r1, #5
    1662:	ldr	r0, [pc, #332]	; (17b0 <loop+0x131c>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1664:	strb.w	r6, [lr]
    1668:	str	r2, [sp, #0]
    166a:	bl	1cac <usb_serial_write>
    166e:	ldr	r0, [pc, #316]	; (17ac <loop+0x1318>)
    1670:	bl	3820 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    1674:	ldr.w	r6, [sl, #64]	; 0x40
    1678:	ldrb.w	r9, [r6]
    167c:	mov	r0, r9
    167e:	bl	22c8 <digitalRead>
    1682:	clz	r1, r0
    1686:	lsrs	r1, r1, #5
    1688:	mov	r0, r9
    168a:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    168e:	ldr.w	r3, [r8]
    1692:	str	r3, [sp, #148]	; 0x94
	return ret;
    1694:	ldr	r3, [sp, #148]	; 0x94
    1696:	b.n	1546 <loop+0x10b2>
    1698:	movs	r1, #5
    169a:	ldr	r0, [pc, #276]	; (17b0 <loop+0x131c>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    169c:	strb.w	r5, [lr]
    16a0:	str	r2, [sp, #0]
    16a2:	bl	1cac <usb_serial_write>
    16a6:	ldr	r0, [pc, #260]	; (17ac <loop+0x1318>)
    16a8:	bl	3820 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    16ac:	ldr.w	r5, [sl, #64]	; 0x40
    16b0:	ldrb.w	r9, [r5]
    16b4:	mov	r0, r9
    16b6:	bl	22c8 <digitalRead>
    16ba:	clz	r1, r0
    16be:	lsrs	r1, r1, #5
    16c0:	mov	r0, r9
    16c2:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16c6:	ldr.w	r3, [r8]
    16ca:	str	r3, [sp, #100]	; 0x64
	return ret;
    16cc:	ldr	r3, [sp, #100]	; 0x64
    16ce:	b.n	1500 <loop+0x106c>
    16d0:	movs	r1, #5
    16d2:	ldr	r0, [pc, #220]	; (17b0 <loop+0x131c>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    16d4:	strb.w	r6, [lr]
    16d8:	str	r2, [sp, #0]
    16da:	bl	1cac <usb_serial_write>
    16de:	ldr	r0, [pc, #204]	; (17ac <loop+0x1318>)
    16e0:	bl	3820 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    16e4:	ldr.w	r6, [sl, #64]	; 0x40
    16e8:	ldrb.w	r9, [r6]
    16ec:	mov	r0, r9
    16ee:	bl	22c8 <digitalRead>
    16f2:	clz	r1, r0
    16f6:	lsrs	r1, r1, #5
    16f8:	mov	r0, r9
    16fa:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16fe:	ldr.w	r3, [r8]
    1702:	str	r3, [sp, #116]	; 0x74
	return ret;
    1704:	ldr	r3, [sp, #116]	; 0x74
    1706:	b.n	1618 <loop+0x1184>
    1708:	movs	r1, #5
    170a:	ldr	r0, [pc, #164]	; (17b0 <loop+0x131c>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    170c:	strb.w	r6, [lr]
    1710:	str	r2, [sp, #0]
    1712:	bl	1cac <usb_serial_write>
    1716:	ldr	r0, [pc, #148]	; (17ac <loop+0x1318>)
    1718:	bl	3820 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    171c:	ldr.w	r6, [sl, #64]	; 0x40
    1720:	ldrb.w	r9, [r6]
    1724:	mov	r0, r9
    1726:	bl	22c8 <digitalRead>
    172a:	clz	r1, r0
    172e:	lsrs	r1, r1, #5
    1730:	mov	r0, r9
    1732:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1736:	ldr.w	r3, [r8]
    173a:	str	r3, [sp, #180]	; 0xb4
	return ret;
    173c:	ldr	r3, [sp, #180]	; 0xb4
    173e:	b.n	158c <loop+0x10f8>
    1740:	movs	r1, #5
    1742:	ldr	r0, [pc, #108]	; (17b0 <loop+0x131c>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1744:	strb.w	r5, [lr]
    1748:	str	r2, [sp, #0]
    174a:	bl	1cac <usb_serial_write>
    174e:	ldr	r0, [pc, #92]	; (17ac <loop+0x1318>)
    1750:	bl	3820 <Print::println()>
        Serial.println("PITCH");
        m_leds[2]->blink(3);
    1754:	ldr.w	r5, [sl, #64]	; 0x40
    1758:	ldrb.w	r9, [r5]
    175c:	mov	r0, r9
    175e:	bl	22c8 <digitalRead>
    1762:	clz	r1, r0
    1766:	lsrs	r1, r1, #5
    1768:	mov	r0, r9
    176a:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    176e:	ldr.w	r3, [r8]
    1772:	str	r3, [sp, #132]	; 0x84
	return ret;
    1774:	ldr	r3, [sp, #132]	; 0x84
    1776:	b.n	15d2 <loop+0x113e>
    1778:	ldr.w	r2, [r8, #8]
    177c:	ldr.w	r3, [r8, #12]
    1780:	lsls	r0, r2, #16
    1782:	lsls	r3, r3, #24
    1784:	and.w	r3, r3, #2130706432	; 0x7f000000
    1788:	and.w	r0, r0, #8323072	; 0x7f0000
    178c:	orrs	r0, r3
    178e:	orr.w	r0, r0, #40704	; 0x9f00
    1792:	orr.w	r0, r0, #9
    1796:	bl	2548 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    179a:	bl	25e4 <usb_midi_flush_output>
    179e:	ldr.w	r2, [r8, #8]
    17a2:	ldr	r3, [r6, #4]
    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep]->m_state) {
          activeNote = m_steps[m_currentStep]->play();
    17a4:	str	r2, [r6, #36]	; 0x24
    17a6:	b.n	1412 <loop+0xf7e>
    17a8:	.word	0x00004be4
    17ac:	.word	0x1fff0c70
    17b0:	.word	0x00004bfc
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    17b4:	movs	r0, #2
    17b6:	strb.w	r0, [lr]
    17ba:	movs	r1, #10
    17bc:	ldr	r0, [pc, #432]	; (1970 <loop+0x14dc>)
    17be:	str	r2, [sp, #4]
    17c0:	str	r3, [sp, #0]
    17c2:	bl	1cac <usb_serial_write>
    17c6:	ldr	r0, [pc, #428]	; (1974 <loop+0x14e0>)
    17c8:	bl	3820 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    17cc:	ldr.w	r6, [sl, #60]	; 0x3c
    17d0:	ldrb.w	r9, [r6]
    17d4:	mov	r0, r9
    17d6:	bl	22c8 <digitalRead>
    17da:	clz	r1, r0
    17de:	lsrs	r1, r1, #5
    17e0:	mov	r0, r9
    17e2:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17e6:	ldr.w	r1, [r8]
    17ea:	str	r1, [sp, #176]	; 0xb0
      blinking = true;
      blinkingCounter = times;
    17ec:	ldr	r2, [sp, #4]
	return ret;
    17ee:	ldr	r1, [sp, #176]	; 0xb0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    17f0:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    17f2:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    17f4:	strb	r3, [r6, #16]
    17f6:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    17f8:	str	r1, [r6, #8]
    17fa:	b.w	666 <loop+0x1d2>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    17fe:	movs	r0, #2
    1800:	strb.w	r0, [lr]
    1804:	movs	r1, #10
    1806:	ldr	r0, [pc, #360]	; (1970 <loop+0x14dc>)
    1808:	str	r2, [sp, #4]
    180a:	str	r3, [sp, #0]
    180c:	bl	1cac <usb_serial_write>
    1810:	ldr	r0, [pc, #352]	; (1974 <loop+0x14e0>)
    1812:	bl	3820 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    1816:	ldr.w	r5, [sl, #60]	; 0x3c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    181a:	ldrb.w	r9, [r5]
    181e:	mov	r0, r9
    1820:	bl	22c8 <digitalRead>
    1824:	clz	r1, r0
    1828:	lsrs	r1, r1, #5
    182a:	mov	r0, r9
    182c:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1830:	ldr.w	r1, [r8]
    1834:	str	r1, [sp, #128]	; 0x80
      blinking = true;
      blinkingCounter = times;
    1836:	ldr	r2, [sp, #4]
	return ret;
    1838:	ldr	r1, [sp, #128]	; 0x80
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    183a:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    183c:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    183e:	strb	r3, [r5, #16]
    1840:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    1842:	str	r1, [r5, #8]
    1844:	b.w	56c <loop+0xd8>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1848:	movs	r0, #2
    184a:	strb.w	r0, [lr]
    184e:	movs	r1, #10
    1850:	ldr	r0, [pc, #284]	; (1970 <loop+0x14dc>)
    1852:	str	r2, [sp, #4]
    1854:	str	r3, [sp, #0]
    1856:	bl	1cac <usb_serial_write>
    185a:	ldr	r0, [pc, #280]	; (1974 <loop+0x14e0>)
    185c:	bl	3820 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    1860:	ldr.w	r6, [sl, #60]	; 0x3c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1864:	ldrb.w	r9, [r6]
    1868:	mov	r0, r9
    186a:	bl	22c8 <digitalRead>
    186e:	clz	r1, r0
    1872:	lsrs	r1, r1, #5
    1874:	mov	r0, r9
    1876:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    187a:	ldr.w	r1, [r8]
    187e:	str	r1, [sp, #112]	; 0x70
      blinking = true;
      blinkingCounter = times;
    1880:	ldr	r2, [sp, #4]
	return ret;
    1882:	ldr	r1, [sp, #112]	; 0x70
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1884:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    1886:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1888:	strb	r3, [r6, #16]
    188a:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    188c:	str	r1, [r6, #8]
    188e:	b.w	52a <loop+0x96>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1892:	movs	r0, #2
    1894:	strb.w	r0, [lr]
    1898:	movs	r1, #10
    189a:	ldr	r0, [pc, #212]	; (1970 <loop+0x14dc>)
    189c:	str	r2, [sp, #4]
    189e:	str	r3, [sp, #0]
    18a0:	bl	1cac <usb_serial_write>
    18a4:	ldr	r0, [pc, #204]	; (1974 <loop+0x14e0>)
    18a6:	bl	3820 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    18aa:	ldr.w	r5, [sl, #60]	; 0x3c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18ae:	ldrb.w	r9, [r5]
    18b2:	mov	r0, r9
    18b4:	bl	22c8 <digitalRead>
    18b8:	clz	r1, r0
    18bc:	lsrs	r1, r1, #5
    18be:	mov	r0, r9
    18c0:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18c4:	ldr.w	r1, [r8]
    18c8:	str	r1, [sp, #160]	; 0xa0
      blinking = true;
      blinkingCounter = times;
    18ca:	ldr	r2, [sp, #4]
	return ret;
    18cc:	ldr	r1, [sp, #160]	; 0xa0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18ce:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    18d0:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18d2:	strb	r3, [r5, #16]
    18d4:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    18d6:	str	r1, [r5, #8]
    18d8:	b.w	5f0 <loop+0x15c>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    18dc:	movs	r0, #2
    18de:	strb.w	r0, [lr]
    18e2:	movs	r1, #10
    18e4:	ldr	r0, [pc, #136]	; (1970 <loop+0x14dc>)
    18e6:	str	r2, [sp, #4]
    18e8:	str	r3, [sp, #0]
    18ea:	bl	1cac <usb_serial_write>
    18ee:	ldr	r0, [pc, #132]	; (1974 <loop+0x14e0>)
    18f0:	bl	3820 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    18f4:	ldr.w	r5, [sl, #60]	; 0x3c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18f8:	ldrb.w	r9, [r5]
    18fc:	mov	r0, r9
    18fe:	bl	22c8 <digitalRead>
    1902:	clz	r1, r0
    1906:	lsrs	r1, r1, #5
    1908:	mov	r0, r9
    190a:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    190e:	ldr.w	r1, [r8]
    1912:	str	r1, [sp, #96]	; 0x60
      blinking = true;
      blinkingCounter = times;
    1914:	ldr	r2, [sp, #4]
	return ret;
    1916:	ldr	r1, [sp, #96]	; 0x60
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1918:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    191a:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    191c:	strb	r3, [r5, #16]
    191e:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    1920:	str	r1, [r5, #8]
    1922:	b.w	4e8 <loop+0x54>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[0]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1926:	movs	r0, #2
    1928:	strb.w	r0, [lr]
    192c:	movs	r1, #10
    192e:	ldr	r0, [pc, #64]	; (1970 <loop+0x14dc>)
    1930:	str	r2, [sp, #4]
    1932:	str	r3, [sp, #0]
    1934:	bl	1cac <usb_serial_write>
    1938:	ldr	r0, [pc, #56]	; (1974 <loop+0x14e0>)
    193a:	bl	3820 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[1]->blink(3);
    193e:	ldr.w	r6, [sl, #60]	; 0x3c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1942:	ldrb.w	r9, [r6]
    1946:	mov	r0, r9
    1948:	bl	22c8 <digitalRead>
    194c:	clz	r1, r0
    1950:	lsrs	r1, r1, #5
    1952:	mov	r0, r9
    1954:	bl	22bc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1958:	ldr.w	r1, [r8]
    195c:	str	r1, [sp, #144]	; 0x90
      blinking = true;
      blinkingCounter = times;
    195e:	ldr	r2, [sp, #4]
	return ret;
    1960:	ldr	r1, [sp, #144]	; 0x90
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1962:	ldr	r3, [sp, #0]
      blinkingCounter = times;
    1964:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1966:	strb	r3, [r6, #16]
    1968:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    196a:	str	r1, [r6, #8]
    196c:	b.w	5ae <loop+0x11a>
    1970:	.word	0x00004bf0
    1974:	.word	0x1fff0c70

00001978 <_GLOBAL__sub_I_currentMode>:
    1978:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
class Controller {
  private:
    int max_ppqn = 24;
    
  public:
    Controller () {};
    197c:	ldr.w	r8, [pc, #596]	; 1bd4 <_GLOBAL__sub_I_currentMode+0x25c>
#include "controller.h"
#include "step.h"

Controller controller;

Led led1(3, LOW);
    1980:	ldr	r0, [pc, #500]	; (1b78 <_GLOBAL__sub_I_currentMode+0x200>)
    Step* m_steps[4];
    Led* m_leds[6];
    Modes m_mode;
    Controller &m_controller;

    Sequence (Step* steps[4], Led* leds[6], boolean state, Controller& controller): m_controller(controller) {
    1982:	ldr	r4, [pc, #504]	; (1b7c <_GLOBAL__sub_I_currentMode+0x204>)
      m_leds[0] = leds[0];
    1984:	ldr	r6, [pc, #504]	; (1b80 <_GLOBAL__sub_I_currentMode+0x208>)
    1986:	movs	r5, #24
    1988:	movs	r2, #0
    198a:	movs	r1, #3
    198c:	str.w	r5, [r8]
    1990:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    1994:	movs	r2, #0
    1996:	movs	r1, #5
    1998:	ldr	r0, [pc, #488]	; (1b84 <_GLOBAL__sub_I_currentMode+0x20c>)
    199a:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    199e:	movs	r2, #0
    19a0:	movs	r1, #7
    19a2:	ldr	r0, [pc, #484]	; (1b88 <_GLOBAL__sub_I_currentMode+0x210>)
    19a4:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    19a8:	movs	r2, #0
    19aa:	movs	r1, #9
    19ac:	ldr	r0, [pc, #476]	; (1b8c <_GLOBAL__sub_I_currentMode+0x214>)
    19ae:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    19b2:	movs	r2, #0
    19b4:	movs	r1, #11
    19b6:	ldr	r0, [pc, #472]	; (1b90 <_GLOBAL__sub_I_currentMode+0x218>)
    19b8:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    19bc:	mov	r1, r5
    19be:	movs	r2, #0
    19c0:	ldr	r0, [pc, #464]	; (1b94 <_GLOBAL__sub_I_currentMode+0x21c>)
    19c2:	bl	46c <Led::Led(int, int)>
    Step* m_steps[4];
    Led* m_leds[6];
    Modes m_mode;
    Controller &m_controller;

    Sequence (Step* steps[4], Led* leds[6], boolean state, Controller& controller): m_controller(controller) {
    19c6:	ldr	r1, [pc, #464]	; (1b98 <_GLOBAL__sub_I_currentMode+0x220>)
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    19c8:	ldr	r2, [pc, #464]	; (1b9c <_GLOBAL__sub_I_currentMode+0x224>)
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
    19ca:	ldr	r7, [r6, #4]
    Step* m_steps[4];
    Led* m_leds[6];
    Modes m_mode;
    Controller &m_controller;

    Sequence (Step* steps[4], Led* leds[6], boolean state, Controller& controller): m_controller(controller) {
    19cc:	str	r5, [r4, #32]
    19ce:	movs	r0, #0
    19d0:	movs	r5, #120	; 0x78
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    19d2:	mov.w	sl, #38	; 0x26
    19d6:	strd	r0, r1, [r4, #16]
    19da:	str	r5, [r4, #8]
      m_velocity = 100;
    19dc:	movs	r0, #100	; 0x64
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    19de:	movs	r5, #0
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
    19e0:	str	r7, [r4, #60]	; 0x3c
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 1;
    19e2:	movs	r7, #1
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    19e4:	str.w	r8, [r2]
      m_state = false;
    19e8:	strb	r5, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    19ea:	str.w	sl, [r2, #8]
      m_velocity = 100;
    19ee:	str	r0, [r2, #12]
      m_length = 1;
    19f0:	str	r7, [r2, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    19f2:	ldr	r2, [pc, #428]	; (1ba0 <_GLOBAL__sub_I_currentMode+0x228>)
    19f4:	ldr	r3, [pc, #428]	; (1ba4 <_GLOBAL__sub_I_currentMode+0x22c>)
    19f6:	ldr	r1, [pc, #432]	; (1ba8 <_GLOBAL__sub_I_currentMode+0x230>)
    Led* m_leds[6];
    Modes m_mode;
    Controller &m_controller;

    Sequence (Step* steps[4], Led* leds[6], boolean state, Controller& controller): m_controller(controller) {
      m_leds[0] = leds[0];
    19f8:	ldr.w	r9, [r6]
    19fc:	str.w	r8, [r2]
      m_state = false;
    1a00:	strb	r5, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    1a02:	str.w	sl, [r2, #8]
      m_velocity = 100;
    1a06:	str	r0, [r2, #12]
      m_length = 1;
    1a08:	str	r7, [r2, #16]
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
    1a0a:	ldr	r2, [r6, #8]
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    1a0c:	ldr.w	ip, [pc, #456]	; 1bd8 <_GLOBAL__sub_I_currentMode+0x260>
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1a10:	str.w	r8, [r3]
      m_state = false;
    1a14:	strb	r5, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    1a16:	str.w	sl, [r3, #8]
      m_velocity = 100;
    1a1a:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1a1c:	str.w	r8, [r1]
      m_state = false;
    1a20:	strb	r5, [r1, #4]
      m_controller = controller;
      m_pitch = 38;
    1a22:	str.w	sl, [r1, #8]
      m_velocity = 100;
    1a26:	str	r0, [r1, #12]
    Step* m_steps[4];
    Led* m_leds[6];
    Modes m_mode;
    Controller &m_controller;

    Sequence (Step* steps[4], Led* leds[6], boolean state, Controller& controller): m_controller(controller) {
    1a28:	str.w	r8, [r4, #84]	; 0x54
      m_leds[0] = leds[0];
    1a2c:	str.w	r9, [r4, #56]	; 0x38
    Step* m_steps[4];
    Led* m_leds[6];
    Modes m_mode;
    Controller &m_controller;

    Sequence (Step* steps[4], Led* leds[6], boolean state, Controller& controller): m_controller(controller) {
    1a30:	str	r5, [r4, #24]
    1a32:	str	r5, [r4, #28]
    1a34:	str	r5, [r4, #36]	; 0x24
      m_length = 1;
    1a36:	str	r7, [r3, #16]
    1a38:	str	r7, [r1, #16]
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
    1a3a:	str	r2, [r4, #64]	; 0x40
      m_leds[3] = leds[3];
    1a3c:	ldr	r3, [r6, #12]
      m_leds[4] = leds[4];
    1a3e:	ldr	r2, [r6, #16]

    Sequence (Step* steps[4], Led* leds[6], boolean state, Controller& controller): m_controller(controller) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    1a40:	str	r3, [r4, #68]	; 0x44
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1a42:	ldr	r3, [r6, #20]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a44:	ldr.w	lr, [pc, #404]	; 1bdc <_GLOBAL__sub_I_currentMode+0x264>
    Sequence (Step* steps[4], Led* leds[6], boolean state, Controller& controller): m_controller(controller) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1a48:	str	r2, [r4, #72]	; 0x48
      m_id = id;
      m_pin = pin;
    1a4a:	mov.w	r8, #2
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    1a4e:	ldr.w	r2, [ip]
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1a52:	str	r3, [r4, #76]	; 0x4c
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
    1a54:	ldr.w	r3, [ip, #4]
    1a58:	str	r3, [r4, #44]	; 0x2c
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1a5a:	mov	r1, r5
      m_steps[2] = steps[2];
      m_steps[3] = steps[3];
    1a5c:	ldr.w	r3, [ip, #12]
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    1a60:	str	r2, [r4, #40]	; 0x28
    1a62:	mov	r0, r8
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
    1a64:	ldr.w	r2, [ip, #8]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a68:	str.w	r9, [lr, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a6c:	strb.w	r5, [lr, #16]
      m_playButton = playButton;
    1a70:	strb.w	r5, [lr, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a74:	str.w	r4, [lr, #28]
      m_id = id;
    1a78:	str.w	r7, [lr]
      m_pin = pin;
    1a7c:	str.w	r8, [lr, #32]
    1a80:	mov.w	r9, #4
      m_steps[3] = steps[3];
      m_state = state;
    1a84:	strb	r5, [r4, #0]
      m_currentStep = 0;
    1a86:	str	r5, [r4, #4]
      m_mode = PITCH;
    1a88:	strb.w	r5, [r4, #80]	; 0x50
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
      m_steps[3] = steps[3];
    1a8c:	str	r3, [r4, #52]	; 0x34
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
    1a8e:	str	r2, [r4, #48]	; 0x30
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1a90:	bl	22e4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a94:	ldr	r3, [pc, #276]	; (1bac <_GLOBAL__sub_I_currentMode+0x234>)
    1a96:	ldr	r2, [r6, #4]
    1a98:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1a9a:	mov	r1, r5
    1a9c:	mov	r0, r9
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a9e:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1aa0:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1aa2:	mov.w	fp, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1aa6:	str	r4, [r3, #28]
      m_id = id;
    1aa8:	str.w	r8, [r3]
      m_pin = pin;
    1aac:	str.w	r9, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ab0:	bl	22e4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ab4:	ldr	r3, [pc, #248]	; (1bb0 <_GLOBAL__sub_I_currentMode+0x238>)
    1ab6:	ldr	r2, [r6, #8]
    1ab8:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1aba:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1abc:	mov.w	sl, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ac0:	mov	r0, fp
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1ac2:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1ac4:	strb	r5, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ac6:	str	r4, [r3, #28]
      m_id = id;
    1ac8:	str.w	sl, [r3]
      m_pin = pin;
    1acc:	str.w	fp, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ad0:	bl	22e4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ad4:	ldr	r3, [pc, #220]	; (1bb4 <_GLOBAL__sub_I_currentMode+0x23c>)
    1ad6:	ldr	r2, [r6, #12]
    1ad8:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1ada:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1adc:	mov	r0, r2
    1ade:	mov	r1, r5
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1ae0:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1ae2:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1ae4:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ae6:	str	r4, [r3, #28]
      m_id = id;
    1ae8:	str.w	r9, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1aec:	bl	22e4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1af0:	ldr	r3, [pc, #196]	; (1bb8 <_GLOBAL__sub_I_currentMode+0x240>)
    1af2:	ldr	r2, [r6, #16]
    1af4:	str	r2, [r3, #24]
      m_id = id;
    1af6:	movs	r1, #5
      m_pin = pin;
    1af8:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1afa:	str	r1, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1afc:	mov	r0, r2
    1afe:	mov	r1, r5
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1b00:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1b02:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b04:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1b06:	strb	r7, [r3, #16]
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1b08:	bl	22e4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b0c:	ldr	r3, [pc, #172]	; (1bbc <_GLOBAL__sub_I_currentMode+0x244>)
    1b0e:	ldr	r2, [r6, #20]
    1b10:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1b12:	movs	r6, #12
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1b14:	mov	r0, r6
    1b16:	mov	r1, r5
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1b18:	str	r6, [r3, #32]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b1a:	ldr	r6, [pc, #164]	; (1bc0 <_GLOBAL__sub_I_currentMode+0x248>)
      m_shiftButton = shiftButton;
    1b1c:	strb	r5, [r3, #16]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1b1e:	str.w	fp, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b22:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1b24:	strb	r7, [r3, #17]

      pinMode(pin, INPUT);
    1b26:	bl	22e4 <pinMode>
    1b2a:	ldr	r0, [pc, #152]	; (1bc4 <_GLOBAL__sub_I_currentMode+0x24c>)
    1b2c:	ldr	r1, [pc, #152]	; (1bc8 <_GLOBAL__sub_I_currentMode+0x250>)
    1b2e:	ldr	r2, [pc, #156]	; (1bcc <_GLOBAL__sub_I_currentMode+0x254>)
    1b30:	ldr	r3, [pc, #156]	; (1bd0 <_GLOBAL__sub_I_currentMode+0x258>)
      m_pin = pin;
      m_knobType = knobType;
    1b32:	strb	r5, [r6, #20]
      m_id = id;
    1b34:	str	r5, [r6, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1b36:	mov.w	lr, #15
    1b3a:	movs	r5, #14
    1b3c:	strb	r5, [r6, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b3e:	str	r4, [r6, #16]
    1b40:	str	r4, [r0, #16]
      m_pin = pin;
    1b42:	movs	r6, #16
      m_knobType = knobType;
    1b44:	strb	r7, [r0, #20]
      m_id = id;
    1b46:	str	r7, [r0, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1b48:	movs	r5, #17
    1b4a:	strb.w	lr, [r0]
    1b4e:	movs	r0, #18
    1b50:	strb	r6, [r1, #0]
    1b52:	strb	r5, [r2, #0]
    1b54:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b56:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1b58:	strb.w	r8, [r1, #20]
      m_id = id;
    1b5c:	str.w	r8, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b60:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    1b62:	strb.w	sl, [r2, #20]
      m_id = id;
    1b66:	str.w	sl, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b6a:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1b6c:	strb.w	r9, [r3, #20]
      m_id = id;
    1b70:	str.w	r9, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1b74:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b78:	.word	0x1fff180c
    1b7c:	.word	0x1fff17b0
    1b80:	.word	0x1fff0c50
    1b84:	.word	0x1fff1824
    1b88:	.word	0x1fff183c
    1b8c:	.word	0x1fff1854
    1b90:	.word	0x1fff15dc
    1b94:	.word	0x1fff15f4
    1b98:	.word	0x407f4000
    1b9c:	.word	0x1fff16e8
    1ba0:	.word	0x1fff1724
    1ba4:	.word	0x1fff16fc
    1ba8:	.word	0x1fff1710
    1bac:	.word	0x1fff1634
    1bb0:	.word	0x1fff1658
    1bb4:	.word	0x1fff167c
    1bb8:	.word	0x1fff16a0
    1bbc:	.word	0x1fff16c4
    1bc0:	.word	0x1fff1738
    1bc4:	.word	0x1fff1750
    1bc8:	.word	0x1fff1768
    1bcc:	.word	0x1fff1780
    1bd0:	.word	0x1fff1798
    1bd4:	.word	0x1fff160c
    1bd8:	.word	0x1fff0c40
    1bdc:	.word	0x1fff1610

00001be0 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1be0:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1be2:	ldr	r5, [pc, #60]	; (1c20 <usb_serial_getchar+0x40>)
    1be4:	ldr	r0, [r5, #0]
    1be6:	cbz	r0, 1c08 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1be8:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1bea:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1bec:	adds	r1, r0, r3
    1bee:	adds	r3, #1
	if (i >= rx_packet->len) {
    1bf0:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1bf2:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1bf4:	bcs.n	1bfc <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1bf6:	strh	r3, [r0, #2]
	}
	return c;
    1bf8:	mov	r0, r4
}
    1bfa:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1bfc:	bl	2a8c <usb_free>
		rx_packet = NULL;
    1c00:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1c02:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1c04:	str	r3, [r5, #0]
    1c06:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1c08:	ldr	r3, [pc, #24]	; (1c24 <usb_serial_getchar+0x44>)
    1c0a:	ldrb	r3, [r3, #0]
    1c0c:	cbz	r3, 1c1a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1c0e:	movs	r0, #2
    1c10:	bl	2ad8 <usb_rx>
    1c14:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1c16:	cmp	r0, #0
    1c18:	bne.n	1be8 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1c1a:	mov.w	r0, #4294967295
    1c1e:	pop	{r3, r4, r5, pc}
    1c20:	.word	0x1fff1878
    1c24:	.word	0x1fff19d8

00001c28 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1c28:	push	{r4, lr}
	if (!rx_packet) {
    1c2a:	ldr	r4, [pc, #36]	; (1c50 <usb_serial_peekchar+0x28>)
    1c2c:	ldr	r0, [r4, #0]
    1c2e:	cbz	r0, 1c38 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1c30:	ldrh	r3, [r0, #2]
    1c32:	add	r0, r3
    1c34:	ldrb	r0, [r0, #8]
}
    1c36:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1c38:	ldr	r3, [pc, #24]	; (1c54 <usb_serial_peekchar+0x2c>)
    1c3a:	ldrb	r3, [r3, #0]
    1c3c:	cbz	r3, 1c4a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1c3e:	movs	r0, #2
    1c40:	bl	2ad8 <usb_rx>
    1c44:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1c46:	cmp	r0, #0
    1c48:	bne.n	1c30 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1c4a:	mov.w	r0, #4294967295
    1c4e:	pop	{r4, pc}
    1c50:	.word	0x1fff1878
    1c54:	.word	0x1fff19d8

00001c58 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1c58:	ldr	r3, [pc, #16]	; (1c6c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1c5a:	ldr	r2, [pc, #20]	; (1c70 <usb_serial_available+0x18>)
    1c5c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1c5e:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1c60:	cbz	r3, 1c6a <usb_serial_available+0x12>
    1c62:	ldrh	r2, [r3, #0]
    1c64:	ldrh	r3, [r3, #2]
    1c66:	subs	r3, r2, r3
    1c68:	add	r0, r3
	return count;
}
    1c6a:	bx	lr
    1c6c:	.word	0x1fff1878
    1c70:	.word	0x1fff1e6c

00001c74 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1c74:	ldr	r3, [pc, #44]	; (1ca4 <usb_serial_flush_input+0x30>)
    1c76:	ldrb	r3, [r3, #0]
    1c78:	cbz	r3, 1ca2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1c7a:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1c7c:	ldr	r4, [pc, #40]	; (1ca8 <usb_serial_flush_input+0x34>)
    1c7e:	ldr	r0, [r4, #0]
    1c80:	cbz	r0, 1c96 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1c82:	bl	2a8c <usb_free>
		rx_packet = NULL;
    1c86:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1c88:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1c8a:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1c8c:	bl	2ad8 <usb_rx>
		if (!rx) break;
    1c90:	cbz	r0, 1ca0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1c92:	bl	2a8c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1c96:	movs	r0, #2
    1c98:	bl	2ad8 <usb_rx>
		if (!rx) break;
    1c9c:	cmp	r0, #0
    1c9e:	bne.n	1c92 <usb_serial_flush_input+0x1e>
    1ca0:	pop	{r4, pc}
    1ca2:	bx	lr
    1ca4:	.word	0x1fff19d8
    1ca8:	.word	0x1fff1878

00001cac <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1cac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1cb0:	ldr.w	r9, [pc, #248]	; 1dac <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1cb4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1cb6:	movs	r2, #1
    1cb8:	strb.w	r2, [r9]
	while (size > 0) {
    1cbc:	str	r1, [sp, #4]
    1cbe:	cbz	r1, 1d1c <usb_serial_write+0x70>
    1cc0:	ldr.w	r8, [pc, #236]	; 1db0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1cc4:	ldr	r7, [pc, #212]	; (1d9c <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1cc6:	ldr	r6, [sp, #4]
    1cc8:	mov	fp, r0
		if (!tx_packet) {
    1cca:	ldr.w	r0, [r8]
    1cce:	cbz	r0, 1d3e <usb_serial_write+0x92>
    1cd0:	ldr	r5, [pc, #204]	; (1da0 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1cd2:	ldrh	r4, [r0, #2]
    1cd4:	rsb	r1, r4, #64	; 0x40
    1cd8:	cmp	r1, r6
    1cda:	it	cs
    1cdc:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1cde:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1ce2:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1ce4:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1ce8:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1cea:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1cec:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1cf0:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1cf4:	cbz	r1, 1d0c <usb_serial_write+0x60>
    1cf6:	subs	r4, #1
    1cf8:	add	r2, r4
    1cfa:	add	r1, fp
    1cfc:	ldrb.w	r4, [fp], #1
    1d00:	strb.w	r4, [r2, #1]!
    1d04:	cmp	fp, r1
    1d06:	bne.n	1cfc <usb_serial_write+0x50>
    1d08:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1d0c:	cmp.w	lr, #63	; 0x3f
    1d10:	bhi.n	1d2a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1d12:	ldr	r2, [pc, #144]	; (1da4 <usb_serial_write+0xf8>)
    1d14:	movs	r1, #5
    1d16:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1d18:	cmp	r6, #0
    1d1a:	bne.n	1cca <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1d1c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1d1e:	movs	r3, #0
    1d20:	strb.w	r3, [r9]
	return ret;
}
    1d24:	add	sp, #12
    1d26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1d2a:	movs	r2, #64	; 0x40
    1d2c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1d2e:	mov	r1, r0
    1d30:	movs	r0, #3
    1d32:	bl	2c28 <usb_tx>
			tx_packet = NULL;
    1d36:	movs	r2, #0
    1d38:	str.w	r2, [r8]
    1d3c:	b.n	1d12 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1d3e:	ldrb	r2, [r7, #0]
    1d40:	cbz	r2, 1d8c <usb_serial_write+0xe0>
    1d42:	ldr	r4, [pc, #100]	; (1da8 <usb_serial_write+0xfc>)
    1d44:	ldr	r5, [pc, #88]	; (1da0 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1d46:	mov.w	sl, #1
    1d4a:	b.n	1d5c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1d4c:	subs	r4, #1
    1d4e:	beq.n	1d7e <usb_serial_write+0xd2>
    1d50:	ldrb	r2, [r5, #0]
    1d52:	cbnz	r2, 1d7e <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1d54:	bl	372c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1d58:	ldrb	r2, [r7, #0]
    1d5a:	cbz	r2, 1d8c <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1d5c:	movs	r0, #3
    1d5e:	bl	2b14 <usb_tx_packet_count>
    1d62:	cmp	r0, #7
    1d64:	bhi.n	1d4c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1d66:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1d6a:	bl	2a4c <usb_malloc>
    1d6e:	str.w	r0, [r8]
					if (tx_packet) break;
    1d72:	cmp	r0, #0
    1d74:	bne.n	1cd2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1d76:	ldr	r3, [pc, #52]	; (1dac <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1d78:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1d7a:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1d7c:	bne.n	1d50 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1d7e:	movs	r3, #1
					return -1;
    1d80:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1d84:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1d86:	add	sp, #12
    1d88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1d8c:	movs	r3, #0
					return -1;
    1d8e:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1d92:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1d96:	add	sp, #12
    1d98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d9c:	.word	0x1fff19d8
    1da0:	.word	0x1fff1874
    1da4:	.word	0x1fff186c
    1da8:	.word	0x00014821
    1dac:	.word	0x1fff186d
    1db0:	.word	0x1fff1870

00001db4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1db4:	push	{lr}
    1db6:	sub	sp, #12
    1db8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1dba:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1dbc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1dc0:	mov	r0, r3
    1dc2:	bl	1cac <usb_serial_write>
}
    1dc6:	add	sp, #12
    1dc8:	ldr.w	pc, [sp], #4

00001dcc <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1dcc:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1dce:	ldr	r5, [pc, #56]	; (1e08 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1dd0:	ldr	r4, [pc, #56]	; (1e0c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1dd2:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1dd4:	movs	r3, #1
    1dd6:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1dd8:	cbz	r0, 1de6 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1dda:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1ddc:	movs	r3, #0
    1dde:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1de0:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1de4:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1de6:	ldr	r3, [pc, #40]	; (1e10 <usb_serial_write_buffer_free+0x44>)
    1de8:	ldrb	r3, [r3, #0]
    1dea:	cbnz	r3, 1df2 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1dec:	movs	r0, #0
    1dee:	strb	r0, [r4, #0]
			return 0;
    1df0:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1df2:	movs	r0, #3
    1df4:	bl	2b14 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1df8:	cmp	r0, #7
    1dfa:	bhi.n	1dec <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1dfc:	bl	2a4c <usb_malloc>
    1e00:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1e02:	cmp	r0, #0
    1e04:	bne.n	1dda <usb_serial_write_buffer_free+0xe>
    1e06:	b.n	1dec <usb_serial_write_buffer_free+0x20>
    1e08:	.word	0x1fff1870
    1e0c:	.word	0x1fff186d
    1e10:	.word	0x1fff19d8

00001e14 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1e14:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1e16:	ldr	r3, [pc, #68]	; (1e5c <usb_serial_flush_output+0x48>)
    1e18:	ldrb	r3, [r3, #0]
    1e1a:	cbz	r3, 1e40 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1e1c:	ldr	r6, [pc, #64]	; (1e60 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1e1e:	ldr	r5, [pc, #68]	; (1e64 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1e20:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1e22:	movs	r7, #1
    1e24:	strb	r7, [r5, #0]
	if (tx_packet) {
    1e26:	cbz	r4, 1e42 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1e28:	ldr	r2, [pc, #60]	; (1e68 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1e2a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1e2c:	movs	r7, #0
    1e2e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1e30:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1e32:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1e34:	movs	r0, #3
    1e36:	bl	2c28 <usb_tx>
		tx_packet = NULL;
    1e3a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1e3c:	movs	r3, #0
    1e3e:	strb	r3, [r5, #0]
    1e40:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1e42:	bl	2a4c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1e46:	ldr	r3, [pc, #32]	; (1e68 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1e48:	cbz	r0, 1e56 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e4a:	mov	r1, r0
    1e4c:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1e4e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e50:	bl	2c28 <usb_tx>
    1e54:	b.n	1e3c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1e56:	strb	r7, [r3, #0]
    1e58:	b.n	1e3c <usb_serial_flush_output+0x28>
    1e5a:	nop
    1e5c:	.word	0x1fff19d8
    1e60:	.word	0x1fff1870
    1e64:	.word	0x1fff186d
    1e68:	.word	0x1fff186c

00001e6c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1e6c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1e6e:	ldr	r3, [pc, #56]	; (1ea8 <usb_serial_flush_callback+0x3c>)
    1e70:	ldrb	r3, [r3, #0]
    1e72:	cbnz	r3, 1e92 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1e74:	ldr	r4, [pc, #52]	; (1eac <usb_serial_flush_callback+0x40>)
    1e76:	ldr	r1, [r4, #0]
    1e78:	cbz	r1, 1e94 <usb_serial_flush_callback+0x28>
    1e7a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1e7e:	ldrh	r3, [r1, #2]
    1e80:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1e82:	movs	r0, #3
    1e84:	bl	2c28 <usb_tx>
		tx_packet = NULL;
    1e88:	str	r5, [r4, #0]
    1e8a:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1e8c:	ldr	r3, [pc, #32]	; (1eb0 <usb_serial_flush_callback+0x44>)
    1e8e:	movs	r2, #1
    1e90:	strb	r2, [r3, #0]
    1e92:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1e94:	bl	2a4c <usb_malloc>
		if (tx) {
    1e98:	cmp	r0, #0
    1e9a:	beq.n	1e8c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e9c:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1e9e:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1ea2:	movs	r0, #3
    1ea4:	b.w	2c28 <usb_tx>
    1ea8:	.word	0x1fff186d
    1eac:	.word	0x1fff1870
    1eb0:	.word	0x1fff186c

00001eb4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1eb4:	ldr	r2, [pc, #220]	; (1f94 <wait_for_cal+0xe0>)
    1eb6:	ldr	r1, [pc, #224]	; (1f98 <wait_for_cal+0xe4>)
    1eb8:	ldr	r3, [r2, #0]
    1eba:	lsls	r3, r3, #24
    1ebc:	bmi.n	1eb8 <wait_for_cal+0x4>
    1ebe:	ldr	r3, [r1, #0]
    1ec0:	ands.w	r3, r3, #128	; 0x80
    1ec4:	bne.n	1eb8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1ec6:	cpsid	i
	if (calibrating) {
    1ec8:	ldr	r1, [pc, #208]	; (1f9c <wait_for_cal+0xe8>)
    1eca:	ldrb	r2, [r1, #0]
    1ecc:	cmp	r2, #0
    1ece:	beq.n	1f90 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ed0:	ldr	r2, [pc, #204]	; (1fa0 <wait_for_cal+0xec>)
    1ed2:	ldr	r0, [pc, #208]	; (1fa4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1ed4:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ed6:	ldr	r4, [pc, #208]	; (1fa8 <wait_for_cal+0xf4>)
    1ed8:	ldr	r7, [r2, #0]
    1eda:	ldr	r6, [r0, #0]
    1edc:	ldr	r5, [r4, #0]
    1ede:	ldr	r4, [r2, #12]
    1ee0:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1ee2:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ee4:	adds	r2, #20
    1ee6:	ldr	r0, [r0, #0]
    1ee8:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1eea:	ldr	r7, [pc, #192]	; (1fac <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1eec:	add	r5, r6
    1eee:	add	r4, r5
    1ef0:	add	r0, r4
    1ef2:	add	r2, r0
    1ef4:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1ef8:	ldr	r6, [pc, #180]	; (1fb0 <wait_for_cal+0xfc>)
    1efa:	ldr	r0, [pc, #184]	; (1fb4 <wait_for_cal+0x100>)
    1efc:	ldr	r5, [pc, #184]	; (1fb8 <wait_for_cal+0x104>)
    1efe:	ldr	r4, [pc, #188]	; (1fbc <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1f00:	orr.w	r2, r2, #32768	; 0x8000
    1f04:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1f06:	ldr	r7, [r6, #0]
    1f08:	ldr	r6, [r0, #0]
    1f0a:	ldr	r5, [r5, #0]
    1f0c:	ldr	r2, [pc, #176]	; (1fc0 <wait_for_cal+0x10c>)
    1f0e:	ldr	r4, [r4, #0]
    1f10:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1f12:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1f14:	ldr	r0, [r0, #0]
    1f16:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1f18:	ldr	r7, [pc, #168]	; (1fc4 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1f1a:	add	r5, r6
    1f1c:	add	r4, r5
    1f1e:	add	r0, r4
    1f20:	add	r2, r0
    1f22:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1f26:	ldr	r6, [pc, #160]	; (1fc8 <wait_for_cal+0x114>)
    1f28:	ldr	r0, [pc, #160]	; (1fcc <wait_for_cal+0x118>)
    1f2a:	ldr	r5, [pc, #164]	; (1fd0 <wait_for_cal+0x11c>)
    1f2c:	ldr	r4, [pc, #164]	; (1fd4 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1f2e:	orr.w	r2, r2, #32768	; 0x8000
    1f32:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1f34:	ldr	r7, [r6, #0]
    1f36:	ldr	r6, [r0, #0]
    1f38:	ldr	r5, [r5, #0]
    1f3a:	ldr	r2, [pc, #156]	; (1fd8 <wait_for_cal+0x124>)
    1f3c:	ldr	r4, [r4, #0]
    1f3e:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1f40:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1f42:	ldr	r0, [r0, #0]
    1f44:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1f46:	ldr	r7, [pc, #148]	; (1fdc <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1f48:	add	r5, r6
    1f4a:	add	r4, r5
    1f4c:	add	r0, r4
    1f4e:	add	r2, r0
    1f50:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f54:	ldr	r6, [pc, #136]	; (1fe0 <wait_for_cal+0x12c>)
    1f56:	ldr	r0, [pc, #140]	; (1fe4 <wait_for_cal+0x130>)
    1f58:	ldr	r5, [pc, #140]	; (1fe8 <wait_for_cal+0x134>)
    1f5a:	ldr	r4, [pc, #144]	; (1fec <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1f5c:	orr.w	r2, r2, #32768	; 0x8000
    1f60:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f62:	ldr	r7, [r6, #0]
    1f64:	ldr	r6, [r0, #0]
    1f66:	ldr	r5, [r5, #0]
    1f68:	ldr	r2, [pc, #132]	; (1ff0 <wait_for_cal+0x13c>)
    1f6a:	ldr	r4, [r4, #0]
    1f6c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1f6e:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f70:	ldr	r0, [r0, #0]
    1f72:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1f74:	add	r5, r6
    1f76:	add	r4, r5
    1f78:	add	r0, r4
    1f7a:	add	r2, r0
    1f7c:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1f80:	ldr	r0, [pc, #112]	; (1ff4 <wait_for_cal+0x140>)
    1f82:	orr.w	r2, r2, #32768	; 0x8000
    1f86:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1f88:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1f8a:	cpsie	i
}
    1f8c:	pop	{r4, r5, r6, r7}
    1f8e:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1f90:	cpsie	i
    1f92:	bx	lr
    1f94:	.word	0x4003b024
    1f98:	.word	0x400bb024
    1f9c:	.word	0x1fff187e
    1fa0:	.word	0x4003b038
    1fa4:	.word	0x4003b03c
    1fa8:	.word	0x4003b040
    1fac:	.word	0x4003b02c
    1fb0:	.word	0x4003b058
    1fb4:	.word	0x4003b05c
    1fb8:	.word	0x4003b060
    1fbc:	.word	0x4003b064
    1fc0:	.word	0x4003b06c
    1fc4:	.word	0x4003b030
    1fc8:	.word	0x400bb038
    1fcc:	.word	0x400bb03c
    1fd0:	.word	0x400bb040
    1fd4:	.word	0x400bb044
    1fd8:	.word	0x400bb04c
    1fdc:	.word	0x400bb02c
    1fe0:	.word	0x400bb058
    1fe4:	.word	0x400bb05c
    1fe8:	.word	0x400bb060
    1fec:	.word	0x400bb064
    1ff0:	.word	0x400bb06c
    1ff4:	.word	0x400bb030

00001ff8 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1ff8:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1ffa:	ldr	r0, [pc, #164]	; (20a0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1ffc:	ldr	r2, [pc, #164]	; (20a4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1ffe:	ldr	r3, [pc, #168]	; (20a8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2000:	ldr	r5, [pc, #168]	; (20ac <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2002:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2004:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2006:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2008:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    200a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    200c:	ldr	r4, [pc, #160]	; (20b0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    200e:	cmp	r3, #8
    2010:	beq.n	2074 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2012:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2014:	ldr	r0, [pc, #156]	; (20b4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2016:	ldr	r1, [pc, #160]	; (20b8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2018:	beq.n	208a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    201a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    201c:	ite	eq
    201e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2020:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2022:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2024:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2026:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2028:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    202a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    202c:	ldr	r3, [pc, #140]	; (20bc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    202e:	ldr	r1, [pc, #144]	; (20c0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2030:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2032:	ldr	r2, [pc, #144]	; (20c4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2034:	cbz	r3, 2066 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2036:	movs	r3, #1
    2038:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    203a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    203c:	ldr	r3, [pc, #136]	; (20c8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    203e:	ldr	r1, [pc, #140]	; (20cc <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2040:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2042:	ldr	r2, [pc, #140]	; (20d0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2044:	cmp	r3, #1
    2046:	bls.n	2096 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2048:	cmp	r3, #4
    204a:	bls.n	206c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    204c:	cmp	r3, #8
    204e:	bls.n	208e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2050:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2052:	ite	ls
    2054:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2056:	movhi	r3, #135	; 0x87
    2058:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    205a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    205c:	ldr	r3, [pc, #116]	; (20d4 <analog_init+0xdc>)
    205e:	movs	r2, #1
    2060:	strb	r2, [r3, #0]
}
    2062:	pop	{r4, r5}
    2064:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2066:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2068:	str	r3, [r2, #0]
    206a:	b.n	203c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    206c:	movs	r3, #132	; 0x84
    206e:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2070:	str	r3, [r2, #0]
    2072:	b.n	205c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2074:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2078:	ldr	r1, [pc, #60]	; (20b8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    207a:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    207c:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    207e:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2080:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2082:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2084:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2086:	str	r3, [r1, #0]
    2088:	b.n	202c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    208a:	movs	r2, #57	; 0x39
    208c:	b.n	207e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    208e:	movs	r3, #133	; 0x85
    2090:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2092:	str	r3, [r2, #0]
    2094:	b.n	205c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2096:	movs	r3, #128	; 0x80
    2098:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    209a:	str	r3, [r2, #0]
    209c:	b.n	205c <analog_init+0x64>
    209e:	nop
    20a0:	.word	0x40074000
    20a4:	.word	0x40074001
    20a8:	.word	0x1fff0c68
    20ac:	.word	0x4003b008
    20b0:	.word	0x4003b00c
    20b4:	.word	0x400bb008
    20b8:	.word	0x400bb00c
    20bc:	.word	0x1fff1881
    20c0:	.word	0x4003b020
    20c4:	.word	0x400bb020
    20c8:	.word	0x1fff0c69
    20cc:	.word	0x4003b024
    20d0:	.word	0x400bb024
    20d4:	.word	0x1fff187e

000020d8 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    20d8:	cmp	r0, #71	; 0x47
    20da:	bhi.n	213c <analogRead+0x64>
	channel = pin2sc1a[pin];
    20dc:	ldr	r3, [pc, #204]	; (21ac <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    20de:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    20e2:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    20e4:	cmp	r6, #255	; 0xff
    20e6:	beq.n	2140 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    20e8:	ldr	r3, [pc, #196]	; (21b0 <analogRead+0xd8>)
    20ea:	ldrb	r3, [r3, #0]
    20ec:	cmp	r3, #0
    20ee:	bne.n	2146 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    20f0:	lsls	r2, r6, #24
    20f2:	bmi.n	214e <analogRead+0x76>
#endif

	__disable_irq();
    20f4:	cpsid	i
    20f6:	ldr	r5, [pc, #188]	; (21b4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    20f8:	ldr	r4, [pc, #188]	; (21b8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    20fa:	mov	r7, r5
    20fc:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    20fe:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2100:	strb	r3, [r5, #0]
	__enable_irq();
    2102:	cpsie	i
	while (1) {
		__disable_irq();
    2104:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2106:	ldr	r3, [r4, #0]
    2108:	lsls	r3, r3, #24
    210a:	bmi.n	2126 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    210c:	ldrb	r3, [r7, #0]
    210e:	cbnz	r3, 2118 <analogRead+0x40>
    2110:	b.n	20fc <analogRead+0x24>
    2112:	ldrb	r3, [r5, #0]
    2114:	cmp	r3, #0
    2116:	beq.n	20fc <analogRead+0x24>
		__enable_irq();
    2118:	cpsie	i
		yield();
    211a:	bl	372c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    211e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2120:	ldr	r3, [r4, #0]
    2122:	lsls	r0, r3, #24
    2124:	bpl.n	2112 <analogRead+0x3a>
			result = ADC0_RA;
    2126:	ldr	r3, [pc, #148]	; (21bc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2128:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    212a:	movs	r2, #0
    212c:	strb	r2, [r5, #0]
			__enable_irq();
    212e:	cpsie	i
			result >>= analog_right_shift;
    2130:	ldr	r2, [pc, #140]	; (21c0 <analogRead+0xe8>)
    2132:	ldrb	r0, [r2, #0]
    2134:	asr.w	r0, r3, r0
			return result;
    2138:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    213c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    213e:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2140:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2142:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2146:	bl	1eb4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    214a:	lsls	r2, r6, #24
    214c:	bpl.n	20f4 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    214e:	cpsid	i
    2150:	ldr	r5, [pc, #112]	; (21c4 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2152:	ldr.w	r8, [pc, #124]	; 21d0 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2156:	ldr	r4, [pc, #112]	; (21c8 <analogRead+0xf0>)
    2158:	and.w	r7, r6, #64	; 0x40
    215c:	uxtb	r7, r7
    215e:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2162:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2166:	cbz	r7, 21a0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2168:	bic.w	r3, r3, #16
    216c:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2170:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2172:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2174:	ldr	r2, [pc, #76]	; (21c4 <analogRead+0xec>)
    2176:	strb	r3, [r5, #0]
	__enable_irq();
    2178:	cpsie	i
	while (1) {
		__disable_irq();
    217a:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    217c:	ldr	r3, [r4, #0]
    217e:	lsls	r1, r3, #24
    2180:	bmi.n	219c <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    2182:	ldrb	r3, [r2, #0]
    2184:	cbnz	r3, 218e <analogRead+0xb6>
    2186:	b.n	2162 <analogRead+0x8a>
    2188:	ldrb	r3, [r5, #0]
    218a:	cmp	r3, #0
    218c:	beq.n	2162 <analogRead+0x8a>
		__enable_irq();
    218e:	cpsie	i
		yield();
    2190:	bl	372c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2194:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2196:	ldr	r3, [r4, #0]
    2198:	lsls	r3, r3, #24
    219a:	bpl.n	2188 <analogRead+0xb0>
			result = ADC1_RA;
    219c:	ldr	r3, [pc, #44]	; (21cc <analogRead+0xf4>)
    219e:	b.n	2128 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    21a0:	orr.w	r3, r3, #16
    21a4:	str.w	r3, [r8]
    21a8:	b.n	2170 <analogRead+0x98>
    21aa:	nop
    21ac:	.word	0x00004c0c
    21b0:	.word	0x1fff187e
    21b4:	.word	0x1fff1880
    21b8:	.word	0x4003b000
    21bc:	.word	0x4003b010
    21c0:	.word	0x1fff187d
    21c4:	.word	0x1fff187f
    21c8:	.word	0x400bb000
    21cc:	.word	0x400bb010
    21d0:	.word	0x400bb00c

000021d4 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    21d4:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    21d6:	ldr	r3, [pc, #68]	; (221c <digitalWrite.part.1+0x48>)
    21d8:	ldr.w	r2, [r3, r0, lsl #3]
    21dc:	ldrb.w	r4, [r2, #640]	; 0x280
    21e0:	cbz	r4, 21f0 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    21e2:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    21e4:	cbz	r1, 2206 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    21e6:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    21ea:	ldr.w	r4, [sp], #4
    21ee:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    21f0:	add.w	r3, r3, r0, lsl #3
    21f4:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    21f6:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    21f8:	cbnz	r1, 2210 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    21fa:	bic.w	r2, r2, #2
    21fe:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2200:	ldr.w	r4, [sp], #4
    2204:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2206:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    220a:	ldr.w	r4, [sp], #4
    220e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2210:	orr.w	r2, r2, #3
    2214:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2216:	ldr.w	r4, [sp], #4
    221a:	bx	lr
    221c:	.word	0x00004c54

00002220 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2220:	ldr	r2, [pc, #112]	; (2294 <pinMode.part.2+0x74>)
    2222:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2226:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2228:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    222a:	beq.n	2250 <pinMode.part.2+0x30>
    222c:	cmp	r1, #4
    222e:	beq.n	2268 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2230:	ldr.w	r0, [r2, r0, lsl #3]
    2234:	movs	r2, #0
    2236:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    223a:	cbz	r1, 2248 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    223c:	cmp	r1, #2
    223e:	beq.n	2282 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2240:	cmp	r1, #3
    2242:	beq.n	228a <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2244:	str	r2, [r3, #0]
    2246:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2248:	mov.w	r2, #256	; 0x100
    224c:	str	r2, [r3, #0]
    224e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2250:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2254:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2258:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    225c:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    225e:	ldr	r2, [r3, #0]
    2260:	bic.w	r2, r2, #32
    2264:	str	r2, [r3, #0]
    2266:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2268:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    226c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2270:	movs	r0, #1
    2272:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2276:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2278:	ldr	r2, [r3, #0]
    227a:	orr.w	r2, r2, #32
    227e:	str	r2, [r3, #0]
    2280:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2282:	movw	r2, #259	; 0x103
    2286:	str	r2, [r3, #0]
    2288:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    228a:	mov.w	r2, #258	; 0x102
    228e:	str	r2, [r3, #0]
    2290:	bx	lr
    2292:	nop
    2294:	.word	0x00004c54

00002298 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2298:	push	{r4, r5}
	RTC_SR = 0;
    229a:	ldr	r3, [pc, #20]	; (22b0 <rtc_set+0x18>)
	RTC_TPR = 0;
    229c:	ldr	r5, [pc, #20]	; (22b4 <rtc_set+0x1c>)
	RTC_TSR = t;
    229e:	ldr	r4, [pc, #24]	; (22b8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    22a0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    22a2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    22a4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    22a6:	str	r2, [r5, #0]
	RTC_TSR = t;
    22a8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    22aa:	str	r1, [r3, #0]
}
    22ac:	pop	{r4, r5}
    22ae:	bx	lr
    22b0:	.word	0x4003d014
    22b4:	.word	0x4003d004
    22b8:	.word	0x4003d000

000022bc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    22bc:	cmp	r0, #63	; 0x3f
    22be:	bhi.n	22c4 <digitalWrite+0x8>
    22c0:	b.w	21d4 <digitalWrite.part.1>
    22c4:	bx	lr
    22c6:	nop

000022c8 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    22c8:	cmp	r0, #63	; 0x3f
    22ca:	bhi.n	22da <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    22cc:	ldr	r3, [pc, #16]	; (22e0 <digitalRead+0x18>)
    22ce:	ldr.w	r3, [r3, r0, lsl #3]
    22d2:	ldrb.w	r0, [r3, #512]	; 0x200
    22d6:	uxtb	r0, r0
    22d8:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    22da:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    22dc:	bx	lr
    22de:	nop
    22e0:	.word	0x00004c54

000022e4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    22e4:	cmp	r0, #63	; 0x3f
    22e6:	bhi.n	22ec <pinMode+0x8>
    22e8:	b.w	2220 <pinMode.part.2>
    22ec:	bx	lr
    22ee:	nop

000022f0 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    22f0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    22f4:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    22f6:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    22f8:	ldr	r7, [pc, #136]	; (2384 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    22fa:	ldr	r3, [pc, #140]	; (2388 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    22fc:	ldr	r2, [pc, #140]	; (238c <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    22fe:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2300:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2302:	ldr	r2, [r2, #0]
	__enable_irq();
    2304:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2306:	lsls	r2, r2, #5
    2308:	bpl.n	2310 <delay+0x20>
    230a:	cmp	r3, #50	; 0x32
    230c:	it	hi
    230e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2310:	cbz	r5, 2380 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2312:	rsb	r3, r3, #179200	; 0x2bc00
    2316:	addw	r3, r3, #799	; 0x31f
    231a:	ldr	r6, [pc, #116]	; (2390 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    231c:	ldr.w	r9, [pc, #104]	; 2388 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2320:	ldr.w	r8, [pc, #104]	; 238c <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2324:	lsrs	r3, r3, #2
    2326:	mov.w	r2, #1000	; 0x3e8
    232a:	umull	r1, r3, r6, r3
    232e:	mul.w	r4, r2, r4
    2332:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2336:	cpsid	i
	current = SYST_CVR;
    2338:	ldr.w	r1, [r9]
	count = systick_millis_count;
    233c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    233e:	ldr.w	lr, [r8]
	__enable_irq();
    2342:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2344:	rsb	r3, r1, #179200	; 0x2bc00
    2348:	addw	r3, r3, #799	; 0x31f
    234c:	lsrs	r3, r3, #2
    234e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2352:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2356:	rsb	r3, r4, r3, lsr #2
    235a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    235e:	beq.n	2366 <delay+0x76>
    2360:	cmp	r1, #50	; 0x32
    2362:	it	hi
    2364:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2366:	mla	r3, r0, r2, r3
    236a:	cmp.w	r3, #1000	; 0x3e8
    236e:	bcc.n	237a <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2370:	subs	r5, #1
    2372:	beq.n	2380 <delay+0x90>
				start += 1000;
    2374:	add.w	r4, r4, #1000	; 0x3e8
    2378:	b.n	2336 <delay+0x46>
			}
			yield();
    237a:	bl	372c <yield>
		}
    237e:	b.n	2336 <delay+0x46>
    2380:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2384:	.word	0x1fff1884
    2388:	.word	0xe000e018
    238c:	.word	0xe000ed04
    2390:	.word	0x16c16c17

00002394 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2394:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2396:	ldr	r3, [pc, #312]	; (24d0 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2398:	ldr	r0, [pc, #312]	; (24d4 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    239a:	ldr.w	ip, [pc, #348]	; 24f8 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    239e:	ldr	r4, [pc, #312]	; (24d8 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    23a0:	ldr	r1, [pc, #312]	; (24dc <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    23a2:	ldr.w	lr, [pc, #344]	; 24fc <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    23a6:	ldr	r6, [pc, #312]	; (24e0 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    23a8:	ldr	r5, [pc, #312]	; (24e4 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    23aa:	ldr	r7, [pc, #316]	; (24e8 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    23ac:	mov.w	r2, #134217728	; 0x8000000
    23b0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    23b2:	mov.w	r2, #268435456	; 0x10000000
    23b6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    23b8:	mov.w	r2, #536870912	; 0x20000000
    23bc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    23be:	mov.w	r2, #1073741824	; 0x40000000
    23c2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    23c4:	mov.w	r2, #2147483648	; 0x80000000
    23c8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    23ca:	movs	r2, #0
    23cc:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    23ce:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    23d0:	movw	r0, #61439	; 0xefff
    23d4:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    23d8:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    23dc:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    23de:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    23e2:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    23e4:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    23e6:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    23e8:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    23ec:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    23ee:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    23f2:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    23f4:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    23f8:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    23fa:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    23fe:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2402:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2406:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    240a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    240e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2410:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2414:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2416:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2418:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    241a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    241e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2420:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2422:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2424:	ldr	r4, [pc, #196]	; (24ec <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2426:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2428:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    242a:	movs	r1, #9
    242c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    242e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2432:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2436:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2438:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    243a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    243c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    243e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2440:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2442:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2446:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    244a:	add.w	r7, r7, #520192	; 0x7f000
    244e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2450:	addw	r4, r4, #2044	; 0x7fc
    2454:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2456:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2458:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    245a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    245c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2460:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2462:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2466:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    246a:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    246c:	sub.w	r4, r4, #460800	; 0x70800
    2470:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2474:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2476:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2478:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    247c:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    247e:	ldr	r0, [pc, #112]	; (24f0 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2480:	orr.w	r1, r1, #512	; 0x200
    2484:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2486:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2488:	ldr	r4, [pc, #104]	; (24f4 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    248a:	add.w	lr, lr, #65280	; 0xff00
    248e:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2492:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2496:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    249a:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    249e:	orr.w	r1, r1, #33554432	; 0x2000000
    24a2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    24a4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    24a8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    24ac:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    24ae:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    24b0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    24b2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    24b4:	str	r2, [r4, #0]
#endif
	analog_init();
    24b6:	bl	1ff8 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    24ba:	movs	r0, #25
    24bc:	bl	22f0 <delay>
	usb_init();
    24c0:	bl	365c <usb_init>
	delay(275);
    24c4:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    24c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    24cc:	b.w	22f0 <delay>
    24d0:	.word	0xe000e104
    24d4:	.word	0x40038004
    24d8:	.word	0x40038014
    24dc:	.word	0x4003801c
    24e0:	.word	0x40038024
    24e4:	.word	0x4003802c
    24e8:	.word	0x40038034
    24ec:	.word	0x40038000
    24f0:	.word	0x40048004
    24f4:	.word	0x400c9000
    24f8:	.word	0x40038008
    24fc:	.word	0x4003800c

00002500 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2500:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2502:	ldr	r3, [pc, #56]	; (253c <sysex_byte+0x3c>)
    2504:	ldr	r4, [pc, #56]	; (2540 <sysex_byte+0x40>)
    2506:	ldr	r3, [r3, #0]
    2508:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    250a:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    250c:	cbz	r3, 2532 <sysex_byte+0x32>
    250e:	cmp.w	r1, #290	; 0x122
    2512:	bcs.n	2520 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2514:	ldr	r2, [pc, #44]	; (2544 <sysex_byte+0x44>)
    2516:	adds	r3, r1, #1
    2518:	strb	r5, [r2, r1]
    251a:	uxth	r3, r3
    251c:	strh	r3, [r4, #0]
	}
}
    251e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2520:	movs	r2, #0
    2522:	ldr	r0, [pc, #32]	; (2544 <sysex_byte+0x44>)
    2524:	blx	r3
    2526:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2528:	ldr	r2, [pc, #24]	; (2544 <sysex_byte+0x44>)
    252a:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    252c:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    252e:	strh	r3, [r4, #0]
	}
}
    2530:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2532:	cmp.w	r1, #290	; 0x122
    2536:	bcc.n	2514 <sysex_byte+0x14>
    2538:	pop	{r3, r4, r5, pc}
    253a:	nop
    253c:	.word	0x1fff18ac
    2540:	.word	0x1fff1d42
    2544:	.word	0x1fff1d48

00002548 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2548:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    254c:	ldr	r6, [pc, #132]	; (25d4 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    254e:	ldr	r7, [pc, #136]	; (25d8 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2550:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2552:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2554:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2556:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2558:	cbz	r1, 2588 <usb_midi_write_packed+0x40>
    255a:	ldr	r5, [pc, #128]	; (25dc <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    255c:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    255e:	add.w	r2, r1, r3, lsl #2
    2562:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2564:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2566:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2568:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    256c:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    256e:	bhi.n	257a <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2570:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2572:	movs	r3, #0
    2574:	strb	r3, [r7, #0]
    2576:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    257a:	movs	r3, #64	; 0x40
    257c:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    257e:	movs	r0, #4
    2580:	bl	2c28 <usb_tx>
		tx_packet = NULL;
    2584:	str	r4, [r6, #0]
    2586:	b.n	2572 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2588:	ldr.w	r9, [pc, #84]	; 25e0 <usb_midi_write_packed+0x98>
    258c:	ldrb.w	r3, [r9]
    2590:	cmp	r3, #0
    2592:	beq.n	2576 <usb_midi_write_packed+0x2e>
    2594:	ldr	r5, [pc, #68]	; (25dc <usb_midi_write_packed+0x94>)
    2596:	movw	r4, #48001	; 0xbb81
    259a:	b.n	25ae <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    259c:	subs	r4, #1
    259e:	beq.n	25c6 <usb_midi_write_packed+0x7e>
    25a0:	ldrb	r3, [r5, #0]
    25a2:	cbnz	r3, 25c6 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    25a4:	bl	372c <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    25a8:	ldrb.w	r3, [r9]
    25ac:	cbz	r3, 25ce <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    25ae:	movs	r0, #4
    25b0:	bl	2b14 <usb_tx_packet_count>
    25b4:	cmp	r0, #5
    25b6:	bhi.n	259c <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    25b8:	bl	2a4c <usb_malloc>
    25bc:	mov	r1, r0
    25be:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    25c0:	cmp	r0, #0
    25c2:	beq.n	259c <usb_midi_write_packed+0x54>
    25c4:	b.n	255c <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    25c6:	movs	r3, #1
    25c8:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    25ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    25ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    25d2:	nop
    25d4:	.word	0x1fff18c8
    25d8:	.word	0x1fff189c
    25dc:	.word	0x1fff18cc
    25e0:	.word	0x1fff19d8

000025e4 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    25e4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    25e6:	ldr	r3, [pc, #32]	; (2608 <usb_midi_flush_output+0x24>)
    25e8:	ldrb	r4, [r3, #0]
    25ea:	cbnz	r4, 25f6 <usb_midi_flush_output+0x12>
    25ec:	ldr	r5, [pc, #28]	; (260c <usb_midi_flush_output+0x28>)
    25ee:	ldr	r1, [r5, #0]
    25f0:	cbz	r1, 25f6 <usb_midi_flush_output+0x12>
    25f2:	ldrh	r3, [r1, #2]
    25f4:	cbnz	r3, 25f8 <usb_midi_flush_output+0x14>
    25f6:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    25f8:	lsls	r3, r3, #2
    25fa:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    25fc:	movs	r0, #4
    25fe:	bl	2c28 <usb_tx>
		tx_packet = NULL;
    2602:	str	r4, [r5, #0]
    2604:	pop	{r3, r4, r5, pc}
    2606:	nop
    2608:	.word	0x1fff189c
    260c:	.word	0x1fff18c8

00002610 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2610:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2614:	ldr	r6, [pc, #692]	; (28cc <usb_midi_read+0x2bc>)
    2616:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2618:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    261a:	cmp	r3, #0
    261c:	beq.w	2744 <usb_midi_read+0x134>
    2620:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2622:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2624:	lsrs	r1, r2, #2
    2626:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    262a:	adds	r2, #4
	if (index < rx_packet->len) {
    262c:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    262e:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2630:	bcs.n	26b8 <usb_midi_read+0xa8>
		rx_packet->index = index;
    2632:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2634:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2638:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    263c:	ldr	r1, [pc, #656]	; (28d0 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    263e:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2642:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    2646:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    264a:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    264c:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2650:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2652:	bls.n	268a <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2654:	subs	r3, r6, #2
    2656:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2658:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    265c:	bls.n	26fc <usb_midi_read+0xec>
    265e:	cmp	r6, #5
    2660:	beq.n	26f4 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2662:	cmp	r6, #4
    2664:	beq.w	29b0 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2668:	subs	r3, r6, #5
    266a:	cmp	r3, #2
    266c:	bls.n	276e <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    266e:	cmp	r6, #15
    2670:	bne.n	2690 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    2672:	cmp	r0, #247	; 0xf7
    2674:	bhi.n	26fc <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    2676:	cmp	r0, #240	; 0xf0
    2678:	beq.n	2680 <usb_midi_read+0x70>
    267a:	ldr	r3, [pc, #600]	; (28d4 <usb_midi_read+0x2c4>)
    267c:	ldrh	r3, [r3, #0]
    267e:	cbz	r3, 2690 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2680:	bl	2500 <sysex_byte>
		}
	}
	return 0;
    2684:	movs	r0, #0
    2686:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    268a:	cbz	r7, 2696 <usb_midi_read+0x86>
    268c:	cmp	r5, r7
    268e:	beq.n	2696 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2690:	movs	r0, #0
    2692:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2696:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2698:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    269c:	beq.w	27ae <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    26a0:	cmp	r6, #9
    26a2:	beq.n	26c8 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    26a4:	cmp	r6, #10
    26a6:	bne.w	27d2 <usb_midi_read+0x1c2>
    26aa:	cmp	r3, #10
    26ac:	bne.n	2690 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    26ae:	ldr	r3, [pc, #552]	; (28d8 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    26b0:	ldr	r2, [pc, #552]	; (28dc <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    26b2:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    26b4:	movs	r1, #160	; 0xa0
    26b6:	b.n	27bc <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    26b8:	mov	r0, r3
    26ba:	bl	2a8c <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    26be:	movs	r0, #5
    26c0:	bl	2ad8 <usb_rx>
    26c4:	str	r0, [r6, #0]
    26c6:	b.n	2634 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    26c8:	cmp	r3, #9
    26ca:	bne.n	2690 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    26cc:	lsrs	r7, r4, #24
    26ce:	beq.w	29c8 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    26d2:	ldr	r3, [pc, #524]	; (28e0 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    26d4:	ldr	r2, [pc, #516]	; (28dc <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    26d6:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    26d8:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    26da:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    26de:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    26e0:	uxtb	r5, r5
    26e2:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    26e4:	cmp	r3, #0
    26e6:	beq.w	2824 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    26ea:	mov	r2, r4
    26ec:	mov	r1, r6
    26ee:	mov	r0, r5
    26f0:	blx	r3
    26f2:	b.n	2824 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    26f4:	cmp	r0, #240	; 0xf0
    26f6:	bls.n	2780 <usb_midi_read+0x170>
    26f8:	cmp	r0, #247	; 0xf7
    26fa:	beq.n	2780 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    26fc:	subs	r0, #241	; 0xf1
    26fe:	cmp	r0, #14
    2700:	bhi.n	2690 <usb_midi_read+0x80>
    2702:	add	r3, pc, #4	; (adr r3, 2708 <usb_midi_read+0xf8>)
    2704:	ldr.w	pc, [r3, r0, lsl #2]
    2708:	.word	0x000028bf
    270c:	.word	0x000028a3
    2710:	.word	0x00002891
    2714:	.word	0x00002691
    2718:	.word	0x00002691
    271c:	.word	0x00002883
    2720:	.word	0x00002691
    2724:	.word	0x00002963
    2728:	.word	0x00002691
    272c:	.word	0x0000292d
    2730:	.word	0x00002947
    2734:	.word	0x0000286b
    2738:	.word	0x00002691
    273c:	.word	0x00002853
    2740:	.word	0x00002837
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2744:	ldr	r3, [pc, #412]	; (28e4 <usb_midi_read+0x2d4>)
    2746:	ldrb	r3, [r3, #0]
    2748:	cmp	r3, #0
    274a:	beq.n	2690 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    274c:	movs	r0, #5
    274e:	bl	2ad8 <usb_rx>
    2752:	mov	r3, r0
    2754:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    2756:	cmp	r0, #0
    2758:	beq.n	2690 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    275a:	ldrh	r5, [r0, #0]
    275c:	cmp	r5, #0
    275e:	bne.w	2622 <usb_midi_read+0x12>
			usb_free(rx_packet);
    2762:	bl	2a8c <usb_free>
			rx_packet = NULL;
    2766:	str	r5, [r6, #0]
			return 0;
    2768:	mov	r0, r5
    276a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    276e:	bl	2500 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    2772:	ubfx	r0, r4, #16, #8
    2776:	bl	2500 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    277a:	cmp	r6, #7
    277c:	bne.n	2784 <usb_midi_read+0x174>
    277e:	lsrs	r0, r4, #24
    2780:	bl	2500 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    2784:	ldr	r3, [pc, #332]	; (28d4 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2786:	ldr	r2, [pc, #352]	; (28e8 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2788:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    278a:	ldr	r0, [pc, #352]	; (28ec <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    278c:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    278e:	ldr	r5, [pc, #352]	; (28f0 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2790:	ldr	r2, [pc, #328]	; (28dc <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    2792:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2794:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2796:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2798:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    279a:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    279c:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    279e:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    27a0:	cbz	r4, 27e6 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    27a2:	movs	r2, #1
    27a4:	ldr	r0, [pc, #332]	; (28f4 <usb_midi_read+0x2e4>)
    27a6:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    27a8:	movs	r0, #1
    27aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    27ae:	cmp	r3, #8
    27b0:	bne.w	2690 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    27b4:	ldr	r3, [pc, #320]	; (28f8 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    27b6:	ldr	r2, [pc, #292]	; (28dc <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    27b8:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    27ba:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    27bc:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    27c0:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    27c2:	uxtb	r5, r5
    27c4:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    27c6:	cbz	r3, 2824 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    27c8:	mov	r0, r5
    27ca:	mov	r2, r4
    27cc:	mov	r1, r6
    27ce:	blx	r3
    27d0:	b.n	2824 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    27d2:	cmp	r6, #11
    27d4:	bne.n	27fa <usb_midi_read+0x1ea>
    27d6:	cmp	r3, #11
    27d8:	bne.w	2690 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    27dc:	ldr	r3, [pc, #284]	; (28fc <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    27de:	ldr	r2, [pc, #252]	; (28dc <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    27e0:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    27e2:	movs	r1, #176	; 0xb0
    27e4:	b.n	27bc <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    27e6:	ldr	r3, [pc, #280]	; (2900 <usb_midi_read+0x2f0>)
    27e8:	ldr	r3, [r3, #0]
    27ea:	cmp	r3, #0
    27ec:	beq.w	29e6 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    27f0:	ldr	r0, [pc, #256]	; (28f4 <usb_midi_read+0x2e4>)
    27f2:	blx	r3
		}
		return 1;
    27f4:	movs	r0, #1
    27f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    27fa:	cmp	r6, #12
    27fc:	bne.w	2a00 <usb_midi_read+0x3f0>
    2800:	cmp	r3, #12
    2802:	bne.w	2690 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2806:	ldr	r3, [pc, #252]	; (2904 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2808:	ldr	r2, [pc, #208]	; (28dc <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    280a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    280c:	movs	r1, #192	; 0xc0
    280e:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2810:	uxtb	r5, r5
    2812:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2816:	cmp	r3, #0
    2818:	beq.w	29ac <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    281c:	mov	r0, r5
    281e:	mov	r1, r6
    2820:	lsrs	r4, r4, #24
    2822:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2824:	ldr	r1, [pc, #224]	; (2908 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2826:	ldr	r2, [pc, #196]	; (28ec <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2828:	ldr	r3, [pc, #196]	; (28f0 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    282a:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    282c:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    282e:	strb	r4, [r3, #0]
		return 1;
    2830:	movs	r0, #1
    2832:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2836:	ldr	r3, [pc, #212]	; (290c <usb_midi_read+0x2fc>)
    2838:	ldr	r3, [r3, #0]
    283a:	cmp	r3, #0
    283c:	beq.w	29ec <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2840:	blx	r3
    2842:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2846:	ldr	r3, [pc, #148]	; (28dc <usb_midi_read+0x2cc>)
    2848:	uxtb	r5, r5
    284a:	lsrs	r4, r4, #24
    284c:	strb.w	r8, [r3]
		goto return_message;
    2850:	b.n	2824 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    2852:	ldr	r3, [pc, #188]	; (2910 <usb_midi_read+0x300>)
    2854:	ldr	r3, [r3, #0]
    2856:	cmp	r3, #0
    2858:	bne.n	2840 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    285a:	ldr	r3, [pc, #184]	; (2914 <usb_midi_read+0x304>)
    285c:	ldr	r3, [r3, #0]
    285e:	cbz	r3, 288a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2860:	movs	r0, #254	; 0xfe
    2862:	blx	r3
    2864:	ubfx	r6, r4, #16, #8
    2868:	b.n	2846 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    286a:	ldr	r3, [pc, #172]	; (2918 <usb_midi_read+0x308>)
    286c:	ldr	r3, [r3, #0]
    286e:	cmp	r3, #0
    2870:	bne.n	2840 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    2872:	ldr	r3, [pc, #160]	; (2914 <usb_midi_read+0x304>)
    2874:	ldr	r3, [r3, #0]
    2876:	cbz	r3, 288a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2878:	movs	r0, #252	; 0xfc
    287a:	blx	r3
    287c:	ubfx	r6, r4, #16, #8
    2880:	b.n	2846 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    2882:	ldr	r3, [pc, #152]	; (291c <usb_midi_read+0x30c>)
    2884:	ldr	r3, [r3, #0]
    2886:	cmp	r3, #0
    2888:	bne.n	2840 <usb_midi_read+0x230>
    288a:	ubfx	r6, r4, #16, #8
    288e:	b.n	2846 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2890:	ldr	r3, [pc, #140]	; (2920 <usb_midi_read+0x310>)
    2892:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    2894:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2898:	cmp	r3, #0
    289a:	beq.n	2846 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    289c:	mov	r0, r6
    289e:	blx	r3
    28a0:	b.n	2846 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    28a2:	ldr	r3, [pc, #128]	; (2924 <usb_midi_read+0x314>)
    28a4:	ldr	r2, [r3, #0]
    28a6:	cmp	r2, #0
    28a8:	beq.n	288a <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    28aa:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    28ac:	lsrs	r3, r4, #17
    28ae:	and.w	r0, r6, #127	; 0x7f
    28b2:	and.w	r3, r3, #16256	; 0x3f80
    28b6:	orrs	r0, r3
    28b8:	uxtb	r6, r6
    28ba:	blx	r2
    28bc:	b.n	2846 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    28be:	ldr	r3, [pc, #104]	; (2928 <usb_midi_read+0x318>)
    28c0:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    28c2:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    28c6:	cmp	r3, #0
    28c8:	bne.n	289c <usb_midi_read+0x28c>
    28ca:	b.n	2846 <usb_midi_read+0x236>
    28cc:	.word	0x1fff18d4
    28d0:	.word	0x1fff1d46
    28d4:	.word	0x1fff1d42
    28d8:	.word	0x1fff18b0
    28dc:	.word	0x1fff1d40
    28e0:	.word	0x1fff18e4
    28e4:	.word	0x1fff19d8
    28e8:	.word	0x1fff18ac
    28ec:	.word	0x1fff1d44
    28f0:	.word	0x1fff1d45
    28f4:	.word	0x1fff1d48
    28f8:	.word	0x1fff18dc
    28fc:	.word	0x1fff18e0
    2900:	.word	0x1fff18c4
    2904:	.word	0x1fff18a0
    2908:	.word	0x1fff1d47
    290c:	.word	0x1fff188c
    2910:	.word	0x1fff1890
    2914:	.word	0x1fff1894
    2918:	.word	0x1fff18d0
    291c:	.word	0x1fff18c0
    2920:	.word	0x1fff18d8
    2924:	.word	0x1fff18a8
    2928:	.word	0x1fff18bc
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    292c:	ldr	r3, [pc, #252]	; (2a2c <usb_midi_read+0x41c>)
    292e:	ldr	r3, [r3, #0]
    2930:	cmp	r3, #0
    2932:	bne.n	2840 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2934:	ldr	r3, [pc, #248]	; (2a30 <usb_midi_read+0x420>)
    2936:	ldr	r3, [r3, #0]
    2938:	cmp	r3, #0
    293a:	beq.n	288a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    293c:	movs	r0, #250	; 0xfa
    293e:	blx	r3
    2940:	ubfx	r6, r4, #16, #8
    2944:	b.n	2846 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2946:	ldr	r3, [pc, #236]	; (2a34 <usb_midi_read+0x424>)
    2948:	ldr	r3, [r3, #0]
    294a:	cmp	r3, #0
    294c:	bne.w	2840 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2950:	ldr	r3, [pc, #220]	; (2a30 <usb_midi_read+0x420>)
    2952:	ldr	r3, [r3, #0]
    2954:	cmp	r3, #0
    2956:	beq.n	288a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2958:	movs	r0, #251	; 0xfb
    295a:	blx	r3
    295c:	ubfx	r6, r4, #16, #8
    2960:	b.n	2846 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2962:	ldr	r3, [pc, #212]	; (2a38 <usb_midi_read+0x428>)
    2964:	ldr	r3, [r3, #0]
    2966:	cmp	r3, #0
    2968:	bne.w	2840 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    296c:	ldr	r3, [pc, #192]	; (2a30 <usb_midi_read+0x420>)
    296e:	ldr	r3, [r3, #0]
    2970:	cmp	r3, #0
    2972:	beq.n	288a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2974:	movs	r0, #248	; 0xf8
    2976:	blx	r3
    2978:	ubfx	r6, r4, #16, #8
    297c:	b.n	2846 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    297e:	cmp	r3, #14
    2980:	bne.w	2690 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2984:	ldr	r2, [pc, #180]	; (2a3c <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2986:	ldr	r3, [pc, #184]	; (2a40 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2988:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    298a:	movs	r1, #224	; 0xe0
    298c:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    298e:	cmp	r2, #0
    2990:	beq.n	2a22 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    2992:	lsrs	r6, r4, #16
    2994:	lsrs	r1, r4, #17
    2996:	and.w	r3, r6, #127	; 0x7f
    299a:	and.w	r1, r1, #16256	; 0x3f80
    299e:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    29a0:	uxtb	r5, r5
    29a2:	sub.w	r1, r1, #8192	; 0x2000
    29a6:	mov	r0, r5
    29a8:	blx	r2
    29aa:	uxtb	r6, r6
    29ac:	lsrs	r4, r4, #24
    29ae:	b.n	2824 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    29b0:	bl	2500 <sysex_byte>
		sysex_byte(n >> 16);
    29b4:	ubfx	r0, r4, #16, #8
    29b8:	bl	2500 <sysex_byte>
		sysex_byte(n >> 24);
    29bc:	lsrs	r0, r4, #24
    29be:	bl	2500 <sysex_byte>
		return 0;
    29c2:	movs	r0, #0
    29c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    29c8:	ldr	r3, [pc, #120]	; (2a44 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    29ca:	ldr	r2, [pc, #116]	; (2a40 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    29cc:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    29ce:	movs	r1, #128	; 0x80
    29d0:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    29d2:	uxtb	r5, r5
    29d4:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    29d8:	cbz	r3, 29fc <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    29da:	mov	r1, r6
    29dc:	mov	r0, r5
    29de:	mov	r2, r7
    29e0:	blx	r3
    29e2:	mov	r4, r7
    29e4:	b.n	2824 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    29e6:	movs	r0, #1
    29e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    29ec:	ldr	r3, [pc, #64]	; (2a30 <usb_midi_read+0x420>)
    29ee:	ldr	r3, [r3, #0]
    29f0:	cmp	r3, #0
    29f2:	beq.w	288a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    29f6:	movs	r0, #255	; 0xff
    29f8:	blx	r3
    29fa:	b.n	288a <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    29fc:	mov	r4, r3
    29fe:	b.n	2824 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2a00:	cmp	r6, #13
    2a02:	bne.n	297e <usb_midi_read+0x36e>
    2a04:	cmp	r3, #13
    2a06:	bne.w	2690 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2a0a:	ldr	r3, [pc, #60]	; (2a48 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2a0c:	ldr	r2, [pc, #48]	; (2a40 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2a0e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2a10:	movs	r1, #208	; 0xd0
    2a12:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2a14:	uxtb	r5, r5
    2a16:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2a1a:	cmp	r3, #0
    2a1c:	bne.w	281c <usb_midi_read+0x20c>
    2a20:	b.n	29ac <usb_midi_read+0x39c>
    2a22:	ubfx	r6, r4, #16, #8
    2a26:	uxtb	r5, r5
    2a28:	lsrs	r4, r4, #24
    2a2a:	b.n	2824 <usb_midi_read+0x214>
    2a2c:	.word	0x1fff18b8
    2a30:	.word	0x1fff1894
    2a34:	.word	0x1fff1898
    2a38:	.word	0x1fff1888
    2a3c:	.word	0x1fff18a4
    2a40:	.word	0x1fff1d40
    2a44:	.word	0x1fff18dc
    2a48:	.word	0x1fff18b4

00002a4c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2a4c:	cpsid	i
	avail = usb_buffer_available;
    2a4e:	ldr	r0, [pc, #52]	; (2a84 <usb_malloc+0x38>)
    2a50:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2a52:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2a56:	cmp	r3, #29
    2a58:	bgt.n	2a7c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2a5a:	mov.w	r1, #2147483648	; 0x80000000
    2a5e:	lsrs	r1, r3
    2a60:	bic.w	r2, r2, r1
    2a64:	str	r2, [r0, #0]
	__enable_irq();
    2a66:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2a68:	ldr	r0, [pc, #28]	; (2a88 <usb_malloc+0x3c>)
    2a6a:	add.w	r3, r3, r3, lsl #3
    2a6e:	lsls	r3, r3, #3
    2a70:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2a72:	movs	r1, #0
    2a74:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2a76:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2a78:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2a7a:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2a7c:	cpsie	i
		return NULL;
    2a7e:	movs	r0, #0
    2a80:	bx	lr
    2a82:	nop
    2a84:	.word	0x1fff0c6c
    2a88:	.word	0x1fff03d0

00002a8c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2a8c:	ldr	r3, [pc, #52]	; (2ac4 <usb_free+0x38>)
    2a8e:	ldr	r2, [pc, #56]	; (2ac8 <usb_free+0x3c>)
    2a90:	subs	r3, r0, r3
    2a92:	umull	r2, r3, r2, r3
    2a96:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2a98:	cmp	r3, #29
    2a9a:	bhi.n	2ab6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2a9c:	ldr	r2, [pc, #44]	; (2acc <usb_free+0x40>)
    2a9e:	ldrb	r2, [r2, #0]
    2aa0:	cbnz	r2, 2ab8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2aa2:	cpsid	i
	usb_buffer_available |= mask;
    2aa4:	ldr	r0, [pc, #40]	; (2ad0 <usb_free+0x44>)
    2aa6:	mov.w	r1, #2147483648	; 0x80000000
    2aaa:	ldr	r2, [r0, #0]
    2aac:	lsr.w	r3, r1, r3
    2ab0:	orrs	r2, r3
    2ab2:	str	r2, [r0, #0]
	__enable_irq();
    2ab4:	cpsie	i
    2ab6:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2ab8:	ldr	r2, [pc, #24]	; (2ad4 <usb_free+0x48>)
    2aba:	ldrb	r2, [r2, #0]
    2abc:	cmp	r2, #0
    2abe:	beq.n	2aa2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2ac0:	b.w	2b40 <usb_rx_memory>
    2ac4:	.word	0x1fff03d0
    2ac8:	.word	0x38e38e39
    2acc:	.word	0x1fff19cd
    2ad0:	.word	0x1fff0c6c
    2ad4:	.word	0x1fff19d8

00002ad8 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2ad8:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2ada:	cmp	r3, #4
    2adc:	bhi.n	2b08 <usb_rx+0x30>
	__disable_irq();
    2ade:	cpsid	i
	ret = rx_first[endpoint];
    2ae0:	ldr	r1, [pc, #40]	; (2b0c <usb_rx+0x34>)
    2ae2:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2ae6:	cbz	r0, 2b04 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2ae8:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2aea:	ldr	r4, [pc, #36]	; (2b10 <usb_rx+0x38>)
    2aec:	ldrh	r5, [r0, #0]
    2aee:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2af2:	ldr	r6, [r0, #4]
    2af4:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2af8:	subs	r2, r2, r5
    2afa:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2afe:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2b00:	pop	{r4, r5, r6}
    2b02:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2b04:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2b06:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2b08:	movs	r0, #0
    2b0a:	bx	lr
    2b0c:	.word	0x1fff1944
    2b10:	.word	0x1fff1e6c

00002b14 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2b14:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2b16:	cmp	r0, #4
    2b18:	bhi.n	2b32 <usb_tx_packet_count+0x1e>
	__disable_irq();
    2b1a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2b1c:	ldr	r3, [pc, #28]	; (2b3c <usb_tx_packet_count+0x28>)
    2b1e:	ldr.w	r3, [r3, r0, lsl #2]
    2b22:	cbz	r3, 2b36 <usb_tx_packet_count+0x22>
    2b24:	movs	r0, #0
    2b26:	ldr	r3, [r3, #4]
    2b28:	adds	r0, #1
    2b2a:	cmp	r3, #0
    2b2c:	bne.n	2b26 <usb_tx_packet_count+0x12>
	__enable_irq();
    2b2e:	cpsie	i
	return count;
    2b30:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2b32:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2b34:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2b36:	mov	r0, r3
    2b38:	b.n	2b2e <usb_tx_packet_count+0x1a>
    2b3a:	nop
    2b3c:	.word	0x1fff199c

00002b40 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2b40:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2b42:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b44:	ldr	r2, [pc, #204]	; (2c14 <usb_rx_memory+0xd4>)
    2b46:	ldrb	r3, [r2, #0]
    2b48:	lsls	r3, r3, #28
    2b4a:	bpl.n	2b5a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b4c:	ldr	r3, [pc, #200]	; (2c18 <usb_rx_memory+0xd8>)
    2b4e:	ldr	r1, [r3, #32]
    2b50:	cmp	r1, #0
    2b52:	beq.n	2bdc <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b54:	ldr	r1, [r3, #40]	; 0x28
    2b56:	cmp	r1, #0
    2b58:	beq.n	2bf8 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b5a:	ldrb	r3, [r2, #1]
    2b5c:	lsls	r5, r3, #28
    2b5e:	bpl.n	2b6e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b60:	ldr	r3, [pc, #180]	; (2c18 <usb_rx_memory+0xd8>)
    2b62:	ldr	r1, [r3, #64]	; 0x40
    2b64:	cmp	r1, #0
    2b66:	beq.n	2c04 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b68:	ldr	r1, [r3, #72]	; 0x48
    2b6a:	cmp	r1, #0
    2b6c:	beq.n	2bfc <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b6e:	ldrb	r3, [r2, #2]
    2b70:	lsls	r4, r3, #28
    2b72:	bpl.n	2b82 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b74:	ldr	r3, [pc, #160]	; (2c18 <usb_rx_memory+0xd8>)
    2b76:	ldr	r1, [r3, #96]	; 0x60
    2b78:	cmp	r1, #0
    2b7a:	beq.n	2c08 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b7c:	ldr	r1, [r3, #104]	; 0x68
    2b7e:	cmp	r1, #0
    2b80:	beq.n	2c00 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b82:	ldrb	r3, [r2, #3]
    2b84:	lsls	r1, r3, #28
    2b86:	bpl.n	2b98 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b88:	ldr	r3, [pc, #140]	; (2c18 <usb_rx_memory+0xd8>)
    2b8a:	ldr.w	r1, [r3, #128]	; 0x80
    2b8e:	cmp	r1, #0
    2b90:	beq.n	2c10 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b92:	ldr.w	r1, [r3, #136]	; 0x88
    2b96:	cbz	r1, 2bbe <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b98:	ldrb	r3, [r2, #4]
    2b9a:	lsls	r3, r3, #28
    2b9c:	bpl.n	2bb0 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b9e:	ldr	r3, [pc, #120]	; (2c18 <usb_rx_memory+0xd8>)
    2ba0:	ldr.w	r2, [r3, #160]	; 0xa0
    2ba4:	cmp	r2, #0
    2ba6:	beq.n	2c0c <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2ba8:	ldr.w	r2, [r3, #168]	; 0xa8
    2bac:	movs	r4, #21
    2bae:	cbz	r2, 2bc0 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2bb0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2bb2:	ldr	r3, [pc, #104]	; (2c1c <usb_rx_memory+0xdc>)
    2bb4:	movs	r2, #0
    2bb6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2bb8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2bba:	b.w	2a8c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2bbe:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2bc0:	ldr	r1, [pc, #88]	; (2c1c <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2bc2:	ldr	r5, [pc, #92]	; (2c20 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2bc4:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2bc6:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2bca:	add.w	r3, r3, r4, lsl #3
    2bce:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2bd0:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2bd2:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2bd4:	strb	r2, [r1, #0]
				__enable_irq();
    2bd6:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2bd8:	pop	{r4, r5}
    2bda:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2bdc:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2bde:	ldr	r4, [pc, #60]	; (2c1c <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2be0:	ldr	r5, [pc, #64]	; (2c24 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2be2:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2be4:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2be8:	add.w	r3, r3, r2, lsl #3
    2bec:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2bee:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2bf0:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2bf2:	strb	r2, [r4, #0]
				__enable_irq();
    2bf4:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2bf6:	b.n	2bd8 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2bf8:	movs	r4, #5
    2bfa:	b.n	2bc0 <usb_rx_memory+0x80>
    2bfc:	movs	r4, #9
    2bfe:	b.n	2bc0 <usb_rx_memory+0x80>
    2c00:	movs	r4, #13
    2c02:	b.n	2bc0 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2c04:	movs	r2, #8
    2c06:	b.n	2bde <usb_rx_memory+0x9e>
    2c08:	movs	r2, #12
    2c0a:	b.n	2bde <usb_rx_memory+0x9e>
    2c0c:	movs	r2, #20
    2c0e:	b.n	2bde <usb_rx_memory+0x9e>
    2c10:	movs	r2, #16
    2c12:	b.n	2bde <usb_rx_memory+0x9e>
    2c14:	.word	0x00004e80
    2c18:	.word	0x1fff0000
    2c1c:	.word	0x1fff19cd
    2c20:	.word	0x004000c8
    2c24:	.word	0x00400088

00002c28 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2c28:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2c2a:	cmp	r3, #4
    2c2c:	bhi.n	2c6a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2c2e:	ldr	r2, [pc, #108]	; (2c9c <usb_tx+0x74>)
    2c30:	lsls	r0, r0, #5
    2c32:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2c36:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2c38:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2c3a:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2c3c:	ldr	r4, [pc, #96]	; (2ca0 <usb_tx+0x78>)
    2c3e:	ldrb	r2, [r4, r3]
    2c40:	cmp	r2, #3
    2c42:	bhi.n	2c7c <usb_tx+0x54>
    2c44:	tbb	[pc, r2]
    2c48:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2c4c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c4e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2c50:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c52:	tst.w	r0, #8
    2c56:	ite	ne
    2c58:	movne	r3, #200	; 0xc8
    2c5a:	moveq	r3, #136	; 0x88
    2c5c:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2c60:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c62:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2c64:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2c66:	cpsie	i
}
    2c68:	pop	{r4, r5}
    2c6a:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2c6c:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2c6e:	movs	r2, #2
		break;
    2c70:	b.n	2c4e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2c72:	movs	r2, #5
    2c74:	b.n	2c4e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2c76:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2c78:	movs	r2, #4
		break;
    2c7a:	b.n	2c4e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2c7c:	ldr	r2, [pc, #36]	; (2ca4 <usb_tx+0x7c>)
    2c7e:	ldr.w	r0, [r2, r3, lsl #2]
    2c82:	cbz	r0, 2c94 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2c84:	ldr	r2, [pc, #32]	; (2ca8 <usb_tx+0x80>)
    2c86:	ldr.w	r0, [r2, r3, lsl #2]
    2c8a:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2c8c:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2c90:	cpsie	i
		return;
    2c92:	b.n	2c68 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2c94:	str.w	r1, [r2, r3, lsl #2]
    2c98:	ldr	r2, [pc, #12]	; (2ca8 <usb_tx+0x80>)
    2c9a:	b.n	2c8c <usb_tx+0x64>
    2c9c:	.word	0x1fff0000
    2ca0:	.word	0x1fff19dc
    2ca4:	.word	0x1fff199c
    2ca8:	.word	0x1fff19b0

00002cac <usb_isr>:
}



void usb_isr(void)
{
    2cac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2cb0:	ldr.w	fp, [pc, #776]	; 2fbc <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2cb4:	ldr.w	sl, [pc, #776]	; 2fc0 <usb_isr+0x314>
}



void usb_isr(void)
{
    2cb8:	sub	sp, #28
    2cba:	b.n	2d46 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2cbc:	ldr	r7, [pc, #680]	; (2f68 <usb_isr+0x2bc>)
    2cbe:	mov.w	r8, r3, lsr #2
    2cc2:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2cc6:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2cc8:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2ccc:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2cd0:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2cd2:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2cd6:	and.w	r4, r3, #255	; 0xff
    2cda:	cmp	r3, #0
    2cdc:	bne.w	2ee0 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2ce0:	ldr.w	r3, [r7, r8, lsl #3]
    2ce4:	lsrs	r3, r3, #16
    2ce6:	uxth	r1, r3
    2ce8:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2cec:	cmp	r3, #0
    2cee:	beq.w	2ece <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2cf2:	ldr	r3, [pc, #632]	; (2f6c <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2cf4:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2cf8:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2cfc:	ldr.w	r2, [r3, r6, lsl #2]
    2d00:	cmp	r2, #0
    2d02:	beq.w	3170 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2d06:	ldr	r5, [pc, #616]	; (2f70 <usb_isr+0x2c4>)
    2d08:	ldr.w	r3, [r5, r6, lsl #2]
    2d0c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2d0e:	ldr	r4, [pc, #612]	; (2f74 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2d10:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2d14:	ldrh.w	r3, [r4, r6, lsl #1]
    2d18:	add	r1, r3
    2d1a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2d1e:	bl	2a4c <usb_malloc>
					if (packet) {
    2d22:	cmp	r0, #0
    2d24:	beq.w	3162 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2d28:	ldr	r2, [pc, #588]	; (2f78 <usb_isr+0x2cc>)
    2d2a:	ldr	r3, [pc, #592]	; (2f7c <usb_isr+0x2d0>)
    2d2c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2d30:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2d34:	it	ne
    2d36:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2d38:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2d3c:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2d40:	movs	r3, #8
    2d42:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2d46:	ldrb.w	r4, [fp]
    2d4a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2d4c:	lsls	r0, r4, #29
    2d4e:	bpl.n	2d8a <usb_isr+0xde>
		if (usb_configuration) {
    2d50:	ldr	r3, [pc, #556]	; (2f80 <usb_isr+0x2d4>)
    2d52:	ldrb	r3, [r3, #0]
    2d54:	cbz	r3, 2d84 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2d56:	ldr	r1, [pc, #556]	; (2f84 <usb_isr+0x2d8>)
    2d58:	ldrb	r2, [r1, #0]
			if (t) {
    2d5a:	and.w	r3, r2, #255	; 0xff
    2d5e:	cbz	r2, 2d6a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2d60:	subs	r3, #1
    2d62:	uxtb	r3, r3
    2d64:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2d66:	cbnz	r3, 2d6a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2d68:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2d6a:	ldr	r1, [pc, #540]	; (2f88 <usb_isr+0x2dc>)
    2d6c:	ldrb	r2, [r1, #0]
			if (t) {
    2d6e:	and.w	r3, r2, #255	; 0xff
    2d72:	cbz	r2, 2d80 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2d74:	subs	r3, #1
    2d76:	uxtb	r3, r3
    2d78:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2d7a:	cmp	r3, #0
    2d7c:	beq.w	310e <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2d80:	bl	25e4 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2d84:	movs	r3, #4
    2d86:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2d8a:	and.w	r3, r4, #8
    2d8e:	and.w	r2, r3, #255	; 0xff
    2d92:	cmp	r3, #0
    2d94:	beq.w	2f28 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2d98:	ldrb.w	r3, [sl]
    2d9c:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2d9e:	lsrs	r6, r3, #4
    2da0:	bne.n	2cbc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2da2:	lsrs	r4, r3, #2
    2da4:	ldr.w	r9, [pc, #448]	; 2f68 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2da8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2dac:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2db0:	ubfx	r2, r2, #2, #4
    2db4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2db6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2db8:	cmp	r2, #12
    2dba:	bhi.w	2ec6 <usb_isr+0x21a>
    2dbe:	tbb	[pc, r2]
    2dc2:	.short	0x7878
    2dc4:	.word	0x82828282
    2dc8:	.word	0x82438282
    2dcc:	.short	0x8282
    2dce:	.byte	0x07
    2dcf:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2dd0:	ldr	r0, [r1, #0]
    2dd2:	ldr	r5, [pc, #440]	; (2f8c <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2dd4:	ldr	r3, [pc, #416]	; (2f78 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2dd6:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2dd8:	ldr	r7, [pc, #436]	; (2f90 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2dda:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2dde:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2de0:	ldr	r6, [pc, #432]	; (2f94 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2de2:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2de4:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2de8:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2dea:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2dec:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2dee:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2df2:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2df4:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2df8:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2dfc:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2dfe:	bhi.w	2fc4 <usb_isr+0x318>
    2e02:	cmp.w	r1, #1664	; 0x680
    2e06:	bcs.w	3430 <usb_isr+0x784>
    2e0a:	cmp.w	r1, #258	; 0x102
    2e0e:	beq.w	31de <usb_isr+0x532>
    2e12:	bhi.w	31a8 <usb_isr+0x4fc>
    2e16:	cmp	r1, #128	; 0x80
    2e18:	beq.w	3464 <usb_isr+0x7b8>
    2e1c:	cmp	r1, #130	; 0x82
    2e1e:	bne.w	31ea <usb_isr+0x53e>
    2e22:	ldrh	r1, [r5, #4]
    2e24:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2e28:	cmp	r1, #5
    2e2a:	bhi.w	31ea <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2e2e:	ldr	r3, [pc, #360]	; (2f98 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2e30:	ldr	r4, [pc, #360]	; (2f9c <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2e32:	lsls	r1, r1, #2
    2e34:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2e36:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2e38:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2e3a:	ldrb	r2, [r3, #0]
    2e3c:	lsls	r3, r2, #30
    2e3e:	bpl.w	3574 <usb_isr+0x8c8>
    2e42:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2e44:	movs	r0, #2
    2e46:	b.n	3272 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2e48:	ldr	r7, [pc, #324]	; (2f90 <usb_isr+0x2e4>)
    2e4a:	ldr	r2, [r7, #0]
		if (data) {
    2e4c:	cbz	r2, 2e9c <usb_isr+0x1f0>
			size = ep0_tx_len;
    2e4e:	ldr	r3, [pc, #336]	; (2fa0 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e50:	ldr	r6, [pc, #320]	; (2f94 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e52:	ldr	r1, [pc, #336]	; (2fa4 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2e54:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e56:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e58:	ldrb	r5, [r1, #0]
    2e5a:	cmp	r0, #64	; 0x40
    2e5c:	mov	lr, r0
    2e5e:	orr.w	r8, r5, #2
    2e62:	it	cs
    2e64:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e68:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2e6a:	eor.w	r4, r4, #1
    2e6e:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2e70:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e74:	ite	eq
    2e76:	moveq	r4, #136	; 0x88
    2e78:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e7a:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2e7e:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e80:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e84:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e88:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2e8a:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e8c:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2e90:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e92:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2e94:	cmp	r0, #0
    2e96:	beq.w	3006 <usb_isr+0x35a>
    2e9a:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2e9c:	ldr	r3, [pc, #236]	; (2f8c <usb_isr+0x2e0>)
    2e9e:	ldrh	r2, [r3, #0]
    2ea0:	cmp.w	r2, #1280	; 0x500
    2ea4:	bne.n	2ec6 <usb_isr+0x21a>
			setup.bRequest = 0;
    2ea6:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2ea8:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2eaa:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2eac:	ldr	r3, [pc, #248]	; (2fa8 <usb_isr+0x2fc>)
    2eae:	strb	r2, [r3, #0]
    2eb0:	b.n	2ec6 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2eb2:	ldr	r2, [pc, #216]	; (2f8c <usb_isr+0x2e0>)
    2eb4:	ldrh	r0, [r2, #0]
    2eb6:	movw	r2, #8225	; 0x2021
    2eba:	cmp	r0, r2
    2ebc:	beq.w	3010 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2ec0:	ldr	r2, [pc, #180]	; (2f78 <usb_isr+0x2cc>)
    2ec2:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2ec6:	ldr	r2, [pc, #228]	; (2fac <usb_isr+0x300>)
    2ec8:	movs	r3, #1
    2eca:	strb	r3, [r2, #0]
    2ecc:	b.n	2d40 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2ece:	ldr	r2, [pc, #168]	; (2f78 <usb_isr+0x2cc>)
    2ed0:	ldr	r3, [pc, #168]	; (2f7c <usb_isr+0x2d0>)
    2ed2:	tst.w	r9, #8
    2ed6:	it	ne
    2ed8:	movne	r3, r2
    2eda:	str.w	r3, [r7, r8, lsl #3]
    2ede:	b.n	2d40 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2ee0:	bl	2a8c <usb_free>
				packet = tx_first[endpoint];
    2ee4:	ldr	r2, [pc, #200]	; (2fb0 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2ee6:	ldr	r1, [pc, #204]	; (2fb4 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2ee8:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2eec:	cmp	r3, #0
    2eee:	beq.w	3178 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2ef2:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2ef4:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2ef6:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2efa:	add.w	r2, r3, #8
    2efe:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2f02:	cmp	r4, #3
    2f04:	bhi.n	2f12 <usb_isr+0x266>
    2f06:	tbb	[pc, r4]
    2f0a:	.short	0x022c
    2f0c:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2f0e:	movs	r2, #2
    2f10:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2f12:	ldrh	r2, [r3, #0]
    2f14:	tst.w	r9, #8
    2f18:	ite	eq
    2f1a:	moveq	r3, #136	; 0x88
    2f1c:	movne	r3, #200	; 0xc8
    2f1e:	orr.w	r3, r3, r2, lsl #16
    2f22:	str.w	r3, [r7, r8, lsl #3]
    2f26:	b.n	2d40 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2f28:	lsls	r0, r4, #31
    2f2a:	bmi.w	3114 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2f2e:	lsls	r1, r4, #24
    2f30:	bmi.w	3194 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2f34:	lsls	r2, r4, #30
    2f36:	bpl.n	2f46 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2f38:	ldr	r2, [pc, #124]	; (2fb8 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2f3a:	ldr	r1, [pc, #128]	; (2fbc <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2f3c:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2f3e:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2f40:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2f42:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2f44:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2f46:	lsls	r3, r4, #27
    2f48:	bpl.n	2f50 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2f4a:	ldr	r3, [pc, #112]	; (2fbc <usb_isr+0x310>)
    2f4c:	movs	r2, #16
    2f4e:	strb	r2, [r3, #0]
	}

}
    2f50:	add	sp, #28
    2f52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2f56:	movs	r2, #4
    2f58:	strb	r2, [r1, r6]
						break;
    2f5a:	b.n	2f12 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2f5c:	movs	r2, #5
    2f5e:	strb	r2, [r1, r6]
						break;
    2f60:	b.n	2f12 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2f62:	movs	r2, #3
    2f64:	strb	r2, [r1, r6]
						break;
    2f66:	b.n	2f12 <usb_isr+0x266>
    2f68:	.word	0x1fff0000
    2f6c:	.word	0x1fff1944
    2f70:	.word	0x1fff18ec
    2f74:	.word	0x1fff1e6c
    2f78:	.word	0x004000c8
    2f7c:	.word	0x00400088
    2f80:	.word	0x1fff19d8
    2f84:	.word	0x1fff1959
    2f88:	.word	0x1fff186c
    2f8c:	.word	0x1fff19c4
    2f90:	.word	0x1fff18e8
    2f94:	.word	0x1fff1958
    2f98:	.word	0x400720c0
    2f9c:	.word	0x1fff19d0
    2fa0:	.word	0x1fff1900
    2fa4:	.word	0x1fff19cc
    2fa8:	.word	0x40072098
    2fac:	.word	0x40072094
    2fb0:	.word	0x1fff199c
    2fb4:	.word	0x1fff19dc
    2fb8:	.word	0x40072088
    2fbc:	.word	0x40072080
    2fc0:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2fc4:	movw	r4, #8225	; 0x2021
    2fc8:	cmp	r1, r4
    2fca:	beq.w	3106 <usb_isr+0x45a>
    2fce:	bhi.n	3064 <usb_isr+0x3b8>
    2fd0:	cmp.w	r1, #2176	; 0x880
    2fd4:	beq.w	326a <usb_isr+0x5be>
    2fd8:	cmp.w	r1, #2304	; 0x900
    2fdc:	bne.w	31ea <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2fe0:	ldr	r2, [pc, #712]	; (32ac <usb_isr+0x600>)
    2fe2:	ldr	r4, [pc, #716]	; (32b0 <usb_isr+0x604>)
    2fe4:	ldrb	r1, [r5, #2]
    2fe6:	strb	r1, [r2, #0]
    2fe8:	add.w	r5, r4, #160	; 0xa0
    2fec:	b.n	2ff6 <usb_isr+0x34a>
    2fee:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2ff0:	cmp	r5, r4
    2ff2:	beq.w	3308 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2ff6:	ldr	r3, [r4, #32]
    2ff8:	lsls	r1, r3, #24
    2ffa:	bpl.n	2fee <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2ffc:	ldr	r0, [r4, #36]	; 0x24
    2ffe:	subs	r0, #8
    3000:	bl	2a8c <usb_free>
    3004:	b.n	2fee <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3006:	cmp.w	lr, #64	; 0x40
    300a:	it	ne
    300c:	movne	r2, #0
    300e:	b.n	2e9a <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3010:	ldr	r2, [pc, #672]	; (32b4 <usb_isr+0x608>)
    3012:	ldrb	r5, [r1, #0]
    3014:	ldrb	r0, [r1, #1]
    3016:	strb	r5, [r2, #0]
    3018:	strb	r0, [r2, #1]
    301a:	ldrb	r5, [r1, #2]
    301c:	ldrb	r0, [r1, #3]
    301e:	strb	r5, [r2, #2]
    3020:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3022:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3024:	ldrb	r5, [r1, #4]
    3026:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3028:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    302a:	ldrb	r5, [r1, #5]
    302c:	ldrb	r1, [r1, #6]
    302e:	strb	r5, [r2, #5]
    3030:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3032:	beq.w	3262 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3036:	ldr	r1, [pc, #640]	; (32b8 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3038:	ldr	r6, [pc, #640]	; (32bc <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    303a:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    303c:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    303e:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3042:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3044:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3048:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    304a:	ite	eq
    304c:	moveq	r1, #136	; 0x88
    304e:	movne	r1, #200	; 0xc8
    3050:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3054:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3058:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    305c:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    305e:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3060:	str	r1, [r2, #4]
    3062:	b.n	2ec0 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3064:	movw	r4, #8737	; 0x2221
    3068:	cmp	r1, r4
    306a:	bne.w	347e <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    306e:	ldr.w	ip, [pc, #656]	; 3300 <usb_isr+0x654>
    3072:	ldr	r3, [pc, #588]	; (32c0 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3074:	ldr	r1, [pc, #588]	; (32c4 <usb_isr+0x618>)
    3076:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3078:	ldr.w	r5, [ip]
    307c:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    307e:	str	r0, [sp, #4]
    3080:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3082:	movs	r0, #0
    3084:	str	r0, [sp, #8]
    3086:	mov	r8, r0
    3088:	mov	ip, r0
    308a:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    308c:	ldr	r1, [pc, #552]	; (32b8 <usb_isr+0x60c>)
    308e:	ldrb	r5, [r1, #0]
    3090:	orr.w	lr, r5, #2
    3094:	add.w	r3, r9, lr, lsl #3
    3098:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    309a:	ldr	r3, [sp, #4]
    309c:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    309e:	ldr	r3, [sp, #12]
    30a0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30a2:	ite	eq
    30a4:	moveq	r4, #136	; 0x88
    30a6:	movne	r4, #200	; 0xc8
    30a8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    30ac:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30b0:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    30b4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    30b6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30b8:	ldr.w	lr, [pc, #500]	; 32b0 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    30bc:	ldr	r3, [pc, #508]	; (32bc <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    30be:	ldr.w	r8, [pc, #504]	; 32b8 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    30c2:	cmp	r0, #0
    30c4:	bne.w	31f8 <usb_isr+0x54c>
    30c8:	cmp.w	ip, #64	; 0x40
    30cc:	bne.n	3106 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    30ce:	orr.w	ip, r4, #2
    30d2:	add.w	r3, r9, ip, lsl #3
    30d6:	ldr	r4, [sp, #8]
    30d8:	ldr.w	lr, [pc, #468]	; 32b0 <usb_isr+0x604>
    30dc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30de:	cmp	r2, #0
    30e0:	bne.w	3224 <usb_isr+0x578>
    30e4:	lsls	r2, r0, #16
    30e6:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    30ea:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30ee:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    30f2:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    30f4:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    30f6:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    30f8:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    30fa:	cmp	r0, #64	; 0x40
    30fc:	bne.n	3106 <usb_isr+0x45a>
    30fe:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3100:	ldr	r2, [pc, #452]	; (32c8 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3102:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3104:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3106:	ldr	r2, [pc, #452]	; (32cc <usb_isr+0x620>)
    3108:	movs	r3, #1
    310a:	strb	r3, [r2, #0]
    310c:	b.n	2ec6 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    310e:	bl	1e6c <usb_serial_flush_callback>
    3112:	b.n	2d80 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3114:	ldr	r3, [pc, #408]	; (32b0 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3116:	ldr	r0, [pc, #436]	; (32cc <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3118:	ldr	r1, [pc, #412]	; (32b8 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    311a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    311c:	mov.w	lr, #2
    3120:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3124:	ldr	r7, [pc, #424]	; (32d0 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3126:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3128:	ldr	r1, [pc, #424]	; (32d4 <usb_isr+0x628>)
    312a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    312c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    312e:	ldr	r6, [pc, #424]	; (32d8 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3130:	ldr	r5, [pc, #424]	; (32dc <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3132:	ldr	r4, [pc, #428]	; (32e0 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3134:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3136:	movs	r1, #13
    3138:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    313a:	movs	r1, #255	; 0xff
    313c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    313e:	ldr.w	lr, [pc, #452]	; 3304 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3142:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3144:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3146:	ldr	r5, [pc, #412]	; (32e4 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3148:	ldr	r2, [pc, #412]	; (32e8 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    314a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    314e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3150:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3152:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3156:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3158:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    315a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    315c:	add	sp, #28
    315e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3162:	ldr	r2, [pc, #392]	; (32ec <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3164:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3168:	ldrb	r3, [r2, #0]
    316a:	adds	r3, #1
    316c:	strb	r3, [r2, #0]
    316e:	b.n	2d40 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3170:	str.w	r0, [r3, r6, lsl #2]
    3174:	ldr	r5, [pc, #376]	; (32f0 <usb_isr+0x644>)
    3176:	b.n	2d0e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3178:	ldrb	r3, [r1, r6]
    317a:	cmp	r3, #3
    317c:	bhi.n	3254 <usb_isr+0x5a8>
    317e:	add	r2, pc, #4	; (adr r2, 3184 <usb_isr+0x4d8>)
    3180:	ldr.w	pc, [r2, r3, lsl #2]
    3184:	.word	0x00002d41
    3188:	.word	0x00002d41
    318c:	.word	0x000031d9
    3190:	.word	0x000031d3
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3194:	ldr	r1, [pc, #312]	; (32d0 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    3196:	ldr	r3, [pc, #324]	; (32dc <usb_isr+0x630>)
    3198:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    319a:	movs	r0, #13
    319c:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    319e:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    31a0:	lsls	r2, r4, #30
    31a2:	bpl.w	2f46 <usb_isr+0x29a>
    31a6:	b.n	2f38 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    31a8:	movw	r2, #770	; 0x302
    31ac:	cmp	r1, r2
    31ae:	bne.w	346e <usb_isr+0x7c2>
    31b2:	ldrh	r1, [r5, #4]
    31b4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    31b8:	cmp	r1, #5
    31ba:	bhi.n	31ea <usb_isr+0x53e>
    31bc:	ldrh	r2, [r5, #2]
    31be:	cbnz	r2, 31ea <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    31c0:	ldr	r4, [pc, #268]	; (32d0 <usb_isr+0x624>)
    31c2:	str	r0, [sp, #4]
    31c4:	lsls	r1, r1, #2
    31c6:	add	r4, r1
    31c8:	ldrb	r1, [r4, #0]
    31ca:	orr.w	r1, r1, #2
    31ce:	strb	r1, [r4, #0]
    31d0:	b.n	3082 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    31d2:	movs	r3, #1
    31d4:	strb	r3, [r1, r6]
						break;
    31d6:	b.n	2d40 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    31d8:	movs	r3, #0
    31da:	strb	r3, [r1, r6]
						break;
    31dc:	b.n	2d40 <usb_isr+0x94>
    31de:	ldrh	r1, [r5, #4]
    31e0:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    31e4:	cmp	r1, #5
    31e6:	bls.w	3488 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    31ea:	ldr	r2, [pc, #228]	; (32d0 <usb_isr+0x624>)
    31ec:	movs	r3, #15
    31ee:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    31f0:	ldr	r2, [pc, #216]	; (32cc <usb_isr+0x620>)
    31f2:	movs	r3, #1
    31f4:	strb	r3, [r2, #0]
    31f6:	b.n	2ec6 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    31f8:	cmp	r0, #64	; 0x40
    31fa:	bls.w	30ce <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    31fe:	orr.w	r4, r4, #2
    3202:	add.w	r1, lr, r4, lsl #3
    3206:	ldr	r6, [sp, #8]
    3208:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    320a:	cbz	r2, 323c <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    320c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3210:	ldr	r2, [pc, #224]	; (32f4 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3212:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3214:	mov	r3, r6
    3216:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3218:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    321c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    321e:	str.w	r2, [lr, r4, lsl #3]
    3222:	b.n	3100 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3224:	ldrb.w	r3, [sp, #4]
    3228:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    322a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    322c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    322e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3230:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3234:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3236:	str.w	r2, [lr, ip, lsl #3]
    323a:	b.n	30fa <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    323c:	ldrb.w	r1, [sp, #4]
    3240:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3242:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3244:	ldr	r2, [pc, #140]	; (32d4 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3246:	strb.w	r5, [r8]
    324a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    324c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    324e:	str.w	r2, [lr, r4, lsl #3]
    3252:	b.n	3100 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3254:	tst.w	r9, #8
    3258:	ite	eq
    325a:	moveq	r3, #2
    325c:	movne	r3, #3
    325e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3260:	b.n	2d40 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3262:	ldr	r2, [pc, #148]	; (32f8 <usb_isr+0x64c>)
    3264:	movs	r1, #15
    3266:	strb	r1, [r2, #0]
    3268:	b.n	3036 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    326a:	ldr	r2, [pc, #64]	; (32ac <usb_isr+0x600>)
    326c:	ldr	r4, [pc, #140]	; (32fc <usb_isr+0x650>)
    326e:	ldrb	r2, [r2, #0]
    3270:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3272:	ldrh	r2, [r5, #6]
    3274:	cmp	r2, r0
    3276:	bcs.w	363c <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    327a:	ldr	r1, [pc, #60]	; (32b8 <usb_isr+0x60c>)
    327c:	ldrb	r5, [r1, #0]
    327e:	cmp	r2, #64	; 0x40
    3280:	mov	ip, r2
    3282:	orr.w	lr, r5, #2
    3286:	it	cs
    3288:	movcs.w	ip, #64	; 0x40
    328c:	add.w	r3, r4, ip
    3290:	add.w	r0, r9, lr, lsl #3
    3294:	str	r3, [sp, #8]
    3296:	movs	r3, #1
    3298:	str	r4, [r0, #4]
    329a:	mov.w	r8, ip, lsl #16
    329e:	rsb	r0, ip, r2
    32a2:	str	r3, [sp, #4]
    32a4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32a6:	movs	r4, #200	; 0xc8
    32a8:	b.n	30a8 <usb_isr+0x3fc>
    32aa:	nop
    32ac:	.word	0x1fff19d8
    32b0:	.word	0x1fff0000
    32b4:	.word	0x1fff1d34
    32b8:	.word	0x1fff19cc
    32bc:	.word	0x1fff1958
    32c0:	.word	0x1fff1d3c
    32c4:	.word	0x1fff187c
    32c8:	.word	0x1fff1900
    32cc:	.word	0x40072094
    32d0:	.word	0x400720c0
    32d4:	.word	0x00400088
    32d8:	.word	0x40072088
    32dc:	.word	0x40072080
    32e0:	.word	0x40072098
    32e4:	.word	0x1fff1904
    32e8:	.word	0x1fff195c
    32ec:	.word	0x1fff19cd
    32f0:	.word	0x1fff18ec
    32f4:	.word	0x004000c8
    32f8:	.word	0x1fff1959
    32fc:	.word	0x1fff19d0
    3300:	.word	0x1fff1884
    3304:	.word	0x4007208c
    3308:	ldr	r4, [pc, #704]	; (35cc <usb_isr+0x920>)
    330a:	ldr	r2, [pc, #708]	; (35d0 <usb_isr+0x924>)
    330c:	ldr	r1, [pc, #708]	; (35d4 <usb_isr+0x928>)
    330e:	ldr	r0, [pc, #712]	; (35d8 <usb_isr+0x92c>)
    3310:	ldr	r5, [pc, #712]	; (35dc <usb_isr+0x930>)
    3312:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3314:	movs	r3, #0
    3316:	ldr	r4, [pc, #712]	; (35e0 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3318:	str	r4, [sp, #8]
    331a:	str	r6, [sp, #20]
    331c:	str	r5, [sp, #12]
    331e:	mov	r8, r0
    3320:	mov	r4, r3
    3322:	str	r7, [sp, #16]
    3324:	mov	r6, r2
    3326:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3328:	ldr	r0, [r6, #0]
			while (p) {
    332a:	cbz	r0, 3338 <usb_isr+0x68c>
				n = p->next;
    332c:	ldr	r7, [r0, #4]
				usb_free(p);
    332e:	bl	2a8c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3332:	mov	r0, r7
    3334:	cmp	r7, #0
    3336:	bne.n	332c <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3338:	movs	r3, #0
    333a:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    333c:	ldr	r3, [sp, #12]
			p = tx_first[i];
    333e:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3340:	mov	r2, r3
    3342:	movs	r3, #0
    3344:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3348:	cbz	r0, 3356 <usb_isr+0x6aa>
				n = p->next;
    334a:	ldr	r7, [r0, #4]
				usb_free(p);
    334c:	bl	2a8c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3350:	mov	r0, r7
    3352:	cmp	r7, #0
    3354:	bne.n	334a <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3356:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3358:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    335a:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    335c:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    335e:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3362:	ldr	r2, [sp, #8]
    3364:	mov.w	r1, #0
			switch (tx_state[i]) {
    3368:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    336a:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    336e:	cmp	r3, #3
    3370:	bhi.n	3382 <usb_isr+0x6d6>
    3372:	tbb	[pc, r3]
    3376:	.short	0x0258
    3378:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    337a:	ldr	r3, [sp, #4]
    337c:	mov.w	r2, #1
    3380:	strb	r2, [r3, #0]
    3382:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3384:	adds	r4, #1
    3386:	adds	r3, #1
    3388:	cmp	r4, #5
    338a:	add.w	r6, r6, #4
    338e:	add.w	r5, r5, #4
    3392:	str	r3, [sp, #4]
    3394:	bne.n	3328 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3396:	ldr	r4, [pc, #588]	; (35e4 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3398:	ldr	r5, [pc, #588]	; (35e8 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    339a:	ldrb	r2, [r4, #0]
			*reg = epconf;
    339c:	ldr	r3, [pc, #588]	; (35ec <usb_isr+0x940>)
    339e:	ldr	r7, [sp, #16]
    33a0:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    33a2:	movs	r1, #0
    33a4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    33a6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33a8:	lsls	r2, r2, #28
    33aa:	bmi.n	34a2 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33ac:	ldrb	r2, [r4, #1]
			*reg = epconf;
    33ae:	ldr	r1, [pc, #576]	; (35f0 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33b0:	ldr.w	r8, [pc, #588]	; 3600 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    33b4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33b6:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33b8:	mov.w	r1, #0
    33bc:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    33c0:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33c4:	bmi.w	354e <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33c8:	ldrb	r2, [r4, #2]
			*reg = epconf;
    33ca:	ldr	r1, [pc, #552]	; (35f4 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33cc:	ldr.w	r8, [pc, #560]	; 3600 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    33d0:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33d2:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33d4:	mov.w	r1, #0
    33d8:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    33dc:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33e0:	bmi.w	3526 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    33e4:	ldr	r1, [pc, #528]	; (35f8 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33e6:	ldrb	r2, [r4, #3]
			*reg = epconf;
    33e8:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33ea:	movs	r1, #0
    33ec:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    33f0:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33f4:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33f6:	ldr.w	r8, [pc, #520]	; 3600 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33fa:	bmi.n	34f8 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33fc:	ldrb	r2, [r4, #4]
			*reg = epconf;
    33fe:	ldr	r1, [pc, #508]	; (35fc <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3400:	ldr	r4, [pc, #508]	; (3600 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3402:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3404:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3406:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3408:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    340c:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3410:	bmi.n	34ce <usb_isr+0x822>
    3412:	ldrb	r3, [r6, #0]
    3414:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3416:	movs	r1, #0
    3418:	eor.w	r2, r3, #1
    341c:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3420:	str.w	r1, [r9, #184]	; 0xb8
    3424:	b.n	3082 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3426:	ldr	r3, [sp, #4]
    3428:	mov.w	r2, #0
    342c:	strb	r2, [r3, #0]
    342e:	b.n	3382 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3430:	ldr	r2, [pc, #464]	; (3604 <usb_isr+0x958>)
    3432:	ldr	r4, [r2, #4]
    3434:	cmp	r4, #0
    3436:	beq.w	31ea <usb_isr+0x53e>
    343a:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    343c:	ldrh.w	lr, [r5, #4]
    3440:	b.n	344c <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3442:	adds	r2, #12
			if (list->addr == NULL) break;
    3444:	ldr	r4, [r2, #4]
    3446:	cmp	r4, #0
    3448:	beq.w	31ea <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    344c:	ldrh	r3, [r2, #0]
    344e:	cmp	r3, r0
    3450:	bne.n	3442 <usb_isr+0x796>
    3452:	ldrh	r3, [r2, #2]
    3454:	cmp	r3, lr
    3456:	bne.n	3442 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3458:	lsrs	r0, r0, #8
    345a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    345c:	ite	eq
    345e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3460:	ldrhne	r0, [r2, #8]
    3462:	b.n	3272 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3464:	ldr	r4, [pc, #416]	; (3608 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3466:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3468:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    346a:	strb	r2, [r4, #1]
    346c:	b.n	3272 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    346e:	cmp.w	r1, #1280	; 0x500
    3472:	bne.w	31ea <usb_isr+0x53e>
    3476:	movs	r3, #1
    3478:	movs	r2, #0
    347a:	str	r3, [sp, #4]
    347c:	b.n	3082 <usb_isr+0x3d6>
    347e:	movw	r2, #8993	; 0x2321
    3482:	cmp	r1, r2
    3484:	beq.n	3476 <usb_isr+0x7ca>
    3486:	b.n	31ea <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3488:	ldrh	r2, [r5, #2]
    348a:	cmp	r2, #0
    348c:	bne.w	31ea <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3490:	ldr	r4, [pc, #376]	; (360c <usb_isr+0x960>)
    3492:	str	r0, [sp, #4]
    3494:	lsls	r1, r1, #2
    3496:	add	r4, r1
    3498:	ldrb	r1, [r4, #0]
    349a:	bic.w	r1, r1, #2
    349e:	strb	r1, [r4, #0]
    34a0:	b.n	3082 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34a2:	bl	2a4c <usb_malloc>
				if (p) {
    34a6:	cmp	r0, #0
    34a8:	beq.w	3618 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    34ac:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34ae:	ldr	r2, [pc, #352]	; (3610 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    34b0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34b4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    34b8:	bl	2a4c <usb_malloc>
				if (p) {
    34bc:	cmp	r0, #0
    34be:	beq.n	35c0 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    34c0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34c2:	ldr	r2, [pc, #336]	; (3614 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    34c4:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34c8:	str.w	r2, [r9, #40]	; 0x28
    34cc:	b.n	33ac <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34ce:	bl	2a4c <usb_malloc>
				if (p) {
    34d2:	cmp	r0, #0
    34d4:	beq.n	3584 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    34d6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34d8:	ldr	r2, [pc, #308]	; (3610 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    34da:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34de:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    34e2:	bl	2a4c <usb_malloc>
				if (p) {
    34e6:	cmp	r0, #0
    34e8:	beq.n	3578 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    34ea:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34ec:	ldr	r2, [pc, #292]	; (3614 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    34ee:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34f2:	str.w	r2, [r9, #168]	; 0xa8
    34f6:	b.n	3412 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34f8:	bl	2a4c <usb_malloc>
				if (p) {
    34fc:	cmp	r0, #0
    34fe:	beq.w	3630 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3502:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3504:	ldr	r2, [pc, #264]	; (3610 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3506:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    350a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    350e:	bl	2a4c <usb_malloc>
				if (p) {
    3512:	cmp	r0, #0
    3514:	beq.w	3624 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3518:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    351a:	ldr	r2, [pc, #248]	; (3614 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    351c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3520:	str.w	r2, [r9, #136]	; 0x88
    3524:	b.n	33fc <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3526:	bl	2a4c <usb_malloc>
				if (p) {
    352a:	cmp	r0, #0
    352c:	beq.n	35b4 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    352e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3530:	ldr	r2, [pc, #220]	; (3610 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3532:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3536:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    353a:	bl	2a4c <usb_malloc>
				if (p) {
    353e:	cbz	r0, 35a8 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3540:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3542:	ldr	r2, [pc, #208]	; (3614 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3544:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3548:	str.w	r2, [r9, #104]	; 0x68
    354c:	b.n	33e4 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    354e:	bl	2a4c <usb_malloc>
				if (p) {
    3552:	cbz	r0, 359c <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3554:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3556:	ldr	r2, [pc, #184]	; (3610 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3558:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    355c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3560:	bl	2a4c <usb_malloc>
				if (p) {
    3564:	cbz	r0, 3590 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3566:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3568:	ldr	r2, [pc, #168]	; (3614 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    356a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    356e:	str.w	r2, [r9, #72]	; 0x48
    3572:	b.n	33c8 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3574:	movs	r0, #2
    3576:	b.n	3272 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3578:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    357a:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    357e:	adds	r2, #1
    3580:	strb	r2, [r5, #0]
    3582:	b.n	3412 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3584:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3586:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    358a:	adds	r2, #1
    358c:	strb	r2, [r5, #0]
    358e:	b.n	34e2 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3590:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3592:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3596:	adds	r2, #1
    3598:	strb	r2, [r5, #0]
    359a:	b.n	33c8 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    359c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    359e:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    35a2:	adds	r2, #1
    35a4:	strb	r2, [r5, #0]
    35a6:	b.n	3560 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    35a8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    35aa:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    35ae:	adds	r2, #1
    35b0:	strb	r2, [r5, #0]
    35b2:	b.n	33e4 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    35b4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    35b6:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    35ba:	adds	r2, #1
    35bc:	strb	r2, [r5, #0]
    35be:	b.n	353a <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    35c0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    35c2:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    35c6:	adds	r2, #1
    35c8:	strb	r2, [r5, #0]
    35ca:	b.n	33ac <usb_isr+0x700>
    35cc:	.word	0x1fff19dc
    35d0:	.word	0x1fff1944
    35d4:	.word	0x1fff199c
    35d8:	.word	0x1fff19b0
    35dc:	.word	0x1fff18ec
    35e0:	.word	0x1fff1e6c
    35e4:	.word	0x00004e80
    35e8:	.word	0x1fff19cd
    35ec:	.word	0x400720c4
    35f0:	.word	0x400720c8
    35f4:	.word	0x400720cc
    35f8:	.word	0x400720d0
    35fc:	.word	0x400720d4
    3600:	.word	0x1fff0000
    3604:	.word	0x00004e88
    3608:	.word	0x1fff19d0
    360c:	.word	0x400720c0
    3610:	.word	0x00400088
    3614:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3618:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    361a:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    361e:	adds	r2, #1
    3620:	strb	r2, [r5, #0]
    3622:	b.n	34b8 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3624:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3626:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    362a:	adds	r2, #1
    362c:	strb	r2, [r5, #0]
    362e:	b.n	33fc <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3630:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3632:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    3636:	adds	r2, #1
    3638:	strb	r2, [r5, #0]
    363a:	b.n	350e <usb_isr+0x862>
    363c:	cmp	r0, #64	; 0x40
    363e:	mov	ip, r0
    3640:	it	cs
    3642:	movcs.w	ip, #64	; 0x40
    3646:	add.w	r3, r4, ip
    364a:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    364c:	movs	r3, #1
    364e:	rsb	r0, ip, r0
    3652:	mov.w	r8, ip, lsl #16
    3656:	movs	r2, #0
    3658:	str	r3, [sp, #4]
    365a:	b.n	308c <usb_isr+0x3e0>

0000365c <usb_init>:
}



void usb_init(void)
{
    365c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3660:	ldr	r4, [pc, #156]	; (3700 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3662:	bl	3e9c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3666:	movs	r2, #0
    3668:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    366c:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    366e:	str	r2, [r3, #0]
		table[i].addr = 0;
    3670:	str	r2, [r3, #4]
    3672:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3674:	cmp	r3, r0
		table[i].desc = 0;
    3676:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    367a:	bne.n	366e <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    367c:	ldr	r0, [pc, #132]	; (3704 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    367e:	ldr	r2, [pc, #136]	; (3708 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3680:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3682:	ldr.w	lr, [pc, #156]	; 3720 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3686:	ldr	r6, [pc, #132]	; (370c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3688:	ldr	r5, [pc, #132]	; (3710 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    368a:	ldr	r7, [pc, #136]	; (3714 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    368c:	ldr.w	ip, [pc, #148]	; 3724 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3690:	ldr.w	r8, [pc, #148]	; 3728 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3694:	orr.w	r3, r3, #262144	; 0x40000
    3698:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    369a:	ldr	r3, [r2, #0]
    369c:	orr.w	r3, r3, #50331648	; 0x3000000
    36a0:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    36a2:	movs	r3, #3
    36a4:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    36a8:	movs	r3, #160	; 0xa0
    36aa:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    36ac:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    36b0:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    36b4:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    36b8:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    36ba:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    36bc:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    36c0:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    36c2:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    36c4:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    36c6:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    36c8:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    36ca:	ldr	r5, [pc, #76]	; (3718 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    36cc:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    36d0:	ldr	r0, [pc, #72]	; (371c <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    36d2:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    36d6:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    36d8:	movs	r3, #1
    36da:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    36de:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    36e2:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    36e6:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    36e8:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    36ea:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    36ee:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    36f0:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    36f2:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    36f6:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    36fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36fe:	nop
    3700:	.word	0x1fff0000
    3704:	.word	0x40048034
    3708:	.word	0x4000d800
    370c:	.word	0x40072140
    3710:	.word	0x4007209c
    3714:	.word	0x400720b0
    3718:	.word	0xe000e435
    371c:	.word	0xe000e104
    3720:	.word	0x40072144
    3724:	.word	0x40072080
    3728:	.word	0x40072088

0000372c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    372c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    372e:	ldr	r4, [pc, #176]	; (37e0 <yield+0xb4>)
    3730:	ldrb	r3, [r4, #0]
    3732:	cbz	r3, 3736 <yield+0xa>
    3734:	pop	{r3, r4, r5, pc}
	running = 1;
    3736:	movs	r3, #1
    3738:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    373a:	bl	1c58 <usb_serial_available>
	if (Serial.available()) serialEvent();
    373e:	cmp	r0, #0
    3740:	bne.n	37c8 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3742:	bl	3c6c <serial_available>
	if (Serial1.available()) serialEvent1();
    3746:	cmp	r0, #0
    3748:	bne.n	37c2 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    374a:	bl	3954 <serial2_available>
	if (Serial2.available()) serialEvent2();
    374e:	cmp	r0, #0
    3750:	bne.n	37bc <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3752:	bl	3f6c <serial3_available>
	if (Serial3.available()) serialEvent3();
    3756:	cbnz	r0, 37b6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3758:	bl	3a80 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    375c:	cbnz	r0, 37b0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    375e:	bl	385c <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3762:	cbnz	r0, 37aa <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3764:	bl	3d98 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3768:	cbnz	r0, 37a4 <yield+0x78>
#endif
	running = 0;
    376a:	movs	r3, #0
    376c:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    376e:	mrs	r3, IPSR
		if (ipsr != 0) return;
    3772:	cmp	r3, #0
    3774:	bne.n	3734 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3776:	mrs	r1, PRIMASK
		__disable_irq();
    377a:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    377c:	ldr	r3, [pc, #100]	; (37e4 <yield+0xb8>)
    377e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3780:	cbz	r0, 37ce <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3782:	ldr	r4, [pc, #100]	; (37e8 <yield+0xbc>)
    3784:	ldrb	r2, [r4, #0]
    3786:	cbnz	r2, 37ce <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3788:	ldr	r5, [r0, #20]
    378a:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    378c:	movs	r3, #1
    378e:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3790:	cbz	r5, 37d6 <yield+0xaa>
			firstYield->_prev = nullptr;
    3792:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3794:	cbnz	r1, 3798 <yield+0x6c>
    3796:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3798:	movs	r5, #0
    379a:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    379c:	ldr	r3, [r0, #8]
    379e:	blx	r3
		runningFromYield = false;
    37a0:	strb	r5, [r4, #0]
    37a2:	b.n	3734 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    37a4:	bl	3858 <serialEvent6()>
    37a8:	b.n	376a <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    37aa:	bl	37f0 <serialEvent5()>
    37ae:	b.n	3764 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    37b0:	bl	3844 <serialEvent4()>
    37b4:	b.n	375e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    37b6:	bl	4068 <serialEvent3()>
    37ba:	b.n	3758 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    37bc:	bl	3840 <serialEvent2()>
    37c0:	b.n	3752 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    37c2:	bl	4064 <serialEvent1()>
    37c6:	b.n	374a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    37c8:	bl	381c <serialEvent()>
    37cc:	b.n	3742 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37ce:	cmp	r1, #0
    37d0:	bne.n	3734 <yield+0x8>
    37d2:	cpsie	i
    37d4:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    37d6:	ldr	r3, [pc, #20]	; (37ec <yield+0xc0>)
    37d8:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37da:	cmp	r1, #0
    37dc:	bne.n	3798 <yield+0x6c>
    37de:	b.n	3796 <yield+0x6a>
    37e0:	.word	0x1fff19e1
    37e4:	.word	0x1fff1cf4
    37e8:	.word	0x1fff1cf8
    37ec:	.word	0x1fff1cf0

000037f0 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    37f0:	bx	lr
    37f2:	nop

000037f4 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    37f4:	b.w	1c74 <usb_serial_flush_input>

000037f8 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    37f8:	b.w	1c28 <usb_serial_peekchar>

000037fc <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    37fc:	b.w	1be0 <usb_serial_getchar>

00003800 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3800:	b.w	1c58 <usb_serial_available>

00003804 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3804:	b.w	1e14 <usb_serial_flush_output>

00003808 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3808:	b.w	1dcc <usb_serial_write_buffer_free>

0000380c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    380c:	mov	r0, r1
    380e:	mov	r1, r2
    3810:	b.w	1cac <usb_serial_write>

00003814 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3814:	mov	r0, r1
    3816:	b.w	1db4 <usb_serial_putchar>
    381a:	nop

0000381c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    381c:	bx	lr
    381e:	nop

00003820 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3820:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3822:	ldr	r2, [pc, #24]	; (383c <Print::println()+0x1c>)
	return write(buf, 2);
    3824:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3826:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3828:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    382a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    382c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    382e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3832:	movs	r2, #2
    3834:	blx	r3
}
    3836:	add	sp, #12
    3838:	ldr.w	pc, [sp], #4
    383c:	.word	0x00004e7c

00003840 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3840:	bx	lr
    3842:	nop

00003844 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3844:	bx	lr
    3846:	nop

00003848 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3848:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    384a:	bl	490 <setup>
	while (1) {
		loop();
    384e:	bl	494 <loop>
		yield();
    3852:	bl	372c <yield>
    3856:	b.n	384e <main+0x6>

00003858 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3858:	bx	lr
    385a:	nop

0000385c <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    385c:	ldr	r2, [pc, #20]	; (3874 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    385e:	ldr	r3, [pc, #24]	; (3878 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3860:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3862:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3864:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3866:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3868:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    386a:	it	cc
    386c:	addcc	r0, #64	; 0x40
    386e:	subs	r0, r0, r3
}
    3870:	bx	lr
    3872:	nop
    3874:	.word	0x1fff19e8
    3878:	.word	0x1fff19e9

0000387c <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    387c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    387e:	ldr	r3, [pc, #172]	; (392c <uart4_status_isr+0xb0>)
    3880:	ldrb	r2, [r3, #4]
    3882:	lsls	r4, r2, #26
    3884:	bpl.n	38c6 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3886:	ldr	r0, [pc, #168]	; (3930 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3888:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    388a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    388c:	ldr	r1, [pc, #164]	; (3934 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    388e:	adds	r3, #1
    3890:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3892:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3894:	it	gt
    3896:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3898:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    389a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    389c:	beq.n	38a6 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    389e:	ldr	r4, [pc, #152]	; (3938 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    38a0:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    38a2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    38a4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    38a6:	ldr	r2, [pc, #148]	; (393c <uart4_status_isr+0xc0>)
    38a8:	ldr	r1, [r2, #0]
    38aa:	cbz	r1, 38c6 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    38ac:	ldr	r2, [pc, #144]	; (3940 <uart4_status_isr+0xc4>)
    38ae:	ldrb	r2, [r2, #0]
    38b0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    38b2:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    38b4:	itet	cc
    38b6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    38ba:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    38bc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    38be:	cmp	r3, #39	; 0x27
    38c0:	itt	gt
    38c2:	movgt	r3, #1
    38c4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    38c6:	ldr	r2, [pc, #100]	; (392c <uart4_status_isr+0xb0>)
    38c8:	ldrb	r3, [r2, #3]
    38ca:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    38cc:	lsls	r0, r3, #24
    38ce:	bmi.n	38f4 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    38d0:	lsls	r2, r3, #25
    38d2:	bpl.n	38f0 <uart4_status_isr+0x74>
    38d4:	ldr	r3, [pc, #84]	; (392c <uart4_status_isr+0xb0>)
    38d6:	ldrb	r3, [r3, #4]
    38d8:	lsls	r3, r3, #25
    38da:	bpl.n	38f0 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    38dc:	ldr	r3, [pc, #100]	; (3944 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    38de:	ldr	r1, [pc, #104]	; (3948 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    38e0:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    38e2:	movs	r2, #0
    38e4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    38e6:	cbz	r3, 38ea <uart4_status_isr+0x6e>
    38e8:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    38ea:	ldr	r3, [pc, #64]	; (392c <uart4_status_isr+0xb0>)
    38ec:	movs	r2, #44	; 0x2c
    38ee:	strb	r2, [r3, #3]
	}
}
    38f0:	pop	{r4, r5}
    38f2:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    38f4:	ldrb	r1, [r2, #4]
    38f6:	lsls	r1, r1, #24
    38f8:	bpl.n	38d0 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    38fa:	ldr	r1, [pc, #80]	; (394c <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    38fc:	ldr	r0, [pc, #64]	; (3940 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    38fe:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3900:	ldrb	r1, [r0, #0]
    3902:	uxtb	r1, r1
		if (head == tail) {
    3904:	cmp	r4, r1
    3906:	beq.n	3924 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3908:	adds	r2, r1, #1
    390a:	cmp	r2, #39	; 0x27
    390c:	itt	hi
    390e:	movhi	r1, #0
    3910:	movhi	r2, r1
			n = tx_buffer[tail];
    3912:	ldr	r5, [pc, #60]	; (3950 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3914:	ldr	r4, [pc, #20]	; (392c <uart4_status_isr+0xb0>)
    3916:	it	ls
    3918:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    391a:	ldrb	r2, [r5, r2]
    391c:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    391e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3920:	strb	r1, [r0, #0]
    3922:	b.n	38d0 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3924:	movs	r1, #108	; 0x6c
    3926:	strb	r1, [r2, #3]
    3928:	b.n	38d0 <uart4_status_isr+0x54>
    392a:	nop
    392c:	.word	0x400ea000
    3930:	.word	0x1fff19e8
    3934:	.word	0x1fff19e9
    3938:	.word	0x1fff1a14
    393c:	.word	0x1fff19e4
    3940:	.word	0x1fff1a55
    3944:	.word	0x1fff1a58
    3948:	.word	0x1fff1a54
    394c:	.word	0x1fff1a5c
    3950:	.word	0x1fff19ec

00003954 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3954:	ldr	r2, [pc, #20]	; (396c <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3956:	ldr	r3, [pc, #24]	; (3970 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3958:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    395a:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    395c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    395e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3960:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3962:	it	cc
    3964:	addcc	r0, #64	; 0x40
    3966:	subs	r0, r0, r3
}
    3968:	bx	lr
    396a:	nop
    396c:	.word	0x1fff1ad0
    3970:	.word	0x1fff1a65

00003974 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3974:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3976:	ldr	r3, [pc, #224]	; (3a58 <uart1_status_isr+0xe4>)
    3978:	ldrb	r2, [r3, #4]
    397a:	tst.w	r2, #48	; 0x30
    397e:	beq.n	39da <uart1_status_isr+0x66>
		__disable_irq();
    3980:	cpsid	i
		avail = UART1_RCFIFO;
    3982:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3984:	and.w	r2, r1, #255	; 0xff
    3988:	cmp	r1, #0
    398a:	beq.n	3a08 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    398c:	cpsie	i
			head = rx_buffer_head;
    398e:	ldr	r7, [pc, #204]	; (3a5c <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3990:	ldr	r1, [pc, #204]	; (3a60 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3992:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3994:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3996:	ldr	r6, [pc, #204]	; (3a64 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3998:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    399a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    399c:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    399e:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    39a0:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    39a2:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    39a4:	it	cs
    39a6:	movcs	r3, #0
				if (newhead != tail) {
    39a8:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    39aa:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    39ae:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    39b0:	itt	ne
    39b2:	strbne	r1, [r6, r3]
    39b4:	movne	r0, r3
				}
			} while (--avail > 0);
    39b6:	ands.w	r2, r2, #255	; 0xff
    39ba:	bne.n	399e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    39bc:	ldr	r3, [pc, #168]	; (3a68 <uart1_status_isr+0xf4>)
    39be:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    39c0:	uxtb	r2, r0
    39c2:	strb	r2, [r7, #0]
			if (rts_pin) {
    39c4:	cbz	r3, 39da <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    39c6:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    39c8:	itet	cc
    39ca:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    39ce:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    39d0:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    39d2:	cmp	r0, #39	; 0x27
    39d4:	itt	gt
    39d6:	movgt	r2, #1
    39d8:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    39da:	ldr	r1, [pc, #124]	; (3a58 <uart1_status_isr+0xe4>)
    39dc:	ldrb	r2, [r1, #3]
    39de:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    39e0:	lsls	r5, r2, #24
    39e2:	bmi.n	3a12 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    39e4:	lsls	r2, r2, #25
    39e6:	bpl.n	3a04 <uart1_status_isr+0x90>
    39e8:	ldr	r3, [pc, #108]	; (3a58 <uart1_status_isr+0xe4>)
    39ea:	ldrb	r3, [r3, #4]
    39ec:	lsls	r3, r3, #25
    39ee:	bpl.n	3a04 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    39f0:	ldr	r3, [pc, #120]	; (3a6c <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    39f2:	ldr	r1, [pc, #124]	; (3a70 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    39f4:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    39f6:	movs	r2, #0
    39f8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    39fa:	cbz	r3, 39fe <uart1_status_isr+0x8a>
    39fc:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    39fe:	ldr	r3, [pc, #88]	; (3a58 <uart1_status_isr+0xe4>)
    3a00:	movs	r2, #60	; 0x3c
    3a02:	strb	r2, [r3, #3]
	}
}
    3a04:	pop	{r4, r5, r6, r7}
    3a06:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3a08:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3a0a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3a0c:	strb	r2, [r3, #17]
			__enable_irq();
    3a0e:	cpsie	i
    3a10:	b.n	39da <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3a12:	ldrb	r3, [r1, #4]
    3a14:	lsls	r4, r3, #24
    3a16:	bpl.n	39e4 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3a18:	ldr	r3, [pc, #88]	; (3a74 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3a1a:	ldr	r6, [pc, #92]	; (3a78 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3a1c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3a1e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3a20:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3a22:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3a24:	cmp	r4, r3
    3a26:	beq.n	3a46 <uart1_status_isr+0xd2>
    3a28:	ldr	r5, [pc, #80]	; (3a7c <uart1_status_isr+0x108>)
    3a2a:	b.n	3a30 <uart1_status_isr+0xbc>
    3a2c:	cmp	r3, r4
    3a2e:	beq.n	3a46 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3a30:	adds	r3, #1
    3a32:	cmp	r3, #40	; 0x28
    3a34:	it	cs
    3a36:	movcs	r3, #0
			avail = UART1_S1;
    3a38:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3a3a:	ldrb	r0, [r5, r3]
    3a3c:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3a3e:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3a40:	ldrb	r0, [r1, #20]
    3a42:	cmp	r0, #7
    3a44:	bls.n	3a2c <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3a46:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3a48:	ldr	r1, [pc, #12]	; (3a58 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3a4a:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3a4c:	ldrb	r3, [r1, #4]
    3a4e:	lsls	r0, r3, #24
    3a50:	itt	mi
    3a52:	movmi	r3, #124	; 0x7c
    3a54:	strbmi	r3, [r1, #3]
    3a56:	b.n	39e4 <uart1_status_isr+0x70>
    3a58:	.word	0x4006b000
    3a5c:	.word	0x1fff1ad0
    3a60:	.word	0x1fff1a65
    3a64:	.word	0x1fff1a90
    3a68:	.word	0x1fff1a60
    3a6c:	.word	0x1fff1ad4
    3a70:	.word	0x1fff1a64
    3a74:	.word	0x1fff1ad8
    3a78:	.word	0x1fff1ad1
    3a7c:	.word	0x1fff1a68

00003a80 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a80:	ldr	r2, [pc, #20]	; (3a98 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3a82:	ldr	r3, [pc, #24]	; (3a9c <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a84:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3a86:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a88:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3a8a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3a8c:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3a8e:	it	cc
    3a90:	addcc	r0, #64	; 0x40
    3a92:	subs	r0, r0, r3
}
    3a94:	bx	lr
    3a96:	nop
    3a98:	.word	0x1fff1ae0
    3a9c:	.word	0x1fff1ae1

00003aa0 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3aa0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3aa2:	ldr	r3, [pc, #172]	; (3b50 <uart3_status_isr+0xb0>)
    3aa4:	ldrb	r2, [r3, #4]
    3aa6:	lsls	r4, r2, #26
    3aa8:	bpl.n	3aea <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3aaa:	ldr	r0, [pc, #168]	; (3b54 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3aac:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3aae:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ab0:	ldr	r1, [pc, #164]	; (3b58 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3ab2:	adds	r3, #1
    3ab4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ab6:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3ab8:	it	gt
    3aba:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3abc:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3abe:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ac0:	beq.n	3aca <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3ac2:	ldr	r4, [pc, #152]	; (3b5c <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3ac4:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3ac6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3ac8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3aca:	ldr	r2, [pc, #148]	; (3b60 <uart3_status_isr+0xc0>)
    3acc:	ldr	r1, [r2, #0]
    3ace:	cbz	r1, 3aea <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3ad0:	ldr	r2, [pc, #144]	; (3b64 <uart3_status_isr+0xc4>)
    3ad2:	ldrb	r2, [r2, #0]
    3ad4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3ad6:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3ad8:	itet	cc
    3ada:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3ade:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3ae0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ae2:	cmp	r3, #39	; 0x27
    3ae4:	itt	gt
    3ae6:	movgt	r3, #1
    3ae8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3aea:	ldr	r2, [pc, #100]	; (3b50 <uart3_status_isr+0xb0>)
    3aec:	ldrb	r3, [r2, #3]
    3aee:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3af0:	lsls	r0, r3, #24
    3af2:	bmi.n	3b18 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3af4:	lsls	r2, r3, #25
    3af6:	bpl.n	3b14 <uart3_status_isr+0x74>
    3af8:	ldr	r3, [pc, #84]	; (3b50 <uart3_status_isr+0xb0>)
    3afa:	ldrb	r3, [r3, #4]
    3afc:	lsls	r3, r3, #25
    3afe:	bpl.n	3b14 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3b00:	ldr	r3, [pc, #100]	; (3b68 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3b02:	ldr	r1, [pc, #104]	; (3b6c <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3b04:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3b06:	movs	r2, #0
    3b08:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3b0a:	cbz	r3, 3b0e <uart3_status_isr+0x6e>
    3b0c:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3b0e:	ldr	r3, [pc, #64]	; (3b50 <uart3_status_isr+0xb0>)
    3b10:	movs	r2, #44	; 0x2c
    3b12:	strb	r2, [r3, #3]
	}
}
    3b14:	pop	{r4, r5}
    3b16:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3b18:	ldrb	r1, [r2, #4]
    3b1a:	lsls	r1, r1, #24
    3b1c:	bpl.n	3af4 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3b1e:	ldr	r1, [pc, #80]	; (3b70 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3b20:	ldr	r0, [pc, #64]	; (3b64 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3b22:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3b24:	ldrb	r1, [r0, #0]
    3b26:	uxtb	r1, r1
		if (head == tail) {
    3b28:	cmp	r4, r1
    3b2a:	beq.n	3b48 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3b2c:	adds	r2, r1, #1
    3b2e:	cmp	r2, #39	; 0x27
    3b30:	itt	hi
    3b32:	movhi	r1, #0
    3b34:	movhi	r2, r1
			n = tx_buffer[tail];
    3b36:	ldr	r5, [pc, #60]	; (3b74 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3b38:	ldr	r4, [pc, #20]	; (3b50 <uart3_status_isr+0xb0>)
    3b3a:	it	ls
    3b3c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3b3e:	ldrb	r2, [r5, r2]
    3b40:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3b42:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3b44:	strb	r1, [r0, #0]
    3b46:	b.n	3af4 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3b48:	movs	r1, #108	; 0x6c
    3b4a:	strb	r1, [r2, #3]
    3b4c:	b.n	3af4 <uart3_status_isr+0x54>
    3b4e:	nop
    3b50:	.word	0x4006d000
    3b54:	.word	0x1fff1ae0
    3b58:	.word	0x1fff1ae1
    3b5c:	.word	0x1fff1b0c
    3b60:	.word	0x1fff1adc
    3b64:	.word	0x1fff1b4d
    3b68:	.word	0x1fff1b50
    3b6c:	.word	0x1fff1b4c
    3b70:	.word	0x1fff1b54
    3b74:	.word	0x1fff1ae4

00003b78 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3b78:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3b7a:	ldr	r4, [pc, #64]	; (3bbc <fault_isr+0x44>)
    3b7c:	b.n	3b90 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3b7e:	ldr	r3, [r4, #0]
    3b80:	lsls	r1, r3, #21
    3b82:	bmi.n	3ba0 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3b84:	ldr	r3, [r4, #0]
    3b86:	lsls	r2, r3, #20
    3b88:	bmi.n	3baa <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3b8a:	ldr	r3, [r4, #0]
    3b8c:	lsls	r3, r3, #19
    3b8e:	bmi.n	3bb4 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3b90:	ldr	r3, [r4, #0]
    3b92:	lsls	r0, r3, #13
    3b94:	bpl.n	3b7e <fault_isr+0x6>
    3b96:	bl	2cac <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3b9a:	ldr	r3, [r4, #0]
    3b9c:	lsls	r1, r3, #21
    3b9e:	bpl.n	3b84 <fault_isr+0xc>
    3ba0:	bl	3c8c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3ba4:	ldr	r3, [r4, #0]
    3ba6:	lsls	r2, r3, #20
    3ba8:	bpl.n	3b8a <fault_isr+0x12>
    3baa:	bl	3974 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3bae:	ldr	r3, [r4, #0]
    3bb0:	lsls	r3, r3, #19
    3bb2:	bpl.n	3b90 <fault_isr+0x18>
    3bb4:	bl	3f8c <uart2_status_isr>
    3bb8:	b.n	3b90 <fault_isr+0x18>
    3bba:	nop
    3bbc:	.word	0x40048034

00003bc0 <unused_isr>:
	}
}

void unused_isr(void)
{
    3bc0:	push	{r3, lr}
	fault_isr();
    3bc2:	bl	3b78 <fault_isr>
    3bc6:	nop

00003bc8 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3bc8:	ldr	r3, [pc, #4]	; (3bd0 <startup_early_hook+0x8>)
    3bca:	movs	r2, #16
    3bcc:	strh	r2, [r3, #0]
    3bce:	bx	lr
    3bd0:	.word	0x40052000

00003bd4 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3bd4:	bx	lr
    3bd6:	nop

00003bd8 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3bd8:	ldr	r1, [pc, #36]	; (3c00 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3bda:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3bdc:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3bde:	cbz	r0, 3bee <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3be0:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3be2:	add	r0, r3
    3be4:	sub.w	r2, r2, #8192	; 0x2000
    3be8:	cmp	r0, r2
    3bea:	bcs.n	3bf2 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3bec:	str	r0, [r1, #0]
	}
	return prev;
    3bee:	mov	r0, r3
}
    3bf0:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3bf2:	bl	4260 <__errno>
    3bf6:	movs	r3, #12
    3bf8:	str	r3, [r0, #0]
			return (void *)-1;
    3bfa:	mov.w	r0, #4294967295
    3bfe:	pop	{r3, pc}
    3c00:	.word	0x1fff0c80

00003c04 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3c04:	ldr	r2, [pc, #32]	; (3c28 <kinetis_hsrun_disable+0x24>)
    3c06:	ldrb	r3, [r2, #0]
    3c08:	cmp	r3, #128	; 0x80
    3c0a:	beq.n	3c10 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3c0c:	movs	r0, #0
}
    3c0e:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3c10:	ldr	r1, [pc, #24]	; (3c2c <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3c12:	ldr	r3, [pc, #28]	; (3c30 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3c14:	ldr	r0, [pc, #28]	; (3c34 <kinetis_hsrun_disable+0x30>)
    3c16:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3c18:	movs	r1, #0
    3c1a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3c1c:	ldrb	r3, [r2, #0]
    3c1e:	cmp	r3, #128	; 0x80
    3c20:	beq.n	3c1c <kinetis_hsrun_disable+0x18>
		return 1;
    3c22:	movs	r0, #1
    3c24:	bx	lr
    3c26:	nop
    3c28:	.word	0x4007e003
    3c2c:	.word	0x40048044
    3c30:	.word	0x4007e001
    3c34:	.word	0x22280000

00003c38 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3c38:	ldr	r2, [pc, #36]	; (3c60 <kinetis_hsrun_enable+0x28>)
    3c3a:	ldrb	r3, [r2, #0]
    3c3c:	cmp	r3, #1
    3c3e:	beq.n	3c44 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3c40:	movs	r0, #0
}
    3c42:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3c44:	add.w	r3, r3, #1073741824	; 0x40000000
    3c48:	add.w	r3, r3, #516096	; 0x7e000
    3c4c:	movs	r1, #96	; 0x60
    3c4e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3c50:	ldrb	r3, [r2, #0]
    3c52:	cmp	r3, #128	; 0x80
    3c54:	bne.n	3c50 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3c56:	ldr	r3, [pc, #12]	; (3c64 <kinetis_hsrun_enable+0x2c>)
    3c58:	ldr	r2, [pc, #12]	; (3c68 <kinetis_hsrun_enable+0x30>)
    3c5a:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3c5c:	movs	r0, #1
    3c5e:	bx	lr
    3c60:	.word	0x4007e003
    3c64:	.word	0x40048044
    3c68:	.word	0x02060000

00003c6c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c6c:	ldr	r2, [pc, #20]	; (3c84 <serial_available+0x18>)
	tail = rx_buffer_tail;
    3c6e:	ldr	r3, [pc, #24]	; (3c88 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c70:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3c72:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c74:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3c76:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3c78:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3c7a:	it	cc
    3c7c:	addcc	r0, #64	; 0x40
    3c7e:	subs	r0, r0, r3
}
    3c80:	bx	lr
    3c82:	nop
    3c84:	.word	0x1fff1b5c
    3c88:	.word	0x1fff1b5d

00003c8c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3c8c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3c8e:	ldr	r3, [pc, #224]	; (3d70 <uart0_status_isr+0xe4>)
    3c90:	ldrb	r2, [r3, #4]
    3c92:	tst.w	r2, #48	; 0x30
    3c96:	beq.n	3cf2 <uart0_status_isr+0x66>
		__disable_irq();
    3c98:	cpsid	i
		avail = UART0_RCFIFO;
    3c9a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3c9c:	and.w	r2, r1, #255	; 0xff
    3ca0:	cmp	r1, #0
    3ca2:	beq.n	3d20 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3ca4:	cpsie	i
			head = rx_buffer_head;
    3ca6:	ldr	r7, [pc, #204]	; (3d74 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3ca8:	ldr	r1, [pc, #204]	; (3d78 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3caa:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3cac:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3cae:	ldr	r6, [pc, #204]	; (3d7c <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3cb0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3cb2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3cb4:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3cb6:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3cb8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3cba:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3cbc:	it	cs
    3cbe:	movcs	r3, #0
				if (newhead != tail) {
    3cc0:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3cc2:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3cc6:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3cc8:	itt	ne
    3cca:	strbne	r1, [r6, r3]
    3ccc:	movne	r0, r3
				}
			} while (--avail > 0);
    3cce:	ands.w	r2, r2, #255	; 0xff
    3cd2:	bne.n	3cb6 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3cd4:	ldr	r3, [pc, #168]	; (3d80 <uart0_status_isr+0xf4>)
    3cd6:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3cd8:	uxtb	r2, r0
    3cda:	strb	r2, [r7, #0]
			if (rts_pin) {
    3cdc:	cbz	r3, 3cf2 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3cde:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3ce0:	itet	cc
    3ce2:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3ce6:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3ce8:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3cea:	cmp	r0, #39	; 0x27
    3cec:	itt	gt
    3cee:	movgt	r2, #1
    3cf0:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3cf2:	ldr	r1, [pc, #124]	; (3d70 <uart0_status_isr+0xe4>)
    3cf4:	ldrb	r2, [r1, #3]
    3cf6:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3cf8:	lsls	r5, r2, #24
    3cfa:	bmi.n	3d2a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3cfc:	lsls	r2, r2, #25
    3cfe:	bpl.n	3d1c <uart0_status_isr+0x90>
    3d00:	ldr	r3, [pc, #108]	; (3d70 <uart0_status_isr+0xe4>)
    3d02:	ldrb	r3, [r3, #4]
    3d04:	lsls	r3, r3, #25
    3d06:	bpl.n	3d1c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3d08:	ldr	r3, [pc, #120]	; (3d84 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d0a:	ldr	r1, [pc, #124]	; (3d88 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3d0c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d0e:	movs	r2, #0
    3d10:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3d12:	cbz	r3, 3d16 <uart0_status_isr+0x8a>
    3d14:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3d16:	ldr	r3, [pc, #88]	; (3d70 <uart0_status_isr+0xe4>)
    3d18:	movs	r2, #60	; 0x3c
    3d1a:	strb	r2, [r3, #3]
	}
}
    3d1c:	pop	{r4, r5, r6, r7}
    3d1e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3d20:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3d22:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3d24:	strb	r2, [r3, #17]
			__enable_irq();
    3d26:	cpsie	i
    3d28:	b.n	3cf2 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3d2a:	ldrb	r3, [r1, #4]
    3d2c:	lsls	r4, r3, #24
    3d2e:	bpl.n	3cfc <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3d30:	ldr	r3, [pc, #88]	; (3d8c <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3d32:	ldr	r6, [pc, #92]	; (3d90 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d34:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3d36:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d38:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3d3a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3d3c:	cmp	r4, r3
    3d3e:	beq.n	3d5e <uart0_status_isr+0xd2>
    3d40:	ldr	r5, [pc, #80]	; (3d94 <uart0_status_isr+0x108>)
    3d42:	b.n	3d48 <uart0_status_isr+0xbc>
    3d44:	cmp	r3, r4
    3d46:	beq.n	3d5e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3d48:	adds	r3, #1
    3d4a:	cmp	r3, #64	; 0x40
    3d4c:	it	cs
    3d4e:	movcs	r3, #0
			avail = UART0_S1;
    3d50:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3d52:	ldrb	r0, [r5, r3]
    3d54:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3d56:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3d58:	ldrb	r0, [r1, #20]
    3d5a:	cmp	r0, #7
    3d5c:	bls.n	3d44 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3d5e:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3d60:	ldr	r1, [pc, #12]	; (3d70 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3d62:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3d64:	ldrb	r3, [r1, #4]
    3d66:	lsls	r0, r3, #24
    3d68:	itt	mi
    3d6a:	movmi	r3, #124	; 0x7c
    3d6c:	strbmi	r3, [r1, #3]
    3d6e:	b.n	3cfc <uart0_status_isr+0x70>
    3d70:	.word	0x4006a000
    3d74:	.word	0x1fff1b5c
    3d78:	.word	0x1fff1b5d
    3d7c:	.word	0x1fff1ba0
    3d80:	.word	0x1fff1b58
    3d84:	.word	0x1fff1be4
    3d88:	.word	0x1fff1be0
    3d8c:	.word	0x1fff1be8
    3d90:	.word	0x1fff1be1
    3d94:	.word	0x1fff1b60

00003d98 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d98:	ldr	r2, [pc, #20]	; (3db0 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3d9a:	ldr	r3, [pc, #24]	; (3db4 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d9c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3d9e:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3da0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3da2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3da4:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3da6:	it	cc
    3da8:	addcc	r0, #64	; 0x40
    3daa:	subs	r0, r0, r3
}
    3dac:	bx	lr
    3dae:	nop
    3db0:	.word	0x1fff1bf0
    3db4:	.word	0x1fff1bf1

00003db8 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3db8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3dba:	ldr	r3, [pc, #176]	; (3e6c <lpuart0_status_isr+0xb4>)
    3dbc:	ldr	r2, [r3, #4]
    3dbe:	lsls	r4, r2, #10
    3dc0:	bpl.n	3e02 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3dc2:	ldr	r0, [pc, #172]	; (3e70 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3dc4:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3dc6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3dc8:	ldr	r1, [pc, #168]	; (3e74 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3dca:	adds	r3, #1
    3dcc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3dce:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3dd0:	it	gt
    3dd2:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3dd4:	cmp	r3, r1
    3dd6:	beq.n	3de2 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3dd8:	ldr	r4, [pc, #156]	; (3e78 <lpuart0_status_isr+0xc0>)
    3dda:	uxtb	r2, r2
			rx_buffer_head = head;
    3ddc:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3dde:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3de0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3de2:	ldr	r2, [pc, #152]	; (3e7c <lpuart0_status_isr+0xc4>)
    3de4:	ldr	r1, [r2, #0]
    3de6:	cbz	r1, 3e02 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3de8:	ldr	r2, [pc, #148]	; (3e80 <lpuart0_status_isr+0xc8>)
    3dea:	ldrb	r2, [r2, #0]
    3dec:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3dee:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3df0:	itet	cc
    3df2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3df6:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3df8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3dfa:	cmp	r3, #39	; 0x27
    3dfc:	itt	gt
    3dfe:	movgt	r3, #1
    3e00:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3e02:	ldr	r2, [pc, #104]	; (3e6c <lpuart0_status_isr+0xb4>)
    3e04:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3e06:	lsls	r0, r3, #8
    3e08:	bpl.n	3e10 <lpuart0_status_isr+0x58>
    3e0a:	ldr	r2, [r2, #4]
    3e0c:	lsls	r1, r2, #8
    3e0e:	bmi.n	3e34 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3e10:	lsls	r2, r3, #9
    3e12:	bpl.n	3e30 <lpuart0_status_isr+0x78>
    3e14:	ldr	r3, [pc, #84]	; (3e6c <lpuart0_status_isr+0xb4>)
    3e16:	ldr	r3, [r3, #4]
    3e18:	lsls	r3, r3, #9
    3e1a:	bpl.n	3e30 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3e1c:	ldr	r3, [pc, #100]	; (3e84 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3e1e:	ldr	r1, [pc, #104]	; (3e88 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3e20:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3e22:	movs	r2, #0
    3e24:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3e26:	cbz	r3, 3e2a <lpuart0_status_isr+0x72>
    3e28:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3e2a:	ldr	r3, [pc, #96]	; (3e8c <lpuart0_status_isr+0xd4>)
    3e2c:	movs	r2, #0
    3e2e:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3e30:	pop	{r4, r5}
    3e32:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3e34:	ldr	r2, [pc, #88]	; (3e90 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3e36:	ldr	r1, [pc, #72]	; (3e80 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3e38:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3e3a:	ldrb	r2, [r1, #0]
    3e3c:	uxtb	r2, r2
		if (head == tail) {
    3e3e:	cmp	r0, r2
    3e40:	beq.n	3e5e <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3e42:	adds	r2, #1
    3e44:	cmp	r2, #39	; 0x27
    3e46:	itt	hi
    3e48:	movhi	r0, #0
    3e4a:	movhi	r2, r0
			n = tx_buffer[tail];
    3e4c:	ldr	r5, [pc, #68]	; (3e94 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3e4e:	ldr	r4, [pc, #28]	; (3e6c <lpuart0_status_isr+0xb4>)
    3e50:	it	ls
    3e52:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3e54:	ldrb	r2, [r5, r2]
    3e56:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3e58:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3e5a:	strb	r0, [r1, #0]
    3e5c:	b.n	3e10 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e5e:	ldr	r0, [pc, #56]	; (3e98 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e60:	ldr	r2, [pc, #40]	; (3e8c <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e62:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e64:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e66:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e68:	str	r1, [r2, #0]
    3e6a:	b.n	3e10 <lpuart0_status_isr+0x58>
    3e6c:	.word	0x400c4000
    3e70:	.word	0x1fff1bf0
    3e74:	.word	0x1fff1bf1
    3e78:	.word	0x1fff1c1c
    3e7c:	.word	0x1fff1bec
    3e80:	.word	0x1fff1c5d
    3e84:	.word	0x1fff1c60
    3e88:	.word	0x1fff1c5c
    3e8c:	.word	0x43880158
    3e90:	.word	0x1fff1c64
    3e94:	.word	0x1fff1bf4
    3e98:	.word	0x4388015c

00003e9c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3e9c:	push	{r4, lr}
    3e9e:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3ea0:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3ea2:	bl	3c04 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3ea6:	ldr	r2, [pc, #96]	; (3f08 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3ea8:	ldr	r3, [pc, #96]	; (3f0c <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3eaa:	ldr	r1, [pc, #100]	; (3f10 <usb_init_serialnumber+0x74>)
    3eac:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3eae:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3eb0:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3eb2:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3eb4:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3eb6:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3eb8:	ldrb	r3, [r2, #0]
    3eba:	lsls	r3, r3, #24
    3ebc:	bpl.n	3eb8 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3ebe:	ldr	r3, [pc, #84]	; (3f14 <usb_init_serialnumber+0x78>)
    3ec0:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3ec2:	bl	3c38 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3ec6:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3ec8:	ldr	r3, [pc, #76]	; (3f18 <usb_init_serialnumber+0x7c>)
    3eca:	cmp	r4, r3
    3ecc:	itt	ls
    3ece:	addls.w	r4, r4, r4, lsl #2
    3ed2:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3ed4:	mov	r0, r4
    3ed6:	ldr	r4, [pc, #68]	; (3f1c <usb_init_serialnumber+0x80>)
    3ed8:	add	r1, sp, #4
    3eda:	movs	r2, #10
    3edc:	bl	3f20 <ultoa>
    3ee0:	add	r1, sp, #4
    3ee2:	mov	r0, r4
	for (i=0; i<10; i++) {
    3ee4:	movs	r3, #0
		char c = buf[i];
    3ee6:	ldrb.w	r2, [r1], #1
    3eea:	adds	r3, #1
		if (!c) break;
    3eec:	cbz	r2, 3efe <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3eee:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3ef0:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3ef4:	bne.n	3ee6 <usb_init_serialnumber+0x4a>
    3ef6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3ef8:	strb	r3, [r4, #0]
}
    3efa:	add	sp, #16
    3efc:	pop	{r4, pc}
    3efe:	lsls	r3, r3, #1
    3f00:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3f02:	strb	r3, [r4, #0]
}
    3f04:	add	sp, #16
    3f06:	pop	{r4, pc}
    3f08:	.word	0x40020004
    3f0c:	.word	0x40020000
    3f10:	.word	0x41070000
    3f14:	.word	0x4002000c
    3f18:	.word	0x0098967f
    3f1c:	.word	0x1fff0d64

00003f20 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3f20:	push	{r4, r5, r6, r7}
    3f22:	subs	r5, r1, #1
    3f24:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3f26:	movs	r4, #0
    3f28:	b.n	3f2c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3f2a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3f2c:	udiv	r3, r0, r2
    3f30:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3f34:	cmp	r0, #9
    3f36:	add.w	r7, r0, #48	; 0x30
    3f3a:	itet	hi
    3f3c:	addhi	r0, #55	; 0x37
    3f3e:	uxtbls	r0, r7
    3f40:	uxtbhi	r0, r0
    3f42:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3f46:	mov	r0, r3
    3f48:	cmp	r3, #0
    3f4a:	bne.n	3f2a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3f4c:	adds	r2, r1, r4
    3f4e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3f50:	cbz	r4, 3f66 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3f52:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3f54:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3f58:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f5a:	adds	r3, #1
    3f5c:	subs	r0, r4, r3
    3f5e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3f60:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f64:	blt.n	3f52 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3f66:	mov	r0, r1
    3f68:	pop	{r4, r5, r6, r7}
    3f6a:	bx	lr

00003f6c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f6c:	ldr	r2, [pc, #20]	; (3f84 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3f6e:	ldr	r3, [pc, #24]	; (3f88 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f70:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3f72:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f74:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3f76:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3f78:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3f7a:	it	cc
    3f7c:	addcc	r0, #64	; 0x40
    3f7e:	subs	r0, r0, r3
}
    3f80:	bx	lr
    3f82:	nop
    3f84:	.word	0x1fff1c6c
    3f88:	.word	0x1fff1c6d

00003f8c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3f8c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3f8e:	ldr	r3, [pc, #172]	; (403c <uart2_status_isr+0xb0>)
    3f90:	ldrb	r2, [r3, #4]
    3f92:	lsls	r4, r2, #26
    3f94:	bpl.n	3fd6 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3f96:	ldr	r0, [pc, #168]	; (4040 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3f98:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3f9a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f9c:	ldr	r1, [pc, #164]	; (4044 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3f9e:	adds	r3, #1
    3fa0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fa2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3fa4:	it	gt
    3fa6:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fa8:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3faa:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fac:	beq.n	3fb6 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3fae:	ldr	r4, [pc, #152]	; (4048 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3fb0:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3fb2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3fb4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3fb6:	ldr	r2, [pc, #148]	; (404c <uart2_status_isr+0xc0>)
    3fb8:	ldr	r1, [r2, #0]
    3fba:	cbz	r1, 3fd6 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3fbc:	ldr	r2, [pc, #144]	; (4050 <uart2_status_isr+0xc4>)
    3fbe:	ldrb	r2, [r2, #0]
    3fc0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3fc2:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3fc4:	itet	cc
    3fc6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3fca:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3fcc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3fce:	cmp	r3, #39	; 0x27
    3fd0:	itt	gt
    3fd2:	movgt	r3, #1
    3fd4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3fd6:	ldr	r2, [pc, #100]	; (403c <uart2_status_isr+0xb0>)
    3fd8:	ldrb	r3, [r2, #3]
    3fda:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3fdc:	lsls	r0, r3, #24
    3fde:	bmi.n	4004 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3fe0:	lsls	r2, r3, #25
    3fe2:	bpl.n	4000 <uart2_status_isr+0x74>
    3fe4:	ldr	r3, [pc, #84]	; (403c <uart2_status_isr+0xb0>)
    3fe6:	ldrb	r3, [r3, #4]
    3fe8:	lsls	r3, r3, #25
    3fea:	bpl.n	4000 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3fec:	ldr	r3, [pc, #100]	; (4054 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3fee:	ldr	r1, [pc, #104]	; (4058 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3ff0:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ff2:	movs	r2, #0
    3ff4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3ff6:	cbz	r3, 3ffa <uart2_status_isr+0x6e>
    3ff8:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3ffa:	ldr	r3, [pc, #64]	; (403c <uart2_status_isr+0xb0>)
    3ffc:	movs	r2, #44	; 0x2c
    3ffe:	strb	r2, [r3, #3]
	}
}
    4000:	pop	{r4, r5}
    4002:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4004:	ldrb	r1, [r2, #4]
    4006:	lsls	r1, r1, #24
    4008:	bpl.n	3fe0 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    400a:	ldr	r1, [pc, #80]	; (405c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    400c:	ldr	r0, [pc, #64]	; (4050 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    400e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4010:	ldrb	r1, [r0, #0]
    4012:	uxtb	r1, r1
		if (head == tail) {
    4014:	cmp	r4, r1
    4016:	beq.n	4034 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4018:	adds	r2, r1, #1
    401a:	cmp	r2, #39	; 0x27
    401c:	itt	hi
    401e:	movhi	r1, #0
    4020:	movhi	r2, r1
			n = tx_buffer[tail];
    4022:	ldr	r5, [pc, #60]	; (4060 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4024:	ldr	r4, [pc, #20]	; (403c <uart2_status_isr+0xb0>)
    4026:	it	ls
    4028:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    402a:	ldrb	r2, [r5, r2]
    402c:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    402e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4030:	strb	r1, [r0, #0]
    4032:	b.n	3fe0 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4034:	movs	r1, #108	; 0x6c
    4036:	strb	r1, [r2, #3]
    4038:	b.n	3fe0 <uart2_status_isr+0x54>
    403a:	nop
    403c:	.word	0x4006c000
    4040:	.word	0x1fff1c6c
    4044:	.word	0x1fff1c6d
    4048:	.word	0x1fff1c98
    404c:	.word	0x1fff1c68
    4050:	.word	0x1fff1cd9
    4054:	.word	0x1fff1cdc
    4058:	.word	0x1fff1cd8
    405c:	.word	0x1fff1ce0
    4060:	.word	0x1fff1c70

00004064 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4064:	bx	lr
    4066:	nop

00004068 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4068:	bx	lr
    406a:	nop

0000406c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    406c:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    406e:	mrs	r2, PRIMASK
		__disable_irq();
    4072:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4074:	ldrb	r3, [r0, #29]
    4076:	cbnz	r3, 4086 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4078:	ldrb	r1, [r0, #28]
    407a:	cmp	r1, #1
    407c:	beq.n	4090 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    407e:	cmp	r1, #3
    4080:	beq.n	40a4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4082:	movs	r3, #1
    4084:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4086:	cbnz	r2, 408a <EventResponder::triggerEventNotImmediate()+0x1e>
    4088:	cpsie	i
	}
	enableInterrupts(irq);
}
    408a:	ldr.w	r4, [sp], #4
    408e:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4090:	ldr	r4, [pc, #68]	; (40d8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4092:	ldr	r1, [r4, #0]
    4094:	cbz	r1, 40c0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4096:	ldr	r1, [pc, #68]	; (40dc <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4098:	str	r3, [r0, #20]
				_prev = lastYield;
    409a:	ldr	r3, [r1, #0]
    409c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    409e:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    40a0:	str	r0, [r3, #20]
    40a2:	b.n	4082 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    40a4:	ldr	r4, [pc, #56]	; (40e0 <EventResponder::triggerEventNotImmediate()+0x74>)
    40a6:	ldr	r1, [r4, #0]
    40a8:	cbz	r1, 40cc <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    40aa:	ldr	r1, [pc, #56]	; (40e4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    40ac:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    40ae:	ldr	r3, [r1, #0]
    40b0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    40b2:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    40b4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    40b6:	ldr	r3, [pc, #48]	; (40e8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    40b8:	mov.w	r1, #268435456	; 0x10000000
    40bc:	str	r1, [r3, #0]
    40be:	b.n	4082 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    40c0:	ldr	r3, [pc, #24]	; (40dc <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    40c2:	str	r1, [r0, #20]
				_prev = nullptr;
    40c4:	str	r1, [r0, #24]
				firstYield = this;
    40c6:	str	r0, [r4, #0]
				lastYield = this;
    40c8:	str	r0, [r3, #0]
    40ca:	b.n	4082 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    40cc:	ldr	r3, [pc, #20]	; (40e4 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    40ce:	str	r1, [r0, #20]
				_prev = nullptr;
    40d0:	str	r1, [r0, #24]
				firstInterrupt = this;
    40d2:	str	r0, [r4, #0]
				lastInterrupt = this;
    40d4:	str	r0, [r3, #0]
    40d6:	b.n	40b6 <EventResponder::triggerEventNotImmediate()+0x4a>
    40d8:	.word	0x1fff1cf4
    40dc:	.word	0x1fff1cf0
    40e0:	.word	0x1fff1ce4
    40e4:	.word	0x1fff1ce8
    40e8:	.word	0xe000ed04

000040ec <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    40ec:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    40ee:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    40f0:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    40f2:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    40f4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    40f6:	beq.n	4100 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    40f8:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    40fc:	b.w	406c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4100:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4102:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4106:	bx	r3

00004108 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4108:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    410a:	mrs	r2, PRIMASK
		__disable_irq();
    410e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4110:	ldr	r4, [pc, #48]	; (4144 <EventResponder::runFromInterrupt()+0x3c>)
    4112:	ldr	r0, [r4, #0]
		if (first) {
    4114:	cbz	r0, 4138 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4116:	ldr	r6, [pc, #48]	; (4148 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4118:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    411a:	ldr	r3, [r0, #20]
    411c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    411e:	cbz	r3, 413e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4120:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4122:	cbnz	r2, 4126 <EventResponder::runFromInterrupt()+0x1e>
    4124:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4126:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4128:	ldr	r3, [r0, #8]
    412a:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    412c:	mrs	r2, PRIMASK
		__disable_irq();
    4130:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4132:	ldr	r0, [r4, #0]
		if (first) {
    4134:	cmp	r0, #0
    4136:	bne.n	411a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4138:	cbnz	r2, 413c <EventResponder::runFromInterrupt()+0x34>
    413a:	cpsie	i
    413c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    413e:	str	r3, [r6, #0]
    4140:	b.n	4122 <EventResponder::runFromInterrupt()+0x1a>
    4142:	nop
    4144:	.word	0x1fff1ce4
    4148:	.word	0x1fff1ce8

0000414c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    414c:	b.w	4108 <EventResponder::runFromInterrupt()>

00004150 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4150:	ldr	r2, [pc, #96]	; (41b4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4152:	push	{r4, r5}
	if (listActive == nullptr) {
    4154:	ldr	r4, [r2, #0]
    4156:	cmp	r4, #0
    4158:	beq.n	41aa <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    415a:	ldr	r3, [r0, #0]
    415c:	ldr	r1, [r4, #0]
    415e:	cmp	r3, r1
    4160:	bcs.n	4180 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4162:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4164:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4166:	str	r4, [r0, #8]
		_prev = nullptr;
    4168:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    416a:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    416c:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    416e:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4170:	movs	r3, #2
    4172:	strb	r3, [r0, #20]
}
    4174:	pop	{r4, r5}
    4176:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4178:	ldr	r1, [r2, #0]
    417a:	cmp	r3, r1
    417c:	mov	r4, r2
    417e:	bcc.n	4192 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4180:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4182:	subs	r3, r3, r1
    4184:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4186:	cmp	r2, #0
    4188:	bne.n	4178 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    418a:	str	r2, [r0, #8]
		_prev = timer;
    418c:	str	r4, [r0, #12]
		timer->_next = this;
    418e:	str	r0, [r4, #8]
    4190:	b.n	4170 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4192:	ldr	r2, [r2, #12]
    4194:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4196:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4198:	str	r0, [r4, #12]
				_prev->_next = this;
    419a:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    419c:	subs	r3, r1, r3
				_state = TimerActive;
    419e:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    41a0:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    41a2:	str	r3, [r4, #0]
				_state = TimerActive;
    41a4:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    41a6:	pop	{r4, r5}
    41a8:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    41aa:	str	r4, [r0, #8]
		_prev = nullptr;
    41ac:	str	r4, [r0, #12]
		listActive = this;
    41ae:	str	r0, [r2, #0]
    41b0:	b.n	4170 <MillisTimer::addToActiveList()+0x20>
    41b2:	nop
    41b4:	.word	0x1fff1cec

000041b8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    41b8:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    41ba:	ldr	r6, [pc, #136]	; (4244 <MillisTimer::runFromTimer()+0x8c>)
    41bc:	ldr	r4, [r6, #0]
	while (timer) {
    41be:	cbz	r4, 420c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    41c0:	ldr	r3, [r4, #0]
    41c2:	cmp	r3, #0
    41c4:	bne.n	423c <MillisTimer::runFromTimer()+0x84>
    41c6:	ldr	r7, [pc, #128]	; (4248 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    41c8:	mov	r5, r3
    41ca:	b.n	41d6 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    41cc:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    41ce:	cbz	r4, 420c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    41d0:	ldr	r3, [r4, #0]
    41d2:	cmp	r3, #0
    41d4:	bne.n	423c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    41d6:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    41d8:	cbz	r3, 41dc <MillisTimer::runFromTimer()+0x24>
    41da:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    41dc:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    41de:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    41e0:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    41e2:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    41e4:	ldr	r3, [r3, #0]
    41e6:	cmp	r3, r7
    41e8:	bne.n	422e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    41ea:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    41ec:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    41ee:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    41f0:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    41f2:	beq.n	4236 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    41f4:	bl	406c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    41f8:	ldr	r3, [r4, #4]
    41fa:	cmp	r3, #0
    41fc:	beq.n	41cc <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    41fe:	str	r3, [r4, #0]
				timer->addToActiveList();
    4200:	mov	r0, r4
    4202:	bl	4150 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4206:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4208:	cmp	r4, #0
    420a:	bne.n	41d0 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    420c:	mrs	r3, PRIMASK
		__disable_irq();
    4210:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4212:	ldr	r2, [pc, #56]	; (424c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4214:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4216:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4218:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    421a:	cbnz	r3, 421e <MillisTimer::runFromTimer()+0x66>
    421c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    421e:	cbz	r0, 422c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4220:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4222:	bl	4150 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4226:	mov	r0, r4
    4228:	cmp	r0, #0
    422a:	bne.n	4220 <MillisTimer::runFromTimer()+0x68>
    422c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    422e:	mov	r2, r4
    4230:	movs	r1, #0
    4232:	blx	r3
    4234:	b.n	41f8 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4236:	ldr	r3, [r0, #8]
    4238:	blx	r3
    423a:	b.n	41f8 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    423c:	subs	r3, #1
    423e:	str	r3, [r4, #0]
			break;
    4240:	b.n	420c <MillisTimer::runFromTimer()+0x54>
    4242:	nop
    4244:	.word	0x1fff1cec
    4248:	.word	0x000040ed
    424c:	.word	0x1fff1cfc

00004250 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4250:	ldr	r2, [pc, #8]	; (425c <systick_isr+0xc>)
    4252:	ldr	r3, [r2, #0]
    4254:	adds	r3, #1
    4256:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4258:	b.w	41b8 <MillisTimer::runFromTimer()>
    425c:	.word	0x1fff1884

00004260 <__errno>:
    4260:	ldr	r3, [pc, #4]	; (4268 <__errno+0x8>)
    4262:	ldr	r0, [r3, #0]
    4264:	bx	lr
    4266:	nop
    4268:	.word	0x1fff11a8

0000426c <__libc_init_array>:
    426c:	push	{r4, r5, r6, lr}
    426e:	ldr	r6, [pc, #60]	; (42ac <__libc_init_array+0x40>)
    4270:	ldr	r5, [pc, #60]	; (42b0 <__libc_init_array+0x44>)
    4272:	subs	r6, r6, r5
    4274:	asrs	r6, r6, #2
    4276:	it	ne
    4278:	movne	r4, #0
    427a:	beq.n	4288 <__libc_init_array+0x1c>
    427c:	adds	r4, #1
    427e:	ldr.w	r3, [r5], #4
    4282:	blx	r3
    4284:	cmp	r6, r4
    4286:	bne.n	427c <__libc_init_array+0x10>
    4288:	ldr	r6, [pc, #40]	; (42b4 <__libc_init_array+0x48>)
    428a:	ldr	r5, [pc, #44]	; (42b8 <__libc_init_array+0x4c>)
    428c:	subs	r6, r6, r5
    428e:	bl	4ee0 <_init>
    4292:	asrs	r6, r6, #2
    4294:	it	ne
    4296:	movne	r4, #0
    4298:	beq.n	42a8 <__libc_init_array+0x3c>
    429a:	adds	r4, #1
    429c:	ldr.w	r3, [r5], #4
    42a0:	blx	r3
    42a2:	cmp	r6, r4
    42a4:	bne.n	429a <__libc_init_array+0x2e>
    42a6:	pop	{r4, r5, r6, pc}
    42a8:	pop	{r4, r5, r6, pc}
    42aa:	nop
    42ac:	.word	0x00004eec
    42b0:	.word	0x00004eec
    42b4:	.word	0x00004ef8
    42b8:	.word	0x00004eec

000042bc <malloc>:
    42bc:	ldr	r3, [pc, #8]	; (42c8 <malloc+0xc>)
    42be:	mov	r1, r0
    42c0:	ldr	r0, [r3, #0]
    42c2:	b.w	42cc <_malloc_r>
    42c6:	nop
    42c8:	.word	0x1fff11a8

000042cc <_malloc_r>:
    42cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42d0:	add.w	r5, r1, #11
    42d4:	cmp	r5, #22
    42d6:	sub	sp, #12
    42d8:	mov	r6, r0
    42da:	bls.w	441c <_malloc_r+0x150>
    42de:	bics.w	r5, r5, #7
    42e2:	bmi.w	4464 <_malloc_r+0x198>
    42e6:	cmp	r1, r5
    42e8:	bhi.w	4464 <_malloc_r+0x198>
    42ec:	bl	483c <__malloc_lock>
    42f0:	cmp.w	r5, #504	; 0x1f8
    42f4:	bcc.w	4830 <_malloc_r+0x564>
    42f8:	lsrs	r3, r5, #9
    42fa:	beq.w	4472 <_malloc_r+0x1a6>
    42fe:	cmp	r3, #4
    4300:	bhi.w	460a <_malloc_r+0x33e>
    4304:	lsrs	r0, r5, #6
    4306:	add.w	lr, r0, #57	; 0x39
    430a:	mov.w	r3, lr, lsl #1
    430e:	adds	r0, #56	; 0x38
    4310:	ldr	r7, [pc, #784]	; (4624 <_malloc_r+0x358>)
    4312:	add.w	r3, r7, r3, lsl #2
    4316:	sub.w	r1, r3, #8
    431a:	ldr	r4, [r3, #4]
    431c:	cmp	r1, r4
    431e:	bne.n	4330 <_malloc_r+0x64>
    4320:	b.n	447c <_malloc_r+0x1b0>
    4322:	cmp	r2, #0
    4324:	bge.w	4480 <_malloc_r+0x1b4>
    4328:	ldr	r4, [r4, #12]
    432a:	cmp	r1, r4
    432c:	beq.w	447c <_malloc_r+0x1b0>
    4330:	ldr	r3, [r4, #4]
    4332:	bic.w	r3, r3, #3
    4336:	subs	r2, r3, r5
    4338:	cmp	r2, #15
    433a:	ble.n	4322 <_malloc_r+0x56>
    433c:	ldr	r1, [pc, #740]	; (4624 <_malloc_r+0x358>)
    433e:	ldr	r4, [r7, #16]
    4340:	add.w	lr, r1, #8
    4344:	cmp	r4, lr
    4346:	beq.w	46b0 <_malloc_r+0x3e4>
    434a:	ldr	r3, [r4, #4]
    434c:	bic.w	r3, r3, #3
    4350:	subs	r2, r3, r5
    4352:	cmp	r2, #15
    4354:	bgt.w	468a <_malloc_r+0x3be>
    4358:	cmp	r2, #0
    435a:	str.w	lr, [r1, #20]
    435e:	str.w	lr, [r1, #16]
    4362:	bge.w	44a2 <_malloc_r+0x1d6>
    4366:	cmp.w	r3, #512	; 0x200
    436a:	bcs.w	463c <_malloc_r+0x370>
    436e:	lsrs	r3, r3, #3
    4370:	add.w	ip, r3, #1
    4374:	movs	r2, #1
    4376:	asrs	r3, r3, #2
    4378:	lsl.w	r3, r2, r3
    437c:	ldr	r2, [r1, #4]
    437e:	ldr.w	r8, [r1, ip, lsl #3]
    4382:	str.w	r8, [r4, #8]
    4386:	add.w	r9, r1, ip, lsl #3
    438a:	orrs	r2, r3
    438c:	sub.w	r3, r9, #8
    4390:	str	r3, [r4, #12]
    4392:	str	r2, [r1, #4]
    4394:	str.w	r4, [r1, ip, lsl #3]
    4398:	str.w	r4, [r8, #12]
    439c:	asrs	r3, r0, #2
    439e:	movs	r4, #1
    43a0:	lsls	r4, r3
    43a2:	cmp	r4, r2
    43a4:	bhi.w	44bc <_malloc_r+0x1f0>
    43a8:	tst	r4, r2
    43aa:	bne.n	43ba <_malloc_r+0xee>
    43ac:	bic.w	r0, r0, #3
    43b0:	lsls	r4, r4, #1
    43b2:	tst	r4, r2
    43b4:	add.w	r0, r0, #4
    43b8:	beq.n	43b0 <_malloc_r+0xe4>
    43ba:	add.w	r9, r7, r0, lsl #3
    43be:	mov	ip, r9
    43c0:	mov	r8, r0
    43c2:	ldr.w	r1, [ip, #12]
    43c6:	cmp	ip, r1
    43c8:	bne.n	43da <_malloc_r+0x10e>
    43ca:	b.n	46b4 <_malloc_r+0x3e8>
    43cc:	cmp	r2, #0
    43ce:	bge.w	46d4 <_malloc_r+0x408>
    43d2:	ldr	r1, [r1, #12]
    43d4:	cmp	ip, r1
    43d6:	beq.w	46b4 <_malloc_r+0x3e8>
    43da:	ldr	r3, [r1, #4]
    43dc:	bic.w	r3, r3, #3
    43e0:	subs	r2, r3, r5
    43e2:	cmp	r2, #15
    43e4:	ble.n	43cc <_malloc_r+0x100>
    43e6:	mov	r4, r1
    43e8:	ldr.w	ip, [r1, #12]
    43ec:	ldr.w	r8, [r4, #8]!
    43f0:	adds	r3, r1, r5
    43f2:	orr.w	r5, r5, #1
    43f6:	str	r5, [r1, #4]
    43f8:	orr.w	r1, r2, #1
    43fc:	str.w	ip, [r8, #12]
    4400:	mov	r0, r6
    4402:	str.w	r8, [ip, #8]
    4406:	str	r3, [r7, #20]
    4408:	str	r3, [r7, #16]
    440a:	str.w	lr, [r3, #12]
    440e:	str.w	lr, [r3, #8]
    4412:	str	r1, [r3, #4]
    4414:	str	r2, [r3, r2]
    4416:	bl	4840 <__malloc_unlock>
    441a:	b.n	445c <_malloc_r+0x190>
    441c:	cmp	r1, #16
    441e:	bhi.n	4464 <_malloc_r+0x198>
    4420:	bl	483c <__malloc_lock>
    4424:	movs	r5, #16
    4426:	movs	r3, #6
    4428:	movs	r0, #2
    442a:	ldr	r7, [pc, #504]	; (4624 <_malloc_r+0x358>)
    442c:	add.w	r3, r7, r3, lsl #2
    4430:	sub.w	r2, r3, #8
    4434:	ldr	r4, [r3, #4]
    4436:	cmp	r4, r2
    4438:	beq.w	46c6 <_malloc_r+0x3fa>
    443c:	ldr	r3, [r4, #4]
    443e:	ldr	r1, [r4, #12]
    4440:	ldr	r5, [r4, #8]
    4442:	bic.w	r3, r3, #3
    4446:	add	r3, r4
    4448:	mov	r0, r6
    444a:	ldr	r2, [r3, #4]
    444c:	str	r1, [r5, #12]
    444e:	orr.w	r2, r2, #1
    4452:	str	r5, [r1, #8]
    4454:	str	r2, [r3, #4]
    4456:	bl	4840 <__malloc_unlock>
    445a:	adds	r4, #8
    445c:	mov	r0, r4
    445e:	add	sp, #12
    4460:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4464:	movs	r4, #0
    4466:	movs	r3, #12
    4468:	mov	r0, r4
    446a:	str	r3, [r6, #0]
    446c:	add	sp, #12
    446e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4472:	movs	r3, #128	; 0x80
    4474:	mov.w	lr, #64	; 0x40
    4478:	movs	r0, #63	; 0x3f
    447a:	b.n	4310 <_malloc_r+0x44>
    447c:	mov	r0, lr
    447e:	b.n	433c <_malloc_r+0x70>
    4480:	add	r3, r4
    4482:	ldr	r1, [r4, #12]
    4484:	ldr	r2, [r3, #4]
    4486:	ldr	r5, [r4, #8]
    4488:	orr.w	r2, r2, #1
    448c:	str	r1, [r5, #12]
    448e:	mov	r0, r6
    4490:	str	r5, [r1, #8]
    4492:	str	r2, [r3, #4]
    4494:	bl	4840 <__malloc_unlock>
    4498:	adds	r4, #8
    449a:	mov	r0, r4
    449c:	add	sp, #12
    449e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44a2:	add	r3, r4
    44a4:	mov	r0, r6
    44a6:	ldr	r2, [r3, #4]
    44a8:	orr.w	r2, r2, #1
    44ac:	str	r2, [r3, #4]
    44ae:	bl	4840 <__malloc_unlock>
    44b2:	adds	r4, #8
    44b4:	mov	r0, r4
    44b6:	add	sp, #12
    44b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44bc:	ldr	r4, [r7, #8]
    44be:	ldr	r3, [r4, #4]
    44c0:	bic.w	r8, r3, #3
    44c4:	cmp	r8, r5
    44c6:	bcc.n	44d2 <_malloc_r+0x206>
    44c8:	rsb	r3, r5, r8
    44cc:	cmp	r3, #15
    44ce:	bgt.w	45ea <_malloc_r+0x31e>
    44d2:	ldr	r3, [pc, #340]	; (4628 <_malloc_r+0x35c>)
    44d4:	ldr.w	r9, [pc, #352]	; 4638 <_malloc_r+0x36c>
    44d8:	ldr	r2, [r3, #0]
    44da:	ldr.w	r3, [r9]
    44de:	adds	r3, #1
    44e0:	add	r2, r5
    44e2:	add.w	sl, r4, r8
    44e6:	beq.w	47aa <_malloc_r+0x4de>
    44ea:	add.w	r2, r2, #4096	; 0x1000
    44ee:	adds	r2, #15
    44f0:	bic.w	r2, r2, #4080	; 0xff0
    44f4:	bic.w	r2, r2, #15
    44f8:	mov	r1, r2
    44fa:	mov	r0, r6
    44fc:	str	r2, [sp, #4]
    44fe:	bl	4844 <_sbrk_r>
    4502:	cmp.w	r0, #4294967295
    4506:	mov	fp, r0
    4508:	ldr	r2, [sp, #4]
    450a:	beq.w	47be <_malloc_r+0x4f2>
    450e:	cmp	sl, r0
    4510:	bhi.w	470c <_malloc_r+0x440>
    4514:	ldr	r3, [pc, #276]	; (462c <_malloc_r+0x360>)
    4516:	ldr	r1, [r3, #0]
    4518:	cmp	sl, fp
    451a:	add	r1, r2
    451c:	str	r1, [r3, #0]
    451e:	beq.w	47c8 <_malloc_r+0x4fc>
    4522:	ldr.w	r0, [r9]
    4526:	ldr.w	lr, [pc, #272]	; 4638 <_malloc_r+0x36c>
    452a:	adds	r0, #1
    452c:	ittet	ne
    452e:	rsbne	sl, sl, fp
    4532:	addne	r1, sl
    4534:	streq.w	fp, [lr]
    4538:	strne	r1, [r3, #0]
    453a:	ands.w	r1, fp, #7
    453e:	beq.w	4770 <_malloc_r+0x4a4>
    4542:	rsb	r0, r1, #8
    4546:	rsb	r1, r1, #4096	; 0x1000
    454a:	add	fp, r0
    454c:	adds	r1, #8
    454e:	add	r2, fp
    4550:	ubfx	r2, r2, #0, #12
    4554:	rsb	r9, r2, r1
    4558:	mov	r1, r9
    455a:	mov	r0, r6
    455c:	str	r3, [sp, #4]
    455e:	bl	4844 <_sbrk_r>
    4562:	adds	r3, r0, #1
    4564:	ldr	r3, [sp, #4]
    4566:	beq.w	47e8 <_malloc_r+0x51c>
    456a:	rsb	r2, fp, r0
    456e:	add	r2, r9
    4570:	orr.w	r2, r2, #1
    4574:	ldr	r1, [r3, #0]
    4576:	str.w	fp, [r7, #8]
    457a:	add	r1, r9
    457c:	cmp	r4, r7
    457e:	str.w	r2, [fp, #4]
    4582:	str	r1, [r3, #0]
    4584:	ldr.w	r9, [pc, #164]	; 462c <_malloc_r+0x360>
    4588:	beq.n	45b8 <_malloc_r+0x2ec>
    458a:	cmp.w	r8, #15
    458e:	bls.w	478c <_malloc_r+0x4c0>
    4592:	ldr	r2, [r4, #4]
    4594:	sub.w	r3, r8, #12
    4598:	bic.w	r3, r3, #7
    459c:	adds	r0, r4, r3
    459e:	and.w	r2, r2, #1
    45a2:	mov.w	lr, #5
    45a6:	orrs	r2, r3
    45a8:	cmp	r3, #15
    45aa:	str	r2, [r4, #4]
    45ac:	str.w	lr, [r0, #4]
    45b0:	str.w	lr, [r0, #8]
    45b4:	bhi.w	47f0 <_malloc_r+0x524>
    45b8:	ldr	r3, [pc, #116]	; (4630 <_malloc_r+0x364>)
    45ba:	ldr	r4, [r7, #8]
    45bc:	ldr	r2, [r3, #0]
    45be:	cmp	r1, r2
    45c0:	it	hi
    45c2:	strhi	r1, [r3, #0]
    45c4:	ldr	r3, [pc, #108]	; (4634 <_malloc_r+0x368>)
    45c6:	ldr	r2, [r3, #0]
    45c8:	cmp	r1, r2
    45ca:	ldr	r2, [r4, #4]
    45cc:	it	hi
    45ce:	strhi	r1, [r3, #0]
    45d0:	bic.w	r2, r2, #3
    45d4:	cmp	r5, r2
    45d6:	sub.w	r3, r2, r5
    45da:	bhi.n	45e0 <_malloc_r+0x314>
    45dc:	cmp	r3, #15
    45de:	bgt.n	45ea <_malloc_r+0x31e>
    45e0:	mov	r0, r6
    45e2:	bl	4840 <__malloc_unlock>
    45e6:	movs	r4, #0
    45e8:	b.n	445c <_malloc_r+0x190>
    45ea:	adds	r2, r4, r5
    45ec:	orr.w	r3, r3, #1
    45f0:	orr.w	r5, r5, #1
    45f4:	str	r5, [r4, #4]
    45f6:	mov	r0, r6
    45f8:	str	r2, [r7, #8]
    45fa:	str	r3, [r2, #4]
    45fc:	bl	4840 <__malloc_unlock>
    4600:	adds	r4, #8
    4602:	mov	r0, r4
    4604:	add	sp, #12
    4606:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    460a:	cmp	r3, #20
    460c:	bls.n	46f2 <_malloc_r+0x426>
    460e:	cmp	r3, #84	; 0x54
    4610:	bhi.w	475c <_malloc_r+0x490>
    4614:	lsrs	r0, r5, #12
    4616:	add.w	lr, r0, #111	; 0x6f
    461a:	mov.w	r3, lr, lsl #1
    461e:	adds	r0, #110	; 0x6e
    4620:	b.n	4310 <_malloc_r+0x44>
    4622:	nop
    4624:	.word	0x1fff11ac
    4628:	.word	0x1fff1d08
    462c:	.word	0x1fff1d0c
    4630:	.word	0x1fff1d04
    4634:	.word	0x1fff1d00
    4638:	.word	0x1fff15b8
    463c:	lsrs	r2, r3, #9
    463e:	cmp	r2, #4
    4640:	bls.n	4700 <_malloc_r+0x434>
    4642:	cmp	r2, #20
    4644:	bhi.w	47ae <_malloc_r+0x4e2>
    4648:	add.w	r1, r2, #92	; 0x5c
    464c:	lsls	r1, r1, #1
    464e:	adds	r2, #91	; 0x5b
    4650:	add.w	ip, r7, r1, lsl #2
    4654:	ldr.w	r1, [r7, r1, lsl #2]
    4658:	ldr.w	r8, [pc, #476]	; 4838 <_malloc_r+0x56c>
    465c:	sub.w	ip, ip, #8
    4660:	cmp	ip, r1
    4662:	beq.w	4776 <_malloc_r+0x4aa>
    4666:	ldr	r2, [r1, #4]
    4668:	bic.w	r2, r2, #3
    466c:	cmp	r3, r2
    466e:	bcs.n	4676 <_malloc_r+0x3aa>
    4670:	ldr	r1, [r1, #8]
    4672:	cmp	ip, r1
    4674:	bne.n	4666 <_malloc_r+0x39a>
    4676:	ldr.w	ip, [r1, #12]
    467a:	ldr	r2, [r7, #4]
    467c:	str.w	ip, [r4, #12]
    4680:	str	r1, [r4, #8]
    4682:	str.w	r4, [ip, #8]
    4686:	str	r4, [r1, #12]
    4688:	b.n	439c <_malloc_r+0xd0>
    468a:	adds	r3, r4, r5
    468c:	orr.w	r7, r2, #1
    4690:	orr.w	r5, r5, #1
    4694:	str	r5, [r4, #4]
    4696:	mov	r0, r6
    4698:	str	r3, [r1, #20]
    469a:	str	r3, [r1, #16]
    469c:	str.w	lr, [r3, #12]
    46a0:	str.w	lr, [r3, #8]
    46a4:	str	r7, [r3, #4]
    46a6:	str	r2, [r3, r2]
    46a8:	adds	r4, #8
    46aa:	bl	4840 <__malloc_unlock>
    46ae:	b.n	445c <_malloc_r+0x190>
    46b0:	ldr	r2, [r1, #4]
    46b2:	b.n	439c <_malloc_r+0xd0>
    46b4:	add.w	r8, r8, #1
    46b8:	tst.w	r8, #3
    46bc:	add.w	ip, ip, #8
    46c0:	bne.w	43c2 <_malloc_r+0xf6>
    46c4:	b.n	4728 <_malloc_r+0x45c>
    46c6:	ldr	r4, [r3, #12]
    46c8:	cmp	r3, r4
    46ca:	it	eq
    46cc:	addeq	r0, #2
    46ce:	beq.w	433c <_malloc_r+0x70>
    46d2:	b.n	443c <_malloc_r+0x170>
    46d4:	add	r3, r1
    46d6:	mov	r4, r1
    46d8:	ldr	r2, [r3, #4]
    46da:	ldr	r1, [r1, #12]
    46dc:	ldr.w	r5, [r4, #8]!
    46e0:	orr.w	r2, r2, #1
    46e4:	str	r2, [r3, #4]
    46e6:	mov	r0, r6
    46e8:	str	r1, [r5, #12]
    46ea:	str	r5, [r1, #8]
    46ec:	bl	4840 <__malloc_unlock>
    46f0:	b.n	445c <_malloc_r+0x190>
    46f2:	add.w	lr, r3, #92	; 0x5c
    46f6:	add.w	r0, r3, #91	; 0x5b
    46fa:	mov.w	r3, lr, lsl #1
    46fe:	b.n	4310 <_malloc_r+0x44>
    4700:	lsrs	r2, r3, #6
    4702:	add.w	r1, r2, #57	; 0x39
    4706:	lsls	r1, r1, #1
    4708:	adds	r2, #56	; 0x38
    470a:	b.n	4650 <_malloc_r+0x384>
    470c:	cmp	r4, r7
    470e:	ldr	r3, [pc, #296]	; (4838 <_malloc_r+0x56c>)
    4710:	beq.w	4514 <_malloc_r+0x248>
    4714:	ldr	r4, [r3, #8]
    4716:	ldr	r2, [r4, #4]
    4718:	bic.w	r2, r2, #3
    471c:	b.n	45d4 <_malloc_r+0x308>
    471e:	ldr.w	r3, [r9], #-8
    4722:	cmp	r9, r3
    4724:	bne.w	482c <_malloc_r+0x560>
    4728:	tst.w	r0, #3
    472c:	add.w	r0, r0, #4294967295
    4730:	bne.n	471e <_malloc_r+0x452>
    4732:	ldr	r3, [r7, #4]
    4734:	bic.w	r3, r3, r4
    4738:	str	r3, [r7, #4]
    473a:	lsls	r4, r4, #1
    473c:	cmp	r4, r3
    473e:	bhi.w	44bc <_malloc_r+0x1f0>
    4742:	cmp	r4, #0
    4744:	beq.w	44bc <_malloc_r+0x1f0>
    4748:	tst	r4, r3
    474a:	mov	r0, r8
    474c:	bne.w	43ba <_malloc_r+0xee>
    4750:	lsls	r4, r4, #1
    4752:	tst	r4, r3
    4754:	add.w	r0, r0, #4
    4758:	beq.n	4750 <_malloc_r+0x484>
    475a:	b.n	43ba <_malloc_r+0xee>
    475c:	cmp.w	r3, #340	; 0x154
    4760:	bhi.n	4794 <_malloc_r+0x4c8>
    4762:	lsrs	r0, r5, #15
    4764:	add.w	lr, r0, #120	; 0x78
    4768:	mov.w	r3, lr, lsl #1
    476c:	adds	r0, #119	; 0x77
    476e:	b.n	4310 <_malloc_r+0x44>
    4770:	mov.w	r1, #4096	; 0x1000
    4774:	b.n	454e <_malloc_r+0x282>
    4776:	movs	r1, #1
    4778:	ldr.w	r3, [r8, #4]
    477c:	asrs	r2, r2, #2
    477e:	lsl.w	r2, r1, r2
    4782:	orrs	r2, r3
    4784:	str.w	r2, [r8, #4]
    4788:	mov	r1, ip
    478a:	b.n	467c <_malloc_r+0x3b0>
    478c:	movs	r3, #1
    478e:	str.w	r3, [fp, #4]
    4792:	b.n	45e0 <_malloc_r+0x314>
    4794:	movw	r2, #1364	; 0x554
    4798:	cmp	r3, r2
    479a:	bhi.n	47de <_malloc_r+0x512>
    479c:	lsrs	r0, r5, #18
    479e:	add.w	lr, r0, #125	; 0x7d
    47a2:	mov.w	r3, lr, lsl #1
    47a6:	adds	r0, #124	; 0x7c
    47a8:	b.n	4310 <_malloc_r+0x44>
    47aa:	adds	r2, #16
    47ac:	b.n	44f8 <_malloc_r+0x22c>
    47ae:	cmp	r2, #84	; 0x54
    47b0:	bhi.n	4800 <_malloc_r+0x534>
    47b2:	lsrs	r2, r3, #12
    47b4:	add.w	r1, r2, #111	; 0x6f
    47b8:	lsls	r1, r1, #1
    47ba:	adds	r2, #110	; 0x6e
    47bc:	b.n	4650 <_malloc_r+0x384>
    47be:	ldr	r4, [r7, #8]
    47c0:	ldr	r2, [r4, #4]
    47c2:	bic.w	r2, r2, #3
    47c6:	b.n	45d4 <_malloc_r+0x308>
    47c8:	ubfx	r0, sl, #0, #12
    47cc:	cmp	r0, #0
    47ce:	bne.w	4522 <_malloc_r+0x256>
    47d2:	add	r2, r8
    47d4:	ldr	r3, [r7, #8]
    47d6:	orr.w	r2, r2, #1
    47da:	str	r2, [r3, #4]
    47dc:	b.n	45b8 <_malloc_r+0x2ec>
    47de:	movs	r3, #254	; 0xfe
    47e0:	mov.w	lr, #127	; 0x7f
    47e4:	movs	r0, #126	; 0x7e
    47e6:	b.n	4310 <_malloc_r+0x44>
    47e8:	movs	r2, #1
    47ea:	mov.w	r9, #0
    47ee:	b.n	4574 <_malloc_r+0x2a8>
    47f0:	add.w	r1, r4, #8
    47f4:	mov	r0, r6
    47f6:	bl	494c <_free_r>
    47fa:	ldr.w	r1, [r9]
    47fe:	b.n	45b8 <_malloc_r+0x2ec>
    4800:	cmp.w	r2, #340	; 0x154
    4804:	bhi.n	4812 <_malloc_r+0x546>
    4806:	lsrs	r2, r3, #15
    4808:	add.w	r1, r2, #120	; 0x78
    480c:	lsls	r1, r1, #1
    480e:	adds	r2, #119	; 0x77
    4810:	b.n	4650 <_malloc_r+0x384>
    4812:	movw	r1, #1364	; 0x554
    4816:	cmp	r2, r1
    4818:	bhi.n	4826 <_malloc_r+0x55a>
    481a:	lsrs	r2, r3, #18
    481c:	add.w	r1, r2, #125	; 0x7d
    4820:	lsls	r1, r1, #1
    4822:	adds	r2, #124	; 0x7c
    4824:	b.n	4650 <_malloc_r+0x384>
    4826:	movs	r1, #254	; 0xfe
    4828:	movs	r2, #126	; 0x7e
    482a:	b.n	4650 <_malloc_r+0x384>
    482c:	ldr	r3, [r7, #4]
    482e:	b.n	473a <_malloc_r+0x46e>
    4830:	lsrs	r0, r5, #3
    4832:	adds	r3, r0, #1
    4834:	lsls	r3, r3, #1
    4836:	b.n	442a <_malloc_r+0x15e>
    4838:	.word	0x1fff11ac

0000483c <__malloc_lock>:
    483c:	bx	lr
    483e:	nop

00004840 <__malloc_unlock>:
    4840:	bx	lr
    4842:	nop

00004844 <_sbrk_r>:
    4844:	push	{r3, r4, r5, lr}
    4846:	ldr	r4, [pc, #28]	; (4864 <_sbrk_r+0x20>)
    4848:	movs	r3, #0
    484a:	mov	r5, r0
    484c:	mov	r0, r1
    484e:	str	r3, [r4, #0]
    4850:	bl	3bd8 <_sbrk>
    4854:	adds	r3, r0, #1
    4856:	beq.n	485a <_sbrk_r+0x16>
    4858:	pop	{r3, r4, r5, pc}
    485a:	ldr	r3, [r4, #0]
    485c:	cmp	r3, #0
    485e:	beq.n	4858 <_sbrk_r+0x14>
    4860:	str	r3, [r5, #0]
    4862:	pop	{r3, r4, r5, pc}
    4864:	.word	0x1fff1e78

00004868 <register_fini>:
    4868:	ldr	r3, [pc, #8]	; (4874 <register_fini+0xc>)
    486a:	cbz	r3, 4872 <register_fini+0xa>
    486c:	ldr	r0, [pc, #8]	; (4878 <register_fini+0x10>)
    486e:	b.w	487c <atexit>
    4872:	bx	lr
    4874:	.word	0x00000000
    4878:	.word	0x00004889

0000487c <atexit>:
    487c:	movs	r3, #0
    487e:	mov	r1, r0
    4880:	mov	r2, r3
    4882:	mov	r0, r3
    4884:	b.w	4b1c <__register_exitproc>

00004888 <__libc_fini_array>:
    4888:	push	{r3, r4, r5, lr}
    488a:	ldr	r5, [pc, #28]	; (48a8 <__libc_fini_array+0x20>)
    488c:	ldr	r4, [pc, #28]	; (48ac <__libc_fini_array+0x24>)
    488e:	subs	r4, r5, r4
    4890:	asrs	r4, r4, #2
    4892:	beq.n	48a0 <__libc_fini_array+0x18>
    4894:	subs	r4, #1
    4896:	ldr.w	r3, [r5, #-4]!
    489a:	blx	r3
    489c:	cmp	r4, #0
    489e:	bne.n	4894 <__libc_fini_array+0xc>
    48a0:	ldmia.w	sp!, {r3, r4, r5, lr}
    48a4:	b.w	4ef8 <__init_array_end>
	...

000048b0 <_malloc_trim_r>:
    48b0:	push	{r3, r4, r5, r6, r7, lr}
    48b2:	ldr	r7, [pc, #140]	; (4940 <_malloc_trim_r+0x90>)
    48b4:	mov	r4, r1
    48b6:	mov	r6, r0
    48b8:	bl	483c <__malloc_lock>
    48bc:	ldr	r3, [r7, #8]
    48be:	ldr	r5, [r3, #4]
    48c0:	bic.w	r5, r5, #3
    48c4:	subs	r1, r5, r4
    48c6:	addw	r1, r1, #4079	; 0xfef
    48ca:	bic.w	r1, r1, #4080	; 0xff0
    48ce:	bic.w	r1, r1, #15
    48d2:	sub.w	r4, r1, #4096	; 0x1000
    48d6:	cmp.w	r4, #4096	; 0x1000
    48da:	blt.n	48ec <_malloc_trim_r+0x3c>
    48dc:	movs	r1, #0
    48de:	mov	r0, r6
    48e0:	bl	4844 <_sbrk_r>
    48e4:	ldr	r3, [r7, #8]
    48e6:	add	r3, r5
    48e8:	cmp	r0, r3
    48ea:	beq.n	48f6 <_malloc_trim_r+0x46>
    48ec:	mov	r0, r6
    48ee:	bl	4840 <__malloc_unlock>
    48f2:	movs	r0, #0
    48f4:	pop	{r3, r4, r5, r6, r7, pc}
    48f6:	negs	r1, r4
    48f8:	mov	r0, r6
    48fa:	bl	4844 <_sbrk_r>
    48fe:	adds	r0, #1
    4900:	beq.n	491e <_malloc_trim_r+0x6e>
    4902:	ldr	r3, [pc, #64]	; (4944 <_malloc_trim_r+0x94>)
    4904:	ldr	r2, [r7, #8]
    4906:	ldr	r1, [r3, #0]
    4908:	subs	r5, r5, r4
    490a:	orr.w	r5, r5, #1
    490e:	mov	r0, r6
    4910:	subs	r1, r1, r4
    4912:	str	r5, [r2, #4]
    4914:	str	r1, [r3, #0]
    4916:	bl	4840 <__malloc_unlock>
    491a:	movs	r0, #1
    491c:	pop	{r3, r4, r5, r6, r7, pc}
    491e:	movs	r1, #0
    4920:	mov	r0, r6
    4922:	bl	4844 <_sbrk_r>
    4926:	ldr	r2, [r7, #8]
    4928:	subs	r3, r0, r2
    492a:	cmp	r3, #15
    492c:	ble.n	48ec <_malloc_trim_r+0x3c>
    492e:	ldr	r4, [pc, #24]	; (4948 <_malloc_trim_r+0x98>)
    4930:	ldr	r1, [pc, #16]	; (4944 <_malloc_trim_r+0x94>)
    4932:	ldr	r4, [r4, #0]
    4934:	orr.w	r3, r3, #1
    4938:	subs	r0, r0, r4
    493a:	str	r3, [r2, #4]
    493c:	str	r0, [r1, #0]
    493e:	b.n	48ec <_malloc_trim_r+0x3c>
    4940:	.word	0x1fff11ac
    4944:	.word	0x1fff1d0c
    4948:	.word	0x1fff15b8

0000494c <_free_r>:
    494c:	cmp	r1, #0
    494e:	beq.n	49dc <_free_r+0x90>
    4950:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4954:	mov	r5, r1
    4956:	mov	r8, r0
    4958:	bl	483c <__malloc_lock>
    495c:	ldr.w	r7, [r5, #-4]
    4960:	ldr	r1, [pc, #424]	; (4b0c <_free_r+0x1c0>)
    4962:	bic.w	r3, r7, #1
    4966:	sub.w	r4, r5, #8
    496a:	adds	r2, r4, r3
    496c:	ldr	r6, [r1, #8]
    496e:	ldr	r0, [r2, #4]
    4970:	cmp	r2, r6
    4972:	bic.w	r0, r0, #3
    4976:	beq.n	4a3e <_free_r+0xf2>
    4978:	lsls	r6, r7, #31
    497a:	str	r0, [r2, #4]
    497c:	bmi.n	4996 <_free_r+0x4a>
    497e:	ldr.w	r7, [r5, #-8]
    4982:	subs	r4, r4, r7
    4984:	add.w	lr, r1, #8
    4988:	ldr	r5, [r4, #8]
    498a:	cmp	r5, lr
    498c:	add	r3, r7
    498e:	beq.n	4a70 <_free_r+0x124>
    4990:	ldr	r7, [r4, #12]
    4992:	str	r7, [r5, #12]
    4994:	str	r5, [r7, #8]
    4996:	adds	r5, r2, r0
    4998:	ldr	r5, [r5, #4]
    499a:	lsls	r5, r5, #31
    499c:	bpl.n	4a24 <_free_r+0xd8>
    499e:	orr.w	r2, r3, #1
    49a2:	str	r2, [r4, #4]
    49a4:	str	r3, [r4, r3]
    49a6:	cmp.w	r3, #512	; 0x200
    49aa:	bcs.n	49de <_free_r+0x92>
    49ac:	lsrs	r3, r3, #3
    49ae:	adds	r2, r3, #1
    49b0:	ldr	r5, [r1, #4]
    49b2:	ldr.w	r7, [r1, r2, lsl #3]
    49b6:	str	r7, [r4, #8]
    49b8:	movs	r0, #1
    49ba:	asrs	r3, r3, #2
    49bc:	lsl.w	r3, r0, r3
    49c0:	add.w	r0, r1, r2, lsl #3
    49c4:	orrs	r5, r3
    49c6:	subs	r0, #8
    49c8:	str	r0, [r4, #12]
    49ca:	str	r5, [r1, #4]
    49cc:	str.w	r4, [r1, r2, lsl #3]
    49d0:	str	r4, [r7, #12]
    49d2:	mov	r0, r8
    49d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    49d8:	b.w	4840 <__malloc_unlock>
    49dc:	bx	lr
    49de:	lsrs	r2, r3, #9
    49e0:	cmp	r2, #4
    49e2:	bhi.n	4a8c <_free_r+0x140>
    49e4:	lsrs	r2, r3, #6
    49e6:	add.w	r7, r2, #57	; 0x39
    49ea:	lsls	r7, r7, #1
    49ec:	add.w	r5, r2, #56	; 0x38
    49f0:	add.w	r0, r1, r7, lsl #2
    49f4:	ldr.w	r2, [r1, r7, lsl #2]
    49f8:	ldr	r1, [pc, #272]	; (4b0c <_free_r+0x1c0>)
    49fa:	subs	r0, #8
    49fc:	cmp	r0, r2
    49fe:	beq.n	4a9c <_free_r+0x150>
    4a00:	ldr	r1, [r2, #4]
    4a02:	bic.w	r1, r1, #3
    4a06:	cmp	r3, r1
    4a08:	bcs.n	4a10 <_free_r+0xc4>
    4a0a:	ldr	r2, [r2, #8]
    4a0c:	cmp	r0, r2
    4a0e:	bne.n	4a00 <_free_r+0xb4>
    4a10:	ldr	r0, [r2, #12]
    4a12:	str	r0, [r4, #12]
    4a14:	str	r2, [r4, #8]
    4a16:	str	r4, [r0, #8]
    4a18:	str	r4, [r2, #12]
    4a1a:	mov	r0, r8
    4a1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4a20:	b.w	4840 <__malloc_unlock>
    4a24:	ldr	r5, [r2, #8]
    4a26:	ldr	r7, [pc, #232]	; (4b10 <_free_r+0x1c4>)
    4a28:	cmp	r5, r7
    4a2a:	add	r3, r0
    4a2c:	beq.n	4aae <_free_r+0x162>
    4a2e:	ldr	r0, [r2, #12]
    4a30:	str	r0, [r5, #12]
    4a32:	orr.w	r2, r3, #1
    4a36:	str	r5, [r0, #8]
    4a38:	str	r2, [r4, #4]
    4a3a:	str	r3, [r4, r3]
    4a3c:	b.n	49a6 <_free_r+0x5a>
    4a3e:	lsls	r7, r7, #31
    4a40:	add	r3, r0
    4a42:	bmi.n	4a54 <_free_r+0x108>
    4a44:	ldr.w	r2, [r5, #-8]
    4a48:	subs	r4, r4, r2
    4a4a:	add	r3, r2
    4a4c:	ldr	r0, [r4, #8]
    4a4e:	ldr	r2, [r4, #12]
    4a50:	str	r2, [r0, #12]
    4a52:	str	r0, [r2, #8]
    4a54:	ldr	r2, [pc, #188]	; (4b14 <_free_r+0x1c8>)
    4a56:	ldr	r2, [r2, #0]
    4a58:	orr.w	r0, r3, #1
    4a5c:	cmp	r3, r2
    4a5e:	str	r0, [r4, #4]
    4a60:	str	r4, [r1, #8]
    4a62:	bcc.n	49d2 <_free_r+0x86>
    4a64:	ldr	r3, [pc, #176]	; (4b18 <_free_r+0x1cc>)
    4a66:	mov	r0, r8
    4a68:	ldr	r1, [r3, #0]
    4a6a:	bl	48b0 <_malloc_trim_r>
    4a6e:	b.n	49d2 <_free_r+0x86>
    4a70:	adds	r1, r2, r0
    4a72:	ldr	r1, [r1, #4]
    4a74:	lsls	r1, r1, #31
    4a76:	bmi.n	4b02 <_free_r+0x1b6>
    4a78:	ldr	r1, [r2, #8]
    4a7a:	ldr	r2, [r2, #12]
    4a7c:	str	r2, [r1, #12]
    4a7e:	add	r3, r0
    4a80:	orr.w	r0, r3, #1
    4a84:	str	r1, [r2, #8]
    4a86:	str	r0, [r4, #4]
    4a88:	str	r3, [r4, r3]
    4a8a:	b.n	49d2 <_free_r+0x86>
    4a8c:	cmp	r2, #20
    4a8e:	bhi.n	4ac0 <_free_r+0x174>
    4a90:	add.w	r7, r2, #92	; 0x5c
    4a94:	lsls	r7, r7, #1
    4a96:	add.w	r5, r2, #91	; 0x5b
    4a9a:	b.n	49f0 <_free_r+0xa4>
    4a9c:	asrs	r2, r5, #2
    4a9e:	ldr	r3, [r1, #4]
    4aa0:	movs	r5, #1
    4aa2:	lsl.w	r2, r5, r2
    4aa6:	orrs	r3, r2
    4aa8:	str	r3, [r1, #4]
    4aaa:	mov	r2, r0
    4aac:	b.n	4a12 <_free_r+0xc6>
    4aae:	orr.w	r2, r3, #1
    4ab2:	str	r4, [r1, #20]
    4ab4:	str	r4, [r1, #16]
    4ab6:	str	r5, [r4, #12]
    4ab8:	str	r5, [r4, #8]
    4aba:	str	r2, [r4, #4]
    4abc:	str	r3, [r4, r3]
    4abe:	b.n	49d2 <_free_r+0x86>
    4ac0:	cmp	r2, #84	; 0x54
    4ac2:	bhi.n	4ad2 <_free_r+0x186>
    4ac4:	lsrs	r2, r3, #12
    4ac6:	add.w	r7, r2, #111	; 0x6f
    4aca:	lsls	r7, r7, #1
    4acc:	add.w	r5, r2, #110	; 0x6e
    4ad0:	b.n	49f0 <_free_r+0xa4>
    4ad2:	cmp.w	r2, #340	; 0x154
    4ad6:	bhi.n	4ae6 <_free_r+0x19a>
    4ad8:	lsrs	r2, r3, #15
    4ada:	add.w	r7, r2, #120	; 0x78
    4ade:	lsls	r7, r7, #1
    4ae0:	add.w	r5, r2, #119	; 0x77
    4ae4:	b.n	49f0 <_free_r+0xa4>
    4ae6:	movw	r0, #1364	; 0x554
    4aea:	cmp	r2, r0
    4aec:	bhi.n	4afc <_free_r+0x1b0>
    4aee:	lsrs	r2, r3, #18
    4af0:	add.w	r7, r2, #125	; 0x7d
    4af4:	lsls	r7, r7, #1
    4af6:	add.w	r5, r2, #124	; 0x7c
    4afa:	b.n	49f0 <_free_r+0xa4>
    4afc:	movs	r7, #254	; 0xfe
    4afe:	movs	r5, #126	; 0x7e
    4b00:	b.n	49f0 <_free_r+0xa4>
    4b02:	orr.w	r2, r3, #1
    4b06:	str	r2, [r4, #4]
    4b08:	str	r3, [r4, r3]
    4b0a:	b.n	49d2 <_free_r+0x86>
    4b0c:	.word	0x1fff11ac
    4b10:	.word	0x1fff11b4
    4b14:	.word	0x1fff15b4
    4b18:	.word	0x1fff1d08

00004b1c <__register_exitproc>:
    4b1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b20:	ldr	r4, [pc, #148]	; (4bb8 <__register_exitproc+0x9c>)
    4b22:	ldr	r5, [r4, #0]
    4b24:	ldr.w	r4, [r5, #328]	; 0x148
    4b28:	mov	r6, r0
    4b2a:	mov	r8, r1
    4b2c:	mov	sl, r2
    4b2e:	mov	r9, r3
    4b30:	cbz	r4, 4ba4 <__register_exitproc+0x88>
    4b32:	ldr	r0, [r4, #4]
    4b34:	cmp	r0, #31
    4b36:	bgt.n	4b68 <__register_exitproc+0x4c>
    4b38:	adds	r3, r0, #1
    4b3a:	cbz	r6, 4b5a <__register_exitproc+0x3e>
    4b3c:	add.w	r5, r4, r0, lsl #2
    4b40:	movs	r2, #1
    4b42:	str.w	sl, [r5, #136]	; 0x88
    4b46:	ldr.w	r1, [r4, #392]	; 0x188
    4b4a:	lsls	r2, r0
    4b4c:	orrs	r1, r2
    4b4e:	cmp	r6, #2
    4b50:	str.w	r1, [r4, #392]	; 0x188
    4b54:	str.w	r9, [r5, #264]	; 0x108
    4b58:	beq.n	4b98 <__register_exitproc+0x7c>
    4b5a:	adds	r0, #2
    4b5c:	str	r3, [r4, #4]
    4b5e:	str.w	r8, [r4, r0, lsl #2]
    4b62:	movs	r0, #0
    4b64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b68:	ldr	r3, [pc, #80]	; (4bbc <__register_exitproc+0xa0>)
    4b6a:	cbz	r3, 4bae <__register_exitproc+0x92>
    4b6c:	mov.w	r0, #400	; 0x190
    4b70:	bl	42bc <malloc>
    4b74:	mov	r4, r0
    4b76:	cbz	r0, 4bae <__register_exitproc+0x92>
    4b78:	ldr.w	r3, [r5, #328]	; 0x148
    4b7c:	movs	r7, #0
    4b7e:	stmia.w	r0, {r3, r7}
    4b82:	str.w	r4, [r5, #328]	; 0x148
    4b86:	mov	r0, r7
    4b88:	movs	r3, #1
    4b8a:	str.w	r7, [r4, #392]	; 0x188
    4b8e:	str.w	r7, [r4, #396]	; 0x18c
    4b92:	cmp	r6, #0
    4b94:	beq.n	4b5a <__register_exitproc+0x3e>
    4b96:	b.n	4b3c <__register_exitproc+0x20>
    4b98:	ldr.w	r1, [r4, #396]	; 0x18c
    4b9c:	orrs	r2, r1
    4b9e:	str.w	r2, [r4, #396]	; 0x18c
    4ba2:	b.n	4b5a <__register_exitproc+0x3e>
    4ba4:	add.w	r4, r5, #332	; 0x14c
    4ba8:	str.w	r4, [r5, #328]	; 0x148
    4bac:	b.n	4b32 <__register_exitproc+0x16>
    4bae:	mov.w	r0, #4294967295
    4bb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bb6:	nop
    4bb8:	.word	0x00004edc
    4bbc:	.word	0x000042bd
    4bc0:	.word	0x7370704f
    4bc4:	.word	0x6e61202c
    4bc8:	.word	0x6b6e7520
    4bcc:	.word	0x6e776f6e
    4bd0:	.word	0x44494d20
    4bd4:	.word	0x656d2049
    4bd8:	.word	0x67617373
    4bdc:	.word	0x79742065
    4be0:	.word	0x00216570
    4be4:	.word	0x4f4c4556
    4be8:	.word	0x59544943
    4bec:	.word	0x00000000
    4bf0:	.word	0x45544f4e
    4bf4:	.word	0x474e454c
    4bf8:	.word	0x00004854
    4bfc:	.word	0x43544950
    4c00:	.word	0x00000048
    4c04:	.word	0x79616c50
    4c08:	.word	0x00000000

00004c0c <pin2sc1a>:
    4c0c:	................
    4c1c:	................
    4c2c:	................
    4c3c:	................
    4c4c:	........

00004c54 <digital_pin_to_info_PGM>:
    4c54:	@..C@..@D..CD..@
    4c64:	...C...@0..C0..@
    4c74:	4..C4..@...C...@
    4c84:	...C...@...C...@
    4c94:	...C...@...C...@
    4ca4:	...C...@...C...@
    4cb4:	...C...@...C...@
    4cc4:	...C...@...C...@
    4cd4:	...C...@...C...@
    4ce4:	...C...@...C...@
    4cf4:	...C...@...C...@
    4d04:	...C...@...C...@
    4d14:	h .Ch..@...C...@
    4d24:	8..C8..@<..C<..@
    4d34:	@..C@..@H..CH..@
    4d44:	L..CL..@(..C(..@
    4d54:	,..C,..@` .C`..@
    4d64:	d .Cd..@ ..C ..@
    4d74:	$..C$..@(..C(..@
    4d84:	,..C,..@D..CD..@
    4d94:	p..Cp..@t..Ct..@
    4da4:	h..Ch..@P..CP..@
    4db4:	X..CX..@\..C\..@
    4dc4:	T..CT..@ ..C ..@
    4dd4:	$..C$..@...C...@
    4de4:	...C...@8..C8..@
    4df4:	4..C4..@0..C0..@
    4e04:	<..C<..@,..C,..@
    4e14:	( .C(..@, .C,..@
    4e24:	. .C...@. .C...@
    4e34:	. .C...@. .C...@
    4e44:	. .C...@. .C...@

00004e54 <vtable for usb_serial_class>:
	...
    4e5c:	.8...8...8...8..
    4e6c:	.8...7...7...7..
    4e7c:	....

00004e80 <usb_endpoint_config_table>:
    4e80:	........

00004e88 <usb_descriptor_list>:
    4e88:	................
    4e98:	............`...
    4ea8:	................
    4eb8:	....H...........
    4ec8:	d...............
    4ed8:	....

00004edc <_global_impure_ptr>:
    4edc:	....

00004ee0 <_init>:
    4ee0:	push	{r3, r4, r5, r6, r7, lr}
    4ee2:	nop
    4ee4:	pop	{r3, r4, r5, r6, r7}
    4ee6:	pop	{r3}
    4ee8:	mov	lr, r3
    4eea:	bx	lr

00004eec <__init_array_start>:
    4eec:	.word	0x00004869

00004ef0 <__frame_dummy_init_array_entry>:
    4ef0:	5...y...

Disassembly of section .fini:

00004ef8 <_fini>:
    4ef8:	push	{r3, r4, r5, r6, r7, lr}
    4efa:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004304 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff1594 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00002f84 l     F .text	0000000c startup_default_early_hook
00002f90 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1594 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1598 l       .bss	00000000 object.8610
000042fc l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 sequencer.cpp
00000000 l    df *ABS*	00000000 button.cpp
00000000 l    df *ABS*	00000000 piano.cpp
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 main.cpp
000008b0 l     F .text	00000018 _GLOBAL__sub_I_sequencer
00000000 l    df *ABS*	00000000 note.cpp
00000000 l    df *ABS*	00000000 transport.cpp
00000000 l    df *ABS*	00000000 paginator.cpp
00000000 l    df *ABS*	00000000 step.cpp
00000000 l    df *ABS*	00000000 knob.cpp
00000000 l    df *ABS*	00000000 controller.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
1fff15b5 l     O .bss	00000001 tx_noautoflush
1fff15b8 l     O .bss	00000004 tx_packet
1fff15bc l     O .bss	00000001 transmit_previous_timeout
1fff15c0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000011dc l     F .text	00000144 wait_for_cal
1fff15c5 l     O .bss	00000001 analog_right_shift
1fff15c6 l     O .bss	00000001 calibrating
00004018 l     O .text	00000048 pin2sc1a
1fff0c40 l     O .data	00000001 analog_config_bits
1fff15c7 l     O .bss	00000001 analogReadBusyADC1
1fff15c8 l     O .bss	00000001 analogReadBusyADC0
1fff15c9 l     O .bss	00000001 analog_reference_internal
1fff0c41 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000014fc l     F .text	0000004c digitalWrite.part.1
00001548 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00001828 l     F .text	00000048 sysex_byte
1fff15e4 l     O .bss	00000001 tx_noautoflush
1fff1610 l     O .bss	00000004 tx_packet
1fff1614 l     O .bss	00000001 transmit_previous_timeout
1fff161c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c44 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1630 l     O .bss	00000004 ep0_tx_ptr
1fff1634 l     O .bss	00000014 rx_last
1fff1648 l     O .bss	00000002 ep0_tx_len
1fff164c l     O .bss	00000040 ep0_rx0_buf
1fff168c l     O .bss	00000014 rx_first
1fff16a0 l     O .bss	00000001 ep0_tx_data_toggle
1fff16a4 l     O .bss	00000040 ep0_rx1_buf
1fff16e4 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff16f8 l     O .bss	00000014 tx_last
1fff170c l     O .bss	00000008 setup
1fff1714 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1718 l     O .bss	00000008 reply_buffer
1fff1724 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1729 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff172c l     O .bss	00000004 rts_pin
1fff1730 l     O .bss	00000001 rx_buffer_head
1fff1731 l     O .bss	00000001 rx_buffer_tail
1fff1734 l     O .bss	00000028 tx_buffer
1fff175c l     O .bss	00000040 rx_buffer
1fff179c l     O .bss	00000001 transmitting
1fff179d l     O .bss	00000001 tx_buffer_tail
1fff17a0 l     O .bss	00000004 transmit_pin
1fff17a4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff17a8 l     O .bss	00000004 rts_pin
1fff17ac l     O .bss	00000001 transmitting
1fff17ad l     O .bss	00000001 rx_buffer_tail
1fff17b0 l     O .bss	00000028 tx_buffer
1fff17d8 l     O .bss	00000040 rx_buffer
1fff1818 l     O .bss	00000001 rx_buffer_head
1fff1819 l     O .bss	00000001 tx_buffer_tail
1fff181c l     O .bss	00000004 transmit_pin
1fff1820 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1824 l     O .bss	00000004 rts_pin
1fff1828 l     O .bss	00000001 rx_buffer_head
1fff1829 l     O .bss	00000001 rx_buffer_tail
1fff182c l     O .bss	00000028 tx_buffer
1fff1854 l     O .bss	00000040 rx_buffer
1fff1894 l     O .bss	00000001 transmitting
1fff1895 l     O .bss	00000001 tx_buffer_tail
1fff1898 l     O .bss	00000004 transmit_pin
1fff189c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff18a0 l     O .bss	00000004 rts_pin
1fff18a4 l     O .bss	00000001 rx_buffer_head
1fff18a5 l     O .bss	00000001 rx_buffer_tail
1fff18a8 l     O .bss	00000040 tx_buffer
1fff18e8 l     O .bss	00000040 rx_buffer
1fff1928 l     O .bss	00000001 transmitting
1fff1929 l     O .bss	00000001 tx_buffer_tail
1fff192c l     O .bss	00000004 transmit_pin
1fff1930 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1934 l     O .bss	00000004 rts_pin
1fff1938 l     O .bss	00000001 rx_buffer_head
1fff1939 l     O .bss	00000001 rx_buffer_tail
1fff193c l     O .bss	00000028 tx_buffer
1fff1964 l     O .bss	00000040 rx_buffer
1fff19a4 l     O .bss	00000001 transmitting
1fff19a5 l     O .bss	00000001 tx_buffer_tail
1fff19a8 l     O .bss	00000004 transmit_pin
1fff19ac l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c5c l     O .data	00000012 device_descriptor
1fff0c88 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff19b0 l     O .bss	00000004 rts_pin
1fff19b4 l     O .bss	00000001 rx_buffer_head
1fff19b5 l     O .bss	00000001 rx_buffer_tail
1fff19b8 l     O .bss	00000028 tx_buffer
1fff19e0 l     O .bss	00000040 rx_buffer
1fff1a20 l     O .bss	00000001 transmitting
1fff1a21 l     O .bss	00000001 tx_buffer_tail
1fff1a24 l     O .bss	00000004 transmit_pin
1fff1a28 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003c24 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d58 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1594 l       .bss	00000000 __bss_start__
1fff1bc4 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00002f7c  w    F .text	00000006 adc0_isr
00000f80 g     F .text	0000001c usb_serial_available
00002e3c g     F .text	00000020 serial4_available
00002a54  w    F .text	000000c4 yield
1fff0c70 g     O .data	00000018 usb_string_manufacturer_name_default
00003028 g     F .text	00000020 serial_available
1fff15e8 g     O .bss	00000004 usb_midi_handleProgramChange
00002f34  w    F .text	00000048 hard_fault_isr
00002f7c  w    F .text	00000006 dma_ch6_isr
00002b48 g     F .text	00000020 Print::println()
00002d10 g     F .text	00000020 serial2_available
00002f7c  w    F .text	00000006 uart0_lon_isr
00001e68 g     F .text	000000e8 usb_rx_memory
00002b18  w    F .text	00000002 serialEvent5()
00000ef8 g     F .text	00000006 Controller::getShiftMode()
00002f7c  w    F .text	00000006 dma_ch8_isr
00003154 g     F .text	00000020 serial6_available
00003bfc g     F .text	00000002 __malloc_unlock
1fff15fc g     O .bss	00000004 usb_midi_handleAfterTouch
000004f8 g     F .text	0000004e Sequencer::step()
00001320 g     F .text	000000e0 analog_init
00001f50 g     F .text	00000084 usb_tx
00002f7c  w    F .text	00000006 portcd_isr
0000057c g     F .text	00000088 Button::onPress()
1fff160c g     O .bss	00000004 usb_midi_handleSysExComplete
00003574 g     F .text	00000098 MillisTimer::runFromTimer()
00002f7c  w    F .text	00000006 can1_rx_warn_isr
00004308 g       .fini	00000000 __exidx_end
00002f7c  w    F .text	00000006 dma_error_isr
1fff1a88 g     O .bss	00000001 usb_midi_msg_type
1fff1a40 g     O .bss	00000001 EventResponder::runningFromYield
00002f7c  w    F .text	00000006 i2c0_isr
0000361c g     F .text	0000000c __errno
00002f7c  w    F .text	00000006 portd_isr
00002f7c  w    F .text	00000006 enet_error_isr
1fff1a2c g     O .bss	00000004 EventResponder::firstInterrupt
00000958 g     F .text	0000002c Note::tick()
00000c54 g     F .text	0000002a Knob::tick()
00002f7c  w    F .text	00000006 tpm1_isr
00002b34  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004060 g     O .text	00000200 digital_pin_to_info_PGM
00000f00 g     F .text	00000006 Controller::getMode()
1fff1bc0 g     O .bss	00000004 errno
00004308 g       .fini	00000000 _etext
1fff1594 g       .bss	00000000 _sbss
00002c10  w    F .text	00000002 serialEvent6()
1fff15f8 g     O .bss	00000004 usb_midi_handleVelocityChange
000015f0 g     F .text	0000001c digitalRead
00002f7c  w    F .text	00000006 porte_isr
000008a4 g     F .text	0000000c loop
00002f7c  w    F .text	00000006 portb_isr
000004d8 g     F .text	00000014 Sequencer::tick()
0000190c g     F .text	0000002c usb_midi_flush_output
00002f7c  w    F .text	00000006 spi1_isr
00002e5c g     F .text	000000d8 uart3_status_isr
00003420  w    F .text	00000002 serialEvent1()
00000e28 g     F .text	0000002c Controller::tick()
00002f7c  w    F .text	00000006 mcm_isr
0000350c g     F .text	00000068 MillisTimer::addToActiveList()
00001938 g     F .text	0000043c usb_midi_read
00000ee8 g     F .text	00000008 Controller::enterShiftMode()
1fff15d4 g     O .bss	00000004 usb_midi_handleSystemReset
0000073c g     F .text	00000024 Piano::Piano(Sequencer*)
1fff1a30 g     O .bss	00000004 EventResponder::lastInterrupt
00002d30 g     F .text	0000010c uart1_status_isr
00000834 g     F .text	0000006c Led::tick()
1fff1a8a g     O .bss	00000002 usb_midi_msg_sysex_len
00000548 g     F .text	00000006 Sequencer::resetStep()
00002f7c  w    F .text	00000006 randnum_isr
000008d8 g     F .text	0000002e Note::noteOn(unsigned char, unsigned char, unsigned char)
1fff15dc g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff15cc g     O .bss	00000004 systick_millis_count
00002f34  w    F .text	00000048 bus_fault_isr
000007ec g     F .text	0000002c Led::toggle()
00002f7c  w    F .text	00000006 watchdog_isr
00002f7c  w    F .text	00000006 i2c1_isr
1fff1720 g     O .bss	00000001 usb_configuration
00002f7c  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002bf8  w    F .text	00000002 serialEvent2()
00002f7c  w    F .text	00000006 i2c2_isr
1fff0c70  w    O .data	00000018 usb_string_manufacturer_name
1fff1bb4 g     O .bss	0000000a usb_rx_byte_count_data
00002f7c  w    F .text	00000006 pit1_isr
00000b30 g     F .text	0000001c Paginator::previousPage()
00003678 g     F .text	00000010 malloc
00002f7c  w    F .text	00000006 dma_ch4_isr
00002f7c  w    F .text	00000006 software_isr
00002f7c  w    F .text	00000006 dma_ch7_isr
000034a8  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00002984 g     F .text	000000d0 usb_init
00002f7c  w    F .text	00000006 lptmr_isr
00000a14 g     F .text	00000054 Transport::processMidi()
1fff1a50 g     O .bss	00000004 __malloc_top_pad
000015c0 g     F .text	00000024 rtc_set
00000604 g     F .text	00000040 Button::onRelease()
00000b70 g     F .text	0000001c Step::controlLength(int)
1fff0c40 g       .data	00000000 _sdata
1fff162c g     O .bss	00000004 usb_midi_handleNoteOn
00000928 g     F .text	0000002e Note::noteOff(unsigned char, unsigned char, unsigned char)
00002ff4 g     F .text	00000034 kinetis_hsrun_enable
00003c00 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00000f08 g     F .text	00000048 usb_serial_getchar
00002f7c  w    F .text	00000006 can1_bus_off_isr
00002f7c  w    F .text	00000006 ftm2_isr
00000550 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1a7c g     O .bss	00000008 usb_cdc_line_coding
000015e4 g     F .text	0000000a digitalWrite
00002f7c  w    F .text	00000006 uart5_status_isr
00003174 g     F .text	000000e4 lpuart0_status_isr
1fff1a38 g     O .bss	00000004 EventResponder::lastYield
00000998 g     F .text	0000003a Transport::controlTempo(int)
0000428c g     O .text	00000005 usb_endpoint_config_table
00000c80 g     F .text	000001a6 Controller::Controller(Sequencer*)
00002f7c  w    F .text	00000006 dma_ch9_isr
00002f7c  w    F .text	00000006 pit2_isr
00003328 g     F .text	00000020 serial3_available
1fff1a4c g     O .bss	00000004 __malloc_max_sbrked_mem
0000160c g     F .text	0000000a pinMode
00001db4 g     F .text	0000004c usb_free
00002f7c  w    F .text	00000006 i2c3_isr
1fff15f4 g     O .bss	00000004 usb_midi_handleSysExPartial
00004308 g       .fini	00000000 __exidx_start
00002f7c  w    F .text	00000006 pit0_isr
1fff1a8c g     O .bss	00000001 usb_midi_msg_data1
1fff1a3c g     O .bss	00000004 EventResponder::firstYield
000042e8 g     O .text	00000004 _global_impure_ptr
00002f7c  w    F .text	00000006 can1_error_isr
00003628 g     F .text	00000050 __libc_init_array
1fff1bc4 g       .bss	00000000 __bss_end
00002f7c  w    F .text	00000006 can0_wakeup_isr
00002f7c  w    F .text	00000006 flash_cmd_isr
00002b1c  w    F .text	00000004 usb_serial_class::clear()
00003348 g     F .text	000000d8 uart2_status_isr
00002f94 g     F .text	0000002c _sbrk
1fff1a44 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c58 g     O .data	00000004 __brkval
1fff15c4 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001194 g     F .text	00000048 usb_serial_flush_callback
000042ec g     F .text	00000000 _init
00002f7c  w    F .text	00000006 svcall_isr
00002f7c  w    F .text	00000006 dma_ch15_isr
00002f7c  w    F .text	00000006 uart1_error_isr
00003c44 g     F .text	00000028 __libc_fini_array
00002f7c  w    F .text	00000006 usbhs_phy_isr
00000a80 g     F .text	00000008 Paginator::Paginator(Sequencer*)
00000550 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1bc4 g       .bss	00000000 _ebss
00002f7c g     F .text	00000006 unused_isr
00000bb4 g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00002f7c  w    F .text	00000006 spi0_isr
00002f7c  w    F .text	00000006 dma_ch3_isr
00000b14 g     F .text	0000001a Paginator::nextPage()
00000b4c g     F .text	00000018 Step::Step(Sequencer*)
00000b4c g     F .text	00000018 Step::Step(Sequencer*)
00002f7c  w    F .text	00000006 flash_error_isr
00002c18 g     F .text	00000020 serial5_available
00002f7c  w    F .text	00000006 uart5_error_isr
00002f7c  w    F .text	00000006 rtc_seconds_isr
00002f7c  w    F .text	00000006 pdb_isr
00002f34  w    F .text	00000048 usage_fault_isr
00002f7c  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00000a68 g     F .text	00000018 Transport::tick()
00002f7c  w    F .text	00000006 dma_ch14_isr
00000bc4 g     F .text	00000090 Knob::onChange()
000008c8 g     F .text	0000000e Note::Note()
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1a84 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00000984 g     F .text	00000014 Transport::Transport(Sequencer*)
0000360c g     F .text	00000010 systick_isr
00002f7c  w    F .text	00000006 rtc_alarm_isr
0000046c g     F .text	0000006c Sequencer::Sequencer()
00002f7c  w    F .text	00000006 dma_ch2_isr
1fff0c48 g     O .data	00000010 Serial
00000984 g     F .text	00000014 Transport::Transport(Sequencer*)
00002f7c  w    F .text	00000006 ftm1_isr
00002b3c  w    F .text	00000006 usb_serial_class::write(unsigned char)
00002f84  w    F .text	0000000c startup_early_hook
00002f7c  w    F .text	00000006 dma_ch13_isr
00002f7c  w    F .text	00000006 uart2_error_isr
00000f50 g     F .text	00000030 usb_serial_peekchar
000007b8 g     F .text	00000034 Led::blink(int)
1fff0d3c g     O .data	00000016 usb_string_serial_number_default
00002f34 g     F .text	00000048 fault_isr
00003d08 g     F .text	000001d0 _free_r
1fff1618 g     O .bss	00000004 usb_midi_handleStop
00002f7c  w    F .text	00000006 usb_charge_isr
00002b2c  w    F .text	00000004 usb_serial_class::flush()
00002f7c  w    F .text	00000006 cmt_isr
00002f7c  w    F .text	00000006 usbhs_isr
1fff1628 g     O .bss	00000004 usb_midi_handleControlChange
1fff1590 g     O .data	00000004 __malloc_sbrk_base
00002b24  w    F .text	00000004 usb_serial_class::read()
00002f7c  w    F .text	00000006 ftm3_isr
0000073c g     F .text	00000024 Piano::Piano(Sequencer*)
00002f7c  w    F .text	00000006 tsi0_isr
00002f7c  w    F .text	00000006 spi2_isr
00002bfc  w    F .text	00000002 serialEvent4()
00002b44  w    F .text	00000002 serialEvent()
1fff16a1 g     O .bss	00000001 usb_reboot_timer
00003ed8 g     F .text	000000a4 __register_exitproc
00000f9c g     F .text	00000038 usb_serial_flush_input
000010dc g     F .text	00000018 usb_serial_putchar
1fff1a54 g     O .bss	00000028 __malloc_current_mallinfo
00002f7c  w    F .text	00000006 can0_bus_off_isr
00000c80 g     F .text	000001a6 Controller::Controller(Sequencer*)
1fff1715 g     O .bss	00000001 usb_rx_memory_needed
000004ec g     F .text	0000000a Sequencer::reverse()
00001fd4 g     F .text	000009b0 usb_isr
000009f4 g     F .text	0000001e Transport::stopPPQN()
1fff1624 g     O .bss	00000004 usb_midi_handleNoteOff
000008c8 g     F .text	0000000e Note::Note()
00004260  w    O .text	00000028 vtable for usb_serial_class
00000644 g     F .text	000000f8 Button::tick()
00002f7c  w    F .text	00000006 uart3_error_isr
1fff1a34 g     O .bss	00000004 MillisTimer::listActive
00002f7c  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00002f7c  w    F .text	00000006 low_voltage_isr
1fff1184 g     O .data	00000408 __malloc_av_
00002f7c  w    F .text	00000006 can0_error_isr
00000ef0 g     F .text	00000008 Controller::exitShiftMode()
000016bc g     F .text	0000016c _init_Teensyduino_internal_
00000bb4 g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
0000113c g     F .text	00000058 usb_serial_flush_output
00002f7c  w    F .text	00000006 dma_ch12_isr
00003bf8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00002f7c  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00002f7c  w    F .text	00000006 pit3_isr
00000778 g     F .text	0000001c Piano::play(Step*)
00000a80 g     F .text	00000008 Paginator::Paginator(Sequencer*)
00002f7c  w    F .text	00000006 enet_rx_isr
00002f7c  w    F .text	00000006 portc_isr
00002c00 g     F .text	00000010 main
1fff1a48 g     O .bss	00000004 __malloc_max_total_mem
00000824 g     F .text	0000000e Led::on()
00002f34  w    F .text	00000048 memmanage_fault_isr
00003258 g     F .text	00000084 usb_init_serialnumber
00004304 g       .text	00000000 __init_array_end
00003688 g     F .text	00000570 _malloc_r
00002f7c  w    F .text	00000006 debugmonitor_isr
1fff15f0 g     O .bss	00000004 usb_midi_handleSongPosition
00003428 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff15e0 g     O .bss	00000004 usb_midi_handleContinue
1fff1a8d g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00002f7c  w    F .text	00000006 cmp1_isr
00002f7c  w    F .text	00000006 ftm0_isr
00003c6c g     F .text	0000009c _malloc_trim_r
1fff0d38 g     O .data	00000004 string0
00000fd4 g     F .text	00000108 usb_serial_write
00002f90  w    F .text	00000002 startup_late_hook
00000b8c g     F .text	00000014 Step::controlPitch(int)
00002b28  w    F .text	00000004 usb_serial_class::available()
1fff1a8e g     O .bss	00000001 usb_midi_msg_cable
1fff0d20  w    O .data	00000018 usb_string_product_name
00001618 g     F .text	000000a4 delay
00002f7c  w    F .text	00000006 tpm0_isr
00004304 g     F .fini	00000000 _fini
00002f7c  w    F .text	00000006 i2s0_rx_isr
00002f7c  w    F .text	00000006 uart4_error_isr
00002be8 g     F .text	00000010 Print::print(long)
00001870 g     F .text	0000009c usb_midi_write_packed
00000a8c g     F .text	00000088 Paginator::changePage(int)
00003c38 g     F .text	0000000c atexit
00000908 g     F .text	00000020 Note::play(Step*)
00002f7c  w    F .text	00000006 can0_message_isr
00000e54 g     F .text	00000094 Controller::toggleMode()
1fff1180 g     O .data	00000004 _impure_ptr
00002f7c  w    F .text	00000006 can1_message_isr
00002f7c  w    F .text	00000006 nmi_isr
00000794 g     F .text	00000024 Led::Led(int, int)
0000046c g     F .text	0000006c Sequencer::Sequencer()
1fff1608 g     O .bss	00000004 usb_midi_handleTuneRequest
00000760 g     F .text	00000016 Piano::tick()
000042f8 g       .text	00000000 __preinit_array_end
00000b64 g     F .text	0000000a Step::toggle()
00002f7c  w    F .text	00000006 sdhc_isr
1fff1a8f g     O .bss	00000001 usb_midi_msg_channel
000008a0 g     F .text	00000002 setup
00004294 g     O .text	00000054 usb_descriptor_list
00001e00 g     F .text	0000003c usb_rx
00000794 g     F .text	00000024 Led::Led(int, int)
00002f7c  w    F .text	00000006 dma_ch10_isr
1fff1600 g     O .bss	00000004 usb_midi_handleStart
00002f7c  w    F .text	00000006 uart0_error_isr
00001d74 g     F .text	00000040 usb_malloc
00002f7c  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
000010f4 g     F .text	00000048 usb_serial_write_buffer_free
00002f7c  w    F .text	00000006 enet_timer_isr
1fff1594 g       .data	00000000 _edata
00002f7c  w    F .text	00000006 i2s0_tx_isr
00002f7c  w    F .text	00000006 adc1_isr
00000ba0 g     F .text	00000012 Step::controlVelocity(int)
00002b30  w    F .text	00000004 usb_serial_class::availableForWrite()
00002f7c  w    F .text	00000006 cmp0_isr
1fff15d0 g     O .bss	00000004 usb_midi_handleClock
000032dc g     F .text	0000004c ultoa
00002c14 g     F .text	00000004 operator new(unsigned int)
000034c4 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff158c g     O .data	00000004 __malloc_trim_threshold
00002b20  w    F .text	00000004 usb_serial_class::peek()
1fff15b4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff15ec g     O .bss	00000004 usb_midi_handlePitchChange
00002f7c  w    F .text	00000006 pit_isr
1fff1604 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00002f7c  w    F .text	00000006 dac0_isr
000042f8 g       .text	00000000 __init_array_start
00002f7c  w    F .text	00000006 can1_tx_warn_isr
00001400 g     F .text	000000fc analogRead
1fff1a90 g     O .bss	00000122 usb_midi_msg_sysex
00003048 g     F .text	0000010c uart0_status_isr
00002f7c  w    F .text	00000006 mcg_isr
00000a88 g     F .text	00000004 Paginator::getPage()
00000400 g     O .text	00000010 flashconfigbytes
1fff0d20 g     O .data	00000018 usb_string_product_name_default
00002f7c  w    F .text	00000006 dma_ch1_isr
000009d4 g     F .text	00000020 Transport::startPPQN()
00001e3c g     F .text	0000002c usb_tx_packet_count
00002f7c  w    F .text	00000006 dma_ch5_isr
00002f7c  w    F .text	00000006 can0_rx_warn_isr
00002f7c  w    F .text	00000006 can0_tx_warn_isr
00002c38 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00002fc0 g     F .text	00000034 kinetis_hsrun_disable
000042f8 g       .text	00000000 __preinit_array_start
1fff15b0 g     O .bss	00000004 sequencer
00003424  w    F .text	00000002 serialEvent3()
1fff1620 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
00002f7c  w    F .text	00000006 cmp2_isr
00003508 g     F .text	00000004 pendablesrvreq_isr
00002f7c  w    F .text	00000006 wakeup_isr
00002f7c  w    F .text	00000006 cmp3_isr
00002b68 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00000818 g     F .text	0000000c Led::off()
1fff15d8 g     O .bss	00000004 usb_midi_handleActiveSensing
00002f7c  w    F .text	00000006 tpm2_isr
00002f7c  w    F .text	00000006 dma_ch0_isr
1fff0d3c  w    O .data	00000016 usb_string_serial_number
00002f7c  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... ....}/..5/..
      10:	5/..5/..5/..5/..
      20:	5/..5/..5/..}/..
      30:	}/..5/...5...6..
      40:	}/..}/..}/..}/..
      50:	}/..}/..}/..}/..
      60:	}/..}/..}/..}/..
      70:	}/..}/..}/..}/..
      80:	}/..}/..}/..}/..
      90:	}/..}/..}/..}/..
      a0:	}/..}/..}/..}/..
      b0:	}/..}/..}/..I0..
      c0:	}/..1-..}/..I3..
      d0:	}/..]...}/..}/..
      e0:	}/..}/..}/..}/..
      f0:	}/..}/..}/..}/..
     100:	}/..}/..}/..}/..
     110:	}/......}/..}/..
     120:	}/..}/..}/..}/..
     130:	}/..}/..}/..}/..
     140:	}/..}/..9,..}/..
     150:	}/..}/..}/..}/..
     160:	}/..}/..}/..}/..
     170:	}/..}/..}/..}/..
     180:	}/..}/..}/..}/..
     190:	}/..}/..u1..}/..
     1a0:	}/..}/..}/..}/..
     1b0:	}/..}/..}/..}/..
     1c0:	}/..}/..}/..}/..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	2f84 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	16bc <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	15c0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	15c0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	3628 <__libc_init_array>

	startup_late_hook();
     33a:	bl	2f90 <startup_late_hook>
	main();
     33e:	bl	2c00 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff1594
     374:	.word	0x00004304
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff1594
     380:	.word	0x1fff1bc4
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1594
     42c:	.word	0x00000000
     430:	.word	0x00004308

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1598
     460:	.word	0x00004308
     464:	.word	0x1fff1594
     468:	.word	0x00000000

0000046c <Sequencer::Sequencer()>:
#include "paginator.h"
#include "step.h"
#include "led.h"
#include "piano.h"

Sequencer::Sequencer () {
     46c:	push	{r3, r4, r5, r6, r7, lr}
     46e:	mov	r4, r0
  _controller = new Controller(this);
     470:	movs	r0, #80	; 0x50
     472:	bl	2c14 <operator new(unsigned int)>
     476:	mov	r1, r4
     478:	mov	r5, r0
     47a:	bl	c80 <Controller::Controller(Sequencer*)>
     47e:	str	r5, [r4, #12]
  _transport = new Transport(this);
     480:	movs	r0, #16
     482:	bl	2c14 <operator new(unsigned int)>
     486:	mov	r1, r4
     488:	mov	r5, r0
     48a:	bl	984 <Transport::Transport(Sequencer*)>
     48e:	str	r5, [r4, #8]
  _paginator = new Paginator(this);
     490:	movs	r0, #72	; 0x48
     492:	bl	2c14 <operator new(unsigned int)>
     496:	mov	r1, r4
     498:	mov	r5, r0
     49a:	bl	a80 <Paginator::Paginator(Sequencer*)>
     49e:	str	r5, [r4, #16]
  _piano = new Piano(this);
     4a0:	movs	r0, #20
     4a2:	bl	2c14 <operator new(unsigned int)>
     4a6:	mov	r1, r4
     4a8:	mov	r5, r0
     4aa:	bl	73c <Piano::Piano(Sequencer*)>
  _reversed = false;
     4ae:	movs	r3, #0

Sequencer::Sequencer () {
  _controller = new Controller(this);
  _transport = new Transport(this);
  _paginator = new Paginator(this);
  _piano = new Piano(this);
     4b0:	str	r5, [r4, #0]
  _reversed = false;
     4b2:	strb	r3, [r4, #4]
  _currentStep = 0;
     4b4:	str	r3, [r4, #36]	; 0x24
     4b6:	add.w	r5, r4, #16
     4ba:	add.w	r7, r4, #32

  for (int i = 0; i < 4; i++){
    _steps[i] = new Step(this);
     4be:	movs	r0, #20
     4c0:	bl	2c14 <operator new(unsigned int)>
     4c4:	mov	r1, r4
     4c6:	mov	r6, r0
     4c8:	bl	b4c <Step::Step(Sequencer*)>
     4cc:	str.w	r6, [r5, #4]!
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++){
     4d0:	cmp	r5, r7
     4d2:	bne.n	4be <Sequencer::Sequencer()+0x52>
    _steps[i] = new Step(this);
  }
};
     4d4:	mov	r0, r4
     4d6:	pop	{r3, r4, r5, r6, r7, pc}

000004d8 <Sequencer::tick()>:

void Sequencer::tick() {
     4d8:	push	{r4, lr}
     4da:	mov	r4, r0
  _transport->tick();
     4dc:	ldr	r0, [r0, #8]
     4de:	bl	a68 <Transport::tick()>
  _controller->tick();
     4e2:	ldr	r0, [r4, #12]
}
     4e4:	ldmia.w	sp!, {r4, lr}
  }
};

void Sequencer::tick() {
  _transport->tick();
  _controller->tick();
     4e8:	b.w	e28 <Controller::tick()>

000004ec <Sequencer::reverse()>:
}

void Sequencer::reverse() {
  _reversed = !_reversed;
     4ec:	ldrb	r3, [r0, #4]
     4ee:	eor.w	r3, r3, #1
     4f2:	strb	r3, [r0, #4]
     4f4:	bx	lr
     4f6:	nop

000004f8 <Sequencer::step()>:
}

void Sequencer::step () {  
     4f8:	push	{r4, lr}
     4fa:	mov	r4, r0
  _piano->tick();
     4fc:	ldr	r0, [r0, #0]
     4fe:	bl	760 <Piano::tick()>

  _controller->_leds[_currentStep]->blink();
     502:	ldr	r2, [r4, #36]	; 0x24
     504:	ldr	r3, [r4, #12]
     506:	add.w	r3, r3, r2, lsl #2
     50a:	movs	r1, #0
     50c:	ldr	r0, [r3, #52]	; 0x34
     50e:	bl	7b8 <Led::blink(int)>

  Step* current = _steps[_currentStep];
     512:	ldr	r3, [r4, #36]	; 0x24
     514:	add.w	r2, r4, r3, lsl #2
     518:	ldr	r1, [r2, #20]

  if (current->_state) {
     51a:	ldrb	r2, [r1, #16]
     51c:	cbnz	r2, 536 <Sequencer::step()+0x3e>
    _piano->play(current);
  }

  if (!_reversed) {
     51e:	ldrb	r2, [r4, #4]
     520:	cbnz	r2, 52e <Sequencer::step()+0x36>
    _currentStep++;
     522:	adds	r3, #1
     524:	cmp	r3, #3
     526:	it	gt
     528:	movgt	r3, #0
     52a:	str	r3, [r4, #36]	; 0x24
     52c:	pop	{r4, pc}
      _currentStep = 0;
    }
  } else {
    _currentStep--;

    if (_currentStep == -1) {
     52e:	subs	r2, r3, #1
     530:	cbz	r3, 540 <Sequencer::step()+0x48>

    if (_currentStep > 3) {
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     532:	str	r2, [r4, #36]	; 0x24
     534:	pop	{r4, pc}
  _controller->_leds[_currentStep]->blink();

  Step* current = _steps[_currentStep];

  if (current->_state) {
    _piano->play(current);
     536:	ldr	r0, [r4, #0]
     538:	bl	778 <Piano::play(Step*)>
     53c:	ldr	r3, [r4, #36]	; 0x24
     53e:	b.n	51e <Sequencer::step()+0x26>
    }
  } else {
    _currentStep--;

    if (_currentStep == -1) {
      _currentStep = 3;
     540:	movs	r3, #3
     542:	str	r3, [r4, #36]	; 0x24
     544:	pop	{r4, pc}
     546:	nop

00000548 <Sequencer::resetStep()>:
    }
  }
};

void Sequencer::resetStep () {
  _currentStep = 0;
     548:	movs	r3, #0
     54a:	str	r3, [r0, #36]	; 0x24
     54c:	bx	lr
     54e:	nop

00000550 <Button::Button(int, int, Led*, bool, bool, Controller*)>:
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     550:	push	{r3, r4, r5, r6, r7, lr}
     552:	mov	r4, r0
  Led* led,
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
     554:	str	r1, [r0, #0]
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     556:	ldrb.w	r7, [sp, #24]
     55a:	ldrb.w	r6, [sp, #28]
     55e:	ldr	r5, [sp, #32]
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
  _led = led;
     560:	str	r3, [r0, #52]	; 0x34
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
     562:	mov.w	r1, #1000	; 0x3e8
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
     566:	str	r2, [r0, #24]
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
  _led = led;
  _controller = controller;

  pinMode(pin, INPUT);
     568:	uxtb	r0, r2
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
     56a:	str	r1, [r4, #44]	; 0x2c
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
     56c:	strb	r7, [r4, #16]
  _reverseButton = reverseButton;
     56e:	strb	r6, [r4, #17]
  _holdThreshold = 1000;
  _led = led;
  _controller = controller;
     570:	str	r5, [r4, #48]	; 0x30

  pinMode(pin, INPUT);
     572:	movs	r1, #0
     574:	bl	160c <pinMode>
};
     578:	mov	r0, r4
     57a:	pop	{r3, r4, r5, r6, r7, pc}

0000057c <Button::onPress()>:

void Button::onPress () {
     57c:	push	{r3, r4, r5, lr}
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
     57e:	ldr	r3, [r0, #4]
     580:	cmp	r3, #1
     582:	beq.n	586 <Button::onPress()+0xa>
     584:	pop	{r3, r4, r5, pc}
     586:	mov	r4, r0

  pinMode(pin, INPUT);
};

void Button::onPress () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     588:	ldr	r0, [r0, #48]	; 0x30

  if (_state == HIGH && _shiftButton) {
     58a:	ldrb	r3, [r4, #16]

  pinMode(pin, INPUT);
};

void Button::onPress () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     58c:	ldr	r2, [r0, #76]	; 0x4c
     58e:	ldr	r5, [r2, #16]

  if (_state == HIGH && _shiftButton) {
     590:	cbnz	r3, 5b0 <Button::onPress()+0x34>
      Serial.println("Previous page: ");
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
     592:	ldrb	r3, [r4, #17]
     594:	cmp	r3, #0
     596:	beq.n	584 <Button::onPress()+0x8>
    if (_controller->getShiftMode()) {
     598:	bl	ef8 <Controller::getShiftMode()>
     59c:	cbnz	r0, 5c2 <Button::onPress()+0x46>
      paginator->nextPage();
      Serial.println("Next page: ");
      Serial.println(paginator->getPage());
    } else {
      _controller->_sequencer->reverse();
     59e:	ldr	r3, [r4, #48]	; 0x30
     5a0:	ldr	r0, [r3, #76]	; 0x4c
     5a2:	bl	4ec <Sequencer::reverse()>
      _led->toggle();
     5a6:	ldr	r0, [r4, #52]	; 0x34
    }
  }
}
     5a8:	ldmia.w	sp!, {r3, r4, r5, lr}
      paginator->nextPage();
      Serial.println("Next page: ");
      Serial.println(paginator->getPage());
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
     5ac:	b.w	7ec <Led::toggle()>

void Button::onPress () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
     5b0:	bl	ef8 <Controller::getShiftMode()>
     5b4:	cbz	r0, 5ee <Button::onPress()+0x72>
      paginator->previousPage();
     5b6:	mov	r0, r5
     5b8:	bl	b30 <Paginator::previousPage()>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     5bc:	movs	r1, #15
     5be:	ldr	r0, [pc, #56]	; (5f8 <Button::onPress()+0x7c>)
     5c0:	b.n	5cc <Button::onPress()+0x50>
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
     5c2:	mov	r0, r5
     5c4:	bl	b14 <Paginator::nextPage()>
     5c8:	ldr	r0, [pc, #48]	; (5fc <Button::onPress()+0x80>)
     5ca:	movs	r1, #11
     5cc:	bl	fd4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     5d0:	ldr	r0, [pc, #44]	; (600 <Button::onPress()+0x84>)
     5d2:	bl	2b48 <Print::println()>
      Serial.println("Next page: ");
      Serial.println(paginator->getPage());
     5d6:	mov	r0, r5
     5d8:	bl	a88 <Paginator::getPage()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     5dc:	mov	r1, r0
     5de:	ldr	r0, [pc, #32]	; (600 <Button::onPress()+0x84>)
     5e0:	bl	2be8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     5e4:	ldr	r0, [pc, #24]	; (600 <Button::onPress()+0x84>)
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  }
}
     5e6:	ldmia.w	sp!, {r3, r4, r5, lr}
     5ea:	b.w	2b48 <Print::println()>
    if (_controller->getShiftMode()) {
      paginator->previousPage();
      Serial.println("Previous page: ");
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
     5ee:	ldr	r0, [r4, #48]	; 0x30
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  }
}
     5f0:	ldmia.w	sp!, {r3, r4, r5, lr}
    if (_controller->getShiftMode()) {
      paginator->previousPage();
      Serial.println("Previous page: ");
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
     5f4:	b.w	e54 <Controller::toggleMode()>
     5f8:	.word	0x00003f7c
     5fc:	.word	0x00003f8c
     600:	.word	0x1fff0c48

00000604 <Button::onRelease()>:
    }
  }
}

void Button::onRelease () {
  if (_reverseButton || _shiftButton) return;
     604:	ldrb	r3, [r0, #17]
     606:	cbnz	r3, 63e <Button::onRelease()+0x3a>
     608:	ldrb	r3, [r0, #16]
     60a:	cbnz	r3, 63e <Button::onRelease()+0x3a>
      _led->toggle();
    }
  }
}

void Button::onRelease () {
     60c:	push	{r4, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     60e:	ldr	r3, [pc, #48]	; (640 <Button::onRelease()+0x3c>)
  if (_reverseButton || _shiftButton) return;

  if (timeSincePress() < _holdThreshold) {
     610:	ldr	r1, [r0, #36]	; 0x24
     612:	ldr	r3, [r3, #0]
     614:	ldr	r2, [r0, #44]	; 0x2c
      _led->toggle();
    }
  }
}

void Button::onRelease () {
     616:	sub	sp, #8
     618:	str	r3, [sp, #4]
	return ret;
     61a:	ldr	r3, [sp, #4]
  if (_reverseButton || _shiftButton) return;

  if (timeSincePress() < _holdThreshold) {
     61c:	subs	r3, r3, r1
     61e:	cmp	r2, r3
     620:	bls.n	63a <Button::onRelease()+0x36>
     622:	mov	r4, r0
    _led->toggle();
     624:	ldr	r0, [r0, #52]	; 0x34
     626:	bl	7ec <Led::toggle()>
    _controller->_sequencer->_steps[_id - 1]->toggle();
     62a:	ldr	r3, [r4, #48]	; 0x30
     62c:	ldr	r2, [r4, #0]
     62e:	ldr	r3, [r3, #76]	; 0x4c
     630:	add.w	r3, r3, r2, lsl #2
     634:	ldr	r0, [r3, #16]
     636:	bl	b64 <Step::toggle()>
  } 
};
     63a:	add	sp, #8
     63c:	pop	{r4, pc}
     63e:	bx	lr
     640:	.word	0x1fff15cc

00000644 <Button::tick()>:

void Button::tick () {
     644:	push	{r4, r5, lr}
     646:	mov	r4, r0
     648:	sub	sp, #28
  _current = digitalRead(_pin);
     64a:	ldrb	r0, [r0, #24]
     64c:	bl	15f0 <digitalRead>
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     650:	cmp	r0, #1
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
};

void Button::tick () {
  _current = digitalRead(_pin);
     652:	str	r0, [r4, #28]
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     654:	beq.n	69e <Button::tick()+0x5a>
     656:	ldr	r3, [r4, #36]	; 0x24
     658:	ldr	r5, [pc, #200]	; (724 <Button::tick()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     65a:	ldr	r2, [r5, #0]
     65c:	str	r2, [sp, #16]
	return ret;
     65e:	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     660:	ldr	r1, [pc, #192]	; (724 <Button::tick()+0xe0>)
    _firstHoldTime = millis();
    if (!_controller->getShiftMode()) Serial.println("onHold");
    _controller->enterShiftMode();
  }

  if (timeSincePress() > 10) {    
     662:	subs	r2, r2, r3
     664:	cmp	r2, #10
     666:	bls.n	698 <Button::tick()+0x54>
    if (_state != _current) {
     668:	ldr	r2, [r4, #4]
     66a:	cmp	r0, r2
     66c:	beq.n	698 <Button::tick()+0x54>
      _state = _current;

      if (_state == HIGH) {
     66e:	cmp	r0, #1
    _controller->enterShiftMode();
  }

  if (timeSincePress() > 10) {    
    if (_state != _current) {
      _state = _current;
     670:	str	r0, [r4, #4]

      if (_state == HIGH) {
     672:	beq.n	70c <Button::tick()+0xc8>
     674:	ldr	r2, [r1, #0]
     676:	str	r2, [sp, #20]
	return ret;
     678:	ldr	r2, [sp, #20]
        Serial.println("onPress");      
        onPress();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     67a:	ldr	r1, [r4, #44]	; 0x2c
     67c:	subs	r3, r2, r3
     67e:	cmp	r1, r3
     680:	bls.n	6e0 <Button::tick()+0x9c>
          Serial.println("onHoldRelease");
          _controller->exitShiftMode();
        } else {
          onRelease();
     682:	mov	r0, r4
     684:	bl	604 <Button::onRelease()>
     688:	movs	r1, #9
     68a:	ldr	r0, [pc, #156]	; (728 <Button::tick()+0xe4>)
     68c:	bl	fd4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     690:	ldr	r0, [pc, #152]	; (72c <Button::tick()+0xe8>)
     692:	bl	2b48 <Print::println()>
     696:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     698:	str	r0, [r4, #32]
};
     69a:	add	sp, #28
     69c:	pop	{r4, r5, pc}
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     69e:	ldr	r2, [r4, #32]
     6a0:	cbz	r2, 6d4 <Button::tick()+0x90>

  _previous = _current;
};

bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
     6a2:	cmp	r2, #1
     6a4:	ldr	r3, [r4, #36]	; 0x24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6a6:	ldr	r5, [pc, #124]	; (724 <Button::tick()+0xe0>)
     6a8:	bne.n	65a <Button::tick()+0x16>
     6aa:	ldr	r2, [r5, #0]
     6ac:	str	r2, [sp, #12]
	return ret;
     6ae:	ldr	r2, [sp, #12]

  if (currentWentUp()) {
    _firstTime = millis();
  }

  if (currentIsUp() && timeSincePress() > _holdThreshold) {
     6b0:	ldr	r1, [r4, #44]	; 0x2c
     6b2:	subs	r2, r2, r3
     6b4:	cmp	r1, r2
     6b6:	bcs.n	65a <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6b8:	ldr	r3, [r5, #0]
     6ba:	str	r3, [sp, #8]
	return ret;
     6bc:	ldr	r3, [sp, #8]
    _firstHoldTime = millis();
     6be:	str	r3, [r4, #40]	; 0x28
    if (!_controller->getShiftMode()) Serial.println("onHold");
     6c0:	ldr	r0, [r4, #48]	; 0x30
     6c2:	bl	ef8 <Controller::getShiftMode()>
     6c6:	cbz	r0, 6fc <Button::tick()+0xb8>
    _controller->enterShiftMode();
     6c8:	ldr	r0, [r4, #48]	; 0x30
     6ca:	bl	ee8 <Controller::enterShiftMode()>
     6ce:	ldr	r0, [r4, #28]
     6d0:	ldr	r3, [r4, #36]	; 0x24
     6d2:	b.n	65a <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6d4:	ldr	r5, [pc, #76]	; (724 <Button::tick()+0xe0>)
     6d6:	ldr	r3, [r5, #0]
     6d8:	str	r3, [sp, #4]
	return ret;
     6da:	ldr	r3, [sp, #4]

void Button::tick () {
  _current = digitalRead(_pin);

  if (currentWentUp()) {
    _firstTime = millis();
     6dc:	str	r3, [r4, #36]	; 0x24
     6de:	b.n	65a <Button::tick()+0x16>
     6e0:	movs	r1, #13
     6e2:	ldr	r0, [pc, #76]	; (730 <Button::tick()+0xec>)
     6e4:	bl	fd4 <usb_serial_write>
     6e8:	ldr	r0, [pc, #64]	; (72c <Button::tick()+0xe8>)
     6ea:	bl	2b48 <Print::println()>
        onPress();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
          Serial.println("onHoldRelease");
          _controller->exitShiftMode();
     6ee:	ldr	r0, [r4, #48]	; 0x30
     6f0:	bl	ef0 <Controller::exitShiftMode()>
     6f4:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     6f6:	str	r0, [r4, #32]
};
     6f8:	add	sp, #28
     6fa:	pop	{r4, r5, pc}
     6fc:	movs	r1, #6
     6fe:	ldr	r0, [pc, #52]	; (734 <Button::tick()+0xf0>)
     700:	bl	fd4 <usb_serial_write>
     704:	ldr	r0, [pc, #36]	; (72c <Button::tick()+0xe8>)
     706:	bl	2b48 <Print::println()>
     70a:	b.n	6c8 <Button::tick()+0x84>
     70c:	movs	r1, #7
     70e:	ldr	r0, [pc, #40]	; (738 <Button::tick()+0xf4>)
     710:	bl	fd4 <usb_serial_write>
     714:	ldr	r0, [pc, #20]	; (72c <Button::tick()+0xe8>)
     716:	bl	2b48 <Print::println()>
    if (_state != _current) {
      _state = _current;

      if (_state == HIGH) {
        Serial.println("onPress");      
        onPress();
     71a:	mov	r0, r4
     71c:	bl	57c <Button::onPress()>
     720:	ldr	r0, [r4, #28]
     722:	b.n	698 <Button::tick()+0x54>
     724:	.word	0x1fff15cc
     728:	.word	0x00003fb8
     72c:	.word	0x1fff0c48
     730:	.word	0x00003fa8
     734:	.word	0x00003f98
     738:	.word	0x00003fa0

0000073c <Piano::Piano(Sequencer*)>:
#include <Arduino.h>
#include "note.h"
#include "piano.h"
#include "step.h"

Piano::Piano (Sequencer* sequencer) {
     73c:	push	{r3, r4, r5, r6, r7, lr}
     73e:	mov	r6, r0
     740:	subs	r4, r0, #4
  _sequencer = sequencer;
     742:	str	r1, [r0, #16]
     744:	add.w	r7, r0, #12
  for (int i = 0; i < 4; i++) {
    _notes[i] = new Note();
     748:	movs	r0, #20
     74a:	bl	2c14 <operator new(unsigned int)>
     74e:	mov	r5, r0
     750:	bl	8c8 <Note::Note()>
     754:	str.w	r5, [r4, #4]!
#include "piano.h"
#include "step.h"

Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;
  for (int i = 0; i < 4; i++) {
     758:	cmp	r4, r7
     75a:	bne.n	748 <Piano::Piano(Sequencer*)+0xc>
    _notes[i] = new Note();
  } 
};
     75c:	mov	r0, r6
     75e:	pop	{r3, r4, r5, r6, r7, pc}

00000760 <Piano::tick()>:

void Piano::tick () {
     760:	push	{r3, r4, r5, lr}
     762:	subs	r4, r0, #4
     764:	add.w	r5, r0, #12
  for (int i = 0; i < 4; i++) {
    _notes[i]->tick();
     768:	ldr.w	r0, [r4, #4]!
     76c:	bl	958 <Note::tick()>
    _notes[i] = new Note();
  } 
};

void Piano::tick () {
  for (int i = 0; i < 4; i++) {
     770:	cmp	r4, r5
     772:	bne.n	768 <Piano::tick()+0x8>
    _notes[i]->tick();
  } 
};
     774:	pop	{r3, r4, r5, pc}
     776:	nop

00000778 <Piano::play(Step*)>:
      return _notes[i];
    }
  }
};

void Piano::play (Step* step) {
     778:	push	{r4}
     77a:	subs	r3, r0, #4
     77c:	add.w	r2, r0, #12
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
    if (!_notes[i]->_active) {
     780:	ldr.w	r0, [r3, #4]!
     784:	ldr	r4, [r0, #16]
     786:	cbz	r4, 78c <Piano::play(Step*)+0x14>
    _notes[i]->tick();
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
     788:	cmp	r3, r2
     78a:	bne.n	780 <Piano::play(Step*)+0x8>
};

void Piano::play (Step* step) {
  Note* note = findNote();
  note->play(step);
};
     78c:	ldr.w	r4, [sp], #4
  }
};

void Piano::play (Step* step) {
  Note* note = findNote();
  note->play(step);
     790:	b.w	908 <Note::play(Step*)>

00000794 <Led::Led(int, int)>:
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
     794:	push	{r3, r4, r5, lr}
     796:	mov	r4, r0
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     798:	movs	r3, #0
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     79a:	movs	r5, #75	; 0x4b
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
     79c:	stmia.w	r0, {r1, r2}
  _state = state;
  _blinkLength = 75;
  _blinking = false;

  pinMode(_pin, OUTPUT);
     7a0:	uxtb	r0, r1

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     7a2:	strb	r3, [r4, #16]
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     7a4:	str	r5, [r4, #12]
  _blinking = false;

  pinMode(_pin, OUTPUT);
     7a6:	movs	r1, #1
     7a8:	bl	160c <pinMode>
  digitalWrite(_pin, _state);
     7ac:	ldrb	r0, [r4, #0]
     7ae:	ldrb	r1, [r4, #4]
     7b0:	bl	15e4 <digitalWrite>
};
     7b4:	mov	r0, r4
     7b6:	pop	{r3, r4, r5, pc}

000007b8 <Led::blink(int)>:

void Led::blink (int times) {
     7b8:	push	{r4, r5, r6, lr}
  digitalWrite(_pin, !digitalRead(_pin));
     7ba:	ldrb	r5, [r0, #0]

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     7bc:	sub	sp, #8
     7be:	mov	r4, r0
  digitalWrite(_pin, !digitalRead(_pin));
     7c0:	mov	r0, r5

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     7c2:	mov	r6, r1
  digitalWrite(_pin, !digitalRead(_pin));
     7c4:	bl	15f0 <digitalRead>
     7c8:	clz	r1, r0
     7cc:	lsrs	r1, r1, #5
     7ce:	mov	r0, r5
     7d0:	bl	15e4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7d4:	ldr	r3, [pc, #16]	; (7e8 <Led::blink(int)+0x30>)
  _blinking = true;
  _blinkingCounter = times;
     7d6:	str	r6, [r4, #20]
     7d8:	ldr	r3, [r3, #0]
     7da:	str	r3, [sp, #4]
	return ret;
     7dc:	ldr	r3, [sp, #4]
  _lastBlink = millis();  
     7de:	str	r3, [r4, #8]
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
  digitalWrite(_pin, !digitalRead(_pin));
  _blinking = true;
     7e0:	movs	r2, #1
     7e2:	strb	r2, [r4, #16]
  _blinkingCounter = times;
  _lastBlink = millis();  
};
     7e4:	add	sp, #8
     7e6:	pop	{r4, r5, r6, pc}
     7e8:	.word	0x1fff15cc

000007ec <Led::toggle()>:

void Led::toggle () {
  _state = !_state;
     7ec:	ldr	r1, [r0, #4]
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     7ee:	push	{r4, lr}
  _state = !_state;
     7f0:	clz	r1, r1
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     7f4:	mov	r4, r0
  _state = !_state;
     7f6:	lsrs	r1, r1, #5

  digitalWrite(_pin, _state);
     7f8:	ldrb	r0, [r0, #0]
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
  _state = !_state;
     7fa:	str	r1, [r4, #4]

  digitalWrite(_pin, _state);
     7fc:	bl	15e4 <digitalWrite>

  if (_blinking) {
     800:	ldrb	r3, [r4, #16]
     802:	cbnz	r3, 806 <Led::toggle()+0x1a>
     804:	pop	{r4, pc}
    digitalWrite(_pin, !_state);
     806:	ldr	r1, [r4, #4]
     808:	ldrb	r0, [r4, #0]
     80a:	clz	r1, r1
     80e:	lsrs	r1, r1, #5
  }
};
     810:	ldmia.w	sp!, {r4, lr}
  _state = !_state;

  digitalWrite(_pin, _state);

  if (_blinking) {
    digitalWrite(_pin, !_state);
     814:	b.w	15e4 <digitalWrite>

00000818 <Led::off()>:
  }
};

void Led::off () {
  _blinking = false;
     818:	movs	r1, #0
     81a:	strb	r1, [r0, #16]
  _state = 0;
     81c:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     81e:	ldrb	r0, [r0, #0]
     820:	b.w	15e4 <digitalWrite>

00000824 <Led::on()>:
}

void Led::on () {
  _blinking = false;
     824:	movs	r3, #0
  _state = 1;
     826:	movs	r1, #1
  _state = 0;
  digitalWrite(_pin, _state);
}

void Led::on () {
  _blinking = false;
     828:	strb	r3, [r0, #16]
  _state = 1;
     82a:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     82c:	ldrb	r0, [r0, #0]
     82e:	b.w	15e4 <digitalWrite>
     832:	nop

00000834 <Led::tick()>:

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     834:	push	{r4, r5, r6, lr}
  if (_blinking && blinkTimePassed()) {
     836:	ldrb	r3, [r0, #16]

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     838:	sub	sp, #16
     83a:	mov	r4, r0
  if (_blinking && blinkTimePassed()) {
     83c:	cbz	r3, 870 <Led::tick()+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     83e:	ldr	r5, [pc, #92]	; (89c <Led::tick()+0x68>)
     840:	ldr	r1, [r0, #8]
     842:	ldr	r3, [r5, #0]
     844:	str	r3, [sp, #8]
	return ret;
     846:	ldr	r3, [sp, #8]
     848:	ldr	r2, [r0, #12]
     84a:	subs	r3, r3, r1
     84c:	cmp	r3, r2
     84e:	bls.n	896 <Led::tick()+0x62>
    digitalWrite(_pin, !digitalRead(_pin));
     850:	ldrb	r6, [r0, #0]
     852:	mov	r0, r6
     854:	bl	15f0 <digitalRead>
     858:	clz	r1, r0
     85c:	lsrs	r1, r1, #5
     85e:	mov	r0, r6
     860:	bl	15e4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     864:	ldr	r3, [r5, #0]
     866:	str	r3, [sp, #4]
	return ret;
     868:	ldr	r3, [sp, #4]
    _blinking = false;
    _lastBlink = millis();        
     86a:	str	r3, [r4, #8]
};

void Led::tick () {
  if (_blinking && blinkTimePassed()) {
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
     86c:	movs	r3, #0
     86e:	strb	r3, [r4, #16]
    _lastBlink = millis();        
  }

  if (!_blinking && _blinkingCounter > 0 && blinkTimePassed()) {
     870:	ldr	r1, [r4, #20]
     872:	cmp	r1, #0
     874:	ble.n	896 <Led::tick()+0x62>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     876:	ldr	r3, [pc, #36]	; (89c <Led::tick()+0x68>)
     878:	ldr	r0, [r4, #8]
     87a:	ldr	r3, [r3, #0]
     87c:	str	r3, [sp, #12]
	return ret;
     87e:	ldr	r3, [sp, #12]
     880:	ldr	r2, [r4, #12]
     882:	subs	r3, r3, r0
     884:	cmp	r3, r2
     886:	bls.n	896 <Led::tick()+0x62>
    blink(_blinkingCounter - 1);
     888:	subs	r1, #1
     88a:	mov	r0, r4
     88c:	bl	7b8 <Led::blink(int)>
    _blinkingCounter--;
     890:	ldr	r3, [r4, #20]
     892:	subs	r3, #1
     894:	str	r3, [r4, #20]
  }
};
     896:	add	sp, #16
     898:	pop	{r4, r5, r6, pc}
     89a:	nop
     89c:	.word	0x1fff15cc

000008a0 <setup>:
#include <Arduino.h>
#include "sequencer.h"

Sequencer* sequencer = new Sequencer();

void setup() {
     8a0:	bx	lr
     8a2:	nop

000008a4 <loop>:
  Serial.begin(9600);
}

void loop() {
  sequencer->tick();
     8a4:	ldr	r3, [pc, #4]	; (8ac <loop+0x8>)
     8a6:	ldr	r0, [r3, #0]
     8a8:	b.w	4d8 <Sequencer::tick()>
     8ac:	.word	0x1fff15b0

000008b0 <_GLOBAL__sub_I_sequencer>:
     8b0:	push	{r4, lr}
#include <Arduino.h>
#include "sequencer.h"

Sequencer* sequencer = new Sequencer();
     8b2:	movs	r0, #40	; 0x28
     8b4:	bl	2c14 <operator new(unsigned int)>
     8b8:	mov	r4, r0
     8ba:	bl	46c <Sequencer::Sequencer()>
     8be:	ldr	r3, [pc, #4]	; (8c4 <_GLOBAL__sub_I_sequencer+0x14>)
     8c0:	str	r4, [r3, #0]
     8c2:	pop	{r4, pc}
     8c4:	.word	0x1fff15b0

000008c8 <Note::Note()>:
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     8c8:	movs	r2, #0
     8ca:	str	r2, [r0, #8]
  _pitch = 0;
     8cc:	str	r2, [r0, #0]
  _velocity = 0;
     8ce:	str	r2, [r0, #4]
  _channel = 0;
     8d0:	str	r2, [r0, #12]
  _active = false;
     8d2:	str	r2, [r0, #16]
#include "step.h"
#include "note.h"

Note::Note () {
  reset();
};
     8d4:	bx	lr
     8d6:	nop

000008d8 <Note::noteOn(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     8d8:	subs	r1, #1
// First parameter is the event type (0x09 = note on, 0x08 = note off).
// Second parameter is note-on/note-off, combined with the channel.
// Channel can be anything between 0-15. Typically reported to the user as 1-16.
// Third parameter is the note number (48 = middle C).
// Fourth parameter is the velocity (64 = normal, 127 = fastest).
void Note::noteOn(byte channel, byte pitch, byte velocity) {
     8da:	push	{r3, lr}
     8dc:	lsls	r1, r1, #8
     8de:	lsls	r3, r3, #24
     8e0:	and.w	r1, r1, #3840	; 0xf00
     8e4:	and.w	r3, r3, #2130706432	; 0x7f000000
     8e8:	orrs	r3, r1
     8ea:	lsls	r2, r2, #16
     8ec:	orr.w	r3, r3, #36864	; 0x9000
     8f0:	orr.w	r3, r3, #9
     8f4:	and.w	r0, r2, #8323072	; 0x7f0000
     8f8:	orrs	r0, r3
     8fa:	bl	1870 <usb_midi_write_packed>
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};
     8fe:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     902:	b.w	190c <usb_midi_flush_output>
     906:	nop

00000908 <Note::play(Step*)>:
};

void Note::play(Step* step) {
  _active = true;
  _length = step->length;
  _pitch = step->pitch;
     908:	ldr	r2, [r1, #4]
  _velocity = step->velocity;
     90a:	ldr	r3, [r1, #8]
  _active = false;
};

void Note::play(Step* step) {
  _active = true;
  _length = step->length;
     90c:	ldr	r1, [r1, #12]
     90e:	str	r1, [r0, #8]
  _velocity = 0;
  _channel = 0;
  _active = false;
};

void Note::play(Step* step) {
     910:	push	{r4}
  _active = true;
     912:	movs	r1, #1
  _length = step->length;
  _pitch = step->pitch;
  _velocity = step->velocity;
     914:	stmia.w	r0, {r2, r3}
  _channel = 0;
  _active = false;
};

void Note::play(Step* step) {
  _active = true;
     918:	str	r1, [r0, #16]
  _length = step->length;
  _pitch = step->pitch;
  _velocity = step->velocity;
  // String noteLog = "Playing note, length: ";
  // Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
     91a:	uxtb	r3, r3
     91c:	uxtb	r2, r2
     91e:	ldrb	r1, [r0, #12]
};
     920:	ldr.w	r4, [sp], #4
  _length = step->length;
  _pitch = step->pitch;
  _velocity = step->velocity;
  // String noteLog = "Playing note, length: ";
  // Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
     924:	b.w	8d8 <Note::noteOn(unsigned char, unsigned char, unsigned char)>

00000928 <Note::noteOff(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     928:	subs	r1, #1
void Note::noteOn(byte channel, byte pitch, byte velocity) {
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};

void Note::noteOff(byte channel, byte pitch, byte velocity) {
     92a:	push	{r3, lr}
     92c:	lsls	r1, r1, #8
     92e:	lsls	r3, r3, #24
     930:	and.w	r1, r1, #3840	; 0xf00
     934:	and.w	r3, r3, #2130706432	; 0x7f000000
     938:	orrs	r3, r1
     93a:	lsls	r2, r2, #16
     93c:	orr.w	r3, r3, #32768	; 0x8000
     940:	orr.w	r3, r3, #8
     944:	and.w	r0, r2, #8323072	; 0x7f0000
     948:	orrs	r0, r3
     94a:	bl	1870 <usb_midi_write_packed>
  usbMIDI.sendNoteOff(pitch, velocity, channel);
  usbMIDI.send_now();
};
     94e:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     952:	b.w	190c <usb_midi_flush_output>
     956:	nop

00000958 <Note::tick()>:
Note::Note () {
  reset();
};

void Note::tick() {
  if (!_active) return;
     958:	ldr	r2, [r0, #16]
     95a:	cbz	r2, 966 <Note::tick()+0xe>

  _length--;
     95c:	ldr	r2, [r0, #8]
     95e:	subs	r2, #1

  if (_length <= 0) {
     960:	cmp	r2, #0
};

void Note::tick() {
  if (!_active) return;

  _length--;
     962:	str	r2, [r0, #8]

  if (_length <= 0) {
     964:	ble.n	968 <Note::tick()+0x10>
     966:	bx	lr

Note::Note () {
  reset();
};

void Note::tick() {
     968:	push	{r4, lr}
  _length--;

  if (_length <= 0) {
    // String noteLog = "Note off, pitch: ";
    // Serial.println(noteLog + _pitch);    
    noteOff(_channel, _pitch, _velocity);
     96a:	ldrb	r3, [r0, #4]
     96c:	ldrb	r2, [r0, #0]
     96e:	ldrb	r1, [r0, #12]
     970:	mov	r4, r0
     972:	bl	928 <Note::noteOff(unsigned char, unsigned char, unsigned char)>
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     976:	movs	r3, #0
     978:	str	r3, [r4, #8]
  _pitch = 0;
     97a:	str	r3, [r4, #0]
  _velocity = 0;
     97c:	str	r3, [r4, #4]
  _channel = 0;
     97e:	str	r3, [r4, #12]
  _active = false;
     980:	str	r3, [r4, #16]
     982:	pop	{r4, pc}

00000984 <Transport::Transport(Sequencer*)>:
// and its job is also to tell the sequence when the next step starts
// its then responsibility of the controller to create the note and its responsibility
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
     984:	push	{r4}
  _sequencer = sequencer;
  _state = false;
  max_ppqn = 24;
     986:	movs	r4, #24
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     988:	movs	r2, #0
  max_ppqn = 24;
     98a:	stmia.w	r0, {r1, r4}
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     98e:	str	r2, [r0, #12]
  max_ppqn = 24;
  ppqn = 0;
     990:	str	r2, [r0, #8]
};
     992:	ldr.w	r4, [sp], #4
     996:	bx	lr

00000998 <Transport::controlTempo(int)>:
int Transport::getPPQN () {
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
     998:	cmp.w	r1, #400	; 0x190
     99c:	bge.n	9ae <Transport::controlTempo(int)+0x16>
    max_ppqn = 6;

    if (ppqn >= 6) {
     99e:	ldr	r3, [r0, #8]
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     9a0:	movs	r2, #6

    if (ppqn >= 6) {
     9a2:	cmp	r3, #5
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     9a4:	str	r2, [r0, #4]

    if (ppqn >= 6) {
     9a6:	ble.n	9c4 <Transport::controlTempo(int)+0x2c>
      ppqn = 0;
     9a8:	movs	r3, #0
     9aa:	str	r3, [r0, #8]
     9ac:	bx	lr
    }
  } else if (value >= 400 && value < 800) {
     9ae:	sub.w	r3, r1, #400	; 0x190
     9b2:	cmp.w	r3, #400	; 0x190
     9b6:	bcc.n	9c6 <Transport::controlTempo(int)+0x2e>
    max_ppqn = 8;

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 800 && value <= 1023) {
     9b8:	sub.w	r1, r1, #800	; 0x320
     9bc:	cmp	r1, #223	; 0xdf
    max_ppqn = 10;
     9be:	itt	ls
     9c0:	movls	r3, #10
     9c2:	strls	r3, [r0, #4]
     9c4:	bx	lr
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;

    if (ppqn >= 8) {
     9c6:	ldr	r3, [r0, #8]

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     9c8:	movs	r2, #8

    if (ppqn >= 8) {
     9ca:	cmp	r3, #7

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     9cc:	str	r2, [r0, #4]

    if (ppqn >= 8) {
     9ce:	bgt.n	9a8 <Transport::controlTempo(int)+0x10>
     9d0:	bx	lr
     9d2:	nop

000009d4 <Transport::startPPQN()>:
    _sequencer->step(); 
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     9d4:	push	{r4, lr}
  _state = true;
  ppqn = 0;
     9d6:	movs	r3, #0
    _sequencer->step(); 
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     9d8:	mov	r4, r0
  _state = true;
     9da:	movs	r2, #1
  ppqn = 0;
     9dc:	str	r3, [r0, #8]
    ppqn = 0;
  }
};

void Transport::startPPQN () {
  _state = true;
     9de:	str	r2, [r0, #12]
  ppqn = 0;
  _sequencer->step(); 
     9e0:	ldr	r0, [r0, #0]
     9e2:	bl	4f8 <Sequencer::step()>
  _sequencer->_controller->_leds[5]->toggle();
     9e6:	ldr	r3, [r4, #0]
     9e8:	ldr	r3, [r3, #12]
};
     9ea:	ldmia.w	sp!, {r4, lr}

void Transport::startPPQN () {
  _state = true;
  ppqn = 0;
  _sequencer->step(); 
  _sequencer->_controller->_leds[5]->toggle();
     9ee:	ldr	r0, [r3, #72]	; 0x48
     9f0:	b.w	7ec <Led::toggle()>

000009f4 <Transport::stopPPQN()>:
};

void Transport::stopPPQN () {
     9f4:	push	{r4, lr}
  _state = false;
     9f6:	movs	r3, #0
  ppqn = 0;
  _sequencer->step(); 
  _sequencer->_controller->_leds[5]->toggle();
};

void Transport::stopPPQN () {
     9f8:	mov	r4, r0
  _state = false;
     9fa:	str	r3, [r0, #12]
  ppqn = 0;
     9fc:	str	r3, [r0, #8]
  _sequencer->resetStep();
     9fe:	ldr	r0, [r0, #0]
     a00:	bl	548 <Sequencer::resetStep()>
  _sequencer->_controller->_leds[5]->toggle();
     a04:	ldr	r3, [r4, #0]
     a06:	ldr	r3, [r3, #12]
};
     a08:	ldmia.w	sp!, {r4, lr}

void Transport::stopPPQN () {
  _state = false;
  ppqn = 0;
  _sequencer->resetStep();
  _sequencer->_controller->_leds[5]->toggle();
     a0c:	ldr	r0, [r3, #72]	; 0x48
     a0e:	b.w	7ec <Led::toggle()>
     a12:	nop

00000a14 <Transport::processMidi()>:
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     a14:	ldr	r3, [pc, #68]	; (a5c <Transport::processMidi()+0x48>)
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     a16:	ldrb	r3, [r3, #0]
     a18:	cmp	r3, #250	; 0xfa
     a1a:	beq.n	a4c <Transport::processMidi()+0x38>
     a1c:	cmp	r3, #252	; 0xfc
     a1e:	beq.n	a48 <Transport::processMidi()+0x34>
     a20:	cmp	r3, #248	; 0xf8
    max_ppqn = 10;
  }
};

  // move midi to midi class
void Transport::processMidi () {
     a22:	push	{r4, lr}
     a24:	mov	r4, r0
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     a26:	beq.n	a3a <Transport::processMidi()+0x26>
     a28:	movs	r1, #35	; 0x23
     a2a:	ldr	r0, [pc, #52]	; (a60 <Transport::processMidi()+0x4c>)
     a2c:	bl	fd4 <usb_serial_write>
     a30:	ldr	r0, [pc, #48]	; (a64 <Transport::processMidi()+0x50>)
      break;

    default:
      Serial.println("Opps, an unknown MIDI message type!");
  }
}
     a32:	ldmia.w	sp!, {r4, lr}
     a36:	b.w	2b48 <Print::println()>

void Transport::advancePPQN () {
  ++ppqn;
     a3a:	ldr	r3, [r0, #8]

  if (ppqn == max_ppqn) {
     a3c:	ldr	r1, [r0, #4]
      Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     a3e:	adds	r3, #1

  if (ppqn == max_ppqn) {
     a40:	cmp	r3, r1
      Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     a42:	str	r3, [r0, #8]

  if (ppqn == max_ppqn) {
     a44:	beq.n	a50 <Transport::processMidi()+0x3c>
     a46:	pop	{r4, pc}
    case usbMIDI.Start: // 0xFA
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      stopPPQN();
     a48:	b.w	9f4 <Transport::stopPPQN()>
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      startPPQN();
     a4c:	b.w	9d4 <Transport::startPPQN()>

void Transport::advancePPQN () {
  ++ppqn;

  if (ppqn == max_ppqn) {
    _sequencer->step(); 
     a50:	ldr	r0, [r0, #0]
     a52:	bl	4f8 <Sequencer::step()>
    ppqn = 0;
     a56:	movs	r3, #0
     a58:	str	r3, [r4, #8]
     a5a:	pop	{r4, pc}
     a5c:	.word	0x1fff1a88
     a60:	.word	0x00003fc4
     a64:	.word	0x1fff0c48

00000a68 <Transport::tick()>:
  _state = false;
  max_ppqn = 24;
  ppqn = 0;
};

void Transport::tick () {
     a68:	push	{r4, lr}
     a6a:	mov	r4, r0
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     a6c:	movs	r0, #0
     a6e:	bl	1938 <usb_midi_read>
  if (usbMIDI.read()) {
     a72:	cbnz	r0, a76 <Transport::tick()+0xe>
     a74:	pop	{r4, pc}
    processMidi();
     a76:	mov	r0, r4
  }
};
     a78:	ldmia.w	sp!, {r4, lr}
  ppqn = 0;
};

void Transport::tick () {
  if (usbMIDI.read()) {
    processMidi();
     a7c:	b.w	a14 <Transport::processMidi()>

00000a80 <Paginator::Paginator(Sequencer*)>:
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
  _currentPage = 0;
     a80:	movs	r2, #0
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
     a82:	str	r1, [r0, #4]
  _currentPage = 0;
     a84:	str	r2, [r0, #0]
    {0,0,0,0},
    {0,0,0,0},
    {0,0,0,0},
    {0,0,0,0}
  };
};
     a86:	bx	lr

00000a88 <Paginator::getPage()>:

int Paginator::getPage () {
  return _currentPage;
};
     a88:	ldr	r0, [r0, #0]
     a8a:	bx	lr

00000a8c <Paginator::changePage(int)>:
  };
};

// copy the steps of the current sequence into
// the state of the paginator
void Paginator::changePage (int direction) {
     a8c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a90:	mov	r6, r0
     a92:	mov	r7, r1
  for (size_t i = 0; i < 4; i++) {
     a94:	movs	r5, #0
    // put current page steps in memory
    _pages[_currentPage][i] = _sequencer->_steps[i];
     a96:	ldr	r2, [r6, #4]
     a98:	ldr	r3, [r6, #0]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     a9a:	ldr	r0, [pc, #116]	; (b10 <Paginator::changePage(int)+0x84>)
     a9c:	adds	r4, r5, #4
     a9e:	lsls	r4, r4, #2
     aa0:	add	r2, r4
     aa2:	add.w	r3, r5, r3, lsl #2
     aa6:	ldr	r2, [r2, #4]
     aa8:	adds	r3, #2
     aaa:	ldr	r1, [r2, #4]
     aac:	str.w	r2, [r6, r3, lsl #2]
     ab0:	bl	2be8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ab4:	ldr	r0, [pc, #88]	; (b10 <Paginator::changePage(int)+0x84>)
     ab6:	bl	2b48 <Print::println()>
    Serial.println(memoryStep->pitch); 

    // create new 4 steps
    // here i will load the steps from memory
    // when there was already a page
    if (_pages[_currentPage + direction][i] == 0) {
     aba:	ldr	r3, [r6, #0]
     abc:	add	r3, r7
     abe:	add.w	r3, r5, r3, lsl #2
     ac2:	adds	r3, #2
     ac4:	ldr.w	r2, [r6, r3, lsl #2]
     ac8:	cbz	r2, af4 <Paginator::changePage(int)+0x68>
      _sequencer->_steps[i] = new Step(_sequencer);
    } else {
      _sequencer->_steps[i] = _pages[_currentPage + direction][i];
     aca:	ldr	r3, [r6, #4]
     acc:	add	r4, r3
     ace:	str	r2, [r4, #4]
    }

    // toggle the leds for the new steps
    Step * newStep = _sequencer->_steps[i];
    Led * newStepLed = _sequencer->_controller->_leds[i];
     ad0:	ldr	r3, [r3, #12]

    if (newStep->_state == 0) {
     ad2:	ldrb	r2, [r2, #16]
      _sequencer->_steps[i] = _pages[_currentPage + direction][i];
    }

    // toggle the leds for the new steps
    Step * newStep = _sequencer->_steps[i];
    Led * newStepLed = _sequencer->_controller->_leds[i];
     ad4:	add.w	r3, r3, r5, lsl #2
     ad8:	ldr	r3, [r3, #52]	; 0x34

    if (newStep->_state == 0) {
      newStepLed->off();
     ada:	mov	r0, r3

    // toggle the leds for the new steps
    Step * newStep = _sequencer->_steps[i];
    Led * newStepLed = _sequencer->_controller->_leds[i];

    if (newStep->_state == 0) {
     adc:	cbnz	r2, aec <Paginator::changePage(int)+0x60>
      newStepLed->off();
     ade:	bl	818 <Led::off()>
};

// copy the steps of the current sequence into
// the state of the paginator
void Paginator::changePage (int direction) {
  for (size_t i = 0; i < 4; i++) {
     ae2:	adds	r5, #1
     ae4:	cmp	r5, #4
     ae6:	bne.n	a96 <Paginator::changePage(int)+0xa>
      newStepLed->off();
    } else {
      newStepLed->on();
    }
  }  
};
     ae8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Led * newStepLed = _sequencer->_controller->_leds[i];

    if (newStep->_state == 0) {
      newStepLed->off();
    } else {
      newStepLed->on();
     aec:	mov	r0, r3
     aee:	bl	824 <Led::on()>
     af2:	b.n	ae2 <Paginator::changePage(int)+0x56>

    // create new 4 steps
    // here i will load the steps from memory
    // when there was already a page
    if (_pages[_currentPage + direction][i] == 0) {
      _sequencer->_steps[i] = new Step(_sequencer);
     af4:	movs	r0, #20
     af6:	bl	2c14 <operator new(unsigned int)>
     afa:	ldr	r1, [r6, #4]
     afc:	mov	r8, r0
     afe:	bl	b4c <Step::Step(Sequencer*)>
     b02:	ldr	r3, [r6, #4]
     b04:	add	r4, r3
     b06:	mov	r2, r8
     b08:	str.w	r8, [r4, #4]
     b0c:	b.n	ad0 <Paginator::changePage(int)+0x44>
     b0e:	nop
     b10:	.word	0x1fff0c48

00000b14 <Paginator::nextPage()>:
int Paginator::getPage () {
  return _currentPage;
};

void Paginator::nextPage () {
  if (_currentPage < 3) {
     b14:	ldr	r2, [r0, #0]
     b16:	cmp	r2, #2
     b18:	ble.n	b1c <Paginator::nextPage()+0x8>
     b1a:	bx	lr

int Paginator::getPage () {
  return _currentPage;
};

void Paginator::nextPage () {
     b1c:	push	{r4, lr}
     b1e:	mov	r4, r0
  if (_currentPage < 3) {
    changePage(1);
     b20:	movs	r1, #1
     b22:	bl	a8c <Paginator::changePage(int)>
    _currentPage++;
     b26:	ldr	r3, [r4, #0]
     b28:	adds	r3, #1
     b2a:	str	r3, [r4, #0]
     b2c:	pop	{r4, pc}
     b2e:	nop

00000b30 <Paginator::previousPage()>:
  }
};

void Paginator::previousPage () {
  if (_currentPage > 0) {
     b30:	ldr	r2, [r0, #0]
     b32:	cmp	r2, #0
     b34:	ble.n	b4a <Paginator::previousPage()+0x1a>
    changePage(1);
    _currentPage++;
  }
};

void Paginator::previousPage () {
     b36:	push	{r4, lr}
     b38:	mov	r4, r0
  if (_currentPage > 0) {
    changePage(-1);
     b3a:	mov.w	r1, #4294967295
     b3e:	bl	a8c <Paginator::changePage(int)>
    _currentPage--;
     b42:	ldr	r3, [r4, #0]
     b44:	subs	r3, #1
     b46:	str	r3, [r4, #0]
     b48:	pop	{r4, pc}
     b4a:	bx	lr

00000b4c <Step::Step(Sequencer*)>:
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
     b4c:	push	{r4, r5, r6}
  _state = false;
     b4e:	movs	r6, #0
  _sequencer = sequencer;
  pitch = 38;
     b50:	movs	r5, #38	; 0x26
  velocity = 100;
     b52:	movs	r4, #100	; 0x64
  length = 1;
     b54:	movs	r2, #1
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
     b56:	strb	r6, [r0, #16]
  _sequencer = sequencer;
  pitch = 38;
     b58:	str	r5, [r0, #4]
  velocity = 100;
     b5a:	str	r4, [r0, #8]
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
     b5c:	str	r1, [r0, #0]
  pitch = 38;
  velocity = 100;
  length = 1;
     b5e:	str	r2, [r0, #12]
};
     b60:	pop	{r4, r5, r6}
     b62:	bx	lr

00000b64 <Step::toggle()>:

void Step::toggle () {
  _state = !_state;
     b64:	ldrb	r3, [r0, #16]
     b66:	eor.w	r3, r3, #1
     b6a:	strb	r3, [r0, #16]
     b6c:	bx	lr
     b6e:	nop

00000b70 <Step::controlLength(int)>:
  // String controlLog = "Control length raw value: ";
  // Serial.println(controlLog + value);
  int newValue = map(value, 0, 1000, 4, 0); // <- hack i guess
  // String controlLog2 = "Control length: ";
  // Serial.println(controlLog2 + newValue);
  length = newValue;
     b70:	ldr	r3, [pc, #20]	; (b88 <Step::controlLength(int)+0x18>)
     b72:	sub.w	r1, r1, r1, lsl #2
     b76:	smull	r2, r3, r3, r1
     b7a:	asrs	r1, r1, #31
     b7c:	rsb	r1, r1, r3, asr #8
     b80:	adds	r1, #4
     b82:	str	r1, [r0, #12]
     b84:	bx	lr
     b86:	nop
     b88:	.word	0x4178749f

00000b8c <Step::controlPitch(int)>:
};

void Step::controlPitch (int value) {
  int newValue = map(value, 0, 1023, 51, 38);
  pitch = newValue;
     b8c:	sub.w	r1, r1, r1, lsl #2
     b90:	lsls	r1, r1, #2
     b92:	it	mi
     b94:	addwmi	r1, r1, #1023	; 0x3ff
     b98:	asrs	r1, r1, #10
     b9a:	adds	r1, #51	; 0x33
     b9c:	str	r1, [r0, #4]
     b9e:	bx	lr

00000ba0 <Step::controlVelocity(int)>:
};

void Step::controlVelocity (int value) {
  int newValue = map(value, 0, 1023, 127, 63);
  velocity = newValue;
     ba0:	subs.w	r1, r1, r1, lsl #6
     ba4:	it	mi
     ba6:	addwmi	r1, r1, #1023	; 0x3ff
     baa:	asrs	r1, r1, #10
     bac:	adds	r1, #127	; 0x7f
     bae:	str	r1, [r0, #8]
     bb0:	bx	lr
     bb2:	nop

00000bb4 <Knob::Knob(unsigned char, int, Controller*)>:
#include "controller.h"
#include "step.h"
#include "sequencer.h"
#include "transport.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
     bb4:	push	{r4, r5}
  _pin = pin;
  _id = id;
  _controller = controller;
  _value = 0;
     bb6:	movs	r5, #0
     bb8:	str	r5, [r0, #4]
#include "step.h"
#include "sequencer.h"
#include "transport.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
  _pin = pin;
     bba:	str	r1, [r0, #0]
  _id = id;
     bbc:	str	r2, [r0, #12]
  _controller = controller;
     bbe:	str	r3, [r0, #16]
  _value = 0;
};
     bc0:	pop	{r4, r5}
     bc2:	bx	lr

00000bc4 <Knob::onChange()>:

void Knob::onChange () {
     bc4:	push	{r4, lr}
     bc6:	movs	r1, #13
     bc8:	mov	r4, r0
     bca:	ldr	r0, [pc, #128]	; (c4c <Knob::onChange()+0x88>)
     bcc:	bl	fd4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     bd0:	ldr	r0, [pc, #124]	; (c50 <Knob::onChange()+0x8c>)
     bd2:	bl	2b48 <Print::println()>
  Serial.println("Knob onChange");
  if (_id == 5) {
     bd6:	ldr	r3, [r4, #12]
     bd8:	cmp	r3, #5
     bda:	beq.n	c10 <Knob::onChange()+0x4c>
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
     bdc:	ldr	r0, [r4, #16]
     bde:	bl	f00 <Controller::getMode()>
     be2:	cmp	r0, #1
     be4:	beq.n	c20 <Knob::onChange()+0x5c>
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
     be6:	ldr	r0, [r4, #16]
     be8:	bl	f00 <Controller::getMode()>
     bec:	cbz	r0, bfa <Knob::onChange()+0x36>
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
     bee:	ldr	r0, [r4, #16]
     bf0:	bl	f00 <Controller::getMode()>
     bf4:	cmp	r0, #2
     bf6:	beq.n	c36 <Knob::onChange()+0x72>
     bf8:	pop	{r4, pc}
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
     bfa:	ldr	r3, [r4, #16]
     bfc:	ldr	r2, [r4, #12]
     bfe:	ldr	r3, [r3, #76]	; 0x4c
     c00:	ldr	r1, [r4, #4]
     c02:	add.w	r3, r3, r2, lsl #2
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
  }
}
     c06:	ldmia.w	sp!, {r4, lr}
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
     c0a:	ldr	r0, [r3, #20]
     c0c:	b.w	b8c <Step::controlPitch(int)>
};

void Knob::onChange () {
  Serial.println("Knob onChange");
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
     c10:	ldr	r3, [r4, #16]
     c12:	ldr	r1, [r4, #4]
     c14:	ldr	r3, [r3, #76]	; 0x4c
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
  }
}
     c16:	ldmia.w	sp!, {r4, lr}
};

void Knob::onChange () {
  Serial.println("Knob onChange");
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
     c1a:	ldr	r0, [r3, #8]
     c1c:	b.w	998 <Transport::controlTempo(int)>
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
     c20:	ldr	r3, [r4, #16]
     c22:	ldr	r2, [r4, #12]
     c24:	ldr	r3, [r3, #76]	; 0x4c
     c26:	ldr	r1, [r4, #4]
     c28:	add.w	r3, r3, r2, lsl #2
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
  }
}
     c2c:	ldmia.w	sp!, {r4, lr}
void Knob::onChange () {
  Serial.println("Knob onChange");
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
     c30:	ldr	r0, [r3, #20]
     c32:	b.w	ba0 <Step::controlVelocity(int)>
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
     c36:	ldr	r3, [r4, #16]
     c38:	ldr	r2, [r4, #12]
     c3a:	ldr	r3, [r3, #76]	; 0x4c
     c3c:	ldr	r1, [r4, #4]
     c3e:	add.w	r3, r3, r2, lsl #2
  }
}
     c42:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
     c46:	ldr	r0, [r3, #20]
     c48:	b.w	b70 <Step::controlLength(int)>
     c4c:	.word	0x00003fe8
     c50:	.word	0x1fff0c48

00000c54 <Knob::tick()>:
  }
}

// todo latch
void Knob::tick () {
     c54:	push	{r4, lr}
     c56:	mov	r4, r0
  _value = analogRead(_pin);
     c58:	ldrb	r0, [r0, #0]
     c5a:	bl	1400 <analogRead>

  int diff = abs(_value - _lastValue);
     c5e:	ldr	r3, [r4, #8]
  }
}

// todo latch
void Knob::tick () {
  _value = analogRead(_pin);
     c60:	str	r0, [r4, #4]

  int diff = abs(_value - _lastValue);

  // "filter"
  const boolean isChanging = _value != _lastValue && diff > 10;
     c62:	cmp	r0, r3
     c64:	beq.n	c7c <Knob::tick()+0x28>
     c66:	subs	r0, r0, r3
     c68:	cmp	r0, #0
     c6a:	it	lt
     c6c:	neglt	r0, r0
     c6e:	cmp	r0, #10
     c70:	ble.n	c7c <Knob::tick()+0x28>

  if (isChanging) {
    onChange();
     c72:	mov	r0, r4
     c74:	bl	bc4 <Knob::onChange()>

    _lastValue = _value;
     c78:	ldr	r3, [r4, #4]
     c7a:	str	r3, [r4, #8]
     c7c:	pop	{r4, pc}
     c7e:	nop

00000c80 <Controller::Controller(Sequencer*)>:
#include "button.h"
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"

Controller::Controller (Sequencer* sequencer) {
     c80:	push	{r4, r5, r6, r7, lr}
  _sequencer = sequencer;
  _currentMode = PITCH;
     c82:	movs	r5, #0
#include "button.h"
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"

Controller::Controller (Sequencer* sequencer) {
     c84:	sub	sp, #20
     c86:	mov	r4, r0
  _sequencer = sequencer;
     c88:	str	r1, [r0, #76]	; 0x4c
  _currentMode = PITCH;
     c8a:	strb.w	r5, [r0, #49]	; 0x31
  _shiftMode = false;
     c8e:	strb.w	r5, [r0, #48]	; 0x30
  
  _leds[0] = new Led(3, LOW);
     c92:	movs	r0, #24
     c94:	bl	2c14 <operator new(unsigned int)>
     c98:	mov	r2, r5
     c9a:	mov	r6, r0
     c9c:	movs	r1, #3
     c9e:	bl	794 <Led::Led(int, int)>
     ca2:	str	r6, [r4, #52]	; 0x34
  _leds[1] = new Led(5, LOW);
     ca4:	movs	r0, #24
     ca6:	bl	2c14 <operator new(unsigned int)>
     caa:	mov	r2, r5
     cac:	mov	r6, r0
     cae:	movs	r1, #5
     cb0:	bl	794 <Led::Led(int, int)>
     cb4:	str	r6, [r4, #56]	; 0x38
  _leds[2] = new Led(7, LOW);
     cb6:	movs	r0, #24
     cb8:	bl	2c14 <operator new(unsigned int)>
     cbc:	mov	r2, r5
     cbe:	mov	r6, r0
     cc0:	movs	r1, #7
     cc2:	bl	794 <Led::Led(int, int)>
     cc6:	str	r6, [r4, #60]	; 0x3c
  _leds[3] = new Led(9, LOW);
     cc8:	movs	r0, #24
     cca:	bl	2c14 <operator new(unsigned int)>
     cce:	mov	r2, r5
     cd0:	mov	r6, r0
     cd2:	movs	r1, #9
     cd4:	bl	794 <Led::Led(int, int)>
     cd8:	str	r6, [r4, #64]	; 0x40
  _leds[4] = new Led(11, LOW);
     cda:	movs	r0, #24
     cdc:	bl	2c14 <operator new(unsigned int)>
     ce0:	mov	r2, r5
     ce2:	mov	r6, r0
     ce4:	movs	r1, #11
     ce6:	bl	794 <Led::Led(int, int)>
     cea:	str	r6, [r4, #68]	; 0x44
  _leds[5] = new Led(24, LOW);
     cec:	movs	r0, #24
     cee:	bl	2c14 <operator new(unsigned int)>
     cf2:	mov	r2, r5
     cf4:	movs	r1, #24
     cf6:	mov	r6, r0
     cf8:	bl	794 <Led::Led(int, int)>
     cfc:	str	r6, [r4, #72]	; 0x48

  _leds[4]->toggle();
     cfe:	ldr	r0, [r4, #68]	; 0x44
     d00:	bl	7ec <Led::toggle()>
  _leds[5]->toggle();
     d04:	ldr	r0, [r4, #72]	; 0x48
     d06:	bl	7ec <Led::toggle()>

  _buttons[0] = new Button(1, step1pin, _leds[0], false, false, this);
     d0a:	movs	r0, #56	; 0x38
     d0c:	bl	2c14 <operator new(unsigned int)>
     d10:	ldr	r3, [r4, #52]	; 0x34
     d12:	str	r5, [sp, #4]
     d14:	mov	r6, r0
     d16:	str	r5, [sp, #0]
     d18:	movs	r2, #2
     d1a:	movs	r1, #1
     d1c:	str	r4, [sp, #8]
     d1e:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     d22:	str	r6, [r4, #0]
  _buttons[1] = new Button(2, step2pin, _leds[1], false, false, this);
     d24:	movs	r0, #56	; 0x38
     d26:	bl	2c14 <operator new(unsigned int)>
     d2a:	ldr	r3, [r4, #56]	; 0x38
     d2c:	str	r5, [sp, #4]
     d2e:	mov	r6, r0
     d30:	str	r5, [sp, #0]
     d32:	movs	r2, #4
     d34:	movs	r1, #2
     d36:	str	r4, [sp, #8]
     d38:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     d3c:	str	r6, [r4, #4]
  _buttons[2] = new Button(3, step3pin, _leds[2], false, false, this);
     d3e:	movs	r0, #56	; 0x38
     d40:	bl	2c14 <operator new(unsigned int)>
     d44:	ldr	r3, [r4, #60]	; 0x3c
     d46:	str	r5, [sp, #4]
     d48:	mov	r6, r0
     d4a:	str	r5, [sp, #0]
     d4c:	movs	r2, #6
     d4e:	movs	r1, #3
     d50:	str	r4, [sp, #8]
     d52:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     d56:	str	r6, [r4, #8]
  _buttons[3] = new Button(4, step4pin, _leds[3], false, false, this);
     d58:	movs	r0, #56	; 0x38
     d5a:	bl	2c14 <operator new(unsigned int)>
     d5e:	ldr	r3, [r4, #64]	; 0x40
     d60:	str	r5, [sp, #4]
     d62:	mov	r6, r0
     d64:	str	r5, [sp, #0]
     d66:	movs	r2, #8
     d68:	movs	r1, #4
     d6a:	str	r4, [sp, #8]
     d6c:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     d70:	str	r6, [r4, #12]
  _buttons[4] = new Button(5, shiftPin, _leds[4], true, false, this);
     d72:	movs	r0, #56	; 0x38
     d74:	bl	2c14 <operator new(unsigned int)>
     d78:	movs	r6, #1
     d7a:	ldr	r3, [r4, #68]	; 0x44
     d7c:	str	r5, [sp, #4]
     d7e:	mov	r7, r0
     d80:	movs	r2, #10
     d82:	movs	r1, #5
     d84:	str	r4, [sp, #8]
     d86:	str	r6, [sp, #0]
     d88:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     d8c:	str	r7, [r4, #16]
  _buttons[5] = new Button(6, playPin, _leds[5], false, true, this);
     d8e:	movs	r0, #56	; 0x38
     d90:	bl	2c14 <operator new(unsigned int)>
     d94:	ldr	r3, [r4, #72]	; 0x48
     d96:	str	r4, [sp, #8]
     d98:	mov	r7, r0
     d9a:	stmia.w	sp, {r5, r6}
     d9e:	movs	r2, #12
     da0:	movs	r1, #6
     da2:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     da6:	str	r7, [r4, #20]

  _knobs[0] = new Knob(A0, 0, this);
     da8:	movs	r0, #20
     daa:	bl	2c14 <operator new(unsigned int)>
     dae:	mov	r3, r4
     db0:	mov	r2, r5
     db2:	mov	r7, r0
     db4:	movs	r1, #14
     db6:	bl	bb4 <Knob::Knob(unsigned char, int, Controller*)>
     dba:	str	r7, [r4, #24]
  _knobs[1] = new Knob(A1, 1, this);
     dbc:	movs	r0, #20
     dbe:	bl	2c14 <operator new(unsigned int)>
     dc2:	mov	r3, r4
     dc4:	mov	r2, r6
     dc6:	mov	r5, r0
     dc8:	movs	r1, #15
     dca:	bl	bb4 <Knob::Knob(unsigned char, int, Controller*)>
     dce:	str	r5, [r4, #28]
  _knobs[2] = new Knob(A2, 2, this);
     dd0:	movs	r0, #20
     dd2:	bl	2c14 <operator new(unsigned int)>
     dd6:	mov	r3, r4
     dd8:	mov	r5, r0
     dda:	movs	r2, #2
     ddc:	movs	r1, #16
     dde:	bl	bb4 <Knob::Knob(unsigned char, int, Controller*)>
     de2:	str	r5, [r4, #32]
  _knobs[3] = new Knob(A3, 3, this);
     de4:	movs	r0, #20
     de6:	bl	2c14 <operator new(unsigned int)>
     dea:	mov	r3, r4
     dec:	mov	r5, r0
     dee:	movs	r2, #3
     df0:	movs	r1, #17
     df2:	bl	bb4 <Knob::Knob(unsigned char, int, Controller*)>
     df6:	str	r5, [r4, #36]	; 0x24
  _knobs[4] = new Knob(A4, 4, this);
     df8:	movs	r0, #20
     dfa:	bl	2c14 <operator new(unsigned int)>
     dfe:	mov	r3, r4
     e00:	mov	r5, r0
     e02:	movs	r2, #4
     e04:	movs	r1, #18
     e06:	bl	bb4 <Knob::Knob(unsigned char, int, Controller*)>
     e0a:	str	r5, [r4, #40]	; 0x28
  _knobs[5] = new Knob(A5, 5, this);
     e0c:	movs	r0, #20
     e0e:	bl	2c14 <operator new(unsigned int)>
     e12:	mov	r3, r4
     e14:	movs	r2, #5
     e16:	movs	r1, #19
     e18:	mov	r5, r0
     e1a:	bl	bb4 <Knob::Knob(unsigned char, int, Controller*)>
};
     e1e:	mov	r0, r4
  _knobs[0] = new Knob(A0, 0, this);
  _knobs[1] = new Knob(A1, 1, this);
  _knobs[2] = new Knob(A2, 2, this);
  _knobs[3] = new Knob(A3, 3, this);
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
     e20:	str	r5, [r4, #44]	; 0x2c
};
     e22:	add	sp, #20
     e24:	pop	{r4, r5, r6, r7, pc}
     e26:	nop

00000e28 <Controller::tick()>:

void Controller::tick() {
     e28:	push	{r3, r4, r5, r6, r7, lr}
     e2a:	add.w	r7, r0, #20
     e2e:	mov	r6, r7
     e30:	subs	r4, r0, #4
     e32:	add.w	r5, r0, #48	; 0x30
  for (size_t i = 0; i < 6; i++) {
    _buttons[i]->tick();
     e36:	ldr.w	r0, [r4, #4]!
     e3a:	bl	644 <Button::tick()>
    _leds[i]->tick();
     e3e:	ldr.w	r0, [r5, #4]!
     e42:	bl	834 <Led::tick()>
    _knobs[i]->tick();
     e46:	ldr.w	r0, [r6, #4]!
     e4a:	bl	c54 <Knob::tick()>
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
};

void Controller::tick() {
  for (size_t i = 0; i < 6; i++) {
     e4e:	cmp	r4, r7
     e50:	bne.n	e36 <Controller::tick()+0xe>
    _buttons[i]->tick();
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}
     e52:	pop	{r3, r4, r5, r6, r7, pc}

00000e54 <Controller::toggleMode()>:

void Controller::toggleMode () {
     e54:	push	{r3, r4, r5, lr}
  if (_currentMode == PITCH) {
     e56:	ldrb.w	r3, [r0, #49]	; 0x31
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}

void Controller::toggleMode () {
     e5a:	mov	r4, r0
  if (_currentMode == PITCH) {
     e5c:	cbz	r3, e68 <Controller::toggleMode()+0x14>
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
     e5e:	cmp	r3, #1
     e60:	beq.n	eb0 <Controller::toggleMode()+0x5c>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
     e62:	cmp	r3, #2
     e64:	beq.n	e8a <Controller::toggleMode()+0x36>
     e66:	pop	{r3, r4, r5, pc}
  }
}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
     e68:	movs	r3, #1
     e6a:	strb.w	r3, [r0, #49]	; 0x31
     e6e:	movs	r1, #8
     e70:	ldr	r0, [pc, #100]	; (ed8 <Controller::toggleMode()+0x84>)
     e72:	bl	fd4 <usb_serial_write>
     e76:	ldr	r0, [pc, #100]	; (edc <Controller::toggleMode()+0x88>)
     e78:	bl	2b48 <Print::println()>
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
     e7c:	ldr	r0, [r4, #68]	; 0x44
     e7e:	movw	r1, #999	; 0x3e7
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
     e82:	ldmia.w	sp!, {r3, r4, r5, lr}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
     e86:	b.w	7b8 <Led::blink(int)>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
     e8a:	movs	r5, #0
     e8c:	strb.w	r5, [r0, #49]	; 0x31
     e90:	movs	r1, #5
     e92:	ldr	r0, [pc, #76]	; (ee0 <Controller::toggleMode()+0x8c>)
     e94:	bl	fd4 <usb_serial_write>
     e98:	ldr	r0, [pc, #64]	; (edc <Controller::toggleMode()+0x88>)
     e9a:	bl	2b48 <Print::println()>
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
     e9e:	ldr	r0, [r4, #68]	; 0x44
     ea0:	mov	r1, r5
     ea2:	bl	7b8 <Led::blink(int)>
    _leds[4]->on();
     ea6:	ldr	r0, [r4, #68]	; 0x44
  }
};
     ea8:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
     eac:	b.w	824 <Led::on()>
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
     eb0:	movs	r3, #2
     eb2:	strb.w	r3, [r0, #49]	; 0x31
     eb6:	movs	r1, #10
     eb8:	ldr	r0, [pc, #40]	; (ee4 <Controller::toggleMode()+0x90>)
     eba:	bl	fd4 <usb_serial_write>
     ebe:	ldr	r0, [pc, #28]	; (edc <Controller::toggleMode()+0x88>)
     ec0:	bl	2b48 <Print::println()>
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
     ec4:	ldr	r0, [r4, #68]	; 0x44
     ec6:	movs	r1, #0
     ec8:	bl	7b8 <Led::blink(int)>
    _leds[4]->off();
     ecc:	ldr	r0, [r4, #68]	; 0x44
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
     ece:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
     ed2:	b.w	818 <Led::off()>
     ed6:	nop
     ed8:	.word	0x00003ff8
     edc:	.word	0x1fff0c48
     ee0:	.word	0x00004010
     ee4:	.word	0x00004004

00000ee8 <Controller::enterShiftMode()>:
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
  _shiftMode = true;
     ee8:	movs	r3, #1
     eea:	strb.w	r3, [r0, #48]	; 0x30
     eee:	bx	lr

00000ef0 <Controller::exitShiftMode()>:
};

void Controller::exitShiftMode () {
  _shiftMode = false;
     ef0:	movs	r3, #0
     ef2:	strb.w	r3, [r0, #48]	; 0x30
     ef6:	bx	lr

00000ef8 <Controller::getShiftMode()>:
};

bool Controller::getShiftMode () {
  return _shiftMode;
};
     ef8:	ldrb.w	r0, [r0, #48]	; 0x30
     efc:	bx	lr
     efe:	nop

00000f00 <Controller::getMode()>:

Modes Controller::getMode() {
  return _currentMode;
};
     f00:	ldrb.w	r0, [r0, #49]	; 0x31
     f04:	bx	lr
     f06:	nop

00000f08 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     f08:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
     f0a:	ldr	r5, [pc, #60]	; (f48 <usb_serial_getchar+0x40>)
     f0c:	ldr	r0, [r5, #0]
     f0e:	cbz	r0, f30 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
     f10:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
     f12:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     f14:	adds	r1, r0, r3
     f16:	adds	r3, #1
	if (i >= rx_packet->len) {
     f18:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     f1a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
     f1c:	bcs.n	f24 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
     f1e:	strh	r3, [r0, #2]
	}
	return c;
     f20:	mov	r0, r4
}
     f22:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
     f24:	bl	1db4 <usb_free>
		rx_packet = NULL;
     f28:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
     f2a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
     f2c:	str	r3, [r5, #0]
     f2e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f30:	ldr	r3, [pc, #24]	; (f4c <usb_serial_getchar+0x44>)
     f32:	ldrb	r3, [r3, #0]
     f34:	cbz	r3, f42 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     f36:	movs	r0, #2
     f38:	bl	1e00 <usb_rx>
     f3c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
     f3e:	cmp	r0, #0
     f40:	bne.n	f10 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f42:	mov.w	r0, #4294967295
     f46:	pop	{r3, r4, r5, pc}
     f48:	.word	0x1fff15c0
     f4c:	.word	0x1fff1720

00000f50 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
     f50:	push	{r4, lr}
	if (!rx_packet) {
     f52:	ldr	r4, [pc, #36]	; (f78 <usb_serial_peekchar+0x28>)
     f54:	ldr	r0, [r4, #0]
     f56:	cbz	r0, f60 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
     f58:	ldrh	r3, [r0, #2]
     f5a:	add	r0, r3
     f5c:	ldrb	r0, [r0, #8]
}
     f5e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f60:	ldr	r3, [pc, #24]	; (f7c <usb_serial_peekchar+0x2c>)
     f62:	ldrb	r3, [r3, #0]
     f64:	cbz	r3, f72 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     f66:	movs	r0, #2
     f68:	bl	1e00 <usb_rx>
     f6c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
     f6e:	cmp	r0, #0
     f70:	bne.n	f58 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f72:	mov.w	r0, #4294967295
     f76:	pop	{r4, pc}
     f78:	.word	0x1fff15c0
     f7c:	.word	0x1fff1720

00000f80 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     f80:	ldr	r3, [pc, #16]	; (f94 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
     f82:	ldr	r2, [pc, #20]	; (f98 <usb_serial_available+0x18>)
     f84:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
     f86:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     f88:	cbz	r3, f92 <usb_serial_available+0x12>
     f8a:	ldrh	r2, [r3, #0]
     f8c:	ldrh	r3, [r3, #2]
     f8e:	subs	r3, r2, r3
     f90:	add	r0, r3
	return count;
}
     f92:	bx	lr
     f94:	.word	0x1fff15c0
     f98:	.word	0x1fff1bb4

00000f9c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
     f9c:	ldr	r3, [pc, #44]	; (fcc <usb_serial_flush_input+0x30>)
     f9e:	ldrb	r3, [r3, #0]
     fa0:	cbz	r3, fca <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
     fa2:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
     fa4:	ldr	r4, [pc, #40]	; (fd0 <usb_serial_flush_input+0x34>)
     fa6:	ldr	r0, [r4, #0]
     fa8:	cbz	r0, fbe <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
     faa:	bl	1db4 <usb_free>
		rx_packet = NULL;
     fae:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     fb0:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
     fb2:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     fb4:	bl	1e00 <usb_rx>
		if (!rx) break;
     fb8:	cbz	r0, fc8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
     fba:	bl	1db4 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     fbe:	movs	r0, #2
     fc0:	bl	1e00 <usb_rx>
		if (!rx) break;
     fc4:	cmp	r0, #0
     fc6:	bne.n	fba <usb_serial_flush_input+0x1e>
     fc8:	pop	{r4, pc}
     fca:	bx	lr
     fcc:	.word	0x1fff1720
     fd0:	.word	0x1fff15c0

00000fd4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     fd4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     fd8:	ldr.w	r9, [pc, #248]	; 10d4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     fdc:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     fde:	movs	r2, #1
     fe0:	strb.w	r2, [r9]
	while (size > 0) {
     fe4:	str	r1, [sp, #4]
     fe6:	cbz	r1, 1044 <usb_serial_write+0x70>
     fe8:	ldr.w	r8, [pc, #236]	; 10d8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     fec:	ldr	r7, [pc, #212]	; (10c4 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
     fee:	ldr	r6, [sp, #4]
     ff0:	mov	fp, r0
		if (!tx_packet) {
     ff2:	ldr.w	r0, [r8]
     ff6:	cbz	r0, 1066 <usb_serial_write+0x92>
     ff8:	ldr	r5, [pc, #204]	; (10c8 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
     ffa:	ldrh	r4, [r0, #2]
     ffc:	rsb	r1, r4, #64	; 0x40
    1000:	cmp	r1, r6
    1002:	it	cs
    1004:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1006:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    100a:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    100c:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1010:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1012:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1014:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1018:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    101c:	cbz	r1, 1034 <usb_serial_write+0x60>
    101e:	subs	r4, #1
    1020:	add	r2, r4
    1022:	add	r1, fp
    1024:	ldrb.w	r4, [fp], #1
    1028:	strb.w	r4, [r2, #1]!
    102c:	cmp	fp, r1
    102e:	bne.n	1024 <usb_serial_write+0x50>
    1030:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1034:	cmp.w	lr, #63	; 0x3f
    1038:	bhi.n	1052 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    103a:	ldr	r2, [pc, #144]	; (10cc <usb_serial_write+0xf8>)
    103c:	movs	r1, #5
    103e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1040:	cmp	r6, #0
    1042:	bne.n	ff2 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1044:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1046:	movs	r3, #0
    1048:	strb.w	r3, [r9]
	return ret;
}
    104c:	add	sp, #12
    104e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1052:	movs	r2, #64	; 0x40
    1054:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1056:	mov	r1, r0
    1058:	movs	r0, #3
    105a:	bl	1f50 <usb_tx>
			tx_packet = NULL;
    105e:	movs	r2, #0
    1060:	str.w	r2, [r8]
    1064:	b.n	103a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1066:	ldrb	r2, [r7, #0]
    1068:	cbz	r2, 10b4 <usb_serial_write+0xe0>
    106a:	ldr	r4, [pc, #100]	; (10d0 <usb_serial_write+0xfc>)
    106c:	ldr	r5, [pc, #88]	; (10c8 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    106e:	mov.w	sl, #1
    1072:	b.n	1084 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1074:	subs	r4, #1
    1076:	beq.n	10a6 <usb_serial_write+0xd2>
    1078:	ldrb	r2, [r5, #0]
    107a:	cbnz	r2, 10a6 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    107c:	bl	2a54 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1080:	ldrb	r2, [r7, #0]
    1082:	cbz	r2, 10b4 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1084:	movs	r0, #3
    1086:	bl	1e3c <usb_tx_packet_count>
    108a:	cmp	r0, #7
    108c:	bhi.n	1074 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    108e:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1092:	bl	1d74 <usb_malloc>
    1096:	str.w	r0, [r8]
					if (tx_packet) break;
    109a:	cmp	r0, #0
    109c:	bne.n	ffa <usb_serial_write+0x26>
					tx_noautoflush = 0;
    109e:	ldr	r3, [pc, #52]	; (10d4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    10a0:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    10a2:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    10a4:	bne.n	1078 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    10a6:	movs	r3, #1
					return -1;
    10a8:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    10ac:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    10ae:	add	sp, #12
    10b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    10b4:	movs	r3, #0
					return -1;
    10b6:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    10ba:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    10be:	add	sp, #12
    10c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10c4:	.word	0x1fff1720
    10c8:	.word	0x1fff15bc
    10cc:	.word	0x1fff15b4
    10d0:	.word	0x00014821
    10d4:	.word	0x1fff15b5
    10d8:	.word	0x1fff15b8

000010dc <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    10dc:	push	{lr}
    10de:	sub	sp, #12
    10e0:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    10e2:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    10e4:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    10e8:	mov	r0, r3
    10ea:	bl	fd4 <usb_serial_write>
}
    10ee:	add	sp, #12
    10f0:	ldr.w	pc, [sp], #4

000010f4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    10f4:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    10f6:	ldr	r5, [pc, #56]	; (1130 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    10f8:	ldr	r4, [pc, #56]	; (1134 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    10fa:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    10fc:	movs	r3, #1
    10fe:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1100:	cbz	r0, 110e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1102:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1104:	movs	r3, #0
    1106:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1108:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    110c:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    110e:	ldr	r3, [pc, #40]	; (1138 <usb_serial_write_buffer_free+0x44>)
    1110:	ldrb	r3, [r3, #0]
    1112:	cbnz	r3, 111a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1114:	movs	r0, #0
    1116:	strb	r0, [r4, #0]
			return 0;
    1118:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    111a:	movs	r0, #3
    111c:	bl	1e3c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1120:	cmp	r0, #7
    1122:	bhi.n	1114 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1124:	bl	1d74 <usb_malloc>
    1128:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    112a:	cmp	r0, #0
    112c:	bne.n	1102 <usb_serial_write_buffer_free+0xe>
    112e:	b.n	1114 <usb_serial_write_buffer_free+0x20>
    1130:	.word	0x1fff15b8
    1134:	.word	0x1fff15b5
    1138:	.word	0x1fff1720

0000113c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    113c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    113e:	ldr	r3, [pc, #68]	; (1184 <usb_serial_flush_output+0x48>)
    1140:	ldrb	r3, [r3, #0]
    1142:	cbz	r3, 1168 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1144:	ldr	r6, [pc, #64]	; (1188 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1146:	ldr	r5, [pc, #68]	; (118c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1148:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    114a:	movs	r7, #1
    114c:	strb	r7, [r5, #0]
	if (tx_packet) {
    114e:	cbz	r4, 116a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1150:	ldr	r2, [pc, #60]	; (1190 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1152:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1154:	movs	r7, #0
    1156:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1158:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    115a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    115c:	movs	r0, #3
    115e:	bl	1f50 <usb_tx>
		tx_packet = NULL;
    1162:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1164:	movs	r3, #0
    1166:	strb	r3, [r5, #0]
    1168:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    116a:	bl	1d74 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    116e:	ldr	r3, [pc, #32]	; (1190 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1170:	cbz	r0, 117e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1172:	mov	r1, r0
    1174:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1176:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1178:	bl	1f50 <usb_tx>
    117c:	b.n	1164 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    117e:	strb	r7, [r3, #0]
    1180:	b.n	1164 <usb_serial_flush_output+0x28>
    1182:	nop
    1184:	.word	0x1fff1720
    1188:	.word	0x1fff15b8
    118c:	.word	0x1fff15b5
    1190:	.word	0x1fff15b4

00001194 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1194:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1196:	ldr	r3, [pc, #56]	; (11d0 <usb_serial_flush_callback+0x3c>)
    1198:	ldrb	r3, [r3, #0]
    119a:	cbnz	r3, 11ba <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    119c:	ldr	r4, [pc, #52]	; (11d4 <usb_serial_flush_callback+0x40>)
    119e:	ldr	r1, [r4, #0]
    11a0:	cbz	r1, 11bc <usb_serial_flush_callback+0x28>
    11a2:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    11a6:	ldrh	r3, [r1, #2]
    11a8:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    11aa:	movs	r0, #3
    11ac:	bl	1f50 <usb_tx>
		tx_packet = NULL;
    11b0:	str	r5, [r4, #0]
    11b2:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    11b4:	ldr	r3, [pc, #32]	; (11d8 <usb_serial_flush_callback+0x44>)
    11b6:	movs	r2, #1
    11b8:	strb	r2, [r3, #0]
    11ba:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    11bc:	bl	1d74 <usb_malloc>
		if (tx) {
    11c0:	cmp	r0, #0
    11c2:	beq.n	11b4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    11c4:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    11c6:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    11ca:	movs	r0, #3
    11cc:	b.w	1f50 <usb_tx>
    11d0:	.word	0x1fff15b5
    11d4:	.word	0x1fff15b8
    11d8:	.word	0x1fff15b4

000011dc <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    11dc:	ldr	r2, [pc, #220]	; (12bc <wait_for_cal+0xe0>)
    11de:	ldr	r1, [pc, #224]	; (12c0 <wait_for_cal+0xe4>)
    11e0:	ldr	r3, [r2, #0]
    11e2:	lsls	r3, r3, #24
    11e4:	bmi.n	11e0 <wait_for_cal+0x4>
    11e6:	ldr	r3, [r1, #0]
    11e8:	ands.w	r3, r3, #128	; 0x80
    11ec:	bne.n	11e0 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    11ee:	cpsid	i
	if (calibrating) {
    11f0:	ldr	r1, [pc, #208]	; (12c4 <wait_for_cal+0xe8>)
    11f2:	ldrb	r2, [r1, #0]
    11f4:	cmp	r2, #0
    11f6:	beq.n	12b8 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    11f8:	ldr	r2, [pc, #204]	; (12c8 <wait_for_cal+0xec>)
    11fa:	ldr	r0, [pc, #208]	; (12cc <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    11fc:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    11fe:	ldr	r4, [pc, #208]	; (12d0 <wait_for_cal+0xf4>)
    1200:	ldr	r7, [r2, #0]
    1202:	ldr	r6, [r0, #0]
    1204:	ldr	r5, [r4, #0]
    1206:	ldr	r4, [r2, #12]
    1208:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    120a:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    120c:	adds	r2, #20
    120e:	ldr	r0, [r0, #0]
    1210:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1212:	ldr	r7, [pc, #192]	; (12d4 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1214:	add	r5, r6
    1216:	add	r4, r5
    1218:	add	r0, r4
    121a:	add	r2, r0
    121c:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1220:	ldr	r6, [pc, #180]	; (12d8 <wait_for_cal+0xfc>)
    1222:	ldr	r0, [pc, #184]	; (12dc <wait_for_cal+0x100>)
    1224:	ldr	r5, [pc, #184]	; (12e0 <wait_for_cal+0x104>)
    1226:	ldr	r4, [pc, #188]	; (12e4 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1228:	orr.w	r2, r2, #32768	; 0x8000
    122c:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    122e:	ldr	r7, [r6, #0]
    1230:	ldr	r6, [r0, #0]
    1232:	ldr	r5, [r5, #0]
    1234:	ldr	r2, [pc, #176]	; (12e8 <wait_for_cal+0x10c>)
    1236:	ldr	r4, [r4, #0]
    1238:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    123a:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    123c:	ldr	r0, [r0, #0]
    123e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1240:	ldr	r7, [pc, #168]	; (12ec <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1242:	add	r5, r6
    1244:	add	r4, r5
    1246:	add	r0, r4
    1248:	add	r2, r0
    124a:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    124e:	ldr	r6, [pc, #160]	; (12f0 <wait_for_cal+0x114>)
    1250:	ldr	r0, [pc, #160]	; (12f4 <wait_for_cal+0x118>)
    1252:	ldr	r5, [pc, #164]	; (12f8 <wait_for_cal+0x11c>)
    1254:	ldr	r4, [pc, #164]	; (12fc <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1256:	orr.w	r2, r2, #32768	; 0x8000
    125a:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    125c:	ldr	r7, [r6, #0]
    125e:	ldr	r6, [r0, #0]
    1260:	ldr	r5, [r5, #0]
    1262:	ldr	r2, [pc, #156]	; (1300 <wait_for_cal+0x124>)
    1264:	ldr	r4, [r4, #0]
    1266:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1268:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    126a:	ldr	r0, [r0, #0]
    126c:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    126e:	ldr	r7, [pc, #148]	; (1304 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1270:	add	r5, r6
    1272:	add	r4, r5
    1274:	add	r0, r4
    1276:	add	r2, r0
    1278:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    127c:	ldr	r6, [pc, #136]	; (1308 <wait_for_cal+0x12c>)
    127e:	ldr	r0, [pc, #140]	; (130c <wait_for_cal+0x130>)
    1280:	ldr	r5, [pc, #140]	; (1310 <wait_for_cal+0x134>)
    1282:	ldr	r4, [pc, #144]	; (1314 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1284:	orr.w	r2, r2, #32768	; 0x8000
    1288:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    128a:	ldr	r7, [r6, #0]
    128c:	ldr	r6, [r0, #0]
    128e:	ldr	r5, [r5, #0]
    1290:	ldr	r2, [pc, #132]	; (1318 <wait_for_cal+0x13c>)
    1292:	ldr	r4, [r4, #0]
    1294:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1296:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1298:	ldr	r0, [r0, #0]
    129a:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    129c:	add	r5, r6
    129e:	add	r4, r5
    12a0:	add	r0, r4
    12a2:	add	r2, r0
    12a4:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    12a8:	ldr	r0, [pc, #112]	; (131c <wait_for_cal+0x140>)
    12aa:	orr.w	r2, r2, #32768	; 0x8000
    12ae:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    12b0:	strb	r3, [r1, #0]
	}
	__enable_irq();
    12b2:	cpsie	i
}
    12b4:	pop	{r4, r5, r6, r7}
    12b6:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    12b8:	cpsie	i
    12ba:	bx	lr
    12bc:	.word	0x4003b024
    12c0:	.word	0x400bb024
    12c4:	.word	0x1fff15c6
    12c8:	.word	0x4003b038
    12cc:	.word	0x4003b03c
    12d0:	.word	0x4003b040
    12d4:	.word	0x4003b02c
    12d8:	.word	0x4003b058
    12dc:	.word	0x4003b05c
    12e0:	.word	0x4003b060
    12e4:	.word	0x4003b064
    12e8:	.word	0x4003b06c
    12ec:	.word	0x4003b030
    12f0:	.word	0x400bb038
    12f4:	.word	0x400bb03c
    12f8:	.word	0x400bb040
    12fc:	.word	0x400bb044
    1300:	.word	0x400bb04c
    1304:	.word	0x400bb02c
    1308:	.word	0x400bb058
    130c:	.word	0x400bb05c
    1310:	.word	0x400bb060
    1314:	.word	0x400bb064
    1318:	.word	0x400bb06c
    131c:	.word	0x400bb030

00001320 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1320:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1322:	ldr	r0, [pc, #164]	; (13c8 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1324:	ldr	r2, [pc, #164]	; (13cc <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1326:	ldr	r3, [pc, #168]	; (13d0 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1328:	ldr	r5, [pc, #168]	; (13d4 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    132a:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    132c:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    132e:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1330:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1332:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1334:	ldr	r4, [pc, #160]	; (13d8 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1336:	cmp	r3, #8
    1338:	beq.n	139c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    133a:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    133c:	ldr	r0, [pc, #156]	; (13dc <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    133e:	ldr	r1, [pc, #160]	; (13e0 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1340:	beq.n	13b2 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1342:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1344:	ite	eq
    1346:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1348:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    134a:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    134c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    134e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1350:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1352:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1354:	ldr	r3, [pc, #140]	; (13e4 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1356:	ldr	r1, [pc, #144]	; (13e8 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1358:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    135a:	ldr	r2, [pc, #144]	; (13ec <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    135c:	cbz	r3, 138e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    135e:	movs	r3, #1
    1360:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1362:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1364:	ldr	r3, [pc, #136]	; (13f0 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1366:	ldr	r1, [pc, #140]	; (13f4 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1368:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    136a:	ldr	r2, [pc, #140]	; (13f8 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    136c:	cmp	r3, #1
    136e:	bls.n	13be <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1370:	cmp	r3, #4
    1372:	bls.n	1394 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1374:	cmp	r3, #8
    1376:	bls.n	13b6 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1378:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    137a:	ite	ls
    137c:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    137e:	movhi	r3, #135	; 0x87
    1380:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1382:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1384:	ldr	r3, [pc, #116]	; (13fc <analog_init+0xdc>)
    1386:	movs	r2, #1
    1388:	strb	r2, [r3, #0]
}
    138a:	pop	{r4, r5}
    138c:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    138e:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1390:	str	r3, [r2, #0]
    1392:	b.n	1364 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1394:	movs	r3, #132	; 0x84
    1396:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1398:	str	r3, [r2, #0]
    139a:	b.n	1384 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    139c:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13a0:	ldr	r1, [pc, #60]	; (13e0 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    13a2:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    13a4:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13a6:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    13a8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13aa:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    13ac:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13ae:	str	r3, [r1, #0]
    13b0:	b.n	1354 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    13b2:	movs	r2, #57	; 0x39
    13b4:	b.n	13a6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    13b6:	movs	r3, #133	; 0x85
    13b8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    13ba:	str	r3, [r2, #0]
    13bc:	b.n	1384 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    13be:	movs	r3, #128	; 0x80
    13c0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    13c2:	str	r3, [r2, #0]
    13c4:	b.n	1384 <analog_init+0x64>
    13c6:	nop
    13c8:	.word	0x40074000
    13cc:	.word	0x40074001
    13d0:	.word	0x1fff0c40
    13d4:	.word	0x4003b008
    13d8:	.word	0x4003b00c
    13dc:	.word	0x400bb008
    13e0:	.word	0x400bb00c
    13e4:	.word	0x1fff15c9
    13e8:	.word	0x4003b020
    13ec:	.word	0x400bb020
    13f0:	.word	0x1fff0c41
    13f4:	.word	0x4003b024
    13f8:	.word	0x400bb024
    13fc:	.word	0x1fff15c6

00001400 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1400:	cmp	r0, #71	; 0x47
    1402:	bhi.n	1464 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1404:	ldr	r3, [pc, #204]	; (14d4 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1406:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    140a:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    140c:	cmp	r6, #255	; 0xff
    140e:	beq.n	1468 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1410:	ldr	r3, [pc, #196]	; (14d8 <analogRead+0xd8>)
    1412:	ldrb	r3, [r3, #0]
    1414:	cmp	r3, #0
    1416:	bne.n	146e <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1418:	lsls	r2, r6, #24
    141a:	bmi.n	1476 <analogRead+0x76>
#endif

	__disable_irq();
    141c:	cpsid	i
    141e:	ldr	r5, [pc, #188]	; (14dc <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1420:	ldr	r4, [pc, #188]	; (14e0 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1422:	mov	r7, r5
    1424:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1426:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1428:	strb	r3, [r5, #0]
	__enable_irq();
    142a:	cpsie	i
	while (1) {
		__disable_irq();
    142c:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    142e:	ldr	r3, [r4, #0]
    1430:	lsls	r3, r3, #24
    1432:	bmi.n	144e <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1434:	ldrb	r3, [r7, #0]
    1436:	cbnz	r3, 1440 <analogRead+0x40>
    1438:	b.n	1424 <analogRead+0x24>
    143a:	ldrb	r3, [r5, #0]
    143c:	cmp	r3, #0
    143e:	beq.n	1424 <analogRead+0x24>
		__enable_irq();
    1440:	cpsie	i
		yield();
    1442:	bl	2a54 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1446:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1448:	ldr	r3, [r4, #0]
    144a:	lsls	r0, r3, #24
    144c:	bpl.n	143a <analogRead+0x3a>
			result = ADC0_RA;
    144e:	ldr	r3, [pc, #148]	; (14e4 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1450:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1452:	movs	r2, #0
    1454:	strb	r2, [r5, #0]
			__enable_irq();
    1456:	cpsie	i
			result >>= analog_right_shift;
    1458:	ldr	r2, [pc, #140]	; (14e8 <analogRead+0xe8>)
    145a:	ldrb	r0, [r2, #0]
    145c:	asr.w	r0, r3, r0
			return result;
    1460:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1464:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1466:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1468:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    146a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    146e:	bl	11dc <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1472:	lsls	r2, r6, #24
    1474:	bpl.n	141c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    1476:	cpsid	i
    1478:	ldr	r5, [pc, #112]	; (14ec <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    147a:	ldr.w	r8, [pc, #124]	; 14f8 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    147e:	ldr	r4, [pc, #112]	; (14f0 <analogRead+0xf0>)
    1480:	and.w	r7, r6, #64	; 0x40
    1484:	uxtb	r7, r7
    1486:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    148a:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    148e:	cbz	r7, 14c8 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1490:	bic.w	r3, r3, #16
    1494:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    1498:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    149a:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    149c:	ldr	r2, [pc, #76]	; (14ec <analogRead+0xec>)
    149e:	strb	r3, [r5, #0]
	__enable_irq();
    14a0:	cpsie	i
	while (1) {
		__disable_irq();
    14a2:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    14a4:	ldr	r3, [r4, #0]
    14a6:	lsls	r1, r3, #24
    14a8:	bmi.n	14c4 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    14aa:	ldrb	r3, [r2, #0]
    14ac:	cbnz	r3, 14b6 <analogRead+0xb6>
    14ae:	b.n	148a <analogRead+0x8a>
    14b0:	ldrb	r3, [r5, #0]
    14b2:	cmp	r3, #0
    14b4:	beq.n	148a <analogRead+0x8a>
		__enable_irq();
    14b6:	cpsie	i
		yield();
    14b8:	bl	2a54 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    14bc:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    14be:	ldr	r3, [r4, #0]
    14c0:	lsls	r3, r3, #24
    14c2:	bpl.n	14b0 <analogRead+0xb0>
			result = ADC1_RA;
    14c4:	ldr	r3, [pc, #44]	; (14f4 <analogRead+0xf4>)
    14c6:	b.n	1450 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    14c8:	orr.w	r3, r3, #16
    14cc:	str.w	r3, [r8]
    14d0:	b.n	1498 <analogRead+0x98>
    14d2:	nop
    14d4:	.word	0x00004018
    14d8:	.word	0x1fff15c6
    14dc:	.word	0x1fff15c8
    14e0:	.word	0x4003b000
    14e4:	.word	0x4003b010
    14e8:	.word	0x1fff15c5
    14ec:	.word	0x1fff15c7
    14f0:	.word	0x400bb000
    14f4:	.word	0x400bb010
    14f8:	.word	0x400bb00c

000014fc <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    14fc:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    14fe:	ldr	r3, [pc, #68]	; (1544 <digitalWrite.part.1+0x48>)
    1500:	ldr.w	r2, [r3, r0, lsl #3]
    1504:	ldrb.w	r4, [r2, #640]	; 0x280
    1508:	cbz	r4, 1518 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    150a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    150c:	cbz	r1, 152e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    150e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1512:	ldr.w	r4, [sp], #4
    1516:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1518:	add.w	r3, r3, r0, lsl #3
    151c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    151e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1520:	cbnz	r1, 1538 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1522:	bic.w	r2, r2, #2
    1526:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1528:	ldr.w	r4, [sp], #4
    152c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    152e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1532:	ldr.w	r4, [sp], #4
    1536:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1538:	orr.w	r2, r2, #3
    153c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    153e:	ldr.w	r4, [sp], #4
    1542:	bx	lr
    1544:	.word	0x00004060

00001548 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1548:	ldr	r2, [pc, #112]	; (15bc <pinMode.part.2+0x74>)
    154a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    154e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1550:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1552:	beq.n	1578 <pinMode.part.2+0x30>
    1554:	cmp	r1, #4
    1556:	beq.n	1590 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1558:	ldr.w	r0, [r2, r0, lsl #3]
    155c:	movs	r2, #0
    155e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1562:	cbz	r1, 1570 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1564:	cmp	r1, #2
    1566:	beq.n	15aa <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1568:	cmp	r1, #3
    156a:	beq.n	15b2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    156c:	str	r2, [r3, #0]
    156e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1570:	mov.w	r2, #256	; 0x100
    1574:	str	r2, [r3, #0]
    1576:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1578:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    157c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1580:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1584:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1586:	ldr	r2, [r3, #0]
    1588:	bic.w	r2, r2, #32
    158c:	str	r2, [r3, #0]
    158e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1590:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1594:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1598:	movs	r0, #1
    159a:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    159e:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    15a0:	ldr	r2, [r3, #0]
    15a2:	orr.w	r2, r2, #32
    15a6:	str	r2, [r3, #0]
    15a8:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    15aa:	movw	r2, #259	; 0x103
    15ae:	str	r2, [r3, #0]
    15b0:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    15b2:	mov.w	r2, #258	; 0x102
    15b6:	str	r2, [r3, #0]
    15b8:	bx	lr
    15ba:	nop
    15bc:	.word	0x00004060

000015c0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    15c0:	push	{r4, r5}
	RTC_SR = 0;
    15c2:	ldr	r3, [pc, #20]	; (15d8 <rtc_set+0x18>)
	RTC_TPR = 0;
    15c4:	ldr	r5, [pc, #20]	; (15dc <rtc_set+0x1c>)
	RTC_TSR = t;
    15c6:	ldr	r4, [pc, #24]	; (15e0 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    15c8:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    15ca:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    15cc:	str	r2, [r3, #0]
	RTC_TPR = 0;
    15ce:	str	r2, [r5, #0]
	RTC_TSR = t;
    15d0:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    15d2:	str	r1, [r3, #0]
}
    15d4:	pop	{r4, r5}
    15d6:	bx	lr
    15d8:	.word	0x4003d014
    15dc:	.word	0x4003d004
    15e0:	.word	0x4003d000

000015e4 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    15e4:	cmp	r0, #63	; 0x3f
    15e6:	bhi.n	15ec <digitalWrite+0x8>
    15e8:	b.w	14fc <digitalWrite.part.1>
    15ec:	bx	lr
    15ee:	nop

000015f0 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    15f0:	cmp	r0, #63	; 0x3f
    15f2:	bhi.n	1602 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    15f4:	ldr	r3, [pc, #16]	; (1608 <digitalRead+0x18>)
    15f6:	ldr.w	r3, [r3, r0, lsl #3]
    15fa:	ldrb.w	r0, [r3, #512]	; 0x200
    15fe:	uxtb	r0, r0
    1600:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1602:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    1604:	bx	lr
    1606:	nop
    1608:	.word	0x00004060

0000160c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    160c:	cmp	r0, #63	; 0x3f
    160e:	bhi.n	1614 <pinMode+0x8>
    1610:	b.w	1548 <pinMode.part.2>
    1614:	bx	lr
    1616:	nop

00001618 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1618:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    161c:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    161e:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1620:	ldr	r7, [pc, #136]	; (16ac <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1622:	ldr	r3, [pc, #140]	; (16b0 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1624:	ldr	r2, [pc, #140]	; (16b4 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1626:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1628:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    162a:	ldr	r2, [r2, #0]
	__enable_irq();
    162c:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    162e:	lsls	r2, r2, #5
    1630:	bpl.n	1638 <delay+0x20>
    1632:	cmp	r3, #50	; 0x32
    1634:	it	hi
    1636:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1638:	cbz	r5, 16a8 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    163a:	rsb	r3, r3, #179200	; 0x2bc00
    163e:	addw	r3, r3, #799	; 0x31f
    1642:	ldr	r6, [pc, #116]	; (16b8 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1644:	ldr.w	r9, [pc, #104]	; 16b0 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1648:	ldr.w	r8, [pc, #104]	; 16b4 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    164c:	lsrs	r3, r3, #2
    164e:	mov.w	r2, #1000	; 0x3e8
    1652:	umull	r1, r3, r6, r3
    1656:	mul.w	r4, r2, r4
    165a:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    165e:	cpsid	i
	current = SYST_CVR;
    1660:	ldr.w	r1, [r9]
	count = systick_millis_count;
    1664:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1666:	ldr.w	lr, [r8]
	__enable_irq();
    166a:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    166c:	rsb	r3, r1, #179200	; 0x2bc00
    1670:	addw	r3, r3, #799	; 0x31f
    1674:	lsrs	r3, r3, #2
    1676:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    167a:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    167e:	rsb	r3, r4, r3, lsr #2
    1682:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1686:	beq.n	168e <delay+0x76>
    1688:	cmp	r1, #50	; 0x32
    168a:	it	hi
    168c:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    168e:	mla	r3, r0, r2, r3
    1692:	cmp.w	r3, #1000	; 0x3e8
    1696:	bcc.n	16a2 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    1698:	subs	r5, #1
    169a:	beq.n	16a8 <delay+0x90>
				start += 1000;
    169c:	add.w	r4, r4, #1000	; 0x3e8
    16a0:	b.n	165e <delay+0x46>
			}
			yield();
    16a2:	bl	2a54 <yield>
		}
    16a6:	b.n	165e <delay+0x46>
    16a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    16ac:	.word	0x1fff15cc
    16b0:	.word	0xe000e018
    16b4:	.word	0xe000ed04
    16b8:	.word	0x16c16c17

000016bc <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    16bc:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    16be:	ldr	r3, [pc, #312]	; (17f8 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    16c0:	ldr	r0, [pc, #312]	; (17fc <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    16c2:	ldr.w	ip, [pc, #348]	; 1820 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    16c6:	ldr	r4, [pc, #312]	; (1800 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    16c8:	ldr	r1, [pc, #312]	; (1804 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    16ca:	ldr.w	lr, [pc, #344]	; 1824 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    16ce:	ldr	r6, [pc, #312]	; (1808 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    16d0:	ldr	r5, [pc, #312]	; (180c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    16d2:	ldr	r7, [pc, #316]	; (1810 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    16d4:	mov.w	r2, #134217728	; 0x8000000
    16d8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    16da:	mov.w	r2, #268435456	; 0x10000000
    16de:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    16e0:	mov.w	r2, #536870912	; 0x20000000
    16e4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    16e6:	mov.w	r2, #1073741824	; 0x40000000
    16ea:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    16ec:	mov.w	r2, #2147483648	; 0x80000000
    16f0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    16f2:	movs	r2, #0
    16f4:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    16f6:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    16f8:	movw	r0, #61439	; 0xefff
    16fc:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1700:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1704:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1706:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    170a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    170c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    170e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1710:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1714:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    1716:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    171a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    171c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1720:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1722:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    1726:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    172a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    172e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1732:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    1736:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1738:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    173c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    173e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1740:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    1742:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    1746:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    1748:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    174a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    174c:	ldr	r4, [pc, #196]	; (1814 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    174e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    1750:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1752:	movs	r1, #9
    1754:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    1756:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    175a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    175e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    1760:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1762:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    1764:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    1766:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    1768:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    176a:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    176e:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    1772:	add.w	r7, r7, #520192	; 0x7f000
    1776:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1778:	addw	r4, r4, #2044	; 0x7fc
    177c:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    177e:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    1780:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    1782:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1784:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    1788:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    178a:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    178e:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    1792:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1794:	sub.w	r4, r4, #460800	; 0x70800
    1798:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    179c:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    179e:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    17a0:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    17a4:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    17a6:	ldr	r0, [pc, #112]	; (1818 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    17a8:	orr.w	r1, r1, #512	; 0x200
    17ac:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    17ae:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    17b0:	ldr	r4, [pc, #104]	; (181c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    17b2:	add.w	lr, lr, #65280	; 0xff00
    17b6:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    17ba:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    17be:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    17c2:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    17c6:	orr.w	r1, r1, #33554432	; 0x2000000
    17ca:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    17cc:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    17d0:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    17d4:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    17d6:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    17d8:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    17da:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    17dc:	str	r2, [r4, #0]
#endif
	analog_init();
    17de:	bl	1320 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    17e2:	movs	r0, #25
    17e4:	bl	1618 <delay>
	usb_init();
    17e8:	bl	2984 <usb_init>
	delay(275);
    17ec:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    17f0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    17f4:	b.w	1618 <delay>
    17f8:	.word	0xe000e104
    17fc:	.word	0x40038004
    1800:	.word	0x40038014
    1804:	.word	0x4003801c
    1808:	.word	0x40038024
    180c:	.word	0x4003802c
    1810:	.word	0x40038034
    1814:	.word	0x40038000
    1818:	.word	0x40048004
    181c:	.word	0x400c9000
    1820:	.word	0x40038008
    1824:	.word	0x4003800c

00001828 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1828:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    182a:	ldr	r3, [pc, #56]	; (1864 <sysex_byte+0x3c>)
    182c:	ldr	r4, [pc, #56]	; (1868 <sysex_byte+0x40>)
    182e:	ldr	r3, [r3, #0]
    1830:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1832:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1834:	cbz	r3, 185a <sysex_byte+0x32>
    1836:	cmp.w	r1, #290	; 0x122
    183a:	bcs.n	1848 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    183c:	ldr	r2, [pc, #44]	; (186c <sysex_byte+0x44>)
    183e:	adds	r3, r1, #1
    1840:	strb	r5, [r2, r1]
    1842:	uxth	r3, r3
    1844:	strh	r3, [r4, #0]
	}
}
    1846:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1848:	movs	r2, #0
    184a:	ldr	r0, [pc, #32]	; (186c <sysex_byte+0x44>)
    184c:	blx	r3
    184e:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1850:	ldr	r2, [pc, #24]	; (186c <sysex_byte+0x44>)
    1852:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1854:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1856:	strh	r3, [r4, #0]
	}
}
    1858:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    185a:	cmp.w	r1, #290	; 0x122
    185e:	bcc.n	183c <sysex_byte+0x14>
    1860:	pop	{r3, r4, r5, pc}
    1862:	nop
    1864:	.word	0x1fff15f4
    1868:	.word	0x1fff1a8a
    186c:	.word	0x1fff1a90

00001870 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1870:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1874:	ldr	r6, [pc, #132]	; (18fc <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1876:	ldr	r7, [pc, #136]	; (1900 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    1878:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    187a:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    187c:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    187e:	strb	r3, [r7, #0]
	if (!tx_packet) {
    1880:	cbz	r1, 18b0 <usb_midi_write_packed+0x40>
    1882:	ldr	r5, [pc, #128]	; (1904 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    1884:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1886:	add.w	r2, r1, r3, lsl #2
    188a:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    188c:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    188e:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1890:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1894:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1896:	bhi.n	18a2 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    1898:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    189a:	movs	r3, #0
    189c:	strb	r3, [r7, #0]
    189e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    18a2:	movs	r3, #64	; 0x40
    18a4:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    18a6:	movs	r0, #4
    18a8:	bl	1f50 <usb_tx>
		tx_packet = NULL;
    18ac:	str	r4, [r6, #0]
    18ae:	b.n	189a <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    18b0:	ldr.w	r9, [pc, #84]	; 1908 <usb_midi_write_packed+0x98>
    18b4:	ldrb.w	r3, [r9]
    18b8:	cmp	r3, #0
    18ba:	beq.n	189e <usb_midi_write_packed+0x2e>
    18bc:	ldr	r5, [pc, #68]	; (1904 <usb_midi_write_packed+0x94>)
    18be:	movw	r4, #48001	; 0xbb81
    18c2:	b.n	18d6 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    18c4:	subs	r4, #1
    18c6:	beq.n	18ee <usb_midi_write_packed+0x7e>
    18c8:	ldrb	r3, [r5, #0]
    18ca:	cbnz	r3, 18ee <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    18cc:	bl	2a54 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    18d0:	ldrb.w	r3, [r9]
    18d4:	cbz	r3, 18f6 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    18d6:	movs	r0, #4
    18d8:	bl	1e3c <usb_tx_packet_count>
    18dc:	cmp	r0, #5
    18de:	bhi.n	18c4 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    18e0:	bl	1d74 <usb_malloc>
    18e4:	mov	r1, r0
    18e6:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    18e8:	cmp	r0, #0
    18ea:	beq.n	18c4 <usb_midi_write_packed+0x54>
    18ec:	b.n	1884 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    18ee:	movs	r3, #1
    18f0:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    18f2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    18f6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    18fa:	nop
    18fc:	.word	0x1fff1610
    1900:	.word	0x1fff15e4
    1904:	.word	0x1fff1614
    1908:	.word	0x1fff1720

0000190c <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    190c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    190e:	ldr	r3, [pc, #32]	; (1930 <usb_midi_flush_output+0x24>)
    1910:	ldrb	r4, [r3, #0]
    1912:	cbnz	r4, 191e <usb_midi_flush_output+0x12>
    1914:	ldr	r5, [pc, #28]	; (1934 <usb_midi_flush_output+0x28>)
    1916:	ldr	r1, [r5, #0]
    1918:	cbz	r1, 191e <usb_midi_flush_output+0x12>
    191a:	ldrh	r3, [r1, #2]
    191c:	cbnz	r3, 1920 <usb_midi_flush_output+0x14>
    191e:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1920:	lsls	r3, r3, #2
    1922:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1924:	movs	r0, #4
    1926:	bl	1f50 <usb_tx>
		tx_packet = NULL;
    192a:	str	r4, [r5, #0]
    192c:	pop	{r3, r4, r5, pc}
    192e:	nop
    1930:	.word	0x1fff15e4
    1934:	.word	0x1fff1610

00001938 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1938:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    193c:	ldr	r6, [pc, #692]	; (1bf4 <usb_midi_read+0x2bc>)
    193e:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1940:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1942:	cmp	r3, #0
    1944:	beq.w	1a6c <usb_midi_read+0x134>
    1948:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    194a:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    194c:	lsrs	r1, r2, #2
    194e:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    1952:	adds	r2, #4
	if (index < rx_packet->len) {
    1954:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1956:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    1958:	bcs.n	19e0 <usb_midi_read+0xa8>
		rx_packet->index = index;
    195a:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    195c:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1960:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    1964:	ldr	r1, [pc, #656]	; (1bf8 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1966:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    196a:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    196e:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1972:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1974:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    1978:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    197a:	bls.n	19b2 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    197c:	subs	r3, r6, #2
    197e:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1980:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1984:	bls.n	1a24 <usb_midi_read+0xec>
    1986:	cmp	r6, #5
    1988:	beq.n	1a1c <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    198a:	cmp	r6, #4
    198c:	beq.w	1cd8 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    1990:	subs	r3, r6, #5
    1992:	cmp	r3, #2
    1994:	bls.n	1a96 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    1996:	cmp	r6, #15
    1998:	bne.n	19b8 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    199a:	cmp	r0, #247	; 0xf7
    199c:	bhi.n	1a24 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    199e:	cmp	r0, #240	; 0xf0
    19a0:	beq.n	19a8 <usb_midi_read+0x70>
    19a2:	ldr	r3, [pc, #600]	; (1bfc <usb_midi_read+0x2c4>)
    19a4:	ldrh	r3, [r3, #0]
    19a6:	cbz	r3, 19b8 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    19a8:	bl	1828 <sysex_byte>
		}
	}
	return 0;
    19ac:	movs	r0, #0
    19ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    19b2:	cbz	r7, 19be <usb_midi_read+0x86>
    19b4:	cmp	r5, r7
    19b6:	beq.n	19be <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    19b8:	movs	r0, #0
    19ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    19be:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    19c0:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    19c4:	beq.w	1ad6 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    19c8:	cmp	r6, #9
    19ca:	beq.n	19f0 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    19cc:	cmp	r6, #10
    19ce:	bne.w	1afa <usb_midi_read+0x1c2>
    19d2:	cmp	r3, #10
    19d4:	bne.n	19b8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    19d6:	ldr	r3, [pc, #552]	; (1c00 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    19d8:	ldr	r2, [pc, #552]	; (1c04 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    19da:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    19dc:	movs	r1, #160	; 0xa0
    19de:	b.n	1ae4 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    19e0:	mov	r0, r3
    19e2:	bl	1db4 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    19e6:	movs	r0, #5
    19e8:	bl	1e00 <usb_rx>
    19ec:	str	r0, [r6, #0]
    19ee:	b.n	195c <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    19f0:	cmp	r3, #9
    19f2:	bne.n	19b8 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    19f4:	lsrs	r7, r4, #24
    19f6:	beq.w	1cf0 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    19fa:	ldr	r3, [pc, #524]	; (1c08 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    19fc:	ldr	r2, [pc, #516]	; (1c04 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    19fe:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1a00:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1a02:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1a06:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1a08:	uxtb	r5, r5
    1a0a:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1a0c:	cmp	r3, #0
    1a0e:	beq.w	1b4c <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1a12:	mov	r2, r4
    1a14:	mov	r1, r6
    1a16:	mov	r0, r5
    1a18:	blx	r3
    1a1a:	b.n	1b4c <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1a1c:	cmp	r0, #240	; 0xf0
    1a1e:	bls.n	1aa8 <usb_midi_read+0x170>
    1a20:	cmp	r0, #247	; 0xf7
    1a22:	beq.n	1aa8 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    1a24:	subs	r0, #241	; 0xf1
    1a26:	cmp	r0, #14
    1a28:	bhi.n	19b8 <usb_midi_read+0x80>
    1a2a:	add	r3, pc, #4	; (adr r3, 1a30 <usb_midi_read+0xf8>)
    1a2c:	ldr.w	pc, [r3, r0, lsl #2]
    1a30:	.word	0x00001be7
    1a34:	.word	0x00001bcb
    1a38:	.word	0x00001bb9
    1a3c:	.word	0x000019b9
    1a40:	.word	0x000019b9
    1a44:	.word	0x00001bab
    1a48:	.word	0x000019b9
    1a4c:	.word	0x00001c8b
    1a50:	.word	0x000019b9
    1a54:	.word	0x00001c55
    1a58:	.word	0x00001c6f
    1a5c:	.word	0x00001b93
    1a60:	.word	0x000019b9
    1a64:	.word	0x00001b7b
    1a68:	.word	0x00001b5f
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    1a6c:	ldr	r3, [pc, #412]	; (1c0c <usb_midi_read+0x2d4>)
    1a6e:	ldrb	r3, [r3, #0]
    1a70:	cmp	r3, #0
    1a72:	beq.n	19b8 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1a74:	movs	r0, #5
    1a76:	bl	1e00 <usb_rx>
    1a7a:	mov	r3, r0
    1a7c:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    1a7e:	cmp	r0, #0
    1a80:	beq.n	19b8 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    1a82:	ldrh	r5, [r0, #0]
    1a84:	cmp	r5, #0
    1a86:	bne.w	194a <usb_midi_read+0x12>
			usb_free(rx_packet);
    1a8a:	bl	1db4 <usb_free>
			rx_packet = NULL;
    1a8e:	str	r5, [r6, #0]
			return 0;
    1a90:	mov	r0, r5
    1a92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    1a96:	bl	1828 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    1a9a:	ubfx	r0, r4, #16, #8
    1a9e:	bl	1828 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    1aa2:	cmp	r6, #7
    1aa4:	bne.n	1aac <usb_midi_read+0x174>
    1aa6:	lsrs	r0, r4, #24
    1aa8:	bl	1828 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    1aac:	ldr	r3, [pc, #332]	; (1bfc <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1aae:	ldr	r2, [pc, #352]	; (1c10 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    1ab0:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    1ab2:	ldr	r0, [pc, #352]	; (1c14 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1ab4:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1ab6:	ldr	r5, [pc, #352]	; (1c18 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1ab8:	ldr	r2, [pc, #328]	; (1c04 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    1aba:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1abc:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1abe:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1ac0:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1ac2:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1ac4:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1ac6:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    1ac8:	cbz	r4, 1b0e <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    1aca:	movs	r2, #1
    1acc:	ldr	r0, [pc, #332]	; (1c1c <usb_midi_read+0x2e4>)
    1ace:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1ad0:	movs	r0, #1
    1ad2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1ad6:	cmp	r3, #8
    1ad8:	bne.w	19b8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    1adc:	ldr	r3, [pc, #320]	; (1c20 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1ade:	ldr	r2, [pc, #292]	; (1c04 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    1ae0:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1ae2:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1ae4:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1ae8:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1aea:	uxtb	r5, r5
    1aec:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1aee:	cbz	r3, 1b4c <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1af0:	mov	r0, r5
    1af2:	mov	r2, r4
    1af4:	mov	r1, r6
    1af6:	blx	r3
    1af8:	b.n	1b4c <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    1afa:	cmp	r6, #11
    1afc:	bne.n	1b22 <usb_midi_read+0x1ea>
    1afe:	cmp	r3, #11
    1b00:	bne.w	19b8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1b04:	ldr	r3, [pc, #284]	; (1c24 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1b06:	ldr	r2, [pc, #252]	; (1c04 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    1b08:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1b0a:	movs	r1, #176	; 0xb0
    1b0c:	b.n	1ae4 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    1b0e:	ldr	r3, [pc, #280]	; (1c28 <usb_midi_read+0x2f0>)
    1b10:	ldr	r3, [r3, #0]
    1b12:	cmp	r3, #0
    1b14:	beq.w	1d0e <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    1b18:	ldr	r0, [pc, #256]	; (1c1c <usb_midi_read+0x2e4>)
    1b1a:	blx	r3
		}
		return 1;
    1b1c:	movs	r0, #1
    1b1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    1b22:	cmp	r6, #12
    1b24:	bne.w	1d28 <usb_midi_read+0x3f0>
    1b28:	cmp	r3, #12
    1b2a:	bne.w	19b8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1b2e:	ldr	r3, [pc, #252]	; (1c2c <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1b30:	ldr	r2, [pc, #208]	; (1c04 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    1b32:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1b34:	movs	r1, #192	; 0xc0
    1b36:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    1b38:	uxtb	r5, r5
    1b3a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1b3e:	cmp	r3, #0
    1b40:	beq.w	1cd4 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1b44:	mov	r0, r5
    1b46:	mov	r1, r6
    1b48:	lsrs	r4, r4, #24
    1b4a:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1b4c:	ldr	r1, [pc, #224]	; (1c30 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    1b4e:	ldr	r2, [pc, #196]	; (1c14 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    1b50:	ldr	r3, [pc, #196]	; (1c18 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1b52:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    1b54:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    1b56:	strb	r4, [r3, #0]
		return 1;
    1b58:	movs	r0, #1
    1b5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    1b5e:	ldr	r3, [pc, #212]	; (1c34 <usb_midi_read+0x2fc>)
    1b60:	ldr	r3, [r3, #0]
    1b62:	cmp	r3, #0
    1b64:	beq.w	1d14 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    1b68:	blx	r3
    1b6a:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    1b6e:	ldr	r3, [pc, #148]	; (1c04 <usb_midi_read+0x2cc>)
    1b70:	uxtb	r5, r5
    1b72:	lsrs	r4, r4, #24
    1b74:	strb.w	r8, [r3]
		goto return_message;
    1b78:	b.n	1b4c <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    1b7a:	ldr	r3, [pc, #188]	; (1c38 <usb_midi_read+0x300>)
    1b7c:	ldr	r3, [r3, #0]
    1b7e:	cmp	r3, #0
    1b80:	bne.n	1b68 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    1b82:	ldr	r3, [pc, #184]	; (1c3c <usb_midi_read+0x304>)
    1b84:	ldr	r3, [r3, #0]
    1b86:	cbz	r3, 1bb2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    1b88:	movs	r0, #254	; 0xfe
    1b8a:	blx	r3
    1b8c:	ubfx	r6, r4, #16, #8
    1b90:	b.n	1b6e <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    1b92:	ldr	r3, [pc, #172]	; (1c40 <usb_midi_read+0x308>)
    1b94:	ldr	r3, [r3, #0]
    1b96:	cmp	r3, #0
    1b98:	bne.n	1b68 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    1b9a:	ldr	r3, [pc, #160]	; (1c3c <usb_midi_read+0x304>)
    1b9c:	ldr	r3, [r3, #0]
    1b9e:	cbz	r3, 1bb2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    1ba0:	movs	r0, #252	; 0xfc
    1ba2:	blx	r3
    1ba4:	ubfx	r6, r4, #16, #8
    1ba8:	b.n	1b6e <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    1baa:	ldr	r3, [pc, #152]	; (1c44 <usb_midi_read+0x30c>)
    1bac:	ldr	r3, [r3, #0]
    1bae:	cmp	r3, #0
    1bb0:	bne.n	1b68 <usb_midi_read+0x230>
    1bb2:	ubfx	r6, r4, #16, #8
    1bb6:	b.n	1b6e <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1bb8:	ldr	r3, [pc, #140]	; (1c48 <usb_midi_read+0x310>)
    1bba:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    1bbc:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1bc0:	cmp	r3, #0
    1bc2:	beq.n	1b6e <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    1bc4:	mov	r0, r6
    1bc6:	blx	r3
    1bc8:	b.n	1b6e <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    1bca:	ldr	r3, [pc, #128]	; (1c4c <usb_midi_read+0x314>)
    1bcc:	ldr	r2, [r3, #0]
    1bce:	cmp	r2, #0
    1bd0:	beq.n	1bb2 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    1bd2:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    1bd4:	lsrs	r3, r4, #17
    1bd6:	and.w	r0, r6, #127	; 0x7f
    1bda:	and.w	r3, r3, #16256	; 0x3f80
    1bde:	orrs	r0, r3
    1be0:	uxtb	r6, r6
    1be2:	blx	r2
    1be4:	b.n	1b6e <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1be6:	ldr	r3, [pc, #104]	; (1c50 <usb_midi_read+0x318>)
    1be8:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    1bea:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1bee:	cmp	r3, #0
    1bf0:	bne.n	1bc4 <usb_midi_read+0x28c>
    1bf2:	b.n	1b6e <usb_midi_read+0x236>
    1bf4:	.word	0x1fff161c
    1bf8:	.word	0x1fff1a8e
    1bfc:	.word	0x1fff1a8a
    1c00:	.word	0x1fff15f8
    1c04:	.word	0x1fff1a88
    1c08:	.word	0x1fff162c
    1c0c:	.word	0x1fff1720
    1c10:	.word	0x1fff15f4
    1c14:	.word	0x1fff1a8c
    1c18:	.word	0x1fff1a8d
    1c1c:	.word	0x1fff1a90
    1c20:	.word	0x1fff1624
    1c24:	.word	0x1fff1628
    1c28:	.word	0x1fff160c
    1c2c:	.word	0x1fff15e8
    1c30:	.word	0x1fff1a8f
    1c34:	.word	0x1fff15d4
    1c38:	.word	0x1fff15d8
    1c3c:	.word	0x1fff15dc
    1c40:	.word	0x1fff1618
    1c44:	.word	0x1fff1608
    1c48:	.word	0x1fff1620
    1c4c:	.word	0x1fff15f0
    1c50:	.word	0x1fff1604
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    1c54:	ldr	r3, [pc, #252]	; (1d54 <usb_midi_read+0x41c>)
    1c56:	ldr	r3, [r3, #0]
    1c58:	cmp	r3, #0
    1c5a:	bne.n	1b68 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    1c5c:	ldr	r3, [pc, #248]	; (1d58 <usb_midi_read+0x420>)
    1c5e:	ldr	r3, [r3, #0]
    1c60:	cmp	r3, #0
    1c62:	beq.n	1bb2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    1c64:	movs	r0, #250	; 0xfa
    1c66:	blx	r3
    1c68:	ubfx	r6, r4, #16, #8
    1c6c:	b.n	1b6e <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    1c6e:	ldr	r3, [pc, #236]	; (1d5c <usb_midi_read+0x424>)
    1c70:	ldr	r3, [r3, #0]
    1c72:	cmp	r3, #0
    1c74:	bne.w	1b68 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    1c78:	ldr	r3, [pc, #220]	; (1d58 <usb_midi_read+0x420>)
    1c7a:	ldr	r3, [r3, #0]
    1c7c:	cmp	r3, #0
    1c7e:	beq.n	1bb2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    1c80:	movs	r0, #251	; 0xfb
    1c82:	blx	r3
    1c84:	ubfx	r6, r4, #16, #8
    1c88:	b.n	1b6e <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    1c8a:	ldr	r3, [pc, #212]	; (1d60 <usb_midi_read+0x428>)
    1c8c:	ldr	r3, [r3, #0]
    1c8e:	cmp	r3, #0
    1c90:	bne.w	1b68 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    1c94:	ldr	r3, [pc, #192]	; (1d58 <usb_midi_read+0x420>)
    1c96:	ldr	r3, [r3, #0]
    1c98:	cmp	r3, #0
    1c9a:	beq.n	1bb2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    1c9c:	movs	r0, #248	; 0xf8
    1c9e:	blx	r3
    1ca0:	ubfx	r6, r4, #16, #8
    1ca4:	b.n	1b6e <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    1ca6:	cmp	r3, #14
    1ca8:	bne.w	19b8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    1cac:	ldr	r2, [pc, #180]	; (1d64 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1cae:	ldr	r3, [pc, #184]	; (1d68 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    1cb0:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1cb2:	movs	r1, #224	; 0xe0
    1cb4:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    1cb6:	cmp	r2, #0
    1cb8:	beq.n	1d4a <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    1cba:	lsrs	r6, r4, #16
    1cbc:	lsrs	r1, r4, #17
    1cbe:	and.w	r3, r6, #127	; 0x7f
    1cc2:	and.w	r1, r1, #16256	; 0x3f80
    1cc6:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    1cc8:	uxtb	r5, r5
    1cca:	sub.w	r1, r1, #8192	; 0x2000
    1cce:	mov	r0, r5
    1cd0:	blx	r2
    1cd2:	uxtb	r6, r6
    1cd4:	lsrs	r4, r4, #24
    1cd6:	b.n	1b4c <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    1cd8:	bl	1828 <sysex_byte>
		sysex_byte(n >> 16);
    1cdc:	ubfx	r0, r4, #16, #8
    1ce0:	bl	1828 <sysex_byte>
		sysex_byte(n >> 24);
    1ce4:	lsrs	r0, r4, #24
    1ce6:	bl	1828 <sysex_byte>
		return 0;
    1cea:	movs	r0, #0
    1cec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1cf0:	ldr	r3, [pc, #120]	; (1d6c <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1cf2:	ldr	r2, [pc, #116]	; (1d68 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    1cf4:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1cf6:	movs	r1, #128	; 0x80
    1cf8:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1cfa:	uxtb	r5, r5
    1cfc:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1d00:	cbz	r3, 1d24 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1d02:	mov	r1, r6
    1d04:	mov	r0, r5
    1d06:	mov	r2, r7
    1d08:	blx	r3
    1d0a:	mov	r4, r7
    1d0c:	b.n	1b4c <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1d0e:	movs	r0, #1
    1d10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    1d14:	ldr	r3, [pc, #64]	; (1d58 <usb_midi_read+0x420>)
    1d16:	ldr	r3, [r3, #0]
    1d18:	cmp	r3, #0
    1d1a:	beq.w	1bb2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    1d1e:	movs	r0, #255	; 0xff
    1d20:	blx	r3
    1d22:	b.n	1bb2 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1d24:	mov	r4, r3
    1d26:	b.n	1b4c <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    1d28:	cmp	r6, #13
    1d2a:	bne.n	1ca6 <usb_midi_read+0x36e>
    1d2c:	cmp	r3, #13
    1d2e:	bne.w	19b8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1d32:	ldr	r3, [pc, #60]	; (1d70 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1d34:	ldr	r2, [pc, #48]	; (1d68 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    1d36:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1d38:	movs	r1, #208	; 0xd0
    1d3a:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1d3c:	uxtb	r5, r5
    1d3e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1d42:	cmp	r3, #0
    1d44:	bne.w	1b44 <usb_midi_read+0x20c>
    1d48:	b.n	1cd4 <usb_midi_read+0x39c>
    1d4a:	ubfx	r6, r4, #16, #8
    1d4e:	uxtb	r5, r5
    1d50:	lsrs	r4, r4, #24
    1d52:	b.n	1b4c <usb_midi_read+0x214>
    1d54:	.word	0x1fff1600
    1d58:	.word	0x1fff15dc
    1d5c:	.word	0x1fff15e0
    1d60:	.word	0x1fff15d0
    1d64:	.word	0x1fff15ec
    1d68:	.word	0x1fff1a88
    1d6c:	.word	0x1fff1624
    1d70:	.word	0x1fff15fc

00001d74 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1d74:	cpsid	i
	avail = usb_buffer_available;
    1d76:	ldr	r0, [pc, #52]	; (1dac <usb_malloc+0x38>)
    1d78:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1d7a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    1d7e:	cmp	r3, #29
    1d80:	bgt.n	1da4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    1d82:	mov.w	r1, #2147483648	; 0x80000000
    1d86:	lsrs	r1, r3
    1d88:	bic.w	r2, r2, r1
    1d8c:	str	r2, [r0, #0]
	__enable_irq();
    1d8e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1d90:	ldr	r0, [pc, #28]	; (1db0 <usb_malloc+0x3c>)
    1d92:	add.w	r3, r3, r3, lsl #3
    1d96:	lsls	r3, r3, #3
    1d98:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1d9a:	movs	r1, #0
    1d9c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    1d9e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    1da0:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    1da2:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    1da4:	cpsie	i
		return NULL;
    1da6:	movs	r0, #0
    1da8:	bx	lr
    1daa:	nop
    1dac:	.word	0x1fff0c44
    1db0:	.word	0x1fff03d0

00001db4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1db4:	ldr	r3, [pc, #52]	; (1dec <usb_free+0x38>)
    1db6:	ldr	r2, [pc, #56]	; (1df0 <usb_free+0x3c>)
    1db8:	subs	r3, r0, r3
    1dba:	umull	r2, r3, r2, r3
    1dbe:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    1dc0:	cmp	r3, #29
    1dc2:	bhi.n	1dde <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1dc4:	ldr	r2, [pc, #44]	; (1df4 <usb_free+0x40>)
    1dc6:	ldrb	r2, [r2, #0]
    1dc8:	cbnz	r2, 1de0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1dca:	cpsid	i
	usb_buffer_available |= mask;
    1dcc:	ldr	r0, [pc, #40]	; (1df8 <usb_free+0x44>)
    1dce:	mov.w	r1, #2147483648	; 0x80000000
    1dd2:	ldr	r2, [r0, #0]
    1dd4:	lsr.w	r3, r1, r3
    1dd8:	orrs	r2, r3
    1dda:	str	r2, [r0, #0]
	__enable_irq();
    1ddc:	cpsie	i
    1dde:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1de0:	ldr	r2, [pc, #24]	; (1dfc <usb_free+0x48>)
    1de2:	ldrb	r2, [r2, #0]
    1de4:	cmp	r2, #0
    1de6:	beq.n	1dca <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    1de8:	b.w	1e68 <usb_rx_memory>
    1dec:	.word	0x1fff03d0
    1df0:	.word	0x38e38e39
    1df4:	.word	0x1fff1715
    1df8:	.word	0x1fff0c44
    1dfc:	.word	0x1fff1720

00001e00 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    1e00:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1e02:	cmp	r3, #4
    1e04:	bhi.n	1e30 <usb_rx+0x30>
	__disable_irq();
    1e06:	cpsid	i
	ret = rx_first[endpoint];
    1e08:	ldr	r1, [pc, #40]	; (1e34 <usb_rx+0x34>)
    1e0a:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    1e0e:	cbz	r0, 1e2c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    1e10:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1e12:	ldr	r4, [pc, #36]	; (1e38 <usb_rx+0x38>)
    1e14:	ldrh	r5, [r0, #0]
    1e16:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    1e1a:	ldr	r6, [r0, #4]
    1e1c:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1e20:	subs	r2, r2, r5
    1e22:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    1e26:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1e28:	pop	{r4, r5, r6}
    1e2a:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    1e2c:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1e2e:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1e30:	movs	r0, #0
    1e32:	bx	lr
    1e34:	.word	0x1fff168c
    1e38:	.word	0x1fff1bb4

00001e3c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    1e3c:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1e3e:	cmp	r0, #4
    1e40:	bhi.n	1e5a <usb_tx_packet_count+0x1e>
	__disable_irq();
    1e42:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    1e44:	ldr	r3, [pc, #28]	; (1e64 <usb_tx_packet_count+0x28>)
    1e46:	ldr.w	r3, [r3, r0, lsl #2]
    1e4a:	cbz	r3, 1e5e <usb_tx_packet_count+0x22>
    1e4c:	movs	r0, #0
    1e4e:	ldr	r3, [r3, #4]
    1e50:	adds	r0, #1
    1e52:	cmp	r3, #0
    1e54:	bne.n	1e4e <usb_tx_packet_count+0x12>
	__enable_irq();
    1e56:	cpsie	i
	return count;
    1e58:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1e5a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    1e5c:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    1e5e:	mov	r0, r3
    1e60:	b.n	1e56 <usb_tx_packet_count+0x1a>
    1e62:	nop
    1e64:	.word	0x1fff16e4

00001e68 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    1e68:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    1e6a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1e6c:	ldr	r2, [pc, #204]	; (1f3c <usb_rx_memory+0xd4>)
    1e6e:	ldrb	r3, [r2, #0]
    1e70:	lsls	r3, r3, #28
    1e72:	bpl.n	1e82 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1e74:	ldr	r3, [pc, #200]	; (1f40 <usb_rx_memory+0xd8>)
    1e76:	ldr	r1, [r3, #32]
    1e78:	cmp	r1, #0
    1e7a:	beq.n	1f04 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1e7c:	ldr	r1, [r3, #40]	; 0x28
    1e7e:	cmp	r1, #0
    1e80:	beq.n	1f20 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1e82:	ldrb	r3, [r2, #1]
    1e84:	lsls	r5, r3, #28
    1e86:	bpl.n	1e96 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1e88:	ldr	r3, [pc, #180]	; (1f40 <usb_rx_memory+0xd8>)
    1e8a:	ldr	r1, [r3, #64]	; 0x40
    1e8c:	cmp	r1, #0
    1e8e:	beq.n	1f2c <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1e90:	ldr	r1, [r3, #72]	; 0x48
    1e92:	cmp	r1, #0
    1e94:	beq.n	1f24 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1e96:	ldrb	r3, [r2, #2]
    1e98:	lsls	r4, r3, #28
    1e9a:	bpl.n	1eaa <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1e9c:	ldr	r3, [pc, #160]	; (1f40 <usb_rx_memory+0xd8>)
    1e9e:	ldr	r1, [r3, #96]	; 0x60
    1ea0:	cmp	r1, #0
    1ea2:	beq.n	1f30 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ea4:	ldr	r1, [r3, #104]	; 0x68
    1ea6:	cmp	r1, #0
    1ea8:	beq.n	1f28 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1eaa:	ldrb	r3, [r2, #3]
    1eac:	lsls	r1, r3, #28
    1eae:	bpl.n	1ec0 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1eb0:	ldr	r3, [pc, #140]	; (1f40 <usb_rx_memory+0xd8>)
    1eb2:	ldr.w	r1, [r3, #128]	; 0x80
    1eb6:	cmp	r1, #0
    1eb8:	beq.n	1f38 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1eba:	ldr.w	r1, [r3, #136]	; 0x88
    1ebe:	cbz	r1, 1ee6 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1ec0:	ldrb	r3, [r2, #4]
    1ec2:	lsls	r3, r3, #28
    1ec4:	bpl.n	1ed8 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1ec6:	ldr	r3, [pc, #120]	; (1f40 <usb_rx_memory+0xd8>)
    1ec8:	ldr.w	r2, [r3, #160]	; 0xa0
    1ecc:	cmp	r2, #0
    1ece:	beq.n	1f34 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ed0:	ldr.w	r2, [r3, #168]	; 0xa8
    1ed4:	movs	r4, #21
    1ed6:	cbz	r2, 1ee8 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    1ed8:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    1eda:	ldr	r3, [pc, #104]	; (1f44 <usb_rx_memory+0xdc>)
    1edc:	movs	r2, #0
    1ede:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    1ee0:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    1ee2:	b.w	1db4 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ee6:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1ee8:	ldr	r1, [pc, #88]	; (1f44 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1eea:	ldr	r5, [pc, #92]	; (1f48 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    1eec:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1eee:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1ef2:	add.w	r3, r3, r4, lsl #3
    1ef6:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1ef8:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1efa:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1efc:	strb	r2, [r1, #0]
				__enable_irq();
    1efe:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    1f00:	pop	{r4, r5}
    1f02:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1f04:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1f06:	ldr	r4, [pc, #60]	; (1f44 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1f08:	ldr	r5, [pc, #64]	; (1f4c <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    1f0a:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1f0c:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1f10:	add.w	r3, r3, r2, lsl #3
    1f14:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1f16:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1f18:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1f1a:	strb	r2, [r4, #0]
				__enable_irq();
    1f1c:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    1f1e:	b.n	1f00 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1f20:	movs	r4, #5
    1f22:	b.n	1ee8 <usb_rx_memory+0x80>
    1f24:	movs	r4, #9
    1f26:	b.n	1ee8 <usb_rx_memory+0x80>
    1f28:	movs	r4, #13
    1f2a:	b.n	1ee8 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1f2c:	movs	r2, #8
    1f2e:	b.n	1f06 <usb_rx_memory+0x9e>
    1f30:	movs	r2, #12
    1f32:	b.n	1f06 <usb_rx_memory+0x9e>
    1f34:	movs	r2, #20
    1f36:	b.n	1f06 <usb_rx_memory+0x9e>
    1f38:	movs	r2, #16
    1f3a:	b.n	1f06 <usb_rx_memory+0x9e>
    1f3c:	.word	0x0000428c
    1f40:	.word	0x1fff0000
    1f44:	.word	0x1fff1715
    1f48:	.word	0x004000c8
    1f4c:	.word	0x00400088

00001f50 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    1f50:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    1f52:	cmp	r3, #4
    1f54:	bhi.n	1f92 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1f56:	ldr	r2, [pc, #108]	; (1fc4 <usb_tx+0x74>)
    1f58:	lsls	r0, r0, #5
    1f5a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    1f5e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1f60:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    1f62:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    1f64:	ldr	r4, [pc, #96]	; (1fc8 <usb_tx+0x78>)
    1f66:	ldrb	r2, [r4, r3]
    1f68:	cmp	r2, #3
    1f6a:	bhi.n	1fa4 <usb_tx+0x54>
    1f6c:	tbb	[pc, r2]
    1f70:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    1f74:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1f76:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    1f78:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1f7a:	tst.w	r0, #8
    1f7e:	ite	ne
    1f80:	movne	r3, #200	; 0xc8
    1f82:	moveq	r3, #136	; 0x88
    1f84:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1f88:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1f8a:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1f8c:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    1f8e:	cpsie	i
}
    1f90:	pop	{r4, r5}
    1f92:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    1f94:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    1f96:	movs	r2, #2
		break;
    1f98:	b.n	1f76 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    1f9a:	movs	r2, #5
    1f9c:	b.n	1f76 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    1f9e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    1fa0:	movs	r2, #4
		break;
    1fa2:	b.n	1f76 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    1fa4:	ldr	r2, [pc, #36]	; (1fcc <usb_tx+0x7c>)
    1fa6:	ldr.w	r0, [r2, r3, lsl #2]
    1faa:	cbz	r0, 1fbc <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    1fac:	ldr	r2, [pc, #32]	; (1fd0 <usb_tx+0x80>)
    1fae:	ldr.w	r0, [r2, r3, lsl #2]
    1fb2:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    1fb4:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    1fb8:	cpsie	i
		return;
    1fba:	b.n	1f90 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    1fbc:	str.w	r1, [r2, r3, lsl #2]
    1fc0:	ldr	r2, [pc, #12]	; (1fd0 <usb_tx+0x80>)
    1fc2:	b.n	1fb4 <usb_tx+0x64>
    1fc4:	.word	0x1fff0000
    1fc8:	.word	0x1fff1724
    1fcc:	.word	0x1fff16e4
    1fd0:	.word	0x1fff16f8

00001fd4 <usb_isr>:
}



void usb_isr(void)
{
    1fd4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    1fd8:	ldr.w	fp, [pc, #776]	; 22e4 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    1fdc:	ldr.w	sl, [pc, #776]	; 22e8 <usb_isr+0x314>
}



void usb_isr(void)
{
    1fe0:	sub	sp, #28
    1fe2:	b.n	206e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    1fe4:	ldr	r7, [pc, #680]	; (2290 <usb_isr+0x2bc>)
    1fe6:	mov.w	r8, r3, lsr #2
    1fea:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    1fee:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    1ff0:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    1ff4:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    1ff8:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    1ffa:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    1ffe:	and.w	r4, r3, #255	; 0xff
    2002:	cmp	r3, #0
    2004:	bne.w	2208 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2008:	ldr.w	r3, [r7, r8, lsl #3]
    200c:	lsrs	r3, r3, #16
    200e:	uxth	r1, r3
    2010:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2014:	cmp	r3, #0
    2016:	beq.w	21f6 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    201a:	ldr	r3, [pc, #632]	; (2294 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    201c:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2020:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2024:	ldr.w	r2, [r3, r6, lsl #2]
    2028:	cmp	r2, #0
    202a:	beq.w	2498 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    202e:	ldr	r5, [pc, #616]	; (2298 <usb_isr+0x2c4>)
    2030:	ldr.w	r3, [r5, r6, lsl #2]
    2034:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2036:	ldr	r4, [pc, #612]	; (229c <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2038:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    203c:	ldrh.w	r3, [r4, r6, lsl #1]
    2040:	add	r1, r3
    2042:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2046:	bl	1d74 <usb_malloc>
					if (packet) {
    204a:	cmp	r0, #0
    204c:	beq.w	248a <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2050:	ldr	r2, [pc, #588]	; (22a0 <usb_isr+0x2cc>)
    2052:	ldr	r3, [pc, #592]	; (22a4 <usb_isr+0x2d0>)
    2054:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2058:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    205c:	it	ne
    205e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2060:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2064:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2068:	movs	r3, #8
    206a:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    206e:	ldrb.w	r4, [fp]
    2072:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2074:	lsls	r0, r4, #29
    2076:	bpl.n	20b2 <usb_isr+0xde>
		if (usb_configuration) {
    2078:	ldr	r3, [pc, #556]	; (22a8 <usb_isr+0x2d4>)
    207a:	ldrb	r3, [r3, #0]
    207c:	cbz	r3, 20ac <usb_isr+0xd8>
			t = usb_reboot_timer;
    207e:	ldr	r1, [pc, #556]	; (22ac <usb_isr+0x2d8>)
    2080:	ldrb	r2, [r1, #0]
			if (t) {
    2082:	and.w	r3, r2, #255	; 0xff
    2086:	cbz	r2, 2092 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2088:	subs	r3, #1
    208a:	uxtb	r3, r3
    208c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    208e:	cbnz	r3, 2092 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2090:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2092:	ldr	r1, [pc, #540]	; (22b0 <usb_isr+0x2dc>)
    2094:	ldrb	r2, [r1, #0]
			if (t) {
    2096:	and.w	r3, r2, #255	; 0xff
    209a:	cbz	r2, 20a8 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    209c:	subs	r3, #1
    209e:	uxtb	r3, r3
    20a0:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    20a2:	cmp	r3, #0
    20a4:	beq.w	2436 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    20a8:	bl	190c <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    20ac:	movs	r3, #4
    20ae:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    20b2:	and.w	r3, r4, #8
    20b6:	and.w	r2, r3, #255	; 0xff
    20ba:	cmp	r3, #0
    20bc:	beq.w	2250 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    20c0:	ldrb.w	r3, [sl]
    20c4:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    20c6:	lsrs	r6, r3, #4
    20c8:	bne.n	1fe4 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    20ca:	lsrs	r4, r3, #2
    20cc:	ldr.w	r9, [pc, #448]	; 2290 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    20d0:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    20d4:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    20d8:	ubfx	r2, r2, #2, #4
    20dc:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    20de:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    20e0:	cmp	r2, #12
    20e2:	bhi.w	21ee <usb_isr+0x21a>
    20e6:	tbb	[pc, r2]
    20ea:	.short	0x7878
    20ec:	.word	0x82828282
    20f0:	.word	0x82438282
    20f4:	.short	0x8282
    20f6:	.byte	0x07
    20f7:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    20f8:	ldr	r0, [r1, #0]
    20fa:	ldr	r5, [pc, #440]	; (22b4 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    20fc:	ldr	r3, [pc, #416]	; (22a0 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    20fe:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2100:	ldr	r7, [pc, #436]	; (22b8 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2102:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2106:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2108:	ldr	r6, [pc, #432]	; (22bc <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    210a:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    210c:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2110:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2112:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2114:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2116:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    211a:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    211c:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2120:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2124:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2126:	bhi.w	22ec <usb_isr+0x318>
    212a:	cmp.w	r1, #1664	; 0x680
    212e:	bcs.w	2758 <usb_isr+0x784>
    2132:	cmp.w	r1, #258	; 0x102
    2136:	beq.w	2506 <usb_isr+0x532>
    213a:	bhi.w	24d0 <usb_isr+0x4fc>
    213e:	cmp	r1, #128	; 0x80
    2140:	beq.w	278c <usb_isr+0x7b8>
    2144:	cmp	r1, #130	; 0x82
    2146:	bne.w	2512 <usb_isr+0x53e>
    214a:	ldrh	r1, [r5, #4]
    214c:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2150:	cmp	r1, #5
    2152:	bhi.w	2512 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2156:	ldr	r3, [pc, #360]	; (22c0 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2158:	ldr	r4, [pc, #360]	; (22c4 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    215a:	lsls	r1, r1, #2
    215c:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    215e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2160:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2162:	ldrb	r2, [r3, #0]
    2164:	lsls	r3, r2, #30
    2166:	bpl.w	289c <usb_isr+0x8c8>
    216a:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    216c:	movs	r0, #2
    216e:	b.n	259a <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2170:	ldr	r7, [pc, #324]	; (22b8 <usb_isr+0x2e4>)
    2172:	ldr	r2, [r7, #0]
		if (data) {
    2174:	cbz	r2, 21c4 <usb_isr+0x1f0>
			size = ep0_tx_len;
    2176:	ldr	r3, [pc, #336]	; (22c8 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2178:	ldr	r6, [pc, #320]	; (22bc <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    217a:	ldr	r1, [pc, #336]	; (22cc <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    217c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    217e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2180:	ldrb	r5, [r1, #0]
    2182:	cmp	r0, #64	; 0x40
    2184:	mov	lr, r0
    2186:	orr.w	r8, r5, #2
    218a:	it	cs
    218c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2190:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2192:	eor.w	r4, r4, #1
    2196:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2198:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    219c:	ite	eq
    219e:	moveq	r4, #136	; 0x88
    21a0:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21a2:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    21a6:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    21a8:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21ac:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21b0:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    21b2:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21b4:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    21b8:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    21ba:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    21bc:	cmp	r0, #0
    21be:	beq.w	232e <usb_isr+0x35a>
    21c2:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    21c4:	ldr	r3, [pc, #236]	; (22b4 <usb_isr+0x2e0>)
    21c6:	ldrh	r2, [r3, #0]
    21c8:	cmp.w	r2, #1280	; 0x500
    21cc:	bne.n	21ee <usb_isr+0x21a>
			setup.bRequest = 0;
    21ce:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    21d0:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    21d2:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    21d4:	ldr	r3, [pc, #248]	; (22d0 <usb_isr+0x2fc>)
    21d6:	strb	r2, [r3, #0]
    21d8:	b.n	21ee <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    21da:	ldr	r2, [pc, #216]	; (22b4 <usb_isr+0x2e0>)
    21dc:	ldrh	r0, [r2, #0]
    21de:	movw	r2, #8225	; 0x2021
    21e2:	cmp	r0, r2
    21e4:	beq.w	2338 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    21e8:	ldr	r2, [pc, #180]	; (22a0 <usb_isr+0x2cc>)
    21ea:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    21ee:	ldr	r2, [pc, #228]	; (22d4 <usb_isr+0x300>)
    21f0:	movs	r3, #1
    21f2:	strb	r3, [r2, #0]
    21f4:	b.n	2068 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    21f6:	ldr	r2, [pc, #168]	; (22a0 <usb_isr+0x2cc>)
    21f8:	ldr	r3, [pc, #168]	; (22a4 <usb_isr+0x2d0>)
    21fa:	tst.w	r9, #8
    21fe:	it	ne
    2200:	movne	r3, r2
    2202:	str.w	r3, [r7, r8, lsl #3]
    2206:	b.n	2068 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2208:	bl	1db4 <usb_free>
				packet = tx_first[endpoint];
    220c:	ldr	r2, [pc, #200]	; (22d8 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    220e:	ldr	r1, [pc, #204]	; (22dc <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2210:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2214:	cmp	r3, #0
    2216:	beq.w	24a0 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    221a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    221c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    221e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2222:	add.w	r2, r3, #8
    2226:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    222a:	cmp	r4, #3
    222c:	bhi.n	223a <usb_isr+0x266>
    222e:	tbb	[pc, r4]
    2232:	.short	0x022c
    2234:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2236:	movs	r2, #2
    2238:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    223a:	ldrh	r2, [r3, #0]
    223c:	tst.w	r9, #8
    2240:	ite	eq
    2242:	moveq	r3, #136	; 0x88
    2244:	movne	r3, #200	; 0xc8
    2246:	orr.w	r3, r3, r2, lsl #16
    224a:	str.w	r3, [r7, r8, lsl #3]
    224e:	b.n	2068 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2250:	lsls	r0, r4, #31
    2252:	bmi.w	243c <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2256:	lsls	r1, r4, #24
    2258:	bmi.w	24bc <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    225c:	lsls	r2, r4, #30
    225e:	bpl.n	226e <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2260:	ldr	r2, [pc, #124]	; (22e0 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2262:	ldr	r1, [pc, #128]	; (22e4 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2264:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2266:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2268:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    226a:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    226c:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    226e:	lsls	r3, r4, #27
    2270:	bpl.n	2278 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2272:	ldr	r3, [pc, #112]	; (22e4 <usb_isr+0x310>)
    2274:	movs	r2, #16
    2276:	strb	r2, [r3, #0]
	}

}
    2278:	add	sp, #28
    227a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    227e:	movs	r2, #4
    2280:	strb	r2, [r1, r6]
						break;
    2282:	b.n	223a <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2284:	movs	r2, #5
    2286:	strb	r2, [r1, r6]
						break;
    2288:	b.n	223a <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    228a:	movs	r2, #3
    228c:	strb	r2, [r1, r6]
						break;
    228e:	b.n	223a <usb_isr+0x266>
    2290:	.word	0x1fff0000
    2294:	.word	0x1fff168c
    2298:	.word	0x1fff1634
    229c:	.word	0x1fff1bb4
    22a0:	.word	0x004000c8
    22a4:	.word	0x00400088
    22a8:	.word	0x1fff1720
    22ac:	.word	0x1fff16a1
    22b0:	.word	0x1fff15b4
    22b4:	.word	0x1fff170c
    22b8:	.word	0x1fff1630
    22bc:	.word	0x1fff16a0
    22c0:	.word	0x400720c0
    22c4:	.word	0x1fff1718
    22c8:	.word	0x1fff1648
    22cc:	.word	0x1fff1714
    22d0:	.word	0x40072098
    22d4:	.word	0x40072094
    22d8:	.word	0x1fff16e4
    22dc:	.word	0x1fff1724
    22e0:	.word	0x40072088
    22e4:	.word	0x40072080
    22e8:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    22ec:	movw	r4, #8225	; 0x2021
    22f0:	cmp	r1, r4
    22f2:	beq.w	242e <usb_isr+0x45a>
    22f6:	bhi.n	238c <usb_isr+0x3b8>
    22f8:	cmp.w	r1, #2176	; 0x880
    22fc:	beq.w	2592 <usb_isr+0x5be>
    2300:	cmp.w	r1, #2304	; 0x900
    2304:	bne.w	2512 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2308:	ldr	r2, [pc, #712]	; (25d4 <usb_isr+0x600>)
    230a:	ldr	r4, [pc, #716]	; (25d8 <usb_isr+0x604>)
    230c:	ldrb	r1, [r5, #2]
    230e:	strb	r1, [r2, #0]
    2310:	add.w	r5, r4, #160	; 0xa0
    2314:	b.n	231e <usb_isr+0x34a>
    2316:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2318:	cmp	r5, r4
    231a:	beq.w	2630 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    231e:	ldr	r3, [r4, #32]
    2320:	lsls	r1, r3, #24
    2322:	bpl.n	2316 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2324:	ldr	r0, [r4, #36]	; 0x24
    2326:	subs	r0, #8
    2328:	bl	1db4 <usb_free>
    232c:	b.n	2316 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    232e:	cmp.w	lr, #64	; 0x40
    2332:	it	ne
    2334:	movne	r2, #0
    2336:	b.n	21c2 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2338:	ldr	r2, [pc, #672]	; (25dc <usb_isr+0x608>)
    233a:	ldrb	r5, [r1, #0]
    233c:	ldrb	r0, [r1, #1]
    233e:	strb	r5, [r2, #0]
    2340:	strb	r0, [r2, #1]
    2342:	ldrb	r5, [r1, #2]
    2344:	ldrb	r0, [r1, #3]
    2346:	strb	r5, [r2, #2]
    2348:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    234a:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    234c:	ldrb	r5, [r1, #4]
    234e:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2350:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2352:	ldrb	r5, [r1, #5]
    2354:	ldrb	r1, [r1, #6]
    2356:	strb	r5, [r2, #5]
    2358:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    235a:	beq.w	258a <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    235e:	ldr	r1, [pc, #640]	; (25e0 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2360:	ldr	r6, [pc, #640]	; (25e4 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2362:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2364:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2366:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    236a:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    236c:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2370:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2372:	ite	eq
    2374:	moveq	r1, #136	; 0x88
    2376:	movne	r1, #200	; 0xc8
    2378:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    237c:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2380:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2384:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2386:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2388:	str	r1, [r2, #4]
    238a:	b.n	21e8 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    238c:	movw	r4, #8737	; 0x2221
    2390:	cmp	r1, r4
    2392:	bne.w	27a6 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2396:	ldr.w	ip, [pc, #656]	; 2628 <usb_isr+0x654>
    239a:	ldr	r3, [pc, #588]	; (25e8 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    239c:	ldr	r1, [pc, #588]	; (25ec <usb_isr+0x618>)
    239e:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    23a0:	ldr.w	r5, [ip]
    23a4:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    23a6:	str	r0, [sp, #4]
    23a8:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    23aa:	movs	r0, #0
    23ac:	str	r0, [sp, #8]
    23ae:	mov	r8, r0
    23b0:	mov	ip, r0
    23b2:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23b4:	ldr	r1, [pc, #552]	; (25e0 <usb_isr+0x60c>)
    23b6:	ldrb	r5, [r1, #0]
    23b8:	orr.w	lr, r5, #2
    23bc:	add.w	r3, r9, lr, lsl #3
    23c0:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23c2:	ldr	r3, [sp, #4]
    23c4:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23c6:	ldr	r3, [sp, #12]
    23c8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23ca:	ite	eq
    23cc:	moveq	r4, #136	; 0x88
    23ce:	movne	r4, #200	; 0xc8
    23d0:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    23d4:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23d8:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    23dc:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    23de:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23e0:	ldr.w	lr, [pc, #500]	; 25d8 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    23e4:	ldr	r3, [pc, #508]	; (25e4 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    23e6:	ldr.w	r8, [pc, #504]	; 25e0 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    23ea:	cmp	r0, #0
    23ec:	bne.w	2520 <usb_isr+0x54c>
    23f0:	cmp.w	ip, #64	; 0x40
    23f4:	bne.n	242e <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23f6:	orr.w	ip, r4, #2
    23fa:	add.w	r3, r9, ip, lsl #3
    23fe:	ldr	r4, [sp, #8]
    2400:	ldr.w	lr, [pc, #468]	; 25d8 <usb_isr+0x604>
    2404:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2406:	cmp	r2, #0
    2408:	bne.w	254c <usb_isr+0x578>
    240c:	lsls	r2, r0, #16
    240e:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2412:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2416:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    241a:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    241c:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    241e:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2420:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2422:	cmp	r0, #64	; 0x40
    2424:	bne.n	242e <usb_isr+0x45a>
    2426:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2428:	ldr	r2, [pc, #452]	; (25f0 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    242a:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    242c:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    242e:	ldr	r2, [pc, #452]	; (25f4 <usb_isr+0x620>)
    2430:	movs	r3, #1
    2432:	strb	r3, [r2, #0]
    2434:	b.n	21ee <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    2436:	bl	1194 <usb_serial_flush_callback>
    243a:	b.n	20a8 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    243c:	ldr	r3, [pc, #408]	; (25d8 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    243e:	ldr	r0, [pc, #436]	; (25f4 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2440:	ldr	r1, [pc, #412]	; (25e0 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2442:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2444:	mov.w	lr, #2
    2448:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    244c:	ldr	r7, [pc, #424]	; (25f8 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    244e:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2450:	ldr	r1, [pc, #424]	; (25fc <usb_isr+0x628>)
    2452:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2454:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2456:	ldr	r6, [pc, #424]	; (2600 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2458:	ldr	r5, [pc, #424]	; (2604 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    245a:	ldr	r4, [pc, #428]	; (2608 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    245c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    245e:	movs	r1, #13
    2460:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2462:	movs	r1, #255	; 0xff
    2464:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2466:	ldr.w	lr, [pc, #452]	; 262c <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    246a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    246c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    246e:	ldr	r5, [pc, #412]	; (260c <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2470:	ldr	r2, [pc, #412]	; (2610 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2472:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2476:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2478:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    247a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    247e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2480:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2482:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    2484:	add	sp, #28
    2486:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    248a:	ldr	r2, [pc, #392]	; (2614 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    248c:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2490:	ldrb	r3, [r2, #0]
    2492:	adds	r3, #1
    2494:	strb	r3, [r2, #0]
    2496:	b.n	2068 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2498:	str.w	r0, [r3, r6, lsl #2]
    249c:	ldr	r5, [pc, #376]	; (2618 <usb_isr+0x644>)
    249e:	b.n	2036 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    24a0:	ldrb	r3, [r1, r6]
    24a2:	cmp	r3, #3
    24a4:	bhi.n	257c <usb_isr+0x5a8>
    24a6:	add	r2, pc, #4	; (adr r2, 24ac <usb_isr+0x4d8>)
    24a8:	ldr.w	pc, [r2, r3, lsl #2]
    24ac:	.word	0x00002069
    24b0:	.word	0x00002069
    24b4:	.word	0x00002501
    24b8:	.word	0x000024fb
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    24bc:	ldr	r1, [pc, #312]	; (25f8 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    24be:	ldr	r3, [pc, #324]	; (2604 <usb_isr+0x630>)
    24c0:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    24c2:	movs	r0, #13
    24c4:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    24c6:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    24c8:	lsls	r2, r4, #30
    24ca:	bpl.w	226e <usb_isr+0x29a>
    24ce:	b.n	2260 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    24d0:	movw	r2, #770	; 0x302
    24d4:	cmp	r1, r2
    24d6:	bne.w	2796 <usb_isr+0x7c2>
    24da:	ldrh	r1, [r5, #4]
    24dc:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    24e0:	cmp	r1, #5
    24e2:	bhi.n	2512 <usb_isr+0x53e>
    24e4:	ldrh	r2, [r5, #2]
    24e6:	cbnz	r2, 2512 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    24e8:	ldr	r4, [pc, #268]	; (25f8 <usb_isr+0x624>)
    24ea:	str	r0, [sp, #4]
    24ec:	lsls	r1, r1, #2
    24ee:	add	r4, r1
    24f0:	ldrb	r1, [r4, #0]
    24f2:	orr.w	r1, r1, #2
    24f6:	strb	r1, [r4, #0]
    24f8:	b.n	23aa <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    24fa:	movs	r3, #1
    24fc:	strb	r3, [r1, r6]
						break;
    24fe:	b.n	2068 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2500:	movs	r3, #0
    2502:	strb	r3, [r1, r6]
						break;
    2504:	b.n	2068 <usb_isr+0x94>
    2506:	ldrh	r1, [r5, #4]
    2508:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    250c:	cmp	r1, #5
    250e:	bls.w	27b0 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2512:	ldr	r2, [pc, #228]	; (25f8 <usb_isr+0x624>)
    2514:	movs	r3, #15
    2516:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2518:	ldr	r2, [pc, #216]	; (25f4 <usb_isr+0x620>)
    251a:	movs	r3, #1
    251c:	strb	r3, [r2, #0]
    251e:	b.n	21ee <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2520:	cmp	r0, #64	; 0x40
    2522:	bls.w	23f6 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2526:	orr.w	r4, r4, #2
    252a:	add.w	r1, lr, r4, lsl #3
    252e:	ldr	r6, [sp, #8]
    2530:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2532:	cbz	r2, 2564 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    2534:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2538:	ldr	r2, [pc, #224]	; (261c <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    253a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    253c:	mov	r3, r6
    253e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2540:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2544:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2546:	str.w	r2, [lr, r4, lsl #3]
    254a:	b.n	2428 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    254c:	ldrb.w	r3, [sp, #4]
    2550:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2552:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2554:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2556:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2558:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    255c:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    255e:	str.w	r2, [lr, ip, lsl #3]
    2562:	b.n	2422 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    2564:	ldrb.w	r1, [sp, #4]
    2568:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    256a:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    256c:	ldr	r2, [pc, #140]	; (25fc <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    256e:	strb.w	r5, [r8]
    2572:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2574:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2576:	str.w	r2, [lr, r4, lsl #3]
    257a:	b.n	2428 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    257c:	tst.w	r9, #8
    2580:	ite	eq
    2582:	moveq	r3, #2
    2584:	movne	r3, #3
    2586:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2588:	b.n	2068 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    258a:	ldr	r2, [pc, #148]	; (2620 <usb_isr+0x64c>)
    258c:	movs	r1, #15
    258e:	strb	r1, [r2, #0]
    2590:	b.n	235e <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2592:	ldr	r2, [pc, #64]	; (25d4 <usb_isr+0x600>)
    2594:	ldr	r4, [pc, #140]	; (2624 <usb_isr+0x650>)
    2596:	ldrb	r2, [r2, #0]
    2598:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    259a:	ldrh	r2, [r5, #6]
    259c:	cmp	r2, r0
    259e:	bcs.w	2964 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    25a2:	ldr	r1, [pc, #60]	; (25e0 <usb_isr+0x60c>)
    25a4:	ldrb	r5, [r1, #0]
    25a6:	cmp	r2, #64	; 0x40
    25a8:	mov	ip, r2
    25aa:	orr.w	lr, r5, #2
    25ae:	it	cs
    25b0:	movcs.w	ip, #64	; 0x40
    25b4:	add.w	r3, r4, ip
    25b8:	add.w	r0, r9, lr, lsl #3
    25bc:	str	r3, [sp, #8]
    25be:	movs	r3, #1
    25c0:	str	r4, [r0, #4]
    25c2:	mov.w	r8, ip, lsl #16
    25c6:	rsb	r0, ip, r2
    25ca:	str	r3, [sp, #4]
    25cc:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    25ce:	movs	r4, #200	; 0xc8
    25d0:	b.n	23d0 <usb_isr+0x3fc>
    25d2:	nop
    25d4:	.word	0x1fff1720
    25d8:	.word	0x1fff0000
    25dc:	.word	0x1fff1a7c
    25e0:	.word	0x1fff1714
    25e4:	.word	0x1fff16a0
    25e8:	.word	0x1fff1a84
    25ec:	.word	0x1fff15c4
    25f0:	.word	0x1fff1648
    25f4:	.word	0x40072094
    25f8:	.word	0x400720c0
    25fc:	.word	0x00400088
    2600:	.word	0x40072088
    2604:	.word	0x40072080
    2608:	.word	0x40072098
    260c:	.word	0x1fff164c
    2610:	.word	0x1fff16a4
    2614:	.word	0x1fff1715
    2618:	.word	0x1fff1634
    261c:	.word	0x004000c8
    2620:	.word	0x1fff16a1
    2624:	.word	0x1fff1718
    2628:	.word	0x1fff15cc
    262c:	.word	0x4007208c
    2630:	ldr	r4, [pc, #704]	; (28f4 <usb_isr+0x920>)
    2632:	ldr	r2, [pc, #708]	; (28f8 <usb_isr+0x924>)
    2634:	ldr	r1, [pc, #708]	; (28fc <usb_isr+0x928>)
    2636:	ldr	r0, [pc, #712]	; (2900 <usb_isr+0x92c>)
    2638:	ldr	r5, [pc, #712]	; (2904 <usb_isr+0x930>)
    263a:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    263c:	movs	r3, #0
    263e:	ldr	r4, [pc, #712]	; (2908 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2640:	str	r4, [sp, #8]
    2642:	str	r6, [sp, #20]
    2644:	str	r5, [sp, #12]
    2646:	mov	r8, r0
    2648:	mov	r4, r3
    264a:	str	r7, [sp, #16]
    264c:	mov	r6, r2
    264e:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2650:	ldr	r0, [r6, #0]
			while (p) {
    2652:	cbz	r0, 2660 <usb_isr+0x68c>
				n = p->next;
    2654:	ldr	r7, [r0, #4]
				usb_free(p);
    2656:	bl	1db4 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    265a:	mov	r0, r7
    265c:	cmp	r7, #0
    265e:	bne.n	2654 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2660:	movs	r3, #0
    2662:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2664:	ldr	r3, [sp, #12]
			p = tx_first[i];
    2666:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2668:	mov	r2, r3
    266a:	movs	r3, #0
    266c:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2670:	cbz	r0, 267e <usb_isr+0x6aa>
				n = p->next;
    2672:	ldr	r7, [r0, #4]
				usb_free(p);
    2674:	bl	1db4 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2678:	mov	r0, r7
    267a:	cmp	r7, #0
    267c:	bne.n	2672 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    267e:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2680:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2682:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2684:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    2686:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    268a:	ldr	r2, [sp, #8]
    268c:	mov.w	r1, #0
			switch (tx_state[i]) {
    2690:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    2692:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    2696:	cmp	r3, #3
    2698:	bhi.n	26aa <usb_isr+0x6d6>
    269a:	tbb	[pc, r3]
    269e:	.short	0x0258
    26a0:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    26a2:	ldr	r3, [sp, #4]
    26a4:	mov.w	r2, #1
    26a8:	strb	r2, [r3, #0]
    26aa:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    26ac:	adds	r4, #1
    26ae:	adds	r3, #1
    26b0:	cmp	r4, #5
    26b2:	add.w	r6, r6, #4
    26b6:	add.w	r5, r5, #4
    26ba:	str	r3, [sp, #4]
    26bc:	bne.n	2650 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    26be:	ldr	r4, [pc, #588]	; (290c <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    26c0:	ldr	r5, [pc, #588]	; (2910 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    26c2:	ldrb	r2, [r4, #0]
			*reg = epconf;
    26c4:	ldr	r3, [pc, #588]	; (2914 <usb_isr+0x940>)
    26c6:	ldr	r7, [sp, #16]
    26c8:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    26ca:	movs	r1, #0
    26cc:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    26ce:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    26d0:	lsls	r2, r2, #28
    26d2:	bmi.n	27ca <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    26d4:	ldrb	r2, [r4, #1]
			*reg = epconf;
    26d6:	ldr	r1, [pc, #576]	; (2918 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    26d8:	ldr.w	r8, [pc, #588]	; 2928 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    26dc:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    26de:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    26e0:	mov.w	r1, #0
    26e4:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    26e8:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    26ec:	bmi.w	2876 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    26f0:	ldrb	r2, [r4, #2]
			*reg = epconf;
    26f2:	ldr	r1, [pc, #552]	; (291c <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    26f4:	ldr.w	r8, [pc, #560]	; 2928 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    26f8:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    26fa:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    26fc:	mov.w	r1, #0
    2700:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    2704:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2708:	bmi.w	284e <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    270c:	ldr	r1, [pc, #528]	; (2920 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    270e:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2710:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2712:	movs	r1, #0
    2714:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2718:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    271c:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    271e:	ldr.w	r8, [pc, #520]	; 2928 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2722:	bmi.n	2820 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2724:	ldrb	r2, [r4, #4]
			*reg = epconf;
    2726:	ldr	r1, [pc, #508]	; (2924 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2728:	ldr	r4, [pc, #508]	; (2928 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    272a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    272c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    272e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2730:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    2734:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2738:	bmi.n	27f6 <usb_isr+0x822>
    273a:	ldrb	r3, [r6, #0]
    273c:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    273e:	movs	r1, #0
    2740:	eor.w	r2, r3, #1
    2744:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    2748:	str.w	r1, [r9, #184]	; 0xb8
    274c:	b.n	23aa <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    274e:	ldr	r3, [sp, #4]
    2750:	mov.w	r2, #0
    2754:	strb	r2, [r3, #0]
    2756:	b.n	26aa <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    2758:	ldr	r2, [pc, #464]	; (292c <usb_isr+0x958>)
    275a:	ldr	r4, [r2, #4]
    275c:	cmp	r4, #0
    275e:	beq.w	2512 <usb_isr+0x53e>
    2762:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2764:	ldrh.w	lr, [r5, #4]
    2768:	b.n	2774 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    276a:	adds	r2, #12
			if (list->addr == NULL) break;
    276c:	ldr	r4, [r2, #4]
    276e:	cmp	r4, #0
    2770:	beq.w	2512 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2774:	ldrh	r3, [r2, #0]
    2776:	cmp	r3, r0
    2778:	bne.n	276a <usb_isr+0x796>
    277a:	ldrh	r3, [r2, #2]
    277c:	cmp	r3, lr
    277e:	bne.n	276a <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    2780:	lsrs	r0, r0, #8
    2782:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    2784:	ite	eq
    2786:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    2788:	ldrhne	r0, [r2, #8]
    278a:	b.n	259a <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    278c:	ldr	r4, [pc, #416]	; (2930 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    278e:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2790:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2792:	strb	r2, [r4, #1]
    2794:	b.n	259a <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2796:	cmp.w	r1, #1280	; 0x500
    279a:	bne.w	2512 <usb_isr+0x53e>
    279e:	movs	r3, #1
    27a0:	movs	r2, #0
    27a2:	str	r3, [sp, #4]
    27a4:	b.n	23aa <usb_isr+0x3d6>
    27a6:	movw	r2, #8993	; 0x2321
    27aa:	cmp	r1, r2
    27ac:	beq.n	279e <usb_isr+0x7ca>
    27ae:	b.n	2512 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    27b0:	ldrh	r2, [r5, #2]
    27b2:	cmp	r2, #0
    27b4:	bne.w	2512 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    27b8:	ldr	r4, [pc, #376]	; (2934 <usb_isr+0x960>)
    27ba:	str	r0, [sp, #4]
    27bc:	lsls	r1, r1, #2
    27be:	add	r4, r1
    27c0:	ldrb	r1, [r4, #0]
    27c2:	bic.w	r1, r1, #2
    27c6:	strb	r1, [r4, #0]
    27c8:	b.n	23aa <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    27ca:	bl	1d74 <usb_malloc>
				if (p) {
    27ce:	cmp	r0, #0
    27d0:	beq.w	2940 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    27d4:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27d6:	ldr	r2, [pc, #352]	; (2938 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    27d8:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27dc:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    27e0:	bl	1d74 <usb_malloc>
				if (p) {
    27e4:	cmp	r0, #0
    27e6:	beq.n	28e8 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    27e8:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    27ea:	ldr	r2, [pc, #336]	; (293c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    27ec:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    27f0:	str.w	r2, [r9, #40]	; 0x28
    27f4:	b.n	26d4 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    27f6:	bl	1d74 <usb_malloc>
				if (p) {
    27fa:	cmp	r0, #0
    27fc:	beq.n	28ac <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    27fe:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2800:	ldr	r2, [pc, #308]	; (2938 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2802:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2806:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    280a:	bl	1d74 <usb_malloc>
				if (p) {
    280e:	cmp	r0, #0
    2810:	beq.n	28a0 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    2812:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2814:	ldr	r2, [pc, #292]	; (293c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2816:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    281a:	str.w	r2, [r9, #168]	; 0xa8
    281e:	b.n	273a <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2820:	bl	1d74 <usb_malloc>
				if (p) {
    2824:	cmp	r0, #0
    2826:	beq.w	2958 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    282a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    282c:	ldr	r2, [pc, #264]	; (2938 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    282e:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2832:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2836:	bl	1d74 <usb_malloc>
				if (p) {
    283a:	cmp	r0, #0
    283c:	beq.w	294c <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2840:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2842:	ldr	r2, [pc, #248]	; (293c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2844:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2848:	str.w	r2, [r9, #136]	; 0x88
    284c:	b.n	2724 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    284e:	bl	1d74 <usb_malloc>
				if (p) {
    2852:	cmp	r0, #0
    2854:	beq.n	28dc <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    2856:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2858:	ldr	r2, [pc, #220]	; (2938 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    285a:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    285e:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2862:	bl	1d74 <usb_malloc>
				if (p) {
    2866:	cbz	r0, 28d0 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    2868:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    286a:	ldr	r2, [pc, #208]	; (293c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    286c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2870:	str.w	r2, [r9, #104]	; 0x68
    2874:	b.n	270c <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2876:	bl	1d74 <usb_malloc>
				if (p) {
    287a:	cbz	r0, 28c4 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    287c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    287e:	ldr	r2, [pc, #184]	; (2938 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2880:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2884:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2888:	bl	1d74 <usb_malloc>
				if (p) {
    288c:	cbz	r0, 28b8 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    288e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2890:	ldr	r2, [pc, #168]	; (293c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2892:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2896:	str.w	r2, [r9, #72]	; 0x48
    289a:	b.n	26f0 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    289c:	movs	r0, #2
    289e:	b.n	259a <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    28a0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    28a2:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    28a6:	adds	r2, #1
    28a8:	strb	r2, [r5, #0]
    28aa:	b.n	273a <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    28ac:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    28ae:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    28b2:	adds	r2, #1
    28b4:	strb	r2, [r5, #0]
    28b6:	b.n	280a <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    28b8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    28ba:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    28be:	adds	r2, #1
    28c0:	strb	r2, [r5, #0]
    28c2:	b.n	26f0 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    28c4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    28c6:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    28ca:	adds	r2, #1
    28cc:	strb	r2, [r5, #0]
    28ce:	b.n	2888 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    28d0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    28d2:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    28d6:	adds	r2, #1
    28d8:	strb	r2, [r5, #0]
    28da:	b.n	270c <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    28dc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    28de:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    28e2:	adds	r2, #1
    28e4:	strb	r2, [r5, #0]
    28e6:	b.n	2862 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    28e8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    28ea:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    28ee:	adds	r2, #1
    28f0:	strb	r2, [r5, #0]
    28f2:	b.n	26d4 <usb_isr+0x700>
    28f4:	.word	0x1fff1724
    28f8:	.word	0x1fff168c
    28fc:	.word	0x1fff16e4
    2900:	.word	0x1fff16f8
    2904:	.word	0x1fff1634
    2908:	.word	0x1fff1bb4
    290c:	.word	0x0000428c
    2910:	.word	0x1fff1715
    2914:	.word	0x400720c4
    2918:	.word	0x400720c8
    291c:	.word	0x400720cc
    2920:	.word	0x400720d0
    2924:	.word	0x400720d4
    2928:	.word	0x1fff0000
    292c:	.word	0x00004294
    2930:	.word	0x1fff1718
    2934:	.word	0x400720c0
    2938:	.word	0x00400088
    293c:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2940:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2942:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    2946:	adds	r2, #1
    2948:	strb	r2, [r5, #0]
    294a:	b.n	27e0 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    294c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    294e:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2952:	adds	r2, #1
    2954:	strb	r2, [r5, #0]
    2956:	b.n	2724 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2958:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    295a:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    295e:	adds	r2, #1
    2960:	strb	r2, [r5, #0]
    2962:	b.n	2836 <usb_isr+0x862>
    2964:	cmp	r0, #64	; 0x40
    2966:	mov	ip, r0
    2968:	it	cs
    296a:	movcs.w	ip, #64	; 0x40
    296e:	add.w	r3, r4, ip
    2972:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2974:	movs	r3, #1
    2976:	rsb	r0, ip, r0
    297a:	mov.w	r8, ip, lsl #16
    297e:	movs	r2, #0
    2980:	str	r3, [sp, #4]
    2982:	b.n	23b4 <usb_isr+0x3e0>

00002984 <usb_init>:
}



void usb_init(void)
{
    2984:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2988:	ldr	r4, [pc, #156]	; (2a28 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    298a:	bl	3258 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    298e:	movs	r2, #0
    2990:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2994:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2996:	str	r2, [r3, #0]
		table[i].addr = 0;
    2998:	str	r2, [r3, #4]
    299a:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    299c:	cmp	r3, r0
		table[i].desc = 0;
    299e:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    29a2:	bne.n	2996 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    29a4:	ldr	r0, [pc, #132]	; (2a2c <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    29a6:	ldr	r2, [pc, #136]	; (2a30 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    29a8:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    29aa:	ldr.w	lr, [pc, #156]	; 2a48 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    29ae:	ldr	r6, [pc, #132]	; (2a34 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    29b0:	ldr	r5, [pc, #132]	; (2a38 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    29b2:	ldr	r7, [pc, #136]	; (2a3c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    29b4:	ldr.w	ip, [pc, #148]	; 2a4c <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    29b8:	ldr.w	r8, [pc, #148]	; 2a50 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    29bc:	orr.w	r3, r3, #262144	; 0x40000
    29c0:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    29c2:	ldr	r3, [r2, #0]
    29c4:	orr.w	r3, r3, #50331648	; 0x3000000
    29c8:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    29ca:	movs	r3, #3
    29cc:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    29d0:	movs	r3, #160	; 0xa0
    29d2:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    29d4:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    29d8:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    29dc:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    29e0:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    29e2:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    29e4:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    29e8:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    29ea:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    29ec:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    29ee:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    29f0:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    29f2:	ldr	r5, [pc, #76]	; (2a40 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    29f4:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    29f8:	ldr	r0, [pc, #72]	; (2a44 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    29fa:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    29fe:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2a00:	movs	r3, #1
    2a02:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2a06:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2a0a:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2a0e:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2a10:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2a12:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2a16:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2a18:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2a1a:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2a1e:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2a22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a26:	nop
    2a28:	.word	0x1fff0000
    2a2c:	.word	0x40048034
    2a30:	.word	0x4000d800
    2a34:	.word	0x40072140
    2a38:	.word	0x4007209c
    2a3c:	.word	0x400720b0
    2a40:	.word	0xe000e435
    2a44:	.word	0xe000e104
    2a48:	.word	0x40072144
    2a4c:	.word	0x40072080
    2a50:	.word	0x40072088

00002a54 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2a54:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2a56:	ldr	r4, [pc, #176]	; (2b08 <yield+0xb4>)
    2a58:	ldrb	r3, [r4, #0]
    2a5a:	cbz	r3, 2a5e <yield+0xa>
    2a5c:	pop	{r3, r4, r5, pc}
	running = 1;
    2a5e:	movs	r3, #1
    2a60:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2a62:	bl	f80 <usb_serial_available>
	if (Serial.available()) serialEvent();
    2a66:	cmp	r0, #0
    2a68:	bne.n	2af0 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    2a6a:	bl	3028 <serial_available>
	if (Serial1.available()) serialEvent1();
    2a6e:	cmp	r0, #0
    2a70:	bne.n	2aea <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    2a72:	bl	2d10 <serial2_available>
	if (Serial2.available()) serialEvent2();
    2a76:	cmp	r0, #0
    2a78:	bne.n	2ae4 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    2a7a:	bl	3328 <serial3_available>
	if (Serial3.available()) serialEvent3();
    2a7e:	cbnz	r0, 2ade <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    2a80:	bl	2e3c <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2a84:	cbnz	r0, 2ad8 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    2a86:	bl	2c18 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2a8a:	cbnz	r0, 2ad2 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    2a8c:	bl	3154 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2a90:	cbnz	r0, 2acc <yield+0x78>
#endif
	running = 0;
    2a92:	movs	r3, #0
    2a94:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2a96:	mrs	r3, IPSR
		if (ipsr != 0) return;
    2a9a:	cmp	r3, #0
    2a9c:	bne.n	2a5c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2a9e:	mrs	r1, PRIMASK
		__disable_irq();
    2aa2:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2aa4:	ldr	r3, [pc, #100]	; (2b0c <yield+0xb8>)
    2aa6:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2aa8:	cbz	r0, 2af6 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2aaa:	ldr	r4, [pc, #100]	; (2b10 <yield+0xbc>)
    2aac:	ldrb	r2, [r4, #0]
    2aae:	cbnz	r2, 2af6 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    2ab0:	ldr	r5, [r0, #20]
    2ab2:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2ab4:	movs	r3, #1
    2ab6:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    2ab8:	cbz	r5, 2afe <yield+0xaa>
			firstYield->_prev = nullptr;
    2aba:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2abc:	cbnz	r1, 2ac0 <yield+0x6c>
    2abe:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2ac0:	movs	r5, #0
    2ac2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2ac4:	ldr	r3, [r0, #8]
    2ac6:	blx	r3
		runningFromYield = false;
    2ac8:	strb	r5, [r4, #0]
    2aca:	b.n	2a5c <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2acc:	bl	2c10 <serialEvent6()>
    2ad0:	b.n	2a92 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2ad2:	bl	2b18 <serialEvent5()>
    2ad6:	b.n	2a8c <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2ad8:	bl	2bfc <serialEvent4()>
    2adc:	b.n	2a86 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    2ade:	bl	3424 <serialEvent3()>
    2ae2:	b.n	2a80 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    2ae4:	bl	2bf8 <serialEvent2()>
    2ae8:	b.n	2a7a <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    2aea:	bl	3420 <serialEvent1()>
    2aee:	b.n	2a72 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    2af0:	bl	2b44 <serialEvent()>
    2af4:	b.n	2a6a <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2af6:	cmp	r1, #0
    2af8:	bne.n	2a5c <yield+0x8>
    2afa:	cpsie	i
    2afc:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2afe:	ldr	r3, [pc, #20]	; (2b14 <yield+0xc0>)
    2b00:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2b02:	cmp	r1, #0
    2b04:	bne.n	2ac0 <yield+0x6c>
    2b06:	b.n	2abe <yield+0x6a>
    2b08:	.word	0x1fff1729
    2b0c:	.word	0x1fff1a3c
    2b10:	.word	0x1fff1a40
    2b14:	.word	0x1fff1a38

00002b18 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    2b18:	bx	lr
    2b1a:	nop

00002b1c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2b1c:	b.w	f9c <usb_serial_flush_input>

00002b20 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2b20:	b.w	f50 <usb_serial_peekchar>

00002b24 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2b24:	b.w	f08 <usb_serial_getchar>

00002b28 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2b28:	b.w	f80 <usb_serial_available>

00002b2c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2b2c:	b.w	113c <usb_serial_flush_output>

00002b30 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2b30:	b.w	10f4 <usb_serial_write_buffer_free>

00002b34 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2b34:	mov	r0, r1
    2b36:	mov	r1, r2
    2b38:	b.w	fd4 <usb_serial_write>

00002b3c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2b3c:	mov	r0, r1
    2b3e:	b.w	10dc <usb_serial_putchar>
    2b42:	nop

00002b44 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2b44:	bx	lr
    2b46:	nop

00002b48 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2b48:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    2b4a:	ldr	r2, [pc, #24]	; (2b64 <Print::println()+0x1c>)
	return write(buf, 2);
    2b4c:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2b4e:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    2b50:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2b52:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2b54:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2b56:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    2b5a:	movs	r2, #2
    2b5c:	blx	r3
}
    2b5e:	add	sp, #12
    2b60:	ldr.w	pc, [sp], #4
    2b64:	.word	0x00004288

00002b68 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2b68:	push	{r4, r5, r6, r7, lr}
    2b6a:	mov	r7, r0
    2b6c:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2b6e:	cmp	r2, #0
    2b70:	beq.n	2bda <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2b72:	cmp	r2, #1
    2b74:	it	eq
    2b76:	moveq	r2, #10
	}


	if (n == 0) {
    2b78:	cbz	r1, 2bd0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2b7a:	movs	r4, #33	; 0x21
    2b7c:	b.n	2b80 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2b7e:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2b80:	udiv	r5, r1, r2
    2b84:	mls	r1, r2, r5, r1
    2b88:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2b8a:	cmp	r1, #9
    2b8c:	add.w	r1, r0, #48	; 0x30
    2b90:	it	ls
    2b92:	uxtbls	r0, r1
    2b94:	add	r1, sp, #40	; 0x28
    2b96:	it	hi
    2b98:	addhi	r0, #55	; 0x37
    2b9a:	add	r1, r4
    2b9c:	it	hi
    2b9e:	uxtbhi	r0, r0
    2ba0:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    2ba4:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    2ba6:	mov	r1, r5
    2ba8:	cmp	r5, #0
    2baa:	bne.n	2b7e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2bac:	cbz	r3, 2bbc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2bae:	subs	r4, #1
    2bb0:	uxtb	r4, r4
		buf[i] = '-';
    2bb2:	add	r3, sp, #40	; 0x28
    2bb4:	add	r3, r4
    2bb6:	movs	r2, #45	; 0x2d
    2bb8:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2bbc:	ldr	r3, [r7, #0]
    2bbe:	add	r2, sp, #4
    2bc0:	adds	r1, r2, r4
    2bc2:	ldr	r3, [r3, #4]
    2bc4:	mov	r0, r7
    2bc6:	rsb	r2, r4, #34	; 0x22
    2bca:	blx	r3
}
    2bcc:	add	sp, #44	; 0x2c
    2bce:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2bd0:	movs	r2, #48	; 0x30
    2bd2:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2bd6:	movs	r4, #33	; 0x21
    2bd8:	b.n	2bac <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2bda:	ldr	r3, [r0, #0]
    2bdc:	uxtb	r1, r1
    2bde:	ldr	r3, [r3, #0]
    2be0:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2be2:	add	sp, #44	; 0x2c
    2be4:	pop	{r4, r5, r6, r7, pc}
    2be6:	nop

00002be8 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    2be8:	cmp	r1, #0
		sign = '-';
		n = -n;
    2bea:	itte	lt
    2bec:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    2bee:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    2bf0:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    2bf2:	movs	r2, #10
    2bf4:	b.w	2b68 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00002bf8 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    2bf8:	bx	lr
    2bfa:	nop

00002bfc <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    2bfc:	bx	lr
    2bfe:	nop

00002c00 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2c00:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2c02:	bl	8a0 <setup>
	while (1) {
		loop();
    2c06:	bl	8a4 <loop>
		yield();
    2c0a:	bl	2a54 <yield>
    2c0e:	b.n	2c06 <main+0x6>

00002c10 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    2c10:	bx	lr
    2c12:	nop

00002c14 <operator new(unsigned int)>:
    2c14:	b.w	3678 <malloc>

00002c18 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c18:	ldr	r2, [pc, #20]	; (2c30 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    2c1a:	ldr	r3, [pc, #24]	; (2c34 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c1c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2c1e:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c20:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2c22:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2c24:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    2c26:	it	cc
    2c28:	addcc	r0, #64	; 0x40
    2c2a:	subs	r0, r0, r3
}
    2c2c:	bx	lr
    2c2e:	nop
    2c30:	.word	0x1fff1730
    2c34:	.word	0x1fff1731

00002c38 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    2c38:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    2c3a:	ldr	r3, [pc, #172]	; (2ce8 <uart4_status_isr+0xb0>)
    2c3c:	ldrb	r2, [r3, #4]
    2c3e:	lsls	r4, r2, #26
    2c40:	bpl.n	2c82 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2c42:	ldr	r0, [pc, #168]	; (2cec <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2c44:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2c46:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c48:	ldr	r1, [pc, #164]	; (2cf0 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2c4a:	adds	r3, #1
    2c4c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c4e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2c50:	it	gt
    2c52:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c54:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2c56:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c58:	beq.n	2c62 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    2c5a:	ldr	r4, [pc, #152]	; (2cf4 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    2c5c:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2c5e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2c60:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2c62:	ldr	r2, [pc, #148]	; (2cf8 <uart4_status_isr+0xc0>)
    2c64:	ldr	r1, [r2, #0]
    2c66:	cbz	r1, 2c82 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2c68:	ldr	r2, [pc, #144]	; (2cfc <uart4_status_isr+0xc4>)
    2c6a:	ldrb	r2, [r2, #0]
    2c6c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2c6e:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2c70:	itet	cc
    2c72:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2c76:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2c78:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2c7a:	cmp	r3, #39	; 0x27
    2c7c:	itt	gt
    2c7e:	movgt	r3, #1
    2c80:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    2c82:	ldr	r2, [pc, #100]	; (2ce8 <uart4_status_isr+0xb0>)
    2c84:	ldrb	r3, [r2, #3]
    2c86:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2c88:	lsls	r0, r3, #24
    2c8a:	bmi.n	2cb0 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2c8c:	lsls	r2, r3, #25
    2c8e:	bpl.n	2cac <uart4_status_isr+0x74>
    2c90:	ldr	r3, [pc, #84]	; (2ce8 <uart4_status_isr+0xb0>)
    2c92:	ldrb	r3, [r3, #4]
    2c94:	lsls	r3, r3, #25
    2c96:	bpl.n	2cac <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2c98:	ldr	r3, [pc, #100]	; (2d00 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2c9a:	ldr	r1, [pc, #104]	; (2d04 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2c9c:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2c9e:	movs	r2, #0
    2ca0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2ca2:	cbz	r3, 2ca6 <uart4_status_isr+0x6e>
    2ca4:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    2ca6:	ldr	r3, [pc, #64]	; (2ce8 <uart4_status_isr+0xb0>)
    2ca8:	movs	r2, #44	; 0x2c
    2caa:	strb	r2, [r3, #3]
	}
}
    2cac:	pop	{r4, r5}
    2cae:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2cb0:	ldrb	r1, [r2, #4]
    2cb2:	lsls	r1, r1, #24
    2cb4:	bpl.n	2c8c <uart4_status_isr+0x54>
		head = tx_buffer_head;
    2cb6:	ldr	r1, [pc, #80]	; (2d08 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2cb8:	ldr	r0, [pc, #64]	; (2cfc <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2cba:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2cbc:	ldrb	r1, [r0, #0]
    2cbe:	uxtb	r1, r1
		if (head == tail) {
    2cc0:	cmp	r4, r1
    2cc2:	beq.n	2ce0 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2cc4:	adds	r2, r1, #1
    2cc6:	cmp	r2, #39	; 0x27
    2cc8:	itt	hi
    2cca:	movhi	r1, #0
    2ccc:	movhi	r2, r1
			n = tx_buffer[tail];
    2cce:	ldr	r5, [pc, #60]	; (2d0c <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2cd0:	ldr	r4, [pc, #20]	; (2ce8 <uart4_status_isr+0xb0>)
    2cd2:	it	ls
    2cd4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2cd6:	ldrb	r2, [r5, r2]
    2cd8:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2cda:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2cdc:	strb	r1, [r0, #0]
    2cde:	b.n	2c8c <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    2ce0:	movs	r1, #108	; 0x6c
    2ce2:	strb	r1, [r2, #3]
    2ce4:	b.n	2c8c <uart4_status_isr+0x54>
    2ce6:	nop
    2ce8:	.word	0x400ea000
    2cec:	.word	0x1fff1730
    2cf0:	.word	0x1fff1731
    2cf4:	.word	0x1fff175c
    2cf8:	.word	0x1fff172c
    2cfc:	.word	0x1fff179d
    2d00:	.word	0x1fff17a0
    2d04:	.word	0x1fff179c
    2d08:	.word	0x1fff17a4
    2d0c:	.word	0x1fff1734

00002d10 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d10:	ldr	r2, [pc, #20]	; (2d28 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    2d12:	ldr	r3, [pc, #24]	; (2d2c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d14:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2d16:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d18:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2d1a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2d1c:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    2d1e:	it	cc
    2d20:	addcc	r0, #64	; 0x40
    2d22:	subs	r0, r0, r3
}
    2d24:	bx	lr
    2d26:	nop
    2d28:	.word	0x1fff1818
    2d2c:	.word	0x1fff17ad

00002d30 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    2d30:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2d32:	ldr	r3, [pc, #224]	; (2e14 <uart1_status_isr+0xe4>)
    2d34:	ldrb	r2, [r3, #4]
    2d36:	tst.w	r2, #48	; 0x30
    2d3a:	beq.n	2d96 <uart1_status_isr+0x66>
		__disable_irq();
    2d3c:	cpsid	i
		avail = UART1_RCFIFO;
    2d3e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2d40:	and.w	r2, r1, #255	; 0xff
    2d44:	cmp	r1, #0
    2d46:	beq.n	2dc4 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2d48:	cpsie	i
			head = rx_buffer_head;
    2d4a:	ldr	r7, [pc, #204]	; (2e18 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2d4c:	ldr	r1, [pc, #204]	; (2e1c <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2d4e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2d50:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2d52:	ldr	r6, [pc, #204]	; (2e20 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2d54:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2d56:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2d58:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    2d5a:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2d5c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2d5e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2d60:	it	cs
    2d62:	movcs	r3, #0
				if (newhead != tail) {
    2d64:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2d66:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2d6a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2d6c:	itt	ne
    2d6e:	strbne	r1, [r6, r3]
    2d70:	movne	r0, r3
				}
			} while (--avail > 0);
    2d72:	ands.w	r2, r2, #255	; 0xff
    2d76:	bne.n	2d5a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2d78:	ldr	r3, [pc, #168]	; (2e24 <uart1_status_isr+0xf4>)
    2d7a:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2d7c:	uxtb	r2, r0
    2d7e:	strb	r2, [r7, #0]
			if (rts_pin) {
    2d80:	cbz	r3, 2d96 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2d82:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2d84:	itet	cc
    2d86:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2d8a:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2d8c:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2d8e:	cmp	r0, #39	; 0x27
    2d90:	itt	gt
    2d92:	movgt	r2, #1
    2d94:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    2d96:	ldr	r1, [pc, #124]	; (2e14 <uart1_status_isr+0xe4>)
    2d98:	ldrb	r2, [r1, #3]
    2d9a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2d9c:	lsls	r5, r2, #24
    2d9e:	bmi.n	2dce <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    2da0:	lsls	r2, r2, #25
    2da2:	bpl.n	2dc0 <uart1_status_isr+0x90>
    2da4:	ldr	r3, [pc, #108]	; (2e14 <uart1_status_isr+0xe4>)
    2da6:	ldrb	r3, [r3, #4]
    2da8:	lsls	r3, r3, #25
    2daa:	bpl.n	2dc0 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2dac:	ldr	r3, [pc, #120]	; (2e28 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2dae:	ldr	r1, [pc, #124]	; (2e2c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2db0:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2db2:	movs	r2, #0
    2db4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2db6:	cbz	r3, 2dba <uart1_status_isr+0x8a>
    2db8:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    2dba:	ldr	r3, [pc, #88]	; (2e14 <uart1_status_isr+0xe4>)
    2dbc:	movs	r2, #60	; 0x3c
    2dbe:	strb	r2, [r3, #3]
	}
}
    2dc0:	pop	{r4, r5, r6, r7}
    2dc2:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2dc4:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    2dc6:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2dc8:	strb	r2, [r3, #17]
			__enable_irq();
    2dca:	cpsie	i
    2dcc:	b.n	2d96 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2dce:	ldrb	r3, [r1, #4]
    2dd0:	lsls	r4, r3, #24
    2dd2:	bpl.n	2da0 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    2dd4:	ldr	r3, [pc, #88]	; (2e30 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    2dd6:	ldr	r6, [pc, #92]	; (2e34 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2dd8:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2dda:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2ddc:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2dde:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2de0:	cmp	r4, r3
    2de2:	beq.n	2e02 <uart1_status_isr+0xd2>
    2de4:	ldr	r5, [pc, #80]	; (2e38 <uart1_status_isr+0x108>)
    2de6:	b.n	2dec <uart1_status_isr+0xbc>
    2de8:	cmp	r3, r4
    2dea:	beq.n	2e02 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2dec:	adds	r3, #1
    2dee:	cmp	r3, #40	; 0x28
    2df0:	it	cs
    2df2:	movcs	r3, #0
			avail = UART1_S1;
    2df4:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2df6:	ldrb	r0, [r5, r3]
    2df8:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    2dfa:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    2dfc:	ldrb	r0, [r1, #20]
    2dfe:	cmp	r0, #7
    2e00:	bls.n	2de8 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    2e02:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2e04:	ldr	r1, [pc, #12]	; (2e14 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    2e06:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2e08:	ldrb	r3, [r1, #4]
    2e0a:	lsls	r0, r3, #24
    2e0c:	itt	mi
    2e0e:	movmi	r3, #124	; 0x7c
    2e10:	strbmi	r3, [r1, #3]
    2e12:	b.n	2da0 <uart1_status_isr+0x70>
    2e14:	.word	0x4006b000
    2e18:	.word	0x1fff1818
    2e1c:	.word	0x1fff17ad
    2e20:	.word	0x1fff17d8
    2e24:	.word	0x1fff17a8
    2e28:	.word	0x1fff181c
    2e2c:	.word	0x1fff17ac
    2e30:	.word	0x1fff1820
    2e34:	.word	0x1fff1819
    2e38:	.word	0x1fff17b0

00002e3c <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e3c:	ldr	r2, [pc, #20]	; (2e54 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    2e3e:	ldr	r3, [pc, #24]	; (2e58 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e40:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2e42:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e44:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2e46:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2e48:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    2e4a:	it	cc
    2e4c:	addcc	r0, #64	; 0x40
    2e4e:	subs	r0, r0, r3
}
    2e50:	bx	lr
    2e52:	nop
    2e54:	.word	0x1fff1828
    2e58:	.word	0x1fff1829

00002e5c <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    2e5c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    2e5e:	ldr	r3, [pc, #172]	; (2f0c <uart3_status_isr+0xb0>)
    2e60:	ldrb	r2, [r3, #4]
    2e62:	lsls	r4, r2, #26
    2e64:	bpl.n	2ea6 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2e66:	ldr	r0, [pc, #168]	; (2f10 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2e68:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2e6a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e6c:	ldr	r1, [pc, #164]	; (2f14 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2e6e:	adds	r3, #1
    2e70:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e72:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2e74:	it	gt
    2e76:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e78:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2e7a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e7c:	beq.n	2e86 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    2e7e:	ldr	r4, [pc, #152]	; (2f18 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    2e80:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2e82:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2e84:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2e86:	ldr	r2, [pc, #148]	; (2f1c <uart3_status_isr+0xc0>)
    2e88:	ldr	r1, [r2, #0]
    2e8a:	cbz	r1, 2ea6 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2e8c:	ldr	r2, [pc, #144]	; (2f20 <uart3_status_isr+0xc4>)
    2e8e:	ldrb	r2, [r2, #0]
    2e90:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2e92:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2e94:	itet	cc
    2e96:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2e9a:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2e9c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2e9e:	cmp	r3, #39	; 0x27
    2ea0:	itt	gt
    2ea2:	movgt	r3, #1
    2ea4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    2ea6:	ldr	r2, [pc, #100]	; (2f0c <uart3_status_isr+0xb0>)
    2ea8:	ldrb	r3, [r2, #3]
    2eaa:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2eac:	lsls	r0, r3, #24
    2eae:	bmi.n	2ed4 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    2eb0:	lsls	r2, r3, #25
    2eb2:	bpl.n	2ed0 <uart3_status_isr+0x74>
    2eb4:	ldr	r3, [pc, #84]	; (2f0c <uart3_status_isr+0xb0>)
    2eb6:	ldrb	r3, [r3, #4]
    2eb8:	lsls	r3, r3, #25
    2eba:	bpl.n	2ed0 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2ebc:	ldr	r3, [pc, #100]	; (2f24 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2ebe:	ldr	r1, [pc, #104]	; (2f28 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2ec0:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2ec2:	movs	r2, #0
    2ec4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2ec6:	cbz	r3, 2eca <uart3_status_isr+0x6e>
    2ec8:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    2eca:	ldr	r3, [pc, #64]	; (2f0c <uart3_status_isr+0xb0>)
    2ecc:	movs	r2, #44	; 0x2c
    2ece:	strb	r2, [r3, #3]
	}
}
    2ed0:	pop	{r4, r5}
    2ed2:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2ed4:	ldrb	r1, [r2, #4]
    2ed6:	lsls	r1, r1, #24
    2ed8:	bpl.n	2eb0 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    2eda:	ldr	r1, [pc, #80]	; (2f2c <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2edc:	ldr	r0, [pc, #64]	; (2f20 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2ede:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2ee0:	ldrb	r1, [r0, #0]
    2ee2:	uxtb	r1, r1
		if (head == tail) {
    2ee4:	cmp	r4, r1
    2ee6:	beq.n	2f04 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    2ee8:	adds	r2, r1, #1
    2eea:	cmp	r2, #39	; 0x27
    2eec:	itt	hi
    2eee:	movhi	r1, #0
    2ef0:	movhi	r2, r1
			n = tx_buffer[tail];
    2ef2:	ldr	r5, [pc, #60]	; (2f30 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2ef4:	ldr	r4, [pc, #20]	; (2f0c <uart3_status_isr+0xb0>)
    2ef6:	it	ls
    2ef8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2efa:	ldrb	r2, [r5, r2]
    2efc:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2efe:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2f00:	strb	r1, [r0, #0]
    2f02:	b.n	2eb0 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    2f04:	movs	r1, #108	; 0x6c
    2f06:	strb	r1, [r2, #3]
    2f08:	b.n	2eb0 <uart3_status_isr+0x54>
    2f0a:	nop
    2f0c:	.word	0x4006d000
    2f10:	.word	0x1fff1828
    2f14:	.word	0x1fff1829
    2f18:	.word	0x1fff1854
    2f1c:	.word	0x1fff1824
    2f20:	.word	0x1fff1895
    2f24:	.word	0x1fff1898
    2f28:	.word	0x1fff1894
    2f2c:	.word	0x1fff189c
    2f30:	.word	0x1fff182c

00002f34 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    2f34:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2f36:	ldr	r4, [pc, #64]	; (2f78 <fault_isr+0x44>)
    2f38:	b.n	2f4c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2f3a:	ldr	r3, [r4, #0]
    2f3c:	lsls	r1, r3, #21
    2f3e:	bmi.n	2f5c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2f40:	ldr	r3, [r4, #0]
    2f42:	lsls	r2, r3, #20
    2f44:	bmi.n	2f66 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2f46:	ldr	r3, [r4, #0]
    2f48:	lsls	r3, r3, #19
    2f4a:	bmi.n	2f70 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2f4c:	ldr	r3, [r4, #0]
    2f4e:	lsls	r0, r3, #13
    2f50:	bpl.n	2f3a <fault_isr+0x6>
    2f52:	bl	1fd4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2f56:	ldr	r3, [r4, #0]
    2f58:	lsls	r1, r3, #21
    2f5a:	bpl.n	2f40 <fault_isr+0xc>
    2f5c:	bl	3048 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2f60:	ldr	r3, [r4, #0]
    2f62:	lsls	r2, r3, #20
    2f64:	bpl.n	2f46 <fault_isr+0x12>
    2f66:	bl	2d30 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2f6a:	ldr	r3, [r4, #0]
    2f6c:	lsls	r3, r3, #19
    2f6e:	bpl.n	2f4c <fault_isr+0x18>
    2f70:	bl	3348 <uart2_status_isr>
    2f74:	b.n	2f4c <fault_isr+0x18>
    2f76:	nop
    2f78:	.word	0x40048034

00002f7c <unused_isr>:
	}
}

void unused_isr(void)
{
    2f7c:	push	{r3, lr}
	fault_isr();
    2f7e:	bl	2f34 <fault_isr>
    2f82:	nop

00002f84 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    2f84:	ldr	r3, [pc, #4]	; (2f8c <startup_early_hook+0x8>)
    2f86:	movs	r2, #16
    2f88:	strh	r2, [r3, #0]
    2f8a:	bx	lr
    2f8c:	.word	0x40052000

00002f90 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    2f90:	bx	lr
    2f92:	nop

00002f94 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    2f94:	ldr	r1, [pc, #36]	; (2fbc <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    2f96:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    2f98:	ldr	r3, [r1, #0]
	if (incr != 0) {
    2f9a:	cbz	r0, 2faa <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    2f9c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    2f9e:	add	r0, r3
    2fa0:	sub.w	r2, r2, #8192	; 0x2000
    2fa4:	cmp	r0, r2
    2fa6:	bcs.n	2fae <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    2fa8:	str	r0, [r1, #0]
	}
	return prev;
    2faa:	mov	r0, r3
}
    2fac:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    2fae:	bl	361c <__errno>
    2fb2:	movs	r3, #12
    2fb4:	str	r3, [r0, #0]
			return (void *)-1;
    2fb6:	mov.w	r0, #4294967295
    2fba:	pop	{r3, pc}
    2fbc:	.word	0x1fff0c58

00002fc0 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    2fc0:	ldr	r2, [pc, #32]	; (2fe4 <kinetis_hsrun_disable+0x24>)
    2fc2:	ldrb	r3, [r2, #0]
    2fc4:	cmp	r3, #128	; 0x80
    2fc6:	beq.n	2fcc <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    2fc8:	movs	r0, #0
}
    2fca:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2fcc:	ldr	r1, [pc, #24]	; (2fe8 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2fce:	ldr	r3, [pc, #28]	; (2fec <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2fd0:	ldr	r0, [pc, #28]	; (2ff0 <kinetis_hsrun_disable+0x30>)
    2fd2:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2fd4:	movs	r1, #0
    2fd6:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    2fd8:	ldrb	r3, [r2, #0]
    2fda:	cmp	r3, #128	; 0x80
    2fdc:	beq.n	2fd8 <kinetis_hsrun_disable+0x18>
		return 1;
    2fde:	movs	r0, #1
    2fe0:	bx	lr
    2fe2:	nop
    2fe4:	.word	0x4007e003
    2fe8:	.word	0x40048044
    2fec:	.word	0x4007e001
    2ff0:	.word	0x22280000

00002ff4 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    2ff4:	ldr	r2, [pc, #36]	; (301c <kinetis_hsrun_enable+0x28>)
    2ff6:	ldrb	r3, [r2, #0]
    2ff8:	cmp	r3, #1
    2ffa:	beq.n	3000 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    2ffc:	movs	r0, #0
}
    2ffe:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3000:	add.w	r3, r3, #1073741824	; 0x40000000
    3004:	add.w	r3, r3, #516096	; 0x7e000
    3008:	movs	r1, #96	; 0x60
    300a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    300c:	ldrb	r3, [r2, #0]
    300e:	cmp	r3, #128	; 0x80
    3010:	bne.n	300c <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3012:	ldr	r3, [pc, #12]	; (3020 <kinetis_hsrun_enable+0x2c>)
    3014:	ldr	r2, [pc, #12]	; (3024 <kinetis_hsrun_enable+0x30>)
    3016:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3018:	movs	r0, #1
    301a:	bx	lr
    301c:	.word	0x4007e003
    3020:	.word	0x40048044
    3024:	.word	0x02060000

00003028 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3028:	ldr	r2, [pc, #20]	; (3040 <serial_available+0x18>)
	tail = rx_buffer_tail;
    302a:	ldr	r3, [pc, #24]	; (3044 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    302c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    302e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3030:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3032:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3034:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3036:	it	cc
    3038:	addcc	r0, #64	; 0x40
    303a:	subs	r0, r0, r3
}
    303c:	bx	lr
    303e:	nop
    3040:	.word	0x1fff18a4
    3044:	.word	0x1fff18a5

00003048 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3048:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    304a:	ldr	r3, [pc, #224]	; (312c <uart0_status_isr+0xe4>)
    304c:	ldrb	r2, [r3, #4]
    304e:	tst.w	r2, #48	; 0x30
    3052:	beq.n	30ae <uart0_status_isr+0x66>
		__disable_irq();
    3054:	cpsid	i
		avail = UART0_RCFIFO;
    3056:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3058:	and.w	r2, r1, #255	; 0xff
    305c:	cmp	r1, #0
    305e:	beq.n	30dc <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3060:	cpsie	i
			head = rx_buffer_head;
    3062:	ldr	r7, [pc, #204]	; (3130 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3064:	ldr	r1, [pc, #204]	; (3134 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3066:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3068:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    306a:	ldr	r6, [pc, #204]	; (3138 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    306c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    306e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3070:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3072:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3074:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3076:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3078:	it	cs
    307a:	movcs	r3, #0
				if (newhead != tail) {
    307c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    307e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3082:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3084:	itt	ne
    3086:	strbne	r1, [r6, r3]
    3088:	movne	r0, r3
				}
			} while (--avail > 0);
    308a:	ands.w	r2, r2, #255	; 0xff
    308e:	bne.n	3072 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3090:	ldr	r3, [pc, #168]	; (313c <uart0_status_isr+0xf4>)
    3092:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3094:	uxtb	r2, r0
    3096:	strb	r2, [r7, #0]
			if (rts_pin) {
    3098:	cbz	r3, 30ae <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    309a:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    309c:	itet	cc
    309e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    30a2:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    30a4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    30a6:	cmp	r0, #39	; 0x27
    30a8:	itt	gt
    30aa:	movgt	r2, #1
    30ac:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    30ae:	ldr	r1, [pc, #124]	; (312c <uart0_status_isr+0xe4>)
    30b0:	ldrb	r2, [r1, #3]
    30b2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    30b4:	lsls	r5, r2, #24
    30b6:	bmi.n	30e6 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    30b8:	lsls	r2, r2, #25
    30ba:	bpl.n	30d8 <uart0_status_isr+0x90>
    30bc:	ldr	r3, [pc, #108]	; (312c <uart0_status_isr+0xe4>)
    30be:	ldrb	r3, [r3, #4]
    30c0:	lsls	r3, r3, #25
    30c2:	bpl.n	30d8 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    30c4:	ldr	r3, [pc, #120]	; (3140 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    30c6:	ldr	r1, [pc, #124]	; (3144 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    30c8:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    30ca:	movs	r2, #0
    30cc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    30ce:	cbz	r3, 30d2 <uart0_status_isr+0x8a>
    30d0:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    30d2:	ldr	r3, [pc, #88]	; (312c <uart0_status_isr+0xe4>)
    30d4:	movs	r2, #60	; 0x3c
    30d6:	strb	r2, [r3, #3]
	}
}
    30d8:	pop	{r4, r5, r6, r7}
    30da:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    30dc:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    30de:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    30e0:	strb	r2, [r3, #17]
			__enable_irq();
    30e2:	cpsie	i
    30e4:	b.n	30ae <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    30e6:	ldrb	r3, [r1, #4]
    30e8:	lsls	r4, r3, #24
    30ea:	bpl.n	30b8 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    30ec:	ldr	r3, [pc, #88]	; (3148 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    30ee:	ldr	r6, [pc, #92]	; (314c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    30f0:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    30f2:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    30f4:	uxtb	r4, r4
		tail = tx_buffer_tail;
    30f6:	uxtb	r3, r3
		do {
			if (tail == head) break;
    30f8:	cmp	r4, r3
    30fa:	beq.n	311a <uart0_status_isr+0xd2>
    30fc:	ldr	r5, [pc, #80]	; (3150 <uart0_status_isr+0x108>)
    30fe:	b.n	3104 <uart0_status_isr+0xbc>
    3100:	cmp	r3, r4
    3102:	beq.n	311a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3104:	adds	r3, #1
    3106:	cmp	r3, #64	; 0x40
    3108:	it	cs
    310a:	movcs	r3, #0
			avail = UART0_S1;
    310c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    310e:	ldrb	r0, [r5, r3]
    3110:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3112:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3114:	ldrb	r0, [r1, #20]
    3116:	cmp	r0, #7
    3118:	bls.n	3100 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    311a:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    311c:	ldr	r1, [pc, #12]	; (312c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    311e:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3120:	ldrb	r3, [r1, #4]
    3122:	lsls	r0, r3, #24
    3124:	itt	mi
    3126:	movmi	r3, #124	; 0x7c
    3128:	strbmi	r3, [r1, #3]
    312a:	b.n	30b8 <uart0_status_isr+0x70>
    312c:	.word	0x4006a000
    3130:	.word	0x1fff18a4
    3134:	.word	0x1fff18a5
    3138:	.word	0x1fff18e8
    313c:	.word	0x1fff18a0
    3140:	.word	0x1fff192c
    3144:	.word	0x1fff1928
    3148:	.word	0x1fff1930
    314c:	.word	0x1fff1929
    3150:	.word	0x1fff18a8

00003154 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3154:	ldr	r2, [pc, #20]	; (316c <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3156:	ldr	r3, [pc, #24]	; (3170 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3158:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    315a:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    315c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    315e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3160:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3162:	it	cc
    3164:	addcc	r0, #64	; 0x40
    3166:	subs	r0, r0, r3
}
    3168:	bx	lr
    316a:	nop
    316c:	.word	0x1fff1938
    3170:	.word	0x1fff1939

00003174 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3174:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3176:	ldr	r3, [pc, #176]	; (3228 <lpuart0_status_isr+0xb4>)
    3178:	ldr	r2, [r3, #4]
    317a:	lsls	r4, r2, #10
    317c:	bpl.n	31be <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    317e:	ldr	r0, [pc, #172]	; (322c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3180:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3182:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3184:	ldr	r1, [pc, #168]	; (3230 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3186:	adds	r3, #1
    3188:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    318a:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    318c:	it	gt
    318e:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3190:	cmp	r3, r1
    3192:	beq.n	319e <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3194:	ldr	r4, [pc, #156]	; (3234 <lpuart0_status_isr+0xc0>)
    3196:	uxtb	r2, r2
			rx_buffer_head = head;
    3198:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    319a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    319c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    319e:	ldr	r2, [pc, #152]	; (3238 <lpuart0_status_isr+0xc4>)
    31a0:	ldr	r1, [r2, #0]
    31a2:	cbz	r1, 31be <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    31a4:	ldr	r2, [pc, #148]	; (323c <lpuart0_status_isr+0xc8>)
    31a6:	ldrb	r2, [r2, #0]
    31a8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    31aa:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    31ac:	itet	cc
    31ae:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    31b2:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    31b4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    31b6:	cmp	r3, #39	; 0x27
    31b8:	itt	gt
    31ba:	movgt	r3, #1
    31bc:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    31be:	ldr	r2, [pc, #104]	; (3228 <lpuart0_status_isr+0xb4>)
    31c0:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    31c2:	lsls	r0, r3, #8
    31c4:	bpl.n	31cc <lpuart0_status_isr+0x58>
    31c6:	ldr	r2, [r2, #4]
    31c8:	lsls	r1, r2, #8
    31ca:	bmi.n	31f0 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    31cc:	lsls	r2, r3, #9
    31ce:	bpl.n	31ec <lpuart0_status_isr+0x78>
    31d0:	ldr	r3, [pc, #84]	; (3228 <lpuart0_status_isr+0xb4>)
    31d2:	ldr	r3, [r3, #4]
    31d4:	lsls	r3, r3, #9
    31d6:	bpl.n	31ec <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    31d8:	ldr	r3, [pc, #100]	; (3240 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    31da:	ldr	r1, [pc, #104]	; (3244 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    31dc:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    31de:	movs	r2, #0
    31e0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    31e2:	cbz	r3, 31e6 <lpuart0_status_isr+0x72>
    31e4:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    31e6:	ldr	r3, [pc, #96]	; (3248 <lpuart0_status_isr+0xd4>)
    31e8:	movs	r2, #0
    31ea:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    31ec:	pop	{r4, r5}
    31ee:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    31f0:	ldr	r2, [pc, #88]	; (324c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    31f2:	ldr	r1, [pc, #72]	; (323c <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    31f4:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    31f6:	ldrb	r2, [r1, #0]
    31f8:	uxtb	r2, r2
		if (head == tail) {
    31fa:	cmp	r0, r2
    31fc:	beq.n	321a <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    31fe:	adds	r2, #1
    3200:	cmp	r2, #39	; 0x27
    3202:	itt	hi
    3204:	movhi	r0, #0
    3206:	movhi	r2, r0
			n = tx_buffer[tail];
    3208:	ldr	r5, [pc, #68]	; (3250 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    320a:	ldr	r4, [pc, #28]	; (3228 <lpuart0_status_isr+0xb4>)
    320c:	it	ls
    320e:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3210:	ldrb	r2, [r5, r2]
    3212:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3214:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3216:	strb	r0, [r1, #0]
    3218:	b.n	31cc <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    321a:	ldr	r0, [pc, #56]	; (3254 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    321c:	ldr	r2, [pc, #40]	; (3248 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    321e:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3220:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3222:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3224:	str	r1, [r2, #0]
    3226:	b.n	31cc <lpuart0_status_isr+0x58>
    3228:	.word	0x400c4000
    322c:	.word	0x1fff1938
    3230:	.word	0x1fff1939
    3234:	.word	0x1fff1964
    3238:	.word	0x1fff1934
    323c:	.word	0x1fff19a5
    3240:	.word	0x1fff19a8
    3244:	.word	0x1fff19a4
    3248:	.word	0x43880158
    324c:	.word	0x1fff19ac
    3250:	.word	0x1fff193c
    3254:	.word	0x4388015c

00003258 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3258:	push	{r4, lr}
    325a:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    325c:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    325e:	bl	2fc0 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3262:	ldr	r2, [pc, #96]	; (32c4 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3264:	ldr	r3, [pc, #96]	; (32c8 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3266:	ldr	r1, [pc, #100]	; (32cc <usb_init_serialnumber+0x74>)
    3268:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    326a:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    326c:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    326e:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3270:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3272:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3274:	ldrb	r3, [r2, #0]
    3276:	lsls	r3, r3, #24
    3278:	bpl.n	3274 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    327a:	ldr	r3, [pc, #84]	; (32d0 <usb_init_serialnumber+0x78>)
    327c:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    327e:	bl	2ff4 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3282:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3284:	ldr	r3, [pc, #76]	; (32d4 <usb_init_serialnumber+0x7c>)
    3286:	cmp	r4, r3
    3288:	itt	ls
    328a:	addls.w	r4, r4, r4, lsl #2
    328e:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3290:	mov	r0, r4
    3292:	ldr	r4, [pc, #68]	; (32d8 <usb_init_serialnumber+0x80>)
    3294:	add	r1, sp, #4
    3296:	movs	r2, #10
    3298:	bl	32dc <ultoa>
    329c:	add	r1, sp, #4
    329e:	mov	r0, r4
	for (i=0; i<10; i++) {
    32a0:	movs	r3, #0
		char c = buf[i];
    32a2:	ldrb.w	r2, [r1], #1
    32a6:	adds	r3, #1
		if (!c) break;
    32a8:	cbz	r2, 32ba <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    32aa:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    32ac:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    32b0:	bne.n	32a2 <usb_init_serialnumber+0x4a>
    32b2:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    32b4:	strb	r3, [r4, #0]
}
    32b6:	add	sp, #16
    32b8:	pop	{r4, pc}
    32ba:	lsls	r3, r3, #1
    32bc:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    32be:	strb	r3, [r4, #0]
}
    32c0:	add	sp, #16
    32c2:	pop	{r4, pc}
    32c4:	.word	0x40020004
    32c8:	.word	0x40020000
    32cc:	.word	0x41070000
    32d0:	.word	0x4002000c
    32d4:	.word	0x0098967f
    32d8:	.word	0x1fff0d3c

000032dc <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    32dc:	push	{r4, r5, r6, r7}
    32de:	subs	r5, r1, #1
    32e0:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    32e2:	movs	r4, #0
    32e4:	b.n	32e8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    32e6:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    32e8:	udiv	r3, r0, r2
    32ec:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    32f0:	cmp	r0, #9
    32f2:	add.w	r7, r0, #48	; 0x30
    32f6:	itet	hi
    32f8:	addhi	r0, #55	; 0x37
    32fa:	uxtbls	r0, r7
    32fc:	uxtbhi	r0, r0
    32fe:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3302:	mov	r0, r3
    3304:	cmp	r3, #0
    3306:	bne.n	32e6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3308:	adds	r2, r1, r4
    330a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    330c:	cbz	r4, 3322 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    330e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3310:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3314:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3316:	adds	r3, #1
    3318:	subs	r0, r4, r3
    331a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    331c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3320:	blt.n	330e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3322:	mov	r0, r1
    3324:	pop	{r4, r5, r6, r7}
    3326:	bx	lr

00003328 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3328:	ldr	r2, [pc, #20]	; (3340 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    332a:	ldr	r3, [pc, #24]	; (3344 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    332c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    332e:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3330:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3332:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3334:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3336:	it	cc
    3338:	addcc	r0, #64	; 0x40
    333a:	subs	r0, r0, r3
}
    333c:	bx	lr
    333e:	nop
    3340:	.word	0x1fff19b4
    3344:	.word	0x1fff19b5

00003348 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3348:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    334a:	ldr	r3, [pc, #172]	; (33f8 <uart2_status_isr+0xb0>)
    334c:	ldrb	r2, [r3, #4]
    334e:	lsls	r4, r2, #26
    3350:	bpl.n	3392 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3352:	ldr	r0, [pc, #168]	; (33fc <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3354:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3356:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3358:	ldr	r1, [pc, #164]	; (3400 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    335a:	adds	r3, #1
    335c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    335e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3360:	it	gt
    3362:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3364:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3366:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3368:	beq.n	3372 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    336a:	ldr	r4, [pc, #152]	; (3404 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    336c:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    336e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3370:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3372:	ldr	r2, [pc, #148]	; (3408 <uart2_status_isr+0xc0>)
    3374:	ldr	r1, [r2, #0]
    3376:	cbz	r1, 3392 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3378:	ldr	r2, [pc, #144]	; (340c <uart2_status_isr+0xc4>)
    337a:	ldrb	r2, [r2, #0]
    337c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    337e:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3380:	itet	cc
    3382:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3386:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3388:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    338a:	cmp	r3, #39	; 0x27
    338c:	itt	gt
    338e:	movgt	r3, #1
    3390:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3392:	ldr	r2, [pc, #100]	; (33f8 <uart2_status_isr+0xb0>)
    3394:	ldrb	r3, [r2, #3]
    3396:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3398:	lsls	r0, r3, #24
    339a:	bmi.n	33c0 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    339c:	lsls	r2, r3, #25
    339e:	bpl.n	33bc <uart2_status_isr+0x74>
    33a0:	ldr	r3, [pc, #84]	; (33f8 <uart2_status_isr+0xb0>)
    33a2:	ldrb	r3, [r3, #4]
    33a4:	lsls	r3, r3, #25
    33a6:	bpl.n	33bc <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    33a8:	ldr	r3, [pc, #100]	; (3410 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    33aa:	ldr	r1, [pc, #104]	; (3414 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    33ac:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    33ae:	movs	r2, #0
    33b0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    33b2:	cbz	r3, 33b6 <uart2_status_isr+0x6e>
    33b4:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    33b6:	ldr	r3, [pc, #64]	; (33f8 <uart2_status_isr+0xb0>)
    33b8:	movs	r2, #44	; 0x2c
    33ba:	strb	r2, [r3, #3]
	}
}
    33bc:	pop	{r4, r5}
    33be:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    33c0:	ldrb	r1, [r2, #4]
    33c2:	lsls	r1, r1, #24
    33c4:	bpl.n	339c <uart2_status_isr+0x54>
		head = tx_buffer_head;
    33c6:	ldr	r1, [pc, #80]	; (3418 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    33c8:	ldr	r0, [pc, #64]	; (340c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    33ca:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    33cc:	ldrb	r1, [r0, #0]
    33ce:	uxtb	r1, r1
		if (head == tail) {
    33d0:	cmp	r4, r1
    33d2:	beq.n	33f0 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    33d4:	adds	r2, r1, #1
    33d6:	cmp	r2, #39	; 0x27
    33d8:	itt	hi
    33da:	movhi	r1, #0
    33dc:	movhi	r2, r1
			n = tx_buffer[tail];
    33de:	ldr	r5, [pc, #60]	; (341c <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    33e0:	ldr	r4, [pc, #20]	; (33f8 <uart2_status_isr+0xb0>)
    33e2:	it	ls
    33e4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    33e6:	ldrb	r2, [r5, r2]
    33e8:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    33ea:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    33ec:	strb	r1, [r0, #0]
    33ee:	b.n	339c <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    33f0:	movs	r1, #108	; 0x6c
    33f2:	strb	r1, [r2, #3]
    33f4:	b.n	339c <uart2_status_isr+0x54>
    33f6:	nop
    33f8:	.word	0x4006c000
    33fc:	.word	0x1fff19b4
    3400:	.word	0x1fff19b5
    3404:	.word	0x1fff19e0
    3408:	.word	0x1fff19b0
    340c:	.word	0x1fff1a21
    3410:	.word	0x1fff1a24
    3414:	.word	0x1fff1a20
    3418:	.word	0x1fff1a28
    341c:	.word	0x1fff19b8

00003420 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3420:	bx	lr
    3422:	nop

00003424 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3424:	bx	lr
    3426:	nop

00003428 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3428:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    342a:	mrs	r2, PRIMASK
		__disable_irq();
    342e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3430:	ldrb	r3, [r0, #29]
    3432:	cbnz	r3, 3442 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3434:	ldrb	r1, [r0, #28]
    3436:	cmp	r1, #1
    3438:	beq.n	344c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    343a:	cmp	r1, #3
    343c:	beq.n	3460 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    343e:	movs	r3, #1
    3440:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3442:	cbnz	r2, 3446 <EventResponder::triggerEventNotImmediate()+0x1e>
    3444:	cpsie	i
	}
	enableInterrupts(irq);
}
    3446:	ldr.w	r4, [sp], #4
    344a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    344c:	ldr	r4, [pc, #68]	; (3494 <EventResponder::triggerEventNotImmediate()+0x6c>)
    344e:	ldr	r1, [r4, #0]
    3450:	cbz	r1, 347c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3452:	ldr	r1, [pc, #68]	; (3498 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3454:	str	r3, [r0, #20]
				_prev = lastYield;
    3456:	ldr	r3, [r1, #0]
    3458:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    345a:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    345c:	str	r0, [r3, #20]
    345e:	b.n	343e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3460:	ldr	r4, [pc, #56]	; (349c <EventResponder::triggerEventNotImmediate()+0x74>)
    3462:	ldr	r1, [r4, #0]
    3464:	cbz	r1, 3488 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3466:	ldr	r1, [pc, #56]	; (34a0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3468:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    346a:	ldr	r3, [r1, #0]
    346c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    346e:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3470:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3472:	ldr	r3, [pc, #48]	; (34a4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3474:	mov.w	r1, #268435456	; 0x10000000
    3478:	str	r1, [r3, #0]
    347a:	b.n	343e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    347c:	ldr	r3, [pc, #24]	; (3498 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    347e:	str	r1, [r0, #20]
				_prev = nullptr;
    3480:	str	r1, [r0, #24]
				firstYield = this;
    3482:	str	r0, [r4, #0]
				lastYield = this;
    3484:	str	r0, [r3, #0]
    3486:	b.n	343e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3488:	ldr	r3, [pc, #20]	; (34a0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    348a:	str	r1, [r0, #20]
				_prev = nullptr;
    348c:	str	r1, [r0, #24]
				firstInterrupt = this;
    348e:	str	r0, [r4, #0]
				lastInterrupt = this;
    3490:	str	r0, [r3, #0]
    3492:	b.n	3472 <EventResponder::triggerEventNotImmediate()+0x4a>
    3494:	.word	0x1fff1a3c
    3498:	.word	0x1fff1a38
    349c:	.word	0x1fff1a2c
    34a0:	.word	0x1fff1a30
    34a4:	.word	0xe000ed04

000034a8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    34a8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    34aa:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    34ac:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    34ae:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    34b0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    34b2:	beq.n	34bc <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    34b4:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    34b8:	b.w	3428 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    34bc:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    34be:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    34c2:	bx	r3

000034c4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    34c4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    34c6:	mrs	r2, PRIMASK
		__disable_irq();
    34ca:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    34cc:	ldr	r4, [pc, #48]	; (3500 <EventResponder::runFromInterrupt()+0x3c>)
    34ce:	ldr	r0, [r4, #0]
		if (first) {
    34d0:	cbz	r0, 34f4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    34d2:	ldr	r6, [pc, #48]	; (3504 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    34d4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    34d6:	ldr	r3, [r0, #20]
    34d8:	str	r3, [r4, #0]
			if (firstInterrupt) {
    34da:	cbz	r3, 34fa <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    34dc:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    34de:	cbnz	r2, 34e2 <EventResponder::runFromInterrupt()+0x1e>
    34e0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    34e2:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    34e4:	ldr	r3, [r0, #8]
    34e6:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    34e8:	mrs	r2, PRIMASK
		__disable_irq();
    34ec:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    34ee:	ldr	r0, [r4, #0]
		if (first) {
    34f0:	cmp	r0, #0
    34f2:	bne.n	34d6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    34f4:	cbnz	r2, 34f8 <EventResponder::runFromInterrupt()+0x34>
    34f6:	cpsie	i
    34f8:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    34fa:	str	r3, [r6, #0]
    34fc:	b.n	34de <EventResponder::runFromInterrupt()+0x1a>
    34fe:	nop
    3500:	.word	0x1fff1a2c
    3504:	.word	0x1fff1a30

00003508 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3508:	b.w	34c4 <EventResponder::runFromInterrupt()>

0000350c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    350c:	ldr	r2, [pc, #96]	; (3570 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    350e:	push	{r4, r5}
	if (listActive == nullptr) {
    3510:	ldr	r4, [r2, #0]
    3512:	cmp	r4, #0
    3514:	beq.n	3566 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3516:	ldr	r3, [r0, #0]
    3518:	ldr	r1, [r4, #0]
    351a:	cmp	r3, r1
    351c:	bcs.n	353c <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    351e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3520:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3522:	str	r4, [r0, #8]
		_prev = nullptr;
    3524:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3526:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3528:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    352a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    352c:	movs	r3, #2
    352e:	strb	r3, [r0, #20]
}
    3530:	pop	{r4, r5}
    3532:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3534:	ldr	r1, [r2, #0]
    3536:	cmp	r3, r1
    3538:	mov	r4, r2
    353a:	bcc.n	354e <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    353c:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    353e:	subs	r3, r3, r1
    3540:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3542:	cmp	r2, #0
    3544:	bne.n	3534 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3546:	str	r2, [r0, #8]
		_prev = timer;
    3548:	str	r4, [r0, #12]
		timer->_next = this;
    354a:	str	r0, [r4, #8]
    354c:	b.n	352c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    354e:	ldr	r2, [r2, #12]
    3550:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3552:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3554:	str	r0, [r4, #12]
				_prev->_next = this;
    3556:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3558:	subs	r3, r1, r3
				_state = TimerActive;
    355a:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    355c:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    355e:	str	r3, [r4, #0]
				_state = TimerActive;
    3560:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3562:	pop	{r4, r5}
    3564:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3566:	str	r4, [r0, #8]
		_prev = nullptr;
    3568:	str	r4, [r0, #12]
		listActive = this;
    356a:	str	r0, [r2, #0]
    356c:	b.n	352c <MillisTimer::addToActiveList()+0x20>
    356e:	nop
    3570:	.word	0x1fff1a34

00003574 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3574:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3576:	ldr	r6, [pc, #136]	; (3600 <MillisTimer::runFromTimer()+0x8c>)
    3578:	ldr	r4, [r6, #0]
	while (timer) {
    357a:	cbz	r4, 35c8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    357c:	ldr	r3, [r4, #0]
    357e:	cmp	r3, #0
    3580:	bne.n	35f8 <MillisTimer::runFromTimer()+0x84>
    3582:	ldr	r7, [pc, #128]	; (3604 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3584:	mov	r5, r3
    3586:	b.n	3592 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3588:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    358a:	cbz	r4, 35c8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    358c:	ldr	r3, [r4, #0]
    358e:	cmp	r3, #0
    3590:	bne.n	35f8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3592:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3594:	cbz	r3, 3598 <MillisTimer::runFromTimer()+0x24>
    3596:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3598:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    359a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    359c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    359e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    35a0:	ldr	r3, [r3, #0]
    35a2:	cmp	r3, r7
    35a4:	bne.n	35ea <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    35a6:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    35a8:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    35aa:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    35ac:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    35ae:	beq.n	35f2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    35b0:	bl	3428 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    35b4:	ldr	r3, [r4, #4]
    35b6:	cmp	r3, #0
    35b8:	beq.n	3588 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    35ba:	str	r3, [r4, #0]
				timer->addToActiveList();
    35bc:	mov	r0, r4
    35be:	bl	350c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    35c2:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    35c4:	cmp	r4, #0
    35c6:	bne.n	358c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    35c8:	mrs	r3, PRIMASK
		__disable_irq();
    35cc:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    35ce:	ldr	r2, [pc, #56]	; (3608 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    35d0:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    35d2:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    35d4:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    35d6:	cbnz	r3, 35da <MillisTimer::runFromTimer()+0x66>
    35d8:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    35da:	cbz	r0, 35e8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    35dc:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    35de:	bl	350c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    35e2:	mov	r0, r4
    35e4:	cmp	r0, #0
    35e6:	bne.n	35dc <MillisTimer::runFromTimer()+0x68>
    35e8:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    35ea:	mov	r2, r4
    35ec:	movs	r1, #0
    35ee:	blx	r3
    35f0:	b.n	35b4 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    35f2:	ldr	r3, [r0, #8]
    35f4:	blx	r3
    35f6:	b.n	35b4 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    35f8:	subs	r3, #1
    35fa:	str	r3, [r4, #0]
			break;
    35fc:	b.n	35c8 <MillisTimer::runFromTimer()+0x54>
    35fe:	nop
    3600:	.word	0x1fff1a34
    3604:	.word	0x000034a9
    3608:	.word	0x1fff1a44

0000360c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    360c:	ldr	r2, [pc, #8]	; (3618 <systick_isr+0xc>)
    360e:	ldr	r3, [r2, #0]
    3610:	adds	r3, #1
    3612:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3614:	b.w	3574 <MillisTimer::runFromTimer()>
    3618:	.word	0x1fff15cc

0000361c <__errno>:
    361c:	ldr	r3, [pc, #4]	; (3624 <__errno+0x8>)
    361e:	ldr	r0, [r3, #0]
    3620:	bx	lr
    3622:	nop
    3624:	.word	0x1fff1180

00003628 <__libc_init_array>:
    3628:	push	{r4, r5, r6, lr}
    362a:	ldr	r6, [pc, #60]	; (3668 <__libc_init_array+0x40>)
    362c:	ldr	r5, [pc, #60]	; (366c <__libc_init_array+0x44>)
    362e:	subs	r6, r6, r5
    3630:	asrs	r6, r6, #2
    3632:	it	ne
    3634:	movne	r4, #0
    3636:	beq.n	3644 <__libc_init_array+0x1c>
    3638:	adds	r4, #1
    363a:	ldr.w	r3, [r5], #4
    363e:	blx	r3
    3640:	cmp	r6, r4
    3642:	bne.n	3638 <__libc_init_array+0x10>
    3644:	ldr	r6, [pc, #40]	; (3670 <__libc_init_array+0x48>)
    3646:	ldr	r5, [pc, #44]	; (3674 <__libc_init_array+0x4c>)
    3648:	subs	r6, r6, r5
    364a:	bl	42ec <_init>
    364e:	asrs	r6, r6, #2
    3650:	it	ne
    3652:	movne	r4, #0
    3654:	beq.n	3664 <__libc_init_array+0x3c>
    3656:	adds	r4, #1
    3658:	ldr.w	r3, [r5], #4
    365c:	blx	r3
    365e:	cmp	r6, r4
    3660:	bne.n	3656 <__libc_init_array+0x2e>
    3662:	pop	{r4, r5, r6, pc}
    3664:	pop	{r4, r5, r6, pc}
    3666:	nop
    3668:	.word	0x000042f8
    366c:	.word	0x000042f8
    3670:	.word	0x00004304
    3674:	.word	0x000042f8

00003678 <malloc>:
    3678:	ldr	r3, [pc, #8]	; (3684 <malloc+0xc>)
    367a:	mov	r1, r0
    367c:	ldr	r0, [r3, #0]
    367e:	b.w	3688 <_malloc_r>
    3682:	nop
    3684:	.word	0x1fff1180

00003688 <_malloc_r>:
    3688:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    368c:	add.w	r5, r1, #11
    3690:	cmp	r5, #22
    3692:	sub	sp, #12
    3694:	mov	r6, r0
    3696:	bls.w	37d8 <_malloc_r+0x150>
    369a:	bics.w	r5, r5, #7
    369e:	bmi.w	3820 <_malloc_r+0x198>
    36a2:	cmp	r1, r5
    36a4:	bhi.w	3820 <_malloc_r+0x198>
    36a8:	bl	3bf8 <__malloc_lock>
    36ac:	cmp.w	r5, #504	; 0x1f8
    36b0:	bcc.w	3bec <_malloc_r+0x564>
    36b4:	lsrs	r3, r5, #9
    36b6:	beq.w	382e <_malloc_r+0x1a6>
    36ba:	cmp	r3, #4
    36bc:	bhi.w	39c6 <_malloc_r+0x33e>
    36c0:	lsrs	r0, r5, #6
    36c2:	add.w	lr, r0, #57	; 0x39
    36c6:	mov.w	r3, lr, lsl #1
    36ca:	adds	r0, #56	; 0x38
    36cc:	ldr	r7, [pc, #784]	; (39e0 <_malloc_r+0x358>)
    36ce:	add.w	r3, r7, r3, lsl #2
    36d2:	sub.w	r1, r3, #8
    36d6:	ldr	r4, [r3, #4]
    36d8:	cmp	r1, r4
    36da:	bne.n	36ec <_malloc_r+0x64>
    36dc:	b.n	3838 <_malloc_r+0x1b0>
    36de:	cmp	r2, #0
    36e0:	bge.w	383c <_malloc_r+0x1b4>
    36e4:	ldr	r4, [r4, #12]
    36e6:	cmp	r1, r4
    36e8:	beq.w	3838 <_malloc_r+0x1b0>
    36ec:	ldr	r3, [r4, #4]
    36ee:	bic.w	r3, r3, #3
    36f2:	subs	r2, r3, r5
    36f4:	cmp	r2, #15
    36f6:	ble.n	36de <_malloc_r+0x56>
    36f8:	ldr	r1, [pc, #740]	; (39e0 <_malloc_r+0x358>)
    36fa:	ldr	r4, [r7, #16]
    36fc:	add.w	lr, r1, #8
    3700:	cmp	r4, lr
    3702:	beq.w	3a6c <_malloc_r+0x3e4>
    3706:	ldr	r3, [r4, #4]
    3708:	bic.w	r3, r3, #3
    370c:	subs	r2, r3, r5
    370e:	cmp	r2, #15
    3710:	bgt.w	3a46 <_malloc_r+0x3be>
    3714:	cmp	r2, #0
    3716:	str.w	lr, [r1, #20]
    371a:	str.w	lr, [r1, #16]
    371e:	bge.w	385e <_malloc_r+0x1d6>
    3722:	cmp.w	r3, #512	; 0x200
    3726:	bcs.w	39f8 <_malloc_r+0x370>
    372a:	lsrs	r3, r3, #3
    372c:	add.w	ip, r3, #1
    3730:	movs	r2, #1
    3732:	asrs	r3, r3, #2
    3734:	lsl.w	r3, r2, r3
    3738:	ldr	r2, [r1, #4]
    373a:	ldr.w	r8, [r1, ip, lsl #3]
    373e:	str.w	r8, [r4, #8]
    3742:	add.w	r9, r1, ip, lsl #3
    3746:	orrs	r2, r3
    3748:	sub.w	r3, r9, #8
    374c:	str	r3, [r4, #12]
    374e:	str	r2, [r1, #4]
    3750:	str.w	r4, [r1, ip, lsl #3]
    3754:	str.w	r4, [r8, #12]
    3758:	asrs	r3, r0, #2
    375a:	movs	r4, #1
    375c:	lsls	r4, r3
    375e:	cmp	r4, r2
    3760:	bhi.w	3878 <_malloc_r+0x1f0>
    3764:	tst	r4, r2
    3766:	bne.n	3776 <_malloc_r+0xee>
    3768:	bic.w	r0, r0, #3
    376c:	lsls	r4, r4, #1
    376e:	tst	r4, r2
    3770:	add.w	r0, r0, #4
    3774:	beq.n	376c <_malloc_r+0xe4>
    3776:	add.w	r9, r7, r0, lsl #3
    377a:	mov	ip, r9
    377c:	mov	r8, r0
    377e:	ldr.w	r1, [ip, #12]
    3782:	cmp	ip, r1
    3784:	bne.n	3796 <_malloc_r+0x10e>
    3786:	b.n	3a70 <_malloc_r+0x3e8>
    3788:	cmp	r2, #0
    378a:	bge.w	3a90 <_malloc_r+0x408>
    378e:	ldr	r1, [r1, #12]
    3790:	cmp	ip, r1
    3792:	beq.w	3a70 <_malloc_r+0x3e8>
    3796:	ldr	r3, [r1, #4]
    3798:	bic.w	r3, r3, #3
    379c:	subs	r2, r3, r5
    379e:	cmp	r2, #15
    37a0:	ble.n	3788 <_malloc_r+0x100>
    37a2:	mov	r4, r1
    37a4:	ldr.w	ip, [r1, #12]
    37a8:	ldr.w	r8, [r4, #8]!
    37ac:	adds	r3, r1, r5
    37ae:	orr.w	r5, r5, #1
    37b2:	str	r5, [r1, #4]
    37b4:	orr.w	r1, r2, #1
    37b8:	str.w	ip, [r8, #12]
    37bc:	mov	r0, r6
    37be:	str.w	r8, [ip, #8]
    37c2:	str	r3, [r7, #20]
    37c4:	str	r3, [r7, #16]
    37c6:	str.w	lr, [r3, #12]
    37ca:	str.w	lr, [r3, #8]
    37ce:	str	r1, [r3, #4]
    37d0:	str	r2, [r3, r2]
    37d2:	bl	3bfc <__malloc_unlock>
    37d6:	b.n	3818 <_malloc_r+0x190>
    37d8:	cmp	r1, #16
    37da:	bhi.n	3820 <_malloc_r+0x198>
    37dc:	bl	3bf8 <__malloc_lock>
    37e0:	movs	r5, #16
    37e2:	movs	r3, #6
    37e4:	movs	r0, #2
    37e6:	ldr	r7, [pc, #504]	; (39e0 <_malloc_r+0x358>)
    37e8:	add.w	r3, r7, r3, lsl #2
    37ec:	sub.w	r2, r3, #8
    37f0:	ldr	r4, [r3, #4]
    37f2:	cmp	r4, r2
    37f4:	beq.w	3a82 <_malloc_r+0x3fa>
    37f8:	ldr	r3, [r4, #4]
    37fa:	ldr	r1, [r4, #12]
    37fc:	ldr	r5, [r4, #8]
    37fe:	bic.w	r3, r3, #3
    3802:	add	r3, r4
    3804:	mov	r0, r6
    3806:	ldr	r2, [r3, #4]
    3808:	str	r1, [r5, #12]
    380a:	orr.w	r2, r2, #1
    380e:	str	r5, [r1, #8]
    3810:	str	r2, [r3, #4]
    3812:	bl	3bfc <__malloc_unlock>
    3816:	adds	r4, #8
    3818:	mov	r0, r4
    381a:	add	sp, #12
    381c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3820:	movs	r4, #0
    3822:	movs	r3, #12
    3824:	mov	r0, r4
    3826:	str	r3, [r6, #0]
    3828:	add	sp, #12
    382a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    382e:	movs	r3, #128	; 0x80
    3830:	mov.w	lr, #64	; 0x40
    3834:	movs	r0, #63	; 0x3f
    3836:	b.n	36cc <_malloc_r+0x44>
    3838:	mov	r0, lr
    383a:	b.n	36f8 <_malloc_r+0x70>
    383c:	add	r3, r4
    383e:	ldr	r1, [r4, #12]
    3840:	ldr	r2, [r3, #4]
    3842:	ldr	r5, [r4, #8]
    3844:	orr.w	r2, r2, #1
    3848:	str	r1, [r5, #12]
    384a:	mov	r0, r6
    384c:	str	r5, [r1, #8]
    384e:	str	r2, [r3, #4]
    3850:	bl	3bfc <__malloc_unlock>
    3854:	adds	r4, #8
    3856:	mov	r0, r4
    3858:	add	sp, #12
    385a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    385e:	add	r3, r4
    3860:	mov	r0, r6
    3862:	ldr	r2, [r3, #4]
    3864:	orr.w	r2, r2, #1
    3868:	str	r2, [r3, #4]
    386a:	bl	3bfc <__malloc_unlock>
    386e:	adds	r4, #8
    3870:	mov	r0, r4
    3872:	add	sp, #12
    3874:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3878:	ldr	r4, [r7, #8]
    387a:	ldr	r3, [r4, #4]
    387c:	bic.w	r8, r3, #3
    3880:	cmp	r8, r5
    3882:	bcc.n	388e <_malloc_r+0x206>
    3884:	rsb	r3, r5, r8
    3888:	cmp	r3, #15
    388a:	bgt.w	39a6 <_malloc_r+0x31e>
    388e:	ldr	r3, [pc, #340]	; (39e4 <_malloc_r+0x35c>)
    3890:	ldr.w	r9, [pc, #352]	; 39f4 <_malloc_r+0x36c>
    3894:	ldr	r2, [r3, #0]
    3896:	ldr.w	r3, [r9]
    389a:	adds	r3, #1
    389c:	add	r2, r5
    389e:	add.w	sl, r4, r8
    38a2:	beq.w	3b66 <_malloc_r+0x4de>
    38a6:	add.w	r2, r2, #4096	; 0x1000
    38aa:	adds	r2, #15
    38ac:	bic.w	r2, r2, #4080	; 0xff0
    38b0:	bic.w	r2, r2, #15
    38b4:	mov	r1, r2
    38b6:	mov	r0, r6
    38b8:	str	r2, [sp, #4]
    38ba:	bl	3c00 <_sbrk_r>
    38be:	cmp.w	r0, #4294967295
    38c2:	mov	fp, r0
    38c4:	ldr	r2, [sp, #4]
    38c6:	beq.w	3b7a <_malloc_r+0x4f2>
    38ca:	cmp	sl, r0
    38cc:	bhi.w	3ac8 <_malloc_r+0x440>
    38d0:	ldr	r3, [pc, #276]	; (39e8 <_malloc_r+0x360>)
    38d2:	ldr	r1, [r3, #0]
    38d4:	cmp	sl, fp
    38d6:	add	r1, r2
    38d8:	str	r1, [r3, #0]
    38da:	beq.w	3b84 <_malloc_r+0x4fc>
    38de:	ldr.w	r0, [r9]
    38e2:	ldr.w	lr, [pc, #272]	; 39f4 <_malloc_r+0x36c>
    38e6:	adds	r0, #1
    38e8:	ittet	ne
    38ea:	rsbne	sl, sl, fp
    38ee:	addne	r1, sl
    38f0:	streq.w	fp, [lr]
    38f4:	strne	r1, [r3, #0]
    38f6:	ands.w	r1, fp, #7
    38fa:	beq.w	3b2c <_malloc_r+0x4a4>
    38fe:	rsb	r0, r1, #8
    3902:	rsb	r1, r1, #4096	; 0x1000
    3906:	add	fp, r0
    3908:	adds	r1, #8
    390a:	add	r2, fp
    390c:	ubfx	r2, r2, #0, #12
    3910:	rsb	r9, r2, r1
    3914:	mov	r1, r9
    3916:	mov	r0, r6
    3918:	str	r3, [sp, #4]
    391a:	bl	3c00 <_sbrk_r>
    391e:	adds	r3, r0, #1
    3920:	ldr	r3, [sp, #4]
    3922:	beq.w	3ba4 <_malloc_r+0x51c>
    3926:	rsb	r2, fp, r0
    392a:	add	r2, r9
    392c:	orr.w	r2, r2, #1
    3930:	ldr	r1, [r3, #0]
    3932:	str.w	fp, [r7, #8]
    3936:	add	r1, r9
    3938:	cmp	r4, r7
    393a:	str.w	r2, [fp, #4]
    393e:	str	r1, [r3, #0]
    3940:	ldr.w	r9, [pc, #164]	; 39e8 <_malloc_r+0x360>
    3944:	beq.n	3974 <_malloc_r+0x2ec>
    3946:	cmp.w	r8, #15
    394a:	bls.w	3b48 <_malloc_r+0x4c0>
    394e:	ldr	r2, [r4, #4]
    3950:	sub.w	r3, r8, #12
    3954:	bic.w	r3, r3, #7
    3958:	adds	r0, r4, r3
    395a:	and.w	r2, r2, #1
    395e:	mov.w	lr, #5
    3962:	orrs	r2, r3
    3964:	cmp	r3, #15
    3966:	str	r2, [r4, #4]
    3968:	str.w	lr, [r0, #4]
    396c:	str.w	lr, [r0, #8]
    3970:	bhi.w	3bac <_malloc_r+0x524>
    3974:	ldr	r3, [pc, #116]	; (39ec <_malloc_r+0x364>)
    3976:	ldr	r4, [r7, #8]
    3978:	ldr	r2, [r3, #0]
    397a:	cmp	r1, r2
    397c:	it	hi
    397e:	strhi	r1, [r3, #0]
    3980:	ldr	r3, [pc, #108]	; (39f0 <_malloc_r+0x368>)
    3982:	ldr	r2, [r3, #0]
    3984:	cmp	r1, r2
    3986:	ldr	r2, [r4, #4]
    3988:	it	hi
    398a:	strhi	r1, [r3, #0]
    398c:	bic.w	r2, r2, #3
    3990:	cmp	r5, r2
    3992:	sub.w	r3, r2, r5
    3996:	bhi.n	399c <_malloc_r+0x314>
    3998:	cmp	r3, #15
    399a:	bgt.n	39a6 <_malloc_r+0x31e>
    399c:	mov	r0, r6
    399e:	bl	3bfc <__malloc_unlock>
    39a2:	movs	r4, #0
    39a4:	b.n	3818 <_malloc_r+0x190>
    39a6:	adds	r2, r4, r5
    39a8:	orr.w	r3, r3, #1
    39ac:	orr.w	r5, r5, #1
    39b0:	str	r5, [r4, #4]
    39b2:	mov	r0, r6
    39b4:	str	r2, [r7, #8]
    39b6:	str	r3, [r2, #4]
    39b8:	bl	3bfc <__malloc_unlock>
    39bc:	adds	r4, #8
    39be:	mov	r0, r4
    39c0:	add	sp, #12
    39c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39c6:	cmp	r3, #20
    39c8:	bls.n	3aae <_malloc_r+0x426>
    39ca:	cmp	r3, #84	; 0x54
    39cc:	bhi.w	3b18 <_malloc_r+0x490>
    39d0:	lsrs	r0, r5, #12
    39d2:	add.w	lr, r0, #111	; 0x6f
    39d6:	mov.w	r3, lr, lsl #1
    39da:	adds	r0, #110	; 0x6e
    39dc:	b.n	36cc <_malloc_r+0x44>
    39de:	nop
    39e0:	.word	0x1fff1184
    39e4:	.word	0x1fff1a50
    39e8:	.word	0x1fff1a54
    39ec:	.word	0x1fff1a4c
    39f0:	.word	0x1fff1a48
    39f4:	.word	0x1fff1590
    39f8:	lsrs	r2, r3, #9
    39fa:	cmp	r2, #4
    39fc:	bls.n	3abc <_malloc_r+0x434>
    39fe:	cmp	r2, #20
    3a00:	bhi.w	3b6a <_malloc_r+0x4e2>
    3a04:	add.w	r1, r2, #92	; 0x5c
    3a08:	lsls	r1, r1, #1
    3a0a:	adds	r2, #91	; 0x5b
    3a0c:	add.w	ip, r7, r1, lsl #2
    3a10:	ldr.w	r1, [r7, r1, lsl #2]
    3a14:	ldr.w	r8, [pc, #476]	; 3bf4 <_malloc_r+0x56c>
    3a18:	sub.w	ip, ip, #8
    3a1c:	cmp	ip, r1
    3a1e:	beq.w	3b32 <_malloc_r+0x4aa>
    3a22:	ldr	r2, [r1, #4]
    3a24:	bic.w	r2, r2, #3
    3a28:	cmp	r3, r2
    3a2a:	bcs.n	3a32 <_malloc_r+0x3aa>
    3a2c:	ldr	r1, [r1, #8]
    3a2e:	cmp	ip, r1
    3a30:	bne.n	3a22 <_malloc_r+0x39a>
    3a32:	ldr.w	ip, [r1, #12]
    3a36:	ldr	r2, [r7, #4]
    3a38:	str.w	ip, [r4, #12]
    3a3c:	str	r1, [r4, #8]
    3a3e:	str.w	r4, [ip, #8]
    3a42:	str	r4, [r1, #12]
    3a44:	b.n	3758 <_malloc_r+0xd0>
    3a46:	adds	r3, r4, r5
    3a48:	orr.w	r7, r2, #1
    3a4c:	orr.w	r5, r5, #1
    3a50:	str	r5, [r4, #4]
    3a52:	mov	r0, r6
    3a54:	str	r3, [r1, #20]
    3a56:	str	r3, [r1, #16]
    3a58:	str.w	lr, [r3, #12]
    3a5c:	str.w	lr, [r3, #8]
    3a60:	str	r7, [r3, #4]
    3a62:	str	r2, [r3, r2]
    3a64:	adds	r4, #8
    3a66:	bl	3bfc <__malloc_unlock>
    3a6a:	b.n	3818 <_malloc_r+0x190>
    3a6c:	ldr	r2, [r1, #4]
    3a6e:	b.n	3758 <_malloc_r+0xd0>
    3a70:	add.w	r8, r8, #1
    3a74:	tst.w	r8, #3
    3a78:	add.w	ip, ip, #8
    3a7c:	bne.w	377e <_malloc_r+0xf6>
    3a80:	b.n	3ae4 <_malloc_r+0x45c>
    3a82:	ldr	r4, [r3, #12]
    3a84:	cmp	r3, r4
    3a86:	it	eq
    3a88:	addeq	r0, #2
    3a8a:	beq.w	36f8 <_malloc_r+0x70>
    3a8e:	b.n	37f8 <_malloc_r+0x170>
    3a90:	add	r3, r1
    3a92:	mov	r4, r1
    3a94:	ldr	r2, [r3, #4]
    3a96:	ldr	r1, [r1, #12]
    3a98:	ldr.w	r5, [r4, #8]!
    3a9c:	orr.w	r2, r2, #1
    3aa0:	str	r2, [r3, #4]
    3aa2:	mov	r0, r6
    3aa4:	str	r1, [r5, #12]
    3aa6:	str	r5, [r1, #8]
    3aa8:	bl	3bfc <__malloc_unlock>
    3aac:	b.n	3818 <_malloc_r+0x190>
    3aae:	add.w	lr, r3, #92	; 0x5c
    3ab2:	add.w	r0, r3, #91	; 0x5b
    3ab6:	mov.w	r3, lr, lsl #1
    3aba:	b.n	36cc <_malloc_r+0x44>
    3abc:	lsrs	r2, r3, #6
    3abe:	add.w	r1, r2, #57	; 0x39
    3ac2:	lsls	r1, r1, #1
    3ac4:	adds	r2, #56	; 0x38
    3ac6:	b.n	3a0c <_malloc_r+0x384>
    3ac8:	cmp	r4, r7
    3aca:	ldr	r3, [pc, #296]	; (3bf4 <_malloc_r+0x56c>)
    3acc:	beq.w	38d0 <_malloc_r+0x248>
    3ad0:	ldr	r4, [r3, #8]
    3ad2:	ldr	r2, [r4, #4]
    3ad4:	bic.w	r2, r2, #3
    3ad8:	b.n	3990 <_malloc_r+0x308>
    3ada:	ldr.w	r3, [r9], #-8
    3ade:	cmp	r9, r3
    3ae0:	bne.w	3be8 <_malloc_r+0x560>
    3ae4:	tst.w	r0, #3
    3ae8:	add.w	r0, r0, #4294967295
    3aec:	bne.n	3ada <_malloc_r+0x452>
    3aee:	ldr	r3, [r7, #4]
    3af0:	bic.w	r3, r3, r4
    3af4:	str	r3, [r7, #4]
    3af6:	lsls	r4, r4, #1
    3af8:	cmp	r4, r3
    3afa:	bhi.w	3878 <_malloc_r+0x1f0>
    3afe:	cmp	r4, #0
    3b00:	beq.w	3878 <_malloc_r+0x1f0>
    3b04:	tst	r4, r3
    3b06:	mov	r0, r8
    3b08:	bne.w	3776 <_malloc_r+0xee>
    3b0c:	lsls	r4, r4, #1
    3b0e:	tst	r4, r3
    3b10:	add.w	r0, r0, #4
    3b14:	beq.n	3b0c <_malloc_r+0x484>
    3b16:	b.n	3776 <_malloc_r+0xee>
    3b18:	cmp.w	r3, #340	; 0x154
    3b1c:	bhi.n	3b50 <_malloc_r+0x4c8>
    3b1e:	lsrs	r0, r5, #15
    3b20:	add.w	lr, r0, #120	; 0x78
    3b24:	mov.w	r3, lr, lsl #1
    3b28:	adds	r0, #119	; 0x77
    3b2a:	b.n	36cc <_malloc_r+0x44>
    3b2c:	mov.w	r1, #4096	; 0x1000
    3b30:	b.n	390a <_malloc_r+0x282>
    3b32:	movs	r1, #1
    3b34:	ldr.w	r3, [r8, #4]
    3b38:	asrs	r2, r2, #2
    3b3a:	lsl.w	r2, r1, r2
    3b3e:	orrs	r2, r3
    3b40:	str.w	r2, [r8, #4]
    3b44:	mov	r1, ip
    3b46:	b.n	3a38 <_malloc_r+0x3b0>
    3b48:	movs	r3, #1
    3b4a:	str.w	r3, [fp, #4]
    3b4e:	b.n	399c <_malloc_r+0x314>
    3b50:	movw	r2, #1364	; 0x554
    3b54:	cmp	r3, r2
    3b56:	bhi.n	3b9a <_malloc_r+0x512>
    3b58:	lsrs	r0, r5, #18
    3b5a:	add.w	lr, r0, #125	; 0x7d
    3b5e:	mov.w	r3, lr, lsl #1
    3b62:	adds	r0, #124	; 0x7c
    3b64:	b.n	36cc <_malloc_r+0x44>
    3b66:	adds	r2, #16
    3b68:	b.n	38b4 <_malloc_r+0x22c>
    3b6a:	cmp	r2, #84	; 0x54
    3b6c:	bhi.n	3bbc <_malloc_r+0x534>
    3b6e:	lsrs	r2, r3, #12
    3b70:	add.w	r1, r2, #111	; 0x6f
    3b74:	lsls	r1, r1, #1
    3b76:	adds	r2, #110	; 0x6e
    3b78:	b.n	3a0c <_malloc_r+0x384>
    3b7a:	ldr	r4, [r7, #8]
    3b7c:	ldr	r2, [r4, #4]
    3b7e:	bic.w	r2, r2, #3
    3b82:	b.n	3990 <_malloc_r+0x308>
    3b84:	ubfx	r0, sl, #0, #12
    3b88:	cmp	r0, #0
    3b8a:	bne.w	38de <_malloc_r+0x256>
    3b8e:	add	r2, r8
    3b90:	ldr	r3, [r7, #8]
    3b92:	orr.w	r2, r2, #1
    3b96:	str	r2, [r3, #4]
    3b98:	b.n	3974 <_malloc_r+0x2ec>
    3b9a:	movs	r3, #254	; 0xfe
    3b9c:	mov.w	lr, #127	; 0x7f
    3ba0:	movs	r0, #126	; 0x7e
    3ba2:	b.n	36cc <_malloc_r+0x44>
    3ba4:	movs	r2, #1
    3ba6:	mov.w	r9, #0
    3baa:	b.n	3930 <_malloc_r+0x2a8>
    3bac:	add.w	r1, r4, #8
    3bb0:	mov	r0, r6
    3bb2:	bl	3d08 <_free_r>
    3bb6:	ldr.w	r1, [r9]
    3bba:	b.n	3974 <_malloc_r+0x2ec>
    3bbc:	cmp.w	r2, #340	; 0x154
    3bc0:	bhi.n	3bce <_malloc_r+0x546>
    3bc2:	lsrs	r2, r3, #15
    3bc4:	add.w	r1, r2, #120	; 0x78
    3bc8:	lsls	r1, r1, #1
    3bca:	adds	r2, #119	; 0x77
    3bcc:	b.n	3a0c <_malloc_r+0x384>
    3bce:	movw	r1, #1364	; 0x554
    3bd2:	cmp	r2, r1
    3bd4:	bhi.n	3be2 <_malloc_r+0x55a>
    3bd6:	lsrs	r2, r3, #18
    3bd8:	add.w	r1, r2, #125	; 0x7d
    3bdc:	lsls	r1, r1, #1
    3bde:	adds	r2, #124	; 0x7c
    3be0:	b.n	3a0c <_malloc_r+0x384>
    3be2:	movs	r1, #254	; 0xfe
    3be4:	movs	r2, #126	; 0x7e
    3be6:	b.n	3a0c <_malloc_r+0x384>
    3be8:	ldr	r3, [r7, #4]
    3bea:	b.n	3af6 <_malloc_r+0x46e>
    3bec:	lsrs	r0, r5, #3
    3bee:	adds	r3, r0, #1
    3bf0:	lsls	r3, r3, #1
    3bf2:	b.n	37e6 <_malloc_r+0x15e>
    3bf4:	.word	0x1fff1184

00003bf8 <__malloc_lock>:
    3bf8:	bx	lr
    3bfa:	nop

00003bfc <__malloc_unlock>:
    3bfc:	bx	lr
    3bfe:	nop

00003c00 <_sbrk_r>:
    3c00:	push	{r3, r4, r5, lr}
    3c02:	ldr	r4, [pc, #28]	; (3c20 <_sbrk_r+0x20>)
    3c04:	movs	r3, #0
    3c06:	mov	r5, r0
    3c08:	mov	r0, r1
    3c0a:	str	r3, [r4, #0]
    3c0c:	bl	2f94 <_sbrk>
    3c10:	adds	r3, r0, #1
    3c12:	beq.n	3c16 <_sbrk_r+0x16>
    3c14:	pop	{r3, r4, r5, pc}
    3c16:	ldr	r3, [r4, #0]
    3c18:	cmp	r3, #0
    3c1a:	beq.n	3c14 <_sbrk_r+0x14>
    3c1c:	str	r3, [r5, #0]
    3c1e:	pop	{r3, r4, r5, pc}
    3c20:	.word	0x1fff1bc0

00003c24 <register_fini>:
    3c24:	ldr	r3, [pc, #8]	; (3c30 <register_fini+0xc>)
    3c26:	cbz	r3, 3c2e <register_fini+0xa>
    3c28:	ldr	r0, [pc, #8]	; (3c34 <register_fini+0x10>)
    3c2a:	b.w	3c38 <atexit>
    3c2e:	bx	lr
    3c30:	.word	0x00000000
    3c34:	.word	0x00003c45

00003c38 <atexit>:
    3c38:	movs	r3, #0
    3c3a:	mov	r1, r0
    3c3c:	mov	r2, r3
    3c3e:	mov	r0, r3
    3c40:	b.w	3ed8 <__register_exitproc>

00003c44 <__libc_fini_array>:
    3c44:	push	{r3, r4, r5, lr}
    3c46:	ldr	r5, [pc, #28]	; (3c64 <__libc_fini_array+0x20>)
    3c48:	ldr	r4, [pc, #28]	; (3c68 <__libc_fini_array+0x24>)
    3c4a:	subs	r4, r5, r4
    3c4c:	asrs	r4, r4, #2
    3c4e:	beq.n	3c5c <__libc_fini_array+0x18>
    3c50:	subs	r4, #1
    3c52:	ldr.w	r3, [r5, #-4]!
    3c56:	blx	r3
    3c58:	cmp	r4, #0
    3c5a:	bne.n	3c50 <__libc_fini_array+0xc>
    3c5c:	ldmia.w	sp!, {r3, r4, r5, lr}
    3c60:	b.w	4304 <__init_array_end>
	...

00003c6c <_malloc_trim_r>:
    3c6c:	push	{r3, r4, r5, r6, r7, lr}
    3c6e:	ldr	r7, [pc, #140]	; (3cfc <_malloc_trim_r+0x90>)
    3c70:	mov	r4, r1
    3c72:	mov	r6, r0
    3c74:	bl	3bf8 <__malloc_lock>
    3c78:	ldr	r3, [r7, #8]
    3c7a:	ldr	r5, [r3, #4]
    3c7c:	bic.w	r5, r5, #3
    3c80:	subs	r1, r5, r4
    3c82:	addw	r1, r1, #4079	; 0xfef
    3c86:	bic.w	r1, r1, #4080	; 0xff0
    3c8a:	bic.w	r1, r1, #15
    3c8e:	sub.w	r4, r1, #4096	; 0x1000
    3c92:	cmp.w	r4, #4096	; 0x1000
    3c96:	blt.n	3ca8 <_malloc_trim_r+0x3c>
    3c98:	movs	r1, #0
    3c9a:	mov	r0, r6
    3c9c:	bl	3c00 <_sbrk_r>
    3ca0:	ldr	r3, [r7, #8]
    3ca2:	add	r3, r5
    3ca4:	cmp	r0, r3
    3ca6:	beq.n	3cb2 <_malloc_trim_r+0x46>
    3ca8:	mov	r0, r6
    3caa:	bl	3bfc <__malloc_unlock>
    3cae:	movs	r0, #0
    3cb0:	pop	{r3, r4, r5, r6, r7, pc}
    3cb2:	negs	r1, r4
    3cb4:	mov	r0, r6
    3cb6:	bl	3c00 <_sbrk_r>
    3cba:	adds	r0, #1
    3cbc:	beq.n	3cda <_malloc_trim_r+0x6e>
    3cbe:	ldr	r3, [pc, #64]	; (3d00 <_malloc_trim_r+0x94>)
    3cc0:	ldr	r2, [r7, #8]
    3cc2:	ldr	r1, [r3, #0]
    3cc4:	subs	r5, r5, r4
    3cc6:	orr.w	r5, r5, #1
    3cca:	mov	r0, r6
    3ccc:	subs	r1, r1, r4
    3cce:	str	r5, [r2, #4]
    3cd0:	str	r1, [r3, #0]
    3cd2:	bl	3bfc <__malloc_unlock>
    3cd6:	movs	r0, #1
    3cd8:	pop	{r3, r4, r5, r6, r7, pc}
    3cda:	movs	r1, #0
    3cdc:	mov	r0, r6
    3cde:	bl	3c00 <_sbrk_r>
    3ce2:	ldr	r2, [r7, #8]
    3ce4:	subs	r3, r0, r2
    3ce6:	cmp	r3, #15
    3ce8:	ble.n	3ca8 <_malloc_trim_r+0x3c>
    3cea:	ldr	r4, [pc, #24]	; (3d04 <_malloc_trim_r+0x98>)
    3cec:	ldr	r1, [pc, #16]	; (3d00 <_malloc_trim_r+0x94>)
    3cee:	ldr	r4, [r4, #0]
    3cf0:	orr.w	r3, r3, #1
    3cf4:	subs	r0, r0, r4
    3cf6:	str	r3, [r2, #4]
    3cf8:	str	r0, [r1, #0]
    3cfa:	b.n	3ca8 <_malloc_trim_r+0x3c>
    3cfc:	.word	0x1fff1184
    3d00:	.word	0x1fff1a54
    3d04:	.word	0x1fff1590

00003d08 <_free_r>:
    3d08:	cmp	r1, #0
    3d0a:	beq.n	3d98 <_free_r+0x90>
    3d0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d10:	mov	r5, r1
    3d12:	mov	r8, r0
    3d14:	bl	3bf8 <__malloc_lock>
    3d18:	ldr.w	r7, [r5, #-4]
    3d1c:	ldr	r1, [pc, #424]	; (3ec8 <_free_r+0x1c0>)
    3d1e:	bic.w	r3, r7, #1
    3d22:	sub.w	r4, r5, #8
    3d26:	adds	r2, r4, r3
    3d28:	ldr	r6, [r1, #8]
    3d2a:	ldr	r0, [r2, #4]
    3d2c:	cmp	r2, r6
    3d2e:	bic.w	r0, r0, #3
    3d32:	beq.n	3dfa <_free_r+0xf2>
    3d34:	lsls	r6, r7, #31
    3d36:	str	r0, [r2, #4]
    3d38:	bmi.n	3d52 <_free_r+0x4a>
    3d3a:	ldr.w	r7, [r5, #-8]
    3d3e:	subs	r4, r4, r7
    3d40:	add.w	lr, r1, #8
    3d44:	ldr	r5, [r4, #8]
    3d46:	cmp	r5, lr
    3d48:	add	r3, r7
    3d4a:	beq.n	3e2c <_free_r+0x124>
    3d4c:	ldr	r7, [r4, #12]
    3d4e:	str	r7, [r5, #12]
    3d50:	str	r5, [r7, #8]
    3d52:	adds	r5, r2, r0
    3d54:	ldr	r5, [r5, #4]
    3d56:	lsls	r5, r5, #31
    3d58:	bpl.n	3de0 <_free_r+0xd8>
    3d5a:	orr.w	r2, r3, #1
    3d5e:	str	r2, [r4, #4]
    3d60:	str	r3, [r4, r3]
    3d62:	cmp.w	r3, #512	; 0x200
    3d66:	bcs.n	3d9a <_free_r+0x92>
    3d68:	lsrs	r3, r3, #3
    3d6a:	adds	r2, r3, #1
    3d6c:	ldr	r5, [r1, #4]
    3d6e:	ldr.w	r7, [r1, r2, lsl #3]
    3d72:	str	r7, [r4, #8]
    3d74:	movs	r0, #1
    3d76:	asrs	r3, r3, #2
    3d78:	lsl.w	r3, r0, r3
    3d7c:	add.w	r0, r1, r2, lsl #3
    3d80:	orrs	r5, r3
    3d82:	subs	r0, #8
    3d84:	str	r0, [r4, #12]
    3d86:	str	r5, [r1, #4]
    3d88:	str.w	r4, [r1, r2, lsl #3]
    3d8c:	str	r4, [r7, #12]
    3d8e:	mov	r0, r8
    3d90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d94:	b.w	3bfc <__malloc_unlock>
    3d98:	bx	lr
    3d9a:	lsrs	r2, r3, #9
    3d9c:	cmp	r2, #4
    3d9e:	bhi.n	3e48 <_free_r+0x140>
    3da0:	lsrs	r2, r3, #6
    3da2:	add.w	r7, r2, #57	; 0x39
    3da6:	lsls	r7, r7, #1
    3da8:	add.w	r5, r2, #56	; 0x38
    3dac:	add.w	r0, r1, r7, lsl #2
    3db0:	ldr.w	r2, [r1, r7, lsl #2]
    3db4:	ldr	r1, [pc, #272]	; (3ec8 <_free_r+0x1c0>)
    3db6:	subs	r0, #8
    3db8:	cmp	r0, r2
    3dba:	beq.n	3e58 <_free_r+0x150>
    3dbc:	ldr	r1, [r2, #4]
    3dbe:	bic.w	r1, r1, #3
    3dc2:	cmp	r3, r1
    3dc4:	bcs.n	3dcc <_free_r+0xc4>
    3dc6:	ldr	r2, [r2, #8]
    3dc8:	cmp	r0, r2
    3dca:	bne.n	3dbc <_free_r+0xb4>
    3dcc:	ldr	r0, [r2, #12]
    3dce:	str	r0, [r4, #12]
    3dd0:	str	r2, [r4, #8]
    3dd2:	str	r4, [r0, #8]
    3dd4:	str	r4, [r2, #12]
    3dd6:	mov	r0, r8
    3dd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ddc:	b.w	3bfc <__malloc_unlock>
    3de0:	ldr	r5, [r2, #8]
    3de2:	ldr	r7, [pc, #232]	; (3ecc <_free_r+0x1c4>)
    3de4:	cmp	r5, r7
    3de6:	add	r3, r0
    3de8:	beq.n	3e6a <_free_r+0x162>
    3dea:	ldr	r0, [r2, #12]
    3dec:	str	r0, [r5, #12]
    3dee:	orr.w	r2, r3, #1
    3df2:	str	r5, [r0, #8]
    3df4:	str	r2, [r4, #4]
    3df6:	str	r3, [r4, r3]
    3df8:	b.n	3d62 <_free_r+0x5a>
    3dfa:	lsls	r7, r7, #31
    3dfc:	add	r3, r0
    3dfe:	bmi.n	3e10 <_free_r+0x108>
    3e00:	ldr.w	r2, [r5, #-8]
    3e04:	subs	r4, r4, r2
    3e06:	add	r3, r2
    3e08:	ldr	r0, [r4, #8]
    3e0a:	ldr	r2, [r4, #12]
    3e0c:	str	r2, [r0, #12]
    3e0e:	str	r0, [r2, #8]
    3e10:	ldr	r2, [pc, #188]	; (3ed0 <_free_r+0x1c8>)
    3e12:	ldr	r2, [r2, #0]
    3e14:	orr.w	r0, r3, #1
    3e18:	cmp	r3, r2
    3e1a:	str	r0, [r4, #4]
    3e1c:	str	r4, [r1, #8]
    3e1e:	bcc.n	3d8e <_free_r+0x86>
    3e20:	ldr	r3, [pc, #176]	; (3ed4 <_free_r+0x1cc>)
    3e22:	mov	r0, r8
    3e24:	ldr	r1, [r3, #0]
    3e26:	bl	3c6c <_malloc_trim_r>
    3e2a:	b.n	3d8e <_free_r+0x86>
    3e2c:	adds	r1, r2, r0
    3e2e:	ldr	r1, [r1, #4]
    3e30:	lsls	r1, r1, #31
    3e32:	bmi.n	3ebe <_free_r+0x1b6>
    3e34:	ldr	r1, [r2, #8]
    3e36:	ldr	r2, [r2, #12]
    3e38:	str	r2, [r1, #12]
    3e3a:	add	r3, r0
    3e3c:	orr.w	r0, r3, #1
    3e40:	str	r1, [r2, #8]
    3e42:	str	r0, [r4, #4]
    3e44:	str	r3, [r4, r3]
    3e46:	b.n	3d8e <_free_r+0x86>
    3e48:	cmp	r2, #20
    3e4a:	bhi.n	3e7c <_free_r+0x174>
    3e4c:	add.w	r7, r2, #92	; 0x5c
    3e50:	lsls	r7, r7, #1
    3e52:	add.w	r5, r2, #91	; 0x5b
    3e56:	b.n	3dac <_free_r+0xa4>
    3e58:	asrs	r2, r5, #2
    3e5a:	ldr	r3, [r1, #4]
    3e5c:	movs	r5, #1
    3e5e:	lsl.w	r2, r5, r2
    3e62:	orrs	r3, r2
    3e64:	str	r3, [r1, #4]
    3e66:	mov	r2, r0
    3e68:	b.n	3dce <_free_r+0xc6>
    3e6a:	orr.w	r2, r3, #1
    3e6e:	str	r4, [r1, #20]
    3e70:	str	r4, [r1, #16]
    3e72:	str	r5, [r4, #12]
    3e74:	str	r5, [r4, #8]
    3e76:	str	r2, [r4, #4]
    3e78:	str	r3, [r4, r3]
    3e7a:	b.n	3d8e <_free_r+0x86>
    3e7c:	cmp	r2, #84	; 0x54
    3e7e:	bhi.n	3e8e <_free_r+0x186>
    3e80:	lsrs	r2, r3, #12
    3e82:	add.w	r7, r2, #111	; 0x6f
    3e86:	lsls	r7, r7, #1
    3e88:	add.w	r5, r2, #110	; 0x6e
    3e8c:	b.n	3dac <_free_r+0xa4>
    3e8e:	cmp.w	r2, #340	; 0x154
    3e92:	bhi.n	3ea2 <_free_r+0x19a>
    3e94:	lsrs	r2, r3, #15
    3e96:	add.w	r7, r2, #120	; 0x78
    3e9a:	lsls	r7, r7, #1
    3e9c:	add.w	r5, r2, #119	; 0x77
    3ea0:	b.n	3dac <_free_r+0xa4>
    3ea2:	movw	r0, #1364	; 0x554
    3ea6:	cmp	r2, r0
    3ea8:	bhi.n	3eb8 <_free_r+0x1b0>
    3eaa:	lsrs	r2, r3, #18
    3eac:	add.w	r7, r2, #125	; 0x7d
    3eb0:	lsls	r7, r7, #1
    3eb2:	add.w	r5, r2, #124	; 0x7c
    3eb6:	b.n	3dac <_free_r+0xa4>
    3eb8:	movs	r7, #254	; 0xfe
    3eba:	movs	r5, #126	; 0x7e
    3ebc:	b.n	3dac <_free_r+0xa4>
    3ebe:	orr.w	r2, r3, #1
    3ec2:	str	r2, [r4, #4]
    3ec4:	str	r3, [r4, r3]
    3ec6:	b.n	3d8e <_free_r+0x86>
    3ec8:	.word	0x1fff1184
    3ecc:	.word	0x1fff118c
    3ed0:	.word	0x1fff158c
    3ed4:	.word	0x1fff1a50

00003ed8 <__register_exitproc>:
    3ed8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3edc:	ldr	r4, [pc, #148]	; (3f74 <__register_exitproc+0x9c>)
    3ede:	ldr	r5, [r4, #0]
    3ee0:	ldr.w	r4, [r5, #328]	; 0x148
    3ee4:	mov	r6, r0
    3ee6:	mov	r8, r1
    3ee8:	mov	sl, r2
    3eea:	mov	r9, r3
    3eec:	cbz	r4, 3f60 <__register_exitproc+0x88>
    3eee:	ldr	r0, [r4, #4]
    3ef0:	cmp	r0, #31
    3ef2:	bgt.n	3f24 <__register_exitproc+0x4c>
    3ef4:	adds	r3, r0, #1
    3ef6:	cbz	r6, 3f16 <__register_exitproc+0x3e>
    3ef8:	add.w	r5, r4, r0, lsl #2
    3efc:	movs	r2, #1
    3efe:	str.w	sl, [r5, #136]	; 0x88
    3f02:	ldr.w	r1, [r4, #392]	; 0x188
    3f06:	lsls	r2, r0
    3f08:	orrs	r1, r2
    3f0a:	cmp	r6, #2
    3f0c:	str.w	r1, [r4, #392]	; 0x188
    3f10:	str.w	r9, [r5, #264]	; 0x108
    3f14:	beq.n	3f54 <__register_exitproc+0x7c>
    3f16:	adds	r0, #2
    3f18:	str	r3, [r4, #4]
    3f1a:	str.w	r8, [r4, r0, lsl #2]
    3f1e:	movs	r0, #0
    3f20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f24:	ldr	r3, [pc, #80]	; (3f78 <__register_exitproc+0xa0>)
    3f26:	cbz	r3, 3f6a <__register_exitproc+0x92>
    3f28:	mov.w	r0, #400	; 0x190
    3f2c:	bl	3678 <malloc>
    3f30:	mov	r4, r0
    3f32:	cbz	r0, 3f6a <__register_exitproc+0x92>
    3f34:	ldr.w	r3, [r5, #328]	; 0x148
    3f38:	movs	r7, #0
    3f3a:	stmia.w	r0, {r3, r7}
    3f3e:	str.w	r4, [r5, #328]	; 0x148
    3f42:	mov	r0, r7
    3f44:	movs	r3, #1
    3f46:	str.w	r7, [r4, #392]	; 0x188
    3f4a:	str.w	r7, [r4, #396]	; 0x18c
    3f4e:	cmp	r6, #0
    3f50:	beq.n	3f16 <__register_exitproc+0x3e>
    3f52:	b.n	3ef8 <__register_exitproc+0x20>
    3f54:	ldr.w	r1, [r4, #396]	; 0x18c
    3f58:	orrs	r2, r1
    3f5a:	str.w	r2, [r4, #396]	; 0x18c
    3f5e:	b.n	3f16 <__register_exitproc+0x3e>
    3f60:	add.w	r4, r5, #332	; 0x14c
    3f64:	str.w	r4, [r5, #328]	; 0x148
    3f68:	b.n	3eee <__register_exitproc+0x16>
    3f6a:	mov.w	r0, #4294967295
    3f6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f72:	nop
    3f74:	.word	0x000042e8
    3f78:	.word	0x00003679
    3f7c:	.word	0x76657250
    3f80:	.word	0x73756f69
    3f84:	.word	0x67617020
    3f88:	.word	0x00203a65
    3f8c:	.word	0x7478654e
    3f90:	.word	0x67617020
    3f94:	.word	0x00203a65
    3f98:	.word	0x6f486e6f
    3f9c:	.word	0x0000646c
    3fa0:	.word	0x72506e6f
    3fa4:	.word	0x00737365
    3fa8:	.word	0x6f486e6f
    3fac:	.word	0x6552646c
    3fb0:	.word	0x7361656c
    3fb4:	.word	0x00000065
    3fb8:	.word	0x65526e6f
    3fbc:	.word	0x7361656c
    3fc0:	.word	0xffff0065
    3fc4:	.word	0x7370704f
    3fc8:	.word	0x6e61202c
    3fcc:	.word	0x6b6e7520
    3fd0:	.word	0x6e776f6e
    3fd4:	.word	0x44494d20
    3fd8:	.word	0x656d2049
    3fdc:	.word	0x67617373
    3fe0:	.word	0x79742065
    3fe4:	.word	0x00216570
    3fe8:	.word	0x626f6e4b
    3fec:	.word	0x436e6f20
    3ff0:	.word	0x676e6168
    3ff4:	.word	0xffff0065
    3ff8:	.word	0x4f4c4556
    3ffc:	.word	0x59544943
    4000:	.word	0x00000000
    4004:	.word	0x45544f4e
    4008:	.word	0x474e454c
    400c:	.word	0x00004854
    4010:	.word	0x43544950
    4014:	.word	0x00000048

00004018 <pin2sc1a>:
    4018:	................
    4028:	................
    4038:	................
    4048:	................
    4058:	........

00004060 <digital_pin_to_info_PGM>:
    4060:	@..C@..@D..CD..@
    4070:	...C...@0..C0..@
    4080:	4..C4..@...C...@
    4090:	...C...@...C...@
    40a0:	...C...@...C...@
    40b0:	...C...@...C...@
    40c0:	...C...@...C...@
    40d0:	...C...@...C...@
    40e0:	...C...@...C...@
    40f0:	...C...@...C...@
    4100:	...C...@...C...@
    4110:	...C...@...C...@
    4120:	h .Ch..@...C...@
    4130:	8..C8..@<..C<..@
    4140:	@..C@..@H..CH..@
    4150:	L..CL..@(..C(..@
    4160:	,..C,..@` .C`..@
    4170:	d .Cd..@ ..C ..@
    4180:	$..C$..@(..C(..@
    4190:	,..C,..@D..CD..@
    41a0:	p..Cp..@t..Ct..@
    41b0:	h..Ch..@P..CP..@
    41c0:	X..CX..@\..C\..@
    41d0:	T..CT..@ ..C ..@
    41e0:	$..C$..@...C...@
    41f0:	...C...@8..C8..@
    4200:	4..C4..@0..C0..@
    4210:	<..C<..@,..C,..@
    4220:	( .C(..@, .C,..@
    4230:	. .C...@. .C...@
    4240:	. .C...@. .C...@
    4250:	. .C...@. .C...@

00004260 <vtable for usb_serial_class>:
	...
    4268:	=+..5+..1+..-+..
    4278:	)+..%+..!+...+..
    4288:	....

0000428c <usb_endpoint_config_table>:
    428c:	........

00004294 <usb_descriptor_list>:
    4294:	....\...........
    42a4:	............8...
    42b4:	........p.......
    42c4:	.... ...........
    42d4:	<...............
    42e4:	....

000042e8 <_global_impure_ptr>:
    42e8:	X...

000042ec <_init>:
    42ec:	push	{r3, r4, r5, r6, r7, lr}
    42ee:	nop
    42f0:	pop	{r3, r4, r5, r6, r7}
    42f2:	pop	{r3}
    42f4:	mov	lr, r3
    42f6:	bx	lr

000042f8 <__init_array_start>:
    42f8:	.word	0x00003c25

000042fc <__frame_dummy_init_array_entry>:
    42fc:	5.......

Disassembly of section .fini:

00004304 <_fini>:
    4304:	push	{r3, r4, r5, r6, r7, lr}
    4306:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004464 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff1594 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000309c l     F .text	0000000c startup_default_early_hook
000030a8 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1594 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1598 l       .bss	00000000 object.8610
0000445c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 sequencer.cpp
00000000 l    df *ABS*	00000000 button.cpp
00000000 l    df *ABS*	00000000 piano.cpp
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 main.cpp
000008e4 l     F .text	00000018 _GLOBAL__sub_I_sequencer
00000000 l    df *ABS*	00000000 note.cpp
00000000 l    df *ABS*	00000000 transport.cpp
00000000 l    df *ABS*	00000000 paginator.cpp
00000000 l    df *ABS*	00000000 step.cpp
00000000 l    df *ABS*	00000000 knob.cpp
00000000 l    df *ABS*	00000000 controller.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
1fff15b5 l     O .bss	00000001 tx_noautoflush
1fff15b8 l     O .bss	00000004 tx_packet
1fff15bc l     O .bss	00000001 transmit_previous_timeout
1fff15c0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000012f4 l     F .text	00000144 wait_for_cal
1fff15c5 l     O .bss	00000001 analog_right_shift
1fff15c6 l     O .bss	00000001 calibrating
00004178 l     O .text	00000048 pin2sc1a
1fff0c40 l     O .data	00000001 analog_config_bits
1fff15c7 l     O .bss	00000001 analogReadBusyADC1
1fff15c8 l     O .bss	00000001 analogReadBusyADC0
1fff15c9 l     O .bss	00000001 analog_reference_internal
1fff0c41 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001614 l     F .text	0000004c digitalWrite.part.1
00001660 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00001940 l     F .text	00000048 sysex_byte
1fff15e4 l     O .bss	00000001 tx_noautoflush
1fff1610 l     O .bss	00000004 tx_packet
1fff1614 l     O .bss	00000001 transmit_previous_timeout
1fff161c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c44 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1630 l     O .bss	00000004 ep0_tx_ptr
1fff1634 l     O .bss	00000014 rx_last
1fff1648 l     O .bss	00000002 ep0_tx_len
1fff164c l     O .bss	00000040 ep0_rx0_buf
1fff168c l     O .bss	00000014 rx_first
1fff16a0 l     O .bss	00000001 ep0_tx_data_toggle
1fff16a4 l     O .bss	00000040 ep0_rx1_buf
1fff16e4 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff16f8 l     O .bss	00000014 tx_last
1fff170c l     O .bss	00000008 setup
1fff1714 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1718 l     O .bss	00000008 reply_buffer
1fff1724 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1729 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff172c l     O .bss	00000004 rts_pin
1fff1730 l     O .bss	00000001 rx_buffer_head
1fff1731 l     O .bss	00000001 rx_buffer_tail
1fff1734 l     O .bss	00000028 tx_buffer
1fff175c l     O .bss	00000040 rx_buffer
1fff179c l     O .bss	00000001 transmitting
1fff179d l     O .bss	00000001 tx_buffer_tail
1fff17a0 l     O .bss	00000004 transmit_pin
1fff17a4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff17a8 l     O .bss	00000004 rts_pin
1fff17ac l     O .bss	00000001 transmitting
1fff17ad l     O .bss	00000001 rx_buffer_tail
1fff17b0 l     O .bss	00000028 tx_buffer
1fff17d8 l     O .bss	00000040 rx_buffer
1fff1818 l     O .bss	00000001 rx_buffer_head
1fff1819 l     O .bss	00000001 tx_buffer_tail
1fff181c l     O .bss	00000004 transmit_pin
1fff1820 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1824 l     O .bss	00000004 rts_pin
1fff1828 l     O .bss	00000001 rx_buffer_head
1fff1829 l     O .bss	00000001 rx_buffer_tail
1fff182c l     O .bss	00000028 tx_buffer
1fff1854 l     O .bss	00000040 rx_buffer
1fff1894 l     O .bss	00000001 transmitting
1fff1895 l     O .bss	00000001 tx_buffer_tail
1fff1898 l     O .bss	00000004 transmit_pin
1fff189c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff18a0 l     O .bss	00000004 rts_pin
1fff18a4 l     O .bss	00000001 rx_buffer_head
1fff18a5 l     O .bss	00000001 rx_buffer_tail
1fff18a8 l     O .bss	00000040 tx_buffer
1fff18e8 l     O .bss	00000040 rx_buffer
1fff1928 l     O .bss	00000001 transmitting
1fff1929 l     O .bss	00000001 tx_buffer_tail
1fff192c l     O .bss	00000004 transmit_pin
1fff1930 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1934 l     O .bss	00000004 rts_pin
1fff1938 l     O .bss	00000001 rx_buffer_head
1fff1939 l     O .bss	00000001 rx_buffer_tail
1fff193c l     O .bss	00000028 tx_buffer
1fff1964 l     O .bss	00000040 rx_buffer
1fff19a4 l     O .bss	00000001 transmitting
1fff19a5 l     O .bss	00000001 tx_buffer_tail
1fff19a8 l     O .bss	00000004 transmit_pin
1fff19ac l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c5c l     O .data	00000012 device_descriptor
1fff0c88 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff19b0 l     O .bss	00000004 rts_pin
1fff19b4 l     O .bss	00000001 rx_buffer_head
1fff19b5 l     O .bss	00000001 rx_buffer_tail
1fff19b8 l     O .bss	00000028 tx_buffer
1fff19e0 l     O .bss	00000040 rx_buffer
1fff1a20 l     O .bss	00000001 transmitting
1fff1a21 l     O .bss	00000001 tx_buffer_tail
1fff1a24 l     O .bss	00000004 transmit_pin
1fff1a28 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003dd8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d58 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1594 l       .bss	00000000 __bss_start__
1fff1bc4 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003094  w    F .text	00000006 adc0_isr
00001098 g     F .text	0000001c usb_serial_available
00002f54 g     F .text	00000020 serial4_available
00002b6c  w    F .text	000000c4 yield
1fff0c70 g     O .data	00000018 usb_string_manufacturer_name_default
00003140 g     F .text	00000020 serial_available
1fff15e8 g     O .bss	00000004 usb_midi_handleProgramChange
0000304c  w    F .text	00000048 hard_fault_isr
00003094  w    F .text	00000006 dma_ch6_isr
00002c60 g     F .text	00000020 Print::println()
00002e28 g     F .text	00000020 serial2_available
00003094  w    F .text	00000006 uart0_lon_isr
00001f80 g     F .text	000000e8 usb_rx_memory
00002c30  w    F .text	00000002 serialEvent5()
00001010 g     F .text	00000006 Controller::getShiftMode()
00003094  w    F .text	00000006 dma_ch8_isr
0000326c g     F .text	00000020 serial6_available
00003db0 g     F .text	00000002 __malloc_unlock
1fff15fc g     O .bss	00000004 usb_midi_handleAfterTouch
000004fc g     F .text	00000064 Sequencer::step()
00001438 g     F .text	000000e0 analog_init
00002068 g     F .text	00000084 usb_tx
00003094  w    F .text	00000006 portcd_isr
00000594 g     F .text	00000058 Button::onPress()
1fff160c g     O .bss	00000004 usb_midi_handleSysExComplete
0000368c g     F .text	00000098 MillisTimer::runFromTimer()
00003094  w    F .text	00000006 can1_rx_warn_isr
00004468 g       .fini	00000000 __exidx_end
00003094  w    F .text	00000006 dma_error_isr
1fff1a88 g     O .bss	00000001 usb_midi_msg_type
1fff1a40 g     O .bss	00000001 EventResponder::runningFromYield
00003094  w    F .text	00000006 i2c0_isr
00003734 g     F .text	0000000c __errno
00003094  w    F .text	00000006 portd_isr
00003094  w    F .text	00000006 enet_error_isr
1fff1a2c g     O .bss	00000004 EventResponder::firstInterrupt
00000990 g     F .text	0000002c Note::tick()
00000d54 g     F .text	0000002a Knob::tick()
00003094  w    F .text	00000006 tpm1_isr
00002c4c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000041c0 g     O .text	00000200 digital_pin_to_info_PGM
00001018 g     F .text	00000006 Controller::getMode()
1fff1bc0 g     O .bss	00000004 errno
00004468 g       .fini	00000000 _etext
1fff1594 g       .bss	00000000 _sbss
00002d28  w    F .text	00000002 serialEvent6()
1fff15f8 g     O .bss	00000004 usb_midi_handleVelocityChange
00001708 g     F .text	0000001c digitalRead
00003094  w    F .text	00000006 porte_isr
000008d8 g     F .text	0000000c loop
00003094  w    F .text	00000006 portb_isr
000004dc g     F .text	00000014 Sequencer::tick()
00001a24 g     F .text	0000002c usb_midi_flush_output
00003094  w    F .text	00000006 spi1_isr
00002f74 g     F .text	000000d8 uart3_status_isr
00003538  w    F .text	00000002 serialEvent1()
00000f28 g     F .text	0000002c Controller::tick()
00003094  w    F .text	00000006 mcm_isr
00003624 g     F .text	00000068 MillisTimer::addToActiveList()
00001a50 g     F .text	0000043c usb_midi_read
00000fa8 g     F .text	00000040 Controller::enterShiftMode()
1fff15d4 g     O .bss	00000004 usb_midi_handleSystemReset
000006d4 g     F .text	00000040 Piano::Piano(Sequencer*)
1fff1a30 g     O .bss	00000004 EventResponder::lastInterrupt
00002e48 g     F .text	0000010c uart1_status_isr
0000085c g     F .text	00000078 Led::tick()
1fff1a8a g     O .bss	00000002 usb_midi_msg_sysex_len
00000560 g     F .text	00000006 Sequencer::resetStep()
00003094  w    F .text	00000006 randnum_isr
0000090c g     F .text	0000002e Note::noteOn(unsigned char, unsigned char, unsigned char)
1fff15dc g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff15cc g     O .bss	00000004 systick_millis_count
0000304c  w    F .text	00000048 bus_fault_isr
00000814 g     F .text	0000002c Led::toggle()
00003094  w    F .text	00000006 watchdog_isr
00003094  w    F .text	00000006 i2c1_isr
1fff1720 g     O .bss	00000001 usb_configuration
00003094  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002d10  w    F .text	00000002 serialEvent2()
00003094  w    F .text	00000006 i2c2_isr
1fff0c70  w    O .data	00000018 usb_string_manufacturer_name
1fff1bb4 g     O .bss	0000000a usb_rx_byte_count_data
00003094  w    F .text	00000006 pit1_isr
00000be8 g     F .text	0000002e Paginator::previousPage()
00003790 g     F .text	00000010 malloc
00003094  w    F .text	00000006 dma_ch4_isr
00003094  w    F .text	00000006 software_isr
00003094  w    F .text	00000006 dma_ch7_isr
000035c0  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00002a9c g     F .text	000000d0 usb_init
00003094  w    F .text	00000006 lptmr_isr
00000a7c g     F .text	00000024 Transport::processMidi()
1fff1a50 g     O .bss	00000004 __malloc_top_pad
000016d8 g     F .text	00000024 rtc_set
000005ec g     F .text	00000040 Button::onRelease()
00000c68 g     F .text	0000001c Step::controlLength(int)
1fff0c40 g       .data	00000000 _sdata
1fff162c g     O .bss	00000004 usb_midi_handleNoteOn
00000960 g     F .text	0000002e Note::noteOff(unsigned char, unsigned char, unsigned char)
0000310c g     F .text	00000034 kinetis_hsrun_enable
00003db4 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001020 g     F .text	00000048 usb_serial_getchar
00003094  w    F .text	00000006 can1_bus_off_isr
00003094  w    F .text	00000006 ftm2_isr
00000568 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1a7c g     O .bss	00000008 usb_cdc_line_coding
000016fc g     F .text	0000000a digitalWrite
00003094  w    F .text	00000006 uart5_status_isr
0000328c g     F .text	000000e4 lpuart0_status_isr
1fff1a38 g     O .bss	00000004 EventResponder::lastYield
000009d0 g     F .text	0000003a Transport::controlTempo(int)
000043ec g     O .text	00000005 usb_endpoint_config_table
00000d80 g     F .text	000001a6 Controller::Controller(Sequencer*)
00003094  w    F .text	00000006 dma_ch9_isr
00003094  w    F .text	00000006 pit2_isr
00003440 g     F .text	00000020 serial3_available
1fff1a4c g     O .bss	00000004 __malloc_max_sbrked_mem
00000ad8 g     F .text	00000078 Paginator::getNextPage(int)
00001724 g     F .text	0000000a pinMode
00001ecc g     F .text	0000004c usb_free
00003094  w    F .text	00000006 i2c3_isr
1fff15f4 g     O .bss	00000004 usb_midi_handleSysExPartial
00004468 g       .fini	00000000 __exidx_start
00003094  w    F .text	00000006 pit0_isr
1fff1a8c g     O .bss	00000001 usb_midi_msg_data1
1fff1a3c g     O .bss	00000004 EventResponder::firstYield
00004448 g     O .text	00000004 _global_impure_ptr
00003094  w    F .text	00000006 can1_error_isr
00003740 g     F .text	00000050 __libc_init_array
1fff1bc4 g       .bss	00000000 __bss_end
00003094  w    F .text	00000006 can0_wakeup_isr
00003094  w    F .text	00000006 flash_cmd_isr
00002c34  w    F .text	00000004 usb_serial_class::clear()
00003460 g     F .text	000000d8 uart2_status_isr
000030ac g     F .text	0000002c _sbrk
1fff1a44 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c58 g     O .data	00000004 __brkval
1fff15c4 g     O .bss	00000001 usb_cdc_line_rtsdtr
000012ac g     F .text	00000048 usb_serial_flush_callback
0000444c g     F .text	00000000 _init
00003094  w    F .text	00000006 svcall_isr
00003094  w    F .text	00000006 dma_ch15_isr
00003094  w    F .text	00000006 uart1_error_isr
00003df8 g     F .text	00000028 __libc_fini_array
00003094  w    F .text	00000006 usbhs_phy_isr
00000ab8 g     F .text	0000001e Paginator::Paginator(Sequencer*)
00000568 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1bc4 g       .bss	00000000 _ebss
00003094 g     F .text	00000006 unused_isr
00000cbc g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00003094  w    F .text	00000006 spi0_isr
00003094  w    F .text	00000006 dma_ch3_isr
00000c18 g     F .text	0000002c Paginator::nextPage()
00000c44 g     F .text	00000018 Step::Step(Sequencer*)
00000c44 g     F .text	00000018 Step::Step(Sequencer*)
00003094  w    F .text	00000006 flash_error_isr
00002d30 g     F .text	00000020 serial5_available
00003094  w    F .text	00000006 uart5_error_isr
00003094  w    F .text	00000006 rtc_seconds_isr
00003094  w    F .text	00000006 pdb_isr
0000304c  w    F .text	00000048 usage_fault_isr
00003094  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00000aa0 g     F .text	00000018 Transport::tick()
00003094  w    F .text	00000006 dma_ch14_isr
00000ccc g     F .text	00000086 Knob::onChange()
000008fc g     F .text	0000000e Note::Note()
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1a84 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
000009bc g     F .text	00000014 Transport::Transport(Sequencer*)
00003724 g     F .text	00000010 systick_isr
00003094  w    F .text	00000006 rtc_alarm_isr
0000046c g     F .text	0000006e Sequencer::Sequencer()
00003094  w    F .text	00000006 dma_ch2_isr
1fff0c48 g     O .data	00000010 Serial
000009bc g     F .text	00000014 Transport::Transport(Sequencer*)
00003094  w    F .text	00000006 ftm1_isr
00002c54  w    F .text	00000006 usb_serial_class::write(unsigned char)
0000309c  w    F .text	0000000c startup_early_hook
00003094  w    F .text	00000006 dma_ch13_isr
00003094  w    F .text	00000006 uart2_error_isr
00001068 g     F .text	00000030 usb_serial_peekchar
000007e0 g     F .text	00000034 Led::blink(int)
1fff0d3c g     O .data	00000016 usb_string_serial_number_default
0000304c g     F .text	00000048 fault_isr
00003ebc g     F .text	000001d0 _free_r
1fff1618 g     O .bss	00000004 usb_midi_handleStop
00003094  w    F .text	00000006 usb_charge_isr
00002c44  w    F .text	00000004 usb_serial_class::flush()
00003094  w    F .text	00000006 cmt_isr
00003094  w    F .text	00000006 usbhs_isr
1fff1628 g     O .bss	00000004 usb_midi_handleControlChange
1fff1590 g     O .data	00000004 __malloc_sbrk_base
00002c3c  w    F .text	00000004 usb_serial_class::read()
00003094  w    F .text	00000006 ftm3_isr
000006d4 g     F .text	00000040 Piano::Piano(Sequencer*)
00003094  w    F .text	00000006 tsi0_isr
00003094  w    F .text	00000006 spi2_isr
00002d14  w    F .text	00000002 serialEvent4()
00002c5c  w    F .text	00000002 serialEvent()
1fff16a1 g     O .bss	00000001 usb_reboot_timer
0000408c g     F .text	000000a4 __register_exitproc
000010b4 g     F .text	00000038 usb_serial_flush_input
000011f4 g     F .text	00000018 usb_serial_putchar
1fff1a54 g     O .bss	00000028 __malloc_current_mallinfo
00003094  w    F .text	00000006 can0_bus_off_isr
00000d80 g     F .text	000001a6 Controller::Controller(Sequencer*)
1fff1715 g     O .bss	00000001 usb_rx_memory_needed
000004f0 g     F .text	0000000a Sequencer::reverse()
000020ec g     F .text	000009b0 usb_isr
00000a5c g     F .text	0000001e Transport::stopPPQN()
1fff1624 g     O .bss	00000004 usb_midi_handleNoteOff
000008fc g     F .text	0000000e Note::Note()
000043c0  w    O .text	00000028 vtable for usb_serial_class
0000062c g     F .text	000000a8 Button::tick()
00003094  w    F .text	00000006 uart3_error_isr
1fff1a34 g     O .bss	00000004 MillisTimer::listActive
00003094  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003094  w    F .text	00000006 low_voltage_isr
1fff1184 g     O .data	00000408 __malloc_av_
00003094  w    F .text	00000006 can0_error_isr
00000fe8 g     F .text	00000026 Controller::exitShiftMode()
000017d4 g     F .text	0000016c _init_Teensyduino_internal_
00000cbc g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00001254 g     F .text	00000058 usb_serial_flush_output
00003094  w    F .text	00000006 dma_ch12_isr
00003dac g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003094  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003094  w    F .text	00000006 pit3_isr
0000072c g     F .text	0000002a Piano::play(Step*)
00000ab8 g     F .text	0000001e Paginator::Paginator(Sequencer*)
00003094  w    F .text	00000006 enet_rx_isr
00003094  w    F .text	00000006 portc_isr
00003d10 g     F .text	0000009a memset
00002d18 g     F .text	00000010 main
1fff1a48 g     O .bss	00000004 __malloc_max_total_mem
0000084c g     F .text	0000000e Led::on()
0000304c  w    F .text	00000048 memmanage_fault_isr
00003370 g     F .text	00000084 usb_init_serialnumber
00004464 g       .text	00000000 __init_array_end
000037a0 g     F .text	00000570 _malloc_r
00003094  w    F .text	00000006 debugmonitor_isr
1fff15f0 g     O .bss	00000004 usb_midi_handleSongPosition
00003540 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff15e0 g     O .bss	00000004 usb_midi_handleContinue
1fff1a8d g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003094  w    F .text	00000006 cmp1_isr
00003094  w    F .text	00000006 ftm0_isr
00003e20 g     F .text	0000009c _malloc_trim_r
1fff0d38 g     O .data	00000004 string0
000010ec g     F .text	00000108 usb_serial_write
000030a8  w    F .text	00000002 startup_late_hook
00000c84 g     F .text	00000024 Step::controlPitch(int)
00002c40  w    F .text	00000004 usb_serial_class::available()
1fff1a8e g     O .bss	00000001 usb_midi_msg_cable
1fff0d20  w    O .data	00000018 usb_string_product_name
00001730 g     F .text	000000a4 delay
00003094  w    F .text	00000006 tpm0_isr
00004464 g     F .fini	00000000 _fini
00003094  w    F .text	00000006 i2s0_rx_isr
00000a0c g     F .text	00000028 Transport::advancePPQN()
00003094  w    F .text	00000006 uart4_error_isr
00002d00 g     F .text	00000010 Print::print(long)
00001988 g     F .text	0000009c usb_midi_write_packed
00000b6c g     F .text	0000007c Paginator::changePage(int)
00003dec g     F .text	0000000c atexit
00003094  w    F .text	00000006 can0_message_isr
00000f54 g     F .text	00000052 Controller::toggleMode()
1fff1180 g     O .data	00000004 _impure_ptr
00003094  w    F .text	00000006 can1_message_isr
00003094  w    F .text	00000006 nmi_isr
000007b8 g     F .text	00000026 Led::Led(int, int)
0000046c g     F .text	0000006e Sequencer::Sequencer()
1fff1608 g     O .bss	00000004 usb_midi_handleTuneRequest
00000714 g     F .text	00000016 Piano::tick()
00004458 g       .text	00000000 __preinit_array_end
00000c5c g     F .text	0000000a Step::toggle()
00003094  w    F .text	00000006 sdhc_isr
1fff1a8f g     O .bss	00000001 usb_midi_msg_channel
000008d4 g     F .text	00000002 setup
000043f4 g     O .text	00000054 usb_descriptor_list
00001f18 g     F .text	0000003c usb_rx
000007b8 g     F .text	00000026 Led::Led(int, int)
00003094  w    F .text	00000006 dma_ch10_isr
1fff1600 g     O .bss	00000004 usb_midi_handleStart
00003094  w    F .text	00000006 uart0_error_isr
0000093c g     F .text	00000022 Note::play(Step*, int*)
00001e8c g     F .text	00000040 usb_malloc
00000758 g     F .text	00000060 Piano::transpose(int)
00003094  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
0000120c g     F .text	00000048 usb_serial_write_buffer_free
00003094  w    F .text	00000006 enet_timer_isr
1fff1594 g       .data	00000000 _edata
00003094  w    F .text	00000006 i2s0_tx_isr
00003094  w    F .text	00000006 adc1_isr
00000ca8 g     F .text	00000014 Step::controlVelocity(int)
00002c48  w    F .text	00000004 usb_serial_class::availableForWrite()
00003094  w    F .text	00000006 cmp0_isr
1fff15d0 g     O .bss	00000004 usb_midi_handleClock
000033f4 g     F .text	0000004c ultoa
00002d2c g     F .text	00000004 operator new(unsigned int)
000035dc g     F .text	00000044 EventResponder::runFromInterrupt()
1fff158c g     O .data	00000004 __malloc_trim_threshold
00002c38  w    F .text	00000004 usb_serial_class::peek()
1fff15b4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff15ec g     O .bss	00000004 usb_midi_handlePitchChange
00003094  w    F .text	00000006 pit_isr
1fff1604 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003094  w    F .text	00000006 dac0_isr
00004458 g       .text	00000000 __init_array_start
00003094  w    F .text	00000006 can1_tx_warn_isr
00001518 g     F .text	000000fc analogRead
1fff1a90 g     O .bss	00000122 usb_midi_msg_sysex
00003160 g     F .text	0000010c uart0_status_isr
00003094  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d20 g     O .data	00000018 usb_string_product_name_default
00003094  w    F .text	00000006 dma_ch1_isr
00000a34 g     F .text	00000028 Transport::startPPQN()
00001f54 g     F .text	0000002c usb_tx_packet_count
00003094  w    F .text	00000006 dma_ch5_isr
00003094  w    F .text	00000006 can0_rx_warn_isr
00003094  w    F .text	00000006 can0_tx_warn_isr
00002d50 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000030d8 g     F .text	00000034 kinetis_hsrun_disable
00004458 g       .text	00000000 __preinit_array_start
1fff15b0 g     O .bss	00000004 sequencer
0000353c  w    F .text	00000002 serialEvent3()
1fff1620 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
00003094  w    F .text	00000006 cmp2_isr
00003620 g     F .text	00000004 pendablesrvreq_isr
00003094  w    F .text	00000006 wakeup_isr
00000b50 g     F .text	0000001c Paginator::setLeds(unsigned int)
00003094  w    F .text	00000006 cmp3_isr
00002c80 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00000840 g     F .text	0000000c Led::off()
1fff15d8 g     O .bss	00000004 usb_midi_handleActiveSensing
00003094  w    F .text	00000006 tpm2_isr
00003094  w    F .text	00000006 dma_ch0_isr
1fff0d3c  w    O .data	00000016 usb_string_serial_number
00003094  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... .....0..M0..
      10:	M0..M0..M0..M0..
      20:	M0..M0..M0...0..
      30:	.0..M0..!6..%7..
      40:	.0...0...0...0..
      50:	.0...0...0...0..
      60:	.0...0...0...0..
      70:	.0...0...0...0..
      80:	.0...0...0...0..
      90:	.0...0...0...0..
      a0:	.0...0...0...0..
      b0:	.0...0...0..a1..
      c0:	.0..I....0..a4..
      d0:	.0..u/...0...0..
      e0:	.0...0...0...0..
      f0:	.0...0...0...0..
     100:	.0...0...0...0..
     110:	.0... ...0...0..
     120:	.0...0...0...0..
     130:	.0...0...0...0..
     140:	.0...0..Q-...0..
     150:	.0...0...0...0..
     160:	.0...0...0...0..
     170:	.0...0...0...0..
     180:	.0...0...0...0..
     190:	.0...0...2...0..
     1a0:	.0...0...0...0..
     1b0:	.0...0...0...0..
     1c0:	.0...0...0...0..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	309c <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	17d4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	16d8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	16d8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	3740 <__libc_init_array>

	startup_late_hook();
     33a:	bl	30a8 <startup_late_hook>
	main();
     33e:	bl	2d18 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff1594
     374:	.word	0x00004464
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff1594
     380:	.word	0x1fff1bc4
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1594
     42c:	.word	0x00000000
     430:	.word	0x00004468

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1598
     460:	.word	0x00004468
     464:	.word	0x1fff1594
     468:	.word	0x00000000

0000046c <Sequencer::Sequencer()>:
#include "paginator.h"
#include "step.h"
#include "led.h"
#include "piano.h"

Sequencer::Sequencer () {
     46c:	push	{r3, r4, r5, r6, r7, lr}
     46e:	mov	r4, r0
  _controller = new Controller(this);
     470:	movs	r0, #80	; 0x50
     472:	bl	2d2c <operator new(unsigned int)>
     476:	mov	r1, r4
     478:	mov	r5, r0
     47a:	bl	d80 <Controller::Controller(Sequencer*)>
     47e:	str	r5, [r4, #8]
  _transport = new Transport(this);
     480:	movs	r0, #16
     482:	bl	2d2c <operator new(unsigned int)>
     486:	mov	r1, r4
     488:	mov	r5, r0
     48a:	bl	9bc <Transport::Transport(Sequencer*)>
     48e:	str	r5, [r4, #4]
  _paginator = new Paginator(this);
     490:	movs	r0, #80	; 0x50
     492:	bl	2d2c <operator new(unsigned int)>
     496:	mov	r1, r4
     498:	mov	r5, r0
     49a:	bl	ab8 <Paginator::Paginator(Sequencer*)>
     49e:	str	r5, [r4, #12]
  _piano = new Piano(this);
     4a0:	movs	r0, #60	; 0x3c
     4a2:	bl	2d2c <operator new(unsigned int)>
     4a6:	mov	r1, r4
     4a8:	mov	r5, r0
     4aa:	bl	6d4 <Piano::Piano(Sequencer*)>
  _reversed = false;
     4ae:	movs	r3, #0

Sequencer::Sequencer () {
  _controller = new Controller(this);
  _transport = new Transport(this);
  _paginator = new Paginator(this);
  _piano = new Piano(this);
     4b0:	str	r5, [r4, #52]	; 0x34
  _reversed = false;
     4b2:	strb	r3, [r4, #0]
  _currentStep = 0;
     4b4:	str	r3, [r4, #48]	; 0x30
     4b6:	add.w	r5, r4, #12
     4ba:	add.w	r7, r4, #28

  for (int i = 0; i < 4; i++) {
    _stepsEdit[i] = new Step(this);
     4be:	movs	r0, #24
     4c0:	bl	2d2c <operator new(unsigned int)>
     4c4:	mov	r1, r4
     4c6:	mov	r6, r0
     4c8:	bl	c44 <Step::Step(Sequencer*)>
     4cc:	str.w	r6, [r5, #4]!
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
     4d0:	cmp	r5, r7
    _stepsEdit[i] = new Step(this);
    _stepsPlayback[i] = _stepsEdit[i];
     4d2:	str	r6, [r5, #16]
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
     4d4:	bne.n	4be <Sequencer::Sequencer()+0x52>
    _stepsEdit[i] = new Step(this);
    _stepsPlayback[i] = _stepsEdit[i];
  };
};
     4d6:	mov	r0, r4
     4d8:	pop	{r3, r4, r5, r6, r7, pc}
     4da:	nop

000004dc <Sequencer::tick()>:

void Sequencer::tick() {
     4dc:	push	{r4, lr}
     4de:	mov	r4, r0
  _transport->tick();
     4e0:	ldr	r0, [r0, #4]
     4e2:	bl	aa0 <Transport::tick()>
  _controller->tick();
     4e6:	ldr	r0, [r4, #8]
}
     4e8:	ldmia.w	sp!, {r4, lr}
  };
};

void Sequencer::tick() {
  _transport->tick();
  _controller->tick();
     4ec:	b.w	f28 <Controller::tick()>

000004f0 <Sequencer::reverse()>:
}

void Sequencer::reverse() {
  _reversed = !_reversed;
     4f0:	ldrb	r3, [r0, #0]
     4f2:	eor.w	r3, r3, #1
     4f6:	strb	r3, [r0, #0]
     4f8:	bx	lr
     4fa:	nop

000004fc <Sequencer::step()>:
}

void Sequencer::step () {  
     4fc:	push	{r3, r4, r5, lr}
     4fe:	mov	r4, r0
  if (!_controller->getShiftMode()) {
     500:	ldr	r0, [r0, #8]
     502:	bl	1010 <Controller::getShiftMode()>
     506:	cbz	r0, 542 <Sequencer::step()+0x46>
    _controller->_leds[_currentStep]->blink();
  }

  Step* current = _stepsPlayback[_currentStep];
     508:	ldr	r3, [r4, #48]	; 0x30
     50a:	add.w	r2, r3, #8
     50e:	ldr.w	r1, [r4, r2, lsl #2]

  if (current->_state) {
     512:	ldrb	r2, [r1, #20]
     514:	cbnz	r2, 538 <Sequencer::step()+0x3c>
    _piano->play(current);
  }

  if (!_reversed) {
     516:	ldrb	r5, [r4, #0]
     518:	cbnz	r5, 524 <Sequencer::step()+0x28>
    _currentStep++;
     51a:	adds	r3, #1

    if (_currentStep > 3) {
     51c:	cmp	r3, #3
  if (current->_state) {
    _piano->play(current);
  }

  if (!_reversed) {
    _currentStep++;
     51e:	str	r3, [r4, #48]	; 0x30

    if (_currentStep > 3) {
     520:	bgt.n	554 <Sequencer::step()+0x58>
     522:	pop	{r3, r4, r5, pc}
      _paginator->getNextPage(1);
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     524:	subs	r1, r3, #1

    if (_currentStep == -1) {
     526:	adds	r3, r1, #1
    if (_currentStep > 3) {
      _paginator->getNextPage(1);
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     528:	str	r1, [r4, #48]	; 0x30

    if (_currentStep == -1) {
     52a:	bne.n	522 <Sequencer::step()+0x26>
      _paginator->getNextPage(-1);
     52c:	ldr	r0, [r4, #12]
     52e:	bl	ad8 <Paginator::getNextPage(int)>
      _currentStep = 3;
     532:	movs	r3, #3
     534:	str	r3, [r4, #48]	; 0x30
    }
  }
};
     536:	b.n	522 <Sequencer::step()+0x26>
  }

  Step* current = _stepsPlayback[_currentStep];

  if (current->_state) {
    _piano->play(current);
     538:	ldr	r0, [r4, #52]	; 0x34
     53a:	bl	72c <Piano::play(Step*)>
     53e:	ldr	r3, [r4, #48]	; 0x30
     540:	b.n	516 <Sequencer::step()+0x1a>
  _reversed = !_reversed;
}

void Sequencer::step () {  
  if (!_controller->getShiftMode()) {
    _controller->_leds[_currentStep]->blink();
     542:	ldr	r3, [r4, #8]
     544:	ldr	r2, [r4, #48]	; 0x30
     546:	add.w	r3, r3, r2, lsl #2
     54a:	mov	r1, r0
     54c:	ldr	r0, [r3, #52]	; 0x34
     54e:	bl	7e0 <Led::blink(int)>
     552:	b.n	508 <Sequencer::step()+0xc>

  if (!_reversed) {
    _currentStep++;

    if (_currentStep > 3) {
      _paginator->getNextPage(1);
     554:	movs	r1, #1
     556:	ldr	r0, [r4, #12]
     558:	bl	ad8 <Paginator::getNextPage(int)>
      _currentStep = 0;
     55c:	str	r5, [r4, #48]	; 0x30
     55e:	pop	{r3, r4, r5, pc}

00000560 <Sequencer::resetStep()>:
    }
  }
};

void Sequencer::resetStep () {
  _currentStep = 0;
     560:	movs	r3, #0
     562:	str	r3, [r0, #48]	; 0x30
     564:	bx	lr
     566:	nop

00000568 <Button::Button(int, int, Led*, bool, bool, Controller*)>:
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     568:	push	{r3, r4, r5, r6, r7, lr}
     56a:	mov	r4, r0
  Led* led,
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
     56c:	str	r1, [r0, #0]
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     56e:	ldrb.w	r7, [sp, #24]
     572:	ldrb.w	r6, [sp, #28]
     576:	ldr	r5, [sp, #32]
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
  _led = led;
     578:	str	r3, [r0, #52]	; 0x34
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
     57a:	mov.w	r1, #300	; 0x12c
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
     57e:	str	r2, [r0, #24]
  _reverseButton = reverseButton;
  _holdThreshold = 300;
  _led = led;
  _controller = controller;

  pinMode(pin, INPUT);
     580:	uxtb	r0, r2
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
     582:	str	r1, [r4, #44]	; 0x2c
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
     584:	strb	r7, [r4, #16]
  _reverseButton = reverseButton;
     586:	strb	r6, [r4, #17]
  _holdThreshold = 300;
  _led = led;
  _controller = controller;
     588:	str	r5, [r4, #48]	; 0x30

  pinMode(pin, INPUT);
     58a:	movs	r1, #0
     58c:	bl	1724 <pinMode>
};
     590:	mov	r0, r4
     592:	pop	{r3, r4, r5, r6, r7, pc}

00000594 <Button::onPress()>:

void Button::onPress () {
     594:	push	{r3, r4, r5, lr}
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
     596:	ldr	r3, [r0, #4]
     598:	cmp	r3, #1
     59a:	beq.n	59e <Button::onPress()+0xa>
     59c:	pop	{r3, r4, r5, pc}
     59e:	mov	r4, r0

  pinMode(pin, INPUT);
};

void Button::onPress () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     5a0:	ldr	r0, [r0, #48]	; 0x30

  if (_state == HIGH && _shiftButton) {
     5a2:	ldrb	r3, [r4, #16]

  pinMode(pin, INPUT);
};

void Button::onPress () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     5a4:	ldr	r2, [r0, #76]	; 0x4c
     5a6:	ldr	r5, [r2, #12]

  if (_state == HIGH && _shiftButton) {
     5a8:	cbnz	r3, 5c8 <Button::onPress()+0x34>
      //Serial.println("Previous page: ");
      //Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
     5aa:	ldrb	r3, [r4, #17]
     5ac:	cmp	r3, #0
     5ae:	beq.n	59c <Button::onPress()+0x8>
    if (_controller->getShiftMode()) {
     5b0:	bl	1010 <Controller::getShiftMode()>
     5b4:	cbnz	r0, 5d8 <Button::onPress()+0x44>
      paginator->nextPage();
      //Serial.println("Next page: ");
      //Serial.println(paginator->getPage());
    } else {
      _controller->_sequencer->reverse();
     5b6:	ldr	r3, [r4, #48]	; 0x30
     5b8:	ldr	r0, [r3, #76]	; 0x4c
     5ba:	bl	4f0 <Sequencer::reverse()>
      _led->toggle();
     5be:	ldr	r0, [r4, #52]	; 0x34
    }
  }
}
     5c0:	ldmia.w	sp!, {r3, r4, r5, lr}
      paginator->nextPage();
      //Serial.println("Next page: ");
      //Serial.println(paginator->getPage());
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
     5c4:	b.w	814 <Led::toggle()>

void Button::onPress () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
     5c8:	bl	1010 <Controller::getShiftMode()>
     5cc:	cbz	r0, 5e2 <Button::onPress()+0x4e>
      paginator->previousPage();
     5ce:	mov	r0, r5
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  }
}
     5d0:	ldmia.w	sp!, {r3, r4, r5, lr}
void Button::onPress () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
     5d4:	b.w	be8 <Paginator::previousPage()>
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
     5d8:	mov	r0, r5
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  }
}
     5da:	ldmia.w	sp!, {r3, r4, r5, lr}
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
     5de:	b.w	c18 <Paginator::nextPage()>
    if (_controller->getShiftMode()) {
      paginator->previousPage();
      //Serial.println("Previous page: ");
      //Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
     5e2:	ldr	r0, [r4, #48]	; 0x30
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  }
}
     5e4:	ldmia.w	sp!, {r3, r4, r5, lr}
    if (_controller->getShiftMode()) {
      paginator->previousPage();
      //Serial.println("Previous page: ");
      //Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
     5e8:	b.w	f54 <Controller::toggleMode()>

000005ec <Button::onRelease()>:
    }
  }
}

void Button::onRelease () {
  if (_reverseButton || _shiftButton) return;
     5ec:	ldrb	r3, [r0, #17]
     5ee:	cbnz	r3, 626 <Button::onRelease()+0x3a>
     5f0:	ldrb	r3, [r0, #16]
     5f2:	cbnz	r3, 626 <Button::onRelease()+0x3a>
      _led->toggle();
    }
  }
}

void Button::onRelease () {
     5f4:	push	{r4, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5f6:	ldr	r3, [pc, #48]	; (628 <Button::onRelease()+0x3c>)
  if (_reverseButton || _shiftButton) return;

  if (timeSincePress() < _holdThreshold) {
     5f8:	ldr	r1, [r0, #36]	; 0x24
     5fa:	ldr	r3, [r3, #0]
     5fc:	ldr	r2, [r0, #44]	; 0x2c
      _led->toggle();
    }
  }
}

void Button::onRelease () {
     5fe:	sub	sp, #8
     600:	str	r3, [sp, #4]
	return ret;
     602:	ldr	r3, [sp, #4]
  if (_reverseButton || _shiftButton) return;

  if (timeSincePress() < _holdThreshold) {
     604:	subs	r3, r3, r1
     606:	cmp	r2, r3
     608:	bls.n	622 <Button::onRelease()+0x36>
     60a:	mov	r4, r0
    _led->toggle();
     60c:	ldr	r0, [r0, #52]	; 0x34
     60e:	bl	814 <Led::toggle()>
    _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
     612:	ldr	r2, [r4, #48]	; 0x30
     614:	ldr	r3, [r4, #0]
     616:	ldr	r2, [r2, #76]	; 0x4c
     618:	adds	r3, #3
     61a:	ldr.w	r0, [r2, r3, lsl #2]
     61e:	bl	c5c <Step::toggle()>
  } 
};
     622:	add	sp, #8
     624:	pop	{r4, pc}
     626:	bx	lr
     628:	.word	0x1fff15cc

0000062c <Button::tick()>:

void Button::tick () {
     62c:	push	{r4, r5, lr}
     62e:	mov	r4, r0
     630:	sub	sp, #28
  _current = digitalRead(_pin);
     632:	ldrb	r0, [r0, #24]
     634:	bl	1708 <digitalRead>
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     638:	cmp	r0, #1
    _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
  } 
};

void Button::tick () {
  _current = digitalRead(_pin);
     63a:	str	r0, [r4, #28]
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     63c:	beq.n	678 <Button::tick()+0x4c>
     63e:	ldr	r3, [r4, #36]	; 0x24
     640:	ldr	r5, [pc, #140]	; (6d0 <Button::tick()+0xa4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     642:	ldr	r2, [r5, #0]
     644:	str	r2, [sp, #16]
	return ret;
     646:	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     648:	ldr	r1, [pc, #132]	; (6d0 <Button::tick()+0xa4>)
      //Serial.println("onHold");
    };
    _controller->enterShiftMode();
  }

  if (timeSincePress() > 10) {    
     64a:	subs	r2, r2, r3
     64c:	cmp	r2, #10
     64e:	bls.n	672 <Button::tick()+0x46>
    if (_state != _current) {
     650:	ldr	r2, [r4, #4]
     652:	cmp	r0, r2
     654:	beq.n	672 <Button::tick()+0x46>
      _state = _current;

      if (_state == HIGH) {
     656:	cmp	r0, #1
    _controller->enterShiftMode();
  }

  if (timeSincePress() > 10) {    
    if (_state != _current) {
      _state = _current;
     658:	str	r0, [r4, #4]

      if (_state == HIGH) {
     65a:	beq.n	6c6 <Button::tick()+0x9a>
     65c:	ldr	r2, [r1, #0]
     65e:	str	r2, [sp, #20]
	return ret;
     660:	ldr	r2, [sp, #20]
        //Serial.println("onPress");      
        onPress();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     662:	ldr	r1, [r4, #44]	; 0x2c
     664:	subs	r3, r2, r3
     666:	cmp	r1, r3
     668:	bls.n	6b8 <Button::tick()+0x8c>
          //Serial.println("onHoldRelease");
          _controller->exitShiftMode();
        } else {
          onRelease();
     66a:	mov	r0, r4
     66c:	bl	5ec <Button::onRelease()>
     670:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     672:	str	r0, [r4, #32]
};
     674:	add	sp, #28
     676:	pop	{r4, r5, pc}
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     678:	ldr	r2, [r4, #32]
     67a:	cbz	r2, 6ac <Button::tick()+0x80>

  _previous = _current;
};

bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
     67c:	cmp	r2, #1
     67e:	ldr	r3, [r4, #36]	; 0x24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     680:	ldr	r5, [pc, #76]	; (6d0 <Button::tick()+0xa4>)
     682:	bne.n	642 <Button::tick()+0x16>
     684:	ldr	r2, [r5, #0]
     686:	str	r2, [sp, #12]
	return ret;
     688:	ldr	r2, [sp, #12]

  if (currentWentUp()) {
    _firstTime = millis();
  }

  if (currentIsUp() && timeSincePress() > _holdThreshold) {
     68a:	ldr	r1, [r4, #44]	; 0x2c
     68c:	subs	r2, r2, r3
     68e:	cmp	r1, r2
     690:	bcs.n	642 <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     692:	ldr	r3, [r5, #0]
     694:	str	r3, [sp, #8]
	return ret;
     696:	ldr	r3, [sp, #8]
    _firstHoldTime = millis();
     698:	str	r3, [r4, #40]	; 0x28
    if (!_controller->getShiftMode()) {
     69a:	ldr	r0, [r4, #48]	; 0x30
     69c:	bl	1010 <Controller::getShiftMode()>
      //Serial.println("onHold");
    };
    _controller->enterShiftMode();
     6a0:	ldr	r0, [r4, #48]	; 0x30
     6a2:	bl	fa8 <Controller::enterShiftMode()>
     6a6:	ldr	r0, [r4, #28]
     6a8:	ldr	r3, [r4, #36]	; 0x24
     6aa:	b.n	642 <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6ac:	ldr	r5, [pc, #32]	; (6d0 <Button::tick()+0xa4>)
     6ae:	ldr	r3, [r5, #0]
     6b0:	str	r3, [sp, #4]
	return ret;
     6b2:	ldr	r3, [sp, #4]

void Button::tick () {
  _current = digitalRead(_pin);

  if (currentWentUp()) {
    _firstTime = millis();
     6b4:	str	r3, [r4, #36]	; 0x24
     6b6:	b.n	642 <Button::tick()+0x16>
        onPress();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
          //Serial.println("onHoldRelease");
          _controller->exitShiftMode();
     6b8:	ldr	r0, [r4, #48]	; 0x30
     6ba:	bl	fe8 <Controller::exitShiftMode()>
     6be:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     6c0:	str	r0, [r4, #32]
};
     6c2:	add	sp, #28
     6c4:	pop	{r4, r5, pc}
    if (_state != _current) {
      _state = _current;

      if (_state == HIGH) {
        //Serial.println("onPress");      
        onPress();
     6c6:	mov	r0, r4
     6c8:	bl	594 <Button::onPress()>
     6cc:	ldr	r0, [r4, #28]
     6ce:	b.n	672 <Button::tick()+0x46>
     6d0:	.word	0x1fff15cc

000006d4 <Piano::Piano(Sequencer*)>:
#include "note.h"
#include "piano.h"
#include "step.h"
#include "sequencer.h"

Piano::Piano (Sequencer* sequencer) {
     6d4:	push	{r3, r4, r5, r6, r7, lr}
     6d6:	ldr	r5, [pc, #56]	; (710 <Piano::Piano(Sequencer*)+0x3c>)
     6d8:	mov	r6, r0
     6da:	mov	r7, r1
     6dc:	ldmia	r5!, {r0, r1, r2, r3}
     6de:	add.w	r4, r6, #20
     6e2:	stmia	r4!, {r0, r1, r2, r3}
     6e4:	ldmia	r5!, {r0, r1, r2, r3}
     6e6:	stmia	r4!, {r0, r1, r2, r3}
     6e8:	ldr	r3, [r5, #0]
     6ea:	str	r3, [r4, #0]
  _sequencer = sequencer;

  _currentScale = 0;
     6ec:	movs	r3, #0
#include "piano.h"
#include "step.h"
#include "sequencer.h"

Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;
     6ee:	str	r7, [r6, #16]

  _currentScale = 0;
     6f0:	str	r3, [r6, #56]	; 0x38
     6f2:	subs	r4, r6, #4
     6f4:	add.w	r7, r6, #12

  for (int i = 0; i < 4; i++) {
    _notes[i] = new Note();
     6f8:	movs	r0, #20
     6fa:	bl	2d2c <operator new(unsigned int)>
     6fe:	mov	r5, r0
     700:	bl	8fc <Note::Note()>
     704:	str.w	r5, [r4, #4]!
Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;

  _currentScale = 0;

  for (int i = 0; i < 4; i++) {
     708:	cmp	r4, r7
     70a:	bne.n	6f8 <Piano::Piano(Sequencer*)+0x24>
    _notes[i] = new Note();
  } 
};
     70c:	mov	r0, r6
     70e:	pop	{r3, r4, r5, r6, r7, pc}
     710:	.word	0x00004130

00000714 <Piano::tick()>:

void Piano::tick () {
     714:	push	{r3, r4, r5, lr}
     716:	subs	r4, r0, #4
     718:	add.w	r5, r0, #12
  for (int i = 0; i < 4; i++) {
    _notes[i]->tick();
     71c:	ldr.w	r0, [r4, #4]!
     720:	bl	990 <Note::tick()>
    _notes[i] = new Note();
  } 
};

void Piano::tick () {
  for (int i = 0; i < 4; i++) {
     724:	cmp	r4, r5
     726:	bne.n	71c <Piano::tick()+0x8>
    _notes[i]->tick();
  } 
};
     728:	pop	{r3, r4, r5, pc}
     72a:	nop

0000072c <Piano::play(Step*)>:
  }

  return 0; // <-- hack to get rid of a warning, hate my life
};

void Piano::play (Step* step) {
     72c:	push	{r4, r5}
     72e:	subs	r3, r0, #4
     730:	add.w	r2, r0, #12
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
    if (!_notes[i]->_active) {
     734:	ldr.w	r4, [r3, #4]!
     738:	ldr	r5, [r4, #16]
     73a:	cbz	r5, 742 <Piano::play(Step*)+0x16>
    _notes[i]->tick();
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
     73c:	cmp	r3, r2
     73e:	bne.n	734 <Piano::play(Step*)+0x8>
    if (!_notes[i]->_active) {
      return _notes[i];
    }
  }

  return 0; // <-- hack to get rid of a warning, hate my life
     740:	movs	r4, #0
};

void Piano::play (Step* step) {
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
     742:	ldr	r2, [r1, #4]
     744:	add.w	r2, r2, r2, lsl #1
     748:	add.w	r2, r0, r2, lsl #2
  note->play(step, scale);
     74c:	adds	r2, #20
     74e:	mov	r0, r4
};
     750:	pop	{r4, r5}
};

void Piano::play (Step* step) {
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
  note->play(step, scale);
     752:	b.w	93c <Note::play(Step*, int*)>
     756:	nop

00000758 <Piano::transpose(int)>:
};

void Piano::transpose (int value) {
  int newValue = value;

  if (value < 330) {
     758:	cmp.w	r1, #330	; 0x14a
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
  note->play(step, scale);
};

void Piano::transpose (int value) {
     75c:	push	{r3, r4, r5, lr}
     75e:	mov	r5, r0
  int newValue = value;

  if (value < 330) {
     760:	blt.n	76e <Piano::transpose(int)+0x16>
    newValue = 2;
  } else if (value < 660) {
     762:	cmp.w	r1, #660	; 0x294
     766:	mov	r4, r1
     768:	bge.n	7a6 <Piano::transpose(int)+0x4e>
    newValue = 1;
     76a:	movs	r4, #1
     76c:	b.n	770 <Piano::transpose(int)+0x18>

void Piano::transpose (int value) {
  int newValue = value;

  if (value < 330) {
    newValue = 2;
     76e:	movs	r4, #2

  // i should not set a steps pitch but instead a steps grade
  // that way the piano can decide which pitch it is depending on the grade
  // and the current scale

  if (_currentScale != newValue) {
     770:	ldr	r3, [r5, #56]	; 0x38
     772:	cmp	r4, r3
     774:	beq.n	7a2 <Piano::transpose(int)+0x4a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     776:	movs	r1, #10
     778:	ldr	r0, [pc, #52]	; (7b0 <Piano::transpose(int)+0x58>)
     77a:	bl	10ec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     77e:	ldr	r0, [pc, #52]	; (7b4 <Piano::transpose(int)+0x5c>)
     780:	bl	2c60 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     784:	mov	r1, r4
     786:	ldr	r0, [pc, #44]	; (7b4 <Piano::transpose(int)+0x5c>)
     788:	bl	2d00 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     78c:	ldr	r0, [pc, #36]	; (7b4 <Piano::transpose(int)+0x5c>)
     78e:	bl	2c60 <Print::println()>
     792:	ldr	r3, [r5, #16]
    Serial.println("New Scale:");
    Serial.println(newValue);
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
     794:	add.w	r0, r3, #16
     798:	ldmia	r0, {r0, r1, r2, r3}
     79a:	str	r4, [r0, #4]
     79c:	str	r4, [r1, #4]
     79e:	str	r4, [r2, #4]
     7a0:	str	r4, [r3, #4]
    }
  }

  
  _currentScale = newValue;
     7a2:	str	r4, [r5, #56]	; 0x38
};
     7a4:	pop	{r3, r4, r5, pc}

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
  } else if (value <= 1023) {
     7a6:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     7aa:	it	lt
     7ac:	movlt	r4, #0
     7ae:	b.n	770 <Piano::transpose(int)+0x18>
     7b0:	.word	0x00004154
     7b4:	.word	0x1fff0c48

000007b8 <Led::Led(int, int)>:
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
     7b8:	push	{r3, r4, r5, lr}
     7ba:	mov	r4, r0
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     7bc:	movs	r3, #0
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     7be:	movs	r5, #75	; 0x4b
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
     7c0:	stmia.w	r0, {r1, r2}
  _state = state;
  _blinkLength = 75;
  _blinking = false;
  _blinkingCounter = 0;

  pinMode(_pin, OUTPUT);
     7c4:	uxtb	r0, r1

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     7c6:	strb	r3, [r4, #16]
  _blinkingCounter = 0;
     7c8:	str	r3, [r4, #20]
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     7ca:	str	r5, [r4, #12]
  _blinking = false;
  _blinkingCounter = 0;

  pinMode(_pin, OUTPUT);
     7cc:	movs	r1, #1
     7ce:	bl	1724 <pinMode>
  digitalWrite(_pin, _state);
     7d2:	ldrb	r0, [r4, #0]
     7d4:	ldrb	r1, [r4, #4]
     7d6:	bl	16fc <digitalWrite>
};
     7da:	mov	r0, r4
     7dc:	pop	{r3, r4, r5, pc}
     7de:	nop

000007e0 <Led::blink(int)>:

void Led::blink (int times) {
     7e0:	push	{r4, r5, r6, lr}
  digitalWrite(_pin, !digitalRead(_pin));
     7e2:	ldrb	r5, [r0, #0]

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     7e4:	sub	sp, #8
     7e6:	mov	r4, r0
  digitalWrite(_pin, !digitalRead(_pin));
     7e8:	mov	r0, r5

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     7ea:	mov	r6, r1
  digitalWrite(_pin, !digitalRead(_pin));
     7ec:	bl	1708 <digitalRead>
     7f0:	clz	r1, r0
     7f4:	lsrs	r1, r1, #5
     7f6:	mov	r0, r5
     7f8:	bl	16fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7fc:	ldr	r3, [pc, #16]	; (810 <Led::blink(int)+0x30>)
  _blinking = true;
  _blinkingCounter = times;
     7fe:	str	r6, [r4, #20]
     800:	ldr	r3, [r3, #0]
     802:	str	r3, [sp, #4]
	return ret;
     804:	ldr	r3, [sp, #4]
  _lastBlink = millis();  
     806:	str	r3, [r4, #8]
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
  digitalWrite(_pin, !digitalRead(_pin));
  _blinking = true;
     808:	movs	r2, #1
     80a:	strb	r2, [r4, #16]
  _blinkingCounter = times;
  _lastBlink = millis();  
};
     80c:	add	sp, #8
     80e:	pop	{r4, r5, r6, pc}
     810:	.word	0x1fff15cc

00000814 <Led::toggle()>:

void Led::toggle () {
  _state = !_state;
     814:	ldr	r1, [r0, #4]
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     816:	push	{r4, lr}
  _state = !_state;
     818:	clz	r1, r1
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     81c:	mov	r4, r0
  _state = !_state;
     81e:	lsrs	r1, r1, #5

  digitalWrite(_pin, _state);
     820:	ldrb	r0, [r0, #0]
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
  _state = !_state;
     822:	str	r1, [r4, #4]

  digitalWrite(_pin, _state);
     824:	bl	16fc <digitalWrite>

  if (_blinking) {
     828:	ldrb	r3, [r4, #16]
     82a:	cbnz	r3, 82e <Led::toggle()+0x1a>
     82c:	pop	{r4, pc}
    digitalWrite(_pin, !_state);
     82e:	ldr	r1, [r4, #4]
     830:	ldrb	r0, [r4, #0]
     832:	clz	r1, r1
     836:	lsrs	r1, r1, #5
  }
};
     838:	ldmia.w	sp!, {r4, lr}
  _state = !_state;

  digitalWrite(_pin, _state);

  if (_blinking) {
    digitalWrite(_pin, !_state);
     83c:	b.w	16fc <digitalWrite>

00000840 <Led::off()>:
  }
};

void Led::off () {
  _blinking = false;
     840:	movs	r1, #0
     842:	strb	r1, [r0, #16]
  _state = 0;
     844:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     846:	ldrb	r0, [r0, #0]
     848:	b.w	16fc <digitalWrite>

0000084c <Led::on()>:
}

void Led::on () {
  _blinking = false;
     84c:	movs	r3, #0
  _state = 1;
     84e:	movs	r1, #1
  _state = 0;
  digitalWrite(_pin, _state);
}

void Led::on () {
  _blinking = false;
     850:	strb	r3, [r0, #16]
  _state = 1;
     852:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     854:	ldrb	r0, [r0, #0]
     856:	b.w	16fc <digitalWrite>
     85a:	nop

0000085c <Led::tick()>:

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     85c:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     85e:	ldr	r5, [pc, #112]	; (8d0 <Led::tick()+0x74>)
     860:	sub	sp, #16
     862:	ldr	r3, [r5, #0]
     864:	str	r3, [sp, #0]
	return ret;
     866:	ldr	r2, [sp, #0]
  // hack
  if (millis() < 3000) return; 
     868:	movw	r3, #2999	; 0xbb7
     86c:	cmp	r2, r3
     86e:	bls.n	89a <Led::tick()+0x3e>

  if (_blinking && blinkTimePassed()) {
     870:	ldrb	r3, [r0, #16]
     872:	mov	r4, r0
     874:	cbnz	r3, 89e <Led::tick()+0x42>
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
    _lastBlink = millis();        
  }

  if (!_blinking && _blinkingCounter > 0 && blinkTimePassed()) {
     876:	ldr	r1, [r4, #20]
     878:	cmp	r1, #0
     87a:	ble.n	89a <Led::tick()+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     87c:	ldr	r3, [r5, #0]
     87e:	str	r3, [sp, #12]
	return ret;
     880:	ldr	r3, [sp, #12]
     882:	ldr	r0, [r4, #8]
     884:	ldr	r2, [r4, #12]
     886:	subs	r3, r3, r0
     888:	cmp	r3, r2
     88a:	bls.n	89a <Led::tick()+0x3e>
    blink(_blinkingCounter - 1);
     88c:	subs	r1, #1
     88e:	mov	r0, r4
     890:	bl	7e0 <Led::blink(int)>
    _blinkingCounter--;
     894:	ldr	r3, [r4, #20]
     896:	subs	r3, #1
     898:	str	r3, [r4, #20]
  }
};
     89a:	add	sp, #16
     89c:	pop	{r4, r5, r6, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     89e:	ldr	r3, [r5, #0]
     8a0:	str	r3, [sp, #8]
	return ret;
     8a2:	ldr	r3, [sp, #8]

void Led::tick () {
  // hack
  if (millis() < 3000) return; 

  if (_blinking && blinkTimePassed()) {
     8a4:	ldr	r1, [r0, #8]
     8a6:	ldr	r2, [r0, #12]
     8a8:	subs	r3, r3, r1
     8aa:	cmp	r3, r2
     8ac:	bls.n	89a <Led::tick()+0x3e>
    digitalWrite(_pin, !digitalRead(_pin));
     8ae:	ldrb	r6, [r0, #0]
     8b0:	mov	r0, r6
     8b2:	bl	1708 <digitalRead>
     8b6:	clz	r1, r0
     8ba:	lsrs	r1, r1, #5
     8bc:	mov	r0, r6
     8be:	bl	16fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8c2:	ldr	r3, [r5, #0]
     8c4:	str	r3, [sp, #4]
	return ret;
     8c6:	ldr	r3, [sp, #4]
    _blinking = false;
    _lastBlink = millis();        
     8c8:	str	r3, [r4, #8]
  // hack
  if (millis() < 3000) return; 

  if (_blinking && blinkTimePassed()) {
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
     8ca:	movs	r3, #0
     8cc:	strb	r3, [r4, #16]
     8ce:	b.n	876 <Led::tick()+0x1a>
     8d0:	.word	0x1fff15cc

000008d4 <setup>:
#include <Arduino.h>
#include "sequencer.h" 

Sequencer* sequencer = new Sequencer();

void setup() {
     8d4:	bx	lr
     8d6:	nop

000008d8 <loop>:
  Serial.begin(9600); 
}

void loop() {
  sequencer->tick();
     8d8:	ldr	r3, [pc, #4]	; (8e0 <loop+0x8>)
     8da:	ldr	r0, [r3, #0]
     8dc:	b.w	4dc <Sequencer::tick()>
     8e0:	.word	0x1fff15b0

000008e4 <_GLOBAL__sub_I_sequencer>:
     8e4:	push	{r4, lr}
#include <Arduino.h>
#include "sequencer.h" 

Sequencer* sequencer = new Sequencer();
     8e6:	movs	r0, #56	; 0x38
     8e8:	bl	2d2c <operator new(unsigned int)>
     8ec:	mov	r4, r0
     8ee:	bl	46c <Sequencer::Sequencer()>
     8f2:	ldr	r3, [pc, #4]	; (8f8 <_GLOBAL__sub_I_sequencer+0x14>)
     8f4:	str	r4, [r3, #0]
     8f6:	pop	{r4, pc}
     8f8:	.word	0x1fff15b0

000008fc <Note::Note()>:
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     8fc:	movs	r2, #0
     8fe:	str	r2, [r0, #8]
  _pitch = 0;
     900:	str	r2, [r0, #0]
  _velocity = 0;
     902:	str	r2, [r0, #4]
  _channel = 0;
     904:	str	r2, [r0, #12]
  _active = false;
     906:	str	r2, [r0, #16]
#include "step.h"
#include "note.h"

Note::Note () {
  reset();
};
     908:	bx	lr
     90a:	nop

0000090c <Note::noteOn(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     90c:	subs	r1, #1
// First parameter is the event type (0x09 = note on, 0x08 = note off).
// Second parameter is note-on/note-off, combined with the channel.
// Channel can be anything between 0-15. Typically reported to the user as 1-16.
// Third parameter is the note number (48 = middle C).
// Fourth parameter is the velocity (64 = normal, 127 = fastest).
void Note::noteOn(byte channel, byte pitch, byte velocity) {
     90e:	push	{r3, lr}
     910:	lsls	r1, r1, #8
     912:	lsls	r3, r3, #24
     914:	and.w	r1, r1, #3840	; 0xf00
     918:	and.w	r3, r3, #2130706432	; 0x7f000000
     91c:	orrs	r3, r1
     91e:	lsls	r2, r2, #16
     920:	orr.w	r3, r3, #36864	; 0x9000
     924:	orr.w	r3, r3, #9
     928:	and.w	r0, r2, #8323072	; 0x7f0000
     92c:	orrs	r0, r3
     92e:	bl	1988 <usb_midi_write_packed>
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};
     932:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     936:	b.w	1a24 <usb_midi_flush_output>
     93a:	nop

0000093c <Note::play(Step*, int*)>:
  _velocity = 0;
  _channel = 0;
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
     93c:	push	{r4, r5}
  _active = true;
  _length = step->length;
     93e:	ldr	r5, [r1, #16]
  _pitch = scale[step->pitchGrade];
     940:	ldr	r3, [r1, #8]
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
     942:	str	r5, [r0, #8]
  _channel = 0;
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
     944:	movs	r5, #1
     946:	str	r5, [r0, #16]
  _length = step->length;
  _pitch = scale[step->pitchGrade];
     948:	ldr.w	r2, [r2, r3, lsl #2]
  _velocity = step->velocity;
     94c:	ldr	r3, [r1, #12]
     94e:	str	r3, [r0, #4]
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
  _pitch = scale[step->pitchGrade];
     950:	str	r2, [r0, #0]
  _velocity = step->velocity;
  // String noteLog = "Playing note, length: ";
  // //Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
     952:	uxtb	r3, r3
     954:	uxtb	r2, r2
     956:	ldrb	r1, [r0, #12]
};
     958:	pop	{r4, r5}
  _length = step->length;
  _pitch = scale[step->pitchGrade];
  _velocity = step->velocity;
  // String noteLog = "Playing note, length: ";
  // //Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
     95a:	b.w	90c <Note::noteOn(unsigned char, unsigned char, unsigned char)>
     95e:	nop

00000960 <Note::noteOff(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     960:	subs	r1, #1
void Note::noteOn(byte channel, byte pitch, byte velocity) {
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};

void Note::noteOff(byte channel, byte pitch, byte velocity) {
     962:	push	{r3, lr}
     964:	lsls	r1, r1, #8
     966:	lsls	r3, r3, #24
     968:	and.w	r1, r1, #3840	; 0xf00
     96c:	and.w	r3, r3, #2130706432	; 0x7f000000
     970:	orrs	r3, r1
     972:	lsls	r2, r2, #16
     974:	orr.w	r3, r3, #32768	; 0x8000
     978:	orr.w	r3, r3, #8
     97c:	and.w	r0, r2, #8323072	; 0x7f0000
     980:	orrs	r0, r3
     982:	bl	1988 <usb_midi_write_packed>
  usbMIDI.sendNoteOff(pitch, velocity, channel);
  usbMIDI.send_now();
};
     986:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     98a:	b.w	1a24 <usb_midi_flush_output>
     98e:	nop

00000990 <Note::tick()>:
Note::Note () {
  reset();
};

void Note::tick() {
  if (!_active) return;
     990:	ldr	r2, [r0, #16]
     992:	cbz	r2, 99e <Note::tick()+0xe>

  _length--;
     994:	ldr	r2, [r0, #8]
     996:	subs	r2, #1

  if (_length <= 0) {
     998:	cmp	r2, #0
};

void Note::tick() {
  if (!_active) return;

  _length--;
     99a:	str	r2, [r0, #8]

  if (_length <= 0) {
     99c:	ble.n	9a0 <Note::tick()+0x10>
     99e:	bx	lr

Note::Note () {
  reset();
};

void Note::tick() {
     9a0:	push	{r4, lr}
  _length--;

  if (_length <= 0) {
    // String noteLog = "Note off, pitch: ";
    // //Serial.println(noteLog + _pitch);    
    noteOff(_channel, _pitch, _velocity);
     9a2:	ldrb	r3, [r0, #4]
     9a4:	ldrb	r2, [r0, #0]
     9a6:	ldrb	r1, [r0, #12]
     9a8:	mov	r4, r0
     9aa:	bl	960 <Note::noteOff(unsigned char, unsigned char, unsigned char)>
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     9ae:	movs	r3, #0
     9b0:	str	r3, [r4, #8]
  _pitch = 0;
     9b2:	str	r3, [r4, #0]
  _velocity = 0;
     9b4:	str	r3, [r4, #4]
  _channel = 0;
     9b6:	str	r3, [r4, #12]
  _active = false;
     9b8:	str	r3, [r4, #16]
     9ba:	pop	{r4, pc}

000009bc <Transport::Transport(Sequencer*)>:
// this class has to keep track of the midi packets coming from the outside
// it also has the implementation of the top right knob that controls resolution
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
     9bc:	push	{r4}
  _sequencer = sequencer;
  _state = false;
  max_ppqn = 24;
     9be:	movs	r4, #24
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     9c0:	movs	r2, #0
  max_ppqn = 24;
     9c2:	stmia.w	r0, {r1, r4}
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     9c6:	str	r2, [r0, #12]
  max_ppqn = 24;
  ppqn = 0;
     9c8:	str	r2, [r0, #8]
};
     9ca:	ldr.w	r4, [sp], #4
     9ce:	bx	lr

000009d0 <Transport::controlTempo(int)>:
int Transport::getPPQN () {
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
     9d0:	cmp.w	r1, #400	; 0x190
     9d4:	bge.n	9e6 <Transport::controlTempo(int)+0x16>
    max_ppqn = 6;

    if (ppqn >= 6) {
     9d6:	ldr	r3, [r0, #8]
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     9d8:	movs	r2, #6

    if (ppqn >= 6) {
     9da:	cmp	r3, #5
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     9dc:	str	r2, [r0, #4]

    if (ppqn >= 6) {
     9de:	ble.n	9fc <Transport::controlTempo(int)+0x2c>
      ppqn = 0;
     9e0:	movs	r3, #0
     9e2:	str	r3, [r0, #8]
     9e4:	bx	lr
    }
  } else if (value >= 400 && value < 800) {
     9e6:	sub.w	r3, r1, #400	; 0x190
     9ea:	cmp.w	r3, #400	; 0x190
     9ee:	bcc.n	9fe <Transport::controlTempo(int)+0x2e>
    max_ppqn = 8;

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 800 && value <= 1023) {
     9f0:	sub.w	r1, r1, #800	; 0x320
     9f4:	cmp	r1, #223	; 0xdf
    max_ppqn = 10;
     9f6:	itt	ls
     9f8:	movls	r3, #10
     9fa:	strls	r3, [r0, #4]
     9fc:	bx	lr
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;

    if (ppqn >= 8) {
     9fe:	ldr	r3, [r0, #8]

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     a00:	movs	r2, #8

    if (ppqn >= 8) {
     a02:	cmp	r3, #7

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     a04:	str	r2, [r0, #4]

    if (ppqn >= 8) {
     a06:	bgt.n	9e0 <Transport::controlTempo(int)+0x10>
     a08:	bx	lr
     a0a:	nop

00000a0c <Transport::advancePPQN()>:
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     a0c:	ldr	r3, [r0, #8]
  _sequencer->_piano->tick();
     a0e:	ldr	r2, [r0, #0]
    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
     a10:	push	{r4, lr}
  ++ppqn;
     a12:	adds	r3, #1
    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
     a14:	mov	r4, r0
  ++ppqn;
     a16:	str	r3, [r0, #8]
  _sequencer->_piano->tick();
     a18:	ldr	r0, [r2, #52]	; 0x34
     a1a:	bl	714 <Piano::tick()>

  if (ppqn == max_ppqn) {
     a1e:	ldr	r2, [r4, #8]
     a20:	ldr	r3, [r4, #4]
     a22:	cmp	r2, r3
     a24:	beq.n	a28 <Transport::advancePPQN()+0x1c>
     a26:	pop	{r4, pc}
    _sequencer->step();
     a28:	ldr	r0, [r4, #0]
     a2a:	bl	4fc <Sequencer::step()>

    ppqn = 0;
     a2e:	movs	r3, #0
     a30:	str	r3, [r4, #8]
     a32:	pop	{r4, pc}

00000a34 <Transport::startPPQN()>:
  }
};

void Transport::startPPQN () {
     a34:	push	{r4, lr}
  _state = true;
     a36:	movs	r2, #1

    ppqn = 0;
  }
};

void Transport::startPPQN () {
     a38:	mov	r4, r0
  _state = true;
  ppqn = 0;
     a3a:	movs	r3, #0
    ppqn = 0;
  }
};

void Transport::startPPQN () {
  _state = true;
     a3c:	str	r2, [r0, #12]
  ppqn = 0;
     a3e:	str	r3, [r0, #8]
  _sequencer->step();
     a40:	ldr	r0, [r0, #0]
     a42:	bl	4fc <Sequencer::step()>
  _sequencer->_piano->tick();
     a46:	ldr	r3, [r4, #0]
     a48:	ldr	r0, [r3, #52]	; 0x34
     a4a:	bl	714 <Piano::tick()>
  _sequencer->_controller->_leds[5]->toggle();
     a4e:	ldr	r3, [r4, #0]
     a50:	ldr	r3, [r3, #8]
};
     a52:	ldmia.w	sp!, {r4, lr}
void Transport::startPPQN () {
  _state = true;
  ppqn = 0;
  _sequencer->step();
  _sequencer->_piano->tick();
  _sequencer->_controller->_leds[5]->toggle();
     a56:	ldr	r0, [r3, #72]	; 0x48
     a58:	b.w	814 <Led::toggle()>

00000a5c <Transport::stopPPQN()>:
};

void Transport::stopPPQN () {
     a5c:	push	{r4, lr}
  _state = false;
     a5e:	movs	r3, #0
  _sequencer->step();
  _sequencer->_piano->tick();
  _sequencer->_controller->_leds[5]->toggle();
};

void Transport::stopPPQN () {
     a60:	mov	r4, r0
  _state = false;
     a62:	str	r3, [r0, #12]
  ppqn = 0;
     a64:	str	r3, [r0, #8]
  _sequencer->resetStep();
     a66:	ldr	r0, [r0, #0]
     a68:	bl	560 <Sequencer::resetStep()>
  _sequencer->_controller->_leds[5]->toggle();
     a6c:	ldr	r3, [r4, #0]
     a6e:	ldr	r3, [r3, #8]
};
     a70:	ldmia.w	sp!, {r4, lr}

void Transport::stopPPQN () {
  _state = false;
  ppqn = 0;
  _sequencer->resetStep();
  _sequencer->_controller->_leds[5]->toggle();
     a74:	ldr	r0, [r3, #72]	; 0x48
     a76:	b.w	814 <Led::toggle()>
     a7a:	nop

00000a7c <Transport::processMidi()>:
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     a7c:	ldr	r3, [pc, #28]	; (a9c <Transport::processMidi()+0x20>)
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     a7e:	ldrb	r3, [r3, #0]
     a80:	cmp	r3, #250	; 0xfa
     a82:	beq.n	a96 <Transport::processMidi()+0x1a>
     a84:	cmp	r3, #252	; 0xfc
     a86:	beq.n	a92 <Transport::processMidi()+0x16>
     a88:	cmp	r3, #248	; 0xf8
     a8a:	beq.n	a8e <Transport::processMidi()+0x12>
     a8c:	bx	lr
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
     a8e:	b.w	a0c <Transport::advancePPQN()>
    case usbMIDI.Start: // 0xFA
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      stopPPQN();
     a92:	b.w	a5c <Transport::stopPPQN()>
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      startPPQN();
     a96:	b.w	a34 <Transport::startPPQN()>
     a9a:	nop
     a9c:	.word	0x1fff1a88

00000aa0 <Transport::tick()>:
  _state = false;
  max_ppqn = 24;
  ppqn = 0;
};

void Transport::tick () {
     aa0:	push	{r4, lr}
     aa2:	mov	r4, r0
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     aa4:	movs	r0, #0
     aa6:	bl	1a50 <usb_midi_read>
  if (usbMIDI.read()) {
     aaa:	cbnz	r0, aae <Transport::tick()+0xe>
     aac:	pop	{r4, pc}
    processMidi();
     aae:	mov	r0, r4
  }
};
     ab0:	ldmia.w	sp!, {r4, lr}
  ppqn = 0;
};

void Transport::tick () {
  if (usbMIDI.read()) {
    processMidi();
     ab4:	b.w	a7c <Transport::processMidi()>

00000ab8 <Paginator::Paginator(Sequencer*)>:
#include "paginator.h"
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
     ab8:	push	{r3, r4, r5, lr}
     aba:	movs	r2, #64	; 0x40
     abc:	mov	r4, r0
     abe:	mov	r5, r1
     ac0:	adds	r0, #16
     ac2:	movs	r1, #0
     ac4:	bl	3d10 <memset>
  _sequencer = sequencer;
  _currentEditPage = 0;
     ac8:	movs	r3, #0
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
     aca:	str	r5, [r4, #0]
  _currentEditPage = 0;
     acc:	str	r3, [r4, #4]
  _createdPages = 0;
     ace:	str	r3, [r4, #12]
  _currentPlaybackPage = 0;
     ad0:	str	r3, [r4, #8]
};
     ad2:	mov	r0, r4
     ad4:	pop	{r3, r4, r5, pc}
     ad6:	nop

00000ad8 <Paginator::getNextPage(int)>:

int Paginator::getPage () {
  return _currentEditPage;
};

void Paginator::getNextPage (int direction) {
     ad8:	push	{r3, r4, r5, lr}
  if (_createdPages == 0) return;
     ada:	ldr	r3, [r0, #12]
     adc:	cbz	r3, b2a <Paginator::getNextPage(int)+0x52>

  if (_currentPlaybackPage < _createdPages && direction == 1) {
     ade:	ldr	r2, [r0, #8]
     ae0:	cmp	r3, r2
     ae2:	ble.n	ae8 <Paginator::getNextPage(int)+0x10>
     ae4:	cmp	r1, #1
     ae6:	beq.n	b3a <Paginator::getNextPage(int)+0x62>
    _currentPlaybackPage++;
  } else if (_currentPlaybackPage > 0 && direction == -1) {
     ae8:	cmp	r2, #0
     aea:	ble.n	b2c <Paginator::getNextPage(int)+0x54>
     aec:	adds	r1, #1
     aee:	beq.n	b40 <Paginator::getNextPage(int)+0x68>
    _currentPlaybackPage--;
  } else if (_currentPlaybackPage == 0 && direction == -1) {
    _currentPlaybackPage = _createdPages;
  } else if (_currentPlaybackPage == _createdPages) {
     af0:	cmp	r3, r2
     af2:	beq.n	b36 <Paginator::getNextPage(int)+0x5e>
     af4:	mov	r4, r0
     af6:	movs	r1, #21
     af8:	ldr	r0, [pc, #76]	; (b48 <Paginator::getNextPage(int)+0x70>)
     afa:	bl	10ec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     afe:	ldr	r0, [pc, #76]	; (b4c <Paginator::getNextPage(int)+0x74>)
     b00:	bl	2c60 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     b04:	ldr	r1, [r4, #8]
     b06:	ldr	r0, [pc, #68]	; (b4c <Paginator::getNextPage(int)+0x74>)
     b08:	bl	2d00 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     b0c:	ldr	r0, [pc, #60]	; (b4c <Paginator::getNextPage(int)+0x74>)
     b0e:	bl	2c60 <Print::println()>
     b12:	ldr	r0, [r4, #8]
     b14:	ldr	r3, [r4, #0]

  Serial.println("Current playback page");
  Serial.println(_currentPlaybackPage);

  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
     b16:	add.w	r2, r4, r0, lsl #4
     b1a:	add.w	r0, r2, #20
     b1e:	ldr	r5, [r2, #16]
     b20:	ldmia	r0, {r0, r1, r2}
     b22:	str	r5, [r3, #32]
     b24:	str	r0, [r3, #36]	; 0x24
     b26:	str	r1, [r3, #40]	; 0x28
     b28:	str	r2, [r3, #44]	; 0x2c
     b2a:	pop	{r3, r4, r5, pc}

  if (_currentPlaybackPage < _createdPages && direction == 1) {
    _currentPlaybackPage++;
  } else if (_currentPlaybackPage > 0 && direction == -1) {
    _currentPlaybackPage--;
  } else if (_currentPlaybackPage == 0 && direction == -1) {
     b2c:	bne.n	af0 <Paginator::getNextPage(int)+0x18>
     b2e:	adds	r1, #1
     b30:	bne.n	af4 <Paginator::getNextPage(int)+0x1c>
    _currentPlaybackPage = _createdPages;
  } else if (_currentPlaybackPage == _createdPages) {
    _currentPlaybackPage = 0;
     b32:	str	r3, [r0, #8]
     b34:	b.n	af4 <Paginator::getNextPage(int)+0x1c>
     b36:	movs	r3, #0
     b38:	b.n	b32 <Paginator::getNextPage(int)+0x5a>

void Paginator::getNextPage (int direction) {
  if (_createdPages == 0) return;

  if (_currentPlaybackPage < _createdPages && direction == 1) {
    _currentPlaybackPage++;
     b3a:	adds	r2, #1
     b3c:	str	r2, [r0, #8]
     b3e:	b.n	af4 <Paginator::getNextPage(int)+0x1c>
  } else if (_currentPlaybackPage > 0 && direction == -1) {
    _currentPlaybackPage--;
     b40:	subs	r2, #1
     b42:	str	r2, [r0, #8]
     b44:	b.n	af4 <Paginator::getNextPage(int)+0x1c>
     b46:	nop
     b48:	.word	0x00004160
     b4c:	.word	0x1fff0c48

00000b50 <Paginator::setLeds(unsigned int)>:
  }  
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
     b50:	ldr	r2, [r0, #0]
     b52:	adds	r0, r1, #4
  Led * newStepLed = _sequencer->_controller->_leds[i];
     b54:	ldr	r3, [r2, #8]

  if (newStep->_state == 0) {
     b56:	ldr.w	r2, [r2, r0, lsl #2]
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];
     b5a:	add.w	r1, r3, r1, lsl #2

  if (newStep->_state == 0) {
     b5e:	ldrb	r3, [r2, #20]
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];
     b60:	ldr	r0, [r1, #52]	; 0x34

  if (newStep->_state == 0) {
     b62:	cbz	r3, b68 <Paginator::setLeds(unsigned int)+0x18>
    newStepLed->off();
  } else {
    newStepLed->on();
     b64:	b.w	84c <Led::on()>
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];

  if (newStep->_state == 0) {
    newStepLed->off();
     b68:	b.w	840 <Led::off()>

00000b6c <Paginator::changePage(int)>:
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  };
};

void Paginator::changePage (int direction) {
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     b6c:	cmp	r1, #1
    _currentEditPage--;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  };
};

void Paginator::changePage (int direction) {
     b6e:	push	{r3, r4, r5, r6, r7, lr}
     b70:	mov	r6, r1
     b72:	mov	r5, r0
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     b74:	beq.n	bb0 <Paginator::changePage(int)+0x44>
     b76:	ldr	r3, [r5, #4]
    _currentEditPage--;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  };
};

void Paginator::changePage (int direction) {
     b78:	movs	r4, #0
     b7a:	ldr	r2, [r5, #0]
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];
     b7c:	add.w	r1, r4, r3, lsl #2
     b80:	add.w	r2, r2, r4, lsl #2
     b84:	adds	r1, #4

    // i think something is going on here when you go backwards
    if (_pages[_currentEditPage + direction][i] == 0) {
     b86:	add	r3, r6
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];
     b88:	ldr	r0, [r2, #16]
     b8a:	str.w	r0, [r5, r1, lsl #2]

    // i think something is going on here when you go backwards
    if (_pages[_currentEditPage + direction][i] == 0) {
     b8e:	add.w	r3, r4, r3, lsl #2
     b92:	adds	r3, #4
     b94:	ldr.w	r3, [r5, r3, lsl #2]
     b98:	cbz	r3, bc2 <Paginator::changePage(int)+0x56>
      _sequencer->_stepsEdit[i] = new Step(_sequencer);
      _pages[_currentEditPage + direction][i] = _sequencer->_stepsEdit[i];
    } else {
      _sequencer->_stepsEdit[i] = _pages[_currentEditPage + direction][i];
     b9a:	str	r3, [r2, #16]
    }
    
    setLeds(i);
     b9c:	mov	r1, r4
     b9e:	mov	r0, r5
    _createdPages++;
    // //Serial.println("Incrementing created pages to:");
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
     ba0:	adds	r4, #1
      _pages[_currentEditPage + direction][i] = _sequencer->_stepsEdit[i];
    } else {
      _sequencer->_stepsEdit[i] = _pages[_currentEditPage + direction][i];
    }
    
    setLeds(i);
     ba2:	bl	b50 <Paginator::setLeds(unsigned int)>
    _createdPages++;
    // //Serial.println("Incrementing created pages to:");
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
     ba6:	cmp	r4, #4
     ba8:	beq.n	bae <Paginator::changePage(int)+0x42>
     baa:	ldr	r3, [r5, #4]
     bac:	b.n	b7a <Paginator::changePage(int)+0xe>
     bae:	pop	{r3, r4, r5, r6, r7, pc}
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  };
};

void Paginator::changePage (int direction) {
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     bb0:	ldr	r2, [r0, #12]
     bb2:	cmp	r2, #2
     bb4:	bgt.n	b76 <Paginator::changePage(int)+0xa>
     bb6:	ldr	r3, [r0, #4]
     bb8:	cmp	r2, r3
    _createdPages++;
     bba:	itt	eq
     bbc:	addeq	r2, r3, #1
     bbe:	streq	r2, [r0, #12]
     bc0:	b.n	b78 <Paginator::changePage(int)+0xc>
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];

    // i think something is going on here when you go backwards
    if (_pages[_currentEditPage + direction][i] == 0) {
      _sequencer->_stepsEdit[i] = new Step(_sequencer);
     bc2:	movs	r0, #24
     bc4:	bl	2d2c <operator new(unsigned int)>
     bc8:	ldr	r1, [r5, #0]
     bca:	mov	r7, r0
     bcc:	bl	c44 <Step::Step(Sequencer*)>
     bd0:	ldmia.w	r5, {r2, r3}
      _pages[_currentEditPage + direction][i] = _sequencer->_stepsEdit[i];
     bd4:	add	r3, r6
     bd6:	add.w	r3, r4, r3, lsl #2
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];

    // i think something is going on here when you go backwards
    if (_pages[_currentEditPage + direction][i] == 0) {
      _sequencer->_stepsEdit[i] = new Step(_sequencer);
     bda:	adds	r1, r4, #4
      _pages[_currentEditPage + direction][i] = _sequencer->_stepsEdit[i];
     bdc:	adds	r3, #4
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];

    // i think something is going on here when you go backwards
    if (_pages[_currentEditPage + direction][i] == 0) {
      _sequencer->_stepsEdit[i] = new Step(_sequencer);
     bde:	str.w	r7, [r2, r1, lsl #2]
      _pages[_currentEditPage + direction][i] = _sequencer->_stepsEdit[i];
     be2:	str.w	r7, [r5, r3, lsl #2]
     be6:	b.n	b9c <Paginator::changePage(int)+0x30>

00000be8 <Paginator::previousPage()>:

  debugPages();
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
     be8:	ldr	r2, [r0, #4]
     bea:	cmp	r2, #0
     bec:	ble.n	c14 <Paginator::previousPage()+0x2c>
  }

  debugPages();
};

void Paginator::previousPage () {
     bee:	push	{r4, lr}
  if (_currentEditPage > 0) {
    changePage(-1);
     bf0:	mov.w	r1, #4294967295
     bf4:	mov	r4, r0
     bf6:	bl	b6c <Paginator::changePage(int)>
    _currentEditPage--;
     bfa:	ldmia.w	r4, {r2, r3}
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     bfe:	ldr	r2, [r2, #8]
     c00:	add.w	r2, r2, r3, lsl #2
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
     c04:	subs	r3, #1
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     c06:	ldr	r0, [r2, #48]	; 0x30
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
     c08:	str	r3, [r4, #4]
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     c0a:	movs	r1, #3
  };
};
     c0c:	ldmia.w	sp!, {r4, lr}

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     c10:	b.w	7e0 <Led::blink(int)>
     c14:	bx	lr
     c16:	nop

00000c18 <Paginator::nextPage()>:
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
  }
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
     c18:	ldr	r2, [r0, #4]
     c1a:	cmp	r2, #2
     c1c:	ble.n	c20 <Paginator::nextPage()+0x8>
     c1e:	bx	lr
  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
  }
};

void Paginator::nextPage () {
     c20:	push	{r4, lr}
  if (_currentEditPage < 3) {
    changePage(1);
     c22:	movs	r1, #1
     c24:	mov	r4, r0
     c26:	bl	b6c <Paginator::changePage(int)>
    _currentEditPage++;
     c2a:	ldmia.w	r4, {r2, r3}
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     c2e:	ldr	r2, [r2, #8]
     c30:	add.w	r2, r2, r3, lsl #2
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
     c34:	adds	r3, #1
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     c36:	ldr	r0, [r2, #56]	; 0x38
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
     c38:	str	r3, [r4, #4]
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     c3a:	movs	r1, #3
  }

  debugPages();
};
     c3c:	ldmia.w	sp!, {r4, lr}

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     c40:	b.w	7e0 <Led::blink(int)>

00000c44 <Step::Step(Sequencer*)>:
#include <Arduino.h>
#include "step.h"
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
     c44:	push	{r4, r5}
  _state = false;
     c46:	movs	r2, #0
  _sequencer = sequencer;
  pitchScale = 0;
  pitchGrade = 0;
  velocity = 100;
     c48:	movs	r5, #100	; 0x64
  length = 4;
     c4a:	movs	r4, #4
Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
  pitchScale = 0;
  pitchGrade = 0;
  velocity = 100;
     c4c:	str	r5, [r0, #12]
  length = 4;
     c4e:	str	r4, [r0, #16]
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
     c50:	str	r1, [r0, #0]
#include "step.h"
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
     c52:	strb	r2, [r0, #20]
  _sequencer = sequencer;
  pitchScale = 0;
     c54:	str	r2, [r0, #4]
  pitchGrade = 0;
     c56:	str	r2, [r0, #8]
  velocity = 100;
  length = 4;
};
     c58:	pop	{r4, r5}
     c5a:	bx	lr

00000c5c <Step::toggle()>:

void Step::toggle () {
  _state = !_state;
     c5c:	ldrb	r3, [r0, #20]
     c5e:	eor.w	r3, r3, #1
     c62:	strb	r3, [r0, #20]
     c64:	bx	lr
     c66:	nop

00000c68 <Step::controlLength(int)>:
};

void Step::controlLength (int value) {
  int newValue = map(value, 0, 1000, 16, 0); // <- hack i guess
  length = newValue;
     c68:	ldr	r3, [pc, #20]	; (c80 <Step::controlLength(int)+0x18>)
     c6a:	sub.w	r1, r1, r1, lsl #4
     c6e:	smull	r2, r3, r3, r1
     c72:	asrs	r1, r1, #31
     c74:	rsb	r1, r1, r3, asr #8
     c78:	adds	r1, #16
     c7a:	str	r1, [r0, #16]
     c7c:	bx	lr
     c7e:	nop
     c80:	.word	0x4178749f

00000c84 <Step::controlPitch(int)>:
};

void Step::controlPitch (int value) {
  int newValue = value;

  if (value < 330) {
     c84:	cmp.w	r1, #330	; 0x14a
     c88:	blt.n	ca2 <Step::controlPitch(int)+0x1e>
    newValue = 2;
  } else if (value < 660) {
     c8a:	cmp.w	r1, #660	; 0x294
     c8e:	blt.n	c9c <Step::controlPitch(int)+0x18>
    newValue = 1;
  } else if (value <= 1023) {
     c90:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     c94:	it	lt
     c96:	movlt	r1, #0
  }

  pitchGrade = newValue;
     c98:	str	r1, [r0, #8]
     c9a:	bx	lr
  int newValue = value;

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
     c9c:	movs	r1, #1
  } else if (value <= 1023) {
    newValue = 0;
  }

  pitchGrade = newValue;
     c9e:	str	r1, [r0, #8]
     ca0:	bx	lr

void Step::controlPitch (int value) {
  int newValue = value;

  if (value < 330) {
    newValue = 2;
     ca2:	movs	r1, #2
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  pitchGrade = newValue;
     ca4:	str	r1, [r0, #8]
     ca6:	bx	lr

00000ca8 <Step::controlVelocity(int)>:
};

void Step::controlVelocity (int value) {
  int newValue = map(value, 0, 1023, 127, 62);
  velocity = newValue;
     ca8:	rsb	r1, r1, r1, lsl #26
     cac:	lsls	r1, r1, #6
     cae:	it	mi
     cb0:	addwmi	r1, r1, #1023	; 0x3ff
     cb4:	asrs	r1, r1, #10
     cb6:	adds	r1, #127	; 0x7f
     cb8:	str	r1, [r0, #12]
     cba:	bx	lr

00000cbc <Knob::Knob(unsigned char, int, Controller*)>:
#include "step.h"
#include "sequencer.h"
#include "transport.h"
#include "piano.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
     cbc:	push	{r4, r5}
  _pin = pin;
  _id = id;
  _controller = controller;
  _value = 0;
     cbe:	movs	r5, #0
     cc0:	str	r5, [r0, #4]
#include "sequencer.h"
#include "transport.h"
#include "piano.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
  _pin = pin;
     cc2:	str	r1, [r0, #0]
  _id = id;
     cc4:	str	r2, [r0, #12]
  _controller = controller;
     cc6:	str	r3, [r0, #16]
  _value = 0;
};
     cc8:	pop	{r4, r5}
     cca:	bx	lr

00000ccc <Knob::onChange()>:

void Knob::onChange () {
  if (_id == 4) {
     ccc:	ldr	r3, [r0, #12]
     cce:	cmp	r3, #4
     cd0:	beq.n	d30 <Knob::onChange()+0x64>
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
     cd2:	cmp	r3, #5
     cd4:	beq.n	d0e <Knob::onChange()+0x42>
  _id = id;
  _controller = controller;
  _value = 0;
};

void Knob::onChange () {
     cd6:	push	{r4, lr}
     cd8:	mov	r4, r0
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
     cda:	ldr	r0, [r0, #16]
     cdc:	bl	1018 <Controller::getMode()>
     ce0:	cmp	r0, #1
     ce2:	beq.n	d1a <Knob::onChange()+0x4e>
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
     ce4:	ldr	r0, [r4, #16]
     ce6:	bl	1018 <Controller::getMode()>
     cea:	cbz	r0, cf8 <Knob::onChange()+0x2c>
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
     cec:	ldr	r0, [r4, #16]
     cee:	bl	1018 <Controller::getMode()>
     cf2:	cmp	r0, #2
     cf4:	beq.n	d3c <Knob::onChange()+0x70>
     cf6:	pop	{r4, pc}
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
     cf8:	ldr	r2, [r4, #16]
     cfa:	ldr	r3, [r4, #12]
     cfc:	ldr	r2, [r2, #76]	; 0x4c
     cfe:	ldr	r1, [r4, #4]
     d00:	adds	r3, #4
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
  }
}
     d02:	ldmia.w	sp!, {r4, lr}
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
     d06:	ldr.w	r0, [r2, r3, lsl #2]
     d0a:	b.w	c84 <Step::controlPitch(int)>

void Knob::onChange () {
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
     d0e:	ldr	r3, [r0, #16]
     d10:	ldr	r1, [r0, #4]
     d12:	ldr	r3, [r3, #76]	; 0x4c
     d14:	ldr	r0, [r3, #4]
     d16:	b.w	9d0 <Transport::controlTempo(int)>
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
     d1a:	ldr	r2, [r4, #16]
     d1c:	ldr	r3, [r4, #12]
     d1e:	ldr	r2, [r2, #76]	; 0x4c
     d20:	ldr	r1, [r4, #4]
     d22:	adds	r3, #4
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
  }
}
     d24:	ldmia.w	sp!, {r4, lr}
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
     d28:	ldr.w	r0, [r2, r3, lsl #2]
     d2c:	b.w	ca8 <Step::controlVelocity(int)>
  _value = 0;
};

void Knob::onChange () {
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
     d30:	ldr	r3, [r0, #16]
     d32:	ldr	r1, [r0, #4]
     d34:	ldr	r3, [r3, #76]	; 0x4c
     d36:	ldr	r0, [r3, #52]	; 0x34
     d38:	b.w	758 <Piano::transpose(int)>
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
     d3c:	ldr	r2, [r4, #16]
     d3e:	ldr	r3, [r4, #12]
     d40:	ldr	r2, [r2, #76]	; 0x4c
     d42:	ldr	r1, [r4, #4]
     d44:	adds	r3, #4
  }
}
     d46:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
     d4a:	ldr.w	r0, [r2, r3, lsl #2]
     d4e:	b.w	c68 <Step::controlLength(int)>
     d52:	nop

00000d54 <Knob::tick()>:
  }
}

// todo latch
void Knob::tick () {
     d54:	push	{r4, lr}
     d56:	mov	r4, r0
  _value = analogRead(_pin);
     d58:	ldrb	r0, [r0, #0]
     d5a:	bl	1518 <analogRead>

  int diff = abs(_value - _lastValue);
     d5e:	ldr	r3, [r4, #8]
  }
}

// todo latch
void Knob::tick () {
  _value = analogRead(_pin);
     d60:	str	r0, [r4, #4]

  int diff = abs(_value - _lastValue);

  // "filter"
  const boolean isChanging = _value != _lastValue && diff > 10;
     d62:	cmp	r0, r3
     d64:	beq.n	d7c <Knob::tick()+0x28>
     d66:	subs	r0, r0, r3
     d68:	cmp	r0, #0
     d6a:	it	lt
     d6c:	neglt	r0, r0
     d6e:	cmp	r0, #10
     d70:	ble.n	d7c <Knob::tick()+0x28>

  if (isChanging) {
    onChange();
     d72:	mov	r0, r4
     d74:	bl	ccc <Knob::onChange()>

    _lastValue = _value;
     d78:	ldr	r3, [r4, #4]
     d7a:	str	r3, [r4, #8]
     d7c:	pop	{r4, pc}
     d7e:	nop

00000d80 <Controller::Controller(Sequencer*)>:
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"
#include "paginator.h"

Controller::Controller (Sequencer* sequencer) {
     d80:	push	{r4, r5, r6, r7, lr}
  _sequencer = sequencer;
  _currentMode = PITCH;
     d82:	movs	r5, #0
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"
#include "paginator.h"

Controller::Controller (Sequencer* sequencer) {
     d84:	sub	sp, #20
     d86:	mov	r4, r0
  _sequencer = sequencer;
     d88:	str	r1, [r0, #76]	; 0x4c
  _currentMode = PITCH;
     d8a:	strb.w	r5, [r0, #49]	; 0x31
  _shiftMode = false;
     d8e:	strb.w	r5, [r0, #48]	; 0x30
  
  _leds[0] = new Led(3, LOW);
     d92:	movs	r0, #24
     d94:	bl	2d2c <operator new(unsigned int)>
     d98:	mov	r2, r5
     d9a:	mov	r6, r0
     d9c:	movs	r1, #3
     d9e:	bl	7b8 <Led::Led(int, int)>
     da2:	str	r6, [r4, #52]	; 0x34
  _leds[1] = new Led(5, LOW);
     da4:	movs	r0, #24
     da6:	bl	2d2c <operator new(unsigned int)>
     daa:	mov	r2, r5
     dac:	mov	r6, r0
     dae:	movs	r1, #5
     db0:	bl	7b8 <Led::Led(int, int)>
     db4:	str	r6, [r4, #56]	; 0x38
  _leds[2] = new Led(7, LOW);
     db6:	movs	r0, #24
     db8:	bl	2d2c <operator new(unsigned int)>
     dbc:	mov	r2, r5
     dbe:	mov	r6, r0
     dc0:	movs	r1, #7
     dc2:	bl	7b8 <Led::Led(int, int)>
     dc6:	str	r6, [r4, #60]	; 0x3c
  _leds[3] = new Led(9, LOW);
     dc8:	movs	r0, #24
     dca:	bl	2d2c <operator new(unsigned int)>
     dce:	mov	r2, r5
     dd0:	mov	r6, r0
     dd2:	movs	r1, #9
     dd4:	bl	7b8 <Led::Led(int, int)>
     dd8:	str	r6, [r4, #64]	; 0x40
  _leds[4] = new Led(11, LOW);
     dda:	movs	r0, #24
     ddc:	bl	2d2c <operator new(unsigned int)>
     de0:	mov	r2, r5
     de2:	mov	r6, r0
     de4:	movs	r1, #11
     de6:	bl	7b8 <Led::Led(int, int)>
     dea:	str	r6, [r4, #68]	; 0x44
  _leds[5] = new Led(24, LOW);
     dec:	movs	r0, #24
     dee:	bl	2d2c <operator new(unsigned int)>
     df2:	mov	r2, r5
     df4:	movs	r1, #24
     df6:	mov	r6, r0
     df8:	bl	7b8 <Led::Led(int, int)>
     dfc:	str	r6, [r4, #72]	; 0x48

  _leds[4]->toggle();
     dfe:	ldr	r0, [r4, #68]	; 0x44
     e00:	bl	814 <Led::toggle()>
  _leds[5]->toggle();
     e04:	ldr	r0, [r4, #72]	; 0x48
     e06:	bl	814 <Led::toggle()>

  _buttons[0] = new Button(1, step1pin, _leds[0], false, false, this);
     e0a:	movs	r0, #56	; 0x38
     e0c:	bl	2d2c <operator new(unsigned int)>
     e10:	ldr	r3, [r4, #52]	; 0x34
     e12:	str	r5, [sp, #4]
     e14:	mov	r6, r0
     e16:	str	r5, [sp, #0]
     e18:	movs	r2, #2
     e1a:	movs	r1, #1
     e1c:	str	r4, [sp, #8]
     e1e:	bl	568 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     e22:	str	r6, [r4, #0]
  _buttons[1] = new Button(2, step2pin, _leds[1], false, false, this);
     e24:	movs	r0, #56	; 0x38
     e26:	bl	2d2c <operator new(unsigned int)>
     e2a:	ldr	r3, [r4, #56]	; 0x38
     e2c:	str	r5, [sp, #4]
     e2e:	mov	r6, r0
     e30:	str	r5, [sp, #0]
     e32:	movs	r2, #4
     e34:	movs	r1, #2
     e36:	str	r4, [sp, #8]
     e38:	bl	568 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     e3c:	str	r6, [r4, #4]
  _buttons[2] = new Button(3, step3pin, _leds[2], false, false, this);
     e3e:	movs	r0, #56	; 0x38
     e40:	bl	2d2c <operator new(unsigned int)>
     e44:	ldr	r3, [r4, #60]	; 0x3c
     e46:	str	r5, [sp, #4]
     e48:	mov	r6, r0
     e4a:	str	r5, [sp, #0]
     e4c:	movs	r2, #6
     e4e:	movs	r1, #3
     e50:	str	r4, [sp, #8]
     e52:	bl	568 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     e56:	str	r6, [r4, #8]
  _buttons[3] = new Button(4, step4pin, _leds[3], false, false, this);
     e58:	movs	r0, #56	; 0x38
     e5a:	bl	2d2c <operator new(unsigned int)>
     e5e:	ldr	r3, [r4, #64]	; 0x40
     e60:	str	r5, [sp, #4]
     e62:	mov	r6, r0
     e64:	str	r5, [sp, #0]
     e66:	movs	r2, #8
     e68:	movs	r1, #4
     e6a:	str	r4, [sp, #8]
     e6c:	bl	568 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     e70:	str	r6, [r4, #12]
  _buttons[4] = new Button(5, shiftPin, _leds[4], true, false, this);
     e72:	movs	r0, #56	; 0x38
     e74:	bl	2d2c <operator new(unsigned int)>
     e78:	movs	r6, #1
     e7a:	ldr	r3, [r4, #68]	; 0x44
     e7c:	str	r5, [sp, #4]
     e7e:	mov	r7, r0
     e80:	movs	r2, #10
     e82:	movs	r1, #5
     e84:	str	r4, [sp, #8]
     e86:	str	r6, [sp, #0]
     e88:	bl	568 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     e8c:	str	r7, [r4, #16]
  _buttons[5] = new Button(6, playPin, _leds[5], false, true, this);
     e8e:	movs	r0, #56	; 0x38
     e90:	bl	2d2c <operator new(unsigned int)>
     e94:	ldr	r3, [r4, #72]	; 0x48
     e96:	str	r4, [sp, #8]
     e98:	mov	r7, r0
     e9a:	stmia.w	sp, {r5, r6}
     e9e:	movs	r2, #12
     ea0:	movs	r1, #6
     ea2:	bl	568 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     ea6:	str	r7, [r4, #20]

  _knobs[0] = new Knob(A0, 0, this);
     ea8:	movs	r0, #20
     eaa:	bl	2d2c <operator new(unsigned int)>
     eae:	mov	r3, r4
     eb0:	mov	r2, r5
     eb2:	mov	r7, r0
     eb4:	movs	r1, #14
     eb6:	bl	cbc <Knob::Knob(unsigned char, int, Controller*)>
     eba:	str	r7, [r4, #24]
  _knobs[1] = new Knob(A1, 1, this);
     ebc:	movs	r0, #20
     ebe:	bl	2d2c <operator new(unsigned int)>
     ec2:	mov	r3, r4
     ec4:	mov	r2, r6
     ec6:	mov	r5, r0
     ec8:	movs	r1, #15
     eca:	bl	cbc <Knob::Knob(unsigned char, int, Controller*)>
     ece:	str	r5, [r4, #28]
  _knobs[2] = new Knob(A2, 2, this);
     ed0:	movs	r0, #20
     ed2:	bl	2d2c <operator new(unsigned int)>
     ed6:	mov	r3, r4
     ed8:	mov	r5, r0
     eda:	movs	r2, #2
     edc:	movs	r1, #16
     ede:	bl	cbc <Knob::Knob(unsigned char, int, Controller*)>
     ee2:	str	r5, [r4, #32]
  _knobs[3] = new Knob(A3, 3, this);
     ee4:	movs	r0, #20
     ee6:	bl	2d2c <operator new(unsigned int)>
     eea:	mov	r3, r4
     eec:	mov	r5, r0
     eee:	movs	r2, #3
     ef0:	movs	r1, #17
     ef2:	bl	cbc <Knob::Knob(unsigned char, int, Controller*)>
     ef6:	str	r5, [r4, #36]	; 0x24
  _knobs[4] = new Knob(A4, 4, this);
     ef8:	movs	r0, #20
     efa:	bl	2d2c <operator new(unsigned int)>
     efe:	mov	r3, r4
     f00:	mov	r5, r0
     f02:	movs	r2, #4
     f04:	movs	r1, #18
     f06:	bl	cbc <Knob::Knob(unsigned char, int, Controller*)>
     f0a:	str	r5, [r4, #40]	; 0x28
  _knobs[5] = new Knob(A5, 5, this);
     f0c:	movs	r0, #20
     f0e:	bl	2d2c <operator new(unsigned int)>
     f12:	mov	r3, r4
     f14:	movs	r2, #5
     f16:	movs	r1, #19
     f18:	mov	r5, r0
     f1a:	bl	cbc <Knob::Knob(unsigned char, int, Controller*)>
};
     f1e:	mov	r0, r4
  _knobs[0] = new Knob(A0, 0, this);
  _knobs[1] = new Knob(A1, 1, this);
  _knobs[2] = new Knob(A2, 2, this);
  _knobs[3] = new Knob(A3, 3, this);
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
     f20:	str	r5, [r4, #44]	; 0x2c
};
     f22:	add	sp, #20
     f24:	pop	{r4, r5, r6, r7, pc}
     f26:	nop

00000f28 <Controller::tick()>:

void Controller::tick() {
     f28:	push	{r3, r4, r5, r6, r7, lr}
     f2a:	add.w	r7, r0, #20
     f2e:	mov	r6, r7
     f30:	subs	r4, r0, #4
     f32:	add.w	r5, r0, #48	; 0x30
  for (size_t i = 0; i < 6; i++) {
    _buttons[i]->tick();
     f36:	ldr.w	r0, [r4, #4]!
     f3a:	bl	62c <Button::tick()>
    _leds[i]->tick();
     f3e:	ldr.w	r0, [r5, #4]!
     f42:	bl	85c <Led::tick()>
    _knobs[i]->tick();
     f46:	ldr.w	r0, [r6, #4]!
     f4a:	bl	d54 <Knob::tick()>
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
};

void Controller::tick() {
  for (size_t i = 0; i < 6; i++) {
     f4e:	cmp	r4, r7
     f50:	bne.n	f36 <Controller::tick()+0xe>
    _buttons[i]->tick();
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}
     f52:	pop	{r3, r4, r5, r6, r7, pc}

00000f54 <Controller::toggleMode()>:

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
     f54:	ldrb.w	r3, [r0, #49]	; 0x31
     f58:	cbz	r3, f68 <Controller::toggleMode()+0x14>
    _currentMode = VELOCITY;
    //Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
     f5a:	cmp	r3, #1
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}

void Controller::toggleMode () {
     f5c:	push	{r4, lr}
     f5e:	mov	r4, r0
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    //Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
     f60:	beq.n	f8e <Controller::toggleMode()+0x3a>
    _currentMode = NOTELENGTH;
    //Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
     f62:	cmp	r3, #2
     f64:	beq.n	f78 <Controller::toggleMode()+0x24>
     f66:	pop	{r4, pc}
  }
}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
     f68:	movs	r3, #1
     f6a:	strb.w	r3, [r0, #49]	; 0x31
    //Serial.println("VELOCITY");
    _leds[4]->blink(999);
     f6e:	movw	r1, #999	; 0x3e7
     f72:	ldr	r0, [r0, #68]	; 0x44
     f74:	b.w	7e0 <Led::blink(int)>
    _currentMode = NOTELENGTH;
    //Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
     f78:	movs	r1, #0
     f7a:	strb.w	r1, [r0, #49]	; 0x31
    //Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
     f7e:	ldr	r0, [r0, #68]	; 0x44
     f80:	bl	7e0 <Led::blink(int)>
    _leds[4]->on();
     f84:	ldr	r0, [r4, #68]	; 0x44
  }
};
     f86:	ldmia.w	sp!, {r4, lr}
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    //Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
     f8a:	b.w	84c <Led::on()>
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    //Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
     f8e:	movs	r3, #2
     f90:	strb.w	r3, [r0, #49]	; 0x31
    //Serial.println("NOTELENGTH");
    _leds[4]->blink();
     f94:	movs	r1, #0
     f96:	ldr	r0, [r0, #68]	; 0x44
     f98:	bl	7e0 <Led::blink(int)>
    _leds[4]->off();
     f9c:	ldr	r0, [r4, #68]	; 0x44
    _currentMode = PITCH;
    //Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
     f9e:	ldmia.w	sp!, {r4, lr}
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    //Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
     fa2:	b.w	840 <Led::off()>
     fa6:	nop

00000fa8 <Controller::enterShiftMode()>:
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
     fa8:	ldr	r3, [r0, #76]	; 0x4c
     faa:	ldr	r3, [r3, #12]
  _shiftMode = true;
     fac:	movs	r2, #1
     fae:	ldr	r3, [r3, #4]
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
     fb0:	push	{r4, r5, r6, lr}
     fb2:	mov	r6, r0
  _shiftMode = true;
     fb4:	strb.w	r2, [r0, #48]	; 0x30
     fb8:	add.w	r5, r0, #52	; 0x34

  for (int i = 0; i < 4; i++) {
     fbc:	movs	r4, #0
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
     fbe:	cmp	r4, r3
};

void Controller::enterShiftMode () {
  _shiftMode = true;

  for (int i = 0; i < 4; i++) {
     fc0:	add.w	r4, r4, #1
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
     fc4:	beq.n	fd2 <Controller::enterShiftMode()+0x2a>
     fc6:	ldr	r0, [r5, #0]
     fc8:	bl	840 <Led::off()>
     fcc:	ldr	r3, [r6, #76]	; 0x4c
     fce:	ldr	r3, [r3, #12]
     fd0:	ldr	r3, [r3, #4]
};

void Controller::enterShiftMode () {
  _shiftMode = true;

  for (int i = 0; i < 4; i++) {
     fd2:	cmp	r4, #4
     fd4:	add.w	r5, r5, #4
     fd8:	bne.n	fbe <Controller::enterShiftMode()+0x16>
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
     fda:	add.w	r6, r6, r3, lsl #2
     fde:	ldr	r0, [r6, #52]	; 0x34
};
     fe0:	ldmia.w	sp!, {r4, r5, r6, lr}

  for (int i = 0; i < 4; i++) {
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
     fe4:	b.w	84c <Led::on()>

00000fe8 <Controller::exitShiftMode()>:
};

void Controller::exitShiftMode () {
     fe8:	push	{r4, r5, r6, lr}
  _shiftMode = false;
     fea:	mov	r5, r0
     fec:	movs	r4, #0
     fee:	strb.w	r4, [r5, #48]!
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
};

void Controller::exitShiftMode () {
     ff2:	mov	r6, r0
  _shiftMode = false;
  for (size_t i = 0; i < 4; i++) {
    _leds[i]->off();
     ff4:	ldr.w	r0, [r5, #4]!
     ff8:	bl	840 <Led::off()>
    _sequencer->_paginator->setLeds(i);
     ffc:	ldr	r3, [r6, #76]	; 0x4c
     ffe:	mov	r1, r4
    1000:	ldr	r0, [r3, #12]
  _leds[_sequencer->_paginator->_currentEditPage]->on();
};

void Controller::exitShiftMode () {
  _shiftMode = false;
  for (size_t i = 0; i < 4; i++) {
    1002:	adds	r4, #1
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
    1004:	bl	b50 <Paginator::setLeds(unsigned int)>
  _leds[_sequencer->_paginator->_currentEditPage]->on();
};

void Controller::exitShiftMode () {
  _shiftMode = false;
  for (size_t i = 0; i < 4; i++) {
    1008:	cmp	r4, #4
    100a:	bne.n	ff4 <Controller::exitShiftMode()+0xc>
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
  }
  
};
    100c:	pop	{r4, r5, r6, pc}
    100e:	nop

00001010 <Controller::getShiftMode()>:

bool Controller::getShiftMode () {
  return _shiftMode;
};
    1010:	ldrb.w	r0, [r0, #48]	; 0x30
    1014:	bx	lr
    1016:	nop

00001018 <Controller::getMode()>:

Modes Controller::getMode() {
  return _currentMode;
};
    1018:	ldrb.w	r0, [r0, #49]	; 0x31
    101c:	bx	lr
    101e:	nop

00001020 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1020:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1022:	ldr	r5, [pc, #60]	; (1060 <usb_serial_getchar+0x40>)
    1024:	ldr	r0, [r5, #0]
    1026:	cbz	r0, 1048 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1028:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    102a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    102c:	adds	r1, r0, r3
    102e:	adds	r3, #1
	if (i >= rx_packet->len) {
    1030:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1032:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1034:	bcs.n	103c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1036:	strh	r3, [r0, #2]
	}
	return c;
    1038:	mov	r0, r4
}
    103a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    103c:	bl	1ecc <usb_free>
		rx_packet = NULL;
    1040:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1042:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1044:	str	r3, [r5, #0]
    1046:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1048:	ldr	r3, [pc, #24]	; (1064 <usb_serial_getchar+0x44>)
    104a:	ldrb	r3, [r3, #0]
    104c:	cbz	r3, 105a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    104e:	movs	r0, #2
    1050:	bl	1f18 <usb_rx>
    1054:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1056:	cmp	r0, #0
    1058:	bne.n	1028 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    105a:	mov.w	r0, #4294967295
    105e:	pop	{r3, r4, r5, pc}
    1060:	.word	0x1fff15c0
    1064:	.word	0x1fff1720

00001068 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1068:	push	{r4, lr}
	if (!rx_packet) {
    106a:	ldr	r4, [pc, #36]	; (1090 <usb_serial_peekchar+0x28>)
    106c:	ldr	r0, [r4, #0]
    106e:	cbz	r0, 1078 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1070:	ldrh	r3, [r0, #2]
    1072:	add	r0, r3
    1074:	ldrb	r0, [r0, #8]
}
    1076:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1078:	ldr	r3, [pc, #24]	; (1094 <usb_serial_peekchar+0x2c>)
    107a:	ldrb	r3, [r3, #0]
    107c:	cbz	r3, 108a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    107e:	movs	r0, #2
    1080:	bl	1f18 <usb_rx>
    1084:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1086:	cmp	r0, #0
    1088:	bne.n	1070 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    108a:	mov.w	r0, #4294967295
    108e:	pop	{r4, pc}
    1090:	.word	0x1fff15c0
    1094:	.word	0x1fff1720

00001098 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1098:	ldr	r3, [pc, #16]	; (10ac <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    109a:	ldr	r2, [pc, #20]	; (10b0 <usb_serial_available+0x18>)
    109c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    109e:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    10a0:	cbz	r3, 10aa <usb_serial_available+0x12>
    10a2:	ldrh	r2, [r3, #0]
    10a4:	ldrh	r3, [r3, #2]
    10a6:	subs	r3, r2, r3
    10a8:	add	r0, r3
	return count;
}
    10aa:	bx	lr
    10ac:	.word	0x1fff15c0
    10b0:	.word	0x1fff1bb4

000010b4 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    10b4:	ldr	r3, [pc, #44]	; (10e4 <usb_serial_flush_input+0x30>)
    10b6:	ldrb	r3, [r3, #0]
    10b8:	cbz	r3, 10e2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    10ba:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    10bc:	ldr	r4, [pc, #40]	; (10e8 <usb_serial_flush_input+0x34>)
    10be:	ldr	r0, [r4, #0]
    10c0:	cbz	r0, 10d6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    10c2:	bl	1ecc <usb_free>
		rx_packet = NULL;
    10c6:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    10c8:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    10ca:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    10cc:	bl	1f18 <usb_rx>
		if (!rx) break;
    10d0:	cbz	r0, 10e0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    10d2:	bl	1ecc <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    10d6:	movs	r0, #2
    10d8:	bl	1f18 <usb_rx>
		if (!rx) break;
    10dc:	cmp	r0, #0
    10de:	bne.n	10d2 <usb_serial_flush_input+0x1e>
    10e0:	pop	{r4, pc}
    10e2:	bx	lr
    10e4:	.word	0x1fff1720
    10e8:	.word	0x1fff15c0

000010ec <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    10ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    10f0:	ldr.w	r9, [pc, #248]	; 11ec <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    10f4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    10f6:	movs	r2, #1
    10f8:	strb.w	r2, [r9]
	while (size > 0) {
    10fc:	str	r1, [sp, #4]
    10fe:	cbz	r1, 115c <usb_serial_write+0x70>
    1100:	ldr.w	r8, [pc, #236]	; 11f0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1104:	ldr	r7, [pc, #212]	; (11dc <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1106:	ldr	r6, [sp, #4]
    1108:	mov	fp, r0
		if (!tx_packet) {
    110a:	ldr.w	r0, [r8]
    110e:	cbz	r0, 117e <usb_serial_write+0x92>
    1110:	ldr	r5, [pc, #204]	; (11e0 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1112:	ldrh	r4, [r0, #2]
    1114:	rsb	r1, r4, #64	; 0x40
    1118:	cmp	r1, r6
    111a:	it	cs
    111c:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    111e:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1122:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1124:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1128:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    112a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    112c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1130:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1134:	cbz	r1, 114c <usb_serial_write+0x60>
    1136:	subs	r4, #1
    1138:	add	r2, r4
    113a:	add	r1, fp
    113c:	ldrb.w	r4, [fp], #1
    1140:	strb.w	r4, [r2, #1]!
    1144:	cmp	fp, r1
    1146:	bne.n	113c <usb_serial_write+0x50>
    1148:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    114c:	cmp.w	lr, #63	; 0x3f
    1150:	bhi.n	116a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1152:	ldr	r2, [pc, #144]	; (11e4 <usb_serial_write+0xf8>)
    1154:	movs	r1, #5
    1156:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1158:	cmp	r6, #0
    115a:	bne.n	110a <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    115c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    115e:	movs	r3, #0
    1160:	strb.w	r3, [r9]
	return ret;
}
    1164:	add	sp, #12
    1166:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    116a:	movs	r2, #64	; 0x40
    116c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    116e:	mov	r1, r0
    1170:	movs	r0, #3
    1172:	bl	2068 <usb_tx>
			tx_packet = NULL;
    1176:	movs	r2, #0
    1178:	str.w	r2, [r8]
    117c:	b.n	1152 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    117e:	ldrb	r2, [r7, #0]
    1180:	cbz	r2, 11cc <usb_serial_write+0xe0>
    1182:	ldr	r4, [pc, #100]	; (11e8 <usb_serial_write+0xfc>)
    1184:	ldr	r5, [pc, #88]	; (11e0 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1186:	mov.w	sl, #1
    118a:	b.n	119c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    118c:	subs	r4, #1
    118e:	beq.n	11be <usb_serial_write+0xd2>
    1190:	ldrb	r2, [r5, #0]
    1192:	cbnz	r2, 11be <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1194:	bl	2b6c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1198:	ldrb	r2, [r7, #0]
    119a:	cbz	r2, 11cc <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    119c:	movs	r0, #3
    119e:	bl	1f54 <usb_tx_packet_count>
    11a2:	cmp	r0, #7
    11a4:	bhi.n	118c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    11a6:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    11aa:	bl	1e8c <usb_malloc>
    11ae:	str.w	r0, [r8]
					if (tx_packet) break;
    11b2:	cmp	r0, #0
    11b4:	bne.n	1112 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    11b6:	ldr	r3, [pc, #52]	; (11ec <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    11b8:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    11ba:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    11bc:	bne.n	1190 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    11be:	movs	r3, #1
					return -1;
    11c0:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    11c4:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    11c6:	add	sp, #12
    11c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    11cc:	movs	r3, #0
					return -1;
    11ce:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    11d2:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    11d6:	add	sp, #12
    11d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11dc:	.word	0x1fff1720
    11e0:	.word	0x1fff15bc
    11e4:	.word	0x1fff15b4
    11e8:	.word	0x00014821
    11ec:	.word	0x1fff15b5
    11f0:	.word	0x1fff15b8

000011f4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    11f4:	push	{lr}
    11f6:	sub	sp, #12
    11f8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    11fa:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    11fc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1200:	mov	r0, r3
    1202:	bl	10ec <usb_serial_write>
}
    1206:	add	sp, #12
    1208:	ldr.w	pc, [sp], #4

0000120c <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    120c:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    120e:	ldr	r5, [pc, #56]	; (1248 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1210:	ldr	r4, [pc, #56]	; (124c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1212:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1214:	movs	r3, #1
    1216:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1218:	cbz	r0, 1226 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    121a:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    121c:	movs	r3, #0
    121e:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1220:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1224:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1226:	ldr	r3, [pc, #40]	; (1250 <usb_serial_write_buffer_free+0x44>)
    1228:	ldrb	r3, [r3, #0]
    122a:	cbnz	r3, 1232 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    122c:	movs	r0, #0
    122e:	strb	r0, [r4, #0]
			return 0;
    1230:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1232:	movs	r0, #3
    1234:	bl	1f54 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1238:	cmp	r0, #7
    123a:	bhi.n	122c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    123c:	bl	1e8c <usb_malloc>
    1240:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1242:	cmp	r0, #0
    1244:	bne.n	121a <usb_serial_write_buffer_free+0xe>
    1246:	b.n	122c <usb_serial_write_buffer_free+0x20>
    1248:	.word	0x1fff15b8
    124c:	.word	0x1fff15b5
    1250:	.word	0x1fff1720

00001254 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1254:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1256:	ldr	r3, [pc, #68]	; (129c <usb_serial_flush_output+0x48>)
    1258:	ldrb	r3, [r3, #0]
    125a:	cbz	r3, 1280 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    125c:	ldr	r6, [pc, #64]	; (12a0 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    125e:	ldr	r5, [pc, #68]	; (12a4 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1260:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1262:	movs	r7, #1
    1264:	strb	r7, [r5, #0]
	if (tx_packet) {
    1266:	cbz	r4, 1282 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1268:	ldr	r2, [pc, #60]	; (12a8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    126a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    126c:	movs	r7, #0
    126e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1270:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1272:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1274:	movs	r0, #3
    1276:	bl	2068 <usb_tx>
		tx_packet = NULL;
    127a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    127c:	movs	r3, #0
    127e:	strb	r3, [r5, #0]
    1280:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1282:	bl	1e8c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1286:	ldr	r3, [pc, #32]	; (12a8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1288:	cbz	r0, 1296 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    128a:	mov	r1, r0
    128c:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    128e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1290:	bl	2068 <usb_tx>
    1294:	b.n	127c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1296:	strb	r7, [r3, #0]
    1298:	b.n	127c <usb_serial_flush_output+0x28>
    129a:	nop
    129c:	.word	0x1fff1720
    12a0:	.word	0x1fff15b8
    12a4:	.word	0x1fff15b5
    12a8:	.word	0x1fff15b4

000012ac <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    12ac:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    12ae:	ldr	r3, [pc, #56]	; (12e8 <usb_serial_flush_callback+0x3c>)
    12b0:	ldrb	r3, [r3, #0]
    12b2:	cbnz	r3, 12d2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    12b4:	ldr	r4, [pc, #52]	; (12ec <usb_serial_flush_callback+0x40>)
    12b6:	ldr	r1, [r4, #0]
    12b8:	cbz	r1, 12d4 <usb_serial_flush_callback+0x28>
    12ba:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    12be:	ldrh	r3, [r1, #2]
    12c0:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    12c2:	movs	r0, #3
    12c4:	bl	2068 <usb_tx>
		tx_packet = NULL;
    12c8:	str	r5, [r4, #0]
    12ca:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    12cc:	ldr	r3, [pc, #32]	; (12f0 <usb_serial_flush_callback+0x44>)
    12ce:	movs	r2, #1
    12d0:	strb	r2, [r3, #0]
    12d2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    12d4:	bl	1e8c <usb_malloc>
		if (tx) {
    12d8:	cmp	r0, #0
    12da:	beq.n	12cc <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    12dc:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    12de:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    12e2:	movs	r0, #3
    12e4:	b.w	2068 <usb_tx>
    12e8:	.word	0x1fff15b5
    12ec:	.word	0x1fff15b8
    12f0:	.word	0x1fff15b4

000012f4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    12f4:	ldr	r2, [pc, #220]	; (13d4 <wait_for_cal+0xe0>)
    12f6:	ldr	r1, [pc, #224]	; (13d8 <wait_for_cal+0xe4>)
    12f8:	ldr	r3, [r2, #0]
    12fa:	lsls	r3, r3, #24
    12fc:	bmi.n	12f8 <wait_for_cal+0x4>
    12fe:	ldr	r3, [r1, #0]
    1300:	ands.w	r3, r3, #128	; 0x80
    1304:	bne.n	12f8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1306:	cpsid	i
	if (calibrating) {
    1308:	ldr	r1, [pc, #208]	; (13dc <wait_for_cal+0xe8>)
    130a:	ldrb	r2, [r1, #0]
    130c:	cmp	r2, #0
    130e:	beq.n	13d0 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1310:	ldr	r2, [pc, #204]	; (13e0 <wait_for_cal+0xec>)
    1312:	ldr	r0, [pc, #208]	; (13e4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1314:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1316:	ldr	r4, [pc, #208]	; (13e8 <wait_for_cal+0xf4>)
    1318:	ldr	r7, [r2, #0]
    131a:	ldr	r6, [r0, #0]
    131c:	ldr	r5, [r4, #0]
    131e:	ldr	r4, [r2, #12]
    1320:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1322:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1324:	adds	r2, #20
    1326:	ldr	r0, [r0, #0]
    1328:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    132a:	ldr	r7, [pc, #192]	; (13ec <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    132c:	add	r5, r6
    132e:	add	r4, r5
    1330:	add	r0, r4
    1332:	add	r2, r0
    1334:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1338:	ldr	r6, [pc, #180]	; (13f0 <wait_for_cal+0xfc>)
    133a:	ldr	r0, [pc, #184]	; (13f4 <wait_for_cal+0x100>)
    133c:	ldr	r5, [pc, #184]	; (13f8 <wait_for_cal+0x104>)
    133e:	ldr	r4, [pc, #188]	; (13fc <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1340:	orr.w	r2, r2, #32768	; 0x8000
    1344:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1346:	ldr	r7, [r6, #0]
    1348:	ldr	r6, [r0, #0]
    134a:	ldr	r5, [r5, #0]
    134c:	ldr	r2, [pc, #176]	; (1400 <wait_for_cal+0x10c>)
    134e:	ldr	r4, [r4, #0]
    1350:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1352:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1354:	ldr	r0, [r0, #0]
    1356:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1358:	ldr	r7, [pc, #168]	; (1404 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    135a:	add	r5, r6
    135c:	add	r4, r5
    135e:	add	r0, r4
    1360:	add	r2, r0
    1362:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1366:	ldr	r6, [pc, #160]	; (1408 <wait_for_cal+0x114>)
    1368:	ldr	r0, [pc, #160]	; (140c <wait_for_cal+0x118>)
    136a:	ldr	r5, [pc, #164]	; (1410 <wait_for_cal+0x11c>)
    136c:	ldr	r4, [pc, #164]	; (1414 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    136e:	orr.w	r2, r2, #32768	; 0x8000
    1372:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1374:	ldr	r7, [r6, #0]
    1376:	ldr	r6, [r0, #0]
    1378:	ldr	r5, [r5, #0]
    137a:	ldr	r2, [pc, #156]	; (1418 <wait_for_cal+0x124>)
    137c:	ldr	r4, [r4, #0]
    137e:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1380:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1382:	ldr	r0, [r0, #0]
    1384:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1386:	ldr	r7, [pc, #148]	; (141c <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1388:	add	r5, r6
    138a:	add	r4, r5
    138c:	add	r0, r4
    138e:	add	r2, r0
    1390:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1394:	ldr	r6, [pc, #136]	; (1420 <wait_for_cal+0x12c>)
    1396:	ldr	r0, [pc, #140]	; (1424 <wait_for_cal+0x130>)
    1398:	ldr	r5, [pc, #140]	; (1428 <wait_for_cal+0x134>)
    139a:	ldr	r4, [pc, #144]	; (142c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    139c:	orr.w	r2, r2, #32768	; 0x8000
    13a0:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    13a2:	ldr	r7, [r6, #0]
    13a4:	ldr	r6, [r0, #0]
    13a6:	ldr	r5, [r5, #0]
    13a8:	ldr	r2, [pc, #132]	; (1430 <wait_for_cal+0x13c>)
    13aa:	ldr	r4, [r4, #0]
    13ac:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    13ae:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    13b0:	ldr	r0, [r0, #0]
    13b2:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    13b4:	add	r5, r6
    13b6:	add	r4, r5
    13b8:	add	r0, r4
    13ba:	add	r2, r0
    13bc:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    13c0:	ldr	r0, [pc, #112]	; (1434 <wait_for_cal+0x140>)
    13c2:	orr.w	r2, r2, #32768	; 0x8000
    13c6:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    13c8:	strb	r3, [r1, #0]
	}
	__enable_irq();
    13ca:	cpsie	i
}
    13cc:	pop	{r4, r5, r6, r7}
    13ce:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    13d0:	cpsie	i
    13d2:	bx	lr
    13d4:	.word	0x4003b024
    13d8:	.word	0x400bb024
    13dc:	.word	0x1fff15c6
    13e0:	.word	0x4003b038
    13e4:	.word	0x4003b03c
    13e8:	.word	0x4003b040
    13ec:	.word	0x4003b02c
    13f0:	.word	0x4003b058
    13f4:	.word	0x4003b05c
    13f8:	.word	0x4003b060
    13fc:	.word	0x4003b064
    1400:	.word	0x4003b06c
    1404:	.word	0x4003b030
    1408:	.word	0x400bb038
    140c:	.word	0x400bb03c
    1410:	.word	0x400bb040
    1414:	.word	0x400bb044
    1418:	.word	0x400bb04c
    141c:	.word	0x400bb02c
    1420:	.word	0x400bb058
    1424:	.word	0x400bb05c
    1428:	.word	0x400bb060
    142c:	.word	0x400bb064
    1430:	.word	0x400bb06c
    1434:	.word	0x400bb030

00001438 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1438:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    143a:	ldr	r0, [pc, #164]	; (14e0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    143c:	ldr	r2, [pc, #164]	; (14e4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    143e:	ldr	r3, [pc, #168]	; (14e8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1440:	ldr	r5, [pc, #168]	; (14ec <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1442:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1444:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1446:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1448:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    144a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    144c:	ldr	r4, [pc, #160]	; (14f0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    144e:	cmp	r3, #8
    1450:	beq.n	14b4 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1452:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1454:	ldr	r0, [pc, #156]	; (14f4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1456:	ldr	r1, [pc, #160]	; (14f8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1458:	beq.n	14ca <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    145a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    145c:	ite	eq
    145e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1460:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1462:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1464:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1466:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1468:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    146a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    146c:	ldr	r3, [pc, #140]	; (14fc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    146e:	ldr	r1, [pc, #144]	; (1500 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1470:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1472:	ldr	r2, [pc, #144]	; (1504 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1474:	cbz	r3, 14a6 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1476:	movs	r3, #1
    1478:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    147a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    147c:	ldr	r3, [pc, #136]	; (1508 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    147e:	ldr	r1, [pc, #140]	; (150c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1480:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1482:	ldr	r2, [pc, #140]	; (1510 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1484:	cmp	r3, #1
    1486:	bls.n	14d6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1488:	cmp	r3, #4
    148a:	bls.n	14ac <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    148c:	cmp	r3, #8
    148e:	bls.n	14ce <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1490:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1492:	ite	ls
    1494:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1496:	movhi	r3, #135	; 0x87
    1498:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    149a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    149c:	ldr	r3, [pc, #116]	; (1514 <analog_init+0xdc>)
    149e:	movs	r2, #1
    14a0:	strb	r2, [r3, #0]
}
    14a2:	pop	{r4, r5}
    14a4:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    14a6:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    14a8:	str	r3, [r2, #0]
    14aa:	b.n	147c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    14ac:	movs	r3, #132	; 0x84
    14ae:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    14b0:	str	r3, [r2, #0]
    14b2:	b.n	149c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    14b4:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    14b8:	ldr	r1, [pc, #60]	; (14f8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    14ba:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    14bc:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    14be:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    14c0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    14c2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    14c4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    14c6:	str	r3, [r1, #0]
    14c8:	b.n	146c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    14ca:	movs	r2, #57	; 0x39
    14cc:	b.n	14be <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    14ce:	movs	r3, #133	; 0x85
    14d0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    14d2:	str	r3, [r2, #0]
    14d4:	b.n	149c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    14d6:	movs	r3, #128	; 0x80
    14d8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    14da:	str	r3, [r2, #0]
    14dc:	b.n	149c <analog_init+0x64>
    14de:	nop
    14e0:	.word	0x40074000
    14e4:	.word	0x40074001
    14e8:	.word	0x1fff0c40
    14ec:	.word	0x4003b008
    14f0:	.word	0x4003b00c
    14f4:	.word	0x400bb008
    14f8:	.word	0x400bb00c
    14fc:	.word	0x1fff15c9
    1500:	.word	0x4003b020
    1504:	.word	0x400bb020
    1508:	.word	0x1fff0c41
    150c:	.word	0x4003b024
    1510:	.word	0x400bb024
    1514:	.word	0x1fff15c6

00001518 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1518:	cmp	r0, #71	; 0x47
    151a:	bhi.n	157c <analogRead+0x64>
	channel = pin2sc1a[pin];
    151c:	ldr	r3, [pc, #204]	; (15ec <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    151e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1522:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1524:	cmp	r6, #255	; 0xff
    1526:	beq.n	1580 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1528:	ldr	r3, [pc, #196]	; (15f0 <analogRead+0xd8>)
    152a:	ldrb	r3, [r3, #0]
    152c:	cmp	r3, #0
    152e:	bne.n	1586 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1530:	lsls	r2, r6, #24
    1532:	bmi.n	158e <analogRead+0x76>
#endif

	__disable_irq();
    1534:	cpsid	i
    1536:	ldr	r5, [pc, #188]	; (15f4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1538:	ldr	r4, [pc, #188]	; (15f8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    153a:	mov	r7, r5
    153c:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    153e:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1540:	strb	r3, [r5, #0]
	__enable_irq();
    1542:	cpsie	i
	while (1) {
		__disable_irq();
    1544:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1546:	ldr	r3, [r4, #0]
    1548:	lsls	r3, r3, #24
    154a:	bmi.n	1566 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    154c:	ldrb	r3, [r7, #0]
    154e:	cbnz	r3, 1558 <analogRead+0x40>
    1550:	b.n	153c <analogRead+0x24>
    1552:	ldrb	r3, [r5, #0]
    1554:	cmp	r3, #0
    1556:	beq.n	153c <analogRead+0x24>
		__enable_irq();
    1558:	cpsie	i
		yield();
    155a:	bl	2b6c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    155e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1560:	ldr	r3, [r4, #0]
    1562:	lsls	r0, r3, #24
    1564:	bpl.n	1552 <analogRead+0x3a>
			result = ADC0_RA;
    1566:	ldr	r3, [pc, #148]	; (15fc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1568:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    156a:	movs	r2, #0
    156c:	strb	r2, [r5, #0]
			__enable_irq();
    156e:	cpsie	i
			result >>= analog_right_shift;
    1570:	ldr	r2, [pc, #140]	; (1600 <analogRead+0xe8>)
    1572:	ldrb	r0, [r2, #0]
    1574:	asr.w	r0, r3, r0
			return result;
    1578:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    157c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    157e:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1580:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1582:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1586:	bl	12f4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    158a:	lsls	r2, r6, #24
    158c:	bpl.n	1534 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    158e:	cpsid	i
    1590:	ldr	r5, [pc, #112]	; (1604 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1592:	ldr.w	r8, [pc, #124]	; 1610 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    1596:	ldr	r4, [pc, #112]	; (1608 <analogRead+0xf0>)
    1598:	and.w	r7, r6, #64	; 0x40
    159c:	uxtb	r7, r7
    159e:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    15a2:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    15a6:	cbz	r7, 15e0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    15a8:	bic.w	r3, r3, #16
    15ac:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    15b0:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    15b2:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    15b4:	ldr	r2, [pc, #76]	; (1604 <analogRead+0xec>)
    15b6:	strb	r3, [r5, #0]
	__enable_irq();
    15b8:	cpsie	i
	while (1) {
		__disable_irq();
    15ba:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    15bc:	ldr	r3, [r4, #0]
    15be:	lsls	r1, r3, #24
    15c0:	bmi.n	15dc <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    15c2:	ldrb	r3, [r2, #0]
    15c4:	cbnz	r3, 15ce <analogRead+0xb6>
    15c6:	b.n	15a2 <analogRead+0x8a>
    15c8:	ldrb	r3, [r5, #0]
    15ca:	cmp	r3, #0
    15cc:	beq.n	15a2 <analogRead+0x8a>
		__enable_irq();
    15ce:	cpsie	i
		yield();
    15d0:	bl	2b6c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    15d4:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    15d6:	ldr	r3, [r4, #0]
    15d8:	lsls	r3, r3, #24
    15da:	bpl.n	15c8 <analogRead+0xb0>
			result = ADC1_RA;
    15dc:	ldr	r3, [pc, #44]	; (160c <analogRead+0xf4>)
    15de:	b.n	1568 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    15e0:	orr.w	r3, r3, #16
    15e4:	str.w	r3, [r8]
    15e8:	b.n	15b0 <analogRead+0x98>
    15ea:	nop
    15ec:	.word	0x00004178
    15f0:	.word	0x1fff15c6
    15f4:	.word	0x1fff15c8
    15f8:	.word	0x4003b000
    15fc:	.word	0x4003b010
    1600:	.word	0x1fff15c5
    1604:	.word	0x1fff15c7
    1608:	.word	0x400bb000
    160c:	.word	0x400bb010
    1610:	.word	0x400bb00c

00001614 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1614:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1616:	ldr	r3, [pc, #68]	; (165c <digitalWrite.part.1+0x48>)
    1618:	ldr.w	r2, [r3, r0, lsl #3]
    161c:	ldrb.w	r4, [r2, #640]	; 0x280
    1620:	cbz	r4, 1630 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1622:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1624:	cbz	r1, 1646 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1626:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    162a:	ldr.w	r4, [sp], #4
    162e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1630:	add.w	r3, r3, r0, lsl #3
    1634:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1636:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1638:	cbnz	r1, 1650 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    163a:	bic.w	r2, r2, #2
    163e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1640:	ldr.w	r4, [sp], #4
    1644:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1646:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    164a:	ldr.w	r4, [sp], #4
    164e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1650:	orr.w	r2, r2, #3
    1654:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1656:	ldr.w	r4, [sp], #4
    165a:	bx	lr
    165c:	.word	0x000041c0

00001660 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1660:	ldr	r2, [pc, #112]	; (16d4 <pinMode.part.2+0x74>)
    1662:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1666:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1668:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    166a:	beq.n	1690 <pinMode.part.2+0x30>
    166c:	cmp	r1, #4
    166e:	beq.n	16a8 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1670:	ldr.w	r0, [r2, r0, lsl #3]
    1674:	movs	r2, #0
    1676:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    167a:	cbz	r1, 1688 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    167c:	cmp	r1, #2
    167e:	beq.n	16c2 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1680:	cmp	r1, #3
    1682:	beq.n	16ca <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1684:	str	r2, [r3, #0]
    1686:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1688:	mov.w	r2, #256	; 0x100
    168c:	str	r2, [r3, #0]
    168e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1690:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1694:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1698:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    169c:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    169e:	ldr	r2, [r3, #0]
    16a0:	bic.w	r2, r2, #32
    16a4:	str	r2, [r3, #0]
    16a6:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    16a8:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    16ac:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    16b0:	movs	r0, #1
    16b2:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    16b6:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    16b8:	ldr	r2, [r3, #0]
    16ba:	orr.w	r2, r2, #32
    16be:	str	r2, [r3, #0]
    16c0:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    16c2:	movw	r2, #259	; 0x103
    16c6:	str	r2, [r3, #0]
    16c8:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    16ca:	mov.w	r2, #258	; 0x102
    16ce:	str	r2, [r3, #0]
    16d0:	bx	lr
    16d2:	nop
    16d4:	.word	0x000041c0

000016d8 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    16d8:	push	{r4, r5}
	RTC_SR = 0;
    16da:	ldr	r3, [pc, #20]	; (16f0 <rtc_set+0x18>)
	RTC_TPR = 0;
    16dc:	ldr	r5, [pc, #20]	; (16f4 <rtc_set+0x1c>)
	RTC_TSR = t;
    16de:	ldr	r4, [pc, #24]	; (16f8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    16e0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    16e2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    16e4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    16e6:	str	r2, [r5, #0]
	RTC_TSR = t;
    16e8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    16ea:	str	r1, [r3, #0]
}
    16ec:	pop	{r4, r5}
    16ee:	bx	lr
    16f0:	.word	0x4003d014
    16f4:	.word	0x4003d004
    16f8:	.word	0x4003d000

000016fc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    16fc:	cmp	r0, #63	; 0x3f
    16fe:	bhi.n	1704 <digitalWrite+0x8>
    1700:	b.w	1614 <digitalWrite.part.1>
    1704:	bx	lr
    1706:	nop

00001708 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1708:	cmp	r0, #63	; 0x3f
    170a:	bhi.n	171a <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    170c:	ldr	r3, [pc, #16]	; (1720 <digitalRead+0x18>)
    170e:	ldr.w	r3, [r3, r0, lsl #3]
    1712:	ldrb.w	r0, [r3, #512]	; 0x200
    1716:	uxtb	r0, r0
    1718:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    171a:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    171c:	bx	lr
    171e:	nop
    1720:	.word	0x000041c0

00001724 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1724:	cmp	r0, #63	; 0x3f
    1726:	bhi.n	172c <pinMode+0x8>
    1728:	b.w	1660 <pinMode.part.2>
    172c:	bx	lr
    172e:	nop

00001730 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1730:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1734:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1736:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1738:	ldr	r7, [pc, #136]	; (17c4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    173a:	ldr	r3, [pc, #140]	; (17c8 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    173c:	ldr	r2, [pc, #140]	; (17cc <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    173e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1740:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1742:	ldr	r2, [r2, #0]
	__enable_irq();
    1744:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1746:	lsls	r2, r2, #5
    1748:	bpl.n	1750 <delay+0x20>
    174a:	cmp	r3, #50	; 0x32
    174c:	it	hi
    174e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1750:	cbz	r5, 17c0 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1752:	rsb	r3, r3, #179200	; 0x2bc00
    1756:	addw	r3, r3, #799	; 0x31f
    175a:	ldr	r6, [pc, #116]	; (17d0 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    175c:	ldr.w	r9, [pc, #104]	; 17c8 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1760:	ldr.w	r8, [pc, #104]	; 17cc <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1764:	lsrs	r3, r3, #2
    1766:	mov.w	r2, #1000	; 0x3e8
    176a:	umull	r1, r3, r6, r3
    176e:	mul.w	r4, r2, r4
    1772:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1776:	cpsid	i
	current = SYST_CVR;
    1778:	ldr.w	r1, [r9]
	count = systick_millis_count;
    177c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    177e:	ldr.w	lr, [r8]
	__enable_irq();
    1782:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1784:	rsb	r3, r1, #179200	; 0x2bc00
    1788:	addw	r3, r3, #799	; 0x31f
    178c:	lsrs	r3, r3, #2
    178e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1792:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1796:	rsb	r3, r4, r3, lsr #2
    179a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    179e:	beq.n	17a6 <delay+0x76>
    17a0:	cmp	r1, #50	; 0x32
    17a2:	it	hi
    17a4:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    17a6:	mla	r3, r0, r2, r3
    17aa:	cmp.w	r3, #1000	; 0x3e8
    17ae:	bcc.n	17ba <delay+0x8a>
				ms--;
				if (ms == 0) return;
    17b0:	subs	r5, #1
    17b2:	beq.n	17c0 <delay+0x90>
				start += 1000;
    17b4:	add.w	r4, r4, #1000	; 0x3e8
    17b8:	b.n	1776 <delay+0x46>
			}
			yield();
    17ba:	bl	2b6c <yield>
		}
    17be:	b.n	1776 <delay+0x46>
    17c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    17c4:	.word	0x1fff15cc
    17c8:	.word	0xe000e018
    17cc:	.word	0xe000ed04
    17d0:	.word	0x16c16c17

000017d4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    17d4:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    17d6:	ldr	r3, [pc, #312]	; (1910 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    17d8:	ldr	r0, [pc, #312]	; (1914 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    17da:	ldr.w	ip, [pc, #348]	; 1938 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    17de:	ldr	r4, [pc, #312]	; (1918 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    17e0:	ldr	r1, [pc, #312]	; (191c <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    17e2:	ldr.w	lr, [pc, #344]	; 193c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    17e6:	ldr	r6, [pc, #312]	; (1920 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    17e8:	ldr	r5, [pc, #312]	; (1924 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    17ea:	ldr	r7, [pc, #316]	; (1928 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    17ec:	mov.w	r2, #134217728	; 0x8000000
    17f0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    17f2:	mov.w	r2, #268435456	; 0x10000000
    17f6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    17f8:	mov.w	r2, #536870912	; 0x20000000
    17fc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    17fe:	mov.w	r2, #1073741824	; 0x40000000
    1802:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1804:	mov.w	r2, #2147483648	; 0x80000000
    1808:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    180a:	movs	r2, #0
    180c:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    180e:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1810:	movw	r0, #61439	; 0xefff
    1814:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1818:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    181c:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    181e:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    1822:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1824:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1826:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1828:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    182c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    182e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    1832:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1834:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1838:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    183a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    183e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1842:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    1846:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    184a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    184e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1850:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1854:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1856:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1858:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    185a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    185e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    1860:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    1862:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1864:	ldr	r4, [pc, #196]	; (192c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    1866:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    1868:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    186a:	movs	r1, #9
    186c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    186e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    1872:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1876:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    1878:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    187a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    187c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    187e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    1880:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1882:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1886:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    188a:	add.w	r7, r7, #520192	; 0x7f000
    188e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1890:	addw	r4, r4, #2044	; 0x7fc
    1894:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    1896:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    1898:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    189a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    189c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    18a0:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    18a2:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    18a6:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    18aa:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    18ac:	sub.w	r4, r4, #460800	; 0x70800
    18b0:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    18b4:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    18b6:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    18b8:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    18bc:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    18be:	ldr	r0, [pc, #112]	; (1930 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    18c0:	orr.w	r1, r1, #512	; 0x200
    18c4:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    18c6:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    18c8:	ldr	r4, [pc, #104]	; (1934 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    18ca:	add.w	lr, lr, #65280	; 0xff00
    18ce:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    18d2:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    18d6:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    18da:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    18de:	orr.w	r1, r1, #33554432	; 0x2000000
    18e2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    18e4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    18e8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    18ec:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    18ee:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    18f0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    18f2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    18f4:	str	r2, [r4, #0]
#endif
	analog_init();
    18f6:	bl	1438 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    18fa:	movs	r0, #25
    18fc:	bl	1730 <delay>
	usb_init();
    1900:	bl	2a9c <usb_init>
	delay(275);
    1904:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    1908:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    190c:	b.w	1730 <delay>
    1910:	.word	0xe000e104
    1914:	.word	0x40038004
    1918:	.word	0x40038014
    191c:	.word	0x4003801c
    1920:	.word	0x40038024
    1924:	.word	0x4003802c
    1928:	.word	0x40038034
    192c:	.word	0x40038000
    1930:	.word	0x40048004
    1934:	.word	0x400c9000
    1938:	.word	0x40038008
    193c:	.word	0x4003800c

00001940 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1940:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1942:	ldr	r3, [pc, #56]	; (197c <sysex_byte+0x3c>)
    1944:	ldr	r4, [pc, #56]	; (1980 <sysex_byte+0x40>)
    1946:	ldr	r3, [r3, #0]
    1948:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    194a:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    194c:	cbz	r3, 1972 <sysex_byte+0x32>
    194e:	cmp.w	r1, #290	; 0x122
    1952:	bcs.n	1960 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1954:	ldr	r2, [pc, #44]	; (1984 <sysex_byte+0x44>)
    1956:	adds	r3, r1, #1
    1958:	strb	r5, [r2, r1]
    195a:	uxth	r3, r3
    195c:	strh	r3, [r4, #0]
	}
}
    195e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1960:	movs	r2, #0
    1962:	ldr	r0, [pc, #32]	; (1984 <sysex_byte+0x44>)
    1964:	blx	r3
    1966:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1968:	ldr	r2, [pc, #24]	; (1984 <sysex_byte+0x44>)
    196a:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    196c:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    196e:	strh	r3, [r4, #0]
	}
}
    1970:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    1972:	cmp.w	r1, #290	; 0x122
    1976:	bcc.n	1954 <sysex_byte+0x14>
    1978:	pop	{r3, r4, r5, pc}
    197a:	nop
    197c:	.word	0x1fff15f4
    1980:	.word	0x1fff1a8a
    1984:	.word	0x1fff1a90

00001988 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1988:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    198c:	ldr	r6, [pc, #132]	; (1a14 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    198e:	ldr	r7, [pc, #136]	; (1a18 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    1990:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1992:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1994:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1996:	strb	r3, [r7, #0]
	if (!tx_packet) {
    1998:	cbz	r1, 19c8 <usb_midi_write_packed+0x40>
    199a:	ldr	r5, [pc, #128]	; (1a1c <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    199c:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    199e:	add.w	r2, r1, r3, lsl #2
    19a2:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    19a4:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    19a6:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    19a8:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    19ac:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    19ae:	bhi.n	19ba <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    19b0:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    19b2:	movs	r3, #0
    19b4:	strb	r3, [r7, #0]
    19b6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    19ba:	movs	r3, #64	; 0x40
    19bc:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    19be:	movs	r0, #4
    19c0:	bl	2068 <usb_tx>
		tx_packet = NULL;
    19c4:	str	r4, [r6, #0]
    19c6:	b.n	19b2 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    19c8:	ldr.w	r9, [pc, #84]	; 1a20 <usb_midi_write_packed+0x98>
    19cc:	ldrb.w	r3, [r9]
    19d0:	cmp	r3, #0
    19d2:	beq.n	19b6 <usb_midi_write_packed+0x2e>
    19d4:	ldr	r5, [pc, #68]	; (1a1c <usb_midi_write_packed+0x94>)
    19d6:	movw	r4, #48001	; 0xbb81
    19da:	b.n	19ee <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    19dc:	subs	r4, #1
    19de:	beq.n	1a06 <usb_midi_write_packed+0x7e>
    19e0:	ldrb	r3, [r5, #0]
    19e2:	cbnz	r3, 1a06 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    19e4:	bl	2b6c <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    19e8:	ldrb.w	r3, [r9]
    19ec:	cbz	r3, 1a0e <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    19ee:	movs	r0, #4
    19f0:	bl	1f54 <usb_tx_packet_count>
    19f4:	cmp	r0, #5
    19f6:	bhi.n	19dc <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    19f8:	bl	1e8c <usb_malloc>
    19fc:	mov	r1, r0
    19fe:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    1a00:	cmp	r0, #0
    1a02:	beq.n	19dc <usb_midi_write_packed+0x54>
    1a04:	b.n	199c <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    1a06:	movs	r3, #1
    1a08:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    1a0a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a0e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a12:	nop
    1a14:	.word	0x1fff1610
    1a18:	.word	0x1fff15e4
    1a1c:	.word	0x1fff1614
    1a20:	.word	0x1fff1720

00001a24 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    1a24:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    1a26:	ldr	r3, [pc, #32]	; (1a48 <usb_midi_flush_output+0x24>)
    1a28:	ldrb	r4, [r3, #0]
    1a2a:	cbnz	r4, 1a36 <usb_midi_flush_output+0x12>
    1a2c:	ldr	r5, [pc, #28]	; (1a4c <usb_midi_flush_output+0x28>)
    1a2e:	ldr	r1, [r5, #0]
    1a30:	cbz	r1, 1a36 <usb_midi_flush_output+0x12>
    1a32:	ldrh	r3, [r1, #2]
    1a34:	cbnz	r3, 1a38 <usb_midi_flush_output+0x14>
    1a36:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1a38:	lsls	r3, r3, #2
    1a3a:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1a3c:	movs	r0, #4
    1a3e:	bl	2068 <usb_tx>
		tx_packet = NULL;
    1a42:	str	r4, [r5, #0]
    1a44:	pop	{r3, r4, r5, pc}
    1a46:	nop
    1a48:	.word	0x1fff15e4
    1a4c:	.word	0x1fff1610

00001a50 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1a50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1a54:	ldr	r6, [pc, #692]	; (1d0c <usb_midi_read+0x2bc>)
    1a56:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1a58:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1a5a:	cmp	r3, #0
    1a5c:	beq.w	1b84 <usb_midi_read+0x134>
    1a60:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    1a62:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1a64:	lsrs	r1, r2, #2
    1a66:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    1a6a:	adds	r2, #4
	if (index < rx_packet->len) {
    1a6c:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1a6e:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    1a70:	bcs.n	1af8 <usb_midi_read+0xa8>
		rx_packet->index = index;
    1a72:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    1a74:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1a78:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    1a7c:	ldr	r1, [pc, #656]	; (1d10 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1a7e:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1a82:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    1a86:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1a8a:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1a8c:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    1a90:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1a92:	bls.n	1aca <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1a94:	subs	r3, r6, #2
    1a96:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1a98:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1a9c:	bls.n	1b3c <usb_midi_read+0xec>
    1a9e:	cmp	r6, #5
    1aa0:	beq.n	1b34 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    1aa2:	cmp	r6, #4
    1aa4:	beq.w	1df0 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    1aa8:	subs	r3, r6, #5
    1aaa:	cmp	r3, #2
    1aac:	bls.n	1bae <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    1aae:	cmp	r6, #15
    1ab0:	bne.n	1ad0 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    1ab2:	cmp	r0, #247	; 0xf7
    1ab4:	bhi.n	1b3c <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    1ab6:	cmp	r0, #240	; 0xf0
    1ab8:	beq.n	1ac0 <usb_midi_read+0x70>
    1aba:	ldr	r3, [pc, #600]	; (1d14 <usb_midi_read+0x2c4>)
    1abc:	ldrh	r3, [r3, #0]
    1abe:	cbz	r3, 1ad0 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    1ac0:	bl	1940 <sysex_byte>
		}
	}
	return 0;
    1ac4:	movs	r0, #0
    1ac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    1aca:	cbz	r7, 1ad6 <usb_midi_read+0x86>
    1acc:	cmp	r5, r7
    1ace:	beq.n	1ad6 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    1ad0:	movs	r0, #0
    1ad2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1ad6:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    1ad8:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1adc:	beq.w	1bee <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1ae0:	cmp	r6, #9
    1ae2:	beq.n	1b08 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    1ae4:	cmp	r6, #10
    1ae6:	bne.w	1c12 <usb_midi_read+0x1c2>
    1aea:	cmp	r3, #10
    1aec:	bne.n	1ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    1aee:	ldr	r3, [pc, #552]	; (1d18 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1af0:	ldr	r2, [pc, #552]	; (1d1c <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    1af2:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1af4:	movs	r1, #160	; 0xa0
    1af6:	b.n	1bfc <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    1af8:	mov	r0, r3
    1afa:	bl	1ecc <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1afe:	movs	r0, #5
    1b00:	bl	1f18 <usb_rx>
    1b04:	str	r0, [r6, #0]
    1b06:	b.n	1a74 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1b08:	cmp	r3, #9
    1b0a:	bne.n	1ad0 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    1b0c:	lsrs	r7, r4, #24
    1b0e:	beq.w	1e08 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1b12:	ldr	r3, [pc, #524]	; (1d20 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1b14:	ldr	r2, [pc, #516]	; (1d1c <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    1b16:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1b18:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1b1a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1b1e:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1b20:	uxtb	r5, r5
    1b22:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1b24:	cmp	r3, #0
    1b26:	beq.w	1c64 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1b2a:	mov	r2, r4
    1b2c:	mov	r1, r6
    1b2e:	mov	r0, r5
    1b30:	blx	r3
    1b32:	b.n	1c64 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1b34:	cmp	r0, #240	; 0xf0
    1b36:	bls.n	1bc0 <usb_midi_read+0x170>
    1b38:	cmp	r0, #247	; 0xf7
    1b3a:	beq.n	1bc0 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    1b3c:	subs	r0, #241	; 0xf1
    1b3e:	cmp	r0, #14
    1b40:	bhi.n	1ad0 <usb_midi_read+0x80>
    1b42:	add	r3, pc, #4	; (adr r3, 1b48 <usb_midi_read+0xf8>)
    1b44:	ldr.w	pc, [r3, r0, lsl #2]
    1b48:	.word	0x00001cff
    1b4c:	.word	0x00001ce3
    1b50:	.word	0x00001cd1
    1b54:	.word	0x00001ad1
    1b58:	.word	0x00001ad1
    1b5c:	.word	0x00001cc3
    1b60:	.word	0x00001ad1
    1b64:	.word	0x00001da3
    1b68:	.word	0x00001ad1
    1b6c:	.word	0x00001d6d
    1b70:	.word	0x00001d87
    1b74:	.word	0x00001cab
    1b78:	.word	0x00001ad1
    1b7c:	.word	0x00001c93
    1b80:	.word	0x00001c77
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    1b84:	ldr	r3, [pc, #412]	; (1d24 <usb_midi_read+0x2d4>)
    1b86:	ldrb	r3, [r3, #0]
    1b88:	cmp	r3, #0
    1b8a:	beq.n	1ad0 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1b8c:	movs	r0, #5
    1b8e:	bl	1f18 <usb_rx>
    1b92:	mov	r3, r0
    1b94:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    1b96:	cmp	r0, #0
    1b98:	beq.n	1ad0 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    1b9a:	ldrh	r5, [r0, #0]
    1b9c:	cmp	r5, #0
    1b9e:	bne.w	1a62 <usb_midi_read+0x12>
			usb_free(rx_packet);
    1ba2:	bl	1ecc <usb_free>
			rx_packet = NULL;
    1ba6:	str	r5, [r6, #0]
			return 0;
    1ba8:	mov	r0, r5
    1baa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    1bae:	bl	1940 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    1bb2:	ubfx	r0, r4, #16, #8
    1bb6:	bl	1940 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    1bba:	cmp	r6, #7
    1bbc:	bne.n	1bc4 <usb_midi_read+0x174>
    1bbe:	lsrs	r0, r4, #24
    1bc0:	bl	1940 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    1bc4:	ldr	r3, [pc, #332]	; (1d14 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1bc6:	ldr	r2, [pc, #352]	; (1d28 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    1bc8:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    1bca:	ldr	r0, [pc, #352]	; (1d2c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1bcc:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1bce:	ldr	r5, [pc, #352]	; (1d30 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1bd0:	ldr	r2, [pc, #328]	; (1d1c <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    1bd2:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1bd4:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1bd6:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1bd8:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1bda:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1bdc:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1bde:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    1be0:	cbz	r4, 1c26 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    1be2:	movs	r2, #1
    1be4:	ldr	r0, [pc, #332]	; (1d34 <usb_midi_read+0x2e4>)
    1be6:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1be8:	movs	r0, #1
    1bea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1bee:	cmp	r3, #8
    1bf0:	bne.w	1ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    1bf4:	ldr	r3, [pc, #320]	; (1d38 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1bf6:	ldr	r2, [pc, #292]	; (1d1c <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    1bf8:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1bfa:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1bfc:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1c00:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1c02:	uxtb	r5, r5
    1c04:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1c06:	cbz	r3, 1c64 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1c08:	mov	r0, r5
    1c0a:	mov	r2, r4
    1c0c:	mov	r1, r6
    1c0e:	blx	r3
    1c10:	b.n	1c64 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    1c12:	cmp	r6, #11
    1c14:	bne.n	1c3a <usb_midi_read+0x1ea>
    1c16:	cmp	r3, #11
    1c18:	bne.w	1ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1c1c:	ldr	r3, [pc, #284]	; (1d3c <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1c1e:	ldr	r2, [pc, #252]	; (1d1c <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    1c20:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1c22:	movs	r1, #176	; 0xb0
    1c24:	b.n	1bfc <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    1c26:	ldr	r3, [pc, #280]	; (1d40 <usb_midi_read+0x2f0>)
    1c28:	ldr	r3, [r3, #0]
    1c2a:	cmp	r3, #0
    1c2c:	beq.w	1e26 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    1c30:	ldr	r0, [pc, #256]	; (1d34 <usb_midi_read+0x2e4>)
    1c32:	blx	r3
		}
		return 1;
    1c34:	movs	r0, #1
    1c36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    1c3a:	cmp	r6, #12
    1c3c:	bne.w	1e40 <usb_midi_read+0x3f0>
    1c40:	cmp	r3, #12
    1c42:	bne.w	1ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1c46:	ldr	r3, [pc, #252]	; (1d44 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1c48:	ldr	r2, [pc, #208]	; (1d1c <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    1c4a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1c4c:	movs	r1, #192	; 0xc0
    1c4e:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    1c50:	uxtb	r5, r5
    1c52:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1c56:	cmp	r3, #0
    1c58:	beq.w	1dec <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1c5c:	mov	r0, r5
    1c5e:	mov	r1, r6
    1c60:	lsrs	r4, r4, #24
    1c62:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1c64:	ldr	r1, [pc, #224]	; (1d48 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    1c66:	ldr	r2, [pc, #196]	; (1d2c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    1c68:	ldr	r3, [pc, #196]	; (1d30 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1c6a:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    1c6c:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    1c6e:	strb	r4, [r3, #0]
		return 1;
    1c70:	movs	r0, #1
    1c72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    1c76:	ldr	r3, [pc, #212]	; (1d4c <usb_midi_read+0x2fc>)
    1c78:	ldr	r3, [r3, #0]
    1c7a:	cmp	r3, #0
    1c7c:	beq.w	1e2c <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    1c80:	blx	r3
    1c82:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    1c86:	ldr	r3, [pc, #148]	; (1d1c <usb_midi_read+0x2cc>)
    1c88:	uxtb	r5, r5
    1c8a:	lsrs	r4, r4, #24
    1c8c:	strb.w	r8, [r3]
		goto return_message;
    1c90:	b.n	1c64 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    1c92:	ldr	r3, [pc, #188]	; (1d50 <usb_midi_read+0x300>)
    1c94:	ldr	r3, [r3, #0]
    1c96:	cmp	r3, #0
    1c98:	bne.n	1c80 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    1c9a:	ldr	r3, [pc, #184]	; (1d54 <usb_midi_read+0x304>)
    1c9c:	ldr	r3, [r3, #0]
    1c9e:	cbz	r3, 1cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    1ca0:	movs	r0, #254	; 0xfe
    1ca2:	blx	r3
    1ca4:	ubfx	r6, r4, #16, #8
    1ca8:	b.n	1c86 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    1caa:	ldr	r3, [pc, #172]	; (1d58 <usb_midi_read+0x308>)
    1cac:	ldr	r3, [r3, #0]
    1cae:	cmp	r3, #0
    1cb0:	bne.n	1c80 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    1cb2:	ldr	r3, [pc, #160]	; (1d54 <usb_midi_read+0x304>)
    1cb4:	ldr	r3, [r3, #0]
    1cb6:	cbz	r3, 1cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    1cb8:	movs	r0, #252	; 0xfc
    1cba:	blx	r3
    1cbc:	ubfx	r6, r4, #16, #8
    1cc0:	b.n	1c86 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    1cc2:	ldr	r3, [pc, #152]	; (1d5c <usb_midi_read+0x30c>)
    1cc4:	ldr	r3, [r3, #0]
    1cc6:	cmp	r3, #0
    1cc8:	bne.n	1c80 <usb_midi_read+0x230>
    1cca:	ubfx	r6, r4, #16, #8
    1cce:	b.n	1c86 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1cd0:	ldr	r3, [pc, #140]	; (1d60 <usb_midi_read+0x310>)
    1cd2:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    1cd4:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1cd8:	cmp	r3, #0
    1cda:	beq.n	1c86 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    1cdc:	mov	r0, r6
    1cde:	blx	r3
    1ce0:	b.n	1c86 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    1ce2:	ldr	r3, [pc, #128]	; (1d64 <usb_midi_read+0x314>)
    1ce4:	ldr	r2, [r3, #0]
    1ce6:	cmp	r2, #0
    1ce8:	beq.n	1cca <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    1cea:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    1cec:	lsrs	r3, r4, #17
    1cee:	and.w	r0, r6, #127	; 0x7f
    1cf2:	and.w	r3, r3, #16256	; 0x3f80
    1cf6:	orrs	r0, r3
    1cf8:	uxtb	r6, r6
    1cfa:	blx	r2
    1cfc:	b.n	1c86 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1cfe:	ldr	r3, [pc, #104]	; (1d68 <usb_midi_read+0x318>)
    1d00:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    1d02:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1d06:	cmp	r3, #0
    1d08:	bne.n	1cdc <usb_midi_read+0x28c>
    1d0a:	b.n	1c86 <usb_midi_read+0x236>
    1d0c:	.word	0x1fff161c
    1d10:	.word	0x1fff1a8e
    1d14:	.word	0x1fff1a8a
    1d18:	.word	0x1fff15f8
    1d1c:	.word	0x1fff1a88
    1d20:	.word	0x1fff162c
    1d24:	.word	0x1fff1720
    1d28:	.word	0x1fff15f4
    1d2c:	.word	0x1fff1a8c
    1d30:	.word	0x1fff1a8d
    1d34:	.word	0x1fff1a90
    1d38:	.word	0x1fff1624
    1d3c:	.word	0x1fff1628
    1d40:	.word	0x1fff160c
    1d44:	.word	0x1fff15e8
    1d48:	.word	0x1fff1a8f
    1d4c:	.word	0x1fff15d4
    1d50:	.word	0x1fff15d8
    1d54:	.word	0x1fff15dc
    1d58:	.word	0x1fff1618
    1d5c:	.word	0x1fff1608
    1d60:	.word	0x1fff1620
    1d64:	.word	0x1fff15f0
    1d68:	.word	0x1fff1604
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    1d6c:	ldr	r3, [pc, #252]	; (1e6c <usb_midi_read+0x41c>)
    1d6e:	ldr	r3, [r3, #0]
    1d70:	cmp	r3, #0
    1d72:	bne.n	1c80 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    1d74:	ldr	r3, [pc, #248]	; (1e70 <usb_midi_read+0x420>)
    1d76:	ldr	r3, [r3, #0]
    1d78:	cmp	r3, #0
    1d7a:	beq.n	1cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    1d7c:	movs	r0, #250	; 0xfa
    1d7e:	blx	r3
    1d80:	ubfx	r6, r4, #16, #8
    1d84:	b.n	1c86 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    1d86:	ldr	r3, [pc, #236]	; (1e74 <usb_midi_read+0x424>)
    1d88:	ldr	r3, [r3, #0]
    1d8a:	cmp	r3, #0
    1d8c:	bne.w	1c80 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    1d90:	ldr	r3, [pc, #220]	; (1e70 <usb_midi_read+0x420>)
    1d92:	ldr	r3, [r3, #0]
    1d94:	cmp	r3, #0
    1d96:	beq.n	1cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    1d98:	movs	r0, #251	; 0xfb
    1d9a:	blx	r3
    1d9c:	ubfx	r6, r4, #16, #8
    1da0:	b.n	1c86 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    1da2:	ldr	r3, [pc, #212]	; (1e78 <usb_midi_read+0x428>)
    1da4:	ldr	r3, [r3, #0]
    1da6:	cmp	r3, #0
    1da8:	bne.w	1c80 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    1dac:	ldr	r3, [pc, #192]	; (1e70 <usb_midi_read+0x420>)
    1dae:	ldr	r3, [r3, #0]
    1db0:	cmp	r3, #0
    1db2:	beq.n	1cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    1db4:	movs	r0, #248	; 0xf8
    1db6:	blx	r3
    1db8:	ubfx	r6, r4, #16, #8
    1dbc:	b.n	1c86 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    1dbe:	cmp	r3, #14
    1dc0:	bne.w	1ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    1dc4:	ldr	r2, [pc, #180]	; (1e7c <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1dc6:	ldr	r3, [pc, #184]	; (1e80 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    1dc8:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1dca:	movs	r1, #224	; 0xe0
    1dcc:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    1dce:	cmp	r2, #0
    1dd0:	beq.n	1e62 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    1dd2:	lsrs	r6, r4, #16
    1dd4:	lsrs	r1, r4, #17
    1dd6:	and.w	r3, r6, #127	; 0x7f
    1dda:	and.w	r1, r1, #16256	; 0x3f80
    1dde:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    1de0:	uxtb	r5, r5
    1de2:	sub.w	r1, r1, #8192	; 0x2000
    1de6:	mov	r0, r5
    1de8:	blx	r2
    1dea:	uxtb	r6, r6
    1dec:	lsrs	r4, r4, #24
    1dee:	b.n	1c64 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    1df0:	bl	1940 <sysex_byte>
		sysex_byte(n >> 16);
    1df4:	ubfx	r0, r4, #16, #8
    1df8:	bl	1940 <sysex_byte>
		sysex_byte(n >> 24);
    1dfc:	lsrs	r0, r4, #24
    1dfe:	bl	1940 <sysex_byte>
		return 0;
    1e02:	movs	r0, #0
    1e04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1e08:	ldr	r3, [pc, #120]	; (1e84 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1e0a:	ldr	r2, [pc, #116]	; (1e80 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    1e0c:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1e0e:	movs	r1, #128	; 0x80
    1e10:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1e12:	uxtb	r5, r5
    1e14:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1e18:	cbz	r3, 1e3c <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1e1a:	mov	r1, r6
    1e1c:	mov	r0, r5
    1e1e:	mov	r2, r7
    1e20:	blx	r3
    1e22:	mov	r4, r7
    1e24:	b.n	1c64 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1e26:	movs	r0, #1
    1e28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    1e2c:	ldr	r3, [pc, #64]	; (1e70 <usb_midi_read+0x420>)
    1e2e:	ldr	r3, [r3, #0]
    1e30:	cmp	r3, #0
    1e32:	beq.w	1cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    1e36:	movs	r0, #255	; 0xff
    1e38:	blx	r3
    1e3a:	b.n	1cca <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1e3c:	mov	r4, r3
    1e3e:	b.n	1c64 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    1e40:	cmp	r6, #13
    1e42:	bne.n	1dbe <usb_midi_read+0x36e>
    1e44:	cmp	r3, #13
    1e46:	bne.w	1ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1e4a:	ldr	r3, [pc, #60]	; (1e88 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1e4c:	ldr	r2, [pc, #48]	; (1e80 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    1e4e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1e50:	movs	r1, #208	; 0xd0
    1e52:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1e54:	uxtb	r5, r5
    1e56:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1e5a:	cmp	r3, #0
    1e5c:	bne.w	1c5c <usb_midi_read+0x20c>
    1e60:	b.n	1dec <usb_midi_read+0x39c>
    1e62:	ubfx	r6, r4, #16, #8
    1e66:	uxtb	r5, r5
    1e68:	lsrs	r4, r4, #24
    1e6a:	b.n	1c64 <usb_midi_read+0x214>
    1e6c:	.word	0x1fff1600
    1e70:	.word	0x1fff15dc
    1e74:	.word	0x1fff15e0
    1e78:	.word	0x1fff15d0
    1e7c:	.word	0x1fff15ec
    1e80:	.word	0x1fff1a88
    1e84:	.word	0x1fff1624
    1e88:	.word	0x1fff15fc

00001e8c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1e8c:	cpsid	i
	avail = usb_buffer_available;
    1e8e:	ldr	r0, [pc, #52]	; (1ec4 <usb_malloc+0x38>)
    1e90:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1e92:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    1e96:	cmp	r3, #29
    1e98:	bgt.n	1ebc <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    1e9a:	mov.w	r1, #2147483648	; 0x80000000
    1e9e:	lsrs	r1, r3
    1ea0:	bic.w	r2, r2, r1
    1ea4:	str	r2, [r0, #0]
	__enable_irq();
    1ea6:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1ea8:	ldr	r0, [pc, #28]	; (1ec8 <usb_malloc+0x3c>)
    1eaa:	add.w	r3, r3, r3, lsl #3
    1eae:	lsls	r3, r3, #3
    1eb0:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1eb2:	movs	r1, #0
    1eb4:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    1eb6:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    1eb8:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    1eba:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    1ebc:	cpsie	i
		return NULL;
    1ebe:	movs	r0, #0
    1ec0:	bx	lr
    1ec2:	nop
    1ec4:	.word	0x1fff0c44
    1ec8:	.word	0x1fff03d0

00001ecc <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1ecc:	ldr	r3, [pc, #52]	; (1f04 <usb_free+0x38>)
    1ece:	ldr	r2, [pc, #56]	; (1f08 <usb_free+0x3c>)
    1ed0:	subs	r3, r0, r3
    1ed2:	umull	r2, r3, r2, r3
    1ed6:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    1ed8:	cmp	r3, #29
    1eda:	bhi.n	1ef6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1edc:	ldr	r2, [pc, #44]	; (1f0c <usb_free+0x40>)
    1ede:	ldrb	r2, [r2, #0]
    1ee0:	cbnz	r2, 1ef8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1ee2:	cpsid	i
	usb_buffer_available |= mask;
    1ee4:	ldr	r0, [pc, #40]	; (1f10 <usb_free+0x44>)
    1ee6:	mov.w	r1, #2147483648	; 0x80000000
    1eea:	ldr	r2, [r0, #0]
    1eec:	lsr.w	r3, r1, r3
    1ef0:	orrs	r2, r3
    1ef2:	str	r2, [r0, #0]
	__enable_irq();
    1ef4:	cpsie	i
    1ef6:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1ef8:	ldr	r2, [pc, #24]	; (1f14 <usb_free+0x48>)
    1efa:	ldrb	r2, [r2, #0]
    1efc:	cmp	r2, #0
    1efe:	beq.n	1ee2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    1f00:	b.w	1f80 <usb_rx_memory>
    1f04:	.word	0x1fff03d0
    1f08:	.word	0x38e38e39
    1f0c:	.word	0x1fff1715
    1f10:	.word	0x1fff0c44
    1f14:	.word	0x1fff1720

00001f18 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    1f18:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1f1a:	cmp	r3, #4
    1f1c:	bhi.n	1f48 <usb_rx+0x30>
	__disable_irq();
    1f1e:	cpsid	i
	ret = rx_first[endpoint];
    1f20:	ldr	r1, [pc, #40]	; (1f4c <usb_rx+0x34>)
    1f22:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    1f26:	cbz	r0, 1f44 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    1f28:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1f2a:	ldr	r4, [pc, #36]	; (1f50 <usb_rx+0x38>)
    1f2c:	ldrh	r5, [r0, #0]
    1f2e:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    1f32:	ldr	r6, [r0, #4]
    1f34:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1f38:	subs	r2, r2, r5
    1f3a:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    1f3e:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1f40:	pop	{r4, r5, r6}
    1f42:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    1f44:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1f46:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1f48:	movs	r0, #0
    1f4a:	bx	lr
    1f4c:	.word	0x1fff168c
    1f50:	.word	0x1fff1bb4

00001f54 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    1f54:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1f56:	cmp	r0, #4
    1f58:	bhi.n	1f72 <usb_tx_packet_count+0x1e>
	__disable_irq();
    1f5a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    1f5c:	ldr	r3, [pc, #28]	; (1f7c <usb_tx_packet_count+0x28>)
    1f5e:	ldr.w	r3, [r3, r0, lsl #2]
    1f62:	cbz	r3, 1f76 <usb_tx_packet_count+0x22>
    1f64:	movs	r0, #0
    1f66:	ldr	r3, [r3, #4]
    1f68:	adds	r0, #1
    1f6a:	cmp	r3, #0
    1f6c:	bne.n	1f66 <usb_tx_packet_count+0x12>
	__enable_irq();
    1f6e:	cpsie	i
	return count;
    1f70:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1f72:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    1f74:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    1f76:	mov	r0, r3
    1f78:	b.n	1f6e <usb_tx_packet_count+0x1a>
    1f7a:	nop
    1f7c:	.word	0x1fff16e4

00001f80 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    1f80:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    1f82:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1f84:	ldr	r2, [pc, #204]	; (2054 <usb_rx_memory+0xd4>)
    1f86:	ldrb	r3, [r2, #0]
    1f88:	lsls	r3, r3, #28
    1f8a:	bpl.n	1f9a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1f8c:	ldr	r3, [pc, #200]	; (2058 <usb_rx_memory+0xd8>)
    1f8e:	ldr	r1, [r3, #32]
    1f90:	cmp	r1, #0
    1f92:	beq.n	201c <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1f94:	ldr	r1, [r3, #40]	; 0x28
    1f96:	cmp	r1, #0
    1f98:	beq.n	2038 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1f9a:	ldrb	r3, [r2, #1]
    1f9c:	lsls	r5, r3, #28
    1f9e:	bpl.n	1fae <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1fa0:	ldr	r3, [pc, #180]	; (2058 <usb_rx_memory+0xd8>)
    1fa2:	ldr	r1, [r3, #64]	; 0x40
    1fa4:	cmp	r1, #0
    1fa6:	beq.n	2044 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1fa8:	ldr	r1, [r3, #72]	; 0x48
    1faa:	cmp	r1, #0
    1fac:	beq.n	203c <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1fae:	ldrb	r3, [r2, #2]
    1fb0:	lsls	r4, r3, #28
    1fb2:	bpl.n	1fc2 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1fb4:	ldr	r3, [pc, #160]	; (2058 <usb_rx_memory+0xd8>)
    1fb6:	ldr	r1, [r3, #96]	; 0x60
    1fb8:	cmp	r1, #0
    1fba:	beq.n	2048 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1fbc:	ldr	r1, [r3, #104]	; 0x68
    1fbe:	cmp	r1, #0
    1fc0:	beq.n	2040 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1fc2:	ldrb	r3, [r2, #3]
    1fc4:	lsls	r1, r3, #28
    1fc6:	bpl.n	1fd8 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1fc8:	ldr	r3, [pc, #140]	; (2058 <usb_rx_memory+0xd8>)
    1fca:	ldr.w	r1, [r3, #128]	; 0x80
    1fce:	cmp	r1, #0
    1fd0:	beq.n	2050 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1fd2:	ldr.w	r1, [r3, #136]	; 0x88
    1fd6:	cbz	r1, 1ffe <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1fd8:	ldrb	r3, [r2, #4]
    1fda:	lsls	r3, r3, #28
    1fdc:	bpl.n	1ff0 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1fde:	ldr	r3, [pc, #120]	; (2058 <usb_rx_memory+0xd8>)
    1fe0:	ldr.w	r2, [r3, #160]	; 0xa0
    1fe4:	cmp	r2, #0
    1fe6:	beq.n	204c <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1fe8:	ldr.w	r2, [r3, #168]	; 0xa8
    1fec:	movs	r4, #21
    1fee:	cbz	r2, 2000 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    1ff0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    1ff2:	ldr	r3, [pc, #104]	; (205c <usb_rx_memory+0xdc>)
    1ff4:	movs	r2, #0
    1ff6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    1ff8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    1ffa:	b.w	1ecc <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ffe:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2000:	ldr	r1, [pc, #88]	; (205c <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2002:	ldr	r5, [pc, #92]	; (2060 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2004:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2006:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    200a:	add.w	r3, r3, r4, lsl #3
    200e:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2010:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2012:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2014:	strb	r2, [r1, #0]
				__enable_irq();
    2016:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2018:	pop	{r4, r5}
    201a:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    201c:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    201e:	ldr	r4, [pc, #60]	; (205c <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2020:	ldr	r5, [pc, #64]	; (2064 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2022:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2024:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2028:	add.w	r3, r3, r2, lsl #3
    202c:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    202e:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2030:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2032:	strb	r2, [r4, #0]
				__enable_irq();
    2034:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2036:	b.n	2018 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2038:	movs	r4, #5
    203a:	b.n	2000 <usb_rx_memory+0x80>
    203c:	movs	r4, #9
    203e:	b.n	2000 <usb_rx_memory+0x80>
    2040:	movs	r4, #13
    2042:	b.n	2000 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2044:	movs	r2, #8
    2046:	b.n	201e <usb_rx_memory+0x9e>
    2048:	movs	r2, #12
    204a:	b.n	201e <usb_rx_memory+0x9e>
    204c:	movs	r2, #20
    204e:	b.n	201e <usb_rx_memory+0x9e>
    2050:	movs	r2, #16
    2052:	b.n	201e <usb_rx_memory+0x9e>
    2054:	.word	0x000043ec
    2058:	.word	0x1fff0000
    205c:	.word	0x1fff1715
    2060:	.word	0x004000c8
    2064:	.word	0x00400088

00002068 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2068:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    206a:	cmp	r3, #4
    206c:	bhi.n	20aa <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    206e:	ldr	r2, [pc, #108]	; (20dc <usb_tx+0x74>)
    2070:	lsls	r0, r0, #5
    2072:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2076:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2078:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    207a:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    207c:	ldr	r4, [pc, #96]	; (20e0 <usb_tx+0x78>)
    207e:	ldrb	r2, [r4, r3]
    2080:	cmp	r2, #3
    2082:	bhi.n	20bc <usb_tx+0x54>
    2084:	tbb	[pc, r2]
    2088:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    208c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    208e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2090:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2092:	tst.w	r0, #8
    2096:	ite	ne
    2098:	movne	r3, #200	; 0xc8
    209a:	moveq	r3, #136	; 0x88
    209c:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    20a0:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    20a2:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    20a4:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    20a6:	cpsie	i
}
    20a8:	pop	{r4, r5}
    20aa:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    20ac:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    20ae:	movs	r2, #2
		break;
    20b0:	b.n	208e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    20b2:	movs	r2, #5
    20b4:	b.n	208e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    20b6:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    20b8:	movs	r2, #4
		break;
    20ba:	b.n	208e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    20bc:	ldr	r2, [pc, #36]	; (20e4 <usb_tx+0x7c>)
    20be:	ldr.w	r0, [r2, r3, lsl #2]
    20c2:	cbz	r0, 20d4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    20c4:	ldr	r2, [pc, #32]	; (20e8 <usb_tx+0x80>)
    20c6:	ldr.w	r0, [r2, r3, lsl #2]
    20ca:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    20cc:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    20d0:	cpsie	i
		return;
    20d2:	b.n	20a8 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    20d4:	str.w	r1, [r2, r3, lsl #2]
    20d8:	ldr	r2, [pc, #12]	; (20e8 <usb_tx+0x80>)
    20da:	b.n	20cc <usb_tx+0x64>
    20dc:	.word	0x1fff0000
    20e0:	.word	0x1fff1724
    20e4:	.word	0x1fff16e4
    20e8:	.word	0x1fff16f8

000020ec <usb_isr>:
}



void usb_isr(void)
{
    20ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    20f0:	ldr.w	fp, [pc, #776]	; 23fc <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    20f4:	ldr.w	sl, [pc, #776]	; 2400 <usb_isr+0x314>
}



void usb_isr(void)
{
    20f8:	sub	sp, #28
    20fa:	b.n	2186 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    20fc:	ldr	r7, [pc, #680]	; (23a8 <usb_isr+0x2bc>)
    20fe:	mov.w	r8, r3, lsr #2
    2102:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2106:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2108:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    210c:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2110:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2112:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2116:	and.w	r4, r3, #255	; 0xff
    211a:	cmp	r3, #0
    211c:	bne.w	2320 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2120:	ldr.w	r3, [r7, r8, lsl #3]
    2124:	lsrs	r3, r3, #16
    2126:	uxth	r1, r3
    2128:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    212c:	cmp	r3, #0
    212e:	beq.w	230e <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2132:	ldr	r3, [pc, #632]	; (23ac <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2134:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2138:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    213c:	ldr.w	r2, [r3, r6, lsl #2]
    2140:	cmp	r2, #0
    2142:	beq.w	25b0 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2146:	ldr	r5, [pc, #616]	; (23b0 <usb_isr+0x2c4>)
    2148:	ldr.w	r3, [r5, r6, lsl #2]
    214c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    214e:	ldr	r4, [pc, #612]	; (23b4 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2150:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2154:	ldrh.w	r3, [r4, r6, lsl #1]
    2158:	add	r1, r3
    215a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    215e:	bl	1e8c <usb_malloc>
					if (packet) {
    2162:	cmp	r0, #0
    2164:	beq.w	25a2 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2168:	ldr	r2, [pc, #588]	; (23b8 <usb_isr+0x2cc>)
    216a:	ldr	r3, [pc, #592]	; (23bc <usb_isr+0x2d0>)
    216c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2170:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2174:	it	ne
    2176:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2178:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    217c:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2180:	movs	r3, #8
    2182:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2186:	ldrb.w	r4, [fp]
    218a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    218c:	lsls	r0, r4, #29
    218e:	bpl.n	21ca <usb_isr+0xde>
		if (usb_configuration) {
    2190:	ldr	r3, [pc, #556]	; (23c0 <usb_isr+0x2d4>)
    2192:	ldrb	r3, [r3, #0]
    2194:	cbz	r3, 21c4 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2196:	ldr	r1, [pc, #556]	; (23c4 <usb_isr+0x2d8>)
    2198:	ldrb	r2, [r1, #0]
			if (t) {
    219a:	and.w	r3, r2, #255	; 0xff
    219e:	cbz	r2, 21aa <usb_isr+0xbe>
				usb_reboot_timer = --t;
    21a0:	subs	r3, #1
    21a2:	uxtb	r3, r3
    21a4:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    21a6:	cbnz	r3, 21aa <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    21a8:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    21aa:	ldr	r1, [pc, #540]	; (23c8 <usb_isr+0x2dc>)
    21ac:	ldrb	r2, [r1, #0]
			if (t) {
    21ae:	and.w	r3, r2, #255	; 0xff
    21b2:	cbz	r2, 21c0 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    21b4:	subs	r3, #1
    21b6:	uxtb	r3, r3
    21b8:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    21ba:	cmp	r3, #0
    21bc:	beq.w	254e <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    21c0:	bl	1a24 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    21c4:	movs	r3, #4
    21c6:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    21ca:	and.w	r3, r4, #8
    21ce:	and.w	r2, r3, #255	; 0xff
    21d2:	cmp	r3, #0
    21d4:	beq.w	2368 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    21d8:	ldrb.w	r3, [sl]
    21dc:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    21de:	lsrs	r6, r3, #4
    21e0:	bne.n	20fc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    21e2:	lsrs	r4, r3, #2
    21e4:	ldr.w	r9, [pc, #448]	; 23a8 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    21e8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    21ec:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    21f0:	ubfx	r2, r2, #2, #4
    21f4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    21f6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    21f8:	cmp	r2, #12
    21fa:	bhi.w	2306 <usb_isr+0x21a>
    21fe:	tbb	[pc, r2]
    2202:	.short	0x7878
    2204:	.word	0x82828282
    2208:	.word	0x82438282
    220c:	.short	0x8282
    220e:	.byte	0x07
    220f:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2210:	ldr	r0, [r1, #0]
    2212:	ldr	r5, [pc, #440]	; (23cc <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2214:	ldr	r3, [pc, #416]	; (23b8 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2216:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2218:	ldr	r7, [pc, #436]	; (23d0 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    221a:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    221e:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2220:	ldr	r6, [pc, #432]	; (23d4 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2222:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2224:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2228:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    222a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    222c:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    222e:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2232:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2234:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2238:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    223c:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    223e:	bhi.w	2404 <usb_isr+0x318>
    2242:	cmp.w	r1, #1664	; 0x680
    2246:	bcs.w	2870 <usb_isr+0x784>
    224a:	cmp.w	r1, #258	; 0x102
    224e:	beq.w	261e <usb_isr+0x532>
    2252:	bhi.w	25e8 <usb_isr+0x4fc>
    2256:	cmp	r1, #128	; 0x80
    2258:	beq.w	28a4 <usb_isr+0x7b8>
    225c:	cmp	r1, #130	; 0x82
    225e:	bne.w	262a <usb_isr+0x53e>
    2262:	ldrh	r1, [r5, #4]
    2264:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2268:	cmp	r1, #5
    226a:	bhi.w	262a <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    226e:	ldr	r3, [pc, #360]	; (23d8 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2270:	ldr	r4, [pc, #360]	; (23dc <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2272:	lsls	r1, r1, #2
    2274:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2276:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2278:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    227a:	ldrb	r2, [r3, #0]
    227c:	lsls	r3, r2, #30
    227e:	bpl.w	29b4 <usb_isr+0x8c8>
    2282:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2284:	movs	r0, #2
    2286:	b.n	26b2 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2288:	ldr	r7, [pc, #324]	; (23d0 <usb_isr+0x2e4>)
    228a:	ldr	r2, [r7, #0]
		if (data) {
    228c:	cbz	r2, 22dc <usb_isr+0x1f0>
			size = ep0_tx_len;
    228e:	ldr	r3, [pc, #336]	; (23e0 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2290:	ldr	r6, [pc, #320]	; (23d4 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2292:	ldr	r1, [pc, #336]	; (23e4 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2294:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2296:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2298:	ldrb	r5, [r1, #0]
    229a:	cmp	r0, #64	; 0x40
    229c:	mov	lr, r0
    229e:	orr.w	r8, r5, #2
    22a2:	it	cs
    22a4:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22a8:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    22aa:	eor.w	r4, r4, #1
    22ae:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    22b0:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22b4:	ite	eq
    22b6:	moveq	r4, #136	; 0x88
    22b8:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22ba:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    22be:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    22c0:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22c4:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22c8:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    22ca:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22cc:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    22d0:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    22d2:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    22d4:	cmp	r0, #0
    22d6:	beq.w	2446 <usb_isr+0x35a>
    22da:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    22dc:	ldr	r3, [pc, #236]	; (23cc <usb_isr+0x2e0>)
    22de:	ldrh	r2, [r3, #0]
    22e0:	cmp.w	r2, #1280	; 0x500
    22e4:	bne.n	2306 <usb_isr+0x21a>
			setup.bRequest = 0;
    22e6:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    22e8:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    22ea:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    22ec:	ldr	r3, [pc, #248]	; (23e8 <usb_isr+0x2fc>)
    22ee:	strb	r2, [r3, #0]
    22f0:	b.n	2306 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    22f2:	ldr	r2, [pc, #216]	; (23cc <usb_isr+0x2e0>)
    22f4:	ldrh	r0, [r2, #0]
    22f6:	movw	r2, #8225	; 0x2021
    22fa:	cmp	r0, r2
    22fc:	beq.w	2450 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2300:	ldr	r2, [pc, #180]	; (23b8 <usb_isr+0x2cc>)
    2302:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2306:	ldr	r2, [pc, #228]	; (23ec <usb_isr+0x300>)
    2308:	movs	r3, #1
    230a:	strb	r3, [r2, #0]
    230c:	b.n	2180 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    230e:	ldr	r2, [pc, #168]	; (23b8 <usb_isr+0x2cc>)
    2310:	ldr	r3, [pc, #168]	; (23bc <usb_isr+0x2d0>)
    2312:	tst.w	r9, #8
    2316:	it	ne
    2318:	movne	r3, r2
    231a:	str.w	r3, [r7, r8, lsl #3]
    231e:	b.n	2180 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2320:	bl	1ecc <usb_free>
				packet = tx_first[endpoint];
    2324:	ldr	r2, [pc, #200]	; (23f0 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2326:	ldr	r1, [pc, #204]	; (23f4 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2328:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    232c:	cmp	r3, #0
    232e:	beq.w	25b8 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2332:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2334:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2336:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    233a:	add.w	r2, r3, #8
    233e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2342:	cmp	r4, #3
    2344:	bhi.n	2352 <usb_isr+0x266>
    2346:	tbb	[pc, r4]
    234a:	.short	0x022c
    234c:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    234e:	movs	r2, #2
    2350:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2352:	ldrh	r2, [r3, #0]
    2354:	tst.w	r9, #8
    2358:	ite	eq
    235a:	moveq	r3, #136	; 0x88
    235c:	movne	r3, #200	; 0xc8
    235e:	orr.w	r3, r3, r2, lsl #16
    2362:	str.w	r3, [r7, r8, lsl #3]
    2366:	b.n	2180 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2368:	lsls	r0, r4, #31
    236a:	bmi.w	2554 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    236e:	lsls	r1, r4, #24
    2370:	bmi.w	25d4 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2374:	lsls	r2, r4, #30
    2376:	bpl.n	2386 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2378:	ldr	r2, [pc, #124]	; (23f8 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    237a:	ldr	r1, [pc, #128]	; (23fc <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    237c:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    237e:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2380:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2382:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2384:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2386:	lsls	r3, r4, #27
    2388:	bpl.n	2390 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    238a:	ldr	r3, [pc, #112]	; (23fc <usb_isr+0x310>)
    238c:	movs	r2, #16
    238e:	strb	r2, [r3, #0]
	}

}
    2390:	add	sp, #28
    2392:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2396:	movs	r2, #4
    2398:	strb	r2, [r1, r6]
						break;
    239a:	b.n	2352 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    239c:	movs	r2, #5
    239e:	strb	r2, [r1, r6]
						break;
    23a0:	b.n	2352 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    23a2:	movs	r2, #3
    23a4:	strb	r2, [r1, r6]
						break;
    23a6:	b.n	2352 <usb_isr+0x266>
    23a8:	.word	0x1fff0000
    23ac:	.word	0x1fff168c
    23b0:	.word	0x1fff1634
    23b4:	.word	0x1fff1bb4
    23b8:	.word	0x004000c8
    23bc:	.word	0x00400088
    23c0:	.word	0x1fff1720
    23c4:	.word	0x1fff16a1
    23c8:	.word	0x1fff15b4
    23cc:	.word	0x1fff170c
    23d0:	.word	0x1fff1630
    23d4:	.word	0x1fff16a0
    23d8:	.word	0x400720c0
    23dc:	.word	0x1fff1718
    23e0:	.word	0x1fff1648
    23e4:	.word	0x1fff1714
    23e8:	.word	0x40072098
    23ec:	.word	0x40072094
    23f0:	.word	0x1fff16e4
    23f4:	.word	0x1fff1724
    23f8:	.word	0x40072088
    23fc:	.word	0x40072080
    2400:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2404:	movw	r4, #8225	; 0x2021
    2408:	cmp	r1, r4
    240a:	beq.w	2546 <usb_isr+0x45a>
    240e:	bhi.n	24a4 <usb_isr+0x3b8>
    2410:	cmp.w	r1, #2176	; 0x880
    2414:	beq.w	26aa <usb_isr+0x5be>
    2418:	cmp.w	r1, #2304	; 0x900
    241c:	bne.w	262a <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2420:	ldr	r2, [pc, #712]	; (26ec <usb_isr+0x600>)
    2422:	ldr	r4, [pc, #716]	; (26f0 <usb_isr+0x604>)
    2424:	ldrb	r1, [r5, #2]
    2426:	strb	r1, [r2, #0]
    2428:	add.w	r5, r4, #160	; 0xa0
    242c:	b.n	2436 <usb_isr+0x34a>
    242e:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2430:	cmp	r5, r4
    2432:	beq.w	2748 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2436:	ldr	r3, [r4, #32]
    2438:	lsls	r1, r3, #24
    243a:	bpl.n	242e <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    243c:	ldr	r0, [r4, #36]	; 0x24
    243e:	subs	r0, #8
    2440:	bl	1ecc <usb_free>
    2444:	b.n	242e <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2446:	cmp.w	lr, #64	; 0x40
    244a:	it	ne
    244c:	movne	r2, #0
    244e:	b.n	22da <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2450:	ldr	r2, [pc, #672]	; (26f4 <usb_isr+0x608>)
    2452:	ldrb	r5, [r1, #0]
    2454:	ldrb	r0, [r1, #1]
    2456:	strb	r5, [r2, #0]
    2458:	strb	r0, [r2, #1]
    245a:	ldrb	r5, [r1, #2]
    245c:	ldrb	r0, [r1, #3]
    245e:	strb	r5, [r2, #2]
    2460:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2462:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2464:	ldrb	r5, [r1, #4]
    2466:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2468:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    246a:	ldrb	r5, [r1, #5]
    246c:	ldrb	r1, [r1, #6]
    246e:	strb	r5, [r2, #5]
    2470:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2472:	beq.w	26a2 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2476:	ldr	r1, [pc, #640]	; (26f8 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2478:	ldr	r6, [pc, #640]	; (26fc <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    247a:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    247c:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    247e:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2482:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2484:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2488:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    248a:	ite	eq
    248c:	moveq	r1, #136	; 0x88
    248e:	movne	r1, #200	; 0xc8
    2490:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2494:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2498:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    249c:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    249e:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    24a0:	str	r1, [r2, #4]
    24a2:	b.n	2300 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    24a4:	movw	r4, #8737	; 0x2221
    24a8:	cmp	r1, r4
    24aa:	bne.w	28be <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    24ae:	ldr.w	ip, [pc, #656]	; 2740 <usb_isr+0x654>
    24b2:	ldr	r3, [pc, #588]	; (2700 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    24b4:	ldr	r1, [pc, #588]	; (2704 <usb_isr+0x618>)
    24b6:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    24b8:	ldr.w	r5, [ip]
    24bc:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    24be:	str	r0, [sp, #4]
    24c0:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    24c2:	movs	r0, #0
    24c4:	str	r0, [sp, #8]
    24c6:	mov	r8, r0
    24c8:	mov	ip, r0
    24ca:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    24cc:	ldr	r1, [pc, #552]	; (26f8 <usb_isr+0x60c>)
    24ce:	ldrb	r5, [r1, #0]
    24d0:	orr.w	lr, r5, #2
    24d4:	add.w	r3, r9, lr, lsl #3
    24d8:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24da:	ldr	r3, [sp, #4]
    24dc:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    24de:	ldr	r3, [sp, #12]
    24e0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24e2:	ite	eq
    24e4:	moveq	r4, #136	; 0x88
    24e6:	movne	r4, #200	; 0xc8
    24e8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    24ec:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24f0:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    24f4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    24f6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24f8:	ldr.w	lr, [pc, #500]	; 26f0 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    24fc:	ldr	r3, [pc, #508]	; (26fc <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    24fe:	ldr.w	r8, [pc, #504]	; 26f8 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2502:	cmp	r0, #0
    2504:	bne.w	2638 <usb_isr+0x54c>
    2508:	cmp.w	ip, #64	; 0x40
    250c:	bne.n	2546 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    250e:	orr.w	ip, r4, #2
    2512:	add.w	r3, r9, ip, lsl #3
    2516:	ldr	r4, [sp, #8]
    2518:	ldr.w	lr, [pc, #468]	; 26f0 <usb_isr+0x604>
    251c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    251e:	cmp	r2, #0
    2520:	bne.w	2664 <usb_isr+0x578>
    2524:	lsls	r2, r0, #16
    2526:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    252a:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    252e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2532:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2534:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2536:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2538:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    253a:	cmp	r0, #64	; 0x40
    253c:	bne.n	2546 <usb_isr+0x45a>
    253e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2540:	ldr	r2, [pc, #452]	; (2708 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2542:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2544:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2546:	ldr	r2, [pc, #452]	; (270c <usb_isr+0x620>)
    2548:	movs	r3, #1
    254a:	strb	r3, [r2, #0]
    254c:	b.n	2306 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    254e:	bl	12ac <usb_serial_flush_callback>
    2552:	b.n	21c0 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2554:	ldr	r3, [pc, #408]	; (26f0 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2556:	ldr	r0, [pc, #436]	; (270c <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2558:	ldr	r1, [pc, #412]	; (26f8 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    255a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    255c:	mov.w	lr, #2
    2560:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2564:	ldr	r7, [pc, #424]	; (2710 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2566:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2568:	ldr	r1, [pc, #424]	; (2714 <usb_isr+0x628>)
    256a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    256c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    256e:	ldr	r6, [pc, #424]	; (2718 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2570:	ldr	r5, [pc, #424]	; (271c <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2572:	ldr	r4, [pc, #428]	; (2720 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2574:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2576:	movs	r1, #13
    2578:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    257a:	movs	r1, #255	; 0xff
    257c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    257e:	ldr.w	lr, [pc, #452]	; 2744 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    2582:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2584:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2586:	ldr	r5, [pc, #412]	; (2724 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2588:	ldr	r2, [pc, #412]	; (2728 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    258a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    258e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2590:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2592:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2596:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2598:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    259a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    259c:	add	sp, #28
    259e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    25a2:	ldr	r2, [pc, #392]	; (272c <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    25a4:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    25a8:	ldrb	r3, [r2, #0]
    25aa:	adds	r3, #1
    25ac:	strb	r3, [r2, #0]
    25ae:	b.n	2180 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    25b0:	str.w	r0, [r3, r6, lsl #2]
    25b4:	ldr	r5, [pc, #376]	; (2730 <usb_isr+0x644>)
    25b6:	b.n	214e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    25b8:	ldrb	r3, [r1, r6]
    25ba:	cmp	r3, #3
    25bc:	bhi.n	2694 <usb_isr+0x5a8>
    25be:	add	r2, pc, #4	; (adr r2, 25c4 <usb_isr+0x4d8>)
    25c0:	ldr.w	pc, [r2, r3, lsl #2]
    25c4:	.word	0x00002181
    25c8:	.word	0x00002181
    25cc:	.word	0x00002619
    25d0:	.word	0x00002613
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    25d4:	ldr	r1, [pc, #312]	; (2710 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    25d6:	ldr	r3, [pc, #324]	; (271c <usb_isr+0x630>)
    25d8:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    25da:	movs	r0, #13
    25dc:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    25de:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    25e0:	lsls	r2, r4, #30
    25e2:	bpl.w	2386 <usb_isr+0x29a>
    25e6:	b.n	2378 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    25e8:	movw	r2, #770	; 0x302
    25ec:	cmp	r1, r2
    25ee:	bne.w	28ae <usb_isr+0x7c2>
    25f2:	ldrh	r1, [r5, #4]
    25f4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    25f8:	cmp	r1, #5
    25fa:	bhi.n	262a <usb_isr+0x53e>
    25fc:	ldrh	r2, [r5, #2]
    25fe:	cbnz	r2, 262a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    2600:	ldr	r4, [pc, #268]	; (2710 <usb_isr+0x624>)
    2602:	str	r0, [sp, #4]
    2604:	lsls	r1, r1, #2
    2606:	add	r4, r1
    2608:	ldrb	r1, [r4, #0]
    260a:	orr.w	r1, r1, #2
    260e:	strb	r1, [r4, #0]
    2610:	b.n	24c2 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2612:	movs	r3, #1
    2614:	strb	r3, [r1, r6]
						break;
    2616:	b.n	2180 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2618:	movs	r3, #0
    261a:	strb	r3, [r1, r6]
						break;
    261c:	b.n	2180 <usb_isr+0x94>
    261e:	ldrh	r1, [r5, #4]
    2620:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2624:	cmp	r1, #5
    2626:	bls.w	28c8 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    262a:	ldr	r2, [pc, #228]	; (2710 <usb_isr+0x624>)
    262c:	movs	r3, #15
    262e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2630:	ldr	r2, [pc, #216]	; (270c <usb_isr+0x620>)
    2632:	movs	r3, #1
    2634:	strb	r3, [r2, #0]
    2636:	b.n	2306 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2638:	cmp	r0, #64	; 0x40
    263a:	bls.w	250e <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    263e:	orr.w	r4, r4, #2
    2642:	add.w	r1, lr, r4, lsl #3
    2646:	ldr	r6, [sp, #8]
    2648:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    264a:	cbz	r2, 267c <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    264c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2650:	ldr	r2, [pc, #224]	; (2734 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    2652:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2654:	mov	r3, r6
    2656:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2658:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    265c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    265e:	str.w	r2, [lr, r4, lsl #3]
    2662:	b.n	2540 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    2664:	ldrb.w	r3, [sp, #4]
    2668:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    266a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    266c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    266e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2670:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2674:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2676:	str.w	r2, [lr, ip, lsl #3]
    267a:	b.n	253a <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    267c:	ldrb.w	r1, [sp, #4]
    2680:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2682:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2684:	ldr	r2, [pc, #140]	; (2714 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2686:	strb.w	r5, [r8]
    268a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    268c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    268e:	str.w	r2, [lr, r4, lsl #3]
    2692:	b.n	2540 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2694:	tst.w	r9, #8
    2698:	ite	eq
    269a:	moveq	r3, #2
    269c:	movne	r3, #3
    269e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    26a0:	b.n	2180 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    26a2:	ldr	r2, [pc, #148]	; (2738 <usb_isr+0x64c>)
    26a4:	movs	r1, #15
    26a6:	strb	r1, [r2, #0]
    26a8:	b.n	2476 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    26aa:	ldr	r2, [pc, #64]	; (26ec <usb_isr+0x600>)
    26ac:	ldr	r4, [pc, #140]	; (273c <usb_isr+0x650>)
    26ae:	ldrb	r2, [r2, #0]
    26b0:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    26b2:	ldrh	r2, [r5, #6]
    26b4:	cmp	r2, r0
    26b6:	bcs.w	2a7c <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    26ba:	ldr	r1, [pc, #60]	; (26f8 <usb_isr+0x60c>)
    26bc:	ldrb	r5, [r1, #0]
    26be:	cmp	r2, #64	; 0x40
    26c0:	mov	ip, r2
    26c2:	orr.w	lr, r5, #2
    26c6:	it	cs
    26c8:	movcs.w	ip, #64	; 0x40
    26cc:	add.w	r3, r4, ip
    26d0:	add.w	r0, r9, lr, lsl #3
    26d4:	str	r3, [sp, #8]
    26d6:	movs	r3, #1
    26d8:	str	r4, [r0, #4]
    26da:	mov.w	r8, ip, lsl #16
    26de:	rsb	r0, ip, r2
    26e2:	str	r3, [sp, #4]
    26e4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    26e6:	movs	r4, #200	; 0xc8
    26e8:	b.n	24e8 <usb_isr+0x3fc>
    26ea:	nop
    26ec:	.word	0x1fff1720
    26f0:	.word	0x1fff0000
    26f4:	.word	0x1fff1a7c
    26f8:	.word	0x1fff1714
    26fc:	.word	0x1fff16a0
    2700:	.word	0x1fff1a84
    2704:	.word	0x1fff15c4
    2708:	.word	0x1fff1648
    270c:	.word	0x40072094
    2710:	.word	0x400720c0
    2714:	.word	0x00400088
    2718:	.word	0x40072088
    271c:	.word	0x40072080
    2720:	.word	0x40072098
    2724:	.word	0x1fff164c
    2728:	.word	0x1fff16a4
    272c:	.word	0x1fff1715
    2730:	.word	0x1fff1634
    2734:	.word	0x004000c8
    2738:	.word	0x1fff16a1
    273c:	.word	0x1fff1718
    2740:	.word	0x1fff15cc
    2744:	.word	0x4007208c
    2748:	ldr	r4, [pc, #704]	; (2a0c <usb_isr+0x920>)
    274a:	ldr	r2, [pc, #708]	; (2a10 <usb_isr+0x924>)
    274c:	ldr	r1, [pc, #708]	; (2a14 <usb_isr+0x928>)
    274e:	ldr	r0, [pc, #712]	; (2a18 <usb_isr+0x92c>)
    2750:	ldr	r5, [pc, #712]	; (2a1c <usb_isr+0x930>)
    2752:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2754:	movs	r3, #0
    2756:	ldr	r4, [pc, #712]	; (2a20 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2758:	str	r4, [sp, #8]
    275a:	str	r6, [sp, #20]
    275c:	str	r5, [sp, #12]
    275e:	mov	r8, r0
    2760:	mov	r4, r3
    2762:	str	r7, [sp, #16]
    2764:	mov	r6, r2
    2766:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2768:	ldr	r0, [r6, #0]
			while (p) {
    276a:	cbz	r0, 2778 <usb_isr+0x68c>
				n = p->next;
    276c:	ldr	r7, [r0, #4]
				usb_free(p);
    276e:	bl	1ecc <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    2772:	mov	r0, r7
    2774:	cmp	r7, #0
    2776:	bne.n	276c <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2778:	movs	r3, #0
    277a:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    277c:	ldr	r3, [sp, #12]
			p = tx_first[i];
    277e:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2780:	mov	r2, r3
    2782:	movs	r3, #0
    2784:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2788:	cbz	r0, 2796 <usb_isr+0x6aa>
				n = p->next;
    278a:	ldr	r7, [r0, #4]
				usb_free(p);
    278c:	bl	1ecc <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2790:	mov	r0, r7
    2792:	cmp	r7, #0
    2794:	bne.n	278a <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2796:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2798:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    279a:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    279c:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    279e:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    27a2:	ldr	r2, [sp, #8]
    27a4:	mov.w	r1, #0
			switch (tx_state[i]) {
    27a8:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    27aa:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    27ae:	cmp	r3, #3
    27b0:	bhi.n	27c2 <usb_isr+0x6d6>
    27b2:	tbb	[pc, r3]
    27b6:	.short	0x0258
    27b8:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    27ba:	ldr	r3, [sp, #4]
    27bc:	mov.w	r2, #1
    27c0:	strb	r2, [r3, #0]
    27c2:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    27c4:	adds	r4, #1
    27c6:	adds	r3, #1
    27c8:	cmp	r4, #5
    27ca:	add.w	r6, r6, #4
    27ce:	add.w	r5, r5, #4
    27d2:	str	r3, [sp, #4]
    27d4:	bne.n	2768 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    27d6:	ldr	r4, [pc, #588]	; (2a24 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    27d8:	ldr	r5, [pc, #588]	; (2a28 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    27da:	ldrb	r2, [r4, #0]
			*reg = epconf;
    27dc:	ldr	r3, [pc, #588]	; (2a2c <usb_isr+0x940>)
    27de:	ldr	r7, [sp, #16]
    27e0:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    27e2:	movs	r1, #0
    27e4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    27e6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    27e8:	lsls	r2, r2, #28
    27ea:	bmi.n	28e2 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    27ec:	ldrb	r2, [r4, #1]
			*reg = epconf;
    27ee:	ldr	r1, [pc, #576]	; (2a30 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    27f0:	ldr.w	r8, [pc, #588]	; 2a40 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    27f4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    27f6:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    27f8:	mov.w	r1, #0
    27fc:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    2800:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2804:	bmi.w	298e <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2808:	ldrb	r2, [r4, #2]
			*reg = epconf;
    280a:	ldr	r1, [pc, #552]	; (2a34 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    280c:	ldr.w	r8, [pc, #560]	; 2a40 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2810:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2812:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2814:	mov.w	r1, #0
    2818:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    281c:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2820:	bmi.w	2966 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2824:	ldr	r1, [pc, #528]	; (2a38 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2826:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2828:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    282a:	movs	r1, #0
    282c:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2830:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2834:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2836:	ldr.w	r8, [pc, #520]	; 2a40 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    283a:	bmi.n	2938 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    283c:	ldrb	r2, [r4, #4]
			*reg = epconf;
    283e:	ldr	r1, [pc, #508]	; (2a3c <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2840:	ldr	r4, [pc, #508]	; (2a40 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2842:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2844:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2846:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2848:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    284c:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2850:	bmi.n	290e <usb_isr+0x822>
    2852:	ldrb	r3, [r6, #0]
    2854:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2856:	movs	r1, #0
    2858:	eor.w	r2, r3, #1
    285c:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    2860:	str.w	r1, [r9, #184]	; 0xb8
    2864:	b.n	24c2 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2866:	ldr	r3, [sp, #4]
    2868:	mov.w	r2, #0
    286c:	strb	r2, [r3, #0]
    286e:	b.n	27c2 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    2870:	ldr	r2, [pc, #464]	; (2a44 <usb_isr+0x958>)
    2872:	ldr	r4, [r2, #4]
    2874:	cmp	r4, #0
    2876:	beq.w	262a <usb_isr+0x53e>
    287a:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    287c:	ldrh.w	lr, [r5, #4]
    2880:	b.n	288c <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    2882:	adds	r2, #12
			if (list->addr == NULL) break;
    2884:	ldr	r4, [r2, #4]
    2886:	cmp	r4, #0
    2888:	beq.w	262a <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    288c:	ldrh	r3, [r2, #0]
    288e:	cmp	r3, r0
    2890:	bne.n	2882 <usb_isr+0x796>
    2892:	ldrh	r3, [r2, #2]
    2894:	cmp	r3, lr
    2896:	bne.n	2882 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    2898:	lsrs	r0, r0, #8
    289a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    289c:	ite	eq
    289e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    28a0:	ldrhne	r0, [r2, #8]
    28a2:	b.n	26b2 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    28a4:	ldr	r4, [pc, #416]	; (2a48 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    28a6:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    28a8:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    28aa:	strb	r2, [r4, #1]
    28ac:	b.n	26b2 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    28ae:	cmp.w	r1, #1280	; 0x500
    28b2:	bne.w	262a <usb_isr+0x53e>
    28b6:	movs	r3, #1
    28b8:	movs	r2, #0
    28ba:	str	r3, [sp, #4]
    28bc:	b.n	24c2 <usb_isr+0x3d6>
    28be:	movw	r2, #8993	; 0x2321
    28c2:	cmp	r1, r2
    28c4:	beq.n	28b6 <usb_isr+0x7ca>
    28c6:	b.n	262a <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    28c8:	ldrh	r2, [r5, #2]
    28ca:	cmp	r2, #0
    28cc:	bne.w	262a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    28d0:	ldr	r4, [pc, #376]	; (2a4c <usb_isr+0x960>)
    28d2:	str	r0, [sp, #4]
    28d4:	lsls	r1, r1, #2
    28d6:	add	r4, r1
    28d8:	ldrb	r1, [r4, #0]
    28da:	bic.w	r1, r1, #2
    28de:	strb	r1, [r4, #0]
    28e0:	b.n	24c2 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    28e2:	bl	1e8c <usb_malloc>
				if (p) {
    28e6:	cmp	r0, #0
    28e8:	beq.w	2a58 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    28ec:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    28ee:	ldr	r2, [pc, #352]	; (2a50 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    28f0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    28f4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    28f8:	bl	1e8c <usb_malloc>
				if (p) {
    28fc:	cmp	r0, #0
    28fe:	beq.n	2a00 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    2900:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2902:	ldr	r2, [pc, #336]	; (2a54 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2904:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2908:	str.w	r2, [r9, #40]	; 0x28
    290c:	b.n	27ec <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    290e:	bl	1e8c <usb_malloc>
				if (p) {
    2912:	cmp	r0, #0
    2914:	beq.n	29c4 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    2916:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2918:	ldr	r2, [pc, #308]	; (2a50 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    291a:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    291e:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2922:	bl	1e8c <usb_malloc>
				if (p) {
    2926:	cmp	r0, #0
    2928:	beq.n	29b8 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    292a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    292c:	ldr	r2, [pc, #292]	; (2a54 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    292e:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2932:	str.w	r2, [r9, #168]	; 0xa8
    2936:	b.n	2852 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2938:	bl	1e8c <usb_malloc>
				if (p) {
    293c:	cmp	r0, #0
    293e:	beq.w	2a70 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    2942:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2944:	ldr	r2, [pc, #264]	; (2a50 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2946:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    294a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    294e:	bl	1e8c <usb_malloc>
				if (p) {
    2952:	cmp	r0, #0
    2954:	beq.w	2a64 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2958:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    295a:	ldr	r2, [pc, #248]	; (2a54 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    295c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2960:	str.w	r2, [r9, #136]	; 0x88
    2964:	b.n	283c <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2966:	bl	1e8c <usb_malloc>
				if (p) {
    296a:	cmp	r0, #0
    296c:	beq.n	29f4 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    296e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2970:	ldr	r2, [pc, #220]	; (2a50 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2972:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2976:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    297a:	bl	1e8c <usb_malloc>
				if (p) {
    297e:	cbz	r0, 29e8 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    2980:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2982:	ldr	r2, [pc, #208]	; (2a54 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2984:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2988:	str.w	r2, [r9, #104]	; 0x68
    298c:	b.n	2824 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    298e:	bl	1e8c <usb_malloc>
				if (p) {
    2992:	cbz	r0, 29dc <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    2994:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2996:	ldr	r2, [pc, #184]	; (2a50 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2998:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    299c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    29a0:	bl	1e8c <usb_malloc>
				if (p) {
    29a4:	cbz	r0, 29d0 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    29a6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    29a8:	ldr	r2, [pc, #168]	; (2a54 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    29aa:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    29ae:	str.w	r2, [r9, #72]	; 0x48
    29b2:	b.n	2808 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    29b4:	movs	r0, #2
    29b6:	b.n	26b2 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    29b8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    29ba:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    29be:	adds	r2, #1
    29c0:	strb	r2, [r5, #0]
    29c2:	b.n	2852 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    29c4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    29c6:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    29ca:	adds	r2, #1
    29cc:	strb	r2, [r5, #0]
    29ce:	b.n	2922 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    29d0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    29d2:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    29d6:	adds	r2, #1
    29d8:	strb	r2, [r5, #0]
    29da:	b.n	2808 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    29dc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    29de:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    29e2:	adds	r2, #1
    29e4:	strb	r2, [r5, #0]
    29e6:	b.n	29a0 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    29e8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    29ea:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    29ee:	adds	r2, #1
    29f0:	strb	r2, [r5, #0]
    29f2:	b.n	2824 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    29f4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    29f6:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    29fa:	adds	r2, #1
    29fc:	strb	r2, [r5, #0]
    29fe:	b.n	297a <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2a00:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2a02:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    2a06:	adds	r2, #1
    2a08:	strb	r2, [r5, #0]
    2a0a:	b.n	27ec <usb_isr+0x700>
    2a0c:	.word	0x1fff1724
    2a10:	.word	0x1fff168c
    2a14:	.word	0x1fff16e4
    2a18:	.word	0x1fff16f8
    2a1c:	.word	0x1fff1634
    2a20:	.word	0x1fff1bb4
    2a24:	.word	0x000043ec
    2a28:	.word	0x1fff1715
    2a2c:	.word	0x400720c4
    2a30:	.word	0x400720c8
    2a34:	.word	0x400720cc
    2a38:	.word	0x400720d0
    2a3c:	.word	0x400720d4
    2a40:	.word	0x1fff0000
    2a44:	.word	0x000043f4
    2a48:	.word	0x1fff1718
    2a4c:	.word	0x400720c0
    2a50:	.word	0x00400088
    2a54:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2a58:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2a5a:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    2a5e:	adds	r2, #1
    2a60:	strb	r2, [r5, #0]
    2a62:	b.n	28f8 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2a64:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2a66:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2a6a:	adds	r2, #1
    2a6c:	strb	r2, [r5, #0]
    2a6e:	b.n	283c <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2a70:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2a72:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    2a76:	adds	r2, #1
    2a78:	strb	r2, [r5, #0]
    2a7a:	b.n	294e <usb_isr+0x862>
    2a7c:	cmp	r0, #64	; 0x40
    2a7e:	mov	ip, r0
    2a80:	it	cs
    2a82:	movcs.w	ip, #64	; 0x40
    2a86:	add.w	r3, r4, ip
    2a8a:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2a8c:	movs	r3, #1
    2a8e:	rsb	r0, ip, r0
    2a92:	mov.w	r8, ip, lsl #16
    2a96:	movs	r2, #0
    2a98:	str	r3, [sp, #4]
    2a9a:	b.n	24cc <usb_isr+0x3e0>

00002a9c <usb_init>:
}



void usb_init(void)
{
    2a9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aa0:	ldr	r4, [pc, #156]	; (2b40 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2aa2:	bl	3370 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2aa6:	movs	r2, #0
    2aa8:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2aac:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2aae:	str	r2, [r3, #0]
		table[i].addr = 0;
    2ab0:	str	r2, [r3, #4]
    2ab2:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2ab4:	cmp	r3, r0
		table[i].desc = 0;
    2ab6:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2aba:	bne.n	2aae <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2abc:	ldr	r0, [pc, #132]	; (2b44 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2abe:	ldr	r2, [pc, #136]	; (2b48 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2ac0:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    2ac2:	ldr.w	lr, [pc, #156]	; 2b60 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2ac6:	ldr	r6, [pc, #132]	; (2b4c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2ac8:	ldr	r5, [pc, #132]	; (2b50 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2aca:	ldr	r7, [pc, #136]	; (2b54 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2acc:	ldr.w	ip, [pc, #148]	; 2b64 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    2ad0:	ldr.w	r8, [pc, #148]	; 2b68 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2ad4:	orr.w	r3, r3, #262144	; 0x40000
    2ad8:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2ada:	ldr	r3, [r2, #0]
    2adc:	orr.w	r3, r3, #50331648	; 0x3000000
    2ae0:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    2ae2:	movs	r3, #3
    2ae4:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2ae8:	movs	r3, #160	; 0xa0
    2aea:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2aec:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2af0:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2af4:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2af8:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2afa:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2afc:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2b00:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2b02:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2b04:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2b06:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2b08:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2b0a:	ldr	r5, [pc, #76]	; (2b58 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2b0c:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2b10:	ldr	r0, [pc, #72]	; (2b5c <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    2b12:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    2b16:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2b18:	movs	r3, #1
    2b1a:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2b1e:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2b22:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2b26:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2b28:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2b2a:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2b2e:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2b30:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2b32:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2b36:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2b3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b3e:	nop
    2b40:	.word	0x1fff0000
    2b44:	.word	0x40048034
    2b48:	.word	0x4000d800
    2b4c:	.word	0x40072140
    2b50:	.word	0x4007209c
    2b54:	.word	0x400720b0
    2b58:	.word	0xe000e435
    2b5c:	.word	0xe000e104
    2b60:	.word	0x40072144
    2b64:	.word	0x40072080
    2b68:	.word	0x40072088

00002b6c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2b6c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2b6e:	ldr	r4, [pc, #176]	; (2c20 <yield+0xb4>)
    2b70:	ldrb	r3, [r4, #0]
    2b72:	cbz	r3, 2b76 <yield+0xa>
    2b74:	pop	{r3, r4, r5, pc}
	running = 1;
    2b76:	movs	r3, #1
    2b78:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2b7a:	bl	1098 <usb_serial_available>
	if (Serial.available()) serialEvent();
    2b7e:	cmp	r0, #0
    2b80:	bne.n	2c08 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    2b82:	bl	3140 <serial_available>
	if (Serial1.available()) serialEvent1();
    2b86:	cmp	r0, #0
    2b88:	bne.n	2c02 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    2b8a:	bl	2e28 <serial2_available>
	if (Serial2.available()) serialEvent2();
    2b8e:	cmp	r0, #0
    2b90:	bne.n	2bfc <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    2b92:	bl	3440 <serial3_available>
	if (Serial3.available()) serialEvent3();
    2b96:	cbnz	r0, 2bf6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    2b98:	bl	2f54 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2b9c:	cbnz	r0, 2bf0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    2b9e:	bl	2d30 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2ba2:	cbnz	r0, 2bea <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    2ba4:	bl	326c <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2ba8:	cbnz	r0, 2be4 <yield+0x78>
#endif
	running = 0;
    2baa:	movs	r3, #0
    2bac:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2bae:	mrs	r3, IPSR
		if (ipsr != 0) return;
    2bb2:	cmp	r3, #0
    2bb4:	bne.n	2b74 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2bb6:	mrs	r1, PRIMASK
		__disable_irq();
    2bba:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2bbc:	ldr	r3, [pc, #100]	; (2c24 <yield+0xb8>)
    2bbe:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2bc0:	cbz	r0, 2c0e <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2bc2:	ldr	r4, [pc, #100]	; (2c28 <yield+0xbc>)
    2bc4:	ldrb	r2, [r4, #0]
    2bc6:	cbnz	r2, 2c0e <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    2bc8:	ldr	r5, [r0, #20]
    2bca:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2bcc:	movs	r3, #1
    2bce:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    2bd0:	cbz	r5, 2c16 <yield+0xaa>
			firstYield->_prev = nullptr;
    2bd2:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2bd4:	cbnz	r1, 2bd8 <yield+0x6c>
    2bd6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2bd8:	movs	r5, #0
    2bda:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2bdc:	ldr	r3, [r0, #8]
    2bde:	blx	r3
		runningFromYield = false;
    2be0:	strb	r5, [r4, #0]
    2be2:	b.n	2b74 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2be4:	bl	2d28 <serialEvent6()>
    2be8:	b.n	2baa <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2bea:	bl	2c30 <serialEvent5()>
    2bee:	b.n	2ba4 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2bf0:	bl	2d14 <serialEvent4()>
    2bf4:	b.n	2b9e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    2bf6:	bl	353c <serialEvent3()>
    2bfa:	b.n	2b98 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    2bfc:	bl	2d10 <serialEvent2()>
    2c00:	b.n	2b92 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    2c02:	bl	3538 <serialEvent1()>
    2c06:	b.n	2b8a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    2c08:	bl	2c5c <serialEvent()>
    2c0c:	b.n	2b82 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2c0e:	cmp	r1, #0
    2c10:	bne.n	2b74 <yield+0x8>
    2c12:	cpsie	i
    2c14:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2c16:	ldr	r3, [pc, #20]	; (2c2c <yield+0xc0>)
    2c18:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2c1a:	cmp	r1, #0
    2c1c:	bne.n	2bd8 <yield+0x6c>
    2c1e:	b.n	2bd6 <yield+0x6a>
    2c20:	.word	0x1fff1729
    2c24:	.word	0x1fff1a3c
    2c28:	.word	0x1fff1a40
    2c2c:	.word	0x1fff1a38

00002c30 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    2c30:	bx	lr
    2c32:	nop

00002c34 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2c34:	b.w	10b4 <usb_serial_flush_input>

00002c38 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2c38:	b.w	1068 <usb_serial_peekchar>

00002c3c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2c3c:	b.w	1020 <usb_serial_getchar>

00002c40 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2c40:	b.w	1098 <usb_serial_available>

00002c44 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2c44:	b.w	1254 <usb_serial_flush_output>

00002c48 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2c48:	b.w	120c <usb_serial_write_buffer_free>

00002c4c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2c4c:	mov	r0, r1
    2c4e:	mov	r1, r2
    2c50:	b.w	10ec <usb_serial_write>

00002c54 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2c54:	mov	r0, r1
    2c56:	b.w	11f4 <usb_serial_putchar>
    2c5a:	nop

00002c5c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2c5c:	bx	lr
    2c5e:	nop

00002c60 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2c60:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    2c62:	ldr	r2, [pc, #24]	; (2c7c <Print::println()+0x1c>)
	return write(buf, 2);
    2c64:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2c66:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    2c68:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2c6a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2c6c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2c6e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    2c72:	movs	r2, #2
    2c74:	blx	r3
}
    2c76:	add	sp, #12
    2c78:	ldr.w	pc, [sp], #4
    2c7c:	.word	0x000043e8

00002c80 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2c80:	push	{r4, r5, r6, r7, lr}
    2c82:	mov	r7, r0
    2c84:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2c86:	cmp	r2, #0
    2c88:	beq.n	2cf2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2c8a:	cmp	r2, #1
    2c8c:	it	eq
    2c8e:	moveq	r2, #10
	}


	if (n == 0) {
    2c90:	cbz	r1, 2ce8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2c92:	movs	r4, #33	; 0x21
    2c94:	b.n	2c98 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2c96:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2c98:	udiv	r5, r1, r2
    2c9c:	mls	r1, r2, r5, r1
    2ca0:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2ca2:	cmp	r1, #9
    2ca4:	add.w	r1, r0, #48	; 0x30
    2ca8:	it	ls
    2caa:	uxtbls	r0, r1
    2cac:	add	r1, sp, #40	; 0x28
    2cae:	it	hi
    2cb0:	addhi	r0, #55	; 0x37
    2cb2:	add	r1, r4
    2cb4:	it	hi
    2cb6:	uxtbhi	r0, r0
    2cb8:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    2cbc:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    2cbe:	mov	r1, r5
    2cc0:	cmp	r5, #0
    2cc2:	bne.n	2c96 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2cc4:	cbz	r3, 2cd4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2cc6:	subs	r4, #1
    2cc8:	uxtb	r4, r4
		buf[i] = '-';
    2cca:	add	r3, sp, #40	; 0x28
    2ccc:	add	r3, r4
    2cce:	movs	r2, #45	; 0x2d
    2cd0:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2cd4:	ldr	r3, [r7, #0]
    2cd6:	add	r2, sp, #4
    2cd8:	adds	r1, r2, r4
    2cda:	ldr	r3, [r3, #4]
    2cdc:	mov	r0, r7
    2cde:	rsb	r2, r4, #34	; 0x22
    2ce2:	blx	r3
}
    2ce4:	add	sp, #44	; 0x2c
    2ce6:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2ce8:	movs	r2, #48	; 0x30
    2cea:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2cee:	movs	r4, #33	; 0x21
    2cf0:	b.n	2cc4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2cf2:	ldr	r3, [r0, #0]
    2cf4:	uxtb	r1, r1
    2cf6:	ldr	r3, [r3, #0]
    2cf8:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2cfa:	add	sp, #44	; 0x2c
    2cfc:	pop	{r4, r5, r6, r7, pc}
    2cfe:	nop

00002d00 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    2d00:	cmp	r1, #0
		sign = '-';
		n = -n;
    2d02:	itte	lt
    2d04:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    2d06:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    2d08:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    2d0a:	movs	r2, #10
    2d0c:	b.w	2c80 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00002d10 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    2d10:	bx	lr
    2d12:	nop

00002d14 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    2d14:	bx	lr
    2d16:	nop

00002d18 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2d18:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2d1a:	bl	8d4 <setup>
	while (1) {
		loop();
    2d1e:	bl	8d8 <loop>
		yield();
    2d22:	bl	2b6c <yield>
    2d26:	b.n	2d1e <main+0x6>

00002d28 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    2d28:	bx	lr
    2d2a:	nop

00002d2c <operator new(unsigned int)>:
    2d2c:	b.w	3790 <malloc>

00002d30 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d30:	ldr	r2, [pc, #20]	; (2d48 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    2d32:	ldr	r3, [pc, #24]	; (2d4c <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d34:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2d36:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d38:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2d3a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2d3c:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    2d3e:	it	cc
    2d40:	addcc	r0, #64	; 0x40
    2d42:	subs	r0, r0, r3
}
    2d44:	bx	lr
    2d46:	nop
    2d48:	.word	0x1fff1730
    2d4c:	.word	0x1fff1731

00002d50 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    2d50:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    2d52:	ldr	r3, [pc, #172]	; (2e00 <uart4_status_isr+0xb0>)
    2d54:	ldrb	r2, [r3, #4]
    2d56:	lsls	r4, r2, #26
    2d58:	bpl.n	2d9a <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2d5a:	ldr	r0, [pc, #168]	; (2e04 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2d5c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2d5e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d60:	ldr	r1, [pc, #164]	; (2e08 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2d62:	adds	r3, #1
    2d64:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d66:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2d68:	it	gt
    2d6a:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d6c:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2d6e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d70:	beq.n	2d7a <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    2d72:	ldr	r4, [pc, #152]	; (2e0c <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    2d74:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2d76:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2d78:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2d7a:	ldr	r2, [pc, #148]	; (2e10 <uart4_status_isr+0xc0>)
    2d7c:	ldr	r1, [r2, #0]
    2d7e:	cbz	r1, 2d9a <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2d80:	ldr	r2, [pc, #144]	; (2e14 <uart4_status_isr+0xc4>)
    2d82:	ldrb	r2, [r2, #0]
    2d84:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2d86:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2d88:	itet	cc
    2d8a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2d8e:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2d90:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2d92:	cmp	r3, #39	; 0x27
    2d94:	itt	gt
    2d96:	movgt	r3, #1
    2d98:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    2d9a:	ldr	r2, [pc, #100]	; (2e00 <uart4_status_isr+0xb0>)
    2d9c:	ldrb	r3, [r2, #3]
    2d9e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2da0:	lsls	r0, r3, #24
    2da2:	bmi.n	2dc8 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2da4:	lsls	r2, r3, #25
    2da6:	bpl.n	2dc4 <uart4_status_isr+0x74>
    2da8:	ldr	r3, [pc, #84]	; (2e00 <uart4_status_isr+0xb0>)
    2daa:	ldrb	r3, [r3, #4]
    2dac:	lsls	r3, r3, #25
    2dae:	bpl.n	2dc4 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2db0:	ldr	r3, [pc, #100]	; (2e18 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2db2:	ldr	r1, [pc, #104]	; (2e1c <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2db4:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2db6:	movs	r2, #0
    2db8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2dba:	cbz	r3, 2dbe <uart4_status_isr+0x6e>
    2dbc:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    2dbe:	ldr	r3, [pc, #64]	; (2e00 <uart4_status_isr+0xb0>)
    2dc0:	movs	r2, #44	; 0x2c
    2dc2:	strb	r2, [r3, #3]
	}
}
    2dc4:	pop	{r4, r5}
    2dc6:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2dc8:	ldrb	r1, [r2, #4]
    2dca:	lsls	r1, r1, #24
    2dcc:	bpl.n	2da4 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    2dce:	ldr	r1, [pc, #80]	; (2e20 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2dd0:	ldr	r0, [pc, #64]	; (2e14 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2dd2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2dd4:	ldrb	r1, [r0, #0]
    2dd6:	uxtb	r1, r1
		if (head == tail) {
    2dd8:	cmp	r4, r1
    2dda:	beq.n	2df8 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2ddc:	adds	r2, r1, #1
    2dde:	cmp	r2, #39	; 0x27
    2de0:	itt	hi
    2de2:	movhi	r1, #0
    2de4:	movhi	r2, r1
			n = tx_buffer[tail];
    2de6:	ldr	r5, [pc, #60]	; (2e24 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2de8:	ldr	r4, [pc, #20]	; (2e00 <uart4_status_isr+0xb0>)
    2dea:	it	ls
    2dec:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2dee:	ldrb	r2, [r5, r2]
    2df0:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2df2:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2df4:	strb	r1, [r0, #0]
    2df6:	b.n	2da4 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    2df8:	movs	r1, #108	; 0x6c
    2dfa:	strb	r1, [r2, #3]
    2dfc:	b.n	2da4 <uart4_status_isr+0x54>
    2dfe:	nop
    2e00:	.word	0x400ea000
    2e04:	.word	0x1fff1730
    2e08:	.word	0x1fff1731
    2e0c:	.word	0x1fff175c
    2e10:	.word	0x1fff172c
    2e14:	.word	0x1fff179d
    2e18:	.word	0x1fff17a0
    2e1c:	.word	0x1fff179c
    2e20:	.word	0x1fff17a4
    2e24:	.word	0x1fff1734

00002e28 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e28:	ldr	r2, [pc, #20]	; (2e40 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    2e2a:	ldr	r3, [pc, #24]	; (2e44 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e2c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2e2e:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e30:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2e32:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2e34:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    2e36:	it	cc
    2e38:	addcc	r0, #64	; 0x40
    2e3a:	subs	r0, r0, r3
}
    2e3c:	bx	lr
    2e3e:	nop
    2e40:	.word	0x1fff1818
    2e44:	.word	0x1fff17ad

00002e48 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    2e48:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2e4a:	ldr	r3, [pc, #224]	; (2f2c <uart1_status_isr+0xe4>)
    2e4c:	ldrb	r2, [r3, #4]
    2e4e:	tst.w	r2, #48	; 0x30
    2e52:	beq.n	2eae <uart1_status_isr+0x66>
		__disable_irq();
    2e54:	cpsid	i
		avail = UART1_RCFIFO;
    2e56:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2e58:	and.w	r2, r1, #255	; 0xff
    2e5c:	cmp	r1, #0
    2e5e:	beq.n	2edc <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2e60:	cpsie	i
			head = rx_buffer_head;
    2e62:	ldr	r7, [pc, #204]	; (2f30 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2e64:	ldr	r1, [pc, #204]	; (2f34 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2e66:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2e68:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2e6a:	ldr	r6, [pc, #204]	; (2f38 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2e6c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2e6e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2e70:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    2e72:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2e74:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2e76:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2e78:	it	cs
    2e7a:	movcs	r3, #0
				if (newhead != tail) {
    2e7c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2e7e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2e82:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2e84:	itt	ne
    2e86:	strbne	r1, [r6, r3]
    2e88:	movne	r0, r3
				}
			} while (--avail > 0);
    2e8a:	ands.w	r2, r2, #255	; 0xff
    2e8e:	bne.n	2e72 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2e90:	ldr	r3, [pc, #168]	; (2f3c <uart1_status_isr+0xf4>)
    2e92:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2e94:	uxtb	r2, r0
    2e96:	strb	r2, [r7, #0]
			if (rts_pin) {
    2e98:	cbz	r3, 2eae <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2e9a:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2e9c:	itet	cc
    2e9e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2ea2:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2ea4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2ea6:	cmp	r0, #39	; 0x27
    2ea8:	itt	gt
    2eaa:	movgt	r2, #1
    2eac:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    2eae:	ldr	r1, [pc, #124]	; (2f2c <uart1_status_isr+0xe4>)
    2eb0:	ldrb	r2, [r1, #3]
    2eb2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2eb4:	lsls	r5, r2, #24
    2eb6:	bmi.n	2ee6 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    2eb8:	lsls	r2, r2, #25
    2eba:	bpl.n	2ed8 <uart1_status_isr+0x90>
    2ebc:	ldr	r3, [pc, #108]	; (2f2c <uart1_status_isr+0xe4>)
    2ebe:	ldrb	r3, [r3, #4]
    2ec0:	lsls	r3, r3, #25
    2ec2:	bpl.n	2ed8 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2ec4:	ldr	r3, [pc, #120]	; (2f40 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2ec6:	ldr	r1, [pc, #124]	; (2f44 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2ec8:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2eca:	movs	r2, #0
    2ecc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2ece:	cbz	r3, 2ed2 <uart1_status_isr+0x8a>
    2ed0:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    2ed2:	ldr	r3, [pc, #88]	; (2f2c <uart1_status_isr+0xe4>)
    2ed4:	movs	r2, #60	; 0x3c
    2ed6:	strb	r2, [r3, #3]
	}
}
    2ed8:	pop	{r4, r5, r6, r7}
    2eda:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2edc:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    2ede:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2ee0:	strb	r2, [r3, #17]
			__enable_irq();
    2ee2:	cpsie	i
    2ee4:	b.n	2eae <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2ee6:	ldrb	r3, [r1, #4]
    2ee8:	lsls	r4, r3, #24
    2eea:	bpl.n	2eb8 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    2eec:	ldr	r3, [pc, #88]	; (2f48 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    2eee:	ldr	r6, [pc, #92]	; (2f4c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2ef0:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2ef2:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2ef4:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2ef6:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2ef8:	cmp	r4, r3
    2efa:	beq.n	2f1a <uart1_status_isr+0xd2>
    2efc:	ldr	r5, [pc, #80]	; (2f50 <uart1_status_isr+0x108>)
    2efe:	b.n	2f04 <uart1_status_isr+0xbc>
    2f00:	cmp	r3, r4
    2f02:	beq.n	2f1a <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2f04:	adds	r3, #1
    2f06:	cmp	r3, #40	; 0x28
    2f08:	it	cs
    2f0a:	movcs	r3, #0
			avail = UART1_S1;
    2f0c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2f0e:	ldrb	r0, [r5, r3]
    2f10:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    2f12:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    2f14:	ldrb	r0, [r1, #20]
    2f16:	cmp	r0, #7
    2f18:	bls.n	2f00 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    2f1a:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2f1c:	ldr	r1, [pc, #12]	; (2f2c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    2f1e:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2f20:	ldrb	r3, [r1, #4]
    2f22:	lsls	r0, r3, #24
    2f24:	itt	mi
    2f26:	movmi	r3, #124	; 0x7c
    2f28:	strbmi	r3, [r1, #3]
    2f2a:	b.n	2eb8 <uart1_status_isr+0x70>
    2f2c:	.word	0x4006b000
    2f30:	.word	0x1fff1818
    2f34:	.word	0x1fff17ad
    2f38:	.word	0x1fff17d8
    2f3c:	.word	0x1fff17a8
    2f40:	.word	0x1fff181c
    2f44:	.word	0x1fff17ac
    2f48:	.word	0x1fff1820
    2f4c:	.word	0x1fff1819
    2f50:	.word	0x1fff17b0

00002f54 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f54:	ldr	r2, [pc, #20]	; (2f6c <serial4_available+0x18>)
	tail = rx_buffer_tail;
    2f56:	ldr	r3, [pc, #24]	; (2f70 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f58:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2f5a:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f5c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2f5e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2f60:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    2f62:	it	cc
    2f64:	addcc	r0, #64	; 0x40
    2f66:	subs	r0, r0, r3
}
    2f68:	bx	lr
    2f6a:	nop
    2f6c:	.word	0x1fff1828
    2f70:	.word	0x1fff1829

00002f74 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    2f74:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    2f76:	ldr	r3, [pc, #172]	; (3024 <uart3_status_isr+0xb0>)
    2f78:	ldrb	r2, [r3, #4]
    2f7a:	lsls	r4, r2, #26
    2f7c:	bpl.n	2fbe <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2f7e:	ldr	r0, [pc, #168]	; (3028 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2f80:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2f82:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f84:	ldr	r1, [pc, #164]	; (302c <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2f86:	adds	r3, #1
    2f88:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f8a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2f8c:	it	gt
    2f8e:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f90:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2f92:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f94:	beq.n	2f9e <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    2f96:	ldr	r4, [pc, #152]	; (3030 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    2f98:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2f9a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2f9c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2f9e:	ldr	r2, [pc, #148]	; (3034 <uart3_status_isr+0xc0>)
    2fa0:	ldr	r1, [r2, #0]
    2fa2:	cbz	r1, 2fbe <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2fa4:	ldr	r2, [pc, #144]	; (3038 <uart3_status_isr+0xc4>)
    2fa6:	ldrb	r2, [r2, #0]
    2fa8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2faa:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2fac:	itet	cc
    2fae:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2fb2:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2fb4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2fb6:	cmp	r3, #39	; 0x27
    2fb8:	itt	gt
    2fba:	movgt	r3, #1
    2fbc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    2fbe:	ldr	r2, [pc, #100]	; (3024 <uart3_status_isr+0xb0>)
    2fc0:	ldrb	r3, [r2, #3]
    2fc2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2fc4:	lsls	r0, r3, #24
    2fc6:	bmi.n	2fec <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    2fc8:	lsls	r2, r3, #25
    2fca:	bpl.n	2fe8 <uart3_status_isr+0x74>
    2fcc:	ldr	r3, [pc, #84]	; (3024 <uart3_status_isr+0xb0>)
    2fce:	ldrb	r3, [r3, #4]
    2fd0:	lsls	r3, r3, #25
    2fd2:	bpl.n	2fe8 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2fd4:	ldr	r3, [pc, #100]	; (303c <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2fd6:	ldr	r1, [pc, #104]	; (3040 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2fd8:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2fda:	movs	r2, #0
    2fdc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2fde:	cbz	r3, 2fe2 <uart3_status_isr+0x6e>
    2fe0:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    2fe2:	ldr	r3, [pc, #64]	; (3024 <uart3_status_isr+0xb0>)
    2fe4:	movs	r2, #44	; 0x2c
    2fe6:	strb	r2, [r3, #3]
	}
}
    2fe8:	pop	{r4, r5}
    2fea:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2fec:	ldrb	r1, [r2, #4]
    2fee:	lsls	r1, r1, #24
    2ff0:	bpl.n	2fc8 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    2ff2:	ldr	r1, [pc, #80]	; (3044 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2ff4:	ldr	r0, [pc, #64]	; (3038 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2ff6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2ff8:	ldrb	r1, [r0, #0]
    2ffa:	uxtb	r1, r1
		if (head == tail) {
    2ffc:	cmp	r4, r1
    2ffe:	beq.n	301c <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3000:	adds	r2, r1, #1
    3002:	cmp	r2, #39	; 0x27
    3004:	itt	hi
    3006:	movhi	r1, #0
    3008:	movhi	r2, r1
			n = tx_buffer[tail];
    300a:	ldr	r5, [pc, #60]	; (3048 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    300c:	ldr	r4, [pc, #20]	; (3024 <uart3_status_isr+0xb0>)
    300e:	it	ls
    3010:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3012:	ldrb	r2, [r5, r2]
    3014:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3016:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3018:	strb	r1, [r0, #0]
    301a:	b.n	2fc8 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    301c:	movs	r1, #108	; 0x6c
    301e:	strb	r1, [r2, #3]
    3020:	b.n	2fc8 <uart3_status_isr+0x54>
    3022:	nop
    3024:	.word	0x4006d000
    3028:	.word	0x1fff1828
    302c:	.word	0x1fff1829
    3030:	.word	0x1fff1854
    3034:	.word	0x1fff1824
    3038:	.word	0x1fff1895
    303c:	.word	0x1fff1898
    3040:	.word	0x1fff1894
    3044:	.word	0x1fff189c
    3048:	.word	0x1fff182c

0000304c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    304c:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    304e:	ldr	r4, [pc, #64]	; (3090 <fault_isr+0x44>)
    3050:	b.n	3064 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3052:	ldr	r3, [r4, #0]
    3054:	lsls	r1, r3, #21
    3056:	bmi.n	3074 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3058:	ldr	r3, [r4, #0]
    305a:	lsls	r2, r3, #20
    305c:	bmi.n	307e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    305e:	ldr	r3, [r4, #0]
    3060:	lsls	r3, r3, #19
    3062:	bmi.n	3088 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3064:	ldr	r3, [r4, #0]
    3066:	lsls	r0, r3, #13
    3068:	bpl.n	3052 <fault_isr+0x6>
    306a:	bl	20ec <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    306e:	ldr	r3, [r4, #0]
    3070:	lsls	r1, r3, #21
    3072:	bpl.n	3058 <fault_isr+0xc>
    3074:	bl	3160 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3078:	ldr	r3, [r4, #0]
    307a:	lsls	r2, r3, #20
    307c:	bpl.n	305e <fault_isr+0x12>
    307e:	bl	2e48 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3082:	ldr	r3, [r4, #0]
    3084:	lsls	r3, r3, #19
    3086:	bpl.n	3064 <fault_isr+0x18>
    3088:	bl	3460 <uart2_status_isr>
    308c:	b.n	3064 <fault_isr+0x18>
    308e:	nop
    3090:	.word	0x40048034

00003094 <unused_isr>:
	}
}

void unused_isr(void)
{
    3094:	push	{r3, lr}
	fault_isr();
    3096:	bl	304c <fault_isr>
    309a:	nop

0000309c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    309c:	ldr	r3, [pc, #4]	; (30a4 <startup_early_hook+0x8>)
    309e:	movs	r2, #16
    30a0:	strh	r2, [r3, #0]
    30a2:	bx	lr
    30a4:	.word	0x40052000

000030a8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    30a8:	bx	lr
    30aa:	nop

000030ac <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    30ac:	ldr	r1, [pc, #36]	; (30d4 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    30ae:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    30b0:	ldr	r3, [r1, #0]
	if (incr != 0) {
    30b2:	cbz	r0, 30c2 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    30b4:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    30b6:	add	r0, r3
    30b8:	sub.w	r2, r2, #8192	; 0x2000
    30bc:	cmp	r0, r2
    30be:	bcs.n	30c6 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    30c0:	str	r0, [r1, #0]
	}
	return prev;
    30c2:	mov	r0, r3
}
    30c4:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    30c6:	bl	3734 <__errno>
    30ca:	movs	r3, #12
    30cc:	str	r3, [r0, #0]
			return (void *)-1;
    30ce:	mov.w	r0, #4294967295
    30d2:	pop	{r3, pc}
    30d4:	.word	0x1fff0c58

000030d8 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    30d8:	ldr	r2, [pc, #32]	; (30fc <kinetis_hsrun_disable+0x24>)
    30da:	ldrb	r3, [r2, #0]
    30dc:	cmp	r3, #128	; 0x80
    30de:	beq.n	30e4 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    30e0:	movs	r0, #0
}
    30e2:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    30e4:	ldr	r1, [pc, #24]	; (3100 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    30e6:	ldr	r3, [pc, #28]	; (3104 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    30e8:	ldr	r0, [pc, #28]	; (3108 <kinetis_hsrun_disable+0x30>)
    30ea:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    30ec:	movs	r1, #0
    30ee:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    30f0:	ldrb	r3, [r2, #0]
    30f2:	cmp	r3, #128	; 0x80
    30f4:	beq.n	30f0 <kinetis_hsrun_disable+0x18>
		return 1;
    30f6:	movs	r0, #1
    30f8:	bx	lr
    30fa:	nop
    30fc:	.word	0x4007e003
    3100:	.word	0x40048044
    3104:	.word	0x4007e001
    3108:	.word	0x22280000

0000310c <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    310c:	ldr	r2, [pc, #36]	; (3134 <kinetis_hsrun_enable+0x28>)
    310e:	ldrb	r3, [r2, #0]
    3110:	cmp	r3, #1
    3112:	beq.n	3118 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3114:	movs	r0, #0
}
    3116:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3118:	add.w	r3, r3, #1073741824	; 0x40000000
    311c:	add.w	r3, r3, #516096	; 0x7e000
    3120:	movs	r1, #96	; 0x60
    3122:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3124:	ldrb	r3, [r2, #0]
    3126:	cmp	r3, #128	; 0x80
    3128:	bne.n	3124 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    312a:	ldr	r3, [pc, #12]	; (3138 <kinetis_hsrun_enable+0x2c>)
    312c:	ldr	r2, [pc, #12]	; (313c <kinetis_hsrun_enable+0x30>)
    312e:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3130:	movs	r0, #1
    3132:	bx	lr
    3134:	.word	0x4007e003
    3138:	.word	0x40048044
    313c:	.word	0x02060000

00003140 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3140:	ldr	r2, [pc, #20]	; (3158 <serial_available+0x18>)
	tail = rx_buffer_tail;
    3142:	ldr	r3, [pc, #24]	; (315c <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3144:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3146:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3148:	uxtb	r0, r0
	tail = rx_buffer_tail;
    314a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    314c:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    314e:	it	cc
    3150:	addcc	r0, #64	; 0x40
    3152:	subs	r0, r0, r3
}
    3154:	bx	lr
    3156:	nop
    3158:	.word	0x1fff18a4
    315c:	.word	0x1fff18a5

00003160 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3160:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3162:	ldr	r3, [pc, #224]	; (3244 <uart0_status_isr+0xe4>)
    3164:	ldrb	r2, [r3, #4]
    3166:	tst.w	r2, #48	; 0x30
    316a:	beq.n	31c6 <uart0_status_isr+0x66>
		__disable_irq();
    316c:	cpsid	i
		avail = UART0_RCFIFO;
    316e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3170:	and.w	r2, r1, #255	; 0xff
    3174:	cmp	r1, #0
    3176:	beq.n	31f4 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3178:	cpsie	i
			head = rx_buffer_head;
    317a:	ldr	r7, [pc, #204]	; (3248 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    317c:	ldr	r1, [pc, #204]	; (324c <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    317e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3180:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3182:	ldr	r6, [pc, #204]	; (3250 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3184:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3186:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3188:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    318a:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    318c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    318e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3190:	it	cs
    3192:	movcs	r3, #0
				if (newhead != tail) {
    3194:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3196:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    319a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    319c:	itt	ne
    319e:	strbne	r1, [r6, r3]
    31a0:	movne	r0, r3
				}
			} while (--avail > 0);
    31a2:	ands.w	r2, r2, #255	; 0xff
    31a6:	bne.n	318a <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    31a8:	ldr	r3, [pc, #168]	; (3254 <uart0_status_isr+0xf4>)
    31aa:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    31ac:	uxtb	r2, r0
    31ae:	strb	r2, [r7, #0]
			if (rts_pin) {
    31b0:	cbz	r3, 31c6 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    31b2:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    31b4:	itet	cc
    31b6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    31ba:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    31bc:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    31be:	cmp	r0, #39	; 0x27
    31c0:	itt	gt
    31c2:	movgt	r2, #1
    31c4:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    31c6:	ldr	r1, [pc, #124]	; (3244 <uart0_status_isr+0xe4>)
    31c8:	ldrb	r2, [r1, #3]
    31ca:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    31cc:	lsls	r5, r2, #24
    31ce:	bmi.n	31fe <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    31d0:	lsls	r2, r2, #25
    31d2:	bpl.n	31f0 <uart0_status_isr+0x90>
    31d4:	ldr	r3, [pc, #108]	; (3244 <uart0_status_isr+0xe4>)
    31d6:	ldrb	r3, [r3, #4]
    31d8:	lsls	r3, r3, #25
    31da:	bpl.n	31f0 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    31dc:	ldr	r3, [pc, #120]	; (3258 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    31de:	ldr	r1, [pc, #124]	; (325c <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    31e0:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    31e2:	movs	r2, #0
    31e4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    31e6:	cbz	r3, 31ea <uart0_status_isr+0x8a>
    31e8:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    31ea:	ldr	r3, [pc, #88]	; (3244 <uart0_status_isr+0xe4>)
    31ec:	movs	r2, #60	; 0x3c
    31ee:	strb	r2, [r3, #3]
	}
}
    31f0:	pop	{r4, r5, r6, r7}
    31f2:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    31f4:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    31f6:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    31f8:	strb	r2, [r3, #17]
			__enable_irq();
    31fa:	cpsie	i
    31fc:	b.n	31c6 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    31fe:	ldrb	r3, [r1, #4]
    3200:	lsls	r4, r3, #24
    3202:	bpl.n	31d0 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3204:	ldr	r3, [pc, #88]	; (3260 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3206:	ldr	r6, [pc, #92]	; (3264 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3208:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    320a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    320c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    320e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3210:	cmp	r4, r3
    3212:	beq.n	3232 <uart0_status_isr+0xd2>
    3214:	ldr	r5, [pc, #80]	; (3268 <uart0_status_isr+0x108>)
    3216:	b.n	321c <uart0_status_isr+0xbc>
    3218:	cmp	r3, r4
    321a:	beq.n	3232 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    321c:	adds	r3, #1
    321e:	cmp	r3, #64	; 0x40
    3220:	it	cs
    3222:	movcs	r3, #0
			avail = UART0_S1;
    3224:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3226:	ldrb	r0, [r5, r3]
    3228:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    322a:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    322c:	ldrb	r0, [r1, #20]
    322e:	cmp	r0, #7
    3230:	bls.n	3218 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3232:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3234:	ldr	r1, [pc, #12]	; (3244 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3236:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3238:	ldrb	r3, [r1, #4]
    323a:	lsls	r0, r3, #24
    323c:	itt	mi
    323e:	movmi	r3, #124	; 0x7c
    3240:	strbmi	r3, [r1, #3]
    3242:	b.n	31d0 <uart0_status_isr+0x70>
    3244:	.word	0x4006a000
    3248:	.word	0x1fff18a4
    324c:	.word	0x1fff18a5
    3250:	.word	0x1fff18e8
    3254:	.word	0x1fff18a0
    3258:	.word	0x1fff192c
    325c:	.word	0x1fff1928
    3260:	.word	0x1fff1930
    3264:	.word	0x1fff1929
    3268:	.word	0x1fff18a8

0000326c <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    326c:	ldr	r2, [pc, #20]	; (3284 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    326e:	ldr	r3, [pc, #24]	; (3288 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3270:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3272:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3274:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3276:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3278:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    327a:	it	cc
    327c:	addcc	r0, #64	; 0x40
    327e:	subs	r0, r0, r3
}
    3280:	bx	lr
    3282:	nop
    3284:	.word	0x1fff1938
    3288:	.word	0x1fff1939

0000328c <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    328c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    328e:	ldr	r3, [pc, #176]	; (3340 <lpuart0_status_isr+0xb4>)
    3290:	ldr	r2, [r3, #4]
    3292:	lsls	r4, r2, #10
    3294:	bpl.n	32d6 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3296:	ldr	r0, [pc, #172]	; (3344 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3298:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    329a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    329c:	ldr	r1, [pc, #168]	; (3348 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    329e:	adds	r3, #1
    32a0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    32a2:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    32a4:	it	gt
    32a6:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    32a8:	cmp	r3, r1
    32aa:	beq.n	32b6 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    32ac:	ldr	r4, [pc, #156]	; (334c <lpuart0_status_isr+0xc0>)
    32ae:	uxtb	r2, r2
			rx_buffer_head = head;
    32b0:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    32b2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    32b4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    32b6:	ldr	r2, [pc, #152]	; (3350 <lpuart0_status_isr+0xc4>)
    32b8:	ldr	r1, [r2, #0]
    32ba:	cbz	r1, 32d6 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    32bc:	ldr	r2, [pc, #148]	; (3354 <lpuart0_status_isr+0xc8>)
    32be:	ldrb	r2, [r2, #0]
    32c0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    32c2:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    32c4:	itet	cc
    32c6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    32ca:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    32cc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    32ce:	cmp	r3, #39	; 0x27
    32d0:	itt	gt
    32d2:	movgt	r3, #1
    32d4:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    32d6:	ldr	r2, [pc, #104]	; (3340 <lpuart0_status_isr+0xb4>)
    32d8:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    32da:	lsls	r0, r3, #8
    32dc:	bpl.n	32e4 <lpuart0_status_isr+0x58>
    32de:	ldr	r2, [r2, #4]
    32e0:	lsls	r1, r2, #8
    32e2:	bmi.n	3308 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    32e4:	lsls	r2, r3, #9
    32e6:	bpl.n	3304 <lpuart0_status_isr+0x78>
    32e8:	ldr	r3, [pc, #84]	; (3340 <lpuart0_status_isr+0xb4>)
    32ea:	ldr	r3, [r3, #4]
    32ec:	lsls	r3, r3, #9
    32ee:	bpl.n	3304 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    32f0:	ldr	r3, [pc, #100]	; (3358 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    32f2:	ldr	r1, [pc, #104]	; (335c <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    32f4:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    32f6:	movs	r2, #0
    32f8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    32fa:	cbz	r3, 32fe <lpuart0_status_isr+0x72>
    32fc:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    32fe:	ldr	r3, [pc, #96]	; (3360 <lpuart0_status_isr+0xd4>)
    3300:	movs	r2, #0
    3302:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3304:	pop	{r4, r5}
    3306:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3308:	ldr	r2, [pc, #88]	; (3364 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    330a:	ldr	r1, [pc, #72]	; (3354 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    330c:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    330e:	ldrb	r2, [r1, #0]
    3310:	uxtb	r2, r2
		if (head == tail) {
    3312:	cmp	r0, r2
    3314:	beq.n	3332 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3316:	adds	r2, #1
    3318:	cmp	r2, #39	; 0x27
    331a:	itt	hi
    331c:	movhi	r0, #0
    331e:	movhi	r2, r0
			n = tx_buffer[tail];
    3320:	ldr	r5, [pc, #68]	; (3368 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3322:	ldr	r4, [pc, #28]	; (3340 <lpuart0_status_isr+0xb4>)
    3324:	it	ls
    3326:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3328:	ldrb	r2, [r5, r2]
    332a:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    332c:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    332e:	strb	r0, [r1, #0]
    3330:	b.n	32e4 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3332:	ldr	r0, [pc, #56]	; (336c <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3334:	ldr	r2, [pc, #40]	; (3360 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3336:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3338:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    333a:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    333c:	str	r1, [r2, #0]
    333e:	b.n	32e4 <lpuart0_status_isr+0x58>
    3340:	.word	0x400c4000
    3344:	.word	0x1fff1938
    3348:	.word	0x1fff1939
    334c:	.word	0x1fff1964
    3350:	.word	0x1fff1934
    3354:	.word	0x1fff19a5
    3358:	.word	0x1fff19a8
    335c:	.word	0x1fff19a4
    3360:	.word	0x43880158
    3364:	.word	0x1fff19ac
    3368:	.word	0x1fff193c
    336c:	.word	0x4388015c

00003370 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3370:	push	{r4, lr}
    3372:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3374:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3376:	bl	30d8 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    337a:	ldr	r2, [pc, #96]	; (33dc <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    337c:	ldr	r3, [pc, #96]	; (33e0 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    337e:	ldr	r1, [pc, #100]	; (33e4 <usb_init_serialnumber+0x74>)
    3380:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3382:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3384:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3386:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3388:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    338a:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    338c:	ldrb	r3, [r2, #0]
    338e:	lsls	r3, r3, #24
    3390:	bpl.n	338c <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3392:	ldr	r3, [pc, #84]	; (33e8 <usb_init_serialnumber+0x78>)
    3394:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3396:	bl	310c <kinetis_hsrun_enable>
#endif
	__enable_irq();
    339a:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    339c:	ldr	r3, [pc, #76]	; (33ec <usb_init_serialnumber+0x7c>)
    339e:	cmp	r4, r3
    33a0:	itt	ls
    33a2:	addls.w	r4, r4, r4, lsl #2
    33a6:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    33a8:	mov	r0, r4
    33aa:	ldr	r4, [pc, #68]	; (33f0 <usb_init_serialnumber+0x80>)
    33ac:	add	r1, sp, #4
    33ae:	movs	r2, #10
    33b0:	bl	33f4 <ultoa>
    33b4:	add	r1, sp, #4
    33b6:	mov	r0, r4
	for (i=0; i<10; i++) {
    33b8:	movs	r3, #0
		char c = buf[i];
    33ba:	ldrb.w	r2, [r1], #1
    33be:	adds	r3, #1
		if (!c) break;
    33c0:	cbz	r2, 33d2 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    33c2:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    33c4:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    33c8:	bne.n	33ba <usb_init_serialnumber+0x4a>
    33ca:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    33cc:	strb	r3, [r4, #0]
}
    33ce:	add	sp, #16
    33d0:	pop	{r4, pc}
    33d2:	lsls	r3, r3, #1
    33d4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    33d6:	strb	r3, [r4, #0]
}
    33d8:	add	sp, #16
    33da:	pop	{r4, pc}
    33dc:	.word	0x40020004
    33e0:	.word	0x40020000
    33e4:	.word	0x41070000
    33e8:	.word	0x4002000c
    33ec:	.word	0x0098967f
    33f0:	.word	0x1fff0d3c

000033f4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    33f4:	push	{r4, r5, r6, r7}
    33f6:	subs	r5, r1, #1
    33f8:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    33fa:	movs	r4, #0
    33fc:	b.n	3400 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    33fe:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3400:	udiv	r3, r0, r2
    3404:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3408:	cmp	r0, #9
    340a:	add.w	r7, r0, #48	; 0x30
    340e:	itet	hi
    3410:	addhi	r0, #55	; 0x37
    3412:	uxtbls	r0, r7
    3414:	uxtbhi	r0, r0
    3416:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    341a:	mov	r0, r3
    341c:	cmp	r3, #0
    341e:	bne.n	33fe <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3420:	adds	r2, r1, r4
    3422:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3424:	cbz	r4, 343a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3426:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3428:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    342c:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    342e:	adds	r3, #1
    3430:	subs	r0, r4, r3
    3432:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3434:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3438:	blt.n	3426 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    343a:	mov	r0, r1
    343c:	pop	{r4, r5, r6, r7}
    343e:	bx	lr

00003440 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3440:	ldr	r2, [pc, #20]	; (3458 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3442:	ldr	r3, [pc, #24]	; (345c <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3444:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3446:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3448:	uxtb	r0, r0
	tail = rx_buffer_tail;
    344a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    344c:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    344e:	it	cc
    3450:	addcc	r0, #64	; 0x40
    3452:	subs	r0, r0, r3
}
    3454:	bx	lr
    3456:	nop
    3458:	.word	0x1fff19b4
    345c:	.word	0x1fff19b5

00003460 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3460:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3462:	ldr	r3, [pc, #172]	; (3510 <uart2_status_isr+0xb0>)
    3464:	ldrb	r2, [r3, #4]
    3466:	lsls	r4, r2, #26
    3468:	bpl.n	34aa <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    346a:	ldr	r0, [pc, #168]	; (3514 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    346c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    346e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3470:	ldr	r1, [pc, #164]	; (3518 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3472:	adds	r3, #1
    3474:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3476:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3478:	it	gt
    347a:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    347c:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    347e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3480:	beq.n	348a <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3482:	ldr	r4, [pc, #152]	; (351c <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3484:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3486:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3488:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    348a:	ldr	r2, [pc, #148]	; (3520 <uart2_status_isr+0xc0>)
    348c:	ldr	r1, [r2, #0]
    348e:	cbz	r1, 34aa <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3490:	ldr	r2, [pc, #144]	; (3524 <uart2_status_isr+0xc4>)
    3492:	ldrb	r2, [r2, #0]
    3494:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3496:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3498:	itet	cc
    349a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    349e:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    34a0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    34a2:	cmp	r3, #39	; 0x27
    34a4:	itt	gt
    34a6:	movgt	r3, #1
    34a8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    34aa:	ldr	r2, [pc, #100]	; (3510 <uart2_status_isr+0xb0>)
    34ac:	ldrb	r3, [r2, #3]
    34ae:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    34b0:	lsls	r0, r3, #24
    34b2:	bmi.n	34d8 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    34b4:	lsls	r2, r3, #25
    34b6:	bpl.n	34d4 <uart2_status_isr+0x74>
    34b8:	ldr	r3, [pc, #84]	; (3510 <uart2_status_isr+0xb0>)
    34ba:	ldrb	r3, [r3, #4]
    34bc:	lsls	r3, r3, #25
    34be:	bpl.n	34d4 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    34c0:	ldr	r3, [pc, #100]	; (3528 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    34c2:	ldr	r1, [pc, #104]	; (352c <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    34c4:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    34c6:	movs	r2, #0
    34c8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    34ca:	cbz	r3, 34ce <uart2_status_isr+0x6e>
    34cc:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    34ce:	ldr	r3, [pc, #64]	; (3510 <uart2_status_isr+0xb0>)
    34d0:	movs	r2, #44	; 0x2c
    34d2:	strb	r2, [r3, #3]
	}
}
    34d4:	pop	{r4, r5}
    34d6:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    34d8:	ldrb	r1, [r2, #4]
    34da:	lsls	r1, r1, #24
    34dc:	bpl.n	34b4 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    34de:	ldr	r1, [pc, #80]	; (3530 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    34e0:	ldr	r0, [pc, #64]	; (3524 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    34e2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    34e4:	ldrb	r1, [r0, #0]
    34e6:	uxtb	r1, r1
		if (head == tail) {
    34e8:	cmp	r4, r1
    34ea:	beq.n	3508 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    34ec:	adds	r2, r1, #1
    34ee:	cmp	r2, #39	; 0x27
    34f0:	itt	hi
    34f2:	movhi	r1, #0
    34f4:	movhi	r2, r1
			n = tx_buffer[tail];
    34f6:	ldr	r5, [pc, #60]	; (3534 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    34f8:	ldr	r4, [pc, #20]	; (3510 <uart2_status_isr+0xb0>)
    34fa:	it	ls
    34fc:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    34fe:	ldrb	r2, [r5, r2]
    3500:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3502:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3504:	strb	r1, [r0, #0]
    3506:	b.n	34b4 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3508:	movs	r1, #108	; 0x6c
    350a:	strb	r1, [r2, #3]
    350c:	b.n	34b4 <uart2_status_isr+0x54>
    350e:	nop
    3510:	.word	0x4006c000
    3514:	.word	0x1fff19b4
    3518:	.word	0x1fff19b5
    351c:	.word	0x1fff19e0
    3520:	.word	0x1fff19b0
    3524:	.word	0x1fff1a21
    3528:	.word	0x1fff1a24
    352c:	.word	0x1fff1a20
    3530:	.word	0x1fff1a28
    3534:	.word	0x1fff19b8

00003538 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3538:	bx	lr
    353a:	nop

0000353c <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    353c:	bx	lr
    353e:	nop

00003540 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3540:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3542:	mrs	r2, PRIMASK
		__disable_irq();
    3546:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3548:	ldrb	r3, [r0, #29]
    354a:	cbnz	r3, 355a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    354c:	ldrb	r1, [r0, #28]
    354e:	cmp	r1, #1
    3550:	beq.n	3564 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3552:	cmp	r1, #3
    3554:	beq.n	3578 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3556:	movs	r3, #1
    3558:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    355a:	cbnz	r2, 355e <EventResponder::triggerEventNotImmediate()+0x1e>
    355c:	cpsie	i
	}
	enableInterrupts(irq);
}
    355e:	ldr.w	r4, [sp], #4
    3562:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3564:	ldr	r4, [pc, #68]	; (35ac <EventResponder::triggerEventNotImmediate()+0x6c>)
    3566:	ldr	r1, [r4, #0]
    3568:	cbz	r1, 3594 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    356a:	ldr	r1, [pc, #68]	; (35b0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    356c:	str	r3, [r0, #20]
				_prev = lastYield;
    356e:	ldr	r3, [r1, #0]
    3570:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3572:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3574:	str	r0, [r3, #20]
    3576:	b.n	3556 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3578:	ldr	r4, [pc, #56]	; (35b4 <EventResponder::triggerEventNotImmediate()+0x74>)
    357a:	ldr	r1, [r4, #0]
    357c:	cbz	r1, 35a0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    357e:	ldr	r1, [pc, #56]	; (35b8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3580:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3582:	ldr	r3, [r1, #0]
    3584:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3586:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3588:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    358a:	ldr	r3, [pc, #48]	; (35bc <EventResponder::triggerEventNotImmediate()+0x7c>)
    358c:	mov.w	r1, #268435456	; 0x10000000
    3590:	str	r1, [r3, #0]
    3592:	b.n	3556 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3594:	ldr	r3, [pc, #24]	; (35b0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3596:	str	r1, [r0, #20]
				_prev = nullptr;
    3598:	str	r1, [r0, #24]
				firstYield = this;
    359a:	str	r0, [r4, #0]
				lastYield = this;
    359c:	str	r0, [r3, #0]
    359e:	b.n	3556 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    35a0:	ldr	r3, [pc, #20]	; (35b8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    35a2:	str	r1, [r0, #20]
				_prev = nullptr;
    35a4:	str	r1, [r0, #24]
				firstInterrupt = this;
    35a6:	str	r0, [r4, #0]
				lastInterrupt = this;
    35a8:	str	r0, [r3, #0]
    35aa:	b.n	358a <EventResponder::triggerEventNotImmediate()+0x4a>
    35ac:	.word	0x1fff1a3c
    35b0:	.word	0x1fff1a38
    35b4:	.word	0x1fff1a2c
    35b8:	.word	0x1fff1a30
    35bc:	.word	0xe000ed04

000035c0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    35c0:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    35c2:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    35c4:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    35c6:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    35c8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    35ca:	beq.n	35d4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    35cc:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    35d0:	b.w	3540 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    35d4:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    35d6:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    35da:	bx	r3

000035dc <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    35dc:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    35de:	mrs	r2, PRIMASK
		__disable_irq();
    35e2:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    35e4:	ldr	r4, [pc, #48]	; (3618 <EventResponder::runFromInterrupt()+0x3c>)
    35e6:	ldr	r0, [r4, #0]
		if (first) {
    35e8:	cbz	r0, 360c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    35ea:	ldr	r6, [pc, #48]	; (361c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    35ec:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    35ee:	ldr	r3, [r0, #20]
    35f0:	str	r3, [r4, #0]
			if (firstInterrupt) {
    35f2:	cbz	r3, 3612 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    35f4:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    35f6:	cbnz	r2, 35fa <EventResponder::runFromInterrupt()+0x1e>
    35f8:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    35fa:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    35fc:	ldr	r3, [r0, #8]
    35fe:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3600:	mrs	r2, PRIMASK
		__disable_irq();
    3604:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3606:	ldr	r0, [r4, #0]
		if (first) {
    3608:	cmp	r0, #0
    360a:	bne.n	35ee <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    360c:	cbnz	r2, 3610 <EventResponder::runFromInterrupt()+0x34>
    360e:	cpsie	i
    3610:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3612:	str	r3, [r6, #0]
    3614:	b.n	35f6 <EventResponder::runFromInterrupt()+0x1a>
    3616:	nop
    3618:	.word	0x1fff1a2c
    361c:	.word	0x1fff1a30

00003620 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3620:	b.w	35dc <EventResponder::runFromInterrupt()>

00003624 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3624:	ldr	r2, [pc, #96]	; (3688 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3626:	push	{r4, r5}
	if (listActive == nullptr) {
    3628:	ldr	r4, [r2, #0]
    362a:	cmp	r4, #0
    362c:	beq.n	367e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    362e:	ldr	r3, [r0, #0]
    3630:	ldr	r1, [r4, #0]
    3632:	cmp	r3, r1
    3634:	bcs.n	3654 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3636:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3638:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    363a:	str	r4, [r0, #8]
		_prev = nullptr;
    363c:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    363e:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3640:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3642:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3644:	movs	r3, #2
    3646:	strb	r3, [r0, #20]
}
    3648:	pop	{r4, r5}
    364a:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    364c:	ldr	r1, [r2, #0]
    364e:	cmp	r3, r1
    3650:	mov	r4, r2
    3652:	bcc.n	3666 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3654:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3656:	subs	r3, r3, r1
    3658:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    365a:	cmp	r2, #0
    365c:	bne.n	364c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    365e:	str	r2, [r0, #8]
		_prev = timer;
    3660:	str	r4, [r0, #12]
		timer->_next = this;
    3662:	str	r0, [r4, #8]
    3664:	b.n	3644 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3666:	ldr	r2, [r2, #12]
    3668:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    366a:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    366c:	str	r0, [r4, #12]
				_prev->_next = this;
    366e:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3670:	subs	r3, r1, r3
				_state = TimerActive;
    3672:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    3674:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    3676:	str	r3, [r4, #0]
				_state = TimerActive;
    3678:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    367a:	pop	{r4, r5}
    367c:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    367e:	str	r4, [r0, #8]
		_prev = nullptr;
    3680:	str	r4, [r0, #12]
		listActive = this;
    3682:	str	r0, [r2, #0]
    3684:	b.n	3644 <MillisTimer::addToActiveList()+0x20>
    3686:	nop
    3688:	.word	0x1fff1a34

0000368c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    368c:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    368e:	ldr	r6, [pc, #136]	; (3718 <MillisTimer::runFromTimer()+0x8c>)
    3690:	ldr	r4, [r6, #0]
	while (timer) {
    3692:	cbz	r4, 36e0 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3694:	ldr	r3, [r4, #0]
    3696:	cmp	r3, #0
    3698:	bne.n	3710 <MillisTimer::runFromTimer()+0x84>
    369a:	ldr	r7, [pc, #128]	; (371c <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    369c:	mov	r5, r3
    369e:	b.n	36aa <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    36a0:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    36a2:	cbz	r4, 36e0 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    36a4:	ldr	r3, [r4, #0]
    36a6:	cmp	r3, #0
    36a8:	bne.n	3710 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    36aa:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    36ac:	cbz	r3, 36b0 <MillisTimer::runFromTimer()+0x24>
    36ae:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    36b0:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    36b2:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    36b4:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    36b6:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    36b8:	ldr	r3, [r3, #0]
    36ba:	cmp	r3, r7
    36bc:	bne.n	3702 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    36be:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    36c0:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    36c2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    36c4:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    36c6:	beq.n	370a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    36c8:	bl	3540 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    36cc:	ldr	r3, [r4, #4]
    36ce:	cmp	r3, #0
    36d0:	beq.n	36a0 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    36d2:	str	r3, [r4, #0]
				timer->addToActiveList();
    36d4:	mov	r0, r4
    36d6:	bl	3624 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    36da:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    36dc:	cmp	r4, #0
    36de:	bne.n	36a4 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    36e0:	mrs	r3, PRIMASK
		__disable_irq();
    36e4:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    36e6:	ldr	r2, [pc, #56]	; (3720 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    36e8:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    36ea:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    36ec:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    36ee:	cbnz	r3, 36f2 <MillisTimer::runFromTimer()+0x66>
    36f0:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    36f2:	cbz	r0, 3700 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    36f4:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    36f6:	bl	3624 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    36fa:	mov	r0, r4
    36fc:	cmp	r0, #0
    36fe:	bne.n	36f4 <MillisTimer::runFromTimer()+0x68>
    3700:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3702:	mov	r2, r4
    3704:	movs	r1, #0
    3706:	blx	r3
    3708:	b.n	36cc <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    370a:	ldr	r3, [r0, #8]
    370c:	blx	r3
    370e:	b.n	36cc <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3710:	subs	r3, #1
    3712:	str	r3, [r4, #0]
			break;
    3714:	b.n	36e0 <MillisTimer::runFromTimer()+0x54>
    3716:	nop
    3718:	.word	0x1fff1a34
    371c:	.word	0x000035c1
    3720:	.word	0x1fff1a44

00003724 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    3724:	ldr	r2, [pc, #8]	; (3730 <systick_isr+0xc>)
    3726:	ldr	r3, [r2, #0]
    3728:	adds	r3, #1
    372a:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    372c:	b.w	368c <MillisTimer::runFromTimer()>
    3730:	.word	0x1fff15cc

00003734 <__errno>:
    3734:	ldr	r3, [pc, #4]	; (373c <__errno+0x8>)
    3736:	ldr	r0, [r3, #0]
    3738:	bx	lr
    373a:	nop
    373c:	.word	0x1fff1180

00003740 <__libc_init_array>:
    3740:	push	{r4, r5, r6, lr}
    3742:	ldr	r6, [pc, #60]	; (3780 <__libc_init_array+0x40>)
    3744:	ldr	r5, [pc, #60]	; (3784 <__libc_init_array+0x44>)
    3746:	subs	r6, r6, r5
    3748:	asrs	r6, r6, #2
    374a:	it	ne
    374c:	movne	r4, #0
    374e:	beq.n	375c <__libc_init_array+0x1c>
    3750:	adds	r4, #1
    3752:	ldr.w	r3, [r5], #4
    3756:	blx	r3
    3758:	cmp	r6, r4
    375a:	bne.n	3750 <__libc_init_array+0x10>
    375c:	ldr	r6, [pc, #40]	; (3788 <__libc_init_array+0x48>)
    375e:	ldr	r5, [pc, #44]	; (378c <__libc_init_array+0x4c>)
    3760:	subs	r6, r6, r5
    3762:	bl	444c <_init>
    3766:	asrs	r6, r6, #2
    3768:	it	ne
    376a:	movne	r4, #0
    376c:	beq.n	377c <__libc_init_array+0x3c>
    376e:	adds	r4, #1
    3770:	ldr.w	r3, [r5], #4
    3774:	blx	r3
    3776:	cmp	r6, r4
    3778:	bne.n	376e <__libc_init_array+0x2e>
    377a:	pop	{r4, r5, r6, pc}
    377c:	pop	{r4, r5, r6, pc}
    377e:	nop
    3780:	.word	0x00004458
    3784:	.word	0x00004458
    3788:	.word	0x00004464
    378c:	.word	0x00004458

00003790 <malloc>:
    3790:	ldr	r3, [pc, #8]	; (379c <malloc+0xc>)
    3792:	mov	r1, r0
    3794:	ldr	r0, [r3, #0]
    3796:	b.w	37a0 <_malloc_r>
    379a:	nop
    379c:	.word	0x1fff1180

000037a0 <_malloc_r>:
    37a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37a4:	add.w	r5, r1, #11
    37a8:	cmp	r5, #22
    37aa:	sub	sp, #12
    37ac:	mov	r6, r0
    37ae:	bls.w	38f0 <_malloc_r+0x150>
    37b2:	bics.w	r5, r5, #7
    37b6:	bmi.w	3938 <_malloc_r+0x198>
    37ba:	cmp	r1, r5
    37bc:	bhi.w	3938 <_malloc_r+0x198>
    37c0:	bl	3dac <__malloc_lock>
    37c4:	cmp.w	r5, #504	; 0x1f8
    37c8:	bcc.w	3d04 <_malloc_r+0x564>
    37cc:	lsrs	r3, r5, #9
    37ce:	beq.w	3946 <_malloc_r+0x1a6>
    37d2:	cmp	r3, #4
    37d4:	bhi.w	3ade <_malloc_r+0x33e>
    37d8:	lsrs	r0, r5, #6
    37da:	add.w	lr, r0, #57	; 0x39
    37de:	mov.w	r3, lr, lsl #1
    37e2:	adds	r0, #56	; 0x38
    37e4:	ldr	r7, [pc, #784]	; (3af8 <_malloc_r+0x358>)
    37e6:	add.w	r3, r7, r3, lsl #2
    37ea:	sub.w	r1, r3, #8
    37ee:	ldr	r4, [r3, #4]
    37f0:	cmp	r1, r4
    37f2:	bne.n	3804 <_malloc_r+0x64>
    37f4:	b.n	3950 <_malloc_r+0x1b0>
    37f6:	cmp	r2, #0
    37f8:	bge.w	3954 <_malloc_r+0x1b4>
    37fc:	ldr	r4, [r4, #12]
    37fe:	cmp	r1, r4
    3800:	beq.w	3950 <_malloc_r+0x1b0>
    3804:	ldr	r3, [r4, #4]
    3806:	bic.w	r3, r3, #3
    380a:	subs	r2, r3, r5
    380c:	cmp	r2, #15
    380e:	ble.n	37f6 <_malloc_r+0x56>
    3810:	ldr	r1, [pc, #740]	; (3af8 <_malloc_r+0x358>)
    3812:	ldr	r4, [r7, #16]
    3814:	add.w	lr, r1, #8
    3818:	cmp	r4, lr
    381a:	beq.w	3b84 <_malloc_r+0x3e4>
    381e:	ldr	r3, [r4, #4]
    3820:	bic.w	r3, r3, #3
    3824:	subs	r2, r3, r5
    3826:	cmp	r2, #15
    3828:	bgt.w	3b5e <_malloc_r+0x3be>
    382c:	cmp	r2, #0
    382e:	str.w	lr, [r1, #20]
    3832:	str.w	lr, [r1, #16]
    3836:	bge.w	3976 <_malloc_r+0x1d6>
    383a:	cmp.w	r3, #512	; 0x200
    383e:	bcs.w	3b10 <_malloc_r+0x370>
    3842:	lsrs	r3, r3, #3
    3844:	add.w	ip, r3, #1
    3848:	movs	r2, #1
    384a:	asrs	r3, r3, #2
    384c:	lsl.w	r3, r2, r3
    3850:	ldr	r2, [r1, #4]
    3852:	ldr.w	r8, [r1, ip, lsl #3]
    3856:	str.w	r8, [r4, #8]
    385a:	add.w	r9, r1, ip, lsl #3
    385e:	orrs	r2, r3
    3860:	sub.w	r3, r9, #8
    3864:	str	r3, [r4, #12]
    3866:	str	r2, [r1, #4]
    3868:	str.w	r4, [r1, ip, lsl #3]
    386c:	str.w	r4, [r8, #12]
    3870:	asrs	r3, r0, #2
    3872:	movs	r4, #1
    3874:	lsls	r4, r3
    3876:	cmp	r4, r2
    3878:	bhi.w	3990 <_malloc_r+0x1f0>
    387c:	tst	r4, r2
    387e:	bne.n	388e <_malloc_r+0xee>
    3880:	bic.w	r0, r0, #3
    3884:	lsls	r4, r4, #1
    3886:	tst	r4, r2
    3888:	add.w	r0, r0, #4
    388c:	beq.n	3884 <_malloc_r+0xe4>
    388e:	add.w	r9, r7, r0, lsl #3
    3892:	mov	ip, r9
    3894:	mov	r8, r0
    3896:	ldr.w	r1, [ip, #12]
    389a:	cmp	ip, r1
    389c:	bne.n	38ae <_malloc_r+0x10e>
    389e:	b.n	3b88 <_malloc_r+0x3e8>
    38a0:	cmp	r2, #0
    38a2:	bge.w	3ba8 <_malloc_r+0x408>
    38a6:	ldr	r1, [r1, #12]
    38a8:	cmp	ip, r1
    38aa:	beq.w	3b88 <_malloc_r+0x3e8>
    38ae:	ldr	r3, [r1, #4]
    38b0:	bic.w	r3, r3, #3
    38b4:	subs	r2, r3, r5
    38b6:	cmp	r2, #15
    38b8:	ble.n	38a0 <_malloc_r+0x100>
    38ba:	mov	r4, r1
    38bc:	ldr.w	ip, [r1, #12]
    38c0:	ldr.w	r8, [r4, #8]!
    38c4:	adds	r3, r1, r5
    38c6:	orr.w	r5, r5, #1
    38ca:	str	r5, [r1, #4]
    38cc:	orr.w	r1, r2, #1
    38d0:	str.w	ip, [r8, #12]
    38d4:	mov	r0, r6
    38d6:	str.w	r8, [ip, #8]
    38da:	str	r3, [r7, #20]
    38dc:	str	r3, [r7, #16]
    38de:	str.w	lr, [r3, #12]
    38e2:	str.w	lr, [r3, #8]
    38e6:	str	r1, [r3, #4]
    38e8:	str	r2, [r3, r2]
    38ea:	bl	3db0 <__malloc_unlock>
    38ee:	b.n	3930 <_malloc_r+0x190>
    38f0:	cmp	r1, #16
    38f2:	bhi.n	3938 <_malloc_r+0x198>
    38f4:	bl	3dac <__malloc_lock>
    38f8:	movs	r5, #16
    38fa:	movs	r3, #6
    38fc:	movs	r0, #2
    38fe:	ldr	r7, [pc, #504]	; (3af8 <_malloc_r+0x358>)
    3900:	add.w	r3, r7, r3, lsl #2
    3904:	sub.w	r2, r3, #8
    3908:	ldr	r4, [r3, #4]
    390a:	cmp	r4, r2
    390c:	beq.w	3b9a <_malloc_r+0x3fa>
    3910:	ldr	r3, [r4, #4]
    3912:	ldr	r1, [r4, #12]
    3914:	ldr	r5, [r4, #8]
    3916:	bic.w	r3, r3, #3
    391a:	add	r3, r4
    391c:	mov	r0, r6
    391e:	ldr	r2, [r3, #4]
    3920:	str	r1, [r5, #12]
    3922:	orr.w	r2, r2, #1
    3926:	str	r5, [r1, #8]
    3928:	str	r2, [r3, #4]
    392a:	bl	3db0 <__malloc_unlock>
    392e:	adds	r4, #8
    3930:	mov	r0, r4
    3932:	add	sp, #12
    3934:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3938:	movs	r4, #0
    393a:	movs	r3, #12
    393c:	mov	r0, r4
    393e:	str	r3, [r6, #0]
    3940:	add	sp, #12
    3942:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3946:	movs	r3, #128	; 0x80
    3948:	mov.w	lr, #64	; 0x40
    394c:	movs	r0, #63	; 0x3f
    394e:	b.n	37e4 <_malloc_r+0x44>
    3950:	mov	r0, lr
    3952:	b.n	3810 <_malloc_r+0x70>
    3954:	add	r3, r4
    3956:	ldr	r1, [r4, #12]
    3958:	ldr	r2, [r3, #4]
    395a:	ldr	r5, [r4, #8]
    395c:	orr.w	r2, r2, #1
    3960:	str	r1, [r5, #12]
    3962:	mov	r0, r6
    3964:	str	r5, [r1, #8]
    3966:	str	r2, [r3, #4]
    3968:	bl	3db0 <__malloc_unlock>
    396c:	adds	r4, #8
    396e:	mov	r0, r4
    3970:	add	sp, #12
    3972:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3976:	add	r3, r4
    3978:	mov	r0, r6
    397a:	ldr	r2, [r3, #4]
    397c:	orr.w	r2, r2, #1
    3980:	str	r2, [r3, #4]
    3982:	bl	3db0 <__malloc_unlock>
    3986:	adds	r4, #8
    3988:	mov	r0, r4
    398a:	add	sp, #12
    398c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3990:	ldr	r4, [r7, #8]
    3992:	ldr	r3, [r4, #4]
    3994:	bic.w	r8, r3, #3
    3998:	cmp	r8, r5
    399a:	bcc.n	39a6 <_malloc_r+0x206>
    399c:	rsb	r3, r5, r8
    39a0:	cmp	r3, #15
    39a2:	bgt.w	3abe <_malloc_r+0x31e>
    39a6:	ldr	r3, [pc, #340]	; (3afc <_malloc_r+0x35c>)
    39a8:	ldr.w	r9, [pc, #352]	; 3b0c <_malloc_r+0x36c>
    39ac:	ldr	r2, [r3, #0]
    39ae:	ldr.w	r3, [r9]
    39b2:	adds	r3, #1
    39b4:	add	r2, r5
    39b6:	add.w	sl, r4, r8
    39ba:	beq.w	3c7e <_malloc_r+0x4de>
    39be:	add.w	r2, r2, #4096	; 0x1000
    39c2:	adds	r2, #15
    39c4:	bic.w	r2, r2, #4080	; 0xff0
    39c8:	bic.w	r2, r2, #15
    39cc:	mov	r1, r2
    39ce:	mov	r0, r6
    39d0:	str	r2, [sp, #4]
    39d2:	bl	3db4 <_sbrk_r>
    39d6:	cmp.w	r0, #4294967295
    39da:	mov	fp, r0
    39dc:	ldr	r2, [sp, #4]
    39de:	beq.w	3c92 <_malloc_r+0x4f2>
    39e2:	cmp	sl, r0
    39e4:	bhi.w	3be0 <_malloc_r+0x440>
    39e8:	ldr	r3, [pc, #276]	; (3b00 <_malloc_r+0x360>)
    39ea:	ldr	r1, [r3, #0]
    39ec:	cmp	sl, fp
    39ee:	add	r1, r2
    39f0:	str	r1, [r3, #0]
    39f2:	beq.w	3c9c <_malloc_r+0x4fc>
    39f6:	ldr.w	r0, [r9]
    39fa:	ldr.w	lr, [pc, #272]	; 3b0c <_malloc_r+0x36c>
    39fe:	adds	r0, #1
    3a00:	ittet	ne
    3a02:	rsbne	sl, sl, fp
    3a06:	addne	r1, sl
    3a08:	streq.w	fp, [lr]
    3a0c:	strne	r1, [r3, #0]
    3a0e:	ands.w	r1, fp, #7
    3a12:	beq.w	3c44 <_malloc_r+0x4a4>
    3a16:	rsb	r0, r1, #8
    3a1a:	rsb	r1, r1, #4096	; 0x1000
    3a1e:	add	fp, r0
    3a20:	adds	r1, #8
    3a22:	add	r2, fp
    3a24:	ubfx	r2, r2, #0, #12
    3a28:	rsb	r9, r2, r1
    3a2c:	mov	r1, r9
    3a2e:	mov	r0, r6
    3a30:	str	r3, [sp, #4]
    3a32:	bl	3db4 <_sbrk_r>
    3a36:	adds	r3, r0, #1
    3a38:	ldr	r3, [sp, #4]
    3a3a:	beq.w	3cbc <_malloc_r+0x51c>
    3a3e:	rsb	r2, fp, r0
    3a42:	add	r2, r9
    3a44:	orr.w	r2, r2, #1
    3a48:	ldr	r1, [r3, #0]
    3a4a:	str.w	fp, [r7, #8]
    3a4e:	add	r1, r9
    3a50:	cmp	r4, r7
    3a52:	str.w	r2, [fp, #4]
    3a56:	str	r1, [r3, #0]
    3a58:	ldr.w	r9, [pc, #164]	; 3b00 <_malloc_r+0x360>
    3a5c:	beq.n	3a8c <_malloc_r+0x2ec>
    3a5e:	cmp.w	r8, #15
    3a62:	bls.w	3c60 <_malloc_r+0x4c0>
    3a66:	ldr	r2, [r4, #4]
    3a68:	sub.w	r3, r8, #12
    3a6c:	bic.w	r3, r3, #7
    3a70:	adds	r0, r4, r3
    3a72:	and.w	r2, r2, #1
    3a76:	mov.w	lr, #5
    3a7a:	orrs	r2, r3
    3a7c:	cmp	r3, #15
    3a7e:	str	r2, [r4, #4]
    3a80:	str.w	lr, [r0, #4]
    3a84:	str.w	lr, [r0, #8]
    3a88:	bhi.w	3cc4 <_malloc_r+0x524>
    3a8c:	ldr	r3, [pc, #116]	; (3b04 <_malloc_r+0x364>)
    3a8e:	ldr	r4, [r7, #8]
    3a90:	ldr	r2, [r3, #0]
    3a92:	cmp	r1, r2
    3a94:	it	hi
    3a96:	strhi	r1, [r3, #0]
    3a98:	ldr	r3, [pc, #108]	; (3b08 <_malloc_r+0x368>)
    3a9a:	ldr	r2, [r3, #0]
    3a9c:	cmp	r1, r2
    3a9e:	ldr	r2, [r4, #4]
    3aa0:	it	hi
    3aa2:	strhi	r1, [r3, #0]
    3aa4:	bic.w	r2, r2, #3
    3aa8:	cmp	r5, r2
    3aaa:	sub.w	r3, r2, r5
    3aae:	bhi.n	3ab4 <_malloc_r+0x314>
    3ab0:	cmp	r3, #15
    3ab2:	bgt.n	3abe <_malloc_r+0x31e>
    3ab4:	mov	r0, r6
    3ab6:	bl	3db0 <__malloc_unlock>
    3aba:	movs	r4, #0
    3abc:	b.n	3930 <_malloc_r+0x190>
    3abe:	adds	r2, r4, r5
    3ac0:	orr.w	r3, r3, #1
    3ac4:	orr.w	r5, r5, #1
    3ac8:	str	r5, [r4, #4]
    3aca:	mov	r0, r6
    3acc:	str	r2, [r7, #8]
    3ace:	str	r3, [r2, #4]
    3ad0:	bl	3db0 <__malloc_unlock>
    3ad4:	adds	r4, #8
    3ad6:	mov	r0, r4
    3ad8:	add	sp, #12
    3ada:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ade:	cmp	r3, #20
    3ae0:	bls.n	3bc6 <_malloc_r+0x426>
    3ae2:	cmp	r3, #84	; 0x54
    3ae4:	bhi.w	3c30 <_malloc_r+0x490>
    3ae8:	lsrs	r0, r5, #12
    3aea:	add.w	lr, r0, #111	; 0x6f
    3aee:	mov.w	r3, lr, lsl #1
    3af2:	adds	r0, #110	; 0x6e
    3af4:	b.n	37e4 <_malloc_r+0x44>
    3af6:	nop
    3af8:	.word	0x1fff1184
    3afc:	.word	0x1fff1a50
    3b00:	.word	0x1fff1a54
    3b04:	.word	0x1fff1a4c
    3b08:	.word	0x1fff1a48
    3b0c:	.word	0x1fff1590
    3b10:	lsrs	r2, r3, #9
    3b12:	cmp	r2, #4
    3b14:	bls.n	3bd4 <_malloc_r+0x434>
    3b16:	cmp	r2, #20
    3b18:	bhi.w	3c82 <_malloc_r+0x4e2>
    3b1c:	add.w	r1, r2, #92	; 0x5c
    3b20:	lsls	r1, r1, #1
    3b22:	adds	r2, #91	; 0x5b
    3b24:	add.w	ip, r7, r1, lsl #2
    3b28:	ldr.w	r1, [r7, r1, lsl #2]
    3b2c:	ldr.w	r8, [pc, #476]	; 3d0c <_malloc_r+0x56c>
    3b30:	sub.w	ip, ip, #8
    3b34:	cmp	ip, r1
    3b36:	beq.w	3c4a <_malloc_r+0x4aa>
    3b3a:	ldr	r2, [r1, #4]
    3b3c:	bic.w	r2, r2, #3
    3b40:	cmp	r3, r2
    3b42:	bcs.n	3b4a <_malloc_r+0x3aa>
    3b44:	ldr	r1, [r1, #8]
    3b46:	cmp	ip, r1
    3b48:	bne.n	3b3a <_malloc_r+0x39a>
    3b4a:	ldr.w	ip, [r1, #12]
    3b4e:	ldr	r2, [r7, #4]
    3b50:	str.w	ip, [r4, #12]
    3b54:	str	r1, [r4, #8]
    3b56:	str.w	r4, [ip, #8]
    3b5a:	str	r4, [r1, #12]
    3b5c:	b.n	3870 <_malloc_r+0xd0>
    3b5e:	adds	r3, r4, r5
    3b60:	orr.w	r7, r2, #1
    3b64:	orr.w	r5, r5, #1
    3b68:	str	r5, [r4, #4]
    3b6a:	mov	r0, r6
    3b6c:	str	r3, [r1, #20]
    3b6e:	str	r3, [r1, #16]
    3b70:	str.w	lr, [r3, #12]
    3b74:	str.w	lr, [r3, #8]
    3b78:	str	r7, [r3, #4]
    3b7a:	str	r2, [r3, r2]
    3b7c:	adds	r4, #8
    3b7e:	bl	3db0 <__malloc_unlock>
    3b82:	b.n	3930 <_malloc_r+0x190>
    3b84:	ldr	r2, [r1, #4]
    3b86:	b.n	3870 <_malloc_r+0xd0>
    3b88:	add.w	r8, r8, #1
    3b8c:	tst.w	r8, #3
    3b90:	add.w	ip, ip, #8
    3b94:	bne.w	3896 <_malloc_r+0xf6>
    3b98:	b.n	3bfc <_malloc_r+0x45c>
    3b9a:	ldr	r4, [r3, #12]
    3b9c:	cmp	r3, r4
    3b9e:	it	eq
    3ba0:	addeq	r0, #2
    3ba2:	beq.w	3810 <_malloc_r+0x70>
    3ba6:	b.n	3910 <_malloc_r+0x170>
    3ba8:	add	r3, r1
    3baa:	mov	r4, r1
    3bac:	ldr	r2, [r3, #4]
    3bae:	ldr	r1, [r1, #12]
    3bb0:	ldr.w	r5, [r4, #8]!
    3bb4:	orr.w	r2, r2, #1
    3bb8:	str	r2, [r3, #4]
    3bba:	mov	r0, r6
    3bbc:	str	r1, [r5, #12]
    3bbe:	str	r5, [r1, #8]
    3bc0:	bl	3db0 <__malloc_unlock>
    3bc4:	b.n	3930 <_malloc_r+0x190>
    3bc6:	add.w	lr, r3, #92	; 0x5c
    3bca:	add.w	r0, r3, #91	; 0x5b
    3bce:	mov.w	r3, lr, lsl #1
    3bd2:	b.n	37e4 <_malloc_r+0x44>
    3bd4:	lsrs	r2, r3, #6
    3bd6:	add.w	r1, r2, #57	; 0x39
    3bda:	lsls	r1, r1, #1
    3bdc:	adds	r2, #56	; 0x38
    3bde:	b.n	3b24 <_malloc_r+0x384>
    3be0:	cmp	r4, r7
    3be2:	ldr	r3, [pc, #296]	; (3d0c <_malloc_r+0x56c>)
    3be4:	beq.w	39e8 <_malloc_r+0x248>
    3be8:	ldr	r4, [r3, #8]
    3bea:	ldr	r2, [r4, #4]
    3bec:	bic.w	r2, r2, #3
    3bf0:	b.n	3aa8 <_malloc_r+0x308>
    3bf2:	ldr.w	r3, [r9], #-8
    3bf6:	cmp	r9, r3
    3bf8:	bne.w	3d00 <_malloc_r+0x560>
    3bfc:	tst.w	r0, #3
    3c00:	add.w	r0, r0, #4294967295
    3c04:	bne.n	3bf2 <_malloc_r+0x452>
    3c06:	ldr	r3, [r7, #4]
    3c08:	bic.w	r3, r3, r4
    3c0c:	str	r3, [r7, #4]
    3c0e:	lsls	r4, r4, #1
    3c10:	cmp	r4, r3
    3c12:	bhi.w	3990 <_malloc_r+0x1f0>
    3c16:	cmp	r4, #0
    3c18:	beq.w	3990 <_malloc_r+0x1f0>
    3c1c:	tst	r4, r3
    3c1e:	mov	r0, r8
    3c20:	bne.w	388e <_malloc_r+0xee>
    3c24:	lsls	r4, r4, #1
    3c26:	tst	r4, r3
    3c28:	add.w	r0, r0, #4
    3c2c:	beq.n	3c24 <_malloc_r+0x484>
    3c2e:	b.n	388e <_malloc_r+0xee>
    3c30:	cmp.w	r3, #340	; 0x154
    3c34:	bhi.n	3c68 <_malloc_r+0x4c8>
    3c36:	lsrs	r0, r5, #15
    3c38:	add.w	lr, r0, #120	; 0x78
    3c3c:	mov.w	r3, lr, lsl #1
    3c40:	adds	r0, #119	; 0x77
    3c42:	b.n	37e4 <_malloc_r+0x44>
    3c44:	mov.w	r1, #4096	; 0x1000
    3c48:	b.n	3a22 <_malloc_r+0x282>
    3c4a:	movs	r1, #1
    3c4c:	ldr.w	r3, [r8, #4]
    3c50:	asrs	r2, r2, #2
    3c52:	lsl.w	r2, r1, r2
    3c56:	orrs	r2, r3
    3c58:	str.w	r2, [r8, #4]
    3c5c:	mov	r1, ip
    3c5e:	b.n	3b50 <_malloc_r+0x3b0>
    3c60:	movs	r3, #1
    3c62:	str.w	r3, [fp, #4]
    3c66:	b.n	3ab4 <_malloc_r+0x314>
    3c68:	movw	r2, #1364	; 0x554
    3c6c:	cmp	r3, r2
    3c6e:	bhi.n	3cb2 <_malloc_r+0x512>
    3c70:	lsrs	r0, r5, #18
    3c72:	add.w	lr, r0, #125	; 0x7d
    3c76:	mov.w	r3, lr, lsl #1
    3c7a:	adds	r0, #124	; 0x7c
    3c7c:	b.n	37e4 <_malloc_r+0x44>
    3c7e:	adds	r2, #16
    3c80:	b.n	39cc <_malloc_r+0x22c>
    3c82:	cmp	r2, #84	; 0x54
    3c84:	bhi.n	3cd4 <_malloc_r+0x534>
    3c86:	lsrs	r2, r3, #12
    3c88:	add.w	r1, r2, #111	; 0x6f
    3c8c:	lsls	r1, r1, #1
    3c8e:	adds	r2, #110	; 0x6e
    3c90:	b.n	3b24 <_malloc_r+0x384>
    3c92:	ldr	r4, [r7, #8]
    3c94:	ldr	r2, [r4, #4]
    3c96:	bic.w	r2, r2, #3
    3c9a:	b.n	3aa8 <_malloc_r+0x308>
    3c9c:	ubfx	r0, sl, #0, #12
    3ca0:	cmp	r0, #0
    3ca2:	bne.w	39f6 <_malloc_r+0x256>
    3ca6:	add	r2, r8
    3ca8:	ldr	r3, [r7, #8]
    3caa:	orr.w	r2, r2, #1
    3cae:	str	r2, [r3, #4]
    3cb0:	b.n	3a8c <_malloc_r+0x2ec>
    3cb2:	movs	r3, #254	; 0xfe
    3cb4:	mov.w	lr, #127	; 0x7f
    3cb8:	movs	r0, #126	; 0x7e
    3cba:	b.n	37e4 <_malloc_r+0x44>
    3cbc:	movs	r2, #1
    3cbe:	mov.w	r9, #0
    3cc2:	b.n	3a48 <_malloc_r+0x2a8>
    3cc4:	add.w	r1, r4, #8
    3cc8:	mov	r0, r6
    3cca:	bl	3ebc <_free_r>
    3cce:	ldr.w	r1, [r9]
    3cd2:	b.n	3a8c <_malloc_r+0x2ec>
    3cd4:	cmp.w	r2, #340	; 0x154
    3cd8:	bhi.n	3ce6 <_malloc_r+0x546>
    3cda:	lsrs	r2, r3, #15
    3cdc:	add.w	r1, r2, #120	; 0x78
    3ce0:	lsls	r1, r1, #1
    3ce2:	adds	r2, #119	; 0x77
    3ce4:	b.n	3b24 <_malloc_r+0x384>
    3ce6:	movw	r1, #1364	; 0x554
    3cea:	cmp	r2, r1
    3cec:	bhi.n	3cfa <_malloc_r+0x55a>
    3cee:	lsrs	r2, r3, #18
    3cf0:	add.w	r1, r2, #125	; 0x7d
    3cf4:	lsls	r1, r1, #1
    3cf6:	adds	r2, #124	; 0x7c
    3cf8:	b.n	3b24 <_malloc_r+0x384>
    3cfa:	movs	r1, #254	; 0xfe
    3cfc:	movs	r2, #126	; 0x7e
    3cfe:	b.n	3b24 <_malloc_r+0x384>
    3d00:	ldr	r3, [r7, #4]
    3d02:	b.n	3c0e <_malloc_r+0x46e>
    3d04:	lsrs	r0, r5, #3
    3d06:	adds	r3, r0, #1
    3d08:	lsls	r3, r3, #1
    3d0a:	b.n	38fe <_malloc_r+0x15e>
    3d0c:	.word	0x1fff1184

00003d10 <memset>:
    3d10:	push	{r4, r5, r6}
    3d12:	lsls	r4, r0, #30
    3d14:	beq.n	3da4 <memset+0x94>
    3d16:	subs	r4, r2, #1
    3d18:	cmp	r2, #0
    3d1a:	beq.n	3da0 <memset+0x90>
    3d1c:	uxtb	r5, r1
    3d1e:	mov	r3, r0
    3d20:	b.n	3d28 <memset+0x18>
    3d22:	subs	r2, r4, #1
    3d24:	cbz	r4, 3da0 <memset+0x90>
    3d26:	mov	r4, r2
    3d28:	strb.w	r5, [r3], #1
    3d2c:	lsls	r2, r3, #30
    3d2e:	bne.n	3d22 <memset+0x12>
    3d30:	cmp	r4, #3
    3d32:	bls.n	3d92 <memset+0x82>
    3d34:	uxtb	r5, r1
    3d36:	orr.w	r5, r5, r5, lsl #8
    3d3a:	cmp	r4, #15
    3d3c:	orr.w	r5, r5, r5, lsl #16
    3d40:	bls.n	3d76 <memset+0x66>
    3d42:	add.w	r2, r3, #16
    3d46:	mov	r6, r4
    3d48:	subs	r6, #16
    3d4a:	cmp	r6, #15
    3d4c:	str.w	r5, [r2, #-16]
    3d50:	str.w	r5, [r2, #-12]
    3d54:	str.w	r5, [r2, #-8]
    3d58:	str.w	r5, [r2, #-4]
    3d5c:	add.w	r2, r2, #16
    3d60:	bhi.n	3d48 <memset+0x38>
    3d62:	sub.w	r2, r4, #16
    3d66:	bic.w	r2, r2, #15
    3d6a:	and.w	r4, r4, #15
    3d6e:	adds	r2, #16
    3d70:	cmp	r4, #3
    3d72:	add	r3, r2
    3d74:	bls.n	3d92 <memset+0x82>
    3d76:	mov	r6, r3
    3d78:	mov	r2, r4
    3d7a:	subs	r2, #4
    3d7c:	cmp	r2, #3
    3d7e:	str.w	r5, [r6], #4
    3d82:	bhi.n	3d7a <memset+0x6a>
    3d84:	subs	r2, r4, #4
    3d86:	bic.w	r2, r2, #3
    3d8a:	adds	r2, #4
    3d8c:	add	r3, r2
    3d8e:	and.w	r4, r4, #3
    3d92:	cbz	r4, 3da0 <memset+0x90>
    3d94:	uxtb	r1, r1
    3d96:	add	r4, r3
    3d98:	strb.w	r1, [r3], #1
    3d9c:	cmp	r3, r4
    3d9e:	bne.n	3d98 <memset+0x88>
    3da0:	pop	{r4, r5, r6}
    3da2:	bx	lr
    3da4:	mov	r4, r2
    3da6:	mov	r3, r0
    3da8:	b.n	3d30 <memset+0x20>
    3daa:	nop

00003dac <__malloc_lock>:
    3dac:	bx	lr
    3dae:	nop

00003db0 <__malloc_unlock>:
    3db0:	bx	lr
    3db2:	nop

00003db4 <_sbrk_r>:
    3db4:	push	{r3, r4, r5, lr}
    3db6:	ldr	r4, [pc, #28]	; (3dd4 <_sbrk_r+0x20>)
    3db8:	movs	r3, #0
    3dba:	mov	r5, r0
    3dbc:	mov	r0, r1
    3dbe:	str	r3, [r4, #0]
    3dc0:	bl	30ac <_sbrk>
    3dc4:	adds	r3, r0, #1
    3dc6:	beq.n	3dca <_sbrk_r+0x16>
    3dc8:	pop	{r3, r4, r5, pc}
    3dca:	ldr	r3, [r4, #0]
    3dcc:	cmp	r3, #0
    3dce:	beq.n	3dc8 <_sbrk_r+0x14>
    3dd0:	str	r3, [r5, #0]
    3dd2:	pop	{r3, r4, r5, pc}
    3dd4:	.word	0x1fff1bc0

00003dd8 <register_fini>:
    3dd8:	ldr	r3, [pc, #8]	; (3de4 <register_fini+0xc>)
    3dda:	cbz	r3, 3de2 <register_fini+0xa>
    3ddc:	ldr	r0, [pc, #8]	; (3de8 <register_fini+0x10>)
    3dde:	b.w	3dec <atexit>
    3de2:	bx	lr
    3de4:	.word	0x00000000
    3de8:	.word	0x00003df9

00003dec <atexit>:
    3dec:	movs	r3, #0
    3dee:	mov	r1, r0
    3df0:	mov	r2, r3
    3df2:	mov	r0, r3
    3df4:	b.w	408c <__register_exitproc>

00003df8 <__libc_fini_array>:
    3df8:	push	{r3, r4, r5, lr}
    3dfa:	ldr	r5, [pc, #28]	; (3e18 <__libc_fini_array+0x20>)
    3dfc:	ldr	r4, [pc, #28]	; (3e1c <__libc_fini_array+0x24>)
    3dfe:	subs	r4, r5, r4
    3e00:	asrs	r4, r4, #2
    3e02:	beq.n	3e10 <__libc_fini_array+0x18>
    3e04:	subs	r4, #1
    3e06:	ldr.w	r3, [r5, #-4]!
    3e0a:	blx	r3
    3e0c:	cmp	r4, #0
    3e0e:	bne.n	3e04 <__libc_fini_array+0xc>
    3e10:	ldmia.w	sp!, {r3, r4, r5, lr}
    3e14:	b.w	4464 <__init_array_end>
	...

00003e20 <_malloc_trim_r>:
    3e20:	push	{r3, r4, r5, r6, r7, lr}
    3e22:	ldr	r7, [pc, #140]	; (3eb0 <_malloc_trim_r+0x90>)
    3e24:	mov	r4, r1
    3e26:	mov	r6, r0
    3e28:	bl	3dac <__malloc_lock>
    3e2c:	ldr	r3, [r7, #8]
    3e2e:	ldr	r5, [r3, #4]
    3e30:	bic.w	r5, r5, #3
    3e34:	subs	r1, r5, r4
    3e36:	addw	r1, r1, #4079	; 0xfef
    3e3a:	bic.w	r1, r1, #4080	; 0xff0
    3e3e:	bic.w	r1, r1, #15
    3e42:	sub.w	r4, r1, #4096	; 0x1000
    3e46:	cmp.w	r4, #4096	; 0x1000
    3e4a:	blt.n	3e5c <_malloc_trim_r+0x3c>
    3e4c:	movs	r1, #0
    3e4e:	mov	r0, r6
    3e50:	bl	3db4 <_sbrk_r>
    3e54:	ldr	r3, [r7, #8]
    3e56:	add	r3, r5
    3e58:	cmp	r0, r3
    3e5a:	beq.n	3e66 <_malloc_trim_r+0x46>
    3e5c:	mov	r0, r6
    3e5e:	bl	3db0 <__malloc_unlock>
    3e62:	movs	r0, #0
    3e64:	pop	{r3, r4, r5, r6, r7, pc}
    3e66:	negs	r1, r4
    3e68:	mov	r0, r6
    3e6a:	bl	3db4 <_sbrk_r>
    3e6e:	adds	r0, #1
    3e70:	beq.n	3e8e <_malloc_trim_r+0x6e>
    3e72:	ldr	r3, [pc, #64]	; (3eb4 <_malloc_trim_r+0x94>)
    3e74:	ldr	r2, [r7, #8]
    3e76:	ldr	r1, [r3, #0]
    3e78:	subs	r5, r5, r4
    3e7a:	orr.w	r5, r5, #1
    3e7e:	mov	r0, r6
    3e80:	subs	r1, r1, r4
    3e82:	str	r5, [r2, #4]
    3e84:	str	r1, [r3, #0]
    3e86:	bl	3db0 <__malloc_unlock>
    3e8a:	movs	r0, #1
    3e8c:	pop	{r3, r4, r5, r6, r7, pc}
    3e8e:	movs	r1, #0
    3e90:	mov	r0, r6
    3e92:	bl	3db4 <_sbrk_r>
    3e96:	ldr	r2, [r7, #8]
    3e98:	subs	r3, r0, r2
    3e9a:	cmp	r3, #15
    3e9c:	ble.n	3e5c <_malloc_trim_r+0x3c>
    3e9e:	ldr	r4, [pc, #24]	; (3eb8 <_malloc_trim_r+0x98>)
    3ea0:	ldr	r1, [pc, #16]	; (3eb4 <_malloc_trim_r+0x94>)
    3ea2:	ldr	r4, [r4, #0]
    3ea4:	orr.w	r3, r3, #1
    3ea8:	subs	r0, r0, r4
    3eaa:	str	r3, [r2, #4]
    3eac:	str	r0, [r1, #0]
    3eae:	b.n	3e5c <_malloc_trim_r+0x3c>
    3eb0:	.word	0x1fff1184
    3eb4:	.word	0x1fff1a54
    3eb8:	.word	0x1fff1590

00003ebc <_free_r>:
    3ebc:	cmp	r1, #0
    3ebe:	beq.n	3f4c <_free_r+0x90>
    3ec0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ec4:	mov	r5, r1
    3ec6:	mov	r8, r0
    3ec8:	bl	3dac <__malloc_lock>
    3ecc:	ldr.w	r7, [r5, #-4]
    3ed0:	ldr	r1, [pc, #424]	; (407c <_free_r+0x1c0>)
    3ed2:	bic.w	r3, r7, #1
    3ed6:	sub.w	r4, r5, #8
    3eda:	adds	r2, r4, r3
    3edc:	ldr	r6, [r1, #8]
    3ede:	ldr	r0, [r2, #4]
    3ee0:	cmp	r2, r6
    3ee2:	bic.w	r0, r0, #3
    3ee6:	beq.n	3fae <_free_r+0xf2>
    3ee8:	lsls	r6, r7, #31
    3eea:	str	r0, [r2, #4]
    3eec:	bmi.n	3f06 <_free_r+0x4a>
    3eee:	ldr.w	r7, [r5, #-8]
    3ef2:	subs	r4, r4, r7
    3ef4:	add.w	lr, r1, #8
    3ef8:	ldr	r5, [r4, #8]
    3efa:	cmp	r5, lr
    3efc:	add	r3, r7
    3efe:	beq.n	3fe0 <_free_r+0x124>
    3f00:	ldr	r7, [r4, #12]
    3f02:	str	r7, [r5, #12]
    3f04:	str	r5, [r7, #8]
    3f06:	adds	r5, r2, r0
    3f08:	ldr	r5, [r5, #4]
    3f0a:	lsls	r5, r5, #31
    3f0c:	bpl.n	3f94 <_free_r+0xd8>
    3f0e:	orr.w	r2, r3, #1
    3f12:	str	r2, [r4, #4]
    3f14:	str	r3, [r4, r3]
    3f16:	cmp.w	r3, #512	; 0x200
    3f1a:	bcs.n	3f4e <_free_r+0x92>
    3f1c:	lsrs	r3, r3, #3
    3f1e:	adds	r2, r3, #1
    3f20:	ldr	r5, [r1, #4]
    3f22:	ldr.w	r7, [r1, r2, lsl #3]
    3f26:	str	r7, [r4, #8]
    3f28:	movs	r0, #1
    3f2a:	asrs	r3, r3, #2
    3f2c:	lsl.w	r3, r0, r3
    3f30:	add.w	r0, r1, r2, lsl #3
    3f34:	orrs	r5, r3
    3f36:	subs	r0, #8
    3f38:	str	r0, [r4, #12]
    3f3a:	str	r5, [r1, #4]
    3f3c:	str.w	r4, [r1, r2, lsl #3]
    3f40:	str	r4, [r7, #12]
    3f42:	mov	r0, r8
    3f44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f48:	b.w	3db0 <__malloc_unlock>
    3f4c:	bx	lr
    3f4e:	lsrs	r2, r3, #9
    3f50:	cmp	r2, #4
    3f52:	bhi.n	3ffc <_free_r+0x140>
    3f54:	lsrs	r2, r3, #6
    3f56:	add.w	r7, r2, #57	; 0x39
    3f5a:	lsls	r7, r7, #1
    3f5c:	add.w	r5, r2, #56	; 0x38
    3f60:	add.w	r0, r1, r7, lsl #2
    3f64:	ldr.w	r2, [r1, r7, lsl #2]
    3f68:	ldr	r1, [pc, #272]	; (407c <_free_r+0x1c0>)
    3f6a:	subs	r0, #8
    3f6c:	cmp	r0, r2
    3f6e:	beq.n	400c <_free_r+0x150>
    3f70:	ldr	r1, [r2, #4]
    3f72:	bic.w	r1, r1, #3
    3f76:	cmp	r3, r1
    3f78:	bcs.n	3f80 <_free_r+0xc4>
    3f7a:	ldr	r2, [r2, #8]
    3f7c:	cmp	r0, r2
    3f7e:	bne.n	3f70 <_free_r+0xb4>
    3f80:	ldr	r0, [r2, #12]
    3f82:	str	r0, [r4, #12]
    3f84:	str	r2, [r4, #8]
    3f86:	str	r4, [r0, #8]
    3f88:	str	r4, [r2, #12]
    3f8a:	mov	r0, r8
    3f8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f90:	b.w	3db0 <__malloc_unlock>
    3f94:	ldr	r5, [r2, #8]
    3f96:	ldr	r7, [pc, #232]	; (4080 <_free_r+0x1c4>)
    3f98:	cmp	r5, r7
    3f9a:	add	r3, r0
    3f9c:	beq.n	401e <_free_r+0x162>
    3f9e:	ldr	r0, [r2, #12]
    3fa0:	str	r0, [r5, #12]
    3fa2:	orr.w	r2, r3, #1
    3fa6:	str	r5, [r0, #8]
    3fa8:	str	r2, [r4, #4]
    3faa:	str	r3, [r4, r3]
    3fac:	b.n	3f16 <_free_r+0x5a>
    3fae:	lsls	r7, r7, #31
    3fb0:	add	r3, r0
    3fb2:	bmi.n	3fc4 <_free_r+0x108>
    3fb4:	ldr.w	r2, [r5, #-8]
    3fb8:	subs	r4, r4, r2
    3fba:	add	r3, r2
    3fbc:	ldr	r0, [r4, #8]
    3fbe:	ldr	r2, [r4, #12]
    3fc0:	str	r2, [r0, #12]
    3fc2:	str	r0, [r2, #8]
    3fc4:	ldr	r2, [pc, #188]	; (4084 <_free_r+0x1c8>)
    3fc6:	ldr	r2, [r2, #0]
    3fc8:	orr.w	r0, r3, #1
    3fcc:	cmp	r3, r2
    3fce:	str	r0, [r4, #4]
    3fd0:	str	r4, [r1, #8]
    3fd2:	bcc.n	3f42 <_free_r+0x86>
    3fd4:	ldr	r3, [pc, #176]	; (4088 <_free_r+0x1cc>)
    3fd6:	mov	r0, r8
    3fd8:	ldr	r1, [r3, #0]
    3fda:	bl	3e20 <_malloc_trim_r>
    3fde:	b.n	3f42 <_free_r+0x86>
    3fe0:	adds	r1, r2, r0
    3fe2:	ldr	r1, [r1, #4]
    3fe4:	lsls	r1, r1, #31
    3fe6:	bmi.n	4072 <_free_r+0x1b6>
    3fe8:	ldr	r1, [r2, #8]
    3fea:	ldr	r2, [r2, #12]
    3fec:	str	r2, [r1, #12]
    3fee:	add	r3, r0
    3ff0:	orr.w	r0, r3, #1
    3ff4:	str	r1, [r2, #8]
    3ff6:	str	r0, [r4, #4]
    3ff8:	str	r3, [r4, r3]
    3ffa:	b.n	3f42 <_free_r+0x86>
    3ffc:	cmp	r2, #20
    3ffe:	bhi.n	4030 <_free_r+0x174>
    4000:	add.w	r7, r2, #92	; 0x5c
    4004:	lsls	r7, r7, #1
    4006:	add.w	r5, r2, #91	; 0x5b
    400a:	b.n	3f60 <_free_r+0xa4>
    400c:	asrs	r2, r5, #2
    400e:	ldr	r3, [r1, #4]
    4010:	movs	r5, #1
    4012:	lsl.w	r2, r5, r2
    4016:	orrs	r3, r2
    4018:	str	r3, [r1, #4]
    401a:	mov	r2, r0
    401c:	b.n	3f82 <_free_r+0xc6>
    401e:	orr.w	r2, r3, #1
    4022:	str	r4, [r1, #20]
    4024:	str	r4, [r1, #16]
    4026:	str	r5, [r4, #12]
    4028:	str	r5, [r4, #8]
    402a:	str	r2, [r4, #4]
    402c:	str	r3, [r4, r3]
    402e:	b.n	3f42 <_free_r+0x86>
    4030:	cmp	r2, #84	; 0x54
    4032:	bhi.n	4042 <_free_r+0x186>
    4034:	lsrs	r2, r3, #12
    4036:	add.w	r7, r2, #111	; 0x6f
    403a:	lsls	r7, r7, #1
    403c:	add.w	r5, r2, #110	; 0x6e
    4040:	b.n	3f60 <_free_r+0xa4>
    4042:	cmp.w	r2, #340	; 0x154
    4046:	bhi.n	4056 <_free_r+0x19a>
    4048:	lsrs	r2, r3, #15
    404a:	add.w	r7, r2, #120	; 0x78
    404e:	lsls	r7, r7, #1
    4050:	add.w	r5, r2, #119	; 0x77
    4054:	b.n	3f60 <_free_r+0xa4>
    4056:	movw	r0, #1364	; 0x554
    405a:	cmp	r2, r0
    405c:	bhi.n	406c <_free_r+0x1b0>
    405e:	lsrs	r2, r3, #18
    4060:	add.w	r7, r2, #125	; 0x7d
    4064:	lsls	r7, r7, #1
    4066:	add.w	r5, r2, #124	; 0x7c
    406a:	b.n	3f60 <_free_r+0xa4>
    406c:	movs	r7, #254	; 0xfe
    406e:	movs	r5, #126	; 0x7e
    4070:	b.n	3f60 <_free_r+0xa4>
    4072:	orr.w	r2, r3, #1
    4076:	str	r2, [r4, #4]
    4078:	str	r3, [r4, r3]
    407a:	b.n	3f42 <_free_r+0x86>
    407c:	.word	0x1fff1184
    4080:	.word	0x1fff118c
    4084:	.word	0x1fff158c
    4088:	.word	0x1fff1a50

0000408c <__register_exitproc>:
    408c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4090:	ldr	r4, [pc, #148]	; (4128 <__register_exitproc+0x9c>)
    4092:	ldr	r5, [r4, #0]
    4094:	ldr.w	r4, [r5, #328]	; 0x148
    4098:	mov	r6, r0
    409a:	mov	r8, r1
    409c:	mov	sl, r2
    409e:	mov	r9, r3
    40a0:	cbz	r4, 4114 <__register_exitproc+0x88>
    40a2:	ldr	r0, [r4, #4]
    40a4:	cmp	r0, #31
    40a6:	bgt.n	40d8 <__register_exitproc+0x4c>
    40a8:	adds	r3, r0, #1
    40aa:	cbz	r6, 40ca <__register_exitproc+0x3e>
    40ac:	add.w	r5, r4, r0, lsl #2
    40b0:	movs	r2, #1
    40b2:	str.w	sl, [r5, #136]	; 0x88
    40b6:	ldr.w	r1, [r4, #392]	; 0x188
    40ba:	lsls	r2, r0
    40bc:	orrs	r1, r2
    40be:	cmp	r6, #2
    40c0:	str.w	r1, [r4, #392]	; 0x188
    40c4:	str.w	r9, [r5, #264]	; 0x108
    40c8:	beq.n	4108 <__register_exitproc+0x7c>
    40ca:	adds	r0, #2
    40cc:	str	r3, [r4, #4]
    40ce:	str.w	r8, [r4, r0, lsl #2]
    40d2:	movs	r0, #0
    40d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    40d8:	ldr	r3, [pc, #80]	; (412c <__register_exitproc+0xa0>)
    40da:	cbz	r3, 411e <__register_exitproc+0x92>
    40dc:	mov.w	r0, #400	; 0x190
    40e0:	bl	3790 <malloc>
    40e4:	mov	r4, r0
    40e6:	cbz	r0, 411e <__register_exitproc+0x92>
    40e8:	ldr.w	r3, [r5, #328]	; 0x148
    40ec:	movs	r7, #0
    40ee:	stmia.w	r0, {r3, r7}
    40f2:	str.w	r4, [r5, #328]	; 0x148
    40f6:	mov	r0, r7
    40f8:	movs	r3, #1
    40fa:	str.w	r7, [r4, #392]	; 0x188
    40fe:	str.w	r7, [r4, #396]	; 0x18c
    4102:	cmp	r6, #0
    4104:	beq.n	40ca <__register_exitproc+0x3e>
    4106:	b.n	40ac <__register_exitproc+0x20>
    4108:	ldr.w	r1, [r4, #396]	; 0x18c
    410c:	orrs	r2, r1
    410e:	str.w	r2, [r4, #396]	; 0x18c
    4112:	b.n	40ca <__register_exitproc+0x3e>
    4114:	add.w	r4, r5, #332	; 0x14c
    4118:	str.w	r4, [r5, #328]	; 0x148
    411c:	b.n	40a2 <__register_exitproc+0x16>
    411e:	mov.w	r0, #4294967295
    4122:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4126:	nop
    4128:	.word	0x00004448
    412c:	.word	0x00003791
    4130:	.word	0x00000024
    4134:	.word	0x00000029
    4138:	.word	0x0000002b
    413c:	.word	0x0000002d
    4140:	.word	0x00000032
    4144:	.word	0x00000034
    4148:	.word	0x00000026
    414c:	.word	0x0000002d
    4150:	.word	0x0000002f
    4154:	.word	0x2077654e
    4158:	.word	0x6c616353
    415c:	.word	0xff003a65
    4160:	.word	0x72727543
    4164:	.word	0x20746e65
    4168:	.word	0x79616c70
    416c:	.word	0x6b636162
    4170:	.word	0x67617020
    4174:	.word	0x00000065

00004178 <pin2sc1a>:
    4178:	................
    4188:	................
    4198:	................
    41a8:	................
    41b8:	........

000041c0 <digital_pin_to_info_PGM>:
    41c0:	@..C@..@D..CD..@
    41d0:	...C...@0..C0..@
    41e0:	4..C4..@...C...@
    41f0:	...C...@...C...@
    4200:	...C...@...C...@
    4210:	...C...@...C...@
    4220:	...C...@...C...@
    4230:	...C...@...C...@
    4240:	...C...@...C...@
    4250:	...C...@...C...@
    4260:	...C...@...C...@
    4270:	...C...@...C...@
    4280:	h .Ch..@...C...@
    4290:	8..C8..@<..C<..@
    42a0:	@..C@..@H..CH..@
    42b0:	L..CL..@(..C(..@
    42c0:	,..C,..@` .C`..@
    42d0:	d .Cd..@ ..C ..@
    42e0:	$..C$..@(..C(..@
    42f0:	,..C,..@D..CD..@
    4300:	p..Cp..@t..Ct..@
    4310:	h..Ch..@P..CP..@
    4320:	X..CX..@\..C\..@
    4330:	T..CT..@ ..C ..@
    4340:	$..C$..@...C...@
    4350:	...C...@8..C8..@
    4360:	4..C4..@0..C0..@
    4370:	<..C<..@,..C,..@
    4380:	( .C(..@, .C,..@
    4390:	. .C...@. .C...@
    43a0:	. .C...@. .C...@
    43b0:	. .C...@. .C...@

000043c0 <vtable for usb_serial_class>:
	...
    43c8:	U,..M,..I,..E,..
    43d8:	A,..=,..9,..5,..
    43e8:	....

000043ec <usb_endpoint_config_table>:
    43ec:	........

000043f4 <usb_descriptor_list>:
    43f4:	....\...........
    4404:	............8...
    4414:	........p.......
    4424:	.... ...........
    4434:	<...............
    4444:	....

00004448 <_global_impure_ptr>:
    4448:	X...

0000444c <_init>:
    444c:	push	{r3, r4, r5, r6, r7, lr}
    444e:	nop
    4450:	pop	{r3, r4, r5, r6, r7}
    4452:	pop	{r3}
    4454:	mov	lr, r3
    4456:	bx	lr

00004458 <__init_array_start>:
    4458:	.word	0x00003dd9

0000445c <__frame_dummy_init_array_entry>:
    445c:	5.......

Disassembly of section .fini:

00004464 <_fini>:
    4464:	push	{r3, r4, r5, r6, r7, lr}
    4466:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004f00 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15b0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003ba0 l     F .text	0000000c startup_default_early_hook
00003bac l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15b0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15b4 l       .bss	00000000 object.8610
00004ef8 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001998 l     F .text	00000220 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff182d l     O .bss	00000001 tx_noautoflush
1fff1830 l     O .bss	00000004 tx_packet
1fff1834 l     O .bss	00000001 transmit_previous_timeout
1fff1838 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001e8c l     F .text	00000144 wait_for_cal
1fff183d l     O .bss	00000001 analog_right_shift
1fff183e l     O .bss	00000001 calibrating
00004c14 l     O .text	00000048 pin2sc1a
1fff0c58 l     O .data	00000001 analog_config_bits
1fff183f l     O .bss	00000001 analogReadBusyADC1
1fff1840 l     O .bss	00000001 analogReadBusyADC0
1fff1841 l     O .bss	00000001 analog_reference_internal
1fff0c59 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000021ac l     F .text	0000004c digitalWrite.part.1
000021f8 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
000024d8 l     F .text	00000048 sysex_byte
1fff185c l     O .bss	00000001 tx_noautoflush
1fff1888 l     O .bss	00000004 tx_packet
1fff188c l     O .bss	00000001 transmit_previous_timeout
1fff1894 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c5c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18a8 l     O .bss	00000004 ep0_tx_ptr
1fff18ac l     O .bss	00000014 rx_last
1fff18c0 l     O .bss	00000002 ep0_tx_len
1fff18c4 l     O .bss	00000040 ep0_rx0_buf
1fff1904 l     O .bss	00000014 rx_first
1fff1918 l     O .bss	00000001 ep0_tx_data_toggle
1fff191c l     O .bss	00000040 ep0_rx1_buf
1fff195c l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1970 l     O .bss	00000014 tx_last
1fff1984 l     O .bss	00000008 setup
1fff198c l     O .bss	00000001 ep0_tx_bdt_bank
1fff1990 l     O .bss	00000008 reply_buffer
1fff199c l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19a1 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19a4 l     O .bss	00000004 rts_pin
1fff19a8 l     O .bss	00000001 rx_buffer_head
1fff19a9 l     O .bss	00000001 rx_buffer_tail
1fff19ac l     O .bss	00000028 tx_buffer
1fff19d4 l     O .bss	00000040 rx_buffer
1fff1a14 l     O .bss	00000001 transmitting
1fff1a15 l     O .bss	00000001 tx_buffer_tail
1fff1a18 l     O .bss	00000004 transmit_pin
1fff1a1c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a20 l     O .bss	00000004 rts_pin
1fff1a24 l     O .bss	00000001 transmitting
1fff1a25 l     O .bss	00000001 rx_buffer_tail
1fff1a28 l     O .bss	00000028 tx_buffer
1fff1a50 l     O .bss	00000040 rx_buffer
1fff1a90 l     O .bss	00000001 rx_buffer_head
1fff1a91 l     O .bss	00000001 tx_buffer_tail
1fff1a94 l     O .bss	00000004 transmit_pin
1fff1a98 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a9c l     O .bss	00000004 rts_pin
1fff1aa0 l     O .bss	00000001 rx_buffer_head
1fff1aa1 l     O .bss	00000001 rx_buffer_tail
1fff1aa4 l     O .bss	00000028 tx_buffer
1fff1acc l     O .bss	00000040 rx_buffer
1fff1b0c l     O .bss	00000001 transmitting
1fff1b0d l     O .bss	00000001 tx_buffer_tail
1fff1b10 l     O .bss	00000004 transmit_pin
1fff1b14 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b18 l     O .bss	00000004 rts_pin
1fff1b1c l     O .bss	00000001 rx_buffer_head
1fff1b1d l     O .bss	00000001 rx_buffer_tail
1fff1b20 l     O .bss	00000040 tx_buffer
1fff1b60 l     O .bss	00000040 rx_buffer
1fff1ba0 l     O .bss	00000001 transmitting
1fff1ba1 l     O .bss	00000001 tx_buffer_tail
1fff1ba4 l     O .bss	00000004 transmit_pin
1fff1ba8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1bac l     O .bss	00000004 rts_pin
1fff1bb0 l     O .bss	00000001 rx_buffer_head
1fff1bb1 l     O .bss	00000001 rx_buffer_tail
1fff1bb4 l     O .bss	00000028 tx_buffer
1fff1bdc l     O .bss	00000040 rx_buffer
1fff1c1c l     O .bss	00000001 transmitting
1fff1c1d l     O .bss	00000001 tx_buffer_tail
1fff1c20 l     O .bss	00000004 transmit_pin
1fff1c24 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c74 l     O .data	00000012 device_descriptor
1fff0ca0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c28 l     O .bss	00000004 rts_pin
1fff1c2c l     O .bss	00000001 rx_buffer_head
1fff1c2d l     O .bss	00000001 rx_buffer_tail
1fff1c30 l     O .bss	00000028 tx_buffer
1fff1c58 l     O .bss	00000040 rx_buffer
1fff1c98 l     O .bss	00000001 transmitting
1fff1c99 l     O .bss	00000001 tx_buffer_tail
1fff1c9c l     O .bss	00000004 transmit_pin
1fff1ca0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004840 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15b0 l       .bss	00000000 __bss_start__
1fff1e3c l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003b98  w    F .text	00000006 adc0_isr
00001c30 g     F .text	0000001c usb_serial_available
00003a58 g     F .text	00000020 serial4_available
00003704  w    F .text	000000c4 yield
1fff0c88 g     O .data	00000018 usb_string_manufacturer_name_default
00003c44 g     F .text	00000020 serial_available
1fff1860 g     O .bss	00000004 usb_midi_handleProgramChange
00003b50  w    F .text	00000048 hard_fault_isr
00003b98  w    F .text	00000006 dma_ch6_isr
000037f8 g     F .text	00000020 Print::println()
0000392c g     F .text	00000020 serial2_available
00003b98  w    F .text	00000006 uart0_lon_isr
00002b18 g     F .text	000000e8 usb_rx_memory
000037c8  w    F .text	00000002 serialEvent5()
00003b98  w    F .text	00000006 dma_ch8_isr
00003d70 g     F .text	00000020 serial6_available
00004818 g     F .text	00000002 __malloc_unlock
1fff1874 g     O .bss	00000004 usb_midi_handleAfterTouch
00001fd0 g     F .text	000000e0 analog_init
00002c00 g     F .text	00000084 usb_tx
00003b98  w    F .text	00000006 portcd_isr
1fff1884 g     O .bss	00000004 usb_midi_handleSysExComplete
00004190 g     F .text	00000098 MillisTimer::runFromTimer()
00003b98  w    F .text	00000006 can1_rx_warn_isr
00004f04 g       .fini	00000000 __exidx_end
00003b98  w    F .text	00000006 dma_error_isr
1fff1d00 g     O .bss	00000001 usb_midi_msg_type
1fff1cb8 g     O .bss	00000001 EventResponder::runningFromYield
00003b98  w    F .text	00000006 i2c0_isr
00004238 g     F .text	0000000c __errno
00003b98  w    F .text	00000006 portd_isr
00003b98  w    F .text	00000006 enet_error_isr
1fff1ca4 g     O .bss	00000004 EventResponder::firstInterrupt
00003b98  w    F .text	00000006 tpm1_isr
000037e4  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004c5c g     O .text	00000200 digital_pin_to_info_PGM
1fff1e38 g     O .bss	00000004 errno
00004f04 g       .fini	00000000 _etext
1fff15b0 g       .bss	00000000 _sbss
00003830  w    F .text	00000002 serialEvent6()
1fff1870 g     O .bss	00000004 usb_midi_handleVelocityChange
000022a0 g     F .text	0000001c digitalRead
00003b98  w    F .text	00000006 porte_isr
00000494 g     F .text	00001504 loop
00003b98  w    F .text	00000006 portb_isr
000025bc g     F .text	0000002c usb_midi_flush_output
00003b98  w    F .text	00000006 spi1_isr
00003a78 g     F .text	000000d8 uart3_status_isr
0000403c  w    F .text	00000002 serialEvent1()
1fff15fc g     O .bss	00000018 led4
00003b98  w    F .text	00000006 mcm_isr
00004128 g     F .text	00000068 MillisTimer::addToActiveList()
000025e8 g     F .text	0000043c usb_midi_read
1fff184c g     O .bss	00000004 usb_midi_handleSystemReset
1fff1ca8 g     O .bss	00000004 EventResponder::lastInterrupt
0000394c g     F .text	0000010c uart1_status_isr
1fff1d02 g     O .bss	00000002 usb_midi_msg_sysex_len
00003b98  w    F .text	00000006 randnum_isr
1fff1854 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1844 g     O .bss	00000004 systick_millis_count
00003b50  w    F .text	00000048 bus_fault_isr
00003b98  w    F .text	00000006 watchdog_isr
00003b98  w    F .text	00000006 i2c1_isr
1fff1998 g     O .bss	00000001 usb_configuration
00003b98  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003818  w    F .text	00000002 serialEvent2()
00003b98  w    F .text	00000006 i2c2_isr
1fff0c88  w    O .data	00000018 usb_string_manufacturer_name
1fff1e2c g     O .bss	0000000a usb_rx_byte_count_data
00003b98  w    F .text	00000006 pit1_isr
00004294 g     F .text	00000010 malloc
00003b98  w    F .text	00000006 dma_ch4_isr
00003b98  w    F .text	00000006 software_isr
00003b98  w    F .text	00000006 dma_ch7_isr
000040c4  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003634 g     F .text	000000d0 usb_init
00003b98  w    F .text	00000006 lptmr_isr
1fff1cc8 g     O .bss	00000004 __malloc_top_pad
00002270 g     F .text	00000024 rtc_set
1fff17a8 g     O .bss	00000024 button5
1fff1808 g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff18a4 g     O .bss	00000004 usb_midi_handleNoteOn
00003c10 g     F .text	00000034 kinetis_hsrun_enable
0000481c g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001bb8 g     F .text	00000048 usb_serial_getchar
00003b98  w    F .text	00000006 can1_bus_off_isr
00003b98  w    F .text	00000006 ftm2_isr
1fff1cf4 g     O .bss	00000008 usb_cdc_line_coding
00002294 g     F .text	0000000a digitalWrite
00003b98  w    F .text	00000006 uart5_status_isr
00003d90 g     F .text	000000e4 lpuart0_status_isr
1fff1cb0 g     O .bss	00000004 EventResponder::lastYield
00004e88 g     O .text	00000005 usb_endpoint_config_table
00003b98  w    F .text	00000006 dma_ch9_isr
00003b98  w    F .text	00000006 pit2_isr
00003f44 g     F .text	00000020 serial3_available
1fff1cc4 g     O .bss	00000004 __malloc_max_sbrked_mem
000022bc g     F .text	0000000a pinMode
00002a64 g     F .text	0000004c usb_free
00003b98  w    F .text	00000006 i2c3_isr
1fff162c g     O .bss	00000018 led1
1fff186c g     O .bss	00000004 usb_midi_handleSysExPartial
00004f04 g       .fini	00000000 __exidx_start
00003b98  w    F .text	00000006 pit0_isr
1fff1d04 g     O .bss	00000001 usb_midi_msg_data1
1fff1cb4 g     O .bss	00000004 EventResponder::firstYield
00004ee4 g     O .text	00000004 _global_impure_ptr
00003b98  w    F .text	00000006 can1_error_isr
00004244 g     F .text	00000050 __libc_init_array
1fff1e3c g       .bss	00000000 __bss_end
00003b98  w    F .text	00000006 can0_wakeup_isr
00003b98  w    F .text	00000006 flash_cmd_isr
1fff17f0 g     O .bss	00000018 knob5
000037cc  w    F .text	00000004 usb_serial_class::clear()
00003f64 g     F .text	000000d8 uart2_status_isr
00003bb0 g     F .text	0000002c _sbrk
1fff1cbc g     O .bss	00000004 MillisTimer::listWaiting
1fff0c70 g     O .data	00000004 __brkval
1fff183c g     O .bss	00000001 usb_cdc_line_rtsdtr
00001e44 g     F .text	00000048 usb_serial_flush_callback
00004ee8 g     F .text	00000000 _init
00003b98  w    F .text	00000006 svcall_isr
00003b98  w    F .text	00000006 dma_ch15_isr
00003b98  w    F .text	00000006 uart1_error_isr
00004860 g     F .text	00000028 __libc_fini_array
00003b98  w    F .text	00000006 usbhs_phy_isr
1fff1e3c g       .bss	00000000 _ebss
00003b98 g     F .text	00000006 unused_isr
00003b98  w    F .text	00000006 spi0_isr
00003b98  w    F .text	00000006 dma_ch3_isr
00003b98  w    F .text	00000006 flash_error_isr
1fff1644 g     O .bss	00000018 knob2
00003834 g     F .text	00000020 serial5_available
00003b98  w    F .text	00000006 uart5_error_isr
00003b98  w    F .text	00000006 rtc_seconds_isr
00003b98  w    F .text	00000006 pdb_isr
00003b50  w    F .text	00000048 usage_fault_isr
00003b98  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003b98  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1cfc g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000018 leds
00004228 g     F .text	00000010 systick_isr
00003b98  w    F .text	00000006 rtc_alarm_isr
00003b98  w    F .text	00000006 dma_ch2_isr
1fff0c60 g     O .data	00000010 Serial
00003b98  w    F .text	00000006 ftm1_isr
000037ec  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003ba0  w    F .text	0000000c startup_early_hook
00003b98  w    F .text	00000006 dma_ch13_isr
00003b98  w    F .text	00000006 uart2_error_isr
00001c00 g     F .text	00000030 usb_serial_peekchar
1fff0d54 g     O .data	00000016 usb_string_serial_number_default
00003b50 g     F .text	00000048 fault_isr
00004924 g     F .text	000001d0 _free_r
1fff1890 g     O .bss	00000004 usb_midi_handleStop
00003b98  w    F .text	00000006 usb_charge_isr
000037dc  w    F .text	00000004 usb_serial_class::flush()
00003b98  w    F .text	00000006 cmt_isr
00003b98  w    F .text	00000006 usbhs_isr
1fff18a0 g     O .bss	00000004 usb_midi_handleControlChange
1fff15a8 g     O .data	00000004 __malloc_sbrk_base
000037d4  w    F .text	00000004 usb_serial_class::read()
00003b98  w    F .text	00000006 ftm3_isr
00003b98  w    F .text	00000006 tsi0_isr
1fff1690 g     O .bss	00000018 led6
1fff16a8 g     O .bss	00000018 knob1
00003b98  w    F .text	00000006 spi2_isr
0000381c  w    F .text	00000002 serialEvent4()
000037f4  w    F .text	00000002 serialEvent()
1fff1919 g     O .bss	00000001 usb_reboot_timer
00004af4 g     F .text	000000a4 __register_exitproc
00001c4c g     F .text	00000038 usb_serial_flush_input
00001d8c g     F .text	00000018 usb_serial_putchar
1fff1ccc g     O .bss	00000028 __malloc_current_mallinfo
00003b98  w    F .text	00000006 can0_bus_off_isr
1fff1614 g     O .bss	00000018 led5
1fff198d g     O .bss	00000001 usb_rx_memory_needed
00002c84 g     F .text	000009b0 usb_isr
1fff189c g     O .bss	00000004 usb_midi_handleNoteOff
00004e5c  w    O .text	00000028 vtable for usb_serial_class
1fff1660 g     O .bss	00000018 knob3
00003b98  w    F .text	00000006 uart3_error_isr
1fff1cac g     O .bss	00000004 MillisTimer::listActive
00003b98  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003b98  w    F .text	00000006 low_voltage_isr
1fff16e4 g     O .bss	00000024 button2
1fff119c g     O .data	00000408 __malloc_av_
00003b98  w    F .text	00000006 can0_error_isr
0000236c g     F .text	0000016c _init_Teensyduino_internal_
00001dec g     F .text	00000058 usb_serial_flush_output
00003b98  w    F .text	00000006 dma_ch12_isr
00004814 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003b98  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003b98  w    F .text	00000006 pit3_isr
00003b98  w    F .text	00000006 enet_rx_isr
00003b98  w    F .text	00000006 portc_isr
00003820 g     F .text	00000010 main
1fff1cc0 g     O .bss	00000004 __malloc_max_total_mem
1fff15e4 g     O .bss	00000018 led3
00003b50  w    F .text	00000048 memmanage_fault_isr
00003e74 g     F .text	00000084 usb_init_serialnumber
1fff165c g     O .bss	00000001 currentMode
00004f00 g       .text	00000000 __init_array_end
000042a4 g     F .text	00000570 _malloc_r
00003b98  w    F .text	00000006 debugmonitor_isr
1fff1868 g     O .bss	00000004 usb_midi_handleSongPosition
00004044 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1858 g     O .bss	00000004 usb_midi_handleContinue
1fff1d05 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003b98  w    F .text	00000006 cmp1_isr
1fff1708 g     O .bss	00000024 button3
00003b98  w    F .text	00000006 ftm0_isr
00004888 g     F .text	0000009c _malloc_trim_r
1fff0d50 g     O .data	00000004 string0
00001c84 g     F .text	00000108 usb_serial_write
00003bac  w    F .text	00000002 startup_late_hook
000037d8  w    F .text	00000004 usb_serial_class::available()
1fff1d06 g     O .bss	00000001 usb_midi_msg_cable
1fff0d38  w    O .data	00000018 usb_string_product_name
000022c8 g     F .text	000000a4 delay
00003b98  w    F .text	00000006 tpm0_isr
00004f00 g     F .fini	00000000 _fini
00003b98  w    F .text	00000006 i2s0_rx_isr
00003b98  w    F .text	00000006 uart4_error_isr
00002520 g     F .text	0000009c usb_midi_write_packed
00004854 g     F .text	0000000c atexit
00003b98  w    F .text	00000006 can0_message_isr
1fff1198 g     O .data	00000004 _impure_ptr
00003b98  w    F .text	00000006 can1_message_isr
00003b98  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1880 g     O .bss	00000004 usb_midi_handleTuneRequest
00004ef4 g       .text	00000000 __preinit_array_end
00003b98  w    F .text	00000006 sdhc_isr
1fff1d07 g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00004e90 g     O .text	00000054 usb_descriptor_list
00002ab0 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1678 g     O .bss	00000018 knob4
00003b98  w    F .text	00000006 dma_ch10_isr
1fff1730 g     O .bss	00000078 sequence1
1fff1878 g     O .bss	00000004 usb_midi_handleStart
00003b98  w    F .text	00000006 uart0_error_isr
00002a24 g     F .text	00000040 usb_malloc
00003b98  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001da4 g     F .text	00000048 usb_serial_write_buffer_free
00003b98  w    F .text	00000006 enet_timer_isr
1fff17cc g     O .bss	00000024 button6
1fff16c0 g     O .bss	00000024 button1
1fff15ac g       .data	00000000 _edata
00003b98  w    F .text	00000006 i2s0_tx_isr
00003b98  w    F .text	00000006 adc1_isr
000037e0  w    F .text	00000004 usb_serial_class::availableForWrite()
00003b98  w    F .text	00000006 cmp0_isr
1fff1848 g     O .bss	00000004 usb_midi_handleClock
00003ef8 g     F .text	0000004c ultoa
000040e0 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15a4 g     O .data	00000004 __malloc_trim_threshold
000037d0  w    F .text	00000004 usb_serial_class::peek()
1fff182c g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1864 g     O .bss	00000004 usb_midi_handlePitchChange
00003b98  w    F .text	00000006 pit_isr
1fff187c g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003b98  w    F .text	00000006 dac0_isr
00004ef4 g       .text	00000000 __init_array_start
00003b98  w    F .text	00000006 can1_tx_warn_isr
000020b0 g     F .text	000000fc analogRead
1fff1d08 g     O .bss	00000122 usb_midi_msg_sysex
00003c64 g     F .text	0000010c uart0_status_isr
00003b98  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d38 g     O .data	00000018 usb_string_product_name_default
00003b98  w    F .text	00000006 dma_ch1_isr
00002aec g     F .text	0000002c usb_tx_packet_count
00003b98  w    F .text	00000006 dma_ch5_isr
00003b98  w    F .text	00000006 can0_rx_warn_isr
00003b98  w    F .text	00000006 can0_tx_warn_isr
00003854 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003bdc g     F .text	00000034 kinetis_hsrun_disable
00004ef4 g       .text	00000000 __preinit_array_start
00004040  w    F .text	00000002 serialEvent3()
1fff1898 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15cc g     O .bss	00000018 led2
00003b98  w    F .text	00000006 cmp2_isr
00004124 g     F .text	00000004 pendablesrvreq_isr
00003b98  w    F .text	00000006 wakeup_isr
00003b98  w    F .text	00000006 cmp3_isr
1fff1850 g     O .bss	00000004 usb_midi_handleActiveSensing
00003b98  w    F .text	00000006 tpm2_isr
00003b98  w    F .text	00000006 dma_ch0_isr
1fff0d54  w    O .data	00000016 usb_string_serial_number
00003b98  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....;..Q;..
      10:	Q;..Q;..Q;..Q;..
      20:	Q;..Q;..Q;...;..
      30:	.;..Q;..%A..)B..
      40:	.;...;...;...;..
      50:	.;...;...;...;..
      60:	.;...;...;...;..
      70:	.;...;...;...;..
      80:	.;...;...;...;..
      90:	.;...;...;...;..
      a0:	.;...;...;...;..
      b0:	.;...;...;..e<..
      c0:	.;..M9...;..e?..
      d0:	.;..y:...;...;..
      e0:	.;...;...;...;..
      f0:	.;...;...;...;..
     100:	.;...;...;...;..
     110:	.;...,...;...;..
     120:	.;...;...;...;..
     130:	.;...;...;...;..
     140:	.;...;..U8...;..
     150:	.;...;...;...;..
     160:	.;...;...;...;..
     170:	.;...;...;...;..
     180:	.;...;...;...;..
     190:	.;...;...=...;..
     1a0:	.;...;...;...;..
     1b0:	.;...;...;...;..
     1c0:	.;...;...;...;..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3ba0 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	236c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2270 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2270 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4244 <__libc_init_array>

	startup_late_hook();
     33a:	bl	3bac <startup_late_hook>
	main();
     33e:	bl	3820 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15ac
     374:	.word	0x00004f00
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15b0
     380:	.word	0x1fff1e3c
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15b0
     42c:	.word	0x00000000
     430:	.word	0x00004f04

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15b4
     460:	.word	0x00004f04
     464:	.word	0x1fff15ac
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	22bc <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	2294 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);
Knob knob5(A4, sequence1, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #212	; 0xd4
     49c:	bl	25e8 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	836 <loop+0x3a2>
     4a6:	ldr	r4, [pc, #684]	; (754 <loop+0x2c0>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #684]	; (758 <loop+0x2c4>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	22a0 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4ba:	beq.w	a2a <loop+0x596>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4be:	ldr	r3, [r4, #0]
     4c0:	str	r3, [sp, #60]	; 0x3c
	return ret;
     4c2:	ldr	r3, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     4c4:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c6:	ldr	r1, [r4, #0]
     4c8:	str	r1, [sp, #56]	; 0x38
	return ret;
     4ca:	ldr	r1, [sp, #56]	; 0x38
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4cc:	ldr	r7, [pc, #644]	; (754 <loop+0x2c0>)
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4ce:	cmp	r3, r1
     4d0:	beq.n	4e4 <loop+0x50>
        if (reading != m_state) {
     4d2:	ldr	r3, [r6, #4]
     4d4:	ldr	r5, [pc, #640]	; (758 <loop+0x2c4>)
     4d6:	cmp	r0, r3
     4d8:	beq.w	a52 <loop+0x5be>
          m_state = reading;
     4dc:	str	r0, [r5, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4de:	cmp	r0, #0
     4e0:	beq.w	aa4 <loop+0x610>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e4:	ldr	r5, [pc, #628]	; (75c <loop+0x2c8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4e6:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldrb.w	r0, [r5, #32]
     4ec:	bl	22a0 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f0:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f2:	str	r0, [r5, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	beq.w	a3e <loop+0x5aa>
     4fc:	ldr	r3, [r4, #0]
     4fe:	str	r3, [sp, #52]	; 0x34
	return ret;
     500:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     502:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     504:	ldr	r1, [r4, #0]
     506:	str	r1, [sp, #48]	; 0x30
	return ret;
     508:	ldr	r1, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r7, [pc, #584]	; (754 <loop+0x2c0>)
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     50c:	cmp	r1, r3
     50e:	beq.n	522 <loop+0x8e>
        if (reading != m_state) {
     510:	ldr	r3, [r5, #4]
     512:	ldr	r6, [pc, #584]	; (75c <loop+0x2c8>)
     514:	cmp	r0, r3
     516:	beq.w	a46 <loop+0x5b2>
          m_state = reading;
     51a:	str	r0, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     51c:	cmp	r0, #0
     51e:	beq.w	ada <loop+0x646>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     522:	ldr	r6, [pc, #572]	; (760 <loop+0x2cc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     524:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     526:	ldrb.w	r0, [r6, #32]
     52a:	bl	22a0 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     52e:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     530:	str	r0, [r6, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     532:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     534:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	beq.w	a3a <loop+0x5a6>
     53a:	ldr	r3, [r4, #0]
     53c:	str	r3, [sp, #44]	; 0x2c
	return ret;
     53e:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     540:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     542:	ldr	r1, [r4, #0]
     544:	str	r1, [sp, #40]	; 0x28
	return ret;
     546:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     548:	ldr	r7, [pc, #520]	; (754 <loop+0x2c0>)
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     54a:	cmp	r1, r3
     54c:	beq.n	560 <loop+0xcc>
        if (reading != m_state) {
     54e:	ldr	r3, [r6, #4]
     550:	ldr	r5, [pc, #524]	; (760 <loop+0x2cc>)
     552:	cmp	r0, r3
     554:	beq.w	a42 <loop+0x5ae>
          m_state = reading;
     558:	str	r0, [r5, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     55a:	cmp	r0, #0
     55c:	beq.w	b10 <loop+0x67c>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     560:	ldr	r5, [pc, #512]	; (764 <loop+0x2d0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     562:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     564:	ldrb.w	r0, [r5, #32]
     568:	bl	22a0 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     56c:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56e:	str	r0, [r5, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     570:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     572:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     574:	beq.w	a36 <loop+0x5a2>
     578:	ldr	r3, [r4, #0]
     57a:	str	r3, [sp, #36]	; 0x24
	return ret;
     57c:	ldr	r3, [sp, #36]	; 0x24
        m_lastDebounceTime = millis();
     57e:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     580:	ldr	r1, [r4, #0]
     582:	str	r1, [sp, #32]
	return ret;
     584:	ldr	r1, [sp, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     586:	ldr	r7, [pc, #460]	; (754 <loop+0x2c0>)
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     588:	cmp	r1, r3
     58a:	beq.n	59e <loop+0x10a>
        if (reading != m_state) {
     58c:	ldr	r3, [r5, #4]
     58e:	ldr	r6, [pc, #468]	; (764 <loop+0x2d0>)
     590:	cmp	r0, r3
     592:	beq.w	a4e <loop+0x5ba>
          m_state = reading;
     596:	str	r0, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     598:	cmp	r0, #0
     59a:	beq.w	b46 <loop+0x6b2>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     59e:	ldr	r6, [pc, #456]	; (768 <loop+0x2d4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5a0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5a2:	ldrb.w	r0, [r6, #32]
     5a6:	bl	22a0 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5aa:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ac:	str	r0, [r6, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ae:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b0:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5b2:	beq.w	a32 <loop+0x59e>
     5b6:	ldr	r3, [r4, #0]
     5b8:	str	r3, [sp, #28]
	return ret;
     5ba:	ldr	r3, [sp, #28]
        m_lastDebounceTime = millis();
     5bc:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5be:	ldr	r1, [r4, #0]
     5c0:	str	r1, [sp, #24]
	return ret;
     5c2:	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5c4:	ldr	r7, [pc, #396]	; (754 <loop+0x2c0>)
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5c6:	cmp	r1, r3
     5c8:	beq.n	5dc <loop+0x148>
        if (reading != m_state) {
     5ca:	ldr	r3, [r6, #4]
     5cc:	ldr	r5, [pc, #408]	; (768 <loop+0x2d4>)
     5ce:	cmp	r0, r3
     5d0:	beq.w	a4a <loop+0x5b6>
          m_state = reading;
     5d4:	str	r0, [r5, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5d6:	cmp	r0, #0
     5d8:	beq.w	b7c <loop+0x6e8>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5dc:	ldr	r5, [pc, #396]	; (76c <loop+0x2d8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5de:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5e0:	ldrb.w	r0, [r5, #32]
     5e4:	bl	22a0 <digitalRead>
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5e8:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ea:	str	r0, [r5, #12]
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ec:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ee:	mov	r2, r0
    void play () {
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5f0:	beq.w	a2e <loop+0x59a>
     5f4:	ldr	r3, [r4, #0]
     5f6:	str	r3, [sp, #20]
	return ret;
     5f8:	ldr	r3, [sp, #20]
        m_lastDebounceTime = millis();
     5fa:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5fc:	ldr	r1, [r4, #0]
     5fe:	str	r1, [sp, #16]
	return ret;
     600:	ldr	r1, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     602:	ldr	r7, [pc, #336]	; (754 <loop+0x2c0>)
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     604:	cmp	r1, r3
     606:	beq.n	61a <loop+0x186>
        if (reading != m_state) {
     608:	ldr	r3, [r5, #4]
     60a:	ldr	r6, [pc, #352]	; (76c <loop+0x2d8>)
     60c:	cmp	r0, r3
     60e:	beq.w	a56 <loop+0x5c2>
          m_state = reading;
     612:	str	r0, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     614:	cmp	r0, #0
     616:	beq.w	a5a <loop+0x5c6>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     61a:	ldr	r6, [pc, #340]	; (770 <loop+0x2dc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     61c:	str	r2, [r5, #8]
     61e:	ldrb	r3, [r6, #16]
     620:	cmp	r3, #0
     622:	bne.w	85e <loop+0x3ca>
     626:	ldr	r5, [pc, #332]	; (774 <loop+0x2e0>)
     628:	ldrb	r3, [r5, #16]
     62a:	cmp	r3, #0
     62c:	bne.w	9ce <loop+0x53a>
     630:	ldr	r5, [pc, #324]	; (778 <loop+0x2e4>)
     632:	ldrb	r3, [r5, #16]
     634:	cmp	r3, #0
     636:	bne.w	972 <loop+0x4de>
     63a:	ldr	r5, [pc, #320]	; (77c <loop+0x2e8>)
     63c:	ldrb	r3, [r5, #16]
     63e:	cmp	r3, #0
     640:	bne.w	916 <loop+0x482>
     644:	ldr	r5, [pc, #312]	; (780 <loop+0x2ec>)
     646:	ldrb	r3, [r5, #16]
     648:	cmp	r3, #0
     64a:	bne.w	8ba <loop+0x426>
     64e:	ldr	r5, [pc, #308]	; (784 <loop+0x2f0>)
     650:	ldrb	r3, [r5, #16]
     652:	cmp	r3, #0
     654:	bne.w	7da <loop+0x346>
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     658:	ldr	r4, [pc, #300]	; (788 <loop+0x2f4>)
     65a:	ldrb	r0, [r4, #0]
     65c:	bl	20b0 <analogRead>

      int diff = abs(m_value - m_lastValue);
     660:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     662:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     664:	cmp	r0, r3
     666:	beq.n	694 <loop+0x200>
     668:	subs	r3, r0, r3
     66a:	cmp	r3, #0
     66c:	it	lt
     66e:	neglt	r3, r3
     670:	cmp	r3, #10
     672:	ble.n	694 <loop+0x200>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     674:	ldrb	r3, [r4, #20]
     676:	cmp	r3, #4
     678:	beq.w	c44 <loop+0x7b0>
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     67c:	ldr	r3, [pc, #268]	; (78c <loop+0x2f8>)
     67e:	ldrb	r3, [r3, #0]
     680:	cmp	r3, #2
     682:	beq.w	e2a <loop+0x996>
          m_sequence.controlVelocity(m_value, m_id);
        } else if (currentMode == PITCH) {
     686:	cmp	r3, #1
     688:	beq.w	f1a <loop+0xa86>
          m_sequence.controlPitch(m_value, m_id);
        } else if (currentMode == NOTELENGTH) {
     68c:	cmp	r3, #3
     68e:	beq.w	d2a <loop+0x896>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     692:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     694:	ldr	r4, [pc, #248]	; (790 <loop+0x2fc>)
     696:	ldrb	r0, [r4, #0]
     698:	bl	20b0 <analogRead>

      int diff = abs(m_value - m_lastValue);
     69c:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     69e:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6a0:	cmp	r0, r3
     6a2:	beq.n	6d0 <loop+0x23c>
     6a4:	subs	r3, r0, r3
     6a6:	cmp	r3, #0
     6a8:	it	lt
     6aa:	neglt	r3, r3
     6ac:	cmp	r3, #10
     6ae:	ble.n	6d0 <loop+0x23c>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     6b0:	ldrb	r3, [r4, #20]
     6b2:	cmp	r3, #4
     6b4:	beq.w	bd4 <loop+0x740>
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     6b8:	ldr	r3, [pc, #208]	; (78c <loop+0x2f8>)
     6ba:	ldrb	r3, [r3, #0]
     6bc:	cmp	r3, #2
     6be:	beq.w	e46 <loop+0x9b2>
          m_sequence.controlVelocity(m_value, m_id);
        } else if (currentMode == PITCH) {
     6c2:	cmp	r3, #1
     6c4:	beq.w	f90 <loop+0xafc>
          m_sequence.controlPitch(m_value, m_id);
        } else if (currentMode == NOTELENGTH) {
     6c8:	cmp	r3, #3
     6ca:	beq.w	dc0 <loop+0x92c>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     6ce:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6d0:	ldr	r4, [pc, #192]	; (794 <loop+0x300>)
     6d2:	ldrb	r0, [r4, #0]
     6d4:	bl	20b0 <analogRead>

      int diff = abs(m_value - m_lastValue);
     6d8:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6da:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6dc:	cmp	r0, r3
     6de:	beq.n	70c <loop+0x278>
     6e0:	subs	r3, r0, r3
     6e2:	cmp	r3, #0
     6e4:	it	lt
     6e6:	neglt	r3, r3
     6e8:	cmp	r3, #10
     6ea:	ble.n	70c <loop+0x278>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     6ec:	ldrb	r3, [r4, #20]
     6ee:	cmp	r3, #4
     6f0:	beq.w	c28 <loop+0x794>
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     6f4:	ldr	r3, [pc, #148]	; (78c <loop+0x2f8>)
     6f6:	ldrb	r3, [r3, #0]
     6f8:	cmp	r3, #2
     6fa:	beq.w	df2 <loop+0x95e>
          m_sequence.controlVelocity(m_value, m_id);
        } else if (currentMode == PITCH) {
     6fe:	cmp	r3, #1
     700:	beq.w	f72 <loop+0xade>
          m_sequence.controlPitch(m_value, m_id);
        } else if (currentMode == NOTELENGTH) {
     704:	cmp	r3, #3
     706:	beq.w	d5c <loop+0x8c8>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     70a:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     70c:	ldr	r4, [pc, #136]	; (798 <loop+0x304>)
     70e:	ldrb	r0, [r4, #0]
     710:	bl	20b0 <analogRead>

      int diff = abs(m_value - m_lastValue);
     714:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     716:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     718:	cmp	r0, r3
     71a:	beq.n	748 <loop+0x2b4>
     71c:	subs	r3, r0, r3
     71e:	cmp	r3, #0
     720:	it	lt
     722:	neglt	r3, r3
     724:	cmp	r3, #10
     726:	ble.n	748 <loop+0x2b4>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     728:	ldrb	r3, [r4, #20]
     72a:	cmp	r3, #4
     72c:	beq.w	bf0 <loop+0x75c>
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     730:	ldr	r3, [pc, #88]	; (78c <loop+0x2f8>)
     732:	ldrb	r3, [r3, #0]
     734:	cmp	r3, #2
     736:	beq.w	e62 <loop+0x9ce>
          m_sequence.controlVelocity(m_value, m_id);
        } else if (currentMode == PITCH) {
     73a:	cmp	r3, #1
     73c:	beq.w	f54 <loop+0xac0>
          m_sequence.controlPitch(m_value, m_id);
        } else if (currentMode == NOTELENGTH) {
     740:	cmp	r3, #3
     742:	beq.w	d8e <loop+0x8fa>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     746:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     748:	ldr	r4, [pc, #80]	; (79c <loop+0x308>)
     74a:	ldrb	r0, [r4, #0]
     74c:	bl	20b0 <analogRead>
     750:	b.n	7a0 <loop+0x30c>
     752:	nop
     754:	.word	0x1fff1844
     758:	.word	0x1fff16c0
     75c:	.word	0x1fff16e4
     760:	.word	0x1fff1708
     764:	.word	0x1fff1808
     768:	.word	0x1fff17a8
     76c:	.word	0x1fff17cc
     770:	.word	0x1fff162c
     774:	.word	0x1fff15cc
     778:	.word	0x1fff15e4
     77c:	.word	0x1fff15fc
     780:	.word	0x1fff1614
     784:	.word	0x1fff1690
     788:	.word	0x1fff16a8
     78c:	.word	0x1fff165c
     790:	.word	0x1fff1644
     794:	.word	0x1fff1660
     798:	.word	0x1fff1678
     79c:	.word	0x1fff17f0

      int diff = abs(m_value - m_lastValue);
     7a0:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7a2:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     7a4:	cmp	r0, r3
     7a6:	beq.n	7d4 <loop+0x340>
     7a8:	subs	r3, r0, r3
     7aa:	cmp	r3, #0
     7ac:	it	lt
     7ae:	neglt	r3, r3
     7b0:	cmp	r3, #10
     7b2:	ble.n	7d4 <loop+0x340>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     7b4:	ldrb	r3, [r4, #20]
     7b6:	cmp	r3, #4
     7b8:	beq.w	c0c <loop+0x778>
        m_sequence.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     7bc:	ldr	r3, [pc, #720]	; (a90 <loop+0x5fc>)
     7be:	ldrb	r3, [r3, #0]
     7c0:	cmp	r3, #2
     7c2:	beq.w	e0e <loop+0x97a>
          m_sequence.controlVelocity(m_value, m_id);
        } else if (currentMode == PITCH) {
     7c6:	cmp	r3, #1
     7c8:	beq.w	f38 <loop+0xaa4>
          m_sequence.controlPitch(m_value, m_id);
        } else if (currentMode == NOTELENGTH) {
     7cc:	cmp	r3, #3
     7ce:	beq.w	cf8 <loop+0x864>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7d2:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     7d4:	add	sp, #212	; 0xd4
     7d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7da:	ldr	r3, [r4, #0]
     7dc:	str	r3, [sp, #200]	; 0xc8
	return ret;
     7de:	ldr	r3, [sp, #200]	; 0xc8
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     7e0:	ldr	r1, [r5, #8]
     7e2:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7e4:	ldr	r4, [pc, #684]	; (a94 <loop+0x600>)
     7e6:	subs	r3, r3, r1
     7e8:	cmp	r3, r2
     7ea:	bls.w	658 <loop+0x1c4>
        digitalWrite(m_pin, !digitalRead(m_pin));
     7ee:	ldrb	r6, [r5, #0]
     7f0:	mov	r0, r6
     7f2:	bl	22a0 <digitalRead>
     7f6:	clz	r1, r0
     7fa:	lsrs	r1, r1, #5
     7fc:	mov	r0, r6
     7fe:	bl	2294 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     802:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     804:	movs	r2, #0

        if (blinkingCounter > 0) {
     806:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     808:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     80a:	ble.w	658 <loop+0x1c4>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     80e:	ldrb	r6, [r5, #0]
     810:	mov	r0, r6
     812:	bl	22a0 <digitalRead>
     816:	clz	r1, r0
     81a:	lsrs	r1, r1, #5
     81c:	mov	r0, r6
     81e:	bl	2294 <digitalWrite>
     822:	ldr	r3, [r4, #0]
     824:	str	r3, [sp, #204]	; 0xcc
	return ret;
     826:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     828:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     82a:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     82c:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     830:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     832:	str	r3, [r5, #20]
     834:	b.n	658 <loop+0x1c4>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     836:	ldr	r3, [pc, #608]	; (a98 <loop+0x604>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     838:	ldrb	r3, [r3, #0]
     83a:	cmp	r3, #250	; 0xfa
     83c:	beq.w	c90 <loop+0x7fc>
     840:	cmp	r3, #252	; 0xfc
     842:	beq.w	bb2 <loop+0x71e>
     846:	cmp	r3, #248	; 0xf8
     848:	beq.w	c60 <loop+0x7cc>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     84c:	movs	r1, #35	; 0x23
     84e:	ldr	r0, [pc, #588]	; (a9c <loop+0x608>)
     850:	ldr	r4, [pc, #576]	; (a94 <loop+0x600>)
     852:	bl	1c84 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     856:	ldr	r0, [pc, #584]	; (aa0 <loop+0x60c>)
     858:	bl	37f8 <Print::println()>
     85c:	b.n	4a8 <loop+0x14>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     85e:	ldr	r3, [r4, #0]
     860:	str	r3, [sp, #160]	; 0xa0
	return ret;
     862:	ldr	r3, [sp, #160]	; 0xa0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     864:	ldr	r1, [r6, #8]
     866:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     868:	ldr	r5, [pc, #552]	; (a94 <loop+0x600>)
     86a:	subs	r3, r3, r1
     86c:	cmp	r3, r2
     86e:	bls.w	626 <loop+0x192>
        digitalWrite(m_pin, !digitalRead(m_pin));
     872:	ldrb	r7, [r6, #0]
     874:	mov	r0, r7
     876:	bl	22a0 <digitalRead>
     87a:	clz	r1, r0
     87e:	lsrs	r1, r1, #5
     880:	mov	r0, r7
     882:	bl	2294 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     886:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     888:	movs	r2, #0

        if (blinkingCounter > 0) {
     88a:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     88c:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     88e:	ble.w	626 <loop+0x192>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     892:	ldrb	r7, [r6, #0]
     894:	mov	r0, r7
     896:	bl	22a0 <digitalRead>
     89a:	clz	r1, r0
     89e:	lsrs	r1, r1, #5
     8a0:	mov	r0, r7
     8a2:	bl	2294 <digitalWrite>
     8a6:	ldr	r3, [r5, #0]
     8a8:	str	r3, [sp, #164]	; 0xa4
	return ret;
     8aa:	ldr	r3, [sp, #164]	; 0xa4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     8ac:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8ae:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8b0:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8b4:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8b6:	str	r3, [r6, #20]
     8b8:	b.n	626 <loop+0x192>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8ba:	ldr	r3, [r4, #0]
     8bc:	str	r3, [sp, #192]	; 0xc0
	return ret;
     8be:	ldr	r3, [sp, #192]	; 0xc0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     8c0:	ldr	r1, [r5, #8]
     8c2:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8c4:	ldr	r6, [pc, #460]	; (a94 <loop+0x600>)
     8c6:	subs	r3, r3, r1
     8c8:	cmp	r3, r2
     8ca:	bls.w	64e <loop+0x1ba>
        digitalWrite(m_pin, !digitalRead(m_pin));
     8ce:	ldrb	r7, [r5, #0]
     8d0:	mov	r0, r7
     8d2:	bl	22a0 <digitalRead>
     8d6:	clz	r1, r0
     8da:	lsrs	r1, r1, #5
     8dc:	mov	r0, r7
     8de:	bl	2294 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     8e2:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8e4:	movs	r2, #0

        if (blinkingCounter > 0) {
     8e6:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8e8:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     8ea:	ble.w	64e <loop+0x1ba>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     8ee:	ldrb	r7, [r5, #0]
     8f0:	mov	r0, r7
     8f2:	bl	22a0 <digitalRead>
     8f6:	clz	r1, r0
     8fa:	lsrs	r1, r1, #5
     8fc:	mov	r0, r7
     8fe:	bl	2294 <digitalWrite>
     902:	ldr	r3, [r6, #0]
     904:	str	r3, [sp, #196]	; 0xc4
	return ret;
     906:	ldr	r3, [sp, #196]	; 0xc4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     908:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     90a:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     90c:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     910:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     912:	str	r3, [r5, #20]
     914:	b.n	64e <loop+0x1ba>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     916:	ldr	r3, [r4, #0]
     918:	str	r3, [sp, #184]	; 0xb8
	return ret;
     91a:	ldr	r3, [sp, #184]	; 0xb8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     91c:	ldr	r1, [r5, #8]
     91e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     920:	ldr	r6, [pc, #368]	; (a94 <loop+0x600>)
     922:	subs	r3, r3, r1
     924:	cmp	r3, r2
     926:	bls.w	644 <loop+0x1b0>
        digitalWrite(m_pin, !digitalRead(m_pin));
     92a:	ldrb	r7, [r5, #0]
     92c:	mov	r0, r7
     92e:	bl	22a0 <digitalRead>
     932:	clz	r1, r0
     936:	lsrs	r1, r1, #5
     938:	mov	r0, r7
     93a:	bl	2294 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     93e:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     940:	movs	r2, #0

        if (blinkingCounter > 0) {
     942:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     944:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     946:	ble.w	644 <loop+0x1b0>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     94a:	ldrb	r7, [r5, #0]
     94c:	mov	r0, r7
     94e:	bl	22a0 <digitalRead>
     952:	clz	r1, r0
     956:	lsrs	r1, r1, #5
     958:	mov	r0, r7
     95a:	bl	2294 <digitalWrite>
     95e:	ldr	r3, [r6, #0]
     960:	str	r3, [sp, #188]	; 0xbc
	return ret;
     962:	ldr	r3, [sp, #188]	; 0xbc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     964:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     966:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     968:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     96c:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     96e:	str	r3, [r5, #20]
     970:	b.n	644 <loop+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     972:	ldr	r3, [r4, #0]
     974:	str	r3, [sp, #176]	; 0xb0
	return ret;
     976:	ldr	r3, [sp, #176]	; 0xb0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     978:	ldr	r1, [r5, #8]
     97a:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     97c:	ldr	r6, [pc, #276]	; (a94 <loop+0x600>)
     97e:	subs	r3, r3, r1
     980:	cmp	r3, r2
     982:	bls.w	63a <loop+0x1a6>
        digitalWrite(m_pin, !digitalRead(m_pin));
     986:	ldrb	r7, [r5, #0]
     988:	mov	r0, r7
     98a:	bl	22a0 <digitalRead>
     98e:	clz	r1, r0
     992:	lsrs	r1, r1, #5
     994:	mov	r0, r7
     996:	bl	2294 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     99a:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     99c:	movs	r2, #0

        if (blinkingCounter > 0) {
     99e:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9a0:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9a2:	ble.w	63a <loop+0x1a6>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9a6:	ldrb	r7, [r5, #0]
     9a8:	mov	r0, r7
     9aa:	bl	22a0 <digitalRead>
     9ae:	clz	r1, r0
     9b2:	lsrs	r1, r1, #5
     9b4:	mov	r0, r7
     9b6:	bl	2294 <digitalWrite>
     9ba:	ldr	r3, [r6, #0]
     9bc:	str	r3, [sp, #180]	; 0xb4
	return ret;
     9be:	ldr	r3, [sp, #180]	; 0xb4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     9c0:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9c2:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9c4:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9c8:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9ca:	str	r3, [r5, #20]
     9cc:	b.n	63a <loop+0x1a6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9ce:	ldr	r3, [r4, #0]
     9d0:	str	r3, [sp, #168]	; 0xa8
	return ret;
     9d2:	ldr	r3, [sp, #168]	; 0xa8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     9d4:	ldr	r1, [r5, #8]
     9d6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9d8:	ldr	r6, [pc, #184]	; (a94 <loop+0x600>)
     9da:	subs	r3, r3, r1
     9dc:	cmp	r3, r2
     9de:	bls.w	630 <loop+0x19c>
        digitalWrite(m_pin, !digitalRead(m_pin));
     9e2:	ldrb	r7, [r5, #0]
     9e4:	mov	r0, r7
     9e6:	bl	22a0 <digitalRead>
     9ea:	clz	r1, r0
     9ee:	lsrs	r1, r1, #5
     9f0:	mov	r0, r7
     9f2:	bl	2294 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9f6:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9f8:	movs	r2, #0

        if (blinkingCounter > 0) {
     9fa:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9fc:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9fe:	ble.w	630 <loop+0x19c>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a02:	ldrb	r7, [r5, #0]
     a04:	mov	r0, r7
     a06:	bl	22a0 <digitalRead>
     a0a:	clz	r1, r0
     a0e:	lsrs	r1, r1, #5
     a10:	mov	r0, r7
     a12:	bl	2294 <digitalWrite>
     a16:	ldr	r3, [r6, #0]
     a18:	str	r3, [sp, #172]	; 0xac
	return ret;
     a1a:	ldr	r3, [sp, #172]	; 0xac
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a1c:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a1e:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a20:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a24:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a26:	str	r3, [r5, #20]
     a28:	b.n	630 <loop+0x19c>
     a2a:	ldr	r3, [r6, #20]
     a2c:	b.n	4c6 <loop+0x32>
     a2e:	ldr	r3, [r5, #20]
     a30:	b.n	5fc <loop+0x168>
     a32:	ldr	r3, [r6, #20]
     a34:	b.n	5be <loop+0x12a>
     a36:	ldr	r3, [r5, #20]
     a38:	b.n	580 <loop+0xec>
     a3a:	ldr	r3, [r6, #20]
     a3c:	b.n	542 <loop+0xae>
     a3e:	ldr	r3, [r5, #20]
     a40:	b.n	504 <loop+0x70>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     a42:	mov	r2, r0
     a44:	b.n	560 <loop+0xcc>
     a46:	mov	r2, r0
     a48:	b.n	522 <loop+0x8e>
     a4a:	mov	r2, r0
     a4c:	b.n	5dc <loop+0x148>
     a4e:	mov	r2, r0
     a50:	b.n	59e <loop+0x10a>
     a52:	mov	r2, r0
     a54:	b.n	4e4 <loop+0x50>
     a56:	mov	r2, r0
     a58:	b.n	61a <loop+0x186>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     a5a:	ldrb	r3, [r6, #16]
     a5c:	cmp	r3, #0
     a5e:	bne.w	127e <loop+0xdea>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     a62:	ldrb	r3, [r6, #17]
     a64:	cmp	r3, #0
     a66:	bne.w	12ea <loop+0xe56>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     a6a:	ldr	r3, [r6, #24]
     a6c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     a70:	clz	r1, r1
     a74:	lsrs	r1, r1, #5
     a76:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     a78:	uxtb	r0, r0
     a7a:	bl	2294 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     a7e:	ldr	r3, [r6, #0]
     a80:	ldr	r0, [r6, #28]
     a82:	ldr	r2, [r6, #12]
     a84:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     a86:	ldrb	r1, [r0, r3]
     a88:	eor.w	r1, r1, #1
     a8c:	strb	r1, [r0, r3]
     a8e:	b.n	61a <loop+0x186>
     a90:	.word	0x1fff165c
     a94:	.word	0x1fff1844
     a98:	.word	0x1fff1d00
     a9c:	.word	0x00004bc8
     aa0:	.word	0x1fff0c60

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     aa4:	ldrb	r3, [r5, #16]
     aa6:	cmp	r3, #0
     aa8:	bne.w	1212 <loop+0xd7e>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     aac:	ldrb	r3, [r5, #17]
     aae:	cmp	r3, #0
     ab0:	bne.w	139e <loop+0xf0a>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     ab4:	ldr	r3, [r5, #24]
     ab6:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     aba:	clz	r1, r1
     abe:	lsrs	r1, r1, #5
     ac0:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ac2:	uxtb	r0, r0
     ac4:	bl	2294 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     ac8:	ldr	r3, [r5, #0]
     aca:	ldr	r0, [r5, #28]
     acc:	ldr	r2, [r5, #12]
     ace:	subs	r3, #1
     ad0:	ldrb	r1, [r0, r3]
     ad2:	eor.w	r1, r1, #1
     ad6:	strb	r1, [r0, r3]
     ad8:	b.n	4e4 <loop+0x50>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     ada:	ldrb	r3, [r6, #16]
     adc:	cmp	r3, #0
     ade:	bne.w	11a6 <loop+0xd12>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     ae2:	ldrb	r3, [r6, #17]
     ae4:	cmp	r3, #0
     ae6:	bne.w	130e <loop+0xe7a>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     aea:	ldr	r3, [r6, #24]
     aec:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     af0:	clz	r1, r1
     af4:	lsrs	r1, r1, #5
     af6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     af8:	uxtb	r0, r0
     afa:	bl	2294 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     afe:	ldr	r3, [r6, #0]
     b00:	ldr	r0, [r6, #28]
     b02:	ldr	r2, [r6, #12]
     b04:	subs	r3, #1
     b06:	ldrb	r1, [r0, r3]
     b08:	eor.w	r1, r1, #1
     b0c:	strb	r1, [r0, r3]
     b0e:	b.n	522 <loop+0x8e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b10:	ldrb	r3, [r5, #16]
     b12:	cmp	r3, #0
     b14:	bne.w	113a <loop+0xca6>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b18:	ldrb	r3, [r5, #17]
     b1a:	cmp	r3, #0
     b1c:	bne.w	137a <loop+0xee6>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b20:	ldr	r3, [r5, #24]
     b22:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b26:	clz	r1, r1
     b2a:	lsrs	r1, r1, #5
     b2c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b2e:	uxtb	r0, r0
     b30:	bl	2294 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b34:	ldr	r3, [r5, #0]
     b36:	ldr	r0, [r5, #28]
     b38:	ldr	r2, [r5, #12]
     b3a:	subs	r3, #1
     b3c:	ldrb	r1, [r0, r3]
     b3e:	eor.w	r1, r1, #1
     b42:	strb	r1, [r0, r3]
     b44:	b.n	560 <loop+0xcc>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b46:	ldrb	r3, [r6, #16]
     b48:	cmp	r3, #0
     b4a:	bne.w	10ce <loop+0xc3a>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b4e:	ldrb	r3, [r6, #17]
     b50:	cmp	r3, #0
     b52:	bne.w	1356 <loop+0xec2>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b56:	ldr	r3, [r6, #24]
     b58:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b5c:	clz	r1, r1
     b60:	lsrs	r1, r1, #5
     b62:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b64:	uxtb	r0, r0
     b66:	bl	2294 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b6a:	ldr	r3, [r6, #0]
     b6c:	ldr	r0, [r6, #28]
     b6e:	ldr	r2, [r6, #12]
     b70:	subs	r3, #1
     b72:	ldrb	r1, [r0, r3]
     b74:	eor.w	r1, r1, #1
     b78:	strb	r1, [r0, r3]
     b7a:	b.n	59e <loop+0x10a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b7c:	ldrb	r3, [r5, #16]
     b7e:	cmp	r3, #0
     b80:	bne.w	1062 <loop+0xbce>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b84:	ldrb	r3, [r5, #17]
     b86:	cmp	r3, #0
     b88:	bne.w	1332 <loop+0xe9e>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b8c:	ldr	r3, [r5, #24]
     b8e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b92:	clz	r1, r1
     b96:	lsrs	r1, r1, #5
     b98:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b9a:	uxtb	r0, r0
     b9c:	bl	2294 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     ba0:	ldr	r3, [r5, #0]
     ba2:	ldr	r0, [r5, #28]
     ba4:	ldr	r2, [r5, #12]
     ba6:	subs	r3, #1
     ba8:	ldrb	r1, [r0, r3]
     baa:	eor.w	r1, r1, #1
     bae:	strb	r1, [r0, r3]
     bb0:	b.n	5dc <loop+0x148>
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     bb2:	ldr	r3, [pc, #800]	; (ed4 <loop+0xa40>)
     bb4:	ldr	r4, [pc, #800]	; (ed8 <loop+0xa44>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[5]->toggle();
     bb6:	ldr	r2, [r3, #108]	; 0x6c
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     bb8:	movs	r5, #0
      ppqn = 0;
     bba:	str	r5, [r3, #28]
      m_currentStep = 0;
     bbc:	str	r5, [r3, #8]
     bbe:	ldmia.w	r2, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     bc2:	clz	r1, r1
     bc6:	lsrs	r1, r1, #5
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     bc8:	strb	r5, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bca:	uxtb	r0, r0
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     bcc:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     bce:	bl	2294 <digitalWrite>
     bd2:	b.n	4a8 <loop+0x14>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     bd4:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_sequence.controlTempo(m_value);
     bd8:	ldr	r3, [r4, #16]
     bda:	bge.w	e7e <loop+0x9ea>
        max_ppqn = 6;

        if (ppqn >= 6) {
     bde:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     be0:	movs	r1, #6

        if (ppqn >= 6) {
     be2:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     be4:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     be6:	ble.w	6ce <loop+0x23a>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     bea:	movs	r2, #0
     bec:	str	r2, [r3, #28]
     bee:	b.n	6ce <loop+0x23a>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     bf0:	cmp.w	r0, #400	; 0x190
     bf4:	ldr	r3, [r4, #16]
     bf6:	bge.w	eb6 <loop+0xa22>
        max_ppqn = 6;

        if (ppqn >= 6) {
     bfa:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     bfc:	movs	r1, #6

        if (ppqn >= 6) {
     bfe:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c00:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     c02:	ble.w	746 <loop+0x2b2>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     c06:	movs	r2, #0
     c08:	str	r2, [r3, #28]
     c0a:	b.n	746 <loop+0x2b2>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     c0c:	cmp.w	r0, #400	; 0x190
     c10:	ldr	r3, [r4, #16]
     c12:	bge.w	e9a <loop+0xa06>
        max_ppqn = 6;

        if (ppqn >= 6) {
     c16:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c18:	movs	r1, #6

        if (ppqn >= 6) {
     c1a:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c1c:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     c1e:	ble.w	7d2 <loop+0x33e>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     c22:	movs	r2, #0
     c24:	str	r2, [r3, #28]
     c26:	b.n	7d2 <loop+0x33e>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     c28:	cmp.w	r0, #400	; 0x190
     c2c:	ldr	r3, [r4, #16]
     c2e:	bge.w	ee0 <loop+0xa4c>
        max_ppqn = 6;

        if (ppqn >= 6) {
     c32:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c34:	movs	r1, #6

        if (ppqn >= 6) {
     c36:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c38:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     c3a:	ble.w	70a <loop+0x276>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     c3e:	movs	r2, #0
     c40:	str	r2, [r3, #28]
     c42:	b.n	70a <loop+0x276>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     c44:	cmp.w	r0, #400	; 0x190
     c48:	ldr	r3, [r4, #16]
     c4a:	bge.w	efc <loop+0xa68>
        max_ppqn = 6;

        if (ppqn >= 6) {
     c4e:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c50:	movs	r1, #6

        if (ppqn >= 6) {
     c52:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c54:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     c56:	ble.w	692 <loop+0x1fe>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     c5a:	movs	r2, #0
     c5c:	str	r2, [r3, #28]
     c5e:	b.n	692 <loop+0x1fe>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     c60:	ldr	r5, [pc, #624]	; (ed4 <loop+0xa40>)

      if (ppqn >= notesLengths[m_currentStep]) {
     c62:	ldr	r2, [r5, #8]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     c64:	ldr	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     c66:	adds	r2, #18
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     c68:	adds	r3, #1

      if (ppqn >= notesLengths[m_currentStep]) {
     c6a:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     c6e:	str	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     c70:	cmp	r3, r2
     c72:	bge.w	13c2 <loop+0xf2e>
        // of the active note to see if i do the stop step
        stopStep();
      }


      if (ppqn == max_ppqn) {
     c76:	ldr	r2, [r5, #32]
     c78:	ldr	r6, [pc, #600]	; (ed4 <loop+0xa40>)
     c7a:	cmp	r2, r3
     c7c:	bne.w	4a6 <loop+0x12>
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
     c80:	ldrb	r3, [r6, #4]
     c82:	cmp	r3, #0
     c84:	bne.w	1412 <loop+0xf7e>
     c88:	ldr	r4, [pc, #588]	; (ed8 <loop+0xa44>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     c8a:	movs	r3, #0
     c8c:	str	r3, [r5, #28]
     c8e:	b.n	4a8 <loop+0x14>
      }
    };

    void startPPQN () {
      m_state = true;
     c90:	ldr	r5, [pc, #576]	; (ed4 <loop+0xa40>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c92:	ldr	r4, [pc, #580]	; (ed8 <loop+0xa44>)
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     c94:	ldr	r3, [r5, #8]
     c96:	adds	r3, #22
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     c98:	mov.w	r8, #1
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     c9c:	ldr.w	r6, [r5, r3, lsl #2]
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     ca0:	strb.w	r8, [r5, #4]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ca4:	ldrb.w	r9, [r6]
      ppqn = 0;
     ca8:	movs	r7, #0
     caa:	mov	r0, r9
     cac:	str	r7, [r5, #28]
     cae:	bl	22a0 <digitalRead>
     cb2:	clz	r1, r0
     cb6:	lsrs	r1, r1, #5
     cb8:	mov	r0, r9
     cba:	bl	2294 <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep].m_state) {
     cbe:	ldr	r3, [r5, #8]
     cc0:	ldr	r2, [r4, #0]
     cc2:	str	r2, [sp, #12]
     cc4:	ldrb	r2, [r5, r3]
	return ret;
     cc6:	ldr	r1, [sp, #12]
      blinking = true;
     cc8:	strb.w	r8, [r6, #16]
      blinkingCounter = times;
     ccc:	str	r7, [r6, #20]
      lastBlink = millis();  
     cce:	str	r1, [r6, #8]
     cd0:	cmp	r2, #0
     cd2:	bne.w	13dc <loop+0xf48>
          playStep(m_currentStep);
        }

        m_currentStep++;
     cd6:	adds	r3, #1

        if (m_currentStep > 3) {
     cd8:	cmp	r3, #3
          m_currentStep = 0;
     cda:	it	gt
     cdc:	movgt	r3, #0
     cde:	str	r3, [r5, #8]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[5]->toggle();
     ce0:	ldr	r3, [r5, #108]	; 0x6c
     ce2:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     ce6:	clz	r1, r1
     cea:	lsrs	r1, r1, #5
     cec:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     cee:	uxtb	r0, r0
     cf0:	bl	2294 <digitalWrite>
     cf4:	b.w	4a8 <loop+0x14>
        if (currentMode == VELOCITY) {
          m_sequence.controlVelocity(m_value, m_id);
        } else if (currentMode == PITCH) {
          m_sequence.controlPitch(m_value, m_id);
        } else if (currentMode == NOTELENGTH) {
          m_sequence.controlLength(m_value, m_id);
     cf8:	ldr	r5, [r4, #16]
     cfa:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     cfc:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     cfe:	movw	r6, #1022	; 0x3fe
     d02:	rsb	r3, r2, #1
     d06:	cmp	r3, r6
     d08:	ble.w	fc4 <loop+0xb30>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     d0c:	ldr	r6, [pc, #460]	; (edc <loop+0xa48>)
     d0e:	mul.w	r3, r3, r0
     d12:	smull	r7, r6, r6, r3
     d16:	add	r6, r3
     d18:	asrs	r3, r3, #31
     d1a:	rsb	r3, r3, r6, asr #9
     d1e:	add	r2, r3
      notesLengths[id] = newValue;
     d20:	add.w	r3, r1, #18
     d24:	str.w	r2, [r5, r3, lsl #2]
     d28:	b.n	7d2 <loop+0x33e>
     d2a:	ldr	r5, [r4, #16]
     d2c:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     d2e:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     d30:	movw	r6, #1022	; 0x3fe
     d34:	rsb	r3, r2, #1
     d38:	cmp	r3, r6
     d3a:	ble.w	fae <loop+0xb1a>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     d3e:	ldr	r6, [pc, #412]	; (edc <loop+0xa48>)
     d40:	mul.w	r3, r3, r0
     d44:	smull	r7, r6, r6, r3
     d48:	add	r6, r3
     d4a:	asrs	r3, r3, #31
     d4c:	rsb	r3, r3, r6, asr #9
     d50:	add	r2, r3
      notesLengths[id] = newValue;
     d52:	add.w	r3, r1, #18
     d56:	str.w	r2, [r5, r3, lsl #2]
     d5a:	b.n	692 <loop+0x1fe>
     d5c:	ldr	r5, [r4, #16]
     d5e:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     d60:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     d62:	movw	r6, #1022	; 0x3fe
     d66:	rsb	r3, r2, #1
     d6a:	cmp	r3, r6
     d6c:	ble.w	1006 <loop+0xb72>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     d70:	ldr	r6, [pc, #360]	; (edc <loop+0xa48>)
     d72:	mul.w	r3, r3, r0
     d76:	smull	r7, r6, r6, r3
     d7a:	add	r6, r3
     d7c:	asrs	r3, r3, #31
     d7e:	rsb	r3, r3, r6, asr #9
     d82:	add	r2, r3
      notesLengths[id] = newValue;
     d84:	add.w	r3, r1, #18
     d88:	str.w	r2, [r5, r3, lsl #2]
     d8c:	b.n	70a <loop+0x276>
     d8e:	ldr	r5, [r4, #16]
     d90:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     d92:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     d94:	movw	r6, #1022	; 0x3fe
     d98:	rsb	r3, r2, #1
     d9c:	cmp	r3, r6
     d9e:	ble.w	ff0 <loop+0xb5c>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     da2:	ldr	r6, [pc, #312]	; (edc <loop+0xa48>)
     da4:	mul.w	r3, r3, r0
     da8:	smull	r7, r6, r6, r3
     dac:	add	r6, r3
     dae:	asrs	r3, r3, #31
     db0:	rsb	r3, r3, r6, asr #9
     db4:	add	r2, r3
      notesLengths[id] = newValue;
     db6:	add.w	r3, r1, #18
     dba:	str.w	r2, [r5, r3, lsl #2]
     dbe:	b.n	746 <loop+0x2b2>
     dc0:	ldr	r5, [r4, #16]
     dc2:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     dc4:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     dc6:	movw	r6, #1022	; 0x3fe
     dca:	rsb	r3, r2, #1
     dce:	cmp	r3, r6
     dd0:	ble.w	fda <loop+0xb46>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     dd4:	ldr	r6, [pc, #260]	; (edc <loop+0xa48>)
     dd6:	mul.w	r3, r3, r0
     dda:	smull	r7, r6, r6, r3
     dde:	add	r6, r3
     de0:	asrs	r3, r3, #31
     de2:	rsb	r3, r3, r6, asr #9
     de6:	add	r2, r3
      notesLengths[id] = newValue;
     de8:	add.w	r3, r1, #18
     dec:	str.w	r2, [r5, r3, lsl #2]
     df0:	b.n	6ce <loop+0x23a>
      notes[id] = newValue;
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
     df2:	ldr	r3, [r4, #12]
     df4:	ldr	r1, [r4, #16]
     df6:	add.w	r2, r3, #14
     dfa:	subs.w	r3, r0, r0, lsl #6
     dfe:	it	mi
     e00:	addwmi	r3, r3, #1023	; 0x3ff
     e04:	asrs	r3, r3, #10
     e06:	adds	r3, #127	; 0x7f
     e08:	str.w	r3, [r1, r2, lsl #2]
     e0c:	b.n	70a <loop+0x276>
     e0e:	ldr	r3, [r4, #12]
     e10:	ldr	r1, [r4, #16]
     e12:	add.w	r2, r3, #14
     e16:	subs.w	r3, r0, r0, lsl #6
     e1a:	it	mi
     e1c:	addwmi	r3, r3, #1023	; 0x3ff
     e20:	asrs	r3, r3, #10
     e22:	adds	r3, #127	; 0x7f
     e24:	str.w	r3, [r1, r2, lsl #2]
     e28:	b.n	7d2 <loop+0x33e>
     e2a:	ldr	r3, [r4, #12]
     e2c:	ldr	r1, [r4, #16]
     e2e:	add.w	r2, r3, #14
     e32:	subs.w	r3, r0, r0, lsl #6
     e36:	it	mi
     e38:	addwmi	r3, r3, #1023	; 0x3ff
     e3c:	asrs	r3, r3, #10
     e3e:	adds	r3, #127	; 0x7f
     e40:	str.w	r3, [r1, r2, lsl #2]
     e44:	b.n	692 <loop+0x1fe>
     e46:	ldr	r3, [r4, #12]
     e48:	ldr	r1, [r4, #16]
     e4a:	add.w	r2, r3, #14
     e4e:	subs.w	r3, r0, r0, lsl #6
     e52:	it	mi
     e54:	addwmi	r3, r3, #1023	; 0x3ff
     e58:	asrs	r3, r3, #10
     e5a:	adds	r3, #127	; 0x7f
     e5c:	str.w	r3, [r1, r2, lsl #2]
     e60:	b.n	6ce <loop+0x23a>
     e62:	ldr	r3, [r4, #12]
     e64:	ldr	r1, [r4, #16]
     e66:	add.w	r2, r3, #14
     e6a:	subs.w	r3, r0, r0, lsl #6
     e6e:	it	mi
     e70:	addwmi	r3, r3, #1023	; 0x3ff
     e74:	asrs	r3, r3, #10
     e76:	adds	r3, #127	; 0x7f
     e78:	str.w	r3, [r1, r2, lsl #2]
     e7c:	b.n	746 <loop+0x2b2>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e7e:	sub.w	r2, r0, #400	; 0x190
     e82:	cmp.w	r2, #400	; 0x190
     e86:	bcc.w	1054 <loop+0xbc0>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     e8a:	sub.w	r2, r0, #800	; 0x320
     e8e:	cmp	r2, #223	; 0xdf
     e90:	bhi.w	6ce <loop+0x23a>
        max_ppqn = 12;
     e94:	movs	r2, #12
     e96:	str	r2, [r3, #32]
     e98:	b.n	6ce <loop+0x23a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e9a:	sub.w	r2, r0, #400	; 0x190
     e9e:	cmp.w	r2, #400	; 0x190
     ea2:	bcc.w	102a <loop+0xb96>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     ea6:	sub.w	r2, r0, #800	; 0x320
     eaa:	cmp	r2, #223	; 0xdf
     eac:	bhi.w	7d2 <loop+0x33e>
        max_ppqn = 12;
     eb0:	movs	r2, #12
     eb2:	str	r2, [r3, #32]
     eb4:	b.n	7d2 <loop+0x33e>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     eb6:	sub.w	r2, r0, #400	; 0x190
     eba:	cmp.w	r2, #400	; 0x190
     ebe:	bcc.w	101c <loop+0xb88>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     ec2:	sub.w	r2, r0, #800	; 0x320
     ec6:	cmp	r2, #223	; 0xdf
     ec8:	bhi.w	746 <loop+0x2b2>
        max_ppqn = 12;
     ecc:	movs	r2, #12
     ece:	str	r2, [r3, #32]
     ed0:	b.n	746 <loop+0x2b2>
     ed2:	nop
     ed4:	.word	0x1fff1730
     ed8:	.word	0x1fff1844
     edc:	.word	0x80200803
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     ee0:	sub.w	r2, r0, #400	; 0x190
     ee4:	cmp.w	r2, #400	; 0x190
     ee8:	bcc.w	1038 <loop+0xba4>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     eec:	sub.w	r2, r0, #800	; 0x320
     ef0:	cmp	r2, #223	; 0xdf
     ef2:	bhi.w	70a <loop+0x276>
        max_ppqn = 12;
     ef6:	movs	r2, #12
     ef8:	str	r2, [r3, #32]
     efa:	b.n	70a <loop+0x276>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     efc:	sub.w	r2, r0, #400	; 0x190
     f00:	cmp.w	r2, #400	; 0x190
     f04:	bcc.w	1046 <loop+0xbb2>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f08:	sub.w	r2, r0, #800	; 0x320
     f0c:	cmp	r2, #223	; 0xdf
     f0e:	bhi.w	692 <loop+0x1fe>
        max_ppqn = 12;
     f12:	movs	r2, #12
     f14:	str	r2, [r3, #32]
     f16:	b.w	692 <loop+0x1fe>
      notesLengths[id] = newValue;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      notes[id] = newValue;
     f1a:	sub.w	r3, r0, r0, lsl #2
     f1e:	ldr	r2, [r4, #12]
     f20:	ldr	r1, [r4, #16]
     f22:	lsls	r3, r3, #2
     f24:	it	mi
     f26:	addwmi	r3, r3, #1023	; 0x3ff
     f2a:	adds	r2, #10
     f2c:	asrs	r3, r3, #10
     f2e:	adds	r3, #51	; 0x33
     f30:	str.w	r3, [r1, r2, lsl #2]
     f34:	b.w	692 <loop+0x1fe>
     f38:	sub.w	r3, r0, r0, lsl #2
     f3c:	ldr	r2, [r4, #12]
     f3e:	ldr	r1, [r4, #16]
     f40:	lsls	r3, r3, #2
     f42:	it	mi
     f44:	addwmi	r3, r3, #1023	; 0x3ff
     f48:	adds	r2, #10
     f4a:	asrs	r3, r3, #10
     f4c:	adds	r3, #51	; 0x33
     f4e:	str.w	r3, [r1, r2, lsl #2]
     f52:	b.n	7d2 <loop+0x33e>
     f54:	sub.w	r3, r0, r0, lsl #2
     f58:	ldr	r2, [r4, #12]
     f5a:	ldr	r1, [r4, #16]
     f5c:	lsls	r3, r3, #2
     f5e:	it	mi
     f60:	addwmi	r3, r3, #1023	; 0x3ff
     f64:	adds	r2, #10
     f66:	asrs	r3, r3, #10
     f68:	adds	r3, #51	; 0x33
     f6a:	str.w	r3, [r1, r2, lsl #2]
     f6e:	b.w	746 <loop+0x2b2>
     f72:	sub.w	r3, r0, r0, lsl #2
     f76:	ldr	r2, [r4, #12]
     f78:	ldr	r1, [r4, #16]
     f7a:	lsls	r3, r3, #2
     f7c:	it	mi
     f7e:	addwmi	r3, r3, #1023	; 0x3ff
     f82:	adds	r2, #10
     f84:	asrs	r3, r3, #10
     f86:	adds	r3, #51	; 0x33
     f88:	str.w	r3, [r1, r2, lsl #2]
     f8c:	b.w	70a <loop+0x276>
     f90:	sub.w	r3, r0, r0, lsl #2
     f94:	ldr	r2, [r4, #12]
     f96:	ldr	r1, [r4, #16]
     f98:	lsls	r3, r3, #2
     f9a:	it	mi
     f9c:	addwmi	r3, r3, #1023	; 0x3ff
     fa0:	adds	r2, #10
     fa2:	asrs	r3, r3, #10
     fa4:	adds	r3, #51	; 0x33
     fa6:	str.w	r3, [r1, r2, lsl #2]
     faa:	b.w	6ce <loop+0x23a>
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     fae:	rsb	r3, r2, #2
     fb2:	mul.w	r3, r0, r3
     fb6:	cmp	r3, #0
     fb8:	it	lt
     fba:	addwlt	r3, r3, #1023	; 0x3ff
     fbe:	add.w	r2, r2, r3, asr #10
     fc2:	b.n	d52 <loop+0x8be>
     fc4:	rsb	r3, r2, #2
     fc8:	mul.w	r3, r0, r3
     fcc:	cmp	r3, #0
     fce:	it	lt
     fd0:	addwlt	r3, r3, #1023	; 0x3ff
     fd4:	add.w	r2, r2, r3, asr #10
     fd8:	b.n	d20 <loop+0x88c>
     fda:	rsb	r3, r2, #2
     fde:	mul.w	r3, r0, r3
     fe2:	cmp	r3, #0
     fe4:	it	lt
     fe6:	addwlt	r3, r3, #1023	; 0x3ff
     fea:	add.w	r2, r2, r3, asr #10
     fee:	b.n	de8 <loop+0x954>
     ff0:	rsb	r3, r2, #2
     ff4:	mul.w	r3, r0, r3
     ff8:	cmp	r3, #0
     ffa:	it	lt
     ffc:	addwlt	r3, r3, #1023	; 0x3ff
    1000:	add.w	r2, r2, r3, asr #10
    1004:	b.n	db6 <loop+0x922>
    1006:	rsb	r3, r2, #2
    100a:	mul.w	r3, r0, r3
    100e:	cmp	r3, #0
    1010:	it	lt
    1012:	addwlt	r3, r3, #1023	; 0x3ff
    1016:	add.w	r2, r2, r3, asr #10
    101a:	b.n	d84 <loop+0x8f0>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    101c:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    101e:	movs	r1, #8

        if (ppqn >= 8) {
    1020:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1022:	str	r1, [r3, #32]

        if (ppqn >= 8) {
    1024:	ble.w	746 <loop+0x2b2>
    1028:	b.n	c06 <loop+0x772>
    102a:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    102c:	movs	r1, #8

        if (ppqn >= 8) {
    102e:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1030:	str	r1, [r3, #32]

        if (ppqn >= 8) {
    1032:	ble.w	7d2 <loop+0x33e>
    1036:	b.n	c22 <loop+0x78e>
    1038:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    103a:	movs	r1, #8

        if (ppqn >= 8) {
    103c:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    103e:	str	r1, [r3, #32]

        if (ppqn >= 8) {
    1040:	ble.w	70a <loop+0x276>
    1044:	b.n	c3e <loop+0x7aa>
    1046:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1048:	movs	r1, #8

        if (ppqn >= 8) {
    104a:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    104c:	str	r1, [r3, #32]

        if (ppqn >= 8) {
    104e:	ble.w	692 <loop+0x1fe>
    1052:	b.n	c5a <loop+0x7c6>
    1054:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1056:	movs	r1, #8

        if (ppqn >= 8) {
    1058:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    105a:	str	r1, [r3, #32]

        if (ppqn >= 8) {
    105c:	ble.w	6ce <loop+0x23a>
    1060:	b.n	bea <loop+0x756>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1062:	ldr	r3, [r5, #24]
    1064:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1068:	clz	r1, r1
    106c:	lsrs	r1, r1, #5
    106e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1070:	uxtb	r0, r0
    1072:	bl	2294 <digitalWrite>
        m_sequence.toggleGlobalMode();
    1076:	ldr.w	sl, [r5, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    107a:	ldr.w	r8, [sl, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    107e:	ldrb.w	r9, [r8]
    1082:	mov	r0, r9
    1084:	bl	22a0 <digitalRead>
    1088:	clz	r1, r0
    108c:	lsrs	r1, r1, #5
    108e:	mov	r0, r9
    1090:	bl	2294 <digitalWrite>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1094:	ldr	r3, [pc, #820]	; (13cc <loop+0xf38>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1096:	ldr	r2, [r7, #0]
    1098:	str	r2, [sp, #128]	; 0x80
    109a:	ldrb.w	r9, [r3]
	return ret;
    109e:	ldr	r2, [sp, #128]	; 0x80
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    10a0:	str.w	r2, [r8, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    10a4:	mov.w	fp, #1
      blinkingCounter = times;
    10a8:	movs	r2, #3
    10aa:	cmp	r9, fp
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    10ac:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    10b0:	str.w	r2, [r8, #20]
    10b4:	beq.w	15f0 <loop+0x115c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    10b8:	cmp.w	r9, #2
    10bc:	beq.w	1882 <loop+0x13ee>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    10c0:	cmp.w	r9, #3
    10c4:	beq.w	14e0 <loop+0x104c>
    10c8:	ldr	r2, [r5, #12]
    10ca:	b.w	5dc <loop+0x148>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    10ce:	ldr	r3, [r6, #24]
    10d0:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    10d4:	clz	r1, r1
    10d8:	lsrs	r1, r1, #5
    10da:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    10dc:	uxtb	r0, r0
    10de:	bl	2294 <digitalWrite>
        m_sequence.toggleGlobalMode();
    10e2:	ldr.w	sl, [r6, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    10e6:	ldr.w	r8, [sl, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10ea:	ldrb.w	r9, [r8]
    10ee:	mov	r0, r9
    10f0:	bl	22a0 <digitalRead>
    10f4:	clz	r1, r0
    10f8:	lsrs	r1, r1, #5
    10fa:	mov	r0, r9
    10fc:	bl	2294 <digitalWrite>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1100:	ldr	r3, [pc, #712]	; (13cc <loop+0xf38>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1102:	ldr	r2, [r7, #0]
    1104:	str	r2, [sp, #112]	; 0x70
    1106:	ldrb.w	r9, [r3]
	return ret;
    110a:	ldr	r2, [sp, #112]	; 0x70
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    110c:	str.w	r2, [r8, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1110:	mov.w	fp, #1
      blinkingCounter = times;
    1114:	movs	r2, #3
    1116:	cmp	r9, fp
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1118:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    111c:	str.w	r2, [r8, #20]
    1120:	beq.w	1680 <loop+0x11ec>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    1124:	cmp.w	r9, #2
    1128:	beq.w	190e <loop+0x147a>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    112c:	cmp.w	r9, #3
    1130:	beq.w	1524 <loop+0x1090>
    1134:	ldr	r2, [r6, #12]
    1136:	b.w	59e <loop+0x10a>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    113a:	ldr	r3, [r5, #24]
    113c:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1140:	clz	r1, r1
    1144:	lsrs	r1, r1, #5
    1146:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1148:	uxtb	r0, r0
    114a:	bl	2294 <digitalWrite>
        m_sequence.toggleGlobalMode();
    114e:	ldr.w	sl, [r5, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    1152:	ldr.w	r8, [sl, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1156:	ldrb.w	r9, [r8]
    115a:	mov	r0, r9
    115c:	bl	22a0 <digitalRead>
    1160:	clz	r1, r0
    1164:	lsrs	r1, r1, #5
    1166:	mov	r0, r9
    1168:	bl	2294 <digitalWrite>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    116c:	ldr	r3, [pc, #604]	; (13cc <loop+0xf38>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    116e:	ldr	r2, [r7, #0]
    1170:	str	r2, [sp, #96]	; 0x60
    1172:	ldrb.w	r9, [r3]
	return ret;
    1176:	ldr	r2, [sp, #96]	; 0x60
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1178:	str.w	r2, [r8, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    117c:	mov.w	fp, #1
      blinkingCounter = times;
    1180:	movs	r2, #3
    1182:	cmp	r9, fp
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1184:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    1188:	str.w	r2, [r8, #20]
    118c:	beq.w	1768 <loop+0x12d4>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    1190:	cmp.w	r9, #2
    1194:	beq.w	17b0 <loop+0x131c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1198:	cmp.w	r9, #3
    119c:	beq.w	149c <loop+0x1008>
    11a0:	ldr	r2, [r5, #12]
    11a2:	b.w	560 <loop+0xcc>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    11a6:	ldr	r3, [r6, #24]
    11a8:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    11ac:	clz	r1, r1
    11b0:	lsrs	r1, r1, #5
    11b2:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    11b4:	uxtb	r0, r0
    11b6:	bl	2294 <digitalWrite>
        m_sequence.toggleGlobalMode();
    11ba:	ldr.w	sl, [r6, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    11be:	ldr.w	r8, [sl, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11c2:	ldrb.w	r9, [r8]
    11c6:	mov	r0, r9
    11c8:	bl	22a0 <digitalRead>
    11cc:	clz	r1, r0
    11d0:	lsrs	r1, r1, #5
    11d2:	mov	r0, r9
    11d4:	bl	2294 <digitalWrite>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    11d8:	ldr	r3, [pc, #496]	; (13cc <loop+0xf38>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11da:	ldr	r2, [r7, #0]
    11dc:	str	r2, [sp, #80]	; 0x50
    11de:	ldrb.w	r9, [r3]
	return ret;
    11e2:	ldr	r2, [sp, #80]	; 0x50
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    11e4:	str.w	r2, [r8, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11e8:	mov.w	fp, #1
      blinkingCounter = times;
    11ec:	movs	r2, #3
    11ee:	cmp	r9, fp
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11f0:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    11f4:	str.w	r2, [r8, #20]
    11f8:	beq.w	1638 <loop+0x11a4>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    11fc:	cmp.w	r9, #2
    1200:	beq.w	18c8 <loop+0x1434>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1204:	cmp.w	r9, #3
    1208:	beq.w	1458 <loop+0xfc4>
    120c:	ldr	r2, [r6, #12]
    120e:	b.w	522 <loop+0x8e>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1212:	ldr	r3, [r5, #24]
    1214:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1218:	clz	r1, r1
    121c:	lsrs	r1, r1, #5
    121e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1220:	uxtb	r0, r0
    1222:	bl	2294 <digitalWrite>
        m_sequence.toggleGlobalMode();
    1226:	ldr.w	sl, [r5, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    122a:	ldr.w	r8, [sl, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    122e:	ldrb.w	r9, [r8]
    1232:	mov	r0, r9
    1234:	bl	22a0 <digitalRead>
    1238:	clz	r1, r0
    123c:	lsrs	r1, r1, #5
    123e:	mov	r0, r9
    1240:	bl	2294 <digitalWrite>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1244:	ldr	r3, [pc, #388]	; (13cc <loop+0xf38>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1246:	ldr	r2, [r7, #0]
    1248:	str	r2, [sp, #64]	; 0x40
    124a:	ldrb.w	r9, [r3]
	return ret;
    124e:	ldr	r2, [sp, #64]	; 0x40
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1250:	str.w	r2, [r8, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1254:	mov.w	fp, #1
      blinkingCounter = times;
    1258:	movs	r2, #3
    125a:	cmp	r9, fp
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    125c:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    1260:	str.w	r2, [r8, #20]
    1264:	beq.w	1710 <loop+0x127c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    1268:	cmp.w	r9, #2
    126c:	beq.w	183c <loop+0x13a8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1270:	cmp.w	r9, #3
    1274:	beq.w	1568 <loop+0x10d4>
    1278:	ldr	r2, [r5, #12]
    127a:	b.w	4e4 <loop+0x50>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    127e:	ldr	r3, [r6, #24]
    1280:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1284:	clz	r1, r1
    1288:	lsrs	r1, r1, #5
    128a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    128c:	uxtb	r0, r0
    128e:	bl	2294 <digitalWrite>
        m_sequence.toggleGlobalMode();
    1292:	ldr.w	sl, [r6, #28]
      m_currentStep = 0;
      m_mode = PITCH;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    1296:	ldr.w	r8, [sl, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    129a:	ldrb.w	r9, [r8]
    129e:	mov	r0, r9
    12a0:	bl	22a0 <digitalRead>
    12a4:	clz	r1, r0
    12a8:	lsrs	r1, r1, #5
    12aa:	mov	r0, r9
    12ac:	bl	2294 <digitalWrite>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    12b0:	ldr	r3, [pc, #280]	; (13cc <loop+0xf38>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12b2:	ldr	r2, [r7, #0]
    12b4:	str	r2, [sp, #144]	; 0x90
    12b6:	ldrb.w	r9, [r3]
	return ret;
    12ba:	ldr	r2, [sp, #144]	; 0x90
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    12bc:	str.w	r2, [r8, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    12c0:	mov.w	fp, #1
      blinkingCounter = times;
    12c4:	movs	r2, #3
    12c6:	cmp	r9, fp
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    12c8:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    12cc:	str.w	r2, [r8, #20]
    12d0:	beq.w	16c8 <loop+0x1234>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    12d4:	cmp.w	r9, #2
    12d8:	beq.w	17f6 <loop+0x1362>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    12dc:	cmp.w	r9, #3
    12e0:	beq.w	15ac <loop+0x1118>
    12e4:	ldr	r2, [r6, #12]
    12e6:	b.w	61a <loop+0x186>
      } else if (m_state == LOW && m_playButton) {
        m_led.toggle();
    12ea:	ldr	r3, [r6, #24]
    12ec:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    12f0:	clz	r1, r1
    12f4:	lsrs	r1, r1, #5
    12f6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    12f8:	uxtb	r0, r0
    12fa:	bl	2294 <digitalWrite>
    12fe:	movs	r1, #4
    1300:	ldr	r0, [pc, #204]	; (13d0 <loop+0xf3c>)
    1302:	bl	1c84 <usb_serial_write>
    1306:	ldr	r0, [pc, #204]	; (13d4 <loop+0xf40>)
    1308:	bl	37f8 <Print::println()>
    130c:	b.n	12e4 <loop+0xe50>
    130e:	ldr	r3, [r6, #24]
    1310:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1314:	clz	r1, r1
    1318:	lsrs	r1, r1, #5
    131a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    131c:	uxtb	r0, r0
    131e:	bl	2294 <digitalWrite>
    1322:	movs	r1, #4
    1324:	ldr	r0, [pc, #168]	; (13d0 <loop+0xf3c>)
    1326:	bl	1c84 <usb_serial_write>
    132a:	ldr	r0, [pc, #168]	; (13d4 <loop+0xf40>)
    132c:	bl	37f8 <Print::println()>
    1330:	b.n	120c <loop+0xd78>
    1332:	ldr	r3, [r5, #24]
    1334:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1338:	clz	r1, r1
    133c:	lsrs	r1, r1, #5
    133e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1340:	uxtb	r0, r0
    1342:	bl	2294 <digitalWrite>
    1346:	movs	r1, #4
    1348:	ldr	r0, [pc, #132]	; (13d0 <loop+0xf3c>)
    134a:	bl	1c84 <usb_serial_write>
    134e:	ldr	r0, [pc, #132]	; (13d4 <loop+0xf40>)
    1350:	bl	37f8 <Print::println()>
    1354:	b.n	10c8 <loop+0xc34>
    1356:	ldr	r3, [r6, #24]
    1358:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    135c:	clz	r1, r1
    1360:	lsrs	r1, r1, #5
    1362:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1364:	uxtb	r0, r0
    1366:	bl	2294 <digitalWrite>
    136a:	movs	r1, #4
    136c:	ldr	r0, [pc, #96]	; (13d0 <loop+0xf3c>)
    136e:	bl	1c84 <usb_serial_write>
    1372:	ldr	r0, [pc, #96]	; (13d4 <loop+0xf40>)
    1374:	bl	37f8 <Print::println()>
    1378:	b.n	1134 <loop+0xca0>
    137a:	ldr	r3, [r5, #24]
    137c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1380:	clz	r1, r1
    1384:	lsrs	r1, r1, #5
    1386:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1388:	uxtb	r0, r0
    138a:	bl	2294 <digitalWrite>
    138e:	movs	r1, #4
    1390:	ldr	r0, [pc, #60]	; (13d0 <loop+0xf3c>)
    1392:	bl	1c84 <usb_serial_write>
    1396:	ldr	r0, [pc, #60]	; (13d4 <loop+0xf40>)
    1398:	bl	37f8 <Print::println()>
    139c:	b.n	11a0 <loop+0xd0c>
    139e:	ldr	r3, [r5, #24]
    13a0:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13a4:	clz	r1, r1
    13a8:	lsrs	r1, r1, #5
    13aa:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13ac:	uxtb	r0, r0
    13ae:	bl	2294 <digitalWrite>
    13b2:	movs	r1, #4
    13b4:	ldr	r0, [pc, #24]	; (13d0 <loop+0xf3c>)
    13b6:	bl	1c84 <usb_serial_write>
    13ba:	ldr	r0, [pc, #24]	; (13d4 <loop+0xf40>)
    13bc:	bl	37f8 <Print::println()>
    13c0:	b.n	1278 <loop+0xde4>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    13c2:	ldr	r0, [pc, #20]	; (13d8 <loop+0xf44>)
    13c4:	bl	2520 <usb_midi_write_packed>
    13c8:	ldr	r3, [r5, #28]
    13ca:	b.n	c76 <loop+0x7e2>
    13cc:	.word	0x1fff165c
    13d0:	.word	0x00004c0c
    13d4:	.word	0x1fff0c60
    13d8:	.word	0x7f7bbf0b
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    13dc:	addne.w	r6, r3, #10
    13e0:	addeq	r3, #14
    13e2:	ldrne.w	r2, [r5, r6, lsl #2]
    13e6:	ldr.w	r3, [r5, r3, lsl #2]
    13ea:	lsls	r2, r2, #16
    13ec:	lsls	r0, r3, #24
    13ee:	and.w	r3, r0, #2130706432	; 0x7f000000
    13f2:	and.w	r0, r2, #8323072	; 0x7f0000
    13f6:	orrs	r0, r3
    13f8:	orr.w	r0, r0, #40704	; 0x9f00
    13fc:	orr.w	r0, r0, #9
    1400:	bl	2520 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1404:	bl	25bc <usb_midi_flush_output>
      activeNote = notes[step];
    1408:	ldr.w	r2, [r5, r6, lsl #2]
    140c:	ldr	r3, [r5, #8]
    140e:	str	r2, [r5, #36]	; 0x24
    1410:	b.n	cd6 <loop+0x842>
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
    1412:	ldr	r3, [r6, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1414:	ldr	r4, [pc, #832]	; (1758 <loop+0x12c4>)
    1416:	adds	r3, #22
    1418:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    141c:	ldrb.w	r8, [r7]
    1420:	mov	r0, r8
    1422:	bl	22a0 <digitalRead>
    1426:	clz	r1, r0
    142a:	lsrs	r1, r1, #5
    142c:	mov	r0, r8
    142e:	bl	2294 <digitalWrite>
    1432:	ldr	r2, [r4, #0]

        if (m_steps[m_currentStep].m_state) {
    1434:	ldr	r3, [r6, #8]
    1436:	str	r2, [sp, #8]
	return ret;
    1438:	ldr	r1, [sp, #8]
    143a:	ldrb	r2, [r6, r3]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    143c:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    143e:	movs	r0, #1
      blinkingCounter = times;
    1440:	movs	r1, #0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1442:	strb	r0, [r7, #16]
      blinkingCounter = times;
    1444:	str	r1, [r7, #20]
    1446:	cmp	r2, #0
    1448:	bne.w	1954 <loop+0x14c0>
          playStep(m_currentStep);
        }

        m_currentStep++;
    144c:	adds	r3, #1

        if (m_currentStep > 3) {
    144e:	cmp	r3, #3
          m_currentStep = 0;
    1450:	it	gt
    1452:	movgt	r3, #0
    1454:	str	r3, [r5, #8]
    1456:	b.n	c8a <loop+0x7f6>
    1458:	movs	r1, #5
    145a:	ldr	r0, [pc, #768]	; (175c <loop+0x12c8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    145c:	strb.w	fp, [r3]
    1460:	bl	1c84 <usb_serial_write>
    1464:	ldr	r0, [pc, #760]	; (1760 <loop+0x12cc>)
    1466:	bl	37f8 <Print::println()>
        Serial.println("PITCH");
        m_leds[3]->blink(3);
    146a:	ldr.w	r8, [sl, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    146e:	ldrb.w	sl, [r8]
    1472:	mov	r0, sl
    1474:	bl	22a0 <digitalRead>
    1478:	clz	r1, r0
    147c:	lsrs	r1, r1, #5
    147e:	mov	r0, sl
    1480:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1484:	ldr	r3, [r7, #0]
    1486:	str	r3, [sp, #92]	; 0x5c
	return ret;
    1488:	ldr	r3, [sp, #92]	; 0x5c
    148a:	ldr	r2, [r6, #12]
      blinking = true;
    148c:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    1490:	str.w	r9, [r8, #20]
      lastBlink = millis();  
    1494:	str.w	r3, [r8, #8]
    1498:	b.w	522 <loop+0x8e>
    149c:	movs	r1, #5
    149e:	ldr	r0, [pc, #700]	; (175c <loop+0x12c8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    14a0:	strb.w	fp, [r3]
    14a4:	bl	1c84 <usb_serial_write>
    14a8:	ldr	r0, [pc, #692]	; (1760 <loop+0x12cc>)
    14aa:	bl	37f8 <Print::println()>
        Serial.println("PITCH");
        m_leds[3]->blink(3);
    14ae:	ldr.w	r8, [sl, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14b2:	ldrb.w	sl, [r8]
    14b6:	mov	r0, sl
    14b8:	bl	22a0 <digitalRead>
    14bc:	clz	r1, r0
    14c0:	lsrs	r1, r1, #5
    14c2:	mov	r0, sl
    14c4:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14c8:	ldr	r3, [r7, #0]
    14ca:	str	r3, [sp, #108]	; 0x6c
	return ret;
    14cc:	ldr	r3, [sp, #108]	; 0x6c
    14ce:	ldr	r2, [r5, #12]
      blinking = true;
    14d0:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    14d4:	str.w	r9, [r8, #20]
      lastBlink = millis();  
    14d8:	str.w	r3, [r8, #8]
    14dc:	b.w	560 <loop+0xcc>
    14e0:	movs	r1, #5
    14e2:	ldr	r0, [pc, #632]	; (175c <loop+0x12c8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    14e4:	strb.w	fp, [r3]
    14e8:	bl	1c84 <usb_serial_write>
    14ec:	ldr	r0, [pc, #624]	; (1760 <loop+0x12cc>)
    14ee:	bl	37f8 <Print::println()>
        Serial.println("PITCH");
        m_leds[3]->blink(3);
    14f2:	ldr.w	r8, [sl, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14f6:	ldrb.w	sl, [r8]
    14fa:	mov	r0, sl
    14fc:	bl	22a0 <digitalRead>
    1500:	clz	r1, r0
    1504:	lsrs	r1, r1, #5
    1506:	mov	r0, sl
    1508:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    150c:	ldr	r3, [r7, #0]
    150e:	str	r3, [sp, #140]	; 0x8c
	return ret;
    1510:	ldr	r3, [sp, #140]	; 0x8c
    1512:	ldr	r2, [r5, #12]
      blinking = true;
    1514:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    1518:	str.w	r9, [r8, #20]
      lastBlink = millis();  
    151c:	str.w	r3, [r8, #8]
    1520:	b.w	5dc <loop+0x148>
    1524:	movs	r1, #5
    1526:	ldr	r0, [pc, #564]	; (175c <loop+0x12c8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1528:	strb.w	fp, [r3]
    152c:	bl	1c84 <usb_serial_write>
    1530:	ldr	r0, [pc, #556]	; (1760 <loop+0x12cc>)
    1532:	bl	37f8 <Print::println()>
        Serial.println("PITCH");
        m_leds[3]->blink(3);
    1536:	ldr.w	r8, [sl, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    153a:	ldrb.w	sl, [r8]
    153e:	mov	r0, sl
    1540:	bl	22a0 <digitalRead>
    1544:	clz	r1, r0
    1548:	lsrs	r1, r1, #5
    154a:	mov	r0, sl
    154c:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1550:	ldr	r3, [r7, #0]
    1552:	str	r3, [sp, #124]	; 0x7c
	return ret;
    1554:	ldr	r3, [sp, #124]	; 0x7c
    1556:	ldr	r2, [r6, #12]
      blinking = true;
    1558:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    155c:	str.w	r9, [r8, #20]
      lastBlink = millis();  
    1560:	str.w	r3, [r8, #8]
    1564:	b.w	59e <loop+0x10a>
    1568:	movs	r1, #5
    156a:	ldr	r0, [pc, #496]	; (175c <loop+0x12c8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    156c:	strb.w	fp, [r3]
    1570:	bl	1c84 <usb_serial_write>
    1574:	ldr	r0, [pc, #488]	; (1760 <loop+0x12cc>)
    1576:	bl	37f8 <Print::println()>
        Serial.println("PITCH");
        m_leds[3]->blink(3);
    157a:	ldr.w	r8, [sl, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    157e:	ldrb.w	sl, [r8]
    1582:	mov	r0, sl
    1584:	bl	22a0 <digitalRead>
    1588:	clz	r1, r0
    158c:	lsrs	r1, r1, #5
    158e:	mov	r0, sl
    1590:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1594:	ldr	r3, [r7, #0]
    1596:	str	r3, [sp, #76]	; 0x4c
	return ret;
    1598:	ldr	r3, [sp, #76]	; 0x4c
    159a:	ldr	r2, [r5, #12]
      blinking = true;
    159c:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    15a0:	str.w	r9, [r8, #20]
      lastBlink = millis();  
    15a4:	str.w	r3, [r8, #8]
    15a8:	b.w	4e4 <loop+0x50>
    15ac:	movs	r1, #5
    15ae:	ldr	r0, [pc, #428]	; (175c <loop+0x12c8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    15b0:	strb.w	fp, [r3]
    15b4:	bl	1c84 <usb_serial_write>
    15b8:	ldr	r0, [pc, #420]	; (1760 <loop+0x12cc>)
    15ba:	bl	37f8 <Print::println()>
        Serial.println("PITCH");
        m_leds[3]->blink(3);
    15be:	ldr.w	r8, [sl, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15c2:	ldrb.w	sl, [r8]
    15c6:	mov	r0, sl
    15c8:	bl	22a0 <digitalRead>
    15cc:	clz	r1, r0
    15d0:	lsrs	r1, r1, #5
    15d2:	mov	r0, sl
    15d4:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15d8:	ldr	r3, [r7, #0]
    15da:	str	r3, [sp, #156]	; 0x9c
	return ret;
    15dc:	ldr	r3, [sp, #156]	; 0x9c
    15de:	ldr	r2, [r6, #12]
      blinking = true;
    15e0:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
    15e4:	str.w	r9, [r8, #20]
      lastBlink = millis();  
    15e8:	str.w	r3, [r8, #8]
    15ec:	b.w	61a <loop+0x186>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    15f0:	movs	r0, #2
    15f2:	strb	r0, [r3, #0]
    15f4:	movs	r1, #8
    15f6:	ldr	r0, [pc, #364]	; (1764 <loop+0x12d0>)
    15f8:	str	r2, [sp, #4]
    15fa:	bl	1c84 <usb_serial_write>
    15fe:	ldr	r0, [pc, #352]	; (1760 <loop+0x12cc>)
    1600:	bl	37f8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    1604:	ldr.w	r8, [sl, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1608:	ldrb.w	sl, [r8]
    160c:	mov	r0, sl
    160e:	bl	22a0 <digitalRead>
    1612:	clz	r1, r0
    1616:	lsrs	r1, r1, #5
    1618:	mov	r0, sl
    161a:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    161e:	ldr	r3, [r7, #0]
    1620:	str	r3, [sp, #132]	; 0x84
      blinking = true;
      blinkingCounter = times;
    1622:	ldr	r2, [sp, #4]
	return ret;
    1624:	ldr	r3, [sp, #132]	; 0x84
    1626:	str.w	r2, [r8, #20]
    162a:	ldr	r2, [r5, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    162c:	strb.w	r9, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1630:	str.w	r3, [r8, #8]
    1634:	b.w	5dc <loop+0x148>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1638:	movs	r0, #2
    163a:	strb	r0, [r3, #0]
    163c:	movs	r1, #8
    163e:	ldr	r0, [pc, #292]	; (1764 <loop+0x12d0>)
    1640:	str	r2, [sp, #4]
    1642:	bl	1c84 <usb_serial_write>
    1646:	ldr	r0, [pc, #280]	; (1760 <loop+0x12cc>)
    1648:	bl	37f8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    164c:	ldr.w	r8, [sl, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1650:	ldrb.w	sl, [r8]
    1654:	mov	r0, sl
    1656:	bl	22a0 <digitalRead>
    165a:	clz	r1, r0
    165e:	lsrs	r1, r1, #5
    1660:	mov	r0, sl
    1662:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1666:	ldr	r3, [r7, #0]
    1668:	str	r3, [sp, #84]	; 0x54
      blinking = true;
      blinkingCounter = times;
    166a:	ldr	r2, [sp, #4]
	return ret;
    166c:	ldr	r3, [sp, #84]	; 0x54
    166e:	str.w	r2, [r8, #20]
    1672:	ldr	r2, [r6, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1674:	strb.w	r9, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1678:	str.w	r3, [r8, #8]
    167c:	b.w	522 <loop+0x8e>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1680:	movs	r0, #2
    1682:	strb	r0, [r3, #0]
    1684:	movs	r1, #8
    1686:	ldr	r0, [pc, #220]	; (1764 <loop+0x12d0>)
    1688:	str	r2, [sp, #4]
    168a:	bl	1c84 <usb_serial_write>
    168e:	ldr	r0, [pc, #208]	; (1760 <loop+0x12cc>)
    1690:	bl	37f8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    1694:	ldr.w	r8, [sl, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1698:	ldrb.w	sl, [r8]
    169c:	mov	r0, sl
    169e:	bl	22a0 <digitalRead>
    16a2:	clz	r1, r0
    16a6:	lsrs	r1, r1, #5
    16a8:	mov	r0, sl
    16aa:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16ae:	ldr	r3, [r7, #0]
    16b0:	str	r3, [sp, #116]	; 0x74
      blinking = true;
      blinkingCounter = times;
    16b2:	ldr	r2, [sp, #4]
	return ret;
    16b4:	ldr	r3, [sp, #116]	; 0x74
    16b6:	str.w	r2, [r8, #20]
    16ba:	ldr	r2, [r6, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    16bc:	strb.w	r9, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    16c0:	str.w	r3, [r8, #8]
    16c4:	b.w	59e <loop+0x10a>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    16c8:	movs	r0, #2
    16ca:	strb	r0, [r3, #0]
    16cc:	movs	r1, #8
    16ce:	ldr	r0, [pc, #148]	; (1764 <loop+0x12d0>)
    16d0:	str	r2, [sp, #4]
    16d2:	bl	1c84 <usb_serial_write>
    16d6:	ldr	r0, [pc, #136]	; (1760 <loop+0x12cc>)
    16d8:	bl	37f8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    16dc:	ldr.w	r8, [sl, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16e0:	ldrb.w	sl, [r8]
    16e4:	mov	r0, sl
    16e6:	bl	22a0 <digitalRead>
    16ea:	clz	r1, r0
    16ee:	lsrs	r1, r1, #5
    16f0:	mov	r0, sl
    16f2:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16f6:	ldr	r3, [r7, #0]
    16f8:	str	r3, [sp, #148]	; 0x94
      blinking = true;
      blinkingCounter = times;
    16fa:	ldr	r2, [sp, #4]
	return ret;
    16fc:	ldr	r3, [sp, #148]	; 0x94
    16fe:	str.w	r2, [r8, #20]
    1702:	ldr	r2, [r6, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1704:	strb.w	r9, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1708:	str.w	r3, [r8, #8]
    170c:	b.w	61a <loop+0x186>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1710:	movs	r0, #2
    1712:	strb	r0, [r3, #0]
    1714:	movs	r1, #8
    1716:	ldr	r0, [pc, #76]	; (1764 <loop+0x12d0>)
    1718:	str	r2, [sp, #4]
    171a:	bl	1c84 <usb_serial_write>
    171e:	ldr	r0, [pc, #64]	; (1760 <loop+0x12cc>)
    1720:	bl	37f8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    1724:	ldr.w	r8, [sl, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1728:	ldrb.w	sl, [r8]
    172c:	mov	r0, sl
    172e:	bl	22a0 <digitalRead>
    1732:	clz	r1, r0
    1736:	lsrs	r1, r1, #5
    1738:	mov	r0, sl
    173a:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    173e:	ldr	r3, [r7, #0]
    1740:	str	r3, [sp, #68]	; 0x44
      blinking = true;
      blinkingCounter = times;
    1742:	ldr	r2, [sp, #4]
	return ret;
    1744:	ldr	r3, [sp, #68]	; 0x44
    1746:	str.w	r2, [r8, #20]
    174a:	ldr	r2, [r5, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    174c:	strb.w	r9, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1750:	str.w	r3, [r8, #8]
    1754:	b.w	4e4 <loop+0x50>
    1758:	.word	0x1fff1844
    175c:	.word	0x00004c04
    1760:	.word	0x1fff0c60
    1764:	.word	0x00004bec
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1768:	movs	r0, #2
    176a:	strb	r0, [r3, #0]
    176c:	movs	r1, #8
    176e:	ldr	r0, [pc, #540]	; (198c <loop+0x14f8>)
    1770:	str	r2, [sp, #4]
    1772:	bl	1c84 <usb_serial_write>
    1776:	ldr	r0, [pc, #536]	; (1990 <loop+0x14fc>)
    1778:	bl	37f8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    177c:	ldr.w	r8, [sl, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1780:	ldrb.w	sl, [r8]
    1784:	mov	r0, sl
    1786:	bl	22a0 <digitalRead>
    178a:	clz	r1, r0
    178e:	lsrs	r1, r1, #5
    1790:	mov	r0, sl
    1792:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1796:	ldr	r3, [r7, #0]
    1798:	str	r3, [sp, #100]	; 0x64
      blinking = true;
      blinkingCounter = times;
    179a:	ldr	r2, [sp, #4]
	return ret;
    179c:	ldr	r3, [sp, #100]	; 0x64
    179e:	str.w	r2, [r8, #20]
    17a2:	ldr	r2, [r5, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    17a4:	strb.w	r9, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    17a8:	str.w	r3, [r8, #8]
    17ac:	b.w	560 <loop+0xcc>
    17b0:	movs	r1, #10
    17b2:	ldr	r0, [pc, #480]	; (1994 <loop+0x1500>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    17b4:	strb	r2, [r3, #0]
    17b6:	str	r2, [sp, #4]
    17b8:	bl	1c84 <usb_serial_write>
    17bc:	ldr	r0, [pc, #464]	; (1990 <loop+0x14fc>)
    17be:	bl	37f8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    17c2:	ldr.w	r8, [sl, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17c6:	ldrb.w	r9, [r8]
    17ca:	mov	r0, r9
    17cc:	bl	22a0 <digitalRead>
    17d0:	clz	r1, r0
    17d4:	lsrs	r1, r1, #5
    17d6:	mov	r0, r9
    17d8:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17dc:	ldr	r3, [r7, #0]
    17de:	str	r3, [sp, #104]	; 0x68
      blinking = true;
      blinkingCounter = times;
    17e0:	ldr	r2, [sp, #4]
	return ret;
    17e2:	ldr	r3, [sp, #104]	; 0x68
    17e4:	str.w	r2, [r8, #20]
    17e8:	ldr	r2, [r5, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    17ea:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    17ee:	str.w	r3, [r8, #8]
    17f2:	b.w	560 <loop+0xcc>
    17f6:	movs	r1, #10
    17f8:	ldr	r0, [pc, #408]	; (1994 <loop+0x1500>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    17fa:	strb	r2, [r3, #0]
    17fc:	str	r2, [sp, #4]
    17fe:	bl	1c84 <usb_serial_write>
    1802:	ldr	r0, [pc, #396]	; (1990 <loop+0x14fc>)
    1804:	bl	37f8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1808:	ldr.w	r8, [sl, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    180c:	ldrb.w	r9, [r8]
    1810:	mov	r0, r9
    1812:	bl	22a0 <digitalRead>
    1816:	clz	r1, r0
    181a:	lsrs	r1, r1, #5
    181c:	mov	r0, r9
    181e:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1822:	ldr	r3, [r7, #0]
    1824:	str	r3, [sp, #152]	; 0x98
      blinking = true;
      blinkingCounter = times;
    1826:	ldr	r2, [sp, #4]
	return ret;
    1828:	ldr	r3, [sp, #152]	; 0x98
    182a:	str.w	r2, [r8, #20]
    182e:	ldr	r2, [r6, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1830:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1834:	str.w	r3, [r8, #8]
    1838:	b.w	61a <loop+0x186>
    183c:	movs	r1, #10
    183e:	ldr	r0, [pc, #340]	; (1994 <loop+0x1500>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1840:	strb	r2, [r3, #0]
    1842:	str	r2, [sp, #4]
    1844:	bl	1c84 <usb_serial_write>
    1848:	ldr	r0, [pc, #324]	; (1990 <loop+0x14fc>)
    184a:	bl	37f8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    184e:	ldr.w	r8, [sl, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1852:	ldrb.w	r9, [r8]
    1856:	mov	r0, r9
    1858:	bl	22a0 <digitalRead>
    185c:	clz	r1, r0
    1860:	lsrs	r1, r1, #5
    1862:	mov	r0, r9
    1864:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1868:	ldr	r3, [r7, #0]
    186a:	str	r3, [sp, #72]	; 0x48
      blinking = true;
      blinkingCounter = times;
    186c:	ldr	r2, [sp, #4]
	return ret;
    186e:	ldr	r3, [sp, #72]	; 0x48
    1870:	str.w	r2, [r8, #20]
    1874:	ldr	r2, [r5, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1876:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    187a:	str.w	r3, [r8, #8]
    187e:	b.w	4e4 <loop+0x50>
    1882:	movs	r1, #10
    1884:	ldr	r0, [pc, #268]	; (1994 <loop+0x1500>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1886:	strb	r2, [r3, #0]
    1888:	str	r2, [sp, #4]
    188a:	bl	1c84 <usb_serial_write>
    188e:	ldr	r0, [pc, #256]	; (1990 <loop+0x14fc>)
    1890:	bl	37f8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1894:	ldr.w	r8, [sl, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1898:	ldrb.w	r9, [r8]
    189c:	mov	r0, r9
    189e:	bl	22a0 <digitalRead>
    18a2:	clz	r1, r0
    18a6:	lsrs	r1, r1, #5
    18a8:	mov	r0, r9
    18aa:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18ae:	ldr	r3, [r7, #0]
    18b0:	str	r3, [sp, #136]	; 0x88
      blinking = true;
      blinkingCounter = times;
    18b2:	ldr	r2, [sp, #4]
	return ret;
    18b4:	ldr	r3, [sp, #136]	; 0x88
    18b6:	str.w	r2, [r8, #20]
    18ba:	ldr	r2, [r5, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18bc:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    18c0:	str.w	r3, [r8, #8]
    18c4:	b.w	5dc <loop+0x148>
    18c8:	movs	r1, #10
    18ca:	ldr	r0, [pc, #200]	; (1994 <loop+0x1500>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    18cc:	strb	r2, [r3, #0]
    18ce:	str	r2, [sp, #4]
    18d0:	bl	1c84 <usb_serial_write>
    18d4:	ldr	r0, [pc, #184]	; (1990 <loop+0x14fc>)
    18d6:	bl	37f8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    18da:	ldr.w	r8, [sl, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18de:	ldrb.w	r9, [r8]
    18e2:	mov	r0, r9
    18e4:	bl	22a0 <digitalRead>
    18e8:	clz	r1, r0
    18ec:	lsrs	r1, r1, #5
    18ee:	mov	r0, r9
    18f0:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18f4:	ldr	r3, [r7, #0]
    18f6:	str	r3, [sp, #88]	; 0x58
      blinking = true;
      blinkingCounter = times;
    18f8:	ldr	r2, [sp, #4]
	return ret;
    18fa:	ldr	r3, [sp, #88]	; 0x58
    18fc:	str.w	r2, [r8, #20]
    1900:	ldr	r2, [r6, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1902:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1906:	str.w	r3, [r8, #8]
    190a:	b.w	522 <loop+0x8e>
    190e:	movs	r1, #10
    1910:	ldr	r0, [pc, #128]	; (1994 <loop+0x1500>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1912:	strb	r2, [r3, #0]
    1914:	str	r2, [sp, #4]
    1916:	bl	1c84 <usb_serial_write>
    191a:	ldr	r0, [pc, #116]	; (1990 <loop+0x14fc>)
    191c:	bl	37f8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1920:	ldr.w	r8, [sl, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1924:	ldrb.w	r9, [r8]
    1928:	mov	r0, r9
    192a:	bl	22a0 <digitalRead>
    192e:	clz	r1, r0
    1932:	lsrs	r1, r1, #5
    1934:	mov	r0, r9
    1936:	bl	2294 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    193a:	ldr	r3, [r7, #0]
    193c:	str	r3, [sp, #120]	; 0x78
      blinking = true;
      blinkingCounter = times;
    193e:	ldr	r2, [sp, #4]
	return ret;
    1940:	ldr	r3, [sp, #120]	; 0x78
    1942:	str.w	r2, [r8, #20]
    1946:	ldr	r2, [r6, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1948:	strb.w	fp, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    194c:	str.w	r3, [r8, #8]
    1950:	b.w	59e <loop+0x10a>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1954:	add.w	r7, r3, #10
    1958:	adds	r3, #14
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    195a:	ldr.w	r2, [r6, r7, lsl #2]
    195e:	ldr.w	r3, [r6, r3, lsl #2]
    1962:	lsls	r0, r2, #16
    1964:	lsls	r3, r3, #24
    1966:	and.w	r3, r3, #2130706432	; 0x7f000000
    196a:	and.w	r0, r0, #8323072	; 0x7f0000
    196e:	orrs	r0, r3
    1970:	orr.w	r0, r0, #40704	; 0x9f00
    1974:	orr.w	r0, r0, #9
    1978:	bl	2520 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    197c:	bl	25bc <usb_midi_flush_output>
      activeNote = notes[step];
    1980:	ldr.w	r2, [r6, r7, lsl #2]
    1984:	ldr	r3, [r6, #8]
    1986:	str	r2, [r6, #36]	; 0x24
    1988:	b.n	144c <loop+0xfb8>
    198a:	nop
    198c:	.word	0x00004bec
    1990:	.word	0x1fff0c60
    1994:	.word	0x00004bf8

00001998 <_GLOBAL__sub_I_currentMode>:
    1998:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;
const int playPin = 12;

Led led1(3, LOW);
    199c:	movs	r2, #0
    199e:	movs	r1, #3
    19a0:	ldr	r0, [pc, #448]	; (1b64 <_GLOBAL__sub_I_currentMode+0x1cc>)
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    19a2:	ldr	r5, [pc, #452]	; (1b68 <_GLOBAL__sub_I_currentMode+0x1d0>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    19a4:	ldr	r4, [pc, #452]	; (1b6c <_GLOBAL__sub_I_currentMode+0x1d4>)
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    19a6:	ldr	r6, [pc, #456]	; (1b70 <_GLOBAL__sub_I_currentMode+0x1d8>)
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    19a8:	ldr.w	fp, [pc, #516]	; 1bb0 <_GLOBAL__sub_I_currentMode+0x218>
    19ac:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    19b0:	movs	r2, #0
    19b2:	movs	r1, #5
    19b4:	ldr	r0, [pc, #444]	; (1b74 <_GLOBAL__sub_I_currentMode+0x1dc>)
    19b6:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    19ba:	movs	r2, #0
    19bc:	movs	r1, #7
    19be:	ldr	r0, [pc, #440]	; (1b78 <_GLOBAL__sub_I_currentMode+0x1e0>)
    19c0:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    19c4:	movs	r2, #0
    19c6:	movs	r1, #9
    19c8:	ldr	r0, [pc, #432]	; (1b7c <_GLOBAL__sub_I_currentMode+0x1e4>)
    19ca:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    19ce:	movs	r2, #0
    19d0:	movs	r1, #11
    19d2:	ldr	r0, [pc, #428]	; (1b80 <_GLOBAL__sub_I_currentMode+0x1e8>)
    19d4:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    19d8:	movs	r2, #0
    19da:	movs	r1, #24
    19dc:	ldr	r0, [pc, #420]	; (1b84 <_GLOBAL__sub_I_currentMode+0x1ec>)
    19de:	bl	46c <Led::Led(int, int)>
    19e2:	ldmia.w	r5, {r0, r1, r2, r3}
    19e6:	add.w	r7, r5, #16
    19ea:	add.w	ip, r4, #40	; 0x28
    19ee:	stmia.w	ip, {r0, r1, r2, r3}
    19f2:	ldmia.w	r7, {r0, r1, r2, r3}
    19f6:	adds	r5, #32
    19f8:	add.w	r7, r4, #56	; 0x38
    19fc:	stmia.w	r7, {r0, r1, r2, r3}
    1a00:	ldmia.w	r5, {r0, r1, r2, r3}
    1a04:	movs	r5, #120	; 0x78
    1a06:	add.w	ip, r4, #72	; 0x48
    1a0a:	mov.w	sl, #0
    1a0e:	mov.w	r8, #24
    1a12:	str	r5, [r4, #12]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1a14:	movs	r5, #0
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1a16:	strd	sl, fp, [r4, #16]
    1a1a:	str.w	r8, [r4, #32]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1a1e:	strb	r5, [r4, #0]
    1a20:	strb	r5, [r4, #1]
    1a22:	strb	r5, [r4, #2]
    1a24:	strb	r5, [r4, #3]
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1a26:	str	r5, [r4, #24]
    1a28:	str	r5, [r4, #28]
    1a2a:	str	r5, [r4, #36]	; 0x24
    1a2c:	stmia.w	ip, {r0, r1, r2, r3}
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    1a30:	adds	r0, r6, #4
    1a32:	ldmia	r0, {r0, r1, r2}
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a34:	ldr.w	lr, [pc, #380]	; 1bb4 <_GLOBAL__sub_I_currentMode+0x21c>
    1a38:	str	r2, [r4, #100]	; 0x64
      m_id = id;
      m_pin = pin;
    1a3a:	movs	r7, #2
      m_leds[4] = leds[4];
    1a3c:	ldr	r2, [r6, #16]
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1a3e:	ldr	r3, [r6, #0]
      m_leds[1] = leds[1];
    1a40:	str	r0, [r4, #92]	; 0x5c
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_state = state;
      m_currentStep = 0;
      m_mode = PITCH;
    1a42:	mov.w	r8, #1
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
    1a46:	str	r1, [r4, #96]	; 0x60
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1a48:	mov	r0, r7
    1a4a:	mov	r1, r5
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1a4c:	str	r2, [r4, #104]	; 0x68
      m_leds[5] = leds[5];
    1a4e:	ldr	r2, [r6, #20]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a50:	str.w	r3, [lr, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a54:	strb.w	r5, [lr, #16]
      m_playButton = playButton;
    1a58:	strb.w	r5, [lr, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a5c:	str.w	r4, [lr, #28]
      m_id = id;
    1a60:	str.w	r8, [lr]
      m_pin = pin;
    1a64:	str.w	r7, [lr, #32]
    1a68:	mov.w	r9, #4
      m_state = state;
    1a6c:	strb	r5, [r4, #4]
      m_currentStep = 0;
    1a6e:	str	r5, [r4, #8]
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1a70:	str	r2, [r4, #108]	; 0x6c
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1a72:	str	r3, [r4, #88]	; 0x58
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_state = state;
      m_currentStep = 0;
      m_mode = PITCH;
    1a74:	strb.w	r8, [r4, #112]	; 0x70
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1a78:	bl	22bc <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a7c:	ldr	r3, [pc, #264]	; (1b88 <_GLOBAL__sub_I_currentMode+0x1f0>)
    1a7e:	ldr	r2, [r6, #4]
    1a80:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1a82:	mov	r1, r5
    1a84:	mov	r0, r9
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a86:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1a88:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1a8a:	mov.w	fp, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a8e:	str	r4, [r3, #28]
      m_id = id;
    1a90:	str	r7, [r3, #0]
      m_pin = pin;
    1a92:	str.w	r9, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1a96:	bl	22bc <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1a9a:	ldr	r3, [pc, #240]	; (1b8c <_GLOBAL__sub_I_currentMode+0x1f4>)
    1a9c:	ldr	r2, [r6, #8]
    1a9e:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1aa0:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1aa2:	mov.w	sl, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1aa6:	mov	r0, fp
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1aa8:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1aaa:	strb	r5, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1aac:	str	r4, [r3, #28]
      m_id = id;
    1aae:	str.w	sl, [r3]
      m_pin = pin;
    1ab2:	str.w	fp, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ab6:	bl	22bc <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1aba:	ldr	r3, [pc, #212]	; (1b90 <_GLOBAL__sub_I_currentMode+0x1f8>)
    1abc:	ldr	r2, [r6, #12]
    1abe:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1ac0:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ac2:	mov	r0, r2
    1ac4:	mov	r1, r5
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1ac6:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1ac8:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1aca:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1acc:	str	r4, [r3, #28]
      m_id = id;
    1ace:	str.w	r9, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ad2:	bl	22bc <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ad6:	ldr	r3, [pc, #188]	; (1b94 <_GLOBAL__sub_I_currentMode+0x1fc>)
    1ad8:	ldr	r2, [r6, #16]
    1ada:	str	r2, [r3, #24]
      m_id = id;
    1adc:	movs	r1, #5
      m_pin = pin;
    1ade:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1ae0:	str	r1, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ae2:	mov	r0, r2
    1ae4:	mov	r1, r5
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1ae6:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1ae8:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1aea:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1aec:	strb.w	r8, [r3, #16]
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1af0:	bl	22bc <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1af4:	ldr	r3, [pc, #160]	; (1b98 <_GLOBAL__sub_I_currentMode+0x200>)
    1af6:	ldr	r2, [r6, #20]
    1af8:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1afa:	movs	r6, #12
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1afc:	mov	r0, r6
    1afe:	mov	r1, r5
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1b00:	str	r6, [r3, #32]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b02:	ldr	r6, [pc, #152]	; (1b9c <_GLOBAL__sub_I_currentMode+0x204>)
      m_shiftButton = shiftButton;
    1b04:	strb	r5, [r3, #16]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1b06:	str.w	fp, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1b0a:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1b0c:	strb.w	r8, [r3, #17]

      pinMode(pin, INPUT);
    1b10:	bl	22bc <pinMode>
    1b14:	ldr	r0, [pc, #136]	; (1ba0 <_GLOBAL__sub_I_currentMode+0x208>)
    1b16:	ldr	r1, [pc, #140]	; (1ba4 <_GLOBAL__sub_I_currentMode+0x20c>)
    1b18:	ldr	r2, [pc, #140]	; (1ba8 <_GLOBAL__sub_I_currentMode+0x210>)
    1b1a:	ldr	r3, [pc, #144]	; (1bac <_GLOBAL__sub_I_currentMode+0x214>)
      m_pin = pin;
      m_knobType = knobType;
    1b1c:	strb	r5, [r6, #20]
      m_id = id;
    1b1e:	str	r5, [r6, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1b20:	mov.w	lr, #15
    1b24:	movs	r5, #14
    1b26:	strb	r5, [r6, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b28:	str	r4, [r6, #16]
    1b2a:	str	r4, [r0, #16]
      m_pin = pin;
    1b2c:	movs	r6, #16
      m_knobType = knobType;
    1b2e:	strb.w	r8, [r0, #20]
      m_id = id;
    1b32:	str.w	r8, [r0, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1b36:	movs	r5, #17
    1b38:	strb.w	lr, [r0]
    1b3c:	movs	r0, #18
    1b3e:	strb	r6, [r1, #0]
    1b40:	strb	r5, [r2, #0]
    1b42:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b44:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1b46:	strb	r7, [r1, #20]
      m_id = id;
    1b48:	str	r7, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b4a:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    1b4c:	strb.w	sl, [r2, #20]
      m_id = id;
    1b50:	str.w	sl, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1b54:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1b56:	strb.w	r9, [r3, #20]
      m_id = id;
    1b5a:	str.w	r9, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1b5e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b62:	nop
    1b64:	.word	0x1fff162c
    1b68:	.word	0x00004b98
    1b6c:	.word	0x1fff1730
    1b70:	.word	0x1fff0c40
    1b74:	.word	0x1fff15cc
    1b78:	.word	0x1fff15e4
    1b7c:	.word	0x1fff15fc
    1b80:	.word	0x1fff1614
    1b84:	.word	0x1fff1690
    1b88:	.word	0x1fff16e4
    1b8c:	.word	0x1fff1708
    1b90:	.word	0x1fff1808
    1b94:	.word	0x1fff17a8
    1b98:	.word	0x1fff17cc
    1b9c:	.word	0x1fff16a8
    1ba0:	.word	0x1fff1644
    1ba4:	.word	0x1fff1660
    1ba8:	.word	0x1fff1678
    1bac:	.word	0x1fff17f0
    1bb0:	.word	0x407f4000
    1bb4:	.word	0x1fff16c0

00001bb8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1bb8:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1bba:	ldr	r5, [pc, #60]	; (1bf8 <usb_serial_getchar+0x40>)
    1bbc:	ldr	r0, [r5, #0]
    1bbe:	cbz	r0, 1be0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1bc0:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1bc2:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1bc4:	adds	r1, r0, r3
    1bc6:	adds	r3, #1
	if (i >= rx_packet->len) {
    1bc8:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1bca:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1bcc:	bcs.n	1bd4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1bce:	strh	r3, [r0, #2]
	}
	return c;
    1bd0:	mov	r0, r4
}
    1bd2:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1bd4:	bl	2a64 <usb_free>
		rx_packet = NULL;
    1bd8:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1bda:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1bdc:	str	r3, [r5, #0]
    1bde:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1be0:	ldr	r3, [pc, #24]	; (1bfc <usb_serial_getchar+0x44>)
    1be2:	ldrb	r3, [r3, #0]
    1be4:	cbz	r3, 1bf2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1be6:	movs	r0, #2
    1be8:	bl	2ab0 <usb_rx>
    1bec:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1bee:	cmp	r0, #0
    1bf0:	bne.n	1bc0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1bf2:	mov.w	r0, #4294967295
    1bf6:	pop	{r3, r4, r5, pc}
    1bf8:	.word	0x1fff1838
    1bfc:	.word	0x1fff1998

00001c00 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1c00:	push	{r4, lr}
	if (!rx_packet) {
    1c02:	ldr	r4, [pc, #36]	; (1c28 <usb_serial_peekchar+0x28>)
    1c04:	ldr	r0, [r4, #0]
    1c06:	cbz	r0, 1c10 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1c08:	ldrh	r3, [r0, #2]
    1c0a:	add	r0, r3
    1c0c:	ldrb	r0, [r0, #8]
}
    1c0e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1c10:	ldr	r3, [pc, #24]	; (1c2c <usb_serial_peekchar+0x2c>)
    1c12:	ldrb	r3, [r3, #0]
    1c14:	cbz	r3, 1c22 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1c16:	movs	r0, #2
    1c18:	bl	2ab0 <usb_rx>
    1c1c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1c1e:	cmp	r0, #0
    1c20:	bne.n	1c08 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1c22:	mov.w	r0, #4294967295
    1c26:	pop	{r4, pc}
    1c28:	.word	0x1fff1838
    1c2c:	.word	0x1fff1998

00001c30 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1c30:	ldr	r3, [pc, #16]	; (1c44 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1c32:	ldr	r2, [pc, #20]	; (1c48 <usb_serial_available+0x18>)
    1c34:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1c36:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1c38:	cbz	r3, 1c42 <usb_serial_available+0x12>
    1c3a:	ldrh	r2, [r3, #0]
    1c3c:	ldrh	r3, [r3, #2]
    1c3e:	subs	r3, r2, r3
    1c40:	add	r0, r3
	return count;
}
    1c42:	bx	lr
    1c44:	.word	0x1fff1838
    1c48:	.word	0x1fff1e2c

00001c4c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1c4c:	ldr	r3, [pc, #44]	; (1c7c <usb_serial_flush_input+0x30>)
    1c4e:	ldrb	r3, [r3, #0]
    1c50:	cbz	r3, 1c7a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1c52:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1c54:	ldr	r4, [pc, #40]	; (1c80 <usb_serial_flush_input+0x34>)
    1c56:	ldr	r0, [r4, #0]
    1c58:	cbz	r0, 1c6e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1c5a:	bl	2a64 <usb_free>
		rx_packet = NULL;
    1c5e:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1c60:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1c62:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1c64:	bl	2ab0 <usb_rx>
		if (!rx) break;
    1c68:	cbz	r0, 1c78 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1c6a:	bl	2a64 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1c6e:	movs	r0, #2
    1c70:	bl	2ab0 <usb_rx>
		if (!rx) break;
    1c74:	cmp	r0, #0
    1c76:	bne.n	1c6a <usb_serial_flush_input+0x1e>
    1c78:	pop	{r4, pc}
    1c7a:	bx	lr
    1c7c:	.word	0x1fff1998
    1c80:	.word	0x1fff1838

00001c84 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1c84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1c88:	ldr.w	r9, [pc, #248]	; 1d84 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1c8c:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1c8e:	movs	r2, #1
    1c90:	strb.w	r2, [r9]
	while (size > 0) {
    1c94:	str	r1, [sp, #4]
    1c96:	cbz	r1, 1cf4 <usb_serial_write+0x70>
    1c98:	ldr.w	r8, [pc, #236]	; 1d88 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1c9c:	ldr	r7, [pc, #212]	; (1d74 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1c9e:	ldr	r6, [sp, #4]
    1ca0:	mov	fp, r0
		if (!tx_packet) {
    1ca2:	ldr.w	r0, [r8]
    1ca6:	cbz	r0, 1d16 <usb_serial_write+0x92>
    1ca8:	ldr	r5, [pc, #204]	; (1d78 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1caa:	ldrh	r4, [r0, #2]
    1cac:	rsb	r1, r4, #64	; 0x40
    1cb0:	cmp	r1, r6
    1cb2:	it	cs
    1cb4:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1cb6:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1cba:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1cbc:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1cc0:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1cc2:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1cc4:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1cc8:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1ccc:	cbz	r1, 1ce4 <usb_serial_write+0x60>
    1cce:	subs	r4, #1
    1cd0:	add	r2, r4
    1cd2:	add	r1, fp
    1cd4:	ldrb.w	r4, [fp], #1
    1cd8:	strb.w	r4, [r2, #1]!
    1cdc:	cmp	fp, r1
    1cde:	bne.n	1cd4 <usb_serial_write+0x50>
    1ce0:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1ce4:	cmp.w	lr, #63	; 0x3f
    1ce8:	bhi.n	1d02 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1cea:	ldr	r2, [pc, #144]	; (1d7c <usb_serial_write+0xf8>)
    1cec:	movs	r1, #5
    1cee:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1cf0:	cmp	r6, #0
    1cf2:	bne.n	1ca2 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1cf4:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1cf6:	movs	r3, #0
    1cf8:	strb.w	r3, [r9]
	return ret;
}
    1cfc:	add	sp, #12
    1cfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1d02:	movs	r2, #64	; 0x40
    1d04:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1d06:	mov	r1, r0
    1d08:	movs	r0, #3
    1d0a:	bl	2c00 <usb_tx>
			tx_packet = NULL;
    1d0e:	movs	r2, #0
    1d10:	str.w	r2, [r8]
    1d14:	b.n	1cea <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1d16:	ldrb	r2, [r7, #0]
    1d18:	cbz	r2, 1d64 <usb_serial_write+0xe0>
    1d1a:	ldr	r4, [pc, #100]	; (1d80 <usb_serial_write+0xfc>)
    1d1c:	ldr	r5, [pc, #88]	; (1d78 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1d1e:	mov.w	sl, #1
    1d22:	b.n	1d34 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1d24:	subs	r4, #1
    1d26:	beq.n	1d56 <usb_serial_write+0xd2>
    1d28:	ldrb	r2, [r5, #0]
    1d2a:	cbnz	r2, 1d56 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1d2c:	bl	3704 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1d30:	ldrb	r2, [r7, #0]
    1d32:	cbz	r2, 1d64 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1d34:	movs	r0, #3
    1d36:	bl	2aec <usb_tx_packet_count>
    1d3a:	cmp	r0, #7
    1d3c:	bhi.n	1d24 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1d3e:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1d42:	bl	2a24 <usb_malloc>
    1d46:	str.w	r0, [r8]
					if (tx_packet) break;
    1d4a:	cmp	r0, #0
    1d4c:	bne.n	1caa <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1d4e:	ldr	r3, [pc, #52]	; (1d84 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1d50:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1d52:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1d54:	bne.n	1d28 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1d56:	movs	r3, #1
					return -1;
    1d58:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1d5c:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1d5e:	add	sp, #12
    1d60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1d64:	movs	r3, #0
					return -1;
    1d66:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1d6a:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1d6e:	add	sp, #12
    1d70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d74:	.word	0x1fff1998
    1d78:	.word	0x1fff1834
    1d7c:	.word	0x1fff182c
    1d80:	.word	0x00014821
    1d84:	.word	0x1fff182d
    1d88:	.word	0x1fff1830

00001d8c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1d8c:	push	{lr}
    1d8e:	sub	sp, #12
    1d90:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1d92:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1d94:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1d98:	mov	r0, r3
    1d9a:	bl	1c84 <usb_serial_write>
}
    1d9e:	add	sp, #12
    1da0:	ldr.w	pc, [sp], #4

00001da4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1da4:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1da6:	ldr	r5, [pc, #56]	; (1de0 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1da8:	ldr	r4, [pc, #56]	; (1de4 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1daa:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1dac:	movs	r3, #1
    1dae:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1db0:	cbz	r0, 1dbe <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1db2:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1db4:	movs	r3, #0
    1db6:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1db8:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1dbc:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1dbe:	ldr	r3, [pc, #40]	; (1de8 <usb_serial_write_buffer_free+0x44>)
    1dc0:	ldrb	r3, [r3, #0]
    1dc2:	cbnz	r3, 1dca <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1dc4:	movs	r0, #0
    1dc6:	strb	r0, [r4, #0]
			return 0;
    1dc8:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1dca:	movs	r0, #3
    1dcc:	bl	2aec <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1dd0:	cmp	r0, #7
    1dd2:	bhi.n	1dc4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1dd4:	bl	2a24 <usb_malloc>
    1dd8:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1dda:	cmp	r0, #0
    1ddc:	bne.n	1db2 <usb_serial_write_buffer_free+0xe>
    1dde:	b.n	1dc4 <usb_serial_write_buffer_free+0x20>
    1de0:	.word	0x1fff1830
    1de4:	.word	0x1fff182d
    1de8:	.word	0x1fff1998

00001dec <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1dec:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1dee:	ldr	r3, [pc, #68]	; (1e34 <usb_serial_flush_output+0x48>)
    1df0:	ldrb	r3, [r3, #0]
    1df2:	cbz	r3, 1e18 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1df4:	ldr	r6, [pc, #64]	; (1e38 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1df6:	ldr	r5, [pc, #68]	; (1e3c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1df8:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1dfa:	movs	r7, #1
    1dfc:	strb	r7, [r5, #0]
	if (tx_packet) {
    1dfe:	cbz	r4, 1e1a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1e00:	ldr	r2, [pc, #60]	; (1e40 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1e02:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1e04:	movs	r7, #0
    1e06:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1e08:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1e0a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1e0c:	movs	r0, #3
    1e0e:	bl	2c00 <usb_tx>
		tx_packet = NULL;
    1e12:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1e14:	movs	r3, #0
    1e16:	strb	r3, [r5, #0]
    1e18:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1e1a:	bl	2a24 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1e1e:	ldr	r3, [pc, #32]	; (1e40 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1e20:	cbz	r0, 1e2e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e22:	mov	r1, r0
    1e24:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1e26:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e28:	bl	2c00 <usb_tx>
    1e2c:	b.n	1e14 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1e2e:	strb	r7, [r3, #0]
    1e30:	b.n	1e14 <usb_serial_flush_output+0x28>
    1e32:	nop
    1e34:	.word	0x1fff1998
    1e38:	.word	0x1fff1830
    1e3c:	.word	0x1fff182d
    1e40:	.word	0x1fff182c

00001e44 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1e44:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1e46:	ldr	r3, [pc, #56]	; (1e80 <usb_serial_flush_callback+0x3c>)
    1e48:	ldrb	r3, [r3, #0]
    1e4a:	cbnz	r3, 1e6a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1e4c:	ldr	r4, [pc, #52]	; (1e84 <usb_serial_flush_callback+0x40>)
    1e4e:	ldr	r1, [r4, #0]
    1e50:	cbz	r1, 1e6c <usb_serial_flush_callback+0x28>
    1e52:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1e56:	ldrh	r3, [r1, #2]
    1e58:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1e5a:	movs	r0, #3
    1e5c:	bl	2c00 <usb_tx>
		tx_packet = NULL;
    1e60:	str	r5, [r4, #0]
    1e62:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1e64:	ldr	r3, [pc, #32]	; (1e88 <usb_serial_flush_callback+0x44>)
    1e66:	movs	r2, #1
    1e68:	strb	r2, [r3, #0]
    1e6a:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1e6c:	bl	2a24 <usb_malloc>
		if (tx) {
    1e70:	cmp	r0, #0
    1e72:	beq.n	1e64 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e74:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1e76:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e7a:	movs	r0, #3
    1e7c:	b.w	2c00 <usb_tx>
    1e80:	.word	0x1fff182d
    1e84:	.word	0x1fff1830
    1e88:	.word	0x1fff182c

00001e8c <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1e8c:	ldr	r2, [pc, #220]	; (1f6c <wait_for_cal+0xe0>)
    1e8e:	ldr	r1, [pc, #224]	; (1f70 <wait_for_cal+0xe4>)
    1e90:	ldr	r3, [r2, #0]
    1e92:	lsls	r3, r3, #24
    1e94:	bmi.n	1e90 <wait_for_cal+0x4>
    1e96:	ldr	r3, [r1, #0]
    1e98:	ands.w	r3, r3, #128	; 0x80
    1e9c:	bne.n	1e90 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1e9e:	cpsid	i
	if (calibrating) {
    1ea0:	ldr	r1, [pc, #208]	; (1f74 <wait_for_cal+0xe8>)
    1ea2:	ldrb	r2, [r1, #0]
    1ea4:	cmp	r2, #0
    1ea6:	beq.n	1f68 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ea8:	ldr	r2, [pc, #204]	; (1f78 <wait_for_cal+0xec>)
    1eaa:	ldr	r0, [pc, #208]	; (1f7c <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1eac:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1eae:	ldr	r4, [pc, #208]	; (1f80 <wait_for_cal+0xf4>)
    1eb0:	ldr	r7, [r2, #0]
    1eb2:	ldr	r6, [r0, #0]
    1eb4:	ldr	r5, [r4, #0]
    1eb6:	ldr	r4, [r2, #12]
    1eb8:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1eba:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ebc:	adds	r2, #20
    1ebe:	ldr	r0, [r0, #0]
    1ec0:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1ec2:	ldr	r7, [pc, #192]	; (1f84 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1ec4:	add	r5, r6
    1ec6:	add	r4, r5
    1ec8:	add	r0, r4
    1eca:	add	r2, r0
    1ecc:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1ed0:	ldr	r6, [pc, #180]	; (1f88 <wait_for_cal+0xfc>)
    1ed2:	ldr	r0, [pc, #184]	; (1f8c <wait_for_cal+0x100>)
    1ed4:	ldr	r5, [pc, #184]	; (1f90 <wait_for_cal+0x104>)
    1ed6:	ldr	r4, [pc, #188]	; (1f94 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1ed8:	orr.w	r2, r2, #32768	; 0x8000
    1edc:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1ede:	ldr	r7, [r6, #0]
    1ee0:	ldr	r6, [r0, #0]
    1ee2:	ldr	r5, [r5, #0]
    1ee4:	ldr	r2, [pc, #176]	; (1f98 <wait_for_cal+0x10c>)
    1ee6:	ldr	r4, [r4, #0]
    1ee8:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1eea:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1eec:	ldr	r0, [r0, #0]
    1eee:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1ef0:	ldr	r7, [pc, #168]	; (1f9c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1ef2:	add	r5, r6
    1ef4:	add	r4, r5
    1ef6:	add	r0, r4
    1ef8:	add	r2, r0
    1efa:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1efe:	ldr	r6, [pc, #160]	; (1fa0 <wait_for_cal+0x114>)
    1f00:	ldr	r0, [pc, #160]	; (1fa4 <wait_for_cal+0x118>)
    1f02:	ldr	r5, [pc, #164]	; (1fa8 <wait_for_cal+0x11c>)
    1f04:	ldr	r4, [pc, #164]	; (1fac <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1f06:	orr.w	r2, r2, #32768	; 0x8000
    1f0a:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1f0c:	ldr	r7, [r6, #0]
    1f0e:	ldr	r6, [r0, #0]
    1f10:	ldr	r5, [r5, #0]
    1f12:	ldr	r2, [pc, #156]	; (1fb0 <wait_for_cal+0x124>)
    1f14:	ldr	r4, [r4, #0]
    1f16:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1f18:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1f1a:	ldr	r0, [r0, #0]
    1f1c:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1f1e:	ldr	r7, [pc, #148]	; (1fb4 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1f20:	add	r5, r6
    1f22:	add	r4, r5
    1f24:	add	r0, r4
    1f26:	add	r2, r0
    1f28:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f2c:	ldr	r6, [pc, #136]	; (1fb8 <wait_for_cal+0x12c>)
    1f2e:	ldr	r0, [pc, #140]	; (1fbc <wait_for_cal+0x130>)
    1f30:	ldr	r5, [pc, #140]	; (1fc0 <wait_for_cal+0x134>)
    1f32:	ldr	r4, [pc, #144]	; (1fc4 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1f34:	orr.w	r2, r2, #32768	; 0x8000
    1f38:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f3a:	ldr	r7, [r6, #0]
    1f3c:	ldr	r6, [r0, #0]
    1f3e:	ldr	r5, [r5, #0]
    1f40:	ldr	r2, [pc, #132]	; (1fc8 <wait_for_cal+0x13c>)
    1f42:	ldr	r4, [r4, #0]
    1f44:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1f46:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f48:	ldr	r0, [r0, #0]
    1f4a:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1f4c:	add	r5, r6
    1f4e:	add	r4, r5
    1f50:	add	r0, r4
    1f52:	add	r2, r0
    1f54:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1f58:	ldr	r0, [pc, #112]	; (1fcc <wait_for_cal+0x140>)
    1f5a:	orr.w	r2, r2, #32768	; 0x8000
    1f5e:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1f60:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1f62:	cpsie	i
}
    1f64:	pop	{r4, r5, r6, r7}
    1f66:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1f68:	cpsie	i
    1f6a:	bx	lr
    1f6c:	.word	0x4003b024
    1f70:	.word	0x400bb024
    1f74:	.word	0x1fff183e
    1f78:	.word	0x4003b038
    1f7c:	.word	0x4003b03c
    1f80:	.word	0x4003b040
    1f84:	.word	0x4003b02c
    1f88:	.word	0x4003b058
    1f8c:	.word	0x4003b05c
    1f90:	.word	0x4003b060
    1f94:	.word	0x4003b064
    1f98:	.word	0x4003b06c
    1f9c:	.word	0x4003b030
    1fa0:	.word	0x400bb038
    1fa4:	.word	0x400bb03c
    1fa8:	.word	0x400bb040
    1fac:	.word	0x400bb044
    1fb0:	.word	0x400bb04c
    1fb4:	.word	0x400bb02c
    1fb8:	.word	0x400bb058
    1fbc:	.word	0x400bb05c
    1fc0:	.word	0x400bb060
    1fc4:	.word	0x400bb064
    1fc8:	.word	0x400bb06c
    1fcc:	.word	0x400bb030

00001fd0 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1fd0:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1fd2:	ldr	r0, [pc, #164]	; (2078 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1fd4:	ldr	r2, [pc, #164]	; (207c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1fd6:	ldr	r3, [pc, #168]	; (2080 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1fd8:	ldr	r5, [pc, #168]	; (2084 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1fda:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1fdc:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1fde:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1fe0:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1fe2:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1fe4:	ldr	r4, [pc, #160]	; (2088 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1fe6:	cmp	r3, #8
    1fe8:	beq.n	204c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1fea:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1fec:	ldr	r0, [pc, #156]	; (208c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1fee:	ldr	r1, [pc, #160]	; (2090 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1ff0:	beq.n	2062 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1ff2:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1ff4:	ite	eq
    1ff6:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1ff8:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1ffa:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1ffc:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1ffe:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2000:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2002:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2004:	ldr	r3, [pc, #140]	; (2094 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2006:	ldr	r1, [pc, #144]	; (2098 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2008:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    200a:	ldr	r2, [pc, #144]	; (209c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    200c:	cbz	r3, 203e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    200e:	movs	r3, #1
    2010:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2012:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2014:	ldr	r3, [pc, #136]	; (20a0 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2016:	ldr	r1, [pc, #140]	; (20a4 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2018:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    201a:	ldr	r2, [pc, #140]	; (20a8 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    201c:	cmp	r3, #1
    201e:	bls.n	206e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2020:	cmp	r3, #4
    2022:	bls.n	2044 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2024:	cmp	r3, #8
    2026:	bls.n	2066 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2028:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    202a:	ite	ls
    202c:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    202e:	movhi	r3, #135	; 0x87
    2030:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2032:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2034:	ldr	r3, [pc, #116]	; (20ac <analog_init+0xdc>)
    2036:	movs	r2, #1
    2038:	strb	r2, [r3, #0]
}
    203a:	pop	{r4, r5}
    203c:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    203e:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2040:	str	r3, [r2, #0]
    2042:	b.n	2014 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2044:	movs	r3, #132	; 0x84
    2046:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2048:	str	r3, [r2, #0]
    204a:	b.n	2034 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    204c:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2050:	ldr	r1, [pc, #60]	; (2090 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2052:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2054:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2056:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2058:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    205a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    205c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    205e:	str	r3, [r1, #0]
    2060:	b.n	2004 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2062:	movs	r2, #57	; 0x39
    2064:	b.n	2056 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2066:	movs	r3, #133	; 0x85
    2068:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    206a:	str	r3, [r2, #0]
    206c:	b.n	2034 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    206e:	movs	r3, #128	; 0x80
    2070:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2072:	str	r3, [r2, #0]
    2074:	b.n	2034 <analog_init+0x64>
    2076:	nop
    2078:	.word	0x40074000
    207c:	.word	0x40074001
    2080:	.word	0x1fff0c58
    2084:	.word	0x4003b008
    2088:	.word	0x4003b00c
    208c:	.word	0x400bb008
    2090:	.word	0x400bb00c
    2094:	.word	0x1fff1841
    2098:	.word	0x4003b020
    209c:	.word	0x400bb020
    20a0:	.word	0x1fff0c59
    20a4:	.word	0x4003b024
    20a8:	.word	0x400bb024
    20ac:	.word	0x1fff183e

000020b0 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    20b0:	cmp	r0, #71	; 0x47
    20b2:	bhi.n	2114 <analogRead+0x64>
	channel = pin2sc1a[pin];
    20b4:	ldr	r3, [pc, #204]	; (2184 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    20b6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    20ba:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    20bc:	cmp	r6, #255	; 0xff
    20be:	beq.n	2118 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    20c0:	ldr	r3, [pc, #196]	; (2188 <analogRead+0xd8>)
    20c2:	ldrb	r3, [r3, #0]
    20c4:	cmp	r3, #0
    20c6:	bne.n	211e <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    20c8:	lsls	r2, r6, #24
    20ca:	bmi.n	2126 <analogRead+0x76>
#endif

	__disable_irq();
    20cc:	cpsid	i
    20ce:	ldr	r5, [pc, #188]	; (218c <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    20d0:	ldr	r4, [pc, #188]	; (2190 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    20d2:	mov	r7, r5
    20d4:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    20d6:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    20d8:	strb	r3, [r5, #0]
	__enable_irq();
    20da:	cpsie	i
	while (1) {
		__disable_irq();
    20dc:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    20de:	ldr	r3, [r4, #0]
    20e0:	lsls	r3, r3, #24
    20e2:	bmi.n	20fe <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    20e4:	ldrb	r3, [r7, #0]
    20e6:	cbnz	r3, 20f0 <analogRead+0x40>
    20e8:	b.n	20d4 <analogRead+0x24>
    20ea:	ldrb	r3, [r5, #0]
    20ec:	cmp	r3, #0
    20ee:	beq.n	20d4 <analogRead+0x24>
		__enable_irq();
    20f0:	cpsie	i
		yield();
    20f2:	bl	3704 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    20f6:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    20f8:	ldr	r3, [r4, #0]
    20fa:	lsls	r0, r3, #24
    20fc:	bpl.n	20ea <analogRead+0x3a>
			result = ADC0_RA;
    20fe:	ldr	r3, [pc, #148]	; (2194 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2100:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2102:	movs	r2, #0
    2104:	strb	r2, [r5, #0]
			__enable_irq();
    2106:	cpsie	i
			result >>= analog_right_shift;
    2108:	ldr	r2, [pc, #140]	; (2198 <analogRead+0xe8>)
    210a:	ldrb	r0, [r2, #0]
    210c:	asr.w	r0, r3, r0
			return result;
    2110:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2114:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2116:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2118:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    211a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    211e:	bl	1e8c <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2122:	lsls	r2, r6, #24
    2124:	bpl.n	20cc <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2126:	cpsid	i
    2128:	ldr	r5, [pc, #112]	; (219c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    212a:	ldr.w	r8, [pc, #124]	; 21a8 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    212e:	ldr	r4, [pc, #112]	; (21a0 <analogRead+0xf0>)
    2130:	and.w	r7, r6, #64	; 0x40
    2134:	uxtb	r7, r7
    2136:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    213a:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    213e:	cbz	r7, 2178 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2140:	bic.w	r3, r3, #16
    2144:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2148:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    214a:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    214c:	ldr	r2, [pc, #76]	; (219c <analogRead+0xec>)
    214e:	strb	r3, [r5, #0]
	__enable_irq();
    2150:	cpsie	i
	while (1) {
		__disable_irq();
    2152:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2154:	ldr	r3, [r4, #0]
    2156:	lsls	r1, r3, #24
    2158:	bmi.n	2174 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    215a:	ldrb	r3, [r2, #0]
    215c:	cbnz	r3, 2166 <analogRead+0xb6>
    215e:	b.n	213a <analogRead+0x8a>
    2160:	ldrb	r3, [r5, #0]
    2162:	cmp	r3, #0
    2164:	beq.n	213a <analogRead+0x8a>
		__enable_irq();
    2166:	cpsie	i
		yield();
    2168:	bl	3704 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    216c:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    216e:	ldr	r3, [r4, #0]
    2170:	lsls	r3, r3, #24
    2172:	bpl.n	2160 <analogRead+0xb0>
			result = ADC1_RA;
    2174:	ldr	r3, [pc, #44]	; (21a4 <analogRead+0xf4>)
    2176:	b.n	2100 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2178:	orr.w	r3, r3, #16
    217c:	str.w	r3, [r8]
    2180:	b.n	2148 <analogRead+0x98>
    2182:	nop
    2184:	.word	0x00004c14
    2188:	.word	0x1fff183e
    218c:	.word	0x1fff1840
    2190:	.word	0x4003b000
    2194:	.word	0x4003b010
    2198:	.word	0x1fff183d
    219c:	.word	0x1fff183f
    21a0:	.word	0x400bb000
    21a4:	.word	0x400bb010
    21a8:	.word	0x400bb00c

000021ac <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    21ac:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    21ae:	ldr	r3, [pc, #68]	; (21f4 <digitalWrite.part.1+0x48>)
    21b0:	ldr.w	r2, [r3, r0, lsl #3]
    21b4:	ldrb.w	r4, [r2, #640]	; 0x280
    21b8:	cbz	r4, 21c8 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    21ba:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    21bc:	cbz	r1, 21de <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    21be:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    21c2:	ldr.w	r4, [sp], #4
    21c6:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    21c8:	add.w	r3, r3, r0, lsl #3
    21cc:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    21ce:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    21d0:	cbnz	r1, 21e8 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    21d2:	bic.w	r2, r2, #2
    21d6:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    21d8:	ldr.w	r4, [sp], #4
    21dc:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    21de:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    21e2:	ldr.w	r4, [sp], #4
    21e6:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    21e8:	orr.w	r2, r2, #3
    21ec:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    21ee:	ldr.w	r4, [sp], #4
    21f2:	bx	lr
    21f4:	.word	0x00004c5c

000021f8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    21f8:	ldr	r2, [pc, #112]	; (226c <pinMode.part.2+0x74>)
    21fa:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    21fe:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2200:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2202:	beq.n	2228 <pinMode.part.2+0x30>
    2204:	cmp	r1, #4
    2206:	beq.n	2240 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2208:	ldr.w	r0, [r2, r0, lsl #3]
    220c:	movs	r2, #0
    220e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2212:	cbz	r1, 2220 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2214:	cmp	r1, #2
    2216:	beq.n	225a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2218:	cmp	r1, #3
    221a:	beq.n	2262 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    221c:	str	r2, [r3, #0]
    221e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2220:	mov.w	r2, #256	; 0x100
    2224:	str	r2, [r3, #0]
    2226:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2228:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    222c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2230:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2234:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2236:	ldr	r2, [r3, #0]
    2238:	bic.w	r2, r2, #32
    223c:	str	r2, [r3, #0]
    223e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2240:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2244:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2248:	movs	r0, #1
    224a:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    224e:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2250:	ldr	r2, [r3, #0]
    2252:	orr.w	r2, r2, #32
    2256:	str	r2, [r3, #0]
    2258:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    225a:	movw	r2, #259	; 0x103
    225e:	str	r2, [r3, #0]
    2260:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2262:	mov.w	r2, #258	; 0x102
    2266:	str	r2, [r3, #0]
    2268:	bx	lr
    226a:	nop
    226c:	.word	0x00004c5c

00002270 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2270:	push	{r4, r5}
	RTC_SR = 0;
    2272:	ldr	r3, [pc, #20]	; (2288 <rtc_set+0x18>)
	RTC_TPR = 0;
    2274:	ldr	r5, [pc, #20]	; (228c <rtc_set+0x1c>)
	RTC_TSR = t;
    2276:	ldr	r4, [pc, #24]	; (2290 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2278:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    227a:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    227c:	str	r2, [r3, #0]
	RTC_TPR = 0;
    227e:	str	r2, [r5, #0]
	RTC_TSR = t;
    2280:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2282:	str	r1, [r3, #0]
}
    2284:	pop	{r4, r5}
    2286:	bx	lr
    2288:	.word	0x4003d014
    228c:	.word	0x4003d004
    2290:	.word	0x4003d000

00002294 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2294:	cmp	r0, #63	; 0x3f
    2296:	bhi.n	229c <digitalWrite+0x8>
    2298:	b.w	21ac <digitalWrite.part.1>
    229c:	bx	lr
    229e:	nop

000022a0 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    22a0:	cmp	r0, #63	; 0x3f
    22a2:	bhi.n	22b2 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    22a4:	ldr	r3, [pc, #16]	; (22b8 <digitalRead+0x18>)
    22a6:	ldr.w	r3, [r3, r0, lsl #3]
    22aa:	ldrb.w	r0, [r3, #512]	; 0x200
    22ae:	uxtb	r0, r0
    22b0:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    22b2:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    22b4:	bx	lr
    22b6:	nop
    22b8:	.word	0x00004c5c

000022bc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    22bc:	cmp	r0, #63	; 0x3f
    22be:	bhi.n	22c4 <pinMode+0x8>
    22c0:	b.w	21f8 <pinMode.part.2>
    22c4:	bx	lr
    22c6:	nop

000022c8 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    22c8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    22cc:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    22ce:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    22d0:	ldr	r7, [pc, #136]	; (235c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    22d2:	ldr	r3, [pc, #140]	; (2360 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    22d4:	ldr	r2, [pc, #140]	; (2364 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    22d6:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    22d8:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    22da:	ldr	r2, [r2, #0]
	__enable_irq();
    22dc:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    22de:	lsls	r2, r2, #5
    22e0:	bpl.n	22e8 <delay+0x20>
    22e2:	cmp	r3, #50	; 0x32
    22e4:	it	hi
    22e6:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    22e8:	cbz	r5, 2358 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    22ea:	rsb	r3, r3, #179200	; 0x2bc00
    22ee:	addw	r3, r3, #799	; 0x31f
    22f2:	ldr	r6, [pc, #116]	; (2368 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    22f4:	ldr.w	r9, [pc, #104]	; 2360 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    22f8:	ldr.w	r8, [pc, #104]	; 2364 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    22fc:	lsrs	r3, r3, #2
    22fe:	mov.w	r2, #1000	; 0x3e8
    2302:	umull	r1, r3, r6, r3
    2306:	mul.w	r4, r2, r4
    230a:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    230e:	cpsid	i
	current = SYST_CVR;
    2310:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2314:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2316:	ldr.w	lr, [r8]
	__enable_irq();
    231a:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    231c:	rsb	r3, r1, #179200	; 0x2bc00
    2320:	addw	r3, r3, #799	; 0x31f
    2324:	lsrs	r3, r3, #2
    2326:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    232a:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    232e:	rsb	r3, r4, r3, lsr #2
    2332:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2336:	beq.n	233e <delay+0x76>
    2338:	cmp	r1, #50	; 0x32
    233a:	it	hi
    233c:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    233e:	mla	r3, r0, r2, r3
    2342:	cmp.w	r3, #1000	; 0x3e8
    2346:	bcc.n	2352 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2348:	subs	r5, #1
    234a:	beq.n	2358 <delay+0x90>
				start += 1000;
    234c:	add.w	r4, r4, #1000	; 0x3e8
    2350:	b.n	230e <delay+0x46>
			}
			yield();
    2352:	bl	3704 <yield>
		}
    2356:	b.n	230e <delay+0x46>
    2358:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    235c:	.word	0x1fff1844
    2360:	.word	0xe000e018
    2364:	.word	0xe000ed04
    2368:	.word	0x16c16c17

0000236c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    236c:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    236e:	ldr	r3, [pc, #312]	; (24a8 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2370:	ldr	r0, [pc, #312]	; (24ac <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2372:	ldr.w	ip, [pc, #348]	; 24d0 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2376:	ldr	r4, [pc, #312]	; (24b0 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2378:	ldr	r1, [pc, #312]	; (24b4 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    237a:	ldr.w	lr, [pc, #344]	; 24d4 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    237e:	ldr	r6, [pc, #312]	; (24b8 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2380:	ldr	r5, [pc, #312]	; (24bc <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2382:	ldr	r7, [pc, #316]	; (24c0 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2384:	mov.w	r2, #134217728	; 0x8000000
    2388:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    238a:	mov.w	r2, #268435456	; 0x10000000
    238e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2390:	mov.w	r2, #536870912	; 0x20000000
    2394:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2396:	mov.w	r2, #1073741824	; 0x40000000
    239a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    239c:	mov.w	r2, #2147483648	; 0x80000000
    23a0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    23a2:	movs	r2, #0
    23a4:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    23a6:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    23a8:	movw	r0, #61439	; 0xefff
    23ac:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    23b0:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    23b4:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    23b6:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    23ba:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    23bc:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    23be:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    23c0:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    23c4:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    23c6:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    23ca:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    23cc:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    23d0:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    23d2:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    23d6:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    23da:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    23de:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    23e2:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    23e6:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    23e8:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    23ec:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    23ee:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    23f0:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    23f2:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    23f6:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    23f8:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    23fa:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    23fc:	ldr	r4, [pc, #196]	; (24c4 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    23fe:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2400:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2402:	movs	r1, #9
    2404:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2406:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    240a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    240e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2410:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2412:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2414:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2416:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2418:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    241a:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    241e:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2422:	add.w	r7, r7, #520192	; 0x7f000
    2426:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2428:	addw	r4, r4, #2044	; 0x7fc
    242c:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    242e:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2430:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2432:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2434:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2438:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    243a:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    243e:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2442:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2444:	sub.w	r4, r4, #460800	; 0x70800
    2448:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    244c:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    244e:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2450:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2454:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2456:	ldr	r0, [pc, #112]	; (24c8 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2458:	orr.w	r1, r1, #512	; 0x200
    245c:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    245e:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2460:	ldr	r4, [pc, #104]	; (24cc <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2462:	add.w	lr, lr, #65280	; 0xff00
    2466:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    246a:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    246e:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2472:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2476:	orr.w	r1, r1, #33554432	; 0x2000000
    247a:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    247c:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2480:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2484:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2486:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2488:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    248a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    248c:	str	r2, [r4, #0]
#endif
	analog_init();
    248e:	bl	1fd0 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2492:	movs	r0, #25
    2494:	bl	22c8 <delay>
	usb_init();
    2498:	bl	3634 <usb_init>
	delay(275);
    249c:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    24a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    24a4:	b.w	22c8 <delay>
    24a8:	.word	0xe000e104
    24ac:	.word	0x40038004
    24b0:	.word	0x40038014
    24b4:	.word	0x4003801c
    24b8:	.word	0x40038024
    24bc:	.word	0x4003802c
    24c0:	.word	0x40038034
    24c4:	.word	0x40038000
    24c8:	.word	0x40048004
    24cc:	.word	0x400c9000
    24d0:	.word	0x40038008
    24d4:	.word	0x4003800c

000024d8 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    24d8:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    24da:	ldr	r3, [pc, #56]	; (2514 <sysex_byte+0x3c>)
    24dc:	ldr	r4, [pc, #56]	; (2518 <sysex_byte+0x40>)
    24de:	ldr	r3, [r3, #0]
    24e0:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    24e2:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    24e4:	cbz	r3, 250a <sysex_byte+0x32>
    24e6:	cmp.w	r1, #290	; 0x122
    24ea:	bcs.n	24f8 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    24ec:	ldr	r2, [pc, #44]	; (251c <sysex_byte+0x44>)
    24ee:	adds	r3, r1, #1
    24f0:	strb	r5, [r2, r1]
    24f2:	uxth	r3, r3
    24f4:	strh	r3, [r4, #0]
	}
}
    24f6:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    24f8:	movs	r2, #0
    24fa:	ldr	r0, [pc, #32]	; (251c <sysex_byte+0x44>)
    24fc:	blx	r3
    24fe:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2500:	ldr	r2, [pc, #24]	; (251c <sysex_byte+0x44>)
    2502:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2504:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2506:	strh	r3, [r4, #0]
	}
}
    2508:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    250a:	cmp.w	r1, #290	; 0x122
    250e:	bcc.n	24ec <sysex_byte+0x14>
    2510:	pop	{r3, r4, r5, pc}
    2512:	nop
    2514:	.word	0x1fff186c
    2518:	.word	0x1fff1d02
    251c:	.word	0x1fff1d08

00002520 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2520:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2524:	ldr	r6, [pc, #132]	; (25ac <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2526:	ldr	r7, [pc, #136]	; (25b0 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2528:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    252a:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    252c:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    252e:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2530:	cbz	r1, 2560 <usb_midi_write_packed+0x40>
    2532:	ldr	r5, [pc, #128]	; (25b4 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2534:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2536:	add.w	r2, r1, r3, lsl #2
    253a:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    253c:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    253e:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2540:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2544:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2546:	bhi.n	2552 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2548:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    254a:	movs	r3, #0
    254c:	strb	r3, [r7, #0]
    254e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2552:	movs	r3, #64	; 0x40
    2554:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2556:	movs	r0, #4
    2558:	bl	2c00 <usb_tx>
		tx_packet = NULL;
    255c:	str	r4, [r6, #0]
    255e:	b.n	254a <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2560:	ldr.w	r9, [pc, #84]	; 25b8 <usb_midi_write_packed+0x98>
    2564:	ldrb.w	r3, [r9]
    2568:	cmp	r3, #0
    256a:	beq.n	254e <usb_midi_write_packed+0x2e>
    256c:	ldr	r5, [pc, #68]	; (25b4 <usb_midi_write_packed+0x94>)
    256e:	movw	r4, #48001	; 0xbb81
    2572:	b.n	2586 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2574:	subs	r4, #1
    2576:	beq.n	259e <usb_midi_write_packed+0x7e>
    2578:	ldrb	r3, [r5, #0]
    257a:	cbnz	r3, 259e <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    257c:	bl	3704 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2580:	ldrb.w	r3, [r9]
    2584:	cbz	r3, 25a6 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2586:	movs	r0, #4
    2588:	bl	2aec <usb_tx_packet_count>
    258c:	cmp	r0, #5
    258e:	bhi.n	2574 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2590:	bl	2a24 <usb_malloc>
    2594:	mov	r1, r0
    2596:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2598:	cmp	r0, #0
    259a:	beq.n	2574 <usb_midi_write_packed+0x54>
    259c:	b.n	2534 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    259e:	movs	r3, #1
    25a0:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    25a2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    25a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    25aa:	nop
    25ac:	.word	0x1fff1888
    25b0:	.word	0x1fff185c
    25b4:	.word	0x1fff188c
    25b8:	.word	0x1fff1998

000025bc <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    25bc:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    25be:	ldr	r3, [pc, #32]	; (25e0 <usb_midi_flush_output+0x24>)
    25c0:	ldrb	r4, [r3, #0]
    25c2:	cbnz	r4, 25ce <usb_midi_flush_output+0x12>
    25c4:	ldr	r5, [pc, #28]	; (25e4 <usb_midi_flush_output+0x28>)
    25c6:	ldr	r1, [r5, #0]
    25c8:	cbz	r1, 25ce <usb_midi_flush_output+0x12>
    25ca:	ldrh	r3, [r1, #2]
    25cc:	cbnz	r3, 25d0 <usb_midi_flush_output+0x14>
    25ce:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    25d0:	lsls	r3, r3, #2
    25d2:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    25d4:	movs	r0, #4
    25d6:	bl	2c00 <usb_tx>
		tx_packet = NULL;
    25da:	str	r4, [r5, #0]
    25dc:	pop	{r3, r4, r5, pc}
    25de:	nop
    25e0:	.word	0x1fff185c
    25e4:	.word	0x1fff1888

000025e8 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    25e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    25ec:	ldr	r6, [pc, #692]	; (28a4 <usb_midi_read+0x2bc>)
    25ee:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    25f0:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    25f2:	cmp	r3, #0
    25f4:	beq.w	271c <usb_midi_read+0x134>
    25f8:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    25fa:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    25fc:	lsrs	r1, r2, #2
    25fe:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    2602:	adds	r2, #4
	if (index < rx_packet->len) {
    2604:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2606:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2608:	bcs.n	2690 <usb_midi_read+0xa8>
		rx_packet->index = index;
    260a:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    260c:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2610:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2614:	ldr	r1, [pc, #656]	; (28a8 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2616:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    261a:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    261e:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2622:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2624:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2628:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    262a:	bls.n	2662 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    262c:	subs	r3, r6, #2
    262e:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2630:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2634:	bls.n	26d4 <usb_midi_read+0xec>
    2636:	cmp	r6, #5
    2638:	beq.n	26cc <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    263a:	cmp	r6, #4
    263c:	beq.w	2988 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2640:	subs	r3, r6, #5
    2642:	cmp	r3, #2
    2644:	bls.n	2746 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    2646:	cmp	r6, #15
    2648:	bne.n	2668 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    264a:	cmp	r0, #247	; 0xf7
    264c:	bhi.n	26d4 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    264e:	cmp	r0, #240	; 0xf0
    2650:	beq.n	2658 <usb_midi_read+0x70>
    2652:	ldr	r3, [pc, #600]	; (28ac <usb_midi_read+0x2c4>)
    2654:	ldrh	r3, [r3, #0]
    2656:	cbz	r3, 2668 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2658:	bl	24d8 <sysex_byte>
		}
	}
	return 0;
    265c:	movs	r0, #0
    265e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    2662:	cbz	r7, 266e <usb_midi_read+0x86>
    2664:	cmp	r5, r7
    2666:	beq.n	266e <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2668:	movs	r0, #0
    266a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    266e:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2670:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2674:	beq.w	2786 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2678:	cmp	r6, #9
    267a:	beq.n	26a0 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    267c:	cmp	r6, #10
    267e:	bne.w	27aa <usb_midi_read+0x1c2>
    2682:	cmp	r3, #10
    2684:	bne.n	2668 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    2686:	ldr	r3, [pc, #552]	; (28b0 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2688:	ldr	r2, [pc, #552]	; (28b4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    268a:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    268c:	movs	r1, #160	; 0xa0
    268e:	b.n	2794 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    2690:	mov	r0, r3
    2692:	bl	2a64 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2696:	movs	r0, #5
    2698:	bl	2ab0 <usb_rx>
    269c:	str	r0, [r6, #0]
    269e:	b.n	260c <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    26a0:	cmp	r3, #9
    26a2:	bne.n	2668 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    26a4:	lsrs	r7, r4, #24
    26a6:	beq.w	29a0 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    26aa:	ldr	r3, [pc, #524]	; (28b8 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    26ac:	ldr	r2, [pc, #516]	; (28b4 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    26ae:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    26b0:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    26b2:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    26b6:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    26b8:	uxtb	r5, r5
    26ba:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    26bc:	cmp	r3, #0
    26be:	beq.w	27fc <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    26c2:	mov	r2, r4
    26c4:	mov	r1, r6
    26c6:	mov	r0, r5
    26c8:	blx	r3
    26ca:	b.n	27fc <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    26cc:	cmp	r0, #240	; 0xf0
    26ce:	bls.n	2758 <usb_midi_read+0x170>
    26d0:	cmp	r0, #247	; 0xf7
    26d2:	beq.n	2758 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    26d4:	subs	r0, #241	; 0xf1
    26d6:	cmp	r0, #14
    26d8:	bhi.n	2668 <usb_midi_read+0x80>
    26da:	add	r3, pc, #4	; (adr r3, 26e0 <usb_midi_read+0xf8>)
    26dc:	ldr.w	pc, [r3, r0, lsl #2]
    26e0:	.word	0x00002897
    26e4:	.word	0x0000287b
    26e8:	.word	0x00002869
    26ec:	.word	0x00002669
    26f0:	.word	0x00002669
    26f4:	.word	0x0000285b
    26f8:	.word	0x00002669
    26fc:	.word	0x0000293b
    2700:	.word	0x00002669
    2704:	.word	0x00002905
    2708:	.word	0x0000291f
    270c:	.word	0x00002843
    2710:	.word	0x00002669
    2714:	.word	0x0000282b
    2718:	.word	0x0000280f
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    271c:	ldr	r3, [pc, #412]	; (28bc <usb_midi_read+0x2d4>)
    271e:	ldrb	r3, [r3, #0]
    2720:	cmp	r3, #0
    2722:	beq.n	2668 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2724:	movs	r0, #5
    2726:	bl	2ab0 <usb_rx>
    272a:	mov	r3, r0
    272c:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    272e:	cmp	r0, #0
    2730:	beq.n	2668 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    2732:	ldrh	r5, [r0, #0]
    2734:	cmp	r5, #0
    2736:	bne.w	25fa <usb_midi_read+0x12>
			usb_free(rx_packet);
    273a:	bl	2a64 <usb_free>
			rx_packet = NULL;
    273e:	str	r5, [r6, #0]
			return 0;
    2740:	mov	r0, r5
    2742:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    2746:	bl	24d8 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    274a:	ubfx	r0, r4, #16, #8
    274e:	bl	24d8 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    2752:	cmp	r6, #7
    2754:	bne.n	275c <usb_midi_read+0x174>
    2756:	lsrs	r0, r4, #24
    2758:	bl	24d8 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    275c:	ldr	r3, [pc, #332]	; (28ac <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    275e:	ldr	r2, [pc, #352]	; (28c0 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2760:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    2762:	ldr	r0, [pc, #352]	; (28c4 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2764:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2766:	ldr	r5, [pc, #352]	; (28c8 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2768:	ldr	r2, [pc, #328]	; (28b4 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    276a:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    276c:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    276e:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2770:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2772:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2774:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2776:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    2778:	cbz	r4, 27be <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    277a:	movs	r2, #1
    277c:	ldr	r0, [pc, #332]	; (28cc <usb_midi_read+0x2e4>)
    277e:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2780:	movs	r0, #1
    2782:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2786:	cmp	r3, #8
    2788:	bne.w	2668 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    278c:	ldr	r3, [pc, #320]	; (28d0 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    278e:	ldr	r2, [pc, #292]	; (28b4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    2790:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2792:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2794:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2798:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    279a:	uxtb	r5, r5
    279c:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    279e:	cbz	r3, 27fc <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    27a0:	mov	r0, r5
    27a2:	mov	r2, r4
    27a4:	mov	r1, r6
    27a6:	blx	r3
    27a8:	b.n	27fc <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    27aa:	cmp	r6, #11
    27ac:	bne.n	27d2 <usb_midi_read+0x1ea>
    27ae:	cmp	r3, #11
    27b0:	bne.w	2668 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    27b4:	ldr	r3, [pc, #284]	; (28d4 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    27b6:	ldr	r2, [pc, #252]	; (28b4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    27b8:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    27ba:	movs	r1, #176	; 0xb0
    27bc:	b.n	2794 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    27be:	ldr	r3, [pc, #280]	; (28d8 <usb_midi_read+0x2f0>)
    27c0:	ldr	r3, [r3, #0]
    27c2:	cmp	r3, #0
    27c4:	beq.w	29be <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    27c8:	ldr	r0, [pc, #256]	; (28cc <usb_midi_read+0x2e4>)
    27ca:	blx	r3
		}
		return 1;
    27cc:	movs	r0, #1
    27ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    27d2:	cmp	r6, #12
    27d4:	bne.w	29d8 <usb_midi_read+0x3f0>
    27d8:	cmp	r3, #12
    27da:	bne.w	2668 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    27de:	ldr	r3, [pc, #252]	; (28dc <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    27e0:	ldr	r2, [pc, #208]	; (28b4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    27e2:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    27e4:	movs	r1, #192	; 0xc0
    27e6:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    27e8:	uxtb	r5, r5
    27ea:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    27ee:	cmp	r3, #0
    27f0:	beq.w	2984 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    27f4:	mov	r0, r5
    27f6:	mov	r1, r6
    27f8:	lsrs	r4, r4, #24
    27fa:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    27fc:	ldr	r1, [pc, #224]	; (28e0 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    27fe:	ldr	r2, [pc, #196]	; (28c4 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2800:	ldr	r3, [pc, #196]	; (28c8 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2802:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2804:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    2806:	strb	r4, [r3, #0]
		return 1;
    2808:	movs	r0, #1
    280a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    280e:	ldr	r3, [pc, #212]	; (28e4 <usb_midi_read+0x2fc>)
    2810:	ldr	r3, [r3, #0]
    2812:	cmp	r3, #0
    2814:	beq.w	29c4 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2818:	blx	r3
    281a:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    281e:	ldr	r3, [pc, #148]	; (28b4 <usb_midi_read+0x2cc>)
    2820:	uxtb	r5, r5
    2822:	lsrs	r4, r4, #24
    2824:	strb.w	r8, [r3]
		goto return_message;
    2828:	b.n	27fc <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    282a:	ldr	r3, [pc, #188]	; (28e8 <usb_midi_read+0x300>)
    282c:	ldr	r3, [r3, #0]
    282e:	cmp	r3, #0
    2830:	bne.n	2818 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2832:	ldr	r3, [pc, #184]	; (28ec <usb_midi_read+0x304>)
    2834:	ldr	r3, [r3, #0]
    2836:	cbz	r3, 2862 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2838:	movs	r0, #254	; 0xfe
    283a:	blx	r3
    283c:	ubfx	r6, r4, #16, #8
    2840:	b.n	281e <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2842:	ldr	r3, [pc, #172]	; (28f0 <usb_midi_read+0x308>)
    2844:	ldr	r3, [r3, #0]
    2846:	cmp	r3, #0
    2848:	bne.n	2818 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    284a:	ldr	r3, [pc, #160]	; (28ec <usb_midi_read+0x304>)
    284c:	ldr	r3, [r3, #0]
    284e:	cbz	r3, 2862 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2850:	movs	r0, #252	; 0xfc
    2852:	blx	r3
    2854:	ubfx	r6, r4, #16, #8
    2858:	b.n	281e <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    285a:	ldr	r3, [pc, #152]	; (28f4 <usb_midi_read+0x30c>)
    285c:	ldr	r3, [r3, #0]
    285e:	cmp	r3, #0
    2860:	bne.n	2818 <usb_midi_read+0x230>
    2862:	ubfx	r6, r4, #16, #8
    2866:	b.n	281e <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2868:	ldr	r3, [pc, #140]	; (28f8 <usb_midi_read+0x310>)
    286a:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    286c:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2870:	cmp	r3, #0
    2872:	beq.n	281e <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2874:	mov	r0, r6
    2876:	blx	r3
    2878:	b.n	281e <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    287a:	ldr	r3, [pc, #128]	; (28fc <usb_midi_read+0x314>)
    287c:	ldr	r2, [r3, #0]
    287e:	cmp	r2, #0
    2880:	beq.n	2862 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2882:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2884:	lsrs	r3, r4, #17
    2886:	and.w	r0, r6, #127	; 0x7f
    288a:	and.w	r3, r3, #16256	; 0x3f80
    288e:	orrs	r0, r3
    2890:	uxtb	r6, r6
    2892:	blx	r2
    2894:	b.n	281e <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2896:	ldr	r3, [pc, #104]	; (2900 <usb_midi_read+0x318>)
    2898:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    289a:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    289e:	cmp	r3, #0
    28a0:	bne.n	2874 <usb_midi_read+0x28c>
    28a2:	b.n	281e <usb_midi_read+0x236>
    28a4:	.word	0x1fff1894
    28a8:	.word	0x1fff1d06
    28ac:	.word	0x1fff1d02
    28b0:	.word	0x1fff1870
    28b4:	.word	0x1fff1d00
    28b8:	.word	0x1fff18a4
    28bc:	.word	0x1fff1998
    28c0:	.word	0x1fff186c
    28c4:	.word	0x1fff1d04
    28c8:	.word	0x1fff1d05
    28cc:	.word	0x1fff1d08
    28d0:	.word	0x1fff189c
    28d4:	.word	0x1fff18a0
    28d8:	.word	0x1fff1884
    28dc:	.word	0x1fff1860
    28e0:	.word	0x1fff1d07
    28e4:	.word	0x1fff184c
    28e8:	.word	0x1fff1850
    28ec:	.word	0x1fff1854
    28f0:	.word	0x1fff1890
    28f4:	.word	0x1fff1880
    28f8:	.word	0x1fff1898
    28fc:	.word	0x1fff1868
    2900:	.word	0x1fff187c
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2904:	ldr	r3, [pc, #252]	; (2a04 <usb_midi_read+0x41c>)
    2906:	ldr	r3, [r3, #0]
    2908:	cmp	r3, #0
    290a:	bne.n	2818 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    290c:	ldr	r3, [pc, #248]	; (2a08 <usb_midi_read+0x420>)
    290e:	ldr	r3, [r3, #0]
    2910:	cmp	r3, #0
    2912:	beq.n	2862 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2914:	movs	r0, #250	; 0xfa
    2916:	blx	r3
    2918:	ubfx	r6, r4, #16, #8
    291c:	b.n	281e <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    291e:	ldr	r3, [pc, #236]	; (2a0c <usb_midi_read+0x424>)
    2920:	ldr	r3, [r3, #0]
    2922:	cmp	r3, #0
    2924:	bne.w	2818 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2928:	ldr	r3, [pc, #220]	; (2a08 <usb_midi_read+0x420>)
    292a:	ldr	r3, [r3, #0]
    292c:	cmp	r3, #0
    292e:	beq.n	2862 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2930:	movs	r0, #251	; 0xfb
    2932:	blx	r3
    2934:	ubfx	r6, r4, #16, #8
    2938:	b.n	281e <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    293a:	ldr	r3, [pc, #212]	; (2a10 <usb_midi_read+0x428>)
    293c:	ldr	r3, [r3, #0]
    293e:	cmp	r3, #0
    2940:	bne.w	2818 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2944:	ldr	r3, [pc, #192]	; (2a08 <usb_midi_read+0x420>)
    2946:	ldr	r3, [r3, #0]
    2948:	cmp	r3, #0
    294a:	beq.n	2862 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    294c:	movs	r0, #248	; 0xf8
    294e:	blx	r3
    2950:	ubfx	r6, r4, #16, #8
    2954:	b.n	281e <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2956:	cmp	r3, #14
    2958:	bne.w	2668 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    295c:	ldr	r2, [pc, #180]	; (2a14 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    295e:	ldr	r3, [pc, #184]	; (2a18 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2960:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2962:	movs	r1, #224	; 0xe0
    2964:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    2966:	cmp	r2, #0
    2968:	beq.n	29fa <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    296a:	lsrs	r6, r4, #16
    296c:	lsrs	r1, r4, #17
    296e:	and.w	r3, r6, #127	; 0x7f
    2972:	and.w	r1, r1, #16256	; 0x3f80
    2976:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    2978:	uxtb	r5, r5
    297a:	sub.w	r1, r1, #8192	; 0x2000
    297e:	mov	r0, r5
    2980:	blx	r2
    2982:	uxtb	r6, r6
    2984:	lsrs	r4, r4, #24
    2986:	b.n	27fc <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    2988:	bl	24d8 <sysex_byte>
		sysex_byte(n >> 16);
    298c:	ubfx	r0, r4, #16, #8
    2990:	bl	24d8 <sysex_byte>
		sysex_byte(n >> 24);
    2994:	lsrs	r0, r4, #24
    2996:	bl	24d8 <sysex_byte>
		return 0;
    299a:	movs	r0, #0
    299c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    29a0:	ldr	r3, [pc, #120]	; (2a1c <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    29a2:	ldr	r2, [pc, #116]	; (2a18 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    29a4:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    29a6:	movs	r1, #128	; 0x80
    29a8:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    29aa:	uxtb	r5, r5
    29ac:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    29b0:	cbz	r3, 29d4 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    29b2:	mov	r1, r6
    29b4:	mov	r0, r5
    29b6:	mov	r2, r7
    29b8:	blx	r3
    29ba:	mov	r4, r7
    29bc:	b.n	27fc <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    29be:	movs	r0, #1
    29c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    29c4:	ldr	r3, [pc, #64]	; (2a08 <usb_midi_read+0x420>)
    29c6:	ldr	r3, [r3, #0]
    29c8:	cmp	r3, #0
    29ca:	beq.w	2862 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    29ce:	movs	r0, #255	; 0xff
    29d0:	blx	r3
    29d2:	b.n	2862 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    29d4:	mov	r4, r3
    29d6:	b.n	27fc <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    29d8:	cmp	r6, #13
    29da:	bne.n	2956 <usb_midi_read+0x36e>
    29dc:	cmp	r3, #13
    29de:	bne.w	2668 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    29e2:	ldr	r3, [pc, #60]	; (2a20 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    29e4:	ldr	r2, [pc, #48]	; (2a18 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    29e6:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    29e8:	movs	r1, #208	; 0xd0
    29ea:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    29ec:	uxtb	r5, r5
    29ee:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    29f2:	cmp	r3, #0
    29f4:	bne.w	27f4 <usb_midi_read+0x20c>
    29f8:	b.n	2984 <usb_midi_read+0x39c>
    29fa:	ubfx	r6, r4, #16, #8
    29fe:	uxtb	r5, r5
    2a00:	lsrs	r4, r4, #24
    2a02:	b.n	27fc <usb_midi_read+0x214>
    2a04:	.word	0x1fff1878
    2a08:	.word	0x1fff1854
    2a0c:	.word	0x1fff1858
    2a10:	.word	0x1fff1848
    2a14:	.word	0x1fff1864
    2a18:	.word	0x1fff1d00
    2a1c:	.word	0x1fff189c
    2a20:	.word	0x1fff1874

00002a24 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2a24:	cpsid	i
	avail = usb_buffer_available;
    2a26:	ldr	r0, [pc, #52]	; (2a5c <usb_malloc+0x38>)
    2a28:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2a2a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2a2e:	cmp	r3, #29
    2a30:	bgt.n	2a54 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2a32:	mov.w	r1, #2147483648	; 0x80000000
    2a36:	lsrs	r1, r3
    2a38:	bic.w	r2, r2, r1
    2a3c:	str	r2, [r0, #0]
	__enable_irq();
    2a3e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2a40:	ldr	r0, [pc, #28]	; (2a60 <usb_malloc+0x3c>)
    2a42:	add.w	r3, r3, r3, lsl #3
    2a46:	lsls	r3, r3, #3
    2a48:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2a4a:	movs	r1, #0
    2a4c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2a4e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2a50:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2a52:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2a54:	cpsie	i
		return NULL;
    2a56:	movs	r0, #0
    2a58:	bx	lr
    2a5a:	nop
    2a5c:	.word	0x1fff0c5c
    2a60:	.word	0x1fff03d0

00002a64 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2a64:	ldr	r3, [pc, #52]	; (2a9c <usb_free+0x38>)
    2a66:	ldr	r2, [pc, #56]	; (2aa0 <usb_free+0x3c>)
    2a68:	subs	r3, r0, r3
    2a6a:	umull	r2, r3, r2, r3
    2a6e:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2a70:	cmp	r3, #29
    2a72:	bhi.n	2a8e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2a74:	ldr	r2, [pc, #44]	; (2aa4 <usb_free+0x40>)
    2a76:	ldrb	r2, [r2, #0]
    2a78:	cbnz	r2, 2a90 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2a7a:	cpsid	i
	usb_buffer_available |= mask;
    2a7c:	ldr	r0, [pc, #40]	; (2aa8 <usb_free+0x44>)
    2a7e:	mov.w	r1, #2147483648	; 0x80000000
    2a82:	ldr	r2, [r0, #0]
    2a84:	lsr.w	r3, r1, r3
    2a88:	orrs	r2, r3
    2a8a:	str	r2, [r0, #0]
	__enable_irq();
    2a8c:	cpsie	i
    2a8e:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2a90:	ldr	r2, [pc, #24]	; (2aac <usb_free+0x48>)
    2a92:	ldrb	r2, [r2, #0]
    2a94:	cmp	r2, #0
    2a96:	beq.n	2a7a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2a98:	b.w	2b18 <usb_rx_memory>
    2a9c:	.word	0x1fff03d0
    2aa0:	.word	0x38e38e39
    2aa4:	.word	0x1fff198d
    2aa8:	.word	0x1fff0c5c
    2aac:	.word	0x1fff1998

00002ab0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2ab0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2ab2:	cmp	r3, #4
    2ab4:	bhi.n	2ae0 <usb_rx+0x30>
	__disable_irq();
    2ab6:	cpsid	i
	ret = rx_first[endpoint];
    2ab8:	ldr	r1, [pc, #40]	; (2ae4 <usb_rx+0x34>)
    2aba:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2abe:	cbz	r0, 2adc <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2ac0:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2ac2:	ldr	r4, [pc, #36]	; (2ae8 <usb_rx+0x38>)
    2ac4:	ldrh	r5, [r0, #0]
    2ac6:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2aca:	ldr	r6, [r0, #4]
    2acc:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2ad0:	subs	r2, r2, r5
    2ad2:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2ad6:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2ad8:	pop	{r4, r5, r6}
    2ada:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2adc:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2ade:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2ae0:	movs	r0, #0
    2ae2:	bx	lr
    2ae4:	.word	0x1fff1904
    2ae8:	.word	0x1fff1e2c

00002aec <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2aec:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2aee:	cmp	r0, #4
    2af0:	bhi.n	2b0a <usb_tx_packet_count+0x1e>
	__disable_irq();
    2af2:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2af4:	ldr	r3, [pc, #28]	; (2b14 <usb_tx_packet_count+0x28>)
    2af6:	ldr.w	r3, [r3, r0, lsl #2]
    2afa:	cbz	r3, 2b0e <usb_tx_packet_count+0x22>
    2afc:	movs	r0, #0
    2afe:	ldr	r3, [r3, #4]
    2b00:	adds	r0, #1
    2b02:	cmp	r3, #0
    2b04:	bne.n	2afe <usb_tx_packet_count+0x12>
	__enable_irq();
    2b06:	cpsie	i
	return count;
    2b08:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2b0a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2b0c:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2b0e:	mov	r0, r3
    2b10:	b.n	2b06 <usb_tx_packet_count+0x1a>
    2b12:	nop
    2b14:	.word	0x1fff195c

00002b18 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2b18:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2b1a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b1c:	ldr	r2, [pc, #204]	; (2bec <usb_rx_memory+0xd4>)
    2b1e:	ldrb	r3, [r2, #0]
    2b20:	lsls	r3, r3, #28
    2b22:	bpl.n	2b32 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b24:	ldr	r3, [pc, #200]	; (2bf0 <usb_rx_memory+0xd8>)
    2b26:	ldr	r1, [r3, #32]
    2b28:	cmp	r1, #0
    2b2a:	beq.n	2bb4 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b2c:	ldr	r1, [r3, #40]	; 0x28
    2b2e:	cmp	r1, #0
    2b30:	beq.n	2bd0 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b32:	ldrb	r3, [r2, #1]
    2b34:	lsls	r5, r3, #28
    2b36:	bpl.n	2b46 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b38:	ldr	r3, [pc, #180]	; (2bf0 <usb_rx_memory+0xd8>)
    2b3a:	ldr	r1, [r3, #64]	; 0x40
    2b3c:	cmp	r1, #0
    2b3e:	beq.n	2bdc <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b40:	ldr	r1, [r3, #72]	; 0x48
    2b42:	cmp	r1, #0
    2b44:	beq.n	2bd4 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b46:	ldrb	r3, [r2, #2]
    2b48:	lsls	r4, r3, #28
    2b4a:	bpl.n	2b5a <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b4c:	ldr	r3, [pc, #160]	; (2bf0 <usb_rx_memory+0xd8>)
    2b4e:	ldr	r1, [r3, #96]	; 0x60
    2b50:	cmp	r1, #0
    2b52:	beq.n	2be0 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b54:	ldr	r1, [r3, #104]	; 0x68
    2b56:	cmp	r1, #0
    2b58:	beq.n	2bd8 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b5a:	ldrb	r3, [r2, #3]
    2b5c:	lsls	r1, r3, #28
    2b5e:	bpl.n	2b70 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b60:	ldr	r3, [pc, #140]	; (2bf0 <usb_rx_memory+0xd8>)
    2b62:	ldr.w	r1, [r3, #128]	; 0x80
    2b66:	cmp	r1, #0
    2b68:	beq.n	2be8 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b6a:	ldr.w	r1, [r3, #136]	; 0x88
    2b6e:	cbz	r1, 2b96 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b70:	ldrb	r3, [r2, #4]
    2b72:	lsls	r3, r3, #28
    2b74:	bpl.n	2b88 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b76:	ldr	r3, [pc, #120]	; (2bf0 <usb_rx_memory+0xd8>)
    2b78:	ldr.w	r2, [r3, #160]	; 0xa0
    2b7c:	cmp	r2, #0
    2b7e:	beq.n	2be4 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b80:	ldr.w	r2, [r3, #168]	; 0xa8
    2b84:	movs	r4, #21
    2b86:	cbz	r2, 2b98 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2b88:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2b8a:	ldr	r3, [pc, #104]	; (2bf4 <usb_rx_memory+0xdc>)
    2b8c:	movs	r2, #0
    2b8e:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2b90:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2b92:	b.w	2a64 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b96:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2b98:	ldr	r1, [pc, #88]	; (2bf4 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2b9a:	ldr	r5, [pc, #92]	; (2bf8 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2b9c:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2b9e:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2ba2:	add.w	r3, r3, r4, lsl #3
    2ba6:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2ba8:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2baa:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2bac:	strb	r2, [r1, #0]
				__enable_irq();
    2bae:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2bb0:	pop	{r4, r5}
    2bb2:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2bb4:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2bb6:	ldr	r4, [pc, #60]	; (2bf4 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2bb8:	ldr	r5, [pc, #64]	; (2bfc <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2bba:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2bbc:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2bc0:	add.w	r3, r3, r2, lsl #3
    2bc4:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2bc6:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2bc8:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2bca:	strb	r2, [r4, #0]
				__enable_irq();
    2bcc:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2bce:	b.n	2bb0 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2bd0:	movs	r4, #5
    2bd2:	b.n	2b98 <usb_rx_memory+0x80>
    2bd4:	movs	r4, #9
    2bd6:	b.n	2b98 <usb_rx_memory+0x80>
    2bd8:	movs	r4, #13
    2bda:	b.n	2b98 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2bdc:	movs	r2, #8
    2bde:	b.n	2bb6 <usb_rx_memory+0x9e>
    2be0:	movs	r2, #12
    2be2:	b.n	2bb6 <usb_rx_memory+0x9e>
    2be4:	movs	r2, #20
    2be6:	b.n	2bb6 <usb_rx_memory+0x9e>
    2be8:	movs	r2, #16
    2bea:	b.n	2bb6 <usb_rx_memory+0x9e>
    2bec:	.word	0x00004e88
    2bf0:	.word	0x1fff0000
    2bf4:	.word	0x1fff198d
    2bf8:	.word	0x004000c8
    2bfc:	.word	0x00400088

00002c00 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2c00:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2c02:	cmp	r3, #4
    2c04:	bhi.n	2c42 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2c06:	ldr	r2, [pc, #108]	; (2c74 <usb_tx+0x74>)
    2c08:	lsls	r0, r0, #5
    2c0a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2c0e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2c10:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2c12:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2c14:	ldr	r4, [pc, #96]	; (2c78 <usb_tx+0x78>)
    2c16:	ldrb	r2, [r4, r3]
    2c18:	cmp	r2, #3
    2c1a:	bhi.n	2c54 <usb_tx+0x54>
    2c1c:	tbb	[pc, r2]
    2c20:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2c24:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c26:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2c28:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c2a:	tst.w	r0, #8
    2c2e:	ite	ne
    2c30:	movne	r3, #200	; 0xc8
    2c32:	moveq	r3, #136	; 0x88
    2c34:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2c38:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c3a:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2c3c:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2c3e:	cpsie	i
}
    2c40:	pop	{r4, r5}
    2c42:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2c44:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2c46:	movs	r2, #2
		break;
    2c48:	b.n	2c26 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2c4a:	movs	r2, #5
    2c4c:	b.n	2c26 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2c4e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2c50:	movs	r2, #4
		break;
    2c52:	b.n	2c26 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2c54:	ldr	r2, [pc, #36]	; (2c7c <usb_tx+0x7c>)
    2c56:	ldr.w	r0, [r2, r3, lsl #2]
    2c5a:	cbz	r0, 2c6c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2c5c:	ldr	r2, [pc, #32]	; (2c80 <usb_tx+0x80>)
    2c5e:	ldr.w	r0, [r2, r3, lsl #2]
    2c62:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2c64:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2c68:	cpsie	i
		return;
    2c6a:	b.n	2c40 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2c6c:	str.w	r1, [r2, r3, lsl #2]
    2c70:	ldr	r2, [pc, #12]	; (2c80 <usb_tx+0x80>)
    2c72:	b.n	2c64 <usb_tx+0x64>
    2c74:	.word	0x1fff0000
    2c78:	.word	0x1fff199c
    2c7c:	.word	0x1fff195c
    2c80:	.word	0x1fff1970

00002c84 <usb_isr>:
}



void usb_isr(void)
{
    2c84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2c88:	ldr.w	fp, [pc, #776]	; 2f94 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2c8c:	ldr.w	sl, [pc, #776]	; 2f98 <usb_isr+0x314>
}



void usb_isr(void)
{
    2c90:	sub	sp, #28
    2c92:	b.n	2d1e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2c94:	ldr	r7, [pc, #680]	; (2f40 <usb_isr+0x2bc>)
    2c96:	mov.w	r8, r3, lsr #2
    2c9a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2c9e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2ca0:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2ca4:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2ca8:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2caa:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2cae:	and.w	r4, r3, #255	; 0xff
    2cb2:	cmp	r3, #0
    2cb4:	bne.w	2eb8 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2cb8:	ldr.w	r3, [r7, r8, lsl #3]
    2cbc:	lsrs	r3, r3, #16
    2cbe:	uxth	r1, r3
    2cc0:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2cc4:	cmp	r3, #0
    2cc6:	beq.w	2ea6 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2cca:	ldr	r3, [pc, #632]	; (2f44 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2ccc:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2cd0:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2cd4:	ldr.w	r2, [r3, r6, lsl #2]
    2cd8:	cmp	r2, #0
    2cda:	beq.w	3148 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2cde:	ldr	r5, [pc, #616]	; (2f48 <usb_isr+0x2c4>)
    2ce0:	ldr.w	r3, [r5, r6, lsl #2]
    2ce4:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2ce6:	ldr	r4, [pc, #612]	; (2f4c <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2ce8:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2cec:	ldrh.w	r3, [r4, r6, lsl #1]
    2cf0:	add	r1, r3
    2cf2:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2cf6:	bl	2a24 <usb_malloc>
					if (packet) {
    2cfa:	cmp	r0, #0
    2cfc:	beq.w	313a <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2d00:	ldr	r2, [pc, #588]	; (2f50 <usb_isr+0x2cc>)
    2d02:	ldr	r3, [pc, #592]	; (2f54 <usb_isr+0x2d0>)
    2d04:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2d08:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2d0c:	it	ne
    2d0e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2d10:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2d14:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2d18:	movs	r3, #8
    2d1a:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2d1e:	ldrb.w	r4, [fp]
    2d22:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2d24:	lsls	r0, r4, #29
    2d26:	bpl.n	2d62 <usb_isr+0xde>
		if (usb_configuration) {
    2d28:	ldr	r3, [pc, #556]	; (2f58 <usb_isr+0x2d4>)
    2d2a:	ldrb	r3, [r3, #0]
    2d2c:	cbz	r3, 2d5c <usb_isr+0xd8>
			t = usb_reboot_timer;
    2d2e:	ldr	r1, [pc, #556]	; (2f5c <usb_isr+0x2d8>)
    2d30:	ldrb	r2, [r1, #0]
			if (t) {
    2d32:	and.w	r3, r2, #255	; 0xff
    2d36:	cbz	r2, 2d42 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2d38:	subs	r3, #1
    2d3a:	uxtb	r3, r3
    2d3c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2d3e:	cbnz	r3, 2d42 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2d40:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2d42:	ldr	r1, [pc, #540]	; (2f60 <usb_isr+0x2dc>)
    2d44:	ldrb	r2, [r1, #0]
			if (t) {
    2d46:	and.w	r3, r2, #255	; 0xff
    2d4a:	cbz	r2, 2d58 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2d4c:	subs	r3, #1
    2d4e:	uxtb	r3, r3
    2d50:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2d52:	cmp	r3, #0
    2d54:	beq.w	30e6 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2d58:	bl	25bc <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2d5c:	movs	r3, #4
    2d5e:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2d62:	and.w	r3, r4, #8
    2d66:	and.w	r2, r3, #255	; 0xff
    2d6a:	cmp	r3, #0
    2d6c:	beq.w	2f00 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2d70:	ldrb.w	r3, [sl]
    2d74:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2d76:	lsrs	r6, r3, #4
    2d78:	bne.n	2c94 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2d7a:	lsrs	r4, r3, #2
    2d7c:	ldr.w	r9, [pc, #448]	; 2f40 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2d80:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2d84:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2d88:	ubfx	r2, r2, #2, #4
    2d8c:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2d8e:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2d90:	cmp	r2, #12
    2d92:	bhi.w	2e9e <usb_isr+0x21a>
    2d96:	tbb	[pc, r2]
    2d9a:	.short	0x7878
    2d9c:	.word	0x82828282
    2da0:	.word	0x82438282
    2da4:	.short	0x8282
    2da6:	.byte	0x07
    2da7:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2da8:	ldr	r0, [r1, #0]
    2daa:	ldr	r5, [pc, #440]	; (2f64 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2dac:	ldr	r3, [pc, #416]	; (2f50 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2dae:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2db0:	ldr	r7, [pc, #436]	; (2f68 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2db2:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2db6:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2db8:	ldr	r6, [pc, #432]	; (2f6c <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2dba:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2dbc:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2dc0:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2dc2:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2dc4:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2dc6:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2dca:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2dcc:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2dd0:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2dd4:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2dd6:	bhi.w	2f9c <usb_isr+0x318>
    2dda:	cmp.w	r1, #1664	; 0x680
    2dde:	bcs.w	3408 <usb_isr+0x784>
    2de2:	cmp.w	r1, #258	; 0x102
    2de6:	beq.w	31b6 <usb_isr+0x532>
    2dea:	bhi.w	3180 <usb_isr+0x4fc>
    2dee:	cmp	r1, #128	; 0x80
    2df0:	beq.w	343c <usb_isr+0x7b8>
    2df4:	cmp	r1, #130	; 0x82
    2df6:	bne.w	31c2 <usb_isr+0x53e>
    2dfa:	ldrh	r1, [r5, #4]
    2dfc:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2e00:	cmp	r1, #5
    2e02:	bhi.w	31c2 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2e06:	ldr	r3, [pc, #360]	; (2f70 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2e08:	ldr	r4, [pc, #360]	; (2f74 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2e0a:	lsls	r1, r1, #2
    2e0c:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2e0e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2e10:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2e12:	ldrb	r2, [r3, #0]
    2e14:	lsls	r3, r2, #30
    2e16:	bpl.w	354c <usb_isr+0x8c8>
    2e1a:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2e1c:	movs	r0, #2
    2e1e:	b.n	324a <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2e20:	ldr	r7, [pc, #324]	; (2f68 <usb_isr+0x2e4>)
    2e22:	ldr	r2, [r7, #0]
		if (data) {
    2e24:	cbz	r2, 2e74 <usb_isr+0x1f0>
			size = ep0_tx_len;
    2e26:	ldr	r3, [pc, #336]	; (2f78 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e28:	ldr	r6, [pc, #320]	; (2f6c <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e2a:	ldr	r1, [pc, #336]	; (2f7c <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2e2c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e2e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e30:	ldrb	r5, [r1, #0]
    2e32:	cmp	r0, #64	; 0x40
    2e34:	mov	lr, r0
    2e36:	orr.w	r8, r5, #2
    2e3a:	it	cs
    2e3c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e40:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2e42:	eor.w	r4, r4, #1
    2e46:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2e48:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e4c:	ite	eq
    2e4e:	moveq	r4, #136	; 0x88
    2e50:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e52:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2e56:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e58:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e5c:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e60:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2e62:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e64:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2e68:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e6a:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2e6c:	cmp	r0, #0
    2e6e:	beq.w	2fde <usb_isr+0x35a>
    2e72:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2e74:	ldr	r3, [pc, #236]	; (2f64 <usb_isr+0x2e0>)
    2e76:	ldrh	r2, [r3, #0]
    2e78:	cmp.w	r2, #1280	; 0x500
    2e7c:	bne.n	2e9e <usb_isr+0x21a>
			setup.bRequest = 0;
    2e7e:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2e80:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2e82:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2e84:	ldr	r3, [pc, #248]	; (2f80 <usb_isr+0x2fc>)
    2e86:	strb	r2, [r3, #0]
    2e88:	b.n	2e9e <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2e8a:	ldr	r2, [pc, #216]	; (2f64 <usb_isr+0x2e0>)
    2e8c:	ldrh	r0, [r2, #0]
    2e8e:	movw	r2, #8225	; 0x2021
    2e92:	cmp	r0, r2
    2e94:	beq.w	2fe8 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2e98:	ldr	r2, [pc, #180]	; (2f50 <usb_isr+0x2cc>)
    2e9a:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2e9e:	ldr	r2, [pc, #228]	; (2f84 <usb_isr+0x300>)
    2ea0:	movs	r3, #1
    2ea2:	strb	r3, [r2, #0]
    2ea4:	b.n	2d18 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2ea6:	ldr	r2, [pc, #168]	; (2f50 <usb_isr+0x2cc>)
    2ea8:	ldr	r3, [pc, #168]	; (2f54 <usb_isr+0x2d0>)
    2eaa:	tst.w	r9, #8
    2eae:	it	ne
    2eb0:	movne	r3, r2
    2eb2:	str.w	r3, [r7, r8, lsl #3]
    2eb6:	b.n	2d18 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2eb8:	bl	2a64 <usb_free>
				packet = tx_first[endpoint];
    2ebc:	ldr	r2, [pc, #200]	; (2f88 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2ebe:	ldr	r1, [pc, #204]	; (2f8c <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2ec0:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2ec4:	cmp	r3, #0
    2ec6:	beq.w	3150 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2eca:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2ecc:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2ece:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2ed2:	add.w	r2, r3, #8
    2ed6:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2eda:	cmp	r4, #3
    2edc:	bhi.n	2eea <usb_isr+0x266>
    2ede:	tbb	[pc, r4]
    2ee2:	.short	0x022c
    2ee4:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2ee6:	movs	r2, #2
    2ee8:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2eea:	ldrh	r2, [r3, #0]
    2eec:	tst.w	r9, #8
    2ef0:	ite	eq
    2ef2:	moveq	r3, #136	; 0x88
    2ef4:	movne	r3, #200	; 0xc8
    2ef6:	orr.w	r3, r3, r2, lsl #16
    2efa:	str.w	r3, [r7, r8, lsl #3]
    2efe:	b.n	2d18 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2f00:	lsls	r0, r4, #31
    2f02:	bmi.w	30ec <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2f06:	lsls	r1, r4, #24
    2f08:	bmi.w	316c <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2f0c:	lsls	r2, r4, #30
    2f0e:	bpl.n	2f1e <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2f10:	ldr	r2, [pc, #124]	; (2f90 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2f12:	ldr	r1, [pc, #128]	; (2f94 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2f14:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2f16:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2f18:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2f1a:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2f1c:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2f1e:	lsls	r3, r4, #27
    2f20:	bpl.n	2f28 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2f22:	ldr	r3, [pc, #112]	; (2f94 <usb_isr+0x310>)
    2f24:	movs	r2, #16
    2f26:	strb	r2, [r3, #0]
	}

}
    2f28:	add	sp, #28
    2f2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2f2e:	movs	r2, #4
    2f30:	strb	r2, [r1, r6]
						break;
    2f32:	b.n	2eea <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2f34:	movs	r2, #5
    2f36:	strb	r2, [r1, r6]
						break;
    2f38:	b.n	2eea <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2f3a:	movs	r2, #3
    2f3c:	strb	r2, [r1, r6]
						break;
    2f3e:	b.n	2eea <usb_isr+0x266>
    2f40:	.word	0x1fff0000
    2f44:	.word	0x1fff1904
    2f48:	.word	0x1fff18ac
    2f4c:	.word	0x1fff1e2c
    2f50:	.word	0x004000c8
    2f54:	.word	0x00400088
    2f58:	.word	0x1fff1998
    2f5c:	.word	0x1fff1919
    2f60:	.word	0x1fff182c
    2f64:	.word	0x1fff1984
    2f68:	.word	0x1fff18a8
    2f6c:	.word	0x1fff1918
    2f70:	.word	0x400720c0
    2f74:	.word	0x1fff1990
    2f78:	.word	0x1fff18c0
    2f7c:	.word	0x1fff198c
    2f80:	.word	0x40072098
    2f84:	.word	0x40072094
    2f88:	.word	0x1fff195c
    2f8c:	.word	0x1fff199c
    2f90:	.word	0x40072088
    2f94:	.word	0x40072080
    2f98:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2f9c:	movw	r4, #8225	; 0x2021
    2fa0:	cmp	r1, r4
    2fa2:	beq.w	30de <usb_isr+0x45a>
    2fa6:	bhi.n	303c <usb_isr+0x3b8>
    2fa8:	cmp.w	r1, #2176	; 0x880
    2fac:	beq.w	3242 <usb_isr+0x5be>
    2fb0:	cmp.w	r1, #2304	; 0x900
    2fb4:	bne.w	31c2 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2fb8:	ldr	r2, [pc, #712]	; (3284 <usb_isr+0x600>)
    2fba:	ldr	r4, [pc, #716]	; (3288 <usb_isr+0x604>)
    2fbc:	ldrb	r1, [r5, #2]
    2fbe:	strb	r1, [r2, #0]
    2fc0:	add.w	r5, r4, #160	; 0xa0
    2fc4:	b.n	2fce <usb_isr+0x34a>
    2fc6:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2fc8:	cmp	r5, r4
    2fca:	beq.w	32e0 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2fce:	ldr	r3, [r4, #32]
    2fd0:	lsls	r1, r3, #24
    2fd2:	bpl.n	2fc6 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2fd4:	ldr	r0, [r4, #36]	; 0x24
    2fd6:	subs	r0, #8
    2fd8:	bl	2a64 <usb_free>
    2fdc:	b.n	2fc6 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2fde:	cmp.w	lr, #64	; 0x40
    2fe2:	it	ne
    2fe4:	movne	r2, #0
    2fe6:	b.n	2e72 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2fe8:	ldr	r2, [pc, #672]	; (328c <usb_isr+0x608>)
    2fea:	ldrb	r5, [r1, #0]
    2fec:	ldrb	r0, [r1, #1]
    2fee:	strb	r5, [r2, #0]
    2ff0:	strb	r0, [r2, #1]
    2ff2:	ldrb	r5, [r1, #2]
    2ff4:	ldrb	r0, [r1, #3]
    2ff6:	strb	r5, [r2, #2]
    2ff8:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2ffa:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2ffc:	ldrb	r5, [r1, #4]
    2ffe:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3000:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3002:	ldrb	r5, [r1, #5]
    3004:	ldrb	r1, [r1, #6]
    3006:	strb	r5, [r2, #5]
    3008:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    300a:	beq.w	323a <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    300e:	ldr	r1, [pc, #640]	; (3290 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3010:	ldr	r6, [pc, #640]	; (3294 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3012:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3014:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3016:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    301a:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    301c:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3020:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3022:	ite	eq
    3024:	moveq	r1, #136	; 0x88
    3026:	movne	r1, #200	; 0xc8
    3028:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    302c:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3030:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3034:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3036:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3038:	str	r1, [r2, #4]
    303a:	b.n	2e98 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    303c:	movw	r4, #8737	; 0x2221
    3040:	cmp	r1, r4
    3042:	bne.w	3456 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3046:	ldr.w	ip, [pc, #656]	; 32d8 <usb_isr+0x654>
    304a:	ldr	r3, [pc, #588]	; (3298 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    304c:	ldr	r1, [pc, #588]	; (329c <usb_isr+0x618>)
    304e:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3050:	ldr.w	r5, [ip]
    3054:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3056:	str	r0, [sp, #4]
    3058:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    305a:	movs	r0, #0
    305c:	str	r0, [sp, #8]
    305e:	mov	r8, r0
    3060:	mov	ip, r0
    3062:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3064:	ldr	r1, [pc, #552]	; (3290 <usb_isr+0x60c>)
    3066:	ldrb	r5, [r1, #0]
    3068:	orr.w	lr, r5, #2
    306c:	add.w	r3, r9, lr, lsl #3
    3070:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3072:	ldr	r3, [sp, #4]
    3074:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3076:	ldr	r3, [sp, #12]
    3078:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    307a:	ite	eq
    307c:	moveq	r4, #136	; 0x88
    307e:	movne	r4, #200	; 0xc8
    3080:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3084:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3088:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    308c:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    308e:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3090:	ldr.w	lr, [pc, #500]	; 3288 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    3094:	ldr	r3, [pc, #508]	; (3294 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    3096:	ldr.w	r8, [pc, #504]	; 3290 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    309a:	cmp	r0, #0
    309c:	bne.w	31d0 <usb_isr+0x54c>
    30a0:	cmp.w	ip, #64	; 0x40
    30a4:	bne.n	30de <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    30a6:	orr.w	ip, r4, #2
    30aa:	add.w	r3, r9, ip, lsl #3
    30ae:	ldr	r4, [sp, #8]
    30b0:	ldr.w	lr, [pc, #468]	; 3288 <usb_isr+0x604>
    30b4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30b6:	cmp	r2, #0
    30b8:	bne.w	31fc <usb_isr+0x578>
    30bc:	lsls	r2, r0, #16
    30be:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    30c2:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30c6:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    30ca:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    30cc:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    30ce:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    30d0:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    30d2:	cmp	r0, #64	; 0x40
    30d4:	bne.n	30de <usb_isr+0x45a>
    30d6:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    30d8:	ldr	r2, [pc, #452]	; (32a0 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    30da:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    30dc:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    30de:	ldr	r2, [pc, #452]	; (32a4 <usb_isr+0x620>)
    30e0:	movs	r3, #1
    30e2:	strb	r3, [r2, #0]
    30e4:	b.n	2e9e <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    30e6:	bl	1e44 <usb_serial_flush_callback>
    30ea:	b.n	2d58 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    30ec:	ldr	r3, [pc, #408]	; (3288 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    30ee:	ldr	r0, [pc, #436]	; (32a4 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    30f0:	ldr	r1, [pc, #412]	; (3290 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    30f2:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    30f4:	mov.w	lr, #2
    30f8:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    30fc:	ldr	r7, [pc, #424]	; (32a8 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    30fe:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3100:	ldr	r1, [pc, #424]	; (32ac <usb_isr+0x628>)
    3102:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3104:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3106:	ldr	r6, [pc, #424]	; (32b0 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3108:	ldr	r5, [pc, #424]	; (32b4 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    310a:	ldr	r4, [pc, #428]	; (32b8 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    310c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    310e:	movs	r1, #13
    3110:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3112:	movs	r1, #255	; 0xff
    3114:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3116:	ldr.w	lr, [pc, #452]	; 32dc <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    311a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    311c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    311e:	ldr	r5, [pc, #412]	; (32bc <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3120:	ldr	r2, [pc, #412]	; (32c0 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3122:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3126:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3128:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    312a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    312e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3130:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3132:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3134:	add	sp, #28
    3136:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    313a:	ldr	r2, [pc, #392]	; (32c4 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    313c:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3140:	ldrb	r3, [r2, #0]
    3142:	adds	r3, #1
    3144:	strb	r3, [r2, #0]
    3146:	b.n	2d18 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3148:	str.w	r0, [r3, r6, lsl #2]
    314c:	ldr	r5, [pc, #376]	; (32c8 <usb_isr+0x644>)
    314e:	b.n	2ce6 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3150:	ldrb	r3, [r1, r6]
    3152:	cmp	r3, #3
    3154:	bhi.n	322c <usb_isr+0x5a8>
    3156:	add	r2, pc, #4	; (adr r2, 315c <usb_isr+0x4d8>)
    3158:	ldr.w	pc, [r2, r3, lsl #2]
    315c:	.word	0x00002d19
    3160:	.word	0x00002d19
    3164:	.word	0x000031b1
    3168:	.word	0x000031ab
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    316c:	ldr	r1, [pc, #312]	; (32a8 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    316e:	ldr	r3, [pc, #324]	; (32b4 <usb_isr+0x630>)
    3170:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3172:	movs	r0, #13
    3174:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3176:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3178:	lsls	r2, r4, #30
    317a:	bpl.w	2f1e <usb_isr+0x29a>
    317e:	b.n	2f10 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3180:	movw	r2, #770	; 0x302
    3184:	cmp	r1, r2
    3186:	bne.w	3446 <usb_isr+0x7c2>
    318a:	ldrh	r1, [r5, #4]
    318c:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3190:	cmp	r1, #5
    3192:	bhi.n	31c2 <usb_isr+0x53e>
    3194:	ldrh	r2, [r5, #2]
    3196:	cbnz	r2, 31c2 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3198:	ldr	r4, [pc, #268]	; (32a8 <usb_isr+0x624>)
    319a:	str	r0, [sp, #4]
    319c:	lsls	r1, r1, #2
    319e:	add	r4, r1
    31a0:	ldrb	r1, [r4, #0]
    31a2:	orr.w	r1, r1, #2
    31a6:	strb	r1, [r4, #0]
    31a8:	b.n	305a <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    31aa:	movs	r3, #1
    31ac:	strb	r3, [r1, r6]
						break;
    31ae:	b.n	2d18 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    31b0:	movs	r3, #0
    31b2:	strb	r3, [r1, r6]
						break;
    31b4:	b.n	2d18 <usb_isr+0x94>
    31b6:	ldrh	r1, [r5, #4]
    31b8:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    31bc:	cmp	r1, #5
    31be:	bls.w	3460 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    31c2:	ldr	r2, [pc, #228]	; (32a8 <usb_isr+0x624>)
    31c4:	movs	r3, #15
    31c6:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    31c8:	ldr	r2, [pc, #216]	; (32a4 <usb_isr+0x620>)
    31ca:	movs	r3, #1
    31cc:	strb	r3, [r2, #0]
    31ce:	b.n	2e9e <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    31d0:	cmp	r0, #64	; 0x40
    31d2:	bls.w	30a6 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    31d6:	orr.w	r4, r4, #2
    31da:	add.w	r1, lr, r4, lsl #3
    31de:	ldr	r6, [sp, #8]
    31e0:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31e2:	cbz	r2, 3214 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    31e4:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31e8:	ldr	r2, [pc, #224]	; (32cc <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    31ea:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    31ec:	mov	r3, r6
    31ee:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    31f0:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    31f4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31f6:	str.w	r2, [lr, r4, lsl #3]
    31fa:	b.n	30d8 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    31fc:	ldrb.w	r3, [sp, #4]
    3200:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3202:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3204:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3206:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3208:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    320c:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    320e:	str.w	r2, [lr, ip, lsl #3]
    3212:	b.n	30d2 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3214:	ldrb.w	r1, [sp, #4]
    3218:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    321a:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    321c:	ldr	r2, [pc, #140]	; (32ac <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    321e:	strb.w	r5, [r8]
    3222:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3224:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3226:	str.w	r2, [lr, r4, lsl #3]
    322a:	b.n	30d8 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    322c:	tst.w	r9, #8
    3230:	ite	eq
    3232:	moveq	r3, #2
    3234:	movne	r3, #3
    3236:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3238:	b.n	2d18 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    323a:	ldr	r2, [pc, #148]	; (32d0 <usb_isr+0x64c>)
    323c:	movs	r1, #15
    323e:	strb	r1, [r2, #0]
    3240:	b.n	300e <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3242:	ldr	r2, [pc, #64]	; (3284 <usb_isr+0x600>)
    3244:	ldr	r4, [pc, #140]	; (32d4 <usb_isr+0x650>)
    3246:	ldrb	r2, [r2, #0]
    3248:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    324a:	ldrh	r2, [r5, #6]
    324c:	cmp	r2, r0
    324e:	bcs.w	3614 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3252:	ldr	r1, [pc, #60]	; (3290 <usb_isr+0x60c>)
    3254:	ldrb	r5, [r1, #0]
    3256:	cmp	r2, #64	; 0x40
    3258:	mov	ip, r2
    325a:	orr.w	lr, r5, #2
    325e:	it	cs
    3260:	movcs.w	ip, #64	; 0x40
    3264:	add.w	r3, r4, ip
    3268:	add.w	r0, r9, lr, lsl #3
    326c:	str	r3, [sp, #8]
    326e:	movs	r3, #1
    3270:	str	r4, [r0, #4]
    3272:	mov.w	r8, ip, lsl #16
    3276:	rsb	r0, ip, r2
    327a:	str	r3, [sp, #4]
    327c:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    327e:	movs	r4, #200	; 0xc8
    3280:	b.n	3080 <usb_isr+0x3fc>
    3282:	nop
    3284:	.word	0x1fff1998
    3288:	.word	0x1fff0000
    328c:	.word	0x1fff1cf4
    3290:	.word	0x1fff198c
    3294:	.word	0x1fff1918
    3298:	.word	0x1fff1cfc
    329c:	.word	0x1fff183c
    32a0:	.word	0x1fff18c0
    32a4:	.word	0x40072094
    32a8:	.word	0x400720c0
    32ac:	.word	0x00400088
    32b0:	.word	0x40072088
    32b4:	.word	0x40072080
    32b8:	.word	0x40072098
    32bc:	.word	0x1fff18c4
    32c0:	.word	0x1fff191c
    32c4:	.word	0x1fff198d
    32c8:	.word	0x1fff18ac
    32cc:	.word	0x004000c8
    32d0:	.word	0x1fff1919
    32d4:	.word	0x1fff1990
    32d8:	.word	0x1fff1844
    32dc:	.word	0x4007208c
    32e0:	ldr	r4, [pc, #704]	; (35a4 <usb_isr+0x920>)
    32e2:	ldr	r2, [pc, #708]	; (35a8 <usb_isr+0x924>)
    32e4:	ldr	r1, [pc, #708]	; (35ac <usb_isr+0x928>)
    32e6:	ldr	r0, [pc, #712]	; (35b0 <usb_isr+0x92c>)
    32e8:	ldr	r5, [pc, #712]	; (35b4 <usb_isr+0x930>)
    32ea:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    32ec:	movs	r3, #0
    32ee:	ldr	r4, [pc, #712]	; (35b8 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    32f0:	str	r4, [sp, #8]
    32f2:	str	r6, [sp, #20]
    32f4:	str	r5, [sp, #12]
    32f6:	mov	r8, r0
    32f8:	mov	r4, r3
    32fa:	str	r7, [sp, #16]
    32fc:	mov	r6, r2
    32fe:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3300:	ldr	r0, [r6, #0]
			while (p) {
    3302:	cbz	r0, 3310 <usb_isr+0x68c>
				n = p->next;
    3304:	ldr	r7, [r0, #4]
				usb_free(p);
    3306:	bl	2a64 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    330a:	mov	r0, r7
    330c:	cmp	r7, #0
    330e:	bne.n	3304 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3310:	movs	r3, #0
    3312:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3314:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3316:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3318:	mov	r2, r3
    331a:	movs	r3, #0
    331c:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3320:	cbz	r0, 332e <usb_isr+0x6aa>
				n = p->next;
    3322:	ldr	r7, [r0, #4]
				usb_free(p);
    3324:	bl	2a64 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3328:	mov	r0, r7
    332a:	cmp	r7, #0
    332c:	bne.n	3322 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    332e:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3330:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3332:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3334:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3336:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    333a:	ldr	r2, [sp, #8]
    333c:	mov.w	r1, #0
			switch (tx_state[i]) {
    3340:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3342:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3346:	cmp	r3, #3
    3348:	bhi.n	335a <usb_isr+0x6d6>
    334a:	tbb	[pc, r3]
    334e:	.short	0x0258
    3350:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3352:	ldr	r3, [sp, #4]
    3354:	mov.w	r2, #1
    3358:	strb	r2, [r3, #0]
    335a:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    335c:	adds	r4, #1
    335e:	adds	r3, #1
    3360:	cmp	r4, #5
    3362:	add.w	r6, r6, #4
    3366:	add.w	r5, r5, #4
    336a:	str	r3, [sp, #4]
    336c:	bne.n	3300 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    336e:	ldr	r4, [pc, #588]	; (35bc <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3370:	ldr	r5, [pc, #588]	; (35c0 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3372:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3374:	ldr	r3, [pc, #588]	; (35c4 <usb_isr+0x940>)
    3376:	ldr	r7, [sp, #16]
    3378:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    337a:	movs	r1, #0
    337c:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    337e:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3380:	lsls	r2, r2, #28
    3382:	bmi.n	347a <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3384:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3386:	ldr	r1, [pc, #576]	; (35c8 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3388:	ldr.w	r8, [pc, #588]	; 35d8 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    338c:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    338e:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3390:	mov.w	r1, #0
    3394:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3398:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    339c:	bmi.w	3526 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33a0:	ldrb	r2, [r4, #2]
			*reg = epconf;
    33a2:	ldr	r1, [pc, #552]	; (35cc <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33a4:	ldr.w	r8, [pc, #560]	; 35d8 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    33a8:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33aa:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33ac:	mov.w	r1, #0
    33b0:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    33b4:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33b8:	bmi.w	34fe <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    33bc:	ldr	r1, [pc, #528]	; (35d0 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33be:	ldrb	r2, [r4, #3]
			*reg = epconf;
    33c0:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33c2:	movs	r1, #0
    33c4:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    33c8:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33cc:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33ce:	ldr.w	r8, [pc, #520]	; 35d8 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33d2:	bmi.n	34d0 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33d4:	ldrb	r2, [r4, #4]
			*reg = epconf;
    33d6:	ldr	r1, [pc, #508]	; (35d4 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33d8:	ldr	r4, [pc, #508]	; (35d8 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    33da:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33dc:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33de:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33e0:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    33e4:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33e8:	bmi.n	34a6 <usb_isr+0x822>
    33ea:	ldrb	r3, [r6, #0]
    33ec:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33ee:	movs	r1, #0
    33f0:	eor.w	r2, r3, #1
    33f4:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    33f8:	str.w	r1, [r9, #184]	; 0xb8
    33fc:	b.n	305a <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    33fe:	ldr	r3, [sp, #4]
    3400:	mov.w	r2, #0
    3404:	strb	r2, [r3, #0]
    3406:	b.n	335a <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3408:	ldr	r2, [pc, #464]	; (35dc <usb_isr+0x958>)
    340a:	ldr	r4, [r2, #4]
    340c:	cmp	r4, #0
    340e:	beq.w	31c2 <usb_isr+0x53e>
    3412:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3414:	ldrh.w	lr, [r5, #4]
    3418:	b.n	3424 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    341a:	adds	r2, #12
			if (list->addr == NULL) break;
    341c:	ldr	r4, [r2, #4]
    341e:	cmp	r4, #0
    3420:	beq.w	31c2 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3424:	ldrh	r3, [r2, #0]
    3426:	cmp	r3, r0
    3428:	bne.n	341a <usb_isr+0x796>
    342a:	ldrh	r3, [r2, #2]
    342c:	cmp	r3, lr
    342e:	bne.n	341a <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3430:	lsrs	r0, r0, #8
    3432:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3434:	ite	eq
    3436:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3438:	ldrhne	r0, [r2, #8]
    343a:	b.n	324a <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    343c:	ldr	r4, [pc, #416]	; (35e0 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    343e:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3440:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3442:	strb	r2, [r4, #1]
    3444:	b.n	324a <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3446:	cmp.w	r1, #1280	; 0x500
    344a:	bne.w	31c2 <usb_isr+0x53e>
    344e:	movs	r3, #1
    3450:	movs	r2, #0
    3452:	str	r3, [sp, #4]
    3454:	b.n	305a <usb_isr+0x3d6>
    3456:	movw	r2, #8993	; 0x2321
    345a:	cmp	r1, r2
    345c:	beq.n	344e <usb_isr+0x7ca>
    345e:	b.n	31c2 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3460:	ldrh	r2, [r5, #2]
    3462:	cmp	r2, #0
    3464:	bne.w	31c2 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3468:	ldr	r4, [pc, #376]	; (35e4 <usb_isr+0x960>)
    346a:	str	r0, [sp, #4]
    346c:	lsls	r1, r1, #2
    346e:	add	r4, r1
    3470:	ldrb	r1, [r4, #0]
    3472:	bic.w	r1, r1, #2
    3476:	strb	r1, [r4, #0]
    3478:	b.n	305a <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    347a:	bl	2a24 <usb_malloc>
				if (p) {
    347e:	cmp	r0, #0
    3480:	beq.w	35f0 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3484:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3486:	ldr	r2, [pc, #352]	; (35e8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3488:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    348c:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3490:	bl	2a24 <usb_malloc>
				if (p) {
    3494:	cmp	r0, #0
    3496:	beq.n	3598 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3498:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    349a:	ldr	r2, [pc, #336]	; (35ec <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    349c:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34a0:	str.w	r2, [r9, #40]	; 0x28
    34a4:	b.n	3384 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34a6:	bl	2a24 <usb_malloc>
				if (p) {
    34aa:	cmp	r0, #0
    34ac:	beq.n	355c <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    34ae:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34b0:	ldr	r2, [pc, #308]	; (35e8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    34b2:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34b6:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    34ba:	bl	2a24 <usb_malloc>
				if (p) {
    34be:	cmp	r0, #0
    34c0:	beq.n	3550 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    34c2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34c4:	ldr	r2, [pc, #292]	; (35ec <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    34c6:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34ca:	str.w	r2, [r9, #168]	; 0xa8
    34ce:	b.n	33ea <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34d0:	bl	2a24 <usb_malloc>
				if (p) {
    34d4:	cmp	r0, #0
    34d6:	beq.w	3608 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    34da:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34dc:	ldr	r2, [pc, #264]	; (35e8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    34de:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34e2:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    34e6:	bl	2a24 <usb_malloc>
				if (p) {
    34ea:	cmp	r0, #0
    34ec:	beq.w	35fc <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    34f0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34f2:	ldr	r2, [pc, #248]	; (35ec <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    34f4:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34f8:	str.w	r2, [r9, #136]	; 0x88
    34fc:	b.n	33d4 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34fe:	bl	2a24 <usb_malloc>
				if (p) {
    3502:	cmp	r0, #0
    3504:	beq.n	358c <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3506:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3508:	ldr	r2, [pc, #220]	; (35e8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    350a:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    350e:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3512:	bl	2a24 <usb_malloc>
				if (p) {
    3516:	cbz	r0, 3580 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3518:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    351a:	ldr	r2, [pc, #208]	; (35ec <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    351c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3520:	str.w	r2, [r9, #104]	; 0x68
    3524:	b.n	33bc <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3526:	bl	2a24 <usb_malloc>
				if (p) {
    352a:	cbz	r0, 3574 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    352c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    352e:	ldr	r2, [pc, #184]	; (35e8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3530:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3534:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3538:	bl	2a24 <usb_malloc>
				if (p) {
    353c:	cbz	r0, 3568 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    353e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3540:	ldr	r2, [pc, #168]	; (35ec <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3542:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3546:	str.w	r2, [r9, #72]	; 0x48
    354a:	b.n	33a0 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    354c:	movs	r0, #2
    354e:	b.n	324a <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3550:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3552:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3556:	adds	r2, #1
    3558:	strb	r2, [r5, #0]
    355a:	b.n	33ea <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    355c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    355e:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3562:	adds	r2, #1
    3564:	strb	r2, [r5, #0]
    3566:	b.n	34ba <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3568:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    356a:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    356e:	adds	r2, #1
    3570:	strb	r2, [r5, #0]
    3572:	b.n	33a0 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3574:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3576:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    357a:	adds	r2, #1
    357c:	strb	r2, [r5, #0]
    357e:	b.n	3538 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3580:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3582:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3586:	adds	r2, #1
    3588:	strb	r2, [r5, #0]
    358a:	b.n	33bc <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    358c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    358e:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3592:	adds	r2, #1
    3594:	strb	r2, [r5, #0]
    3596:	b.n	3512 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3598:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    359a:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    359e:	adds	r2, #1
    35a0:	strb	r2, [r5, #0]
    35a2:	b.n	3384 <usb_isr+0x700>
    35a4:	.word	0x1fff199c
    35a8:	.word	0x1fff1904
    35ac:	.word	0x1fff195c
    35b0:	.word	0x1fff1970
    35b4:	.word	0x1fff18ac
    35b8:	.word	0x1fff1e2c
    35bc:	.word	0x00004e88
    35c0:	.word	0x1fff198d
    35c4:	.word	0x400720c4
    35c8:	.word	0x400720c8
    35cc:	.word	0x400720cc
    35d0:	.word	0x400720d0
    35d4:	.word	0x400720d4
    35d8:	.word	0x1fff0000
    35dc:	.word	0x00004e90
    35e0:	.word	0x1fff1990
    35e4:	.word	0x400720c0
    35e8:	.word	0x00400088
    35ec:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    35f0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    35f2:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    35f6:	adds	r2, #1
    35f8:	strb	r2, [r5, #0]
    35fa:	b.n	3490 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    35fc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    35fe:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3602:	adds	r2, #1
    3604:	strb	r2, [r5, #0]
    3606:	b.n	33d4 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3608:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    360a:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    360e:	adds	r2, #1
    3610:	strb	r2, [r5, #0]
    3612:	b.n	34e6 <usb_isr+0x862>
    3614:	cmp	r0, #64	; 0x40
    3616:	mov	ip, r0
    3618:	it	cs
    361a:	movcs.w	ip, #64	; 0x40
    361e:	add.w	r3, r4, ip
    3622:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3624:	movs	r3, #1
    3626:	rsb	r0, ip, r0
    362a:	mov.w	r8, ip, lsl #16
    362e:	movs	r2, #0
    3630:	str	r3, [sp, #4]
    3632:	b.n	3064 <usb_isr+0x3e0>

00003634 <usb_init>:
}



void usb_init(void)
{
    3634:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3638:	ldr	r4, [pc, #156]	; (36d8 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    363a:	bl	3e74 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    363e:	movs	r2, #0
    3640:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3644:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3646:	str	r2, [r3, #0]
		table[i].addr = 0;
    3648:	str	r2, [r3, #4]
    364a:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    364c:	cmp	r3, r0
		table[i].desc = 0;
    364e:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3652:	bne.n	3646 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3654:	ldr	r0, [pc, #132]	; (36dc <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3656:	ldr	r2, [pc, #136]	; (36e0 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3658:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    365a:	ldr.w	lr, [pc, #156]	; 36f8 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    365e:	ldr	r6, [pc, #132]	; (36e4 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3660:	ldr	r5, [pc, #132]	; (36e8 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3662:	ldr	r7, [pc, #136]	; (36ec <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3664:	ldr.w	ip, [pc, #148]	; 36fc <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3668:	ldr.w	r8, [pc, #148]	; 3700 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    366c:	orr.w	r3, r3, #262144	; 0x40000
    3670:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3672:	ldr	r3, [r2, #0]
    3674:	orr.w	r3, r3, #50331648	; 0x3000000
    3678:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    367a:	movs	r3, #3
    367c:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3680:	movs	r3, #160	; 0xa0
    3682:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3684:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3688:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    368c:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3690:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3692:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3694:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3698:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    369a:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    369c:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    369e:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    36a0:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    36a2:	ldr	r5, [pc, #76]	; (36f0 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    36a4:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    36a8:	ldr	r0, [pc, #72]	; (36f4 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    36aa:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    36ae:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    36b0:	movs	r3, #1
    36b2:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    36b6:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    36ba:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    36be:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    36c0:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    36c2:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    36c6:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    36c8:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    36ca:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    36ce:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    36d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36d6:	nop
    36d8:	.word	0x1fff0000
    36dc:	.word	0x40048034
    36e0:	.word	0x4000d800
    36e4:	.word	0x40072140
    36e8:	.word	0x4007209c
    36ec:	.word	0x400720b0
    36f0:	.word	0xe000e435
    36f4:	.word	0xe000e104
    36f8:	.word	0x40072144
    36fc:	.word	0x40072080
    3700:	.word	0x40072088

00003704 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3704:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3706:	ldr	r4, [pc, #176]	; (37b8 <yield+0xb4>)
    3708:	ldrb	r3, [r4, #0]
    370a:	cbz	r3, 370e <yield+0xa>
    370c:	pop	{r3, r4, r5, pc}
	running = 1;
    370e:	movs	r3, #1
    3710:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3712:	bl	1c30 <usb_serial_available>
	if (Serial.available()) serialEvent();
    3716:	cmp	r0, #0
    3718:	bne.n	37a0 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    371a:	bl	3c44 <serial_available>
	if (Serial1.available()) serialEvent1();
    371e:	cmp	r0, #0
    3720:	bne.n	379a <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    3722:	bl	392c <serial2_available>
	if (Serial2.available()) serialEvent2();
    3726:	cmp	r0, #0
    3728:	bne.n	3794 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    372a:	bl	3f44 <serial3_available>
	if (Serial3.available()) serialEvent3();
    372e:	cbnz	r0, 378e <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3730:	bl	3a58 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3734:	cbnz	r0, 3788 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    3736:	bl	3834 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    373a:	cbnz	r0, 3782 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    373c:	bl	3d70 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3740:	cbnz	r0, 377c <yield+0x78>
#endif
	running = 0;
    3742:	movs	r3, #0
    3744:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3746:	mrs	r3, IPSR
		if (ipsr != 0) return;
    374a:	cmp	r3, #0
    374c:	bne.n	370c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    374e:	mrs	r1, PRIMASK
		__disable_irq();
    3752:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3754:	ldr	r3, [pc, #100]	; (37bc <yield+0xb8>)
    3756:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3758:	cbz	r0, 37a6 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    375a:	ldr	r4, [pc, #100]	; (37c0 <yield+0xbc>)
    375c:	ldrb	r2, [r4, #0]
    375e:	cbnz	r2, 37a6 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3760:	ldr	r5, [r0, #20]
    3762:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3764:	movs	r3, #1
    3766:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3768:	cbz	r5, 37ae <yield+0xaa>
			firstYield->_prev = nullptr;
    376a:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    376c:	cbnz	r1, 3770 <yield+0x6c>
    376e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3770:	movs	r5, #0
    3772:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3774:	ldr	r3, [r0, #8]
    3776:	blx	r3
		runningFromYield = false;
    3778:	strb	r5, [r4, #0]
    377a:	b.n	370c <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    377c:	bl	3830 <serialEvent6()>
    3780:	b.n	3742 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3782:	bl	37c8 <serialEvent5()>
    3786:	b.n	373c <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3788:	bl	381c <serialEvent4()>
    378c:	b.n	3736 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    378e:	bl	4040 <serialEvent3()>
    3792:	b.n	3730 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    3794:	bl	3818 <serialEvent2()>
    3798:	b.n	372a <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    379a:	bl	403c <serialEvent1()>
    379e:	b.n	3722 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    37a0:	bl	37f4 <serialEvent()>
    37a4:	b.n	371a <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37a6:	cmp	r1, #0
    37a8:	bne.n	370c <yield+0x8>
    37aa:	cpsie	i
    37ac:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    37ae:	ldr	r3, [pc, #20]	; (37c4 <yield+0xc0>)
    37b0:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37b2:	cmp	r1, #0
    37b4:	bne.n	3770 <yield+0x6c>
    37b6:	b.n	376e <yield+0x6a>
    37b8:	.word	0x1fff19a1
    37bc:	.word	0x1fff1cb4
    37c0:	.word	0x1fff1cb8
    37c4:	.word	0x1fff1cb0

000037c8 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    37c8:	bx	lr
    37ca:	nop

000037cc <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    37cc:	b.w	1c4c <usb_serial_flush_input>

000037d0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    37d0:	b.w	1c00 <usb_serial_peekchar>

000037d4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    37d4:	b.w	1bb8 <usb_serial_getchar>

000037d8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    37d8:	b.w	1c30 <usb_serial_available>

000037dc <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    37dc:	b.w	1dec <usb_serial_flush_output>

000037e0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    37e0:	b.w	1da4 <usb_serial_write_buffer_free>

000037e4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    37e4:	mov	r0, r1
    37e6:	mov	r1, r2
    37e8:	b.w	1c84 <usb_serial_write>

000037ec <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    37ec:	mov	r0, r1
    37ee:	b.w	1d8c <usb_serial_putchar>
    37f2:	nop

000037f4 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    37f4:	bx	lr
    37f6:	nop

000037f8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    37f8:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    37fa:	ldr	r2, [pc, #24]	; (3814 <Print::println()+0x1c>)
	return write(buf, 2);
    37fc:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    37fe:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3800:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3802:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3804:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3806:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    380a:	movs	r2, #2
    380c:	blx	r3
}
    380e:	add	sp, #12
    3810:	ldr.w	pc, [sp], #4
    3814:	.word	0x00004e84

00003818 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3818:	bx	lr
    381a:	nop

0000381c <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    381c:	bx	lr
    381e:	nop

00003820 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3820:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3822:	bl	490 <setup>
	while (1) {
		loop();
    3826:	bl	494 <loop>
		yield();
    382a:	bl	3704 <yield>
    382e:	b.n	3826 <main+0x6>

00003830 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3830:	bx	lr
    3832:	nop

00003834 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3834:	ldr	r2, [pc, #20]	; (384c <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3836:	ldr	r3, [pc, #24]	; (3850 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3838:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    383a:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    383c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    383e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3840:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3842:	it	cc
    3844:	addcc	r0, #64	; 0x40
    3846:	subs	r0, r0, r3
}
    3848:	bx	lr
    384a:	nop
    384c:	.word	0x1fff19a8
    3850:	.word	0x1fff19a9

00003854 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3854:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3856:	ldr	r3, [pc, #172]	; (3904 <uart4_status_isr+0xb0>)
    3858:	ldrb	r2, [r3, #4]
    385a:	lsls	r4, r2, #26
    385c:	bpl.n	389e <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    385e:	ldr	r0, [pc, #168]	; (3908 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3860:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3862:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3864:	ldr	r1, [pc, #164]	; (390c <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3866:	adds	r3, #1
    3868:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    386a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    386c:	it	gt
    386e:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3870:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3872:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3874:	beq.n	387e <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    3876:	ldr	r4, [pc, #152]	; (3910 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    3878:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    387a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    387c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    387e:	ldr	r2, [pc, #148]	; (3914 <uart4_status_isr+0xc0>)
    3880:	ldr	r1, [r2, #0]
    3882:	cbz	r1, 389e <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3884:	ldr	r2, [pc, #144]	; (3918 <uart4_status_isr+0xc4>)
    3886:	ldrb	r2, [r2, #0]
    3888:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    388a:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    388c:	itet	cc
    388e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3892:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3894:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3896:	cmp	r3, #39	; 0x27
    3898:	itt	gt
    389a:	movgt	r3, #1
    389c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    389e:	ldr	r2, [pc, #100]	; (3904 <uart4_status_isr+0xb0>)
    38a0:	ldrb	r3, [r2, #3]
    38a2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    38a4:	lsls	r0, r3, #24
    38a6:	bmi.n	38cc <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    38a8:	lsls	r2, r3, #25
    38aa:	bpl.n	38c8 <uart4_status_isr+0x74>
    38ac:	ldr	r3, [pc, #84]	; (3904 <uart4_status_isr+0xb0>)
    38ae:	ldrb	r3, [r3, #4]
    38b0:	lsls	r3, r3, #25
    38b2:	bpl.n	38c8 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    38b4:	ldr	r3, [pc, #100]	; (391c <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    38b6:	ldr	r1, [pc, #104]	; (3920 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    38b8:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    38ba:	movs	r2, #0
    38bc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    38be:	cbz	r3, 38c2 <uart4_status_isr+0x6e>
    38c0:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    38c2:	ldr	r3, [pc, #64]	; (3904 <uart4_status_isr+0xb0>)
    38c4:	movs	r2, #44	; 0x2c
    38c6:	strb	r2, [r3, #3]
	}
}
    38c8:	pop	{r4, r5}
    38ca:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    38cc:	ldrb	r1, [r2, #4]
    38ce:	lsls	r1, r1, #24
    38d0:	bpl.n	38a8 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    38d2:	ldr	r1, [pc, #80]	; (3924 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    38d4:	ldr	r0, [pc, #64]	; (3918 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    38d6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    38d8:	ldrb	r1, [r0, #0]
    38da:	uxtb	r1, r1
		if (head == tail) {
    38dc:	cmp	r4, r1
    38de:	beq.n	38fc <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    38e0:	adds	r2, r1, #1
    38e2:	cmp	r2, #39	; 0x27
    38e4:	itt	hi
    38e6:	movhi	r1, #0
    38e8:	movhi	r2, r1
			n = tx_buffer[tail];
    38ea:	ldr	r5, [pc, #60]	; (3928 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    38ec:	ldr	r4, [pc, #20]	; (3904 <uart4_status_isr+0xb0>)
    38ee:	it	ls
    38f0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    38f2:	ldrb	r2, [r5, r2]
    38f4:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    38f6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    38f8:	strb	r1, [r0, #0]
    38fa:	b.n	38a8 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    38fc:	movs	r1, #108	; 0x6c
    38fe:	strb	r1, [r2, #3]
    3900:	b.n	38a8 <uart4_status_isr+0x54>
    3902:	nop
    3904:	.word	0x400ea000
    3908:	.word	0x1fff19a8
    390c:	.word	0x1fff19a9
    3910:	.word	0x1fff19d4
    3914:	.word	0x1fff19a4
    3918:	.word	0x1fff1a15
    391c:	.word	0x1fff1a18
    3920:	.word	0x1fff1a14
    3924:	.word	0x1fff1a1c
    3928:	.word	0x1fff19ac

0000392c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    392c:	ldr	r2, [pc, #20]	; (3944 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    392e:	ldr	r3, [pc, #24]	; (3948 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3930:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3932:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3934:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3936:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3938:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    393a:	it	cc
    393c:	addcc	r0, #64	; 0x40
    393e:	subs	r0, r0, r3
}
    3940:	bx	lr
    3942:	nop
    3944:	.word	0x1fff1a90
    3948:	.word	0x1fff1a25

0000394c <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    394c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    394e:	ldr	r3, [pc, #224]	; (3a30 <uart1_status_isr+0xe4>)
    3950:	ldrb	r2, [r3, #4]
    3952:	tst.w	r2, #48	; 0x30
    3956:	beq.n	39b2 <uart1_status_isr+0x66>
		__disable_irq();
    3958:	cpsid	i
		avail = UART1_RCFIFO;
    395a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    395c:	and.w	r2, r1, #255	; 0xff
    3960:	cmp	r1, #0
    3962:	beq.n	39e0 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3964:	cpsie	i
			head = rx_buffer_head;
    3966:	ldr	r7, [pc, #204]	; (3a34 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3968:	ldr	r1, [pc, #204]	; (3a38 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    396a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    396c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    396e:	ldr	r6, [pc, #204]	; (3a3c <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3970:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3972:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3974:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3976:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3978:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    397a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    397c:	it	cs
    397e:	movcs	r3, #0
				if (newhead != tail) {
    3980:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3982:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3986:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3988:	itt	ne
    398a:	strbne	r1, [r6, r3]
    398c:	movne	r0, r3
				}
			} while (--avail > 0);
    398e:	ands.w	r2, r2, #255	; 0xff
    3992:	bne.n	3976 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3994:	ldr	r3, [pc, #168]	; (3a40 <uart1_status_isr+0xf4>)
    3996:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3998:	uxtb	r2, r0
    399a:	strb	r2, [r7, #0]
			if (rts_pin) {
    399c:	cbz	r3, 39b2 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    399e:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    39a0:	itet	cc
    39a2:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    39a6:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    39a8:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    39aa:	cmp	r0, #39	; 0x27
    39ac:	itt	gt
    39ae:	movgt	r2, #1
    39b0:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    39b2:	ldr	r1, [pc, #124]	; (3a30 <uart1_status_isr+0xe4>)
    39b4:	ldrb	r2, [r1, #3]
    39b6:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    39b8:	lsls	r5, r2, #24
    39ba:	bmi.n	39ea <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    39bc:	lsls	r2, r2, #25
    39be:	bpl.n	39dc <uart1_status_isr+0x90>
    39c0:	ldr	r3, [pc, #108]	; (3a30 <uart1_status_isr+0xe4>)
    39c2:	ldrb	r3, [r3, #4]
    39c4:	lsls	r3, r3, #25
    39c6:	bpl.n	39dc <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    39c8:	ldr	r3, [pc, #120]	; (3a44 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    39ca:	ldr	r1, [pc, #124]	; (3a48 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    39cc:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    39ce:	movs	r2, #0
    39d0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    39d2:	cbz	r3, 39d6 <uart1_status_isr+0x8a>
    39d4:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    39d6:	ldr	r3, [pc, #88]	; (3a30 <uart1_status_isr+0xe4>)
    39d8:	movs	r2, #60	; 0x3c
    39da:	strb	r2, [r3, #3]
	}
}
    39dc:	pop	{r4, r5, r6, r7}
    39de:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    39e0:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    39e2:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    39e4:	strb	r2, [r3, #17]
			__enable_irq();
    39e6:	cpsie	i
    39e8:	b.n	39b2 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    39ea:	ldrb	r3, [r1, #4]
    39ec:	lsls	r4, r3, #24
    39ee:	bpl.n	39bc <uart1_status_isr+0x70>
		head = tx_buffer_head;
    39f0:	ldr	r3, [pc, #88]	; (3a4c <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    39f2:	ldr	r6, [pc, #92]	; (3a50 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    39f4:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    39f6:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    39f8:	uxtb	r4, r4
		tail = tx_buffer_tail;
    39fa:	uxtb	r3, r3
		do {
			if (tail == head) break;
    39fc:	cmp	r4, r3
    39fe:	beq.n	3a1e <uart1_status_isr+0xd2>
    3a00:	ldr	r5, [pc, #80]	; (3a54 <uart1_status_isr+0x108>)
    3a02:	b.n	3a08 <uart1_status_isr+0xbc>
    3a04:	cmp	r3, r4
    3a06:	beq.n	3a1e <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3a08:	adds	r3, #1
    3a0a:	cmp	r3, #40	; 0x28
    3a0c:	it	cs
    3a0e:	movcs	r3, #0
			avail = UART1_S1;
    3a10:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3a12:	ldrb	r0, [r5, r3]
    3a14:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3a16:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3a18:	ldrb	r0, [r1, #20]
    3a1a:	cmp	r0, #7
    3a1c:	bls.n	3a04 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3a1e:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3a20:	ldr	r1, [pc, #12]	; (3a30 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3a22:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3a24:	ldrb	r3, [r1, #4]
    3a26:	lsls	r0, r3, #24
    3a28:	itt	mi
    3a2a:	movmi	r3, #124	; 0x7c
    3a2c:	strbmi	r3, [r1, #3]
    3a2e:	b.n	39bc <uart1_status_isr+0x70>
    3a30:	.word	0x4006b000
    3a34:	.word	0x1fff1a90
    3a38:	.word	0x1fff1a25
    3a3c:	.word	0x1fff1a50
    3a40:	.word	0x1fff1a20
    3a44:	.word	0x1fff1a94
    3a48:	.word	0x1fff1a24
    3a4c:	.word	0x1fff1a98
    3a50:	.word	0x1fff1a91
    3a54:	.word	0x1fff1a28

00003a58 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a58:	ldr	r2, [pc, #20]	; (3a70 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3a5a:	ldr	r3, [pc, #24]	; (3a74 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a5c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3a5e:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a60:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3a62:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3a64:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3a66:	it	cc
    3a68:	addcc	r0, #64	; 0x40
    3a6a:	subs	r0, r0, r3
}
    3a6c:	bx	lr
    3a6e:	nop
    3a70:	.word	0x1fff1aa0
    3a74:	.word	0x1fff1aa1

00003a78 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3a78:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3a7a:	ldr	r3, [pc, #172]	; (3b28 <uart3_status_isr+0xb0>)
    3a7c:	ldrb	r2, [r3, #4]
    3a7e:	lsls	r4, r2, #26
    3a80:	bpl.n	3ac2 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3a82:	ldr	r0, [pc, #168]	; (3b2c <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3a84:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3a86:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a88:	ldr	r1, [pc, #164]	; (3b30 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3a8a:	adds	r3, #1
    3a8c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a8e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3a90:	it	gt
    3a92:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a94:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3a96:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a98:	beq.n	3aa2 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3a9a:	ldr	r4, [pc, #152]	; (3b34 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3a9c:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3a9e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3aa0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3aa2:	ldr	r2, [pc, #148]	; (3b38 <uart3_status_isr+0xc0>)
    3aa4:	ldr	r1, [r2, #0]
    3aa6:	cbz	r1, 3ac2 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3aa8:	ldr	r2, [pc, #144]	; (3b3c <uart3_status_isr+0xc4>)
    3aaa:	ldrb	r2, [r2, #0]
    3aac:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3aae:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3ab0:	itet	cc
    3ab2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3ab6:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3ab8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3aba:	cmp	r3, #39	; 0x27
    3abc:	itt	gt
    3abe:	movgt	r3, #1
    3ac0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3ac2:	ldr	r2, [pc, #100]	; (3b28 <uart3_status_isr+0xb0>)
    3ac4:	ldrb	r3, [r2, #3]
    3ac6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3ac8:	lsls	r0, r3, #24
    3aca:	bmi.n	3af0 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3acc:	lsls	r2, r3, #25
    3ace:	bpl.n	3aec <uart3_status_isr+0x74>
    3ad0:	ldr	r3, [pc, #84]	; (3b28 <uart3_status_isr+0xb0>)
    3ad2:	ldrb	r3, [r3, #4]
    3ad4:	lsls	r3, r3, #25
    3ad6:	bpl.n	3aec <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3ad8:	ldr	r3, [pc, #100]	; (3b40 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ada:	ldr	r1, [pc, #104]	; (3b44 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3adc:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ade:	movs	r2, #0
    3ae0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3ae2:	cbz	r3, 3ae6 <uart3_status_isr+0x6e>
    3ae4:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3ae6:	ldr	r3, [pc, #64]	; (3b28 <uart3_status_isr+0xb0>)
    3ae8:	movs	r2, #44	; 0x2c
    3aea:	strb	r2, [r3, #3]
	}
}
    3aec:	pop	{r4, r5}
    3aee:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3af0:	ldrb	r1, [r2, #4]
    3af2:	lsls	r1, r1, #24
    3af4:	bpl.n	3acc <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3af6:	ldr	r1, [pc, #80]	; (3b48 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3af8:	ldr	r0, [pc, #64]	; (3b3c <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3afa:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3afc:	ldrb	r1, [r0, #0]
    3afe:	uxtb	r1, r1
		if (head == tail) {
    3b00:	cmp	r4, r1
    3b02:	beq.n	3b20 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3b04:	adds	r2, r1, #1
    3b06:	cmp	r2, #39	; 0x27
    3b08:	itt	hi
    3b0a:	movhi	r1, #0
    3b0c:	movhi	r2, r1
			n = tx_buffer[tail];
    3b0e:	ldr	r5, [pc, #60]	; (3b4c <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3b10:	ldr	r4, [pc, #20]	; (3b28 <uart3_status_isr+0xb0>)
    3b12:	it	ls
    3b14:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3b16:	ldrb	r2, [r5, r2]
    3b18:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3b1a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3b1c:	strb	r1, [r0, #0]
    3b1e:	b.n	3acc <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3b20:	movs	r1, #108	; 0x6c
    3b22:	strb	r1, [r2, #3]
    3b24:	b.n	3acc <uart3_status_isr+0x54>
    3b26:	nop
    3b28:	.word	0x4006d000
    3b2c:	.word	0x1fff1aa0
    3b30:	.word	0x1fff1aa1
    3b34:	.word	0x1fff1acc
    3b38:	.word	0x1fff1a9c
    3b3c:	.word	0x1fff1b0d
    3b40:	.word	0x1fff1b10
    3b44:	.word	0x1fff1b0c
    3b48:	.word	0x1fff1b14
    3b4c:	.word	0x1fff1aa4

00003b50 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3b50:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3b52:	ldr	r4, [pc, #64]	; (3b94 <fault_isr+0x44>)
    3b54:	b.n	3b68 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3b56:	ldr	r3, [r4, #0]
    3b58:	lsls	r1, r3, #21
    3b5a:	bmi.n	3b78 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3b5c:	ldr	r3, [r4, #0]
    3b5e:	lsls	r2, r3, #20
    3b60:	bmi.n	3b82 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3b62:	ldr	r3, [r4, #0]
    3b64:	lsls	r3, r3, #19
    3b66:	bmi.n	3b8c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3b68:	ldr	r3, [r4, #0]
    3b6a:	lsls	r0, r3, #13
    3b6c:	bpl.n	3b56 <fault_isr+0x6>
    3b6e:	bl	2c84 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3b72:	ldr	r3, [r4, #0]
    3b74:	lsls	r1, r3, #21
    3b76:	bpl.n	3b5c <fault_isr+0xc>
    3b78:	bl	3c64 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3b7c:	ldr	r3, [r4, #0]
    3b7e:	lsls	r2, r3, #20
    3b80:	bpl.n	3b62 <fault_isr+0x12>
    3b82:	bl	394c <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3b86:	ldr	r3, [r4, #0]
    3b88:	lsls	r3, r3, #19
    3b8a:	bpl.n	3b68 <fault_isr+0x18>
    3b8c:	bl	3f64 <uart2_status_isr>
    3b90:	b.n	3b68 <fault_isr+0x18>
    3b92:	nop
    3b94:	.word	0x40048034

00003b98 <unused_isr>:
	}
}

void unused_isr(void)
{
    3b98:	push	{r3, lr}
	fault_isr();
    3b9a:	bl	3b50 <fault_isr>
    3b9e:	nop

00003ba0 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3ba0:	ldr	r3, [pc, #4]	; (3ba8 <startup_early_hook+0x8>)
    3ba2:	movs	r2, #16
    3ba4:	strh	r2, [r3, #0]
    3ba6:	bx	lr
    3ba8:	.word	0x40052000

00003bac <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3bac:	bx	lr
    3bae:	nop

00003bb0 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3bb0:	ldr	r1, [pc, #36]	; (3bd8 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3bb2:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3bb4:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3bb6:	cbz	r0, 3bc6 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3bb8:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3bba:	add	r0, r3
    3bbc:	sub.w	r2, r2, #8192	; 0x2000
    3bc0:	cmp	r0, r2
    3bc2:	bcs.n	3bca <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3bc4:	str	r0, [r1, #0]
	}
	return prev;
    3bc6:	mov	r0, r3
}
    3bc8:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3bca:	bl	4238 <__errno>
    3bce:	movs	r3, #12
    3bd0:	str	r3, [r0, #0]
			return (void *)-1;
    3bd2:	mov.w	r0, #4294967295
    3bd6:	pop	{r3, pc}
    3bd8:	.word	0x1fff0c70

00003bdc <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3bdc:	ldr	r2, [pc, #32]	; (3c00 <kinetis_hsrun_disable+0x24>)
    3bde:	ldrb	r3, [r2, #0]
    3be0:	cmp	r3, #128	; 0x80
    3be2:	beq.n	3be8 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3be4:	movs	r0, #0
}
    3be6:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3be8:	ldr	r1, [pc, #24]	; (3c04 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3bea:	ldr	r3, [pc, #28]	; (3c08 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3bec:	ldr	r0, [pc, #28]	; (3c0c <kinetis_hsrun_disable+0x30>)
    3bee:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3bf0:	movs	r1, #0
    3bf2:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3bf4:	ldrb	r3, [r2, #0]
    3bf6:	cmp	r3, #128	; 0x80
    3bf8:	beq.n	3bf4 <kinetis_hsrun_disable+0x18>
		return 1;
    3bfa:	movs	r0, #1
    3bfc:	bx	lr
    3bfe:	nop
    3c00:	.word	0x4007e003
    3c04:	.word	0x40048044
    3c08:	.word	0x4007e001
    3c0c:	.word	0x22280000

00003c10 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3c10:	ldr	r2, [pc, #36]	; (3c38 <kinetis_hsrun_enable+0x28>)
    3c12:	ldrb	r3, [r2, #0]
    3c14:	cmp	r3, #1
    3c16:	beq.n	3c1c <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3c18:	movs	r0, #0
}
    3c1a:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3c1c:	add.w	r3, r3, #1073741824	; 0x40000000
    3c20:	add.w	r3, r3, #516096	; 0x7e000
    3c24:	movs	r1, #96	; 0x60
    3c26:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3c28:	ldrb	r3, [r2, #0]
    3c2a:	cmp	r3, #128	; 0x80
    3c2c:	bne.n	3c28 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3c2e:	ldr	r3, [pc, #12]	; (3c3c <kinetis_hsrun_enable+0x2c>)
    3c30:	ldr	r2, [pc, #12]	; (3c40 <kinetis_hsrun_enable+0x30>)
    3c32:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3c34:	movs	r0, #1
    3c36:	bx	lr
    3c38:	.word	0x4007e003
    3c3c:	.word	0x40048044
    3c40:	.word	0x02060000

00003c44 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c44:	ldr	r2, [pc, #20]	; (3c5c <serial_available+0x18>)
	tail = rx_buffer_tail;
    3c46:	ldr	r3, [pc, #24]	; (3c60 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c48:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3c4a:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c4c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3c4e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3c50:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3c52:	it	cc
    3c54:	addcc	r0, #64	; 0x40
    3c56:	subs	r0, r0, r3
}
    3c58:	bx	lr
    3c5a:	nop
    3c5c:	.word	0x1fff1b1c
    3c60:	.word	0x1fff1b1d

00003c64 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3c64:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3c66:	ldr	r3, [pc, #224]	; (3d48 <uart0_status_isr+0xe4>)
    3c68:	ldrb	r2, [r3, #4]
    3c6a:	tst.w	r2, #48	; 0x30
    3c6e:	beq.n	3cca <uart0_status_isr+0x66>
		__disable_irq();
    3c70:	cpsid	i
		avail = UART0_RCFIFO;
    3c72:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3c74:	and.w	r2, r1, #255	; 0xff
    3c78:	cmp	r1, #0
    3c7a:	beq.n	3cf8 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3c7c:	cpsie	i
			head = rx_buffer_head;
    3c7e:	ldr	r7, [pc, #204]	; (3d4c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3c80:	ldr	r1, [pc, #204]	; (3d50 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3c82:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3c84:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3c86:	ldr	r6, [pc, #204]	; (3d54 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3c88:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3c8a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3c8c:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3c8e:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3c90:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3c92:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3c94:	it	cs
    3c96:	movcs	r3, #0
				if (newhead != tail) {
    3c98:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3c9a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3c9e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3ca0:	itt	ne
    3ca2:	strbne	r1, [r6, r3]
    3ca4:	movne	r0, r3
				}
			} while (--avail > 0);
    3ca6:	ands.w	r2, r2, #255	; 0xff
    3caa:	bne.n	3c8e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3cac:	ldr	r3, [pc, #168]	; (3d58 <uart0_status_isr+0xf4>)
    3cae:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3cb0:	uxtb	r2, r0
    3cb2:	strb	r2, [r7, #0]
			if (rts_pin) {
    3cb4:	cbz	r3, 3cca <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3cb6:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3cb8:	itet	cc
    3cba:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3cbe:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3cc0:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3cc2:	cmp	r0, #39	; 0x27
    3cc4:	itt	gt
    3cc6:	movgt	r2, #1
    3cc8:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3cca:	ldr	r1, [pc, #124]	; (3d48 <uart0_status_isr+0xe4>)
    3ccc:	ldrb	r2, [r1, #3]
    3cce:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3cd0:	lsls	r5, r2, #24
    3cd2:	bmi.n	3d02 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3cd4:	lsls	r2, r2, #25
    3cd6:	bpl.n	3cf4 <uart0_status_isr+0x90>
    3cd8:	ldr	r3, [pc, #108]	; (3d48 <uart0_status_isr+0xe4>)
    3cda:	ldrb	r3, [r3, #4]
    3cdc:	lsls	r3, r3, #25
    3cde:	bpl.n	3cf4 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3ce0:	ldr	r3, [pc, #120]	; (3d5c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ce2:	ldr	r1, [pc, #124]	; (3d60 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3ce4:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ce6:	movs	r2, #0
    3ce8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3cea:	cbz	r3, 3cee <uart0_status_isr+0x8a>
    3cec:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3cee:	ldr	r3, [pc, #88]	; (3d48 <uart0_status_isr+0xe4>)
    3cf0:	movs	r2, #60	; 0x3c
    3cf2:	strb	r2, [r3, #3]
	}
}
    3cf4:	pop	{r4, r5, r6, r7}
    3cf6:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3cf8:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3cfa:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3cfc:	strb	r2, [r3, #17]
			__enable_irq();
    3cfe:	cpsie	i
    3d00:	b.n	3cca <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3d02:	ldrb	r3, [r1, #4]
    3d04:	lsls	r4, r3, #24
    3d06:	bpl.n	3cd4 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3d08:	ldr	r3, [pc, #88]	; (3d64 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3d0a:	ldr	r6, [pc, #92]	; (3d68 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d0c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3d0e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d10:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3d12:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3d14:	cmp	r4, r3
    3d16:	beq.n	3d36 <uart0_status_isr+0xd2>
    3d18:	ldr	r5, [pc, #80]	; (3d6c <uart0_status_isr+0x108>)
    3d1a:	b.n	3d20 <uart0_status_isr+0xbc>
    3d1c:	cmp	r3, r4
    3d1e:	beq.n	3d36 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3d20:	adds	r3, #1
    3d22:	cmp	r3, #64	; 0x40
    3d24:	it	cs
    3d26:	movcs	r3, #0
			avail = UART0_S1;
    3d28:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3d2a:	ldrb	r0, [r5, r3]
    3d2c:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3d2e:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3d30:	ldrb	r0, [r1, #20]
    3d32:	cmp	r0, #7
    3d34:	bls.n	3d1c <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3d36:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3d38:	ldr	r1, [pc, #12]	; (3d48 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3d3a:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3d3c:	ldrb	r3, [r1, #4]
    3d3e:	lsls	r0, r3, #24
    3d40:	itt	mi
    3d42:	movmi	r3, #124	; 0x7c
    3d44:	strbmi	r3, [r1, #3]
    3d46:	b.n	3cd4 <uart0_status_isr+0x70>
    3d48:	.word	0x4006a000
    3d4c:	.word	0x1fff1b1c
    3d50:	.word	0x1fff1b1d
    3d54:	.word	0x1fff1b60
    3d58:	.word	0x1fff1b18
    3d5c:	.word	0x1fff1ba4
    3d60:	.word	0x1fff1ba0
    3d64:	.word	0x1fff1ba8
    3d68:	.word	0x1fff1ba1
    3d6c:	.word	0x1fff1b20

00003d70 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d70:	ldr	r2, [pc, #20]	; (3d88 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3d72:	ldr	r3, [pc, #24]	; (3d8c <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d74:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3d76:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d78:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3d7a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3d7c:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3d7e:	it	cc
    3d80:	addcc	r0, #64	; 0x40
    3d82:	subs	r0, r0, r3
}
    3d84:	bx	lr
    3d86:	nop
    3d88:	.word	0x1fff1bb0
    3d8c:	.word	0x1fff1bb1

00003d90 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3d90:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3d92:	ldr	r3, [pc, #176]	; (3e44 <lpuart0_status_isr+0xb4>)
    3d94:	ldr	r2, [r3, #4]
    3d96:	lsls	r4, r2, #10
    3d98:	bpl.n	3dda <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3d9a:	ldr	r0, [pc, #172]	; (3e48 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3d9c:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3d9e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3da0:	ldr	r1, [pc, #168]	; (3e4c <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3da2:	adds	r3, #1
    3da4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3da6:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3da8:	it	gt
    3daa:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3dac:	cmp	r3, r1
    3dae:	beq.n	3dba <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3db0:	ldr	r4, [pc, #156]	; (3e50 <lpuart0_status_isr+0xc0>)
    3db2:	uxtb	r2, r2
			rx_buffer_head = head;
    3db4:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3db6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3db8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3dba:	ldr	r2, [pc, #152]	; (3e54 <lpuart0_status_isr+0xc4>)
    3dbc:	ldr	r1, [r2, #0]
    3dbe:	cbz	r1, 3dda <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3dc0:	ldr	r2, [pc, #148]	; (3e58 <lpuart0_status_isr+0xc8>)
    3dc2:	ldrb	r2, [r2, #0]
    3dc4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3dc6:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3dc8:	itet	cc
    3dca:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3dce:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3dd0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3dd2:	cmp	r3, #39	; 0x27
    3dd4:	itt	gt
    3dd6:	movgt	r3, #1
    3dd8:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3dda:	ldr	r2, [pc, #104]	; (3e44 <lpuart0_status_isr+0xb4>)
    3ddc:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3dde:	lsls	r0, r3, #8
    3de0:	bpl.n	3de8 <lpuart0_status_isr+0x58>
    3de2:	ldr	r2, [r2, #4]
    3de4:	lsls	r1, r2, #8
    3de6:	bmi.n	3e0c <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3de8:	lsls	r2, r3, #9
    3dea:	bpl.n	3e08 <lpuart0_status_isr+0x78>
    3dec:	ldr	r3, [pc, #84]	; (3e44 <lpuart0_status_isr+0xb4>)
    3dee:	ldr	r3, [r3, #4]
    3df0:	lsls	r3, r3, #9
    3df2:	bpl.n	3e08 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3df4:	ldr	r3, [pc, #100]	; (3e5c <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3df6:	ldr	r1, [pc, #104]	; (3e60 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3df8:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3dfa:	movs	r2, #0
    3dfc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3dfe:	cbz	r3, 3e02 <lpuart0_status_isr+0x72>
    3e00:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3e02:	ldr	r3, [pc, #96]	; (3e64 <lpuart0_status_isr+0xd4>)
    3e04:	movs	r2, #0
    3e06:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3e08:	pop	{r4, r5}
    3e0a:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3e0c:	ldr	r2, [pc, #88]	; (3e68 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3e0e:	ldr	r1, [pc, #72]	; (3e58 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3e10:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3e12:	ldrb	r2, [r1, #0]
    3e14:	uxtb	r2, r2
		if (head == tail) {
    3e16:	cmp	r0, r2
    3e18:	beq.n	3e36 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3e1a:	adds	r2, #1
    3e1c:	cmp	r2, #39	; 0x27
    3e1e:	itt	hi
    3e20:	movhi	r0, #0
    3e22:	movhi	r2, r0
			n = tx_buffer[tail];
    3e24:	ldr	r5, [pc, #68]	; (3e6c <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3e26:	ldr	r4, [pc, #28]	; (3e44 <lpuart0_status_isr+0xb4>)
    3e28:	it	ls
    3e2a:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3e2c:	ldrb	r2, [r5, r2]
    3e2e:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3e30:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3e32:	strb	r0, [r1, #0]
    3e34:	b.n	3de8 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e36:	ldr	r0, [pc, #56]	; (3e70 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e38:	ldr	r2, [pc, #40]	; (3e64 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e3a:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e3c:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e3e:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e40:	str	r1, [r2, #0]
    3e42:	b.n	3de8 <lpuart0_status_isr+0x58>
    3e44:	.word	0x400c4000
    3e48:	.word	0x1fff1bb0
    3e4c:	.word	0x1fff1bb1
    3e50:	.word	0x1fff1bdc
    3e54:	.word	0x1fff1bac
    3e58:	.word	0x1fff1c1d
    3e5c:	.word	0x1fff1c20
    3e60:	.word	0x1fff1c1c
    3e64:	.word	0x43880158
    3e68:	.word	0x1fff1c24
    3e6c:	.word	0x1fff1bb4
    3e70:	.word	0x4388015c

00003e74 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3e74:	push	{r4, lr}
    3e76:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3e78:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3e7a:	bl	3bdc <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3e7e:	ldr	r2, [pc, #96]	; (3ee0 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3e80:	ldr	r3, [pc, #96]	; (3ee4 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3e82:	ldr	r1, [pc, #100]	; (3ee8 <usb_init_serialnumber+0x74>)
    3e84:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3e86:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3e88:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3e8a:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3e8c:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3e8e:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3e90:	ldrb	r3, [r2, #0]
    3e92:	lsls	r3, r3, #24
    3e94:	bpl.n	3e90 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3e96:	ldr	r3, [pc, #84]	; (3eec <usb_init_serialnumber+0x78>)
    3e98:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3e9a:	bl	3c10 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3e9e:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3ea0:	ldr	r3, [pc, #76]	; (3ef0 <usb_init_serialnumber+0x7c>)
    3ea2:	cmp	r4, r3
    3ea4:	itt	ls
    3ea6:	addls.w	r4, r4, r4, lsl #2
    3eaa:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3eac:	mov	r0, r4
    3eae:	ldr	r4, [pc, #68]	; (3ef4 <usb_init_serialnumber+0x80>)
    3eb0:	add	r1, sp, #4
    3eb2:	movs	r2, #10
    3eb4:	bl	3ef8 <ultoa>
    3eb8:	add	r1, sp, #4
    3eba:	mov	r0, r4
	for (i=0; i<10; i++) {
    3ebc:	movs	r3, #0
		char c = buf[i];
    3ebe:	ldrb.w	r2, [r1], #1
    3ec2:	adds	r3, #1
		if (!c) break;
    3ec4:	cbz	r2, 3ed6 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3ec6:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3ec8:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3ecc:	bne.n	3ebe <usb_init_serialnumber+0x4a>
    3ece:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3ed0:	strb	r3, [r4, #0]
}
    3ed2:	add	sp, #16
    3ed4:	pop	{r4, pc}
    3ed6:	lsls	r3, r3, #1
    3ed8:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3eda:	strb	r3, [r4, #0]
}
    3edc:	add	sp, #16
    3ede:	pop	{r4, pc}
    3ee0:	.word	0x40020004
    3ee4:	.word	0x40020000
    3ee8:	.word	0x41070000
    3eec:	.word	0x4002000c
    3ef0:	.word	0x0098967f
    3ef4:	.word	0x1fff0d54

00003ef8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3ef8:	push	{r4, r5, r6, r7}
    3efa:	subs	r5, r1, #1
    3efc:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3efe:	movs	r4, #0
    3f00:	b.n	3f04 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3f02:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3f04:	udiv	r3, r0, r2
    3f08:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3f0c:	cmp	r0, #9
    3f0e:	add.w	r7, r0, #48	; 0x30
    3f12:	itet	hi
    3f14:	addhi	r0, #55	; 0x37
    3f16:	uxtbls	r0, r7
    3f18:	uxtbhi	r0, r0
    3f1a:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3f1e:	mov	r0, r3
    3f20:	cmp	r3, #0
    3f22:	bne.n	3f02 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3f24:	adds	r2, r1, r4
    3f26:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3f28:	cbz	r4, 3f3e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3f2a:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3f2c:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3f30:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f32:	adds	r3, #1
    3f34:	subs	r0, r4, r3
    3f36:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3f38:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f3c:	blt.n	3f2a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3f3e:	mov	r0, r1
    3f40:	pop	{r4, r5, r6, r7}
    3f42:	bx	lr

00003f44 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f44:	ldr	r2, [pc, #20]	; (3f5c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3f46:	ldr	r3, [pc, #24]	; (3f60 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f48:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3f4a:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f4c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3f4e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3f50:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3f52:	it	cc
    3f54:	addcc	r0, #64	; 0x40
    3f56:	subs	r0, r0, r3
}
    3f58:	bx	lr
    3f5a:	nop
    3f5c:	.word	0x1fff1c2c
    3f60:	.word	0x1fff1c2d

00003f64 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3f64:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3f66:	ldr	r3, [pc, #172]	; (4014 <uart2_status_isr+0xb0>)
    3f68:	ldrb	r2, [r3, #4]
    3f6a:	lsls	r4, r2, #26
    3f6c:	bpl.n	3fae <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3f6e:	ldr	r0, [pc, #168]	; (4018 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3f70:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3f72:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f74:	ldr	r1, [pc, #164]	; (401c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3f76:	adds	r3, #1
    3f78:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f7a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3f7c:	it	gt
    3f7e:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f80:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3f82:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f84:	beq.n	3f8e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3f86:	ldr	r4, [pc, #152]	; (4020 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3f88:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3f8a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3f8c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3f8e:	ldr	r2, [pc, #148]	; (4024 <uart2_status_isr+0xc0>)
    3f90:	ldr	r1, [r2, #0]
    3f92:	cbz	r1, 3fae <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3f94:	ldr	r2, [pc, #144]	; (4028 <uart2_status_isr+0xc4>)
    3f96:	ldrb	r2, [r2, #0]
    3f98:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3f9a:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3f9c:	itet	cc
    3f9e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3fa2:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3fa4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3fa6:	cmp	r3, #39	; 0x27
    3fa8:	itt	gt
    3faa:	movgt	r3, #1
    3fac:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3fae:	ldr	r2, [pc, #100]	; (4014 <uart2_status_isr+0xb0>)
    3fb0:	ldrb	r3, [r2, #3]
    3fb2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3fb4:	lsls	r0, r3, #24
    3fb6:	bmi.n	3fdc <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3fb8:	lsls	r2, r3, #25
    3fba:	bpl.n	3fd8 <uart2_status_isr+0x74>
    3fbc:	ldr	r3, [pc, #84]	; (4014 <uart2_status_isr+0xb0>)
    3fbe:	ldrb	r3, [r3, #4]
    3fc0:	lsls	r3, r3, #25
    3fc2:	bpl.n	3fd8 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3fc4:	ldr	r3, [pc, #100]	; (402c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3fc6:	ldr	r1, [pc, #104]	; (4030 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3fc8:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3fca:	movs	r2, #0
    3fcc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3fce:	cbz	r3, 3fd2 <uart2_status_isr+0x6e>
    3fd0:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3fd2:	ldr	r3, [pc, #64]	; (4014 <uart2_status_isr+0xb0>)
    3fd4:	movs	r2, #44	; 0x2c
    3fd6:	strb	r2, [r3, #3]
	}
}
    3fd8:	pop	{r4, r5}
    3fda:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3fdc:	ldrb	r1, [r2, #4]
    3fde:	lsls	r1, r1, #24
    3fe0:	bpl.n	3fb8 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3fe2:	ldr	r1, [pc, #80]	; (4034 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3fe4:	ldr	r0, [pc, #64]	; (4028 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3fe6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3fe8:	ldrb	r1, [r0, #0]
    3fea:	uxtb	r1, r1
		if (head == tail) {
    3fec:	cmp	r4, r1
    3fee:	beq.n	400c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3ff0:	adds	r2, r1, #1
    3ff2:	cmp	r2, #39	; 0x27
    3ff4:	itt	hi
    3ff6:	movhi	r1, #0
    3ff8:	movhi	r2, r1
			n = tx_buffer[tail];
    3ffa:	ldr	r5, [pc, #60]	; (4038 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3ffc:	ldr	r4, [pc, #20]	; (4014 <uart2_status_isr+0xb0>)
    3ffe:	it	ls
    4000:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4002:	ldrb	r2, [r5, r2]
    4004:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4006:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4008:	strb	r1, [r0, #0]
    400a:	b.n	3fb8 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    400c:	movs	r1, #108	; 0x6c
    400e:	strb	r1, [r2, #3]
    4010:	b.n	3fb8 <uart2_status_isr+0x54>
    4012:	nop
    4014:	.word	0x4006c000
    4018:	.word	0x1fff1c2c
    401c:	.word	0x1fff1c2d
    4020:	.word	0x1fff1c58
    4024:	.word	0x1fff1c28
    4028:	.word	0x1fff1c99
    402c:	.word	0x1fff1c9c
    4030:	.word	0x1fff1c98
    4034:	.word	0x1fff1ca0
    4038:	.word	0x1fff1c30

0000403c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    403c:	bx	lr
    403e:	nop

00004040 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4040:	bx	lr
    4042:	nop

00004044 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4044:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4046:	mrs	r2, PRIMASK
		__disable_irq();
    404a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    404c:	ldrb	r3, [r0, #29]
    404e:	cbnz	r3, 405e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4050:	ldrb	r1, [r0, #28]
    4052:	cmp	r1, #1
    4054:	beq.n	4068 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4056:	cmp	r1, #3
    4058:	beq.n	407c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    405a:	movs	r3, #1
    405c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    405e:	cbnz	r2, 4062 <EventResponder::triggerEventNotImmediate()+0x1e>
    4060:	cpsie	i
	}
	enableInterrupts(irq);
}
    4062:	ldr.w	r4, [sp], #4
    4066:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4068:	ldr	r4, [pc, #68]	; (40b0 <EventResponder::triggerEventNotImmediate()+0x6c>)
    406a:	ldr	r1, [r4, #0]
    406c:	cbz	r1, 4098 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    406e:	ldr	r1, [pc, #68]	; (40b4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4070:	str	r3, [r0, #20]
				_prev = lastYield;
    4072:	ldr	r3, [r1, #0]
    4074:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4076:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4078:	str	r0, [r3, #20]
    407a:	b.n	405a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    407c:	ldr	r4, [pc, #56]	; (40b8 <EventResponder::triggerEventNotImmediate()+0x74>)
    407e:	ldr	r1, [r4, #0]
    4080:	cbz	r1, 40a4 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4082:	ldr	r1, [pc, #56]	; (40bc <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4084:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4086:	ldr	r3, [r1, #0]
    4088:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    408a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    408c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    408e:	ldr	r3, [pc, #48]	; (40c0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4090:	mov.w	r1, #268435456	; 0x10000000
    4094:	str	r1, [r3, #0]
    4096:	b.n	405a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4098:	ldr	r3, [pc, #24]	; (40b4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    409a:	str	r1, [r0, #20]
				_prev = nullptr;
    409c:	str	r1, [r0, #24]
				firstYield = this;
    409e:	str	r0, [r4, #0]
				lastYield = this;
    40a0:	str	r0, [r3, #0]
    40a2:	b.n	405a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    40a4:	ldr	r3, [pc, #20]	; (40bc <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    40a6:	str	r1, [r0, #20]
				_prev = nullptr;
    40a8:	str	r1, [r0, #24]
				firstInterrupt = this;
    40aa:	str	r0, [r4, #0]
				lastInterrupt = this;
    40ac:	str	r0, [r3, #0]
    40ae:	b.n	408e <EventResponder::triggerEventNotImmediate()+0x4a>
    40b0:	.word	0x1fff1cb4
    40b4:	.word	0x1fff1cb0
    40b8:	.word	0x1fff1ca4
    40bc:	.word	0x1fff1ca8
    40c0:	.word	0xe000ed04

000040c4 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    40c4:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    40c6:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    40c8:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    40ca:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    40cc:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    40ce:	beq.n	40d8 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    40d0:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    40d4:	b.w	4044 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    40d8:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    40da:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    40de:	bx	r3

000040e0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    40e0:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    40e2:	mrs	r2, PRIMASK
		__disable_irq();
    40e6:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    40e8:	ldr	r4, [pc, #48]	; (411c <EventResponder::runFromInterrupt()+0x3c>)
    40ea:	ldr	r0, [r4, #0]
		if (first) {
    40ec:	cbz	r0, 4110 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    40ee:	ldr	r6, [pc, #48]	; (4120 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    40f0:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    40f2:	ldr	r3, [r0, #20]
    40f4:	str	r3, [r4, #0]
			if (firstInterrupt) {
    40f6:	cbz	r3, 4116 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    40f8:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    40fa:	cbnz	r2, 40fe <EventResponder::runFromInterrupt()+0x1e>
    40fc:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    40fe:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4100:	ldr	r3, [r0, #8]
    4102:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4104:	mrs	r2, PRIMASK
		__disable_irq();
    4108:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    410a:	ldr	r0, [r4, #0]
		if (first) {
    410c:	cmp	r0, #0
    410e:	bne.n	40f2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4110:	cbnz	r2, 4114 <EventResponder::runFromInterrupt()+0x34>
    4112:	cpsie	i
    4114:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4116:	str	r3, [r6, #0]
    4118:	b.n	40fa <EventResponder::runFromInterrupt()+0x1a>
    411a:	nop
    411c:	.word	0x1fff1ca4
    4120:	.word	0x1fff1ca8

00004124 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4124:	b.w	40e0 <EventResponder::runFromInterrupt()>

00004128 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4128:	ldr	r2, [pc, #96]	; (418c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    412a:	push	{r4, r5}
	if (listActive == nullptr) {
    412c:	ldr	r4, [r2, #0]
    412e:	cmp	r4, #0
    4130:	beq.n	4182 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4132:	ldr	r3, [r0, #0]
    4134:	ldr	r1, [r4, #0]
    4136:	cmp	r3, r1
    4138:	bcs.n	4158 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    413a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    413c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    413e:	str	r4, [r0, #8]
		_prev = nullptr;
    4140:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4142:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4144:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4146:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4148:	movs	r3, #2
    414a:	strb	r3, [r0, #20]
}
    414c:	pop	{r4, r5}
    414e:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4150:	ldr	r1, [r2, #0]
    4152:	cmp	r3, r1
    4154:	mov	r4, r2
    4156:	bcc.n	416a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4158:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    415a:	subs	r3, r3, r1
    415c:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    415e:	cmp	r2, #0
    4160:	bne.n	4150 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4162:	str	r2, [r0, #8]
		_prev = timer;
    4164:	str	r4, [r0, #12]
		timer->_next = this;
    4166:	str	r0, [r4, #8]
    4168:	b.n	4148 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    416a:	ldr	r2, [r2, #12]
    416c:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    416e:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4170:	str	r0, [r4, #12]
				_prev->_next = this;
    4172:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4174:	subs	r3, r1, r3
				_state = TimerActive;
    4176:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4178:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    417a:	str	r3, [r4, #0]
				_state = TimerActive;
    417c:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    417e:	pop	{r4, r5}
    4180:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4182:	str	r4, [r0, #8]
		_prev = nullptr;
    4184:	str	r4, [r0, #12]
		listActive = this;
    4186:	str	r0, [r2, #0]
    4188:	b.n	4148 <MillisTimer::addToActiveList()+0x20>
    418a:	nop
    418c:	.word	0x1fff1cac

00004190 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4190:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4192:	ldr	r6, [pc, #136]	; (421c <MillisTimer::runFromTimer()+0x8c>)
    4194:	ldr	r4, [r6, #0]
	while (timer) {
    4196:	cbz	r4, 41e4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4198:	ldr	r3, [r4, #0]
    419a:	cmp	r3, #0
    419c:	bne.n	4214 <MillisTimer::runFromTimer()+0x84>
    419e:	ldr	r7, [pc, #128]	; (4220 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    41a0:	mov	r5, r3
    41a2:	b.n	41ae <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    41a4:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    41a6:	cbz	r4, 41e4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    41a8:	ldr	r3, [r4, #0]
    41aa:	cmp	r3, #0
    41ac:	bne.n	4214 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    41ae:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    41b0:	cbz	r3, 41b4 <MillisTimer::runFromTimer()+0x24>
    41b2:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    41b4:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    41b6:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    41b8:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    41ba:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    41bc:	ldr	r3, [r3, #0]
    41be:	cmp	r3, r7
    41c0:	bne.n	4206 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    41c2:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    41c4:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    41c6:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    41c8:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    41ca:	beq.n	420e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    41cc:	bl	4044 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    41d0:	ldr	r3, [r4, #4]
    41d2:	cmp	r3, #0
    41d4:	beq.n	41a4 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    41d6:	str	r3, [r4, #0]
				timer->addToActiveList();
    41d8:	mov	r0, r4
    41da:	bl	4128 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    41de:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    41e0:	cmp	r4, #0
    41e2:	bne.n	41a8 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    41e4:	mrs	r3, PRIMASK
		__disable_irq();
    41e8:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    41ea:	ldr	r2, [pc, #56]	; (4224 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    41ec:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    41ee:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    41f0:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    41f2:	cbnz	r3, 41f6 <MillisTimer::runFromTimer()+0x66>
    41f4:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    41f6:	cbz	r0, 4204 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    41f8:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    41fa:	bl	4128 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    41fe:	mov	r0, r4
    4200:	cmp	r0, #0
    4202:	bne.n	41f8 <MillisTimer::runFromTimer()+0x68>
    4204:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4206:	mov	r2, r4
    4208:	movs	r1, #0
    420a:	blx	r3
    420c:	b.n	41d0 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    420e:	ldr	r3, [r0, #8]
    4210:	blx	r3
    4212:	b.n	41d0 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4214:	subs	r3, #1
    4216:	str	r3, [r4, #0]
			break;
    4218:	b.n	41e4 <MillisTimer::runFromTimer()+0x54>
    421a:	nop
    421c:	.word	0x1fff1cac
    4220:	.word	0x000040c5
    4224:	.word	0x1fff1cbc

00004228 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4228:	ldr	r2, [pc, #8]	; (4234 <systick_isr+0xc>)
    422a:	ldr	r3, [r2, #0]
    422c:	adds	r3, #1
    422e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4230:	b.w	4190 <MillisTimer::runFromTimer()>
    4234:	.word	0x1fff1844

00004238 <__errno>:
    4238:	ldr	r3, [pc, #4]	; (4240 <__errno+0x8>)
    423a:	ldr	r0, [r3, #0]
    423c:	bx	lr
    423e:	nop
    4240:	.word	0x1fff1198

00004244 <__libc_init_array>:
    4244:	push	{r4, r5, r6, lr}
    4246:	ldr	r6, [pc, #60]	; (4284 <__libc_init_array+0x40>)
    4248:	ldr	r5, [pc, #60]	; (4288 <__libc_init_array+0x44>)
    424a:	subs	r6, r6, r5
    424c:	asrs	r6, r6, #2
    424e:	it	ne
    4250:	movne	r4, #0
    4252:	beq.n	4260 <__libc_init_array+0x1c>
    4254:	adds	r4, #1
    4256:	ldr.w	r3, [r5], #4
    425a:	blx	r3
    425c:	cmp	r6, r4
    425e:	bne.n	4254 <__libc_init_array+0x10>
    4260:	ldr	r6, [pc, #40]	; (428c <__libc_init_array+0x48>)
    4262:	ldr	r5, [pc, #44]	; (4290 <__libc_init_array+0x4c>)
    4264:	subs	r6, r6, r5
    4266:	bl	4ee8 <_init>
    426a:	asrs	r6, r6, #2
    426c:	it	ne
    426e:	movne	r4, #0
    4270:	beq.n	4280 <__libc_init_array+0x3c>
    4272:	adds	r4, #1
    4274:	ldr.w	r3, [r5], #4
    4278:	blx	r3
    427a:	cmp	r6, r4
    427c:	bne.n	4272 <__libc_init_array+0x2e>
    427e:	pop	{r4, r5, r6, pc}
    4280:	pop	{r4, r5, r6, pc}
    4282:	nop
    4284:	.word	0x00004ef4
    4288:	.word	0x00004ef4
    428c:	.word	0x00004f00
    4290:	.word	0x00004ef4

00004294 <malloc>:
    4294:	ldr	r3, [pc, #8]	; (42a0 <malloc+0xc>)
    4296:	mov	r1, r0
    4298:	ldr	r0, [r3, #0]
    429a:	b.w	42a4 <_malloc_r>
    429e:	nop
    42a0:	.word	0x1fff1198

000042a4 <_malloc_r>:
    42a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42a8:	add.w	r5, r1, #11
    42ac:	cmp	r5, #22
    42ae:	sub	sp, #12
    42b0:	mov	r6, r0
    42b2:	bls.w	43f4 <_malloc_r+0x150>
    42b6:	bics.w	r5, r5, #7
    42ba:	bmi.w	443c <_malloc_r+0x198>
    42be:	cmp	r1, r5
    42c0:	bhi.w	443c <_malloc_r+0x198>
    42c4:	bl	4814 <__malloc_lock>
    42c8:	cmp.w	r5, #504	; 0x1f8
    42cc:	bcc.w	4808 <_malloc_r+0x564>
    42d0:	lsrs	r3, r5, #9
    42d2:	beq.w	444a <_malloc_r+0x1a6>
    42d6:	cmp	r3, #4
    42d8:	bhi.w	45e2 <_malloc_r+0x33e>
    42dc:	lsrs	r0, r5, #6
    42de:	add.w	lr, r0, #57	; 0x39
    42e2:	mov.w	r3, lr, lsl #1
    42e6:	adds	r0, #56	; 0x38
    42e8:	ldr	r7, [pc, #784]	; (45fc <_malloc_r+0x358>)
    42ea:	add.w	r3, r7, r3, lsl #2
    42ee:	sub.w	r1, r3, #8
    42f2:	ldr	r4, [r3, #4]
    42f4:	cmp	r1, r4
    42f6:	bne.n	4308 <_malloc_r+0x64>
    42f8:	b.n	4454 <_malloc_r+0x1b0>
    42fa:	cmp	r2, #0
    42fc:	bge.w	4458 <_malloc_r+0x1b4>
    4300:	ldr	r4, [r4, #12]
    4302:	cmp	r1, r4
    4304:	beq.w	4454 <_malloc_r+0x1b0>
    4308:	ldr	r3, [r4, #4]
    430a:	bic.w	r3, r3, #3
    430e:	subs	r2, r3, r5
    4310:	cmp	r2, #15
    4312:	ble.n	42fa <_malloc_r+0x56>
    4314:	ldr	r1, [pc, #740]	; (45fc <_malloc_r+0x358>)
    4316:	ldr	r4, [r7, #16]
    4318:	add.w	lr, r1, #8
    431c:	cmp	r4, lr
    431e:	beq.w	4688 <_malloc_r+0x3e4>
    4322:	ldr	r3, [r4, #4]
    4324:	bic.w	r3, r3, #3
    4328:	subs	r2, r3, r5
    432a:	cmp	r2, #15
    432c:	bgt.w	4662 <_malloc_r+0x3be>
    4330:	cmp	r2, #0
    4332:	str.w	lr, [r1, #20]
    4336:	str.w	lr, [r1, #16]
    433a:	bge.w	447a <_malloc_r+0x1d6>
    433e:	cmp.w	r3, #512	; 0x200
    4342:	bcs.w	4614 <_malloc_r+0x370>
    4346:	lsrs	r3, r3, #3
    4348:	add.w	ip, r3, #1
    434c:	movs	r2, #1
    434e:	asrs	r3, r3, #2
    4350:	lsl.w	r3, r2, r3
    4354:	ldr	r2, [r1, #4]
    4356:	ldr.w	r8, [r1, ip, lsl #3]
    435a:	str.w	r8, [r4, #8]
    435e:	add.w	r9, r1, ip, lsl #3
    4362:	orrs	r2, r3
    4364:	sub.w	r3, r9, #8
    4368:	str	r3, [r4, #12]
    436a:	str	r2, [r1, #4]
    436c:	str.w	r4, [r1, ip, lsl #3]
    4370:	str.w	r4, [r8, #12]
    4374:	asrs	r3, r0, #2
    4376:	movs	r4, #1
    4378:	lsls	r4, r3
    437a:	cmp	r4, r2
    437c:	bhi.w	4494 <_malloc_r+0x1f0>
    4380:	tst	r4, r2
    4382:	bne.n	4392 <_malloc_r+0xee>
    4384:	bic.w	r0, r0, #3
    4388:	lsls	r4, r4, #1
    438a:	tst	r4, r2
    438c:	add.w	r0, r0, #4
    4390:	beq.n	4388 <_malloc_r+0xe4>
    4392:	add.w	r9, r7, r0, lsl #3
    4396:	mov	ip, r9
    4398:	mov	r8, r0
    439a:	ldr.w	r1, [ip, #12]
    439e:	cmp	ip, r1
    43a0:	bne.n	43b2 <_malloc_r+0x10e>
    43a2:	b.n	468c <_malloc_r+0x3e8>
    43a4:	cmp	r2, #0
    43a6:	bge.w	46ac <_malloc_r+0x408>
    43aa:	ldr	r1, [r1, #12]
    43ac:	cmp	ip, r1
    43ae:	beq.w	468c <_malloc_r+0x3e8>
    43b2:	ldr	r3, [r1, #4]
    43b4:	bic.w	r3, r3, #3
    43b8:	subs	r2, r3, r5
    43ba:	cmp	r2, #15
    43bc:	ble.n	43a4 <_malloc_r+0x100>
    43be:	mov	r4, r1
    43c0:	ldr.w	ip, [r1, #12]
    43c4:	ldr.w	r8, [r4, #8]!
    43c8:	adds	r3, r1, r5
    43ca:	orr.w	r5, r5, #1
    43ce:	str	r5, [r1, #4]
    43d0:	orr.w	r1, r2, #1
    43d4:	str.w	ip, [r8, #12]
    43d8:	mov	r0, r6
    43da:	str.w	r8, [ip, #8]
    43de:	str	r3, [r7, #20]
    43e0:	str	r3, [r7, #16]
    43e2:	str.w	lr, [r3, #12]
    43e6:	str.w	lr, [r3, #8]
    43ea:	str	r1, [r3, #4]
    43ec:	str	r2, [r3, r2]
    43ee:	bl	4818 <__malloc_unlock>
    43f2:	b.n	4434 <_malloc_r+0x190>
    43f4:	cmp	r1, #16
    43f6:	bhi.n	443c <_malloc_r+0x198>
    43f8:	bl	4814 <__malloc_lock>
    43fc:	movs	r5, #16
    43fe:	movs	r3, #6
    4400:	movs	r0, #2
    4402:	ldr	r7, [pc, #504]	; (45fc <_malloc_r+0x358>)
    4404:	add.w	r3, r7, r3, lsl #2
    4408:	sub.w	r2, r3, #8
    440c:	ldr	r4, [r3, #4]
    440e:	cmp	r4, r2
    4410:	beq.w	469e <_malloc_r+0x3fa>
    4414:	ldr	r3, [r4, #4]
    4416:	ldr	r1, [r4, #12]
    4418:	ldr	r5, [r4, #8]
    441a:	bic.w	r3, r3, #3
    441e:	add	r3, r4
    4420:	mov	r0, r6
    4422:	ldr	r2, [r3, #4]
    4424:	str	r1, [r5, #12]
    4426:	orr.w	r2, r2, #1
    442a:	str	r5, [r1, #8]
    442c:	str	r2, [r3, #4]
    442e:	bl	4818 <__malloc_unlock>
    4432:	adds	r4, #8
    4434:	mov	r0, r4
    4436:	add	sp, #12
    4438:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    443c:	movs	r4, #0
    443e:	movs	r3, #12
    4440:	mov	r0, r4
    4442:	str	r3, [r6, #0]
    4444:	add	sp, #12
    4446:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    444a:	movs	r3, #128	; 0x80
    444c:	mov.w	lr, #64	; 0x40
    4450:	movs	r0, #63	; 0x3f
    4452:	b.n	42e8 <_malloc_r+0x44>
    4454:	mov	r0, lr
    4456:	b.n	4314 <_malloc_r+0x70>
    4458:	add	r3, r4
    445a:	ldr	r1, [r4, #12]
    445c:	ldr	r2, [r3, #4]
    445e:	ldr	r5, [r4, #8]
    4460:	orr.w	r2, r2, #1
    4464:	str	r1, [r5, #12]
    4466:	mov	r0, r6
    4468:	str	r5, [r1, #8]
    446a:	str	r2, [r3, #4]
    446c:	bl	4818 <__malloc_unlock>
    4470:	adds	r4, #8
    4472:	mov	r0, r4
    4474:	add	sp, #12
    4476:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    447a:	add	r3, r4
    447c:	mov	r0, r6
    447e:	ldr	r2, [r3, #4]
    4480:	orr.w	r2, r2, #1
    4484:	str	r2, [r3, #4]
    4486:	bl	4818 <__malloc_unlock>
    448a:	adds	r4, #8
    448c:	mov	r0, r4
    448e:	add	sp, #12
    4490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4494:	ldr	r4, [r7, #8]
    4496:	ldr	r3, [r4, #4]
    4498:	bic.w	r8, r3, #3
    449c:	cmp	r8, r5
    449e:	bcc.n	44aa <_malloc_r+0x206>
    44a0:	rsb	r3, r5, r8
    44a4:	cmp	r3, #15
    44a6:	bgt.w	45c2 <_malloc_r+0x31e>
    44aa:	ldr	r3, [pc, #340]	; (4600 <_malloc_r+0x35c>)
    44ac:	ldr.w	r9, [pc, #352]	; 4610 <_malloc_r+0x36c>
    44b0:	ldr	r2, [r3, #0]
    44b2:	ldr.w	r3, [r9]
    44b6:	adds	r3, #1
    44b8:	add	r2, r5
    44ba:	add.w	sl, r4, r8
    44be:	beq.w	4782 <_malloc_r+0x4de>
    44c2:	add.w	r2, r2, #4096	; 0x1000
    44c6:	adds	r2, #15
    44c8:	bic.w	r2, r2, #4080	; 0xff0
    44cc:	bic.w	r2, r2, #15
    44d0:	mov	r1, r2
    44d2:	mov	r0, r6
    44d4:	str	r2, [sp, #4]
    44d6:	bl	481c <_sbrk_r>
    44da:	cmp.w	r0, #4294967295
    44de:	mov	fp, r0
    44e0:	ldr	r2, [sp, #4]
    44e2:	beq.w	4796 <_malloc_r+0x4f2>
    44e6:	cmp	sl, r0
    44e8:	bhi.w	46e4 <_malloc_r+0x440>
    44ec:	ldr	r3, [pc, #276]	; (4604 <_malloc_r+0x360>)
    44ee:	ldr	r1, [r3, #0]
    44f0:	cmp	sl, fp
    44f2:	add	r1, r2
    44f4:	str	r1, [r3, #0]
    44f6:	beq.w	47a0 <_malloc_r+0x4fc>
    44fa:	ldr.w	r0, [r9]
    44fe:	ldr.w	lr, [pc, #272]	; 4610 <_malloc_r+0x36c>
    4502:	adds	r0, #1
    4504:	ittet	ne
    4506:	rsbne	sl, sl, fp
    450a:	addne	r1, sl
    450c:	streq.w	fp, [lr]
    4510:	strne	r1, [r3, #0]
    4512:	ands.w	r1, fp, #7
    4516:	beq.w	4748 <_malloc_r+0x4a4>
    451a:	rsb	r0, r1, #8
    451e:	rsb	r1, r1, #4096	; 0x1000
    4522:	add	fp, r0
    4524:	adds	r1, #8
    4526:	add	r2, fp
    4528:	ubfx	r2, r2, #0, #12
    452c:	rsb	r9, r2, r1
    4530:	mov	r1, r9
    4532:	mov	r0, r6
    4534:	str	r3, [sp, #4]
    4536:	bl	481c <_sbrk_r>
    453a:	adds	r3, r0, #1
    453c:	ldr	r3, [sp, #4]
    453e:	beq.w	47c0 <_malloc_r+0x51c>
    4542:	rsb	r2, fp, r0
    4546:	add	r2, r9
    4548:	orr.w	r2, r2, #1
    454c:	ldr	r1, [r3, #0]
    454e:	str.w	fp, [r7, #8]
    4552:	add	r1, r9
    4554:	cmp	r4, r7
    4556:	str.w	r2, [fp, #4]
    455a:	str	r1, [r3, #0]
    455c:	ldr.w	r9, [pc, #164]	; 4604 <_malloc_r+0x360>
    4560:	beq.n	4590 <_malloc_r+0x2ec>
    4562:	cmp.w	r8, #15
    4566:	bls.w	4764 <_malloc_r+0x4c0>
    456a:	ldr	r2, [r4, #4]
    456c:	sub.w	r3, r8, #12
    4570:	bic.w	r3, r3, #7
    4574:	adds	r0, r4, r3
    4576:	and.w	r2, r2, #1
    457a:	mov.w	lr, #5
    457e:	orrs	r2, r3
    4580:	cmp	r3, #15
    4582:	str	r2, [r4, #4]
    4584:	str.w	lr, [r0, #4]
    4588:	str.w	lr, [r0, #8]
    458c:	bhi.w	47c8 <_malloc_r+0x524>
    4590:	ldr	r3, [pc, #116]	; (4608 <_malloc_r+0x364>)
    4592:	ldr	r4, [r7, #8]
    4594:	ldr	r2, [r3, #0]
    4596:	cmp	r1, r2
    4598:	it	hi
    459a:	strhi	r1, [r3, #0]
    459c:	ldr	r3, [pc, #108]	; (460c <_malloc_r+0x368>)
    459e:	ldr	r2, [r3, #0]
    45a0:	cmp	r1, r2
    45a2:	ldr	r2, [r4, #4]
    45a4:	it	hi
    45a6:	strhi	r1, [r3, #0]
    45a8:	bic.w	r2, r2, #3
    45ac:	cmp	r5, r2
    45ae:	sub.w	r3, r2, r5
    45b2:	bhi.n	45b8 <_malloc_r+0x314>
    45b4:	cmp	r3, #15
    45b6:	bgt.n	45c2 <_malloc_r+0x31e>
    45b8:	mov	r0, r6
    45ba:	bl	4818 <__malloc_unlock>
    45be:	movs	r4, #0
    45c0:	b.n	4434 <_malloc_r+0x190>
    45c2:	adds	r2, r4, r5
    45c4:	orr.w	r3, r3, #1
    45c8:	orr.w	r5, r5, #1
    45cc:	str	r5, [r4, #4]
    45ce:	mov	r0, r6
    45d0:	str	r2, [r7, #8]
    45d2:	str	r3, [r2, #4]
    45d4:	bl	4818 <__malloc_unlock>
    45d8:	adds	r4, #8
    45da:	mov	r0, r4
    45dc:	add	sp, #12
    45de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45e2:	cmp	r3, #20
    45e4:	bls.n	46ca <_malloc_r+0x426>
    45e6:	cmp	r3, #84	; 0x54
    45e8:	bhi.w	4734 <_malloc_r+0x490>
    45ec:	lsrs	r0, r5, #12
    45ee:	add.w	lr, r0, #111	; 0x6f
    45f2:	mov.w	r3, lr, lsl #1
    45f6:	adds	r0, #110	; 0x6e
    45f8:	b.n	42e8 <_malloc_r+0x44>
    45fa:	nop
    45fc:	.word	0x1fff119c
    4600:	.word	0x1fff1cc8
    4604:	.word	0x1fff1ccc
    4608:	.word	0x1fff1cc4
    460c:	.word	0x1fff1cc0
    4610:	.word	0x1fff15a8
    4614:	lsrs	r2, r3, #9
    4616:	cmp	r2, #4
    4618:	bls.n	46d8 <_malloc_r+0x434>
    461a:	cmp	r2, #20
    461c:	bhi.w	4786 <_malloc_r+0x4e2>
    4620:	add.w	r1, r2, #92	; 0x5c
    4624:	lsls	r1, r1, #1
    4626:	adds	r2, #91	; 0x5b
    4628:	add.w	ip, r7, r1, lsl #2
    462c:	ldr.w	r1, [r7, r1, lsl #2]
    4630:	ldr.w	r8, [pc, #476]	; 4810 <_malloc_r+0x56c>
    4634:	sub.w	ip, ip, #8
    4638:	cmp	ip, r1
    463a:	beq.w	474e <_malloc_r+0x4aa>
    463e:	ldr	r2, [r1, #4]
    4640:	bic.w	r2, r2, #3
    4644:	cmp	r3, r2
    4646:	bcs.n	464e <_malloc_r+0x3aa>
    4648:	ldr	r1, [r1, #8]
    464a:	cmp	ip, r1
    464c:	bne.n	463e <_malloc_r+0x39a>
    464e:	ldr.w	ip, [r1, #12]
    4652:	ldr	r2, [r7, #4]
    4654:	str.w	ip, [r4, #12]
    4658:	str	r1, [r4, #8]
    465a:	str.w	r4, [ip, #8]
    465e:	str	r4, [r1, #12]
    4660:	b.n	4374 <_malloc_r+0xd0>
    4662:	adds	r3, r4, r5
    4664:	orr.w	r7, r2, #1
    4668:	orr.w	r5, r5, #1
    466c:	str	r5, [r4, #4]
    466e:	mov	r0, r6
    4670:	str	r3, [r1, #20]
    4672:	str	r3, [r1, #16]
    4674:	str.w	lr, [r3, #12]
    4678:	str.w	lr, [r3, #8]
    467c:	str	r7, [r3, #4]
    467e:	str	r2, [r3, r2]
    4680:	adds	r4, #8
    4682:	bl	4818 <__malloc_unlock>
    4686:	b.n	4434 <_malloc_r+0x190>
    4688:	ldr	r2, [r1, #4]
    468a:	b.n	4374 <_malloc_r+0xd0>
    468c:	add.w	r8, r8, #1
    4690:	tst.w	r8, #3
    4694:	add.w	ip, ip, #8
    4698:	bne.w	439a <_malloc_r+0xf6>
    469c:	b.n	4700 <_malloc_r+0x45c>
    469e:	ldr	r4, [r3, #12]
    46a0:	cmp	r3, r4
    46a2:	it	eq
    46a4:	addeq	r0, #2
    46a6:	beq.w	4314 <_malloc_r+0x70>
    46aa:	b.n	4414 <_malloc_r+0x170>
    46ac:	add	r3, r1
    46ae:	mov	r4, r1
    46b0:	ldr	r2, [r3, #4]
    46b2:	ldr	r1, [r1, #12]
    46b4:	ldr.w	r5, [r4, #8]!
    46b8:	orr.w	r2, r2, #1
    46bc:	str	r2, [r3, #4]
    46be:	mov	r0, r6
    46c0:	str	r1, [r5, #12]
    46c2:	str	r5, [r1, #8]
    46c4:	bl	4818 <__malloc_unlock>
    46c8:	b.n	4434 <_malloc_r+0x190>
    46ca:	add.w	lr, r3, #92	; 0x5c
    46ce:	add.w	r0, r3, #91	; 0x5b
    46d2:	mov.w	r3, lr, lsl #1
    46d6:	b.n	42e8 <_malloc_r+0x44>
    46d8:	lsrs	r2, r3, #6
    46da:	add.w	r1, r2, #57	; 0x39
    46de:	lsls	r1, r1, #1
    46e0:	adds	r2, #56	; 0x38
    46e2:	b.n	4628 <_malloc_r+0x384>
    46e4:	cmp	r4, r7
    46e6:	ldr	r3, [pc, #296]	; (4810 <_malloc_r+0x56c>)
    46e8:	beq.w	44ec <_malloc_r+0x248>
    46ec:	ldr	r4, [r3, #8]
    46ee:	ldr	r2, [r4, #4]
    46f0:	bic.w	r2, r2, #3
    46f4:	b.n	45ac <_malloc_r+0x308>
    46f6:	ldr.w	r3, [r9], #-8
    46fa:	cmp	r9, r3
    46fc:	bne.w	4804 <_malloc_r+0x560>
    4700:	tst.w	r0, #3
    4704:	add.w	r0, r0, #4294967295
    4708:	bne.n	46f6 <_malloc_r+0x452>
    470a:	ldr	r3, [r7, #4]
    470c:	bic.w	r3, r3, r4
    4710:	str	r3, [r7, #4]
    4712:	lsls	r4, r4, #1
    4714:	cmp	r4, r3
    4716:	bhi.w	4494 <_malloc_r+0x1f0>
    471a:	cmp	r4, #0
    471c:	beq.w	4494 <_malloc_r+0x1f0>
    4720:	tst	r4, r3
    4722:	mov	r0, r8
    4724:	bne.w	4392 <_malloc_r+0xee>
    4728:	lsls	r4, r4, #1
    472a:	tst	r4, r3
    472c:	add.w	r0, r0, #4
    4730:	beq.n	4728 <_malloc_r+0x484>
    4732:	b.n	4392 <_malloc_r+0xee>
    4734:	cmp.w	r3, #340	; 0x154
    4738:	bhi.n	476c <_malloc_r+0x4c8>
    473a:	lsrs	r0, r5, #15
    473c:	add.w	lr, r0, #120	; 0x78
    4740:	mov.w	r3, lr, lsl #1
    4744:	adds	r0, #119	; 0x77
    4746:	b.n	42e8 <_malloc_r+0x44>
    4748:	mov.w	r1, #4096	; 0x1000
    474c:	b.n	4526 <_malloc_r+0x282>
    474e:	movs	r1, #1
    4750:	ldr.w	r3, [r8, #4]
    4754:	asrs	r2, r2, #2
    4756:	lsl.w	r2, r1, r2
    475a:	orrs	r2, r3
    475c:	str.w	r2, [r8, #4]
    4760:	mov	r1, ip
    4762:	b.n	4654 <_malloc_r+0x3b0>
    4764:	movs	r3, #1
    4766:	str.w	r3, [fp, #4]
    476a:	b.n	45b8 <_malloc_r+0x314>
    476c:	movw	r2, #1364	; 0x554
    4770:	cmp	r3, r2
    4772:	bhi.n	47b6 <_malloc_r+0x512>
    4774:	lsrs	r0, r5, #18
    4776:	add.w	lr, r0, #125	; 0x7d
    477a:	mov.w	r3, lr, lsl #1
    477e:	adds	r0, #124	; 0x7c
    4780:	b.n	42e8 <_malloc_r+0x44>
    4782:	adds	r2, #16
    4784:	b.n	44d0 <_malloc_r+0x22c>
    4786:	cmp	r2, #84	; 0x54
    4788:	bhi.n	47d8 <_malloc_r+0x534>
    478a:	lsrs	r2, r3, #12
    478c:	add.w	r1, r2, #111	; 0x6f
    4790:	lsls	r1, r1, #1
    4792:	adds	r2, #110	; 0x6e
    4794:	b.n	4628 <_malloc_r+0x384>
    4796:	ldr	r4, [r7, #8]
    4798:	ldr	r2, [r4, #4]
    479a:	bic.w	r2, r2, #3
    479e:	b.n	45ac <_malloc_r+0x308>
    47a0:	ubfx	r0, sl, #0, #12
    47a4:	cmp	r0, #0
    47a6:	bne.w	44fa <_malloc_r+0x256>
    47aa:	add	r2, r8
    47ac:	ldr	r3, [r7, #8]
    47ae:	orr.w	r2, r2, #1
    47b2:	str	r2, [r3, #4]
    47b4:	b.n	4590 <_malloc_r+0x2ec>
    47b6:	movs	r3, #254	; 0xfe
    47b8:	mov.w	lr, #127	; 0x7f
    47bc:	movs	r0, #126	; 0x7e
    47be:	b.n	42e8 <_malloc_r+0x44>
    47c0:	movs	r2, #1
    47c2:	mov.w	r9, #0
    47c6:	b.n	454c <_malloc_r+0x2a8>
    47c8:	add.w	r1, r4, #8
    47cc:	mov	r0, r6
    47ce:	bl	4924 <_free_r>
    47d2:	ldr.w	r1, [r9]
    47d6:	b.n	4590 <_malloc_r+0x2ec>
    47d8:	cmp.w	r2, #340	; 0x154
    47dc:	bhi.n	47ea <_malloc_r+0x546>
    47de:	lsrs	r2, r3, #15
    47e0:	add.w	r1, r2, #120	; 0x78
    47e4:	lsls	r1, r1, #1
    47e6:	adds	r2, #119	; 0x77
    47e8:	b.n	4628 <_malloc_r+0x384>
    47ea:	movw	r1, #1364	; 0x554
    47ee:	cmp	r2, r1
    47f0:	bhi.n	47fe <_malloc_r+0x55a>
    47f2:	lsrs	r2, r3, #18
    47f4:	add.w	r1, r2, #125	; 0x7d
    47f8:	lsls	r1, r1, #1
    47fa:	adds	r2, #124	; 0x7c
    47fc:	b.n	4628 <_malloc_r+0x384>
    47fe:	movs	r1, #254	; 0xfe
    4800:	movs	r2, #126	; 0x7e
    4802:	b.n	4628 <_malloc_r+0x384>
    4804:	ldr	r3, [r7, #4]
    4806:	b.n	4712 <_malloc_r+0x46e>
    4808:	lsrs	r0, r5, #3
    480a:	adds	r3, r0, #1
    480c:	lsls	r3, r3, #1
    480e:	b.n	4402 <_malloc_r+0x15e>
    4810:	.word	0x1fff119c

00004814 <__malloc_lock>:
    4814:	bx	lr
    4816:	nop

00004818 <__malloc_unlock>:
    4818:	bx	lr
    481a:	nop

0000481c <_sbrk_r>:
    481c:	push	{r3, r4, r5, lr}
    481e:	ldr	r4, [pc, #28]	; (483c <_sbrk_r+0x20>)
    4820:	movs	r3, #0
    4822:	mov	r5, r0
    4824:	mov	r0, r1
    4826:	str	r3, [r4, #0]
    4828:	bl	3bb0 <_sbrk>
    482c:	adds	r3, r0, #1
    482e:	beq.n	4832 <_sbrk_r+0x16>
    4830:	pop	{r3, r4, r5, pc}
    4832:	ldr	r3, [r4, #0]
    4834:	cmp	r3, #0
    4836:	beq.n	4830 <_sbrk_r+0x14>
    4838:	str	r3, [r5, #0]
    483a:	pop	{r3, r4, r5, pc}
    483c:	.word	0x1fff1e38

00004840 <register_fini>:
    4840:	ldr	r3, [pc, #8]	; (484c <register_fini+0xc>)
    4842:	cbz	r3, 484a <register_fini+0xa>
    4844:	ldr	r0, [pc, #8]	; (4850 <register_fini+0x10>)
    4846:	b.w	4854 <atexit>
    484a:	bx	lr
    484c:	.word	0x00000000
    4850:	.word	0x00004861

00004854 <atexit>:
    4854:	movs	r3, #0
    4856:	mov	r1, r0
    4858:	mov	r2, r3
    485a:	mov	r0, r3
    485c:	b.w	4af4 <__register_exitproc>

00004860 <__libc_fini_array>:
    4860:	push	{r3, r4, r5, lr}
    4862:	ldr	r5, [pc, #28]	; (4880 <__libc_fini_array+0x20>)
    4864:	ldr	r4, [pc, #28]	; (4884 <__libc_fini_array+0x24>)
    4866:	subs	r4, r5, r4
    4868:	asrs	r4, r4, #2
    486a:	beq.n	4878 <__libc_fini_array+0x18>
    486c:	subs	r4, #1
    486e:	ldr.w	r3, [r5, #-4]!
    4872:	blx	r3
    4874:	cmp	r4, #0
    4876:	bne.n	486c <__libc_fini_array+0xc>
    4878:	ldmia.w	sp!, {r3, r4, r5, lr}
    487c:	b.w	4f00 <__init_array_end>
	...

00004888 <_malloc_trim_r>:
    4888:	push	{r3, r4, r5, r6, r7, lr}
    488a:	ldr	r7, [pc, #140]	; (4918 <_malloc_trim_r+0x90>)
    488c:	mov	r4, r1
    488e:	mov	r6, r0
    4890:	bl	4814 <__malloc_lock>
    4894:	ldr	r3, [r7, #8]
    4896:	ldr	r5, [r3, #4]
    4898:	bic.w	r5, r5, #3
    489c:	subs	r1, r5, r4
    489e:	addw	r1, r1, #4079	; 0xfef
    48a2:	bic.w	r1, r1, #4080	; 0xff0
    48a6:	bic.w	r1, r1, #15
    48aa:	sub.w	r4, r1, #4096	; 0x1000
    48ae:	cmp.w	r4, #4096	; 0x1000
    48b2:	blt.n	48c4 <_malloc_trim_r+0x3c>
    48b4:	movs	r1, #0
    48b6:	mov	r0, r6
    48b8:	bl	481c <_sbrk_r>
    48bc:	ldr	r3, [r7, #8]
    48be:	add	r3, r5
    48c0:	cmp	r0, r3
    48c2:	beq.n	48ce <_malloc_trim_r+0x46>
    48c4:	mov	r0, r6
    48c6:	bl	4818 <__malloc_unlock>
    48ca:	movs	r0, #0
    48cc:	pop	{r3, r4, r5, r6, r7, pc}
    48ce:	negs	r1, r4
    48d0:	mov	r0, r6
    48d2:	bl	481c <_sbrk_r>
    48d6:	adds	r0, #1
    48d8:	beq.n	48f6 <_malloc_trim_r+0x6e>
    48da:	ldr	r3, [pc, #64]	; (491c <_malloc_trim_r+0x94>)
    48dc:	ldr	r2, [r7, #8]
    48de:	ldr	r1, [r3, #0]
    48e0:	subs	r5, r5, r4
    48e2:	orr.w	r5, r5, #1
    48e6:	mov	r0, r6
    48e8:	subs	r1, r1, r4
    48ea:	str	r5, [r2, #4]
    48ec:	str	r1, [r3, #0]
    48ee:	bl	4818 <__malloc_unlock>
    48f2:	movs	r0, #1
    48f4:	pop	{r3, r4, r5, r6, r7, pc}
    48f6:	movs	r1, #0
    48f8:	mov	r0, r6
    48fa:	bl	481c <_sbrk_r>
    48fe:	ldr	r2, [r7, #8]
    4900:	subs	r3, r0, r2
    4902:	cmp	r3, #15
    4904:	ble.n	48c4 <_malloc_trim_r+0x3c>
    4906:	ldr	r4, [pc, #24]	; (4920 <_malloc_trim_r+0x98>)
    4908:	ldr	r1, [pc, #16]	; (491c <_malloc_trim_r+0x94>)
    490a:	ldr	r4, [r4, #0]
    490c:	orr.w	r3, r3, #1
    4910:	subs	r0, r0, r4
    4912:	str	r3, [r2, #4]
    4914:	str	r0, [r1, #0]
    4916:	b.n	48c4 <_malloc_trim_r+0x3c>
    4918:	.word	0x1fff119c
    491c:	.word	0x1fff1ccc
    4920:	.word	0x1fff15a8

00004924 <_free_r>:
    4924:	cmp	r1, #0
    4926:	beq.n	49b4 <_free_r+0x90>
    4928:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    492c:	mov	r5, r1
    492e:	mov	r8, r0
    4930:	bl	4814 <__malloc_lock>
    4934:	ldr.w	r7, [r5, #-4]
    4938:	ldr	r1, [pc, #424]	; (4ae4 <_free_r+0x1c0>)
    493a:	bic.w	r3, r7, #1
    493e:	sub.w	r4, r5, #8
    4942:	adds	r2, r4, r3
    4944:	ldr	r6, [r1, #8]
    4946:	ldr	r0, [r2, #4]
    4948:	cmp	r2, r6
    494a:	bic.w	r0, r0, #3
    494e:	beq.n	4a16 <_free_r+0xf2>
    4950:	lsls	r6, r7, #31
    4952:	str	r0, [r2, #4]
    4954:	bmi.n	496e <_free_r+0x4a>
    4956:	ldr.w	r7, [r5, #-8]
    495a:	subs	r4, r4, r7
    495c:	add.w	lr, r1, #8
    4960:	ldr	r5, [r4, #8]
    4962:	cmp	r5, lr
    4964:	add	r3, r7
    4966:	beq.n	4a48 <_free_r+0x124>
    4968:	ldr	r7, [r4, #12]
    496a:	str	r7, [r5, #12]
    496c:	str	r5, [r7, #8]
    496e:	adds	r5, r2, r0
    4970:	ldr	r5, [r5, #4]
    4972:	lsls	r5, r5, #31
    4974:	bpl.n	49fc <_free_r+0xd8>
    4976:	orr.w	r2, r3, #1
    497a:	str	r2, [r4, #4]
    497c:	str	r3, [r4, r3]
    497e:	cmp.w	r3, #512	; 0x200
    4982:	bcs.n	49b6 <_free_r+0x92>
    4984:	lsrs	r3, r3, #3
    4986:	adds	r2, r3, #1
    4988:	ldr	r5, [r1, #4]
    498a:	ldr.w	r7, [r1, r2, lsl #3]
    498e:	str	r7, [r4, #8]
    4990:	movs	r0, #1
    4992:	asrs	r3, r3, #2
    4994:	lsl.w	r3, r0, r3
    4998:	add.w	r0, r1, r2, lsl #3
    499c:	orrs	r5, r3
    499e:	subs	r0, #8
    49a0:	str	r0, [r4, #12]
    49a2:	str	r5, [r1, #4]
    49a4:	str.w	r4, [r1, r2, lsl #3]
    49a8:	str	r4, [r7, #12]
    49aa:	mov	r0, r8
    49ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    49b0:	b.w	4818 <__malloc_unlock>
    49b4:	bx	lr
    49b6:	lsrs	r2, r3, #9
    49b8:	cmp	r2, #4
    49ba:	bhi.n	4a64 <_free_r+0x140>
    49bc:	lsrs	r2, r3, #6
    49be:	add.w	r7, r2, #57	; 0x39
    49c2:	lsls	r7, r7, #1
    49c4:	add.w	r5, r2, #56	; 0x38
    49c8:	add.w	r0, r1, r7, lsl #2
    49cc:	ldr.w	r2, [r1, r7, lsl #2]
    49d0:	ldr	r1, [pc, #272]	; (4ae4 <_free_r+0x1c0>)
    49d2:	subs	r0, #8
    49d4:	cmp	r0, r2
    49d6:	beq.n	4a74 <_free_r+0x150>
    49d8:	ldr	r1, [r2, #4]
    49da:	bic.w	r1, r1, #3
    49de:	cmp	r3, r1
    49e0:	bcs.n	49e8 <_free_r+0xc4>
    49e2:	ldr	r2, [r2, #8]
    49e4:	cmp	r0, r2
    49e6:	bne.n	49d8 <_free_r+0xb4>
    49e8:	ldr	r0, [r2, #12]
    49ea:	str	r0, [r4, #12]
    49ec:	str	r2, [r4, #8]
    49ee:	str	r4, [r0, #8]
    49f0:	str	r4, [r2, #12]
    49f2:	mov	r0, r8
    49f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    49f8:	b.w	4818 <__malloc_unlock>
    49fc:	ldr	r5, [r2, #8]
    49fe:	ldr	r7, [pc, #232]	; (4ae8 <_free_r+0x1c4>)
    4a00:	cmp	r5, r7
    4a02:	add	r3, r0
    4a04:	beq.n	4a86 <_free_r+0x162>
    4a06:	ldr	r0, [r2, #12]
    4a08:	str	r0, [r5, #12]
    4a0a:	orr.w	r2, r3, #1
    4a0e:	str	r5, [r0, #8]
    4a10:	str	r2, [r4, #4]
    4a12:	str	r3, [r4, r3]
    4a14:	b.n	497e <_free_r+0x5a>
    4a16:	lsls	r7, r7, #31
    4a18:	add	r3, r0
    4a1a:	bmi.n	4a2c <_free_r+0x108>
    4a1c:	ldr.w	r2, [r5, #-8]
    4a20:	subs	r4, r4, r2
    4a22:	add	r3, r2
    4a24:	ldr	r0, [r4, #8]
    4a26:	ldr	r2, [r4, #12]
    4a28:	str	r2, [r0, #12]
    4a2a:	str	r0, [r2, #8]
    4a2c:	ldr	r2, [pc, #188]	; (4aec <_free_r+0x1c8>)
    4a2e:	ldr	r2, [r2, #0]
    4a30:	orr.w	r0, r3, #1
    4a34:	cmp	r3, r2
    4a36:	str	r0, [r4, #4]
    4a38:	str	r4, [r1, #8]
    4a3a:	bcc.n	49aa <_free_r+0x86>
    4a3c:	ldr	r3, [pc, #176]	; (4af0 <_free_r+0x1cc>)
    4a3e:	mov	r0, r8
    4a40:	ldr	r1, [r3, #0]
    4a42:	bl	4888 <_malloc_trim_r>
    4a46:	b.n	49aa <_free_r+0x86>
    4a48:	adds	r1, r2, r0
    4a4a:	ldr	r1, [r1, #4]
    4a4c:	lsls	r1, r1, #31
    4a4e:	bmi.n	4ada <_free_r+0x1b6>
    4a50:	ldr	r1, [r2, #8]
    4a52:	ldr	r2, [r2, #12]
    4a54:	str	r2, [r1, #12]
    4a56:	add	r3, r0
    4a58:	orr.w	r0, r3, #1
    4a5c:	str	r1, [r2, #8]
    4a5e:	str	r0, [r4, #4]
    4a60:	str	r3, [r4, r3]
    4a62:	b.n	49aa <_free_r+0x86>
    4a64:	cmp	r2, #20
    4a66:	bhi.n	4a98 <_free_r+0x174>
    4a68:	add.w	r7, r2, #92	; 0x5c
    4a6c:	lsls	r7, r7, #1
    4a6e:	add.w	r5, r2, #91	; 0x5b
    4a72:	b.n	49c8 <_free_r+0xa4>
    4a74:	asrs	r2, r5, #2
    4a76:	ldr	r3, [r1, #4]
    4a78:	movs	r5, #1
    4a7a:	lsl.w	r2, r5, r2
    4a7e:	orrs	r3, r2
    4a80:	str	r3, [r1, #4]
    4a82:	mov	r2, r0
    4a84:	b.n	49ea <_free_r+0xc6>
    4a86:	orr.w	r2, r3, #1
    4a8a:	str	r4, [r1, #20]
    4a8c:	str	r4, [r1, #16]
    4a8e:	str	r5, [r4, #12]
    4a90:	str	r5, [r4, #8]
    4a92:	str	r2, [r4, #4]
    4a94:	str	r3, [r4, r3]
    4a96:	b.n	49aa <_free_r+0x86>
    4a98:	cmp	r2, #84	; 0x54
    4a9a:	bhi.n	4aaa <_free_r+0x186>
    4a9c:	lsrs	r2, r3, #12
    4a9e:	add.w	r7, r2, #111	; 0x6f
    4aa2:	lsls	r7, r7, #1
    4aa4:	add.w	r5, r2, #110	; 0x6e
    4aa8:	b.n	49c8 <_free_r+0xa4>
    4aaa:	cmp.w	r2, #340	; 0x154
    4aae:	bhi.n	4abe <_free_r+0x19a>
    4ab0:	lsrs	r2, r3, #15
    4ab2:	add.w	r7, r2, #120	; 0x78
    4ab6:	lsls	r7, r7, #1
    4ab8:	add.w	r5, r2, #119	; 0x77
    4abc:	b.n	49c8 <_free_r+0xa4>
    4abe:	movw	r0, #1364	; 0x554
    4ac2:	cmp	r2, r0
    4ac4:	bhi.n	4ad4 <_free_r+0x1b0>
    4ac6:	lsrs	r2, r3, #18
    4ac8:	add.w	r7, r2, #125	; 0x7d
    4acc:	lsls	r7, r7, #1
    4ace:	add.w	r5, r2, #124	; 0x7c
    4ad2:	b.n	49c8 <_free_r+0xa4>
    4ad4:	movs	r7, #254	; 0xfe
    4ad6:	movs	r5, #126	; 0x7e
    4ad8:	b.n	49c8 <_free_r+0xa4>
    4ada:	orr.w	r2, r3, #1
    4ade:	str	r2, [r4, #4]
    4ae0:	str	r3, [r4, r3]
    4ae2:	b.n	49aa <_free_r+0x86>
    4ae4:	.word	0x1fff119c
    4ae8:	.word	0x1fff11a4
    4aec:	.word	0x1fff15a4
    4af0:	.word	0x1fff1cc8

00004af4 <__register_exitproc>:
    4af4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4af8:	ldr	r4, [pc, #148]	; (4b90 <__register_exitproc+0x9c>)
    4afa:	ldr	r5, [r4, #0]
    4afc:	ldr.w	r4, [r5, #328]	; 0x148
    4b00:	mov	r6, r0
    4b02:	mov	r8, r1
    4b04:	mov	sl, r2
    4b06:	mov	r9, r3
    4b08:	cbz	r4, 4b7c <__register_exitproc+0x88>
    4b0a:	ldr	r0, [r4, #4]
    4b0c:	cmp	r0, #31
    4b0e:	bgt.n	4b40 <__register_exitproc+0x4c>
    4b10:	adds	r3, r0, #1
    4b12:	cbz	r6, 4b32 <__register_exitproc+0x3e>
    4b14:	add.w	r5, r4, r0, lsl #2
    4b18:	movs	r2, #1
    4b1a:	str.w	sl, [r5, #136]	; 0x88
    4b1e:	ldr.w	r1, [r4, #392]	; 0x188
    4b22:	lsls	r2, r0
    4b24:	orrs	r1, r2
    4b26:	cmp	r6, #2
    4b28:	str.w	r1, [r4, #392]	; 0x188
    4b2c:	str.w	r9, [r5, #264]	; 0x108
    4b30:	beq.n	4b70 <__register_exitproc+0x7c>
    4b32:	adds	r0, #2
    4b34:	str	r3, [r4, #4]
    4b36:	str.w	r8, [r4, r0, lsl #2]
    4b3a:	movs	r0, #0
    4b3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b40:	ldr	r3, [pc, #80]	; (4b94 <__register_exitproc+0xa0>)
    4b42:	cbz	r3, 4b86 <__register_exitproc+0x92>
    4b44:	mov.w	r0, #400	; 0x190
    4b48:	bl	4294 <malloc>
    4b4c:	mov	r4, r0
    4b4e:	cbz	r0, 4b86 <__register_exitproc+0x92>
    4b50:	ldr.w	r3, [r5, #328]	; 0x148
    4b54:	movs	r7, #0
    4b56:	stmia.w	r0, {r3, r7}
    4b5a:	str.w	r4, [r5, #328]	; 0x148
    4b5e:	mov	r0, r7
    4b60:	movs	r3, #1
    4b62:	str.w	r7, [r4, #392]	; 0x188
    4b66:	str.w	r7, [r4, #396]	; 0x18c
    4b6a:	cmp	r6, #0
    4b6c:	beq.n	4b32 <__register_exitproc+0x3e>
    4b6e:	b.n	4b14 <__register_exitproc+0x20>
    4b70:	ldr.w	r1, [r4, #396]	; 0x18c
    4b74:	orrs	r2, r1
    4b76:	str.w	r2, [r4, #396]	; 0x18c
    4b7a:	b.n	4b32 <__register_exitproc+0x3e>
    4b7c:	add.w	r4, r5, #332	; 0x14c
    4b80:	str.w	r4, [r5, #328]	; 0x148
    4b84:	b.n	4b0a <__register_exitproc+0x16>
    4b86:	mov.w	r0, #4294967295
    4b8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b8e:	nop
    4b90:	.word	0x00004ee4
    4b94:	.word	0x00004295
    4b98:	.word	0x00000026
    4b9c:	.word	0x00000029
    4ba0:	.word	0x0000002d
    4ba4:	.word	0x00000033
    4ba8:	.word	0x00000064
    4bac:	.word	0x00000064
    4bb0:	.word	0x00000064
    4bb4:	.word	0x00000064
    4bb8:	.word	0x00000001
    4bbc:	.word	0x00000001
    4bc0:	.word	0x00000001
    4bc4:	.word	0x00000001
    4bc8:	.word	0x7370704f
    4bcc:	.word	0x6e61202c
    4bd0:	.word	0x6b6e7520
    4bd4:	.word	0x6e776f6e
    4bd8:	.word	0x44494d20
    4bdc:	.word	0x656d2049
    4be0:	.word	0x67617373
    4be4:	.word	0x79742065
    4be8:	.word	0x00216570
    4bec:	.word	0x4f4c4556
    4bf0:	.word	0x59544943
    4bf4:	.word	0x00000000
    4bf8:	.word	0x45544f4e
    4bfc:	.word	0x474e454c
    4c00:	.word	0x00004854
    4c04:	.word	0x43544950
    4c08:	.word	0x00000048
    4c0c:	.word	0x79616c50
    4c10:	.word	0x00000000

00004c14 <pin2sc1a>:
    4c14:	................
    4c24:	................
    4c34:	................
    4c44:	................
    4c54:	........

00004c5c <digital_pin_to_info_PGM>:
    4c5c:	@..C@..@D..CD..@
    4c6c:	...C...@0..C0..@
    4c7c:	4..C4..@...C...@
    4c8c:	...C...@...C...@
    4c9c:	...C...@...C...@
    4cac:	...C...@...C...@
    4cbc:	...C...@...C...@
    4ccc:	...C...@...C...@
    4cdc:	...C...@...C...@
    4cec:	...C...@...C...@
    4cfc:	...C...@...C...@
    4d0c:	...C...@...C...@
    4d1c:	h .Ch..@...C...@
    4d2c:	8..C8..@<..C<..@
    4d3c:	@..C@..@H..CH..@
    4d4c:	L..CL..@(..C(..@
    4d5c:	,..C,..@` .C`..@
    4d6c:	d .Cd..@ ..C ..@
    4d7c:	$..C$..@(..C(..@
    4d8c:	,..C,..@D..CD..@
    4d9c:	p..Cp..@t..Ct..@
    4dac:	h..Ch..@P..CP..@
    4dbc:	X..CX..@\..C\..@
    4dcc:	T..CT..@ ..C ..@
    4ddc:	$..C$..@...C...@
    4dec:	...C...@8..C8..@
    4dfc:	4..C4..@0..C0..@
    4e0c:	<..C<..@,..C,..@
    4e1c:	( .C(..@, .C,..@
    4e2c:	. .C...@. .C...@
    4e3c:	. .C...@. .C...@
    4e4c:	. .C...@. .C...@

00004e5c <vtable for usb_serial_class>:
	...
    4e64:	.7...7...7...7..
    4e74:	.7...7...7...7..
    4e84:	....

00004e88 <usb_endpoint_config_table>:
    4e88:	........

00004e90 <usb_descriptor_list>:
    4e90:	....t...........
    4ea0:	............P...
    4eb0:	................
    4ec0:	....8...........
    4ed0:	T...............
    4ee0:	....

00004ee4 <_global_impure_ptr>:
    4ee4:	p...

00004ee8 <_init>:
    4ee8:	push	{r3, r4, r5, r6, r7, lr}
    4eea:	nop
    4eec:	pop	{r3, r4, r5, r6, r7}
    4eee:	pop	{r3}
    4ef0:	mov	lr, r3
    4ef2:	bx	lr

00004ef4 <__init_array_start>:
    4ef4:	.word	0x00004841

00004ef8 <__frame_dummy_init_array_entry>:
    4ef8:	5.......

Disassembly of section .fini:

00004f00 <_fini>:
    4f00:	push	{r3, r4, r5, r6, r7, lr}
    4f02:	nop

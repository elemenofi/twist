
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0000598c l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00004638 l     F .text	0000000c startup_default_early_hook
00004644 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
00005984 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000022d8 l     F .text	000002e4 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff18e5 l     O .bss	00000001 tx_noautoflush
1fff18e8 l     O .bss	00000004 tx_packet
1fff18ec l     O .bss	00000001 transmit_previous_timeout
1fff18f0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00002890 l     F .text	00000144 wait_for_cal
1fff18f5 l     O .bss	00000001 analog_right_shift
1fff18f6 l     O .bss	00000001 calibrating
000056a0 l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff18f7 l     O .bss	00000001 analogReadBusyADC1
1fff18f8 l     O .bss	00000001 analogReadBusyADC0
1fff18f9 l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00002bb0 l     F .text	0000004c digitalWrite.part.1
00002bfc l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002edc l     F .text	00000048 sysex_byte
1fff1914 l     O .bss	00000001 tx_noautoflush
1fff1940 l     O .bss	00000004 tx_packet
1fff1944 l     O .bss	00000001 transmit_previous_timeout
1fff194c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1960 l     O .bss	00000004 ep0_tx_ptr
1fff1964 l     O .bss	00000014 rx_last
1fff1978 l     O .bss	00000002 ep0_tx_len
1fff197c l     O .bss	00000040 ep0_rx0_buf
1fff19bc l     O .bss	00000014 rx_first
1fff19d0 l     O .bss	00000001 ep0_tx_data_toggle
1fff19d4 l     O .bss	00000040 ep0_rx1_buf
1fff1a14 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1a28 l     O .bss	00000014 tx_last
1fff1a3c l     O .bss	00000008 setup
1fff1a44 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1a48 l     O .bss	00000008 reply_buffer
1fff1a54 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1a59 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1a5c l     O .bss	00000004 rts_pin
1fff1a60 l     O .bss	00000001 rx_buffer_head
1fff1a61 l     O .bss	00000001 rx_buffer_tail
1fff1a64 l     O .bss	00000028 tx_buffer
1fff1a8c l     O .bss	00000040 rx_buffer
1fff1acc l     O .bss	00000001 transmitting
1fff1acd l     O .bss	00000001 tx_buffer_tail
1fff1ad0 l     O .bss	00000004 transmit_pin
1fff1ad4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1ad8 l     O .bss	00000004 rts_pin
1fff1adc l     O .bss	00000001 transmitting
1fff1add l     O .bss	00000001 rx_buffer_tail
1fff1ae0 l     O .bss	00000028 tx_buffer
1fff1b08 l     O .bss	00000040 rx_buffer
1fff1b48 l     O .bss	00000001 rx_buffer_head
1fff1b49 l     O .bss	00000001 tx_buffer_tail
1fff1b4c l     O .bss	00000004 transmit_pin
1fff1b50 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1b54 l     O .bss	00000004 rts_pin
1fff1b58 l     O .bss	00000001 rx_buffer_head
1fff1b59 l     O .bss	00000001 rx_buffer_tail
1fff1b5c l     O .bss	00000028 tx_buffer
1fff1b84 l     O .bss	00000040 rx_buffer
1fff1bc4 l     O .bss	00000001 transmitting
1fff1bc5 l     O .bss	00000001 tx_buffer_tail
1fff1bc8 l     O .bss	00000004 transmit_pin
1fff1bcc l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1bd0 l     O .bss	00000004 rts_pin
1fff1bd4 l     O .bss	00000001 rx_buffer_head
1fff1bd5 l     O .bss	00000001 rx_buffer_tail
1fff1bd8 l     O .bss	00000040 tx_buffer
1fff1c18 l     O .bss	00000040 rx_buffer
1fff1c58 l     O .bss	00000001 transmitting
1fff1c59 l     O .bss	00000001 tx_buffer_tail
1fff1c5c l     O .bss	00000004 transmit_pin
1fff1c60 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1c64 l     O .bss	00000004 rts_pin
1fff1c68 l     O .bss	00000001 rx_buffer_head
1fff1c69 l     O .bss	00000001 rx_buffer_tail
1fff1c6c l     O .bss	00000028 tx_buffer
1fff1c94 l     O .bss	00000040 rx_buffer
1fff1cd4 l     O .bss	00000001 transmitting
1fff1cd5 l     O .bss	00000001 tx_buffer_tail
1fff1cd8 l     O .bss	00000004 transmit_pin
1fff1cdc l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1ce0 l     O .bss	00000004 rts_pin
1fff1ce4 l     O .bss	00000001 rx_buffer_head
1fff1ce5 l     O .bss	00000001 rx_buffer_tail
1fff1ce8 l     O .bss	00000028 tx_buffer
1fff1d10 l     O .bss	00000040 rx_buffer
1fff1d50 l     O .bss	00000001 transmitting
1fff1d51 l     O .bss	00000001 tx_buffer_tail
1fff1d54 l     O .bss	00000004 transmit_pin
1fff1d58 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000052d8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1ef4 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00004630  w    F .text	00000006 adc0_isr
00002634 g     F .text	0000001c usb_serial_available
000044f0 g     F .text	00000020 serial4_available
00004108  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
000046dc g     F .text	00000020 serial_available
1fff1918 g     O .bss	00000004 usb_midi_handleProgramChange
1fff175c g     O .bss	00000038 sequence
000045e8  w    F .text	00000048 hard_fault_isr
00004630  w    F .text	00000006 dma_ch6_isr
000041fc g     F .text	00000020 Print::println()
000043c4 g     F .text	00000020 serial2_available
00004630  w    F .text	00000006 uart0_lon_isr
0000351c g     F .text	000000e8 usb_rx_memory
000041cc  w    F .text	00000002 serialEvent5()
00004630  w    F .text	00000006 dma_ch8_isr
00004808 g     F .text	00000020 serial6_available
000052b0 g     F .text	00000002 __malloc_unlock
1fff192c g     O .bss	00000004 usb_midi_handleAfterTouch
000029d4 g     F .text	000000e0 analog_init
00003604 g     F .text	00000084 usb_tx
00004630  w    F .text	00000006 portcd_isr
1fff193c g     O .bss	00000004 usb_midi_handleSysExComplete
00004c28 g     F .text	00000098 MillisTimer::runFromTimer()
00004630  w    F .text	00000006 can1_rx_warn_isr
00005990 g       .fini	00000000 __exidx_end
00004630  w    F .text	00000006 dma_error_isr
1fff1db8 g     O .bss	00000001 usb_midi_msg_type
1fff1d70 g     O .bss	00000001 EventResponder::runningFromYield
00004630  w    F .text	00000006 i2c0_isr
00004cd0 g     F .text	0000000c __errno
00004630  w    F .text	00000006 portd_isr
00004630  w    F .text	00000006 enet_error_isr
1fff1d5c g     O .bss	00000004 EventResponder::firstInterrupt
00004630  w    F .text	00000006 tpm1_isr
000041e8  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000056e8 g     O .text	00000200 digital_pin_to_info_PGM
1fff1ef0 g     O .bss	00000004 errno
00005990 g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
000042c4  w    F .text	00000002 serialEvent6()
1fff1928 g     O .bss	00000004 usb_midi_handleVelocityChange
00002ca4 g     F .text	0000001c digitalRead
00004630  w    F .text	00000006 porte_isr
000007e0 g     F .text	00001af8 loop
00004630  w    F .text	00000006 portb_isr
1fff17bc g     O .bss	00000014 step3
00002fc0 g     F .text	0000002c usb_midi_flush_output
00004630  w    F .text	00000006 spi1_isr
00004510 g     F .text	000000d8 uart3_status_isr
00004ad4  w    F .text	00000002 serialEvent1()
1fff18cc g     O .bss	00000018 led4
00004630  w    F .text	00000006 mcm_isr
00004bc0 g     F .text	00000068 MillisTimer::addToActiveList()
00002fec g     F .text	0000043c usb_midi_read
1fff1904 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1d60 g     O .bss	00000004 EventResponder::lastInterrupt
000043e4 g     F .text	0000010c uart1_status_isr
1fff1dba g     O .bss	00000002 usb_midi_msg_sysex_len
00004630  w    F .text	00000006 randnum_isr
1fff190c g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff18fc g     O .bss	00000004 systick_millis_count
000045e8  w    F .text	00000048 bus_fault_isr
00004630  w    F .text	00000006 watchdog_isr
00004630  w    F .text	00000006 i2c1_isr
1fff1a50 g     O .bss	00000001 usb_configuration
00004630  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
000042ac  w    F .text	00000002 serialEvent2()
00004630  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1ee4 g     O .bss	0000000a usb_rx_byte_count_data
00004630  w    F .text	00000006 pit1_isr
00004d2c g     F .text	00000010 malloc
00004630  w    F .text	00000006 dma_ch4_isr
00004630  w    F .text	00000006 software_isr
00004630  w    F .text	00000006 dma_ch7_isr
00004b5c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00004038 g     F .text	000000d0 usb_init
00004630  w    F .text	00000006 lptmr_isr
1fff1d80 g     O .bss	00000004 __malloc_top_pad
00002c74 g     F .text	00000024 rtc_set
1fff16ec g     O .bss	00000038 button5
1fff16b4 g     O .bss	00000038 button4
1fff0c40 g       .data	00000000 _sdata
1fff195c g     O .bss	00000004 usb_midi_handleNoteOn
000046a8 g     F .text	00000034 kinetis_hsrun_enable
000052b4 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
000025bc g     F .text	00000048 usb_serial_getchar
00004630  w    F .text	00000006 can1_bus_off_isr
00004630  w    F .text	00000006 ftm2_isr
1fff1dac g     O .bss	00000008 usb_cdc_line_coding
00002c98 g     F .text	0000000a digitalWrite
00004630  w    F .text	00000006 uart5_status_isr
00004828 g     F .text	000000e4 lpuart0_status_isr
1fff1d68 g     O .bss	00000004 EventResponder::lastYield
00005914 g     O .text	00000005 usb_endpoint_config_table
00004630  w    F .text	00000006 dma_ch9_isr
00004630  w    F .text	00000006 pit2_isr
000049dc g     F .text	00000020 serial3_available
1fff17d0 g     O .bss	00000014 step4
1fff1d7c g     O .bss	00000004 __malloc_max_sbrked_mem
00002cc0 g     F .text	0000000a pinMode
00003468 g     F .text	0000004c usb_free
00004630  w    F .text	00000006 i2c3_isr
1fff1884 g     O .bss	00000018 led1
1fff1924 g     O .bss	00000004 usb_midi_handleSysExPartial
00005990 g       .fini	00000000 __exidx_start
00004630  w    F .text	00000006 pit0_isr
1fff1dbc g     O .bss	00000001 usb_midi_msg_data1
1fff1d6c g     O .bss	00000004 EventResponder::firstYield
00005970 g     O .text	00000004 _global_impure_ptr
00004630  w    F .text	00000006 can1_error_isr
00004cdc g     F .text	00000050 __libc_init_array
1fff1ef4 g       .bss	00000000 __bss_end
00004630  w    F .text	00000006 can0_wakeup_isr
00004630  w    F .text	00000006 flash_cmd_isr
1fff1854 g     O .bss	0000001c knob5
000041d0  w    F .text	00000004 usb_serial_class::clear()
000049fc g     F .text	000000d8 uart2_status_isr
00004648 g     F .text	0000002c _sbrk
1fff1d74 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff18f4 g     O .bss	00000001 usb_cdc_line_rtsdtr
00002848 g     F .text	00000048 usb_serial_flush_callback
00005974 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
00004630  w    F .text	00000006 svcall_isr
00004630  w    F .text	00000006 dma_ch15_isr
00004630  w    F .text	00000006 uart1_error_isr
000052f8 g     F .text	00000028 __libc_fini_array
00004630  w    F .text	00000006 usbhs_phy_isr
1fff1ef4 g       .bss	00000000 _ebss
00004630 g     F .text	00000006 unused_isr
00004630  w    F .text	00000006 spi0_isr
00004630  w    F .text	00000006 dma_ch3_isr
00004630  w    F .text	00000006 flash_error_isr
1fff1800 g     O .bss	0000001c knob2
000042cc g     F .text	00000020 serial5_available
00004630  w    F .text	00000006 uart5_error_isr
00004630  w    F .text	00000006 rtc_seconds_isr
00004630  w    F .text	00000006 pdb_isr
000045e8  w    F .text	00000048 usage_fault_isr
00004630  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00004630  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1db4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff1870 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
00004cc0 g     F .text	00000010 systick_isr
00004630  w    F .text	00000006 rtc_alarm_isr
00004630  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
00004630  w    F .text	00000006 ftm1_isr
000041f0  w    F .text	00000006 usb_serial_class::write(unsigned char)
00004638  w    F .text	0000000c startup_early_hook
00004630  w    F .text	00000006 dma_ch13_isr
00004630  w    F .text	00000006 uart2_error_isr
00002604 g     F .text	00000030 usb_serial_peekchar
00000490  w    F .text	00000034 Led::blink(int)
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
000045e8 g     F .text	00000048 fault_isr
000053bc g     F .text	000001d0 _free_r
1fff1948 g     O .bss	00000004 usb_midi_handleStop
00004630  w    F .text	00000006 usb_charge_isr
000041e0  w    F .text	00000004 usb_serial_class::flush()
00004630  w    F .text	00000006 cmt_isr
00004630  w    F .text	00000006 usbhs_isr
1fff1958 g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
000041d8  w    F .text	00000004 usb_serial_class::read()
00004630  w    F .text	00000006 ftm3_isr
00004630  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff17e4 g     O .bss	0000001c knob1
00004630  w    F .text	00000006 spi2_isr
000042b0  w    F .text	00000002 serialEvent4()
000041f8  w    F .text	00000002 serialEvent()
1fff19d1 g     O .bss	00000001 usb_reboot_timer
0000558c g     F .text	000000a4 __register_exitproc
00002650 g     F .text	00000038 usb_serial_flush_input
00002790 g     F .text	00000018 usb_serial_putchar
1fff1d84 g     O .bss	00000028 __malloc_current_mallinfo
00004630  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff1a45 g     O .bss	00000001 usb_rx_memory_needed
00003688 g     F .text	000009b0 usb_isr
1fff1794 g     O .bss	00000014 step1
1fff1954 g     O .bss	00000004 usb_midi_handleNoteOff
000058e8  w    O .text	00000028 vtable for usb_serial_class
1fff181c g     O .bss	0000001c knob3
00004630  w    F .text	00000006 uart3_error_isr
1fff1d64 g     O .bss	00000004 MillisTimer::listActive
00004630  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00004630  w    F .text	00000006 low_voltage_isr
1fff1644 g     O .bss	00000038 button2
1fff11ac g     O .data	00000408 __malloc_av_
00004630  w    F .text	00000006 can0_error_isr
00002d70 g     F .text	0000016c _init_Teensyduino_internal_
000027f0 g     F .text	00000058 usb_serial_flush_output
00004630  w    F .text	00000006 dma_ch12_isr
000052ac g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00004630  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00004630  w    F .text	00000006 pit3_isr
00004630  w    F .text	00000006 enet_rx_isr
00004630  w    F .text	00000006 portc_isr
000042b4 g     F .text	00000010 main
1fff1d78 g     O .bss	00000004 __malloc_max_total_mem
1fff18b4 g     O .bss	00000018 led3
000045e8  w    F .text	00000048 memmanage_fault_isr
0000490c g     F .text	00000084 usb_init_serialnumber
1fff1880 g     O .bss	00000001 currentMode
0000598c g       .text	00000000 __init_array_end
00004d3c g     F .text	00000570 _malloc_r
00004630  w    F .text	00000006 debugmonitor_isr
1fff1920 g     O .bss	00000004 usb_midi_handleSongPosition
00004adc g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1910 g     O .bss	00000004 usb_midi_handleContinue
1fff1dbd g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00004630  w    F .text	00000006 cmp1_isr
1fff167c g     O .bss	00000038 button3
00004630  w    F .text	00000006 ftm0_isr
00005320 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
00002688 g     F .text	00000108 usb_serial_write
00004644  w    F .text	00000002 startup_late_hook
000041dc  w    F .text	00000004 usb_serial_class::available()
1fff1dbe g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
000004c4  w    F .text	00000318 Button::check()
00002ccc g     F .text	000000a4 delay
00004630  w    F .text	00000006 tpm0_isr
0000598c g     F .fini	00000000 _fini
1fff17a8 g     O .bss	00000014 step2
00004630  w    F .text	00000006 i2s0_rx_isr
00004630  w    F .text	00000006 uart4_error_isr
0000429c g     F .text	00000010 Print::print(long)
00002f24 g     F .text	0000009c usb_midi_write_packed
000052ec g     F .text	0000000c atexit
00004630  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
00004630  w    F .text	00000006 can1_message_isr
00004630  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1938 g     O .bss	00000004 usb_midi_handleTuneRequest
00005980 g       .text	00000000 __preinit_array_end
00004630  w    F .text	00000006 sdhc_isr
1fff1dbf g     O .bss	00000001 usb_midi_msg_channel
000007dc g     F .text	00000002 setup
0000591c g     O .text	00000054 usb_descriptor_list
000034b4 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1838 g     O .bss	0000001c knob4
00004630  w    F .text	00000006 dma_ch10_isr
1fff1930 g     O .bss	00000004 usb_midi_handleStart
00004630  w    F .text	00000006 uart0_error_isr
00003428 g     F .text	00000040 usb_malloc
00004630  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
000027a8 g     F .text	00000048 usb_serial_write_buffer_free
00004630  w    F .text	00000006 enet_timer_isr
1fff1724 g     O .bss	00000038 button6
1fff160c g     O .bss	00000038 button1
1fff15bc g       .data	00000000 _edata
00004630  w    F .text	00000006 i2s0_tx_isr
00004630  w    F .text	00000006 adc1_isr
000041e4  w    F .text	00000004 usb_serial_class::availableForWrite()
00004630  w    F .text	00000006 cmp0_isr
1fff1900 g     O .bss	00000004 usb_midi_handleClock
00004990 g     F .text	0000004c ultoa
000042c8 g     F .text	00000004 operator new(unsigned int)
00004b78 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
000041d4  w    F .text	00000004 usb_serial_class::peek()
1fff18e4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff191c g     O .bss	00000004 usb_midi_handlePitchChange
00004630  w    F .text	00000006 pit_isr
1fff1934 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00004630  w    F .text	00000006 dac0_isr
00005980 g       .text	00000000 __init_array_start
00004630  w    F .text	00000006 can1_tx_warn_isr
00002ab4 g     F .text	000000fc analogRead
1fff1dc0 g     O .bss	00000122 usb_midi_msg_sysex
000046fc g     F .text	0000010c uart0_status_isr
00004630  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
00004630  w    F .text	00000006 dma_ch1_isr
000034f0 g     F .text	0000002c usb_tx_packet_count
00004630  w    F .text	00000006 dma_ch5_isr
00004630  w    F .text	00000006 can0_rx_warn_isr
00004630  w    F .text	00000006 can0_tx_warn_isr
000042ec g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00004674 g     F .text	00000034 kinetis_hsrun_disable
00005980 g       .text	00000000 __preinit_array_start
00004ad8  w    F .text	00000002 serialEvent3()
1fff1950 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff189c g     O .bss	00000018 led2
00004630  w    F .text	00000006 cmp2_isr
00004bbc g     F .text	00000004 pendablesrvreq_isr
00004630  w    F .text	00000006 wakeup_isr
00004630  w    F .text	00000006 cmp3_isr
0000421c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
1fff1908 g     O .bss	00000004 usb_midi_handleActiveSensing
00004630  w    F .text	00000006 tpm2_isr
00004630  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
00004630  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... ....1F...E..
      10:	.E...E...E...E..
      20:	.E...E...E..1F..
      30:	1F...E...K...L..
      40:	1F..1F..1F..1F..
      50:	1F..1F..1F..1F..
      60:	1F..1F..1F..1F..
      70:	1F..1F..1F..1F..
      80:	1F..1F..1F..1F..
      90:	1F..1F..1F..1F..
      a0:	1F..1F..1F..1F..
      b0:	1F..1F..1F...F..
      c0:	1F...C..1F...I..
      d0:	1F...E..1F..1F..
      e0:	1F..1F..1F..1F..
      f0:	1F..1F..1F..1F..
     100:	1F..1F..1F..1F..
     110:	1F...6..1F..1F..
     120:	1F..1F..1F..1F..
     130:	1F..1F..1F..1F..
     140:	1F..1F...B..1F..
     150:	1F..1F..1F..1F..
     160:	1F..1F..1F..1F..
     170:	1F..1F..1F..1F..
     180:	1F..1F..1F..1F..
     190:	1F..1F..)H..1F..
     1a0:	1F..1F..1F..1F..
     1b0:	1F..1F..1F..1F..
     1c0:	1F..1F..1F..1F..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	4638 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	2d70 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2c74 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2c74 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4cdc <__libc_init_array>

	startup_late_hook();
     33a:	bl	4644 <startup_late_hook>
	main();
     33e:	bl	42b4 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x0000598c
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1ef4
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x00005990

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x00005990
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #75	; 0x4b
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	2cc0 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	2c98 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <Led::blink(int)>:

    void blink (int times = 0) {
     490:	push	{r4, r5, r6, lr}
      digitalWrite(m_pin, !digitalRead(m_pin));
     492:	ldrb	r5, [r0, #0]

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     494:	sub	sp, #8
     496:	mov	r4, r0
      digitalWrite(m_pin, !digitalRead(m_pin));
     498:	mov	r0, r5

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     49a:	mov	r6, r1
      digitalWrite(m_pin, !digitalRead(m_pin));
     49c:	bl	2ca4 <digitalRead>
     4a0:	clz	r1, r0
     4a4:	lsrs	r1, r1, #5
     4a6:	mov	r0, r5
     4a8:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ac:	ldr	r3, [pc, #16]	; (4c0 <Led::blink(int)+0x30>)
      blinking = true;
      blinkingCounter = times;
     4ae:	str	r6, [r4, #20]
     4b0:	ldr	r3, [r3, #0]
     4b2:	str	r3, [sp, #4]
	return ret;
     4b4:	ldr	r3, [sp, #4]
      lastBlink = millis();  
     4b6:	str	r3, [r4, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     4b8:	movs	r2, #1
     4ba:	strb	r2, [r4, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    };
     4bc:	add	sp, #8
     4be:	pop	{r4, r5, r6, pc}
     4c0:	.word	0x1fff18fc

000004c4 <Button::check()>:

    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
     4c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4c8:	mov	r4, r0
     4ca:	sub	sp, #60	; 0x3c
      current = digitalRead(m_pin);
     4cc:	ldrb.w	r0, [r0, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4d0:	ldr	r6, [pc, #676]	; (778 <Button::check()+0x2b4>)
     4d2:	bl	2ca4 <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     4d6:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     4d8:	mov	r5, r0
     4da:	str	r0, [r4, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     4dc:	ldrb.w	r7, [r4, #36]	; 0x24
     4e0:	beq.n	5b0 <Button::check()+0xec>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     4e2:	cmp	r7, r5
     4e4:	beq.n	5ac <Button::check()+0xe8>
     4e6:	ldr	r3, [r6, #0]
     4e8:	str	r3, [sp, #32]
	return ret;
     4ea:	ldr	r3, [sp, #32]
        m_lastDebounceTime = millis();
     4ec:	str	r3, [r4, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ee:	ldr	r2, [r6, #0]
     4f0:	str	r2, [sp, #28]
	return ret;
     4f2:	ldr	r2, [sp, #28]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4f4:	ldr	r7, [pc, #640]	; (778 <Button::check()+0x2b4>)
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     4f6:	cmp	r2, r3
     4f8:	beq.n	512 <Button::check()+0x4e>
        // and the current changed
        if (current != m_state) {
     4fa:	ldr	r3, [r4, #4]
     4fc:	cmp	r5, r3
     4fe:	beq.n	512 <Button::check()+0x4e>
     500:	ldr	r3, [r7, #0]
     502:	str	r3, [sp, #36]	; 0x24
	return ret;
     504:	ldr	r3, [sp, #36]	; 0x24
     506:	ldr	r1, [r4, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     508:	ldr	r2, [r4, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     50a:	str	r5, [r4, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     50c:	subs	r3, r3, r1
     50e:	cmp	r2, r3
     510:	bhi.n	556 <Button::check()+0x92>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     512:	cbnz	r5, 51c <Button::check()+0x58>
     514:	ldrb.w	r3, [r4, #36]	; 0x24
     518:	cmp	r3, #1
     51a:	beq.n	526 <Button::check()+0x62>
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     51c:	strb.w	r5, [r4, #36]	; 0x24
    };
     520:	add	sp, #60	; 0x3c
     522:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     526:	ldr	r3, [r6, #0]
     528:	str	r3, [sp, #40]	; 0x28
	return ret;
     52a:	ldr	r3, [sp, #40]	; 0x28
     52c:	ldr	r1, [r4, #40]	; 0x28

      if (debounced && timeSincePress() < m_holdThreshold) {
        onPress();
      }
 
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
     52e:	ldr	r2, [r4, #48]	; 0x30
     530:	subs	r3, r3, r1
     532:	cmp	r2, r3
     534:	bhi.n	51c <Button::check()+0x58>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     536:	movs	r1, #9
     538:	ldr	r0, [pc, #576]	; (77c <Button::check()+0x2b8>)
     53a:	bl	2688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     53e:	ldr	r0, [pc, #576]	; (780 <Button::check()+0x2bc>)
     540:	bl	41fc <Print::println()>
    void enterShiftMode () {
      m_shiftMode = true;
    };

    void exitShiftMode () {
      m_shiftMode = false;
     544:	ldr	r3, [r4, #28]
     546:	strb.w	r5, [r3, #46]	; 0x2e
     54a:	ldr	r5, [r4, #32]
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     54c:	strb.w	r5, [r4, #36]	; 0x24
    };
     550:	add	sp, #60	; 0x3c
     552:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     556:	ldr	r3, [r4, #28]
     558:	ldr	r0, [pc, #552]	; (784 <Button::check()+0x2c0>)
     55a:	ldr	r5, [r3, #52]	; 0x34
     55c:	movs	r1, #7
     55e:	bl	2688 <usb_serial_write>
     562:	ldr	r0, [pc, #540]	; (780 <Button::check()+0x2bc>)
     564:	bl	41fc <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     568:	ldr	r1, [r4, #0]
     56a:	ldr	r0, [pc, #532]	; (780 <Button::check()+0x2bc>)
     56c:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     570:	ldr	r0, [pc, #524]	; (780 <Button::check()+0x2bc>)
     572:	bl	41fc <Print::println()>
      Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     576:	ldr	r3, [r4, #4]
     578:	cmp	r3, #0
     57a:	bne.n	676 <Button::check()+0x1b2>
     57c:	ldrb	r3, [r4, #16]
     57e:	cmp	r3, #0
     580:	beq.w	68e <Button::check()+0x1ca>
        if (m_sequence.getShiftMode()) {
     584:	ldr.w	r8, [r4, #28]
     588:	ldrb.w	r3, [r8, #46]	; 0x2e
     58c:	cmp	r3, #0
     58e:	beq.w	716 <Button::check()+0x252>
    void nextPage () {
      if (m_page < 4) m_page++;
    };

    void previousPage () {
      if (m_page > 1) m_page--;
     592:	ldr	r1, [r5, #4]
     594:	cmp	r1, #1
     596:	ble.n	59c <Button::check()+0xd8>
     598:	subs	r1, #1
     59a:	str	r1, [r5, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     59c:	ldr	r0, [pc, #480]	; (780 <Button::check()+0x2bc>)
     59e:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     5a2:	ldr	r0, [pc, #476]	; (780 <Button::check()+0x2bc>)
     5a4:	bl	41fc <Print::println()>
     5a8:	ldr	r5, [r4, #32]
     5aa:	b.n	512 <Button::check()+0x4e>
     5ac:	ldr	r3, [r4, #20]
     5ae:	b.n	4ee <Button::check()+0x2a>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     5b0:	cbnz	r7, 600 <Button::check()+0x13c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5b2:	ldr	r3, [r6, #0]
     5b4:	str	r3, [sp, #20]
     5b6:	ldr	r2, [r4, #40]	; 0x28
	return ret;
     5b8:	ldr	r3, [sp, #20]
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
     5ba:	subs	r3, r3, r2
     5bc:	cmp	r3, #200	; 0xc8
     5be:	bls.n	4e6 <Button::check()+0x22>
        firstTime = millis();
        m_led.blink();
     5c0:	ldr.w	r8, [r4, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5c4:	ldr	r3, [r6, #0]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     5c6:	ldrb.w	r9, [r8]
     5ca:	str	r3, [sp, #12]
	return ret;
     5cc:	ldr	r3, [sp, #12]
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
     5ce:	str	r3, [r4, #40]	; 0x28
     5d0:	mov	r0, r9
     5d2:	bl	2ca4 <digitalRead>
     5d6:	clz	r1, r0
     5da:	lsrs	r1, r1, #5
     5dc:	mov	r0, r9
     5de:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5e2:	ldr	r3, [r6, #0]
      blinking = true;
      blinkingCounter = times;
     5e4:	str.w	r7, [r8, #20]
     5e8:	str	r3, [sp, #44]	; 0x2c
     5ea:	ldr	r3, [r4, #32]
	return ret;
     5ec:	ldr	r2, [sp, #44]	; 0x2c
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     5ee:	strb.w	r5, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
     5f2:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
     5f6:	cmp	r3, #1
     5f8:	ldrb.w	r7, [r4, #36]	; 0x24
     5fc:	bne.w	7ce <Button::check()+0x30a>
     600:	cmp	r7, #1
     602:	bne.w	4e2 <Button::check()+0x1e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     606:	ldr	r3, [r6, #0]
     608:	str	r3, [sp, #24]
	return ret;
     60a:	ldr	r3, [sp, #24]
     60c:	ldr	r1, [r4, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
     60e:	ldr	r2, [r4, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     610:	ldr	r0, [pc, #356]	; (778 <Button::check()+0x2b4>)
     612:	subs	r3, r3, r1
     614:	cmp	r2, r3
     616:	bcs.n	5ac <Button::check()+0xe8>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
     618:	ldr	r3, [r4, #28]
     61a:	ldr	r2, [r0, #0]
     61c:	str	r2, [sp, #16]
     61e:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
     622:	ldr	r1, [sp, #16]
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
     624:	str	r1, [r4, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
     626:	cbz	r2, 67a <Button::check()+0x1b6>
      Serial.println("Inited Sequence");
      Serial.println(m_paginator->getPage());
    };

    void enterShiftMode () {
      m_shiftMode = true;
     628:	movs	r2, #1
     62a:	strb.w	r2, [r3, #46]	; 0x2e
     62e:	ldrb.w	r7, [r4, #36]	; 0x24
     632:	b.n	4e2 <Button::check()+0x1e>
     634:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
     636:	mov.w	r9, #1
     63a:	ldr	r0, [pc, #332]	; (788 <Button::check()+0x2c4>)
     63c:	strb.w	r9, [r5]
     640:	bl	2688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     644:	ldr	r0, [pc, #312]	; (780 <Button::check()+0x2bc>)
     646:	bl	41fc <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
     64a:	ldr.w	r5, [r8, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     64e:	ldrb.w	r8, [r5]
     652:	mov	r0, r8
     654:	bl	2ca4 <digitalRead>
     658:	clz	r1, r0
     65c:	lsrs	r1, r1, #5
     65e:	mov	r0, r8
     660:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     664:	ldr	r3, [r7, #0]
     666:	str	r3, [sp, #48]	; 0x30
      blinking = true;
      blinkingCounter = times;
     668:	movw	r3, #999	; 0x3e7
     66c:	str	r3, [r5, #20]
	return ret;
     66e:	ldr	r3, [sp, #48]	; 0x30
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     670:	strb.w	r9, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
     674:	str	r3, [r5, #8]
     676:	ldr	r5, [r4, #32]
     678:	b.n	512 <Button::check()+0x4e>
     67a:	movs	r1, #6
     67c:	ldr	r0, [pc, #268]	; (78c <Button::check()+0x2c8>)
     67e:	bl	2688 <usb_serial_write>
     682:	ldr	r0, [pc, #252]	; (780 <Button::check()+0x2bc>)
     684:	bl	41fc <Print::println()>
     688:	ldr	r3, [r4, #28]
     68a:	ldr	r5, [r4, #32]
     68c:	b.n	628 <Button::check()+0x164>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
     68e:	ldrb	r3, [r4, #17]
     690:	cbz	r3, 6a6 <Button::check()+0x1e2>
     692:	ldr	r3, [r4, #28]
        if (m_sequence.getShiftMode()) {
     694:	ldrb.w	r3, [r3, #46]	; 0x2e
     698:	cbz	r3, 6e0 <Button::check()+0x21c>
    int getPage () {
      return m_page;
    }

    void nextPage () {
      if (m_page < 4) m_page++;
     69a:	ldr	r1, [r5, #4]
     69c:	cmp	r1, #3
     69e:	itt	le
     6a0:	addle	r1, #1
     6a2:	strle	r1, [r5, #4]
     6a4:	b.n	59c <Button::check()+0xd8>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
     6a6:	ldr	r5, [r4, #24]
    };

    void toggle () {
      m_state = !m_state;
     6a8:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     6aa:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     6ac:	clz	r1, r1
     6b0:	lsrs	r1, r1, #5
     6b2:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     6b4:	bl	2c98 <digitalWrite>

      if (blinking) {
     6b8:	ldrb	r3, [r5, #16]
     6ba:	cbnz	r3, 6d0 <Button::check()+0x20c>
        m_sequence.m_steps[m_id - 1]->toggle();
     6bc:	ldr	r3, [r4, #28]
     6be:	ldr	r2, [r4, #0]
     6c0:	ldr	r5, [r4, #32]
     6c2:	ldr.w	r2, [r3, r2, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
     6c6:	ldrb	r3, [r2, #4]
     6c8:	eor.w	r3, r3, #1
     6cc:	strb	r3, [r2, #4]
     6ce:	b.n	512 <Button::check()+0x4e>
        digitalWrite(m_pin, !m_state);
     6d0:	ldr	r1, [r5, #4]
     6d2:	ldrb	r0, [r5, #0]
     6d4:	clz	r1, r1
     6d8:	lsrs	r1, r1, #5
     6da:	bl	2c98 <digitalWrite>
     6de:	b.n	6bc <Button::check()+0x1f8>
      } else if (m_state == LOW && m_reverseButton) {
        if (m_sequence.getShiftMode()) {
          paginator->nextPage();
          Serial.println(paginator->getPage());
        } else {
          m_led.toggle();
     6e0:	ldr	r5, [r4, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     6e2:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     6e4:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     6e6:	clz	r1, r1
     6ea:	lsrs	r1, r1, #5
     6ec:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     6ee:	bl	2c98 <digitalWrite>

      if (blinking) {
     6f2:	ldrb	r3, [r5, #16]
     6f4:	cbz	r3, 704 <Button::check()+0x240>
        digitalWrite(m_pin, !m_state);
     6f6:	ldr	r1, [r5, #4]
     6f8:	ldrb	r0, [r5, #0]
     6fa:	clz	r1, r1
     6fe:	lsrs	r1, r1, #5
     700:	bl	2c98 <digitalWrite>
     704:	ldr	r2, [r4, #28]
     706:	ldr	r5, [r4, #32]
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
     708:	ldrb.w	r3, [r2, #45]	; 0x2d
     70c:	eor.w	r3, r3, #1
     710:	strb.w	r3, [r2, #45]	; 0x2d
     714:	b.n	512 <Button::check()+0x4e>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
     716:	ldr	r5, [pc, #120]	; (790 <Button::check()+0x2cc>)
     718:	ldrb	r2, [r5, #0]
     71a:	cmp	r2, #0
     71c:	beq.n	634 <Button::check()+0x170>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
     71e:	cmp	r2, #1
     720:	beq.n	798 <Button::check()+0x2d4>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
     722:	cmp	r2, #2
     724:	bne.n	676 <Button::check()+0x1b2>
     726:	movs	r1, #5
     728:	ldr	r0, [pc, #104]	; (794 <Button::check()+0x2d0>)
        currentMode = PITCH;
     72a:	strb	r3, [r5, #0]
     72c:	str	r3, [sp, #4]
     72e:	bl	2688 <usb_serial_write>
     732:	ldr	r0, [pc, #76]	; (780 <Button::check()+0x2bc>)
     734:	bl	41fc <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
     738:	ldr.w	r5, [r8, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     73c:	ldrb.w	r9, [r5]
     740:	mov	r0, r9
     742:	bl	2ca4 <digitalRead>
     746:	clz	r1, r0
     74a:	lsrs	r1, r1, #5
     74c:	mov	r0, r9
     74e:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     752:	ldr	r2, [r7, #0]
     754:	str	r2, [sp, #52]	; 0x34
      blinking = true;
      blinkingCounter = times;
     756:	ldr	r3, [sp, #4]
        m_leds[4]->on();
     758:	ldr.w	r2, [r8, #36]	; 0x24
	return ret;
     75c:	ldr	r1, [sp, #52]	; 0x34
     75e:	str	r3, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     760:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
     762:	str	r1, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     764:	strb	r0, [r5, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
     766:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
     768:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
     76a:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
     76c:	ldrb	r0, [r2, #0]
     76e:	bl	2c98 <digitalWrite>
     772:	ldr	r5, [r4, #32]
     774:	b.n	512 <Button::check()+0x4e>
     776:	nop
     778:	.word	0x1fff18fc
     77c:	.word	0x00005660
     780:	.word	0x1fff0c70
     784:	.word	0x00005638
     788:	.word	0x00005640
     78c:	.word	0x00005630
     790:	.word	0x1fff1880
     794:	.word	0x00005658
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
     798:	movs	r2, #2
     79a:	movs	r1, #10
     79c:	ldr	r0, [pc, #52]	; (7d4 <Button::check()+0x310>)
     79e:	strb	r2, [r5, #0]
     7a0:	str	r3, [sp, #4]
     7a2:	bl	2688 <usb_serial_write>
     7a6:	ldr	r0, [pc, #48]	; (7d8 <Button::check()+0x314>)
     7a8:	bl	41fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
     7ac:	ldr	r3, [sp, #4]
     7ae:	ldr.w	r0, [r8, #36]	; 0x24
     7b2:	mov	r1, r3
     7b4:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
     7b8:	ldr.w	r2, [r8, #36]	; 0x24
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
     7bc:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
     7be:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
     7c0:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
     7c2:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
     7c4:	ldrb	r0, [r2, #0]
     7c6:	bl	2c98 <digitalWrite>
     7ca:	ldr	r5, [r4, #32]
     7cc:	b.n	512 <Button::check()+0x4e>
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
     7ce:	mov	r5, r3
     7d0:	b.n	4e2 <Button::check()+0x1e>
     7d2:	nop
     7d4:	.word	0x0000564c
     7d8:	.word	0x1fff0c70

000007dc <setup>:
Knob knob3(A2, sequence, transport, THIRD, 2);
Knob knob4(A3, sequence, transport, FOURTH, 3);
Knob knob5(A4, sequence, transport, FIFTH, 4);
// implement a scale knob that transposes the sequencer

void setup() {
     7dc:	bx	lr
     7de:	nop

000007e0 <loop>:
  Serial.begin(9600);
}

void loop() {
     7e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     7e4:	movs	r0, #0
     7e6:	sub	sp, #336	; 0x150
     7e8:	bl	2fec <usb_midi_read>
  if (usbMIDI.read()) {
     7ec:	cmp	r0, #0
     7ee:	bne.w	128a <loop+0xaaa>
     7f2:	ldr	r4, [pc, #684]	; (aa0 <loop+0x2c0>)
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     7f4:	ldr	r5, [pc, #684]	; (aa4 <loop+0x2c4>)
     7f6:	ldrb.w	r0, [r5, #52]	; 0x34
     7fa:	bl	2ca4 <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     7fe:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     800:	mov	r7, r0
     802:	str	r0, [r5, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     804:	ldrb.w	r6, [r5, #36]	; 0x24
     808:	beq.w	12b4 <loop+0xad4>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     80c:	cmp	r7, r6
     80e:	beq.w	124c <loop+0xa6c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     812:	ldr	r3, [r4, #0]
     814:	str	r3, [sp, #232]	; 0xe8
	return ret;
     816:	ldr	r3, [sp, #232]	; 0xe8
        m_lastDebounceTime = millis();
     818:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     81a:	ldr	r2, [r4, #0]
     81c:	str	r2, [sp, #228]	; 0xe4
	return ret;
     81e:	ldr	r2, [sp, #228]	; 0xe4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     820:	ldr.w	r8, [pc, #636]	; aa0 <loop+0x2c0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     824:	cmp	r2, r3
     826:	beq.n	846 <loop+0x66>
        // and the current changed
        if (current != m_state) {
     828:	ldr	r3, [r5, #4]
     82a:	ldr	r6, [pc, #632]	; (aa4 <loop+0x2c4>)
     82c:	cmp	r7, r3
     82e:	beq.n	846 <loop+0x66>
     830:	ldr.w	r3, [r8]
     834:	str	r3, [sp, #224]	; 0xe0
	return ret;
     836:	ldr	r3, [sp, #224]	; 0xe0
     838:	ldr	r1, [r6, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     83a:	ldr	r2, [r6, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     83c:	str	r7, [r6, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     83e:	subs	r3, r3, r1
     840:	cmp	r3, r2
     842:	bcc.w	10e0 <loop+0x900>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     846:	cbnz	r7, 854 <loop+0x74>
     848:	ldrb.w	r3, [r5, #36]	; 0x24
     84c:	ldr	r6, [pc, #596]	; (aa4 <loop+0x2c4>)
     84e:	cmp	r3, #1
     850:	beq.w	ec2 <loop+0x6e2>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     854:	ldr	r6, [pc, #592]	; (aa8 <loop+0x2c8>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     856:	strb.w	r7, [r5, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     85a:	ldrb.w	r0, [r6, #52]	; 0x34
     85e:	bl	2ca4 <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     862:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     864:	mov	r7, r0
     866:	str	r0, [r6, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     868:	ldrb.w	r5, [r6, #36]	; 0x24
     86c:	beq.w	13e6 <loop+0xc06>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     870:	cmp	r5, r7
     872:	beq.w	1284 <loop+0xaa4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     876:	ldr	r3, [r4, #0]
     878:	str	r3, [sp, #200]	; 0xc8
	return ret;
     87a:	ldr	r3, [sp, #200]	; 0xc8
        m_lastDebounceTime = millis();
     87c:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     87e:	ldr	r2, [r4, #0]
     880:	str	r2, [sp, #196]	; 0xc4
	return ret;
     882:	ldr	r2, [sp, #196]	; 0xc4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     884:	ldr.w	r8, [pc, #536]	; aa0 <loop+0x2c0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     888:	cmp	r2, r3
     88a:	beq.n	8aa <loop+0xca>
        // and the current changed
        if (current != m_state) {
     88c:	ldr	r3, [r6, #4]
     88e:	ldr	r5, [pc, #536]	; (aa8 <loop+0x2c8>)
     890:	cmp	r7, r3
     892:	beq.n	8aa <loop+0xca>
     894:	ldr.w	r3, [r8]
     898:	str	r3, [sp, #192]	; 0xc0
	return ret;
     89a:	ldr	r3, [sp, #192]	; 0xc0
     89c:	ldr	r1, [r5, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     89e:	ldr	r2, [r5, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     8a0:	str	r7, [r5, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     8a2:	subs	r3, r3, r1
     8a4:	cmp	r3, r2
     8a6:	bcc.w	1038 <loop+0x858>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     8aa:	cbnz	r7, 8b8 <loop+0xd8>
     8ac:	ldrb.w	r3, [r6, #36]	; 0x24
     8b0:	ldr	r5, [pc, #500]	; (aa8 <loop+0x2c8>)
     8b2:	cmp	r3, #1
     8b4:	beq.w	eec <loop+0x70c>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     8b8:	ldr	r5, [pc, #496]	; (aac <loop+0x2cc>)
    transport.processMidi();
  }
  
  button1.check();
  button2.check();
  button3.check();
     8ba:	ldr	r0, [pc, #500]	; (ab0 <loop+0x2d0>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     8bc:	strb.w	r7, [r6, #36]	; 0x24
     8c0:	bl	4c4 <Button::check()>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     8c4:	ldrb.w	r0, [r5, #52]	; 0x34
     8c8:	bl	2ca4 <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     8cc:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     8ce:	mov	r7, r0
     8d0:	str	r0, [r5, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     8d2:	ldrb.w	r6, [r5, #36]	; 0x24
     8d6:	beq.w	134c <loop+0xb6c>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     8da:	cmp	r6, r7
     8dc:	beq.w	127e <loop+0xa9e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8e0:	ldr	r3, [r4, #0]
     8e2:	str	r3, [sp, #168]	; 0xa8
	return ret;
     8e4:	ldr	r3, [sp, #168]	; 0xa8
        m_lastDebounceTime = millis();
     8e6:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8e8:	ldr	r2, [r4, #0]
     8ea:	str	r2, [sp, #164]	; 0xa4
	return ret;
     8ec:	ldr	r2, [sp, #164]	; 0xa4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8ee:	ldr.w	r8, [pc, #432]	; aa0 <loop+0x2c0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     8f2:	cmp	r2, r3
     8f4:	beq.n	914 <loop+0x134>
        // and the current changed
        if (current != m_state) {
     8f6:	ldr	r3, [r5, #4]
     8f8:	ldr	r6, [pc, #432]	; (aac <loop+0x2cc>)
     8fa:	cmp	r7, r3
     8fc:	beq.n	914 <loop+0x134>
     8fe:	ldr.w	r3, [r8]
     902:	str	r3, [sp, #160]	; 0xa0
	return ret;
     904:	ldr	r3, [sp, #160]	; 0xa0
     906:	ldr	r1, [r6, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     908:	ldr	r2, [r6, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     90a:	str	r7, [r6, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     90c:	subs	r3, r3, r1
     90e:	cmp	r3, r2
     910:	bcc.w	108c <loop+0x8ac>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     914:	cbnz	r7, 922 <loop+0x142>
     916:	ldrb.w	r3, [r5, #36]	; 0x24
     91a:	ldr	r6, [pc, #400]	; (aac <loop+0x2cc>)
     91c:	cmp	r3, #1
     91e:	beq.w	f16 <loop+0x736>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     922:	ldr	r6, [pc, #400]	; (ab4 <loop+0x2d4>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     924:	strb.w	r7, [r5, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     928:	ldrb.w	r0, [r6, #52]	; 0x34
     92c:	bl	2ca4 <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     930:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     932:	mov	r7, r0
     934:	str	r0, [r6, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     936:	ldrb.w	r5, [r6, #36]	; 0x24
     93a:	beq.w	153c <loop+0xd5c>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     93e:	cmp	r5, r7
     940:	beq.w	1278 <loop+0xa98>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     944:	ldr	r3, [r4, #0]
     946:	str	r3, [sp, #136]	; 0x88
	return ret;
     948:	ldr	r3, [sp, #136]	; 0x88
        m_lastDebounceTime = millis();
     94a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     94c:	ldr	r2, [r4, #0]
     94e:	str	r2, [sp, #132]	; 0x84
	return ret;
     950:	ldr	r2, [sp, #132]	; 0x84
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     952:	ldr.w	r8, [pc, #332]	; aa0 <loop+0x2c0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     956:	cmp	r2, r3
     958:	beq.n	978 <loop+0x198>
        // and the current changed
        if (current != m_state) {
     95a:	ldr	r3, [r6, #4]
     95c:	ldr	r5, [pc, #340]	; (ab4 <loop+0x2d4>)
     95e:	cmp	r7, r3
     960:	beq.n	978 <loop+0x198>
     962:	ldr.w	r3, [r8]
     966:	str	r3, [sp, #128]	; 0x80
	return ret;
     968:	ldr	r3, [sp, #128]	; 0x80
     96a:	ldr	r1, [r5, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     96c:	ldr	r2, [r5, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     96e:	str	r7, [r5, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     970:	subs	r3, r3, r1
     972:	cmp	r3, r2
     974:	bcc.w	fe4 <loop+0x804>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     978:	cbnz	r7, 986 <loop+0x1a6>
     97a:	ldrb.w	r3, [r6, #36]	; 0x24
     97e:	ldr	r5, [pc, #308]	; (ab4 <loop+0x2d4>)
     980:	cmp	r3, #1
     982:	beq.w	f40 <loop+0x760>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     986:	ldr	r5, [pc, #304]	; (ab8 <loop+0x2d8>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     988:	strb.w	r7, [r6, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     98c:	ldrb.w	r0, [r5, #52]	; 0x34
     990:	bl	2ca4 <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     994:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     996:	mov	r6, r0
     998:	str	r0, [r5, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     99a:	ldrb.w	r7, [r5, #36]	; 0x24
     99e:	beq.w	1480 <loop+0xca0>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     9a2:	cmp	r7, r6
     9a4:	beq.w	1252 <loop+0xa72>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9a8:	ldr	r3, [r4, #0]
     9aa:	str	r3, [sp, #104]	; 0x68
	return ret;
     9ac:	ldr	r3, [sp, #104]	; 0x68
        m_lastDebounceTime = millis();
     9ae:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9b0:	ldr	r2, [r4, #0]
     9b2:	str	r2, [sp, #100]	; 0x64
	return ret;
     9b4:	ldr	r2, [sp, #100]	; 0x64
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9b6:	ldr.w	r8, [pc, #232]	; aa0 <loop+0x2c0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     9ba:	cmp	r2, r3
     9bc:	beq.n	9dc <loop+0x1fc>
        // and the current changed
        if (current != m_state) {
     9be:	ldr	r3, [r5, #4]
     9c0:	ldr	r7, [pc, #244]	; (ab8 <loop+0x2d8>)
     9c2:	cmp	r3, r6
     9c4:	beq.n	9dc <loop+0x1fc>
     9c6:	ldr.w	r3, [r8]
     9ca:	str	r3, [sp, #96]	; 0x60
	return ret;
     9cc:	ldr	r3, [sp, #96]	; 0x60
     9ce:	ldr	r1, [r7, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     9d0:	ldr	r2, [r7, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     9d2:	str	r6, [r7, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     9d4:	subs	r3, r3, r1
     9d6:	cmp	r3, r2
     9d8:	bcc.w	f90 <loop+0x7b0>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     9dc:	cbnz	r6, 9ea <loop+0x20a>
     9de:	ldrb.w	r3, [r5, #36]	; 0x24
     9e2:	ldr	r7, [pc, #212]	; (ab8 <loop+0x2d8>)
     9e4:	cmp	r3, #1
     9e6:	beq.w	cb8 <loop+0x4d8>
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     9ea:	ldr	r7, [pc, #208]	; (abc <loop+0x2dc>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     9ec:	strb.w	r6, [r5, #36]	; 0x24
     9f0:	ldrb	r3, [r7, #16]
     9f2:	cmp	r3, #0
     9f4:	beq.w	cee <loop+0x50e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9f8:	ldr	r3, [r4, #0]
     9fa:	str	r3, [sp, #84]	; 0x54
	return ret;
     9fc:	ldr	r3, [sp, #84]	; 0x54
     9fe:	ldr	r1, [r7, #8]
     a00:	ldr	r2, [r7, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a02:	ldr	r6, [pc, #156]	; (aa0 <loop+0x2c0>)
     a04:	subs	r3, r3, r1
     a06:	cmp	r2, r3
     a08:	bcc.w	121c <loop+0xa3c>
     a0c:	ldr	r5, [pc, #176]	; (ac0 <loop+0x2e0>)
     a0e:	ldrb	r3, [r5, #16]
     a10:	cmp	r3, #0
     a12:	beq.w	d3e <loop+0x55e>
     a16:	ldr	r3, [r4, #0]
     a18:	str	r3, [sp, #72]	; 0x48
	return ret;
     a1a:	ldr	r3, [sp, #72]	; 0x48
     a1c:	ldr	r1, [r5, #8]
     a1e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a20:	ldr	r7, [pc, #124]	; (aa0 <loop+0x2c0>)
     a22:	subs	r3, r3, r1
     a24:	cmp	r2, r3
     a26:	bcc.w	11ee <loop+0xa0e>
     a2a:	ldr	r5, [pc, #152]	; (ac4 <loop+0x2e4>)
     a2c:	ldrb	r3, [r5, #16]
     a2e:	cmp	r3, #0
     a30:	beq.w	d8e <loop+0x5ae>
     a34:	ldr	r3, [r4, #0]
     a36:	str	r3, [sp, #60]	; 0x3c
	return ret;
     a38:	ldr	r3, [sp, #60]	; 0x3c
     a3a:	ldr	r1, [r5, #8]
     a3c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a3e:	ldr	r7, [pc, #96]	; (aa0 <loop+0x2c0>)
     a40:	subs	r3, r3, r1
     a42:	cmp	r2, r3
     a44:	bcc.w	11c0 <loop+0x9e0>
     a48:	ldr	r5, [pc, #124]	; (ac8 <loop+0x2e8>)
     a4a:	ldrb	r3, [r5, #16]
     a4c:	cmp	r3, #0
     a4e:	beq.w	dde <loop+0x5fe>
     a52:	ldr	r3, [r4, #0]
     a54:	str	r3, [sp, #48]	; 0x30
	return ret;
     a56:	ldr	r3, [sp, #48]	; 0x30
     a58:	ldr	r1, [r5, #8]
     a5a:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a5c:	ldr	r7, [pc, #64]	; (aa0 <loop+0x2c0>)
     a5e:	subs	r3, r3, r1
     a60:	cmp	r2, r3
     a62:	bcc.w	1192 <loop+0x9b2>
     a66:	ldr	r5, [pc, #100]	; (acc <loop+0x2ec>)
     a68:	ldrb	r3, [r5, #16]
     a6a:	cmp	r3, #0
     a6c:	beq.w	e2e <loop+0x64e>
     a70:	ldr	r3, [r4, #0]
     a72:	str	r3, [sp, #36]	; 0x24
	return ret;
     a74:	ldr	r3, [sp, #36]	; 0x24
     a76:	ldr	r1, [r5, #8]
     a78:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a7a:	ldr	r7, [pc, #36]	; (aa0 <loop+0x2c0>)
     a7c:	subs	r3, r3, r1
     a7e:	cmp	r2, r3
     a80:	bcc.w	1164 <loop+0x984>
     a84:	ldr	r5, [pc, #72]	; (ad0 <loop+0x2f0>)
     a86:	ldrb	r3, [r5, #16]
     a88:	cmp	r3, #0
     a8a:	beq.w	e7e <loop+0x69e>
     a8e:	ldr	r3, [r4, #0]
     a90:	str	r3, [sp, #24]
	return ret;
     a92:	ldr	r3, [sp, #24]
     a94:	ldr	r1, [r5, #8]
     a96:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a98:	ldr	r7, [pc, #4]	; (aa0 <loop+0x2c0>)
     a9a:	subs	r3, r3, r1
     a9c:	cmp	r2, r3
     a9e:	b.n	ad4 <loop+0x2f4>
     aa0:	.word	0x1fff18fc
     aa4:	.word	0x1fff160c
     aa8:	.word	0x1fff1644
     aac:	.word	0x1fff16b4
     ab0:	.word	0x1fff167c
     ab4:	.word	0x1fff16ec
     ab8:	.word	0x1fff1724
     abc:	.word	0x1fff1884
     ac0:	.word	0x1fff189c
     ac4:	.word	0x1fff18b4
     ac8:	.word	0x1fff18cc
     acc:	.word	0x1fff15d8
     ad0:	.word	0x1fff15f0
     ad4:	bcc.w	1136 <loop+0x956>
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     ad8:	ldr	r4, [pc, #452]	; (ca0 <loop+0x4c0>)
     ada:	ldrb	r0, [r4, #0]
     adc:	bl	2ab4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     ae0:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     ae2:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     ae4:	cmp	r0, r3
     ae6:	beq.n	b32 <loop+0x352>
     ae8:	subs	r3, r0, r3
     aea:	cmp	r3, #0
     aec:	it	lt
     aee:	neglt	r3, r3
     af0:	cmp	r3, #10
     af2:	ble.n	b32 <loop+0x352>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     af4:	ldrb	r3, [r4, #24]
     af6:	cmp	r3, #4
     af8:	beq.w	1758 <loop+0xf78>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     afc:	ldr	r3, [pc, #420]	; (ca4 <loop+0x4c4>)
     afe:	ldrb	r3, [r3, #0]
     b00:	cmp	r3, #1
     b02:	beq.w	1acc <loop+0x12ec>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     b06:	cmp	r3, #0
     b08:	beq.w	166e <loop+0xe8e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     b0c:	cmp	r3, #2
     b0e:	bne.n	b30 <loop+0x350>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     b10:	ldr	r2, [r4, #16]
     b12:	ldr	r1, [r4, #12]
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     b14:	mvn.w	r3, #21
     b18:	mul.w	r3, r3, r0
     b1c:	cmp	r3, #0
     b1e:	add.w	r2, r2, r1, lsl #2
     b22:	it	lt
     b24:	addwlt	r3, r3, #1023	; 0x3ff
     b28:	ldr	r2, [r2, #4]
     b2a:	asrs	r3, r3, #10
     b2c:	adds	r3, #24
     b2e:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     b30:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     b32:	ldr	r4, [pc, #372]	; (ca8 <loop+0x4c8>)
     b34:	ldrb	r0, [r4, #0]
     b36:	bl	2ab4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     b3a:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     b3c:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     b3e:	cmp	r0, r3
     b40:	beq.n	b8c <loop+0x3ac>
     b42:	subs	r3, r0, r3
     b44:	cmp	r3, #0
     b46:	it	lt
     b48:	neglt	r3, r3
     b4a:	cmp	r3, #10
     b4c:	ble.n	b8c <loop+0x3ac>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     b4e:	ldrb	r3, [r4, #24]
     b50:	cmp	r3, #4
     b52:	beq.w	173a <loop+0xf5a>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     b56:	ldr	r3, [pc, #332]	; (ca4 <loop+0x4c4>)
     b58:	ldrb	r3, [r3, #0]
     b5a:	cmp	r3, #1
     b5c:	beq.w	1a90 <loop+0x12b0>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     b60:	cmp	r3, #0
     b62:	beq.w	168e <loop+0xeae>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     b66:	cmp	r3, #2
     b68:	bne.n	b8a <loop+0x3aa>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     b6a:	ldr	r2, [r4, #16]
     b6c:	ldr	r1, [r4, #12]
     b6e:	mvn.w	r3, #21
     b72:	mul.w	r3, r3, r0
     b76:	cmp	r3, #0
     b78:	add.w	r2, r2, r1, lsl #2
     b7c:	it	lt
     b7e:	addwlt	r3, r3, #1023	; 0x3ff
     b82:	ldr	r2, [r2, #4]
     b84:	asrs	r3, r3, #10
     b86:	adds	r3, #24
     b88:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     b8a:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     b8c:	ldr	r4, [pc, #284]	; (cac <loop+0x4cc>)
     b8e:	ldrb	r0, [r4, #0]
     b90:	bl	2ab4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     b94:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     b96:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     b98:	cmp	r0, r3
     b9a:	beq.n	be6 <loop+0x406>
     b9c:	subs	r3, r0, r3
     b9e:	cmp	r3, #0
     ba0:	it	lt
     ba2:	neglt	r3, r3
     ba4:	cmp	r3, #10
     ba6:	ble.n	be6 <loop+0x406>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     ba8:	ldrb	r3, [r4, #24]
     baa:	cmp	r3, #4
     bac:	beq.w	1794 <loop+0xfb4>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     bb0:	ldr	r3, [pc, #240]	; (ca4 <loop+0x4c4>)
     bb2:	ldrb	r3, [r3, #0]
     bb4:	cmp	r3, #1
     bb6:	beq.w	1aea <loop+0x130a>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     bba:	cmp	r3, #0
     bbc:	beq.w	164e <loop+0xe6e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     bc0:	cmp	r3, #2
     bc2:	bne.n	be4 <loop+0x404>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     bc4:	ldr	r2, [r4, #16]
     bc6:	ldr	r1, [r4, #12]
     bc8:	mvn.w	r3, #21
     bcc:	mul.w	r3, r3, r0
     bd0:	cmp	r3, #0
     bd2:	add.w	r2, r2, r1, lsl #2
     bd6:	it	lt
     bd8:	addwlt	r3, r3, #1023	; 0x3ff
     bdc:	ldr	r2, [r2, #4]
     bde:	asrs	r3, r3, #10
     be0:	adds	r3, #24
     be2:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     be4:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     be6:	ldr	r4, [pc, #200]	; (cb0 <loop+0x4d0>)
     be8:	ldrb	r0, [r4, #0]
     bea:	bl	2ab4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     bee:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     bf0:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     bf2:	cmp	r0, r3
     bf4:	beq.n	c40 <loop+0x460>
     bf6:	subs	r3, r0, r3
     bf8:	cmp	r3, #0
     bfa:	it	lt
     bfc:	neglt	r3, r3
     bfe:	cmp	r3, #10
     c00:	ble.n	c40 <loop+0x460>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     c02:	ldrb	r3, [r4, #24]
     c04:	cmp	r3, #4
     c06:	beq.w	17b2 <loop+0xfd2>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     c0a:	ldr	r3, [pc, #152]	; (ca4 <loop+0x4c4>)
     c0c:	ldrb	r3, [r3, #0]
     c0e:	cmp	r3, #1
     c10:	beq.w	1aae <loop+0x12ce>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     c14:	cmp	r3, #0
     c16:	beq.w	162e <loop+0xe4e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     c1a:	cmp	r3, #2
     c1c:	bne.n	c3e <loop+0x45e>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     c1e:	ldr	r2, [r4, #16]
     c20:	ldr	r1, [r4, #12]
     c22:	mvn.w	r3, #21
     c26:	mul.w	r3, r3, r0
     c2a:	cmp	r3, #0
     c2c:	add.w	r2, r2, r1, lsl #2
     c30:	it	lt
     c32:	addwlt	r3, r3, #1023	; 0x3ff
     c36:	ldr	r2, [r2, #4]
     c38:	asrs	r3, r3, #10
     c3a:	adds	r3, #24
     c3c:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     c3e:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     c40:	ldr	r4, [pc, #112]	; (cb4 <loop+0x4d4>)
     c42:	ldrb	r0, [r4, #0]
     c44:	bl	2ab4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     c48:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     c4a:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     c4c:	cmp	r0, r3
     c4e:	beq.n	c9a <loop+0x4ba>
     c50:	subs	r3, r0, r3
     c52:	cmp	r3, #0
     c54:	it	lt
     c56:	neglt	r3, r3
     c58:	cmp	r3, #10
     c5a:	ble.n	c9a <loop+0x4ba>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     c5c:	ldrb	r3, [r4, #24]
     c5e:	cmp	r3, #4
     c60:	beq.w	1776 <loop+0xf96>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     c64:	ldr	r3, [pc, #60]	; (ca4 <loop+0x4c4>)
     c66:	ldrb	r3, [r3, #0]
     c68:	cmp	r3, #1
     c6a:	beq.w	1b08 <loop+0x1328>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     c6e:	cmp	r3, #0
     c70:	beq.w	160e <loop+0xe2e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     c74:	cmp	r3, #2
     c76:	bne.n	c98 <loop+0x4b8>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     c78:	ldr	r2, [r4, #16]
     c7a:	ldr	r1, [r4, #12]
     c7c:	mvn.w	r3, #21
     c80:	mul.w	r3, r3, r0
     c84:	cmp	r3, #0
     c86:	add.w	r2, r2, r1, lsl #2
     c8a:	it	lt
     c8c:	addwlt	r3, r3, #1023	; 0x3ff
     c90:	ldr	r2, [r2, #4]
     c92:	asrs	r3, r3, #10
     c94:	adds	r3, #24
     c96:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     c98:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     c9a:	add	sp, #336	; 0x150
     c9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ca0:	.word	0x1fff17e4
     ca4:	.word	0x1fff1880
     ca8:	.word	0x1fff1800
     cac:	.word	0x1fff181c
     cb0:	.word	0x1fff1838
     cb4:	.word	0x1fff1854
     cb8:	ldr	r3, [r4, #0]
     cba:	str	r3, [sp, #92]	; 0x5c
	return ret;
     cbc:	ldr	r3, [sp, #92]	; 0x5c
     cbe:	ldr	r1, [r7, #40]	; 0x28

      if (debounced && timeSincePress() < m_holdThreshold) {
        onPress();
      }
 
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
     cc0:	ldr	r2, [r7, #48]	; 0x30
     cc2:	subs	r3, r3, r1
     cc4:	cmp	r3, r2
     cc6:	bcc.w	9ea <loop+0x20a>
     cca:	movs	r1, #9
     ccc:	ldr	r0, [pc, #668]	; (f6c <loop+0x78c>)
     cce:	bl	2688 <usb_serial_write>
     cd2:	ldr	r0, [pc, #668]	; (f70 <loop+0x790>)
     cd4:	bl	41fc <Print::println()>
    void enterShiftMode () {
      m_shiftMode = true;
    };

    void exitShiftMode () {
      m_shiftMode = false;
     cd8:	ldr	r3, [r7, #28]
     cda:	strb.w	r6, [r3, #46]	; 0x2e
     cde:	ldr	r6, [r7, #32]
     ce0:	ldr	r7, [pc, #656]	; (f74 <loop+0x794>)
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     ce2:	strb.w	r6, [r5, #36]	; 0x24
     ce6:	ldrb	r3, [r7, #16]
     ce8:	cmp	r3, #0
     cea:	bne.w	9f8 <loop+0x218>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     cee:	ldr	r6, [r7, #20]
     cf0:	ldr	r5, [pc, #640]	; (f74 <loop+0x794>)
     cf2:	cmp	r6, #0
     cf4:	ble.w	a0c <loop+0x22c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cf8:	ldr	r3, [r4, #0]
     cfa:	str	r3, [sp, #80]	; 0x50
	return ret;
     cfc:	ldr	r3, [sp, #80]	; 0x50
     cfe:	ldr	r1, [r5, #8]
     d00:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d02:	ldr.w	r8, [pc, #648]	; f8c <loop+0x7ac>
     d06:	subs	r3, r3, r1
     d08:	cmp	r2, r3
     d0a:	bcs.w	a0c <loop+0x22c>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     d0e:	ldrb	r7, [r5, #0]
     d10:	mov	r0, r7
     d12:	bl	2ca4 <digitalRead>
     d16:	clz	r1, r0
     d1a:	lsrs	r1, r1, #5
     d1c:	mov	r0, r7
     d1e:	bl	2c98 <digitalWrite>
     d22:	ldr.w	r3, [r8]
     d26:	str	r3, [sp, #312]	; 0x138
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d28:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d2a:	movs	r3, #1
	return ret;
     d2c:	ldr	r2, [sp, #312]	; 0x138
     d2e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d30:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     d32:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     d34:	ldr	r5, [pc, #576]	; (f78 <loop+0x798>)
     d36:	ldrb	r3, [r5, #16]
     d38:	cmp	r3, #0
     d3a:	bne.w	a16 <loop+0x236>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     d3e:	ldr	r6, [r5, #20]
     d40:	ldr	r5, [pc, #564]	; (f78 <loop+0x798>)
     d42:	cmp	r6, #0
     d44:	ble.w	a2a <loop+0x24a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d48:	ldr	r3, [r4, #0]
     d4a:	str	r3, [sp, #68]	; 0x44
	return ret;
     d4c:	ldr	r3, [sp, #68]	; 0x44
     d4e:	ldr	r1, [r5, #8]
     d50:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d52:	ldr.w	r8, [pc, #568]	; f8c <loop+0x7ac>
     d56:	subs	r3, r3, r1
     d58:	cmp	r2, r3
     d5a:	bcs.w	a2a <loop+0x24a>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     d5e:	ldrb	r7, [r5, #0]
     d60:	mov	r0, r7
     d62:	bl	2ca4 <digitalRead>
     d66:	clz	r1, r0
     d6a:	lsrs	r1, r1, #5
     d6c:	mov	r0, r7
     d6e:	bl	2c98 <digitalWrite>
     d72:	ldr.w	r3, [r8]
     d76:	str	r3, [sp, #316]	; 0x13c
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d78:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d7a:	movs	r3, #1
	return ret;
     d7c:	ldr	r2, [sp, #316]	; 0x13c
     d7e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d80:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     d82:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     d84:	ldr	r5, [pc, #500]	; (f7c <loop+0x79c>)
     d86:	ldrb	r3, [r5, #16]
     d88:	cmp	r3, #0
     d8a:	bne.w	a34 <loop+0x254>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     d8e:	ldr	r6, [r5, #20]
     d90:	ldr	r5, [pc, #488]	; (f7c <loop+0x79c>)
     d92:	cmp	r6, #0
     d94:	ble.w	a48 <loop+0x268>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d98:	ldr	r3, [r4, #0]
     d9a:	str	r3, [sp, #56]	; 0x38
	return ret;
     d9c:	ldr	r3, [sp, #56]	; 0x38
     d9e:	ldr	r1, [r5, #8]
     da0:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     da2:	ldr.w	r8, [pc, #488]	; f8c <loop+0x7ac>
     da6:	subs	r3, r3, r1
     da8:	cmp	r2, r3
     daa:	bcs.w	a48 <loop+0x268>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     dae:	ldrb	r7, [r5, #0]
     db0:	mov	r0, r7
     db2:	bl	2ca4 <digitalRead>
     db6:	clz	r1, r0
     dba:	lsrs	r1, r1, #5
     dbc:	mov	r0, r7
     dbe:	bl	2c98 <digitalWrite>
     dc2:	ldr.w	r3, [r8]
     dc6:	str	r3, [sp, #320]	; 0x140
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     dc8:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     dca:	movs	r3, #1
	return ret;
     dcc:	ldr	r2, [sp, #320]	; 0x140
     dce:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     dd0:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     dd2:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     dd4:	ldr	r5, [pc, #424]	; (f80 <loop+0x7a0>)
     dd6:	ldrb	r3, [r5, #16]
     dd8:	cmp	r3, #0
     dda:	bne.w	a52 <loop+0x272>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     dde:	ldr	r6, [r5, #20]
     de0:	ldr	r5, [pc, #412]	; (f80 <loop+0x7a0>)
     de2:	cmp	r6, #0
     de4:	ble.w	a66 <loop+0x286>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     de8:	ldr	r3, [r4, #0]
     dea:	str	r3, [sp, #44]	; 0x2c
	return ret;
     dec:	ldr	r3, [sp, #44]	; 0x2c
     dee:	ldr	r1, [r5, #8]
     df0:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     df2:	ldr.w	r8, [pc, #408]	; f8c <loop+0x7ac>
     df6:	subs	r3, r3, r1
     df8:	cmp	r2, r3
     dfa:	bcs.w	a66 <loop+0x286>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     dfe:	ldrb	r7, [r5, #0]
     e00:	mov	r0, r7
     e02:	bl	2ca4 <digitalRead>
     e06:	clz	r1, r0
     e0a:	lsrs	r1, r1, #5
     e0c:	mov	r0, r7
     e0e:	bl	2c98 <digitalWrite>
     e12:	ldr.w	r3, [r8]
     e16:	str	r3, [sp, #324]	; 0x144
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     e18:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e1a:	movs	r3, #1
	return ret;
     e1c:	ldr	r2, [sp, #324]	; 0x144
     e1e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     e20:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     e22:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     e24:	ldr	r5, [pc, #348]	; (f84 <loop+0x7a4>)
     e26:	ldrb	r3, [r5, #16]
     e28:	cmp	r3, #0
     e2a:	bne.w	a70 <loop+0x290>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     e2e:	ldr	r6, [r5, #20]
     e30:	ldr	r5, [pc, #336]	; (f84 <loop+0x7a4>)
     e32:	cmp	r6, #0
     e34:	ble.w	a84 <loop+0x2a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e38:	ldr	r3, [r4, #0]
     e3a:	str	r3, [sp, #32]
	return ret;
     e3c:	ldr	r3, [sp, #32]
     e3e:	ldr	r1, [r5, #8]
     e40:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e42:	ldr.w	r8, [pc, #328]	; f8c <loop+0x7ac>
     e46:	subs	r3, r3, r1
     e48:	cmp	r2, r3
     e4a:	bcs.w	a84 <loop+0x2a4>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e4e:	ldrb	r7, [r5, #0]
     e50:	mov	r0, r7
     e52:	bl	2ca4 <digitalRead>
     e56:	clz	r1, r0
     e5a:	lsrs	r1, r1, #5
     e5c:	mov	r0, r7
     e5e:	bl	2c98 <digitalWrite>
     e62:	ldr.w	r3, [r8]
     e66:	str	r3, [sp, #328]	; 0x148
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     e68:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e6a:	movs	r3, #1
	return ret;
     e6c:	ldr	r2, [sp, #328]	; 0x148
     e6e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     e70:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     e72:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     e74:	ldr	r5, [pc, #272]	; (f88 <loop+0x7a8>)
     e76:	ldrb	r3, [r5, #16]
     e78:	cmp	r3, #0
     e7a:	bne.w	a8e <loop+0x2ae>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     e7e:	ldr	r6, [r5, #20]
     e80:	ldr	r5, [pc, #260]	; (f88 <loop+0x7a8>)
     e82:	cmp	r6, #0
     e84:	ble.w	ad8 <loop+0x2f8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e88:	ldr	r3, [r4, #0]
     e8a:	str	r3, [sp, #20]
	return ret;
     e8c:	ldr	r3, [sp, #20]
     e8e:	ldr	r1, [r5, #8]
     e90:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e92:	ldr	r7, [pc, #248]	; (f8c <loop+0x7ac>)
     e94:	subs	r3, r3, r1
     e96:	cmp	r2, r3
     e98:	bcs.w	ad8 <loop+0x2f8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e9c:	ldrb	r4, [r5, #0]
     e9e:	mov	r0, r4
     ea0:	bl	2ca4 <digitalRead>
     ea4:	clz	r1, r0
     ea8:	lsrs	r1, r1, #5
     eaa:	mov	r0, r4
     eac:	bl	2c98 <digitalWrite>
     eb0:	ldr	r3, [r7, #0]
     eb2:	str	r3, [sp, #332]	; 0x14c
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     eb4:	subs	r6, #2
	return ret;
     eb6:	ldr	r2, [sp, #332]	; 0x14c
     eb8:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     eba:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     ebc:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ebe:	strb	r3, [r5, #16]
     ec0:	b.n	ad8 <loop+0x2f8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ec2:	ldr	r3, [r4, #0]
     ec4:	str	r3, [sp, #220]	; 0xdc
	return ret;
     ec6:	ldr	r3, [sp, #220]	; 0xdc
     ec8:	ldr	r1, [r6, #40]	; 0x28

      if (debounced && timeSincePress() < m_holdThreshold) {
        onPress();
      }
 
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
     eca:	ldr	r2, [r6, #48]	; 0x30
     ecc:	subs	r3, r3, r1
     ece:	cmp	r3, r2
     ed0:	bcc.w	854 <loop+0x74>
     ed4:	movs	r1, #9
     ed6:	ldr	r0, [pc, #148]	; (f6c <loop+0x78c>)
     ed8:	bl	2688 <usb_serial_write>
     edc:	ldr	r0, [pc, #144]	; (f70 <loop+0x790>)
     ede:	bl	41fc <Print::println()>
     ee2:	ldr	r3, [r6, #28]
     ee4:	strb.w	r7, [r3, #46]	; 0x2e
     ee8:	ldr	r7, [r6, #32]
     eea:	b.n	854 <loop+0x74>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eec:	ldr	r3, [r4, #0]
     eee:	str	r3, [sp, #188]	; 0xbc
	return ret;
     ef0:	ldr	r3, [sp, #188]	; 0xbc
     ef2:	ldr	r1, [r5, #40]	; 0x28
     ef4:	ldr	r2, [r5, #48]	; 0x30
     ef6:	subs	r3, r3, r1
     ef8:	cmp	r3, r2
     efa:	bcc.w	8b8 <loop+0xd8>
     efe:	movs	r1, #9
     f00:	ldr	r0, [pc, #104]	; (f6c <loop+0x78c>)
     f02:	bl	2688 <usb_serial_write>
     f06:	ldr	r0, [pc, #104]	; (f70 <loop+0x790>)
     f08:	bl	41fc <Print::println()>
     f0c:	ldr	r3, [r5, #28]
     f0e:	strb.w	r7, [r3, #46]	; 0x2e
     f12:	ldr	r7, [r5, #32]
     f14:	b.n	8b8 <loop+0xd8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f16:	ldr	r3, [r4, #0]
     f18:	str	r3, [sp, #156]	; 0x9c
	return ret;
     f1a:	ldr	r3, [sp, #156]	; 0x9c
     f1c:	ldr	r1, [r6, #40]	; 0x28
     f1e:	ldr	r2, [r6, #48]	; 0x30
     f20:	subs	r3, r3, r1
     f22:	cmp	r3, r2
     f24:	bcc.w	922 <loop+0x142>
     f28:	movs	r1, #9
     f2a:	ldr	r0, [pc, #64]	; (f6c <loop+0x78c>)
     f2c:	bl	2688 <usb_serial_write>
     f30:	ldr	r0, [pc, #60]	; (f70 <loop+0x790>)
     f32:	bl	41fc <Print::println()>
     f36:	ldr	r3, [r6, #28]
     f38:	strb.w	r7, [r3, #46]	; 0x2e
     f3c:	ldr	r7, [r6, #32]
     f3e:	b.n	922 <loop+0x142>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f40:	ldr	r3, [r4, #0]
     f42:	str	r3, [sp, #124]	; 0x7c
	return ret;
     f44:	ldr	r3, [sp, #124]	; 0x7c
     f46:	ldr	r1, [r5, #40]	; 0x28
     f48:	ldr	r2, [r5, #48]	; 0x30
     f4a:	subs	r3, r3, r1
     f4c:	cmp	r3, r2
     f4e:	bcc.w	986 <loop+0x1a6>
     f52:	movs	r1, #9
     f54:	ldr	r0, [pc, #20]	; (f6c <loop+0x78c>)
     f56:	bl	2688 <usb_serial_write>
     f5a:	ldr	r0, [pc, #20]	; (f70 <loop+0x790>)
     f5c:	bl	41fc <Print::println()>
     f60:	ldr	r3, [r5, #28]
     f62:	strb.w	r7, [r3, #46]	; 0x2e
     f66:	ldr	r7, [r5, #32]
     f68:	b.n	986 <loop+0x1a6>
     f6a:	nop
     f6c:	.word	0x00005660
     f70:	.word	0x1fff0c70
     f74:	.word	0x1fff1884
     f78:	.word	0x1fff189c
     f7c:	.word	0x1fff18b4
     f80:	.word	0x1fff18cc
     f84:	.word	0x1fff15d8
     f88:	.word	0x1fff15f0
     f8c:	.word	0x1fff18fc

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     f90:	ldr	r3, [r7, #28]
     f92:	ldr	r0, [pc, #708]	; (1258 <loop+0xa78>)
     f94:	ldr	r6, [r3, #52]	; 0x34
     f96:	movs	r1, #7
     f98:	bl	2688 <usb_serial_write>
     f9c:	ldr	r0, [pc, #700]	; (125c <loop+0xa7c>)
     f9e:	bl	41fc <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     fa2:	ldr	r1, [r7, #0]
     fa4:	ldr	r0, [pc, #692]	; (125c <loop+0xa7c>)
     fa6:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     faa:	ldr	r0, [pc, #688]	; (125c <loop+0xa7c>)
     fac:	bl	41fc <Print::println()>
      Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     fb0:	ldr	r3, [r7, #4]
     fb2:	cbnz	r3, fe0 <loop+0x800>
     fb4:	ldrb	r3, [r7, #16]
     fb6:	cmp	r3, #0
     fb8:	beq.w	17d0 <loop+0xff0>
        if (m_sequence.getShiftMode()) {
     fbc:	ldr.w	r9, [r7, #28]
     fc0:	ldrb.w	r3, [r9, #46]	; 0x2e
     fc4:	cmp	r3, #0
     fc6:	beq.w	1e20 <loop+0x1640>
    };

    void previousPage () {
      if (m_page > 1) m_page--;
     fca:	ldr	r1, [r6, #4]
     fcc:	cmp	r1, #1
     fce:	ble.n	fd4 <loop+0x7f4>
     fd0:	subs	r1, #1
     fd2:	str	r1, [r6, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     fd4:	ldr	r0, [pc, #644]	; (125c <loop+0xa7c>)
     fd6:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     fda:	ldr	r0, [pc, #640]	; (125c <loop+0xa7c>)
     fdc:	bl	41fc <Print::println()>
     fe0:	ldr	r6, [r5, #32]
     fe2:	b.n	9dc <loop+0x1fc>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     fe4:	ldr	r3, [r5, #28]
     fe6:	ldr	r0, [pc, #624]	; (1258 <loop+0xa78>)
     fe8:	ldr	r7, [r3, #52]	; 0x34
     fea:	movs	r1, #7
     fec:	bl	2688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     ff0:	ldr	r0, [pc, #616]	; (125c <loop+0xa7c>)
     ff2:	bl	41fc <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ff6:	ldr	r1, [r5, #0]
     ff8:	ldr	r0, [pc, #608]	; (125c <loop+0xa7c>)
     ffa:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ffe:	ldr	r0, [pc, #604]	; (125c <loop+0xa7c>)
    1000:	bl	41fc <Print::println()>
      Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
    1004:	ldr	r3, [r5, #4]
    1006:	cbnz	r3, 1034 <loop+0x854>
    1008:	ldrb	r3, [r5, #16]
    100a:	cmp	r3, #0
    100c:	beq.w	1832 <loop+0x1052>
        if (m_sequence.getShiftMode()) {
    1010:	ldr.w	r9, [r5, #28]
    1014:	ldrb.w	r3, [r9, #46]	; 0x2e
    1018:	cmp	r3, #0
    101a:	beq.w	1e8a <loop+0x16aa>
    101e:	ldr	r1, [r7, #4]
    1020:	cmp	r1, #1
    1022:	ble.n	1028 <loop+0x848>
    1024:	subs	r1, #1
    1026:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1028:	ldr	r0, [pc, #560]	; (125c <loop+0xa7c>)
    102a:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    102e:	ldr	r0, [pc, #556]	; (125c <loop+0xa7c>)
    1030:	bl	41fc <Print::println()>
    1034:	ldr	r7, [r6, #32]
    1036:	b.n	978 <loop+0x198>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    1038:	ldr	r3, [r5, #28]
    103a:	ldr	r0, [pc, #540]	; (1258 <loop+0xa78>)
    103c:	ldr	r7, [r3, #52]	; 0x34
    103e:	movs	r1, #7
    1040:	bl	2688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1044:	ldr	r0, [pc, #532]	; (125c <loop+0xa7c>)
    1046:	bl	41fc <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    104a:	ldr	r1, [r5, #0]
    104c:	ldr	r0, [pc, #524]	; (125c <loop+0xa7c>)
    104e:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1052:	ldr	r0, [pc, #520]	; (125c <loop+0xa7c>)
    1054:	bl	41fc <Print::println()>
      Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
    1058:	ldr	r3, [r5, #4]
    105a:	cbnz	r3, 1088 <loop+0x8a8>
    105c:	ldrb	r3, [r5, #16]
    105e:	cmp	r3, #0
    1060:	beq.w	1812 <loop+0x1032>
        if (m_sequence.getShiftMode()) {
    1064:	ldr.w	r9, [r5, #28]
    1068:	ldrb.w	r3, [r9, #46]	; 0x2e
    106c:	cmp	r3, #0
    106e:	beq.w	1ef4 <loop+0x1714>
    1072:	ldr	r1, [r7, #4]
    1074:	cmp	r1, #1
    1076:	ble.n	107c <loop+0x89c>
    1078:	subs	r1, #1
    107a:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    107c:	ldr	r0, [pc, #476]	; (125c <loop+0xa7c>)
    107e:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1082:	ldr	r0, [pc, #472]	; (125c <loop+0xa7c>)
    1084:	bl	41fc <Print::println()>
    1088:	ldr	r7, [r6, #32]
    108a:	b.n	8aa <loop+0xca>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    108c:	ldr	r3, [r6, #28]
    108e:	ldr	r0, [pc, #456]	; (1258 <loop+0xa78>)
    1090:	ldr	r7, [r3, #52]	; 0x34
    1092:	movs	r1, #7
    1094:	bl	2688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1098:	ldr	r0, [pc, #448]	; (125c <loop+0xa7c>)
    109a:	bl	41fc <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    109e:	ldr	r1, [r6, #0]
    10a0:	ldr	r0, [pc, #440]	; (125c <loop+0xa7c>)
    10a2:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    10a6:	ldr	r0, [pc, #436]	; (125c <loop+0xa7c>)
    10a8:	bl	41fc <Print::println()>
      Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
    10ac:	ldr	r3, [r6, #4]
    10ae:	cbnz	r3, 10dc <loop+0x8fc>
    10b0:	ldrb	r3, [r6, #16]
    10b2:	cmp	r3, #0
    10b4:	beq.w	17f2 <loop+0x1012>
        if (m_sequence.getShiftMode()) {
    10b8:	ldr.w	r9, [r6, #28]
    10bc:	ldrb.w	r3, [r9, #46]	; 0x2e
    10c0:	cmp	r3, #0
    10c2:	beq.w	1f5c <loop+0x177c>
    10c6:	ldr	r1, [r7, #4]
    10c8:	cmp	r1, #1
    10ca:	ble.n	10d0 <loop+0x8f0>
    10cc:	subs	r1, #1
    10ce:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    10d0:	ldr	r0, [pc, #392]	; (125c <loop+0xa7c>)
    10d2:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    10d6:	ldr	r0, [pc, #388]	; (125c <loop+0xa7c>)
    10d8:	bl	41fc <Print::println()>
    10dc:	ldr	r7, [r5, #32]
    10de:	b.n	914 <loop+0x134>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    10e0:	ldr	r3, [r6, #28]
    10e2:	ldr	r0, [pc, #372]	; (1258 <loop+0xa78>)
    10e4:	ldr	r7, [r3, #52]	; 0x34
    10e6:	movs	r1, #7
    10e8:	bl	2688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    10ec:	ldr	r0, [pc, #364]	; (125c <loop+0xa7c>)
    10ee:	bl	41fc <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    10f2:	ldr	r1, [r6, #0]
    10f4:	ldr	r0, [pc, #356]	; (125c <loop+0xa7c>)
    10f6:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    10fa:	ldr	r0, [pc, #352]	; (125c <loop+0xa7c>)
    10fc:	bl	41fc <Print::println()>
      Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
    1100:	ldr	r3, [r6, #4]
    1102:	cbnz	r3, 1130 <loop+0x950>
    1104:	ldrb	r3, [r6, #16]
    1106:	cmp	r3, #0
    1108:	beq.w	1854 <loop+0x1074>
        if (m_sequence.getShiftMode()) {
    110c:	ldr.w	r9, [r6, #28]
    1110:	ldrb.w	r3, [r9, #46]	; 0x2e
    1114:	cmp	r3, #0
    1116:	beq.w	1db6 <loop+0x15d6>
    111a:	ldr	r1, [r7, #4]
    111c:	cmp	r1, #1
    111e:	ble.n	1124 <loop+0x944>
    1120:	subs	r1, #1
    1122:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1124:	ldr	r0, [pc, #308]	; (125c <loop+0xa7c>)
    1126:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    112a:	ldr	r0, [pc, #304]	; (125c <loop+0xa7c>)
    112c:	bl	41fc <Print::println()>
    1130:	ldr	r7, [r5, #32]
    1132:	b.w	846 <loop+0x66>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    1136:	ldrb	r6, [r5, #0]
    1138:	mov	r0, r6
    113a:	bl	2ca4 <digitalRead>
    113e:	clz	r1, r0
    1142:	lsrs	r1, r1, #5
    1144:	mov	r0, r6
    1146:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    114a:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    114c:	ldr	r6, [r5, #20]
    114e:	str	r3, [sp, #28]
	return ret;
    1150:	ldr	r3, [sp, #28]

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    1152:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1154:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    1156:	mov.w	r3, #0
    115a:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    115c:	ldr	r5, [pc, #256]	; (1260 <loop+0xa80>)
    115e:	bgt.w	e88 <loop+0x6a8>
    1162:	b.n	ad8 <loop+0x2f8>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    1164:	ldrb	r6, [r5, #0]
    1166:	mov	r0, r6
    1168:	bl	2ca4 <digitalRead>
    116c:	clz	r1, r0
    1170:	lsrs	r1, r1, #5
    1172:	mov	r0, r6
    1174:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1178:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    117a:	ldr	r6, [r5, #20]
    117c:	str	r3, [sp, #40]	; 0x28
	return ret;
    117e:	ldr	r3, [sp, #40]	; 0x28

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    1180:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1182:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    1184:	mov.w	r3, #0
    1188:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    118a:	ldr	r5, [pc, #216]	; (1264 <loop+0xa84>)
    118c:	bgt.w	e38 <loop+0x658>
    1190:	b.n	a84 <loop+0x2a4>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    1192:	ldrb	r6, [r5, #0]
    1194:	mov	r0, r6
    1196:	bl	2ca4 <digitalRead>
    119a:	clz	r1, r0
    119e:	lsrs	r1, r1, #5
    11a0:	mov	r0, r6
    11a2:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11a6:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11a8:	ldr	r6, [r5, #20]
    11aa:	str	r3, [sp, #52]	; 0x34
	return ret;
    11ac:	ldr	r3, [sp, #52]	; 0x34

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    11ae:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11b0:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    11b2:	mov.w	r3, #0
    11b6:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11b8:	ldr	r5, [pc, #172]	; (1268 <loop+0xa88>)
    11ba:	bgt.w	de8 <loop+0x608>
    11be:	b.n	a66 <loop+0x286>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    11c0:	ldrb	r6, [r5, #0]
    11c2:	mov	r0, r6
    11c4:	bl	2ca4 <digitalRead>
    11c8:	clz	r1, r0
    11cc:	lsrs	r1, r1, #5
    11ce:	mov	r0, r6
    11d0:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11d4:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11d6:	ldr	r6, [r5, #20]
    11d8:	str	r3, [sp, #64]	; 0x40
	return ret;
    11da:	ldr	r3, [sp, #64]	; 0x40

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    11dc:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11de:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    11e0:	mov.w	r3, #0
    11e4:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11e6:	ldr	r5, [pc, #132]	; (126c <loop+0xa8c>)
    11e8:	bgt.w	d98 <loop+0x5b8>
    11ec:	b.n	a48 <loop+0x268>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    11ee:	ldrb	r6, [r5, #0]
    11f0:	mov	r0, r6
    11f2:	bl	2ca4 <digitalRead>
    11f6:	clz	r1, r0
    11fa:	lsrs	r1, r1, #5
    11fc:	mov	r0, r6
    11fe:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1202:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1204:	ldr	r6, [r5, #20]
    1206:	str	r3, [sp, #76]	; 0x4c
	return ret;
    1208:	ldr	r3, [sp, #76]	; 0x4c

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    120a:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    120c:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    120e:	mov.w	r3, #0
    1212:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1214:	ldr	r5, [pc, #88]	; (1270 <loop+0xa90>)
    1216:	bgt.w	d48 <loop+0x568>
    121a:	b.n	a2a <loop+0x24a>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    121c:	ldrb	r5, [r7, #0]
    121e:	mov	r0, r5
    1220:	bl	2ca4 <digitalRead>
    1224:	clz	r1, r0
    1228:	lsrs	r1, r1, #5
    122a:	mov	r0, r5
    122c:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1230:	ldr	r3, [r6, #0]
    1232:	str	r3, [sp, #88]	; 0x58
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1234:	ldr	r6, [r7, #20]
	return ret;
    1236:	ldr	r3, [sp, #88]	; 0x58

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    1238:	str	r3, [r7, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    123a:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    123c:	mov.w	r3, #0
    1240:	strb	r3, [r7, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1242:	ldr	r5, [pc, #48]	; (1274 <loop+0xa94>)
    1244:	bgt.w	cf8 <loop+0x518>
    1248:	b.w	a0c <loop+0x22c>
    124c:	ldr	r3, [r5, #20]
    124e:	b.w	81a <loop+0x3a>
    1252:	ldr	r3, [r5, #20]
    1254:	b.w	9b0 <loop+0x1d0>
    1258:	.word	0x00005638
    125c:	.word	0x1fff0c70
    1260:	.word	0x1fff15f0
    1264:	.word	0x1fff15d8
    1268:	.word	0x1fff18cc
    126c:	.word	0x1fff18b4
    1270:	.word	0x1fff189c
    1274:	.word	0x1fff1884
    1278:	ldr	r3, [r6, #20]
    127a:	b.w	94c <loop+0x16c>
    127e:	ldr	r3, [r5, #20]
    1280:	b.w	8e8 <loop+0x108>
    1284:	ldr	r3, [r6, #20]
    1286:	b.w	87e <loop+0x9e>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
    128a:	ldr	r3, [pc, #656]	; (151c <loop+0xd3c>)
      // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
    128c:	ldrb	r3, [r3, #0]
    128e:	cmp	r3, #250	; 0xfa
    1290:	beq.w	1888 <loop+0x10a8>
    1294:	cmp	r3, #252	; 0xfc
    1296:	beq.w	15d4 <loop+0xdf4>
    129a:	cmp	r3, #248	; 0xf8
    129c:	beq.w	191e <loop+0x113e>
    12a0:	movs	r1, #35	; 0x23
    12a2:	ldr	r0, [pc, #636]	; (1520 <loop+0xd40>)
    12a4:	ldr	r4, [pc, #636]	; (1524 <loop+0xd44>)
    12a6:	bl	2688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    12aa:	ldr	r0, [pc, #636]	; (1528 <loop+0xd48>)
    12ac:	bl	41fc <Print::println()>
    12b0:	b.w	7f4 <loop+0x14>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    12b4:	cbnz	r6, 130e <loop+0xb2e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12b6:	ldr	r3, [r4, #0]
    12b8:	str	r3, [sp, #240]	; 0xf0
	return ret;
    12ba:	ldr	r3, [sp, #240]	; 0xf0
    12bc:	ldr	r2, [r5, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12be:	ldr.w	r9, [pc, #612]	; 1524 <loop+0xd44>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    12c2:	subs	r3, r3, r2
    12c4:	cmp	r3, #200	; 0xc8
    12c6:	bls.w	812 <loop+0x32>
        firstTime = millis();
        m_led.blink();
    12ca:	ldr.w	r8, [r5, #24]
    12ce:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12d2:	ldrb.w	sl, [r8]
    12d6:	str	r3, [sp, #248]	; 0xf8
	return ret;
    12d8:	ldr	r3, [sp, #248]	; 0xf8
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    12da:	str	r3, [r5, #40]	; 0x28
    12dc:	mov	r0, sl
    12de:	bl	2ca4 <digitalRead>
    12e2:	clz	r1, r0
    12e6:	lsrs	r1, r1, #5
    12e8:	mov	r0, sl
    12ea:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12ee:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    12f2:	str.w	r6, [r8, #20]
    12f6:	str	r3, [sp, #252]	; 0xfc
    12f8:	ldr	r3, [r5, #32]
	return ret;
    12fa:	ldr	r2, [sp, #252]	; 0xfc
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    12fc:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1300:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    1304:	cmp	r3, #1
    1306:	ldrb.w	r6, [r5, #36]	; 0x24
    130a:	bne.w	22c0 <loop+0x1ae0>
    130e:	cmp	r6, #1
    1310:	bne.w	80c <loop+0x2c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1314:	ldr	r3, [r4, #0]
    1316:	str	r3, [sp, #236]	; 0xec
	return ret;
    1318:	ldr	r3, [sp, #236]	; 0xec
    131a:	ldr	r1, [r5, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    131c:	ldr	r2, [r5, #48]	; 0x30
    131e:	ldr.w	r8, [pc, #524]	; 152c <loop+0xd4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1322:	ldr	r0, [pc, #512]	; (1524 <loop+0xd44>)
    1324:	subs	r3, r3, r1
    1326:	cmp	r3, r2
    1328:	bls.n	124c <loop+0xa6c>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    132a:	ldr.w	r3, [r8, #28]
    132e:	ldr	r2, [r0, #0]
    1330:	str	r2, [sp, #244]	; 0xf4
    1332:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    1336:	ldr	r1, [sp, #244]	; 0xf4
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    1338:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    133c:	cmp	r2, #0
    133e:	beq.w	171e <loop+0xf3e>
      Serial.println("Inited Sequence");
      Serial.println(m_paginator->getPage());
    };

    void enterShiftMode () {
      m_shiftMode = true;
    1342:	movs	r2, #1
    1344:	strb.w	r2, [r3, #46]	; 0x2e
    1348:	b.w	80c <loop+0x2c>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    134c:	cbnz	r6, 13a6 <loop+0xbc6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    134e:	ldr	r3, [r4, #0]
    1350:	str	r3, [sp, #176]	; 0xb0
	return ret;
    1352:	ldr	r3, [sp, #176]	; 0xb0
    1354:	ldr	r2, [r5, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1356:	ldr.w	r9, [pc, #460]	; 1524 <loop+0xd44>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    135a:	subs	r3, r3, r2
    135c:	cmp	r3, #200	; 0xc8
    135e:	bls.w	8e0 <loop+0x100>
        firstTime = millis();
        m_led.blink();
    1362:	ldr.w	r8, [r5, #24]
    1366:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    136a:	ldrb.w	sl, [r8]
    136e:	str	r3, [sp, #184]	; 0xb8
	return ret;
    1370:	ldr	r3, [sp, #184]	; 0xb8
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    1372:	str	r3, [r5, #40]	; 0x28
    1374:	mov	r0, sl
    1376:	bl	2ca4 <digitalRead>
    137a:	clz	r1, r0
    137e:	lsrs	r1, r1, #5
    1380:	mov	r0, sl
    1382:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1386:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    138a:	str.w	r6, [r8, #20]
    138e:	str	r3, [sp, #276]	; 0x114
    1390:	ldr	r3, [r5, #32]
	return ret;
    1392:	ldr	r2, [sp, #276]	; 0x114
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1394:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1398:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    139c:	cmp	r3, #1
    139e:	ldrb.w	r6, [r5, #36]	; 0x24
    13a2:	bne.w	22c6 <loop+0x1ae6>
    13a6:	cmp	r6, #1
    13a8:	bne.w	8da <loop+0xfa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13ac:	ldr	r3, [r4, #0]
    13ae:	str	r3, [sp, #172]	; 0xac
	return ret;
    13b0:	ldr	r3, [sp, #172]	; 0xac
    13b2:	ldr	r1, [r5, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    13b4:	ldr	r2, [r5, #48]	; 0x30
    13b6:	ldr.w	r8, [pc, #376]	; 1530 <loop+0xd50>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13ba:	ldr	r0, [pc, #360]	; (1524 <loop+0xd44>)
    13bc:	subs	r3, r3, r1
    13be:	cmp	r3, r2
    13c0:	bls.w	127e <loop+0xa9e>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    13c4:	ldr.w	r3, [r8, #28]
    13c8:	ldr	r2, [r0, #0]
    13ca:	str	r2, [sp, #180]	; 0xb4
    13cc:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    13d0:	ldr	r1, [sp, #180]	; 0xb4
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    13d2:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    13d6:	cmp	r2, #0
    13d8:	beq.w	1702 <loop+0xf22>
    13dc:	movs	r2, #1
    13de:	strb.w	r2, [r3, #46]	; 0x2e
    13e2:	b.w	8da <loop+0xfa>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    13e6:	cbnz	r5, 1440 <loop+0xc60>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13e8:	ldr	r3, [r4, #0]
    13ea:	str	r3, [sp, #208]	; 0xd0
	return ret;
    13ec:	ldr	r3, [sp, #208]	; 0xd0
    13ee:	ldr	r2, [r6, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13f0:	ldr.w	r9, [pc, #304]	; 1524 <loop+0xd44>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    13f4:	subs	r3, r3, r2
    13f6:	cmp	r3, #200	; 0xc8
    13f8:	bls.w	876 <loop+0x96>
        firstTime = millis();
        m_led.blink();
    13fc:	ldr.w	r8, [r6, #24]
    1400:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1404:	ldrb.w	sl, [r8]
    1408:	str	r3, [sp, #216]	; 0xd8
	return ret;
    140a:	ldr	r3, [sp, #216]	; 0xd8
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    140c:	str	r3, [r6, #40]	; 0x28
    140e:	mov	r0, sl
    1410:	bl	2ca4 <digitalRead>
    1414:	clz	r1, r0
    1418:	lsrs	r1, r1, #5
    141a:	mov	r0, sl
    141c:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1420:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    1424:	str.w	r5, [r8, #20]
    1428:	str	r3, [sp, #264]	; 0x108
    142a:	ldr	r3, [r6, #32]
	return ret;
    142c:	ldr	r2, [sp, #264]	; 0x108
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    142e:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1432:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    1436:	cmp	r3, #1
    1438:	ldrb.w	r5, [r6, #36]	; 0x24
    143c:	bne.w	22b4 <loop+0x1ad4>
    1440:	cmp	r5, #1
    1442:	bne.w	870 <loop+0x90>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1446:	ldr	r3, [r4, #0]
    1448:	str	r3, [sp, #204]	; 0xcc
	return ret;
    144a:	ldr	r3, [sp, #204]	; 0xcc
    144c:	ldr	r1, [r6, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    144e:	ldr	r2, [r6, #48]	; 0x30
    1450:	ldr.w	r8, [pc, #224]	; 1534 <loop+0xd54>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1454:	ldr	r0, [pc, #204]	; (1524 <loop+0xd44>)
    1456:	subs	r3, r3, r1
    1458:	cmp	r3, r2
    145a:	bls.w	1284 <loop+0xaa4>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    145e:	ldr.w	r3, [r8, #28]
    1462:	ldr	r2, [r0, #0]
    1464:	str	r2, [sp, #212]	; 0xd4
    1466:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    146a:	ldr	r1, [sp, #212]	; 0xd4
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    146c:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1470:	cmp	r2, #0
    1472:	beq.w	16e6 <loop+0xf06>
    1476:	movs	r2, #1
    1478:	strb.w	r2, [r3, #46]	; 0x2e
    147c:	b.w	870 <loop+0x90>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    1480:	cbnz	r7, 14da <loop+0xcfa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1482:	ldr	r3, [r4, #0]
    1484:	str	r3, [sp, #112]	; 0x70
	return ret;
    1486:	ldr	r3, [sp, #112]	; 0x70
    1488:	ldr	r2, [r5, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    148a:	ldr.w	r9, [pc, #152]	; 1524 <loop+0xd44>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    148e:	subs	r3, r3, r2
    1490:	cmp	r3, #200	; 0xc8
    1492:	bls.w	9a8 <loop+0x1c8>
        firstTime = millis();
        m_led.blink();
    1496:	ldr.w	r8, [r5, #24]
    149a:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    149e:	ldrb.w	sl, [r8]
    14a2:	str	r3, [sp, #120]	; 0x78
	return ret;
    14a4:	ldr	r3, [sp, #120]	; 0x78
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    14a6:	str	r3, [r5, #40]	; 0x28
    14a8:	mov	r0, sl
    14aa:	bl	2ca4 <digitalRead>
    14ae:	clz	r1, r0
    14b2:	lsrs	r1, r1, #5
    14b4:	mov	r0, sl
    14b6:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14ba:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    14be:	str.w	r7, [r8, #20]
    14c2:	str	r3, [sp, #300]	; 0x12c
    14c4:	ldr	r3, [r5, #32]
	return ret;
    14c6:	ldr	r2, [sp, #300]	; 0x12c
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14c8:	strb.w	r6, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    14cc:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    14d0:	cmp	r3, #1
    14d2:	ldrb.w	r7, [r5, #36]	; 0x24
    14d6:	bne.w	22ba <loop+0x1ada>
    14da:	cmp	r7, #1
    14dc:	bne.w	9a2 <loop+0x1c2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14e0:	ldr	r3, [r4, #0]
    14e2:	str	r3, [sp, #108]	; 0x6c
	return ret;
    14e4:	ldr	r3, [sp, #108]	; 0x6c
    14e6:	ldr	r1, [r5, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    14e8:	ldr	r2, [r5, #48]	; 0x30
    14ea:	ldr.w	r8, [pc, #76]	; 1538 <loop+0xd58>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14ee:	ldr	r0, [pc, #52]	; (1524 <loop+0xd44>)
    14f0:	subs	r3, r3, r1
    14f2:	cmp	r3, r2
    14f4:	bls.w	1252 <loop+0xa72>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    14f8:	ldr.w	r3, [r8, #28]
    14fc:	ldr	r2, [r0, #0]
    14fe:	str	r2, [sp, #116]	; 0x74
    1500:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    1504:	ldr	r1, [sp, #116]	; 0x74
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    1506:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    150a:	cmp	r2, #0
    150c:	beq.w	16ca <loop+0xeea>
    1510:	movs	r2, #1
    1512:	strb.w	r2, [r3, #46]	; 0x2e
    1516:	b.w	9a2 <loop+0x1c2>
    151a:	nop
    151c:	.word	0x1fff1db8
    1520:	.word	0x0000566c
    1524:	.word	0x1fff18fc
    1528:	.word	0x1fff0c70
    152c:	.word	0x1fff160c
    1530:	.word	0x1fff16b4
    1534:	.word	0x1fff1644
    1538:	.word	0x1fff1724
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    153c:	cbnz	r5, 1596 <loop+0xdb6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    153e:	ldr	r3, [r4, #0]
    1540:	str	r3, [sp, #144]	; 0x90
	return ret;
    1542:	ldr	r3, [sp, #144]	; 0x90
    1544:	ldr	r2, [r6, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1546:	ldr.w	r9, [pc, #812]	; 1874 <loop+0x1094>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    154a:	subs	r3, r3, r2
    154c:	cmp	r3, #200	; 0xc8
    154e:	bls.w	944 <loop+0x164>
        firstTime = millis();
        m_led.blink();
    1552:	ldr.w	r8, [r6, #24]
    1556:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    155a:	ldrb.w	sl, [r8]
    155e:	str	r3, [sp, #152]	; 0x98
	return ret;
    1560:	ldr	r3, [sp, #152]	; 0x98
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    1562:	str	r3, [r6, #40]	; 0x28
    1564:	mov	r0, sl
    1566:	bl	2ca4 <digitalRead>
    156a:	clz	r1, r0
    156e:	lsrs	r1, r1, #5
    1570:	mov	r0, sl
    1572:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1576:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    157a:	str.w	r5, [r8, #20]
    157e:	str	r3, [sp, #288]	; 0x120
    1580:	ldr	r3, [r6, #32]
	return ret;
    1582:	ldr	r2, [sp, #288]	; 0x120
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1584:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1588:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    158c:	cmp	r3, #1
    158e:	ldrb.w	r5, [r6, #36]	; 0x24
    1592:	bne.w	22ae <loop+0x1ace>
    1596:	cmp	r5, #1
    1598:	bne.w	93e <loop+0x15e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    159c:	ldr	r3, [r4, #0]
    159e:	str	r3, [sp, #140]	; 0x8c
	return ret;
    15a0:	ldr	r3, [sp, #140]	; 0x8c
    15a2:	ldr	r1, [r6, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    15a4:	ldr	r2, [r6, #48]	; 0x30
    15a6:	ldr.w	r8, [pc, #732]	; 1884 <loop+0x10a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15aa:	ldr	r0, [pc, #712]	; (1874 <loop+0x1094>)
    15ac:	subs	r3, r3, r1
    15ae:	cmp	r3, r2
    15b0:	bls.w	1278 <loop+0xa98>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    15b4:	ldr.w	r3, [r8, #28]
    15b8:	ldr	r2, [r0, #0]
    15ba:	str	r2, [sp, #148]	; 0x94
    15bc:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    15c0:	ldr	r1, [sp, #148]	; 0x94
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    15c2:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    15c6:	cmp	r2, #0
    15c8:	beq.n	16ae <loop+0xece>
    15ca:	movs	r2, #1
    15cc:	strb.w	r2, [r3, #46]	; 0x2e
    15d0:	b.w	93e <loop+0x15e>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    15d4:	ldr	r2, [pc, #672]	; (1878 <loop+0x1098>)
      ppqn = 0;
      m_sequence.resetStep();
    15d6:	ldr	r1, [r2, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    15d8:	movs	r3, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
    15da:	ldr	r4, [r1, #40]	; 0x28
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
    15dc:	str	r3, [r2, #8]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    15de:	strb	r3, [r2, #0]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
    15e0:	str	r3, [r1, #0]
    };

    void toggle () {
      m_state = !m_state;
    15e2:	ldr	r1, [r4, #4]

      digitalWrite(m_pin, m_state);
    15e4:	ldrb	r0, [r4, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    15e6:	clz	r1, r1
    15ea:	lsrs	r1, r1, #5
    15ec:	str	r1, [r4, #4]

      digitalWrite(m_pin, m_state);
    15ee:	bl	2c98 <digitalWrite>

      if (blinking) {
    15f2:	ldrb	r3, [r4, #16]
    15f4:	cmp	r3, #0
    15f6:	beq.w	7f2 <loop+0x12>
        digitalWrite(m_pin, !m_state);
    15fa:	ldr	r1, [r4, #4]
    15fc:	ldrb	r0, [r4, #0]
    15fe:	ldr	r4, [pc, #628]	; (1874 <loop+0x1094>)
    1600:	clz	r1, r1
    1604:	lsrs	r1, r1, #5
    1606:	bl	2c98 <digitalWrite>
    160a:	b.w	7f4 <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
    160e:	ldr	r3, [r4, #16]
    1610:	ldr	r2, [r4, #12]
    1612:	add.w	r2, r3, r2, lsl #2
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
    1616:	sub.w	r3, r0, r0, lsl #2
    161a:	lsls	r3, r3, #2
    161c:	it	mi
    161e:	addwmi	r3, r3, #1023	; 0x3ff
    1622:	ldr	r2, [r2, #4]
    1624:	asrs	r3, r3, #10
    1626:	adds	r3, #51	; 0x33
    1628:	str	r3, [r2, #8]
    162a:	b.w	c98 <loop+0x4b8>
    162e:	ldr	r3, [r4, #16]
    1630:	ldr	r2, [r4, #12]
    1632:	add.w	r2, r3, r2, lsl #2
    1636:	sub.w	r3, r0, r0, lsl #2
    163a:	lsls	r3, r3, #2
    163c:	it	mi
    163e:	addwmi	r3, r3, #1023	; 0x3ff
    1642:	ldr	r2, [r2, #4]
    1644:	asrs	r3, r3, #10
    1646:	adds	r3, #51	; 0x33
    1648:	str	r3, [r2, #8]
    164a:	b.w	c3e <loop+0x45e>
    164e:	ldr	r3, [r4, #16]
    1650:	ldr	r2, [r4, #12]
    1652:	add.w	r2, r3, r2, lsl #2
    1656:	sub.w	r3, r0, r0, lsl #2
    165a:	lsls	r3, r3, #2
    165c:	it	mi
    165e:	addwmi	r3, r3, #1023	; 0x3ff
    1662:	ldr	r2, [r2, #4]
    1664:	asrs	r3, r3, #10
    1666:	adds	r3, #51	; 0x33
    1668:	str	r3, [r2, #8]
    166a:	b.w	be4 <loop+0x404>
    166e:	ldr	r3, [r4, #16]
    1670:	ldr	r2, [r4, #12]
    1672:	add.w	r2, r3, r2, lsl #2
    1676:	sub.w	r3, r0, r0, lsl #2
    167a:	lsls	r3, r3, #2
    167c:	it	mi
    167e:	addwmi	r3, r3, #1023	; 0x3ff
    1682:	ldr	r2, [r2, #4]
    1684:	asrs	r3, r3, #10
    1686:	adds	r3, #51	; 0x33
    1688:	str	r3, [r2, #8]
    168a:	b.w	b30 <loop+0x350>
    168e:	ldr	r3, [r4, #16]
    1690:	ldr	r2, [r4, #12]
    1692:	add.w	r2, r3, r2, lsl #2
    1696:	sub.w	r3, r0, r0, lsl #2
    169a:	lsls	r3, r3, #2
    169c:	it	mi
    169e:	addwmi	r3, r3, #1023	; 0x3ff
    16a2:	ldr	r2, [r2, #4]
    16a4:	asrs	r3, r3, #10
    16a6:	adds	r3, #51	; 0x33
    16a8:	str	r3, [r2, #8]
    16aa:	b.w	b8a <loop+0x3aa>
    16ae:	movs	r1, #6
    16b0:	ldr	r0, [pc, #456]	; (187c <loop+0x109c>)
    16b2:	bl	2688 <usb_serial_write>
    16b6:	ldr	r0, [pc, #456]	; (1880 <loop+0x10a0>)
    16b8:	bl	41fc <Print::println()>
    16bc:	ldr.w	r3, [r8, #28]
    16c0:	ldr.w	r7, [r8, #32]
    16c4:	ldrb.w	r5, [r8, #36]	; 0x24
    16c8:	b.n	15ca <loop+0xdea>
    16ca:	movs	r1, #6
    16cc:	ldr	r0, [pc, #428]	; (187c <loop+0x109c>)
    16ce:	bl	2688 <usb_serial_write>
    16d2:	ldr	r0, [pc, #428]	; (1880 <loop+0x10a0>)
    16d4:	bl	41fc <Print::println()>
    16d8:	ldr.w	r3, [r8, #28]
    16dc:	ldr.w	r6, [r8, #32]
    16e0:	ldrb.w	r7, [r8, #36]	; 0x24
    16e4:	b.n	1510 <loop+0xd30>
    16e6:	movs	r1, #6
    16e8:	ldr	r0, [pc, #400]	; (187c <loop+0x109c>)
    16ea:	bl	2688 <usb_serial_write>
    16ee:	ldr	r0, [pc, #400]	; (1880 <loop+0x10a0>)
    16f0:	bl	41fc <Print::println()>
    16f4:	ldr.w	r3, [r8, #28]
    16f8:	ldr.w	r7, [r8, #32]
    16fc:	ldrb.w	r5, [r8, #36]	; 0x24
    1700:	b.n	1476 <loop+0xc96>
    1702:	movs	r1, #6
    1704:	ldr	r0, [pc, #372]	; (187c <loop+0x109c>)
    1706:	bl	2688 <usb_serial_write>
    170a:	ldr	r0, [pc, #372]	; (1880 <loop+0x10a0>)
    170c:	bl	41fc <Print::println()>
    1710:	ldr.w	r3, [r8, #28]
    1714:	ldr.w	r7, [r8, #32]
    1718:	ldrb.w	r6, [r8, #36]	; 0x24
    171c:	b.n	13dc <loop+0xbfc>
    171e:	movs	r1, #6
    1720:	ldr	r0, [pc, #344]	; (187c <loop+0x109c>)
    1722:	bl	2688 <usb_serial_write>
    1726:	ldr	r0, [pc, #344]	; (1880 <loop+0x10a0>)
    1728:	bl	41fc <Print::println()>
    172c:	ldr.w	r3, [r8, #28]
    1730:	ldr.w	r7, [r8, #32]
    1734:	ldrb.w	r6, [r8, #36]	; 0x24
    1738:	b.n	1342 <loop+0xb62>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    173a:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
    173e:	ldr	r3, [r4, #20]
    1740:	bge.w	1ba8 <loop+0x13c8>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1744:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1746:	movs	r1, #6

        if (ppqn >= 6) {
    1748:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    174a:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    174c:	ble.n	1752 <loop+0xf72>
          ppqn = 0;
    174e:	movs	r2, #0
    1750:	str	r2, [r3, #8]
    1752:	ldr	r0, [r4, #4]
    1754:	b.w	b8a <loop+0x3aa>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1758:	cmp.w	r0, #400	; 0x190
    175c:	ldr	r3, [r4, #20]
    175e:	bge.w	1b8a <loop+0x13aa>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1762:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1764:	movs	r1, #6

        if (ppqn >= 6) {
    1766:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1768:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    176a:	ble.n	1770 <loop+0xf90>
          ppqn = 0;
    176c:	movs	r2, #0
    176e:	str	r2, [r3, #8]
    1770:	ldr	r0, [r4, #4]
    1772:	b.w	b30 <loop+0x350>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1776:	cmp.w	r0, #400	; 0x190
    177a:	ldr	r3, [r4, #20]
    177c:	bge.w	1b44 <loop+0x1364>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1780:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1782:	movs	r1, #6

        if (ppqn >= 6) {
    1784:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1786:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1788:	ble.n	178e <loop+0xfae>
          ppqn = 0;
    178a:	movs	r2, #0
    178c:	str	r2, [r3, #8]
    178e:	ldr	r0, [r4, #4]
    1790:	b.w	c98 <loop+0x4b8>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1794:	cmp.w	r0, #400	; 0x190
    1798:	ldr	r3, [r4, #20]
    179a:	bge.w	1b26 <loop+0x1346>
        max_ppqn = 6;

        if (ppqn >= 6) {
    179e:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    17a0:	movs	r1, #6

        if (ppqn >= 6) {
    17a2:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    17a4:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    17a6:	ble.n	17ac <loop+0xfcc>
          ppqn = 0;
    17a8:	movs	r2, #0
    17aa:	str	r2, [r3, #8]
    17ac:	ldr	r0, [r4, #4]
    17ae:	b.w	be4 <loop+0x404>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    17b2:	cmp.w	r0, #400	; 0x190
    17b6:	ldr	r3, [r4, #20]
    17b8:	bge.w	1b6c <loop+0x138c>
        max_ppqn = 6;

        if (ppqn >= 6) {
    17bc:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    17be:	movs	r1, #6

        if (ppqn >= 6) {
    17c0:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    17c2:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    17c4:	ble.n	17ca <loop+0xfea>
          ppqn = 0;
    17c6:	movs	r2, #0
    17c8:	str	r2, [r3, #8]
    17ca:	ldr	r0, [r4, #4]
    17cc:	b.w	c3e <loop+0x45e>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    17d0:	ldrb	r3, [r7, #17]
    17d2:	cmp	r3, #0
    17d4:	beq.w	1a30 <loop+0x1250>
    17d8:	ldr	r3, [r7, #28]
        if (m_sequence.getShiftMode()) {
    17da:	ldrb.w	r3, [r3, #46]	; 0x2e
    17de:	cmp	r3, #0
    17e0:	beq.w	1ca0 <loop+0x14c0>
    int getPage () {
      return m_page;
    }

    void nextPage () {
      if (m_page < 4) m_page++;
    17e4:	ldr	r1, [r6, #4]
    17e6:	cmp	r1, #3
    17e8:	itt	le
    17ea:	addle	r1, #1
    17ec:	strle	r1, [r6, #4]
    17ee:	b.w	fd4 <loop+0x7f4>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    17f2:	ldrb	r3, [r6, #17]
    17f4:	cmp	r3, #0
    17f6:	beq.w	19d0 <loop+0x11f0>
    17fa:	ldr	r3, [r6, #28]
        if (m_sequence.getShiftMode()) {
    17fc:	ldrb.w	r3, [r3, #46]	; 0x2e
    1800:	cmp	r3, #0
    1802:	beq.w	1c68 <loop+0x1488>
    1806:	ldr	r1, [r7, #4]
    1808:	cmp	r1, #3
    180a:	itt	le
    180c:	addle	r1, #1
    180e:	strle	r1, [r7, #4]
    1810:	b.n	10d0 <loop+0x8f0>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1812:	ldrb	r3, [r5, #17]
    1814:	cmp	r3, #0
    1816:	beq.w	1a60 <loop+0x1280>
    181a:	ldr	r3, [r5, #28]
        if (m_sequence.getShiftMode()) {
    181c:	ldrb.w	r3, [r3, #46]	; 0x2e
    1820:	cmp	r3, #0
    1822:	beq.w	1d48 <loop+0x1568>
    1826:	ldr	r1, [r7, #4]
    1828:	cmp	r1, #3
    182a:	itt	le
    182c:	addle	r1, #1
    182e:	strle	r1, [r7, #4]
    1830:	b.n	107c <loop+0x89c>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1832:	ldrb	r3, [r5, #17]
    1834:	cmp	r3, #0
    1836:	beq.w	1a00 <loop+0x1220>
    183a:	ldr	r3, [r5, #28]
        if (m_sequence.getShiftMode()) {
    183c:	ldrb.w	r3, [r3, #46]	; 0x2e
    1840:	cmp	r3, #0
    1842:	beq.w	1d10 <loop+0x1530>
    1846:	ldr	r1, [r7, #4]
    1848:	cmp	r1, #3
    184a:	itt	le
    184c:	addle	r1, #1
    184e:	strle	r1, [r7, #4]
    1850:	b.w	1028 <loop+0x848>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1854:	ldrb	r3, [r6, #17]
    1856:	cmp	r3, #0
    1858:	beq.w	19a0 <loop+0x11c0>
    185c:	ldr	r3, [r6, #28]
        if (m_sequence.getShiftMode()) {
    185e:	ldrb.w	r3, [r3, #46]	; 0x2e
    1862:	cmp	r3, #0
    1864:	beq.w	1cd8 <loop+0x14f8>
    1868:	ldr	r1, [r7, #4]
    186a:	cmp	r1, #3
    186c:	itt	le
    186e:	addle	r1, #1
    1870:	strle	r1, [r7, #4]
    1872:	b.n	1124 <loop+0x944>
    1874:	.word	0x1fff18fc
    1878:	.word	0x1fff1870
    187c:	.word	0x00005630
    1880:	.word	0x1fff0c70
    1884:	.word	0x1fff16ec
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    1888:	ldr	r5, [pc, #728]	; (1b64 <loop+0x1384>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    188a:	ldr	r4, [pc, #732]	; (1b68 <loop+0x1388>)
      ppqn = 0;
      m_sequence.doStep(); 
    188c:	ldr	r6, [r5, #12]
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    188e:	ldr	r3, [r6, #0]
    1890:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    1894:	mov.w	r9, #1
    1898:	ldr	r7, [r3, #20]
    189a:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    189e:	ldrb.w	sl, [r7]
      ppqn = 0;
    18a2:	mov.w	r8, #0
    18a6:	mov	r0, sl
    18a8:	str.w	r8, [r5, #8]
    18ac:	bl	2ca4 <digitalRead>
    18b0:	clz	r1, r0
    18b4:	lsrs	r1, r1, #5
    18b6:	mov	r0, sl
    18b8:	bl	2c98 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    18bc:	ldr	r3, [r6, #0]
    18be:	ldr	r1, [r4, #0]
    18c0:	str	r1, [sp, #16]
    18c2:	add.w	r2, r6, r3, lsl #2
	return ret;
    18c6:	ldr	r0, [sp, #16]
    18c8:	ldr	r2, [r2, #4]
      blinking = true;
    18ca:	strb.w	r9, [r7, #16]
    18ce:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
    18d0:	str.w	r8, [r7, #20]
      lastBlink = millis();  
    18d4:	str	r0, [r7, #8]
    18d6:	cmp	r1, #0
    18d8:	bne.w	1d8a <loop+0x15aa>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    18dc:	ldrb.w	r2, [r6, #45]	; 0x2d
    18e0:	cmp	r2, #0
    18e2:	beq.w	1bc6 <loop+0x13e6>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    18e6:	subs	r2, r3, #1
    18e8:	cmp	r3, #0
    18ea:	beq.w	1db0 <loop+0x15d0>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    18ee:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    18f0:	ldr	r3, [r5, #12]
    18f2:	ldr	r5, [r3, #40]	; 0x28
    };

    void toggle () {
      m_state = !m_state;
    18f4:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    18f6:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    18f8:	clz	r1, r1
    18fc:	lsrs	r1, r1, #5
    18fe:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1900:	bl	2c98 <digitalWrite>

      if (blinking) {
    1904:	ldrb	r3, [r5, #16]
    1906:	cmp	r3, #0
    1908:	beq.w	7f4 <loop+0x14>
        digitalWrite(m_pin, !m_state);
    190c:	ldr	r1, [r5, #4]
    190e:	ldrb	r0, [r5, #0]
    1910:	clz	r1, r1
    1914:	lsrs	r1, r1, #5
    1916:	bl	2c98 <digitalWrite>
    191a:	b.w	7f4 <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    191e:	ldr	r5, [pc, #580]	; (1b64 <loop+0x1384>)

      m_sequence.stopSteps(ppqn);
    1920:	ldr	r2, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    1922:	ldr	r3, [r5, #8]
        }
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
    1924:	ldr	r1, [r2, #0]
    1926:	add.w	r2, r2, r1, lsl #2
    192a:	adds	r3, #1
    192c:	ldr	r2, [r2, #4]
    192e:	str	r3, [r5, #8]
    void reverse () {
      m_reverse = !m_reverse;
    };

    void stopSteps (int ppqn) {
      if (stepIsOver(ppqn)) {
    1930:	ldr	r2, [r2, #16]
    1932:	cmp	r3, r2
    1934:	bge.w	1d80 <loop+0x15a0>

      m_sequence.stopSteps(ppqn);

      if (ppqn == max_ppqn) {
    1938:	ldr	r2, [r5, #4]
    193a:	ldr	r1, [pc, #552]	; (1b64 <loop+0x1384>)
    193c:	cmp	r2, r3
    193e:	bne.w	7f2 <loop+0x12>
        m_sequence.doStep(); 
    1942:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1944:	ldr	r4, [pc, #544]	; (1b68 <loop+0x1388>)
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    1946:	ldr	r3, [r6, #0]
    1948:	add.w	r3, r6, r3, lsl #2
    194c:	ldr	r7, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    194e:	ldrb.w	r8, [r7]
    1952:	mov	r0, r8
    1954:	bl	2ca4 <digitalRead>
    1958:	clz	r1, r0
    195c:	lsrs	r1, r1, #5
    195e:	mov	r0, r8
    1960:	bl	2c98 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    1964:	ldr	r3, [r6, #0]
    1966:	ldr	r0, [r4, #0]
    1968:	str	r0, [sp, #12]
    196a:	add.w	r2, r6, r3, lsl #2
      blinking = true;
    196e:	movs	r1, #1
    1970:	ldr	r2, [r2, #4]
    1972:	strb	r1, [r7, #16]
      blinkingCounter = times;
    1974:	movs	r1, #0
    1976:	str	r1, [r7, #20]
    1978:	ldrb	r1, [r2, #4]
	return ret;
    197a:	ldr	r0, [sp, #12]
      lastBlink = millis();  
    197c:	str	r0, [r7, #8]
    197e:	cmp	r1, #0
    1980:	bne.w	1fce <loop+0x17ee>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    1984:	ldrb.w	r2, [r6, #45]	; 0x2d
    1988:	cmp	r2, #0
    198a:	bne.w	1fc6 <loop+0x17e6>
        m_currentStep++;
    198e:	adds	r3, #1
    1990:	cmp	r3, #3
    1992:	it	gt
    1994:	movgt	r3, #0
    1996:	str	r3, [r6, #0]
        ppqn = 0;
    1998:	movs	r3, #0
    199a:	str	r3, [r5, #8]
    199c:	b.w	7f4 <loop+0x14>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    19a0:	ldr	r6, [r6, #24]
    };

    void toggle () {
      m_state = !m_state;
    19a2:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    19a4:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19a6:	clz	r1, r1
    19aa:	lsrs	r1, r1, #5
    19ac:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    19ae:	bl	2c98 <digitalWrite>

      if (blinking) {
    19b2:	ldrb	r3, [r6, #16]
    19b4:	cmp	r3, #0
    19b6:	bne.w	1c58 <loop+0x1478>
        m_sequence.m_steps[m_id - 1]->toggle();
    19ba:	ldr	r3, [r5, #28]
    19bc:	ldr	r2, [r5, #0]
    19be:	ldr	r7, [r5, #32]
    19c0:	ldr.w	r2, [r3, r2, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
    19c4:	ldrb	r3, [r2, #4]
    19c6:	eor.w	r3, r3, #1
    19ca:	strb	r3, [r2, #4]
    19cc:	b.w	846 <loop+0x66>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    19d0:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19d2:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    19d4:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19d6:	clz	r1, r1
    19da:	lsrs	r1, r1, #5
    19dc:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    19de:	bl	2c98 <digitalWrite>

      if (blinking) {
    19e2:	ldrb	r3, [r6, #16]
    19e4:	cmp	r3, #0
    19e6:	bne.w	1c48 <loop+0x1468>
        m_sequence.m_steps[m_id - 1]->toggle();
    19ea:	ldr	r3, [r5, #28]
    19ec:	ldr	r2, [r5, #0]
    19ee:	ldr	r7, [r5, #32]
    19f0:	ldr.w	r2, [r3, r2, lsl #2]
    19f4:	ldrb	r3, [r2, #4]
    19f6:	eor.w	r3, r3, #1
    19fa:	strb	r3, [r2, #4]
    19fc:	b.w	914 <loop+0x134>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1a00:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a02:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1a04:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a06:	clz	r1, r1
    1a0a:	lsrs	r1, r1, #5
    1a0c:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1a0e:	bl	2c98 <digitalWrite>

      if (blinking) {
    1a12:	ldrb	r3, [r5, #16]
    1a14:	cmp	r3, #0
    1a16:	bne.w	1c38 <loop+0x1458>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a1a:	ldr	r3, [r6, #28]
    1a1c:	ldr	r2, [r6, #0]
    1a1e:	ldr	r7, [r6, #32]
    1a20:	ldr.w	r2, [r3, r2, lsl #2]
    1a24:	ldrb	r3, [r2, #4]
    1a26:	eor.w	r3, r3, #1
    1a2a:	strb	r3, [r2, #4]
    1a2c:	b.w	978 <loop+0x198>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1a30:	ldr	r6, [r7, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a32:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1a34:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a36:	clz	r1, r1
    1a3a:	lsrs	r1, r1, #5
    1a3c:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1a3e:	bl	2c98 <digitalWrite>

      if (blinking) {
    1a42:	ldrb	r3, [r6, #16]
    1a44:	cmp	r3, #0
    1a46:	bne.w	1c28 <loop+0x1448>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a4a:	ldr	r3, [r5, #28]
    1a4c:	ldr	r2, [r5, #0]
    1a4e:	ldr	r6, [r5, #32]
    1a50:	ldr.w	r2, [r3, r2, lsl #2]
    1a54:	ldrb	r3, [r2, #4]
    1a56:	eor.w	r3, r3, #1
    1a5a:	strb	r3, [r2, #4]
    1a5c:	b.w	9dc <loop+0x1fc>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1a60:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a62:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1a64:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a66:	clz	r1, r1
    1a6a:	lsrs	r1, r1, #5
    1a6c:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1a6e:	bl	2c98 <digitalWrite>

      if (blinking) {
    1a72:	ldrb	r3, [r5, #16]
    1a74:	cmp	r3, #0
    1a76:	bne.w	1c18 <loop+0x1438>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a7a:	ldr	r3, [r6, #28]
    1a7c:	ldr	r2, [r6, #0]
    1a7e:	ldr	r7, [r6, #32]
    1a80:	ldr.w	r2, [r3, r2, lsl #2]
    1a84:	ldrb	r3, [r2, #4]
    1a86:	eor.w	r3, r3, #1
    1a8a:	strb	r3, [r2, #4]
    1a8c:	b.w	8aa <loop+0xca>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
    1a90:	ldr	r2, [r4, #12]
    1a92:	ldr	r3, [r4, #16]
    1a94:	add.w	r3, r3, r2, lsl #2
      m_pitch = newValue;
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
    1a98:	ldr	r2, [r3, #4]
    1a9a:	subs.w	r3, r0, r0, lsl #6
    1a9e:	it	mi
    1aa0:	addwmi	r3, r3, #1023	; 0x3ff
    1aa4:	asrs	r3, r3, #10
    1aa6:	adds	r3, #127	; 0x7f
    1aa8:	str	r3, [r2, #12]
    1aaa:	b.w	b8a <loop+0x3aa>
    1aae:	ldr	r2, [r4, #12]
    1ab0:	ldr	r3, [r4, #16]
    1ab2:	add.w	r3, r3, r2, lsl #2
    1ab6:	ldr	r2, [r3, #4]
    1ab8:	subs.w	r3, r0, r0, lsl #6
    1abc:	it	mi
    1abe:	addwmi	r3, r3, #1023	; 0x3ff
    1ac2:	asrs	r3, r3, #10
    1ac4:	adds	r3, #127	; 0x7f
    1ac6:	str	r3, [r2, #12]
    1ac8:	b.w	c3e <loop+0x45e>
    1acc:	ldr	r2, [r4, #12]
    1ace:	ldr	r3, [r4, #16]
    1ad0:	add.w	r3, r3, r2, lsl #2
    1ad4:	ldr	r2, [r3, #4]
    1ad6:	subs.w	r3, r0, r0, lsl #6
    1ada:	it	mi
    1adc:	addwmi	r3, r3, #1023	; 0x3ff
    1ae0:	asrs	r3, r3, #10
    1ae2:	adds	r3, #127	; 0x7f
    1ae4:	str	r3, [r2, #12]
    1ae6:	b.w	b30 <loop+0x350>
    1aea:	ldr	r2, [r4, #12]
    1aec:	ldr	r3, [r4, #16]
    1aee:	add.w	r3, r3, r2, lsl #2
    1af2:	ldr	r2, [r3, #4]
    1af4:	subs.w	r3, r0, r0, lsl #6
    1af8:	it	mi
    1afa:	addwmi	r3, r3, #1023	; 0x3ff
    1afe:	asrs	r3, r3, #10
    1b00:	adds	r3, #127	; 0x7f
    1b02:	str	r3, [r2, #12]
    1b04:	b.w	be4 <loop+0x404>
    1b08:	ldr	r2, [r4, #12]
    1b0a:	ldr	r3, [r4, #16]
    1b0c:	add.w	r3, r3, r2, lsl #2
    1b10:	ldr	r2, [r3, #4]
    1b12:	subs.w	r3, r0, r0, lsl #6
    1b16:	it	mi
    1b18:	addwmi	r3, r3, #1023	; 0x3ff
    1b1c:	asrs	r3, r3, #10
    1b1e:	adds	r3, #127	; 0x7f
    1b20:	str	r3, [r2, #12]
    1b22:	b.w	c98 <loop+0x4b8>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b26:	sub.w	r2, r0, #400	; 0x190
    1b2a:	cmp.w	r2, #400	; 0x190
    1b2e:	bcc.n	1c0a <loop+0x142a>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b30:	sub.w	r2, r0, #800	; 0x320
    1b34:	cmp	r2, #223	; 0xdf
    1b36:	bhi.w	be4 <loop+0x404>
        max_ppqn = 10;
    1b3a:	movs	r2, #10
    1b3c:	str	r2, [r3, #4]
    1b3e:	ldr	r0, [r4, #4]
    1b40:	b.w	be4 <loop+0x404>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b44:	sub.w	r2, r0, #400	; 0x190
    1b48:	cmp.w	r2, #400	; 0x190
    1b4c:	bcc.n	1bfc <loop+0x141c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b4e:	sub.w	r2, r0, #800	; 0x320
    1b52:	cmp	r2, #223	; 0xdf
    1b54:	bhi.w	c98 <loop+0x4b8>
        max_ppqn = 10;
    1b58:	movs	r2, #10
    1b5a:	str	r2, [r3, #4]
    1b5c:	ldr	r0, [r4, #4]
    1b5e:	b.w	c98 <loop+0x4b8>
    1b62:	nop
    1b64:	.word	0x1fff1870
    1b68:	.word	0x1fff18fc
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b6c:	sub.w	r2, r0, #400	; 0x190
    1b70:	cmp.w	r2, #400	; 0x190
    1b74:	bcc.n	1bee <loop+0x140e>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b76:	sub.w	r2, r0, #800	; 0x320
    1b7a:	cmp	r2, #223	; 0xdf
    1b7c:	bhi.w	c3e <loop+0x45e>
        max_ppqn = 10;
    1b80:	movs	r2, #10
    1b82:	str	r2, [r3, #4]
    1b84:	ldr	r0, [r4, #4]
    1b86:	b.w	c3e <loop+0x45e>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b8a:	sub.w	r2, r0, #400	; 0x190
    1b8e:	cmp.w	r2, #400	; 0x190
    1b92:	bcc.n	1be0 <loop+0x1400>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b94:	sub.w	r2, r0, #800	; 0x320
    1b98:	cmp	r2, #223	; 0xdf
    1b9a:	bhi.w	b30 <loop+0x350>
        max_ppqn = 10;
    1b9e:	movs	r2, #10
    1ba0:	str	r2, [r3, #4]
    1ba2:	ldr	r0, [r4, #4]
    1ba4:	b.w	b30 <loop+0x350>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1ba8:	sub.w	r2, r0, #400	; 0x190
    1bac:	cmp.w	r2, #400	; 0x190
    1bb0:	bcc.n	1bd2 <loop+0x13f2>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1bb2:	sub.w	r2, r0, #800	; 0x320
    1bb6:	cmp	r2, #223	; 0xdf
    1bb8:	bhi.w	b8a <loop+0x3aa>
        max_ppqn = 10;
    1bbc:	movs	r2, #10
    1bbe:	str	r2, [r3, #4]
    1bc0:	ldr	r0, [r4, #4]
    1bc2:	b.w	b8a <loop+0x3aa>
    1bc6:	adds	r3, #1
    1bc8:	cmp	r3, #3
    1bca:	it	gt
    1bcc:	movgt	r3, #0
    1bce:	str	r3, [r6, #0]
    1bd0:	b.n	18f0 <loop+0x1110>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    1bd2:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1bd4:	movs	r1, #8

        if (ppqn >= 8) {
    1bd6:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1bd8:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1bda:	bgt.w	174e <loop+0xf6e>
    1bde:	b.n	1752 <loop+0xf72>
    1be0:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1be2:	movs	r1, #8

        if (ppqn >= 8) {
    1be4:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1be6:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1be8:	bgt.w	176c <loop+0xf8c>
    1bec:	b.n	1770 <loop+0xf90>
    1bee:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1bf0:	movs	r1, #8

        if (ppqn >= 8) {
    1bf2:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1bf4:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1bf6:	bgt.w	17c6 <loop+0xfe6>
    1bfa:	b.n	17ca <loop+0xfea>
    1bfc:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1bfe:	movs	r1, #8

        if (ppqn >= 8) {
    1c00:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c02:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1c04:	bgt.w	178a <loop+0xfaa>
    1c08:	b.n	178e <loop+0xfae>
    1c0a:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c0c:	movs	r1, #8

        if (ppqn >= 8) {
    1c0e:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c10:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1c12:	bgt.w	17a8 <loop+0xfc8>
    1c16:	b.n	17ac <loop+0xfcc>
        digitalWrite(m_pin, !m_state);
    1c18:	ldr	r1, [r5, #4]
    1c1a:	ldrb	r0, [r5, #0]
    1c1c:	clz	r1, r1
    1c20:	lsrs	r1, r1, #5
    1c22:	bl	2c98 <digitalWrite>
    1c26:	b.n	1a7a <loop+0x129a>
    1c28:	ldr	r1, [r6, #4]
    1c2a:	ldrb	r0, [r6, #0]
    1c2c:	clz	r1, r1
    1c30:	lsrs	r1, r1, #5
    1c32:	bl	2c98 <digitalWrite>
    1c36:	b.n	1a4a <loop+0x126a>
    1c38:	ldr	r1, [r5, #4]
    1c3a:	ldrb	r0, [r5, #0]
    1c3c:	clz	r1, r1
    1c40:	lsrs	r1, r1, #5
    1c42:	bl	2c98 <digitalWrite>
    1c46:	b.n	1a1a <loop+0x123a>
    1c48:	ldr	r1, [r6, #4]
    1c4a:	ldrb	r0, [r6, #0]
    1c4c:	clz	r1, r1
    1c50:	lsrs	r1, r1, #5
    1c52:	bl	2c98 <digitalWrite>
    1c56:	b.n	19ea <loop+0x120a>
    1c58:	ldr	r1, [r6, #4]
    1c5a:	ldrb	r0, [r6, #0]
    1c5c:	clz	r1, r1
    1c60:	lsrs	r1, r1, #5
    1c62:	bl	2c98 <digitalWrite>
    1c66:	b.n	19ba <loop+0x11da>
      } else if (m_state == LOW && m_reverseButton) {
        if (m_sequence.getShiftMode()) {
          paginator->nextPage();
          Serial.println(paginator->getPage());
        } else {
          m_led.toggle();
    1c68:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c6a:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1c6c:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c6e:	clz	r1, r1
    1c72:	lsrs	r1, r1, #5
    1c74:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1c76:	bl	2c98 <digitalWrite>

      if (blinking) {
    1c7a:	ldrb	r3, [r6, #16]
    1c7c:	cbz	r3, 1c8c <loop+0x14ac>
        digitalWrite(m_pin, !m_state);
    1c7e:	ldr	r1, [r6, #4]
    1c80:	ldrb	r0, [r6, #0]
    1c82:	clz	r1, r1
    1c86:	lsrs	r1, r1, #5
    1c88:	bl	2c98 <digitalWrite>
    1c8c:	ldr	r2, [r5, #28]
    1c8e:	ldr	r7, [r5, #32]
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    1c90:	ldrb.w	r3, [r2, #45]	; 0x2d
    1c94:	eor.w	r3, r3, #1
    1c98:	strb.w	r3, [r2, #45]	; 0x2d
    1c9c:	b.w	914 <loop+0x134>
    1ca0:	ldr	r6, [r7, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1ca2:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1ca4:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1ca6:	clz	r1, r1
    1caa:	lsrs	r1, r1, #5
    1cac:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1cae:	bl	2c98 <digitalWrite>

      if (blinking) {
    1cb2:	ldrb	r3, [r6, #16]
    1cb4:	cbz	r3, 1cc4 <loop+0x14e4>
        digitalWrite(m_pin, !m_state);
    1cb6:	ldr	r1, [r6, #4]
    1cb8:	ldrb	r0, [r6, #0]
    1cba:	clz	r1, r1
    1cbe:	lsrs	r1, r1, #5
    1cc0:	bl	2c98 <digitalWrite>
    1cc4:	ldr	r2, [r5, #28]
    1cc6:	ldr	r6, [r5, #32]
    1cc8:	ldrb.w	r3, [r2, #45]	; 0x2d
    1ccc:	eor.w	r3, r3, #1
    1cd0:	strb.w	r3, [r2, #45]	; 0x2d
    1cd4:	b.w	9dc <loop+0x1fc>
    1cd8:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1cda:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1cdc:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1cde:	clz	r1, r1
    1ce2:	lsrs	r1, r1, #5
    1ce4:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1ce6:	bl	2c98 <digitalWrite>

      if (blinking) {
    1cea:	ldrb	r3, [r6, #16]
    1cec:	cbz	r3, 1cfc <loop+0x151c>
        digitalWrite(m_pin, !m_state);
    1cee:	ldr	r1, [r6, #4]
    1cf0:	ldrb	r0, [r6, #0]
    1cf2:	clz	r1, r1
    1cf6:	lsrs	r1, r1, #5
    1cf8:	bl	2c98 <digitalWrite>
    1cfc:	ldr	r2, [r5, #28]
    1cfe:	ldr	r7, [r5, #32]
    1d00:	ldrb.w	r3, [r2, #45]	; 0x2d
    1d04:	eor.w	r3, r3, #1
    1d08:	strb.w	r3, [r2, #45]	; 0x2d
    1d0c:	b.w	846 <loop+0x66>
    1d10:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d12:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1d14:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d16:	clz	r1, r1
    1d1a:	lsrs	r1, r1, #5
    1d1c:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1d1e:	bl	2c98 <digitalWrite>

      if (blinking) {
    1d22:	ldrb	r3, [r5, #16]
    1d24:	cbz	r3, 1d34 <loop+0x1554>
        digitalWrite(m_pin, !m_state);
    1d26:	ldr	r1, [r5, #4]
    1d28:	ldrb	r0, [r5, #0]
    1d2a:	clz	r1, r1
    1d2e:	lsrs	r1, r1, #5
    1d30:	bl	2c98 <digitalWrite>
    1d34:	ldr	r2, [r6, #28]
    1d36:	ldr	r7, [r6, #32]
    1d38:	ldrb.w	r3, [r2, #45]	; 0x2d
    1d3c:	eor.w	r3, r3, #1
    1d40:	strb.w	r3, [r2, #45]	; 0x2d
    1d44:	b.w	978 <loop+0x198>
    1d48:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d4a:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1d4c:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d4e:	clz	r1, r1
    1d52:	lsrs	r1, r1, #5
    1d54:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1d56:	bl	2c98 <digitalWrite>

      if (blinking) {
    1d5a:	ldrb	r3, [r5, #16]
    1d5c:	cbz	r3, 1d6c <loop+0x158c>
        digitalWrite(m_pin, !m_state);
    1d5e:	ldr	r1, [r5, #4]
    1d60:	ldrb	r0, [r5, #0]
    1d62:	clz	r1, r1
    1d66:	lsrs	r1, r1, #5
    1d68:	bl	2c98 <digitalWrite>
    1d6c:	ldr	r2, [r6, #28]
    1d6e:	ldr	r7, [r6, #32]
    1d70:	ldrb.w	r3, [r2, #45]	; 0x2d
    1d74:	eor.w	r3, r3, #1
    1d78:	strb.w	r3, [r2, #45]	; 0x2d
    1d7c:	b.w	8aa <loop+0xca>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1d80:	ldr	r0, [pc, #788]	; (2098 <loop+0x18b8>)
    1d82:	bl	2f24 <usb_midi_write_packed>
    1d86:	ldr	r3, [r5, #8]
    1d88:	b.n	1938 <loop+0x1158>
    1d8a:	ldr	r0, [r2, #8]
    1d8c:	ldr	r3, [r2, #12]
    1d8e:	lsls	r0, r0, #16
    1d90:	lsls	r3, r3, #24
    1d92:	and.w	r3, r3, #2130706432	; 0x7f000000
    1d96:	and.w	r0, r0, #8323072	; 0x7f0000
    1d9a:	orrs	r0, r3
    1d9c:	orr.w	r0, r0, #40704	; 0x9f00
    1da0:	orr.w	r0, r0, #9
    1da4:	bl	2f24 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1da8:	bl	2fc0 <usb_midi_flush_output>
    1dac:	ldr	r3, [r6, #0]
    1dae:	b.n	18dc <loop+0x10fc>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1db0:	movs	r3, #3
    1db2:	str	r3, [r6, #0]
    1db4:	b.n	18f0 <loop+0x1110>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1db6:	ldr	r7, [pc, #740]	; (209c <loop+0x18bc>)
    1db8:	ldrb	r2, [r7, #0]
    1dba:	cmp	r2, #0
    1dbc:	beq.w	2048 <loop+0x1868>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1dc0:	cmp	r2, #1
    1dc2:	beq.w	2206 <loop+0x1a26>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1dc6:	cmp	r2, #2
    1dc8:	bne.w	1130 <loop+0x950>
    1dcc:	movs	r1, #5
    1dce:	ldr	r0, [pc, #720]	; (20a0 <loop+0x18c0>)
        currentMode = PITCH;
    1dd0:	strb	r3, [r7, #0]
    1dd2:	str	r3, [sp, #4]
    1dd4:	bl	2688 <usb_serial_write>
    1dd8:	ldr	r0, [pc, #712]	; (20a4 <loop+0x18c4>)
    1dda:	bl	41fc <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1dde:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1de2:	ldrb.w	sl, [r7]
    1de6:	mov	r0, sl
    1de8:	bl	2ca4 <digitalRead>
    1dec:	clz	r1, r0
    1df0:	lsrs	r1, r1, #5
    1df2:	mov	r0, sl
    1df4:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1df8:	ldr.w	r2, [r8]
    1dfc:	str	r2, [sp, #260]	; 0x104
      blinking = true;
      blinkingCounter = times;
    1dfe:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1e00:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1e04:	ldr	r1, [sp, #260]	; 0x104
    1e06:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e08:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1e0a:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e0c:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1e0e:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1e10:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1e12:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1e14:	ldrb	r0, [r2, #0]
    1e16:	bl	2c98 <digitalWrite>
    1e1a:	ldr	r7, [r6, #32]
    1e1c:	b.w	846 <loop+0x66>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1e20:	ldr	r6, [pc, #632]	; (209c <loop+0x18bc>)
    1e22:	ldrb	r2, [r6, #0]
    1e24:	cmp	r2, #0
    1e26:	beq.w	20ac <loop+0x18cc>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1e2a:	cmp	r2, #1
    1e2c:	beq.w	223e <loop+0x1a5e>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1e30:	cmp	r2, #2
    1e32:	bne.w	fe0 <loop+0x800>
    1e36:	movs	r1, #5
    1e38:	ldr	r0, [pc, #612]	; (20a0 <loop+0x18c0>)
        currentMode = PITCH;
    1e3a:	strb	r3, [r6, #0]
    1e3c:	str	r3, [sp, #4]
    1e3e:	bl	2688 <usb_serial_write>
    1e42:	ldr	r0, [pc, #608]	; (20a4 <loop+0x18c4>)
    1e44:	bl	41fc <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1e48:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1e4c:	ldrb.w	sl, [r6]
    1e50:	mov	r0, sl
    1e52:	bl	2ca4 <digitalRead>
    1e56:	clz	r1, r0
    1e5a:	lsrs	r1, r1, #5
    1e5c:	mov	r0, sl
    1e5e:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e62:	ldr.w	r2, [r8]
    1e66:	str	r2, [sp, #308]	; 0x134
      blinking = true;
      blinkingCounter = times;
    1e68:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1e6a:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1e6e:	ldr	r1, [sp, #308]	; 0x134
    1e70:	str	r3, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e72:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1e74:	str	r1, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e76:	strb	r0, [r6, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1e78:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1e7a:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1e7c:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1e7e:	ldrb	r0, [r2, #0]
    1e80:	bl	2c98 <digitalWrite>
    1e84:	ldr	r6, [r7, #32]
    1e86:	b.w	9dc <loop+0x1fc>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1e8a:	ldr	r7, [pc, #528]	; (209c <loop+0x18bc>)
    1e8c:	ldrb	r2, [r7, #0]
    1e8e:	cmp	r2, #0
    1e90:	beq.w	20fa <loop+0x191a>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1e94:	cmp	r2, #1
    1e96:	beq.w	2196 <loop+0x19b6>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1e9a:	cmp	r2, #2
    1e9c:	bne.w	1034 <loop+0x854>
    1ea0:	movs	r1, #5
    1ea2:	ldr	r0, [pc, #508]	; (20a0 <loop+0x18c0>)
        currentMode = PITCH;
    1ea4:	strb	r3, [r7, #0]
    1ea6:	str	r3, [sp, #4]
    1ea8:	bl	2688 <usb_serial_write>
    1eac:	ldr	r0, [pc, #500]	; (20a4 <loop+0x18c4>)
    1eae:	bl	41fc <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1eb2:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1eb6:	ldrb.w	sl, [r7]
    1eba:	mov	r0, sl
    1ebc:	bl	2ca4 <digitalRead>
    1ec0:	clz	r1, r0
    1ec4:	lsrs	r1, r1, #5
    1ec6:	mov	r0, sl
    1ec8:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ecc:	ldr.w	r2, [r8]
    1ed0:	str	r2, [sp, #296]	; 0x128
      blinking = true;
      blinkingCounter = times;
    1ed2:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1ed4:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1ed8:	ldr	r1, [sp, #296]	; 0x128
    1eda:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1edc:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1ede:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ee0:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1ee2:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1ee4:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1ee6:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1ee8:	ldrb	r0, [r2, #0]
    1eea:	bl	2c98 <digitalWrite>
    1eee:	ldr	r7, [r5, #32]
    1ef0:	b.w	978 <loop+0x198>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1ef4:	ldr	r7, [pc, #420]	; (209c <loop+0x18bc>)
    1ef6:	ldrb	r2, [r7, #0]
    1ef8:	cmp	r2, #0
    1efa:	beq.n	1ffa <loop+0x181a>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1efc:	cmp	r2, #1
    1efe:	beq.w	2276 <loop+0x1a96>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1f02:	cmp	r2, #2
    1f04:	bne.w	1088 <loop+0x8a8>
    1f08:	movs	r1, #5
    1f0a:	ldr	r0, [pc, #404]	; (20a0 <loop+0x18c0>)
        currentMode = PITCH;
    1f0c:	strb	r3, [r7, #0]
    1f0e:	str	r3, [sp, #4]
    1f10:	bl	2688 <usb_serial_write>
    1f14:	ldr	r0, [pc, #396]	; (20a4 <loop+0x18c4>)
    1f16:	bl	41fc <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1f1a:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1f1e:	ldrb.w	sl, [r7]
    1f22:	mov	r0, sl
    1f24:	bl	2ca4 <digitalRead>
    1f28:	clz	r1, r0
    1f2c:	lsrs	r1, r1, #5
    1f2e:	mov	r0, sl
    1f30:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f34:	ldr.w	r2, [r8]
    1f38:	str	r2, [sp, #272]	; 0x110
      blinking = true;
      blinkingCounter = times;
    1f3a:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1f3c:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1f40:	ldr	r1, [sp, #272]	; 0x110
    1f42:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1f44:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1f46:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1f48:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1f4a:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1f4c:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1f4e:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1f50:	ldrb	r0, [r2, #0]
    1f52:	bl	2c98 <digitalWrite>
    1f56:	ldr	r7, [r5, #32]
    1f58:	b.w	8aa <loop+0xca>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1f5c:	ldr	r7, [pc, #316]	; (209c <loop+0x18bc>)
    1f5e:	ldrb	r2, [r7, #0]
    1f60:	cmp	r2, #0
    1f62:	beq.w	2148 <loop+0x1968>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1f66:	cmp	r2, #1
    1f68:	beq.w	21ce <loop+0x19ee>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1f6c:	cmp	r2, #2
    1f6e:	bne.w	10dc <loop+0x8fc>
    1f72:	movs	r1, #5
    1f74:	ldr	r0, [pc, #296]	; (20a0 <loop+0x18c0>)
        currentMode = PITCH;
    1f76:	strb	r3, [r7, #0]
    1f78:	str	r3, [sp, #4]
    1f7a:	bl	2688 <usb_serial_write>
    1f7e:	ldr	r0, [pc, #292]	; (20a4 <loop+0x18c4>)
    1f80:	bl	41fc <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1f84:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1f88:	ldrb.w	sl, [r7]
    1f8c:	mov	r0, sl
    1f8e:	bl	2ca4 <digitalRead>
    1f92:	clz	r1, r0
    1f96:	lsrs	r1, r1, #5
    1f98:	mov	r0, sl
    1f9a:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f9e:	ldr.w	r2, [r8]
    1fa2:	str	r2, [sp, #284]	; 0x11c
      blinking = true;
      blinkingCounter = times;
    1fa4:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1fa6:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1faa:	ldr	r1, [sp, #284]	; 0x11c
    1fac:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1fae:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1fb0:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1fb2:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1fb4:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1fb6:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1fb8:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1fba:	ldrb	r0, [r2, #0]
    1fbc:	bl	2c98 <digitalWrite>
    1fc0:	ldr	r7, [r6, #32]
    1fc2:	b.w	914 <loop+0x134>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1fc6:	subs	r2, r3, #1
    1fc8:	cbz	r3, 1ff4 <loop+0x1814>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1fca:	str	r2, [r6, #0]
    1fcc:	b.n	1998 <loop+0x11b8>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1fce:	ldr	r0, [r2, #8]
    1fd0:	ldr	r3, [r2, #12]
    1fd2:	lsls	r0, r0, #16
    1fd4:	lsls	r3, r3, #24
    1fd6:	and.w	r3, r3, #2130706432	; 0x7f000000
    1fda:	and.w	r0, r0, #8323072	; 0x7f0000
    1fde:	orrs	r0, r3
    1fe0:	orr.w	r0, r0, #40704	; 0x9f00
    1fe4:	orr.w	r0, r0, #9
    1fe8:	bl	2f24 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1fec:	bl	2fc0 <usb_midi_flush_output>
    1ff0:	ldr	r3, [r6, #0]
    1ff2:	b.n	1984 <loop+0x11a4>

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1ff4:	movs	r3, #3
    1ff6:	str	r3, [r6, #0]
    1ff8:	b.n	1998 <loop+0x11b8>
    1ffa:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1ffc:	mov.w	sl, #1
    2000:	ldr	r0, [pc, #164]	; (20a8 <loop+0x18c8>)
    2002:	strb.w	sl, [r7]
    2006:	bl	2688 <usb_serial_write>
    200a:	ldr	r0, [pc, #152]	; (20a4 <loop+0x18c4>)
    200c:	bl	41fc <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    2010:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    2014:	ldrb.w	r7, [r9]
    2018:	mov	r0, r7
    201a:	bl	2ca4 <digitalRead>
    201e:	clz	r1, r0
    2022:	lsrs	r1, r1, #5
    2024:	mov	r0, r7
    2026:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    202a:	ldr.w	r3, [r8]
    202e:	str	r3, [sp, #268]	; 0x10c
      blinking = true;
      blinkingCounter = times;
    2030:	movw	r3, #999	; 0x3e7
    2034:	str.w	r3, [r9, #20]
	return ret;
    2038:	ldr	r3, [sp, #268]	; 0x10c
    203a:	ldr	r7, [r5, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    203c:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    2040:	str.w	r3, [r9, #8]
    2044:	b.w	8aa <loop+0xca>
    2048:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    204a:	mov.w	sl, #1
    204e:	ldr	r0, [pc, #88]	; (20a8 <loop+0x18c8>)
    2050:	strb.w	sl, [r7]
    2054:	bl	2688 <usb_serial_write>
    2058:	ldr	r0, [pc, #72]	; (20a4 <loop+0x18c4>)
    205a:	bl	41fc <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    205e:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    2062:	ldrb.w	r7, [r9]
    2066:	mov	r0, r7
    2068:	bl	2ca4 <digitalRead>
    206c:	clz	r1, r0
    2070:	lsrs	r1, r1, #5
    2072:	mov	r0, r7
    2074:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2078:	ldr.w	r3, [r8]
    207c:	str	r3, [sp, #256]	; 0x100
      blinking = true;
      blinkingCounter = times;
    207e:	movw	r3, #999	; 0x3e7
    2082:	str.w	r3, [r9, #20]
	return ret;
    2086:	ldr	r3, [sp, #256]	; 0x100
    2088:	ldr	r7, [r6, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    208a:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    208e:	str.w	r3, [r9, #8]
    2092:	b.w	846 <loop+0x66>
    2096:	nop
    2098:	.word	0x7f7bbf0b
    209c:	.word	0x1fff1880
    20a0:	.word	0x00005658
    20a4:	.word	0x1fff0c70
    20a8:	.word	0x00005640
    20ac:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    20ae:	mov.w	sl, #1
    20b2:	ldr	r0, [pc, #536]	; (22cc <loop+0x1aec>)
    20b4:	strb.w	sl, [r6]
    20b8:	bl	2688 <usb_serial_write>
    20bc:	ldr	r0, [pc, #528]	; (22d0 <loop+0x1af0>)
    20be:	bl	41fc <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    20c2:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    20c6:	ldrb.w	r6, [r9]
    20ca:	mov	r0, r6
    20cc:	bl	2ca4 <digitalRead>
    20d0:	clz	r1, r0
    20d4:	lsrs	r1, r1, #5
    20d6:	mov	r0, r6
    20d8:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20dc:	ldr.w	r3, [r8]
    20e0:	str	r3, [sp, #304]	; 0x130
      blinking = true;
      blinkingCounter = times;
    20e2:	movw	r3, #999	; 0x3e7
    20e6:	str.w	r3, [r9, #20]
	return ret;
    20ea:	ldr	r3, [sp, #304]	; 0x130
    20ec:	ldr	r6, [r7, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    20ee:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    20f2:	str.w	r3, [r9, #8]
    20f6:	b.w	9dc <loop+0x1fc>
    20fa:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    20fc:	mov.w	sl, #1
    2100:	ldr	r0, [pc, #456]	; (22cc <loop+0x1aec>)
    2102:	strb.w	sl, [r7]
    2106:	bl	2688 <usb_serial_write>
    210a:	ldr	r0, [pc, #452]	; (22d0 <loop+0x1af0>)
    210c:	bl	41fc <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    2110:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    2114:	ldrb.w	r7, [r9]
    2118:	mov	r0, r7
    211a:	bl	2ca4 <digitalRead>
    211e:	clz	r1, r0
    2122:	lsrs	r1, r1, #5
    2124:	mov	r0, r7
    2126:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    212a:	ldr.w	r3, [r8]
    212e:	str	r3, [sp, #292]	; 0x124
      blinking = true;
      blinkingCounter = times;
    2130:	movw	r3, #999	; 0x3e7
    2134:	str.w	r3, [r9, #20]
	return ret;
    2138:	ldr	r3, [sp, #292]	; 0x124
    213a:	ldr	r7, [r5, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    213c:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    2140:	str.w	r3, [r9, #8]
    2144:	b.w	978 <loop+0x198>
    2148:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    214a:	mov.w	sl, #1
    214e:	ldr	r0, [pc, #380]	; (22cc <loop+0x1aec>)
    2150:	strb.w	sl, [r7]
    2154:	bl	2688 <usb_serial_write>
    2158:	ldr	r0, [pc, #372]	; (22d0 <loop+0x1af0>)
    215a:	bl	41fc <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    215e:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    2162:	ldrb.w	r7, [r9]
    2166:	mov	r0, r7
    2168:	bl	2ca4 <digitalRead>
    216c:	clz	r1, r0
    2170:	lsrs	r1, r1, #5
    2172:	mov	r0, r7
    2174:	bl	2c98 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2178:	ldr.w	r3, [r8]
    217c:	str	r3, [sp, #280]	; 0x118
      blinking = true;
      blinkingCounter = times;
    217e:	movw	r3, #999	; 0x3e7
    2182:	str.w	r3, [r9, #20]
	return ret;
    2186:	ldr	r3, [sp, #280]	; 0x118
    2188:	ldr	r7, [r6, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    218a:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    218e:	str.w	r3, [r9, #8]
    2192:	b.w	914 <loop+0x134>
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2196:	movs	r2, #2
    2198:	movs	r1, #10
    219a:	ldr	r0, [pc, #312]	; (22d4 <loop+0x1af4>)
    219c:	strb	r2, [r7, #0]
    219e:	str	r3, [sp, #4]
    21a0:	bl	2688 <usb_serial_write>
    21a4:	ldr	r0, [pc, #296]	; (22d0 <loop+0x1af0>)
    21a6:	bl	41fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    21aa:	ldr	r3, [sp, #4]
    21ac:	ldr.w	r0, [r9, #36]	; 0x24
    21b0:	mov	r1, r3
    21b2:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    21b6:	ldr.w	r2, [r9, #36]	; 0x24
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    21ba:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    21bc:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    21be:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    21c0:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    21c2:	ldrb	r0, [r2, #0]
    21c4:	bl	2c98 <digitalWrite>
    21c8:	ldr	r7, [r5, #32]
    21ca:	b.w	978 <loop+0x198>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    21ce:	movs	r2, #2
    21d0:	movs	r1, #10
    21d2:	ldr	r0, [pc, #256]	; (22d4 <loop+0x1af4>)
    21d4:	strb	r2, [r7, #0]
    21d6:	str	r3, [sp, #4]
    21d8:	bl	2688 <usb_serial_write>
    21dc:	ldr	r0, [pc, #240]	; (22d0 <loop+0x1af0>)
    21de:	bl	41fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    21e2:	ldr	r3, [sp, #4]
    21e4:	ldr.w	r0, [r9, #36]	; 0x24
    21e8:	mov	r1, r3
    21ea:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    21ee:	ldr.w	r2, [r9, #36]	; 0x24
    21f2:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    21f4:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    21f6:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    21f8:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    21fa:	ldrb	r0, [r2, #0]
    21fc:	bl	2c98 <digitalWrite>
    2200:	ldr	r7, [r6, #32]
    2202:	b.w	914 <loop+0x134>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2206:	movs	r2, #2
    2208:	movs	r1, #10
    220a:	ldr	r0, [pc, #200]	; (22d4 <loop+0x1af4>)
    220c:	strb	r2, [r7, #0]
    220e:	str	r3, [sp, #4]
    2210:	bl	2688 <usb_serial_write>
    2214:	ldr	r0, [pc, #184]	; (22d0 <loop+0x1af0>)
    2216:	bl	41fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    221a:	ldr	r3, [sp, #4]
    221c:	ldr.w	r0, [r9, #36]	; 0x24
    2220:	mov	r1, r3
    2222:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    2226:	ldr.w	r2, [r9, #36]	; 0x24
    222a:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    222c:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    222e:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    2230:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    2232:	ldrb	r0, [r2, #0]
    2234:	bl	2c98 <digitalWrite>
    2238:	ldr	r7, [r6, #32]
    223a:	b.w	846 <loop+0x66>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    223e:	movs	r2, #2
    2240:	movs	r1, #10
    2242:	ldr	r0, [pc, #144]	; (22d4 <loop+0x1af4>)
    2244:	strb	r2, [r6, #0]
    2246:	str	r3, [sp, #4]
    2248:	bl	2688 <usb_serial_write>
    224c:	ldr	r0, [pc, #128]	; (22d0 <loop+0x1af0>)
    224e:	bl	41fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    2252:	ldr	r3, [sp, #4]
    2254:	ldr.w	r0, [r9, #36]	; 0x24
    2258:	mov	r1, r3
    225a:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    225e:	ldr.w	r2, [r9, #36]	; 0x24
    2262:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2264:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    2266:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    2268:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    226a:	ldrb	r0, [r2, #0]
    226c:	bl	2c98 <digitalWrite>
    2270:	ldr	r6, [r7, #32]
    2272:	b.w	9dc <loop+0x1fc>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2276:	movs	r2, #2
    2278:	movs	r1, #10
    227a:	ldr	r0, [pc, #88]	; (22d4 <loop+0x1af4>)
    227c:	strb	r2, [r7, #0]
    227e:	str	r3, [sp, #4]
    2280:	bl	2688 <usb_serial_write>
    2284:	ldr	r0, [pc, #72]	; (22d0 <loop+0x1af0>)
    2286:	bl	41fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    228a:	ldr	r3, [sp, #4]
    228c:	ldr.w	r0, [r9, #36]	; 0x24
    2290:	mov	r1, r3
    2292:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    2296:	ldr.w	r2, [r9, #36]	; 0x24
    229a:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    229c:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    229e:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    22a0:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    22a2:	ldrb	r0, [r2, #0]
    22a4:	bl	2c98 <digitalWrite>
    22a8:	ldr	r7, [r5, #32]
    22aa:	b.w	8aa <loop+0xca>
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    22ae:	mov	r7, r3
    22b0:	b.w	93e <loop+0x15e>
    22b4:	mov	r7, r3
    22b6:	b.w	870 <loop+0x90>
    22ba:	mov	r6, r3
    22bc:	b.w	9a2 <loop+0x1c2>
    22c0:	mov	r7, r3
    22c2:	b.w	80c <loop+0x2c>
    22c6:	mov	r7, r3
    22c8:	b.w	8da <loop+0xfa>
    22cc:	.word	0x00005640
    22d0:	.word	0x1fff0c70
    22d4:	.word	0x0000564c

000022d8 <_GLOBAL__sub_I_currentMode>:
    22d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "definitions.h"
#include "controller.h"
#include "transport.h"
#include "step.h"

Led led1(3, LOW);
    22dc:	movs	r2, #0
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    22de:	sub	sp, #12
#include "definitions.h"
#include "controller.h"
#include "transport.h"
#include "step.h"

Led led1(3, LOW);
    22e0:	movs	r1, #3
    22e2:	ldr	r0, [pc, #616]	; (254c <_GLOBAL__sub_I_currentMode+0x274>)
    boolean m_reverse;
    boolean m_shiftMode;
    int m_page = 1;
    Paginator* m_paginator;

    Sequence (Step* steps[4], Led* leds[6]) {
    22e4:	ldr	r5, [pc, #616]	; (2550 <_GLOBAL__sub_I_currentMode+0x278>)
    22e6:	ldr	r7, [pc, #620]	; (2554 <_GLOBAL__sub_I_currentMode+0x27c>)
    22e8:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    22ec:	movs	r2, #0
    22ee:	movs	r1, #5
    22f0:	ldr	r0, [pc, #612]	; (2558 <_GLOBAL__sub_I_currentMode+0x280>)
    22f2:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    22f6:	movs	r2, #0
    22f8:	movs	r1, #7
    22fa:	ldr	r0, [pc, #608]	; (255c <_GLOBAL__sub_I_currentMode+0x284>)
    22fc:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    2300:	movs	r2, #0
    2302:	movs	r1, #9
    2304:	ldr	r0, [pc, #600]	; (2560 <_GLOBAL__sub_I_currentMode+0x288>)
    2306:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    230a:	movs	r2, #0
    230c:	movs	r1, #11
    230e:	ldr	r0, [pc, #596]	; (2564 <_GLOBAL__sub_I_currentMode+0x28c>)
    2310:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    2314:	movs	r2, #0
    2316:	movs	r1, #24
    2318:	ldr	r0, [pc, #588]	; (2568 <_GLOBAL__sub_I_currentMode+0x290>)
    231a:	bl	46c <Led::Led(int, int)>
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    231e:	ldr	r2, [pc, #588]	; (256c <_GLOBAL__sub_I_currentMode+0x294>)
    2320:	ldr	r3, [pc, #588]	; (2570 <_GLOBAL__sub_I_currentMode+0x298>)
    2322:	ldr.w	lr, [pc, #652]	; 25b0 <_GLOBAL__sub_I_currentMode+0x2d8>
    2326:	str.w	lr, [r2]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    232a:	movs	r0, #100	; 0x64
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    232c:	movs	r6, #0
      m_controller = controller;
      m_pitch = 38;
    232e:	movs	r4, #38	; 0x26
      m_velocity = 100;
      m_length = 4;
    2330:	movs	r1, #4

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2332:	str	r0, [r2, #12]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    2334:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    2336:	str	r4, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    2338:	str	r1, [r2, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    233a:	ldr	r2, [pc, #568]	; (2574 <_GLOBAL__sub_I_currentMode+0x29c>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    233c:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    233e:	str.w	lr, [r3]
      m_state = false;
    2342:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    2344:	str	r4, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    2346:	str	r1, [r3, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2348:	ldr	r3, [pc, #556]	; (2578 <_GLOBAL__sub_I_currentMode+0x2a0>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    234a:	str	r0, [r2, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    234c:	str.w	lr, [r2]
      m_state = false;
    2350:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    2352:	str	r4, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    2354:	str	r1, [r2, #16]
    2356:	movs	r2, #1

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2358:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    235a:	str.w	lr, [r3]
      m_state = false;
    235e:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    2360:	str	r4, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    2362:	str	r1, [r3, #16]
    2364:	str	r2, [r5, #48]	; 0x30
    2366:	add.w	r3, r5, #16
    236a:	add.w	r0, r5, #40	; 0x28
    236e:	mov	r2, r7
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
    2370:	ldr.w	r1, [r2], #4
    2374:	str.w	r1, [r3, #4]!
    boolean m_shiftMode;
    int m_page = 1;
    Paginator* m_paginator;

    Sequence (Step* steps[4], Led* leds[6]) {
      for (int i = 0; i < 6; i++) {
    2378:	cmp	r0, r3
    237a:	bne.n	2370 <_GLOBAL__sub_I_currentMode+0x98>
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    237c:	ldr	r3, [pc, #508]	; (257c <_GLOBAL__sub_I_currentMode+0x2a4>)
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    237e:	ldr	r6, [pc, #512]	; (2580 <_GLOBAL__sub_I_currentMode+0x2a8>)
    2380:	ldmia	r3, {r0, r1, r2, r3}
      };
      
      m_currentStep = 0;
    2382:	movs	r4, #0
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    2384:	str	r0, [r5, #4]
      
      m_currentStep = 0;
      m_mode = PITCH;
      m_reverse = false;

      m_paginator = new Paginator();
    2386:	movs	r0, #8
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    2388:	str	r2, [r5, #12]
    238a:	str	r1, [r5, #8]
    238c:	str	r3, [r5, #16]
      };
      
      m_currentStep = 0;
    238e:	str	r4, [r5, #0]
      m_mode = PITCH;
    2390:	strb.w	r4, [r5, #44]	; 0x2c
      m_reverse = false;
    2394:	strb.w	r4, [r5, #45]	; 0x2d

      m_paginator = new Paginator();
    2398:	bl	42c8 <operator new(unsigned int)>
    239c:	mov	r3, r0
  Sequence* m_sequence;
  private:
    int m_page = 1;  

  public:
    Paginator () {
    239e:	mov.w	r8, #1
    23a2:	str.w	r8, [r3, #4]
    23a6:	movs	r1, #15
    23a8:	ldr	r0, [pc, #472]	; (2584 <_GLOBAL__sub_I_currentMode+0x2ac>)
    23aa:	str	r3, [r5, #52]	; 0x34
    23ac:	bl	2688 <usb_serial_write>
    23b0:	ldr	r0, [pc, #468]	; (2588 <_GLOBAL__sub_I_currentMode+0x2b0>)
    23b2:	bl	41fc <Print::println()>
    23b6:	ldr	r3, [r5, #52]	; 0x34
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23b8:	ldr	r0, [pc, #460]	; (2588 <_GLOBAL__sub_I_currentMode+0x2b0>)
    23ba:	ldr	r1, [r3, #4]
    23bc:	bl	429c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    23c0:	ldr	r0, [pc, #452]	; (2588 <_GLOBAL__sub_I_currentMode+0x2b0>)
    23c2:	bl	41fc <Print::println()>
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    23c6:	mov.w	fp, #2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23ca:	ldr	r2, [pc, #448]	; (258c <_GLOBAL__sub_I_currentMode+0x2b4>)
    23cc:	str	r4, [r6, #8]
    23ce:	movs	r3, #24
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;
    23d0:	mov.w	r9, #1000	; 0x3e8

      pinMode(pin, INPUT);
    23d4:	mov	r1, r4
    23d6:	mov	r0, fp
    23d8:	str	r3, [r6, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23da:	ldr	r3, [r7, #0]
      m_state = false;
    23dc:	strb	r4, [r6, #0]
      m_id = id;
      m_pin = pin;
    23de:	mov.w	sl, #4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23e2:	strb.w	r4, [r2, #36]	; 0x24
    23e6:	str	r5, [r2, #28]
      m_id = id;
    23e8:	str.w	r8, [r2]
      m_pin = pin;
      m_shiftButton = shiftButton;
    23ec:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    23ee:	strb	r4, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23f0:	str	r3, [r2, #24]
      m_id = id;
      m_pin = pin;
    23f2:	str.w	fp, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;
    23f6:	str.w	r9, [r2, #48]	; 0x30
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    23fa:	str	r5, [r6, #12]

      pinMode(pin, INPUT);
    23fc:	bl	2cc0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2400:	ldr	r2, [pc, #396]	; (2590 <_GLOBAL__sub_I_currentMode+0x2b8>)
    2402:	ldr	r3, [r7, #4]
    2404:	strb.w	r4, [r2, #36]	; 0x24
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2408:	mov	r1, r4
    240a:	mov	r0, sl
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    240c:	str	r5, [r2, #28]
      m_id = id;
    240e:	str.w	fp, [r2]
      m_pin = pin;
      m_shiftButton = shiftButton;
    2412:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    2414:	strb	r4, [r2, #17]
      m_holdThreshold = 1000;
    2416:	str.w	r9, [r2, #48]	; 0x30
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    241a:	str	r3, [r2, #24]
      m_id = id;
      m_pin = pin;
    241c:	str.w	sl, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2420:	bl	2cc0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2424:	ldr	r2, [pc, #364]	; (2594 <_GLOBAL__sub_I_currentMode+0x2bc>)
    2426:	ldr	r3, [r7, #8]
    2428:	str	r3, [r2, #24]
      m_id = id;
    242a:	mov.w	ip, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    242e:	mov	r1, r4
    2430:	movs	r0, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2432:	strb.w	r4, [r2, #36]	; 0x24
    2436:	str	r5, [r2, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    2438:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    243a:	strb	r4, [r2, #17]
      m_holdThreshold = 1000;
    243c:	str.w	r9, [r2, #48]	; 0x30
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2440:	str.w	ip, [r2]
    2444:	str.w	ip, [sp, #4]
      m_pin = pin;
    2448:	str	r0, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    244a:	bl	2cc0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    244e:	ldr	r2, [pc, #328]	; (2598 <_GLOBAL__sub_I_currentMode+0x2c0>)
    2450:	ldr	r0, [r7, #12]
    2452:	str	r0, [r2, #24]
      m_id = id;
      m_pin = pin;
    2454:	mov.w	ip, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2458:	mov	r1, r4
    245a:	mov	r0, ip
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    245c:	strb.w	r4, [r2, #36]	; 0x24
    2460:	str	r5, [r2, #28]
      m_id = id;
    2462:	str.w	sl, [r2]
      m_pin = pin;
      m_shiftButton = shiftButton;
    2466:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    2468:	strb	r4, [r2, #17]
      m_holdThreshold = 1000;
    246a:	str.w	r9, [r2, #48]	; 0x30
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    246e:	str.w	ip, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2472:	bl	2cc0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2476:	ldr	r2, [pc, #292]	; (259c <_GLOBAL__sub_I_currentMode+0x2c4>)
    2478:	ldr	r0, [r7, #16]
    247a:	str	r0, [r2, #24]
      m_id = id;
      m_pin = pin;
    247c:	mov.w	ip, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2480:	movs	r0, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2482:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2484:	str	r0, [r2, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2486:	mov	r0, ip
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    2488:	str.w	ip, [r2, #52]	; 0x34
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    248c:	strb.w	r4, [r2, #36]	; 0x24
    2490:	str	r5, [r2, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    2492:	strb.w	r8, [r2, #16]
      m_reverseButton = reverseButton;
    2496:	strb	r4, [r2, #17]
      m_holdThreshold = 1000;
    2498:	str.w	r9, [r2, #48]	; 0x30

      pinMode(pin, INPUT);
    249c:	bl	2cc0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24a0:	ldr.w	lr, [pc, #272]	; 25b4 <_GLOBAL__sub_I_currentMode+0x2dc>
    24a4:	ldr	r7, [r7, #20]
    24a6:	str.w	r7, [lr, #24]
      m_id = id;
      m_pin = pin;
    24aa:	movs	r2, #12
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    24ac:	ldr	r7, [pc, #240]	; (25a0 <_GLOBAL__sub_I_currentMode+0x2c8>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24ae:	str.w	r5, [lr, #28]
      m_id = id;
    24b2:	movs	r3, #6
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    24b4:	mov	r0, r2
    24b6:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    24b8:	str.w	r3, [lr]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24bc:	strb.w	r4, [lr, #36]	; 0x24
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    24c0:	strb.w	r4, [lr, #16]
      m_reverseButton = reverseButton;
    24c4:	strb.w	r8, [lr, #17]
      m_holdThreshold = 1000;
    24c8:	str.w	r9, [lr, #48]	; 0x30
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    24cc:	str.w	r2, [lr, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    24d0:	bl	2cc0 <pinMode>
    24d4:	ldr.w	lr, [pc, #224]	; 25b8 <_GLOBAL__sub_I_currentMode+0x2e0>
    24d8:	ldr	r0, [pc, #200]	; (25a4 <_GLOBAL__sub_I_currentMode+0x2cc>)
    24da:	ldr	r1, [pc, #204]	; (25a8 <_GLOBAL__sub_I_currentMode+0x2d0>)
    24dc:	ldr	r2, [pc, #204]	; (25ac <_GLOBAL__sub_I_currentMode+0x2d4>)
      m_pin = pin;
      m_knobType = knobType;
    24de:	strb.w	r4, [lr, #24]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    24e2:	mov.w	ip, #15
    24e6:	mov.w	r9, #14
    24ea:	strb.w	ip, [r7]
      m_knobType = knobType;
    24ee:	ldr.w	ip, [sp, #4]
      m_id = id;
    24f2:	str.w	r4, [lr, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    24f6:	strb.w	r9, [lr]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    24fa:	str.w	r6, [lr, #20]
    24fe:	str.w	r5, [lr, #16]
      m_pin = pin;
    2502:	movs	r4, #16
    2504:	mov.w	r9, #17
    2508:	mov.w	lr, #18
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    250c:	str	r6, [r7, #20]
    250e:	str	r5, [r7, #16]
      m_pin = pin;
      m_knobType = knobType;
    2510:	strb.w	r8, [r7, #24]
      m_id = id;
    2514:	str.w	r8, [r7, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2518:	str	r6, [r0, #20]
    251a:	str	r5, [r0, #16]
      m_pin = pin;
      m_knobType = knobType;
    251c:	strb.w	fp, [r0, #24]
      m_id = id;
    2520:	str.w	fp, [r0, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2524:	strb	r4, [r0, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2526:	str	r6, [r1, #20]
    2528:	str	r5, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    252a:	strb.w	ip, [r1, #24]
      m_id = id;
    252e:	str.w	ip, [r1, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2532:	strb.w	r9, [r1]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2536:	str	r6, [r2, #20]
    2538:	str	r5, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    253a:	strb.w	sl, [r2, #24]
      m_id = id;
    253e:	str.w	sl, [r2, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2542:	strb.w	lr, [r2]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    2546:	add	sp, #12
    2548:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    254c:	.word	0x1fff1884
    2550:	.word	0x1fff175c
    2554:	.word	0x1fff0c50
    2558:	.word	0x1fff189c
    255c:	.word	0x1fff18b4
    2560:	.word	0x1fff18cc
    2564:	.word	0x1fff15d8
    2568:	.word	0x1fff15f0
    256c:	.word	0x1fff1794
    2570:	.word	0x1fff17a8
    2574:	.word	0x1fff17bc
    2578:	.word	0x1fff17d0
    257c:	.word	0x1fff0c40
    2580:	.word	0x1fff1870
    2584:	.word	0x00005690
    2588:	.word	0x1fff0c70
    258c:	.word	0x1fff160c
    2590:	.word	0x1fff1644
    2594:	.word	0x1fff167c
    2598:	.word	0x1fff16b4
    259c:	.word	0x1fff16ec
    25a0:	.word	0x1fff1800
    25a4:	.word	0x1fff181c
    25a8:	.word	0x1fff1838
    25ac:	.word	0x1fff1854
    25b0:	.word	0x1fff1608
    25b4:	.word	0x1fff1724
    25b8:	.word	0x1fff17e4

000025bc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    25bc:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    25be:	ldr	r5, [pc, #60]	; (25fc <usb_serial_getchar+0x40>)
    25c0:	ldr	r0, [r5, #0]
    25c2:	cbz	r0, 25e4 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    25c4:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    25c6:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    25c8:	adds	r1, r0, r3
    25ca:	adds	r3, #1
	if (i >= rx_packet->len) {
    25cc:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    25ce:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    25d0:	bcs.n	25d8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    25d2:	strh	r3, [r0, #2]
	}
	return c;
    25d4:	mov	r0, r4
}
    25d6:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    25d8:	bl	3468 <usb_free>
		rx_packet = NULL;
    25dc:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    25de:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    25e0:	str	r3, [r5, #0]
    25e2:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    25e4:	ldr	r3, [pc, #24]	; (2600 <usb_serial_getchar+0x44>)
    25e6:	ldrb	r3, [r3, #0]
    25e8:	cbz	r3, 25f6 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    25ea:	movs	r0, #2
    25ec:	bl	34b4 <usb_rx>
    25f0:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    25f2:	cmp	r0, #0
    25f4:	bne.n	25c4 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    25f6:	mov.w	r0, #4294967295
    25fa:	pop	{r3, r4, r5, pc}
    25fc:	.word	0x1fff18f0
    2600:	.word	0x1fff1a50

00002604 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    2604:	push	{r4, lr}
	if (!rx_packet) {
    2606:	ldr	r4, [pc, #36]	; (262c <usb_serial_peekchar+0x28>)
    2608:	ldr	r0, [r4, #0]
    260a:	cbz	r0, 2614 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    260c:	ldrh	r3, [r0, #2]
    260e:	add	r0, r3
    2610:	ldrb	r0, [r0, #8]
}
    2612:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2614:	ldr	r3, [pc, #24]	; (2630 <usb_serial_peekchar+0x2c>)
    2616:	ldrb	r3, [r3, #0]
    2618:	cbz	r3, 2626 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    261a:	movs	r0, #2
    261c:	bl	34b4 <usb_rx>
    2620:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    2622:	cmp	r0, #0
    2624:	bne.n	260c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2626:	mov.w	r0, #4294967295
    262a:	pop	{r4, pc}
    262c:	.word	0x1fff18f0
    2630:	.word	0x1fff1a50

00002634 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2634:	ldr	r3, [pc, #16]	; (2648 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    2636:	ldr	r2, [pc, #20]	; (264c <usb_serial_available+0x18>)
    2638:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    263a:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    263c:	cbz	r3, 2646 <usb_serial_available+0x12>
    263e:	ldrh	r2, [r3, #0]
    2640:	ldrh	r3, [r3, #2]
    2642:	subs	r3, r2, r3
    2644:	add	r0, r3
	return count;
}
    2646:	bx	lr
    2648:	.word	0x1fff18f0
    264c:	.word	0x1fff1ee4

00002650 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    2650:	ldr	r3, [pc, #44]	; (2680 <usb_serial_flush_input+0x30>)
    2652:	ldrb	r3, [r3, #0]
    2654:	cbz	r3, 267e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    2656:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    2658:	ldr	r4, [pc, #40]	; (2684 <usb_serial_flush_input+0x34>)
    265a:	ldr	r0, [r4, #0]
    265c:	cbz	r0, 2672 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    265e:	bl	3468 <usb_free>
		rx_packet = NULL;
    2662:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2664:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    2666:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2668:	bl	34b4 <usb_rx>
		if (!rx) break;
    266c:	cbz	r0, 267c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    266e:	bl	3468 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2672:	movs	r0, #2
    2674:	bl	34b4 <usb_rx>
		if (!rx) break;
    2678:	cmp	r0, #0
    267a:	bne.n	266e <usb_serial_flush_input+0x1e>
    267c:	pop	{r4, pc}
    267e:	bx	lr
    2680:	.word	0x1fff1a50
    2684:	.word	0x1fff18f0

00002688 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    2688:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    268c:	ldr.w	r9, [pc, #248]	; 2788 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    2690:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    2692:	movs	r2, #1
    2694:	strb.w	r2, [r9]
	while (size > 0) {
    2698:	str	r1, [sp, #4]
    269a:	cbz	r1, 26f8 <usb_serial_write+0x70>
    269c:	ldr.w	r8, [pc, #236]	; 278c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    26a0:	ldr	r7, [pc, #212]	; (2778 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    26a2:	ldr	r6, [sp, #4]
    26a4:	mov	fp, r0
		if (!tx_packet) {
    26a6:	ldr.w	r0, [r8]
    26aa:	cbz	r0, 271a <usb_serial_write+0x92>
    26ac:	ldr	r5, [pc, #204]	; (277c <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    26ae:	ldrh	r4, [r0, #2]
    26b0:	rsb	r1, r4, #64	; 0x40
    26b4:	cmp	r1, r6
    26b6:	it	cs
    26b8:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    26ba:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    26be:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    26c0:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    26c4:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    26c6:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    26c8:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    26cc:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    26d0:	cbz	r1, 26e8 <usb_serial_write+0x60>
    26d2:	subs	r4, #1
    26d4:	add	r2, r4
    26d6:	add	r1, fp
    26d8:	ldrb.w	r4, [fp], #1
    26dc:	strb.w	r4, [r2, #1]!
    26e0:	cmp	fp, r1
    26e2:	bne.n	26d8 <usb_serial_write+0x50>
    26e4:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    26e8:	cmp.w	lr, #63	; 0x3f
    26ec:	bhi.n	2706 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    26ee:	ldr	r2, [pc, #144]	; (2780 <usb_serial_write+0xf8>)
    26f0:	movs	r1, #5
    26f2:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    26f4:	cmp	r6, #0
    26f6:	bne.n	26a6 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    26f8:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    26fa:	movs	r3, #0
    26fc:	strb.w	r3, [r9]
	return ret;
}
    2700:	add	sp, #12
    2702:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    2706:	movs	r2, #64	; 0x40
    2708:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    270a:	mov	r1, r0
    270c:	movs	r0, #3
    270e:	bl	3604 <usb_tx>
			tx_packet = NULL;
    2712:	movs	r2, #0
    2714:	str.w	r2, [r8]
    2718:	b.n	26ee <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    271a:	ldrb	r2, [r7, #0]
    271c:	cbz	r2, 2768 <usb_serial_write+0xe0>
    271e:	ldr	r4, [pc, #100]	; (2784 <usb_serial_write+0xfc>)
    2720:	ldr	r5, [pc, #88]	; (277c <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    2722:	mov.w	sl, #1
    2726:	b.n	2738 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2728:	subs	r4, #1
    272a:	beq.n	275a <usb_serial_write+0xd2>
    272c:	ldrb	r2, [r5, #0]
    272e:	cbnz	r2, 275a <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    2730:	bl	4108 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2734:	ldrb	r2, [r7, #0]
    2736:	cbz	r2, 2768 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2738:	movs	r0, #3
    273a:	bl	34f0 <usb_tx_packet_count>
    273e:	cmp	r0, #7
    2740:	bhi.n	2728 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    2742:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    2746:	bl	3428 <usb_malloc>
    274a:	str.w	r0, [r8]
					if (tx_packet) break;
    274e:	cmp	r0, #0
    2750:	bne.n	26ae <usb_serial_write+0x26>
					tx_noautoflush = 0;
    2752:	ldr	r3, [pc, #52]	; (2788 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2754:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    2756:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2758:	bne.n	272c <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    275a:	movs	r3, #1
					return -1;
    275c:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    2760:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    2762:	add	sp, #12
    2764:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    2768:	movs	r3, #0
					return -1;
    276a:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    276e:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    2772:	add	sp, #12
    2774:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2778:	.word	0x1fff1a50
    277c:	.word	0x1fff18ec
    2780:	.word	0x1fff18e4
    2784:	.word	0x00014821
    2788:	.word	0x1fff18e5
    278c:	.word	0x1fff18e8

00002790 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2790:	push	{lr}
    2792:	sub	sp, #12
    2794:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    2796:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2798:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    279c:	mov	r0, r3
    279e:	bl	2688 <usb_serial_write>
}
    27a2:	add	sp, #12
    27a4:	ldr.w	pc, [sp], #4

000027a8 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    27a8:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    27aa:	ldr	r5, [pc, #56]	; (27e4 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    27ac:	ldr	r4, [pc, #56]	; (27e8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    27ae:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    27b0:	movs	r3, #1
    27b2:	strb	r3, [r4, #0]
	if (!tx_packet) {
    27b4:	cbz	r0, 27c2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    27b6:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    27b8:	movs	r3, #0
    27ba:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    27bc:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    27c0:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    27c2:	ldr	r3, [pc, #40]	; (27ec <usb_serial_write_buffer_free+0x44>)
    27c4:	ldrb	r3, [r3, #0]
    27c6:	cbnz	r3, 27ce <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    27c8:	movs	r0, #0
    27ca:	strb	r0, [r4, #0]
			return 0;
    27cc:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    27ce:	movs	r0, #3
    27d0:	bl	34f0 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    27d4:	cmp	r0, #7
    27d6:	bhi.n	27c8 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    27d8:	bl	3428 <usb_malloc>
    27dc:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    27de:	cmp	r0, #0
    27e0:	bne.n	27b6 <usb_serial_write_buffer_free+0xe>
    27e2:	b.n	27c8 <usb_serial_write_buffer_free+0x20>
    27e4:	.word	0x1fff18e8
    27e8:	.word	0x1fff18e5
    27ec:	.word	0x1fff1a50

000027f0 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    27f0:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    27f2:	ldr	r3, [pc, #68]	; (2838 <usb_serial_flush_output+0x48>)
    27f4:	ldrb	r3, [r3, #0]
    27f6:	cbz	r3, 281c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    27f8:	ldr	r6, [pc, #64]	; (283c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    27fa:	ldr	r5, [pc, #68]	; (2840 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    27fc:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    27fe:	movs	r7, #1
    2800:	strb	r7, [r5, #0]
	if (tx_packet) {
    2802:	cbz	r4, 281e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    2804:	ldr	r2, [pc, #60]	; (2844 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    2806:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    2808:	movs	r7, #0
    280a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    280c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    280e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2810:	movs	r0, #3
    2812:	bl	3604 <usb_tx>
		tx_packet = NULL;
    2816:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    2818:	movs	r3, #0
    281a:	strb	r3, [r5, #0]
    281c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    281e:	bl	3428 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    2822:	ldr	r3, [pc, #32]	; (2844 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    2824:	cbz	r0, 2832 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    2826:	mov	r1, r0
    2828:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    282a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    282c:	bl	3604 <usb_tx>
    2830:	b.n	2818 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2832:	strb	r7, [r3, #0]
    2834:	b.n	2818 <usb_serial_flush_output+0x28>
    2836:	nop
    2838:	.word	0x1fff1a50
    283c:	.word	0x1fff18e8
    2840:	.word	0x1fff18e5
    2844:	.word	0x1fff18e4

00002848 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    2848:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    284a:	ldr	r3, [pc, #56]	; (2884 <usb_serial_flush_callback+0x3c>)
    284c:	ldrb	r3, [r3, #0]
    284e:	cbnz	r3, 286e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2850:	ldr	r4, [pc, #52]	; (2888 <usb_serial_flush_callback+0x40>)
    2852:	ldr	r1, [r4, #0]
    2854:	cbz	r1, 2870 <usb_serial_flush_callback+0x28>
    2856:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    285a:	ldrh	r3, [r1, #2]
    285c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    285e:	movs	r0, #3
    2860:	bl	3604 <usb_tx>
		tx_packet = NULL;
    2864:	str	r5, [r4, #0]
    2866:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2868:	ldr	r3, [pc, #32]	; (288c <usb_serial_flush_callback+0x44>)
    286a:	movs	r2, #1
    286c:	strb	r2, [r3, #0]
    286e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2870:	bl	3428 <usb_malloc>
		if (tx) {
    2874:	cmp	r0, #0
    2876:	beq.n	2868 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    2878:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    287a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    287e:	movs	r0, #3
    2880:	b.w	3604 <usb_tx>
    2884:	.word	0x1fff18e5
    2888:	.word	0x1fff18e8
    288c:	.word	0x1fff18e4

00002890 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    2890:	ldr	r2, [pc, #220]	; (2970 <wait_for_cal+0xe0>)
    2892:	ldr	r1, [pc, #224]	; (2974 <wait_for_cal+0xe4>)
    2894:	ldr	r3, [r2, #0]
    2896:	lsls	r3, r3, #24
    2898:	bmi.n	2894 <wait_for_cal+0x4>
    289a:	ldr	r3, [r1, #0]
    289c:	ands.w	r3, r3, #128	; 0x80
    28a0:	bne.n	2894 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    28a2:	cpsid	i
	if (calibrating) {
    28a4:	ldr	r1, [pc, #208]	; (2978 <wait_for_cal+0xe8>)
    28a6:	ldrb	r2, [r1, #0]
    28a8:	cmp	r2, #0
    28aa:	beq.n	296c <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    28ac:	ldr	r2, [pc, #204]	; (297c <wait_for_cal+0xec>)
    28ae:	ldr	r0, [pc, #208]	; (2980 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    28b0:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    28b2:	ldr	r4, [pc, #208]	; (2984 <wait_for_cal+0xf4>)
    28b4:	ldr	r7, [r2, #0]
    28b6:	ldr	r6, [r0, #0]
    28b8:	ldr	r5, [r4, #0]
    28ba:	ldr	r4, [r2, #12]
    28bc:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    28be:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    28c0:	adds	r2, #20
    28c2:	ldr	r0, [r0, #0]
    28c4:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    28c6:	ldr	r7, [pc, #192]	; (2988 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    28c8:	add	r5, r6
    28ca:	add	r4, r5
    28cc:	add	r0, r4
    28ce:	add	r2, r0
    28d0:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    28d4:	ldr	r6, [pc, #180]	; (298c <wait_for_cal+0xfc>)
    28d6:	ldr	r0, [pc, #184]	; (2990 <wait_for_cal+0x100>)
    28d8:	ldr	r5, [pc, #184]	; (2994 <wait_for_cal+0x104>)
    28da:	ldr	r4, [pc, #188]	; (2998 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    28dc:	orr.w	r2, r2, #32768	; 0x8000
    28e0:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    28e2:	ldr	r7, [r6, #0]
    28e4:	ldr	r6, [r0, #0]
    28e6:	ldr	r5, [r5, #0]
    28e8:	ldr	r2, [pc, #176]	; (299c <wait_for_cal+0x10c>)
    28ea:	ldr	r4, [r4, #0]
    28ec:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    28ee:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    28f0:	ldr	r0, [r0, #0]
    28f2:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    28f4:	ldr	r7, [pc, #168]	; (29a0 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    28f6:	add	r5, r6
    28f8:	add	r4, r5
    28fa:	add	r0, r4
    28fc:	add	r2, r0
    28fe:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2902:	ldr	r6, [pc, #160]	; (29a4 <wait_for_cal+0x114>)
    2904:	ldr	r0, [pc, #160]	; (29a8 <wait_for_cal+0x118>)
    2906:	ldr	r5, [pc, #164]	; (29ac <wait_for_cal+0x11c>)
    2908:	ldr	r4, [pc, #164]	; (29b0 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    290a:	orr.w	r2, r2, #32768	; 0x8000
    290e:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2910:	ldr	r7, [r6, #0]
    2912:	ldr	r6, [r0, #0]
    2914:	ldr	r5, [r5, #0]
    2916:	ldr	r2, [pc, #156]	; (29b4 <wait_for_cal+0x124>)
    2918:	ldr	r4, [r4, #0]
    291a:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    291c:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    291e:	ldr	r0, [r0, #0]
    2920:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2922:	ldr	r7, [pc, #148]	; (29b8 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    2924:	add	r5, r6
    2926:	add	r4, r5
    2928:	add	r0, r4
    292a:	add	r2, r0
    292c:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2930:	ldr	r6, [pc, #136]	; (29bc <wait_for_cal+0x12c>)
    2932:	ldr	r0, [pc, #140]	; (29c0 <wait_for_cal+0x130>)
    2934:	ldr	r5, [pc, #140]	; (29c4 <wait_for_cal+0x134>)
    2936:	ldr	r4, [pc, #144]	; (29c8 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2938:	orr.w	r2, r2, #32768	; 0x8000
    293c:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    293e:	ldr	r7, [r6, #0]
    2940:	ldr	r6, [r0, #0]
    2942:	ldr	r5, [r5, #0]
    2944:	ldr	r2, [pc, #132]	; (29cc <wait_for_cal+0x13c>)
    2946:	ldr	r4, [r4, #0]
    2948:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    294a:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    294c:	ldr	r0, [r0, #0]
    294e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    2950:	add	r5, r6
    2952:	add	r4, r5
    2954:	add	r0, r4
    2956:	add	r2, r0
    2958:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    295c:	ldr	r0, [pc, #112]	; (29d0 <wait_for_cal+0x140>)
    295e:	orr.w	r2, r2, #32768	; 0x8000
    2962:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    2964:	strb	r3, [r1, #0]
	}
	__enable_irq();
    2966:	cpsie	i
}
    2968:	pop	{r4, r5, r6, r7}
    296a:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    296c:	cpsie	i
    296e:	bx	lr
    2970:	.word	0x4003b024
    2974:	.word	0x400bb024
    2978:	.word	0x1fff18f6
    297c:	.word	0x4003b038
    2980:	.word	0x4003b03c
    2984:	.word	0x4003b040
    2988:	.word	0x4003b02c
    298c:	.word	0x4003b058
    2990:	.word	0x4003b05c
    2994:	.word	0x4003b060
    2998:	.word	0x4003b064
    299c:	.word	0x4003b06c
    29a0:	.word	0x4003b030
    29a4:	.word	0x400bb038
    29a8:	.word	0x400bb03c
    29ac:	.word	0x400bb040
    29b0:	.word	0x400bb044
    29b4:	.word	0x400bb04c
    29b8:	.word	0x400bb02c
    29bc:	.word	0x400bb058
    29c0:	.word	0x400bb05c
    29c4:	.word	0x400bb060
    29c8:	.word	0x400bb064
    29cc:	.word	0x400bb06c
    29d0:	.word	0x400bb030

000029d4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    29d4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    29d6:	ldr	r0, [pc, #164]	; (2a7c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    29d8:	ldr	r2, [pc, #164]	; (2a80 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    29da:	ldr	r3, [pc, #168]	; (2a84 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    29dc:	ldr	r5, [pc, #168]	; (2a88 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    29de:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    29e0:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    29e2:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    29e4:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    29e6:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    29e8:	ldr	r4, [pc, #160]	; (2a8c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    29ea:	cmp	r3, #8
    29ec:	beq.n	2a50 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    29ee:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    29f0:	ldr	r0, [pc, #156]	; (2a90 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    29f2:	ldr	r1, [pc, #160]	; (2a94 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    29f4:	beq.n	2a66 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    29f6:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    29f8:	ite	eq
    29fa:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    29fc:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    29fe:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2a00:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2a02:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2a04:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2a06:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2a08:	ldr	r3, [pc, #140]	; (2a98 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a0a:	ldr	r1, [pc, #144]	; (2a9c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2a0c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a0e:	ldr	r2, [pc, #144]	; (2aa0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2a10:	cbz	r3, 2a42 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a12:	movs	r3, #1
    2a14:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a16:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2a18:	ldr	r3, [pc, #136]	; (2aa4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2a1a:	ldr	r1, [pc, #140]	; (2aa8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2a1c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2a1e:	ldr	r2, [pc, #140]	; (2aac <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2a20:	cmp	r3, #1
    2a22:	bls.n	2a72 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2a24:	cmp	r3, #4
    2a26:	bls.n	2a48 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2a28:	cmp	r3, #8
    2a2a:	bls.n	2a6a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2a2c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2a2e:	ite	ls
    2a30:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2a32:	movhi	r3, #135	; 0x87
    2a34:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2a36:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2a38:	ldr	r3, [pc, #116]	; (2ab0 <analog_init+0xdc>)
    2a3a:	movs	r2, #1
    2a3c:	strb	r2, [r3, #0]
}
    2a3e:	pop	{r4, r5}
    2a40:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2a42:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2a44:	str	r3, [r2, #0]
    2a46:	b.n	2a18 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2a48:	movs	r3, #132	; 0x84
    2a4a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2a4c:	str	r3, [r2, #0]
    2a4e:	b.n	2a38 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a50:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a54:	ldr	r1, [pc, #60]	; (2a94 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a56:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a58:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a5a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a5c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a5e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a60:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a62:	str	r3, [r1, #0]
    2a64:	b.n	2a08 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a66:	movs	r2, #57	; 0x39
    2a68:	b.n	2a5a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2a6a:	movs	r3, #133	; 0x85
    2a6c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2a6e:	str	r3, [r2, #0]
    2a70:	b.n	2a38 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2a72:	movs	r3, #128	; 0x80
    2a74:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2a76:	str	r3, [r2, #0]
    2a78:	b.n	2a38 <analog_init+0x64>
    2a7a:	nop
    2a7c:	.word	0x40074000
    2a80:	.word	0x40074001
    2a84:	.word	0x1fff0c68
    2a88:	.word	0x4003b008
    2a8c:	.word	0x4003b00c
    2a90:	.word	0x400bb008
    2a94:	.word	0x400bb00c
    2a98:	.word	0x1fff18f9
    2a9c:	.word	0x4003b020
    2aa0:	.word	0x400bb020
    2aa4:	.word	0x1fff0c69
    2aa8:	.word	0x4003b024
    2aac:	.word	0x400bb024
    2ab0:	.word	0x1fff18f6

00002ab4 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2ab4:	cmp	r0, #71	; 0x47
    2ab6:	bhi.n	2b18 <analogRead+0x64>
	channel = pin2sc1a[pin];
    2ab8:	ldr	r3, [pc, #204]	; (2b88 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    2aba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    2abe:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    2ac0:	cmp	r6, #255	; 0xff
    2ac2:	beq.n	2b1c <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2ac4:	ldr	r3, [pc, #196]	; (2b8c <analogRead+0xd8>)
    2ac6:	ldrb	r3, [r3, #0]
    2ac8:	cmp	r3, #0
    2aca:	bne.n	2b22 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2acc:	lsls	r2, r6, #24
    2ace:	bmi.n	2b2a <analogRead+0x76>
#endif

	__disable_irq();
    2ad0:	cpsid	i
    2ad2:	ldr	r5, [pc, #188]	; (2b90 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2ad4:	ldr	r4, [pc, #188]	; (2b94 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    2ad6:	mov	r7, r5
    2ad8:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2ada:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2adc:	strb	r3, [r5, #0]
	__enable_irq();
    2ade:	cpsie	i
	while (1) {
		__disable_irq();
    2ae0:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2ae2:	ldr	r3, [r4, #0]
    2ae4:	lsls	r3, r3, #24
    2ae6:	bmi.n	2b02 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2ae8:	ldrb	r3, [r7, #0]
    2aea:	cbnz	r3, 2af4 <analogRead+0x40>
    2aec:	b.n	2ad8 <analogRead+0x24>
    2aee:	ldrb	r3, [r5, #0]
    2af0:	cmp	r3, #0
    2af2:	beq.n	2ad8 <analogRead+0x24>
		__enable_irq();
    2af4:	cpsie	i
		yield();
    2af6:	bl	4108 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2afa:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2afc:	ldr	r3, [r4, #0]
    2afe:	lsls	r0, r3, #24
    2b00:	bpl.n	2aee <analogRead+0x3a>
			result = ADC0_RA;
    2b02:	ldr	r3, [pc, #148]	; (2b98 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2b04:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2b06:	movs	r2, #0
    2b08:	strb	r2, [r5, #0]
			__enable_irq();
    2b0a:	cpsie	i
			result >>= analog_right_shift;
    2b0c:	ldr	r2, [pc, #140]	; (2b9c <analogRead+0xe8>)
    2b0e:	ldrb	r0, [r2, #0]
    2b10:	asr.w	r0, r3, r0
			return result;
    2b14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2b18:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2b1a:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2b1c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2b1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2b22:	bl	2890 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2b26:	lsls	r2, r6, #24
    2b28:	bpl.n	2ad0 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2b2a:	cpsid	i
    2b2c:	ldr	r5, [pc, #112]	; (2ba0 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2b2e:	ldr.w	r8, [pc, #124]	; 2bac <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2b32:	ldr	r4, [pc, #112]	; (2ba4 <analogRead+0xf0>)
    2b34:	and.w	r7, r6, #64	; 0x40
    2b38:	uxtb	r7, r7
    2b3a:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2b3e:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2b42:	cbz	r7, 2b7c <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2b44:	bic.w	r3, r3, #16
    2b48:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2b4c:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2b4e:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2b50:	ldr	r2, [pc, #76]	; (2ba0 <analogRead+0xec>)
    2b52:	strb	r3, [r5, #0]
	__enable_irq();
    2b54:	cpsie	i
	while (1) {
		__disable_irq();
    2b56:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2b58:	ldr	r3, [r4, #0]
    2b5a:	lsls	r1, r3, #24
    2b5c:	bmi.n	2b78 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    2b5e:	ldrb	r3, [r2, #0]
    2b60:	cbnz	r3, 2b6a <analogRead+0xb6>
    2b62:	b.n	2b3e <analogRead+0x8a>
    2b64:	ldrb	r3, [r5, #0]
    2b66:	cmp	r3, #0
    2b68:	beq.n	2b3e <analogRead+0x8a>
		__enable_irq();
    2b6a:	cpsie	i
		yield();
    2b6c:	bl	4108 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2b70:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2b72:	ldr	r3, [r4, #0]
    2b74:	lsls	r3, r3, #24
    2b76:	bpl.n	2b64 <analogRead+0xb0>
			result = ADC1_RA;
    2b78:	ldr	r3, [pc, #44]	; (2ba8 <analogRead+0xf4>)
    2b7a:	b.n	2b04 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2b7c:	orr.w	r3, r3, #16
    2b80:	str.w	r3, [r8]
    2b84:	b.n	2b4c <analogRead+0x98>
    2b86:	nop
    2b88:	.word	0x000056a0
    2b8c:	.word	0x1fff18f6
    2b90:	.word	0x1fff18f8
    2b94:	.word	0x4003b000
    2b98:	.word	0x4003b010
    2b9c:	.word	0x1fff18f5
    2ba0:	.word	0x1fff18f7
    2ba4:	.word	0x400bb000
    2ba8:	.word	0x400bb010
    2bac:	.word	0x400bb00c

00002bb0 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2bb0:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2bb2:	ldr	r3, [pc, #68]	; (2bf8 <digitalWrite.part.1+0x48>)
    2bb4:	ldr.w	r2, [r3, r0, lsl #3]
    2bb8:	ldrb.w	r4, [r2, #640]	; 0x280
    2bbc:	cbz	r4, 2bcc <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    2bbe:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2bc0:	cbz	r1, 2be2 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2bc2:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2bc6:	ldr.w	r4, [sp], #4
    2bca:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2bcc:	add.w	r3, r3, r0, lsl #3
    2bd0:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2bd2:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2bd4:	cbnz	r1, 2bec <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2bd6:	bic.w	r2, r2, #2
    2bda:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2bdc:	ldr.w	r4, [sp], #4
    2be0:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2be2:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2be6:	ldr.w	r4, [sp], #4
    2bea:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2bec:	orr.w	r2, r2, #3
    2bf0:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2bf2:	ldr.w	r4, [sp], #4
    2bf6:	bx	lr
    2bf8:	.word	0x000056e8

00002bfc <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2bfc:	ldr	r2, [pc, #112]	; (2c70 <pinMode.part.2+0x74>)
    2bfe:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2c02:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2c04:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2c06:	beq.n	2c2c <pinMode.part.2+0x30>
    2c08:	cmp	r1, #4
    2c0a:	beq.n	2c44 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2c0c:	ldr.w	r0, [r2, r0, lsl #3]
    2c10:	movs	r2, #0
    2c12:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2c16:	cbz	r1, 2c24 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2c18:	cmp	r1, #2
    2c1a:	beq.n	2c5e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2c1c:	cmp	r1, #3
    2c1e:	beq.n	2c66 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2c20:	str	r2, [r3, #0]
    2c22:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2c24:	mov.w	r2, #256	; 0x100
    2c28:	str	r2, [r3, #0]
    2c2a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c2c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c30:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c34:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c38:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2c3a:	ldr	r2, [r3, #0]
    2c3c:	bic.w	r2, r2, #32
    2c40:	str	r2, [r3, #0]
    2c42:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c44:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c48:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c4c:	movs	r0, #1
    2c4e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c52:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2c54:	ldr	r2, [r3, #0]
    2c56:	orr.w	r2, r2, #32
    2c5a:	str	r2, [r3, #0]
    2c5c:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2c5e:	movw	r2, #259	; 0x103
    2c62:	str	r2, [r3, #0]
    2c64:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2c66:	mov.w	r2, #258	; 0x102
    2c6a:	str	r2, [r3, #0]
    2c6c:	bx	lr
    2c6e:	nop
    2c70:	.word	0x000056e8

00002c74 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2c74:	push	{r4, r5}
	RTC_SR = 0;
    2c76:	ldr	r3, [pc, #20]	; (2c8c <rtc_set+0x18>)
	RTC_TPR = 0;
    2c78:	ldr	r5, [pc, #20]	; (2c90 <rtc_set+0x1c>)
	RTC_TSR = t;
    2c7a:	ldr	r4, [pc, #24]	; (2c94 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2c7c:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    2c7e:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2c80:	str	r2, [r3, #0]
	RTC_TPR = 0;
    2c82:	str	r2, [r5, #0]
	RTC_TSR = t;
    2c84:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2c86:	str	r1, [r3, #0]
}
    2c88:	pop	{r4, r5}
    2c8a:	bx	lr
    2c8c:	.word	0x4003d014
    2c90:	.word	0x4003d004
    2c94:	.word	0x4003d000

00002c98 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2c98:	cmp	r0, #63	; 0x3f
    2c9a:	bhi.n	2ca0 <digitalWrite+0x8>
    2c9c:	b.w	2bb0 <digitalWrite.part.1>
    2ca0:	bx	lr
    2ca2:	nop

00002ca4 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2ca4:	cmp	r0, #63	; 0x3f
    2ca6:	bhi.n	2cb6 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2ca8:	ldr	r3, [pc, #16]	; (2cbc <digitalRead+0x18>)
    2caa:	ldr.w	r3, [r3, r0, lsl #3]
    2cae:	ldrb.w	r0, [r3, #512]	; 0x200
    2cb2:	uxtb	r0, r0
    2cb4:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2cb6:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    2cb8:	bx	lr
    2cba:	nop
    2cbc:	.word	0x000056e8

00002cc0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2cc0:	cmp	r0, #63	; 0x3f
    2cc2:	bhi.n	2cc8 <pinMode+0x8>
    2cc4:	b.w	2bfc <pinMode.part.2>
    2cc8:	bx	lr
    2cca:	nop

00002ccc <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2ccc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2cd0:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2cd2:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2cd4:	ldr	r7, [pc, #136]	; (2d60 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2cd6:	ldr	r3, [pc, #140]	; (2d64 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2cd8:	ldr	r2, [pc, #140]	; (2d68 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2cda:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2cdc:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2cde:	ldr	r2, [r2, #0]
	__enable_irq();
    2ce0:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2ce2:	lsls	r2, r2, #5
    2ce4:	bpl.n	2cec <delay+0x20>
    2ce6:	cmp	r3, #50	; 0x32
    2ce8:	it	hi
    2cea:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2cec:	cbz	r5, 2d5c <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2cee:	rsb	r3, r3, #179200	; 0x2bc00
    2cf2:	addw	r3, r3, #799	; 0x31f
    2cf6:	ldr	r6, [pc, #116]	; (2d6c <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2cf8:	ldr.w	r9, [pc, #104]	; 2d64 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2cfc:	ldr.w	r8, [pc, #104]	; 2d68 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2d00:	lsrs	r3, r3, #2
    2d02:	mov.w	r2, #1000	; 0x3e8
    2d06:	umull	r1, r3, r6, r3
    2d0a:	mul.w	r4, r2, r4
    2d0e:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2d12:	cpsid	i
	current = SYST_CVR;
    2d14:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2d18:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d1a:	ldr.w	lr, [r8]
	__enable_irq();
    2d1e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d20:	rsb	r3, r1, #179200	; 0x2bc00
    2d24:	addw	r3, r3, #799	; 0x31f
    2d28:	lsrs	r3, r3, #2
    2d2a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d2e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d32:	rsb	r3, r4, r3, lsr #2
    2d36:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d3a:	beq.n	2d42 <delay+0x76>
    2d3c:	cmp	r1, #50	; 0x32
    2d3e:	it	hi
    2d40:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d42:	mla	r3, r0, r2, r3
    2d46:	cmp.w	r3, #1000	; 0x3e8
    2d4a:	bcc.n	2d56 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2d4c:	subs	r5, #1
    2d4e:	beq.n	2d5c <delay+0x90>
				start += 1000;
    2d50:	add.w	r4, r4, #1000	; 0x3e8
    2d54:	b.n	2d12 <delay+0x46>
			}
			yield();
    2d56:	bl	4108 <yield>
		}
    2d5a:	b.n	2d12 <delay+0x46>
    2d5c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d60:	.word	0x1fff18fc
    2d64:	.word	0xe000e018
    2d68:	.word	0xe000ed04
    2d6c:	.word	0x16c16c17

00002d70 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2d70:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2d72:	ldr	r3, [pc, #312]	; (2eac <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2d74:	ldr	r0, [pc, #312]	; (2eb0 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2d76:	ldr.w	ip, [pc, #348]	; 2ed4 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2d7a:	ldr	r4, [pc, #312]	; (2eb4 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2d7c:	ldr	r1, [pc, #312]	; (2eb8 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2d7e:	ldr.w	lr, [pc, #344]	; 2ed8 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2d82:	ldr	r6, [pc, #312]	; (2ebc <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2d84:	ldr	r5, [pc, #312]	; (2ec0 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2d86:	ldr	r7, [pc, #316]	; (2ec4 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2d88:	mov.w	r2, #134217728	; 0x8000000
    2d8c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2d8e:	mov.w	r2, #268435456	; 0x10000000
    2d92:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2d94:	mov.w	r2, #536870912	; 0x20000000
    2d98:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2d9a:	mov.w	r2, #1073741824	; 0x40000000
    2d9e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2da0:	mov.w	r2, #2147483648	; 0x80000000
    2da4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2da6:	movs	r2, #0
    2da8:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2daa:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2dac:	movw	r0, #61439	; 0xefff
    2db0:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2db4:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2db8:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2dba:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2dbe:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2dc0:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2dc2:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2dc4:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2dc8:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2dca:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2dce:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2dd0:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2dd4:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2dd6:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2dda:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2dde:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2de2:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2de6:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2dea:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2dec:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2df0:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2df2:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2df4:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2df6:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2dfa:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2dfc:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2dfe:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e00:	ldr	r4, [pc, #196]	; (2ec8 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2e02:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2e04:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e06:	movs	r1, #9
    2e08:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2e0a:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e0e:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2e12:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e14:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2e16:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e18:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2e1a:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2e1c:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e1e:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2e22:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e26:	add.w	r7, r7, #520192	; 0x7f000
    2e2a:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2e2c:	addw	r4, r4, #2044	; 0x7fc
    2e30:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e32:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2e34:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2e36:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e38:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2e3c:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2e3e:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2e42:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2e46:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e48:	sub.w	r4, r4, #460800	; 0x70800
    2e4c:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2e50:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2e52:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e54:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e58:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2e5a:	ldr	r0, [pc, #112]	; (2ecc <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e5c:	orr.w	r1, r1, #512	; 0x200
    2e60:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2e62:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2e64:	ldr	r4, [pc, #104]	; (2ed0 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2e66:	add.w	lr, lr, #65280	; 0xff00
    2e6a:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2e6e:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2e72:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2e76:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2e7a:	orr.w	r1, r1, #33554432	; 0x2000000
    2e7e:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2e80:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2e84:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2e88:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2e8a:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2e8c:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    2e8e:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2e90:	str	r2, [r4, #0]
#endif
	analog_init();
    2e92:	bl	29d4 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2e96:	movs	r0, #25
    2e98:	bl	2ccc <delay>
	usb_init();
    2e9c:	bl	4038 <usb_init>
	delay(275);
    2ea0:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2ea4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2ea8:	b.w	2ccc <delay>
    2eac:	.word	0xe000e104
    2eb0:	.word	0x40038004
    2eb4:	.word	0x40038014
    2eb8:	.word	0x4003801c
    2ebc:	.word	0x40038024
    2ec0:	.word	0x4003802c
    2ec4:	.word	0x40038034
    2ec8:	.word	0x40038000
    2ecc:	.word	0x40048004
    2ed0:	.word	0x400c9000
    2ed4:	.word	0x40038008
    2ed8:	.word	0x4003800c

00002edc <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2edc:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2ede:	ldr	r3, [pc, #56]	; (2f18 <sysex_byte+0x3c>)
    2ee0:	ldr	r4, [pc, #56]	; (2f1c <sysex_byte+0x40>)
    2ee2:	ldr	r3, [r3, #0]
    2ee4:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2ee6:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2ee8:	cbz	r3, 2f0e <sysex_byte+0x32>
    2eea:	cmp.w	r1, #290	; 0x122
    2eee:	bcs.n	2efc <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2ef0:	ldr	r2, [pc, #44]	; (2f20 <sysex_byte+0x44>)
    2ef2:	adds	r3, r1, #1
    2ef4:	strb	r5, [r2, r1]
    2ef6:	uxth	r3, r3
    2ef8:	strh	r3, [r4, #0]
	}
}
    2efa:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2efc:	movs	r2, #0
    2efe:	ldr	r0, [pc, #32]	; (2f20 <sysex_byte+0x44>)
    2f00:	blx	r3
    2f02:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2f04:	ldr	r2, [pc, #24]	; (2f20 <sysex_byte+0x44>)
    2f06:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2f08:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2f0a:	strh	r3, [r4, #0]
	}
}
    2f0c:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2f0e:	cmp.w	r1, #290	; 0x122
    2f12:	bcc.n	2ef0 <sysex_byte+0x14>
    2f14:	pop	{r3, r4, r5, pc}
    2f16:	nop
    2f18:	.word	0x1fff1924
    2f1c:	.word	0x1fff1dba
    2f20:	.word	0x1fff1dc0

00002f24 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2f24:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2f28:	ldr	r6, [pc, #132]	; (2fb0 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2f2a:	ldr	r7, [pc, #136]	; (2fb4 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2f2c:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2f2e:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2f30:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2f32:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2f34:	cbz	r1, 2f64 <usb_midi_write_packed+0x40>
    2f36:	ldr	r5, [pc, #128]	; (2fb8 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2f38:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2f3a:	add.w	r2, r1, r3, lsl #2
    2f3e:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2f40:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2f42:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2f44:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2f48:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2f4a:	bhi.n	2f56 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2f4c:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2f4e:	movs	r3, #0
    2f50:	strb	r3, [r7, #0]
    2f52:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2f56:	movs	r3, #64	; 0x40
    2f58:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2f5a:	movs	r0, #4
    2f5c:	bl	3604 <usb_tx>
		tx_packet = NULL;
    2f60:	str	r4, [r6, #0]
    2f62:	b.n	2f4e <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2f64:	ldr.w	r9, [pc, #84]	; 2fbc <usb_midi_write_packed+0x98>
    2f68:	ldrb.w	r3, [r9]
    2f6c:	cmp	r3, #0
    2f6e:	beq.n	2f52 <usb_midi_write_packed+0x2e>
    2f70:	ldr	r5, [pc, #68]	; (2fb8 <usb_midi_write_packed+0x94>)
    2f72:	movw	r4, #48001	; 0xbb81
    2f76:	b.n	2f8a <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2f78:	subs	r4, #1
    2f7a:	beq.n	2fa2 <usb_midi_write_packed+0x7e>
    2f7c:	ldrb	r3, [r5, #0]
    2f7e:	cbnz	r3, 2fa2 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    2f80:	bl	4108 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2f84:	ldrb.w	r3, [r9]
    2f88:	cbz	r3, 2faa <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2f8a:	movs	r0, #4
    2f8c:	bl	34f0 <usb_tx_packet_count>
    2f90:	cmp	r0, #5
    2f92:	bhi.n	2f78 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2f94:	bl	3428 <usb_malloc>
    2f98:	mov	r1, r0
    2f9a:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2f9c:	cmp	r0, #0
    2f9e:	beq.n	2f78 <usb_midi_write_packed+0x54>
    2fa0:	b.n	2f38 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    2fa2:	movs	r3, #1
    2fa4:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2fa6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2faa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2fae:	nop
    2fb0:	.word	0x1fff1940
    2fb4:	.word	0x1fff1914
    2fb8:	.word	0x1fff1944
    2fbc:	.word	0x1fff1a50

00002fc0 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    2fc0:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    2fc2:	ldr	r3, [pc, #32]	; (2fe4 <usb_midi_flush_output+0x24>)
    2fc4:	ldrb	r4, [r3, #0]
    2fc6:	cbnz	r4, 2fd2 <usb_midi_flush_output+0x12>
    2fc8:	ldr	r5, [pc, #28]	; (2fe8 <usb_midi_flush_output+0x28>)
    2fca:	ldr	r1, [r5, #0]
    2fcc:	cbz	r1, 2fd2 <usb_midi_flush_output+0x12>
    2fce:	ldrh	r3, [r1, #2]
    2fd0:	cbnz	r3, 2fd4 <usb_midi_flush_output+0x14>
    2fd2:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2fd4:	lsls	r3, r3, #2
    2fd6:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2fd8:	movs	r0, #4
    2fda:	bl	3604 <usb_tx>
		tx_packet = NULL;
    2fde:	str	r4, [r5, #0]
    2fe0:	pop	{r3, r4, r5, pc}
    2fe2:	nop
    2fe4:	.word	0x1fff1914
    2fe8:	.word	0x1fff1940

00002fec <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2fec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2ff0:	ldr	r6, [pc, #692]	; (32a8 <usb_midi_read+0x2bc>)
    2ff2:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2ff4:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2ff6:	cmp	r3, #0
    2ff8:	beq.w	3120 <usb_midi_read+0x134>
    2ffc:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2ffe:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    3000:	lsrs	r1, r2, #2
    3002:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    3006:	adds	r2, #4
	if (index < rx_packet->len) {
    3008:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    300a:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    300c:	bcs.n	3094 <usb_midi_read+0xa8>
		rx_packet->index = index;
    300e:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    3010:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    3014:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    3018:	ldr	r1, [pc, #656]	; (32ac <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    301a:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    301e:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    3022:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    3026:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    3028:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    302c:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    302e:	bls.n	3066 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    3030:	subs	r3, r6, #2
    3032:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    3034:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    3038:	bls.n	30d8 <usb_midi_read+0xec>
    303a:	cmp	r6, #5
    303c:	beq.n	30d0 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    303e:	cmp	r6, #4
    3040:	beq.w	338c <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    3044:	subs	r3, r6, #5
    3046:	cmp	r3, #2
    3048:	bls.n	314a <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    304a:	cmp	r6, #15
    304c:	bne.n	306c <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    304e:	cmp	r0, #247	; 0xf7
    3050:	bhi.n	30d8 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    3052:	cmp	r0, #240	; 0xf0
    3054:	beq.n	305c <usb_midi_read+0x70>
    3056:	ldr	r3, [pc, #600]	; (32b0 <usb_midi_read+0x2c4>)
    3058:	ldrh	r3, [r3, #0]
    305a:	cbz	r3, 306c <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    305c:	bl	2edc <sysex_byte>
		}
	}
	return 0;
    3060:	movs	r0, #0
    3062:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    3066:	cbz	r7, 3072 <usb_midi_read+0x86>
    3068:	cmp	r5, r7
    306a:	beq.n	3072 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    306c:	movs	r0, #0
    306e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    3072:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    3074:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    3078:	beq.w	318a <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    307c:	cmp	r6, #9
    307e:	beq.n	30a4 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    3080:	cmp	r6, #10
    3082:	bne.w	31ae <usb_midi_read+0x1c2>
    3086:	cmp	r3, #10
    3088:	bne.n	306c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    308a:	ldr	r3, [pc, #552]	; (32b4 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    308c:	ldr	r2, [pc, #552]	; (32b8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    308e:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    3090:	movs	r1, #160	; 0xa0
    3092:	b.n	3198 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    3094:	mov	r0, r3
    3096:	bl	3468 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    309a:	movs	r0, #5
    309c:	bl	34b4 <usb_rx>
    30a0:	str	r0, [r6, #0]
    30a2:	b.n	3010 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    30a4:	cmp	r3, #9
    30a6:	bne.n	306c <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    30a8:	lsrs	r7, r4, #24
    30aa:	beq.w	33a4 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    30ae:	ldr	r3, [pc, #524]	; (32bc <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    30b0:	ldr	r2, [pc, #516]	; (32b8 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    30b2:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    30b4:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    30b6:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    30ba:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    30bc:	uxtb	r5, r5
    30be:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    30c0:	cmp	r3, #0
    30c2:	beq.w	3200 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    30c6:	mov	r2, r4
    30c8:	mov	r1, r6
    30ca:	mov	r0, r5
    30cc:	blx	r3
    30ce:	b.n	3200 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    30d0:	cmp	r0, #240	; 0xf0
    30d2:	bls.n	315c <usb_midi_read+0x170>
    30d4:	cmp	r0, #247	; 0xf7
    30d6:	beq.n	315c <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    30d8:	subs	r0, #241	; 0xf1
    30da:	cmp	r0, #14
    30dc:	bhi.n	306c <usb_midi_read+0x80>
    30de:	add	r3, pc, #4	; (adr r3, 30e4 <usb_midi_read+0xf8>)
    30e0:	ldr.w	pc, [r3, r0, lsl #2]
    30e4:	.word	0x0000329b
    30e8:	.word	0x0000327f
    30ec:	.word	0x0000326d
    30f0:	.word	0x0000306d
    30f4:	.word	0x0000306d
    30f8:	.word	0x0000325f
    30fc:	.word	0x0000306d
    3100:	.word	0x0000333f
    3104:	.word	0x0000306d
    3108:	.word	0x00003309
    310c:	.word	0x00003323
    3110:	.word	0x00003247
    3114:	.word	0x0000306d
    3118:	.word	0x0000322f
    311c:	.word	0x00003213
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    3120:	ldr	r3, [pc, #412]	; (32c0 <usb_midi_read+0x2d4>)
    3122:	ldrb	r3, [r3, #0]
    3124:	cmp	r3, #0
    3126:	beq.n	306c <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    3128:	movs	r0, #5
    312a:	bl	34b4 <usb_rx>
    312e:	mov	r3, r0
    3130:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    3132:	cmp	r0, #0
    3134:	beq.n	306c <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    3136:	ldrh	r5, [r0, #0]
    3138:	cmp	r5, #0
    313a:	bne.w	2ffe <usb_midi_read+0x12>
			usb_free(rx_packet);
    313e:	bl	3468 <usb_free>
			rx_packet = NULL;
    3142:	str	r5, [r6, #0]
			return 0;
    3144:	mov	r0, r5
    3146:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    314a:	bl	2edc <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    314e:	ubfx	r0, r4, #16, #8
    3152:	bl	2edc <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    3156:	cmp	r6, #7
    3158:	bne.n	3160 <usb_midi_read+0x174>
    315a:	lsrs	r0, r4, #24
    315c:	bl	2edc <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    3160:	ldr	r3, [pc, #332]	; (32b0 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    3162:	ldr	r2, [pc, #352]	; (32c4 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    3164:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    3166:	ldr	r0, [pc, #352]	; (32c8 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    3168:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    316a:	ldr	r5, [pc, #352]	; (32cc <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    316c:	ldr	r2, [pc, #328]	; (32b8 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    316e:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    3170:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    3172:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    3174:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    3176:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    3178:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    317a:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    317c:	cbz	r4, 31c2 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    317e:	movs	r2, #1
    3180:	ldr	r0, [pc, #332]	; (32d0 <usb_midi_read+0x2e4>)
    3182:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    3184:	movs	r0, #1
    3186:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    318a:	cmp	r3, #8
    318c:	bne.w	306c <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    3190:	ldr	r3, [pc, #320]	; (32d4 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    3192:	ldr	r2, [pc, #292]	; (32b8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    3194:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    3196:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    3198:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    319c:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    319e:	uxtb	r5, r5
    31a0:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    31a2:	cbz	r3, 3200 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    31a4:	mov	r0, r5
    31a6:	mov	r2, r4
    31a8:	mov	r1, r6
    31aa:	blx	r3
    31ac:	b.n	3200 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    31ae:	cmp	r6, #11
    31b0:	bne.n	31d6 <usb_midi_read+0x1ea>
    31b2:	cmp	r3, #11
    31b4:	bne.w	306c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    31b8:	ldr	r3, [pc, #284]	; (32d8 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    31ba:	ldr	r2, [pc, #252]	; (32b8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    31bc:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    31be:	movs	r1, #176	; 0xb0
    31c0:	b.n	3198 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    31c2:	ldr	r3, [pc, #280]	; (32dc <usb_midi_read+0x2f0>)
    31c4:	ldr	r3, [r3, #0]
    31c6:	cmp	r3, #0
    31c8:	beq.w	33c2 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    31cc:	ldr	r0, [pc, #256]	; (32d0 <usb_midi_read+0x2e4>)
    31ce:	blx	r3
		}
		return 1;
    31d0:	movs	r0, #1
    31d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    31d6:	cmp	r6, #12
    31d8:	bne.w	33dc <usb_midi_read+0x3f0>
    31dc:	cmp	r3, #12
    31de:	bne.w	306c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    31e2:	ldr	r3, [pc, #252]	; (32e0 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    31e4:	ldr	r2, [pc, #208]	; (32b8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    31e6:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    31e8:	movs	r1, #192	; 0xc0
    31ea:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    31ec:	uxtb	r5, r5
    31ee:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    31f2:	cmp	r3, #0
    31f4:	beq.w	3388 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    31f8:	mov	r0, r5
    31fa:	mov	r1, r6
    31fc:	lsrs	r4, r4, #24
    31fe:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    3200:	ldr	r1, [pc, #224]	; (32e4 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    3202:	ldr	r2, [pc, #196]	; (32c8 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    3204:	ldr	r3, [pc, #196]	; (32cc <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    3206:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    3208:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    320a:	strb	r4, [r3, #0]
		return 1;
    320c:	movs	r0, #1
    320e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    3212:	ldr	r3, [pc, #212]	; (32e8 <usb_midi_read+0x2fc>)
    3214:	ldr	r3, [r3, #0]
    3216:	cmp	r3, #0
    3218:	beq.w	33c8 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    321c:	blx	r3
    321e:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    3222:	ldr	r3, [pc, #148]	; (32b8 <usb_midi_read+0x2cc>)
    3224:	uxtb	r5, r5
    3226:	lsrs	r4, r4, #24
    3228:	strb.w	r8, [r3]
		goto return_message;
    322c:	b.n	3200 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    322e:	ldr	r3, [pc, #188]	; (32ec <usb_midi_read+0x300>)
    3230:	ldr	r3, [r3, #0]
    3232:	cmp	r3, #0
    3234:	bne.n	321c <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    3236:	ldr	r3, [pc, #184]	; (32f0 <usb_midi_read+0x304>)
    3238:	ldr	r3, [r3, #0]
    323a:	cbz	r3, 3266 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    323c:	movs	r0, #254	; 0xfe
    323e:	blx	r3
    3240:	ubfx	r6, r4, #16, #8
    3244:	b.n	3222 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    3246:	ldr	r3, [pc, #172]	; (32f4 <usb_midi_read+0x308>)
    3248:	ldr	r3, [r3, #0]
    324a:	cmp	r3, #0
    324c:	bne.n	321c <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    324e:	ldr	r3, [pc, #160]	; (32f0 <usb_midi_read+0x304>)
    3250:	ldr	r3, [r3, #0]
    3252:	cbz	r3, 3266 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    3254:	movs	r0, #252	; 0xfc
    3256:	blx	r3
    3258:	ubfx	r6, r4, #16, #8
    325c:	b.n	3222 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    325e:	ldr	r3, [pc, #152]	; (32f8 <usb_midi_read+0x30c>)
    3260:	ldr	r3, [r3, #0]
    3262:	cmp	r3, #0
    3264:	bne.n	321c <usb_midi_read+0x230>
    3266:	ubfx	r6, r4, #16, #8
    326a:	b.n	3222 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    326c:	ldr	r3, [pc, #140]	; (32fc <usb_midi_read+0x310>)
    326e:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    3270:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    3274:	cmp	r3, #0
    3276:	beq.n	3222 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    3278:	mov	r0, r6
    327a:	blx	r3
    327c:	b.n	3222 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    327e:	ldr	r3, [pc, #128]	; (3300 <usb_midi_read+0x314>)
    3280:	ldr	r2, [r3, #0]
    3282:	cmp	r2, #0
    3284:	beq.n	3266 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    3286:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    3288:	lsrs	r3, r4, #17
    328a:	and.w	r0, r6, #127	; 0x7f
    328e:	and.w	r3, r3, #16256	; 0x3f80
    3292:	orrs	r0, r3
    3294:	uxtb	r6, r6
    3296:	blx	r2
    3298:	b.n	3222 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    329a:	ldr	r3, [pc, #104]	; (3304 <usb_midi_read+0x318>)
    329c:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    329e:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    32a2:	cmp	r3, #0
    32a4:	bne.n	3278 <usb_midi_read+0x28c>
    32a6:	b.n	3222 <usb_midi_read+0x236>
    32a8:	.word	0x1fff194c
    32ac:	.word	0x1fff1dbe
    32b0:	.word	0x1fff1dba
    32b4:	.word	0x1fff1928
    32b8:	.word	0x1fff1db8
    32bc:	.word	0x1fff195c
    32c0:	.word	0x1fff1a50
    32c4:	.word	0x1fff1924
    32c8:	.word	0x1fff1dbc
    32cc:	.word	0x1fff1dbd
    32d0:	.word	0x1fff1dc0
    32d4:	.word	0x1fff1954
    32d8:	.word	0x1fff1958
    32dc:	.word	0x1fff193c
    32e0:	.word	0x1fff1918
    32e4:	.word	0x1fff1dbf
    32e8:	.word	0x1fff1904
    32ec:	.word	0x1fff1908
    32f0:	.word	0x1fff190c
    32f4:	.word	0x1fff1948
    32f8:	.word	0x1fff1938
    32fc:	.word	0x1fff1950
    3300:	.word	0x1fff1920
    3304:	.word	0x1fff1934
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    3308:	ldr	r3, [pc, #252]	; (3408 <usb_midi_read+0x41c>)
    330a:	ldr	r3, [r3, #0]
    330c:	cmp	r3, #0
    330e:	bne.n	321c <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    3310:	ldr	r3, [pc, #248]	; (340c <usb_midi_read+0x420>)
    3312:	ldr	r3, [r3, #0]
    3314:	cmp	r3, #0
    3316:	beq.n	3266 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    3318:	movs	r0, #250	; 0xfa
    331a:	blx	r3
    331c:	ubfx	r6, r4, #16, #8
    3320:	b.n	3222 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    3322:	ldr	r3, [pc, #236]	; (3410 <usb_midi_read+0x424>)
    3324:	ldr	r3, [r3, #0]
    3326:	cmp	r3, #0
    3328:	bne.w	321c <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    332c:	ldr	r3, [pc, #220]	; (340c <usb_midi_read+0x420>)
    332e:	ldr	r3, [r3, #0]
    3330:	cmp	r3, #0
    3332:	beq.n	3266 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    3334:	movs	r0, #251	; 0xfb
    3336:	blx	r3
    3338:	ubfx	r6, r4, #16, #8
    333c:	b.n	3222 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    333e:	ldr	r3, [pc, #212]	; (3414 <usb_midi_read+0x428>)
    3340:	ldr	r3, [r3, #0]
    3342:	cmp	r3, #0
    3344:	bne.w	321c <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    3348:	ldr	r3, [pc, #192]	; (340c <usb_midi_read+0x420>)
    334a:	ldr	r3, [r3, #0]
    334c:	cmp	r3, #0
    334e:	beq.n	3266 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    3350:	movs	r0, #248	; 0xf8
    3352:	blx	r3
    3354:	ubfx	r6, r4, #16, #8
    3358:	b.n	3222 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    335a:	cmp	r3, #14
    335c:	bne.w	306c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    3360:	ldr	r2, [pc, #180]	; (3418 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    3362:	ldr	r3, [pc, #184]	; (341c <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    3364:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    3366:	movs	r1, #224	; 0xe0
    3368:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    336a:	cmp	r2, #0
    336c:	beq.n	33fe <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    336e:	lsrs	r6, r4, #16
    3370:	lsrs	r1, r4, #17
    3372:	and.w	r3, r6, #127	; 0x7f
    3376:	and.w	r1, r1, #16256	; 0x3f80
    337a:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    337c:	uxtb	r5, r5
    337e:	sub.w	r1, r1, #8192	; 0x2000
    3382:	mov	r0, r5
    3384:	blx	r2
    3386:	uxtb	r6, r6
    3388:	lsrs	r4, r4, #24
    338a:	b.n	3200 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    338c:	bl	2edc <sysex_byte>
		sysex_byte(n >> 16);
    3390:	ubfx	r0, r4, #16, #8
    3394:	bl	2edc <sysex_byte>
		sysex_byte(n >> 24);
    3398:	lsrs	r0, r4, #24
    339a:	bl	2edc <sysex_byte>
		return 0;
    339e:	movs	r0, #0
    33a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    33a4:	ldr	r3, [pc, #120]	; (3420 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    33a6:	ldr	r2, [pc, #116]	; (341c <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    33a8:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    33aa:	movs	r1, #128	; 0x80
    33ac:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    33ae:	uxtb	r5, r5
    33b0:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    33b4:	cbz	r3, 33d8 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    33b6:	mov	r1, r6
    33b8:	mov	r0, r5
    33ba:	mov	r2, r7
    33bc:	blx	r3
    33be:	mov	r4, r7
    33c0:	b.n	3200 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    33c2:	movs	r0, #1
    33c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    33c8:	ldr	r3, [pc, #64]	; (340c <usb_midi_read+0x420>)
    33ca:	ldr	r3, [r3, #0]
    33cc:	cmp	r3, #0
    33ce:	beq.w	3266 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    33d2:	movs	r0, #255	; 0xff
    33d4:	blx	r3
    33d6:	b.n	3266 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    33d8:	mov	r4, r3
    33da:	b.n	3200 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    33dc:	cmp	r6, #13
    33de:	bne.n	335a <usb_midi_read+0x36e>
    33e0:	cmp	r3, #13
    33e2:	bne.w	306c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    33e6:	ldr	r3, [pc, #60]	; (3424 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    33e8:	ldr	r2, [pc, #48]	; (341c <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    33ea:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    33ec:	movs	r1, #208	; 0xd0
    33ee:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    33f0:	uxtb	r5, r5
    33f2:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    33f6:	cmp	r3, #0
    33f8:	bne.w	31f8 <usb_midi_read+0x20c>
    33fc:	b.n	3388 <usb_midi_read+0x39c>
    33fe:	ubfx	r6, r4, #16, #8
    3402:	uxtb	r5, r5
    3404:	lsrs	r4, r4, #24
    3406:	b.n	3200 <usb_midi_read+0x214>
    3408:	.word	0x1fff1930
    340c:	.word	0x1fff190c
    3410:	.word	0x1fff1910
    3414:	.word	0x1fff1900
    3418:	.word	0x1fff191c
    341c:	.word	0x1fff1db8
    3420:	.word	0x1fff1954
    3424:	.word	0x1fff192c

00003428 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3428:	cpsid	i
	avail = usb_buffer_available;
    342a:	ldr	r0, [pc, #52]	; (3460 <usb_malloc+0x38>)
    342c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    342e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    3432:	cmp	r3, #29
    3434:	bgt.n	3458 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    3436:	mov.w	r1, #2147483648	; 0x80000000
    343a:	lsrs	r1, r3
    343c:	bic.w	r2, r2, r1
    3440:	str	r2, [r0, #0]
	__enable_irq();
    3442:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3444:	ldr	r0, [pc, #28]	; (3464 <usb_malloc+0x3c>)
    3446:	add.w	r3, r3, r3, lsl #3
    344a:	lsls	r3, r3, #3
    344c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    344e:	movs	r1, #0
    3450:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    3452:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    3454:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    3456:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3458:	cpsie	i
		return NULL;
    345a:	movs	r0, #0
    345c:	bx	lr
    345e:	nop
    3460:	.word	0x1fff0c6c
    3464:	.word	0x1fff03d0

00003468 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3468:	ldr	r3, [pc, #52]	; (34a0 <usb_free+0x38>)
    346a:	ldr	r2, [pc, #56]	; (34a4 <usb_free+0x3c>)
    346c:	subs	r3, r0, r3
    346e:	umull	r2, r3, r2, r3
    3472:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    3474:	cmp	r3, #29
    3476:	bhi.n	3492 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3478:	ldr	r2, [pc, #44]	; (34a8 <usb_free+0x40>)
    347a:	ldrb	r2, [r2, #0]
    347c:	cbnz	r2, 3494 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    347e:	cpsid	i
	usb_buffer_available |= mask;
    3480:	ldr	r0, [pc, #40]	; (34ac <usb_free+0x44>)
    3482:	mov.w	r1, #2147483648	; 0x80000000
    3486:	ldr	r2, [r0, #0]
    3488:	lsr.w	r3, r1, r3
    348c:	orrs	r2, r3
    348e:	str	r2, [r0, #0]
	__enable_irq();
    3490:	cpsie	i
    3492:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3494:	ldr	r2, [pc, #24]	; (34b0 <usb_free+0x48>)
    3496:	ldrb	r2, [r2, #0]
    3498:	cmp	r2, #0
    349a:	beq.n	347e <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    349c:	b.w	351c <usb_rx_memory>
    34a0:	.word	0x1fff03d0
    34a4:	.word	0x38e38e39
    34a8:	.word	0x1fff1a45
    34ac:	.word	0x1fff0c6c
    34b0:	.word	0x1fff1a50

000034b4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    34b4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    34b6:	cmp	r3, #4
    34b8:	bhi.n	34e4 <usb_rx+0x30>
	__disable_irq();
    34ba:	cpsid	i
	ret = rx_first[endpoint];
    34bc:	ldr	r1, [pc, #40]	; (34e8 <usb_rx+0x34>)
    34be:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    34c2:	cbz	r0, 34e0 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    34c4:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    34c6:	ldr	r4, [pc, #36]	; (34ec <usb_rx+0x38>)
    34c8:	ldrh	r5, [r0, #0]
    34ca:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    34ce:	ldr	r6, [r0, #4]
    34d0:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    34d4:	subs	r2, r2, r5
    34d6:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    34da:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    34dc:	pop	{r4, r5, r6}
    34de:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    34e0:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    34e2:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    34e4:	movs	r0, #0
    34e6:	bx	lr
    34e8:	.word	0x1fff19bc
    34ec:	.word	0x1fff1ee4

000034f0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    34f0:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    34f2:	cmp	r0, #4
    34f4:	bhi.n	350e <usb_tx_packet_count+0x1e>
	__disable_irq();
    34f6:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    34f8:	ldr	r3, [pc, #28]	; (3518 <usb_tx_packet_count+0x28>)
    34fa:	ldr.w	r3, [r3, r0, lsl #2]
    34fe:	cbz	r3, 3512 <usb_tx_packet_count+0x22>
    3500:	movs	r0, #0
    3502:	ldr	r3, [r3, #4]
    3504:	adds	r0, #1
    3506:	cmp	r3, #0
    3508:	bne.n	3502 <usb_tx_packet_count+0x12>
	__enable_irq();
    350a:	cpsie	i
	return count;
    350c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    350e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    3510:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    3512:	mov	r0, r3
    3514:	b.n	350a <usb_tx_packet_count+0x1a>
    3516:	nop
    3518:	.word	0x1fff1a14

0000351c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    351c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    351e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3520:	ldr	r2, [pc, #204]	; (35f0 <usb_rx_memory+0xd4>)
    3522:	ldrb	r3, [r2, #0]
    3524:	lsls	r3, r3, #28
    3526:	bpl.n	3536 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3528:	ldr	r3, [pc, #200]	; (35f4 <usb_rx_memory+0xd8>)
    352a:	ldr	r1, [r3, #32]
    352c:	cmp	r1, #0
    352e:	beq.n	35b8 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3530:	ldr	r1, [r3, #40]	; 0x28
    3532:	cmp	r1, #0
    3534:	beq.n	35d4 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3536:	ldrb	r3, [r2, #1]
    3538:	lsls	r5, r3, #28
    353a:	bpl.n	354a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    353c:	ldr	r3, [pc, #180]	; (35f4 <usb_rx_memory+0xd8>)
    353e:	ldr	r1, [r3, #64]	; 0x40
    3540:	cmp	r1, #0
    3542:	beq.n	35e0 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3544:	ldr	r1, [r3, #72]	; 0x48
    3546:	cmp	r1, #0
    3548:	beq.n	35d8 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    354a:	ldrb	r3, [r2, #2]
    354c:	lsls	r4, r3, #28
    354e:	bpl.n	355e <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3550:	ldr	r3, [pc, #160]	; (35f4 <usb_rx_memory+0xd8>)
    3552:	ldr	r1, [r3, #96]	; 0x60
    3554:	cmp	r1, #0
    3556:	beq.n	35e4 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3558:	ldr	r1, [r3, #104]	; 0x68
    355a:	cmp	r1, #0
    355c:	beq.n	35dc <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    355e:	ldrb	r3, [r2, #3]
    3560:	lsls	r1, r3, #28
    3562:	bpl.n	3574 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3564:	ldr	r3, [pc, #140]	; (35f4 <usb_rx_memory+0xd8>)
    3566:	ldr.w	r1, [r3, #128]	; 0x80
    356a:	cmp	r1, #0
    356c:	beq.n	35ec <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    356e:	ldr.w	r1, [r3, #136]	; 0x88
    3572:	cbz	r1, 359a <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3574:	ldrb	r3, [r2, #4]
    3576:	lsls	r3, r3, #28
    3578:	bpl.n	358c <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    357a:	ldr	r3, [pc, #120]	; (35f4 <usb_rx_memory+0xd8>)
    357c:	ldr.w	r2, [r3, #160]	; 0xa0
    3580:	cmp	r2, #0
    3582:	beq.n	35e8 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3584:	ldr.w	r2, [r3, #168]	; 0xa8
    3588:	movs	r4, #21
    358a:	cbz	r2, 359c <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    358c:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    358e:	ldr	r3, [pc, #104]	; (35f8 <usb_rx_memory+0xdc>)
    3590:	movs	r2, #0
    3592:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    3594:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    3596:	b.w	3468 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    359a:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    359c:	ldr	r1, [pc, #88]	; (35f8 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    359e:	ldr	r5, [pc, #92]	; (35fc <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    35a0:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    35a2:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    35a6:	add.w	r3, r3, r4, lsl #3
    35aa:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35ac:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    35ae:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35b0:	strb	r2, [r1, #0]
				__enable_irq();
    35b2:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    35b4:	pop	{r4, r5}
    35b6:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    35b8:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35ba:	ldr	r4, [pc, #60]	; (35f8 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    35bc:	ldr	r5, [pc, #64]	; (3600 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    35be:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    35c0:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    35c4:	add.w	r3, r3, r2, lsl #3
    35c8:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35ca:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    35cc:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35ce:	strb	r2, [r4, #0]
				__enable_irq();
    35d0:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    35d2:	b.n	35b4 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35d4:	movs	r4, #5
    35d6:	b.n	359c <usb_rx_memory+0x80>
    35d8:	movs	r4, #9
    35da:	b.n	359c <usb_rx_memory+0x80>
    35dc:	movs	r4, #13
    35de:	b.n	359c <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    35e0:	movs	r2, #8
    35e2:	b.n	35ba <usb_rx_memory+0x9e>
    35e4:	movs	r2, #12
    35e6:	b.n	35ba <usb_rx_memory+0x9e>
    35e8:	movs	r2, #20
    35ea:	b.n	35ba <usb_rx_memory+0x9e>
    35ec:	movs	r2, #16
    35ee:	b.n	35ba <usb_rx_memory+0x9e>
    35f0:	.word	0x00005914
    35f4:	.word	0x1fff0000
    35f8:	.word	0x1fff1a45
    35fc:	.word	0x004000c8
    3600:	.word	0x00400088

00003604 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3604:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    3606:	cmp	r3, #4
    3608:	bhi.n	3646 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    360a:	ldr	r2, [pc, #108]	; (3678 <usb_tx+0x74>)
    360c:	lsls	r0, r0, #5
    360e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    3612:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3614:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    3616:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3618:	ldr	r4, [pc, #96]	; (367c <usb_tx+0x78>)
    361a:	ldrb	r2, [r4, r3]
    361c:	cmp	r2, #3
    361e:	bhi.n	3658 <usb_tx+0x54>
    3620:	tbb	[pc, r2]
    3624:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3628:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    362a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    362c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    362e:	tst.w	r0, #8
    3632:	ite	ne
    3634:	movne	r3, #200	; 0xc8
    3636:	moveq	r3, #136	; 0x88
    3638:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    363c:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    363e:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3640:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    3642:	cpsie	i
}
    3644:	pop	{r4, r5}
    3646:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3648:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    364a:	movs	r2, #2
		break;
    364c:	b.n	362a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    364e:	movs	r2, #5
    3650:	b.n	362a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    3652:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    3654:	movs	r2, #4
		break;
    3656:	b.n	362a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3658:	ldr	r2, [pc, #36]	; (3680 <usb_tx+0x7c>)
    365a:	ldr.w	r0, [r2, r3, lsl #2]
    365e:	cbz	r0, 3670 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3660:	ldr	r2, [pc, #32]	; (3684 <usb_tx+0x80>)
    3662:	ldr.w	r0, [r2, r3, lsl #2]
    3666:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3668:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    366c:	cpsie	i
		return;
    366e:	b.n	3644 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    3670:	str.w	r1, [r2, r3, lsl #2]
    3674:	ldr	r2, [pc, #12]	; (3684 <usb_tx+0x80>)
    3676:	b.n	3668 <usb_tx+0x64>
    3678:	.word	0x1fff0000
    367c:	.word	0x1fff1a54
    3680:	.word	0x1fff1a14
    3684:	.word	0x1fff1a28

00003688 <usb_isr>:
}



void usb_isr(void)
{
    3688:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    368c:	ldr.w	fp, [pc, #776]	; 3998 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    3690:	ldr.w	sl, [pc, #776]	; 399c <usb_isr+0x314>
}



void usb_isr(void)
{
    3694:	sub	sp, #28
    3696:	b.n	3722 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3698:	ldr	r7, [pc, #680]	; (3944 <usb_isr+0x2bc>)
    369a:	mov.w	r8, r3, lsr #2
    369e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    36a2:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    36a4:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    36a8:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    36ac:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    36ae:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    36b2:	and.w	r4, r3, #255	; 0xff
    36b6:	cmp	r3, #0
    36b8:	bne.w	38bc <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    36bc:	ldr.w	r3, [r7, r8, lsl #3]
    36c0:	lsrs	r3, r3, #16
    36c2:	uxth	r1, r3
    36c4:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    36c8:	cmp	r3, #0
    36ca:	beq.w	38aa <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    36ce:	ldr	r3, [pc, #632]	; (3948 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    36d0:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    36d4:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    36d8:	ldr.w	r2, [r3, r6, lsl #2]
    36dc:	cmp	r2, #0
    36de:	beq.w	3b4c <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    36e2:	ldr	r5, [pc, #616]	; (394c <usb_isr+0x2c4>)
    36e4:	ldr.w	r3, [r5, r6, lsl #2]
    36e8:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    36ea:	ldr	r4, [pc, #612]	; (3950 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    36ec:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    36f0:	ldrh.w	r3, [r4, r6, lsl #1]
    36f4:	add	r1, r3
    36f6:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    36fa:	bl	3428 <usb_malloc>
					if (packet) {
    36fe:	cmp	r0, #0
    3700:	beq.w	3b3e <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    3704:	ldr	r2, [pc, #588]	; (3954 <usb_isr+0x2cc>)
    3706:	ldr	r3, [pc, #592]	; (3958 <usb_isr+0x2d0>)
    3708:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    370c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3710:	it	ne
    3712:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3714:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    3718:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    371c:	movs	r3, #8
    371e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3722:	ldrb.w	r4, [fp]
    3726:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    3728:	lsls	r0, r4, #29
    372a:	bpl.n	3766 <usb_isr+0xde>
		if (usb_configuration) {
    372c:	ldr	r3, [pc, #556]	; (395c <usb_isr+0x2d4>)
    372e:	ldrb	r3, [r3, #0]
    3730:	cbz	r3, 3760 <usb_isr+0xd8>
			t = usb_reboot_timer;
    3732:	ldr	r1, [pc, #556]	; (3960 <usb_isr+0x2d8>)
    3734:	ldrb	r2, [r1, #0]
			if (t) {
    3736:	and.w	r3, r2, #255	; 0xff
    373a:	cbz	r2, 3746 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    373c:	subs	r3, #1
    373e:	uxtb	r3, r3
    3740:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    3742:	cbnz	r3, 3746 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3744:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    3746:	ldr	r1, [pc, #540]	; (3964 <usb_isr+0x2dc>)
    3748:	ldrb	r2, [r1, #0]
			if (t) {
    374a:	and.w	r3, r2, #255	; 0xff
    374e:	cbz	r2, 375c <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    3750:	subs	r3, #1
    3752:	uxtb	r3, r3
    3754:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    3756:	cmp	r3, #0
    3758:	beq.w	3aea <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    375c:	bl	2fc0 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    3760:	movs	r3, #4
    3762:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    3766:	and.w	r3, r4, #8
    376a:	and.w	r2, r3, #255	; 0xff
    376e:	cmp	r3, #0
    3770:	beq.w	3904 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    3774:	ldrb.w	r3, [sl]
    3778:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    377a:	lsrs	r6, r3, #4
    377c:	bne.n	3698 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    377e:	lsrs	r4, r3, #2
    3780:	ldr.w	r9, [pc, #448]	; 3944 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3784:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3788:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    378c:	ubfx	r2, r2, #2, #4
    3790:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    3792:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3794:	cmp	r2, #12
    3796:	bhi.w	38a2 <usb_isr+0x21a>
    379a:	tbb	[pc, r2]
    379e:	.short	0x7878
    37a0:	.word	0x82828282
    37a4:	.word	0x82438282
    37a8:	.short	0x8282
    37aa:	.byte	0x07
    37ab:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    37ac:	ldr	r0, [r1, #0]
    37ae:	ldr	r5, [pc, #440]	; (3968 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    37b0:	ldr	r3, [pc, #416]	; (3954 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    37b2:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37b4:	ldr	r7, [pc, #436]	; (396c <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    37b6:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37ba:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    37bc:	ldr	r6, [pc, #432]	; (3970 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    37be:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37c0:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37c4:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    37c6:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37c8:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    37ca:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37ce:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    37d0:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    37d4:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    37d8:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37da:	bhi.w	39a0 <usb_isr+0x318>
    37de:	cmp.w	r1, #1664	; 0x680
    37e2:	bcs.w	3e0c <usb_isr+0x784>
    37e6:	cmp.w	r1, #258	; 0x102
    37ea:	beq.w	3bba <usb_isr+0x532>
    37ee:	bhi.w	3b84 <usb_isr+0x4fc>
    37f2:	cmp	r1, #128	; 0x80
    37f4:	beq.w	3e40 <usb_isr+0x7b8>
    37f8:	cmp	r1, #130	; 0x82
    37fa:	bne.w	3bc6 <usb_isr+0x53e>
    37fe:	ldrh	r1, [r5, #4]
    3800:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3804:	cmp	r1, #5
    3806:	bhi.w	3bc6 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    380a:	ldr	r3, [pc, #360]	; (3974 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    380c:	ldr	r4, [pc, #360]	; (3978 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    380e:	lsls	r1, r1, #2
    3810:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3812:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3814:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3816:	ldrb	r2, [r3, #0]
    3818:	lsls	r3, r2, #30
    381a:	bpl.w	3f50 <usb_isr+0x8c8>
    381e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    3820:	movs	r0, #2
    3822:	b.n	3c4e <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3824:	ldr	r7, [pc, #324]	; (396c <usb_isr+0x2e4>)
    3826:	ldr	r2, [r7, #0]
		if (data) {
    3828:	cbz	r2, 3878 <usb_isr+0x1f0>
			size = ep0_tx_len;
    382a:	ldr	r3, [pc, #336]	; (397c <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    382c:	ldr	r6, [pc, #320]	; (3970 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    382e:	ldr	r1, [pc, #336]	; (3980 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3830:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3832:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3834:	ldrb	r5, [r1, #0]
    3836:	cmp	r0, #64	; 0x40
    3838:	mov	lr, r0
    383a:	orr.w	r8, r5, #2
    383e:	it	cs
    3840:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3844:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    3846:	eor.w	r4, r4, #1
    384a:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    384c:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3850:	ite	eq
    3852:	moveq	r4, #136	; 0x88
    3854:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3856:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    385a:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    385c:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3860:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3864:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3866:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3868:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    386c:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    386e:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3870:	cmp	r0, #0
    3872:	beq.w	39e2 <usb_isr+0x35a>
    3876:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3878:	ldr	r3, [pc, #236]	; (3968 <usb_isr+0x2e0>)
    387a:	ldrh	r2, [r3, #0]
    387c:	cmp.w	r2, #1280	; 0x500
    3880:	bne.n	38a2 <usb_isr+0x21a>
			setup.bRequest = 0;
    3882:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3884:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    3886:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3888:	ldr	r3, [pc, #248]	; (3984 <usb_isr+0x2fc>)
    388a:	strb	r2, [r3, #0]
    388c:	b.n	38a2 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    388e:	ldr	r2, [pc, #216]	; (3968 <usb_isr+0x2e0>)
    3890:	ldrh	r0, [r2, #0]
    3892:	movw	r2, #8225	; 0x2021
    3896:	cmp	r0, r2
    3898:	beq.w	39ec <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    389c:	ldr	r2, [pc, #180]	; (3954 <usb_isr+0x2cc>)
    389e:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    38a2:	ldr	r2, [pc, #228]	; (3988 <usb_isr+0x300>)
    38a4:	movs	r3, #1
    38a6:	strb	r3, [r2, #0]
    38a8:	b.n	371c <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    38aa:	ldr	r2, [pc, #168]	; (3954 <usb_isr+0x2cc>)
    38ac:	ldr	r3, [pc, #168]	; (3958 <usb_isr+0x2d0>)
    38ae:	tst.w	r9, #8
    38b2:	it	ne
    38b4:	movne	r3, r2
    38b6:	str.w	r3, [r7, r8, lsl #3]
    38ba:	b.n	371c <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    38bc:	bl	3468 <usb_free>
				packet = tx_first[endpoint];
    38c0:	ldr	r2, [pc, #200]	; (398c <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    38c2:	ldr	r1, [pc, #204]	; (3990 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    38c4:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    38c8:	cmp	r3, #0
    38ca:	beq.w	3b54 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    38ce:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    38d0:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    38d2:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    38d6:	add.w	r2, r3, #8
    38da:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    38de:	cmp	r4, #3
    38e0:	bhi.n	38ee <usb_isr+0x266>
    38e2:	tbb	[pc, r4]
    38e6:	.short	0x022c
    38e8:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    38ea:	movs	r2, #2
    38ec:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    38ee:	ldrh	r2, [r3, #0]
    38f0:	tst.w	r9, #8
    38f4:	ite	eq
    38f6:	moveq	r3, #136	; 0x88
    38f8:	movne	r3, #200	; 0xc8
    38fa:	orr.w	r3, r3, r2, lsl #16
    38fe:	str.w	r3, [r7, r8, lsl #3]
    3902:	b.n	371c <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3904:	lsls	r0, r4, #31
    3906:	bmi.w	3af0 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    390a:	lsls	r1, r4, #24
    390c:	bmi.w	3b70 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3910:	lsls	r2, r4, #30
    3912:	bpl.n	3922 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    3914:	ldr	r2, [pc, #124]	; (3994 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3916:	ldr	r1, [pc, #128]	; (3998 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3918:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    391a:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    391c:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    391e:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3920:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    3922:	lsls	r3, r4, #27
    3924:	bpl.n	392c <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    3926:	ldr	r3, [pc, #112]	; (3998 <usb_isr+0x310>)
    3928:	movs	r2, #16
    392a:	strb	r2, [r3, #0]
	}

}
    392c:	add	sp, #28
    392e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3932:	movs	r2, #4
    3934:	strb	r2, [r1, r6]
						break;
    3936:	b.n	38ee <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3938:	movs	r2, #5
    393a:	strb	r2, [r1, r6]
						break;
    393c:	b.n	38ee <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    393e:	movs	r2, #3
    3940:	strb	r2, [r1, r6]
						break;
    3942:	b.n	38ee <usb_isr+0x266>
    3944:	.word	0x1fff0000
    3948:	.word	0x1fff19bc
    394c:	.word	0x1fff1964
    3950:	.word	0x1fff1ee4
    3954:	.word	0x004000c8
    3958:	.word	0x00400088
    395c:	.word	0x1fff1a50
    3960:	.word	0x1fff19d1
    3964:	.word	0x1fff18e4
    3968:	.word	0x1fff1a3c
    396c:	.word	0x1fff1960
    3970:	.word	0x1fff19d0
    3974:	.word	0x400720c0
    3978:	.word	0x1fff1a48
    397c:	.word	0x1fff1978
    3980:	.word	0x1fff1a44
    3984:	.word	0x40072098
    3988:	.word	0x40072094
    398c:	.word	0x1fff1a14
    3990:	.word	0x1fff1a54
    3994:	.word	0x40072088
    3998:	.word	0x40072080
    399c:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    39a0:	movw	r4, #8225	; 0x2021
    39a4:	cmp	r1, r4
    39a6:	beq.w	3ae2 <usb_isr+0x45a>
    39aa:	bhi.n	3a40 <usb_isr+0x3b8>
    39ac:	cmp.w	r1, #2176	; 0x880
    39b0:	beq.w	3c46 <usb_isr+0x5be>
    39b4:	cmp.w	r1, #2304	; 0x900
    39b8:	bne.w	3bc6 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    39bc:	ldr	r2, [pc, #712]	; (3c88 <usb_isr+0x600>)
    39be:	ldr	r4, [pc, #716]	; (3c8c <usb_isr+0x604>)
    39c0:	ldrb	r1, [r5, #2]
    39c2:	strb	r1, [r2, #0]
    39c4:	add.w	r5, r4, #160	; 0xa0
    39c8:	b.n	39d2 <usb_isr+0x34a>
    39ca:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    39cc:	cmp	r5, r4
    39ce:	beq.w	3ce4 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    39d2:	ldr	r3, [r4, #32]
    39d4:	lsls	r1, r3, #24
    39d6:	bpl.n	39ca <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    39d8:	ldr	r0, [r4, #36]	; 0x24
    39da:	subs	r0, #8
    39dc:	bl	3468 <usb_free>
    39e0:	b.n	39ca <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    39e2:	cmp.w	lr, #64	; 0x40
    39e6:	it	ne
    39e8:	movne	r2, #0
    39ea:	b.n	3876 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    39ec:	ldr	r2, [pc, #672]	; (3c90 <usb_isr+0x608>)
    39ee:	ldrb	r5, [r1, #0]
    39f0:	ldrb	r0, [r1, #1]
    39f2:	strb	r5, [r2, #0]
    39f4:	strb	r0, [r2, #1]
    39f6:	ldrb	r5, [r1, #2]
    39f8:	ldrb	r0, [r1, #3]
    39fa:	strb	r5, [r2, #2]
    39fc:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    39fe:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3a00:	ldrb	r5, [r1, #4]
    3a02:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3a04:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3a06:	ldrb	r5, [r1, #5]
    3a08:	ldrb	r1, [r1, #6]
    3a0a:	strb	r5, [r2, #5]
    3a0c:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3a0e:	beq.w	3c3e <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a12:	ldr	r1, [pc, #640]	; (3c94 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a14:	ldr	r6, [pc, #640]	; (3c98 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a16:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a18:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3a1a:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a1e:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a20:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3a24:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a26:	ite	eq
    3a28:	moveq	r1, #136	; 0x88
    3a2a:	movne	r1, #200	; 0xc8
    3a2c:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a30:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3a34:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a38:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3a3a:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a3c:	str	r1, [r2, #4]
    3a3e:	b.n	389c <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3a40:	movw	r4, #8737	; 0x2221
    3a44:	cmp	r1, r4
    3a46:	bne.w	3e5a <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3a4a:	ldr.w	ip, [pc, #656]	; 3cdc <usb_isr+0x654>
    3a4e:	ldr	r3, [pc, #588]	; (3c9c <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3a50:	ldr	r1, [pc, #588]	; (3ca0 <usb_isr+0x618>)
    3a52:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3a54:	ldr.w	r5, [ip]
    3a58:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3a5a:	str	r0, [sp, #4]
    3a5c:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3a5e:	movs	r0, #0
    3a60:	str	r0, [sp, #8]
    3a62:	mov	r8, r0
    3a64:	mov	ip, r0
    3a66:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a68:	ldr	r1, [pc, #552]	; (3c94 <usb_isr+0x60c>)
    3a6a:	ldrb	r5, [r1, #0]
    3a6c:	orr.w	lr, r5, #2
    3a70:	add.w	r3, r9, lr, lsl #3
    3a74:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a76:	ldr	r3, [sp, #4]
    3a78:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a7a:	ldr	r3, [sp, #12]
    3a7c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a7e:	ite	eq
    3a80:	moveq	r4, #136	; 0x88
    3a82:	movne	r4, #200	; 0xc8
    3a84:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3a88:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a8c:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3a90:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3a92:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a94:	ldr.w	lr, [pc, #500]	; 3c8c <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    3a98:	ldr	r3, [pc, #508]	; (3c98 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    3a9a:	ldr.w	r8, [pc, #504]	; 3c94 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3a9e:	cmp	r0, #0
    3aa0:	bne.w	3bd4 <usb_isr+0x54c>
    3aa4:	cmp.w	ip, #64	; 0x40
    3aa8:	bne.n	3ae2 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3aaa:	orr.w	ip, r4, #2
    3aae:	add.w	r3, r9, ip, lsl #3
    3ab2:	ldr	r4, [sp, #8]
    3ab4:	ldr.w	lr, [pc, #468]	; 3c8c <usb_isr+0x604>
    3ab8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3aba:	cmp	r2, #0
    3abc:	bne.w	3c00 <usb_isr+0x578>
    3ac0:	lsls	r2, r0, #16
    3ac2:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3ac6:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3aca:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3ace:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3ad0:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3ad2:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3ad4:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3ad6:	cmp	r0, #64	; 0x40
    3ad8:	bne.n	3ae2 <usb_isr+0x45a>
    3ada:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3adc:	ldr	r2, [pc, #452]	; (3ca4 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3ade:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3ae0:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3ae2:	ldr	r2, [pc, #452]	; (3ca8 <usb_isr+0x620>)
    3ae4:	movs	r3, #1
    3ae6:	strb	r3, [r2, #0]
    3ae8:	b.n	38a2 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3aea:	bl	2848 <usb_serial_flush_callback>
    3aee:	b.n	375c <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3af0:	ldr	r3, [pc, #408]	; (3c8c <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3af2:	ldr	r0, [pc, #436]	; (3ca8 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3af4:	ldr	r1, [pc, #412]	; (3c94 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3af6:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3af8:	mov.w	lr, #2
    3afc:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b00:	ldr	r7, [pc, #424]	; (3cac <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3b02:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3b04:	ldr	r1, [pc, #424]	; (3cb0 <usb_isr+0x628>)
    3b06:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3b08:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3b0a:	ldr	r6, [pc, #424]	; (3cb4 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3b0c:	ldr	r5, [pc, #424]	; (3cb8 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3b0e:	ldr	r4, [pc, #428]	; (3cbc <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3b10:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b12:	movs	r1, #13
    3b14:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3b16:	movs	r1, #255	; 0xff
    3b18:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3b1a:	ldr.w	lr, [pc, #452]	; 3ce0 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3b1e:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3b20:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3b22:	ldr	r5, [pc, #412]	; (3cc0 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3b24:	ldr	r2, [pc, #412]	; (3cc4 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3b26:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3b2a:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3b2c:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3b2e:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3b32:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3b34:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3b36:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3b38:	add	sp, #28
    3b3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3b3e:	ldr	r2, [pc, #392]	; (3cc8 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3b40:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3b44:	ldrb	r3, [r2, #0]
    3b46:	adds	r3, #1
    3b48:	strb	r3, [r2, #0]
    3b4a:	b.n	371c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3b4c:	str.w	r0, [r3, r6, lsl #2]
    3b50:	ldr	r5, [pc, #376]	; (3ccc <usb_isr+0x644>)
    3b52:	b.n	36ea <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3b54:	ldrb	r3, [r1, r6]
    3b56:	cmp	r3, #3
    3b58:	bhi.n	3c30 <usb_isr+0x5a8>
    3b5a:	add	r2, pc, #4	; (adr r2, 3b60 <usb_isr+0x4d8>)
    3b5c:	ldr.w	pc, [r2, r3, lsl #2]
    3b60:	.word	0x0000371d
    3b64:	.word	0x0000371d
    3b68:	.word	0x00003bb5
    3b6c:	.word	0x00003baf
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b70:	ldr	r1, [pc, #312]	; (3cac <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    3b72:	ldr	r3, [pc, #324]	; (3cb8 <usb_isr+0x630>)
    3b74:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b76:	movs	r0, #13
    3b78:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3b7a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3b7c:	lsls	r2, r4, #30
    3b7e:	bpl.w	3922 <usb_isr+0x29a>
    3b82:	b.n	3914 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3b84:	movw	r2, #770	; 0x302
    3b88:	cmp	r1, r2
    3b8a:	bne.w	3e4a <usb_isr+0x7c2>
    3b8e:	ldrh	r1, [r5, #4]
    3b90:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3b94:	cmp	r1, #5
    3b96:	bhi.n	3bc6 <usb_isr+0x53e>
    3b98:	ldrh	r2, [r5, #2]
    3b9a:	cbnz	r2, 3bc6 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3b9c:	ldr	r4, [pc, #268]	; (3cac <usb_isr+0x624>)
    3b9e:	str	r0, [sp, #4]
    3ba0:	lsls	r1, r1, #2
    3ba2:	add	r4, r1
    3ba4:	ldrb	r1, [r4, #0]
    3ba6:	orr.w	r1, r1, #2
    3baa:	strb	r1, [r4, #0]
    3bac:	b.n	3a5e <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3bae:	movs	r3, #1
    3bb0:	strb	r3, [r1, r6]
						break;
    3bb2:	b.n	371c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3bb4:	movs	r3, #0
    3bb6:	strb	r3, [r1, r6]
						break;
    3bb8:	b.n	371c <usb_isr+0x94>
    3bba:	ldrh	r1, [r5, #4]
    3bbc:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3bc0:	cmp	r1, #5
    3bc2:	bls.w	3e64 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3bc6:	ldr	r2, [pc, #228]	; (3cac <usb_isr+0x624>)
    3bc8:	movs	r3, #15
    3bca:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3bcc:	ldr	r2, [pc, #216]	; (3ca8 <usb_isr+0x620>)
    3bce:	movs	r3, #1
    3bd0:	strb	r3, [r2, #0]
    3bd2:	b.n	38a2 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3bd4:	cmp	r0, #64	; 0x40
    3bd6:	bls.w	3aaa <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3bda:	orr.w	r4, r4, #2
    3bde:	add.w	r1, lr, r4, lsl #3
    3be2:	ldr	r6, [sp, #8]
    3be4:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3be6:	cbz	r2, 3c18 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3be8:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3bec:	ldr	r2, [pc, #224]	; (3cd0 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3bee:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3bf0:	mov	r3, r6
    3bf2:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3bf4:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3bf8:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3bfa:	str.w	r2, [lr, r4, lsl #3]
    3bfe:	b.n	3adc <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3c00:	ldrb.w	r3, [sp, #4]
    3c04:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c06:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c08:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3c0a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c0c:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c10:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c12:	str.w	r2, [lr, ip, lsl #3]
    3c16:	b.n	3ad6 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3c18:	ldrb.w	r1, [sp, #4]
    3c1c:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c1e:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c20:	ldr	r2, [pc, #140]	; (3cb0 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3c22:	strb.w	r5, [r8]
    3c26:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c28:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c2a:	str.w	r2, [lr, r4, lsl #3]
    3c2e:	b.n	3adc <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3c30:	tst.w	r9, #8
    3c34:	ite	eq
    3c36:	moveq	r3, #2
    3c38:	movne	r3, #3
    3c3a:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3c3c:	b.n	371c <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3c3e:	ldr	r2, [pc, #148]	; (3cd4 <usb_isr+0x64c>)
    3c40:	movs	r1, #15
    3c42:	strb	r1, [r2, #0]
    3c44:	b.n	3a12 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3c46:	ldr	r2, [pc, #64]	; (3c88 <usb_isr+0x600>)
    3c48:	ldr	r4, [pc, #140]	; (3cd8 <usb_isr+0x650>)
    3c4a:	ldrb	r2, [r2, #0]
    3c4c:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3c4e:	ldrh	r2, [r5, #6]
    3c50:	cmp	r2, r0
    3c52:	bcs.w	4018 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3c56:	ldr	r1, [pc, #60]	; (3c94 <usb_isr+0x60c>)
    3c58:	ldrb	r5, [r1, #0]
    3c5a:	cmp	r2, #64	; 0x40
    3c5c:	mov	ip, r2
    3c5e:	orr.w	lr, r5, #2
    3c62:	it	cs
    3c64:	movcs.w	ip, #64	; 0x40
    3c68:	add.w	r3, r4, ip
    3c6c:	add.w	r0, r9, lr, lsl #3
    3c70:	str	r3, [sp, #8]
    3c72:	movs	r3, #1
    3c74:	str	r4, [r0, #4]
    3c76:	mov.w	r8, ip, lsl #16
    3c7a:	rsb	r0, ip, r2
    3c7e:	str	r3, [sp, #4]
    3c80:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c82:	movs	r4, #200	; 0xc8
    3c84:	b.n	3a84 <usb_isr+0x3fc>
    3c86:	nop
    3c88:	.word	0x1fff1a50
    3c8c:	.word	0x1fff0000
    3c90:	.word	0x1fff1dac
    3c94:	.word	0x1fff1a44
    3c98:	.word	0x1fff19d0
    3c9c:	.word	0x1fff1db4
    3ca0:	.word	0x1fff18f4
    3ca4:	.word	0x1fff1978
    3ca8:	.word	0x40072094
    3cac:	.word	0x400720c0
    3cb0:	.word	0x00400088
    3cb4:	.word	0x40072088
    3cb8:	.word	0x40072080
    3cbc:	.word	0x40072098
    3cc0:	.word	0x1fff197c
    3cc4:	.word	0x1fff19d4
    3cc8:	.word	0x1fff1a45
    3ccc:	.word	0x1fff1964
    3cd0:	.word	0x004000c8
    3cd4:	.word	0x1fff19d1
    3cd8:	.word	0x1fff1a48
    3cdc:	.word	0x1fff18fc
    3ce0:	.word	0x4007208c
    3ce4:	ldr	r4, [pc, #704]	; (3fa8 <usb_isr+0x920>)
    3ce6:	ldr	r2, [pc, #708]	; (3fac <usb_isr+0x924>)
    3ce8:	ldr	r1, [pc, #708]	; (3fb0 <usb_isr+0x928>)
    3cea:	ldr	r0, [pc, #712]	; (3fb4 <usb_isr+0x92c>)
    3cec:	ldr	r5, [pc, #712]	; (3fb8 <usb_isr+0x930>)
    3cee:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3cf0:	movs	r3, #0
    3cf2:	ldr	r4, [pc, #712]	; (3fbc <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3cf4:	str	r4, [sp, #8]
    3cf6:	str	r6, [sp, #20]
    3cf8:	str	r5, [sp, #12]
    3cfa:	mov	r8, r0
    3cfc:	mov	r4, r3
    3cfe:	str	r7, [sp, #16]
    3d00:	mov	r6, r2
    3d02:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3d04:	ldr	r0, [r6, #0]
			while (p) {
    3d06:	cbz	r0, 3d14 <usb_isr+0x68c>
				n = p->next;
    3d08:	ldr	r7, [r0, #4]
				usb_free(p);
    3d0a:	bl	3468 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3d0e:	mov	r0, r7
    3d10:	cmp	r7, #0
    3d12:	bne.n	3d08 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3d14:	movs	r3, #0
    3d16:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3d18:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3d1a:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3d1c:	mov	r2, r3
    3d1e:	movs	r3, #0
    3d20:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3d24:	cbz	r0, 3d32 <usb_isr+0x6aa>
				n = p->next;
    3d26:	ldr	r7, [r0, #4]
				usb_free(p);
    3d28:	bl	3468 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3d2c:	mov	r0, r7
    3d2e:	cmp	r7, #0
    3d30:	bne.n	3d26 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3d32:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3d34:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3d36:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3d38:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3d3a:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3d3e:	ldr	r2, [sp, #8]
    3d40:	mov.w	r1, #0
			switch (tx_state[i]) {
    3d44:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3d46:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3d4a:	cmp	r3, #3
    3d4c:	bhi.n	3d5e <usb_isr+0x6d6>
    3d4e:	tbb	[pc, r3]
    3d52:	.short	0x0258
    3d54:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3d56:	ldr	r3, [sp, #4]
    3d58:	mov.w	r2, #1
    3d5c:	strb	r2, [r3, #0]
    3d5e:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3d60:	adds	r4, #1
    3d62:	adds	r3, #1
    3d64:	cmp	r4, #5
    3d66:	add.w	r6, r6, #4
    3d6a:	add.w	r5, r5, #4
    3d6e:	str	r3, [sp, #4]
    3d70:	bne.n	3d04 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d72:	ldr	r4, [pc, #588]	; (3fc0 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3d74:	ldr	r5, [pc, #588]	; (3fc4 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d76:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3d78:	ldr	r3, [pc, #588]	; (3fc8 <usb_isr+0x940>)
    3d7a:	ldr	r7, [sp, #16]
    3d7c:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3d7e:	movs	r1, #0
    3d80:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3d82:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d84:	lsls	r2, r2, #28
    3d86:	bmi.n	3e7e <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d88:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3d8a:	ldr	r1, [pc, #576]	; (3fcc <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d8c:	ldr.w	r8, [pc, #588]	; 3fdc <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3d90:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d92:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d94:	mov.w	r1, #0
    3d98:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3d9c:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3da0:	bmi.w	3f2a <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3da4:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3da6:	ldr	r1, [pc, #552]	; (3fd0 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3da8:	ldr.w	r8, [pc, #560]	; 3fdc <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3dac:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dae:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3db0:	mov.w	r1, #0
    3db4:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3db8:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dbc:	bmi.w	3f02 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3dc0:	ldr	r1, [pc, #528]	; (3fd4 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3dc2:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3dc4:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dc6:	movs	r1, #0
    3dc8:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3dcc:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dd0:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dd2:	ldr.w	r8, [pc, #520]	; 3fdc <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dd6:	bmi.n	3ed4 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3dd8:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3dda:	ldr	r1, [pc, #508]	; (3fd8 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3ddc:	ldr	r4, [pc, #508]	; (3fdc <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3dde:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3de0:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3de2:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3de4:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3de8:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dec:	bmi.n	3eaa <usb_isr+0x822>
    3dee:	ldrb	r3, [r6, #0]
    3df0:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3df2:	movs	r1, #0
    3df4:	eor.w	r2, r3, #1
    3df8:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3dfc:	str.w	r1, [r9, #184]	; 0xb8
    3e00:	b.n	3a5e <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3e02:	ldr	r3, [sp, #4]
    3e04:	mov.w	r2, #0
    3e08:	strb	r2, [r3, #0]
    3e0a:	b.n	3d5e <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3e0c:	ldr	r2, [pc, #464]	; (3fe0 <usb_isr+0x958>)
    3e0e:	ldr	r4, [r2, #4]
    3e10:	cmp	r4, #0
    3e12:	beq.w	3bc6 <usb_isr+0x53e>
    3e16:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3e18:	ldrh.w	lr, [r5, #4]
    3e1c:	b.n	3e28 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3e1e:	adds	r2, #12
			if (list->addr == NULL) break;
    3e20:	ldr	r4, [r2, #4]
    3e22:	cmp	r4, #0
    3e24:	beq.w	3bc6 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3e28:	ldrh	r3, [r2, #0]
    3e2a:	cmp	r3, r0
    3e2c:	bne.n	3e1e <usb_isr+0x796>
    3e2e:	ldrh	r3, [r2, #2]
    3e30:	cmp	r3, lr
    3e32:	bne.n	3e1e <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3e34:	lsrs	r0, r0, #8
    3e36:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3e38:	ite	eq
    3e3a:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3e3c:	ldrhne	r0, [r2, #8]
    3e3e:	b.n	3c4e <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3e40:	ldr	r4, [pc, #416]	; (3fe4 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3e42:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3e44:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3e46:	strb	r2, [r4, #1]
    3e48:	b.n	3c4e <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3e4a:	cmp.w	r1, #1280	; 0x500
    3e4e:	bne.w	3bc6 <usb_isr+0x53e>
    3e52:	movs	r3, #1
    3e54:	movs	r2, #0
    3e56:	str	r3, [sp, #4]
    3e58:	b.n	3a5e <usb_isr+0x3d6>
    3e5a:	movw	r2, #8993	; 0x2321
    3e5e:	cmp	r1, r2
    3e60:	beq.n	3e52 <usb_isr+0x7ca>
    3e62:	b.n	3bc6 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3e64:	ldrh	r2, [r5, #2]
    3e66:	cmp	r2, #0
    3e68:	bne.w	3bc6 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3e6c:	ldr	r4, [pc, #376]	; (3fe8 <usb_isr+0x960>)
    3e6e:	str	r0, [sp, #4]
    3e70:	lsls	r1, r1, #2
    3e72:	add	r4, r1
    3e74:	ldrb	r1, [r4, #0]
    3e76:	bic.w	r1, r1, #2
    3e7a:	strb	r1, [r4, #0]
    3e7c:	b.n	3a5e <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3e7e:	bl	3428 <usb_malloc>
				if (p) {
    3e82:	cmp	r0, #0
    3e84:	beq.w	3ff4 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3e88:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3e8a:	ldr	r2, [pc, #352]	; (3fec <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3e8c:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3e90:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3e94:	bl	3428 <usb_malloc>
				if (p) {
    3e98:	cmp	r0, #0
    3e9a:	beq.n	3f9c <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3e9c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3e9e:	ldr	r2, [pc, #336]	; (3ff0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3ea0:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ea4:	str.w	r2, [r9, #40]	; 0x28
    3ea8:	b.n	3d88 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3eaa:	bl	3428 <usb_malloc>
				if (p) {
    3eae:	cmp	r0, #0
    3eb0:	beq.n	3f60 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3eb2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3eb4:	ldr	r2, [pc, #308]	; (3fec <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3eb6:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3eba:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3ebe:	bl	3428 <usb_malloc>
				if (p) {
    3ec2:	cmp	r0, #0
    3ec4:	beq.n	3f54 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3ec6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ec8:	ldr	r2, [pc, #292]	; (3ff0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3eca:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ece:	str.w	r2, [r9, #168]	; 0xa8
    3ed2:	b.n	3dee <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3ed4:	bl	3428 <usb_malloc>
				if (p) {
    3ed8:	cmp	r0, #0
    3eda:	beq.w	400c <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3ede:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ee0:	ldr	r2, [pc, #264]	; (3fec <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3ee2:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ee6:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3eea:	bl	3428 <usb_malloc>
				if (p) {
    3eee:	cmp	r0, #0
    3ef0:	beq.w	4000 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3ef4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ef6:	ldr	r2, [pc, #248]	; (3ff0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3ef8:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3efc:	str.w	r2, [r9, #136]	; 0x88
    3f00:	b.n	3dd8 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f02:	bl	3428 <usb_malloc>
				if (p) {
    3f06:	cmp	r0, #0
    3f08:	beq.n	3f90 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f0a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f0c:	ldr	r2, [pc, #220]	; (3fec <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f0e:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f12:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f16:	bl	3428 <usb_malloc>
				if (p) {
    3f1a:	cbz	r0, 3f84 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3f1c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f1e:	ldr	r2, [pc, #208]	; (3ff0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f20:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f24:	str.w	r2, [r9, #104]	; 0x68
    3f28:	b.n	3dc0 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f2a:	bl	3428 <usb_malloc>
				if (p) {
    3f2e:	cbz	r0, 3f78 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f30:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f32:	ldr	r2, [pc, #184]	; (3fec <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f34:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f38:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f3c:	bl	3428 <usb_malloc>
				if (p) {
    3f40:	cbz	r0, 3f6c <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3f42:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f44:	ldr	r2, [pc, #168]	; (3ff0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f46:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f4a:	str.w	r2, [r9, #72]	; 0x48
    3f4e:	b.n	3da4 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3f50:	movs	r0, #2
    3f52:	b.n	3c4e <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3f54:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3f56:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3f5a:	adds	r2, #1
    3f5c:	strb	r2, [r5, #0]
    3f5e:	b.n	3dee <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3f60:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3f62:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3f66:	adds	r2, #1
    3f68:	strb	r2, [r5, #0]
    3f6a:	b.n	3ebe <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3f6c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3f6e:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3f72:	adds	r2, #1
    3f74:	strb	r2, [r5, #0]
    3f76:	b.n	3da4 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3f78:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3f7a:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3f7e:	adds	r2, #1
    3f80:	strb	r2, [r5, #0]
    3f82:	b.n	3f3c <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3f84:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3f86:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3f8a:	adds	r2, #1
    3f8c:	strb	r2, [r5, #0]
    3f8e:	b.n	3dc0 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3f90:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3f92:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3f96:	adds	r2, #1
    3f98:	strb	r2, [r5, #0]
    3f9a:	b.n	3f16 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3f9c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3f9e:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3fa2:	adds	r2, #1
    3fa4:	strb	r2, [r5, #0]
    3fa6:	b.n	3d88 <usb_isr+0x700>
    3fa8:	.word	0x1fff1a54
    3fac:	.word	0x1fff19bc
    3fb0:	.word	0x1fff1a14
    3fb4:	.word	0x1fff1a28
    3fb8:	.word	0x1fff1964
    3fbc:	.word	0x1fff1ee4
    3fc0:	.word	0x00005914
    3fc4:	.word	0x1fff1a45
    3fc8:	.word	0x400720c4
    3fcc:	.word	0x400720c8
    3fd0:	.word	0x400720cc
    3fd4:	.word	0x400720d0
    3fd8:	.word	0x400720d4
    3fdc:	.word	0x1fff0000
    3fe0:	.word	0x0000591c
    3fe4:	.word	0x1fff1a48
    3fe8:	.word	0x400720c0
    3fec:	.word	0x00400088
    3ff0:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3ff4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3ff6:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3ffa:	adds	r2, #1
    3ffc:	strb	r2, [r5, #0]
    3ffe:	b.n	3e94 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4000:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4002:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    4006:	adds	r2, #1
    4008:	strb	r2, [r5, #0]
    400a:	b.n	3dd8 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    400c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    400e:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    4012:	adds	r2, #1
    4014:	strb	r2, [r5, #0]
    4016:	b.n	3eea <usb_isr+0x862>
    4018:	cmp	r0, #64	; 0x40
    401a:	mov	ip, r0
    401c:	it	cs
    401e:	movcs.w	ip, #64	; 0x40
    4022:	add.w	r3, r4, ip
    4026:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4028:	movs	r3, #1
    402a:	rsb	r0, ip, r0
    402e:	mov.w	r8, ip, lsl #16
    4032:	movs	r2, #0
    4034:	str	r3, [sp, #4]
    4036:	b.n	3a68 <usb_isr+0x3e0>

00004038 <usb_init>:
}



void usb_init(void)
{
    4038:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    403c:	ldr	r4, [pc, #156]	; (40dc <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    403e:	bl	490c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4042:	movs	r2, #0
    4044:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4048:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    404a:	str	r2, [r3, #0]
		table[i].addr = 0;
    404c:	str	r2, [r3, #4]
    404e:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    4050:	cmp	r3, r0
		table[i].desc = 0;
    4052:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    4056:	bne.n	404a <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4058:	ldr	r0, [pc, #132]	; (40e0 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    405a:	ldr	r2, [pc, #136]	; (40e4 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    405c:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    405e:	ldr.w	lr, [pc, #156]	; 40fc <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    4062:	ldr	r6, [pc, #132]	; (40e8 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4064:	ldr	r5, [pc, #132]	; (40ec <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4066:	ldr	r7, [pc, #136]	; (40f0 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    4068:	ldr.w	ip, [pc, #148]	; 4100 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    406c:	ldr.w	r8, [pc, #148]	; 4104 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4070:	orr.w	r3, r3, #262144	; 0x40000
    4074:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    4076:	ldr	r3, [r2, #0]
    4078:	orr.w	r3, r3, #50331648	; 0x3000000
    407c:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    407e:	movs	r3, #3
    4080:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    4084:	movs	r3, #160	; 0xa0
    4086:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    4088:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    408c:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4090:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4094:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4096:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4098:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    409c:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    409e:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40a0:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    40a2:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40a4:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40a6:	ldr	r5, [pc, #76]	; (40f4 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    40a8:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    40ac:	ldr	r0, [pc, #72]	; (40f8 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    40ae:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    40b2:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    40b4:	movs	r3, #1
    40b6:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    40ba:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    40be:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40c2:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    40c4:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    40c6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40ca:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    40cc:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    40ce:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    40d2:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    40d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40da:	nop
    40dc:	.word	0x1fff0000
    40e0:	.word	0x40048034
    40e4:	.word	0x4000d800
    40e8:	.word	0x40072140
    40ec:	.word	0x4007209c
    40f0:	.word	0x400720b0
    40f4:	.word	0xe000e435
    40f8:	.word	0xe000e104
    40fc:	.word	0x40072144
    4100:	.word	0x40072080
    4104:	.word	0x40072088

00004108 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4108:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    410a:	ldr	r4, [pc, #176]	; (41bc <yield+0xb4>)
    410c:	ldrb	r3, [r4, #0]
    410e:	cbz	r3, 4112 <yield+0xa>
    4110:	pop	{r3, r4, r5, pc}
	running = 1;
    4112:	movs	r3, #1
    4114:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4116:	bl	2634 <usb_serial_available>
	if (Serial.available()) serialEvent();
    411a:	cmp	r0, #0
    411c:	bne.n	41a4 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    411e:	bl	46dc <serial_available>
	if (Serial1.available()) serialEvent1();
    4122:	cmp	r0, #0
    4124:	bne.n	419e <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    4126:	bl	43c4 <serial2_available>
	if (Serial2.available()) serialEvent2();
    412a:	cmp	r0, #0
    412c:	bne.n	4198 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    412e:	bl	49dc <serial3_available>
	if (Serial3.available()) serialEvent3();
    4132:	cbnz	r0, 4192 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    4134:	bl	44f0 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    4138:	cbnz	r0, 418c <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    413a:	bl	42cc <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    413e:	cbnz	r0, 4186 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    4140:	bl	4808 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    4144:	cbnz	r0, 4180 <yield+0x78>
#endif
	running = 0;
    4146:	movs	r3, #0
    4148:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    414a:	mrs	r3, IPSR
		if (ipsr != 0) return;
    414e:	cmp	r3, #0
    4150:	bne.n	4110 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4152:	mrs	r1, PRIMASK
		__disable_irq();
    4156:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4158:	ldr	r3, [pc, #100]	; (41c0 <yield+0xb8>)
    415a:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    415c:	cbz	r0, 41aa <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    415e:	ldr	r4, [pc, #100]	; (41c4 <yield+0xbc>)
    4160:	ldrb	r2, [r4, #0]
    4162:	cbnz	r2, 41aa <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    4164:	ldr	r5, [r0, #20]
    4166:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4168:	movs	r3, #1
    416a:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    416c:	cbz	r5, 41b2 <yield+0xaa>
			firstYield->_prev = nullptr;
    416e:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4170:	cbnz	r1, 4174 <yield+0x6c>
    4172:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4174:	movs	r5, #0
    4176:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    4178:	ldr	r3, [r0, #8]
    417a:	blx	r3
		runningFromYield = false;
    417c:	strb	r5, [r4, #0]
    417e:	b.n	4110 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    4180:	bl	42c4 <serialEvent6()>
    4184:	b.n	4146 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    4186:	bl	41cc <serialEvent5()>
    418a:	b.n	4140 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    418c:	bl	42b0 <serialEvent4()>
    4190:	b.n	413a <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    4192:	bl	4ad8 <serialEvent3()>
    4196:	b.n	4134 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    4198:	bl	42ac <serialEvent2()>
    419c:	b.n	412e <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    419e:	bl	4ad4 <serialEvent1()>
    41a2:	b.n	4126 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    41a4:	bl	41f8 <serialEvent()>
    41a8:	b.n	411e <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    41aa:	cmp	r1, #0
    41ac:	bne.n	4110 <yield+0x8>
    41ae:	cpsie	i
    41b0:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    41b2:	ldr	r3, [pc, #20]	; (41c8 <yield+0xc0>)
    41b4:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    41b6:	cmp	r1, #0
    41b8:	bne.n	4174 <yield+0x6c>
    41ba:	b.n	4172 <yield+0x6a>
    41bc:	.word	0x1fff1a59
    41c0:	.word	0x1fff1d6c
    41c4:	.word	0x1fff1d70
    41c8:	.word	0x1fff1d68

000041cc <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    41cc:	bx	lr
    41ce:	nop

000041d0 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    41d0:	b.w	2650 <usb_serial_flush_input>

000041d4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    41d4:	b.w	2604 <usb_serial_peekchar>

000041d8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    41d8:	b.w	25bc <usb_serial_getchar>

000041dc <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    41dc:	b.w	2634 <usb_serial_available>

000041e0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    41e0:	b.w	27f0 <usb_serial_flush_output>

000041e4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    41e4:	b.w	27a8 <usb_serial_write_buffer_free>

000041e8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    41e8:	mov	r0, r1
    41ea:	mov	r1, r2
    41ec:	b.w	2688 <usb_serial_write>

000041f0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    41f0:	mov	r0, r1
    41f2:	b.w	2790 <usb_serial_putchar>
    41f6:	nop

000041f8 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    41f8:	bx	lr
    41fa:	nop

000041fc <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    41fc:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    41fe:	ldr	r2, [pc, #24]	; (4218 <Print::println()+0x1c>)
	return write(buf, 2);
    4200:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4202:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    4204:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4206:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4208:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    420a:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    420e:	movs	r2, #2
    4210:	blx	r3
}
    4212:	add	sp, #12
    4214:	ldr.w	pc, [sp], #4
    4218:	.word	0x00005910

0000421c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    421c:	push	{r4, r5, r6, r7, lr}
    421e:	mov	r7, r0
    4220:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    4222:	cmp	r2, #0
    4224:	beq.n	428e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    4226:	cmp	r2, #1
    4228:	it	eq
    422a:	moveq	r2, #10
	}


	if (n == 0) {
    422c:	cbz	r1, 4284 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    422e:	movs	r4, #33	; 0x21
    4230:	b.n	4234 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    4232:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    4234:	udiv	r5, r1, r2
    4238:	mls	r1, r2, r5, r1
    423c:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    423e:	cmp	r1, #9
    4240:	add.w	r1, r0, #48	; 0x30
    4244:	it	ls
    4246:	uxtbls	r0, r1
    4248:	add	r1, sp, #40	; 0x28
    424a:	it	hi
    424c:	addhi	r0, #55	; 0x37
    424e:	add	r1, r4
    4250:	it	hi
    4252:	uxtbhi	r0, r0
    4254:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    4258:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    425a:	mov	r1, r5
    425c:	cmp	r5, #0
    425e:	bne.n	4232 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    4260:	cbz	r3, 4270 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    4262:	subs	r4, #1
    4264:	uxtb	r4, r4
		buf[i] = '-';
    4266:	add	r3, sp, #40	; 0x28
    4268:	add	r3, r4
    426a:	movs	r2, #45	; 0x2d
    426c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    4270:	ldr	r3, [r7, #0]
    4272:	add	r2, sp, #4
    4274:	adds	r1, r2, r4
    4276:	ldr	r3, [r3, #4]
    4278:	mov	r0, r7
    427a:	rsb	r2, r4, #34	; 0x22
    427e:	blx	r3
}
    4280:	add	sp, #44	; 0x2c
    4282:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    4284:	movs	r2, #48	; 0x30
    4286:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    428a:	movs	r4, #33	; 0x21
    428c:	b.n	4260 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    428e:	ldr	r3, [r0, #0]
    4290:	uxtb	r1, r1
    4292:	ldr	r3, [r3, #0]
    4294:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    4296:	add	sp, #44	; 0x2c
    4298:	pop	{r4, r5, r6, r7, pc}
    429a:	nop

0000429c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    429c:	cmp	r1, #0
		sign = '-';
		n = -n;
    429e:	itte	lt
    42a0:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    42a2:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    42a4:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    42a6:	movs	r2, #10
    42a8:	b.w	421c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000042ac <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    42ac:	bx	lr
    42ae:	nop

000042b0 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    42b0:	bx	lr
    42b2:	nop

000042b4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    42b4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    42b6:	bl	7dc <setup>
	while (1) {
		loop();
    42ba:	bl	7e0 <loop>
		yield();
    42be:	bl	4108 <yield>
    42c2:	b.n	42ba <main+0x6>

000042c4 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    42c4:	bx	lr
    42c6:	nop

000042c8 <operator new(unsigned int)>:
    42c8:	b.w	4d2c <malloc>

000042cc <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    42cc:	ldr	r2, [pc, #20]	; (42e4 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    42ce:	ldr	r3, [pc, #24]	; (42e8 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    42d0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    42d2:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    42d4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    42d6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    42d8:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    42da:	it	cc
    42dc:	addcc	r0, #64	; 0x40
    42de:	subs	r0, r0, r3
}
    42e0:	bx	lr
    42e2:	nop
    42e4:	.word	0x1fff1a60
    42e8:	.word	0x1fff1a61

000042ec <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    42ec:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    42ee:	ldr	r3, [pc, #172]	; (439c <uart4_status_isr+0xb0>)
    42f0:	ldrb	r2, [r3, #4]
    42f2:	lsls	r4, r2, #26
    42f4:	bpl.n	4336 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    42f6:	ldr	r0, [pc, #168]	; (43a0 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    42f8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    42fa:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    42fc:	ldr	r1, [pc, #164]	; (43a4 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    42fe:	adds	r3, #1
    4300:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4302:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    4304:	it	gt
    4306:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4308:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    430a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    430c:	beq.n	4316 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    430e:	ldr	r4, [pc, #152]	; (43a8 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    4310:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4312:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4314:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4316:	ldr	r2, [pc, #148]	; (43ac <uart4_status_isr+0xc0>)
    4318:	ldr	r1, [r2, #0]
    431a:	cbz	r1, 4336 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    431c:	ldr	r2, [pc, #144]	; (43b0 <uart4_status_isr+0xc4>)
    431e:	ldrb	r2, [r2, #0]
    4320:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4322:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    4324:	itet	cc
    4326:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    432a:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    432c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    432e:	cmp	r3, #39	; 0x27
    4330:	itt	gt
    4332:	movgt	r3, #1
    4334:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    4336:	ldr	r2, [pc, #100]	; (439c <uart4_status_isr+0xb0>)
    4338:	ldrb	r3, [r2, #3]
    433a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    433c:	lsls	r0, r3, #24
    433e:	bmi.n	4364 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    4340:	lsls	r2, r3, #25
    4342:	bpl.n	4360 <uart4_status_isr+0x74>
    4344:	ldr	r3, [pc, #84]	; (439c <uart4_status_isr+0xb0>)
    4346:	ldrb	r3, [r3, #4]
    4348:	lsls	r3, r3, #25
    434a:	bpl.n	4360 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    434c:	ldr	r3, [pc, #100]	; (43b4 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    434e:	ldr	r1, [pc, #104]	; (43b8 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4350:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    4352:	movs	r2, #0
    4354:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4356:	cbz	r3, 435a <uart4_status_isr+0x6e>
    4358:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    435a:	ldr	r3, [pc, #64]	; (439c <uart4_status_isr+0xb0>)
    435c:	movs	r2, #44	; 0x2c
    435e:	strb	r2, [r3, #3]
	}
}
    4360:	pop	{r4, r5}
    4362:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    4364:	ldrb	r1, [r2, #4]
    4366:	lsls	r1, r1, #24
    4368:	bpl.n	4340 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    436a:	ldr	r1, [pc, #80]	; (43bc <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    436c:	ldr	r0, [pc, #64]	; (43b0 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    436e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4370:	ldrb	r1, [r0, #0]
    4372:	uxtb	r1, r1
		if (head == tail) {
    4374:	cmp	r4, r1
    4376:	beq.n	4394 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    4378:	adds	r2, r1, #1
    437a:	cmp	r2, #39	; 0x27
    437c:	itt	hi
    437e:	movhi	r1, #0
    4380:	movhi	r2, r1
			n = tx_buffer[tail];
    4382:	ldr	r5, [pc, #60]	; (43c0 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    4384:	ldr	r4, [pc, #20]	; (439c <uart4_status_isr+0xb0>)
    4386:	it	ls
    4388:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    438a:	ldrb	r2, [r5, r2]
    438c:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    438e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4390:	strb	r1, [r0, #0]
    4392:	b.n	4340 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    4394:	movs	r1, #108	; 0x6c
    4396:	strb	r1, [r2, #3]
    4398:	b.n	4340 <uart4_status_isr+0x54>
    439a:	nop
    439c:	.word	0x400ea000
    43a0:	.word	0x1fff1a60
    43a4:	.word	0x1fff1a61
    43a8:	.word	0x1fff1a8c
    43ac:	.word	0x1fff1a5c
    43b0:	.word	0x1fff1acd
    43b4:	.word	0x1fff1ad0
    43b8:	.word	0x1fff1acc
    43bc:	.word	0x1fff1ad4
    43c0:	.word	0x1fff1a64

000043c4 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43c4:	ldr	r2, [pc, #20]	; (43dc <serial2_available+0x18>)
	tail = rx_buffer_tail;
    43c6:	ldr	r3, [pc, #24]	; (43e0 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43c8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    43ca:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43cc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    43ce:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    43d0:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    43d2:	it	cc
    43d4:	addcc	r0, #64	; 0x40
    43d6:	subs	r0, r0, r3
}
    43d8:	bx	lr
    43da:	nop
    43dc:	.word	0x1fff1b48
    43e0:	.word	0x1fff1add

000043e4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    43e4:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    43e6:	ldr	r3, [pc, #224]	; (44c8 <uart1_status_isr+0xe4>)
    43e8:	ldrb	r2, [r3, #4]
    43ea:	tst.w	r2, #48	; 0x30
    43ee:	beq.n	444a <uart1_status_isr+0x66>
		__disable_irq();
    43f0:	cpsid	i
		avail = UART1_RCFIFO;
    43f2:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    43f4:	and.w	r2, r1, #255	; 0xff
    43f8:	cmp	r1, #0
    43fa:	beq.n	4478 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    43fc:	cpsie	i
			head = rx_buffer_head;
    43fe:	ldr	r7, [pc, #204]	; (44cc <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4400:	ldr	r1, [pc, #204]	; (44d0 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4402:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4404:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4406:	ldr	r6, [pc, #204]	; (44d4 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4408:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    440a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    440c:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    440e:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4410:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4412:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4414:	it	cs
    4416:	movcs	r3, #0
				if (newhead != tail) {
    4418:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    441a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    441e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4420:	itt	ne
    4422:	strbne	r1, [r6, r3]
    4424:	movne	r0, r3
				}
			} while (--avail > 0);
    4426:	ands.w	r2, r2, #255	; 0xff
    442a:	bne.n	440e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    442c:	ldr	r3, [pc, #168]	; (44d8 <uart1_status_isr+0xf4>)
    442e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4430:	uxtb	r2, r0
    4432:	strb	r2, [r7, #0]
			if (rts_pin) {
    4434:	cbz	r3, 444a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4436:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4438:	itet	cc
    443a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    443e:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4440:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4442:	cmp	r0, #39	; 0x27
    4444:	itt	gt
    4446:	movgt	r2, #1
    4448:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    444a:	ldr	r1, [pc, #124]	; (44c8 <uart1_status_isr+0xe4>)
    444c:	ldrb	r2, [r1, #3]
    444e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4450:	lsls	r5, r2, #24
    4452:	bmi.n	4482 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    4454:	lsls	r2, r2, #25
    4456:	bpl.n	4474 <uart1_status_isr+0x90>
    4458:	ldr	r3, [pc, #108]	; (44c8 <uart1_status_isr+0xe4>)
    445a:	ldrb	r3, [r3, #4]
    445c:	lsls	r3, r3, #25
    445e:	bpl.n	4474 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4460:	ldr	r3, [pc, #120]	; (44dc <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    4462:	ldr	r1, [pc, #124]	; (44e0 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4464:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    4466:	movs	r2, #0
    4468:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    446a:	cbz	r3, 446e <uart1_status_isr+0x8a>
    446c:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    446e:	ldr	r3, [pc, #88]	; (44c8 <uart1_status_isr+0xe4>)
    4470:	movs	r2, #60	; 0x3c
    4472:	strb	r2, [r3, #3]
	}
}
    4474:	pop	{r4, r5, r6, r7}
    4476:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    4478:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    447a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    447c:	strb	r2, [r3, #17]
			__enable_irq();
    447e:	cpsie	i
    4480:	b.n	444a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4482:	ldrb	r3, [r1, #4]
    4484:	lsls	r4, r3, #24
    4486:	bpl.n	4454 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    4488:	ldr	r3, [pc, #88]	; (44e4 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    448a:	ldr	r6, [pc, #92]	; (44e8 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    448c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    448e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4490:	uxtb	r4, r4
		tail = tx_buffer_tail;
    4492:	uxtb	r3, r3
		do {
			if (tail == head) break;
    4494:	cmp	r4, r3
    4496:	beq.n	44b6 <uart1_status_isr+0xd2>
    4498:	ldr	r5, [pc, #80]	; (44ec <uart1_status_isr+0x108>)
    449a:	b.n	44a0 <uart1_status_isr+0xbc>
    449c:	cmp	r3, r4
    449e:	beq.n	44b6 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    44a0:	adds	r3, #1
    44a2:	cmp	r3, #40	; 0x28
    44a4:	it	cs
    44a6:	movcs	r3, #0
			avail = UART1_S1;
    44a8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    44aa:	ldrb	r0, [r5, r3]
    44ac:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    44ae:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    44b0:	ldrb	r0, [r1, #20]
    44b2:	cmp	r0, #7
    44b4:	bls.n	449c <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    44b6:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    44b8:	ldr	r1, [pc, #12]	; (44c8 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    44ba:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    44bc:	ldrb	r3, [r1, #4]
    44be:	lsls	r0, r3, #24
    44c0:	itt	mi
    44c2:	movmi	r3, #124	; 0x7c
    44c4:	strbmi	r3, [r1, #3]
    44c6:	b.n	4454 <uart1_status_isr+0x70>
    44c8:	.word	0x4006b000
    44cc:	.word	0x1fff1b48
    44d0:	.word	0x1fff1add
    44d4:	.word	0x1fff1b08
    44d8:	.word	0x1fff1ad8
    44dc:	.word	0x1fff1b4c
    44e0:	.word	0x1fff1adc
    44e4:	.word	0x1fff1b50
    44e8:	.word	0x1fff1b49
    44ec:	.word	0x1fff1ae0

000044f0 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    44f0:	ldr	r2, [pc, #20]	; (4508 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    44f2:	ldr	r3, [pc, #24]	; (450c <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    44f4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    44f6:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    44f8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    44fa:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    44fc:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    44fe:	it	cc
    4500:	addcc	r0, #64	; 0x40
    4502:	subs	r0, r0, r3
}
    4504:	bx	lr
    4506:	nop
    4508:	.word	0x1fff1b58
    450c:	.word	0x1fff1b59

00004510 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    4510:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    4512:	ldr	r3, [pc, #172]	; (45c0 <uart3_status_isr+0xb0>)
    4514:	ldrb	r2, [r3, #4]
    4516:	lsls	r4, r2, #26
    4518:	bpl.n	455a <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    451a:	ldr	r0, [pc, #168]	; (45c4 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    451c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    451e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4520:	ldr	r1, [pc, #164]	; (45c8 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4522:	adds	r3, #1
    4524:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4526:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4528:	it	gt
    452a:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    452c:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    452e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4530:	beq.n	453a <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    4532:	ldr	r4, [pc, #152]	; (45cc <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    4534:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4536:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4538:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    453a:	ldr	r2, [pc, #148]	; (45d0 <uart3_status_isr+0xc0>)
    453c:	ldr	r1, [r2, #0]
    453e:	cbz	r1, 455a <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4540:	ldr	r2, [pc, #144]	; (45d4 <uart3_status_isr+0xc4>)
    4542:	ldrb	r2, [r2, #0]
    4544:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4546:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4548:	itet	cc
    454a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    454e:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4550:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4552:	cmp	r3, #39	; 0x27
    4554:	itt	gt
    4556:	movgt	r3, #1
    4558:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    455a:	ldr	r2, [pc, #100]	; (45c0 <uart3_status_isr+0xb0>)
    455c:	ldrb	r3, [r2, #3]
    455e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    4560:	lsls	r0, r3, #24
    4562:	bmi.n	4588 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    4564:	lsls	r2, r3, #25
    4566:	bpl.n	4584 <uart3_status_isr+0x74>
    4568:	ldr	r3, [pc, #84]	; (45c0 <uart3_status_isr+0xb0>)
    456a:	ldrb	r3, [r3, #4]
    456c:	lsls	r3, r3, #25
    456e:	bpl.n	4584 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4570:	ldr	r3, [pc, #100]	; (45d8 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    4572:	ldr	r1, [pc, #104]	; (45dc <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4574:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    4576:	movs	r2, #0
    4578:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    457a:	cbz	r3, 457e <uart3_status_isr+0x6e>
    457c:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    457e:	ldr	r3, [pc, #64]	; (45c0 <uart3_status_isr+0xb0>)
    4580:	movs	r2, #44	; 0x2c
    4582:	strb	r2, [r3, #3]
	}
}
    4584:	pop	{r4, r5}
    4586:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    4588:	ldrb	r1, [r2, #4]
    458a:	lsls	r1, r1, #24
    458c:	bpl.n	4564 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    458e:	ldr	r1, [pc, #80]	; (45e0 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4590:	ldr	r0, [pc, #64]	; (45d4 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4592:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4594:	ldrb	r1, [r0, #0]
    4596:	uxtb	r1, r1
		if (head == tail) {
    4598:	cmp	r4, r1
    459a:	beq.n	45b8 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    459c:	adds	r2, r1, #1
    459e:	cmp	r2, #39	; 0x27
    45a0:	itt	hi
    45a2:	movhi	r1, #0
    45a4:	movhi	r2, r1
			n = tx_buffer[tail];
    45a6:	ldr	r5, [pc, #60]	; (45e4 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    45a8:	ldr	r4, [pc, #20]	; (45c0 <uart3_status_isr+0xb0>)
    45aa:	it	ls
    45ac:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    45ae:	ldrb	r2, [r5, r2]
    45b0:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    45b2:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    45b4:	strb	r1, [r0, #0]
    45b6:	b.n	4564 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    45b8:	movs	r1, #108	; 0x6c
    45ba:	strb	r1, [r2, #3]
    45bc:	b.n	4564 <uart3_status_isr+0x54>
    45be:	nop
    45c0:	.word	0x4006d000
    45c4:	.word	0x1fff1b58
    45c8:	.word	0x1fff1b59
    45cc:	.word	0x1fff1b84
    45d0:	.word	0x1fff1b54
    45d4:	.word	0x1fff1bc5
    45d8:	.word	0x1fff1bc8
    45dc:	.word	0x1fff1bc4
    45e0:	.word	0x1fff1bcc
    45e4:	.word	0x1fff1b5c

000045e8 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    45e8:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    45ea:	ldr	r4, [pc, #64]	; (462c <fault_isr+0x44>)
    45ec:	b.n	4600 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    45ee:	ldr	r3, [r4, #0]
    45f0:	lsls	r1, r3, #21
    45f2:	bmi.n	4610 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    45f4:	ldr	r3, [r4, #0]
    45f6:	lsls	r2, r3, #20
    45f8:	bmi.n	461a <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    45fa:	ldr	r3, [r4, #0]
    45fc:	lsls	r3, r3, #19
    45fe:	bmi.n	4624 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4600:	ldr	r3, [r4, #0]
    4602:	lsls	r0, r3, #13
    4604:	bpl.n	45ee <fault_isr+0x6>
    4606:	bl	3688 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    460a:	ldr	r3, [r4, #0]
    460c:	lsls	r1, r3, #21
    460e:	bpl.n	45f4 <fault_isr+0xc>
    4610:	bl	46fc <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4614:	ldr	r3, [r4, #0]
    4616:	lsls	r2, r3, #20
    4618:	bpl.n	45fa <fault_isr+0x12>
    461a:	bl	43e4 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    461e:	ldr	r3, [r4, #0]
    4620:	lsls	r3, r3, #19
    4622:	bpl.n	4600 <fault_isr+0x18>
    4624:	bl	49fc <uart2_status_isr>
    4628:	b.n	4600 <fault_isr+0x18>
    462a:	nop
    462c:	.word	0x40048034

00004630 <unused_isr>:
	}
}

void unused_isr(void)
{
    4630:	push	{r3, lr}
	fault_isr();
    4632:	bl	45e8 <fault_isr>
    4636:	nop

00004638 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4638:	ldr	r3, [pc, #4]	; (4640 <startup_early_hook+0x8>)
    463a:	movs	r2, #16
    463c:	strh	r2, [r3, #0]
    463e:	bx	lr
    4640:	.word	0x40052000

00004644 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    4644:	bx	lr
    4646:	nop

00004648 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    4648:	ldr	r1, [pc, #36]	; (4670 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    464a:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    464c:	ldr	r3, [r1, #0]
	if (incr != 0) {
    464e:	cbz	r0, 465e <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    4650:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    4652:	add	r0, r3
    4654:	sub.w	r2, r2, #8192	; 0x2000
    4658:	cmp	r0, r2
    465a:	bcs.n	4662 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    465c:	str	r0, [r1, #0]
	}
	return prev;
    465e:	mov	r0, r3
}
    4660:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    4662:	bl	4cd0 <__errno>
    4666:	movs	r3, #12
    4668:	str	r3, [r0, #0]
			return (void *)-1;
    466a:	mov.w	r0, #4294967295
    466e:	pop	{r3, pc}
    4670:	.word	0x1fff0c80

00004674 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    4674:	ldr	r2, [pc, #32]	; (4698 <kinetis_hsrun_disable+0x24>)
    4676:	ldrb	r3, [r2, #0]
    4678:	cmp	r3, #128	; 0x80
    467a:	beq.n	4680 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    467c:	movs	r0, #0
}
    467e:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    4680:	ldr	r1, [pc, #24]	; (469c <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    4682:	ldr	r3, [pc, #28]	; (46a0 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    4684:	ldr	r0, [pc, #28]	; (46a4 <kinetis_hsrun_disable+0x30>)
    4686:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    4688:	movs	r1, #0
    468a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    468c:	ldrb	r3, [r2, #0]
    468e:	cmp	r3, #128	; 0x80
    4690:	beq.n	468c <kinetis_hsrun_disable+0x18>
		return 1;
    4692:	movs	r0, #1
    4694:	bx	lr
    4696:	nop
    4698:	.word	0x4007e003
    469c:	.word	0x40048044
    46a0:	.word	0x4007e001
    46a4:	.word	0x22280000

000046a8 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    46a8:	ldr	r2, [pc, #36]	; (46d0 <kinetis_hsrun_enable+0x28>)
    46aa:	ldrb	r3, [r2, #0]
    46ac:	cmp	r3, #1
    46ae:	beq.n	46b4 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    46b0:	movs	r0, #0
}
    46b2:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    46b4:	add.w	r3, r3, #1073741824	; 0x40000000
    46b8:	add.w	r3, r3, #516096	; 0x7e000
    46bc:	movs	r1, #96	; 0x60
    46be:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    46c0:	ldrb	r3, [r2, #0]
    46c2:	cmp	r3, #128	; 0x80
    46c4:	bne.n	46c0 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    46c6:	ldr	r3, [pc, #12]	; (46d4 <kinetis_hsrun_enable+0x2c>)
    46c8:	ldr	r2, [pc, #12]	; (46d8 <kinetis_hsrun_enable+0x30>)
    46ca:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    46cc:	movs	r0, #1
    46ce:	bx	lr
    46d0:	.word	0x4007e003
    46d4:	.word	0x40048044
    46d8:	.word	0x02060000

000046dc <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    46dc:	ldr	r2, [pc, #20]	; (46f4 <serial_available+0x18>)
	tail = rx_buffer_tail;
    46de:	ldr	r3, [pc, #24]	; (46f8 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    46e0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    46e2:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    46e4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    46e6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    46e8:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    46ea:	it	cc
    46ec:	addcc	r0, #64	; 0x40
    46ee:	subs	r0, r0, r3
}
    46f0:	bx	lr
    46f2:	nop
    46f4:	.word	0x1fff1bd4
    46f8:	.word	0x1fff1bd5

000046fc <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    46fc:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    46fe:	ldr	r3, [pc, #224]	; (47e0 <uart0_status_isr+0xe4>)
    4700:	ldrb	r2, [r3, #4]
    4702:	tst.w	r2, #48	; 0x30
    4706:	beq.n	4762 <uart0_status_isr+0x66>
		__disable_irq();
    4708:	cpsid	i
		avail = UART0_RCFIFO;
    470a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    470c:	and.w	r2, r1, #255	; 0xff
    4710:	cmp	r1, #0
    4712:	beq.n	4790 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4714:	cpsie	i
			head = rx_buffer_head;
    4716:	ldr	r7, [pc, #204]	; (47e4 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4718:	ldr	r1, [pc, #204]	; (47e8 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    471a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    471c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    471e:	ldr	r6, [pc, #204]	; (47ec <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4720:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4722:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4724:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    4726:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4728:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    472a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    472c:	it	cs
    472e:	movcs	r3, #0
				if (newhead != tail) {
    4730:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4732:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4736:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4738:	itt	ne
    473a:	strbne	r1, [r6, r3]
    473c:	movne	r0, r3
				}
			} while (--avail > 0);
    473e:	ands.w	r2, r2, #255	; 0xff
    4742:	bne.n	4726 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4744:	ldr	r3, [pc, #168]	; (47f0 <uart0_status_isr+0xf4>)
    4746:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4748:	uxtb	r2, r0
    474a:	strb	r2, [r7, #0]
			if (rts_pin) {
    474c:	cbz	r3, 4762 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    474e:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4750:	itet	cc
    4752:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4756:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4758:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    475a:	cmp	r0, #39	; 0x27
    475c:	itt	gt
    475e:	movgt	r2, #1
    4760:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    4762:	ldr	r1, [pc, #124]	; (47e0 <uart0_status_isr+0xe4>)
    4764:	ldrb	r2, [r1, #3]
    4766:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4768:	lsls	r5, r2, #24
    476a:	bmi.n	479a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    476c:	lsls	r2, r2, #25
    476e:	bpl.n	478c <uart0_status_isr+0x90>
    4770:	ldr	r3, [pc, #108]	; (47e0 <uart0_status_isr+0xe4>)
    4772:	ldrb	r3, [r3, #4]
    4774:	lsls	r3, r3, #25
    4776:	bpl.n	478c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4778:	ldr	r3, [pc, #120]	; (47f4 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    477a:	ldr	r1, [pc, #124]	; (47f8 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    477c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    477e:	movs	r2, #0
    4780:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4782:	cbz	r3, 4786 <uart0_status_isr+0x8a>
    4784:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    4786:	ldr	r3, [pc, #88]	; (47e0 <uart0_status_isr+0xe4>)
    4788:	movs	r2, #60	; 0x3c
    478a:	strb	r2, [r3, #3]
	}
}
    478c:	pop	{r4, r5, r6, r7}
    478e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4790:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    4792:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4794:	strb	r2, [r3, #17]
			__enable_irq();
    4796:	cpsie	i
    4798:	b.n	4762 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    479a:	ldrb	r3, [r1, #4]
    479c:	lsls	r4, r3, #24
    479e:	bpl.n	476c <uart0_status_isr+0x70>
		head = tx_buffer_head;
    47a0:	ldr	r3, [pc, #88]	; (47fc <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    47a2:	ldr	r6, [pc, #92]	; (4800 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    47a4:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    47a6:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    47a8:	uxtb	r4, r4
		tail = tx_buffer_tail;
    47aa:	uxtb	r3, r3
		do {
			if (tail == head) break;
    47ac:	cmp	r4, r3
    47ae:	beq.n	47ce <uart0_status_isr+0xd2>
    47b0:	ldr	r5, [pc, #80]	; (4804 <uart0_status_isr+0x108>)
    47b2:	b.n	47b8 <uart0_status_isr+0xbc>
    47b4:	cmp	r3, r4
    47b6:	beq.n	47ce <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    47b8:	adds	r3, #1
    47ba:	cmp	r3, #64	; 0x40
    47bc:	it	cs
    47be:	movcs	r3, #0
			avail = UART0_S1;
    47c0:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    47c2:	ldrb	r0, [r5, r3]
    47c4:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    47c6:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    47c8:	ldrb	r0, [r1, #20]
    47ca:	cmp	r0, #7
    47cc:	bls.n	47b4 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    47ce:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    47d0:	ldr	r1, [pc, #12]	; (47e0 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    47d2:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    47d4:	ldrb	r3, [r1, #4]
    47d6:	lsls	r0, r3, #24
    47d8:	itt	mi
    47da:	movmi	r3, #124	; 0x7c
    47dc:	strbmi	r3, [r1, #3]
    47de:	b.n	476c <uart0_status_isr+0x70>
    47e0:	.word	0x4006a000
    47e4:	.word	0x1fff1bd4
    47e8:	.word	0x1fff1bd5
    47ec:	.word	0x1fff1c18
    47f0:	.word	0x1fff1bd0
    47f4:	.word	0x1fff1c5c
    47f8:	.word	0x1fff1c58
    47fc:	.word	0x1fff1c60
    4800:	.word	0x1fff1c59
    4804:	.word	0x1fff1bd8

00004808 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4808:	ldr	r2, [pc, #20]	; (4820 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    480a:	ldr	r3, [pc, #24]	; (4824 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    480c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    480e:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4810:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4812:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4814:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    4816:	it	cc
    4818:	addcc	r0, #64	; 0x40
    481a:	subs	r0, r0, r3
}
    481c:	bx	lr
    481e:	nop
    4820:	.word	0x1fff1c68
    4824:	.word	0x1fff1c69

00004828 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    4828:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    482a:	ldr	r3, [pc, #176]	; (48dc <lpuart0_status_isr+0xb4>)
    482c:	ldr	r2, [r3, #4]
    482e:	lsls	r4, r2, #10
    4830:	bpl.n	4872 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4832:	ldr	r0, [pc, #172]	; (48e0 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    4834:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    4836:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4838:	ldr	r1, [pc, #168]	; (48e4 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    483a:	adds	r3, #1
    483c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    483e:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4840:	it	gt
    4842:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4844:	cmp	r3, r1
    4846:	beq.n	4852 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    4848:	ldr	r4, [pc, #156]	; (48e8 <lpuart0_status_isr+0xc0>)
    484a:	uxtb	r2, r2
			rx_buffer_head = head;
    484c:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    484e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4850:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4852:	ldr	r2, [pc, #152]	; (48ec <lpuart0_status_isr+0xc4>)
    4854:	ldr	r1, [r2, #0]
    4856:	cbz	r1, 4872 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4858:	ldr	r2, [pc, #148]	; (48f0 <lpuart0_status_isr+0xc8>)
    485a:	ldrb	r2, [r2, #0]
    485c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    485e:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4860:	itet	cc
    4862:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4866:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4868:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    486a:	cmp	r3, #39	; 0x27
    486c:	itt	gt
    486e:	movgt	r3, #1
    4870:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    4872:	ldr	r2, [pc, #104]	; (48dc <lpuart0_status_isr+0xb4>)
    4874:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    4876:	lsls	r0, r3, #8
    4878:	bpl.n	4880 <lpuart0_status_isr+0x58>
    487a:	ldr	r2, [r2, #4]
    487c:	lsls	r1, r2, #8
    487e:	bmi.n	48a4 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    4880:	lsls	r2, r3, #9
    4882:	bpl.n	48a0 <lpuart0_status_isr+0x78>
    4884:	ldr	r3, [pc, #84]	; (48dc <lpuart0_status_isr+0xb4>)
    4886:	ldr	r3, [r3, #4]
    4888:	lsls	r3, r3, #9
    488a:	bpl.n	48a0 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    488c:	ldr	r3, [pc, #100]	; (48f4 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    488e:	ldr	r1, [pc, #104]	; (48f8 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    4890:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    4892:	movs	r2, #0
    4894:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4896:	cbz	r3, 489a <lpuart0_status_isr+0x72>
    4898:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    489a:	ldr	r3, [pc, #96]	; (48fc <lpuart0_status_isr+0xd4>)
    489c:	movs	r2, #0
    489e:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    48a0:	pop	{r4, r5}
    48a2:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    48a4:	ldr	r2, [pc, #88]	; (4900 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    48a6:	ldr	r1, [pc, #72]	; (48f0 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    48a8:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    48aa:	ldrb	r2, [r1, #0]
    48ac:	uxtb	r2, r2
		if (head == tail) {
    48ae:	cmp	r0, r2
    48b0:	beq.n	48ce <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    48b2:	adds	r2, #1
    48b4:	cmp	r2, #39	; 0x27
    48b6:	itt	hi
    48b8:	movhi	r0, #0
    48ba:	movhi	r2, r0
			n = tx_buffer[tail];
    48bc:	ldr	r5, [pc, #68]	; (4904 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    48be:	ldr	r4, [pc, #28]	; (48dc <lpuart0_status_isr+0xb4>)
    48c0:	it	ls
    48c2:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    48c4:	ldrb	r2, [r5, r2]
    48c6:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    48c8:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    48ca:	strb	r0, [r1, #0]
    48cc:	b.n	4880 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    48ce:	ldr	r0, [pc, #56]	; (4908 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    48d0:	ldr	r2, [pc, #40]	; (48fc <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    48d2:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    48d4:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    48d6:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    48d8:	str	r1, [r2, #0]
    48da:	b.n	4880 <lpuart0_status_isr+0x58>
    48dc:	.word	0x400c4000
    48e0:	.word	0x1fff1c68
    48e4:	.word	0x1fff1c69
    48e8:	.word	0x1fff1c94
    48ec:	.word	0x1fff1c64
    48f0:	.word	0x1fff1cd5
    48f4:	.word	0x1fff1cd8
    48f8:	.word	0x1fff1cd4
    48fc:	.word	0x43880158
    4900:	.word	0x1fff1cdc
    4904:	.word	0x1fff1c6c
    4908:	.word	0x4388015c

0000490c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    490c:	push	{r4, lr}
    490e:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4910:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    4912:	bl	4674 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    4916:	ldr	r2, [pc, #96]	; (4978 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4918:	ldr	r3, [pc, #96]	; (497c <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    491a:	ldr	r1, [pc, #100]	; (4980 <usb_init_serialnumber+0x74>)
    491c:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    491e:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4920:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4922:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4924:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4926:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4928:	ldrb	r3, [r2, #0]
    492a:	lsls	r3, r3, #24
    492c:	bpl.n	4928 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    492e:	ldr	r3, [pc, #84]	; (4984 <usb_init_serialnumber+0x78>)
    4930:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    4932:	bl	46a8 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    4936:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4938:	ldr	r3, [pc, #76]	; (4988 <usb_init_serialnumber+0x7c>)
    493a:	cmp	r4, r3
    493c:	itt	ls
    493e:	addls.w	r4, r4, r4, lsl #2
    4942:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    4944:	mov	r0, r4
    4946:	ldr	r4, [pc, #68]	; (498c <usb_init_serialnumber+0x80>)
    4948:	add	r1, sp, #4
    494a:	movs	r2, #10
    494c:	bl	4990 <ultoa>
    4950:	add	r1, sp, #4
    4952:	mov	r0, r4
	for (i=0; i<10; i++) {
    4954:	movs	r3, #0
		char c = buf[i];
    4956:	ldrb.w	r2, [r1], #1
    495a:	adds	r3, #1
		if (!c) break;
    495c:	cbz	r2, 496e <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    495e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4960:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4964:	bne.n	4956 <usb_init_serialnumber+0x4a>
    4966:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4968:	strb	r3, [r4, #0]
}
    496a:	add	sp, #16
    496c:	pop	{r4, pc}
    496e:	lsls	r3, r3, #1
    4970:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4972:	strb	r3, [r4, #0]
}
    4974:	add	sp, #16
    4976:	pop	{r4, pc}
    4978:	.word	0x40020004
    497c:	.word	0x40020000
    4980:	.word	0x41070000
    4984:	.word	0x4002000c
    4988:	.word	0x0098967f
    498c:	.word	0x1fff0d64

00004990 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4990:	push	{r4, r5, r6, r7}
    4992:	subs	r5, r1, #1
    4994:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    4996:	movs	r4, #0
    4998:	b.n	499c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    499a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    499c:	udiv	r3, r0, r2
    49a0:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    49a4:	cmp	r0, #9
    49a6:	add.w	r7, r0, #48	; 0x30
    49aa:	itet	hi
    49ac:	addhi	r0, #55	; 0x37
    49ae:	uxtbls	r0, r7
    49b0:	uxtbhi	r0, r0
    49b2:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    49b6:	mov	r0, r3
    49b8:	cmp	r3, #0
    49ba:	bne.n	499a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    49bc:	adds	r2, r1, r4
    49be:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    49c0:	cbz	r4, 49d6 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    49c2:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    49c4:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    49c8:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    49ca:	adds	r3, #1
    49cc:	subs	r0, r4, r3
    49ce:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    49d0:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    49d4:	blt.n	49c2 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    49d6:	mov	r0, r1
    49d8:	pop	{r4, r5, r6, r7}
    49da:	bx	lr

000049dc <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    49dc:	ldr	r2, [pc, #20]	; (49f4 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    49de:	ldr	r3, [pc, #24]	; (49f8 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    49e0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    49e2:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    49e4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    49e6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    49e8:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    49ea:	it	cc
    49ec:	addcc	r0, #64	; 0x40
    49ee:	subs	r0, r0, r3
}
    49f0:	bx	lr
    49f2:	nop
    49f4:	.word	0x1fff1ce4
    49f8:	.word	0x1fff1ce5

000049fc <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    49fc:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    49fe:	ldr	r3, [pc, #172]	; (4aac <uart2_status_isr+0xb0>)
    4a00:	ldrb	r2, [r3, #4]
    4a02:	lsls	r4, r2, #26
    4a04:	bpl.n	4a46 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4a06:	ldr	r0, [pc, #168]	; (4ab0 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4a08:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4a0a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a0c:	ldr	r1, [pc, #164]	; (4ab4 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4a0e:	adds	r3, #1
    4a10:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a12:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4a14:	it	gt
    4a16:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a18:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4a1a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a1c:	beq.n	4a26 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    4a1e:	ldr	r4, [pc, #152]	; (4ab8 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    4a20:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4a22:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4a24:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4a26:	ldr	r2, [pc, #148]	; (4abc <uart2_status_isr+0xc0>)
    4a28:	ldr	r1, [r2, #0]
    4a2a:	cbz	r1, 4a46 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4a2c:	ldr	r2, [pc, #144]	; (4ac0 <uart2_status_isr+0xc4>)
    4a2e:	ldrb	r2, [r2, #0]
    4a30:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4a32:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4a34:	itet	cc
    4a36:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4a3a:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4a3c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4a3e:	cmp	r3, #39	; 0x27
    4a40:	itt	gt
    4a42:	movgt	r3, #1
    4a44:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4a46:	ldr	r2, [pc, #100]	; (4aac <uart2_status_isr+0xb0>)
    4a48:	ldrb	r3, [r2, #3]
    4a4a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4a4c:	lsls	r0, r3, #24
    4a4e:	bmi.n	4a74 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4a50:	lsls	r2, r3, #25
    4a52:	bpl.n	4a70 <uart2_status_isr+0x74>
    4a54:	ldr	r3, [pc, #84]	; (4aac <uart2_status_isr+0xb0>)
    4a56:	ldrb	r3, [r3, #4]
    4a58:	lsls	r3, r3, #25
    4a5a:	bpl.n	4a70 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4a5c:	ldr	r3, [pc, #100]	; (4ac4 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4a5e:	ldr	r1, [pc, #104]	; (4ac8 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4a60:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4a62:	movs	r2, #0
    4a64:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4a66:	cbz	r3, 4a6a <uart2_status_isr+0x6e>
    4a68:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    4a6a:	ldr	r3, [pc, #64]	; (4aac <uart2_status_isr+0xb0>)
    4a6c:	movs	r2, #44	; 0x2c
    4a6e:	strb	r2, [r3, #3]
	}
}
    4a70:	pop	{r4, r5}
    4a72:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4a74:	ldrb	r1, [r2, #4]
    4a76:	lsls	r1, r1, #24
    4a78:	bpl.n	4a50 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    4a7a:	ldr	r1, [pc, #80]	; (4acc <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4a7c:	ldr	r0, [pc, #64]	; (4ac0 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4a7e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4a80:	ldrb	r1, [r0, #0]
    4a82:	uxtb	r1, r1
		if (head == tail) {
    4a84:	cmp	r4, r1
    4a86:	beq.n	4aa4 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4a88:	adds	r2, r1, #1
    4a8a:	cmp	r2, #39	; 0x27
    4a8c:	itt	hi
    4a8e:	movhi	r1, #0
    4a90:	movhi	r2, r1
			n = tx_buffer[tail];
    4a92:	ldr	r5, [pc, #60]	; (4ad0 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4a94:	ldr	r4, [pc, #20]	; (4aac <uart2_status_isr+0xb0>)
    4a96:	it	ls
    4a98:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4a9a:	ldrb	r2, [r5, r2]
    4a9c:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4a9e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4aa0:	strb	r1, [r0, #0]
    4aa2:	b.n	4a50 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4aa4:	movs	r1, #108	; 0x6c
    4aa6:	strb	r1, [r2, #3]
    4aa8:	b.n	4a50 <uart2_status_isr+0x54>
    4aaa:	nop
    4aac:	.word	0x4006c000
    4ab0:	.word	0x1fff1ce4
    4ab4:	.word	0x1fff1ce5
    4ab8:	.word	0x1fff1d10
    4abc:	.word	0x1fff1ce0
    4ac0:	.word	0x1fff1d51
    4ac4:	.word	0x1fff1d54
    4ac8:	.word	0x1fff1d50
    4acc:	.word	0x1fff1d58
    4ad0:	.word	0x1fff1ce8

00004ad4 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4ad4:	bx	lr
    4ad6:	nop

00004ad8 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4ad8:	bx	lr
    4ada:	nop

00004adc <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4adc:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4ade:	mrs	r2, PRIMASK
		__disable_irq();
    4ae2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4ae4:	ldrb	r3, [r0, #29]
    4ae6:	cbnz	r3, 4af6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4ae8:	ldrb	r1, [r0, #28]
    4aea:	cmp	r1, #1
    4aec:	beq.n	4b00 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4aee:	cmp	r1, #3
    4af0:	beq.n	4b14 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4af2:	movs	r3, #1
    4af4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4af6:	cbnz	r2, 4afa <EventResponder::triggerEventNotImmediate()+0x1e>
    4af8:	cpsie	i
	}
	enableInterrupts(irq);
}
    4afa:	ldr.w	r4, [sp], #4
    4afe:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4b00:	ldr	r4, [pc, #68]	; (4b48 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4b02:	ldr	r1, [r4, #0]
    4b04:	cbz	r1, 4b30 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4b06:	ldr	r1, [pc, #68]	; (4b4c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4b08:	str	r3, [r0, #20]
				_prev = lastYield;
    4b0a:	ldr	r3, [r1, #0]
    4b0c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4b0e:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4b10:	str	r0, [r3, #20]
    4b12:	b.n	4af2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4b14:	ldr	r4, [pc, #56]	; (4b50 <EventResponder::triggerEventNotImmediate()+0x74>)
    4b16:	ldr	r1, [r4, #0]
    4b18:	cbz	r1, 4b3c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4b1a:	ldr	r1, [pc, #56]	; (4b54 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4b1c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4b1e:	ldr	r3, [r1, #0]
    4b20:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4b22:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4b24:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4b26:	ldr	r3, [pc, #48]	; (4b58 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4b28:	mov.w	r1, #268435456	; 0x10000000
    4b2c:	str	r1, [r3, #0]
    4b2e:	b.n	4af2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4b30:	ldr	r3, [pc, #24]	; (4b4c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4b32:	str	r1, [r0, #20]
				_prev = nullptr;
    4b34:	str	r1, [r0, #24]
				firstYield = this;
    4b36:	str	r0, [r4, #0]
				lastYield = this;
    4b38:	str	r0, [r3, #0]
    4b3a:	b.n	4af2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4b3c:	ldr	r3, [pc, #20]	; (4b54 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4b3e:	str	r1, [r0, #20]
				_prev = nullptr;
    4b40:	str	r1, [r0, #24]
				firstInterrupt = this;
    4b42:	str	r0, [r4, #0]
				lastInterrupt = this;
    4b44:	str	r0, [r3, #0]
    4b46:	b.n	4b26 <EventResponder::triggerEventNotImmediate()+0x4a>
    4b48:	.word	0x1fff1d6c
    4b4c:	.word	0x1fff1d68
    4b50:	.word	0x1fff1d5c
    4b54:	.word	0x1fff1d60
    4b58:	.word	0xe000ed04

00004b5c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4b5c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4b5e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4b60:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4b62:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4b64:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4b66:	beq.n	4b70 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4b68:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4b6c:	b.w	4adc <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4b70:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4b72:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4b76:	bx	r3

00004b78 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4b78:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4b7a:	mrs	r2, PRIMASK
		__disable_irq();
    4b7e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4b80:	ldr	r4, [pc, #48]	; (4bb4 <EventResponder::runFromInterrupt()+0x3c>)
    4b82:	ldr	r0, [r4, #0]
		if (first) {
    4b84:	cbz	r0, 4ba8 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4b86:	ldr	r6, [pc, #48]	; (4bb8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4b88:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4b8a:	ldr	r3, [r0, #20]
    4b8c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4b8e:	cbz	r3, 4bae <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4b90:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4b92:	cbnz	r2, 4b96 <EventResponder::runFromInterrupt()+0x1e>
    4b94:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4b96:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4b98:	ldr	r3, [r0, #8]
    4b9a:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4b9c:	mrs	r2, PRIMASK
		__disable_irq();
    4ba0:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4ba2:	ldr	r0, [r4, #0]
		if (first) {
    4ba4:	cmp	r0, #0
    4ba6:	bne.n	4b8a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4ba8:	cbnz	r2, 4bac <EventResponder::runFromInterrupt()+0x34>
    4baa:	cpsie	i
    4bac:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4bae:	str	r3, [r6, #0]
    4bb0:	b.n	4b92 <EventResponder::runFromInterrupt()+0x1a>
    4bb2:	nop
    4bb4:	.word	0x1fff1d5c
    4bb8:	.word	0x1fff1d60

00004bbc <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4bbc:	b.w	4b78 <EventResponder::runFromInterrupt()>

00004bc0 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4bc0:	ldr	r2, [pc, #96]	; (4c24 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4bc2:	push	{r4, r5}
	if (listActive == nullptr) {
    4bc4:	ldr	r4, [r2, #0]
    4bc6:	cmp	r4, #0
    4bc8:	beq.n	4c1a <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4bca:	ldr	r3, [r0, #0]
    4bcc:	ldr	r1, [r4, #0]
    4bce:	cmp	r3, r1
    4bd0:	bcs.n	4bf0 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4bd2:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4bd4:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4bd6:	str	r4, [r0, #8]
		_prev = nullptr;
    4bd8:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4bda:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4bdc:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4bde:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4be0:	movs	r3, #2
    4be2:	strb	r3, [r0, #20]
}
    4be4:	pop	{r4, r5}
    4be6:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4be8:	ldr	r1, [r2, #0]
    4bea:	cmp	r3, r1
    4bec:	mov	r4, r2
    4bee:	bcc.n	4c02 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4bf0:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4bf2:	subs	r3, r3, r1
    4bf4:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4bf6:	cmp	r2, #0
    4bf8:	bne.n	4be8 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4bfa:	str	r2, [r0, #8]
		_prev = timer;
    4bfc:	str	r4, [r0, #12]
		timer->_next = this;
    4bfe:	str	r0, [r4, #8]
    4c00:	b.n	4be0 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4c02:	ldr	r2, [r2, #12]
    4c04:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4c06:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4c08:	str	r0, [r4, #12]
				_prev->_next = this;
    4c0a:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4c0c:	subs	r3, r1, r3
				_state = TimerActive;
    4c0e:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4c10:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4c12:	str	r3, [r4, #0]
				_state = TimerActive;
    4c14:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4c16:	pop	{r4, r5}
    4c18:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4c1a:	str	r4, [r0, #8]
		_prev = nullptr;
    4c1c:	str	r4, [r0, #12]
		listActive = this;
    4c1e:	str	r0, [r2, #0]
    4c20:	b.n	4be0 <MillisTimer::addToActiveList()+0x20>
    4c22:	nop
    4c24:	.word	0x1fff1d64

00004c28 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4c28:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4c2a:	ldr	r6, [pc, #136]	; (4cb4 <MillisTimer::runFromTimer()+0x8c>)
    4c2c:	ldr	r4, [r6, #0]
	while (timer) {
    4c2e:	cbz	r4, 4c7c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4c30:	ldr	r3, [r4, #0]
    4c32:	cmp	r3, #0
    4c34:	bne.n	4cac <MillisTimer::runFromTimer()+0x84>
    4c36:	ldr	r7, [pc, #128]	; (4cb8 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4c38:	mov	r5, r3
    4c3a:	b.n	4c46 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4c3c:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4c3e:	cbz	r4, 4c7c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4c40:	ldr	r3, [r4, #0]
    4c42:	cmp	r3, #0
    4c44:	bne.n	4cac <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4c46:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4c48:	cbz	r3, 4c4c <MillisTimer::runFromTimer()+0x24>
    4c4a:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4c4c:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4c4e:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4c50:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4c52:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4c54:	ldr	r3, [r3, #0]
    4c56:	cmp	r3, r7
    4c58:	bne.n	4c9e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4c5a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4c5c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4c5e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4c60:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4c62:	beq.n	4ca6 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4c64:	bl	4adc <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4c68:	ldr	r3, [r4, #4]
    4c6a:	cmp	r3, #0
    4c6c:	beq.n	4c3c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4c6e:	str	r3, [r4, #0]
				timer->addToActiveList();
    4c70:	mov	r0, r4
    4c72:	bl	4bc0 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4c76:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4c78:	cmp	r4, #0
    4c7a:	bne.n	4c40 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4c7c:	mrs	r3, PRIMASK
		__disable_irq();
    4c80:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4c82:	ldr	r2, [pc, #56]	; (4cbc <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4c84:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4c86:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4c88:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4c8a:	cbnz	r3, 4c8e <MillisTimer::runFromTimer()+0x66>
    4c8c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4c8e:	cbz	r0, 4c9c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4c90:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4c92:	bl	4bc0 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4c96:	mov	r0, r4
    4c98:	cmp	r0, #0
    4c9a:	bne.n	4c90 <MillisTimer::runFromTimer()+0x68>
    4c9c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4c9e:	mov	r2, r4
    4ca0:	movs	r1, #0
    4ca2:	blx	r3
    4ca4:	b.n	4c68 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4ca6:	ldr	r3, [r0, #8]
    4ca8:	blx	r3
    4caa:	b.n	4c68 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4cac:	subs	r3, #1
    4cae:	str	r3, [r4, #0]
			break;
    4cb0:	b.n	4c7c <MillisTimer::runFromTimer()+0x54>
    4cb2:	nop
    4cb4:	.word	0x1fff1d64
    4cb8:	.word	0x00004b5d
    4cbc:	.word	0x1fff1d74

00004cc0 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4cc0:	ldr	r2, [pc, #8]	; (4ccc <systick_isr+0xc>)
    4cc2:	ldr	r3, [r2, #0]
    4cc4:	adds	r3, #1
    4cc6:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4cc8:	b.w	4c28 <MillisTimer::runFromTimer()>
    4ccc:	.word	0x1fff18fc

00004cd0 <__errno>:
    4cd0:	ldr	r3, [pc, #4]	; (4cd8 <__errno+0x8>)
    4cd2:	ldr	r0, [r3, #0]
    4cd4:	bx	lr
    4cd6:	nop
    4cd8:	.word	0x1fff11a8

00004cdc <__libc_init_array>:
    4cdc:	push	{r4, r5, r6, lr}
    4cde:	ldr	r6, [pc, #60]	; (4d1c <__libc_init_array+0x40>)
    4ce0:	ldr	r5, [pc, #60]	; (4d20 <__libc_init_array+0x44>)
    4ce2:	subs	r6, r6, r5
    4ce4:	asrs	r6, r6, #2
    4ce6:	it	ne
    4ce8:	movne	r4, #0
    4cea:	beq.n	4cf8 <__libc_init_array+0x1c>
    4cec:	adds	r4, #1
    4cee:	ldr.w	r3, [r5], #4
    4cf2:	blx	r3
    4cf4:	cmp	r6, r4
    4cf6:	bne.n	4cec <__libc_init_array+0x10>
    4cf8:	ldr	r6, [pc, #40]	; (4d24 <__libc_init_array+0x48>)
    4cfa:	ldr	r5, [pc, #44]	; (4d28 <__libc_init_array+0x4c>)
    4cfc:	subs	r6, r6, r5
    4cfe:	bl	5974 <_init>
    4d02:	asrs	r6, r6, #2
    4d04:	it	ne
    4d06:	movne	r4, #0
    4d08:	beq.n	4d18 <__libc_init_array+0x3c>
    4d0a:	adds	r4, #1
    4d0c:	ldr.w	r3, [r5], #4
    4d10:	blx	r3
    4d12:	cmp	r6, r4
    4d14:	bne.n	4d0a <__libc_init_array+0x2e>
    4d16:	pop	{r4, r5, r6, pc}
    4d18:	pop	{r4, r5, r6, pc}
    4d1a:	nop
    4d1c:	.word	0x00005980
    4d20:	.word	0x00005980
    4d24:	.word	0x0000598c
    4d28:	.word	0x00005980

00004d2c <malloc>:
    4d2c:	ldr	r3, [pc, #8]	; (4d38 <malloc+0xc>)
    4d2e:	mov	r1, r0
    4d30:	ldr	r0, [r3, #0]
    4d32:	b.w	4d3c <_malloc_r>
    4d36:	nop
    4d38:	.word	0x1fff11a8

00004d3c <_malloc_r>:
    4d3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d40:	add.w	r5, r1, #11
    4d44:	cmp	r5, #22
    4d46:	sub	sp, #12
    4d48:	mov	r6, r0
    4d4a:	bls.w	4e8c <_malloc_r+0x150>
    4d4e:	bics.w	r5, r5, #7
    4d52:	bmi.w	4ed4 <_malloc_r+0x198>
    4d56:	cmp	r1, r5
    4d58:	bhi.w	4ed4 <_malloc_r+0x198>
    4d5c:	bl	52ac <__malloc_lock>
    4d60:	cmp.w	r5, #504	; 0x1f8
    4d64:	bcc.w	52a0 <_malloc_r+0x564>
    4d68:	lsrs	r3, r5, #9
    4d6a:	beq.w	4ee2 <_malloc_r+0x1a6>
    4d6e:	cmp	r3, #4
    4d70:	bhi.w	507a <_malloc_r+0x33e>
    4d74:	lsrs	r0, r5, #6
    4d76:	add.w	lr, r0, #57	; 0x39
    4d7a:	mov.w	r3, lr, lsl #1
    4d7e:	adds	r0, #56	; 0x38
    4d80:	ldr	r7, [pc, #784]	; (5094 <_malloc_r+0x358>)
    4d82:	add.w	r3, r7, r3, lsl #2
    4d86:	sub.w	r1, r3, #8
    4d8a:	ldr	r4, [r3, #4]
    4d8c:	cmp	r1, r4
    4d8e:	bne.n	4da0 <_malloc_r+0x64>
    4d90:	b.n	4eec <_malloc_r+0x1b0>
    4d92:	cmp	r2, #0
    4d94:	bge.w	4ef0 <_malloc_r+0x1b4>
    4d98:	ldr	r4, [r4, #12]
    4d9a:	cmp	r1, r4
    4d9c:	beq.w	4eec <_malloc_r+0x1b0>
    4da0:	ldr	r3, [r4, #4]
    4da2:	bic.w	r3, r3, #3
    4da6:	subs	r2, r3, r5
    4da8:	cmp	r2, #15
    4daa:	ble.n	4d92 <_malloc_r+0x56>
    4dac:	ldr	r1, [pc, #740]	; (5094 <_malloc_r+0x358>)
    4dae:	ldr	r4, [r7, #16]
    4db0:	add.w	lr, r1, #8
    4db4:	cmp	r4, lr
    4db6:	beq.w	5120 <_malloc_r+0x3e4>
    4dba:	ldr	r3, [r4, #4]
    4dbc:	bic.w	r3, r3, #3
    4dc0:	subs	r2, r3, r5
    4dc2:	cmp	r2, #15
    4dc4:	bgt.w	50fa <_malloc_r+0x3be>
    4dc8:	cmp	r2, #0
    4dca:	str.w	lr, [r1, #20]
    4dce:	str.w	lr, [r1, #16]
    4dd2:	bge.w	4f12 <_malloc_r+0x1d6>
    4dd6:	cmp.w	r3, #512	; 0x200
    4dda:	bcs.w	50ac <_malloc_r+0x370>
    4dde:	lsrs	r3, r3, #3
    4de0:	add.w	ip, r3, #1
    4de4:	movs	r2, #1
    4de6:	asrs	r3, r3, #2
    4de8:	lsl.w	r3, r2, r3
    4dec:	ldr	r2, [r1, #4]
    4dee:	ldr.w	r8, [r1, ip, lsl #3]
    4df2:	str.w	r8, [r4, #8]
    4df6:	add.w	r9, r1, ip, lsl #3
    4dfa:	orrs	r2, r3
    4dfc:	sub.w	r3, r9, #8
    4e00:	str	r3, [r4, #12]
    4e02:	str	r2, [r1, #4]
    4e04:	str.w	r4, [r1, ip, lsl #3]
    4e08:	str.w	r4, [r8, #12]
    4e0c:	asrs	r3, r0, #2
    4e0e:	movs	r4, #1
    4e10:	lsls	r4, r3
    4e12:	cmp	r4, r2
    4e14:	bhi.w	4f2c <_malloc_r+0x1f0>
    4e18:	tst	r4, r2
    4e1a:	bne.n	4e2a <_malloc_r+0xee>
    4e1c:	bic.w	r0, r0, #3
    4e20:	lsls	r4, r4, #1
    4e22:	tst	r4, r2
    4e24:	add.w	r0, r0, #4
    4e28:	beq.n	4e20 <_malloc_r+0xe4>
    4e2a:	add.w	r9, r7, r0, lsl #3
    4e2e:	mov	ip, r9
    4e30:	mov	r8, r0
    4e32:	ldr.w	r1, [ip, #12]
    4e36:	cmp	ip, r1
    4e38:	bne.n	4e4a <_malloc_r+0x10e>
    4e3a:	b.n	5124 <_malloc_r+0x3e8>
    4e3c:	cmp	r2, #0
    4e3e:	bge.w	5144 <_malloc_r+0x408>
    4e42:	ldr	r1, [r1, #12]
    4e44:	cmp	ip, r1
    4e46:	beq.w	5124 <_malloc_r+0x3e8>
    4e4a:	ldr	r3, [r1, #4]
    4e4c:	bic.w	r3, r3, #3
    4e50:	subs	r2, r3, r5
    4e52:	cmp	r2, #15
    4e54:	ble.n	4e3c <_malloc_r+0x100>
    4e56:	mov	r4, r1
    4e58:	ldr.w	ip, [r1, #12]
    4e5c:	ldr.w	r8, [r4, #8]!
    4e60:	adds	r3, r1, r5
    4e62:	orr.w	r5, r5, #1
    4e66:	str	r5, [r1, #4]
    4e68:	orr.w	r1, r2, #1
    4e6c:	str.w	ip, [r8, #12]
    4e70:	mov	r0, r6
    4e72:	str.w	r8, [ip, #8]
    4e76:	str	r3, [r7, #20]
    4e78:	str	r3, [r7, #16]
    4e7a:	str.w	lr, [r3, #12]
    4e7e:	str.w	lr, [r3, #8]
    4e82:	str	r1, [r3, #4]
    4e84:	str	r2, [r3, r2]
    4e86:	bl	52b0 <__malloc_unlock>
    4e8a:	b.n	4ecc <_malloc_r+0x190>
    4e8c:	cmp	r1, #16
    4e8e:	bhi.n	4ed4 <_malloc_r+0x198>
    4e90:	bl	52ac <__malloc_lock>
    4e94:	movs	r5, #16
    4e96:	movs	r3, #6
    4e98:	movs	r0, #2
    4e9a:	ldr	r7, [pc, #504]	; (5094 <_malloc_r+0x358>)
    4e9c:	add.w	r3, r7, r3, lsl #2
    4ea0:	sub.w	r2, r3, #8
    4ea4:	ldr	r4, [r3, #4]
    4ea6:	cmp	r4, r2
    4ea8:	beq.w	5136 <_malloc_r+0x3fa>
    4eac:	ldr	r3, [r4, #4]
    4eae:	ldr	r1, [r4, #12]
    4eb0:	ldr	r5, [r4, #8]
    4eb2:	bic.w	r3, r3, #3
    4eb6:	add	r3, r4
    4eb8:	mov	r0, r6
    4eba:	ldr	r2, [r3, #4]
    4ebc:	str	r1, [r5, #12]
    4ebe:	orr.w	r2, r2, #1
    4ec2:	str	r5, [r1, #8]
    4ec4:	str	r2, [r3, #4]
    4ec6:	bl	52b0 <__malloc_unlock>
    4eca:	adds	r4, #8
    4ecc:	mov	r0, r4
    4ece:	add	sp, #12
    4ed0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ed4:	movs	r4, #0
    4ed6:	movs	r3, #12
    4ed8:	mov	r0, r4
    4eda:	str	r3, [r6, #0]
    4edc:	add	sp, #12
    4ede:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ee2:	movs	r3, #128	; 0x80
    4ee4:	mov.w	lr, #64	; 0x40
    4ee8:	movs	r0, #63	; 0x3f
    4eea:	b.n	4d80 <_malloc_r+0x44>
    4eec:	mov	r0, lr
    4eee:	b.n	4dac <_malloc_r+0x70>
    4ef0:	add	r3, r4
    4ef2:	ldr	r1, [r4, #12]
    4ef4:	ldr	r2, [r3, #4]
    4ef6:	ldr	r5, [r4, #8]
    4ef8:	orr.w	r2, r2, #1
    4efc:	str	r1, [r5, #12]
    4efe:	mov	r0, r6
    4f00:	str	r5, [r1, #8]
    4f02:	str	r2, [r3, #4]
    4f04:	bl	52b0 <__malloc_unlock>
    4f08:	adds	r4, #8
    4f0a:	mov	r0, r4
    4f0c:	add	sp, #12
    4f0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f12:	add	r3, r4
    4f14:	mov	r0, r6
    4f16:	ldr	r2, [r3, #4]
    4f18:	orr.w	r2, r2, #1
    4f1c:	str	r2, [r3, #4]
    4f1e:	bl	52b0 <__malloc_unlock>
    4f22:	adds	r4, #8
    4f24:	mov	r0, r4
    4f26:	add	sp, #12
    4f28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f2c:	ldr	r4, [r7, #8]
    4f2e:	ldr	r3, [r4, #4]
    4f30:	bic.w	r8, r3, #3
    4f34:	cmp	r8, r5
    4f36:	bcc.n	4f42 <_malloc_r+0x206>
    4f38:	rsb	r3, r5, r8
    4f3c:	cmp	r3, #15
    4f3e:	bgt.w	505a <_malloc_r+0x31e>
    4f42:	ldr	r3, [pc, #340]	; (5098 <_malloc_r+0x35c>)
    4f44:	ldr.w	r9, [pc, #352]	; 50a8 <_malloc_r+0x36c>
    4f48:	ldr	r2, [r3, #0]
    4f4a:	ldr.w	r3, [r9]
    4f4e:	adds	r3, #1
    4f50:	add	r2, r5
    4f52:	add.w	sl, r4, r8
    4f56:	beq.w	521a <_malloc_r+0x4de>
    4f5a:	add.w	r2, r2, #4096	; 0x1000
    4f5e:	adds	r2, #15
    4f60:	bic.w	r2, r2, #4080	; 0xff0
    4f64:	bic.w	r2, r2, #15
    4f68:	mov	r1, r2
    4f6a:	mov	r0, r6
    4f6c:	str	r2, [sp, #4]
    4f6e:	bl	52b4 <_sbrk_r>
    4f72:	cmp.w	r0, #4294967295
    4f76:	mov	fp, r0
    4f78:	ldr	r2, [sp, #4]
    4f7a:	beq.w	522e <_malloc_r+0x4f2>
    4f7e:	cmp	sl, r0
    4f80:	bhi.w	517c <_malloc_r+0x440>
    4f84:	ldr	r3, [pc, #276]	; (509c <_malloc_r+0x360>)
    4f86:	ldr	r1, [r3, #0]
    4f88:	cmp	sl, fp
    4f8a:	add	r1, r2
    4f8c:	str	r1, [r3, #0]
    4f8e:	beq.w	5238 <_malloc_r+0x4fc>
    4f92:	ldr.w	r0, [r9]
    4f96:	ldr.w	lr, [pc, #272]	; 50a8 <_malloc_r+0x36c>
    4f9a:	adds	r0, #1
    4f9c:	ittet	ne
    4f9e:	rsbne	sl, sl, fp
    4fa2:	addne	r1, sl
    4fa4:	streq.w	fp, [lr]
    4fa8:	strne	r1, [r3, #0]
    4faa:	ands.w	r1, fp, #7
    4fae:	beq.w	51e0 <_malloc_r+0x4a4>
    4fb2:	rsb	r0, r1, #8
    4fb6:	rsb	r1, r1, #4096	; 0x1000
    4fba:	add	fp, r0
    4fbc:	adds	r1, #8
    4fbe:	add	r2, fp
    4fc0:	ubfx	r2, r2, #0, #12
    4fc4:	rsb	r9, r2, r1
    4fc8:	mov	r1, r9
    4fca:	mov	r0, r6
    4fcc:	str	r3, [sp, #4]
    4fce:	bl	52b4 <_sbrk_r>
    4fd2:	adds	r3, r0, #1
    4fd4:	ldr	r3, [sp, #4]
    4fd6:	beq.w	5258 <_malloc_r+0x51c>
    4fda:	rsb	r2, fp, r0
    4fde:	add	r2, r9
    4fe0:	orr.w	r2, r2, #1
    4fe4:	ldr	r1, [r3, #0]
    4fe6:	str.w	fp, [r7, #8]
    4fea:	add	r1, r9
    4fec:	cmp	r4, r7
    4fee:	str.w	r2, [fp, #4]
    4ff2:	str	r1, [r3, #0]
    4ff4:	ldr.w	r9, [pc, #164]	; 509c <_malloc_r+0x360>
    4ff8:	beq.n	5028 <_malloc_r+0x2ec>
    4ffa:	cmp.w	r8, #15
    4ffe:	bls.w	51fc <_malloc_r+0x4c0>
    5002:	ldr	r2, [r4, #4]
    5004:	sub.w	r3, r8, #12
    5008:	bic.w	r3, r3, #7
    500c:	adds	r0, r4, r3
    500e:	and.w	r2, r2, #1
    5012:	mov.w	lr, #5
    5016:	orrs	r2, r3
    5018:	cmp	r3, #15
    501a:	str	r2, [r4, #4]
    501c:	str.w	lr, [r0, #4]
    5020:	str.w	lr, [r0, #8]
    5024:	bhi.w	5260 <_malloc_r+0x524>
    5028:	ldr	r3, [pc, #116]	; (50a0 <_malloc_r+0x364>)
    502a:	ldr	r4, [r7, #8]
    502c:	ldr	r2, [r3, #0]
    502e:	cmp	r1, r2
    5030:	it	hi
    5032:	strhi	r1, [r3, #0]
    5034:	ldr	r3, [pc, #108]	; (50a4 <_malloc_r+0x368>)
    5036:	ldr	r2, [r3, #0]
    5038:	cmp	r1, r2
    503a:	ldr	r2, [r4, #4]
    503c:	it	hi
    503e:	strhi	r1, [r3, #0]
    5040:	bic.w	r2, r2, #3
    5044:	cmp	r5, r2
    5046:	sub.w	r3, r2, r5
    504a:	bhi.n	5050 <_malloc_r+0x314>
    504c:	cmp	r3, #15
    504e:	bgt.n	505a <_malloc_r+0x31e>
    5050:	mov	r0, r6
    5052:	bl	52b0 <__malloc_unlock>
    5056:	movs	r4, #0
    5058:	b.n	4ecc <_malloc_r+0x190>
    505a:	adds	r2, r4, r5
    505c:	orr.w	r3, r3, #1
    5060:	orr.w	r5, r5, #1
    5064:	str	r5, [r4, #4]
    5066:	mov	r0, r6
    5068:	str	r2, [r7, #8]
    506a:	str	r3, [r2, #4]
    506c:	bl	52b0 <__malloc_unlock>
    5070:	adds	r4, #8
    5072:	mov	r0, r4
    5074:	add	sp, #12
    5076:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    507a:	cmp	r3, #20
    507c:	bls.n	5162 <_malloc_r+0x426>
    507e:	cmp	r3, #84	; 0x54
    5080:	bhi.w	51cc <_malloc_r+0x490>
    5084:	lsrs	r0, r5, #12
    5086:	add.w	lr, r0, #111	; 0x6f
    508a:	mov.w	r3, lr, lsl #1
    508e:	adds	r0, #110	; 0x6e
    5090:	b.n	4d80 <_malloc_r+0x44>
    5092:	nop
    5094:	.word	0x1fff11ac
    5098:	.word	0x1fff1d80
    509c:	.word	0x1fff1d84
    50a0:	.word	0x1fff1d7c
    50a4:	.word	0x1fff1d78
    50a8:	.word	0x1fff15b8
    50ac:	lsrs	r2, r3, #9
    50ae:	cmp	r2, #4
    50b0:	bls.n	5170 <_malloc_r+0x434>
    50b2:	cmp	r2, #20
    50b4:	bhi.w	521e <_malloc_r+0x4e2>
    50b8:	add.w	r1, r2, #92	; 0x5c
    50bc:	lsls	r1, r1, #1
    50be:	adds	r2, #91	; 0x5b
    50c0:	add.w	ip, r7, r1, lsl #2
    50c4:	ldr.w	r1, [r7, r1, lsl #2]
    50c8:	ldr.w	r8, [pc, #476]	; 52a8 <_malloc_r+0x56c>
    50cc:	sub.w	ip, ip, #8
    50d0:	cmp	ip, r1
    50d2:	beq.w	51e6 <_malloc_r+0x4aa>
    50d6:	ldr	r2, [r1, #4]
    50d8:	bic.w	r2, r2, #3
    50dc:	cmp	r3, r2
    50de:	bcs.n	50e6 <_malloc_r+0x3aa>
    50e0:	ldr	r1, [r1, #8]
    50e2:	cmp	ip, r1
    50e4:	bne.n	50d6 <_malloc_r+0x39a>
    50e6:	ldr.w	ip, [r1, #12]
    50ea:	ldr	r2, [r7, #4]
    50ec:	str.w	ip, [r4, #12]
    50f0:	str	r1, [r4, #8]
    50f2:	str.w	r4, [ip, #8]
    50f6:	str	r4, [r1, #12]
    50f8:	b.n	4e0c <_malloc_r+0xd0>
    50fa:	adds	r3, r4, r5
    50fc:	orr.w	r7, r2, #1
    5100:	orr.w	r5, r5, #1
    5104:	str	r5, [r4, #4]
    5106:	mov	r0, r6
    5108:	str	r3, [r1, #20]
    510a:	str	r3, [r1, #16]
    510c:	str.w	lr, [r3, #12]
    5110:	str.w	lr, [r3, #8]
    5114:	str	r7, [r3, #4]
    5116:	str	r2, [r3, r2]
    5118:	adds	r4, #8
    511a:	bl	52b0 <__malloc_unlock>
    511e:	b.n	4ecc <_malloc_r+0x190>
    5120:	ldr	r2, [r1, #4]
    5122:	b.n	4e0c <_malloc_r+0xd0>
    5124:	add.w	r8, r8, #1
    5128:	tst.w	r8, #3
    512c:	add.w	ip, ip, #8
    5130:	bne.w	4e32 <_malloc_r+0xf6>
    5134:	b.n	5198 <_malloc_r+0x45c>
    5136:	ldr	r4, [r3, #12]
    5138:	cmp	r3, r4
    513a:	it	eq
    513c:	addeq	r0, #2
    513e:	beq.w	4dac <_malloc_r+0x70>
    5142:	b.n	4eac <_malloc_r+0x170>
    5144:	add	r3, r1
    5146:	mov	r4, r1
    5148:	ldr	r2, [r3, #4]
    514a:	ldr	r1, [r1, #12]
    514c:	ldr.w	r5, [r4, #8]!
    5150:	orr.w	r2, r2, #1
    5154:	str	r2, [r3, #4]
    5156:	mov	r0, r6
    5158:	str	r1, [r5, #12]
    515a:	str	r5, [r1, #8]
    515c:	bl	52b0 <__malloc_unlock>
    5160:	b.n	4ecc <_malloc_r+0x190>
    5162:	add.w	lr, r3, #92	; 0x5c
    5166:	add.w	r0, r3, #91	; 0x5b
    516a:	mov.w	r3, lr, lsl #1
    516e:	b.n	4d80 <_malloc_r+0x44>
    5170:	lsrs	r2, r3, #6
    5172:	add.w	r1, r2, #57	; 0x39
    5176:	lsls	r1, r1, #1
    5178:	adds	r2, #56	; 0x38
    517a:	b.n	50c0 <_malloc_r+0x384>
    517c:	cmp	r4, r7
    517e:	ldr	r3, [pc, #296]	; (52a8 <_malloc_r+0x56c>)
    5180:	beq.w	4f84 <_malloc_r+0x248>
    5184:	ldr	r4, [r3, #8]
    5186:	ldr	r2, [r4, #4]
    5188:	bic.w	r2, r2, #3
    518c:	b.n	5044 <_malloc_r+0x308>
    518e:	ldr.w	r3, [r9], #-8
    5192:	cmp	r9, r3
    5194:	bne.w	529c <_malloc_r+0x560>
    5198:	tst.w	r0, #3
    519c:	add.w	r0, r0, #4294967295
    51a0:	bne.n	518e <_malloc_r+0x452>
    51a2:	ldr	r3, [r7, #4]
    51a4:	bic.w	r3, r3, r4
    51a8:	str	r3, [r7, #4]
    51aa:	lsls	r4, r4, #1
    51ac:	cmp	r4, r3
    51ae:	bhi.w	4f2c <_malloc_r+0x1f0>
    51b2:	cmp	r4, #0
    51b4:	beq.w	4f2c <_malloc_r+0x1f0>
    51b8:	tst	r4, r3
    51ba:	mov	r0, r8
    51bc:	bne.w	4e2a <_malloc_r+0xee>
    51c0:	lsls	r4, r4, #1
    51c2:	tst	r4, r3
    51c4:	add.w	r0, r0, #4
    51c8:	beq.n	51c0 <_malloc_r+0x484>
    51ca:	b.n	4e2a <_malloc_r+0xee>
    51cc:	cmp.w	r3, #340	; 0x154
    51d0:	bhi.n	5204 <_malloc_r+0x4c8>
    51d2:	lsrs	r0, r5, #15
    51d4:	add.w	lr, r0, #120	; 0x78
    51d8:	mov.w	r3, lr, lsl #1
    51dc:	adds	r0, #119	; 0x77
    51de:	b.n	4d80 <_malloc_r+0x44>
    51e0:	mov.w	r1, #4096	; 0x1000
    51e4:	b.n	4fbe <_malloc_r+0x282>
    51e6:	movs	r1, #1
    51e8:	ldr.w	r3, [r8, #4]
    51ec:	asrs	r2, r2, #2
    51ee:	lsl.w	r2, r1, r2
    51f2:	orrs	r2, r3
    51f4:	str.w	r2, [r8, #4]
    51f8:	mov	r1, ip
    51fa:	b.n	50ec <_malloc_r+0x3b0>
    51fc:	movs	r3, #1
    51fe:	str.w	r3, [fp, #4]
    5202:	b.n	5050 <_malloc_r+0x314>
    5204:	movw	r2, #1364	; 0x554
    5208:	cmp	r3, r2
    520a:	bhi.n	524e <_malloc_r+0x512>
    520c:	lsrs	r0, r5, #18
    520e:	add.w	lr, r0, #125	; 0x7d
    5212:	mov.w	r3, lr, lsl #1
    5216:	adds	r0, #124	; 0x7c
    5218:	b.n	4d80 <_malloc_r+0x44>
    521a:	adds	r2, #16
    521c:	b.n	4f68 <_malloc_r+0x22c>
    521e:	cmp	r2, #84	; 0x54
    5220:	bhi.n	5270 <_malloc_r+0x534>
    5222:	lsrs	r2, r3, #12
    5224:	add.w	r1, r2, #111	; 0x6f
    5228:	lsls	r1, r1, #1
    522a:	adds	r2, #110	; 0x6e
    522c:	b.n	50c0 <_malloc_r+0x384>
    522e:	ldr	r4, [r7, #8]
    5230:	ldr	r2, [r4, #4]
    5232:	bic.w	r2, r2, #3
    5236:	b.n	5044 <_malloc_r+0x308>
    5238:	ubfx	r0, sl, #0, #12
    523c:	cmp	r0, #0
    523e:	bne.w	4f92 <_malloc_r+0x256>
    5242:	add	r2, r8
    5244:	ldr	r3, [r7, #8]
    5246:	orr.w	r2, r2, #1
    524a:	str	r2, [r3, #4]
    524c:	b.n	5028 <_malloc_r+0x2ec>
    524e:	movs	r3, #254	; 0xfe
    5250:	mov.w	lr, #127	; 0x7f
    5254:	movs	r0, #126	; 0x7e
    5256:	b.n	4d80 <_malloc_r+0x44>
    5258:	movs	r2, #1
    525a:	mov.w	r9, #0
    525e:	b.n	4fe4 <_malloc_r+0x2a8>
    5260:	add.w	r1, r4, #8
    5264:	mov	r0, r6
    5266:	bl	53bc <_free_r>
    526a:	ldr.w	r1, [r9]
    526e:	b.n	5028 <_malloc_r+0x2ec>
    5270:	cmp.w	r2, #340	; 0x154
    5274:	bhi.n	5282 <_malloc_r+0x546>
    5276:	lsrs	r2, r3, #15
    5278:	add.w	r1, r2, #120	; 0x78
    527c:	lsls	r1, r1, #1
    527e:	adds	r2, #119	; 0x77
    5280:	b.n	50c0 <_malloc_r+0x384>
    5282:	movw	r1, #1364	; 0x554
    5286:	cmp	r2, r1
    5288:	bhi.n	5296 <_malloc_r+0x55a>
    528a:	lsrs	r2, r3, #18
    528c:	add.w	r1, r2, #125	; 0x7d
    5290:	lsls	r1, r1, #1
    5292:	adds	r2, #124	; 0x7c
    5294:	b.n	50c0 <_malloc_r+0x384>
    5296:	movs	r1, #254	; 0xfe
    5298:	movs	r2, #126	; 0x7e
    529a:	b.n	50c0 <_malloc_r+0x384>
    529c:	ldr	r3, [r7, #4]
    529e:	b.n	51aa <_malloc_r+0x46e>
    52a0:	lsrs	r0, r5, #3
    52a2:	adds	r3, r0, #1
    52a4:	lsls	r3, r3, #1
    52a6:	b.n	4e9a <_malloc_r+0x15e>
    52a8:	.word	0x1fff11ac

000052ac <__malloc_lock>:
    52ac:	bx	lr
    52ae:	nop

000052b0 <__malloc_unlock>:
    52b0:	bx	lr
    52b2:	nop

000052b4 <_sbrk_r>:
    52b4:	push	{r3, r4, r5, lr}
    52b6:	ldr	r4, [pc, #28]	; (52d4 <_sbrk_r+0x20>)
    52b8:	movs	r3, #0
    52ba:	mov	r5, r0
    52bc:	mov	r0, r1
    52be:	str	r3, [r4, #0]
    52c0:	bl	4648 <_sbrk>
    52c4:	adds	r3, r0, #1
    52c6:	beq.n	52ca <_sbrk_r+0x16>
    52c8:	pop	{r3, r4, r5, pc}
    52ca:	ldr	r3, [r4, #0]
    52cc:	cmp	r3, #0
    52ce:	beq.n	52c8 <_sbrk_r+0x14>
    52d0:	str	r3, [r5, #0]
    52d2:	pop	{r3, r4, r5, pc}
    52d4:	.word	0x1fff1ef0

000052d8 <register_fini>:
    52d8:	ldr	r3, [pc, #8]	; (52e4 <register_fini+0xc>)
    52da:	cbz	r3, 52e2 <register_fini+0xa>
    52dc:	ldr	r0, [pc, #8]	; (52e8 <register_fini+0x10>)
    52de:	b.w	52ec <atexit>
    52e2:	bx	lr
    52e4:	.word	0x00000000
    52e8:	.word	0x000052f9

000052ec <atexit>:
    52ec:	movs	r3, #0
    52ee:	mov	r1, r0
    52f0:	mov	r2, r3
    52f2:	mov	r0, r3
    52f4:	b.w	558c <__register_exitproc>

000052f8 <__libc_fini_array>:
    52f8:	push	{r3, r4, r5, lr}
    52fa:	ldr	r5, [pc, #28]	; (5318 <__libc_fini_array+0x20>)
    52fc:	ldr	r4, [pc, #28]	; (531c <__libc_fini_array+0x24>)
    52fe:	subs	r4, r5, r4
    5300:	asrs	r4, r4, #2
    5302:	beq.n	5310 <__libc_fini_array+0x18>
    5304:	subs	r4, #1
    5306:	ldr.w	r3, [r5, #-4]!
    530a:	blx	r3
    530c:	cmp	r4, #0
    530e:	bne.n	5304 <__libc_fini_array+0xc>
    5310:	ldmia.w	sp!, {r3, r4, r5, lr}
    5314:	b.w	598c <__init_array_end>
	...

00005320 <_malloc_trim_r>:
    5320:	push	{r3, r4, r5, r6, r7, lr}
    5322:	ldr	r7, [pc, #140]	; (53b0 <_malloc_trim_r+0x90>)
    5324:	mov	r4, r1
    5326:	mov	r6, r0
    5328:	bl	52ac <__malloc_lock>
    532c:	ldr	r3, [r7, #8]
    532e:	ldr	r5, [r3, #4]
    5330:	bic.w	r5, r5, #3
    5334:	subs	r1, r5, r4
    5336:	addw	r1, r1, #4079	; 0xfef
    533a:	bic.w	r1, r1, #4080	; 0xff0
    533e:	bic.w	r1, r1, #15
    5342:	sub.w	r4, r1, #4096	; 0x1000
    5346:	cmp.w	r4, #4096	; 0x1000
    534a:	blt.n	535c <_malloc_trim_r+0x3c>
    534c:	movs	r1, #0
    534e:	mov	r0, r6
    5350:	bl	52b4 <_sbrk_r>
    5354:	ldr	r3, [r7, #8]
    5356:	add	r3, r5
    5358:	cmp	r0, r3
    535a:	beq.n	5366 <_malloc_trim_r+0x46>
    535c:	mov	r0, r6
    535e:	bl	52b0 <__malloc_unlock>
    5362:	movs	r0, #0
    5364:	pop	{r3, r4, r5, r6, r7, pc}
    5366:	negs	r1, r4
    5368:	mov	r0, r6
    536a:	bl	52b4 <_sbrk_r>
    536e:	adds	r0, #1
    5370:	beq.n	538e <_malloc_trim_r+0x6e>
    5372:	ldr	r3, [pc, #64]	; (53b4 <_malloc_trim_r+0x94>)
    5374:	ldr	r2, [r7, #8]
    5376:	ldr	r1, [r3, #0]
    5378:	subs	r5, r5, r4
    537a:	orr.w	r5, r5, #1
    537e:	mov	r0, r6
    5380:	subs	r1, r1, r4
    5382:	str	r5, [r2, #4]
    5384:	str	r1, [r3, #0]
    5386:	bl	52b0 <__malloc_unlock>
    538a:	movs	r0, #1
    538c:	pop	{r3, r4, r5, r6, r7, pc}
    538e:	movs	r1, #0
    5390:	mov	r0, r6
    5392:	bl	52b4 <_sbrk_r>
    5396:	ldr	r2, [r7, #8]
    5398:	subs	r3, r0, r2
    539a:	cmp	r3, #15
    539c:	ble.n	535c <_malloc_trim_r+0x3c>
    539e:	ldr	r4, [pc, #24]	; (53b8 <_malloc_trim_r+0x98>)
    53a0:	ldr	r1, [pc, #16]	; (53b4 <_malloc_trim_r+0x94>)
    53a2:	ldr	r4, [r4, #0]
    53a4:	orr.w	r3, r3, #1
    53a8:	subs	r0, r0, r4
    53aa:	str	r3, [r2, #4]
    53ac:	str	r0, [r1, #0]
    53ae:	b.n	535c <_malloc_trim_r+0x3c>
    53b0:	.word	0x1fff11ac
    53b4:	.word	0x1fff1d84
    53b8:	.word	0x1fff15b8

000053bc <_free_r>:
    53bc:	cmp	r1, #0
    53be:	beq.n	544c <_free_r+0x90>
    53c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53c4:	mov	r5, r1
    53c6:	mov	r8, r0
    53c8:	bl	52ac <__malloc_lock>
    53cc:	ldr.w	r7, [r5, #-4]
    53d0:	ldr	r1, [pc, #424]	; (557c <_free_r+0x1c0>)
    53d2:	bic.w	r3, r7, #1
    53d6:	sub.w	r4, r5, #8
    53da:	adds	r2, r4, r3
    53dc:	ldr	r6, [r1, #8]
    53de:	ldr	r0, [r2, #4]
    53e0:	cmp	r2, r6
    53e2:	bic.w	r0, r0, #3
    53e6:	beq.n	54ae <_free_r+0xf2>
    53e8:	lsls	r6, r7, #31
    53ea:	str	r0, [r2, #4]
    53ec:	bmi.n	5406 <_free_r+0x4a>
    53ee:	ldr.w	r7, [r5, #-8]
    53f2:	subs	r4, r4, r7
    53f4:	add.w	lr, r1, #8
    53f8:	ldr	r5, [r4, #8]
    53fa:	cmp	r5, lr
    53fc:	add	r3, r7
    53fe:	beq.n	54e0 <_free_r+0x124>
    5400:	ldr	r7, [r4, #12]
    5402:	str	r7, [r5, #12]
    5404:	str	r5, [r7, #8]
    5406:	adds	r5, r2, r0
    5408:	ldr	r5, [r5, #4]
    540a:	lsls	r5, r5, #31
    540c:	bpl.n	5494 <_free_r+0xd8>
    540e:	orr.w	r2, r3, #1
    5412:	str	r2, [r4, #4]
    5414:	str	r3, [r4, r3]
    5416:	cmp.w	r3, #512	; 0x200
    541a:	bcs.n	544e <_free_r+0x92>
    541c:	lsrs	r3, r3, #3
    541e:	adds	r2, r3, #1
    5420:	ldr	r5, [r1, #4]
    5422:	ldr.w	r7, [r1, r2, lsl #3]
    5426:	str	r7, [r4, #8]
    5428:	movs	r0, #1
    542a:	asrs	r3, r3, #2
    542c:	lsl.w	r3, r0, r3
    5430:	add.w	r0, r1, r2, lsl #3
    5434:	orrs	r5, r3
    5436:	subs	r0, #8
    5438:	str	r0, [r4, #12]
    543a:	str	r5, [r1, #4]
    543c:	str.w	r4, [r1, r2, lsl #3]
    5440:	str	r4, [r7, #12]
    5442:	mov	r0, r8
    5444:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5448:	b.w	52b0 <__malloc_unlock>
    544c:	bx	lr
    544e:	lsrs	r2, r3, #9
    5450:	cmp	r2, #4
    5452:	bhi.n	54fc <_free_r+0x140>
    5454:	lsrs	r2, r3, #6
    5456:	add.w	r7, r2, #57	; 0x39
    545a:	lsls	r7, r7, #1
    545c:	add.w	r5, r2, #56	; 0x38
    5460:	add.w	r0, r1, r7, lsl #2
    5464:	ldr.w	r2, [r1, r7, lsl #2]
    5468:	ldr	r1, [pc, #272]	; (557c <_free_r+0x1c0>)
    546a:	subs	r0, #8
    546c:	cmp	r0, r2
    546e:	beq.n	550c <_free_r+0x150>
    5470:	ldr	r1, [r2, #4]
    5472:	bic.w	r1, r1, #3
    5476:	cmp	r3, r1
    5478:	bcs.n	5480 <_free_r+0xc4>
    547a:	ldr	r2, [r2, #8]
    547c:	cmp	r0, r2
    547e:	bne.n	5470 <_free_r+0xb4>
    5480:	ldr	r0, [r2, #12]
    5482:	str	r0, [r4, #12]
    5484:	str	r2, [r4, #8]
    5486:	str	r4, [r0, #8]
    5488:	str	r4, [r2, #12]
    548a:	mov	r0, r8
    548c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5490:	b.w	52b0 <__malloc_unlock>
    5494:	ldr	r5, [r2, #8]
    5496:	ldr	r7, [pc, #232]	; (5580 <_free_r+0x1c4>)
    5498:	cmp	r5, r7
    549a:	add	r3, r0
    549c:	beq.n	551e <_free_r+0x162>
    549e:	ldr	r0, [r2, #12]
    54a0:	str	r0, [r5, #12]
    54a2:	orr.w	r2, r3, #1
    54a6:	str	r5, [r0, #8]
    54a8:	str	r2, [r4, #4]
    54aa:	str	r3, [r4, r3]
    54ac:	b.n	5416 <_free_r+0x5a>
    54ae:	lsls	r7, r7, #31
    54b0:	add	r3, r0
    54b2:	bmi.n	54c4 <_free_r+0x108>
    54b4:	ldr.w	r2, [r5, #-8]
    54b8:	subs	r4, r4, r2
    54ba:	add	r3, r2
    54bc:	ldr	r0, [r4, #8]
    54be:	ldr	r2, [r4, #12]
    54c0:	str	r2, [r0, #12]
    54c2:	str	r0, [r2, #8]
    54c4:	ldr	r2, [pc, #188]	; (5584 <_free_r+0x1c8>)
    54c6:	ldr	r2, [r2, #0]
    54c8:	orr.w	r0, r3, #1
    54cc:	cmp	r3, r2
    54ce:	str	r0, [r4, #4]
    54d0:	str	r4, [r1, #8]
    54d2:	bcc.n	5442 <_free_r+0x86>
    54d4:	ldr	r3, [pc, #176]	; (5588 <_free_r+0x1cc>)
    54d6:	mov	r0, r8
    54d8:	ldr	r1, [r3, #0]
    54da:	bl	5320 <_malloc_trim_r>
    54de:	b.n	5442 <_free_r+0x86>
    54e0:	adds	r1, r2, r0
    54e2:	ldr	r1, [r1, #4]
    54e4:	lsls	r1, r1, #31
    54e6:	bmi.n	5572 <_free_r+0x1b6>
    54e8:	ldr	r1, [r2, #8]
    54ea:	ldr	r2, [r2, #12]
    54ec:	str	r2, [r1, #12]
    54ee:	add	r3, r0
    54f0:	orr.w	r0, r3, #1
    54f4:	str	r1, [r2, #8]
    54f6:	str	r0, [r4, #4]
    54f8:	str	r3, [r4, r3]
    54fa:	b.n	5442 <_free_r+0x86>
    54fc:	cmp	r2, #20
    54fe:	bhi.n	5530 <_free_r+0x174>
    5500:	add.w	r7, r2, #92	; 0x5c
    5504:	lsls	r7, r7, #1
    5506:	add.w	r5, r2, #91	; 0x5b
    550a:	b.n	5460 <_free_r+0xa4>
    550c:	asrs	r2, r5, #2
    550e:	ldr	r3, [r1, #4]
    5510:	movs	r5, #1
    5512:	lsl.w	r2, r5, r2
    5516:	orrs	r3, r2
    5518:	str	r3, [r1, #4]
    551a:	mov	r2, r0
    551c:	b.n	5482 <_free_r+0xc6>
    551e:	orr.w	r2, r3, #1
    5522:	str	r4, [r1, #20]
    5524:	str	r4, [r1, #16]
    5526:	str	r5, [r4, #12]
    5528:	str	r5, [r4, #8]
    552a:	str	r2, [r4, #4]
    552c:	str	r3, [r4, r3]
    552e:	b.n	5442 <_free_r+0x86>
    5530:	cmp	r2, #84	; 0x54
    5532:	bhi.n	5542 <_free_r+0x186>
    5534:	lsrs	r2, r3, #12
    5536:	add.w	r7, r2, #111	; 0x6f
    553a:	lsls	r7, r7, #1
    553c:	add.w	r5, r2, #110	; 0x6e
    5540:	b.n	5460 <_free_r+0xa4>
    5542:	cmp.w	r2, #340	; 0x154
    5546:	bhi.n	5556 <_free_r+0x19a>
    5548:	lsrs	r2, r3, #15
    554a:	add.w	r7, r2, #120	; 0x78
    554e:	lsls	r7, r7, #1
    5550:	add.w	r5, r2, #119	; 0x77
    5554:	b.n	5460 <_free_r+0xa4>
    5556:	movw	r0, #1364	; 0x554
    555a:	cmp	r2, r0
    555c:	bhi.n	556c <_free_r+0x1b0>
    555e:	lsrs	r2, r3, #18
    5560:	add.w	r7, r2, #125	; 0x7d
    5564:	lsls	r7, r7, #1
    5566:	add.w	r5, r2, #124	; 0x7c
    556a:	b.n	5460 <_free_r+0xa4>
    556c:	movs	r7, #254	; 0xfe
    556e:	movs	r5, #126	; 0x7e
    5570:	b.n	5460 <_free_r+0xa4>
    5572:	orr.w	r2, r3, #1
    5576:	str	r2, [r4, #4]
    5578:	str	r3, [r4, r3]
    557a:	b.n	5442 <_free_r+0x86>
    557c:	.word	0x1fff11ac
    5580:	.word	0x1fff11b4
    5584:	.word	0x1fff15b4
    5588:	.word	0x1fff1d80

0000558c <__register_exitproc>:
    558c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5590:	ldr	r4, [pc, #148]	; (5628 <__register_exitproc+0x9c>)
    5592:	ldr	r5, [r4, #0]
    5594:	ldr.w	r4, [r5, #328]	; 0x148
    5598:	mov	r6, r0
    559a:	mov	r8, r1
    559c:	mov	sl, r2
    559e:	mov	r9, r3
    55a0:	cbz	r4, 5614 <__register_exitproc+0x88>
    55a2:	ldr	r0, [r4, #4]
    55a4:	cmp	r0, #31
    55a6:	bgt.n	55d8 <__register_exitproc+0x4c>
    55a8:	adds	r3, r0, #1
    55aa:	cbz	r6, 55ca <__register_exitproc+0x3e>
    55ac:	add.w	r5, r4, r0, lsl #2
    55b0:	movs	r2, #1
    55b2:	str.w	sl, [r5, #136]	; 0x88
    55b6:	ldr.w	r1, [r4, #392]	; 0x188
    55ba:	lsls	r2, r0
    55bc:	orrs	r1, r2
    55be:	cmp	r6, #2
    55c0:	str.w	r1, [r4, #392]	; 0x188
    55c4:	str.w	r9, [r5, #264]	; 0x108
    55c8:	beq.n	5608 <__register_exitproc+0x7c>
    55ca:	adds	r0, #2
    55cc:	str	r3, [r4, #4]
    55ce:	str.w	r8, [r4, r0, lsl #2]
    55d2:	movs	r0, #0
    55d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55d8:	ldr	r3, [pc, #80]	; (562c <__register_exitproc+0xa0>)
    55da:	cbz	r3, 561e <__register_exitproc+0x92>
    55dc:	mov.w	r0, #400	; 0x190
    55e0:	bl	4d2c <malloc>
    55e4:	mov	r4, r0
    55e6:	cbz	r0, 561e <__register_exitproc+0x92>
    55e8:	ldr.w	r3, [r5, #328]	; 0x148
    55ec:	movs	r7, #0
    55ee:	stmia.w	r0, {r3, r7}
    55f2:	str.w	r4, [r5, #328]	; 0x148
    55f6:	mov	r0, r7
    55f8:	movs	r3, #1
    55fa:	str.w	r7, [r4, #392]	; 0x188
    55fe:	str.w	r7, [r4, #396]	; 0x18c
    5602:	cmp	r6, #0
    5604:	beq.n	55ca <__register_exitproc+0x3e>
    5606:	b.n	55ac <__register_exitproc+0x20>
    5608:	ldr.w	r1, [r4, #396]	; 0x18c
    560c:	orrs	r2, r1
    560e:	str.w	r2, [r4, #396]	; 0x18c
    5612:	b.n	55ca <__register_exitproc+0x3e>
    5614:	add.w	r4, r5, #332	; 0x14c
    5618:	str.w	r4, [r5, #328]	; 0x148
    561c:	b.n	55a2 <__register_exitproc+0x16>
    561e:	mov.w	r0, #4294967295
    5622:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5626:	nop
    5628:	.word	0x00005970
    562c:	.word	0x00004d2d
    5630:	.word	0x6f486e6f
    5634:	.word	0x0000646c
    5638:	.word	0x72506e6f
    563c:	.word	0x00737365
    5640:	.word	0x4f4c4556
    5644:	.word	0x59544943
    5648:	.word	0x00000000
    564c:	.word	0x45544f4e
    5650:	.word	0x474e454c
    5654:	.word	0x00004854
    5658:	.word	0x43544950
    565c:	.word	0x00000048
    5660:	.word	0x65526e6f
    5664:	.word	0x7361656c
    5668:	.word	0x00000065
    566c:	.word	0x7370704f
    5670:	.word	0x6e61202c
    5674:	.word	0x6b6e7520
    5678:	.word	0x6e776f6e
    567c:	.word	0x44494d20
    5680:	.word	0x656d2049
    5684:	.word	0x67617373
    5688:	.word	0x79742065
    568c:	.word	0x00216570
    5690:	.word	0x74696e49
    5694:	.word	0x53206465
    5698:	.word	0x65757165
    569c:	.word	0x0065636e

000056a0 <pin2sc1a>:
    56a0:	................
    56b0:	................
    56c0:	................
    56d0:	................
    56e0:	........

000056e8 <digital_pin_to_info_PGM>:
    56e8:	@..C@..@D..CD..@
    56f8:	...C...@0..C0..@
    5708:	4..C4..@...C...@
    5718:	...C...@...C...@
    5728:	...C...@...C...@
    5738:	...C...@...C...@
    5748:	...C...@...C...@
    5758:	...C...@...C...@
    5768:	...C...@...C...@
    5778:	...C...@...C...@
    5788:	...C...@...C...@
    5798:	...C...@...C...@
    57a8:	h .Ch..@...C...@
    57b8:	8..C8..@<..C<..@
    57c8:	@..C@..@H..CH..@
    57d8:	L..CL..@(..C(..@
    57e8:	,..C,..@` .C`..@
    57f8:	d .Cd..@ ..C ..@
    5808:	$..C$..@(..C(..@
    5818:	,..C,..@D..CD..@
    5828:	p..Cp..@t..Ct..@
    5838:	h..Ch..@P..CP..@
    5848:	X..CX..@\..C\..@
    5858:	T..CT..@ ..C ..@
    5868:	$..C$..@...C...@
    5878:	...C...@8..C8..@
    5888:	4..C4..@0..C0..@
    5898:	<..C<..@,..C,..@
    58a8:	( .C(..@, .C,..@
    58b8:	. .C...@. .C...@
    58c8:	. .C...@. .C...@
    58d8:	. .C...@. .C...@

000058e8 <vtable for usb_serial_class>:
	...
    58f0:	.A...A...A...A..
    5900:	.A...A...A...A..
    5910:	....

00005914 <usb_endpoint_config_table>:
    5914:	........

0000591c <usb_descriptor_list>:
    591c:	................
    592c:	............`...
    593c:	................
    594c:	....H...........
    595c:	d...............
    596c:	....

00005970 <_global_impure_ptr>:
    5970:	....

00005974 <_init>:
    5974:	push	{r3, r4, r5, r6, r7, lr}
    5976:	nop
    5978:	pop	{r3, r4, r5, r6, r7}
    597a:	pop	{r3}
    597c:	mov	lr, r3
    597e:	bx	lr

00005980 <__init_array_start>:
    5980:	.word	0x000052d9

00005984 <__frame_dummy_init_array_entry>:
    5984:	5...."..

Disassembly of section .fini:

0000598c <_fini>:
    598c:	push	{r3, r4, r5, r6, r7, lr}
    598e:	nop

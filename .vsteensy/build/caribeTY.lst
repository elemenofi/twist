
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004bb0 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15b0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003850 l     F .text	0000000c startup_default_early_hook
0000385c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15b0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15b4 l       .bss	00000000 object.8610
00004ba8 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001684 l     F .text	000001e4 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff17f9 l     O .bss	00000001 tx_noautoflush
1fff17fc l     O .bss	00000004 tx_packet
1fff1800 l     O .bss	00000001 transmit_previous_timeout
1fff1804 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001b3c l     F .text	00000144 wait_for_cal
1fff1809 l     O .bss	00000001 analog_right_shift
1fff180a l     O .bss	00000001 calibrating
000048c4 l     O .text	00000048 pin2sc1a
1fff0c58 l     O .data	00000001 analog_config_bits
1fff180b l     O .bss	00000001 analogReadBusyADC1
1fff180c l     O .bss	00000001 analogReadBusyADC0
1fff180d l     O .bss	00000001 analog_reference_internal
1fff0c59 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001e5c l     F .text	0000004c digitalWrite.part.1
00001ea8 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002188 l     F .text	00000048 sysex_byte
1fff1828 l     O .bss	00000001 tx_noautoflush
1fff1854 l     O .bss	00000004 tx_packet
1fff1858 l     O .bss	00000001 transmit_previous_timeout
1fff1860 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c5c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1874 l     O .bss	00000004 ep0_tx_ptr
1fff1878 l     O .bss	00000014 rx_last
1fff188c l     O .bss	00000002 ep0_tx_len
1fff1890 l     O .bss	00000040 ep0_rx0_buf
1fff18d0 l     O .bss	00000014 rx_first
1fff18e4 l     O .bss	00000001 ep0_tx_data_toggle
1fff18e8 l     O .bss	00000040 ep0_rx1_buf
1fff1928 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff193c l     O .bss	00000014 tx_last
1fff1950 l     O .bss	00000008 setup
1fff1958 l     O .bss	00000001 ep0_tx_bdt_bank
1fff195c l     O .bss	00000008 reply_buffer
1fff1968 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff196d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1970 l     O .bss	00000004 rts_pin
1fff1974 l     O .bss	00000001 rx_buffer_head
1fff1975 l     O .bss	00000001 rx_buffer_tail
1fff1978 l     O .bss	00000028 tx_buffer
1fff19a0 l     O .bss	00000040 rx_buffer
1fff19e0 l     O .bss	00000001 transmitting
1fff19e1 l     O .bss	00000001 tx_buffer_tail
1fff19e4 l     O .bss	00000004 transmit_pin
1fff19e8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff19ec l     O .bss	00000004 rts_pin
1fff19f0 l     O .bss	00000001 transmitting
1fff19f1 l     O .bss	00000001 rx_buffer_tail
1fff19f4 l     O .bss	00000028 tx_buffer
1fff1a1c l     O .bss	00000040 rx_buffer
1fff1a5c l     O .bss	00000001 rx_buffer_head
1fff1a5d l     O .bss	00000001 tx_buffer_tail
1fff1a60 l     O .bss	00000004 transmit_pin
1fff1a64 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a68 l     O .bss	00000004 rts_pin
1fff1a6c l     O .bss	00000001 rx_buffer_head
1fff1a6d l     O .bss	00000001 rx_buffer_tail
1fff1a70 l     O .bss	00000028 tx_buffer
1fff1a98 l     O .bss	00000040 rx_buffer
1fff1ad8 l     O .bss	00000001 transmitting
1fff1ad9 l     O .bss	00000001 tx_buffer_tail
1fff1adc l     O .bss	00000004 transmit_pin
1fff1ae0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1ae4 l     O .bss	00000004 rts_pin
1fff1ae8 l     O .bss	00000001 rx_buffer_head
1fff1ae9 l     O .bss	00000001 rx_buffer_tail
1fff1aec l     O .bss	00000040 tx_buffer
1fff1b2c l     O .bss	00000040 rx_buffer
1fff1b6c l     O .bss	00000001 transmitting
1fff1b6d l     O .bss	00000001 tx_buffer_tail
1fff1b70 l     O .bss	00000004 transmit_pin
1fff1b74 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1b78 l     O .bss	00000004 rts_pin
1fff1b7c l     O .bss	00000001 rx_buffer_head
1fff1b7d l     O .bss	00000001 rx_buffer_tail
1fff1b80 l     O .bss	00000028 tx_buffer
1fff1ba8 l     O .bss	00000040 rx_buffer
1fff1be8 l     O .bss	00000001 transmitting
1fff1be9 l     O .bss	00000001 tx_buffer_tail
1fff1bec l     O .bss	00000004 transmit_pin
1fff1bf0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c74 l     O .data	00000012 device_descriptor
1fff0ca0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1bf4 l     O .bss	00000004 rts_pin
1fff1bf8 l     O .bss	00000001 rx_buffer_head
1fff1bf9 l     O .bss	00000001 rx_buffer_tail
1fff1bfc l     O .bss	00000028 tx_buffer
1fff1c24 l     O .bss	00000040 rx_buffer
1fff1c64 l     O .bss	00000001 transmitting
1fff1c65 l     O .bss	00000001 tx_buffer_tail
1fff1c68 l     O .bss	00000004 transmit_pin
1fff1c6c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000044f0 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15b0 l       .bss	00000000 __bss_start__
1fff1e08 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003848  w    F .text	00000006 adc0_isr
000018e0 g     F .text	0000001c usb_serial_available
00003708 g     F .text	00000020 serial4_available
000033b4  w    F .text	000000c4 yield
1fff0c88 g     O .data	00000018 usb_string_manufacturer_name_default
000038f4 g     F .text	00000020 serial_available
1fff182c g     O .bss	00000004 usb_midi_handleProgramChange
00003800  w    F .text	00000048 hard_fault_isr
00003848  w    F .text	00000006 dma_ch6_isr
000034a8 g     F .text	00000020 Print::println()
000035dc g     F .text	00000020 serial2_available
00003848  w    F .text	00000006 uart0_lon_isr
000027c8 g     F .text	000000e8 usb_rx_memory
00003478  w    F .text	00000002 serialEvent5()
00003848  w    F .text	00000006 dma_ch8_isr
00003a20 g     F .text	00000020 serial6_available
000044c8 g     F .text	00000002 __malloc_unlock
1fff1840 g     O .bss	00000004 usb_midi_handleAfterTouch
00001c80 g     F .text	000000e0 analog_init
000028b0 g     F .text	00000084 usb_tx
00003848  w    F .text	00000006 portcd_isr
1fff1850 g     O .bss	00000004 usb_midi_handleSysExComplete
00003e40 g     F .text	00000098 MillisTimer::runFromTimer()
00003848  w    F .text	00000006 can1_rx_warn_isr
00004bb4 g       .fini	00000000 __exidx_end
00003848  w    F .text	00000006 dma_error_isr
1fff1ccc g     O .bss	00000001 usb_midi_msg_type
1fff1c84 g     O .bss	00000001 EventResponder::runningFromYield
00003848  w    F .text	00000006 i2c0_isr
00003ee8 g     F .text	0000000c __errno
00003848  w    F .text	00000006 portd_isr
00003848  w    F .text	00000006 enet_error_isr
1fff1c70 g     O .bss	00000004 EventResponder::firstInterrupt
00003848  w    F .text	00000006 tpm1_isr
00003494  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0000490c g     O .text	00000200 digital_pin_to_info_PGM
1fff1e04 g     O .bss	00000004 errno
00004bb4 g       .fini	00000000 _etext
1fff15b0 g       .bss	00000000 _sbss
000034e0  w    F .text	00000002 serialEvent6()
1fff183c g     O .bss	00000004 usb_midi_handleVelocityChange
00001f50 g     F .text	0000001c digitalRead
00003848  w    F .text	00000006 porte_isr
00000494 g     F .text	000011f0 loop
00003848  w    F .text	00000006 portb_isr
0000226c g     F .text	0000002c usb_midi_flush_output
00003848  w    F .text	00000006 spi1_isr
00003728 g     F .text	000000d8 uart3_status_isr
00003cec  w    F .text	00000002 serialEvent1()
1fff15fc g     O .bss	00000018 led4
00003848  w    F .text	00000006 mcm_isr
00003dd8 g     F .text	00000068 MillisTimer::addToActiveList()
00002298 g     F .text	0000043c usb_midi_read
1fff1818 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1c74 g     O .bss	00000004 EventResponder::lastInterrupt
000035fc g     F .text	0000010c uart1_status_isr
1fff1cce g     O .bss	00000002 usb_midi_msg_sysex_len
00003848  w    F .text	00000006 randnum_isr
1fff1820 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1810 g     O .bss	00000004 systick_millis_count
00003800  w    F .text	00000048 bus_fault_isr
00003848  w    F .text	00000006 watchdog_isr
00003848  w    F .text	00000006 i2c1_isr
1fff1964 g     O .bss	00000001 usb_configuration
00003848  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
000034c8  w    F .text	00000002 serialEvent2()
00003848  w    F .text	00000006 i2c2_isr
1fff0c88  w    O .data	00000018 usb_string_manufacturer_name
1fff1df8 g     O .bss	0000000a usb_rx_byte_count_data
00003848  w    F .text	00000006 pit1_isr
00003f44 g     F .text	00000010 malloc
00003848  w    F .text	00000006 dma_ch4_isr
00003848  w    F .text	00000006 software_isr
00003848  w    F .text	00000006 dma_ch7_isr
00003d74  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
000032e4 g     F .text	000000d0 usb_init
00003848  w    F .text	00000006 lptmr_isr
1fff1c94 g     O .bss	00000004 __malloc_top_pad
00001f20 g     F .text	00000024 rtc_set
1fff1790 g     O .bss	00000028 button5
1fff17d0 g     O .bss	00000028 button4
1fff0c40 g       .data	00000000 _sdata
1fff1870 g     O .bss	00000004 usb_midi_handleNoteOn
000038c0 g     F .text	00000034 kinetis_hsrun_enable
000044cc g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001868 g     F .text	00000048 usb_serial_getchar
00003848  w    F .text	00000006 can1_bus_off_isr
00003848  w    F .text	00000006 ftm2_isr
1fff1cc0 g     O .bss	00000008 usb_cdc_line_coding
00001f44 g     F .text	0000000a digitalWrite
00003848  w    F .text	00000006 uart5_status_isr
00003a40 g     F .text	000000e4 lpuart0_status_isr
1fff1c7c g     O .bss	00000004 EventResponder::lastYield
00004b38 g     O .text	00000005 usb_endpoint_config_table
00003848  w    F .text	00000006 dma_ch9_isr
00003848  w    F .text	00000006 pit2_isr
00003bf4 g     F .text	00000020 serial3_available
1fff1c90 g     O .bss	00000004 __malloc_max_sbrked_mem
00001f6c g     F .text	0000000a pinMode
00002714 g     F .text	0000004c usb_free
00003848  w    F .text	00000006 i2c3_isr
1fff162c g     O .bss	00000018 led1
1fff1838 g     O .bss	00000004 usb_midi_handleSysExPartial
00004bb4 g       .fini	00000000 __exidx_start
00003848  w    F .text	00000006 pit0_isr
1fff1cd0 g     O .bss	00000001 usb_midi_msg_data1
1fff1c80 g     O .bss	00000004 EventResponder::firstYield
00004b94 g     O .text	00000004 _global_impure_ptr
00003848  w    F .text	00000006 can1_error_isr
00003ef4 g     F .text	00000050 __libc_init_array
1fff1e08 g       .bss	00000000 __bss_end
00003848  w    F .text	00000006 can0_wakeup_isr
00003848  w    F .text	00000006 flash_cmd_isr
0000347c  w    F .text	00000004 usb_serial_class::clear()
00003c14 g     F .text	000000d8 uart2_status_isr
00003860 g     F .text	0000002c _sbrk
1fff1c88 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c70 g     O .data	00000004 __brkval
1fff1808 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001af4 g     F .text	00000048 usb_serial_flush_callback
00004b98 g     F .text	00000000 _init
00003848  w    F .text	00000006 svcall_isr
00003848  w    F .text	00000006 dma_ch15_isr
00003848  w    F .text	00000006 uart1_error_isr
00004510 g     F .text	00000028 __libc_fini_array
00003848  w    F .text	00000006 usbhs_phy_isr
1fff1e08 g       .bss	00000000 _ebss
00003848 g     F .text	00000006 unused_isr
00003848  w    F .text	00000006 spi0_isr
00003848  w    F .text	00000006 dma_ch3_isr
00003848  w    F .text	00000006 flash_error_isr
1fff1644 g     O .bss	00000018 knob2
000034e4 g     F .text	00000020 serial5_available
00003848  w    F .text	00000006 uart5_error_isr
00003848  w    F .text	00000006 rtc_seconds_isr
00003848  w    F .text	00000006 pdb_isr
00003800  w    F .text	00000048 usage_fault_isr
00003848  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003848  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1cc8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000018 leds
00003ed8 g     F .text	00000010 systick_isr
00003848  w    F .text	00000006 rtc_alarm_isr
00003848  w    F .text	00000006 dma_ch2_isr
1fff0c60 g     O .data	00000010 Serial
00003848  w    F .text	00000006 ftm1_isr
0000349c  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003850  w    F .text	0000000c startup_early_hook
00003848  w    F .text	00000006 dma_ch13_isr
00003848  w    F .text	00000006 uart2_error_isr
000018b0 g     F .text	00000030 usb_serial_peekchar
1fff0d54 g     O .data	00000016 usb_string_serial_number_default
00003800 g     F .text	00000048 fault_isr
000045d4 g     F .text	000001d0 _free_r
1fff185c g     O .bss	00000004 usb_midi_handleStop
00003848  w    F .text	00000006 usb_charge_isr
0000348c  w    F .text	00000004 usb_serial_class::flush()
00003848  w    F .text	00000006 cmt_isr
00003848  w    F .text	00000006 usbhs_isr
1fff186c g     O .bss	00000004 usb_midi_handleControlChange
1fff15a8 g     O .data	00000004 __malloc_sbrk_base
00003484  w    F .text	00000004 usb_serial_class::read()
00003848  w    F .text	00000006 ftm3_isr
00003848  w    F .text	00000006 tsi0_isr
1fff1678 g     O .bss	00000018 led6
1fff1690 g     O .bss	00000018 knob1
00003848  w    F .text	00000006 spi2_isr
000034cc  w    F .text	00000002 serialEvent4()
000034a4  w    F .text	00000002 serialEvent()
1fff18e5 g     O .bss	00000001 usb_reboot_timer
000047a4 g     F .text	000000a4 __register_exitproc
000018fc g     F .text	00000038 usb_serial_flush_input
00001a3c g     F .text	00000018 usb_serial_putchar
1fff1c98 g     O .bss	00000028 __malloc_current_mallinfo
00003848  w    F .text	00000006 can0_bus_off_isr
1fff1614 g     O .bss	00000018 led5
1fff1959 g     O .bss	00000001 usb_rx_memory_needed
00002934 g     F .text	000009b0 usb_isr
1fff1868 g     O .bss	00000004 usb_midi_handleNoteOff
00004b0c  w    O .text	00000028 vtable for usb_serial_class
1fff1660 g     O .bss	00000018 knob3
00003848  w    F .text	00000006 uart3_error_isr
1fff1c78 g     O .bss	00000004 MillisTimer::listActive
00003848  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003848  w    F .text	00000006 low_voltage_isr
1fff16d0 g     O .bss	00000028 button2
1fff119c g     O .data	00000408 __malloc_av_
00003848  w    F .text	00000006 can0_error_isr
0000201c g     F .text	0000016c _init_Teensyduino_internal_
00001a9c g     F .text	00000058 usb_serial_flush_output
00003848  w    F .text	00000006 dma_ch12_isr
000044c4 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003848  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003848  w    F .text	00000006 pit3_isr
00003848  w    F .text	00000006 enet_rx_isr
00003848  w    F .text	00000006 portc_isr
000034d0 g     F .text	00000010 main
1fff1c8c g     O .bss	00000004 __malloc_max_total_mem
1fff15e4 g     O .bss	00000018 led3
00003800  w    F .text	00000048 memmanage_fault_isr
00003b24 g     F .text	00000084 usb_init_serialnumber
1fff165c g     O .bss	00000001 currentMode
00004bb0 g       .text	00000000 __init_array_end
00003f54 g     F .text	00000570 _malloc_r
00003848  w    F .text	00000006 debugmonitor_isr
1fff1834 g     O .bss	00000004 usb_midi_handleSongPosition
00003cf4 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1824 g     O .bss	00000004 usb_midi_handleContinue
1fff1cd1 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003848  w    F .text	00000006 cmp1_isr
1fff16f8 g     O .bss	00000028 button3
00003848  w    F .text	00000006 ftm0_isr
00004538 g     F .text	0000009c _malloc_trim_r
1fff0d50 g     O .data	00000004 string0
00001934 g     F .text	00000108 usb_serial_write
0000385c  w    F .text	00000002 startup_late_hook
00003488  w    F .text	00000004 usb_serial_class::available()
1fff1cd2 g     O .bss	00000001 usb_midi_msg_cable
1fff0d38  w    O .data	00000018 usb_string_product_name
00001f78 g     F .text	000000a4 delay
00003848  w    F .text	00000006 tpm0_isr
00004bb0 g     F .fini	00000000 _fini
00003848  w    F .text	00000006 i2s0_rx_isr
00003848  w    F .text	00000006 uart4_error_isr
000021d0 g     F .text	0000009c usb_midi_write_packed
00004504 g     F .text	0000000c atexit
00003848  w    F .text	00000006 can0_message_isr
1fff1198 g     O .data	00000004 _impure_ptr
00003848  w    F .text	00000006 can1_message_isr
00003848  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff184c g     O .bss	00000004 usb_midi_handleTuneRequest
00004ba4 g       .text	00000000 __preinit_array_end
00003848  w    F .text	00000006 sdhc_isr
1fff1cd3 g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00004b40 g     O .text	00000054 usb_descriptor_list
00002760 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff17b8 g     O .bss	00000018 knob4
00003848  w    F .text	00000006 dma_ch10_isr
1fff1720 g     O .bss	00000070 sequence1
1fff1844 g     O .bss	00000004 usb_midi_handleStart
00003848  w    F .text	00000006 uart0_error_isr
000026d4 g     F .text	00000040 usb_malloc
00003848  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001a54 g     F .text	00000048 usb_serial_write_buffer_free
00003848  w    F .text	00000006 enet_timer_isr
1fff16a8 g     O .bss	00000028 button1
1fff15ac g       .data	00000000 _edata
00003848  w    F .text	00000006 i2s0_tx_isr
00003848  w    F .text	00000006 adc1_isr
00003490  w    F .text	00000004 usb_serial_class::availableForWrite()
00003848  w    F .text	00000006 cmp0_isr
1fff1814 g     O .bss	00000004 usb_midi_handleClock
00003ba8 g     F .text	0000004c ultoa
00003d90 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15a4 g     O .data	00000004 __malloc_trim_threshold
00003480  w    F .text	00000004 usb_serial_class::peek()
1fff17f8 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1830 g     O .bss	00000004 usb_midi_handlePitchChange
00003848  w    F .text	00000006 pit_isr
1fff1848 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003848  w    F .text	00000006 dac0_isr
00004ba4 g       .text	00000000 __init_array_start
00003848  w    F .text	00000006 can1_tx_warn_isr
00001d60 g     F .text	000000fc analogRead
1fff1cd4 g     O .bss	00000122 usb_midi_msg_sysex
00003914 g     F .text	0000010c uart0_status_isr
00003848  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d38 g     O .data	00000018 usb_string_product_name_default
00003848  w    F .text	00000006 dma_ch1_isr
0000279c g     F .text	0000002c usb_tx_packet_count
00003848  w    F .text	00000006 dma_ch5_isr
00003848  w    F .text	00000006 can0_rx_warn_isr
00003848  w    F .text	00000006 can0_tx_warn_isr
00003504 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000388c g     F .text	00000034 kinetis_hsrun_disable
00004ba4 g       .text	00000000 __preinit_array_start
00003cf0  w    F .text	00000002 serialEvent3()
1fff1864 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15cc g     O .bss	00000018 led2
00003848  w    F .text	00000006 cmp2_isr
00003dd4 g     F .text	00000004 pendablesrvreq_isr
00003848  w    F .text	00000006 wakeup_isr
00003848  w    F .text	00000006 cmp3_isr
1fff181c g     O .bss	00000004 usb_midi_handleActiveSensing
00003848  w    F .text	00000006 tpm2_isr
00003848  w    F .text	00000006 dma_ch0_isr
1fff0d54  w    O .data	00000016 usb_string_serial_number
00003848  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ....I8...8..
      10:	.8...8...8...8..
      20:	.8...8...8..I8..
      30:	I8...8...=...>..
      40:	I8..I8..I8..I8..
      50:	I8..I8..I8..I8..
      60:	I8..I8..I8..I8..
      70:	I8..I8..I8..I8..
      80:	I8..I8..I8..I8..
      90:	I8..I8..I8..I8..
      a0:	I8..I8..I8..I8..
      b0:	I8..I8..I8...9..
      c0:	I8...5..I8...<..
      d0:	I8..)7..I8..I8..
      e0:	I8..I8..I8..I8..
      f0:	I8..I8..I8..I8..
     100:	I8..I8..I8..I8..
     110:	I8..5)..I8..I8..
     120:	I8..I8..I8..I8..
     130:	I8..I8..I8..I8..
     140:	I8..I8...5..I8..
     150:	I8..I8..I8..I8..
     160:	I8..I8..I8..I8..
     170:	I8..I8..I8..I8..
     180:	I8..I8..I8..I8..
     190:	I8..I8..A:..I8..
     1a0:	I8..I8..I8..I8..
     1b0:	I8..I8..I8..I8..
     1c0:	I8..I8..I8..I8..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3850 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	201c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	1f20 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	1f20 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	3ef4 <__libc_init_array>

	startup_late_hook();
     33a:	bl	385c <startup_late_hook>
	main();
     33e:	bl	34d0 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15ac
     374:	.word	0x00004bb0
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15b0
     380:	.word	0x1fff1e08
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15b0
     42c:	.word	0x00000000
     430:	.word	0x00004bb4

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15b4
     460:	.word	0x00004bb4
     464:	.word	0x1fff15ac
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	1f6c <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	1f44 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob1(A0, sequence1, FIRST, 0);
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #196	; 0xc4
     49c:	bl	2298 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	7b4 <loop+0x320>
     4a6:	ldr	r4, [pc, #624]	; (718 <loop+0x284>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r5, [pc, #624]	; (71c <loop+0x288>)
     4aa:	ldrb.w	r0, [r5, #32]
     4ae:	bl	1f50 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r6, r0
     4ba:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	950 <loop+0x4bc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #48]	; 0x30
	return ret;
     4c4:	ldr	r3, [sp, #48]	; 0x30
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #44]	; 0x2c
	return ret;
     4cc:	ldr	r1, [sp, #44]	; 0x2c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #584]	; 718 <loop+0x284>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r1, r3
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r5, #4]
     4d8:	ldr	r7, [pc, #576]	; (71c <loop+0x288>)
     4da:	cmp	r6, r3
     4dc:	beq.w	96c <loop+0x4d8>
          m_state = reading;
     4e0:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r6, #0
     4e4:	beq.w	9a2 <loop+0x50e>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r6, [pc, #564]	; (720 <loop+0x28c>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r6, #32]
     4f0:	bl	1f50 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r5, r0
     4fc:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	94c <loop+0x4b8>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #40]	; 0x28
	return ret;
     506:	ldr	r3, [sp, #40]	; 0x28
        m_lastDebounceTime = millis();
     508:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #36]	; 0x24
	return ret;
     50e:	ldr	r1, [sp, #36]	; 0x24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #516]	; 718 <loop+0x284>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r3, r1
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r6, #4]
     51a:	ldr	r7, [pc, #516]	; (720 <loop+0x28c>)
     51c:	cmp	r5, r3
     51e:	beq.w	964 <loop+0x4d0>
          m_state = reading;
     522:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r5, #0
     526:	beq.w	9d0 <loop+0x53c>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r5, [pc, #504]	; (724 <loop+0x290>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r5, #32]
     532:	bl	1f50 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r6, r0
     53e:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	954 <loop+0x4c0>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #32]
	return ret;
     548:	ldr	r3, [sp, #32]
        m_lastDebounceTime = millis();
     54a:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #28]
	return ret;
     550:	ldr	r1, [sp, #28]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #452]	; 718 <loop+0x284>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r5, #4]
     55c:	ldr	r7, [pc, #452]	; (724 <loop+0x290>)
     55e:	cmp	r6, r3
     560:	beq.w	970 <loop+0x4dc>
          m_state = reading;
     564:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r6, #0
     568:	beq.w	9fe <loop+0x56a>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r6, [pc, #440]	; (728 <loop+0x294>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r6, #32]
     574:	bl	1f50 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r5, r0
     580:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	95c <loop+0x4c8>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #24]
	return ret;
     58a:	ldr	r3, [sp, #24]
        m_lastDebounceTime = millis();
     58c:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #20]
	return ret;
     592:	ldr	r1, [sp, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #384]	; 718 <loop+0x284>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r1, r3
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r6, #4]
     59e:	ldr	r7, [pc, #392]	; (728 <loop+0x294>)
     5a0:	cmp	r5, r3
     5a2:	beq.w	960 <loop+0x4cc>
          m_state = reading;
     5a6:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r5, #0
     5aa:	beq.w	a3c <loop+0x5a8>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r5, [pc, #380]	; (72c <loop+0x298>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r5, #32]
     5b6:	bl	1f50 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r6, r0
     5c2:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	958 <loop+0x4c4>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #16]
	return ret;
     5cc:	ldr	r3, [sp, #16]
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #12]
	return ret;
     5d4:	ldr	r1, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #320]	; 718 <loop+0x284>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r5, #4]
     5e0:	ldr	r7, [pc, #328]	; (72c <loop+0x298>)
     5e2:	cmp	r6, r3
     5e4:	beq.w	968 <loop+0x4d4>
          m_state = reading;
     5e8:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r6, #0
     5ec:	beq.w	974 <loop+0x4e0>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     5f0:	ldr	r6, [pc, #316]	; (730 <loop+0x29c>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r5, #8]
     5f4:	ldrb	r3, [r6, #16]
     5f6:	cmp	r3, #0
     5f8:	bne.w	8f0 <loop+0x45c>
     5fc:	ldr	r5, [pc, #308]	; (734 <loop+0x2a0>)
     5fe:	ldrb	r3, [r5, #16]
     600:	cmp	r3, #0
     602:	bne.w	894 <loop+0x400>
     606:	ldr	r5, [pc, #304]	; (738 <loop+0x2a4>)
     608:	ldrb	r3, [r5, #16]
     60a:	cmp	r3, #0
     60c:	bne.w	838 <loop+0x3a4>
     610:	ldr	r5, [pc, #296]	; (73c <loop+0x2a8>)
     612:	ldrb	r3, [r5, #16]
     614:	cmp	r3, #0
     616:	bne.w	7dc <loop+0x348>
     61a:	ldr	r5, [pc, #292]	; (740 <loop+0x2ac>)
     61c:	ldrb	r3, [r5, #16]
     61e:	cmp	r3, #0
     620:	bne.w	758 <loop+0x2c4>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     624:	ldr	r4, [pc, #284]	; (744 <loop+0x2b0>)
     626:	ldrb	r0, [r4, #0]
     628:	bl	1d60 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     62c:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     62e:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     630:	cmp	r0, r3
     632:	beq.n	640 <loop+0x1ac>
     634:	subs	r3, r0, r3
     636:	cmp	r3, #0
     638:	it	lt
     63a:	neglt	r3, r3
     63c:	cmp	r3, #10
     63e:	bgt.n	6f8 <loop+0x264>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     640:	ldr	r4, [pc, #260]	; (748 <loop+0x2b4>)
     642:	ldrb	r0, [r4, #0]
     644:	bl	1d60 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     648:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     64a:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     64c:	cmp	r0, r3
     64e:	beq.n	65c <loop+0x1c8>
     650:	subs	r3, r0, r3
     652:	cmp	r3, #0
     654:	it	lt
     656:	neglt	r3, r3
     658:	cmp	r3, #10
     65a:	bgt.n	6d8 <loop+0x244>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     65c:	ldr	r4, [pc, #236]	; (74c <loop+0x2b8>)
     65e:	ldrb	r0, [r4, #0]
     660:	bl	1d60 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     664:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     666:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     668:	cmp	r0, r3
     66a:	beq.n	678 <loop+0x1e4>
     66c:	subs	r3, r0, r3
     66e:	cmp	r3, #0
     670:	it	lt
     672:	neglt	r3, r3
     674:	cmp	r3, #10
     676:	bgt.n	6b8 <loop+0x224>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     678:	ldr	r4, [pc, #212]	; (750 <loop+0x2bc>)
     67a:	ldrb	r0, [r4, #0]
     67c:	bl	1d60 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     680:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     682:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     684:	cmp	r0, r3
     686:	beq.n	6b2 <loop+0x21e>
     688:	subs	r3, r0, r3
     68a:	cmp	r3, #0
     68c:	it	lt
     68e:	neglt	r3, r3
     690:	cmp	r3, #10
     692:	ble.n	6b2 <loop+0x21e>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     694:	ldr	r3, [pc, #188]	; (754 <loop+0x2c0>)
     696:	ldrb	r3, [r3, #0]
     698:	cmp	r3, #0
     69a:	beq.w	aae <loop+0x61a>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     69e:	cmp	r3, #2
     6a0:	beq.w	f2c <loop+0xa98>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     6a4:	cmp	r3, #1
     6a6:	beq.w	fc2 <loop+0xb2e>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     6aa:	cmp	r3, #3
     6ac:	beq.w	cac <loop+0x818>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     6b0:	str	r0, [r4, #8]
  led5.check();
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
}
     6b2:	add	sp, #196	; 0xc4
     6b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     6b8:	ldr	r3, [pc, #152]	; (754 <loop+0x2c0>)
     6ba:	ldrb	r3, [r3, #0]
     6bc:	cmp	r3, #0
     6be:	beq.w	ad0 <loop+0x63c>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     6c2:	cmp	r3, #2
     6c4:	beq.w	f0e <loop+0xa7a>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     6c8:	cmp	r3, #1
     6ca:	beq.w	f86 <loop+0xaf2>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     6ce:	cmp	r3, #3
     6d0:	beq.w	c7a <loop+0x7e6>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     6d4:	str	r0, [r4, #8]
     6d6:	b.n	678 <loop+0x1e4>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     6d8:	ldr	r3, [pc, #120]	; (754 <loop+0x2c0>)
     6da:	ldrb	r3, [r3, #0]
     6dc:	cmp	r3, #0
     6de:	beq.w	a8c <loop+0x5f8>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     6e2:	cmp	r3, #2
     6e4:	beq.w	ef0 <loop+0xa5c>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     6e8:	cmp	r3, #1
     6ea:	beq.w	fa4 <loop+0xb10>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     6ee:	cmp	r3, #3
     6f0:	beq.w	c48 <loop+0x7b4>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     6f4:	str	r0, [r4, #8]
     6f6:	b.n	65c <loop+0x1c8>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     6f8:	ldr	r3, [pc, #88]	; (754 <loop+0x2c0>)
     6fa:	ldrb	r3, [r3, #0]
     6fc:	cmp	r3, #0
     6fe:	beq.w	a6a <loop+0x5d6>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     702:	cmp	r3, #2
     704:	beq.w	f4a <loop+0xab6>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     708:	cmp	r3, #1
     70a:	beq.w	f68 <loop+0xad4>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     70e:	cmp	r3, #3
     710:	beq.w	cde <loop+0x84a>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     714:	str	r0, [r4, #8]
     716:	b.n	640 <loop+0x1ac>
     718:	.word	0x1fff1810
     71c:	.word	0x1fff16a8
     720:	.word	0x1fff16d0
     724:	.word	0x1fff16f8
     728:	.word	0x1fff17d0
     72c:	.word	0x1fff1790
     730:	.word	0x1fff162c
     734:	.word	0x1fff15cc
     738:	.word	0x1fff15e4
     73c:	.word	0x1fff15fc
     740:	.word	0x1fff1614
     744:	.word	0x1fff1690
     748:	.word	0x1fff1644
     74c:	.word	0x1fff1660
     750:	.word	0x1fff17b8
     754:	.word	0x1fff165c
     758:	ldr	r3, [r4, #0]
     75a:	str	r3, [sp, #184]	; 0xb8
	return ret;
     75c:	ldr	r3, [sp, #184]	; 0xb8
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     75e:	ldr	r1, [r5, #8]
     760:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     762:	ldr	r4, [pc, #712]	; (a2c <loop+0x598>)
     764:	subs	r3, r3, r1
     766:	cmp	r3, r2
     768:	bls.w	624 <loop+0x190>
        digitalWrite(m_pin, !digitalRead(m_pin));
     76c:	ldrb	r6, [r5, #0]
     76e:	mov	r0, r6
     770:	bl	1f50 <digitalRead>
     774:	clz	r1, r0
     778:	lsrs	r1, r1, #5
     77a:	mov	r0, r6
     77c:	bl	1f44 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     780:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     782:	movs	r2, #0

        if (blinkingCounter > 0) {
     784:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     786:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     788:	ble.w	624 <loop+0x190>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     78c:	ldrb	r6, [r5, #0]
     78e:	mov	r0, r6
     790:	bl	1f50 <digitalRead>
     794:	clz	r1, r0
     798:	lsrs	r1, r1, #5
     79a:	mov	r0, r6
     79c:	bl	1f44 <digitalWrite>
     7a0:	ldr	r3, [r4, #0]
     7a2:	str	r3, [sp, #188]	; 0xbc
	return ret;
     7a4:	ldr	r3, [sp, #188]	; 0xbc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     7a6:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     7a8:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     7aa:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     7ae:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     7b0:	str	r3, [r5, #20]
     7b2:	b.n	624 <loop+0x190>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     7b4:	ldr	r3, [pc, #632]	; (a30 <loop+0x59c>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     7b6:	ldrb	r3, [r3, #0]
     7b8:	cmp	r3, #250	; 0xfa
     7ba:	beq.w	b42 <loop+0x6ae>
     7be:	cmp	r3, #252	; 0xfc
     7c0:	beq.w	af0 <loop+0x65c>
     7c4:	cmp	r3, #248	; 0xf8
     7c6:	beq.w	b12 <loop+0x67e>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     7ca:	movs	r1, #35	; 0x23
     7cc:	ldr	r0, [pc, #612]	; (a34 <loop+0x5a0>)
     7ce:	ldr	r4, [pc, #604]	; (a2c <loop+0x598>)
     7d0:	bl	1934 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7d4:	ldr	r0, [pc, #608]	; (a38 <loop+0x5a4>)
     7d6:	bl	34a8 <Print::println()>
     7da:	b.n	4a8 <loop+0x14>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7dc:	ldr	r3, [r4, #0]
     7de:	str	r3, [sp, #176]	; 0xb0
	return ret;
     7e0:	ldr	r3, [sp, #176]	; 0xb0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     7e2:	ldr	r1, [r5, #8]
     7e4:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7e6:	ldr	r6, [pc, #580]	; (a2c <loop+0x598>)
     7e8:	subs	r3, r3, r1
     7ea:	cmp	r3, r2
     7ec:	bls.w	61a <loop+0x186>
        digitalWrite(m_pin, !digitalRead(m_pin));
     7f0:	ldrb	r7, [r5, #0]
     7f2:	mov	r0, r7
     7f4:	bl	1f50 <digitalRead>
     7f8:	clz	r1, r0
     7fc:	lsrs	r1, r1, #5
     7fe:	mov	r0, r7
     800:	bl	1f44 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     804:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     806:	movs	r2, #0

        if (blinkingCounter > 0) {
     808:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     80a:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     80c:	ble.w	61a <loop+0x186>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     810:	ldrb	r7, [r5, #0]
     812:	mov	r0, r7
     814:	bl	1f50 <digitalRead>
     818:	clz	r1, r0
     81c:	lsrs	r1, r1, #5
     81e:	mov	r0, r7
     820:	bl	1f44 <digitalWrite>
     824:	ldr	r3, [r6, #0]
     826:	str	r3, [sp, #180]	; 0xb4
	return ret;
     828:	ldr	r3, [sp, #180]	; 0xb4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     82a:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     82c:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     82e:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     832:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     834:	str	r3, [r5, #20]
     836:	b.n	61a <loop+0x186>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     838:	ldr	r3, [r4, #0]
     83a:	str	r3, [sp, #168]	; 0xa8
	return ret;
     83c:	ldr	r3, [sp, #168]	; 0xa8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     83e:	ldr	r1, [r5, #8]
     840:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     842:	ldr	r6, [pc, #488]	; (a2c <loop+0x598>)
     844:	subs	r3, r3, r1
     846:	cmp	r3, r2
     848:	bls.w	610 <loop+0x17c>
        digitalWrite(m_pin, !digitalRead(m_pin));
     84c:	ldrb	r7, [r5, #0]
     84e:	mov	r0, r7
     850:	bl	1f50 <digitalRead>
     854:	clz	r1, r0
     858:	lsrs	r1, r1, #5
     85a:	mov	r0, r7
     85c:	bl	1f44 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     860:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     862:	movs	r2, #0

        if (blinkingCounter > 0) {
     864:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     866:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     868:	ble.w	610 <loop+0x17c>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     86c:	ldrb	r7, [r5, #0]
     86e:	mov	r0, r7
     870:	bl	1f50 <digitalRead>
     874:	clz	r1, r0
     878:	lsrs	r1, r1, #5
     87a:	mov	r0, r7
     87c:	bl	1f44 <digitalWrite>
     880:	ldr	r3, [r6, #0]
     882:	str	r3, [sp, #172]	; 0xac
	return ret;
     884:	ldr	r3, [sp, #172]	; 0xac
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     886:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     888:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     88a:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     88e:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     890:	str	r3, [r5, #20]
     892:	b.n	610 <loop+0x17c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     894:	ldr	r3, [r4, #0]
     896:	str	r3, [sp, #160]	; 0xa0
	return ret;
     898:	ldr	r3, [sp, #160]	; 0xa0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     89a:	ldr	r1, [r5, #8]
     89c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     89e:	ldr	r6, [pc, #396]	; (a2c <loop+0x598>)
     8a0:	subs	r3, r3, r1
     8a2:	cmp	r3, r2
     8a4:	bls.w	606 <loop+0x172>
        digitalWrite(m_pin, !digitalRead(m_pin));
     8a8:	ldrb	r7, [r5, #0]
     8aa:	mov	r0, r7
     8ac:	bl	1f50 <digitalRead>
     8b0:	clz	r1, r0
     8b4:	lsrs	r1, r1, #5
     8b6:	mov	r0, r7
     8b8:	bl	1f44 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     8bc:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8be:	movs	r2, #0

        if (blinkingCounter > 0) {
     8c0:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8c2:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     8c4:	ble.w	606 <loop+0x172>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     8c8:	ldrb	r7, [r5, #0]
     8ca:	mov	r0, r7
     8cc:	bl	1f50 <digitalRead>
     8d0:	clz	r1, r0
     8d4:	lsrs	r1, r1, #5
     8d6:	mov	r0, r7
     8d8:	bl	1f44 <digitalWrite>
     8dc:	ldr	r3, [r6, #0]
     8de:	str	r3, [sp, #164]	; 0xa4
	return ret;
     8e0:	ldr	r3, [sp, #164]	; 0xa4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     8e2:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8e4:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8e6:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8ea:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8ec:	str	r3, [r5, #20]
     8ee:	b.n	606 <loop+0x172>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8f0:	ldr	r3, [r4, #0]
     8f2:	str	r3, [sp, #152]	; 0x98
	return ret;
     8f4:	ldr	r3, [sp, #152]	; 0x98
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     8f6:	ldr	r1, [r6, #8]
     8f8:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8fa:	ldr	r5, [pc, #304]	; (a2c <loop+0x598>)
     8fc:	subs	r3, r3, r1
     8fe:	cmp	r3, r2
     900:	bls.w	5fc <loop+0x168>
        digitalWrite(m_pin, !digitalRead(m_pin));
     904:	ldrb	r7, [r6, #0]
     906:	mov	r0, r7
     908:	bl	1f50 <digitalRead>
     90c:	clz	r1, r0
     910:	lsrs	r1, r1, #5
     912:	mov	r0, r7
     914:	bl	1f44 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     918:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     91a:	movs	r2, #0

        if (blinkingCounter > 0) {
     91c:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     91e:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     920:	ble.w	5fc <loop+0x168>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     924:	ldrb	r7, [r6, #0]
     926:	mov	r0, r7
     928:	bl	1f50 <digitalRead>
     92c:	clz	r1, r0
     930:	lsrs	r1, r1, #5
     932:	mov	r0, r7
     934:	bl	1f44 <digitalWrite>
     938:	ldr	r3, [r5, #0]
     93a:	str	r3, [sp, #156]	; 0x9c
	return ret;
     93c:	ldr	r3, [sp, #156]	; 0x9c
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     93e:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     940:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     942:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     946:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     948:	str	r3, [r6, #20]
     94a:	b.n	5fc <loop+0x168>
     94c:	ldr	r3, [r6, #20]
     94e:	b.n	50a <loop+0x76>
     950:	ldr	r3, [r5, #20]
     952:	b.n	4c8 <loop+0x34>
     954:	ldr	r3, [r5, #20]
     956:	b.n	54c <loop+0xb8>
     958:	ldr	r3, [r5, #20]
     95a:	b.n	5d0 <loop+0x13c>
     95c:	ldr	r3, [r6, #20]
     95e:	b.n	58e <loop+0xfa>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     960:	mov	r2, r5
     962:	b.n	5ae <loop+0x11a>
     964:	mov	r2, r5
     966:	b.n	52a <loop+0x96>
     968:	mov	r2, r6
     96a:	b.n	5f0 <loop+0x15c>
     96c:	mov	r2, r6
     96e:	b.n	4e8 <loop+0x54>
     970:	mov	r2, r6
     972:	b.n	56c <loop+0xd8>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     974:	ldrb	r3, [r7, #16]
     976:	cmp	r3, #0
     978:	bne.w	d10 <loop+0x87c>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     97c:	ldr	r3, [r7, #24]
     97e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     982:	clz	r1, r1
     986:	lsrs	r1, r1, #5
     988:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     98a:	uxtb	r0, r0
     98c:	bl	1f44 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     990:	ldr	r3, [r7, #0]
     992:	ldr	r0, [r7, #28]
     994:	ldr	r2, [r7, #12]
     996:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     998:	ldrb	r1, [r0, r3]
     99a:	eor.w	r1, r1, #1
     99e:	strb	r1, [r0, r3]
     9a0:	b.n	5f0 <loop+0x15c>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     9a2:	ldrb	r3, [r7, #16]
     9a4:	cmp	r3, #0
     9a6:	bne.w	e92 <loop+0x9fe>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     9aa:	ldr	r3, [r7, #24]
     9ac:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     9b0:	clz	r1, r1
     9b4:	lsrs	r1, r1, #5
     9b6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     9b8:	uxtb	r0, r0
     9ba:	bl	1f44 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     9be:	ldr	r3, [r7, #0]
     9c0:	ldr	r0, [r7, #28]
     9c2:	ldr	r2, [r7, #12]
     9c4:	subs	r3, #1
     9c6:	ldrb	r1, [r0, r3]
     9c8:	eor.w	r1, r1, #1
     9cc:	strb	r1, [r0, r3]
     9ce:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     9d0:	ldrb	r3, [r7, #16]
     9d2:	cmp	r3, #0
     9d4:	bne.w	e34 <loop+0x9a0>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     9d8:	ldr	r3, [r7, #24]
     9da:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     9de:	clz	r1, r1
     9e2:	lsrs	r1, r1, #5
     9e4:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     9e6:	uxtb	r0, r0
     9e8:	bl	1f44 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     9ec:	ldr	r3, [r7, #0]
     9ee:	ldr	r0, [r7, #28]
     9f0:	ldr	r2, [r7, #12]
     9f2:	subs	r3, #1
     9f4:	ldrb	r1, [r0, r3]
     9f6:	eor.w	r1, r1, #1
     9fa:	strb	r1, [r0, r3]
     9fc:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     9fe:	ldrb	r3, [r7, #16]
     a00:	cmp	r3, #0
     a02:	bne.w	dca <loop+0x936>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     a06:	ldr	r3, [r7, #24]
     a08:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     a0c:	clz	r1, r1
     a10:	lsrs	r1, r1, #5
     a12:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     a14:	uxtb	r0, r0
     a16:	bl	1f44 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     a1a:	ldr	r3, [r7, #0]
     a1c:	ldr	r0, [r7, #28]
     a1e:	ldr	r2, [r7, #12]
     a20:	subs	r3, #1
     a22:	ldrb	r1, [r0, r3]
     a24:	eor.w	r1, r1, #1
     a28:	strb	r1, [r0, r3]
     a2a:	b.n	56c <loop+0xd8>
     a2c:	.word	0x1fff1810
     a30:	.word	0x1fff1ccc
     a34:	.word	0x00004878
     a38:	.word	0x1fff0c60

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     a3c:	ldrb	r3, [r7, #16]
     a3e:	cmp	r3, #0
     a40:	bne.w	d6c <loop+0x8d8>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     a44:	ldr	r3, [r7, #24]
     a46:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     a4a:	clz	r1, r1
     a4e:	lsrs	r1, r1, #5
     a50:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     a52:	uxtb	r0, r0
     a54:	bl	1f44 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     a58:	ldr	r3, [r7, #0]
     a5a:	ldr	r0, [r7, #28]
     a5c:	ldr	r2, [r7, #12]
     a5e:	subs	r3, #1
     a60:	ldrb	r1, [r0, r3]
     a62:	eor.w	r1, r1, #1
     a66:	strb	r1, [r0, r3]
     a68:	b.n	5ae <loop+0x11a>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     a6a:	ldrb	r3, [r4, #20]
     a6c:	cmp	r3, #0
     a6e:	bne.w	714 <loop+0x280>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     a72:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     a76:	ldr	r2, [r4, #16]
     a78:	bge.w	ba8 <loop+0x714>
        max_ppqn = 6;

        if (ppqn >= 6) {
     a7c:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     a7e:	movs	r5, #6

        if (ppqn >= 6) {
     a80:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     a82:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     a84:	ble.w	714 <loop+0x280>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     a88:	str	r3, [r2, #28]
     a8a:	b.n	714 <loop+0x280>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     a8c:	ldrb	r3, [r4, #20]
     a8e:	cmp	r3, #0
     a90:	bne.w	6f4 <loop+0x260>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     a94:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     a98:	ldr	r2, [r4, #16]
     a9a:	bge.w	bdc <loop+0x748>
        max_ppqn = 6;

        if (ppqn >= 6) {
     a9e:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     aa0:	movs	r5, #6

        if (ppqn >= 6) {
     aa2:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     aa4:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     aa6:	ble.w	6f4 <loop+0x260>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     aaa:	str	r3, [r2, #28]
     aac:	b.n	6f4 <loop+0x260>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     aae:	ldrb	r3, [r4, #20]
     ab0:	cmp	r3, #0
     ab2:	bne.w	6b0 <loop+0x21c>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     ab6:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     aba:	ldr	r2, [r4, #16]
     abc:	bge.w	bf6 <loop+0x762>
        max_ppqn = 6;

        if (ppqn >= 6) {
     ac0:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ac2:	movs	r5, #6

        if (ppqn >= 6) {
     ac4:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ac6:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     ac8:	ble.w	6b0 <loop+0x21c>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     acc:	str	r3, [r2, #28]
     ace:	b.n	6b0 <loop+0x21c>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     ad0:	ldrb	r3, [r4, #20]
     ad2:	cmp	r3, #0
     ad4:	bne.w	6d4 <loop+0x240>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     ad8:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     adc:	ldr	r2, [r4, #16]
     ade:	bge.n	bc2 <loop+0x72e>
        max_ppqn = 6;

        if (ppqn >= 6) {
     ae0:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ae2:	movs	r5, #6

        if (ppqn >= 6) {
     ae4:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ae6:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     ae8:	ble.w	6d4 <loop+0x240>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     aec:	str	r3, [r2, #28]
     aee:	b.n	6d4 <loop+0x240>
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     af0:	ldr	r3, [pc, #820]	; (e28 <loop+0x994>)
     af2:	ldr	r4, [pc, #824]	; (e2c <loop+0x998>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[5]->toggle();
     af4:	ldr	r2, [r3, #108]	; 0x6c
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     af6:	movs	r5, #0
      ppqn = 0;
     af8:	str	r5, [r3, #28]
      m_currentStep = 0;
     afa:	str	r5, [r3, #8]
     afc:	ldmia.w	r2, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b00:	clz	r1, r1
     b04:	lsrs	r1, r1, #5
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     b06:	strb	r5, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b08:	uxtb	r0, r0
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b0a:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     b0c:	bl	1f44 <digitalWrite>
     b10:	b.n	4a8 <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     b12:	ldr	r5, [pc, #788]	; (e28 <loop+0x994>)

      if (ppqn >= notesLengths[m_currentStep]) {
     b14:	ldr	r2, [r5, #8]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     b16:	ldr	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     b18:	adds	r2, #18
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     b1a:	adds	r3, #1

      if (ppqn >= notesLengths[m_currentStep]) {
     b1c:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     b20:	str	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     b22:	cmp	r3, r2
     b24:	bge.w	106e <loop+0xbda>
        // of the active note to see if i do the stop step
        stopStep();
      }


      if (ppqn == max_ppqn) {
     b28:	ldr	r2, [r5, #32]
     b2a:	ldr	r6, [pc, #764]	; (e28 <loop+0x994>)
     b2c:	cmp	r2, r3
     b2e:	bne.w	4a6 <loop+0x12>
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
     b32:	ldrb	r3, [r6, #4]
     b34:	cmp	r3, #0
     b36:	bne.w	11e0 <loop+0xd4c>
     b3a:	ldr	r4, [pc, #752]	; (e2c <loop+0x998>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     b3c:	movs	r3, #0
     b3e:	str	r3, [r5, #28]
     b40:	b.n	4a8 <loop+0x14>
      }
    };

    void startPPQN () {
      m_state = true;
     b42:	ldr	r5, [pc, #740]	; (e28 <loop+0x994>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b44:	ldr	r4, [pc, #740]	; (e2c <loop+0x998>)
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     b46:	ldr	r3, [r5, #8]
     b48:	adds	r3, #22
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     b4a:	mov.w	r8, #1
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     b4e:	ldr.w	r6, [r5, r3, lsl #2]
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     b52:	strb.w	r8, [r5, #4]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b56:	ldrb.w	r9, [r6]
      ppqn = 0;
     b5a:	movs	r7, #0
     b5c:	mov	r0, r9
     b5e:	str	r7, [r5, #28]
     b60:	bl	1f50 <digitalRead>
     b64:	clz	r1, r0
     b68:	lsrs	r1, r1, #5
     b6a:	mov	r0, r9
     b6c:	bl	1f44 <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep].m_state) {
     b70:	ldr	r3, [r5, #8]
     b72:	ldr	r2, [r4, #0]
     b74:	str	r2, [sp, #8]
     b76:	ldrb	r2, [r5, r3]
	return ret;
     b78:	ldr	r1, [sp, #8]
      blinking = true;
     b7a:	strb.w	r8, [r6, #16]
      blinkingCounter = times;
     b7e:	str	r7, [r6, #20]
      lastBlink = millis();  
     b80:	str	r1, [r6, #8]
     b82:	cmp	r2, #0
     b84:	bne.w	1038 <loop+0xba4>
          playStep(m_currentStep);
        }

        m_currentStep++;
     b88:	adds	r3, #1

        if (m_currentStep > 3) {
     b8a:	cmp	r3, #3
          m_currentStep = 0;
     b8c:	it	gt
     b8e:	movgt	r3, #0
     b90:	str	r3, [r5, #8]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[5]->toggle();
     b92:	ldr	r3, [r5, #108]	; 0x6c
     b94:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     b98:	clz	r1, r1
     b9c:	lsrs	r1, r1, #5
     b9e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ba0:	uxtb	r0, r0
     ba2:	bl	1f44 <digitalWrite>
     ba6:	b.n	4a8 <loop+0x14>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     ba8:	sub.w	r1, r0, #400	; 0x190
     bac:	cmp.w	r1, #400	; 0x190
     bb0:	bcc.n	c3a <loop+0x7a6>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     bb2:	sub.w	r3, r0, #800	; 0x320
     bb6:	cmp	r3, #223	; 0xdf
     bb8:	bhi.w	714 <loop+0x280>
        max_ppqn = 12;
     bbc:	movs	r3, #12
     bbe:	str	r3, [r2, #32]
     bc0:	b.n	714 <loop+0x280>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     bc2:	sub.w	r1, r0, #400	; 0x190
     bc6:	cmp.w	r1, #400	; 0x190
     bca:	bcc.n	c2c <loop+0x798>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     bcc:	sub.w	r3, r0, #800	; 0x320
     bd0:	cmp	r3, #223	; 0xdf
     bd2:	bhi.w	6d4 <loop+0x240>
        max_ppqn = 12;
     bd6:	movs	r3, #12
     bd8:	str	r3, [r2, #32]
     bda:	b.n	6d4 <loop+0x240>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     bdc:	sub.w	r1, r0, #400	; 0x190
     be0:	cmp.w	r1, #400	; 0x190
     be4:	bcc.n	c1e <loop+0x78a>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     be6:	sub.w	r3, r0, #800	; 0x320
     bea:	cmp	r3, #223	; 0xdf
     bec:	bhi.w	6f4 <loop+0x260>
        max_ppqn = 12;
     bf0:	movs	r3, #12
     bf2:	str	r3, [r2, #32]
     bf4:	b.n	6f4 <loop+0x260>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     bf6:	sub.w	r1, r0, #400	; 0x190
     bfa:	cmp.w	r1, #400	; 0x190
     bfe:	bcc.n	c10 <loop+0x77c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     c00:	sub.w	r3, r0, #800	; 0x320
     c04:	cmp	r3, #223	; 0xdf
     c06:	bhi.w	6b0 <loop+0x21c>
        max_ppqn = 12;
     c0a:	movs	r3, #12
     c0c:	str	r3, [r2, #32]
     c0e:	b.n	6b0 <loop+0x21c>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
     c10:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c12:	movs	r5, #8

        if (ppqn >= 8) {
     c14:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c16:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     c18:	ble.w	6b0 <loop+0x21c>
     c1c:	b.n	acc <loop+0x638>
     c1e:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c20:	movs	r5, #8

        if (ppqn >= 8) {
     c22:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c24:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     c26:	ble.w	6f4 <loop+0x260>
     c2a:	b.n	aaa <loop+0x616>
     c2c:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c2e:	movs	r5, #8

        if (ppqn >= 8) {
     c30:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c32:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     c34:	ble.w	6d4 <loop+0x240>
     c38:	b.n	aec <loop+0x658>
     c3a:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c3c:	movs	r5, #8

        if (ppqn >= 8) {
     c3e:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c40:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     c42:	ble.w	714 <loop+0x280>
     c46:	b.n	a88 <loop+0x5f4>
      } else if (currentMode == VELOCITY) {
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
        m_sequence.controlLength(m_value, m_id);
     c48:	ldr	r5, [r4, #16]
     c4a:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     c4c:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     c4e:	movw	r6, #1022	; 0x3fe
     c52:	rsb	r3, r2, #1
     c56:	cmp	r3, r6
     c58:	bgt.w	ff6 <loop+0xb62>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     c5c:	rsb	r3, r2, #2
     c60:	mul.w	r3, r0, r3
     c64:	cmp	r3, #0
     c66:	it	lt
     c68:	addwlt	r3, r3, #1023	; 0x3ff
     c6c:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     c70:	add.w	r3, r1, #18
     c74:	str.w	r2, [r5, r3, lsl #2]
     c78:	b.n	6f4 <loop+0x260>
     c7a:	ldr	r5, [r4, #16]
     c7c:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     c7e:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     c80:	movw	r6, #1022	; 0x3fe
     c84:	rsb	r3, r2, #1
     c88:	cmp	r3, r6
     c8a:	bgt.w	fe0 <loop+0xb4c>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     c8e:	rsb	r3, r2, #2
     c92:	mul.w	r3, r0, r3
     c96:	cmp	r3, #0
     c98:	it	lt
     c9a:	addwlt	r3, r3, #1023	; 0x3ff
     c9e:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     ca2:	add.w	r3, r1, #18
     ca6:	str.w	r2, [r5, r3, lsl #2]
     caa:	b.n	6d4 <loop+0x240>
     cac:	ldr	r5, [r4, #16]
     cae:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     cb0:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     cb2:	movw	r6, #1022	; 0x3fe
     cb6:	rsb	r3, r2, #1
     cba:	cmp	r3, r6
     cbc:	bgt.w	100c <loop+0xb78>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     cc0:	rsb	r3, r2, #2
     cc4:	mul.w	r3, r0, r3
     cc8:	cmp	r3, #0
     cca:	it	lt
     ccc:	addwlt	r3, r3, #1023	; 0x3ff
     cd0:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     cd4:	add.w	r3, r1, #18
     cd8:	str.w	r2, [r5, r3, lsl #2]
     cdc:	b.n	6b0 <loop+0x21c>
     cde:	ldr	r5, [r4, #16]
     ce0:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     ce2:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     ce4:	movw	r6, #1022	; 0x3fe
     ce8:	rsb	r3, r2, #1
     cec:	cmp	r3, r6
     cee:	bgt.w	1022 <loop+0xb8e>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     cf2:	rsb	r3, r2, #2
     cf6:	mul.w	r3, r0, r3
     cfa:	cmp	r3, #0
     cfc:	it	lt
     cfe:	addwlt	r3, r3, #1023	; 0x3ff
     d02:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     d06:	add.w	r3, r1, #18
     d0a:	str.w	r2, [r5, r3, lsl #2]
     d0e:	b.n	714 <loop+0x280>
      } 
    };

    void toggleGlobalMode() {
      m_led.blink();
     d10:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     d14:	ldrb.w	sl, [r9]
     d18:	mov	r0, sl
     d1a:	bl	1f50 <digitalRead>
     d1e:	clz	r1, r0
     d22:	lsrs	r1, r1, #5
     d24:	mov	r0, sl
     d26:	bl	1f44 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     d2a:	ldr	r3, [pc, #260]	; (e30 <loop+0x99c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d2c:	ldr.w	r2, [r8]
     d30:	str	r2, [sp, #132]	; 0x84
     d32:	ldrb.w	sl, [r3]
	return ret;
     d36:	ldr	r2, [sp, #132]	; 0x84
      blinking = true;
      blinkingCounter = times;
     d38:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d3c:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     d40:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d44:	strb.w	fp, [r9, #16]
     d48:	cmp.w	sl, #0
     d4c:	beq.w	1078 <loop+0xbe4>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     d50:	cmp.w	sl, #1
     d54:	beq.w	1370 <loop+0xedc>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     d58:	cmp.w	sl, #2
     d5c:	beq.w	14d8 <loop+0x1044>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     d60:	cmp.w	sl, #3
     d64:	beq.w	1226 <loop+0xd92>
     d68:	ldr	r2, [r7, #12]
     d6a:	b.n	5f0 <loop+0x15c>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      m_led.blink();
     d6c:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     d70:	ldrb.w	sl, [r9]
     d74:	mov	r0, sl
     d76:	bl	1f50 <digitalRead>
     d7a:	clz	r1, r0
     d7e:	lsrs	r1, r1, #5
     d80:	mov	r0, sl
     d82:	bl	1f44 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     d86:	ldr	r3, [pc, #168]	; (e30 <loop+0x99c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d88:	ldr.w	r2, [r8]
     d8c:	str	r2, [sp, #112]	; 0x70
     d8e:	ldrb.w	sl, [r3]
	return ret;
     d92:	ldr	r2, [sp, #112]	; 0x70
      blinking = true;
      blinkingCounter = times;
     d94:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d98:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     d9c:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     da0:	strb.w	fp, [r9, #16]
     da4:	cmp.w	sl, #0
     da8:	beq.w	1144 <loop+0xcb0>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     dac:	cmp.w	sl, #1
     db0:	beq.w	143c <loop+0xfa8>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     db4:	cmp.w	sl, #2
     db8:	beq.w	15b0 <loop+0x111c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     dbc:	cmp.w	sl, #3
     dc0:	beq.w	132e <loop+0xe9a>
     dc4:	ldr	r2, [r7, #12]
     dc6:	b.w	5ae <loop+0x11a>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      m_led.blink();
     dca:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     dce:	ldrb.w	sl, [r9]
     dd2:	mov	r0, sl
     dd4:	bl	1f50 <digitalRead>
     dd8:	clz	r1, r0
     ddc:	lsrs	r1, r1, #5
     dde:	mov	r0, sl
     de0:	bl	1f44 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     de4:	ldr	r3, [pc, #72]	; (e30 <loop+0x99c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     de6:	ldr.w	r2, [r8]
     dea:	str	r2, [sp, #92]	; 0x5c
     dec:	ldrb.w	sl, [r3]
	return ret;
     df0:	ldr	r2, [sp, #92]	; 0x5c
      blinking = true;
      blinkingCounter = times;
     df2:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     df6:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     dfa:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     dfe:	strb.w	fp, [r9, #16]
     e02:	cmp.w	sl, #0
     e06:	beq.w	119c <loop+0xd08>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     e0a:	cmp.w	sl, #1
     e0e:	beq.w	1494 <loop+0x1000>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     e12:	cmp.w	sl, #2
     e16:	beq.w	1520 <loop+0x108c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     e1a:	cmp.w	sl, #3
     e1e:	beq.w	12aa <loop+0xe16>
     e22:	ldr	r2, [r7, #12]
     e24:	b.w	56c <loop+0xd8>
     e28:	.word	0x1fff1720
     e2c:	.word	0x1fff1810
     e30:	.word	0x1fff165c
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      m_led.blink();
     e34:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e38:	ldrb.w	sl, [r9]
     e3c:	mov	r0, sl
     e3e:	bl	1f50 <digitalRead>
     e42:	clz	r1, r0
     e46:	lsrs	r1, r1, #5
     e48:	mov	r0, sl
     e4a:	bl	1f44 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     e4e:	ldr	r3, [pc, #824]	; (1188 <loop+0xcf4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e50:	ldr.w	r2, [r8]
     e54:	str	r2, [sp, #72]	; 0x48
     e56:	ldrb.w	sl, [r3]
	return ret;
     e5a:	ldr	r2, [sp, #72]	; 0x48
      blinking = true;
      blinkingCounter = times;
     e5c:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e60:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     e64:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e68:	strb.w	fp, [r9, #16]
     e6c:	cmp.w	sl, #0
     e70:	beq.w	1100 <loop+0xc6c>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     e74:	cmp.w	sl, #1
     e78:	beq.w	13f8 <loop+0xf64>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     e7c:	cmp.w	sl, #2
     e80:	beq.w	15f8 <loop+0x1164>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     e84:	cmp.w	sl, #3
     e88:	beq.w	1268 <loop+0xdd4>
     e8c:	ldr	r2, [r7, #12]
     e8e:	b.w	52a <loop+0x96>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      m_led.blink();
     e92:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e96:	ldrb.w	sl, [r9]
     e9a:	mov	r0, sl
     e9c:	bl	1f50 <digitalRead>
     ea0:	clz	r1, r0
     ea4:	lsrs	r1, r1, #5
     ea6:	mov	r0, sl
     ea8:	bl	1f44 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     eac:	ldr	r3, [pc, #728]	; (1188 <loop+0xcf4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eae:	ldr.w	r2, [r8]
     eb2:	str	r2, [sp, #52]	; 0x34
     eb4:	ldrb.w	sl, [r3]
	return ret;
     eb8:	ldr	r2, [sp, #52]	; 0x34
      blinking = true;
      blinkingCounter = times;
     eba:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ebe:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     ec2:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ec6:	strb.w	fp, [r9, #16]
     eca:	cmp.w	sl, #0
     ece:	beq.w	10bc <loop+0xc28>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     ed2:	cmp.w	sl, #1
     ed6:	beq.w	13b4 <loop+0xf20>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     eda:	cmp.w	sl, #2
     ede:	beq.w	1568 <loop+0x10d4>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     ee2:	cmp.w	sl, #3
     ee6:	beq.w	12ec <loop+0xe58>
     eea:	ldr	r2, [r7, #12]
     eec:	b.w	4e8 <loop+0x54>
      notes[id] = newValue;
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
     ef0:	ldr	r3, [r4, #12]
     ef2:	ldr	r1, [r4, #16]
     ef4:	add.w	r2, r3, #14
     ef8:	subs.w	r3, r0, r0, lsl #6
     efc:	it	mi
     efe:	addwmi	r3, r3, #1023	; 0x3ff
     f02:	asrs	r3, r3, #10
     f04:	adds	r3, #127	; 0x7f
     f06:	str.w	r3, [r1, r2, lsl #2]
     f0a:	b.w	6f4 <loop+0x260>
     f0e:	ldr	r3, [r4, #12]
     f10:	ldr	r1, [r4, #16]
     f12:	add.w	r2, r3, #14
     f16:	subs.w	r3, r0, r0, lsl #6
     f1a:	it	mi
     f1c:	addwmi	r3, r3, #1023	; 0x3ff
     f20:	asrs	r3, r3, #10
     f22:	adds	r3, #127	; 0x7f
     f24:	str.w	r3, [r1, r2, lsl #2]
     f28:	b.w	6d4 <loop+0x240>
     f2c:	ldr	r3, [r4, #12]
     f2e:	ldr	r1, [r4, #16]
     f30:	add.w	r2, r3, #14
     f34:	subs.w	r3, r0, r0, lsl #6
     f38:	it	mi
     f3a:	addwmi	r3, r3, #1023	; 0x3ff
     f3e:	asrs	r3, r3, #10
     f40:	adds	r3, #127	; 0x7f
     f42:	str.w	r3, [r1, r2, lsl #2]
     f46:	b.w	6b0 <loop+0x21c>
     f4a:	ldr	r3, [r4, #12]
     f4c:	ldr	r1, [r4, #16]
     f4e:	add.w	r2, r3, #14
     f52:	subs.w	r3, r0, r0, lsl #6
     f56:	it	mi
     f58:	addwmi	r3, r3, #1023	; 0x3ff
     f5c:	asrs	r3, r3, #10
     f5e:	adds	r3, #127	; 0x7f
     f60:	str.w	r3, [r1, r2, lsl #2]
     f64:	b.w	714 <loop+0x280>
      notesLengths[id] = newValue;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      notes[id] = newValue;
     f68:	sub.w	r3, r0, r0, lsl #2
     f6c:	ldr	r2, [r4, #12]
     f6e:	ldr	r1, [r4, #16]
     f70:	lsls	r3, r3, #2
     f72:	it	mi
     f74:	addwmi	r3, r3, #1023	; 0x3ff
     f78:	adds	r2, #10
     f7a:	asrs	r3, r3, #10
     f7c:	adds	r3, #51	; 0x33
     f7e:	str.w	r3, [r1, r2, lsl #2]
     f82:	b.w	714 <loop+0x280>
     f86:	sub.w	r3, r0, r0, lsl #2
     f8a:	ldr	r2, [r4, #12]
     f8c:	ldr	r1, [r4, #16]
     f8e:	lsls	r3, r3, #2
     f90:	it	mi
     f92:	addwmi	r3, r3, #1023	; 0x3ff
     f96:	adds	r2, #10
     f98:	asrs	r3, r3, #10
     f9a:	adds	r3, #51	; 0x33
     f9c:	str.w	r3, [r1, r2, lsl #2]
     fa0:	b.w	6d4 <loop+0x240>
     fa4:	sub.w	r3, r0, r0, lsl #2
     fa8:	ldr	r2, [r4, #12]
     faa:	ldr	r1, [r4, #16]
     fac:	lsls	r3, r3, #2
     fae:	it	mi
     fb0:	addwmi	r3, r3, #1023	; 0x3ff
     fb4:	adds	r2, #10
     fb6:	asrs	r3, r3, #10
     fb8:	adds	r3, #51	; 0x33
     fba:	str.w	r3, [r1, r2, lsl #2]
     fbe:	b.w	6f4 <loop+0x260>
     fc2:	sub.w	r3, r0, r0, lsl #2
     fc6:	ldr	r2, [r4, #12]
     fc8:	ldr	r1, [r4, #16]
     fca:	lsls	r3, r3, #2
     fcc:	it	mi
     fce:	addwmi	r3, r3, #1023	; 0x3ff
     fd2:	adds	r2, #10
     fd4:	asrs	r3, r3, #10
     fd6:	adds	r3, #51	; 0x33
     fd8:	str.w	r3, [r1, r2, lsl #2]
     fdc:	b.w	6b0 <loop+0x21c>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     fe0:	ldr	r6, [pc, #424]	; (118c <loop+0xcf8>)
     fe2:	mul.w	r3, r3, r0
     fe6:	smull	r7, r6, r6, r3
     fea:	add	r6, r3
     fec:	asrs	r3, r3, #31
     fee:	rsb	r3, r3, r6, asr #9
     ff2:	add	r2, r3
     ff4:	b.n	ca2 <loop+0x80e>
     ff6:	ldr	r6, [pc, #404]	; (118c <loop+0xcf8>)
     ff8:	mul.w	r3, r3, r0
     ffc:	smull	r7, r6, r6, r3
    1000:	add	r6, r3
    1002:	asrs	r3, r3, #31
    1004:	rsb	r3, r3, r6, asr #9
    1008:	add	r2, r3
    100a:	b.n	c70 <loop+0x7dc>
    100c:	ldr	r6, [pc, #380]	; (118c <loop+0xcf8>)
    100e:	mul.w	r3, r3, r0
    1012:	smull	r7, r6, r6, r3
    1016:	add	r6, r3
    1018:	asrs	r3, r3, #31
    101a:	rsb	r3, r3, r6, asr #9
    101e:	add	r2, r3
    1020:	b.n	cd4 <loop+0x840>
    1022:	ldr	r6, [pc, #360]	; (118c <loop+0xcf8>)
    1024:	mul.w	r3, r3, r0
    1028:	smull	r7, r6, r6, r3
    102c:	add	r6, r3
    102e:	asrs	r3, r3, #31
    1030:	rsb	r3, r3, r6, asr #9
    1034:	add	r2, r3
    1036:	b.n	d06 <loop+0x872>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1038:	add.w	r6, r3, #10
    103c:	adds	r3, #14
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    103e:	ldr.w	r2, [r5, r6, lsl #2]
    1042:	ldr.w	r3, [r5, r3, lsl #2]
    1046:	lsls	r2, r2, #16
    1048:	lsls	r0, r3, #24
    104a:	and.w	r3, r0, #2130706432	; 0x7f000000
    104e:	and.w	r0, r2, #8323072	; 0x7f0000
    1052:	orrs	r0, r3
    1054:	orr.w	r0, r0, #40704	; 0x9f00
    1058:	orr.w	r0, r0, #9
    105c:	bl	21d0 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1060:	bl	226c <usb_midi_flush_output>
      activeNote = notes[step];
    1064:	ldr.w	r2, [r5, r6, lsl #2]
    1068:	ldr	r3, [r5, #8]
    106a:	str	r2, [r5, #36]	; 0x24
    106c:	b.n	b88 <loop+0x6f4>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    106e:	ldr	r0, [pc, #288]	; (1190 <loop+0xcfc>)
    1070:	bl	21d0 <usb_midi_write_packed>
    1074:	ldr	r3, [r5, #28]
    1076:	b.n	b28 <loop+0x694>
    1078:	movs	r1, #5
    107a:	ldr	r0, [pc, #280]	; (1194 <loop+0xd00>)

    void toggleGlobalMode() {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    107c:	strb.w	fp, [r3]
    1080:	bl	1934 <usb_serial_write>
    1084:	ldr	r0, [pc, #272]	; (1198 <loop+0xd04>)
    1086:	bl	34a8 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    108a:	ldr	r3, [r7, #28]
    108c:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    108e:	ldrb.w	r9, [r6]
    1092:	mov	r0, r9
    1094:	bl	1f50 <digitalRead>
    1098:	clz	r1, r0
    109c:	lsrs	r1, r1, #5
    109e:	mov	r0, r9
    10a0:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10a4:	ldr.w	r3, [r8]
    10a8:	str	r3, [sp, #136]	; 0x88
	return ret;
    10aa:	ldr	r3, [sp, #136]	; 0x88
    10ac:	ldr	r2, [r7, #12]
      blinking = true;
    10ae:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    10b2:	movs	r1, #3
    10b4:	str	r1, [r6, #20]
      lastBlink = millis();  
    10b6:	str	r3, [r6, #8]
    10b8:	b.w	5f0 <loop+0x15c>
    10bc:	movs	r1, #5
    10be:	ldr	r0, [pc, #212]	; (1194 <loop+0xd00>)

    void toggleGlobalMode() {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    10c0:	strb.w	fp, [r3]
    10c4:	bl	1934 <usb_serial_write>
    10c8:	ldr	r0, [pc, #204]	; (1198 <loop+0xd04>)
    10ca:	bl	34a8 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    10ce:	ldr	r3, [r7, #28]
    10d0:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10d2:	ldrb.w	r9, [r6]
    10d6:	mov	r0, r9
    10d8:	bl	1f50 <digitalRead>
    10dc:	clz	r1, r0
    10e0:	lsrs	r1, r1, #5
    10e2:	mov	r0, r9
    10e4:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10e8:	ldr.w	r3, [r8]
    10ec:	str	r3, [sp, #56]	; 0x38
	return ret;
    10ee:	ldr	r3, [sp, #56]	; 0x38
    10f0:	ldr	r2, [r7, #12]
      blinking = true;
    10f2:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    10f6:	movs	r1, #3
    10f8:	str	r1, [r6, #20]
      lastBlink = millis();  
    10fa:	str	r3, [r6, #8]
    10fc:	b.w	4e8 <loop+0x54>
    1100:	movs	r1, #5
    1102:	ldr	r0, [pc, #144]	; (1194 <loop+0xd00>)

    void toggleGlobalMode() {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1104:	strb.w	fp, [r3]
    1108:	bl	1934 <usb_serial_write>
    110c:	ldr	r0, [pc, #136]	; (1198 <loop+0xd04>)
    110e:	bl	34a8 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1112:	ldr	r3, [r7, #28]
    1114:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1116:	ldrb.w	r9, [r5]
    111a:	mov	r0, r9
    111c:	bl	1f50 <digitalRead>
    1120:	clz	r1, r0
    1124:	lsrs	r1, r1, #5
    1126:	mov	r0, r9
    1128:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    112c:	ldr.w	r3, [r8]
    1130:	str	r3, [sp, #76]	; 0x4c
	return ret;
    1132:	ldr	r3, [sp, #76]	; 0x4c
    1134:	ldr	r2, [r7, #12]
      blinking = true;
    1136:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    113a:	movs	r1, #3
    113c:	str	r1, [r5, #20]
      lastBlink = millis();  
    113e:	str	r3, [r5, #8]
    1140:	b.w	52a <loop+0x96>
    1144:	movs	r1, #5
    1146:	ldr	r0, [pc, #76]	; (1194 <loop+0xd00>)

    void toggleGlobalMode() {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1148:	strb.w	fp, [r3]
    114c:	bl	1934 <usb_serial_write>
    1150:	ldr	r0, [pc, #68]	; (1198 <loop+0xd04>)
    1152:	bl	34a8 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1156:	ldr	r3, [r7, #28]
    1158:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    115a:	ldrb.w	r9, [r5]
    115e:	mov	r0, r9
    1160:	bl	1f50 <digitalRead>
    1164:	clz	r1, r0
    1168:	lsrs	r1, r1, #5
    116a:	mov	r0, r9
    116c:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1170:	ldr.w	r3, [r8]
    1174:	str	r3, [sp, #116]	; 0x74
	return ret;
    1176:	ldr	r3, [sp, #116]	; 0x74
    1178:	ldr	r2, [r7, #12]
      blinking = true;
    117a:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    117e:	movs	r1, #3
    1180:	str	r1, [r5, #20]
      lastBlink = millis();  
    1182:	str	r3, [r5, #8]
    1184:	b.w	5ae <loop+0x11a>
    1188:	.word	0x1fff165c
    118c:	.word	0x80200803
    1190:	.word	0x7f7bbf0b
    1194:	.word	0x0000489c
    1198:	.word	0x1fff0c60
    119c:	movs	r1, #5
    119e:	ldr	r0, [pc, #736]	; (1480 <loop+0xfec>)

    void toggleGlobalMode() {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    11a0:	strb.w	fp, [r3]
    11a4:	bl	1934 <usb_serial_write>
    11a8:	ldr	r0, [pc, #728]	; (1484 <loop+0xff0>)
    11aa:	bl	34a8 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    11ae:	ldr	r3, [r7, #28]
    11b0:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11b2:	ldrb.w	r9, [r6]
    11b6:	mov	r0, r9
    11b8:	bl	1f50 <digitalRead>
    11bc:	clz	r1, r0
    11c0:	lsrs	r1, r1, #5
    11c2:	mov	r0, r9
    11c4:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11c8:	ldr.w	r3, [r8]
    11cc:	str	r3, [sp, #96]	; 0x60
	return ret;
    11ce:	ldr	r3, [sp, #96]	; 0x60
    11d0:	ldr	r2, [r7, #12]
      blinking = true;
    11d2:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    11d6:	movs	r1, #3
    11d8:	str	r1, [r6, #20]
      lastBlink = millis();  
    11da:	str	r3, [r6, #8]
    11dc:	b.w	56c <loop+0xd8>
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
    11e0:	ldr	r3, [r6, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11e2:	ldr	r4, [pc, #676]	; (1488 <loop+0xff4>)
    11e4:	adds	r3, #22
    11e6:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11ea:	ldrb.w	r8, [r7]
    11ee:	mov	r0, r8
    11f0:	bl	1f50 <digitalRead>
    11f4:	clz	r1, r0
    11f8:	lsrs	r1, r1, #5
    11fa:	mov	r0, r8
    11fc:	bl	1f44 <digitalWrite>
    1200:	ldr	r2, [r4, #0]

        if (m_steps[m_currentStep].m_state) {
    1202:	ldr	r3, [r6, #8]
    1204:	str	r2, [sp, #4]
	return ret;
    1206:	ldr	r1, [sp, #4]
    1208:	ldrb	r2, [r6, r3]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    120a:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    120c:	movs	r0, #1
      blinkingCounter = times;
    120e:	movs	r1, #0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1210:	strb	r0, [r7, #16]
      blinkingCounter = times;
    1212:	str	r1, [r7, #20]
    1214:	cmp	r2, #0
    1216:	bne.w	1640 <loop+0x11ac>
          playStep(m_currentStep);
        }

        m_currentStep++;
    121a:	adds	r3, #1

        if (m_currentStep > 3) {
    121c:	cmp	r3, #3
          m_currentStep = 0;
    121e:	it	gt
    1220:	movgt	r3, #0
    1222:	str	r3, [r5, #8]
    1224:	b.n	b3c <loop+0x6a8>
    1226:	movs	r1, #6
    1228:	ldr	r0, [pc, #608]	; (148c <loop+0xff8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    122a:	strb	r6, [r3, #0]
    122c:	bl	1934 <usb_serial_write>
    1230:	ldr	r0, [pc, #592]	; (1484 <loop+0xff0>)
    1232:	bl	34a8 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    1236:	ldr	r3, [r7, #28]
    1238:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    123a:	ldrb.w	r9, [r6]
    123e:	mov	r0, r9
    1240:	bl	1f50 <digitalRead>
    1244:	clz	r1, r0
    1248:	lsrs	r1, r1, #5
    124a:	mov	r0, r9
    124c:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1250:	ldr.w	r3, [r8]
    1254:	str	r3, [sp, #148]	; 0x94
	return ret;
    1256:	ldr	r3, [sp, #148]	; 0x94
    1258:	ldr	r2, [r7, #12]
      blinking = true;
    125a:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    125e:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1262:	str	r3, [r6, #8]
    1264:	b.w	5f0 <loop+0x15c>
    1268:	movs	r1, #6
    126a:	ldr	r0, [pc, #544]	; (148c <loop+0xff8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    126c:	strb	r5, [r3, #0]
    126e:	bl	1934 <usb_serial_write>
    1272:	ldr	r0, [pc, #528]	; (1484 <loop+0xff0>)
    1274:	bl	34a8 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    1278:	ldr	r3, [r7, #28]
    127a:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    127c:	ldrb.w	r9, [r5]
    1280:	mov	r0, r9
    1282:	bl	1f50 <digitalRead>
    1286:	clz	r1, r0
    128a:	lsrs	r1, r1, #5
    128c:	mov	r0, r9
    128e:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1292:	ldr.w	r3, [r8]
    1296:	str	r3, [sp, #88]	; 0x58
	return ret;
    1298:	ldr	r3, [sp, #88]	; 0x58
    129a:	ldr	r2, [r7, #12]
      blinking = true;
    129c:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    12a0:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    12a4:	str	r3, [r5, #8]
    12a6:	b.w	52a <loop+0x96>
    12aa:	movs	r1, #6
    12ac:	ldr	r0, [pc, #476]	; (148c <loop+0xff8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    12ae:	strb	r6, [r3, #0]
    12b0:	bl	1934 <usb_serial_write>
    12b4:	ldr	r0, [pc, #460]	; (1484 <loop+0xff0>)
    12b6:	bl	34a8 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    12ba:	ldr	r3, [r7, #28]
    12bc:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12be:	ldrb.w	r9, [r6]
    12c2:	mov	r0, r9
    12c4:	bl	1f50 <digitalRead>
    12c8:	clz	r1, r0
    12cc:	lsrs	r1, r1, #5
    12ce:	mov	r0, r9
    12d0:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12d4:	ldr.w	r3, [r8]
    12d8:	str	r3, [sp, #108]	; 0x6c
	return ret;
    12da:	ldr	r3, [sp, #108]	; 0x6c
    12dc:	ldr	r2, [r7, #12]
      blinking = true;
    12de:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    12e2:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    12e6:	str	r3, [r6, #8]
    12e8:	b.w	56c <loop+0xd8>
    12ec:	movs	r1, #6
    12ee:	ldr	r0, [pc, #412]	; (148c <loop+0xff8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    12f0:	strb	r6, [r3, #0]
    12f2:	bl	1934 <usb_serial_write>
    12f6:	ldr	r0, [pc, #396]	; (1484 <loop+0xff0>)
    12f8:	bl	34a8 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    12fc:	ldr	r3, [r7, #28]
    12fe:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1300:	ldrb.w	r9, [r6]
    1304:	mov	r0, r9
    1306:	bl	1f50 <digitalRead>
    130a:	clz	r1, r0
    130e:	lsrs	r1, r1, #5
    1310:	mov	r0, r9
    1312:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1316:	ldr.w	r3, [r8]
    131a:	str	r3, [sp, #68]	; 0x44
	return ret;
    131c:	ldr	r3, [sp, #68]	; 0x44
    131e:	ldr	r2, [r7, #12]
      blinking = true;
    1320:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    1324:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1328:	str	r3, [r6, #8]
    132a:	b.w	4e8 <loop+0x54>
    132e:	movs	r1, #6
    1330:	ldr	r0, [pc, #344]	; (148c <loop+0xff8>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1332:	strb	r5, [r3, #0]
    1334:	bl	1934 <usb_serial_write>
    1338:	ldr	r0, [pc, #328]	; (1484 <loop+0xff0>)
    133a:	bl	34a8 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    133e:	ldr	r3, [r7, #28]
    1340:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1342:	ldrb.w	r9, [r5]
    1346:	mov	r0, r9
    1348:	bl	1f50 <digitalRead>
    134c:	clz	r1, r0
    1350:	lsrs	r1, r1, #5
    1352:	mov	r0, r9
    1354:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1358:	ldr.w	r3, [r8]
    135c:	str	r3, [sp, #128]	; 0x80
	return ret;
    135e:	ldr	r3, [sp, #128]	; 0x80
    1360:	ldr	r2, [r7, #12]
      blinking = true;
    1362:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    1366:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    136a:	str	r3, [r5, #8]
    136c:	b.w	5ae <loop+0x11a>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1370:	movs	r2, #2
    1372:	movs	r1, #8
    1374:	ldr	r0, [pc, #280]	; (1490 <loop+0xffc>)
    1376:	strb	r2, [r3, #0]
    1378:	bl	1934 <usb_serial_write>
    137c:	ldr	r0, [pc, #260]	; (1484 <loop+0xff0>)
    137e:	bl	34a8 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1382:	ldr	r3, [r7, #28]
    1384:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1386:	ldrb.w	r9, [r6]
    138a:	mov	r0, r9
    138c:	bl	1f50 <digitalRead>
    1390:	clz	r1, r0
    1394:	lsrs	r1, r1, #5
    1396:	mov	r0, r9
    1398:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    139c:	ldr.w	r3, [r8]
    13a0:	str	r3, [sp, #140]	; 0x8c
	return ret;
    13a2:	ldr	r3, [sp, #140]	; 0x8c
    13a4:	ldr	r2, [r7, #12]
      blinking = true;
    13a6:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    13aa:	movs	r1, #3
    13ac:	str	r1, [r6, #20]
      lastBlink = millis();  
    13ae:	str	r3, [r6, #8]
    13b0:	b.w	5f0 <loop+0x15c>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    13b4:	movs	r2, #2
    13b6:	movs	r1, #8
    13b8:	ldr	r0, [pc, #212]	; (1490 <loop+0xffc>)
    13ba:	strb	r2, [r3, #0]
    13bc:	bl	1934 <usb_serial_write>
    13c0:	ldr	r0, [pc, #192]	; (1484 <loop+0xff0>)
    13c2:	bl	34a8 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    13c6:	ldr	r3, [r7, #28]
    13c8:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    13ca:	ldrb.w	r9, [r6]
    13ce:	mov	r0, r9
    13d0:	bl	1f50 <digitalRead>
    13d4:	clz	r1, r0
    13d8:	lsrs	r1, r1, #5
    13da:	mov	r0, r9
    13dc:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13e0:	ldr.w	r3, [r8]
    13e4:	str	r3, [sp, #60]	; 0x3c
	return ret;
    13e6:	ldr	r3, [sp, #60]	; 0x3c
    13e8:	ldr	r2, [r7, #12]
      blinking = true;
    13ea:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    13ee:	movs	r1, #3
    13f0:	str	r1, [r6, #20]
      lastBlink = millis();  
    13f2:	str	r3, [r6, #8]
    13f4:	b.w	4e8 <loop+0x54>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    13f8:	movs	r2, #2
    13fa:	movs	r1, #8
    13fc:	ldr	r0, [pc, #144]	; (1490 <loop+0xffc>)
    13fe:	strb	r2, [r3, #0]
    1400:	bl	1934 <usb_serial_write>
    1404:	ldr	r0, [pc, #124]	; (1484 <loop+0xff0>)
    1406:	bl	34a8 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    140a:	ldr	r3, [r7, #28]
    140c:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    140e:	ldrb.w	r9, [r5]
    1412:	mov	r0, r9
    1414:	bl	1f50 <digitalRead>
    1418:	clz	r1, r0
    141c:	lsrs	r1, r1, #5
    141e:	mov	r0, r9
    1420:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1424:	ldr.w	r3, [r8]
    1428:	str	r3, [sp, #80]	; 0x50
	return ret;
    142a:	ldr	r3, [sp, #80]	; 0x50
    142c:	ldr	r2, [r7, #12]
      blinking = true;
    142e:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1432:	movs	r1, #3
    1434:	str	r1, [r5, #20]
      lastBlink = millis();  
    1436:	str	r3, [r5, #8]
    1438:	b.w	52a <loop+0x96>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    143c:	movs	r2, #2
    143e:	movs	r1, #8
    1440:	ldr	r0, [pc, #76]	; (1490 <loop+0xffc>)
    1442:	strb	r2, [r3, #0]
    1444:	bl	1934 <usb_serial_write>
    1448:	ldr	r0, [pc, #56]	; (1484 <loop+0xff0>)
    144a:	bl	34a8 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    144e:	ldr	r3, [r7, #28]
    1450:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1452:	ldrb.w	r9, [r5]
    1456:	mov	r0, r9
    1458:	bl	1f50 <digitalRead>
    145c:	clz	r1, r0
    1460:	lsrs	r1, r1, #5
    1462:	mov	r0, r9
    1464:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1468:	ldr.w	r3, [r8]
    146c:	str	r3, [sp, #120]	; 0x78
	return ret;
    146e:	ldr	r3, [sp, #120]	; 0x78
    1470:	ldr	r2, [r7, #12]
      blinking = true;
    1472:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1476:	movs	r1, #3
    1478:	str	r1, [r5, #20]
      lastBlink = millis();  
    147a:	str	r3, [r5, #8]
    147c:	b.w	5ae <loop+0x11a>
    1480:	.word	0x0000489c
    1484:	.word	0x1fff0c60
    1488:	.word	0x1fff1810
    148c:	.word	0x000048bc
    1490:	.word	0x000048a4
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1494:	movs	r2, #2
    1496:	movs	r1, #8
    1498:	ldr	r0, [pc, #476]	; (1678 <loop+0x11e4>)
    149a:	strb	r2, [r3, #0]
    149c:	bl	1934 <usb_serial_write>
    14a0:	ldr	r0, [pc, #472]	; (167c <loop+0x11e8>)
    14a2:	bl	34a8 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    14a6:	ldr	r3, [r7, #28]
    14a8:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14aa:	ldrb.w	r9, [r6]
    14ae:	mov	r0, r9
    14b0:	bl	1f50 <digitalRead>
    14b4:	clz	r1, r0
    14b8:	lsrs	r1, r1, #5
    14ba:	mov	r0, r9
    14bc:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14c0:	ldr.w	r3, [r8]
    14c4:	str	r3, [sp, #100]	; 0x64
	return ret;
    14c6:	ldr	r3, [sp, #100]	; 0x64
    14c8:	ldr	r2, [r7, #12]
      blinking = true;
    14ca:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    14ce:	movs	r1, #3
    14d0:	str	r1, [r6, #20]
      lastBlink = millis();  
    14d2:	str	r3, [r6, #8]
    14d4:	b.w	56c <loop+0xd8>
    14d8:	movs	r1, #10
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    14da:	mov.w	r9, #3
    14de:	ldr	r0, [pc, #416]	; (1680 <loop+0x11ec>)
    14e0:	strb.w	r9, [r3]
    14e4:	bl	1934 <usb_serial_write>
    14e8:	ldr	r0, [pc, #400]	; (167c <loop+0x11e8>)
    14ea:	bl	34a8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    14ee:	ldr	r3, [r7, #28]
    14f0:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14f2:	ldrb.w	sl, [r6]
    14f6:	mov	r0, sl
    14f8:	bl	1f50 <digitalRead>
    14fc:	clz	r1, r0
    1500:	lsrs	r1, r1, #5
    1502:	mov	r0, sl
    1504:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1508:	ldr.w	r3, [r8]
    150c:	str	r3, [sp, #144]	; 0x90
	return ret;
    150e:	ldr	r3, [sp, #144]	; 0x90
    1510:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1512:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1516:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    151a:	str	r3, [r6, #8]
    151c:	b.w	5f0 <loop+0x15c>
    1520:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1522:	mov.w	r9, #3
    1526:	ldr	r0, [pc, #344]	; (1680 <loop+0x11ec>)
    1528:	strb.w	r9, [r3]
    152c:	bl	1934 <usb_serial_write>
    1530:	ldr	r0, [pc, #328]	; (167c <loop+0x11e8>)
    1532:	bl	34a8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1536:	ldr	r3, [r7, #28]
    1538:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    153a:	ldrb.w	sl, [r6]
    153e:	mov	r0, sl
    1540:	bl	1f50 <digitalRead>
    1544:	clz	r1, r0
    1548:	lsrs	r1, r1, #5
    154a:	mov	r0, sl
    154c:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1550:	ldr.w	r3, [r8]
    1554:	str	r3, [sp, #104]	; 0x68
	return ret;
    1556:	ldr	r3, [sp, #104]	; 0x68
    1558:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    155a:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    155e:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1562:	str	r3, [r6, #8]
    1564:	b.w	56c <loop+0xd8>
    1568:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    156a:	mov.w	r9, #3
    156e:	ldr	r0, [pc, #272]	; (1680 <loop+0x11ec>)
    1570:	strb.w	r9, [r3]
    1574:	bl	1934 <usb_serial_write>
    1578:	ldr	r0, [pc, #256]	; (167c <loop+0x11e8>)
    157a:	bl	34a8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    157e:	ldr	r3, [r7, #28]
    1580:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1582:	ldrb.w	sl, [r6]
    1586:	mov	r0, sl
    1588:	bl	1f50 <digitalRead>
    158c:	clz	r1, r0
    1590:	lsrs	r1, r1, #5
    1592:	mov	r0, sl
    1594:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1598:	ldr.w	r3, [r8]
    159c:	str	r3, [sp, #64]	; 0x40
	return ret;
    159e:	ldr	r3, [sp, #64]	; 0x40
    15a0:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    15a2:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15a6:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    15aa:	str	r3, [r6, #8]
    15ac:	b.w	4e8 <loop+0x54>
    15b0:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    15b2:	mov.w	r9, #3
    15b6:	ldr	r0, [pc, #200]	; (1680 <loop+0x11ec>)
    15b8:	strb.w	r9, [r3]
    15bc:	bl	1934 <usb_serial_write>
    15c0:	ldr	r0, [pc, #184]	; (167c <loop+0x11e8>)
    15c2:	bl	34a8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    15c6:	ldr	r3, [r7, #28]
    15c8:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15ca:	ldrb.w	sl, [r5]
    15ce:	mov	r0, sl
    15d0:	bl	1f50 <digitalRead>
    15d4:	clz	r1, r0
    15d8:	lsrs	r1, r1, #5
    15da:	mov	r0, sl
    15dc:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15e0:	ldr.w	r3, [r8]
    15e4:	str	r3, [sp, #124]	; 0x7c
	return ret;
    15e6:	ldr	r3, [sp, #124]	; 0x7c
    15e8:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    15ea:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15ee:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    15f2:	str	r3, [r5, #8]
    15f4:	b.w	5ae <loop+0x11a>
    15f8:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    15fa:	mov.w	r9, #3
    15fe:	ldr	r0, [pc, #128]	; (1680 <loop+0x11ec>)
    1600:	strb.w	r9, [r3]
    1604:	bl	1934 <usb_serial_write>
    1608:	ldr	r0, [pc, #112]	; (167c <loop+0x11e8>)
    160a:	bl	34a8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    160e:	ldr	r3, [r7, #28]
    1610:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1612:	ldrb.w	sl, [r5]
    1616:	mov	r0, sl
    1618:	bl	1f50 <digitalRead>
    161c:	clz	r1, r0
    1620:	lsrs	r1, r1, #5
    1622:	mov	r0, sl
    1624:	bl	1f44 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1628:	ldr.w	r3, [r8]
    162c:	str	r3, [sp, #84]	; 0x54
	return ret;
    162e:	ldr	r3, [sp, #84]	; 0x54
    1630:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1632:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1636:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    163a:	str	r3, [r5, #8]
    163c:	b.w	52a <loop+0x96>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1640:	add.w	r7, r3, #10
    1644:	adds	r3, #14
    1646:	ldr.w	r2, [r6, r7, lsl #2]
    164a:	ldr.w	r3, [r6, r3, lsl #2]
    164e:	lsls	r0, r2, #16
    1650:	lsls	r3, r3, #24
    1652:	and.w	r3, r3, #2130706432	; 0x7f000000
    1656:	and.w	r0, r0, #8323072	; 0x7f0000
    165a:	orrs	r0, r3
    165c:	orr.w	r0, r0, #40704	; 0x9f00
    1660:	orr.w	r0, r0, #9
    1664:	bl	21d0 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1668:	bl	226c <usb_midi_flush_output>
      activeNote = notes[step];
    166c:	ldr.w	r2, [r6, r7, lsl #2]
    1670:	ldr	r3, [r6, #8]
    1672:	str	r2, [r6, #36]	; 0x24
    1674:	b.n	121a <loop+0xd86>
    1676:	nop
    1678:	.word	0x000048a4
    167c:	.word	0x1fff0c60
    1680:	.word	0x000048b0

00001684 <_GLOBAL__sub_I_currentMode>:
    1684:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
const int step2pin = 4;
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;

Led led1(3, LOW);
    1688:	movs	r2, #0
    168a:	movs	r1, #3
    168c:	ldr	r0, [pc, #396]	; (181c <_GLOBAL__sub_I_currentMode+0x198>)
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
    168e:	ldr	r5, [pc, #400]	; (1820 <_GLOBAL__sub_I_currentMode+0x19c>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1690:	ldr	r4, [pc, #400]	; (1824 <_GLOBAL__sub_I_currentMode+0x1a0>)
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
    1692:	ldr	r6, [pc, #404]	; (1828 <_GLOBAL__sub_I_currentMode+0x1a4>)
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
    1694:	ldr.w	r9, [pc, #460]	; 1864 <_GLOBAL__sub_I_currentMode+0x1e0>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    1698:	ldr	r7, [pc, #400]	; (182c <_GLOBAL__sub_I_currentMode+0x1a8>)
    169a:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    169e:	movs	r2, #0
    16a0:	movs	r1, #5
    16a2:	ldr	r0, [pc, #396]	; (1830 <_GLOBAL__sub_I_currentMode+0x1ac>)
    16a4:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    16a8:	movs	r2, #0
    16aa:	movs	r1, #7
    16ac:	ldr	r0, [pc, #388]	; (1834 <_GLOBAL__sub_I_currentMode+0x1b0>)
    16ae:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    16b2:	movs	r2, #0
    16b4:	movs	r1, #9
    16b6:	ldr	r0, [pc, #384]	; (1838 <_GLOBAL__sub_I_currentMode+0x1b4>)
    16b8:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    16bc:	movs	r2, #0
    16be:	movs	r1, #11
    16c0:	ldr	r0, [pc, #376]	; (183c <_GLOBAL__sub_I_currentMode+0x1b8>)
    16c2:	bl	46c <Led::Led(int, int)>
Led led6(13, LOW);
    16c6:	movs	r2, #0
    16c8:	movs	r1, #13
    16ca:	ldr	r0, [pc, #372]	; (1840 <_GLOBAL__sub_I_currentMode+0x1bc>)
    16cc:	bl	46c <Led::Led(int, int)>
    16d0:	ldmia.w	r5, {r0, r1, r2, r3}
    16d4:	add.w	lr, r5, #16
    16d8:	add.w	ip, r4, #40	; 0x28
    16dc:	stmia.w	ip, {r0, r1, r2, r3}
    16e0:	ldmia.w	lr, {r0, r1, r2, r3}
    16e4:	adds	r5, #32
    16e6:	add.w	lr, r4, #56	; 0x38
    16ea:	stmia.w	lr, {r0, r1, r2, r3}
    16ee:	ldmia.w	r5, {r0, r1, r2, r3}
    16f2:	movs	r5, #120	; 0x78
    16f4:	mov.w	ip, #24
    16f8:	add.w	lr, r4, #72	; 0x48
    16fc:	mov.w	r8, #0
    1700:	str	r5, [r4, #12]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1702:	movs	r5, #0
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
    1704:	str.w	ip, [r4, #32]
    1708:	strd	r8, r9, [r4, #16]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    170c:	strb	r5, [r4, #0]
    170e:	strb	r5, [r4, #1]
    1710:	strb	r5, [r4, #2]
    1712:	strb	r5, [r4, #3]
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
    1714:	str	r5, [r4, #24]
    1716:	str	r5, [r4, #28]
    1718:	str	r5, [r4, #36]	; 0x24
    171a:	stmia.w	lr, {r0, r1, r2, r3}
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    171e:	adds	r0, r6, #4
    1720:	ldmia	r0, {r0, r1, r2}
      m_id = id;
      m_pin = pin;
    1722:	mov.w	r8, #2
    1726:	str	r2, [r4, #100]	; 0x64
      m_leds[4] = leds[4];
    1728:	ldr	r2, [r6, #16]
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
    172a:	ldr	r3, [r6, #0]
      m_leds[1] = leds[1];
    172c:	str	r0, [r4, #92]	; 0x5c
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    172e:	mov.w	r9, #1
      m_leds[2] = leds[2];
    1732:	str	r1, [r4, #96]	; 0x60
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1734:	mov	r0, r8
    1736:	mov	r1, r5
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1738:	str	r2, [r4, #104]	; 0x68
      m_leds[5] = leds[5];
    173a:	ldr	r2, [r6, #20]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    173c:	str	r3, [r7, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    173e:	strb	r5, [r7, #16]
      m_mode = GLOBAL;
    1740:	strb.w	r5, [r7, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1744:	mov.w	sl, #4
      m_state = state;
    1748:	strb	r5, [r4, #4]
      m_currentStep = 0;
    174a:	str	r5, [r4, #8]
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    174c:	str	r2, [r4, #108]	; 0x6c
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
    174e:	str	r3, [r4, #88]	; 0x58
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    1750:	str	r4, [r7, #28]
      m_id = id;
    1752:	str.w	r9, [r7]
      m_pin = pin;
    1756:	str.w	r8, [r7, #32]
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    175a:	bl	1f6c <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    175e:	ldr	r3, [pc, #228]	; (1844 <_GLOBAL__sub_I_currentMode+0x1c0>)
    1760:	ldr	r2, [r6, #4]
    1762:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1764:	mov	r1, r5
    1766:	mov	r0, sl
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1768:	strb	r5, [r3, #16]
      m_mode = GLOBAL;
    176a:	strb.w	r5, [r3, #36]	; 0x24
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    176e:	str	r4, [r3, #28]
      m_id = id;
    1770:	str.w	r8, [r3]
      m_pin = pin;
    1774:	str.w	sl, [r3, #32]
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1778:	bl	1f6c <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    177c:	ldr	r3, [pc, #200]	; (1848 <_GLOBAL__sub_I_currentMode+0x1c4>)
    177e:	ldr	r2, [r6, #8]
    1780:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1782:	movs	r2, #6
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1784:	mov	r1, r5
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1786:	movs	r7, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1788:	mov	r0, r2
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    178a:	strb	r5, [r3, #16]
      m_mode = GLOBAL;
    178c:	strb.w	r5, [r3, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1790:	str	r2, [r3, #32]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    1792:	str	r4, [r3, #28]
      m_id = id;
    1794:	str	r7, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1796:	bl	1f6c <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    179a:	ldr	r2, [pc, #176]	; (184c <_GLOBAL__sub_I_currentMode+0x1c8>)
    179c:	ldr	r3, [r6, #12]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    179e:	strb	r5, [r2, #16]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    17a0:	mov.w	lr, #8
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    17a4:	mov	r0, lr
    17a6:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    17a8:	str.w	lr, [r2, #32]
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;
    17ac:	strb.w	r5, [r2, #36]	; 0x24
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    17b0:	str	r3, [r2, #24]
      m_id = id;
    17b2:	str.w	sl, [r2]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    17b6:	str	r4, [r2, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    17b8:	bl	1f6c <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    17bc:	ldr	r3, [pc, #144]	; (1850 <_GLOBAL__sub_I_currentMode+0x1cc>)
    17be:	ldr	r2, [r6, #16]
    17c0:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    17c2:	movs	r2, #10
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    17c4:	mov	r0, r2
    17c6:	mov	r1, r5
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    17c8:	movs	r6, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;
    17ca:	strb.w	r5, [r3, #36]	; 0x24
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    17ce:	str	r6, [r3, #0]
      m_pin = pin;
    17d0:	str	r2, [r3, #32]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    17d2:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    17d4:	strb.w	r9, [r3, #16]
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    17d8:	bl	1f6c <pinMode>
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    17dc:	ldr	r0, [pc, #116]	; (1854 <_GLOBAL__sub_I_currentMode+0x1d0>)
    17de:	ldr	r1, [pc, #120]	; (1858 <_GLOBAL__sub_I_currentMode+0x1d4>)
    17e0:	ldr	r2, [pc, #120]	; (185c <_GLOBAL__sub_I_currentMode+0x1d8>)
    17e2:	ldr	r3, [pc, #124]	; (1860 <_GLOBAL__sub_I_currentMode+0x1dc>)
      m_pin = pin;
      m_knobType = knobType;
    17e4:	strb	r5, [r0, #20]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    17e6:	mov.w	lr, #14
      m_knobType = knobType;
      m_id = id;
    17ea:	str	r5, [r0, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    17ec:	str	r4, [r0, #16]
      m_pin = pin;
    17ee:	movs	r6, #15
    17f0:	movs	r5, #16
    17f2:	strb.w	lr, [r0]
    17f6:	movs	r0, #17
    17f8:	strb	r6, [r1, #0]
    17fa:	strb	r5, [r2, #0]
    17fc:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    17fe:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1800:	strb.w	r9, [r1, #20]
      m_id = id;
    1804:	str.w	r9, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1808:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    180a:	strb.w	r8, [r2, #20]
      m_id = id;
    180e:	str.w	r8, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1812:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1814:	strb	r7, [r3, #20]
      m_id = id;
    1816:	str	r7, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1818:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    181c:	.word	0x1fff162c
    1820:	.word	0x00004848
    1824:	.word	0x1fff1720
    1828:	.word	0x1fff0c40
    182c:	.word	0x1fff16a8
    1830:	.word	0x1fff15cc
    1834:	.word	0x1fff15e4
    1838:	.word	0x1fff15fc
    183c:	.word	0x1fff1614
    1840:	.word	0x1fff1678
    1844:	.word	0x1fff16d0
    1848:	.word	0x1fff16f8
    184c:	.word	0x1fff17d0
    1850:	.word	0x1fff1790
    1854:	.word	0x1fff1690
    1858:	.word	0x1fff1644
    185c:	.word	0x1fff1660
    1860:	.word	0x1fff17b8
    1864:	.word	0x407f4000

00001868 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1868:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    186a:	ldr	r5, [pc, #60]	; (18a8 <usb_serial_getchar+0x40>)
    186c:	ldr	r0, [r5, #0]
    186e:	cbz	r0, 1890 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1870:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1872:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1874:	adds	r1, r0, r3
    1876:	adds	r3, #1
	if (i >= rx_packet->len) {
    1878:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    187a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    187c:	bcs.n	1884 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    187e:	strh	r3, [r0, #2]
	}
	return c;
    1880:	mov	r0, r4
}
    1882:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1884:	bl	2714 <usb_free>
		rx_packet = NULL;
    1888:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    188a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    188c:	str	r3, [r5, #0]
    188e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1890:	ldr	r3, [pc, #24]	; (18ac <usb_serial_getchar+0x44>)
    1892:	ldrb	r3, [r3, #0]
    1894:	cbz	r3, 18a2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1896:	movs	r0, #2
    1898:	bl	2760 <usb_rx>
    189c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    189e:	cmp	r0, #0
    18a0:	bne.n	1870 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    18a2:	mov.w	r0, #4294967295
    18a6:	pop	{r3, r4, r5, pc}
    18a8:	.word	0x1fff1804
    18ac:	.word	0x1fff1964

000018b0 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    18b0:	push	{r4, lr}
	if (!rx_packet) {
    18b2:	ldr	r4, [pc, #36]	; (18d8 <usb_serial_peekchar+0x28>)
    18b4:	ldr	r0, [r4, #0]
    18b6:	cbz	r0, 18c0 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    18b8:	ldrh	r3, [r0, #2]
    18ba:	add	r0, r3
    18bc:	ldrb	r0, [r0, #8]
}
    18be:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    18c0:	ldr	r3, [pc, #24]	; (18dc <usb_serial_peekchar+0x2c>)
    18c2:	ldrb	r3, [r3, #0]
    18c4:	cbz	r3, 18d2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    18c6:	movs	r0, #2
    18c8:	bl	2760 <usb_rx>
    18cc:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    18ce:	cmp	r0, #0
    18d0:	bne.n	18b8 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    18d2:	mov.w	r0, #4294967295
    18d6:	pop	{r4, pc}
    18d8:	.word	0x1fff1804
    18dc:	.word	0x1fff1964

000018e0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    18e0:	ldr	r3, [pc, #16]	; (18f4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    18e2:	ldr	r2, [pc, #20]	; (18f8 <usb_serial_available+0x18>)
    18e4:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    18e6:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    18e8:	cbz	r3, 18f2 <usb_serial_available+0x12>
    18ea:	ldrh	r2, [r3, #0]
    18ec:	ldrh	r3, [r3, #2]
    18ee:	subs	r3, r2, r3
    18f0:	add	r0, r3
	return count;
}
    18f2:	bx	lr
    18f4:	.word	0x1fff1804
    18f8:	.word	0x1fff1df8

000018fc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    18fc:	ldr	r3, [pc, #44]	; (192c <usb_serial_flush_input+0x30>)
    18fe:	ldrb	r3, [r3, #0]
    1900:	cbz	r3, 192a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1902:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1904:	ldr	r4, [pc, #40]	; (1930 <usb_serial_flush_input+0x34>)
    1906:	ldr	r0, [r4, #0]
    1908:	cbz	r0, 191e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    190a:	bl	2714 <usb_free>
		rx_packet = NULL;
    190e:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1910:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1912:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1914:	bl	2760 <usb_rx>
		if (!rx) break;
    1918:	cbz	r0, 1928 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    191a:	bl	2714 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    191e:	movs	r0, #2
    1920:	bl	2760 <usb_rx>
		if (!rx) break;
    1924:	cmp	r0, #0
    1926:	bne.n	191a <usb_serial_flush_input+0x1e>
    1928:	pop	{r4, pc}
    192a:	bx	lr
    192c:	.word	0x1fff1964
    1930:	.word	0x1fff1804

00001934 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1934:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1938:	ldr.w	r9, [pc, #248]	; 1a34 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    193c:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    193e:	movs	r2, #1
    1940:	strb.w	r2, [r9]
	while (size > 0) {
    1944:	str	r1, [sp, #4]
    1946:	cbz	r1, 19a4 <usb_serial_write+0x70>
    1948:	ldr.w	r8, [pc, #236]	; 1a38 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    194c:	ldr	r7, [pc, #212]	; (1a24 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    194e:	ldr	r6, [sp, #4]
    1950:	mov	fp, r0
		if (!tx_packet) {
    1952:	ldr.w	r0, [r8]
    1956:	cbz	r0, 19c6 <usb_serial_write+0x92>
    1958:	ldr	r5, [pc, #204]	; (1a28 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    195a:	ldrh	r4, [r0, #2]
    195c:	rsb	r1, r4, #64	; 0x40
    1960:	cmp	r1, r6
    1962:	it	cs
    1964:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1966:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    196a:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    196c:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1970:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1972:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1974:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1978:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    197c:	cbz	r1, 1994 <usb_serial_write+0x60>
    197e:	subs	r4, #1
    1980:	add	r2, r4
    1982:	add	r1, fp
    1984:	ldrb.w	r4, [fp], #1
    1988:	strb.w	r4, [r2, #1]!
    198c:	cmp	fp, r1
    198e:	bne.n	1984 <usb_serial_write+0x50>
    1990:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1994:	cmp.w	lr, #63	; 0x3f
    1998:	bhi.n	19b2 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    199a:	ldr	r2, [pc, #144]	; (1a2c <usb_serial_write+0xf8>)
    199c:	movs	r1, #5
    199e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    19a0:	cmp	r6, #0
    19a2:	bne.n	1952 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    19a4:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    19a6:	movs	r3, #0
    19a8:	strb.w	r3, [r9]
	return ret;
}
    19ac:	add	sp, #12
    19ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    19b2:	movs	r2, #64	; 0x40
    19b4:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    19b6:	mov	r1, r0
    19b8:	movs	r0, #3
    19ba:	bl	28b0 <usb_tx>
			tx_packet = NULL;
    19be:	movs	r2, #0
    19c0:	str.w	r2, [r8]
    19c4:	b.n	199a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    19c6:	ldrb	r2, [r7, #0]
    19c8:	cbz	r2, 1a14 <usb_serial_write+0xe0>
    19ca:	ldr	r4, [pc, #100]	; (1a30 <usb_serial_write+0xfc>)
    19cc:	ldr	r5, [pc, #88]	; (1a28 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    19ce:	mov.w	sl, #1
    19d2:	b.n	19e4 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    19d4:	subs	r4, #1
    19d6:	beq.n	1a06 <usb_serial_write+0xd2>
    19d8:	ldrb	r2, [r5, #0]
    19da:	cbnz	r2, 1a06 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    19dc:	bl	33b4 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    19e0:	ldrb	r2, [r7, #0]
    19e2:	cbz	r2, 1a14 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    19e4:	movs	r0, #3
    19e6:	bl	279c <usb_tx_packet_count>
    19ea:	cmp	r0, #7
    19ec:	bhi.n	19d4 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    19ee:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    19f2:	bl	26d4 <usb_malloc>
    19f6:	str.w	r0, [r8]
					if (tx_packet) break;
    19fa:	cmp	r0, #0
    19fc:	bne.n	195a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    19fe:	ldr	r3, [pc, #52]	; (1a34 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1a00:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1a02:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1a04:	bne.n	19d8 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1a06:	movs	r3, #1
					return -1;
    1a08:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1a0c:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1a0e:	add	sp, #12
    1a10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1a14:	movs	r3, #0
					return -1;
    1a16:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1a1a:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1a1e:	add	sp, #12
    1a20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a24:	.word	0x1fff1964
    1a28:	.word	0x1fff1800
    1a2c:	.word	0x1fff17f8
    1a30:	.word	0x00014821
    1a34:	.word	0x1fff17f9
    1a38:	.word	0x1fff17fc

00001a3c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1a3c:	push	{lr}
    1a3e:	sub	sp, #12
    1a40:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1a42:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1a44:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1a48:	mov	r0, r3
    1a4a:	bl	1934 <usb_serial_write>
}
    1a4e:	add	sp, #12
    1a50:	ldr.w	pc, [sp], #4

00001a54 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1a54:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1a56:	ldr	r5, [pc, #56]	; (1a90 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1a58:	ldr	r4, [pc, #56]	; (1a94 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1a5a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1a5c:	movs	r3, #1
    1a5e:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1a60:	cbz	r0, 1a6e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1a62:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1a64:	movs	r3, #0
    1a66:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1a68:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1a6c:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1a6e:	ldr	r3, [pc, #40]	; (1a98 <usb_serial_write_buffer_free+0x44>)
    1a70:	ldrb	r3, [r3, #0]
    1a72:	cbnz	r3, 1a7a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1a74:	movs	r0, #0
    1a76:	strb	r0, [r4, #0]
			return 0;
    1a78:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1a7a:	movs	r0, #3
    1a7c:	bl	279c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1a80:	cmp	r0, #7
    1a82:	bhi.n	1a74 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1a84:	bl	26d4 <usb_malloc>
    1a88:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1a8a:	cmp	r0, #0
    1a8c:	bne.n	1a62 <usb_serial_write_buffer_free+0xe>
    1a8e:	b.n	1a74 <usb_serial_write_buffer_free+0x20>
    1a90:	.word	0x1fff17fc
    1a94:	.word	0x1fff17f9
    1a98:	.word	0x1fff1964

00001a9c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1a9c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1a9e:	ldr	r3, [pc, #68]	; (1ae4 <usb_serial_flush_output+0x48>)
    1aa0:	ldrb	r3, [r3, #0]
    1aa2:	cbz	r3, 1ac8 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1aa4:	ldr	r6, [pc, #64]	; (1ae8 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1aa6:	ldr	r5, [pc, #68]	; (1aec <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1aa8:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1aaa:	movs	r7, #1
    1aac:	strb	r7, [r5, #0]
	if (tx_packet) {
    1aae:	cbz	r4, 1aca <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1ab0:	ldr	r2, [pc, #60]	; (1af0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1ab2:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1ab4:	movs	r7, #0
    1ab6:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1ab8:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1aba:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1abc:	movs	r0, #3
    1abe:	bl	28b0 <usb_tx>
		tx_packet = NULL;
    1ac2:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1ac4:	movs	r3, #0
    1ac6:	strb	r3, [r5, #0]
    1ac8:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1aca:	bl	26d4 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1ace:	ldr	r3, [pc, #32]	; (1af0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1ad0:	cbz	r0, 1ade <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1ad2:	mov	r1, r0
    1ad4:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1ad6:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1ad8:	bl	28b0 <usb_tx>
    1adc:	b.n	1ac4 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1ade:	strb	r7, [r3, #0]
    1ae0:	b.n	1ac4 <usb_serial_flush_output+0x28>
    1ae2:	nop
    1ae4:	.word	0x1fff1964
    1ae8:	.word	0x1fff17fc
    1aec:	.word	0x1fff17f9
    1af0:	.word	0x1fff17f8

00001af4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1af4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1af6:	ldr	r3, [pc, #56]	; (1b30 <usb_serial_flush_callback+0x3c>)
    1af8:	ldrb	r3, [r3, #0]
    1afa:	cbnz	r3, 1b1a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1afc:	ldr	r4, [pc, #52]	; (1b34 <usb_serial_flush_callback+0x40>)
    1afe:	ldr	r1, [r4, #0]
    1b00:	cbz	r1, 1b1c <usb_serial_flush_callback+0x28>
    1b02:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1b06:	ldrh	r3, [r1, #2]
    1b08:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1b0a:	movs	r0, #3
    1b0c:	bl	28b0 <usb_tx>
		tx_packet = NULL;
    1b10:	str	r5, [r4, #0]
    1b12:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1b14:	ldr	r3, [pc, #32]	; (1b38 <usb_serial_flush_callback+0x44>)
    1b16:	movs	r2, #1
    1b18:	strb	r2, [r3, #0]
    1b1a:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1b1c:	bl	26d4 <usb_malloc>
		if (tx) {
    1b20:	cmp	r0, #0
    1b22:	beq.n	1b14 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1b24:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1b26:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1b2a:	movs	r0, #3
    1b2c:	b.w	28b0 <usb_tx>
    1b30:	.word	0x1fff17f9
    1b34:	.word	0x1fff17fc
    1b38:	.word	0x1fff17f8

00001b3c <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1b3c:	ldr	r2, [pc, #220]	; (1c1c <wait_for_cal+0xe0>)
    1b3e:	ldr	r1, [pc, #224]	; (1c20 <wait_for_cal+0xe4>)
    1b40:	ldr	r3, [r2, #0]
    1b42:	lsls	r3, r3, #24
    1b44:	bmi.n	1b40 <wait_for_cal+0x4>
    1b46:	ldr	r3, [r1, #0]
    1b48:	ands.w	r3, r3, #128	; 0x80
    1b4c:	bne.n	1b40 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1b4e:	cpsid	i
	if (calibrating) {
    1b50:	ldr	r1, [pc, #208]	; (1c24 <wait_for_cal+0xe8>)
    1b52:	ldrb	r2, [r1, #0]
    1b54:	cmp	r2, #0
    1b56:	beq.n	1c18 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1b58:	ldr	r2, [pc, #204]	; (1c28 <wait_for_cal+0xec>)
    1b5a:	ldr	r0, [pc, #208]	; (1c2c <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1b5c:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1b5e:	ldr	r4, [pc, #208]	; (1c30 <wait_for_cal+0xf4>)
    1b60:	ldr	r7, [r2, #0]
    1b62:	ldr	r6, [r0, #0]
    1b64:	ldr	r5, [r4, #0]
    1b66:	ldr	r4, [r2, #12]
    1b68:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1b6a:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1b6c:	adds	r2, #20
    1b6e:	ldr	r0, [r0, #0]
    1b70:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1b72:	ldr	r7, [pc, #192]	; (1c34 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1b74:	add	r5, r6
    1b76:	add	r4, r5
    1b78:	add	r0, r4
    1b7a:	add	r2, r0
    1b7c:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1b80:	ldr	r6, [pc, #180]	; (1c38 <wait_for_cal+0xfc>)
    1b82:	ldr	r0, [pc, #184]	; (1c3c <wait_for_cal+0x100>)
    1b84:	ldr	r5, [pc, #184]	; (1c40 <wait_for_cal+0x104>)
    1b86:	ldr	r4, [pc, #188]	; (1c44 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1b88:	orr.w	r2, r2, #32768	; 0x8000
    1b8c:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1b8e:	ldr	r7, [r6, #0]
    1b90:	ldr	r6, [r0, #0]
    1b92:	ldr	r5, [r5, #0]
    1b94:	ldr	r2, [pc, #176]	; (1c48 <wait_for_cal+0x10c>)
    1b96:	ldr	r4, [r4, #0]
    1b98:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1b9a:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1b9c:	ldr	r0, [r0, #0]
    1b9e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1ba0:	ldr	r7, [pc, #168]	; (1c4c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1ba2:	add	r5, r6
    1ba4:	add	r4, r5
    1ba6:	add	r0, r4
    1ba8:	add	r2, r0
    1baa:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1bae:	ldr	r6, [pc, #160]	; (1c50 <wait_for_cal+0x114>)
    1bb0:	ldr	r0, [pc, #160]	; (1c54 <wait_for_cal+0x118>)
    1bb2:	ldr	r5, [pc, #164]	; (1c58 <wait_for_cal+0x11c>)
    1bb4:	ldr	r4, [pc, #164]	; (1c5c <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1bb6:	orr.w	r2, r2, #32768	; 0x8000
    1bba:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1bbc:	ldr	r7, [r6, #0]
    1bbe:	ldr	r6, [r0, #0]
    1bc0:	ldr	r5, [r5, #0]
    1bc2:	ldr	r2, [pc, #156]	; (1c60 <wait_for_cal+0x124>)
    1bc4:	ldr	r4, [r4, #0]
    1bc6:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1bc8:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1bca:	ldr	r0, [r0, #0]
    1bcc:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1bce:	ldr	r7, [pc, #148]	; (1c64 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1bd0:	add	r5, r6
    1bd2:	add	r4, r5
    1bd4:	add	r0, r4
    1bd6:	add	r2, r0
    1bd8:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1bdc:	ldr	r6, [pc, #136]	; (1c68 <wait_for_cal+0x12c>)
    1bde:	ldr	r0, [pc, #140]	; (1c6c <wait_for_cal+0x130>)
    1be0:	ldr	r5, [pc, #140]	; (1c70 <wait_for_cal+0x134>)
    1be2:	ldr	r4, [pc, #144]	; (1c74 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1be4:	orr.w	r2, r2, #32768	; 0x8000
    1be8:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1bea:	ldr	r7, [r6, #0]
    1bec:	ldr	r6, [r0, #0]
    1bee:	ldr	r5, [r5, #0]
    1bf0:	ldr	r2, [pc, #132]	; (1c78 <wait_for_cal+0x13c>)
    1bf2:	ldr	r4, [r4, #0]
    1bf4:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1bf6:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1bf8:	ldr	r0, [r0, #0]
    1bfa:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1bfc:	add	r5, r6
    1bfe:	add	r4, r5
    1c00:	add	r0, r4
    1c02:	add	r2, r0
    1c04:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1c08:	ldr	r0, [pc, #112]	; (1c7c <wait_for_cal+0x140>)
    1c0a:	orr.w	r2, r2, #32768	; 0x8000
    1c0e:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1c10:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1c12:	cpsie	i
}
    1c14:	pop	{r4, r5, r6, r7}
    1c16:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1c18:	cpsie	i
    1c1a:	bx	lr
    1c1c:	.word	0x4003b024
    1c20:	.word	0x400bb024
    1c24:	.word	0x1fff180a
    1c28:	.word	0x4003b038
    1c2c:	.word	0x4003b03c
    1c30:	.word	0x4003b040
    1c34:	.word	0x4003b02c
    1c38:	.word	0x4003b058
    1c3c:	.word	0x4003b05c
    1c40:	.word	0x4003b060
    1c44:	.word	0x4003b064
    1c48:	.word	0x4003b06c
    1c4c:	.word	0x4003b030
    1c50:	.word	0x400bb038
    1c54:	.word	0x400bb03c
    1c58:	.word	0x400bb040
    1c5c:	.word	0x400bb044
    1c60:	.word	0x400bb04c
    1c64:	.word	0x400bb02c
    1c68:	.word	0x400bb058
    1c6c:	.word	0x400bb05c
    1c70:	.word	0x400bb060
    1c74:	.word	0x400bb064
    1c78:	.word	0x400bb06c
    1c7c:	.word	0x400bb030

00001c80 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1c80:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1c82:	ldr	r0, [pc, #164]	; (1d28 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1c84:	ldr	r2, [pc, #164]	; (1d2c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1c86:	ldr	r3, [pc, #168]	; (1d30 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1c88:	ldr	r5, [pc, #168]	; (1d34 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1c8a:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1c8c:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1c8e:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1c90:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1c92:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1c94:	ldr	r4, [pc, #160]	; (1d38 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1c96:	cmp	r3, #8
    1c98:	beq.n	1cfc <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1c9a:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1c9c:	ldr	r0, [pc, #156]	; (1d3c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1c9e:	ldr	r1, [pc, #160]	; (1d40 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1ca0:	beq.n	1d12 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1ca2:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1ca4:	ite	eq
    1ca6:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1ca8:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1caa:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1cac:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1cae:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1cb0:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1cb2:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1cb4:	ldr	r3, [pc, #140]	; (1d44 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1cb6:	ldr	r1, [pc, #144]	; (1d48 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1cb8:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1cba:	ldr	r2, [pc, #144]	; (1d4c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1cbc:	cbz	r3, 1cee <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1cbe:	movs	r3, #1
    1cc0:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1cc2:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1cc4:	ldr	r3, [pc, #136]	; (1d50 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1cc6:	ldr	r1, [pc, #140]	; (1d54 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1cc8:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1cca:	ldr	r2, [pc, #140]	; (1d58 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1ccc:	cmp	r3, #1
    1cce:	bls.n	1d1e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1cd0:	cmp	r3, #4
    1cd2:	bls.n	1cf4 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1cd4:	cmp	r3, #8
    1cd6:	bls.n	1d16 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1cd8:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1cda:	ite	ls
    1cdc:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1cde:	movhi	r3, #135	; 0x87
    1ce0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1ce2:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1ce4:	ldr	r3, [pc, #116]	; (1d5c <analog_init+0xdc>)
    1ce6:	movs	r2, #1
    1ce8:	strb	r2, [r3, #0]
}
    1cea:	pop	{r4, r5}
    1cec:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1cee:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1cf0:	str	r3, [r2, #0]
    1cf2:	b.n	1cc4 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1cf4:	movs	r3, #132	; 0x84
    1cf6:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1cf8:	str	r3, [r2, #0]
    1cfa:	b.n	1ce4 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1cfc:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1d00:	ldr	r1, [pc, #60]	; (1d40 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1d02:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1d04:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1d06:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1d08:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1d0a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1d0c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1d0e:	str	r3, [r1, #0]
    1d10:	b.n	1cb4 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1d12:	movs	r2, #57	; 0x39
    1d14:	b.n	1d06 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1d16:	movs	r3, #133	; 0x85
    1d18:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1d1a:	str	r3, [r2, #0]
    1d1c:	b.n	1ce4 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1d1e:	movs	r3, #128	; 0x80
    1d20:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1d22:	str	r3, [r2, #0]
    1d24:	b.n	1ce4 <analog_init+0x64>
    1d26:	nop
    1d28:	.word	0x40074000
    1d2c:	.word	0x40074001
    1d30:	.word	0x1fff0c58
    1d34:	.word	0x4003b008
    1d38:	.word	0x4003b00c
    1d3c:	.word	0x400bb008
    1d40:	.word	0x400bb00c
    1d44:	.word	0x1fff180d
    1d48:	.word	0x4003b020
    1d4c:	.word	0x400bb020
    1d50:	.word	0x1fff0c59
    1d54:	.word	0x4003b024
    1d58:	.word	0x400bb024
    1d5c:	.word	0x1fff180a

00001d60 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1d60:	cmp	r0, #71	; 0x47
    1d62:	bhi.n	1dc4 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1d64:	ldr	r3, [pc, #204]	; (1e34 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1d66:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1d6a:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1d6c:	cmp	r6, #255	; 0xff
    1d6e:	beq.n	1dc8 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1d70:	ldr	r3, [pc, #196]	; (1e38 <analogRead+0xd8>)
    1d72:	ldrb	r3, [r3, #0]
    1d74:	cmp	r3, #0
    1d76:	bne.n	1dce <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1d78:	lsls	r2, r6, #24
    1d7a:	bmi.n	1dd6 <analogRead+0x76>
#endif

	__disable_irq();
    1d7c:	cpsid	i
    1d7e:	ldr	r5, [pc, #188]	; (1e3c <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1d80:	ldr	r4, [pc, #188]	; (1e40 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1d82:	mov	r7, r5
    1d84:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1d86:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1d88:	strb	r3, [r5, #0]
	__enable_irq();
    1d8a:	cpsie	i
	while (1) {
		__disable_irq();
    1d8c:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1d8e:	ldr	r3, [r4, #0]
    1d90:	lsls	r3, r3, #24
    1d92:	bmi.n	1dae <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1d94:	ldrb	r3, [r7, #0]
    1d96:	cbnz	r3, 1da0 <analogRead+0x40>
    1d98:	b.n	1d84 <analogRead+0x24>
    1d9a:	ldrb	r3, [r5, #0]
    1d9c:	cmp	r3, #0
    1d9e:	beq.n	1d84 <analogRead+0x24>
		__enable_irq();
    1da0:	cpsie	i
		yield();
    1da2:	bl	33b4 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1da6:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1da8:	ldr	r3, [r4, #0]
    1daa:	lsls	r0, r3, #24
    1dac:	bpl.n	1d9a <analogRead+0x3a>
			result = ADC0_RA;
    1dae:	ldr	r3, [pc, #148]	; (1e44 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1db0:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1db2:	movs	r2, #0
    1db4:	strb	r2, [r5, #0]
			__enable_irq();
    1db6:	cpsie	i
			result >>= analog_right_shift;
    1db8:	ldr	r2, [pc, #140]	; (1e48 <analogRead+0xe8>)
    1dba:	ldrb	r0, [r2, #0]
    1dbc:	asr.w	r0, r3, r0
			return result;
    1dc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1dc4:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1dc6:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1dc8:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1dca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1dce:	bl	1b3c <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1dd2:	lsls	r2, r6, #24
    1dd4:	bpl.n	1d7c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    1dd6:	cpsid	i
    1dd8:	ldr	r5, [pc, #112]	; (1e4c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1dda:	ldr.w	r8, [pc, #124]	; 1e58 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    1dde:	ldr	r4, [pc, #112]	; (1e50 <analogRead+0xf0>)
    1de0:	and.w	r7, r6, #64	; 0x40
    1de4:	uxtb	r7, r7
    1de6:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1dea:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    1dee:	cbz	r7, 1e28 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1df0:	bic.w	r3, r3, #16
    1df4:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    1df8:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    1dfa:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    1dfc:	ldr	r2, [pc, #76]	; (1e4c <analogRead+0xec>)
    1dfe:	strb	r3, [r5, #0]
	__enable_irq();
    1e00:	cpsie	i
	while (1) {
		__disable_irq();
    1e02:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1e04:	ldr	r3, [r4, #0]
    1e06:	lsls	r1, r3, #24
    1e08:	bmi.n	1e24 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    1e0a:	ldrb	r3, [r2, #0]
    1e0c:	cbnz	r3, 1e16 <analogRead+0xb6>
    1e0e:	b.n	1dea <analogRead+0x8a>
    1e10:	ldrb	r3, [r5, #0]
    1e12:	cmp	r3, #0
    1e14:	beq.n	1dea <analogRead+0x8a>
		__enable_irq();
    1e16:	cpsie	i
		yield();
    1e18:	bl	33b4 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1e1c:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1e1e:	ldr	r3, [r4, #0]
    1e20:	lsls	r3, r3, #24
    1e22:	bpl.n	1e10 <analogRead+0xb0>
			result = ADC1_RA;
    1e24:	ldr	r3, [pc, #44]	; (1e54 <analogRead+0xf4>)
    1e26:	b.n	1db0 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1e28:	orr.w	r3, r3, #16
    1e2c:	str.w	r3, [r8]
    1e30:	b.n	1df8 <analogRead+0x98>
    1e32:	nop
    1e34:	.word	0x000048c4
    1e38:	.word	0x1fff180a
    1e3c:	.word	0x1fff180c
    1e40:	.word	0x4003b000
    1e44:	.word	0x4003b010
    1e48:	.word	0x1fff1809
    1e4c:	.word	0x1fff180b
    1e50:	.word	0x400bb000
    1e54:	.word	0x400bb010
    1e58:	.word	0x400bb00c

00001e5c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1e5c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1e5e:	ldr	r3, [pc, #68]	; (1ea4 <digitalWrite.part.1+0x48>)
    1e60:	ldr.w	r2, [r3, r0, lsl #3]
    1e64:	ldrb.w	r4, [r2, #640]	; 0x280
    1e68:	cbz	r4, 1e78 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1e6a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1e6c:	cbz	r1, 1e8e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1e6e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1e72:	ldr.w	r4, [sp], #4
    1e76:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1e78:	add.w	r3, r3, r0, lsl #3
    1e7c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1e7e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1e80:	cbnz	r1, 1e98 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1e82:	bic.w	r2, r2, #2
    1e86:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1e88:	ldr.w	r4, [sp], #4
    1e8c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1e8e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1e92:	ldr.w	r4, [sp], #4
    1e96:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1e98:	orr.w	r2, r2, #3
    1e9c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1e9e:	ldr.w	r4, [sp], #4
    1ea2:	bx	lr
    1ea4:	.word	0x0000490c

00001ea8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1ea8:	ldr	r2, [pc, #112]	; (1f1c <pinMode.part.2+0x74>)
    1eaa:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1eae:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1eb0:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1eb2:	beq.n	1ed8 <pinMode.part.2+0x30>
    1eb4:	cmp	r1, #4
    1eb6:	beq.n	1ef0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1eb8:	ldr.w	r0, [r2, r0, lsl #3]
    1ebc:	movs	r2, #0
    1ebe:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1ec2:	cbz	r1, 1ed0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1ec4:	cmp	r1, #2
    1ec6:	beq.n	1f0a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1ec8:	cmp	r1, #3
    1eca:	beq.n	1f12 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1ecc:	str	r2, [r3, #0]
    1ece:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1ed0:	mov.w	r2, #256	; 0x100
    1ed4:	str	r2, [r3, #0]
    1ed6:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1ed8:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1edc:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1ee0:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1ee4:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1ee6:	ldr	r2, [r3, #0]
    1ee8:	bic.w	r2, r2, #32
    1eec:	str	r2, [r3, #0]
    1eee:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1ef0:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1ef4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1ef8:	movs	r0, #1
    1efa:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1efe:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    1f00:	ldr	r2, [r3, #0]
    1f02:	orr.w	r2, r2, #32
    1f06:	str	r2, [r3, #0]
    1f08:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    1f0a:	movw	r2, #259	; 0x103
    1f0e:	str	r2, [r3, #0]
    1f10:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    1f12:	mov.w	r2, #258	; 0x102
    1f16:	str	r2, [r3, #0]
    1f18:	bx	lr
    1f1a:	nop
    1f1c:	.word	0x0000490c

00001f20 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    1f20:	push	{r4, r5}
	RTC_SR = 0;
    1f22:	ldr	r3, [pc, #20]	; (1f38 <rtc_set+0x18>)
	RTC_TPR = 0;
    1f24:	ldr	r5, [pc, #20]	; (1f3c <rtc_set+0x1c>)
	RTC_TSR = t;
    1f26:	ldr	r4, [pc, #24]	; (1f40 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1f28:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    1f2a:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1f2c:	str	r2, [r3, #0]
	RTC_TPR = 0;
    1f2e:	str	r2, [r5, #0]
	RTC_TSR = t;
    1f30:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    1f32:	str	r1, [r3, #0]
}
    1f34:	pop	{r4, r5}
    1f36:	bx	lr
    1f38:	.word	0x4003d014
    1f3c:	.word	0x4003d004
    1f40:	.word	0x4003d000

00001f44 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    1f44:	cmp	r0, #63	; 0x3f
    1f46:	bhi.n	1f4c <digitalWrite+0x8>
    1f48:	b.w	1e5c <digitalWrite.part.1>
    1f4c:	bx	lr
    1f4e:	nop

00001f50 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1f50:	cmp	r0, #63	; 0x3f
    1f52:	bhi.n	1f62 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    1f54:	ldr	r3, [pc, #16]	; (1f68 <digitalRead+0x18>)
    1f56:	ldr.w	r3, [r3, r0, lsl #3]
    1f5a:	ldrb.w	r0, [r3, #512]	; 0x200
    1f5e:	uxtb	r0, r0
    1f60:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1f62:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    1f64:	bx	lr
    1f66:	nop
    1f68:	.word	0x0000490c

00001f6c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1f6c:	cmp	r0, #63	; 0x3f
    1f6e:	bhi.n	1f74 <pinMode+0x8>
    1f70:	b.w	1ea8 <pinMode.part.2>
    1f74:	bx	lr
    1f76:	nop

00001f78 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1f78:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f7c:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1f7e:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1f80:	ldr	r7, [pc, #136]	; (200c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1f82:	ldr	r3, [pc, #140]	; (2010 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1f84:	ldr	r2, [pc, #140]	; (2014 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1f86:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1f88:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1f8a:	ldr	r2, [r2, #0]
	__enable_irq();
    1f8c:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1f8e:	lsls	r2, r2, #5
    1f90:	bpl.n	1f98 <delay+0x20>
    1f92:	cmp	r3, #50	; 0x32
    1f94:	it	hi
    1f96:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1f98:	cbz	r5, 2008 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1f9a:	rsb	r3, r3, #179200	; 0x2bc00
    1f9e:	addw	r3, r3, #799	; 0x31f
    1fa2:	ldr	r6, [pc, #116]	; (2018 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1fa4:	ldr.w	r9, [pc, #104]	; 2010 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1fa8:	ldr.w	r8, [pc, #104]	; 2014 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1fac:	lsrs	r3, r3, #2
    1fae:	mov.w	r2, #1000	; 0x3e8
    1fb2:	umull	r1, r3, r6, r3
    1fb6:	mul.w	r4, r2, r4
    1fba:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1fbe:	cpsid	i
	current = SYST_CVR;
    1fc0:	ldr.w	r1, [r9]
	count = systick_millis_count;
    1fc4:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1fc6:	ldr.w	lr, [r8]
	__enable_irq();
    1fca:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1fcc:	rsb	r3, r1, #179200	; 0x2bc00
    1fd0:	addw	r3, r3, #799	; 0x31f
    1fd4:	lsrs	r3, r3, #2
    1fd6:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1fda:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1fde:	rsb	r3, r4, r3, lsr #2
    1fe2:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1fe6:	beq.n	1fee <delay+0x76>
    1fe8:	cmp	r1, #50	; 0x32
    1fea:	it	hi
    1fec:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1fee:	mla	r3, r0, r2, r3
    1ff2:	cmp.w	r3, #1000	; 0x3e8
    1ff6:	bcc.n	2002 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    1ff8:	subs	r5, #1
    1ffa:	beq.n	2008 <delay+0x90>
				start += 1000;
    1ffc:	add.w	r4, r4, #1000	; 0x3e8
    2000:	b.n	1fbe <delay+0x46>
			}
			yield();
    2002:	bl	33b4 <yield>
		}
    2006:	b.n	1fbe <delay+0x46>
    2008:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    200c:	.word	0x1fff1810
    2010:	.word	0xe000e018
    2014:	.word	0xe000ed04
    2018:	.word	0x16c16c17

0000201c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    201c:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    201e:	ldr	r3, [pc, #312]	; (2158 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2020:	ldr	r0, [pc, #312]	; (215c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2022:	ldr.w	ip, [pc, #348]	; 2180 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2026:	ldr	r4, [pc, #312]	; (2160 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2028:	ldr	r1, [pc, #312]	; (2164 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    202a:	ldr.w	lr, [pc, #344]	; 2184 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    202e:	ldr	r6, [pc, #312]	; (2168 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2030:	ldr	r5, [pc, #312]	; (216c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2032:	ldr	r7, [pc, #316]	; (2170 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2034:	mov.w	r2, #134217728	; 0x8000000
    2038:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    203a:	mov.w	r2, #268435456	; 0x10000000
    203e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2040:	mov.w	r2, #536870912	; 0x20000000
    2044:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2046:	mov.w	r2, #1073741824	; 0x40000000
    204a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    204c:	mov.w	r2, #2147483648	; 0x80000000
    2050:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2052:	movs	r2, #0
    2054:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2056:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2058:	movw	r0, #61439	; 0xefff
    205c:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2060:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2064:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2066:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    206a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    206c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    206e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2070:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2074:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2076:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    207a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    207c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2080:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2082:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2086:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    208a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    208e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2092:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2096:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2098:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    209c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    209e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    20a0:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    20a2:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    20a6:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    20a8:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    20aa:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    20ac:	ldr	r4, [pc, #196]	; (2174 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    20ae:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    20b0:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    20b2:	movs	r1, #9
    20b4:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    20b6:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    20ba:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    20be:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    20c0:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    20c2:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    20c4:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    20c6:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    20c8:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    20ca:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    20ce:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    20d2:	add.w	r7, r7, #520192	; 0x7f000
    20d6:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    20d8:	addw	r4, r4, #2044	; 0x7fc
    20dc:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    20de:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    20e0:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    20e2:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    20e4:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    20e8:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    20ea:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    20ee:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    20f2:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    20f4:	sub.w	r4, r4, #460800	; 0x70800
    20f8:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    20fc:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    20fe:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2100:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2104:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2106:	ldr	r0, [pc, #112]	; (2178 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2108:	orr.w	r1, r1, #512	; 0x200
    210c:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    210e:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2110:	ldr	r4, [pc, #104]	; (217c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2112:	add.w	lr, lr, #65280	; 0xff00
    2116:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    211a:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    211e:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2122:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2126:	orr.w	r1, r1, #33554432	; 0x2000000
    212a:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    212c:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2130:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2134:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2136:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2138:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    213a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    213c:	str	r2, [r4, #0]
#endif
	analog_init();
    213e:	bl	1c80 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2142:	movs	r0, #25
    2144:	bl	1f78 <delay>
	usb_init();
    2148:	bl	32e4 <usb_init>
	delay(275);
    214c:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2150:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2154:	b.w	1f78 <delay>
    2158:	.word	0xe000e104
    215c:	.word	0x40038004
    2160:	.word	0x40038014
    2164:	.word	0x4003801c
    2168:	.word	0x40038024
    216c:	.word	0x4003802c
    2170:	.word	0x40038034
    2174:	.word	0x40038000
    2178:	.word	0x40048004
    217c:	.word	0x400c9000
    2180:	.word	0x40038008
    2184:	.word	0x4003800c

00002188 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2188:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    218a:	ldr	r3, [pc, #56]	; (21c4 <sysex_byte+0x3c>)
    218c:	ldr	r4, [pc, #56]	; (21c8 <sysex_byte+0x40>)
    218e:	ldr	r3, [r3, #0]
    2190:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2192:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2194:	cbz	r3, 21ba <sysex_byte+0x32>
    2196:	cmp.w	r1, #290	; 0x122
    219a:	bcs.n	21a8 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    219c:	ldr	r2, [pc, #44]	; (21cc <sysex_byte+0x44>)
    219e:	adds	r3, r1, #1
    21a0:	strb	r5, [r2, r1]
    21a2:	uxth	r3, r3
    21a4:	strh	r3, [r4, #0]
	}
}
    21a6:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    21a8:	movs	r2, #0
    21aa:	ldr	r0, [pc, #32]	; (21cc <sysex_byte+0x44>)
    21ac:	blx	r3
    21ae:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    21b0:	ldr	r2, [pc, #24]	; (21cc <sysex_byte+0x44>)
    21b2:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    21b4:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    21b6:	strh	r3, [r4, #0]
	}
}
    21b8:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    21ba:	cmp.w	r1, #290	; 0x122
    21be:	bcc.n	219c <sysex_byte+0x14>
    21c0:	pop	{r3, r4, r5, pc}
    21c2:	nop
    21c4:	.word	0x1fff1838
    21c8:	.word	0x1fff1cce
    21cc:	.word	0x1fff1cd4

000021d0 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    21d0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    21d4:	ldr	r6, [pc, #132]	; (225c <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    21d6:	ldr	r7, [pc, #136]	; (2260 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    21d8:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    21da:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    21dc:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    21de:	strb	r3, [r7, #0]
	if (!tx_packet) {
    21e0:	cbz	r1, 2210 <usb_midi_write_packed+0x40>
    21e2:	ldr	r5, [pc, #128]	; (2264 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    21e4:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    21e6:	add.w	r2, r1, r3, lsl #2
    21ea:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    21ec:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    21ee:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    21f0:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    21f4:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    21f6:	bhi.n	2202 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    21f8:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    21fa:	movs	r3, #0
    21fc:	strb	r3, [r7, #0]
    21fe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2202:	movs	r3, #64	; 0x40
    2204:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2206:	movs	r0, #4
    2208:	bl	28b0 <usb_tx>
		tx_packet = NULL;
    220c:	str	r4, [r6, #0]
    220e:	b.n	21fa <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2210:	ldr.w	r9, [pc, #84]	; 2268 <usb_midi_write_packed+0x98>
    2214:	ldrb.w	r3, [r9]
    2218:	cmp	r3, #0
    221a:	beq.n	21fe <usb_midi_write_packed+0x2e>
    221c:	ldr	r5, [pc, #68]	; (2264 <usb_midi_write_packed+0x94>)
    221e:	movw	r4, #48001	; 0xbb81
    2222:	b.n	2236 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2224:	subs	r4, #1
    2226:	beq.n	224e <usb_midi_write_packed+0x7e>
    2228:	ldrb	r3, [r5, #0]
    222a:	cbnz	r3, 224e <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    222c:	bl	33b4 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2230:	ldrb.w	r3, [r9]
    2234:	cbz	r3, 2256 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2236:	movs	r0, #4
    2238:	bl	279c <usb_tx_packet_count>
    223c:	cmp	r0, #5
    223e:	bhi.n	2224 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2240:	bl	26d4 <usb_malloc>
    2244:	mov	r1, r0
    2246:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2248:	cmp	r0, #0
    224a:	beq.n	2224 <usb_midi_write_packed+0x54>
    224c:	b.n	21e4 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    224e:	movs	r3, #1
    2250:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2252:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2256:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    225a:	nop
    225c:	.word	0x1fff1854
    2260:	.word	0x1fff1828
    2264:	.word	0x1fff1858
    2268:	.word	0x1fff1964

0000226c <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    226c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    226e:	ldr	r3, [pc, #32]	; (2290 <usb_midi_flush_output+0x24>)
    2270:	ldrb	r4, [r3, #0]
    2272:	cbnz	r4, 227e <usb_midi_flush_output+0x12>
    2274:	ldr	r5, [pc, #28]	; (2294 <usb_midi_flush_output+0x28>)
    2276:	ldr	r1, [r5, #0]
    2278:	cbz	r1, 227e <usb_midi_flush_output+0x12>
    227a:	ldrh	r3, [r1, #2]
    227c:	cbnz	r3, 2280 <usb_midi_flush_output+0x14>
    227e:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2280:	lsls	r3, r3, #2
    2282:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2284:	movs	r0, #4
    2286:	bl	28b0 <usb_tx>
		tx_packet = NULL;
    228a:	str	r4, [r5, #0]
    228c:	pop	{r3, r4, r5, pc}
    228e:	nop
    2290:	.word	0x1fff1828
    2294:	.word	0x1fff1854

00002298 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2298:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    229c:	ldr	r6, [pc, #692]	; (2554 <usb_midi_read+0x2bc>)
    229e:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    22a0:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    22a2:	cmp	r3, #0
    22a4:	beq.w	23cc <usb_midi_read+0x134>
    22a8:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    22aa:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    22ac:	lsrs	r1, r2, #2
    22ae:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    22b2:	adds	r2, #4
	if (index < rx_packet->len) {
    22b4:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    22b6:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    22b8:	bcs.n	2340 <usb_midi_read+0xa8>
		rx_packet->index = index;
    22ba:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    22bc:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    22c0:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    22c4:	ldr	r1, [pc, #656]	; (2558 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    22c6:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    22ca:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    22ce:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    22d2:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    22d4:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    22d8:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    22da:	bls.n	2312 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    22dc:	subs	r3, r6, #2
    22de:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    22e0:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    22e4:	bls.n	2384 <usb_midi_read+0xec>
    22e6:	cmp	r6, #5
    22e8:	beq.n	237c <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    22ea:	cmp	r6, #4
    22ec:	beq.w	2638 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    22f0:	subs	r3, r6, #5
    22f2:	cmp	r3, #2
    22f4:	bls.n	23f6 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    22f6:	cmp	r6, #15
    22f8:	bne.n	2318 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    22fa:	cmp	r0, #247	; 0xf7
    22fc:	bhi.n	2384 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    22fe:	cmp	r0, #240	; 0xf0
    2300:	beq.n	2308 <usb_midi_read+0x70>
    2302:	ldr	r3, [pc, #600]	; (255c <usb_midi_read+0x2c4>)
    2304:	ldrh	r3, [r3, #0]
    2306:	cbz	r3, 2318 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2308:	bl	2188 <sysex_byte>
		}
	}
	return 0;
    230c:	movs	r0, #0
    230e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    2312:	cbz	r7, 231e <usb_midi_read+0x86>
    2314:	cmp	r5, r7
    2316:	beq.n	231e <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2318:	movs	r0, #0
    231a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    231e:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2320:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2324:	beq.w	2436 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2328:	cmp	r6, #9
    232a:	beq.n	2350 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    232c:	cmp	r6, #10
    232e:	bne.w	245a <usb_midi_read+0x1c2>
    2332:	cmp	r3, #10
    2334:	bne.n	2318 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    2336:	ldr	r3, [pc, #552]	; (2560 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2338:	ldr	r2, [pc, #552]	; (2564 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    233a:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    233c:	movs	r1, #160	; 0xa0
    233e:	b.n	2444 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    2340:	mov	r0, r3
    2342:	bl	2714 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2346:	movs	r0, #5
    2348:	bl	2760 <usb_rx>
    234c:	str	r0, [r6, #0]
    234e:	b.n	22bc <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2350:	cmp	r3, #9
    2352:	bne.n	2318 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    2354:	lsrs	r7, r4, #24
    2356:	beq.w	2650 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    235a:	ldr	r3, [pc, #524]	; (2568 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    235c:	ldr	r2, [pc, #516]	; (2564 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    235e:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2360:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2362:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2366:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2368:	uxtb	r5, r5
    236a:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    236c:	cmp	r3, #0
    236e:	beq.w	24ac <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2372:	mov	r2, r4
    2374:	mov	r1, r6
    2376:	mov	r0, r5
    2378:	blx	r3
    237a:	b.n	24ac <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    237c:	cmp	r0, #240	; 0xf0
    237e:	bls.n	2408 <usb_midi_read+0x170>
    2380:	cmp	r0, #247	; 0xf7
    2382:	beq.n	2408 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    2384:	subs	r0, #241	; 0xf1
    2386:	cmp	r0, #14
    2388:	bhi.n	2318 <usb_midi_read+0x80>
    238a:	add	r3, pc, #4	; (adr r3, 2390 <usb_midi_read+0xf8>)
    238c:	ldr.w	pc, [r3, r0, lsl #2]
    2390:	.word	0x00002547
    2394:	.word	0x0000252b
    2398:	.word	0x00002519
    239c:	.word	0x00002319
    23a0:	.word	0x00002319
    23a4:	.word	0x0000250b
    23a8:	.word	0x00002319
    23ac:	.word	0x000025eb
    23b0:	.word	0x00002319
    23b4:	.word	0x000025b5
    23b8:	.word	0x000025cf
    23bc:	.word	0x000024f3
    23c0:	.word	0x00002319
    23c4:	.word	0x000024db
    23c8:	.word	0x000024bf
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    23cc:	ldr	r3, [pc, #412]	; (256c <usb_midi_read+0x2d4>)
    23ce:	ldrb	r3, [r3, #0]
    23d0:	cmp	r3, #0
    23d2:	beq.n	2318 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    23d4:	movs	r0, #5
    23d6:	bl	2760 <usb_rx>
    23da:	mov	r3, r0
    23dc:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    23de:	cmp	r0, #0
    23e0:	beq.n	2318 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    23e2:	ldrh	r5, [r0, #0]
    23e4:	cmp	r5, #0
    23e6:	bne.w	22aa <usb_midi_read+0x12>
			usb_free(rx_packet);
    23ea:	bl	2714 <usb_free>
			rx_packet = NULL;
    23ee:	str	r5, [r6, #0]
			return 0;
    23f0:	mov	r0, r5
    23f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    23f6:	bl	2188 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    23fa:	ubfx	r0, r4, #16, #8
    23fe:	bl	2188 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    2402:	cmp	r6, #7
    2404:	bne.n	240c <usb_midi_read+0x174>
    2406:	lsrs	r0, r4, #24
    2408:	bl	2188 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    240c:	ldr	r3, [pc, #332]	; (255c <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    240e:	ldr	r2, [pc, #352]	; (2570 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2410:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    2412:	ldr	r0, [pc, #352]	; (2574 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2414:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2416:	ldr	r5, [pc, #352]	; (2578 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2418:	ldr	r2, [pc, #328]	; (2564 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    241a:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    241c:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    241e:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2420:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2422:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2424:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2426:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    2428:	cbz	r4, 246e <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    242a:	movs	r2, #1
    242c:	ldr	r0, [pc, #332]	; (257c <usb_midi_read+0x2e4>)
    242e:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2430:	movs	r0, #1
    2432:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2436:	cmp	r3, #8
    2438:	bne.w	2318 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    243c:	ldr	r3, [pc, #320]	; (2580 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    243e:	ldr	r2, [pc, #292]	; (2564 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    2440:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2442:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2444:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2448:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    244a:	uxtb	r5, r5
    244c:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    244e:	cbz	r3, 24ac <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2450:	mov	r0, r5
    2452:	mov	r2, r4
    2454:	mov	r1, r6
    2456:	blx	r3
    2458:	b.n	24ac <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    245a:	cmp	r6, #11
    245c:	bne.n	2482 <usb_midi_read+0x1ea>
    245e:	cmp	r3, #11
    2460:	bne.w	2318 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    2464:	ldr	r3, [pc, #284]	; (2584 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2466:	ldr	r2, [pc, #252]	; (2564 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    2468:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    246a:	movs	r1, #176	; 0xb0
    246c:	b.n	2444 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    246e:	ldr	r3, [pc, #280]	; (2588 <usb_midi_read+0x2f0>)
    2470:	ldr	r3, [r3, #0]
    2472:	cmp	r3, #0
    2474:	beq.w	266e <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    2478:	ldr	r0, [pc, #256]	; (257c <usb_midi_read+0x2e4>)
    247a:	blx	r3
		}
		return 1;
    247c:	movs	r0, #1
    247e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    2482:	cmp	r6, #12
    2484:	bne.w	2688 <usb_midi_read+0x3f0>
    2488:	cmp	r3, #12
    248a:	bne.w	2318 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    248e:	ldr	r3, [pc, #252]	; (258c <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2490:	ldr	r2, [pc, #208]	; (2564 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    2492:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2494:	movs	r1, #192	; 0xc0
    2496:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2498:	uxtb	r5, r5
    249a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    249e:	cmp	r3, #0
    24a0:	beq.w	2634 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    24a4:	mov	r0, r5
    24a6:	mov	r1, r6
    24a8:	lsrs	r4, r4, #24
    24aa:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    24ac:	ldr	r1, [pc, #224]	; (2590 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    24ae:	ldr	r2, [pc, #196]	; (2574 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    24b0:	ldr	r3, [pc, #196]	; (2578 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    24b2:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    24b4:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    24b6:	strb	r4, [r3, #0]
		return 1;
    24b8:	movs	r0, #1
    24ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    24be:	ldr	r3, [pc, #212]	; (2594 <usb_midi_read+0x2fc>)
    24c0:	ldr	r3, [r3, #0]
    24c2:	cmp	r3, #0
    24c4:	beq.w	2674 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    24c8:	blx	r3
    24ca:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    24ce:	ldr	r3, [pc, #148]	; (2564 <usb_midi_read+0x2cc>)
    24d0:	uxtb	r5, r5
    24d2:	lsrs	r4, r4, #24
    24d4:	strb.w	r8, [r3]
		goto return_message;
    24d8:	b.n	24ac <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    24da:	ldr	r3, [pc, #188]	; (2598 <usb_midi_read+0x300>)
    24dc:	ldr	r3, [r3, #0]
    24de:	cmp	r3, #0
    24e0:	bne.n	24c8 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    24e2:	ldr	r3, [pc, #184]	; (259c <usb_midi_read+0x304>)
    24e4:	ldr	r3, [r3, #0]
    24e6:	cbz	r3, 2512 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    24e8:	movs	r0, #254	; 0xfe
    24ea:	blx	r3
    24ec:	ubfx	r6, r4, #16, #8
    24f0:	b.n	24ce <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    24f2:	ldr	r3, [pc, #172]	; (25a0 <usb_midi_read+0x308>)
    24f4:	ldr	r3, [r3, #0]
    24f6:	cmp	r3, #0
    24f8:	bne.n	24c8 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    24fa:	ldr	r3, [pc, #160]	; (259c <usb_midi_read+0x304>)
    24fc:	ldr	r3, [r3, #0]
    24fe:	cbz	r3, 2512 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2500:	movs	r0, #252	; 0xfc
    2502:	blx	r3
    2504:	ubfx	r6, r4, #16, #8
    2508:	b.n	24ce <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    250a:	ldr	r3, [pc, #152]	; (25a4 <usb_midi_read+0x30c>)
    250c:	ldr	r3, [r3, #0]
    250e:	cmp	r3, #0
    2510:	bne.n	24c8 <usb_midi_read+0x230>
    2512:	ubfx	r6, r4, #16, #8
    2516:	b.n	24ce <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2518:	ldr	r3, [pc, #140]	; (25a8 <usb_midi_read+0x310>)
    251a:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    251c:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2520:	cmp	r3, #0
    2522:	beq.n	24ce <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2524:	mov	r0, r6
    2526:	blx	r3
    2528:	b.n	24ce <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    252a:	ldr	r3, [pc, #128]	; (25ac <usb_midi_read+0x314>)
    252c:	ldr	r2, [r3, #0]
    252e:	cmp	r2, #0
    2530:	beq.n	2512 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2532:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2534:	lsrs	r3, r4, #17
    2536:	and.w	r0, r6, #127	; 0x7f
    253a:	and.w	r3, r3, #16256	; 0x3f80
    253e:	orrs	r0, r3
    2540:	uxtb	r6, r6
    2542:	blx	r2
    2544:	b.n	24ce <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2546:	ldr	r3, [pc, #104]	; (25b0 <usb_midi_read+0x318>)
    2548:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    254a:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    254e:	cmp	r3, #0
    2550:	bne.n	2524 <usb_midi_read+0x28c>
    2552:	b.n	24ce <usb_midi_read+0x236>
    2554:	.word	0x1fff1860
    2558:	.word	0x1fff1cd2
    255c:	.word	0x1fff1cce
    2560:	.word	0x1fff183c
    2564:	.word	0x1fff1ccc
    2568:	.word	0x1fff1870
    256c:	.word	0x1fff1964
    2570:	.word	0x1fff1838
    2574:	.word	0x1fff1cd0
    2578:	.word	0x1fff1cd1
    257c:	.word	0x1fff1cd4
    2580:	.word	0x1fff1868
    2584:	.word	0x1fff186c
    2588:	.word	0x1fff1850
    258c:	.word	0x1fff182c
    2590:	.word	0x1fff1cd3
    2594:	.word	0x1fff1818
    2598:	.word	0x1fff181c
    259c:	.word	0x1fff1820
    25a0:	.word	0x1fff185c
    25a4:	.word	0x1fff184c
    25a8:	.word	0x1fff1864
    25ac:	.word	0x1fff1834
    25b0:	.word	0x1fff1848
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    25b4:	ldr	r3, [pc, #252]	; (26b4 <usb_midi_read+0x41c>)
    25b6:	ldr	r3, [r3, #0]
    25b8:	cmp	r3, #0
    25ba:	bne.n	24c8 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    25bc:	ldr	r3, [pc, #248]	; (26b8 <usb_midi_read+0x420>)
    25be:	ldr	r3, [r3, #0]
    25c0:	cmp	r3, #0
    25c2:	beq.n	2512 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    25c4:	movs	r0, #250	; 0xfa
    25c6:	blx	r3
    25c8:	ubfx	r6, r4, #16, #8
    25cc:	b.n	24ce <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    25ce:	ldr	r3, [pc, #236]	; (26bc <usb_midi_read+0x424>)
    25d0:	ldr	r3, [r3, #0]
    25d2:	cmp	r3, #0
    25d4:	bne.w	24c8 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    25d8:	ldr	r3, [pc, #220]	; (26b8 <usb_midi_read+0x420>)
    25da:	ldr	r3, [r3, #0]
    25dc:	cmp	r3, #0
    25de:	beq.n	2512 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    25e0:	movs	r0, #251	; 0xfb
    25e2:	blx	r3
    25e4:	ubfx	r6, r4, #16, #8
    25e8:	b.n	24ce <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    25ea:	ldr	r3, [pc, #212]	; (26c0 <usb_midi_read+0x428>)
    25ec:	ldr	r3, [r3, #0]
    25ee:	cmp	r3, #0
    25f0:	bne.w	24c8 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    25f4:	ldr	r3, [pc, #192]	; (26b8 <usb_midi_read+0x420>)
    25f6:	ldr	r3, [r3, #0]
    25f8:	cmp	r3, #0
    25fa:	beq.n	2512 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    25fc:	movs	r0, #248	; 0xf8
    25fe:	blx	r3
    2600:	ubfx	r6, r4, #16, #8
    2604:	b.n	24ce <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2606:	cmp	r3, #14
    2608:	bne.w	2318 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    260c:	ldr	r2, [pc, #180]	; (26c4 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    260e:	ldr	r3, [pc, #184]	; (26c8 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2610:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2612:	movs	r1, #224	; 0xe0
    2614:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    2616:	cmp	r2, #0
    2618:	beq.n	26aa <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    261a:	lsrs	r6, r4, #16
    261c:	lsrs	r1, r4, #17
    261e:	and.w	r3, r6, #127	; 0x7f
    2622:	and.w	r1, r1, #16256	; 0x3f80
    2626:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    2628:	uxtb	r5, r5
    262a:	sub.w	r1, r1, #8192	; 0x2000
    262e:	mov	r0, r5
    2630:	blx	r2
    2632:	uxtb	r6, r6
    2634:	lsrs	r4, r4, #24
    2636:	b.n	24ac <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    2638:	bl	2188 <sysex_byte>
		sysex_byte(n >> 16);
    263c:	ubfx	r0, r4, #16, #8
    2640:	bl	2188 <sysex_byte>
		sysex_byte(n >> 24);
    2644:	lsrs	r0, r4, #24
    2646:	bl	2188 <sysex_byte>
		return 0;
    264a:	movs	r0, #0
    264c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2650:	ldr	r3, [pc, #120]	; (26cc <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2652:	ldr	r2, [pc, #116]	; (26c8 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    2654:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2656:	movs	r1, #128	; 0x80
    2658:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    265a:	uxtb	r5, r5
    265c:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2660:	cbz	r3, 2684 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2662:	mov	r1, r6
    2664:	mov	r0, r5
    2666:	mov	r2, r7
    2668:	blx	r3
    266a:	mov	r4, r7
    266c:	b.n	24ac <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    266e:	movs	r0, #1
    2670:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2674:	ldr	r3, [pc, #64]	; (26b8 <usb_midi_read+0x420>)
    2676:	ldr	r3, [r3, #0]
    2678:	cmp	r3, #0
    267a:	beq.w	2512 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    267e:	movs	r0, #255	; 0xff
    2680:	blx	r3
    2682:	b.n	2512 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2684:	mov	r4, r3
    2686:	b.n	24ac <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2688:	cmp	r6, #13
    268a:	bne.n	2606 <usb_midi_read+0x36e>
    268c:	cmp	r3, #13
    268e:	bne.w	2318 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2692:	ldr	r3, [pc, #60]	; (26d0 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2694:	ldr	r2, [pc, #48]	; (26c8 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2696:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2698:	movs	r1, #208	; 0xd0
    269a:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    269c:	uxtb	r5, r5
    269e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    26a2:	cmp	r3, #0
    26a4:	bne.w	24a4 <usb_midi_read+0x20c>
    26a8:	b.n	2634 <usb_midi_read+0x39c>
    26aa:	ubfx	r6, r4, #16, #8
    26ae:	uxtb	r5, r5
    26b0:	lsrs	r4, r4, #24
    26b2:	b.n	24ac <usb_midi_read+0x214>
    26b4:	.word	0x1fff1844
    26b8:	.word	0x1fff1820
    26bc:	.word	0x1fff1824
    26c0:	.word	0x1fff1814
    26c4:	.word	0x1fff1830
    26c8:	.word	0x1fff1ccc
    26cc:	.word	0x1fff1868
    26d0:	.word	0x1fff1840

000026d4 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    26d4:	cpsid	i
	avail = usb_buffer_available;
    26d6:	ldr	r0, [pc, #52]	; (270c <usb_malloc+0x38>)
    26d8:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    26da:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    26de:	cmp	r3, #29
    26e0:	bgt.n	2704 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    26e2:	mov.w	r1, #2147483648	; 0x80000000
    26e6:	lsrs	r1, r3
    26e8:	bic.w	r2, r2, r1
    26ec:	str	r2, [r0, #0]
	__enable_irq();
    26ee:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    26f0:	ldr	r0, [pc, #28]	; (2710 <usb_malloc+0x3c>)
    26f2:	add.w	r3, r3, r3, lsl #3
    26f6:	lsls	r3, r3, #3
    26f8:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    26fa:	movs	r1, #0
    26fc:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    26fe:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2700:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2702:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2704:	cpsie	i
		return NULL;
    2706:	movs	r0, #0
    2708:	bx	lr
    270a:	nop
    270c:	.word	0x1fff0c5c
    2710:	.word	0x1fff03d0

00002714 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2714:	ldr	r3, [pc, #52]	; (274c <usb_free+0x38>)
    2716:	ldr	r2, [pc, #56]	; (2750 <usb_free+0x3c>)
    2718:	subs	r3, r0, r3
    271a:	umull	r2, r3, r2, r3
    271e:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2720:	cmp	r3, #29
    2722:	bhi.n	273e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2724:	ldr	r2, [pc, #44]	; (2754 <usb_free+0x40>)
    2726:	ldrb	r2, [r2, #0]
    2728:	cbnz	r2, 2740 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    272a:	cpsid	i
	usb_buffer_available |= mask;
    272c:	ldr	r0, [pc, #40]	; (2758 <usb_free+0x44>)
    272e:	mov.w	r1, #2147483648	; 0x80000000
    2732:	ldr	r2, [r0, #0]
    2734:	lsr.w	r3, r1, r3
    2738:	orrs	r2, r3
    273a:	str	r2, [r0, #0]
	__enable_irq();
    273c:	cpsie	i
    273e:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2740:	ldr	r2, [pc, #24]	; (275c <usb_free+0x48>)
    2742:	ldrb	r2, [r2, #0]
    2744:	cmp	r2, #0
    2746:	beq.n	272a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2748:	b.w	27c8 <usb_rx_memory>
    274c:	.word	0x1fff03d0
    2750:	.word	0x38e38e39
    2754:	.word	0x1fff1959
    2758:	.word	0x1fff0c5c
    275c:	.word	0x1fff1964

00002760 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2760:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2762:	cmp	r3, #4
    2764:	bhi.n	2790 <usb_rx+0x30>
	__disable_irq();
    2766:	cpsid	i
	ret = rx_first[endpoint];
    2768:	ldr	r1, [pc, #40]	; (2794 <usb_rx+0x34>)
    276a:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    276e:	cbz	r0, 278c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2770:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2772:	ldr	r4, [pc, #36]	; (2798 <usb_rx+0x38>)
    2774:	ldrh	r5, [r0, #0]
    2776:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    277a:	ldr	r6, [r0, #4]
    277c:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2780:	subs	r2, r2, r5
    2782:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2786:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2788:	pop	{r4, r5, r6}
    278a:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    278c:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    278e:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2790:	movs	r0, #0
    2792:	bx	lr
    2794:	.word	0x1fff18d0
    2798:	.word	0x1fff1df8

0000279c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    279c:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    279e:	cmp	r0, #4
    27a0:	bhi.n	27ba <usb_tx_packet_count+0x1e>
	__disable_irq();
    27a2:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    27a4:	ldr	r3, [pc, #28]	; (27c4 <usb_tx_packet_count+0x28>)
    27a6:	ldr.w	r3, [r3, r0, lsl #2]
    27aa:	cbz	r3, 27be <usb_tx_packet_count+0x22>
    27ac:	movs	r0, #0
    27ae:	ldr	r3, [r3, #4]
    27b0:	adds	r0, #1
    27b2:	cmp	r3, #0
    27b4:	bne.n	27ae <usb_tx_packet_count+0x12>
	__enable_irq();
    27b6:	cpsie	i
	return count;
    27b8:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    27ba:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    27bc:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    27be:	mov	r0, r3
    27c0:	b.n	27b6 <usb_tx_packet_count+0x1a>
    27c2:	nop
    27c4:	.word	0x1fff1928

000027c8 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    27c8:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    27ca:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    27cc:	ldr	r2, [pc, #204]	; (289c <usb_rx_memory+0xd4>)
    27ce:	ldrb	r3, [r2, #0]
    27d0:	lsls	r3, r3, #28
    27d2:	bpl.n	27e2 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    27d4:	ldr	r3, [pc, #200]	; (28a0 <usb_rx_memory+0xd8>)
    27d6:	ldr	r1, [r3, #32]
    27d8:	cmp	r1, #0
    27da:	beq.n	2864 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    27dc:	ldr	r1, [r3, #40]	; 0x28
    27de:	cmp	r1, #0
    27e0:	beq.n	2880 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    27e2:	ldrb	r3, [r2, #1]
    27e4:	lsls	r5, r3, #28
    27e6:	bpl.n	27f6 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    27e8:	ldr	r3, [pc, #180]	; (28a0 <usb_rx_memory+0xd8>)
    27ea:	ldr	r1, [r3, #64]	; 0x40
    27ec:	cmp	r1, #0
    27ee:	beq.n	288c <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    27f0:	ldr	r1, [r3, #72]	; 0x48
    27f2:	cmp	r1, #0
    27f4:	beq.n	2884 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    27f6:	ldrb	r3, [r2, #2]
    27f8:	lsls	r4, r3, #28
    27fa:	bpl.n	280a <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    27fc:	ldr	r3, [pc, #160]	; (28a0 <usb_rx_memory+0xd8>)
    27fe:	ldr	r1, [r3, #96]	; 0x60
    2800:	cmp	r1, #0
    2802:	beq.n	2890 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2804:	ldr	r1, [r3, #104]	; 0x68
    2806:	cmp	r1, #0
    2808:	beq.n	2888 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    280a:	ldrb	r3, [r2, #3]
    280c:	lsls	r1, r3, #28
    280e:	bpl.n	2820 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2810:	ldr	r3, [pc, #140]	; (28a0 <usb_rx_memory+0xd8>)
    2812:	ldr.w	r1, [r3, #128]	; 0x80
    2816:	cmp	r1, #0
    2818:	beq.n	2898 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    281a:	ldr.w	r1, [r3, #136]	; 0x88
    281e:	cbz	r1, 2846 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2820:	ldrb	r3, [r2, #4]
    2822:	lsls	r3, r3, #28
    2824:	bpl.n	2838 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2826:	ldr	r3, [pc, #120]	; (28a0 <usb_rx_memory+0xd8>)
    2828:	ldr.w	r2, [r3, #160]	; 0xa0
    282c:	cmp	r2, #0
    282e:	beq.n	2894 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2830:	ldr.w	r2, [r3, #168]	; 0xa8
    2834:	movs	r4, #21
    2836:	cbz	r2, 2848 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2838:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    283a:	ldr	r3, [pc, #104]	; (28a4 <usb_rx_memory+0xdc>)
    283c:	movs	r2, #0
    283e:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2840:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2842:	b.w	2714 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2846:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2848:	ldr	r1, [pc, #88]	; (28a4 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    284a:	ldr	r5, [pc, #92]	; (28a8 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    284c:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    284e:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2852:	add.w	r3, r3, r4, lsl #3
    2856:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2858:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    285a:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    285c:	strb	r2, [r1, #0]
				__enable_irq();
    285e:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2860:	pop	{r4, r5}
    2862:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2864:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2866:	ldr	r4, [pc, #60]	; (28a4 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2868:	ldr	r5, [pc, #64]	; (28ac <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    286a:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    286c:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2870:	add.w	r3, r3, r2, lsl #3
    2874:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2876:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2878:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    287a:	strb	r2, [r4, #0]
				__enable_irq();
    287c:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    287e:	b.n	2860 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2880:	movs	r4, #5
    2882:	b.n	2848 <usb_rx_memory+0x80>
    2884:	movs	r4, #9
    2886:	b.n	2848 <usb_rx_memory+0x80>
    2888:	movs	r4, #13
    288a:	b.n	2848 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    288c:	movs	r2, #8
    288e:	b.n	2866 <usb_rx_memory+0x9e>
    2890:	movs	r2, #12
    2892:	b.n	2866 <usb_rx_memory+0x9e>
    2894:	movs	r2, #20
    2896:	b.n	2866 <usb_rx_memory+0x9e>
    2898:	movs	r2, #16
    289a:	b.n	2866 <usb_rx_memory+0x9e>
    289c:	.word	0x00004b38
    28a0:	.word	0x1fff0000
    28a4:	.word	0x1fff1959
    28a8:	.word	0x004000c8
    28ac:	.word	0x00400088

000028b0 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    28b0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    28b2:	cmp	r3, #4
    28b4:	bhi.n	28f2 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    28b6:	ldr	r2, [pc, #108]	; (2924 <usb_tx+0x74>)
    28b8:	lsls	r0, r0, #5
    28ba:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    28be:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    28c0:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    28c2:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    28c4:	ldr	r4, [pc, #96]	; (2928 <usb_tx+0x78>)
    28c6:	ldrb	r2, [r4, r3]
    28c8:	cmp	r2, #3
    28ca:	bhi.n	2904 <usb_tx+0x54>
    28cc:	tbb	[pc, r2]
    28d0:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    28d4:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    28d6:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    28d8:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    28da:	tst.w	r0, #8
    28de:	ite	ne
    28e0:	movne	r3, #200	; 0xc8
    28e2:	moveq	r3, #136	; 0x88
    28e4:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    28e8:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    28ea:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    28ec:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    28ee:	cpsie	i
}
    28f0:	pop	{r4, r5}
    28f2:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    28f4:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    28f6:	movs	r2, #2
		break;
    28f8:	b.n	28d6 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    28fa:	movs	r2, #5
    28fc:	b.n	28d6 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    28fe:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2900:	movs	r2, #4
		break;
    2902:	b.n	28d6 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2904:	ldr	r2, [pc, #36]	; (292c <usb_tx+0x7c>)
    2906:	ldr.w	r0, [r2, r3, lsl #2]
    290a:	cbz	r0, 291c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    290c:	ldr	r2, [pc, #32]	; (2930 <usb_tx+0x80>)
    290e:	ldr.w	r0, [r2, r3, lsl #2]
    2912:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2914:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2918:	cpsie	i
		return;
    291a:	b.n	28f0 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    291c:	str.w	r1, [r2, r3, lsl #2]
    2920:	ldr	r2, [pc, #12]	; (2930 <usb_tx+0x80>)
    2922:	b.n	2914 <usb_tx+0x64>
    2924:	.word	0x1fff0000
    2928:	.word	0x1fff1968
    292c:	.word	0x1fff1928
    2930:	.word	0x1fff193c

00002934 <usb_isr>:
}



void usb_isr(void)
{
    2934:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2938:	ldr.w	fp, [pc, #776]	; 2c44 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    293c:	ldr.w	sl, [pc, #776]	; 2c48 <usb_isr+0x314>
}



void usb_isr(void)
{
    2940:	sub	sp, #28
    2942:	b.n	29ce <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2944:	ldr	r7, [pc, #680]	; (2bf0 <usb_isr+0x2bc>)
    2946:	mov.w	r8, r3, lsr #2
    294a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    294e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2950:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2954:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2958:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    295a:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    295e:	and.w	r4, r3, #255	; 0xff
    2962:	cmp	r3, #0
    2964:	bne.w	2b68 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2968:	ldr.w	r3, [r7, r8, lsl #3]
    296c:	lsrs	r3, r3, #16
    296e:	uxth	r1, r3
    2970:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2974:	cmp	r3, #0
    2976:	beq.w	2b56 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    297a:	ldr	r3, [pc, #632]	; (2bf4 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    297c:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2980:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2984:	ldr.w	r2, [r3, r6, lsl #2]
    2988:	cmp	r2, #0
    298a:	beq.w	2df8 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    298e:	ldr	r5, [pc, #616]	; (2bf8 <usb_isr+0x2c4>)
    2990:	ldr.w	r3, [r5, r6, lsl #2]
    2994:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2996:	ldr	r4, [pc, #612]	; (2bfc <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2998:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    299c:	ldrh.w	r3, [r4, r6, lsl #1]
    29a0:	add	r1, r3
    29a2:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    29a6:	bl	26d4 <usb_malloc>
					if (packet) {
    29aa:	cmp	r0, #0
    29ac:	beq.w	2dea <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    29b0:	ldr	r2, [pc, #588]	; (2c00 <usb_isr+0x2cc>)
    29b2:	ldr	r3, [pc, #592]	; (2c04 <usb_isr+0x2d0>)
    29b4:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    29b8:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    29bc:	it	ne
    29be:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    29c0:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    29c4:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    29c8:	movs	r3, #8
    29ca:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    29ce:	ldrb.w	r4, [fp]
    29d2:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    29d4:	lsls	r0, r4, #29
    29d6:	bpl.n	2a12 <usb_isr+0xde>
		if (usb_configuration) {
    29d8:	ldr	r3, [pc, #556]	; (2c08 <usb_isr+0x2d4>)
    29da:	ldrb	r3, [r3, #0]
    29dc:	cbz	r3, 2a0c <usb_isr+0xd8>
			t = usb_reboot_timer;
    29de:	ldr	r1, [pc, #556]	; (2c0c <usb_isr+0x2d8>)
    29e0:	ldrb	r2, [r1, #0]
			if (t) {
    29e2:	and.w	r3, r2, #255	; 0xff
    29e6:	cbz	r2, 29f2 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    29e8:	subs	r3, #1
    29ea:	uxtb	r3, r3
    29ec:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    29ee:	cbnz	r3, 29f2 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    29f0:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    29f2:	ldr	r1, [pc, #540]	; (2c10 <usb_isr+0x2dc>)
    29f4:	ldrb	r2, [r1, #0]
			if (t) {
    29f6:	and.w	r3, r2, #255	; 0xff
    29fa:	cbz	r2, 2a08 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    29fc:	subs	r3, #1
    29fe:	uxtb	r3, r3
    2a00:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2a02:	cmp	r3, #0
    2a04:	beq.w	2d96 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2a08:	bl	226c <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2a0c:	movs	r3, #4
    2a0e:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2a12:	and.w	r3, r4, #8
    2a16:	and.w	r2, r3, #255	; 0xff
    2a1a:	cmp	r3, #0
    2a1c:	beq.w	2bb0 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2a20:	ldrb.w	r3, [sl]
    2a24:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2a26:	lsrs	r6, r3, #4
    2a28:	bne.n	2944 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2a2a:	lsrs	r4, r3, #2
    2a2c:	ldr.w	r9, [pc, #448]	; 2bf0 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2a30:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2a34:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2a38:	ubfx	r2, r2, #2, #4
    2a3c:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2a3e:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2a40:	cmp	r2, #12
    2a42:	bhi.w	2b4e <usb_isr+0x21a>
    2a46:	tbb	[pc, r2]
    2a4a:	.short	0x7878
    2a4c:	.word	0x82828282
    2a50:	.word	0x82438282
    2a54:	.short	0x8282
    2a56:	.byte	0x07
    2a57:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2a58:	ldr	r0, [r1, #0]
    2a5a:	ldr	r5, [pc, #440]	; (2c14 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2a5c:	ldr	r3, [pc, #416]	; (2c00 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2a5e:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2a60:	ldr	r7, [pc, #436]	; (2c18 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2a62:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2a66:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2a68:	ldr	r6, [pc, #432]	; (2c1c <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2a6a:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2a6c:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2a70:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2a72:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2a74:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2a76:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2a7a:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2a7c:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2a80:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2a84:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2a86:	bhi.w	2c4c <usb_isr+0x318>
    2a8a:	cmp.w	r1, #1664	; 0x680
    2a8e:	bcs.w	30b8 <usb_isr+0x784>
    2a92:	cmp.w	r1, #258	; 0x102
    2a96:	beq.w	2e66 <usb_isr+0x532>
    2a9a:	bhi.w	2e30 <usb_isr+0x4fc>
    2a9e:	cmp	r1, #128	; 0x80
    2aa0:	beq.w	30ec <usb_isr+0x7b8>
    2aa4:	cmp	r1, #130	; 0x82
    2aa6:	bne.w	2e72 <usb_isr+0x53e>
    2aaa:	ldrh	r1, [r5, #4]
    2aac:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2ab0:	cmp	r1, #5
    2ab2:	bhi.w	2e72 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2ab6:	ldr	r3, [pc, #360]	; (2c20 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2ab8:	ldr	r4, [pc, #360]	; (2c24 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2aba:	lsls	r1, r1, #2
    2abc:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2abe:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2ac0:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2ac2:	ldrb	r2, [r3, #0]
    2ac4:	lsls	r3, r2, #30
    2ac6:	bpl.w	31fc <usb_isr+0x8c8>
    2aca:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2acc:	movs	r0, #2
    2ace:	b.n	2efa <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2ad0:	ldr	r7, [pc, #324]	; (2c18 <usb_isr+0x2e4>)
    2ad2:	ldr	r2, [r7, #0]
		if (data) {
    2ad4:	cbz	r2, 2b24 <usb_isr+0x1f0>
			size = ep0_tx_len;
    2ad6:	ldr	r3, [pc, #336]	; (2c28 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ad8:	ldr	r6, [pc, #320]	; (2c1c <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2ada:	ldr	r1, [pc, #336]	; (2c2c <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2adc:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ade:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2ae0:	ldrb	r5, [r1, #0]
    2ae2:	cmp	r0, #64	; 0x40
    2ae4:	mov	lr, r0
    2ae6:	orr.w	r8, r5, #2
    2aea:	it	cs
    2aec:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2af0:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2af2:	eor.w	r4, r4, #1
    2af6:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2af8:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2afc:	ite	eq
    2afe:	moveq	r4, #136	; 0x88
    2b00:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2b02:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2b06:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2b08:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2b0c:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2b10:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2b12:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2b14:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2b18:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2b1a:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2b1c:	cmp	r0, #0
    2b1e:	beq.w	2c8e <usb_isr+0x35a>
    2b22:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2b24:	ldr	r3, [pc, #236]	; (2c14 <usb_isr+0x2e0>)
    2b26:	ldrh	r2, [r3, #0]
    2b28:	cmp.w	r2, #1280	; 0x500
    2b2c:	bne.n	2b4e <usb_isr+0x21a>
			setup.bRequest = 0;
    2b2e:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2b30:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2b32:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2b34:	ldr	r3, [pc, #248]	; (2c30 <usb_isr+0x2fc>)
    2b36:	strb	r2, [r3, #0]
    2b38:	b.n	2b4e <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2b3a:	ldr	r2, [pc, #216]	; (2c14 <usb_isr+0x2e0>)
    2b3c:	ldrh	r0, [r2, #0]
    2b3e:	movw	r2, #8225	; 0x2021
    2b42:	cmp	r0, r2
    2b44:	beq.w	2c98 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2b48:	ldr	r2, [pc, #180]	; (2c00 <usb_isr+0x2cc>)
    2b4a:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2b4e:	ldr	r2, [pc, #228]	; (2c34 <usb_isr+0x300>)
    2b50:	movs	r3, #1
    2b52:	strb	r3, [r2, #0]
    2b54:	b.n	29c8 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2b56:	ldr	r2, [pc, #168]	; (2c00 <usb_isr+0x2cc>)
    2b58:	ldr	r3, [pc, #168]	; (2c04 <usb_isr+0x2d0>)
    2b5a:	tst.w	r9, #8
    2b5e:	it	ne
    2b60:	movne	r3, r2
    2b62:	str.w	r3, [r7, r8, lsl #3]
    2b66:	b.n	29c8 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2b68:	bl	2714 <usb_free>
				packet = tx_first[endpoint];
    2b6c:	ldr	r2, [pc, #200]	; (2c38 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2b6e:	ldr	r1, [pc, #204]	; (2c3c <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2b70:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2b74:	cmp	r3, #0
    2b76:	beq.w	2e00 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2b7a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2b7c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2b7e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2b82:	add.w	r2, r3, #8
    2b86:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2b8a:	cmp	r4, #3
    2b8c:	bhi.n	2b9a <usb_isr+0x266>
    2b8e:	tbb	[pc, r4]
    2b92:	.short	0x022c
    2b94:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2b96:	movs	r2, #2
    2b98:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2b9a:	ldrh	r2, [r3, #0]
    2b9c:	tst.w	r9, #8
    2ba0:	ite	eq
    2ba2:	moveq	r3, #136	; 0x88
    2ba4:	movne	r3, #200	; 0xc8
    2ba6:	orr.w	r3, r3, r2, lsl #16
    2baa:	str.w	r3, [r7, r8, lsl #3]
    2bae:	b.n	29c8 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2bb0:	lsls	r0, r4, #31
    2bb2:	bmi.w	2d9c <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2bb6:	lsls	r1, r4, #24
    2bb8:	bmi.w	2e1c <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2bbc:	lsls	r2, r4, #30
    2bbe:	bpl.n	2bce <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2bc0:	ldr	r2, [pc, #124]	; (2c40 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2bc2:	ldr	r1, [pc, #128]	; (2c44 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2bc4:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2bc6:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2bc8:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2bca:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2bcc:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2bce:	lsls	r3, r4, #27
    2bd0:	bpl.n	2bd8 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2bd2:	ldr	r3, [pc, #112]	; (2c44 <usb_isr+0x310>)
    2bd4:	movs	r2, #16
    2bd6:	strb	r2, [r3, #0]
	}

}
    2bd8:	add	sp, #28
    2bda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2bde:	movs	r2, #4
    2be0:	strb	r2, [r1, r6]
						break;
    2be2:	b.n	2b9a <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2be4:	movs	r2, #5
    2be6:	strb	r2, [r1, r6]
						break;
    2be8:	b.n	2b9a <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2bea:	movs	r2, #3
    2bec:	strb	r2, [r1, r6]
						break;
    2bee:	b.n	2b9a <usb_isr+0x266>
    2bf0:	.word	0x1fff0000
    2bf4:	.word	0x1fff18d0
    2bf8:	.word	0x1fff1878
    2bfc:	.word	0x1fff1df8
    2c00:	.word	0x004000c8
    2c04:	.word	0x00400088
    2c08:	.word	0x1fff1964
    2c0c:	.word	0x1fff18e5
    2c10:	.word	0x1fff17f8
    2c14:	.word	0x1fff1950
    2c18:	.word	0x1fff1874
    2c1c:	.word	0x1fff18e4
    2c20:	.word	0x400720c0
    2c24:	.word	0x1fff195c
    2c28:	.word	0x1fff188c
    2c2c:	.word	0x1fff1958
    2c30:	.word	0x40072098
    2c34:	.word	0x40072094
    2c38:	.word	0x1fff1928
    2c3c:	.word	0x1fff1968
    2c40:	.word	0x40072088
    2c44:	.word	0x40072080
    2c48:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2c4c:	movw	r4, #8225	; 0x2021
    2c50:	cmp	r1, r4
    2c52:	beq.w	2d8e <usb_isr+0x45a>
    2c56:	bhi.n	2cec <usb_isr+0x3b8>
    2c58:	cmp.w	r1, #2176	; 0x880
    2c5c:	beq.w	2ef2 <usb_isr+0x5be>
    2c60:	cmp.w	r1, #2304	; 0x900
    2c64:	bne.w	2e72 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2c68:	ldr	r2, [pc, #712]	; (2f34 <usb_isr+0x600>)
    2c6a:	ldr	r4, [pc, #716]	; (2f38 <usb_isr+0x604>)
    2c6c:	ldrb	r1, [r5, #2]
    2c6e:	strb	r1, [r2, #0]
    2c70:	add.w	r5, r4, #160	; 0xa0
    2c74:	b.n	2c7e <usb_isr+0x34a>
    2c76:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2c78:	cmp	r5, r4
    2c7a:	beq.w	2f90 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2c7e:	ldr	r3, [r4, #32]
    2c80:	lsls	r1, r3, #24
    2c82:	bpl.n	2c76 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2c84:	ldr	r0, [r4, #36]	; 0x24
    2c86:	subs	r0, #8
    2c88:	bl	2714 <usb_free>
    2c8c:	b.n	2c76 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2c8e:	cmp.w	lr, #64	; 0x40
    2c92:	it	ne
    2c94:	movne	r2, #0
    2c96:	b.n	2b22 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2c98:	ldr	r2, [pc, #672]	; (2f3c <usb_isr+0x608>)
    2c9a:	ldrb	r5, [r1, #0]
    2c9c:	ldrb	r0, [r1, #1]
    2c9e:	strb	r5, [r2, #0]
    2ca0:	strb	r0, [r2, #1]
    2ca2:	ldrb	r5, [r1, #2]
    2ca4:	ldrb	r0, [r1, #3]
    2ca6:	strb	r5, [r2, #2]
    2ca8:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2caa:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2cac:	ldrb	r5, [r1, #4]
    2cae:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2cb0:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2cb2:	ldrb	r5, [r1, #5]
    2cb4:	ldrb	r1, [r1, #6]
    2cb6:	strb	r5, [r2, #5]
    2cb8:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2cba:	beq.w	2eea <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2cbe:	ldr	r1, [pc, #640]	; (2f40 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cc0:	ldr	r6, [pc, #640]	; (2f44 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2cc2:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cc4:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2cc6:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cca:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2ccc:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2cd0:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cd2:	ite	eq
    2cd4:	moveq	r1, #136	; 0x88
    2cd6:	movne	r1, #200	; 0xc8
    2cd8:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2cdc:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2ce0:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2ce4:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2ce6:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2ce8:	str	r1, [r2, #4]
    2cea:	b.n	2b48 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2cec:	movw	r4, #8737	; 0x2221
    2cf0:	cmp	r1, r4
    2cf2:	bne.w	3106 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2cf6:	ldr.w	ip, [pc, #656]	; 2f88 <usb_isr+0x654>
    2cfa:	ldr	r3, [pc, #588]	; (2f48 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2cfc:	ldr	r1, [pc, #588]	; (2f4c <usb_isr+0x618>)
    2cfe:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2d00:	ldr.w	r5, [ip]
    2d04:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2d06:	str	r0, [sp, #4]
    2d08:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2d0a:	movs	r0, #0
    2d0c:	str	r0, [sp, #8]
    2d0e:	mov	r8, r0
    2d10:	mov	ip, r0
    2d12:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d14:	ldr	r1, [pc, #552]	; (2f40 <usb_isr+0x60c>)
    2d16:	ldrb	r5, [r1, #0]
    2d18:	orr.w	lr, r5, #2
    2d1c:	add.w	r3, r9, lr, lsl #3
    2d20:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d22:	ldr	r3, [sp, #4]
    2d24:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d26:	ldr	r3, [sp, #12]
    2d28:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d2a:	ite	eq
    2d2c:	moveq	r4, #136	; 0x88
    2d2e:	movne	r4, #200	; 0xc8
    2d30:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2d34:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d38:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2d3c:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2d3e:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d40:	ldr.w	lr, [pc, #500]	; 2f38 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2d44:	ldr	r3, [pc, #508]	; (2f44 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    2d46:	ldr.w	r8, [pc, #504]	; 2f40 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2d4a:	cmp	r0, #0
    2d4c:	bne.w	2e80 <usb_isr+0x54c>
    2d50:	cmp.w	ip, #64	; 0x40
    2d54:	bne.n	2d8e <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d56:	orr.w	ip, r4, #2
    2d5a:	add.w	r3, r9, ip, lsl #3
    2d5e:	ldr	r4, [sp, #8]
    2d60:	ldr.w	lr, [pc, #468]	; 2f38 <usb_isr+0x604>
    2d64:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d66:	cmp	r2, #0
    2d68:	bne.w	2eac <usb_isr+0x578>
    2d6c:	lsls	r2, r0, #16
    2d6e:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2d72:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d76:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2d7a:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2d7c:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2d7e:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2d80:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2d82:	cmp	r0, #64	; 0x40
    2d84:	bne.n	2d8e <usb_isr+0x45a>
    2d86:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2d88:	ldr	r2, [pc, #452]	; (2f50 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2d8a:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2d8c:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2d8e:	ldr	r2, [pc, #452]	; (2f54 <usb_isr+0x620>)
    2d90:	movs	r3, #1
    2d92:	strb	r3, [r2, #0]
    2d94:	b.n	2b4e <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    2d96:	bl	1af4 <usb_serial_flush_callback>
    2d9a:	b.n	2a08 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2d9c:	ldr	r3, [pc, #408]	; (2f38 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2d9e:	ldr	r0, [pc, #436]	; (2f54 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2da0:	ldr	r1, [pc, #412]	; (2f40 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2da2:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2da4:	mov.w	lr, #2
    2da8:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2dac:	ldr	r7, [pc, #424]	; (2f58 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2dae:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2db0:	ldr	r1, [pc, #424]	; (2f5c <usb_isr+0x628>)
    2db2:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2db4:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2db6:	ldr	r6, [pc, #424]	; (2f60 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2db8:	ldr	r5, [pc, #424]	; (2f64 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2dba:	ldr	r4, [pc, #428]	; (2f68 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2dbc:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2dbe:	movs	r1, #13
    2dc0:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2dc2:	movs	r1, #255	; 0xff
    2dc4:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2dc6:	ldr.w	lr, [pc, #452]	; 2f8c <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    2dca:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2dcc:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2dce:	ldr	r5, [pc, #412]	; (2f6c <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2dd0:	ldr	r2, [pc, #412]	; (2f70 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2dd2:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2dd6:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2dd8:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2dda:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2dde:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2de0:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2de2:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    2de4:	add	sp, #28
    2de6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    2dea:	ldr	r2, [pc, #392]	; (2f74 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2dec:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2df0:	ldrb	r3, [r2, #0]
    2df2:	adds	r3, #1
    2df4:	strb	r3, [r2, #0]
    2df6:	b.n	29c8 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2df8:	str.w	r0, [r3, r6, lsl #2]
    2dfc:	ldr	r5, [pc, #376]	; (2f78 <usb_isr+0x644>)
    2dfe:	b.n	2996 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2e00:	ldrb	r3, [r1, r6]
    2e02:	cmp	r3, #3
    2e04:	bhi.n	2edc <usb_isr+0x5a8>
    2e06:	add	r2, pc, #4	; (adr r2, 2e0c <usb_isr+0x4d8>)
    2e08:	ldr.w	pc, [r2, r3, lsl #2]
    2e0c:	.word	0x000029c9
    2e10:	.word	0x000029c9
    2e14:	.word	0x00002e61
    2e18:	.word	0x00002e5b
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2e1c:	ldr	r1, [pc, #312]	; (2f58 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    2e1e:	ldr	r3, [pc, #324]	; (2f64 <usb_isr+0x630>)
    2e20:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2e22:	movs	r0, #13
    2e24:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    2e26:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2e28:	lsls	r2, r4, #30
    2e2a:	bpl.w	2bce <usb_isr+0x29a>
    2e2e:	b.n	2bc0 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2e30:	movw	r2, #770	; 0x302
    2e34:	cmp	r1, r2
    2e36:	bne.w	30f6 <usb_isr+0x7c2>
    2e3a:	ldrh	r1, [r5, #4]
    2e3c:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2e40:	cmp	r1, #5
    2e42:	bhi.n	2e72 <usb_isr+0x53e>
    2e44:	ldrh	r2, [r5, #2]
    2e46:	cbnz	r2, 2e72 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    2e48:	ldr	r4, [pc, #268]	; (2f58 <usb_isr+0x624>)
    2e4a:	str	r0, [sp, #4]
    2e4c:	lsls	r1, r1, #2
    2e4e:	add	r4, r1
    2e50:	ldrb	r1, [r4, #0]
    2e52:	orr.w	r1, r1, #2
    2e56:	strb	r1, [r4, #0]
    2e58:	b.n	2d0a <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2e5a:	movs	r3, #1
    2e5c:	strb	r3, [r1, r6]
						break;
    2e5e:	b.n	29c8 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2e60:	movs	r3, #0
    2e62:	strb	r3, [r1, r6]
						break;
    2e64:	b.n	29c8 <usb_isr+0x94>
    2e66:	ldrh	r1, [r5, #4]
    2e68:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2e6c:	cmp	r1, #5
    2e6e:	bls.w	3110 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2e72:	ldr	r2, [pc, #228]	; (2f58 <usb_isr+0x624>)
    2e74:	movs	r3, #15
    2e76:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2e78:	ldr	r2, [pc, #216]	; (2f54 <usb_isr+0x620>)
    2e7a:	movs	r3, #1
    2e7c:	strb	r3, [r2, #0]
    2e7e:	b.n	2b4e <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2e80:	cmp	r0, #64	; 0x40
    2e82:	bls.w	2d56 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e86:	orr.w	r4, r4, #2
    2e8a:	add.w	r1, lr, r4, lsl #3
    2e8e:	ldr	r6, [sp, #8]
    2e90:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e92:	cbz	r2, 2ec4 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    2e94:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e98:	ldr	r2, [pc, #224]	; (2f7c <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    2e9a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2e9c:	mov	r3, r6
    2e9e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2ea0:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2ea4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ea6:	str.w	r2, [lr, r4, lsl #3]
    2eaa:	b.n	2d88 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    2eac:	ldrb.w	r3, [sp, #4]
    2eb0:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2eb2:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2eb4:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2eb6:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2eb8:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2ebc:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ebe:	str.w	r2, [lr, ip, lsl #3]
    2ec2:	b.n	2d82 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    2ec4:	ldrb.w	r1, [sp, #4]
    2ec8:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2eca:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ecc:	ldr	r2, [pc, #140]	; (2f5c <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2ece:	strb.w	r5, [r8]
    2ed2:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2ed4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ed6:	str.w	r2, [lr, r4, lsl #3]
    2eda:	b.n	2d88 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2edc:	tst.w	r9, #8
    2ee0:	ite	eq
    2ee2:	moveq	r3, #2
    2ee4:	movne	r3, #3
    2ee6:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2ee8:	b.n	29c8 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2eea:	ldr	r2, [pc, #148]	; (2f80 <usb_isr+0x64c>)
    2eec:	movs	r1, #15
    2eee:	strb	r1, [r2, #0]
    2ef0:	b.n	2cbe <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2ef2:	ldr	r2, [pc, #64]	; (2f34 <usb_isr+0x600>)
    2ef4:	ldr	r4, [pc, #140]	; (2f84 <usb_isr+0x650>)
    2ef6:	ldrb	r2, [r2, #0]
    2ef8:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2efa:	ldrh	r2, [r5, #6]
    2efc:	cmp	r2, r0
    2efe:	bcs.w	32c4 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f02:	ldr	r1, [pc, #60]	; (2f40 <usb_isr+0x60c>)
    2f04:	ldrb	r5, [r1, #0]
    2f06:	cmp	r2, #64	; 0x40
    2f08:	mov	ip, r2
    2f0a:	orr.w	lr, r5, #2
    2f0e:	it	cs
    2f10:	movcs.w	ip, #64	; 0x40
    2f14:	add.w	r3, r4, ip
    2f18:	add.w	r0, r9, lr, lsl #3
    2f1c:	str	r3, [sp, #8]
    2f1e:	movs	r3, #1
    2f20:	str	r4, [r0, #4]
    2f22:	mov.w	r8, ip, lsl #16
    2f26:	rsb	r0, ip, r2
    2f2a:	str	r3, [sp, #4]
    2f2c:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f2e:	movs	r4, #200	; 0xc8
    2f30:	b.n	2d30 <usb_isr+0x3fc>
    2f32:	nop
    2f34:	.word	0x1fff1964
    2f38:	.word	0x1fff0000
    2f3c:	.word	0x1fff1cc0
    2f40:	.word	0x1fff1958
    2f44:	.word	0x1fff18e4
    2f48:	.word	0x1fff1cc8
    2f4c:	.word	0x1fff1808
    2f50:	.word	0x1fff188c
    2f54:	.word	0x40072094
    2f58:	.word	0x400720c0
    2f5c:	.word	0x00400088
    2f60:	.word	0x40072088
    2f64:	.word	0x40072080
    2f68:	.word	0x40072098
    2f6c:	.word	0x1fff1890
    2f70:	.word	0x1fff18e8
    2f74:	.word	0x1fff1959
    2f78:	.word	0x1fff1878
    2f7c:	.word	0x004000c8
    2f80:	.word	0x1fff18e5
    2f84:	.word	0x1fff195c
    2f88:	.word	0x1fff1810
    2f8c:	.word	0x4007208c
    2f90:	ldr	r4, [pc, #704]	; (3254 <usb_isr+0x920>)
    2f92:	ldr	r2, [pc, #708]	; (3258 <usb_isr+0x924>)
    2f94:	ldr	r1, [pc, #708]	; (325c <usb_isr+0x928>)
    2f96:	ldr	r0, [pc, #712]	; (3260 <usb_isr+0x92c>)
    2f98:	ldr	r5, [pc, #712]	; (3264 <usb_isr+0x930>)
    2f9a:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2f9c:	movs	r3, #0
    2f9e:	ldr	r4, [pc, #712]	; (3268 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2fa0:	str	r4, [sp, #8]
    2fa2:	str	r6, [sp, #20]
    2fa4:	str	r5, [sp, #12]
    2fa6:	mov	r8, r0
    2fa8:	mov	r4, r3
    2faa:	str	r7, [sp, #16]
    2fac:	mov	r6, r2
    2fae:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2fb0:	ldr	r0, [r6, #0]
			while (p) {
    2fb2:	cbz	r0, 2fc0 <usb_isr+0x68c>
				n = p->next;
    2fb4:	ldr	r7, [r0, #4]
				usb_free(p);
    2fb6:	bl	2714 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    2fba:	mov	r0, r7
    2fbc:	cmp	r7, #0
    2fbe:	bne.n	2fb4 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2fc0:	movs	r3, #0
    2fc2:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2fc4:	ldr	r3, [sp, #12]
			p = tx_first[i];
    2fc6:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2fc8:	mov	r2, r3
    2fca:	movs	r3, #0
    2fcc:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2fd0:	cbz	r0, 2fde <usb_isr+0x6aa>
				n = p->next;
    2fd2:	ldr	r7, [r0, #4]
				usb_free(p);
    2fd4:	bl	2714 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2fd8:	mov	r0, r7
    2fda:	cmp	r7, #0
    2fdc:	bne.n	2fd2 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2fde:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2fe0:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2fe2:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2fe4:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    2fe6:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    2fea:	ldr	r2, [sp, #8]
    2fec:	mov.w	r1, #0
			switch (tx_state[i]) {
    2ff0:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    2ff2:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    2ff6:	cmp	r3, #3
    2ff8:	bhi.n	300a <usb_isr+0x6d6>
    2ffa:	tbb	[pc, r3]
    2ffe:	.short	0x0258
    3000:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3002:	ldr	r3, [sp, #4]
    3004:	mov.w	r2, #1
    3008:	strb	r2, [r3, #0]
    300a:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    300c:	adds	r4, #1
    300e:	adds	r3, #1
    3010:	cmp	r4, #5
    3012:	add.w	r6, r6, #4
    3016:	add.w	r5, r5, #4
    301a:	str	r3, [sp, #4]
    301c:	bne.n	2fb0 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    301e:	ldr	r4, [pc, #588]	; (326c <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3020:	ldr	r5, [pc, #588]	; (3270 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3022:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3024:	ldr	r3, [pc, #588]	; (3274 <usb_isr+0x940>)
    3026:	ldr	r7, [sp, #16]
    3028:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    302a:	movs	r1, #0
    302c:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    302e:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3030:	lsls	r2, r2, #28
    3032:	bmi.n	312a <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3034:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3036:	ldr	r1, [pc, #576]	; (3278 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3038:	ldr.w	r8, [pc, #588]	; 3288 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    303c:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    303e:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3040:	mov.w	r1, #0
    3044:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3048:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    304c:	bmi.w	31d6 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3050:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3052:	ldr	r1, [pc, #552]	; (327c <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3054:	ldr.w	r8, [pc, #560]	; 3288 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3058:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    305a:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    305c:	mov.w	r1, #0
    3060:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3064:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3068:	bmi.w	31ae <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    306c:	ldr	r1, [pc, #528]	; (3280 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    306e:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3070:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3072:	movs	r1, #0
    3074:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3078:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    307c:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    307e:	ldr.w	r8, [pc, #520]	; 3288 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3082:	bmi.n	3180 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3084:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3086:	ldr	r1, [pc, #508]	; (3284 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3088:	ldr	r4, [pc, #508]	; (3288 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    308a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    308c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    308e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3090:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3094:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3098:	bmi.n	3156 <usb_isr+0x822>
    309a:	ldrb	r3, [r6, #0]
    309c:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    309e:	movs	r1, #0
    30a0:	eor.w	r2, r3, #1
    30a4:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    30a8:	str.w	r1, [r9, #184]	; 0xb8
    30ac:	b.n	2d0a <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    30ae:	ldr	r3, [sp, #4]
    30b0:	mov.w	r2, #0
    30b4:	strb	r2, [r3, #0]
    30b6:	b.n	300a <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    30b8:	ldr	r2, [pc, #464]	; (328c <usb_isr+0x958>)
    30ba:	ldr	r4, [r2, #4]
    30bc:	cmp	r4, #0
    30be:	beq.w	2e72 <usb_isr+0x53e>
    30c2:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    30c4:	ldrh.w	lr, [r5, #4]
    30c8:	b.n	30d4 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    30ca:	adds	r2, #12
			if (list->addr == NULL) break;
    30cc:	ldr	r4, [r2, #4]
    30ce:	cmp	r4, #0
    30d0:	beq.w	2e72 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    30d4:	ldrh	r3, [r2, #0]
    30d6:	cmp	r3, r0
    30d8:	bne.n	30ca <usb_isr+0x796>
    30da:	ldrh	r3, [r2, #2]
    30dc:	cmp	r3, lr
    30de:	bne.n	30ca <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    30e0:	lsrs	r0, r0, #8
    30e2:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    30e4:	ite	eq
    30e6:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    30e8:	ldrhne	r0, [r2, #8]
    30ea:	b.n	2efa <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    30ec:	ldr	r4, [pc, #416]	; (3290 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    30ee:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    30f0:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    30f2:	strb	r2, [r4, #1]
    30f4:	b.n	2efa <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    30f6:	cmp.w	r1, #1280	; 0x500
    30fa:	bne.w	2e72 <usb_isr+0x53e>
    30fe:	movs	r3, #1
    3100:	movs	r2, #0
    3102:	str	r3, [sp, #4]
    3104:	b.n	2d0a <usb_isr+0x3d6>
    3106:	movw	r2, #8993	; 0x2321
    310a:	cmp	r1, r2
    310c:	beq.n	30fe <usb_isr+0x7ca>
    310e:	b.n	2e72 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3110:	ldrh	r2, [r5, #2]
    3112:	cmp	r2, #0
    3114:	bne.w	2e72 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3118:	ldr	r4, [pc, #376]	; (3294 <usb_isr+0x960>)
    311a:	str	r0, [sp, #4]
    311c:	lsls	r1, r1, #2
    311e:	add	r4, r1
    3120:	ldrb	r1, [r4, #0]
    3122:	bic.w	r1, r1, #2
    3126:	strb	r1, [r4, #0]
    3128:	b.n	2d0a <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    312a:	bl	26d4 <usb_malloc>
				if (p) {
    312e:	cmp	r0, #0
    3130:	beq.w	32a0 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3134:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3136:	ldr	r2, [pc, #352]	; (3298 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3138:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    313c:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3140:	bl	26d4 <usb_malloc>
				if (p) {
    3144:	cmp	r0, #0
    3146:	beq.n	3248 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3148:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    314a:	ldr	r2, [pc, #336]	; (329c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    314c:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3150:	str.w	r2, [r9, #40]	; 0x28
    3154:	b.n	3034 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3156:	bl	26d4 <usb_malloc>
				if (p) {
    315a:	cmp	r0, #0
    315c:	beq.n	320c <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    315e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3160:	ldr	r2, [pc, #308]	; (3298 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3162:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3166:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    316a:	bl	26d4 <usb_malloc>
				if (p) {
    316e:	cmp	r0, #0
    3170:	beq.n	3200 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3172:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3174:	ldr	r2, [pc, #292]	; (329c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3176:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    317a:	str.w	r2, [r9, #168]	; 0xa8
    317e:	b.n	309a <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3180:	bl	26d4 <usb_malloc>
				if (p) {
    3184:	cmp	r0, #0
    3186:	beq.w	32b8 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    318a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    318c:	ldr	r2, [pc, #264]	; (3298 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    318e:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3192:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3196:	bl	26d4 <usb_malloc>
				if (p) {
    319a:	cmp	r0, #0
    319c:	beq.w	32ac <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    31a0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    31a2:	ldr	r2, [pc, #248]	; (329c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    31a4:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    31a8:	str.w	r2, [r9, #136]	; 0x88
    31ac:	b.n	3084 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    31ae:	bl	26d4 <usb_malloc>
				if (p) {
    31b2:	cmp	r0, #0
    31b4:	beq.n	323c <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    31b6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    31b8:	ldr	r2, [pc, #220]	; (3298 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    31ba:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    31be:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    31c2:	bl	26d4 <usb_malloc>
				if (p) {
    31c6:	cbz	r0, 3230 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    31c8:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    31ca:	ldr	r2, [pc, #208]	; (329c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    31cc:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    31d0:	str.w	r2, [r9, #104]	; 0x68
    31d4:	b.n	306c <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    31d6:	bl	26d4 <usb_malloc>
				if (p) {
    31da:	cbz	r0, 3224 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    31dc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    31de:	ldr	r2, [pc, #184]	; (3298 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    31e0:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    31e4:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    31e8:	bl	26d4 <usb_malloc>
				if (p) {
    31ec:	cbz	r0, 3218 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    31ee:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    31f0:	ldr	r2, [pc, #168]	; (329c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    31f2:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    31f6:	str.w	r2, [r9, #72]	; 0x48
    31fa:	b.n	3050 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    31fc:	movs	r0, #2
    31fe:	b.n	2efa <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3200:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3202:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3206:	adds	r2, #1
    3208:	strb	r2, [r5, #0]
    320a:	b.n	309a <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    320c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    320e:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3212:	adds	r2, #1
    3214:	strb	r2, [r5, #0]
    3216:	b.n	316a <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3218:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    321a:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    321e:	adds	r2, #1
    3220:	strb	r2, [r5, #0]
    3222:	b.n	3050 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3224:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3226:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    322a:	adds	r2, #1
    322c:	strb	r2, [r5, #0]
    322e:	b.n	31e8 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3230:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3232:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3236:	adds	r2, #1
    3238:	strb	r2, [r5, #0]
    323a:	b.n	306c <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    323c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    323e:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3242:	adds	r2, #1
    3244:	strb	r2, [r5, #0]
    3246:	b.n	31c2 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3248:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    324a:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    324e:	adds	r2, #1
    3250:	strb	r2, [r5, #0]
    3252:	b.n	3034 <usb_isr+0x700>
    3254:	.word	0x1fff1968
    3258:	.word	0x1fff18d0
    325c:	.word	0x1fff1928
    3260:	.word	0x1fff193c
    3264:	.word	0x1fff1878
    3268:	.word	0x1fff1df8
    326c:	.word	0x00004b38
    3270:	.word	0x1fff1959
    3274:	.word	0x400720c4
    3278:	.word	0x400720c8
    327c:	.word	0x400720cc
    3280:	.word	0x400720d0
    3284:	.word	0x400720d4
    3288:	.word	0x1fff0000
    328c:	.word	0x00004b40
    3290:	.word	0x1fff195c
    3294:	.word	0x400720c0
    3298:	.word	0x00400088
    329c:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    32a0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    32a2:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    32a6:	adds	r2, #1
    32a8:	strb	r2, [r5, #0]
    32aa:	b.n	3140 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    32ac:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    32ae:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    32b2:	adds	r2, #1
    32b4:	strb	r2, [r5, #0]
    32b6:	b.n	3084 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    32b8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    32ba:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    32be:	adds	r2, #1
    32c0:	strb	r2, [r5, #0]
    32c2:	b.n	3196 <usb_isr+0x862>
    32c4:	cmp	r0, #64	; 0x40
    32c6:	mov	ip, r0
    32c8:	it	cs
    32ca:	movcs.w	ip, #64	; 0x40
    32ce:	add.w	r3, r4, ip
    32d2:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    32d4:	movs	r3, #1
    32d6:	rsb	r0, ip, r0
    32da:	mov.w	r8, ip, lsl #16
    32de:	movs	r2, #0
    32e0:	str	r3, [sp, #4]
    32e2:	b.n	2d14 <usb_isr+0x3e0>

000032e4 <usb_init>:
}



void usb_init(void)
{
    32e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32e8:	ldr	r4, [pc, #156]	; (3388 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    32ea:	bl	3b24 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    32ee:	movs	r2, #0
    32f0:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    32f4:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    32f6:	str	r2, [r3, #0]
		table[i].addr = 0;
    32f8:	str	r2, [r3, #4]
    32fa:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    32fc:	cmp	r3, r0
		table[i].desc = 0;
    32fe:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3302:	bne.n	32f6 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3304:	ldr	r0, [pc, #132]	; (338c <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3306:	ldr	r2, [pc, #136]	; (3390 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3308:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    330a:	ldr.w	lr, [pc, #156]	; 33a8 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    330e:	ldr	r6, [pc, #132]	; (3394 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3310:	ldr	r5, [pc, #132]	; (3398 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3312:	ldr	r7, [pc, #136]	; (339c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3314:	ldr.w	ip, [pc, #148]	; 33ac <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3318:	ldr.w	r8, [pc, #148]	; 33b0 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    331c:	orr.w	r3, r3, #262144	; 0x40000
    3320:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3322:	ldr	r3, [r2, #0]
    3324:	orr.w	r3, r3, #50331648	; 0x3000000
    3328:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    332a:	movs	r3, #3
    332c:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3330:	movs	r3, #160	; 0xa0
    3332:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3334:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3338:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    333c:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3340:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3342:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3344:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3348:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    334a:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    334c:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    334e:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3350:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3352:	ldr	r5, [pc, #76]	; (33a0 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3354:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3358:	ldr	r0, [pc, #72]	; (33a4 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    335a:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    335e:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3360:	movs	r3, #1
    3362:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3366:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    336a:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    336e:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3370:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3372:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3376:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3378:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    337a:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    337e:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3386:	nop
    3388:	.word	0x1fff0000
    338c:	.word	0x40048034
    3390:	.word	0x4000d800
    3394:	.word	0x40072140
    3398:	.word	0x4007209c
    339c:	.word	0x400720b0
    33a0:	.word	0xe000e435
    33a4:	.word	0xe000e104
    33a8:	.word	0x40072144
    33ac:	.word	0x40072080
    33b0:	.word	0x40072088

000033b4 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    33b4:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    33b6:	ldr	r4, [pc, #176]	; (3468 <yield+0xb4>)
    33b8:	ldrb	r3, [r4, #0]
    33ba:	cbz	r3, 33be <yield+0xa>
    33bc:	pop	{r3, r4, r5, pc}
	running = 1;
    33be:	movs	r3, #1
    33c0:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    33c2:	bl	18e0 <usb_serial_available>
	if (Serial.available()) serialEvent();
    33c6:	cmp	r0, #0
    33c8:	bne.n	3450 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    33ca:	bl	38f4 <serial_available>
	if (Serial1.available()) serialEvent1();
    33ce:	cmp	r0, #0
    33d0:	bne.n	344a <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    33d2:	bl	35dc <serial2_available>
	if (Serial2.available()) serialEvent2();
    33d6:	cmp	r0, #0
    33d8:	bne.n	3444 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    33da:	bl	3bf4 <serial3_available>
	if (Serial3.available()) serialEvent3();
    33de:	cbnz	r0, 343e <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    33e0:	bl	3708 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    33e4:	cbnz	r0, 3438 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    33e6:	bl	34e4 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    33ea:	cbnz	r0, 3432 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    33ec:	bl	3a20 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    33f0:	cbnz	r0, 342c <yield+0x78>
#endif
	running = 0;
    33f2:	movs	r3, #0
    33f4:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    33f6:	mrs	r3, IPSR
		if (ipsr != 0) return;
    33fa:	cmp	r3, #0
    33fc:	bne.n	33bc <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    33fe:	mrs	r1, PRIMASK
		__disable_irq();
    3402:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3404:	ldr	r3, [pc, #100]	; (346c <yield+0xb8>)
    3406:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3408:	cbz	r0, 3456 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    340a:	ldr	r4, [pc, #100]	; (3470 <yield+0xbc>)
    340c:	ldrb	r2, [r4, #0]
    340e:	cbnz	r2, 3456 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3410:	ldr	r5, [r0, #20]
    3412:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3414:	movs	r3, #1
    3416:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3418:	cbz	r5, 345e <yield+0xaa>
			firstYield->_prev = nullptr;
    341a:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    341c:	cbnz	r1, 3420 <yield+0x6c>
    341e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3420:	movs	r5, #0
    3422:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3424:	ldr	r3, [r0, #8]
    3426:	blx	r3
		runningFromYield = false;
    3428:	strb	r5, [r4, #0]
    342a:	b.n	33bc <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    342c:	bl	34e0 <serialEvent6()>
    3430:	b.n	33f2 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3432:	bl	3478 <serialEvent5()>
    3436:	b.n	33ec <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3438:	bl	34cc <serialEvent4()>
    343c:	b.n	33e6 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    343e:	bl	3cf0 <serialEvent3()>
    3442:	b.n	33e0 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    3444:	bl	34c8 <serialEvent2()>
    3448:	b.n	33da <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    344a:	bl	3cec <serialEvent1()>
    344e:	b.n	33d2 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    3450:	bl	34a4 <serialEvent()>
    3454:	b.n	33ca <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3456:	cmp	r1, #0
    3458:	bne.n	33bc <yield+0x8>
    345a:	cpsie	i
    345c:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    345e:	ldr	r3, [pc, #20]	; (3474 <yield+0xc0>)
    3460:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3462:	cmp	r1, #0
    3464:	bne.n	3420 <yield+0x6c>
    3466:	b.n	341e <yield+0x6a>
    3468:	.word	0x1fff196d
    346c:	.word	0x1fff1c80
    3470:	.word	0x1fff1c84
    3474:	.word	0x1fff1c7c

00003478 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    3478:	bx	lr
    347a:	nop

0000347c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    347c:	b.w	18fc <usb_serial_flush_input>

00003480 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3480:	b.w	18b0 <usb_serial_peekchar>

00003484 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3484:	b.w	1868 <usb_serial_getchar>

00003488 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3488:	b.w	18e0 <usb_serial_available>

0000348c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    348c:	b.w	1a9c <usb_serial_flush_output>

00003490 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3490:	b.w	1a54 <usb_serial_write_buffer_free>

00003494 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3494:	mov	r0, r1
    3496:	mov	r1, r2
    3498:	b.w	1934 <usb_serial_write>

0000349c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    349c:	mov	r0, r1
    349e:	b.w	1a3c <usb_serial_putchar>
    34a2:	nop

000034a4 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    34a4:	bx	lr
    34a6:	nop

000034a8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    34a8:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    34aa:	ldr	r2, [pc, #24]	; (34c4 <Print::println()+0x1c>)
	return write(buf, 2);
    34ac:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    34ae:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    34b0:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    34b2:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    34b4:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    34b6:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    34ba:	movs	r2, #2
    34bc:	blx	r3
}
    34be:	add	sp, #12
    34c0:	ldr.w	pc, [sp], #4
    34c4:	.word	0x00004b34

000034c8 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    34c8:	bx	lr
    34ca:	nop

000034cc <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    34cc:	bx	lr
    34ce:	nop

000034d0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    34d0:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    34d2:	bl	490 <setup>
	while (1) {
		loop();
    34d6:	bl	494 <loop>
		yield();
    34da:	bl	33b4 <yield>
    34de:	b.n	34d6 <main+0x6>

000034e0 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    34e0:	bx	lr
    34e2:	nop

000034e4 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    34e4:	ldr	r2, [pc, #20]	; (34fc <serial5_available+0x18>)
	tail = rx_buffer_tail;
    34e6:	ldr	r3, [pc, #24]	; (3500 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    34e8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    34ea:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    34ec:	uxtb	r0, r0
	tail = rx_buffer_tail;
    34ee:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    34f0:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    34f2:	it	cc
    34f4:	addcc	r0, #64	; 0x40
    34f6:	subs	r0, r0, r3
}
    34f8:	bx	lr
    34fa:	nop
    34fc:	.word	0x1fff1974
    3500:	.word	0x1fff1975

00003504 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3504:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3506:	ldr	r3, [pc, #172]	; (35b4 <uart4_status_isr+0xb0>)
    3508:	ldrb	r2, [r3, #4]
    350a:	lsls	r4, r2, #26
    350c:	bpl.n	354e <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    350e:	ldr	r0, [pc, #168]	; (35b8 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3510:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3512:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3514:	ldr	r1, [pc, #164]	; (35bc <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3516:	adds	r3, #1
    3518:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    351a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    351c:	it	gt
    351e:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3520:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3522:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3524:	beq.n	352e <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    3526:	ldr	r4, [pc, #152]	; (35c0 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    3528:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    352a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    352c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    352e:	ldr	r2, [pc, #148]	; (35c4 <uart4_status_isr+0xc0>)
    3530:	ldr	r1, [r2, #0]
    3532:	cbz	r1, 354e <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3534:	ldr	r2, [pc, #144]	; (35c8 <uart4_status_isr+0xc4>)
    3536:	ldrb	r2, [r2, #0]
    3538:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    353a:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    353c:	itet	cc
    353e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3542:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3544:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3546:	cmp	r3, #39	; 0x27
    3548:	itt	gt
    354a:	movgt	r3, #1
    354c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    354e:	ldr	r2, [pc, #100]	; (35b4 <uart4_status_isr+0xb0>)
    3550:	ldrb	r3, [r2, #3]
    3552:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3554:	lsls	r0, r3, #24
    3556:	bmi.n	357c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3558:	lsls	r2, r3, #25
    355a:	bpl.n	3578 <uart4_status_isr+0x74>
    355c:	ldr	r3, [pc, #84]	; (35b4 <uart4_status_isr+0xb0>)
    355e:	ldrb	r3, [r3, #4]
    3560:	lsls	r3, r3, #25
    3562:	bpl.n	3578 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3564:	ldr	r3, [pc, #100]	; (35cc <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3566:	ldr	r1, [pc, #104]	; (35d0 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3568:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    356a:	movs	r2, #0
    356c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    356e:	cbz	r3, 3572 <uart4_status_isr+0x6e>
    3570:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    3572:	ldr	r3, [pc, #64]	; (35b4 <uart4_status_isr+0xb0>)
    3574:	movs	r2, #44	; 0x2c
    3576:	strb	r2, [r3, #3]
	}
}
    3578:	pop	{r4, r5}
    357a:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    357c:	ldrb	r1, [r2, #4]
    357e:	lsls	r1, r1, #24
    3580:	bpl.n	3558 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3582:	ldr	r1, [pc, #80]	; (35d4 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3584:	ldr	r0, [pc, #64]	; (35c8 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3586:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3588:	ldrb	r1, [r0, #0]
    358a:	uxtb	r1, r1
		if (head == tail) {
    358c:	cmp	r4, r1
    358e:	beq.n	35ac <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3590:	adds	r2, r1, #1
    3592:	cmp	r2, #39	; 0x27
    3594:	itt	hi
    3596:	movhi	r1, #0
    3598:	movhi	r2, r1
			n = tx_buffer[tail];
    359a:	ldr	r5, [pc, #60]	; (35d8 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    359c:	ldr	r4, [pc, #20]	; (35b4 <uart4_status_isr+0xb0>)
    359e:	it	ls
    35a0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    35a2:	ldrb	r2, [r5, r2]
    35a4:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    35a6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    35a8:	strb	r1, [r0, #0]
    35aa:	b.n	3558 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    35ac:	movs	r1, #108	; 0x6c
    35ae:	strb	r1, [r2, #3]
    35b0:	b.n	3558 <uart4_status_isr+0x54>
    35b2:	nop
    35b4:	.word	0x400ea000
    35b8:	.word	0x1fff1974
    35bc:	.word	0x1fff1975
    35c0:	.word	0x1fff19a0
    35c4:	.word	0x1fff1970
    35c8:	.word	0x1fff19e1
    35cc:	.word	0x1fff19e4
    35d0:	.word	0x1fff19e0
    35d4:	.word	0x1fff19e8
    35d8:	.word	0x1fff1978

000035dc <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35dc:	ldr	r2, [pc, #20]	; (35f4 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    35de:	ldr	r3, [pc, #24]	; (35f8 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35e0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    35e2:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35e4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    35e6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    35e8:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    35ea:	it	cc
    35ec:	addcc	r0, #64	; 0x40
    35ee:	subs	r0, r0, r3
}
    35f0:	bx	lr
    35f2:	nop
    35f4:	.word	0x1fff1a5c
    35f8:	.word	0x1fff19f1

000035fc <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    35fc:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    35fe:	ldr	r3, [pc, #224]	; (36e0 <uart1_status_isr+0xe4>)
    3600:	ldrb	r2, [r3, #4]
    3602:	tst.w	r2, #48	; 0x30
    3606:	beq.n	3662 <uart1_status_isr+0x66>
		__disable_irq();
    3608:	cpsid	i
		avail = UART1_RCFIFO;
    360a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    360c:	and.w	r2, r1, #255	; 0xff
    3610:	cmp	r1, #0
    3612:	beq.n	3690 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3614:	cpsie	i
			head = rx_buffer_head;
    3616:	ldr	r7, [pc, #204]	; (36e4 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3618:	ldr	r1, [pc, #204]	; (36e8 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    361a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    361c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    361e:	ldr	r6, [pc, #204]	; (36ec <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3620:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3622:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3624:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3626:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3628:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    362a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    362c:	it	cs
    362e:	movcs	r3, #0
				if (newhead != tail) {
    3630:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3632:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3636:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3638:	itt	ne
    363a:	strbne	r1, [r6, r3]
    363c:	movne	r0, r3
				}
			} while (--avail > 0);
    363e:	ands.w	r2, r2, #255	; 0xff
    3642:	bne.n	3626 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3644:	ldr	r3, [pc, #168]	; (36f0 <uart1_status_isr+0xf4>)
    3646:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3648:	uxtb	r2, r0
    364a:	strb	r2, [r7, #0]
			if (rts_pin) {
    364c:	cbz	r3, 3662 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    364e:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3650:	itet	cc
    3652:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3656:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3658:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    365a:	cmp	r0, #39	; 0x27
    365c:	itt	gt
    365e:	movgt	r2, #1
    3660:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3662:	ldr	r1, [pc, #124]	; (36e0 <uart1_status_isr+0xe4>)
    3664:	ldrb	r2, [r1, #3]
    3666:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3668:	lsls	r5, r2, #24
    366a:	bmi.n	369a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    366c:	lsls	r2, r2, #25
    366e:	bpl.n	368c <uart1_status_isr+0x90>
    3670:	ldr	r3, [pc, #108]	; (36e0 <uart1_status_isr+0xe4>)
    3672:	ldrb	r3, [r3, #4]
    3674:	lsls	r3, r3, #25
    3676:	bpl.n	368c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3678:	ldr	r3, [pc, #120]	; (36f4 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    367a:	ldr	r1, [pc, #124]	; (36f8 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    367c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    367e:	movs	r2, #0
    3680:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3682:	cbz	r3, 3686 <uart1_status_isr+0x8a>
    3684:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3686:	ldr	r3, [pc, #88]	; (36e0 <uart1_status_isr+0xe4>)
    3688:	movs	r2, #60	; 0x3c
    368a:	strb	r2, [r3, #3]
	}
}
    368c:	pop	{r4, r5, r6, r7}
    368e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3690:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3692:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3694:	strb	r2, [r3, #17]
			__enable_irq();
    3696:	cpsie	i
    3698:	b.n	3662 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    369a:	ldrb	r3, [r1, #4]
    369c:	lsls	r4, r3, #24
    369e:	bpl.n	366c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    36a0:	ldr	r3, [pc, #88]	; (36fc <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    36a2:	ldr	r6, [pc, #92]	; (3700 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    36a4:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    36a6:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    36a8:	uxtb	r4, r4
		tail = tx_buffer_tail;
    36aa:	uxtb	r3, r3
		do {
			if (tail == head) break;
    36ac:	cmp	r4, r3
    36ae:	beq.n	36ce <uart1_status_isr+0xd2>
    36b0:	ldr	r5, [pc, #80]	; (3704 <uart1_status_isr+0x108>)
    36b2:	b.n	36b8 <uart1_status_isr+0xbc>
    36b4:	cmp	r3, r4
    36b6:	beq.n	36ce <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    36b8:	adds	r3, #1
    36ba:	cmp	r3, #40	; 0x28
    36bc:	it	cs
    36be:	movcs	r3, #0
			avail = UART1_S1;
    36c0:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    36c2:	ldrb	r0, [r5, r3]
    36c4:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    36c6:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    36c8:	ldrb	r0, [r1, #20]
    36ca:	cmp	r0, #7
    36cc:	bls.n	36b4 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    36ce:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    36d0:	ldr	r1, [pc, #12]	; (36e0 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    36d2:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    36d4:	ldrb	r3, [r1, #4]
    36d6:	lsls	r0, r3, #24
    36d8:	itt	mi
    36da:	movmi	r3, #124	; 0x7c
    36dc:	strbmi	r3, [r1, #3]
    36de:	b.n	366c <uart1_status_isr+0x70>
    36e0:	.word	0x4006b000
    36e4:	.word	0x1fff1a5c
    36e8:	.word	0x1fff19f1
    36ec:	.word	0x1fff1a1c
    36f0:	.word	0x1fff19ec
    36f4:	.word	0x1fff1a60
    36f8:	.word	0x1fff19f0
    36fc:	.word	0x1fff1a64
    3700:	.word	0x1fff1a5d
    3704:	.word	0x1fff19f4

00003708 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3708:	ldr	r2, [pc, #20]	; (3720 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    370a:	ldr	r3, [pc, #24]	; (3724 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    370c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    370e:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3710:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3712:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3714:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3716:	it	cc
    3718:	addcc	r0, #64	; 0x40
    371a:	subs	r0, r0, r3
}
    371c:	bx	lr
    371e:	nop
    3720:	.word	0x1fff1a6c
    3724:	.word	0x1fff1a6d

00003728 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3728:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    372a:	ldr	r3, [pc, #172]	; (37d8 <uart3_status_isr+0xb0>)
    372c:	ldrb	r2, [r3, #4]
    372e:	lsls	r4, r2, #26
    3730:	bpl.n	3772 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3732:	ldr	r0, [pc, #168]	; (37dc <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3734:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3736:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3738:	ldr	r1, [pc, #164]	; (37e0 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    373a:	adds	r3, #1
    373c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    373e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3740:	it	gt
    3742:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3744:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3746:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3748:	beq.n	3752 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    374a:	ldr	r4, [pc, #152]	; (37e4 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    374c:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    374e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3750:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3752:	ldr	r2, [pc, #148]	; (37e8 <uart3_status_isr+0xc0>)
    3754:	ldr	r1, [r2, #0]
    3756:	cbz	r1, 3772 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3758:	ldr	r2, [pc, #144]	; (37ec <uart3_status_isr+0xc4>)
    375a:	ldrb	r2, [r2, #0]
    375c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    375e:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3760:	itet	cc
    3762:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3766:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3768:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    376a:	cmp	r3, #39	; 0x27
    376c:	itt	gt
    376e:	movgt	r3, #1
    3770:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3772:	ldr	r2, [pc, #100]	; (37d8 <uart3_status_isr+0xb0>)
    3774:	ldrb	r3, [r2, #3]
    3776:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3778:	lsls	r0, r3, #24
    377a:	bmi.n	37a0 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    377c:	lsls	r2, r3, #25
    377e:	bpl.n	379c <uart3_status_isr+0x74>
    3780:	ldr	r3, [pc, #84]	; (37d8 <uart3_status_isr+0xb0>)
    3782:	ldrb	r3, [r3, #4]
    3784:	lsls	r3, r3, #25
    3786:	bpl.n	379c <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3788:	ldr	r3, [pc, #100]	; (37f0 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    378a:	ldr	r1, [pc, #104]	; (37f4 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    378c:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    378e:	movs	r2, #0
    3790:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3792:	cbz	r3, 3796 <uart3_status_isr+0x6e>
    3794:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3796:	ldr	r3, [pc, #64]	; (37d8 <uart3_status_isr+0xb0>)
    3798:	movs	r2, #44	; 0x2c
    379a:	strb	r2, [r3, #3]
	}
}
    379c:	pop	{r4, r5}
    379e:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    37a0:	ldrb	r1, [r2, #4]
    37a2:	lsls	r1, r1, #24
    37a4:	bpl.n	377c <uart3_status_isr+0x54>
		head = tx_buffer_head;
    37a6:	ldr	r1, [pc, #80]	; (37f8 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    37a8:	ldr	r0, [pc, #64]	; (37ec <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    37aa:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    37ac:	ldrb	r1, [r0, #0]
    37ae:	uxtb	r1, r1
		if (head == tail) {
    37b0:	cmp	r4, r1
    37b2:	beq.n	37d0 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    37b4:	adds	r2, r1, #1
    37b6:	cmp	r2, #39	; 0x27
    37b8:	itt	hi
    37ba:	movhi	r1, #0
    37bc:	movhi	r2, r1
			n = tx_buffer[tail];
    37be:	ldr	r5, [pc, #60]	; (37fc <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    37c0:	ldr	r4, [pc, #20]	; (37d8 <uart3_status_isr+0xb0>)
    37c2:	it	ls
    37c4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    37c6:	ldrb	r2, [r5, r2]
    37c8:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    37ca:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    37cc:	strb	r1, [r0, #0]
    37ce:	b.n	377c <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    37d0:	movs	r1, #108	; 0x6c
    37d2:	strb	r1, [r2, #3]
    37d4:	b.n	377c <uart3_status_isr+0x54>
    37d6:	nop
    37d8:	.word	0x4006d000
    37dc:	.word	0x1fff1a6c
    37e0:	.word	0x1fff1a6d
    37e4:	.word	0x1fff1a98
    37e8:	.word	0x1fff1a68
    37ec:	.word	0x1fff1ad9
    37f0:	.word	0x1fff1adc
    37f4:	.word	0x1fff1ad8
    37f8:	.word	0x1fff1ae0
    37fc:	.word	0x1fff1a70

00003800 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3800:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3802:	ldr	r4, [pc, #64]	; (3844 <fault_isr+0x44>)
    3804:	b.n	3818 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3806:	ldr	r3, [r4, #0]
    3808:	lsls	r1, r3, #21
    380a:	bmi.n	3828 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    380c:	ldr	r3, [r4, #0]
    380e:	lsls	r2, r3, #20
    3810:	bmi.n	3832 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3812:	ldr	r3, [r4, #0]
    3814:	lsls	r3, r3, #19
    3816:	bmi.n	383c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3818:	ldr	r3, [r4, #0]
    381a:	lsls	r0, r3, #13
    381c:	bpl.n	3806 <fault_isr+0x6>
    381e:	bl	2934 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3822:	ldr	r3, [r4, #0]
    3824:	lsls	r1, r3, #21
    3826:	bpl.n	380c <fault_isr+0xc>
    3828:	bl	3914 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    382c:	ldr	r3, [r4, #0]
    382e:	lsls	r2, r3, #20
    3830:	bpl.n	3812 <fault_isr+0x12>
    3832:	bl	35fc <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3836:	ldr	r3, [r4, #0]
    3838:	lsls	r3, r3, #19
    383a:	bpl.n	3818 <fault_isr+0x18>
    383c:	bl	3c14 <uart2_status_isr>
    3840:	b.n	3818 <fault_isr+0x18>
    3842:	nop
    3844:	.word	0x40048034

00003848 <unused_isr>:
	}
}

void unused_isr(void)
{
    3848:	push	{r3, lr}
	fault_isr();
    384a:	bl	3800 <fault_isr>
    384e:	nop

00003850 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3850:	ldr	r3, [pc, #4]	; (3858 <startup_early_hook+0x8>)
    3852:	movs	r2, #16
    3854:	strh	r2, [r3, #0]
    3856:	bx	lr
    3858:	.word	0x40052000

0000385c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    385c:	bx	lr
    385e:	nop

00003860 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3860:	ldr	r1, [pc, #36]	; (3888 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3862:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3864:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3866:	cbz	r0, 3876 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3868:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    386a:	add	r0, r3
    386c:	sub.w	r2, r2, #8192	; 0x2000
    3870:	cmp	r0, r2
    3872:	bcs.n	387a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3874:	str	r0, [r1, #0]
	}
	return prev;
    3876:	mov	r0, r3
}
    3878:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    387a:	bl	3ee8 <__errno>
    387e:	movs	r3, #12
    3880:	str	r3, [r0, #0]
			return (void *)-1;
    3882:	mov.w	r0, #4294967295
    3886:	pop	{r3, pc}
    3888:	.word	0x1fff0c70

0000388c <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    388c:	ldr	r2, [pc, #32]	; (38b0 <kinetis_hsrun_disable+0x24>)
    388e:	ldrb	r3, [r2, #0]
    3890:	cmp	r3, #128	; 0x80
    3892:	beq.n	3898 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3894:	movs	r0, #0
}
    3896:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3898:	ldr	r1, [pc, #24]	; (38b4 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    389a:	ldr	r3, [pc, #28]	; (38b8 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    389c:	ldr	r0, [pc, #28]	; (38bc <kinetis_hsrun_disable+0x30>)
    389e:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    38a0:	movs	r1, #0
    38a2:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    38a4:	ldrb	r3, [r2, #0]
    38a6:	cmp	r3, #128	; 0x80
    38a8:	beq.n	38a4 <kinetis_hsrun_disable+0x18>
		return 1;
    38aa:	movs	r0, #1
    38ac:	bx	lr
    38ae:	nop
    38b0:	.word	0x4007e003
    38b4:	.word	0x40048044
    38b8:	.word	0x4007e001
    38bc:	.word	0x22280000

000038c0 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    38c0:	ldr	r2, [pc, #36]	; (38e8 <kinetis_hsrun_enable+0x28>)
    38c2:	ldrb	r3, [r2, #0]
    38c4:	cmp	r3, #1
    38c6:	beq.n	38cc <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    38c8:	movs	r0, #0
}
    38ca:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    38cc:	add.w	r3, r3, #1073741824	; 0x40000000
    38d0:	add.w	r3, r3, #516096	; 0x7e000
    38d4:	movs	r1, #96	; 0x60
    38d6:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    38d8:	ldrb	r3, [r2, #0]
    38da:	cmp	r3, #128	; 0x80
    38dc:	bne.n	38d8 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    38de:	ldr	r3, [pc, #12]	; (38ec <kinetis_hsrun_enable+0x2c>)
    38e0:	ldr	r2, [pc, #12]	; (38f0 <kinetis_hsrun_enable+0x30>)
    38e2:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    38e4:	movs	r0, #1
    38e6:	bx	lr
    38e8:	.word	0x4007e003
    38ec:	.word	0x40048044
    38f0:	.word	0x02060000

000038f4 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38f4:	ldr	r2, [pc, #20]	; (390c <serial_available+0x18>)
	tail = rx_buffer_tail;
    38f6:	ldr	r3, [pc, #24]	; (3910 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38f8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    38fa:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38fc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    38fe:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3900:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3902:	it	cc
    3904:	addcc	r0, #64	; 0x40
    3906:	subs	r0, r0, r3
}
    3908:	bx	lr
    390a:	nop
    390c:	.word	0x1fff1ae8
    3910:	.word	0x1fff1ae9

00003914 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3914:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3916:	ldr	r3, [pc, #224]	; (39f8 <uart0_status_isr+0xe4>)
    3918:	ldrb	r2, [r3, #4]
    391a:	tst.w	r2, #48	; 0x30
    391e:	beq.n	397a <uart0_status_isr+0x66>
		__disable_irq();
    3920:	cpsid	i
		avail = UART0_RCFIFO;
    3922:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3924:	and.w	r2, r1, #255	; 0xff
    3928:	cmp	r1, #0
    392a:	beq.n	39a8 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    392c:	cpsie	i
			head = rx_buffer_head;
    392e:	ldr	r7, [pc, #204]	; (39fc <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3930:	ldr	r1, [pc, #204]	; (3a00 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3932:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3934:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3936:	ldr	r6, [pc, #204]	; (3a04 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3938:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    393a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    393c:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    393e:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3940:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3942:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3944:	it	cs
    3946:	movcs	r3, #0
				if (newhead != tail) {
    3948:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    394a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    394e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3950:	itt	ne
    3952:	strbne	r1, [r6, r3]
    3954:	movne	r0, r3
				}
			} while (--avail > 0);
    3956:	ands.w	r2, r2, #255	; 0xff
    395a:	bne.n	393e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    395c:	ldr	r3, [pc, #168]	; (3a08 <uart0_status_isr+0xf4>)
    395e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3960:	uxtb	r2, r0
    3962:	strb	r2, [r7, #0]
			if (rts_pin) {
    3964:	cbz	r3, 397a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3966:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3968:	itet	cc
    396a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    396e:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3970:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3972:	cmp	r0, #39	; 0x27
    3974:	itt	gt
    3976:	movgt	r2, #1
    3978:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    397a:	ldr	r1, [pc, #124]	; (39f8 <uart0_status_isr+0xe4>)
    397c:	ldrb	r2, [r1, #3]
    397e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3980:	lsls	r5, r2, #24
    3982:	bmi.n	39b2 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3984:	lsls	r2, r2, #25
    3986:	bpl.n	39a4 <uart0_status_isr+0x90>
    3988:	ldr	r3, [pc, #108]	; (39f8 <uart0_status_isr+0xe4>)
    398a:	ldrb	r3, [r3, #4]
    398c:	lsls	r3, r3, #25
    398e:	bpl.n	39a4 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3990:	ldr	r3, [pc, #120]	; (3a0c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3992:	ldr	r1, [pc, #124]	; (3a10 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3994:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3996:	movs	r2, #0
    3998:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    399a:	cbz	r3, 399e <uart0_status_isr+0x8a>
    399c:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    399e:	ldr	r3, [pc, #88]	; (39f8 <uart0_status_isr+0xe4>)
    39a0:	movs	r2, #60	; 0x3c
    39a2:	strb	r2, [r3, #3]
	}
}
    39a4:	pop	{r4, r5, r6, r7}
    39a6:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    39a8:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    39aa:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    39ac:	strb	r2, [r3, #17]
			__enable_irq();
    39ae:	cpsie	i
    39b0:	b.n	397a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    39b2:	ldrb	r3, [r1, #4]
    39b4:	lsls	r4, r3, #24
    39b6:	bpl.n	3984 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    39b8:	ldr	r3, [pc, #88]	; (3a14 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    39ba:	ldr	r6, [pc, #92]	; (3a18 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    39bc:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    39be:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    39c0:	uxtb	r4, r4
		tail = tx_buffer_tail;
    39c2:	uxtb	r3, r3
		do {
			if (tail == head) break;
    39c4:	cmp	r4, r3
    39c6:	beq.n	39e6 <uart0_status_isr+0xd2>
    39c8:	ldr	r5, [pc, #80]	; (3a1c <uart0_status_isr+0x108>)
    39ca:	b.n	39d0 <uart0_status_isr+0xbc>
    39cc:	cmp	r3, r4
    39ce:	beq.n	39e6 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    39d0:	adds	r3, #1
    39d2:	cmp	r3, #64	; 0x40
    39d4:	it	cs
    39d6:	movcs	r3, #0
			avail = UART0_S1;
    39d8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    39da:	ldrb	r0, [r5, r3]
    39dc:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    39de:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    39e0:	ldrb	r0, [r1, #20]
    39e2:	cmp	r0, #7
    39e4:	bls.n	39cc <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    39e6:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    39e8:	ldr	r1, [pc, #12]	; (39f8 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    39ea:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    39ec:	ldrb	r3, [r1, #4]
    39ee:	lsls	r0, r3, #24
    39f0:	itt	mi
    39f2:	movmi	r3, #124	; 0x7c
    39f4:	strbmi	r3, [r1, #3]
    39f6:	b.n	3984 <uart0_status_isr+0x70>
    39f8:	.word	0x4006a000
    39fc:	.word	0x1fff1ae8
    3a00:	.word	0x1fff1ae9
    3a04:	.word	0x1fff1b2c
    3a08:	.word	0x1fff1ae4
    3a0c:	.word	0x1fff1b70
    3a10:	.word	0x1fff1b6c
    3a14:	.word	0x1fff1b74
    3a18:	.word	0x1fff1b6d
    3a1c:	.word	0x1fff1aec

00003a20 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a20:	ldr	r2, [pc, #20]	; (3a38 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3a22:	ldr	r3, [pc, #24]	; (3a3c <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a24:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3a26:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a28:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3a2a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3a2c:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3a2e:	it	cc
    3a30:	addcc	r0, #64	; 0x40
    3a32:	subs	r0, r0, r3
}
    3a34:	bx	lr
    3a36:	nop
    3a38:	.word	0x1fff1b7c
    3a3c:	.word	0x1fff1b7d

00003a40 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3a40:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3a42:	ldr	r3, [pc, #176]	; (3af4 <lpuart0_status_isr+0xb4>)
    3a44:	ldr	r2, [r3, #4]
    3a46:	lsls	r4, r2, #10
    3a48:	bpl.n	3a8a <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3a4a:	ldr	r0, [pc, #172]	; (3af8 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3a4c:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3a4e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a50:	ldr	r1, [pc, #168]	; (3afc <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3a52:	adds	r3, #1
    3a54:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a56:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3a58:	it	gt
    3a5a:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a5c:	cmp	r3, r1
    3a5e:	beq.n	3a6a <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3a60:	ldr	r4, [pc, #156]	; (3b00 <lpuart0_status_isr+0xc0>)
    3a62:	uxtb	r2, r2
			rx_buffer_head = head;
    3a64:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3a66:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3a68:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3a6a:	ldr	r2, [pc, #152]	; (3b04 <lpuart0_status_isr+0xc4>)
    3a6c:	ldr	r1, [r2, #0]
    3a6e:	cbz	r1, 3a8a <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3a70:	ldr	r2, [pc, #148]	; (3b08 <lpuart0_status_isr+0xc8>)
    3a72:	ldrb	r2, [r2, #0]
    3a74:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3a76:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3a78:	itet	cc
    3a7a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3a7e:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3a80:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3a82:	cmp	r3, #39	; 0x27
    3a84:	itt	gt
    3a86:	movgt	r3, #1
    3a88:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3a8a:	ldr	r2, [pc, #104]	; (3af4 <lpuart0_status_isr+0xb4>)
    3a8c:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3a8e:	lsls	r0, r3, #8
    3a90:	bpl.n	3a98 <lpuart0_status_isr+0x58>
    3a92:	ldr	r2, [r2, #4]
    3a94:	lsls	r1, r2, #8
    3a96:	bmi.n	3abc <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3a98:	lsls	r2, r3, #9
    3a9a:	bpl.n	3ab8 <lpuart0_status_isr+0x78>
    3a9c:	ldr	r3, [pc, #84]	; (3af4 <lpuart0_status_isr+0xb4>)
    3a9e:	ldr	r3, [r3, #4]
    3aa0:	lsls	r3, r3, #9
    3aa2:	bpl.n	3ab8 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3aa4:	ldr	r3, [pc, #100]	; (3b0c <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3aa6:	ldr	r1, [pc, #104]	; (3b10 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3aa8:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3aaa:	movs	r2, #0
    3aac:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3aae:	cbz	r3, 3ab2 <lpuart0_status_isr+0x72>
    3ab0:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3ab2:	ldr	r3, [pc, #96]	; (3b14 <lpuart0_status_isr+0xd4>)
    3ab4:	movs	r2, #0
    3ab6:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3ab8:	pop	{r4, r5}
    3aba:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3abc:	ldr	r2, [pc, #88]	; (3b18 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3abe:	ldr	r1, [pc, #72]	; (3b08 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3ac0:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3ac2:	ldrb	r2, [r1, #0]
    3ac4:	uxtb	r2, r2
		if (head == tail) {
    3ac6:	cmp	r0, r2
    3ac8:	beq.n	3ae6 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3aca:	adds	r2, #1
    3acc:	cmp	r2, #39	; 0x27
    3ace:	itt	hi
    3ad0:	movhi	r0, #0
    3ad2:	movhi	r2, r0
			n = tx_buffer[tail];
    3ad4:	ldr	r5, [pc, #68]	; (3b1c <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3ad6:	ldr	r4, [pc, #28]	; (3af4 <lpuart0_status_isr+0xb4>)
    3ad8:	it	ls
    3ada:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3adc:	ldrb	r2, [r5, r2]
    3ade:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3ae0:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3ae2:	strb	r0, [r1, #0]
    3ae4:	b.n	3a98 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3ae6:	ldr	r0, [pc, #56]	; (3b20 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3ae8:	ldr	r2, [pc, #40]	; (3b14 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3aea:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3aec:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3aee:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3af0:	str	r1, [r2, #0]
    3af2:	b.n	3a98 <lpuart0_status_isr+0x58>
    3af4:	.word	0x400c4000
    3af8:	.word	0x1fff1b7c
    3afc:	.word	0x1fff1b7d
    3b00:	.word	0x1fff1ba8
    3b04:	.word	0x1fff1b78
    3b08:	.word	0x1fff1be9
    3b0c:	.word	0x1fff1bec
    3b10:	.word	0x1fff1be8
    3b14:	.word	0x43880158
    3b18:	.word	0x1fff1bf0
    3b1c:	.word	0x1fff1b80
    3b20:	.word	0x4388015c

00003b24 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3b24:	push	{r4, lr}
    3b26:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3b28:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3b2a:	bl	388c <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3b2e:	ldr	r2, [pc, #96]	; (3b90 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3b30:	ldr	r3, [pc, #96]	; (3b94 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3b32:	ldr	r1, [pc, #100]	; (3b98 <usb_init_serialnumber+0x74>)
    3b34:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3b36:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3b38:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3b3a:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3b3c:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3b3e:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3b40:	ldrb	r3, [r2, #0]
    3b42:	lsls	r3, r3, #24
    3b44:	bpl.n	3b40 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3b46:	ldr	r3, [pc, #84]	; (3b9c <usb_init_serialnumber+0x78>)
    3b48:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3b4a:	bl	38c0 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3b4e:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3b50:	ldr	r3, [pc, #76]	; (3ba0 <usb_init_serialnumber+0x7c>)
    3b52:	cmp	r4, r3
    3b54:	itt	ls
    3b56:	addls.w	r4, r4, r4, lsl #2
    3b5a:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3b5c:	mov	r0, r4
    3b5e:	ldr	r4, [pc, #68]	; (3ba4 <usb_init_serialnumber+0x80>)
    3b60:	add	r1, sp, #4
    3b62:	movs	r2, #10
    3b64:	bl	3ba8 <ultoa>
    3b68:	add	r1, sp, #4
    3b6a:	mov	r0, r4
	for (i=0; i<10; i++) {
    3b6c:	movs	r3, #0
		char c = buf[i];
    3b6e:	ldrb.w	r2, [r1], #1
    3b72:	adds	r3, #1
		if (!c) break;
    3b74:	cbz	r2, 3b86 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3b76:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3b78:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3b7c:	bne.n	3b6e <usb_init_serialnumber+0x4a>
    3b7e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3b80:	strb	r3, [r4, #0]
}
    3b82:	add	sp, #16
    3b84:	pop	{r4, pc}
    3b86:	lsls	r3, r3, #1
    3b88:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3b8a:	strb	r3, [r4, #0]
}
    3b8c:	add	sp, #16
    3b8e:	pop	{r4, pc}
    3b90:	.word	0x40020004
    3b94:	.word	0x40020000
    3b98:	.word	0x41070000
    3b9c:	.word	0x4002000c
    3ba0:	.word	0x0098967f
    3ba4:	.word	0x1fff0d54

00003ba8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3ba8:	push	{r4, r5, r6, r7}
    3baa:	subs	r5, r1, #1
    3bac:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3bae:	movs	r4, #0
    3bb0:	b.n	3bb4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3bb2:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3bb4:	udiv	r3, r0, r2
    3bb8:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3bbc:	cmp	r0, #9
    3bbe:	add.w	r7, r0, #48	; 0x30
    3bc2:	itet	hi
    3bc4:	addhi	r0, #55	; 0x37
    3bc6:	uxtbls	r0, r7
    3bc8:	uxtbhi	r0, r0
    3bca:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3bce:	mov	r0, r3
    3bd0:	cmp	r3, #0
    3bd2:	bne.n	3bb2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3bd4:	adds	r2, r1, r4
    3bd6:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3bd8:	cbz	r4, 3bee <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3bda:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3bdc:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3be0:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3be2:	adds	r3, #1
    3be4:	subs	r0, r4, r3
    3be6:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3be8:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3bec:	blt.n	3bda <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3bee:	mov	r0, r1
    3bf0:	pop	{r4, r5, r6, r7}
    3bf2:	bx	lr

00003bf4 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3bf4:	ldr	r2, [pc, #20]	; (3c0c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3bf6:	ldr	r3, [pc, #24]	; (3c10 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3bf8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3bfa:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3bfc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3bfe:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3c00:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3c02:	it	cc
    3c04:	addcc	r0, #64	; 0x40
    3c06:	subs	r0, r0, r3
}
    3c08:	bx	lr
    3c0a:	nop
    3c0c:	.word	0x1fff1bf8
    3c10:	.word	0x1fff1bf9

00003c14 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3c14:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3c16:	ldr	r3, [pc, #172]	; (3cc4 <uart2_status_isr+0xb0>)
    3c18:	ldrb	r2, [r3, #4]
    3c1a:	lsls	r4, r2, #26
    3c1c:	bpl.n	3c5e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3c1e:	ldr	r0, [pc, #168]	; (3cc8 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3c20:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3c22:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3c24:	ldr	r1, [pc, #164]	; (3ccc <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3c26:	adds	r3, #1
    3c28:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3c2a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3c2c:	it	gt
    3c2e:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3c30:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3c32:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3c34:	beq.n	3c3e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3c36:	ldr	r4, [pc, #152]	; (3cd0 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3c38:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3c3a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3c3c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3c3e:	ldr	r2, [pc, #148]	; (3cd4 <uart2_status_isr+0xc0>)
    3c40:	ldr	r1, [r2, #0]
    3c42:	cbz	r1, 3c5e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3c44:	ldr	r2, [pc, #144]	; (3cd8 <uart2_status_isr+0xc4>)
    3c46:	ldrb	r2, [r2, #0]
    3c48:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3c4a:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3c4c:	itet	cc
    3c4e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3c52:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3c54:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3c56:	cmp	r3, #39	; 0x27
    3c58:	itt	gt
    3c5a:	movgt	r3, #1
    3c5c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3c5e:	ldr	r2, [pc, #100]	; (3cc4 <uart2_status_isr+0xb0>)
    3c60:	ldrb	r3, [r2, #3]
    3c62:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3c64:	lsls	r0, r3, #24
    3c66:	bmi.n	3c8c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3c68:	lsls	r2, r3, #25
    3c6a:	bpl.n	3c88 <uart2_status_isr+0x74>
    3c6c:	ldr	r3, [pc, #84]	; (3cc4 <uart2_status_isr+0xb0>)
    3c6e:	ldrb	r3, [r3, #4]
    3c70:	lsls	r3, r3, #25
    3c72:	bpl.n	3c88 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3c74:	ldr	r3, [pc, #100]	; (3cdc <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c76:	ldr	r1, [pc, #104]	; (3ce0 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3c78:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c7a:	movs	r2, #0
    3c7c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3c7e:	cbz	r3, 3c82 <uart2_status_isr+0x6e>
    3c80:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3c82:	ldr	r3, [pc, #64]	; (3cc4 <uart2_status_isr+0xb0>)
    3c84:	movs	r2, #44	; 0x2c
    3c86:	strb	r2, [r3, #3]
	}
}
    3c88:	pop	{r4, r5}
    3c8a:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3c8c:	ldrb	r1, [r2, #4]
    3c8e:	lsls	r1, r1, #24
    3c90:	bpl.n	3c68 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3c92:	ldr	r1, [pc, #80]	; (3ce4 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3c94:	ldr	r0, [pc, #64]	; (3cd8 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c96:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3c98:	ldrb	r1, [r0, #0]
    3c9a:	uxtb	r1, r1
		if (head == tail) {
    3c9c:	cmp	r4, r1
    3c9e:	beq.n	3cbc <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3ca0:	adds	r2, r1, #1
    3ca2:	cmp	r2, #39	; 0x27
    3ca4:	itt	hi
    3ca6:	movhi	r1, #0
    3ca8:	movhi	r2, r1
			n = tx_buffer[tail];
    3caa:	ldr	r5, [pc, #60]	; (3ce8 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3cac:	ldr	r4, [pc, #20]	; (3cc4 <uart2_status_isr+0xb0>)
    3cae:	it	ls
    3cb0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3cb2:	ldrb	r2, [r5, r2]
    3cb4:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3cb6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3cb8:	strb	r1, [r0, #0]
    3cba:	b.n	3c68 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3cbc:	movs	r1, #108	; 0x6c
    3cbe:	strb	r1, [r2, #3]
    3cc0:	b.n	3c68 <uart2_status_isr+0x54>
    3cc2:	nop
    3cc4:	.word	0x4006c000
    3cc8:	.word	0x1fff1bf8
    3ccc:	.word	0x1fff1bf9
    3cd0:	.word	0x1fff1c24
    3cd4:	.word	0x1fff1bf4
    3cd8:	.word	0x1fff1c65
    3cdc:	.word	0x1fff1c68
    3ce0:	.word	0x1fff1c64
    3ce4:	.word	0x1fff1c6c
    3ce8:	.word	0x1fff1bfc

00003cec <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3cec:	bx	lr
    3cee:	nop

00003cf0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3cf0:	bx	lr
    3cf2:	nop

00003cf4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3cf4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3cf6:	mrs	r2, PRIMASK
		__disable_irq();
    3cfa:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3cfc:	ldrb	r3, [r0, #29]
    3cfe:	cbnz	r3, 3d0e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3d00:	ldrb	r1, [r0, #28]
    3d02:	cmp	r1, #1
    3d04:	beq.n	3d18 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3d06:	cmp	r1, #3
    3d08:	beq.n	3d2c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3d0a:	movs	r3, #1
    3d0c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d0e:	cbnz	r2, 3d12 <EventResponder::triggerEventNotImmediate()+0x1e>
    3d10:	cpsie	i
	}
	enableInterrupts(irq);
}
    3d12:	ldr.w	r4, [sp], #4
    3d16:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3d18:	ldr	r4, [pc, #68]	; (3d60 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3d1a:	ldr	r1, [r4, #0]
    3d1c:	cbz	r1, 3d48 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3d1e:	ldr	r1, [pc, #68]	; (3d64 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3d20:	str	r3, [r0, #20]
				_prev = lastYield;
    3d22:	ldr	r3, [r1, #0]
    3d24:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3d26:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3d28:	str	r0, [r3, #20]
    3d2a:	b.n	3d0a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3d2c:	ldr	r4, [pc, #56]	; (3d68 <EventResponder::triggerEventNotImmediate()+0x74>)
    3d2e:	ldr	r1, [r4, #0]
    3d30:	cbz	r1, 3d54 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3d32:	ldr	r1, [pc, #56]	; (3d6c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3d34:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3d36:	ldr	r3, [r1, #0]
    3d38:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3d3a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3d3c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3d3e:	ldr	r3, [pc, #48]	; (3d70 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3d40:	mov.w	r1, #268435456	; 0x10000000
    3d44:	str	r1, [r3, #0]
    3d46:	b.n	3d0a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3d48:	ldr	r3, [pc, #24]	; (3d64 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3d4a:	str	r1, [r0, #20]
				_prev = nullptr;
    3d4c:	str	r1, [r0, #24]
				firstYield = this;
    3d4e:	str	r0, [r4, #0]
				lastYield = this;
    3d50:	str	r0, [r3, #0]
    3d52:	b.n	3d0a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3d54:	ldr	r3, [pc, #20]	; (3d6c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3d56:	str	r1, [r0, #20]
				_prev = nullptr;
    3d58:	str	r1, [r0, #24]
				firstInterrupt = this;
    3d5a:	str	r0, [r4, #0]
				lastInterrupt = this;
    3d5c:	str	r0, [r3, #0]
    3d5e:	b.n	3d3e <EventResponder::triggerEventNotImmediate()+0x4a>
    3d60:	.word	0x1fff1c80
    3d64:	.word	0x1fff1c7c
    3d68:	.word	0x1fff1c70
    3d6c:	.word	0x1fff1c74
    3d70:	.word	0xe000ed04

00003d74 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3d74:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3d76:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3d78:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3d7a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3d7c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3d7e:	beq.n	3d88 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3d80:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3d84:	b.w	3cf4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3d88:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3d8a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3d8e:	bx	r3

00003d90 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3d90:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d92:	mrs	r2, PRIMASK
		__disable_irq();
    3d96:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3d98:	ldr	r4, [pc, #48]	; (3dcc <EventResponder::runFromInterrupt()+0x3c>)
    3d9a:	ldr	r0, [r4, #0]
		if (first) {
    3d9c:	cbz	r0, 3dc0 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3d9e:	ldr	r6, [pc, #48]	; (3dd0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3da0:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3da2:	ldr	r3, [r0, #20]
    3da4:	str	r3, [r4, #0]
			if (firstInterrupt) {
    3da6:	cbz	r3, 3dc6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3da8:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3daa:	cbnz	r2, 3dae <EventResponder::runFromInterrupt()+0x1e>
    3dac:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3dae:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3db0:	ldr	r3, [r0, #8]
    3db2:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3db4:	mrs	r2, PRIMASK
		__disable_irq();
    3db8:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3dba:	ldr	r0, [r4, #0]
		if (first) {
    3dbc:	cmp	r0, #0
    3dbe:	bne.n	3da2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3dc0:	cbnz	r2, 3dc4 <EventResponder::runFromInterrupt()+0x34>
    3dc2:	cpsie	i
    3dc4:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3dc6:	str	r3, [r6, #0]
    3dc8:	b.n	3daa <EventResponder::runFromInterrupt()+0x1a>
    3dca:	nop
    3dcc:	.word	0x1fff1c70
    3dd0:	.word	0x1fff1c74

00003dd4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3dd4:	b.w	3d90 <EventResponder::runFromInterrupt()>

00003dd8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3dd8:	ldr	r2, [pc, #96]	; (3e3c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3dda:	push	{r4, r5}
	if (listActive == nullptr) {
    3ddc:	ldr	r4, [r2, #0]
    3dde:	cmp	r4, #0
    3de0:	beq.n	3e32 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3de2:	ldr	r3, [r0, #0]
    3de4:	ldr	r1, [r4, #0]
    3de6:	cmp	r3, r1
    3de8:	bcs.n	3e08 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3dea:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3dec:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3dee:	str	r4, [r0, #8]
		_prev = nullptr;
    3df0:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3df2:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3df4:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3df6:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3df8:	movs	r3, #2
    3dfa:	strb	r3, [r0, #20]
}
    3dfc:	pop	{r4, r5}
    3dfe:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3e00:	ldr	r1, [r2, #0]
    3e02:	cmp	r3, r1
    3e04:	mov	r4, r2
    3e06:	bcc.n	3e1a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3e08:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3e0a:	subs	r3, r3, r1
    3e0c:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3e0e:	cmp	r2, #0
    3e10:	bne.n	3e00 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3e12:	str	r2, [r0, #8]
		_prev = timer;
    3e14:	str	r4, [r0, #12]
		timer->_next = this;
    3e16:	str	r0, [r4, #8]
    3e18:	b.n	3df8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3e1a:	ldr	r2, [r2, #12]
    3e1c:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3e1e:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3e20:	str	r0, [r4, #12]
				_prev->_next = this;
    3e22:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3e24:	subs	r3, r1, r3
				_state = TimerActive;
    3e26:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    3e28:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    3e2a:	str	r3, [r4, #0]
				_state = TimerActive;
    3e2c:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3e2e:	pop	{r4, r5}
    3e30:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3e32:	str	r4, [r0, #8]
		_prev = nullptr;
    3e34:	str	r4, [r0, #12]
		listActive = this;
    3e36:	str	r0, [r2, #0]
    3e38:	b.n	3df8 <MillisTimer::addToActiveList()+0x20>
    3e3a:	nop
    3e3c:	.word	0x1fff1c78

00003e40 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3e40:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3e42:	ldr	r6, [pc, #136]	; (3ecc <MillisTimer::runFromTimer()+0x8c>)
    3e44:	ldr	r4, [r6, #0]
	while (timer) {
    3e46:	cbz	r4, 3e94 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3e48:	ldr	r3, [r4, #0]
    3e4a:	cmp	r3, #0
    3e4c:	bne.n	3ec4 <MillisTimer::runFromTimer()+0x84>
    3e4e:	ldr	r7, [pc, #128]	; (3ed0 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3e50:	mov	r5, r3
    3e52:	b.n	3e5e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3e54:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3e56:	cbz	r4, 3e94 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3e58:	ldr	r3, [r4, #0]
    3e5a:	cmp	r3, #0
    3e5c:	bne.n	3ec4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3e5e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3e60:	cbz	r3, 3e64 <MillisTimer::runFromTimer()+0x24>
    3e62:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3e64:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3e66:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3e68:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3e6a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3e6c:	ldr	r3, [r3, #0]
    3e6e:	cmp	r3, r7
    3e70:	bne.n	3eb6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3e72:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3e74:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3e76:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3e78:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3e7a:	beq.n	3ebe <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3e7c:	bl	3cf4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3e80:	ldr	r3, [r4, #4]
    3e82:	cmp	r3, #0
    3e84:	beq.n	3e54 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3e86:	str	r3, [r4, #0]
				timer->addToActiveList();
    3e88:	mov	r0, r4
    3e8a:	bl	3dd8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3e8e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3e90:	cmp	r4, #0
    3e92:	bne.n	3e58 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3e94:	mrs	r3, PRIMASK
		__disable_irq();
    3e98:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3e9a:	ldr	r2, [pc, #56]	; (3ed4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3e9c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3e9e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3ea0:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3ea2:	cbnz	r3, 3ea6 <MillisTimer::runFromTimer()+0x66>
    3ea4:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3ea6:	cbz	r0, 3eb4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3ea8:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3eaa:	bl	3dd8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3eae:	mov	r0, r4
    3eb0:	cmp	r0, #0
    3eb2:	bne.n	3ea8 <MillisTimer::runFromTimer()+0x68>
    3eb4:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3eb6:	mov	r2, r4
    3eb8:	movs	r1, #0
    3eba:	blx	r3
    3ebc:	b.n	3e80 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3ebe:	ldr	r3, [r0, #8]
    3ec0:	blx	r3
    3ec2:	b.n	3e80 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3ec4:	subs	r3, #1
    3ec6:	str	r3, [r4, #0]
			break;
    3ec8:	b.n	3e94 <MillisTimer::runFromTimer()+0x54>
    3eca:	nop
    3ecc:	.word	0x1fff1c78
    3ed0:	.word	0x00003d75
    3ed4:	.word	0x1fff1c88

00003ed8 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    3ed8:	ldr	r2, [pc, #8]	; (3ee4 <systick_isr+0xc>)
    3eda:	ldr	r3, [r2, #0]
    3edc:	adds	r3, #1
    3ede:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3ee0:	b.w	3e40 <MillisTimer::runFromTimer()>
    3ee4:	.word	0x1fff1810

00003ee8 <__errno>:
    3ee8:	ldr	r3, [pc, #4]	; (3ef0 <__errno+0x8>)
    3eea:	ldr	r0, [r3, #0]
    3eec:	bx	lr
    3eee:	nop
    3ef0:	.word	0x1fff1198

00003ef4 <__libc_init_array>:
    3ef4:	push	{r4, r5, r6, lr}
    3ef6:	ldr	r6, [pc, #60]	; (3f34 <__libc_init_array+0x40>)
    3ef8:	ldr	r5, [pc, #60]	; (3f38 <__libc_init_array+0x44>)
    3efa:	subs	r6, r6, r5
    3efc:	asrs	r6, r6, #2
    3efe:	it	ne
    3f00:	movne	r4, #0
    3f02:	beq.n	3f10 <__libc_init_array+0x1c>
    3f04:	adds	r4, #1
    3f06:	ldr.w	r3, [r5], #4
    3f0a:	blx	r3
    3f0c:	cmp	r6, r4
    3f0e:	bne.n	3f04 <__libc_init_array+0x10>
    3f10:	ldr	r6, [pc, #40]	; (3f3c <__libc_init_array+0x48>)
    3f12:	ldr	r5, [pc, #44]	; (3f40 <__libc_init_array+0x4c>)
    3f14:	subs	r6, r6, r5
    3f16:	bl	4b98 <_init>
    3f1a:	asrs	r6, r6, #2
    3f1c:	it	ne
    3f1e:	movne	r4, #0
    3f20:	beq.n	3f30 <__libc_init_array+0x3c>
    3f22:	adds	r4, #1
    3f24:	ldr.w	r3, [r5], #4
    3f28:	blx	r3
    3f2a:	cmp	r6, r4
    3f2c:	bne.n	3f22 <__libc_init_array+0x2e>
    3f2e:	pop	{r4, r5, r6, pc}
    3f30:	pop	{r4, r5, r6, pc}
    3f32:	nop
    3f34:	.word	0x00004ba4
    3f38:	.word	0x00004ba4
    3f3c:	.word	0x00004bb0
    3f40:	.word	0x00004ba4

00003f44 <malloc>:
    3f44:	ldr	r3, [pc, #8]	; (3f50 <malloc+0xc>)
    3f46:	mov	r1, r0
    3f48:	ldr	r0, [r3, #0]
    3f4a:	b.w	3f54 <_malloc_r>
    3f4e:	nop
    3f50:	.word	0x1fff1198

00003f54 <_malloc_r>:
    3f54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f58:	add.w	r5, r1, #11
    3f5c:	cmp	r5, #22
    3f5e:	sub	sp, #12
    3f60:	mov	r6, r0
    3f62:	bls.w	40a4 <_malloc_r+0x150>
    3f66:	bics.w	r5, r5, #7
    3f6a:	bmi.w	40ec <_malloc_r+0x198>
    3f6e:	cmp	r1, r5
    3f70:	bhi.w	40ec <_malloc_r+0x198>
    3f74:	bl	44c4 <__malloc_lock>
    3f78:	cmp.w	r5, #504	; 0x1f8
    3f7c:	bcc.w	44b8 <_malloc_r+0x564>
    3f80:	lsrs	r3, r5, #9
    3f82:	beq.w	40fa <_malloc_r+0x1a6>
    3f86:	cmp	r3, #4
    3f88:	bhi.w	4292 <_malloc_r+0x33e>
    3f8c:	lsrs	r0, r5, #6
    3f8e:	add.w	lr, r0, #57	; 0x39
    3f92:	mov.w	r3, lr, lsl #1
    3f96:	adds	r0, #56	; 0x38
    3f98:	ldr	r7, [pc, #784]	; (42ac <_malloc_r+0x358>)
    3f9a:	add.w	r3, r7, r3, lsl #2
    3f9e:	sub.w	r1, r3, #8
    3fa2:	ldr	r4, [r3, #4]
    3fa4:	cmp	r1, r4
    3fa6:	bne.n	3fb8 <_malloc_r+0x64>
    3fa8:	b.n	4104 <_malloc_r+0x1b0>
    3faa:	cmp	r2, #0
    3fac:	bge.w	4108 <_malloc_r+0x1b4>
    3fb0:	ldr	r4, [r4, #12]
    3fb2:	cmp	r1, r4
    3fb4:	beq.w	4104 <_malloc_r+0x1b0>
    3fb8:	ldr	r3, [r4, #4]
    3fba:	bic.w	r3, r3, #3
    3fbe:	subs	r2, r3, r5
    3fc0:	cmp	r2, #15
    3fc2:	ble.n	3faa <_malloc_r+0x56>
    3fc4:	ldr	r1, [pc, #740]	; (42ac <_malloc_r+0x358>)
    3fc6:	ldr	r4, [r7, #16]
    3fc8:	add.w	lr, r1, #8
    3fcc:	cmp	r4, lr
    3fce:	beq.w	4338 <_malloc_r+0x3e4>
    3fd2:	ldr	r3, [r4, #4]
    3fd4:	bic.w	r3, r3, #3
    3fd8:	subs	r2, r3, r5
    3fda:	cmp	r2, #15
    3fdc:	bgt.w	4312 <_malloc_r+0x3be>
    3fe0:	cmp	r2, #0
    3fe2:	str.w	lr, [r1, #20]
    3fe6:	str.w	lr, [r1, #16]
    3fea:	bge.w	412a <_malloc_r+0x1d6>
    3fee:	cmp.w	r3, #512	; 0x200
    3ff2:	bcs.w	42c4 <_malloc_r+0x370>
    3ff6:	lsrs	r3, r3, #3
    3ff8:	add.w	ip, r3, #1
    3ffc:	movs	r2, #1
    3ffe:	asrs	r3, r3, #2
    4000:	lsl.w	r3, r2, r3
    4004:	ldr	r2, [r1, #4]
    4006:	ldr.w	r8, [r1, ip, lsl #3]
    400a:	str.w	r8, [r4, #8]
    400e:	add.w	r9, r1, ip, lsl #3
    4012:	orrs	r2, r3
    4014:	sub.w	r3, r9, #8
    4018:	str	r3, [r4, #12]
    401a:	str	r2, [r1, #4]
    401c:	str.w	r4, [r1, ip, lsl #3]
    4020:	str.w	r4, [r8, #12]
    4024:	asrs	r3, r0, #2
    4026:	movs	r4, #1
    4028:	lsls	r4, r3
    402a:	cmp	r4, r2
    402c:	bhi.w	4144 <_malloc_r+0x1f0>
    4030:	tst	r4, r2
    4032:	bne.n	4042 <_malloc_r+0xee>
    4034:	bic.w	r0, r0, #3
    4038:	lsls	r4, r4, #1
    403a:	tst	r4, r2
    403c:	add.w	r0, r0, #4
    4040:	beq.n	4038 <_malloc_r+0xe4>
    4042:	add.w	r9, r7, r0, lsl #3
    4046:	mov	ip, r9
    4048:	mov	r8, r0
    404a:	ldr.w	r1, [ip, #12]
    404e:	cmp	ip, r1
    4050:	bne.n	4062 <_malloc_r+0x10e>
    4052:	b.n	433c <_malloc_r+0x3e8>
    4054:	cmp	r2, #0
    4056:	bge.w	435c <_malloc_r+0x408>
    405a:	ldr	r1, [r1, #12]
    405c:	cmp	ip, r1
    405e:	beq.w	433c <_malloc_r+0x3e8>
    4062:	ldr	r3, [r1, #4]
    4064:	bic.w	r3, r3, #3
    4068:	subs	r2, r3, r5
    406a:	cmp	r2, #15
    406c:	ble.n	4054 <_malloc_r+0x100>
    406e:	mov	r4, r1
    4070:	ldr.w	ip, [r1, #12]
    4074:	ldr.w	r8, [r4, #8]!
    4078:	adds	r3, r1, r5
    407a:	orr.w	r5, r5, #1
    407e:	str	r5, [r1, #4]
    4080:	orr.w	r1, r2, #1
    4084:	str.w	ip, [r8, #12]
    4088:	mov	r0, r6
    408a:	str.w	r8, [ip, #8]
    408e:	str	r3, [r7, #20]
    4090:	str	r3, [r7, #16]
    4092:	str.w	lr, [r3, #12]
    4096:	str.w	lr, [r3, #8]
    409a:	str	r1, [r3, #4]
    409c:	str	r2, [r3, r2]
    409e:	bl	44c8 <__malloc_unlock>
    40a2:	b.n	40e4 <_malloc_r+0x190>
    40a4:	cmp	r1, #16
    40a6:	bhi.n	40ec <_malloc_r+0x198>
    40a8:	bl	44c4 <__malloc_lock>
    40ac:	movs	r5, #16
    40ae:	movs	r3, #6
    40b0:	movs	r0, #2
    40b2:	ldr	r7, [pc, #504]	; (42ac <_malloc_r+0x358>)
    40b4:	add.w	r3, r7, r3, lsl #2
    40b8:	sub.w	r2, r3, #8
    40bc:	ldr	r4, [r3, #4]
    40be:	cmp	r4, r2
    40c0:	beq.w	434e <_malloc_r+0x3fa>
    40c4:	ldr	r3, [r4, #4]
    40c6:	ldr	r1, [r4, #12]
    40c8:	ldr	r5, [r4, #8]
    40ca:	bic.w	r3, r3, #3
    40ce:	add	r3, r4
    40d0:	mov	r0, r6
    40d2:	ldr	r2, [r3, #4]
    40d4:	str	r1, [r5, #12]
    40d6:	orr.w	r2, r2, #1
    40da:	str	r5, [r1, #8]
    40dc:	str	r2, [r3, #4]
    40de:	bl	44c8 <__malloc_unlock>
    40e2:	adds	r4, #8
    40e4:	mov	r0, r4
    40e6:	add	sp, #12
    40e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40ec:	movs	r4, #0
    40ee:	movs	r3, #12
    40f0:	mov	r0, r4
    40f2:	str	r3, [r6, #0]
    40f4:	add	sp, #12
    40f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40fa:	movs	r3, #128	; 0x80
    40fc:	mov.w	lr, #64	; 0x40
    4100:	movs	r0, #63	; 0x3f
    4102:	b.n	3f98 <_malloc_r+0x44>
    4104:	mov	r0, lr
    4106:	b.n	3fc4 <_malloc_r+0x70>
    4108:	add	r3, r4
    410a:	ldr	r1, [r4, #12]
    410c:	ldr	r2, [r3, #4]
    410e:	ldr	r5, [r4, #8]
    4110:	orr.w	r2, r2, #1
    4114:	str	r1, [r5, #12]
    4116:	mov	r0, r6
    4118:	str	r5, [r1, #8]
    411a:	str	r2, [r3, #4]
    411c:	bl	44c8 <__malloc_unlock>
    4120:	adds	r4, #8
    4122:	mov	r0, r4
    4124:	add	sp, #12
    4126:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    412a:	add	r3, r4
    412c:	mov	r0, r6
    412e:	ldr	r2, [r3, #4]
    4130:	orr.w	r2, r2, #1
    4134:	str	r2, [r3, #4]
    4136:	bl	44c8 <__malloc_unlock>
    413a:	adds	r4, #8
    413c:	mov	r0, r4
    413e:	add	sp, #12
    4140:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4144:	ldr	r4, [r7, #8]
    4146:	ldr	r3, [r4, #4]
    4148:	bic.w	r8, r3, #3
    414c:	cmp	r8, r5
    414e:	bcc.n	415a <_malloc_r+0x206>
    4150:	rsb	r3, r5, r8
    4154:	cmp	r3, #15
    4156:	bgt.w	4272 <_malloc_r+0x31e>
    415a:	ldr	r3, [pc, #340]	; (42b0 <_malloc_r+0x35c>)
    415c:	ldr.w	r9, [pc, #352]	; 42c0 <_malloc_r+0x36c>
    4160:	ldr	r2, [r3, #0]
    4162:	ldr.w	r3, [r9]
    4166:	adds	r3, #1
    4168:	add	r2, r5
    416a:	add.w	sl, r4, r8
    416e:	beq.w	4432 <_malloc_r+0x4de>
    4172:	add.w	r2, r2, #4096	; 0x1000
    4176:	adds	r2, #15
    4178:	bic.w	r2, r2, #4080	; 0xff0
    417c:	bic.w	r2, r2, #15
    4180:	mov	r1, r2
    4182:	mov	r0, r6
    4184:	str	r2, [sp, #4]
    4186:	bl	44cc <_sbrk_r>
    418a:	cmp.w	r0, #4294967295
    418e:	mov	fp, r0
    4190:	ldr	r2, [sp, #4]
    4192:	beq.w	4446 <_malloc_r+0x4f2>
    4196:	cmp	sl, r0
    4198:	bhi.w	4394 <_malloc_r+0x440>
    419c:	ldr	r3, [pc, #276]	; (42b4 <_malloc_r+0x360>)
    419e:	ldr	r1, [r3, #0]
    41a0:	cmp	sl, fp
    41a2:	add	r1, r2
    41a4:	str	r1, [r3, #0]
    41a6:	beq.w	4450 <_malloc_r+0x4fc>
    41aa:	ldr.w	r0, [r9]
    41ae:	ldr.w	lr, [pc, #272]	; 42c0 <_malloc_r+0x36c>
    41b2:	adds	r0, #1
    41b4:	ittet	ne
    41b6:	rsbne	sl, sl, fp
    41ba:	addne	r1, sl
    41bc:	streq.w	fp, [lr]
    41c0:	strne	r1, [r3, #0]
    41c2:	ands.w	r1, fp, #7
    41c6:	beq.w	43f8 <_malloc_r+0x4a4>
    41ca:	rsb	r0, r1, #8
    41ce:	rsb	r1, r1, #4096	; 0x1000
    41d2:	add	fp, r0
    41d4:	adds	r1, #8
    41d6:	add	r2, fp
    41d8:	ubfx	r2, r2, #0, #12
    41dc:	rsb	r9, r2, r1
    41e0:	mov	r1, r9
    41e2:	mov	r0, r6
    41e4:	str	r3, [sp, #4]
    41e6:	bl	44cc <_sbrk_r>
    41ea:	adds	r3, r0, #1
    41ec:	ldr	r3, [sp, #4]
    41ee:	beq.w	4470 <_malloc_r+0x51c>
    41f2:	rsb	r2, fp, r0
    41f6:	add	r2, r9
    41f8:	orr.w	r2, r2, #1
    41fc:	ldr	r1, [r3, #0]
    41fe:	str.w	fp, [r7, #8]
    4202:	add	r1, r9
    4204:	cmp	r4, r7
    4206:	str.w	r2, [fp, #4]
    420a:	str	r1, [r3, #0]
    420c:	ldr.w	r9, [pc, #164]	; 42b4 <_malloc_r+0x360>
    4210:	beq.n	4240 <_malloc_r+0x2ec>
    4212:	cmp.w	r8, #15
    4216:	bls.w	4414 <_malloc_r+0x4c0>
    421a:	ldr	r2, [r4, #4]
    421c:	sub.w	r3, r8, #12
    4220:	bic.w	r3, r3, #7
    4224:	adds	r0, r4, r3
    4226:	and.w	r2, r2, #1
    422a:	mov.w	lr, #5
    422e:	orrs	r2, r3
    4230:	cmp	r3, #15
    4232:	str	r2, [r4, #4]
    4234:	str.w	lr, [r0, #4]
    4238:	str.w	lr, [r0, #8]
    423c:	bhi.w	4478 <_malloc_r+0x524>
    4240:	ldr	r3, [pc, #116]	; (42b8 <_malloc_r+0x364>)
    4242:	ldr	r4, [r7, #8]
    4244:	ldr	r2, [r3, #0]
    4246:	cmp	r1, r2
    4248:	it	hi
    424a:	strhi	r1, [r3, #0]
    424c:	ldr	r3, [pc, #108]	; (42bc <_malloc_r+0x368>)
    424e:	ldr	r2, [r3, #0]
    4250:	cmp	r1, r2
    4252:	ldr	r2, [r4, #4]
    4254:	it	hi
    4256:	strhi	r1, [r3, #0]
    4258:	bic.w	r2, r2, #3
    425c:	cmp	r5, r2
    425e:	sub.w	r3, r2, r5
    4262:	bhi.n	4268 <_malloc_r+0x314>
    4264:	cmp	r3, #15
    4266:	bgt.n	4272 <_malloc_r+0x31e>
    4268:	mov	r0, r6
    426a:	bl	44c8 <__malloc_unlock>
    426e:	movs	r4, #0
    4270:	b.n	40e4 <_malloc_r+0x190>
    4272:	adds	r2, r4, r5
    4274:	orr.w	r3, r3, #1
    4278:	orr.w	r5, r5, #1
    427c:	str	r5, [r4, #4]
    427e:	mov	r0, r6
    4280:	str	r2, [r7, #8]
    4282:	str	r3, [r2, #4]
    4284:	bl	44c8 <__malloc_unlock>
    4288:	adds	r4, #8
    428a:	mov	r0, r4
    428c:	add	sp, #12
    428e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4292:	cmp	r3, #20
    4294:	bls.n	437a <_malloc_r+0x426>
    4296:	cmp	r3, #84	; 0x54
    4298:	bhi.w	43e4 <_malloc_r+0x490>
    429c:	lsrs	r0, r5, #12
    429e:	add.w	lr, r0, #111	; 0x6f
    42a2:	mov.w	r3, lr, lsl #1
    42a6:	adds	r0, #110	; 0x6e
    42a8:	b.n	3f98 <_malloc_r+0x44>
    42aa:	nop
    42ac:	.word	0x1fff119c
    42b0:	.word	0x1fff1c94
    42b4:	.word	0x1fff1c98
    42b8:	.word	0x1fff1c90
    42bc:	.word	0x1fff1c8c
    42c0:	.word	0x1fff15a8
    42c4:	lsrs	r2, r3, #9
    42c6:	cmp	r2, #4
    42c8:	bls.n	4388 <_malloc_r+0x434>
    42ca:	cmp	r2, #20
    42cc:	bhi.w	4436 <_malloc_r+0x4e2>
    42d0:	add.w	r1, r2, #92	; 0x5c
    42d4:	lsls	r1, r1, #1
    42d6:	adds	r2, #91	; 0x5b
    42d8:	add.w	ip, r7, r1, lsl #2
    42dc:	ldr.w	r1, [r7, r1, lsl #2]
    42e0:	ldr.w	r8, [pc, #476]	; 44c0 <_malloc_r+0x56c>
    42e4:	sub.w	ip, ip, #8
    42e8:	cmp	ip, r1
    42ea:	beq.w	43fe <_malloc_r+0x4aa>
    42ee:	ldr	r2, [r1, #4]
    42f0:	bic.w	r2, r2, #3
    42f4:	cmp	r3, r2
    42f6:	bcs.n	42fe <_malloc_r+0x3aa>
    42f8:	ldr	r1, [r1, #8]
    42fa:	cmp	ip, r1
    42fc:	bne.n	42ee <_malloc_r+0x39a>
    42fe:	ldr.w	ip, [r1, #12]
    4302:	ldr	r2, [r7, #4]
    4304:	str.w	ip, [r4, #12]
    4308:	str	r1, [r4, #8]
    430a:	str.w	r4, [ip, #8]
    430e:	str	r4, [r1, #12]
    4310:	b.n	4024 <_malloc_r+0xd0>
    4312:	adds	r3, r4, r5
    4314:	orr.w	r7, r2, #1
    4318:	orr.w	r5, r5, #1
    431c:	str	r5, [r4, #4]
    431e:	mov	r0, r6
    4320:	str	r3, [r1, #20]
    4322:	str	r3, [r1, #16]
    4324:	str.w	lr, [r3, #12]
    4328:	str.w	lr, [r3, #8]
    432c:	str	r7, [r3, #4]
    432e:	str	r2, [r3, r2]
    4330:	adds	r4, #8
    4332:	bl	44c8 <__malloc_unlock>
    4336:	b.n	40e4 <_malloc_r+0x190>
    4338:	ldr	r2, [r1, #4]
    433a:	b.n	4024 <_malloc_r+0xd0>
    433c:	add.w	r8, r8, #1
    4340:	tst.w	r8, #3
    4344:	add.w	ip, ip, #8
    4348:	bne.w	404a <_malloc_r+0xf6>
    434c:	b.n	43b0 <_malloc_r+0x45c>
    434e:	ldr	r4, [r3, #12]
    4350:	cmp	r3, r4
    4352:	it	eq
    4354:	addeq	r0, #2
    4356:	beq.w	3fc4 <_malloc_r+0x70>
    435a:	b.n	40c4 <_malloc_r+0x170>
    435c:	add	r3, r1
    435e:	mov	r4, r1
    4360:	ldr	r2, [r3, #4]
    4362:	ldr	r1, [r1, #12]
    4364:	ldr.w	r5, [r4, #8]!
    4368:	orr.w	r2, r2, #1
    436c:	str	r2, [r3, #4]
    436e:	mov	r0, r6
    4370:	str	r1, [r5, #12]
    4372:	str	r5, [r1, #8]
    4374:	bl	44c8 <__malloc_unlock>
    4378:	b.n	40e4 <_malloc_r+0x190>
    437a:	add.w	lr, r3, #92	; 0x5c
    437e:	add.w	r0, r3, #91	; 0x5b
    4382:	mov.w	r3, lr, lsl #1
    4386:	b.n	3f98 <_malloc_r+0x44>
    4388:	lsrs	r2, r3, #6
    438a:	add.w	r1, r2, #57	; 0x39
    438e:	lsls	r1, r1, #1
    4390:	adds	r2, #56	; 0x38
    4392:	b.n	42d8 <_malloc_r+0x384>
    4394:	cmp	r4, r7
    4396:	ldr	r3, [pc, #296]	; (44c0 <_malloc_r+0x56c>)
    4398:	beq.w	419c <_malloc_r+0x248>
    439c:	ldr	r4, [r3, #8]
    439e:	ldr	r2, [r4, #4]
    43a0:	bic.w	r2, r2, #3
    43a4:	b.n	425c <_malloc_r+0x308>
    43a6:	ldr.w	r3, [r9], #-8
    43aa:	cmp	r9, r3
    43ac:	bne.w	44b4 <_malloc_r+0x560>
    43b0:	tst.w	r0, #3
    43b4:	add.w	r0, r0, #4294967295
    43b8:	bne.n	43a6 <_malloc_r+0x452>
    43ba:	ldr	r3, [r7, #4]
    43bc:	bic.w	r3, r3, r4
    43c0:	str	r3, [r7, #4]
    43c2:	lsls	r4, r4, #1
    43c4:	cmp	r4, r3
    43c6:	bhi.w	4144 <_malloc_r+0x1f0>
    43ca:	cmp	r4, #0
    43cc:	beq.w	4144 <_malloc_r+0x1f0>
    43d0:	tst	r4, r3
    43d2:	mov	r0, r8
    43d4:	bne.w	4042 <_malloc_r+0xee>
    43d8:	lsls	r4, r4, #1
    43da:	tst	r4, r3
    43dc:	add.w	r0, r0, #4
    43e0:	beq.n	43d8 <_malloc_r+0x484>
    43e2:	b.n	4042 <_malloc_r+0xee>
    43e4:	cmp.w	r3, #340	; 0x154
    43e8:	bhi.n	441c <_malloc_r+0x4c8>
    43ea:	lsrs	r0, r5, #15
    43ec:	add.w	lr, r0, #120	; 0x78
    43f0:	mov.w	r3, lr, lsl #1
    43f4:	adds	r0, #119	; 0x77
    43f6:	b.n	3f98 <_malloc_r+0x44>
    43f8:	mov.w	r1, #4096	; 0x1000
    43fc:	b.n	41d6 <_malloc_r+0x282>
    43fe:	movs	r1, #1
    4400:	ldr.w	r3, [r8, #4]
    4404:	asrs	r2, r2, #2
    4406:	lsl.w	r2, r1, r2
    440a:	orrs	r2, r3
    440c:	str.w	r2, [r8, #4]
    4410:	mov	r1, ip
    4412:	b.n	4304 <_malloc_r+0x3b0>
    4414:	movs	r3, #1
    4416:	str.w	r3, [fp, #4]
    441a:	b.n	4268 <_malloc_r+0x314>
    441c:	movw	r2, #1364	; 0x554
    4420:	cmp	r3, r2
    4422:	bhi.n	4466 <_malloc_r+0x512>
    4424:	lsrs	r0, r5, #18
    4426:	add.w	lr, r0, #125	; 0x7d
    442a:	mov.w	r3, lr, lsl #1
    442e:	adds	r0, #124	; 0x7c
    4430:	b.n	3f98 <_malloc_r+0x44>
    4432:	adds	r2, #16
    4434:	b.n	4180 <_malloc_r+0x22c>
    4436:	cmp	r2, #84	; 0x54
    4438:	bhi.n	4488 <_malloc_r+0x534>
    443a:	lsrs	r2, r3, #12
    443c:	add.w	r1, r2, #111	; 0x6f
    4440:	lsls	r1, r1, #1
    4442:	adds	r2, #110	; 0x6e
    4444:	b.n	42d8 <_malloc_r+0x384>
    4446:	ldr	r4, [r7, #8]
    4448:	ldr	r2, [r4, #4]
    444a:	bic.w	r2, r2, #3
    444e:	b.n	425c <_malloc_r+0x308>
    4450:	ubfx	r0, sl, #0, #12
    4454:	cmp	r0, #0
    4456:	bne.w	41aa <_malloc_r+0x256>
    445a:	add	r2, r8
    445c:	ldr	r3, [r7, #8]
    445e:	orr.w	r2, r2, #1
    4462:	str	r2, [r3, #4]
    4464:	b.n	4240 <_malloc_r+0x2ec>
    4466:	movs	r3, #254	; 0xfe
    4468:	mov.w	lr, #127	; 0x7f
    446c:	movs	r0, #126	; 0x7e
    446e:	b.n	3f98 <_malloc_r+0x44>
    4470:	movs	r2, #1
    4472:	mov.w	r9, #0
    4476:	b.n	41fc <_malloc_r+0x2a8>
    4478:	add.w	r1, r4, #8
    447c:	mov	r0, r6
    447e:	bl	45d4 <_free_r>
    4482:	ldr.w	r1, [r9]
    4486:	b.n	4240 <_malloc_r+0x2ec>
    4488:	cmp.w	r2, #340	; 0x154
    448c:	bhi.n	449a <_malloc_r+0x546>
    448e:	lsrs	r2, r3, #15
    4490:	add.w	r1, r2, #120	; 0x78
    4494:	lsls	r1, r1, #1
    4496:	adds	r2, #119	; 0x77
    4498:	b.n	42d8 <_malloc_r+0x384>
    449a:	movw	r1, #1364	; 0x554
    449e:	cmp	r2, r1
    44a0:	bhi.n	44ae <_malloc_r+0x55a>
    44a2:	lsrs	r2, r3, #18
    44a4:	add.w	r1, r2, #125	; 0x7d
    44a8:	lsls	r1, r1, #1
    44aa:	adds	r2, #124	; 0x7c
    44ac:	b.n	42d8 <_malloc_r+0x384>
    44ae:	movs	r1, #254	; 0xfe
    44b0:	movs	r2, #126	; 0x7e
    44b2:	b.n	42d8 <_malloc_r+0x384>
    44b4:	ldr	r3, [r7, #4]
    44b6:	b.n	43c2 <_malloc_r+0x46e>
    44b8:	lsrs	r0, r5, #3
    44ba:	adds	r3, r0, #1
    44bc:	lsls	r3, r3, #1
    44be:	b.n	40b2 <_malloc_r+0x15e>
    44c0:	.word	0x1fff119c

000044c4 <__malloc_lock>:
    44c4:	bx	lr
    44c6:	nop

000044c8 <__malloc_unlock>:
    44c8:	bx	lr
    44ca:	nop

000044cc <_sbrk_r>:
    44cc:	push	{r3, r4, r5, lr}
    44ce:	ldr	r4, [pc, #28]	; (44ec <_sbrk_r+0x20>)
    44d0:	movs	r3, #0
    44d2:	mov	r5, r0
    44d4:	mov	r0, r1
    44d6:	str	r3, [r4, #0]
    44d8:	bl	3860 <_sbrk>
    44dc:	adds	r3, r0, #1
    44de:	beq.n	44e2 <_sbrk_r+0x16>
    44e0:	pop	{r3, r4, r5, pc}
    44e2:	ldr	r3, [r4, #0]
    44e4:	cmp	r3, #0
    44e6:	beq.n	44e0 <_sbrk_r+0x14>
    44e8:	str	r3, [r5, #0]
    44ea:	pop	{r3, r4, r5, pc}
    44ec:	.word	0x1fff1e04

000044f0 <register_fini>:
    44f0:	ldr	r3, [pc, #8]	; (44fc <register_fini+0xc>)
    44f2:	cbz	r3, 44fa <register_fini+0xa>
    44f4:	ldr	r0, [pc, #8]	; (4500 <register_fini+0x10>)
    44f6:	b.w	4504 <atexit>
    44fa:	bx	lr
    44fc:	.word	0x00000000
    4500:	.word	0x00004511

00004504 <atexit>:
    4504:	movs	r3, #0
    4506:	mov	r1, r0
    4508:	mov	r2, r3
    450a:	mov	r0, r3
    450c:	b.w	47a4 <__register_exitproc>

00004510 <__libc_fini_array>:
    4510:	push	{r3, r4, r5, lr}
    4512:	ldr	r5, [pc, #28]	; (4530 <__libc_fini_array+0x20>)
    4514:	ldr	r4, [pc, #28]	; (4534 <__libc_fini_array+0x24>)
    4516:	subs	r4, r5, r4
    4518:	asrs	r4, r4, #2
    451a:	beq.n	4528 <__libc_fini_array+0x18>
    451c:	subs	r4, #1
    451e:	ldr.w	r3, [r5, #-4]!
    4522:	blx	r3
    4524:	cmp	r4, #0
    4526:	bne.n	451c <__libc_fini_array+0xc>
    4528:	ldmia.w	sp!, {r3, r4, r5, lr}
    452c:	b.w	4bb0 <__init_array_end>
	...

00004538 <_malloc_trim_r>:
    4538:	push	{r3, r4, r5, r6, r7, lr}
    453a:	ldr	r7, [pc, #140]	; (45c8 <_malloc_trim_r+0x90>)
    453c:	mov	r4, r1
    453e:	mov	r6, r0
    4540:	bl	44c4 <__malloc_lock>
    4544:	ldr	r3, [r7, #8]
    4546:	ldr	r5, [r3, #4]
    4548:	bic.w	r5, r5, #3
    454c:	subs	r1, r5, r4
    454e:	addw	r1, r1, #4079	; 0xfef
    4552:	bic.w	r1, r1, #4080	; 0xff0
    4556:	bic.w	r1, r1, #15
    455a:	sub.w	r4, r1, #4096	; 0x1000
    455e:	cmp.w	r4, #4096	; 0x1000
    4562:	blt.n	4574 <_malloc_trim_r+0x3c>
    4564:	movs	r1, #0
    4566:	mov	r0, r6
    4568:	bl	44cc <_sbrk_r>
    456c:	ldr	r3, [r7, #8]
    456e:	add	r3, r5
    4570:	cmp	r0, r3
    4572:	beq.n	457e <_malloc_trim_r+0x46>
    4574:	mov	r0, r6
    4576:	bl	44c8 <__malloc_unlock>
    457a:	movs	r0, #0
    457c:	pop	{r3, r4, r5, r6, r7, pc}
    457e:	negs	r1, r4
    4580:	mov	r0, r6
    4582:	bl	44cc <_sbrk_r>
    4586:	adds	r0, #1
    4588:	beq.n	45a6 <_malloc_trim_r+0x6e>
    458a:	ldr	r3, [pc, #64]	; (45cc <_malloc_trim_r+0x94>)
    458c:	ldr	r2, [r7, #8]
    458e:	ldr	r1, [r3, #0]
    4590:	subs	r5, r5, r4
    4592:	orr.w	r5, r5, #1
    4596:	mov	r0, r6
    4598:	subs	r1, r1, r4
    459a:	str	r5, [r2, #4]
    459c:	str	r1, [r3, #0]
    459e:	bl	44c8 <__malloc_unlock>
    45a2:	movs	r0, #1
    45a4:	pop	{r3, r4, r5, r6, r7, pc}
    45a6:	movs	r1, #0
    45a8:	mov	r0, r6
    45aa:	bl	44cc <_sbrk_r>
    45ae:	ldr	r2, [r7, #8]
    45b0:	subs	r3, r0, r2
    45b2:	cmp	r3, #15
    45b4:	ble.n	4574 <_malloc_trim_r+0x3c>
    45b6:	ldr	r4, [pc, #24]	; (45d0 <_malloc_trim_r+0x98>)
    45b8:	ldr	r1, [pc, #16]	; (45cc <_malloc_trim_r+0x94>)
    45ba:	ldr	r4, [r4, #0]
    45bc:	orr.w	r3, r3, #1
    45c0:	subs	r0, r0, r4
    45c2:	str	r3, [r2, #4]
    45c4:	str	r0, [r1, #0]
    45c6:	b.n	4574 <_malloc_trim_r+0x3c>
    45c8:	.word	0x1fff119c
    45cc:	.word	0x1fff1c98
    45d0:	.word	0x1fff15a8

000045d4 <_free_r>:
    45d4:	cmp	r1, #0
    45d6:	beq.n	4664 <_free_r+0x90>
    45d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45dc:	mov	r5, r1
    45de:	mov	r8, r0
    45e0:	bl	44c4 <__malloc_lock>
    45e4:	ldr.w	r7, [r5, #-4]
    45e8:	ldr	r1, [pc, #424]	; (4794 <_free_r+0x1c0>)
    45ea:	bic.w	r3, r7, #1
    45ee:	sub.w	r4, r5, #8
    45f2:	adds	r2, r4, r3
    45f4:	ldr	r6, [r1, #8]
    45f6:	ldr	r0, [r2, #4]
    45f8:	cmp	r2, r6
    45fa:	bic.w	r0, r0, #3
    45fe:	beq.n	46c6 <_free_r+0xf2>
    4600:	lsls	r6, r7, #31
    4602:	str	r0, [r2, #4]
    4604:	bmi.n	461e <_free_r+0x4a>
    4606:	ldr.w	r7, [r5, #-8]
    460a:	subs	r4, r4, r7
    460c:	add.w	lr, r1, #8
    4610:	ldr	r5, [r4, #8]
    4612:	cmp	r5, lr
    4614:	add	r3, r7
    4616:	beq.n	46f8 <_free_r+0x124>
    4618:	ldr	r7, [r4, #12]
    461a:	str	r7, [r5, #12]
    461c:	str	r5, [r7, #8]
    461e:	adds	r5, r2, r0
    4620:	ldr	r5, [r5, #4]
    4622:	lsls	r5, r5, #31
    4624:	bpl.n	46ac <_free_r+0xd8>
    4626:	orr.w	r2, r3, #1
    462a:	str	r2, [r4, #4]
    462c:	str	r3, [r4, r3]
    462e:	cmp.w	r3, #512	; 0x200
    4632:	bcs.n	4666 <_free_r+0x92>
    4634:	lsrs	r3, r3, #3
    4636:	adds	r2, r3, #1
    4638:	ldr	r5, [r1, #4]
    463a:	ldr.w	r7, [r1, r2, lsl #3]
    463e:	str	r7, [r4, #8]
    4640:	movs	r0, #1
    4642:	asrs	r3, r3, #2
    4644:	lsl.w	r3, r0, r3
    4648:	add.w	r0, r1, r2, lsl #3
    464c:	orrs	r5, r3
    464e:	subs	r0, #8
    4650:	str	r0, [r4, #12]
    4652:	str	r5, [r1, #4]
    4654:	str.w	r4, [r1, r2, lsl #3]
    4658:	str	r4, [r7, #12]
    465a:	mov	r0, r8
    465c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4660:	b.w	44c8 <__malloc_unlock>
    4664:	bx	lr
    4666:	lsrs	r2, r3, #9
    4668:	cmp	r2, #4
    466a:	bhi.n	4714 <_free_r+0x140>
    466c:	lsrs	r2, r3, #6
    466e:	add.w	r7, r2, #57	; 0x39
    4672:	lsls	r7, r7, #1
    4674:	add.w	r5, r2, #56	; 0x38
    4678:	add.w	r0, r1, r7, lsl #2
    467c:	ldr.w	r2, [r1, r7, lsl #2]
    4680:	ldr	r1, [pc, #272]	; (4794 <_free_r+0x1c0>)
    4682:	subs	r0, #8
    4684:	cmp	r0, r2
    4686:	beq.n	4724 <_free_r+0x150>
    4688:	ldr	r1, [r2, #4]
    468a:	bic.w	r1, r1, #3
    468e:	cmp	r3, r1
    4690:	bcs.n	4698 <_free_r+0xc4>
    4692:	ldr	r2, [r2, #8]
    4694:	cmp	r0, r2
    4696:	bne.n	4688 <_free_r+0xb4>
    4698:	ldr	r0, [r2, #12]
    469a:	str	r0, [r4, #12]
    469c:	str	r2, [r4, #8]
    469e:	str	r4, [r0, #8]
    46a0:	str	r4, [r2, #12]
    46a2:	mov	r0, r8
    46a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    46a8:	b.w	44c8 <__malloc_unlock>
    46ac:	ldr	r5, [r2, #8]
    46ae:	ldr	r7, [pc, #232]	; (4798 <_free_r+0x1c4>)
    46b0:	cmp	r5, r7
    46b2:	add	r3, r0
    46b4:	beq.n	4736 <_free_r+0x162>
    46b6:	ldr	r0, [r2, #12]
    46b8:	str	r0, [r5, #12]
    46ba:	orr.w	r2, r3, #1
    46be:	str	r5, [r0, #8]
    46c0:	str	r2, [r4, #4]
    46c2:	str	r3, [r4, r3]
    46c4:	b.n	462e <_free_r+0x5a>
    46c6:	lsls	r7, r7, #31
    46c8:	add	r3, r0
    46ca:	bmi.n	46dc <_free_r+0x108>
    46cc:	ldr.w	r2, [r5, #-8]
    46d0:	subs	r4, r4, r2
    46d2:	add	r3, r2
    46d4:	ldr	r0, [r4, #8]
    46d6:	ldr	r2, [r4, #12]
    46d8:	str	r2, [r0, #12]
    46da:	str	r0, [r2, #8]
    46dc:	ldr	r2, [pc, #188]	; (479c <_free_r+0x1c8>)
    46de:	ldr	r2, [r2, #0]
    46e0:	orr.w	r0, r3, #1
    46e4:	cmp	r3, r2
    46e6:	str	r0, [r4, #4]
    46e8:	str	r4, [r1, #8]
    46ea:	bcc.n	465a <_free_r+0x86>
    46ec:	ldr	r3, [pc, #176]	; (47a0 <_free_r+0x1cc>)
    46ee:	mov	r0, r8
    46f0:	ldr	r1, [r3, #0]
    46f2:	bl	4538 <_malloc_trim_r>
    46f6:	b.n	465a <_free_r+0x86>
    46f8:	adds	r1, r2, r0
    46fa:	ldr	r1, [r1, #4]
    46fc:	lsls	r1, r1, #31
    46fe:	bmi.n	478a <_free_r+0x1b6>
    4700:	ldr	r1, [r2, #8]
    4702:	ldr	r2, [r2, #12]
    4704:	str	r2, [r1, #12]
    4706:	add	r3, r0
    4708:	orr.w	r0, r3, #1
    470c:	str	r1, [r2, #8]
    470e:	str	r0, [r4, #4]
    4710:	str	r3, [r4, r3]
    4712:	b.n	465a <_free_r+0x86>
    4714:	cmp	r2, #20
    4716:	bhi.n	4748 <_free_r+0x174>
    4718:	add.w	r7, r2, #92	; 0x5c
    471c:	lsls	r7, r7, #1
    471e:	add.w	r5, r2, #91	; 0x5b
    4722:	b.n	4678 <_free_r+0xa4>
    4724:	asrs	r2, r5, #2
    4726:	ldr	r3, [r1, #4]
    4728:	movs	r5, #1
    472a:	lsl.w	r2, r5, r2
    472e:	orrs	r3, r2
    4730:	str	r3, [r1, #4]
    4732:	mov	r2, r0
    4734:	b.n	469a <_free_r+0xc6>
    4736:	orr.w	r2, r3, #1
    473a:	str	r4, [r1, #20]
    473c:	str	r4, [r1, #16]
    473e:	str	r5, [r4, #12]
    4740:	str	r5, [r4, #8]
    4742:	str	r2, [r4, #4]
    4744:	str	r3, [r4, r3]
    4746:	b.n	465a <_free_r+0x86>
    4748:	cmp	r2, #84	; 0x54
    474a:	bhi.n	475a <_free_r+0x186>
    474c:	lsrs	r2, r3, #12
    474e:	add.w	r7, r2, #111	; 0x6f
    4752:	lsls	r7, r7, #1
    4754:	add.w	r5, r2, #110	; 0x6e
    4758:	b.n	4678 <_free_r+0xa4>
    475a:	cmp.w	r2, #340	; 0x154
    475e:	bhi.n	476e <_free_r+0x19a>
    4760:	lsrs	r2, r3, #15
    4762:	add.w	r7, r2, #120	; 0x78
    4766:	lsls	r7, r7, #1
    4768:	add.w	r5, r2, #119	; 0x77
    476c:	b.n	4678 <_free_r+0xa4>
    476e:	movw	r0, #1364	; 0x554
    4772:	cmp	r2, r0
    4774:	bhi.n	4784 <_free_r+0x1b0>
    4776:	lsrs	r2, r3, #18
    4778:	add.w	r7, r2, #125	; 0x7d
    477c:	lsls	r7, r7, #1
    477e:	add.w	r5, r2, #124	; 0x7c
    4782:	b.n	4678 <_free_r+0xa4>
    4784:	movs	r7, #254	; 0xfe
    4786:	movs	r5, #126	; 0x7e
    4788:	b.n	4678 <_free_r+0xa4>
    478a:	orr.w	r2, r3, #1
    478e:	str	r2, [r4, #4]
    4790:	str	r3, [r4, r3]
    4792:	b.n	465a <_free_r+0x86>
    4794:	.word	0x1fff119c
    4798:	.word	0x1fff11a4
    479c:	.word	0x1fff15a4
    47a0:	.word	0x1fff1c94

000047a4 <__register_exitproc>:
    47a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    47a8:	ldr	r4, [pc, #148]	; (4840 <__register_exitproc+0x9c>)
    47aa:	ldr	r5, [r4, #0]
    47ac:	ldr.w	r4, [r5, #328]	; 0x148
    47b0:	mov	r6, r0
    47b2:	mov	r8, r1
    47b4:	mov	sl, r2
    47b6:	mov	r9, r3
    47b8:	cbz	r4, 482c <__register_exitproc+0x88>
    47ba:	ldr	r0, [r4, #4]
    47bc:	cmp	r0, #31
    47be:	bgt.n	47f0 <__register_exitproc+0x4c>
    47c0:	adds	r3, r0, #1
    47c2:	cbz	r6, 47e2 <__register_exitproc+0x3e>
    47c4:	add.w	r5, r4, r0, lsl #2
    47c8:	movs	r2, #1
    47ca:	str.w	sl, [r5, #136]	; 0x88
    47ce:	ldr.w	r1, [r4, #392]	; 0x188
    47d2:	lsls	r2, r0
    47d4:	orrs	r1, r2
    47d6:	cmp	r6, #2
    47d8:	str.w	r1, [r4, #392]	; 0x188
    47dc:	str.w	r9, [r5, #264]	; 0x108
    47e0:	beq.n	4820 <__register_exitproc+0x7c>
    47e2:	adds	r0, #2
    47e4:	str	r3, [r4, #4]
    47e6:	str.w	r8, [r4, r0, lsl #2]
    47ea:	movs	r0, #0
    47ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    47f0:	ldr	r3, [pc, #80]	; (4844 <__register_exitproc+0xa0>)
    47f2:	cbz	r3, 4836 <__register_exitproc+0x92>
    47f4:	mov.w	r0, #400	; 0x190
    47f8:	bl	3f44 <malloc>
    47fc:	mov	r4, r0
    47fe:	cbz	r0, 4836 <__register_exitproc+0x92>
    4800:	ldr.w	r3, [r5, #328]	; 0x148
    4804:	movs	r7, #0
    4806:	stmia.w	r0, {r3, r7}
    480a:	str.w	r4, [r5, #328]	; 0x148
    480e:	mov	r0, r7
    4810:	movs	r3, #1
    4812:	str.w	r7, [r4, #392]	; 0x188
    4816:	str.w	r7, [r4, #396]	; 0x18c
    481a:	cmp	r6, #0
    481c:	beq.n	47e2 <__register_exitproc+0x3e>
    481e:	b.n	47c4 <__register_exitproc+0x20>
    4820:	ldr.w	r1, [r4, #396]	; 0x18c
    4824:	orrs	r2, r1
    4826:	str.w	r2, [r4, #396]	; 0x18c
    482a:	b.n	47e2 <__register_exitproc+0x3e>
    482c:	add.w	r4, r5, #332	; 0x14c
    4830:	str.w	r4, [r5, #328]	; 0x148
    4834:	b.n	47ba <__register_exitproc+0x16>
    4836:	mov.w	r0, #4294967295
    483a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    483e:	nop
    4840:	.word	0x00004b94
    4844:	.word	0x00003f45
    4848:	.word	0x00000026
    484c:	.word	0x00000029
    4850:	.word	0x0000002d
    4854:	.word	0x00000033
    4858:	.word	0x00000064
    485c:	.word	0x00000064
    4860:	.word	0x00000064
    4864:	.word	0x00000064
    4868:	.word	0x00000001
    486c:	.word	0x00000001
    4870:	.word	0x00000001
    4874:	.word	0x00000001
    4878:	.word	0x7370704f
    487c:	.word	0x6e61202c
    4880:	.word	0x6b6e7520
    4884:	.word	0x6e776f6e
    4888:	.word	0x44494d20
    488c:	.word	0x656d2049
    4890:	.word	0x67617373
    4894:	.word	0x79742065
    4898:	.word	0x00216570
    489c:	.word	0x43544950
    48a0:	.word	0x00000048
    48a4:	.word	0x4f4c4556
    48a8:	.word	0x59544943
    48ac:	.word	0x00000000
    48b0:	.word	0x45544f4e
    48b4:	.word	0x474e454c
    48b8:	.word	0x00004854
    48bc:	.word	0x424f4c47
    48c0:	.word	0x00004c41

000048c4 <pin2sc1a>:
    48c4:	................
    48d4:	................
    48e4:	................
    48f4:	................
    4904:	........

0000490c <digital_pin_to_info_PGM>:
    490c:	@..C@..@D..CD..@
    491c:	...C...@0..C0..@
    492c:	4..C4..@...C...@
    493c:	...C...@...C...@
    494c:	...C...@...C...@
    495c:	...C...@...C...@
    496c:	...C...@...C...@
    497c:	...C...@...C...@
    498c:	...C...@...C...@
    499c:	...C...@...C...@
    49ac:	...C...@...C...@
    49bc:	...C...@...C...@
    49cc:	h .Ch..@...C...@
    49dc:	8..C8..@<..C<..@
    49ec:	@..C@..@H..CH..@
    49fc:	L..CL..@(..C(..@
    4a0c:	,..C,..@` .C`..@
    4a1c:	d .Cd..@ ..C ..@
    4a2c:	$..C$..@(..C(..@
    4a3c:	,..C,..@D..CD..@
    4a4c:	p..Cp..@t..Ct..@
    4a5c:	h..Ch..@P..CP..@
    4a6c:	X..CX..@\..C\..@
    4a7c:	T..CT..@ ..C ..@
    4a8c:	$..C$..@...C...@
    4a9c:	...C...@8..C8..@
    4aac:	4..C4..@0..C0..@
    4abc:	<..C<..@,..C,..@
    4acc:	( .C(..@, .C,..@
    4adc:	. .C...@. .C...@
    4aec:	. .C...@. .C...@
    4afc:	. .C...@. .C...@

00004b0c <vtable for usb_serial_class>:
	...
    4b14:	.4...4...4...4..
    4b24:	.4...4...4..}4..
    4b34:	....

00004b38 <usb_endpoint_config_table>:
    4b38:	........

00004b40 <usb_descriptor_list>:
    4b40:	....t...........
    4b50:	............P...
    4b60:	................
    4b70:	....8...........
    4b80:	T...............
    4b90:	....

00004b94 <_global_impure_ptr>:
    4b94:	p...

00004b98 <_init>:
    4b98:	push	{r3, r4, r5, r6, r7, lr}
    4b9a:	nop
    4b9c:	pop	{r3, r4, r5, r6, r7}
    4b9e:	pop	{r3}
    4ba0:	mov	lr, r3
    4ba2:	bx	lr

00004ba4 <__init_array_start>:
    4ba4:	.word	0x000044f1

00004ba8 <__frame_dummy_init_array_entry>:
    4ba8:	5.......

Disassembly of section .fini:

00004bb0 <_fini>:
    4bb0:	push	{r3, r4, r5, r6, r7, lr}
    4bb2:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004968 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff1594 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003500 l     F .text	0000000c startup_default_early_hook
0000350c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1594 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1598 l       .bss	00000000 object.8610
00004960 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 sequencer.cpp
00000000 l    df *ABS*	00000000 button.cpp
00000000 l    df *ABS*	00000000 piano.cpp
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 main.cpp
0000097c l     F .text	00000018 _GLOBAL__sub_I_sequencer
00000000 l    df *ABS*	00000000 note.cpp
00000000 l    df *ABS*	00000000 transport.cpp
00000000 l    df *ABS*	00000000 paginator.cpp
00000000 l    df *ABS*	00000000 step.cpp
00000000 l    df *ABS*	00000000 knob.cpp
00000000 l    df *ABS*	00000000 controller.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
1fff15b5 l     O .bss	00000001 tx_noautoflush
1fff15b8 l     O .bss	00000004 tx_packet
1fff15bc l     O .bss	00000001 transmit_previous_timeout
1fff15c0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000016e0 l     F .text	00000144 wait_for_cal
1fff15c5 l     O .bss	00000001 analog_right_shift
1fff15c6 l     O .bss	00000001 calibrating
0000467c l     O .text	00000048 pin2sc1a
1fff0c40 l     O .data	00000001 analog_config_bits
1fff15c7 l     O .bss	00000001 analogReadBusyADC1
1fff15c8 l     O .bss	00000001 analogReadBusyADC0
1fff15c9 l     O .bss	00000001 analog_reference_internal
1fff0c41 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001a00 l     F .text	0000004c digitalWrite.part.1
00001a4c l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00001d2c l     F .text	00000048 sysex_byte
1fff15e4 l     O .bss	00000001 tx_noautoflush
1fff1610 l     O .bss	00000004 tx_packet
1fff1614 l     O .bss	00000001 transmit_previous_timeout
1fff161c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c44 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1630 l     O .bss	00000004 ep0_tx_ptr
1fff1634 l     O .bss	00000014 rx_last
1fff1648 l     O .bss	00000002 ep0_tx_len
1fff164c l     O .bss	00000040 ep0_rx0_buf
1fff168c l     O .bss	00000014 rx_first
1fff16a0 l     O .bss	00000001 ep0_tx_data_toggle
1fff16a4 l     O .bss	00000040 ep0_rx1_buf
1fff16e4 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff16f8 l     O .bss	00000014 tx_last
1fff170c l     O .bss	00000008 setup
1fff1714 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1718 l     O .bss	00000008 reply_buffer
1fff1724 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1729 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 WMath.cpp
00003114 l     F .text	00000070 random(unsigned long) [clone .part.0]
1fff172c l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1730 l     O .bss	00000004 rts_pin
1fff1734 l     O .bss	00000001 rx_buffer_head
1fff1735 l     O .bss	00000001 rx_buffer_tail
1fff1738 l     O .bss	00000028 tx_buffer
1fff1760 l     O .bss	00000040 rx_buffer
1fff17a0 l     O .bss	00000001 transmitting
1fff17a1 l     O .bss	00000001 tx_buffer_tail
1fff17a4 l     O .bss	00000004 transmit_pin
1fff17a8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff17ac l     O .bss	00000004 rts_pin
1fff17b0 l     O .bss	00000001 transmitting
1fff17b1 l     O .bss	00000001 rx_buffer_tail
1fff17b4 l     O .bss	00000028 tx_buffer
1fff17dc l     O .bss	00000040 rx_buffer
1fff181c l     O .bss	00000001 rx_buffer_head
1fff181d l     O .bss	00000001 tx_buffer_tail
1fff1820 l     O .bss	00000004 transmit_pin
1fff1824 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1828 l     O .bss	00000004 rts_pin
1fff182c l     O .bss	00000001 rx_buffer_head
1fff182d l     O .bss	00000001 rx_buffer_tail
1fff1830 l     O .bss	00000028 tx_buffer
1fff1858 l     O .bss	00000040 rx_buffer
1fff1898 l     O .bss	00000001 transmitting
1fff1899 l     O .bss	00000001 tx_buffer_tail
1fff189c l     O .bss	00000004 transmit_pin
1fff18a0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff18a4 l     O .bss	00000004 rts_pin
1fff18a8 l     O .bss	00000001 rx_buffer_head
1fff18a9 l     O .bss	00000001 rx_buffer_tail
1fff18ac l     O .bss	00000040 tx_buffer
1fff18ec l     O .bss	00000040 rx_buffer
1fff192c l     O .bss	00000001 transmitting
1fff192d l     O .bss	00000001 tx_buffer_tail
1fff1930 l     O .bss	00000004 transmit_pin
1fff1934 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1938 l     O .bss	00000004 rts_pin
1fff193c l     O .bss	00000001 rx_buffer_head
1fff193d l     O .bss	00000001 rx_buffer_tail
1fff1940 l     O .bss	00000028 tx_buffer
1fff1968 l     O .bss	00000040 rx_buffer
1fff19a8 l     O .bss	00000001 transmitting
1fff19a9 l     O .bss	00000001 tx_buffer_tail
1fff19ac l     O .bss	00000004 transmit_pin
1fff19b0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c5c l     O .data	00000012 device_descriptor
1fff0c88 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff19b4 l     O .bss	00000004 rts_pin
1fff19b8 l     O .bss	00000001 rx_buffer_head
1fff19b9 l     O .bss	00000001 rx_buffer_tail
1fff19bc l     O .bss	00000028 tx_buffer
1fff19e4 l     O .bss	00000040 rx_buffer
1fff1a24 l     O .bss	00000001 transmitting
1fff1a25 l     O .bss	00000001 tx_buffer_tail
1fff1a28 l     O .bss	00000004 transmit_pin
1fff1a2c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000423c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d58 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1594 l       .bss	00000000 __bss_start__
1fff1bc8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000034f8  w    F .text	00000006 adc0_isr
00001484 g     F .text	0000001c usb_serial_available
000033b8 g     F .text	00000020 serial4_available
00002f58  w    F .text	000000c4 yield
1fff0c70 g     O .data	00000018 usb_string_manufacturer_name_default
000035a4 g     F .text	00000020 serial_available
1fff15e8 g     O .bss	00000004 usb_midi_handleProgramChange
000013c8 g     F .text	0000000a Controller::exitSwingMode()
000034b0  w    F .text	00000048 hard_fault_isr
000034f8  w    F .text	00000006 dma_ch6_isr
0000304c g     F .text	00000020 Print::println()
0000328c g     F .text	00000020 serial2_available
000034f8  w    F .text	00000006 uart0_lon_isr
0000236c g     F .text	000000e8 usb_rx_memory
0000301c  w    F .text	00000002 serialEvent5()
000013fc g     F .text	00000006 Controller::getShiftMode()
000034f8  w    F .text	00000006 dma_ch8_isr
000036d0 g     F .text	00000020 serial6_available
00004214 g     F .text	00000002 __malloc_unlock
1fff15fc g     O .bss	00000004 usb_midi_handleAfterTouch
000004fc g     F .text	00000050 Sequencer::step()
00001824 g     F .text	000000e0 analog_init
00002454 g     F .text	00000084 usb_tx
000034f8  w    F .text	00000006 portcd_isr
1fff160c g     O .bss	00000004 usb_midi_handleSysExComplete
00003af0 g     F .text	00000098 MillisTimer::runFromTimer()
000034f8  w    F .text	00000006 can1_rx_warn_isr
0000496c g       .fini	00000000 __exidx_end
000034f8  w    F .text	00000006 dma_error_isr
1fff1a8c g     O .bss	00000001 usb_midi_msg_type
1fff1a44 g     O .bss	00000001 EventResponder::runningFromYield
000034f8  w    F .text	00000006 i2c0_isr
00003b98 g     F .text	0000000c __errno
000034f8  w    F .text	00000006 portd_isr
000034f8  w    F .text	00000006 enet_error_isr
1fff1a30 g     O .bss	00000004 EventResponder::firstInterrupt
00000a28 g     F .text	0000002c Note::tick()
00001048 g     F .text	0000002a Knob::tick()
000034f8  w    F .text	00000006 tpm1_isr
00003038  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000046c4 g     O .text	00000200 digital_pin_to_info_PGM
00001404 g     F .text	00000006 Controller::getMode()
1fff1bc4 g     O .bss	00000004 errno
0000496c g       .fini	00000000 _etext
1fff1594 g       .bss	00000000 _sbss
0000318c  w    F .text	00000002 serialEvent6()
1fff15f8 g     O .bss	00000004 usb_midi_handleVelocityChange
00001af4 g     F .text	0000001c digitalRead
000034f8  w    F .text	00000006 porte_isr
00000970 g     F .text	0000000c loop
000034f8  w    F .text	00000006 portb_isr
000004dc g     F .text	00000014 Sequencer::tick()
00001e10 g     F .text	0000002c usb_midi_flush_output
000034f8  w    F .text	00000006 spi1_isr
000033d8 g     F .text	000000d8 uart3_status_isr
0000399c  w    F .text	00000002 serialEvent1()
00001224 g     F .text	0000002c Controller::tick()
000034f8  w    F .text	00000006 mcm_isr
00003a88 g     F .text	00000068 MillisTimer::addToActiveList()
00001e3c g     F .text	0000043c usb_midi_read
000012e4 g     F .text	00000040 Controller::enterShiftMode()
1fff15d4 g     O .bss	00000004 usb_midi_handleSystemReset
00000788 g     F .text	00000040 Piano::Piano(Sequencer*)
0000063c g     F .text	00000058 Button::onHold()
1fff1a34 g     O .bss	00000004 EventResponder::lastInterrupt
000013f4 g     F .text	00000006 Controller::getCopyMode()
000032ac g     F .text	0000010c uart1_status_isr
000008f4 g     F .text	00000078 Led::tick()
1fff1a8e g     O .bss	00000002 usb_midi_msg_sysex_len
0000054c g     F .text	00000006 Sequencer::resetStep()
000034f8  w    F .text	00000006 randnum_isr
000009a4 g     F .text	0000002e Note::noteOn(unsigned char, unsigned char, unsigned char)
1fff15dc g     O .bss	00000004 usb_midi_handleRealTimeSystem
00001354 g     F .text	00000008 Controller::exitCopyMode()
1fff15cc g     O .bss	00000004 systick_millis_count
000034b0  w    F .text	00000048 bus_fault_isr
000008ac g     F .text	0000002c Led::toggle()
000034f8  w    F .text	00000006 watchdog_isr
000034f8  w    F .text	00000006 i2c1_isr
1fff1720 g     O .bss	00000001 usb_configuration
000034f8  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
000030fc  w    F .text	00000002 serialEvent2()
000034f8  w    F .text	00000006 i2c2_isr
1fff0c70  w    O .data	00000018 usb_string_manufacturer_name
1fff1bb8 g     O .bss	0000000a usb_rx_byte_count_data
000034f8  w    F .text	00000006 pit1_isr
00000e60 g     F .text	00000032 Paginator::previousPage()
00003bf4 g     F .text	00000010 malloc
000034f8  w    F .text	00000006 dma_ch4_isr
000034f8  w    F .text	00000006 software_isr
000034f8  w    F .text	00000006 dma_ch7_isr
00003a24  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00002e88 g     F .text	000000d0 usb_init
000034f8  w    F .text	00000006 lptmr_isr
00000b4c g     F .text	00000024 Transport::processMidi()
1fff1a54 g     O .bss	00000004 __malloc_top_pad
00001ac4 g     F .text	00000024 rtc_set
000005c0 g     F .text	0000007c Button::onRelease()
00000ebc g     F .text	0000001c Step::controlLength(int)
1fff0c40 g       .data	00000000 _sdata
1fff162c g     O .bss	00000004 usb_midi_handleNoteOn
000009f8 g     F .text	0000002e Note::noteOff(unsigned char, unsigned char, unsigned char)
00003570 g     F .text	00000034 kinetis_hsrun_enable
00004218 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
0000140c g     F .text	00000048 usb_serial_getchar
000034f8  w    F .text	00000006 can1_bus_off_isr
000034f8  w    F .text	00000006 ftm2_isr
00000554 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1a80 g     O .bss	00000008 usb_cdc_line_coding
00001ae8 g     F .text	0000000a digitalWrite
000034f8  w    F .text	00000006 uart5_status_isr
000036f0 g     F .text	000000e4 lpuart0_status_isr
1fff1a3c g     O .bss	00000004 EventResponder::lastYield
00000a68 g     F .text	0000003a Transport::controlTempo(int)
000048f0 g     O .text	00000005 usb_endpoint_config_table
00001074 g     F .text	000001ae Controller::Controller(Sequencer*)
000034f8  w    F .text	00000006 dma_ch9_isr
000034f8  w    F .text	00000006 pit2_isr
000038a4 g     F .text	00000020 serial3_available
1fff1a50 g     O .bss	00000004 __malloc_max_sbrked_mem
0000135c g     F .text	00000034 Controller::enterChanceMode()
00001b10 g     F .text	0000000a pinMode
000022b8 g     F .text	0000004c usb_free
000034f8  w    F .text	00000006 i2c3_isr
1fff15f4 g     O .bss	00000004 usb_midi_handleSysExPartial
0000496c g       .fini	00000000 __exidx_start
000034f8  w    F .text	00000006 pit0_isr
1fff1a90 g     O .bss	00000001 usb_midi_msg_data1
1fff1a40 g     O .bss	00000004 EventResponder::firstYield
0000494c g     O .text	00000004 _global_impure_ptr
000034f8  w    F .text	00000006 can1_error_isr
00003ba4 g     F .text	00000050 __libc_init_array
1fff1bc8 g       .bss	00000000 __bss_end
000034f8  w    F .text	00000006 can0_wakeup_isr
000034f8  w    F .text	00000006 flash_cmd_isr
00003020  w    F .text	00000004 usb_serial_class::clear()
000038c4 g     F .text	000000d8 uart2_status_isr
00003510 g     F .text	0000002c _sbrk
1fff1a48 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c58 g     O .data	00000004 __brkval
1fff15c4 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001698 g     F .text	00000048 usb_serial_flush_callback
00004950 g     F .text	00000000 _init
000034f8  w    F .text	00000006 svcall_isr
00000f10 g     F .text	0000002c Step::controlChance(int)
000034f8  w    F .text	00000006 dma_ch15_isr
000034f8  w    F .text	00000006 uart1_error_isr
0000425c g     F .text	00000028 __libc_fini_array
000034f8  w    F .text	00000006 usbhs_phy_isr
00000b88 g     F .text	0000001e Paginator::Paginator(Sequencer*)
00000554 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1bc8 g       .bss	00000000 _ebss
000034f8 g     F .text	00000006 unused_isr
00000f70 g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
000034f8  w    F .text	00000006 spi0_isr
000034f8  w    F .text	00000006 dma_ch3_isr
00000e30 g     F .text	00000030 Paginator::nextPage()
00000e94 g     F .text	0000001c Step::Step(Sequencer*)
00000e94 g     F .text	0000001c Step::Step(Sequencer*)
000034f8  w    F .text	00000006 flash_error_isr
00003194 g     F .text	00000020 serial5_available
000034f8  w    F .text	00000006 uart5_error_isr
000034f8  w    F .text	00000006 rtc_seconds_isr
000034f8  w    F .text	00000006 pdb_isr
000034b0  w    F .text	00000048 usage_fault_isr
000034f8  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00000b70 g     F .text	00000018 Transport::tick()
000034f8  w    F .text	00000006 dma_ch14_isr
00000f80 g     F .text	000000c6 Knob::onChange()
00000994 g     F .text	0000000e Note::Note()
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1a88 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00000a54 g     F .text	00000014 Transport::Transport(Sequencer*)
00003b88 g     F .text	00000010 systick_isr
000034f8  w    F .text	00000006 rtc_alarm_isr
0000046c g     F .text	0000006e Sequencer::Sequencer()
000034f8  w    F .text	00000006 dma_ch2_isr
1fff0c48 g     O .data	00000010 Serial
00000a54 g     F .text	00000014 Transport::Transport(Sequencer*)
000034f8  w    F .text	00000006 ftm1_isr
00003040  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003500  w    F .text	0000000c startup_early_hook
000034f8  w    F .text	00000006 dma_ch13_isr
000034f8  w    F .text	00000006 uart2_error_isr
00001454 g     F .text	00000030 usb_serial_peekchar
00000878 g     F .text	00000034 Led::blink(int)
1fff0d3c g     O .data	00000016 usb_string_serial_number_default
000034b0 g     F .text	00000048 fault_isr
00004320 g     F .text	000001d0 _free_r
1fff1618 g     O .bss	00000004 usb_midi_handleStop
000034f8  w    F .text	00000006 usb_charge_isr
00003030  w    F .text	00000004 usb_serial_class::flush()
000034f8  w    F .text	00000006 cmt_isr
000034f8  w    F .text	00000006 usbhs_isr
1fff1628 g     O .bss	00000004 usb_midi_handleControlChange
1fff1590 g     O .data	00000004 __malloc_sbrk_base
00003028  w    F .text	00000004 usb_serial_class::read()
000034f8  w    F .text	00000006 ftm3_isr
00000788 g     F .text	00000040 Piano::Piano(Sequencer*)
000034f8  w    F .text	00000006 tsi0_isr
000034f8  w    F .text	00000006 spi2_isr
00003100  w    F .text	00000002 serialEvent4()
00003048  w    F .text	00000002 serialEvent()
1fff16a1 g     O .bss	00000001 usb_reboot_timer
000044f0 g     F .text	000000a4 __register_exitproc
000014a0 g     F .text	00000038 usb_serial_flush_input
000015e0 g     F .text	00000018 usb_serial_putchar
1fff1a58 g     O .bss	00000028 __malloc_current_mallinfo
000034f8  w    F .text	00000006 can0_bus_off_isr
00001074 g     F .text	000001ae Controller::Controller(Sequencer*)
1fff1715 g     O .bss	00000001 usb_rx_memory_needed
000004f0 g     F .text	0000000a Sequencer::reverse()
000024d8 g     F .text	000009b0 usb_isr
00000b2c g     F .text	0000001e Transport::stopPPQN()
1fff1624 g     O .bss	00000004 usb_midi_handleNoteOff
00000994 g     F .text	0000000e Note::Note()
00003184 g     F .text	00000008 random(unsigned long)
000048c4  w    O .text	00000028 vtable for usb_serial_class
000006e0 g     F .text	000000a8 Button::tick()
000034f8  w    F .text	00000006 uart3_error_isr
1fff1a38 g     O .bss	00000004 MillisTimer::listActive
000034f8  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
000034f8  w    F .text	00000006 low_voltage_isr
1fff1184 g     O .data	00000408 __malloc_av_
000034f8  w    F .text	00000006 can0_error_isr
00001324 g     F .text	00000026 Controller::exitShiftMode()
00001bc0 g     F .text	0000016c _init_Teensyduino_internal_
00000f70 g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00001640 g     F .text	00000058 usb_serial_flush_output
000034f8  w    F .text	00000006 dma_ch12_isr
00004210 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000034f8  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
000034f8  w    F .text	00000006 pit3_isr
00000580 g     F .text	00000040 Button::onPressWhileHolding()
000007e0 g     F .text	0000002a Piano::play(Step*)
00000b88 g     F .text	0000001e Paginator::Paginator(Sequencer*)
000034f8  w    F .text	00000006 enet_rx_isr
000034f8  w    F .text	00000006 portc_isr
00004174 g     F .text	0000009a memset
00003104 g     F .text	00000010 main
1fff1a4c g     O .bss	00000004 __malloc_max_total_mem
000008e4 g     F .text	0000000e Led::on()
000034b0  w    F .text	00000048 memmanage_fault_isr
000037d4 g     F .text	00000084 usb_init_serialnumber
00004968 g       .text	00000000 __init_array_end
00003c04 g     F .text	00000570 _malloc_r
000034f8  w    F .text	00000006 debugmonitor_isr
1fff15f0 g     O .bss	00000004 usb_midi_handleSongPosition
00001390 g     F .text	0000000a Controller::exitChanceMode()
000039a4 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff15e0 g     O .bss	00000004 usb_midi_handleContinue
1fff1a91 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
000034f8  w    F .text	00000006 cmp1_isr
000034f8  w    F .text	00000006 ftm0_isr
00004284 g     F .text	0000009c _malloc_trim_r
1fff0d38 g     O .data	00000004 string0
000014d8 g     F .text	00000108 usb_serial_write
0000350c  w    F .text	00000002 startup_late_hook
00000ed8 g     F .text	00000024 Step::controlPitch(int)
0000302c  w    F .text	00000004 usb_serial_class::available()
1fff1a92 g     O .bss	00000001 usb_midi_msg_cable
1fff0d20  w    O .data	00000018 usb_string_product_name
00000ba8 g     F .text	00000078 Paginator::getNextPlaybackPage(int)
00001b1c g     F .text	000000a4 delay
0000134c g     F .text	00000008 Controller::enterCopyMode()
000034f8  w    F .text	00000006 tpm0_isr
00004968 g     F .fini	00000000 _fini
000034f8  w    F .text	00000006 i2s0_rx_isr
00000aa4 g     F .text	0000005e Transport::advancePPQN()
000034f8  w    F .text	00000006 uart4_error_isr
000030ec g     F .text	00000010 Print::print(long)
00001d74 g     F .text	0000009c usb_midi_write_packed
00000c3c g     F .text	000001c4 Paginator::changePage(int)
00004250 g     F .text	0000000c atexit
000034f8  w    F .text	00000006 can0_message_isr
00001250 g     F .text	00000094 Controller::toggleMode()
1fff1180 g     O .data	00000004 _impure_ptr
000034f8  w    F .text	00000006 can1_message_isr
000034f8  w    F .text	00000006 nmi_isr
00000850 g     F .text	00000026 Led::Led(int, int)
0000046c g     F .text	0000006e Sequencer::Sequencer()
1fff1608 g     O .bss	00000004 usb_midi_handleTuneRequest
000007c8 g     F .text	00000016 Piano::tick()
0000495c g       .text	00000000 __preinit_array_end
00000eb0 g     F .text	0000000a Step::toggle()
000034f8  w    F .text	00000006 sdhc_isr
00000f3c g     F .text	00000032 Step::controlSwing(int)
1fff1a93 g     O .bss	00000001 usb_midi_msg_channel
0000096c g     F .text	00000002 setup
000048f8 g     O .text	00000054 usb_descriptor_list
00002304 g     F .text	0000003c usb_rx
00000850 g     F .text	00000026 Led::Led(int, int)
00000e00 g     F .text	00000030 Paginator::debugPages()
000034f8  w    F .text	00000006 dma_ch10_isr
1fff1600 g     O .bss	00000004 usb_midi_handleStart
000034f8  w    F .text	00000006 uart0_error_isr
000013e4 g     F .text	00000010 Controller::getSwingMode()
000009d4 g     F .text	00000022 Note::play(Step*, int*)
00002278 g     F .text	00000040 usb_malloc
0000080c g     F .text	00000044 Piano::transpose(int)
000034f8  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
000015f8 g     F .text	00000048 usb_serial_write_buffer_free
000034f8  w    F .text	00000006 enet_timer_isr
1fff1594 g       .data	00000000 _edata
000034f8  w    F .text	00000006 i2s0_tx_isr
000034f8  w    F .text	00000006 adc1_isr
00000efc g     F .text	00000014 Step::controlVelocity(int)
00003034  w    F .text	00000004 usb_serial_class::availableForWrite()
000034f8  w    F .text	00000006 cmp0_isr
1fff15d0 g     O .bss	00000004 usb_midi_handleClock
00003858 g     F .text	0000004c ultoa
00000694 g     F .text	0000004c Button::onHoldRelease()
00003190 g     F .text	00000004 operator new(unsigned int)
00003a40 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff158c g     O .data	00000004 __malloc_trim_threshold
00003024  w    F .text	00000004 usb_serial_class::peek()
000013d4 g     F .text	00000010 Controller::getChanceMode()
1fff15b4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff15ec g     O .bss	00000004 usb_midi_handlePitchChange
000034f8  w    F .text	00000006 pit_isr
1fff1604 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
000034f8  w    F .text	00000006 dac0_isr
0000495c g       .text	00000000 __init_array_start
000034f8  w    F .text	00000006 can1_tx_warn_isr
00001904 g     F .text	000000fc analogRead
1fff1a94 g     O .bss	00000122 usb_midi_msg_sysex
000035c4 g     F .text	0000010c uart0_status_isr
000034f8  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d20 g     O .data	00000018 usb_string_product_name_default
000034f8  w    F .text	00000006 dma_ch1_isr
00000b04 g     F .text	00000028 Transport::startPPQN()
00002340 g     F .text	0000002c usb_tx_packet_count
000034f8  w    F .text	00000006 dma_ch5_isr
000034f8  w    F .text	00000006 can0_rx_warn_isr
000034f8  w    F .text	00000006 can0_tx_warn_isr
000031b4 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000353c g     F .text	00000034 kinetis_hsrun_disable
0000495c g       .text	00000000 __preinit_array_start
1fff15b0 g     O .bss	00000004 sequencer
000039a0  w    F .text	00000002 serialEvent3()
1fff1620 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
000034f8  w    F .text	00000006 cmp2_isr
00003a84 g     F .text	00000004 pendablesrvreq_isr
000034f8  w    F .text	00000006 wakeup_isr
00000c20 g     F .text	0000001c Paginator::setLeds(unsigned int)
000034f8  w    F .text	00000006 cmp3_isr
0000306c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000008d8 g     F .text	0000000c Led::off()
1fff15d8 g     O .bss	00000004 usb_midi_handleActiveSensing
0000139c g     F .text	0000002c Controller::enterSwingMode()
000034f8  w    F .text	00000006 tpm2_isr
000034f8  w    F .text	00000006 dma_ch0_isr
1fff0d3c  w    O .data	00000016 usb_string_serial_number
000034f8  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... .....4...4..
      10:	.4...4...4...4..
      20:	.4...4...4...4..
      30:	.4...4...:...;..
      40:	.4...4...4...4..
      50:	.4...4...4...4..
      60:	.4...4...4...4..
      70:	.4...4...4...4..
      80:	.4...4...4...4..
      90:	.4...4...4...4..
      a0:	.4...4...4...4..
      b0:	.4...4...4...5..
      c0:	.4...2...4...8..
      d0:	.4...3...4...4..
      e0:	.4...4...4...4..
      f0:	.4...4...4...4..
     100:	.4...4...4...4..
     110:	.4...$...4...4..
     120:	.4...4...4...4..
     130:	.4...4...4...4..
     140:	.4...4...1...4..
     150:	.4...4...4...4..
     160:	.4...4...4...4..
     170:	.4...4...4...4..
     180:	.4...4...4...4..
     190:	.4...4...6...4..
     1a0:	.4...4...4...4..
     1b0:	.4...4...4...4..
     1c0:	.4...4...4...4..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3500 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	1bc0 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	1ac4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	1ac4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	3ba4 <__libc_init_array>

	startup_late_hook();
     33a:	bl	350c <startup_late_hook>
	main();
     33e:	bl	3104 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff1594
     374:	.word	0x00004968
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff1594
     380:	.word	0x1fff1bc8
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1594
     42c:	.word	0x00000000
     430:	.word	0x0000496c

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1598
     460:	.word	0x0000496c
     464:	.word	0x1fff1594
     468:	.word	0x00000000

0000046c <Sequencer::Sequencer()>:
#include "paginator.h"
#include "step.h"
#include "led.h"
#include "piano.h"

Sequencer::Sequencer () {
     46c:	push	{r3, r4, r5, r6, r7, lr}
     46e:	mov	r4, r0
  _controller = new Controller(this);
     470:	movs	r0, #84	; 0x54
     472:	bl	3190 <operator new(unsigned int)>
     476:	mov	r1, r4
     478:	mov	r5, r0
     47a:	bl	1074 <Controller::Controller(Sequencer*)>
     47e:	str	r5, [r4, #8]
  _transport = new Transport(this);
     480:	movs	r0, #16
     482:	bl	3190 <operator new(unsigned int)>
     486:	mov	r1, r4
     488:	mov	r5, r0
     48a:	bl	a54 <Transport::Transport(Sequencer*)>
     48e:	str	r5, [r4, #4]
  _paginator = new Paginator(this);
     490:	movs	r0, #80	; 0x50
     492:	bl	3190 <operator new(unsigned int)>
     496:	mov	r1, r4
     498:	mov	r5, r0
     49a:	bl	b88 <Paginator::Paginator(Sequencer*)>
     49e:	str	r5, [r4, #12]
  _piano = new Piano(this);
     4a0:	movs	r0, #60	; 0x3c
     4a2:	bl	3190 <operator new(unsigned int)>
     4a6:	mov	r1, r4
     4a8:	mov	r5, r0
     4aa:	bl	788 <Piano::Piano(Sequencer*)>
  _reversed = false;
     4ae:	movs	r3, #0

Sequencer::Sequencer () {
  _controller = new Controller(this);
  _transport = new Transport(this);
  _paginator = new Paginator(this);
  _piano = new Piano(this);
     4b0:	str	r5, [r4, #52]	; 0x34
  _reversed = false;
     4b2:	strb	r3, [r4, #0]
  _currentStep = 0;
     4b4:	str	r3, [r4, #48]	; 0x30
     4b6:	add.w	r5, r4, #12
     4ba:	add.w	r7, r4, #28

  for (int i = 0; i < 4; i++) {
    _stepsEdit[i] = new Step(this);
     4be:	movs	r0, #32
     4c0:	bl	3190 <operator new(unsigned int)>
     4c4:	mov	r1, r4
     4c6:	mov	r6, r0
     4c8:	bl	e94 <Step::Step(Sequencer*)>
     4cc:	str.w	r6, [r5, #4]!
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
     4d0:	cmp	r5, r7
    _stepsEdit[i] = new Step(this);
    _stepsPlayback[i] = _stepsEdit[i];
     4d2:	str	r6, [r5, #16]
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
     4d4:	bne.n	4be <Sequencer::Sequencer()+0x52>
    _stepsEdit[i] = new Step(this);
    _stepsPlayback[i] = _stepsEdit[i];
  };
};
     4d6:	mov	r0, r4
     4d8:	pop	{r3, r4, r5, r6, r7, pc}
     4da:	nop

000004dc <Sequencer::tick()>:

// todo: implement sequencer motion record
// todo: implement multi midi channel

void Sequencer::tick() {
     4dc:	push	{r4, lr}
     4de:	mov	r4, r0
  _transport->tick();
     4e0:	ldr	r0, [r0, #4]
     4e2:	bl	b70 <Transport::tick()>
  _controller->tick();
     4e6:	ldr	r0, [r4, #8]
}
     4e8:	ldmia.w	sp!, {r4, lr}
// todo: implement sequencer motion record
// todo: implement multi midi channel

void Sequencer::tick() {
  _transport->tick();
  _controller->tick();
     4ec:	b.w	1224 <Controller::tick()>

000004f0 <Sequencer::reverse()>:
}

void Sequencer::reverse() {
  _reversed = !_reversed;
     4f0:	ldrb	r3, [r0, #0]
     4f2:	eor.w	r3, r3, #1
     4f6:	strb	r3, [r0, #0]
     4f8:	bx	lr
     4fa:	nop

000004fc <Sequencer::step()>:
}

void Sequencer::step () {  
     4fc:	push	{r3, r4, r5, lr}
     4fe:	mov	r4, r0
  if (!_controller->getShiftMode()) {
     500:	ldr	r0, [r0, #8]
     502:	bl	13fc <Controller::getShiftMode()>
     506:	cbz	r0, 52e <Sequencer::step()+0x32>
    _controller->_leds[_currentStep]->blink();
  }

  if (!_reversed) {
     508:	ldrb	r5, [r4, #0]
     50a:	cbnz	r5, 518 <Sequencer::step()+0x1c>
    _currentStep++;
     50c:	ldr	r3, [r4, #48]	; 0x30
     50e:	adds	r3, #1

    if (_currentStep > 3) {
     510:	cmp	r3, #3
  if (!_controller->getShiftMode()) {
    _controller->_leds[_currentStep]->blink();
  }

  if (!_reversed) {
    _currentStep++;
     512:	str	r3, [r4, #48]	; 0x30

    if (_currentStep > 3) {
     514:	bgt.n	540 <Sequencer::step()+0x44>
     516:	pop	{r3, r4, r5, pc}
      _paginator->getNextPlaybackPage(1);
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     518:	ldr	r1, [r4, #48]	; 0x30
     51a:	subs	r1, #1

    if (_currentStep == -1) {
     51c:	adds	r3, r1, #1
    if (_currentStep > 3) {
      _paginator->getNextPlaybackPage(1);
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     51e:	str	r1, [r4, #48]	; 0x30

    if (_currentStep == -1) {
     520:	bne.n	516 <Sequencer::step()+0x1a>
      _paginator->getNextPlaybackPage(-1);
     522:	ldr	r0, [r4, #12]
     524:	bl	ba8 <Paginator::getNextPlaybackPage(int)>
      _currentStep = 3;
     528:	movs	r3, #3
     52a:	str	r3, [r4, #48]	; 0x30
    }
  }
};
     52c:	b.n	516 <Sequencer::step()+0x1a>
  _reversed = !_reversed;
}

void Sequencer::step () {  
  if (!_controller->getShiftMode()) {
    _controller->_leds[_currentStep]->blink();
     52e:	ldr	r3, [r4, #8]
     530:	ldr	r2, [r4, #48]	; 0x30
     532:	add.w	r3, r3, r2, lsl #2
     536:	mov	r1, r0
     538:	ldr	r0, [r3, #52]	; 0x34
     53a:	bl	878 <Led::blink(int)>
     53e:	b.n	508 <Sequencer::step()+0xc>

  if (!_reversed) {
    _currentStep++;

    if (_currentStep > 3) {
      _paginator->getNextPlaybackPage(1);
     540:	movs	r1, #1
     542:	ldr	r0, [r4, #12]
     544:	bl	ba8 <Paginator::getNextPlaybackPage(int)>
      _currentStep = 0;
     548:	str	r5, [r4, #48]	; 0x30
     54a:	pop	{r3, r4, r5, pc}

0000054c <Sequencer::resetStep()>:
    }
  }
};

void Sequencer::resetStep () {
  _currentStep = 0;
     54c:	movs	r3, #0
     54e:	str	r3, [r0, #48]	; 0x30
     550:	bx	lr
     552:	nop

00000554 <Button::Button(int, int, Led*, bool, bool, Controller*)>:
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     554:	push	{r3, r4, r5, r6, r7, lr}
     556:	mov	r4, r0
  Led* led,
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
     558:	str	r1, [r0, #0]
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     55a:	ldrb.w	r7, [sp, #24]
     55e:	ldrb.w	r6, [sp, #28]
     562:	ldr	r5, [sp, #32]
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
  _led = led;
     564:	str	r3, [r0, #52]	; 0x34
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
     566:	mov.w	r1, #300	; 0x12c
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
     56a:	str	r2, [r0, #24]
  _reverseButton = reverseButton;
  _holdThreshold = 300;
  _led = led;
  _controller = controller;

  pinMode(pin, INPUT);
     56c:	uxtb	r0, r2
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
     56e:	str	r1, [r4, #44]	; 0x2c
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
     570:	strb	r7, [r4, #16]
  _reverseButton = reverseButton;
     572:	strb	r6, [r4, #17]
  _holdThreshold = 300;
  _led = led;
  _controller = controller;
     574:	str	r5, [r4, #48]	; 0x30

  pinMode(pin, INPUT);
     576:	movs	r1, #0
     578:	bl	1b10 <pinMode>
};
     57c:	mov	r0, r4
     57e:	pop	{r3, r4, r5, r6, r7, pc}

00000580 <Button::onPressWhileHolding()>:
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
     580:	ldr	r3, [r0, #4]
     582:	cmp	r3, #1
     584:	beq.n	588 <Button::onPressWhileHolding()+0x8>
     586:	bx	lr
     588:	mov	r3, r0
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     58a:	ldr	r0, [r0, #48]	; 0x30

  if (_state == HIGH && _shiftButton) {
     58c:	ldrb	r2, [r3, #16]
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     58e:	ldr	r1, [r0, #76]	; 0x4c
// this is actually on press while hold
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
     590:	push	{r4, lr}
  Paginator * paginator = _controller->_sequencer->_paginator;
     592:	ldr	r4, [r1, #12]

  if (_state == HIGH && _shiftButton) {
     594:	cbnz	r2, 59c <Button::onPressWhileHolding()+0x1c>
    if (_controller->getShiftMode()) {
      paginator->previousPage();
    }
  } else if (_state == HIGH && _reverseButton) {
     596:	ldrb	r3, [r3, #17]
     598:	cbnz	r3, 5ae <Button::onPressWhileHolding()+0x2e>
     59a:	pop	{r4, pc}
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
     59c:	bl	13fc <Controller::getShiftMode()>
     5a0:	cmp	r0, #0
     5a2:	beq.n	59a <Button::onPressWhileHolding()+0x1a>
      paginator->previousPage();
     5a4:	mov	r0, r4
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
    }
  }
}
     5a6:	ldmia.w	sp!, {r4, lr}
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
     5aa:	b.w	e60 <Paginator::previousPage()>
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
     5ae:	bl	13fc <Controller::getShiftMode()>
     5b2:	cmp	r0, #0
     5b4:	beq.n	59a <Button::onPressWhileHolding()+0x1a>
      paginator->nextPage();
     5b6:	mov	r0, r4
    }
  }
}
     5b8:	ldmia.w	sp!, {r4, lr}
    if (_controller->getShiftMode()) {
      paginator->previousPage();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
     5bc:	b.w	e30 <Paginator::nextPage()>

000005c0 <Button::onRelease()>:
    }
  }
}

void Button::onRelease () {
     5c0:	push	{r4, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5c2:	ldr	r3, [pc, #116]	; (638 <Button::onRelease()+0x78>)
  if (timeSincePress() < _holdThreshold) {
     5c4:	ldr	r1, [r0, #36]	; 0x24
     5c6:	ldr	r3, [r3, #0]
     5c8:	ldr	r2, [r0, #44]	; 0x2c
      paginator->nextPage();
    }
  }
}

void Button::onRelease () {
     5ca:	sub	sp, #8
     5cc:	str	r3, [sp, #4]
	return ret;
     5ce:	ldr	r3, [sp, #4]
  if (timeSincePress() < _holdThreshold) {
     5d0:	subs	r3, r3, r1
     5d2:	cmp	r2, r3
     5d4:	bls.n	5f6 <Button::onRelease()+0x36>
    if (_shiftButton && !_controller->getShiftMode()) {
     5d6:	ldrb	r3, [r0, #16]
     5d8:	mov	r4, r0
     5da:	cbnz	r3, 5fa <Button::onRelease()+0x3a>
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
     5dc:	ldrb	r3, [r0, #17]
     5de:	cbz	r3, 60e <Button::onRelease()+0x4e>
     5e0:	ldr	r0, [r4, #48]	; 0x30
     5e2:	bl	13fc <Controller::getShiftMode()>
     5e6:	cbnz	r0, 630 <Button::onRelease()+0x70>
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
     5e8:	ldr	r3, [r4, #48]	; 0x30
     5ea:	ldr	r0, [r3, #76]	; 0x4c
     5ec:	bl	4f0 <Sequencer::reverse()>
      _led->toggle();
     5f0:	ldr	r0, [r4, #52]	; 0x34
     5f2:	bl	8ac <Led::toggle()>
    } else if (!_reverseButton && !_shiftButton) {
      _led->toggle();
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
    }
  } 
};
     5f6:	add	sp, #8
     5f8:	pop	{r4, pc}
  }
}

void Button::onRelease () {
  if (timeSincePress() < _holdThreshold) {
    if (_shiftButton && !_controller->getShiftMode()) {
     5fa:	ldr	r0, [r0, #48]	; 0x30
     5fc:	bl	13fc <Controller::getShiftMode()>
     600:	cbz	r0, 626 <Button::onRelease()+0x66>
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
     602:	ldrb	r3, [r4, #17]
     604:	cmp	r3, #0
     606:	bne.n	5e0 <Button::onRelease()+0x20>
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
      _led->toggle();
    } else if (!_reverseButton && !_shiftButton) {
     608:	ldrb	r3, [r4, #16]
     60a:	cmp	r3, #0
     60c:	bne.n	5f6 <Button::onRelease()+0x36>
      _led->toggle();
     60e:	ldr	r0, [r4, #52]	; 0x34
     610:	bl	8ac <Led::toggle()>
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
     614:	ldr	r2, [r4, #48]	; 0x30
     616:	ldr	r3, [r4, #0]
     618:	ldr	r2, [r2, #76]	; 0x4c
     61a:	adds	r3, #3
     61c:	ldr.w	r0, [r2, r3, lsl #2]
     620:	bl	eb0 <Step::toggle()>
    }
  } 
};
     624:	b.n	5f6 <Button::onRelease()+0x36>
}

void Button::onRelease () {
  if (timeSincePress() < _holdThreshold) {
    if (_shiftButton && !_controller->getShiftMode()) {
      _controller->toggleMode();
     626:	ldr	r0, [r4, #48]	; 0x30
     628:	bl	1250 <Controller::toggleMode()>
    } else if (!_reverseButton && !_shiftButton) {
      _led->toggle();
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
    }
  } 
};
     62c:	add	sp, #8
     62e:	pop	{r4, pc}
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
      _led->toggle();
    } else if (!_reverseButton && !_shiftButton) {
     630:	ldrb	r3, [r4, #17]
     632:	cmp	r3, #0
     634:	bne.n	5f6 <Button::onRelease()+0x36>
     636:	b.n	608 <Button::onRelease()+0x48>
     638:	.word	0x1fff15cc

0000063c <Button::onHold()>:
    }
  } 
};

void Button::onHold () {
  if (_id == 1) _controller->enterShiftMode();
     63c:	ldr	r3, [r0, #0]
     63e:	cmp	r3, #1
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
    }
  } 
};

void Button::onHold () {
     640:	push	{r4, lr}
     642:	mov	r4, r0
  if (_id == 1) _controller->enterShiftMode();
     644:	beq.n	654 <Button::onHold()+0x18>
  if (_id == 2 && _controller->getShiftMode()) {
     646:	cmp	r3, #2
     648:	beq.n	660 <Button::onHold()+0x24>
    _controller->enterCopyMode();
  } 
  else if (_id == 5) _controller->enterChanceMode();
     64a:	cmp	r3, #5
     64c:	beq.n	688 <Button::onHold()+0x4c>
  else if (_id == 6 && _controller->getChanceMode()) {
     64e:	cmp	r3, #6
     650:	beq.n	676 <Button::onHold()+0x3a>
     652:	pop	{r4, pc}
    }
  } 
};

void Button::onHold () {
  if (_id == 1) _controller->enterShiftMode();
     654:	ldr	r0, [r0, #48]	; 0x30
     656:	bl	12e4 <Controller::enterShiftMode()>
     65a:	ldr	r3, [r4, #0]
  if (_id == 2 && _controller->getShiftMode()) {
     65c:	cmp	r3, #2
     65e:	bne.n	64a <Button::onHold()+0xe>
     660:	ldr	r0, [r4, #48]	; 0x30
     662:	bl	13fc <Controller::getShiftMode()>
     666:	cbnz	r0, 66c <Button::onHold()+0x30>
     668:	ldr	r3, [r4, #0]
     66a:	b.n	64a <Button::onHold()+0xe>
    _controller->enterCopyMode();
     66c:	ldr	r0, [r4, #48]	; 0x30
  } 
  else if (_id == 5) _controller->enterChanceMode();
  else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  }
}
     66e:	ldmia.w	sp!, {r4, lr}
};

void Button::onHold () {
  if (_id == 1) _controller->enterShiftMode();
  if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
     672:	b.w	134c <Controller::enterCopyMode()>
  } 
  else if (_id == 5) _controller->enterChanceMode();
  else if (_id == 6 && _controller->getChanceMode()) {
     676:	ldr	r0, [r4, #48]	; 0x30
     678:	bl	13d4 <Controller::getChanceMode()>
     67c:	cbz	r0, 692 <Button::onHold()+0x56>
    _controller->enterSwingMode();
     67e:	ldr	r0, [r4, #48]	; 0x30
  }
}
     680:	ldmia.w	sp!, {r4, lr}
  if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } 
  else if (_id == 5) _controller->enterChanceMode();
  else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
     684:	b.w	139c <Controller::enterSwingMode()>
void Button::onHold () {
  if (_id == 1) _controller->enterShiftMode();
  if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } 
  else if (_id == 5) _controller->enterChanceMode();
     688:	ldr	r0, [r4, #48]	; 0x30
  else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  }
}
     68a:	ldmia.w	sp!, {r4, lr}
void Button::onHold () {
  if (_id == 1) _controller->enterShiftMode();
  if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } 
  else if (_id == 5) _controller->enterChanceMode();
     68e:	b.w	135c <Controller::enterChanceMode()>
     692:	pop	{r4, pc}

00000694 <Button::onHoldRelease()>:
    _controller->enterSwingMode();
  }
}

void Button::onHoldRelease () {
  if (_id == 1) {
     694:	ldr	r3, [r0, #0]
     696:	cmp	r3, #1
  else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  }
}

void Button::onHoldRelease () {
     698:	push	{r4, lr}
     69a:	mov	r4, r0
  if (_id == 1) {
     69c:	beq.n	6c6 <Button::onHoldRelease()+0x32>
    _controller->exitShiftMode();

    if (_controller->getCopyMode()) {
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
     69e:	cmp	r3, #2
     6a0:	beq.n	6d6 <Button::onHoldRelease()+0x42>
    _controller->exitCopyMode();
  } else if (_id == 5) {
     6a2:	cmp	r3, #5
     6a4:	beq.n	6ac <Button::onHoldRelease()+0x18>
    _controller->exitChanceMode();

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
     6a6:	cmp	r3, #6
     6a8:	beq.n	6bc <Button::onHoldRelease()+0x28>
     6aa:	pop	{r4, pc}
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
  } else if (_id == 5) {
    _controller->exitChanceMode();
     6ac:	ldr	r0, [r0, #48]	; 0x30
     6ae:	bl	1390 <Controller::exitChanceMode()>

    if (_controller->getSwingMode()) {
     6b2:	ldr	r0, [r4, #48]	; 0x30
     6b4:	bl	13e4 <Controller::getSwingMode()>
     6b8:	cmp	r0, #0
     6ba:	beq.n	6aa <Button::onHoldRelease()+0x16>
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitSwingMode();
     6bc:	ldr	r0, [r4, #48]	; 0x30
  }
};
     6be:	ldmia.w	sp!, {r4, lr}

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitSwingMode();
     6c2:	b.w	13c8 <Controller::exitSwingMode()>
  }
}

void Button::onHoldRelease () {
  if (_id == 1) {
    _controller->exitShiftMode();
     6c6:	ldr	r0, [r0, #48]	; 0x30
     6c8:	bl	1324 <Controller::exitShiftMode()>

    if (_controller->getCopyMode()) {
     6cc:	ldr	r0, [r4, #48]	; 0x30
     6ce:	bl	13f4 <Controller::getCopyMode()>
     6d2:	cmp	r0, #0
     6d4:	beq.n	6aa <Button::onHoldRelease()+0x16>
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
     6d6:	ldr	r0, [r4, #48]	; 0x30
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitSwingMode();
  }
};
     6d8:	ldmia.w	sp!, {r4, lr}

    if (_controller->getCopyMode()) {
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
     6dc:	b.w	1354 <Controller::exitCopyMode()>

000006e0 <Button::tick()>:
  } else if (_id == 6) {
    _controller->exitSwingMode();
  }
};

void Button::tick () {
     6e0:	push	{r4, r5, lr}
     6e2:	mov	r4, r0
     6e4:	sub	sp, #28
  _current = digitalRead(_pin);
     6e6:	ldrb	r0, [r0, #24]
     6e8:	bl	1af4 <digitalRead>
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     6ec:	cmp	r0, #1
    _controller->exitSwingMode();
  }
};

void Button::tick () {
  _current = digitalRead(_pin);
     6ee:	str	r0, [r4, #28]
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     6f0:	beq.n	72c <Button::tick()+0x4c>
     6f2:	ldr	r3, [r4, #36]	; 0x24
     6f4:	ldr	r5, [pc, #140]	; (784 <Button::tick()+0xa4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6f6:	ldr	r2, [r5, #0]
     6f8:	str	r2, [sp, #16]
	return ret;
     6fa:	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6fc:	ldr	r1, [pc, #132]	; (784 <Button::tick()+0xa4>)
    };
    //Serial.println("onHold");
    onHold();
  }

  if (timeSincePress() > 10) {    
     6fe:	subs	r2, r2, r3
     700:	cmp	r2, #10
     702:	bls.n	726 <Button::tick()+0x46>
    if (_state != _current) {
     704:	ldr	r2, [r4, #4]
     706:	cmp	r0, r2
     708:	beq.n	726 <Button::tick()+0x46>
      _state = _current;

      if (_state == HIGH) {
     70a:	cmp	r0, #1
    onHold();
  }

  if (timeSincePress() > 10) {    
    if (_state != _current) {
      _state = _current;
     70c:	str	r0, [r4, #4]

      if (_state == HIGH) {
     70e:	beq.n	778 <Button::tick()+0x98>
     710:	ldr	r2, [r1, #0]
     712:	str	r2, [sp, #20]
	return ret;
     714:	ldr	r2, [sp, #20]
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     716:	ldr	r1, [r4, #44]	; 0x2c
     718:	subs	r3, r2, r3
     71a:	cmp	r1, r3
          //Serial.println("onHoldRelease");
          onHoldRelease();
     71c:	mov	r0, r4
      if (_state == HIGH) {
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     71e:	bls.n	76c <Button::tick()+0x8c>
          //Serial.println("onHoldRelease");
          onHoldRelease();
        } else {
          onRelease();
     720:	bl	5c0 <Button::onRelease()>
     724:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     726:	str	r0, [r4, #32]
};
     728:	add	sp, #28
     72a:	pop	{r4, r5, pc}
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     72c:	ldr	r2, [r4, #32]
     72e:	cbz	r2, 760 <Button::tick()+0x80>

  _previous = _current;
};

bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
     730:	cmp	r2, #1
     732:	ldr	r3, [r4, #36]	; 0x24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     734:	ldr	r5, [pc, #76]	; (784 <Button::tick()+0xa4>)
     736:	bne.n	6f6 <Button::tick()+0x16>
     738:	ldr	r2, [r5, #0]
     73a:	str	r2, [sp, #12]
	return ret;
     73c:	ldr	r2, [sp, #12]

  if (currentWentUp()) {
    _firstTime = millis();
  }

  if (currentIsUp() && timeSincePress() > _holdThreshold) {
     73e:	ldr	r1, [r4, #44]	; 0x2c
     740:	subs	r2, r2, r3
     742:	cmp	r1, r2
     744:	bcs.n	6f6 <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     746:	ldr	r3, [r5, #0]
     748:	str	r3, [sp, #8]
	return ret;
     74a:	ldr	r3, [sp, #8]
    _firstHoldTime = millis();
     74c:	str	r3, [r4, #40]	; 0x28
    if (!_controller->getShiftMode()) {
     74e:	ldr	r0, [r4, #48]	; 0x30
     750:	bl	13fc <Controller::getShiftMode()>
      //Serial.println("shiftMode")
    };
    //Serial.println("onHold");
    onHold();
     754:	mov	r0, r4
     756:	bl	63c <Button::onHold()>
     75a:	ldr	r0, [r4, #28]
     75c:	ldr	r3, [r4, #36]	; 0x24
     75e:	b.n	6f6 <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     760:	ldr	r5, [pc, #32]	; (784 <Button::tick()+0xa4>)
     762:	ldr	r3, [r5, #0]
     764:	str	r3, [sp, #4]
	return ret;
     766:	ldr	r3, [sp, #4]

void Button::tick () {
  _current = digitalRead(_pin);

  if (currentWentUp()) {
    _firstTime = millis();
     768:	str	r3, [r4, #36]	; 0x24
     76a:	b.n	6f6 <Button::tick()+0x16>
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
          //Serial.println("onHoldRelease");
          onHoldRelease();
     76c:	bl	694 <Button::onHoldRelease()>
     770:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     772:	str	r0, [r4, #32]
};
     774:	add	sp, #28
     776:	pop	{r4, r5, pc}
    if (_state != _current) {
      _state = _current;

      if (_state == HIGH) {
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
     778:	mov	r0, r4
     77a:	bl	580 <Button::onPressWhileHolding()>
     77e:	ldr	r0, [r4, #28]
     780:	b.n	726 <Button::tick()+0x46>
     782:	nop
     784:	.word	0x1fff15cc

00000788 <Piano::Piano(Sequencer*)>:
#include "note.h"
#include "piano.h"
#include "step.h"
#include "sequencer.h"

Piano::Piano (Sequencer* sequencer) {
     788:	push	{r3, r4, r5, r6, r7, lr}
     78a:	ldr	r5, [pc, #56]	; (7c4 <Piano::Piano(Sequencer*)+0x3c>)
     78c:	mov	r6, r0
     78e:	mov	r7, r1
     790:	ldmia	r5!, {r0, r1, r2, r3}
     792:	add.w	r4, r6, #20
     796:	stmia	r4!, {r0, r1, r2, r3}
     798:	ldmia	r5!, {r0, r1, r2, r3}
     79a:	stmia	r4!, {r0, r1, r2, r3}
     79c:	ldr	r3, [r5, #0]
     79e:	str	r3, [r4, #0]
  _sequencer = sequencer;

  _currentScale = 0;
     7a0:	movs	r3, #0
#include "piano.h"
#include "step.h"
#include "sequencer.h"

Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;
     7a2:	str	r7, [r6, #16]

  _currentScale = 0;
     7a4:	str	r3, [r6, #56]	; 0x38
     7a6:	subs	r4, r6, #4
     7a8:	add.w	r7, r6, #12

  for (int i = 0; i < 4; i++) {
    _notes[i] = new Note();
     7ac:	movs	r0, #20
     7ae:	bl	3190 <operator new(unsigned int)>
     7b2:	mov	r5, r0
     7b4:	bl	994 <Note::Note()>
     7b8:	str.w	r5, [r4, #4]!
Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;

  _currentScale = 0;

  for (int i = 0; i < 4; i++) {
     7bc:	cmp	r4, r7
     7be:	bne.n	7ac <Piano::Piano(Sequencer*)+0x24>
    _notes[i] = new Note();
  } 
};
     7c0:	mov	r0, r6
     7c2:	pop	{r3, r4, r5, r6, r7, pc}
     7c4:	.word	0x00004594

000007c8 <Piano::tick()>:

void Piano::tick () {
     7c8:	push	{r3, r4, r5, lr}
     7ca:	subs	r4, r0, #4
     7cc:	add.w	r5, r0, #12
  for (int i = 0; i < 4; i++) {
    _notes[i]->tick();
     7d0:	ldr.w	r0, [r4, #4]!
     7d4:	bl	a28 <Note::tick()>
    _notes[i] = new Note();
  } 
};

void Piano::tick () {
  for (int i = 0; i < 4; i++) {
     7d8:	cmp	r4, r5
     7da:	bne.n	7d0 <Piano::tick()+0x8>
    _notes[i]->tick();
  } 
};
     7dc:	pop	{r3, r4, r5, pc}
     7de:	nop

000007e0 <Piano::play(Step*)>:
  }

  return 0; // <-- hack to get rid of a warning, hate my life
};

void Piano::play (Step* step) {
     7e0:	push	{r4, r5}
     7e2:	subs	r3, r0, #4
     7e4:	add.w	r2, r0, #12
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
    if (!_notes[i]->_active) {
     7e8:	ldr.w	r4, [r3, #4]!
     7ec:	ldr	r5, [r4, #16]
     7ee:	cbz	r5, 7f6 <Piano::play(Step*)+0x16>
    _notes[i]->tick();
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
     7f0:	cmp	r3, r2
     7f2:	bne.n	7e8 <Piano::play(Step*)+0x8>
    if (!_notes[i]->_active) {
      return _notes[i];
    }
  }

  return 0; // <-- hack to get rid of a warning, hate my life
     7f4:	movs	r4, #0
};

void Piano::play (Step* step) {
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
     7f6:	ldr	r2, [r1, #4]
     7f8:	add.w	r2, r2, r2, lsl #1
     7fc:	add.w	r2, r0, r2, lsl #2
  note->play(step, scale);
     800:	adds	r2, #20
     802:	mov	r0, r4
};
     804:	pop	{r4, r5}
};

void Piano::play (Step* step) {
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
  note->play(step, scale);
     806:	b.w	9d4 <Note::play(Step*, int*)>
     80a:	nop

0000080c <Piano::transpose(int)>:

// todo: implement global transpose
void Piano::transpose (int value) {
  int newValue = value;

  if (value < 330) {
     80c:	cmp.w	r1, #330	; 0x14a
     810:	blt.n	824 <Piano::transpose(int)+0x18>
    newValue = 2;
  } else if (value < 660) {
     812:	cmp.w	r1, #660	; 0x294
     816:	bge.n	846 <Piano::transpose(int)+0x3a>
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     818:	ldr	r3, [r0, #56]	; 0x38
  int newValue = value;

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
     81a:	movs	r1, #1
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     81c:	cmp	r1, r3
     81e:	bne.n	82c <Piano::transpose(int)+0x20>
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
    }
  }

  _currentScale = newValue;
     820:	str	r1, [r0, #56]	; 0x38
     822:	bx	lr
// todo: implement global transpose
void Piano::transpose (int value) {
  int newValue = value;

  if (value < 330) {
    newValue = 2;
     824:	movs	r1, #2
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     826:	ldr	r3, [r0, #56]	; 0x38
     828:	cmp	r1, r3
     82a:	beq.n	820 <Piano::transpose(int)+0x14>
  auto& scale = _scale[step->pitchScale];
  note->play(step, scale);
};

// todo: implement global transpose
void Piano::transpose (int value) {
     82c:	push	{r4, r5}
     82e:	ldr	r3, [r0, #16]
    newValue = 0;
  }

  if (_currentScale != newValue) {
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
     830:	ldr	r5, [r3, #16]
     832:	ldr	r4, [r3, #20]
     834:	ldr	r2, [r3, #24]
     836:	ldr	r3, [r3, #28]
     838:	str	r1, [r5, #4]
     83a:	str	r1, [r4, #4]
     83c:	str	r1, [r2, #4]
    }
  }

  _currentScale = newValue;
};
     83e:	pop	{r4, r5}
    newValue = 0;
  }

  if (_currentScale != newValue) {
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
     840:	str	r1, [r3, #4]
    }
  }

  _currentScale = newValue;
     842:	str	r1, [r0, #56]	; 0x38
};
     844:	bx	lr

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
  } else if (value <= 1023) {
     846:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     84a:	it	lt
     84c:	movlt	r1, #0
     84e:	b.n	826 <Piano::transpose(int)+0x1a>

00000850 <Led::Led(int, int)>:
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
     850:	push	{r3, r4, r5, lr}
     852:	mov	r4, r0
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     854:	movs	r3, #0
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     856:	movs	r5, #75	; 0x4b
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
     858:	stmia.w	r0, {r1, r2}
  _state = state;
  _blinkLength = 75;
  _blinking = false;
  _blinkingCounter = 0;

  pinMode(_pin, OUTPUT);
     85c:	uxtb	r0, r1

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     85e:	strb	r3, [r4, #16]
  _blinkingCounter = 0;
     860:	str	r3, [r4, #20]
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     862:	str	r5, [r4, #12]
  _blinking = false;
  _blinkingCounter = 0;

  pinMode(_pin, OUTPUT);
     864:	movs	r1, #1
     866:	bl	1b10 <pinMode>
  digitalWrite(_pin, _state);
     86a:	ldrb	r0, [r4, #0]
     86c:	ldrb	r1, [r4, #4]
     86e:	bl	1ae8 <digitalWrite>
};
     872:	mov	r0, r4
     874:	pop	{r3, r4, r5, pc}
     876:	nop

00000878 <Led::blink(int)>:

void Led::blink (int times) {
     878:	push	{r4, r5, r6, lr}
  digitalWrite(_pin, !digitalRead(_pin));
     87a:	ldrb	r5, [r0, #0]

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     87c:	sub	sp, #8
     87e:	mov	r4, r0
  digitalWrite(_pin, !digitalRead(_pin));
     880:	mov	r0, r5

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     882:	mov	r6, r1
  digitalWrite(_pin, !digitalRead(_pin));
     884:	bl	1af4 <digitalRead>
     888:	clz	r1, r0
     88c:	lsrs	r1, r1, #5
     88e:	mov	r0, r5
     890:	bl	1ae8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     894:	ldr	r3, [pc, #16]	; (8a8 <Led::blink(int)+0x30>)
  _blinking = true;
  _blinkingCounter = times;
     896:	str	r6, [r4, #20]
     898:	ldr	r3, [r3, #0]
     89a:	str	r3, [sp, #4]
	return ret;
     89c:	ldr	r3, [sp, #4]
  _lastBlink = millis();  
     89e:	str	r3, [r4, #8]
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
  digitalWrite(_pin, !digitalRead(_pin));
  _blinking = true;
     8a0:	movs	r2, #1
     8a2:	strb	r2, [r4, #16]
  _blinkingCounter = times;
  _lastBlink = millis();  
};
     8a4:	add	sp, #8
     8a6:	pop	{r4, r5, r6, pc}
     8a8:	.word	0x1fff15cc

000008ac <Led::toggle()>:

void Led::toggle () {
  _state = !_state;
     8ac:	ldr	r1, [r0, #4]
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     8ae:	push	{r4, lr}
  _state = !_state;
     8b0:	clz	r1, r1
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     8b4:	mov	r4, r0
  _state = !_state;
     8b6:	lsrs	r1, r1, #5

  digitalWrite(_pin, _state);
     8b8:	ldrb	r0, [r0, #0]
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
  _state = !_state;
     8ba:	str	r1, [r4, #4]

  digitalWrite(_pin, _state);
     8bc:	bl	1ae8 <digitalWrite>

  if (_blinking) {
     8c0:	ldrb	r3, [r4, #16]
     8c2:	cbnz	r3, 8c6 <Led::toggle()+0x1a>
     8c4:	pop	{r4, pc}
    digitalWrite(_pin, !_state);
     8c6:	ldr	r1, [r4, #4]
     8c8:	ldrb	r0, [r4, #0]
     8ca:	clz	r1, r1
     8ce:	lsrs	r1, r1, #5
  }
};
     8d0:	ldmia.w	sp!, {r4, lr}
  _state = !_state;

  digitalWrite(_pin, _state);

  if (_blinking) {
    digitalWrite(_pin, !_state);
     8d4:	b.w	1ae8 <digitalWrite>

000008d8 <Led::off()>:
  }
};

void Led::off () {
  _blinking = false;
     8d8:	movs	r1, #0
     8da:	strb	r1, [r0, #16]
  _state = 0;
     8dc:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     8de:	ldrb	r0, [r0, #0]
     8e0:	b.w	1ae8 <digitalWrite>

000008e4 <Led::on()>:
}

void Led::on () {
  _blinking = false;
     8e4:	movs	r3, #0
  _state = 1;
     8e6:	movs	r1, #1
  _state = 0;
  digitalWrite(_pin, _state);
}

void Led::on () {
  _blinking = false;
     8e8:	strb	r3, [r0, #16]
  _state = 1;
     8ea:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     8ec:	ldrb	r0, [r0, #0]
     8ee:	b.w	1ae8 <digitalWrite>
     8f2:	nop

000008f4 <Led::tick()>:

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     8f4:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8f6:	ldr	r5, [pc, #112]	; (968 <Led::tick()+0x74>)
     8f8:	sub	sp, #16
     8fa:	ldr	r3, [r5, #0]
     8fc:	str	r3, [sp, #0]
	return ret;
     8fe:	ldr	r2, [sp, #0]
  // hack
  if (millis() < 3000) return; 
     900:	movw	r3, #2999	; 0xbb7
     904:	cmp	r2, r3
     906:	bls.n	932 <Led::tick()+0x3e>

  if (_blinking && blinkTimePassed()) {
     908:	ldrb	r3, [r0, #16]
     90a:	mov	r4, r0
     90c:	cbnz	r3, 936 <Led::tick()+0x42>
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
    _lastBlink = millis();        
  }

  if (!_blinking && _blinkingCounter > 0 && blinkTimePassed()) {
     90e:	ldr	r1, [r4, #20]
     910:	cmp	r1, #0
     912:	ble.n	932 <Led::tick()+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     914:	ldr	r3, [r5, #0]
     916:	str	r3, [sp, #12]
	return ret;
     918:	ldr	r3, [sp, #12]
     91a:	ldr	r0, [r4, #8]
     91c:	ldr	r2, [r4, #12]
     91e:	subs	r3, r3, r0
     920:	cmp	r3, r2
     922:	bls.n	932 <Led::tick()+0x3e>
    blink(_blinkingCounter - 1);
     924:	subs	r1, #1
     926:	mov	r0, r4
     928:	bl	878 <Led::blink(int)>
    _blinkingCounter--;
     92c:	ldr	r3, [r4, #20]
     92e:	subs	r3, #1
     930:	str	r3, [r4, #20]
  }
};
     932:	add	sp, #16
     934:	pop	{r4, r5, r6, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     936:	ldr	r3, [r5, #0]
     938:	str	r3, [sp, #8]
	return ret;
     93a:	ldr	r3, [sp, #8]

void Led::tick () {
  // hack
  if (millis() < 3000) return; 

  if (_blinking && blinkTimePassed()) {
     93c:	ldr	r1, [r0, #8]
     93e:	ldr	r2, [r0, #12]
     940:	subs	r3, r3, r1
     942:	cmp	r3, r2
     944:	bls.n	932 <Led::tick()+0x3e>
    digitalWrite(_pin, !digitalRead(_pin));
     946:	ldrb	r6, [r0, #0]
     948:	mov	r0, r6
     94a:	bl	1af4 <digitalRead>
     94e:	clz	r1, r0
     952:	lsrs	r1, r1, #5
     954:	mov	r0, r6
     956:	bl	1ae8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     95a:	ldr	r3, [r5, #0]
     95c:	str	r3, [sp, #4]
	return ret;
     95e:	ldr	r3, [sp, #4]
    _blinking = false;
    _lastBlink = millis();        
     960:	str	r3, [r4, #8]
  // hack
  if (millis() < 3000) return; 

  if (_blinking && blinkTimePassed()) {
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
     962:	movs	r3, #0
     964:	strb	r3, [r4, #16]
     966:	b.n	90e <Led::tick()+0x1a>
     968:	.word	0x1fff15cc

0000096c <setup>:
// channel, this would be cool to program
// for example drum machines or maybe more 
// complex polyphonic stuff
Sequencer* sequencer = new Sequencer();

void setup() {
     96c:	bx	lr
     96e:	nop

00000970 <loop>:
  Serial.begin(9600); 
}

void loop() {
  sequencer->tick();
     970:	ldr	r3, [pc, #4]	; (978 <loop+0x8>)
     972:	ldr	r0, [r3, #0]
     974:	b.w	4dc <Sequencer::tick()>
     978:	.word	0x1fff15b0

0000097c <_GLOBAL__sub_I_sequencer>:
     97c:	push	{r4, lr}
// but actually many tracks with each one 
// having a sequencer but all in the same
// channel, this would be cool to program
// for example drum machines or maybe more 
// complex polyphonic stuff
Sequencer* sequencer = new Sequencer();
     97e:	movs	r0, #56	; 0x38
     980:	bl	3190 <operator new(unsigned int)>
     984:	mov	r4, r0
     986:	bl	46c <Sequencer::Sequencer()>
     98a:	ldr	r3, [pc, #4]	; (990 <_GLOBAL__sub_I_sequencer+0x14>)
     98c:	str	r4, [r3, #0]
     98e:	pop	{r4, pc}
     990:	.word	0x1fff15b0

00000994 <Note::Note()>:
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     994:	movs	r2, #0
     996:	str	r2, [r0, #8]
  _pitch = 0;
     998:	str	r2, [r0, #0]
  _velocity = 0;
     99a:	str	r2, [r0, #4]
  _channel = 0;
     99c:	str	r2, [r0, #12]
  _active = false;
     99e:	str	r2, [r0, #16]
#include "step.h"
#include "note.h"

Note::Note () {
  reset();
};
     9a0:	bx	lr
     9a2:	nop

000009a4 <Note::noteOn(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     9a4:	subs	r1, #1
// First parameter is the event type (0x09 = note on, 0x08 = note off).
// Second parameter is note-on/note-off, combined with the channel.
// Channel can be anything between 0-15. Typically reported to the user as 1-16.
// Third parameter is the note number (48 = middle C).
// Fourth parameter is the velocity (64 = normal, 127 = fastest).
void Note::noteOn(byte channel, byte pitch, byte velocity) {
     9a6:	push	{r3, lr}
     9a8:	lsls	r1, r1, #8
     9aa:	lsls	r3, r3, #24
     9ac:	and.w	r1, r1, #3840	; 0xf00
     9b0:	and.w	r3, r3, #2130706432	; 0x7f000000
     9b4:	orrs	r3, r1
     9b6:	lsls	r2, r2, #16
     9b8:	orr.w	r3, r3, #36864	; 0x9000
     9bc:	orr.w	r3, r3, #9
     9c0:	and.w	r0, r2, #8323072	; 0x7f0000
     9c4:	orrs	r0, r3
     9c6:	bl	1d74 <usb_midi_write_packed>
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};
     9ca:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     9ce:	b.w	1e10 <usb_midi_flush_output>
     9d2:	nop

000009d4 <Note::play(Step*, int*)>:
  _velocity = 0;
  _channel = 0;
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
     9d4:	push	{r4, r5}
  _active = true;
  _length = step->length;
     9d6:	ldr	r5, [r1, #16]
  _pitch = scale[step->pitchGrade];
     9d8:	ldr	r3, [r1, #8]
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
     9da:	str	r5, [r0, #8]
  _channel = 0;
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
     9dc:	movs	r5, #1
     9de:	str	r5, [r0, #16]
  _length = step->length;
  _pitch = scale[step->pitchGrade];
     9e0:	ldr.w	r2, [r2, r3, lsl #2]
  _velocity = step->velocity;
     9e4:	ldr	r3, [r1, #12]
     9e6:	str	r3, [r0, #4]
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
  _pitch = scale[step->pitchGrade];
     9e8:	str	r2, [r0, #0]
  _velocity = step->velocity;
  // String noteLog = "Playing note, length: ";
  // //Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
     9ea:	uxtb	r3, r3
     9ec:	uxtb	r2, r2
     9ee:	ldrb	r1, [r0, #12]
};
     9f0:	pop	{r4, r5}
  _length = step->length;
  _pitch = scale[step->pitchGrade];
  _velocity = step->velocity;
  // String noteLog = "Playing note, length: ";
  // //Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
     9f2:	b.w	9a4 <Note::noteOn(unsigned char, unsigned char, unsigned char)>
     9f6:	nop

000009f8 <Note::noteOff(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     9f8:	subs	r1, #1
void Note::noteOn(byte channel, byte pitch, byte velocity) {
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};

void Note::noteOff(byte channel, byte pitch, byte velocity) {
     9fa:	push	{r3, lr}
     9fc:	lsls	r1, r1, #8
     9fe:	lsls	r3, r3, #24
     a00:	and.w	r1, r1, #3840	; 0xf00
     a04:	and.w	r3, r3, #2130706432	; 0x7f000000
     a08:	orrs	r3, r1
     a0a:	lsls	r2, r2, #16
     a0c:	orr.w	r3, r3, #32768	; 0x8000
     a10:	orr.w	r3, r3, #8
     a14:	and.w	r0, r2, #8323072	; 0x7f0000
     a18:	orrs	r0, r3
     a1a:	bl	1d74 <usb_midi_write_packed>
  usbMIDI.sendNoteOff(pitch, velocity, channel);
  usbMIDI.send_now();
};
     a1e:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     a22:	b.w	1e10 <usb_midi_flush_output>
     a26:	nop

00000a28 <Note::tick()>:
Note::Note () {
  reset();
};

void Note::tick() {
  if (!_active) return;
     a28:	ldr	r2, [r0, #16]
     a2a:	cbz	r2, a36 <Note::tick()+0xe>

  _length--;
     a2c:	ldr	r2, [r0, #8]
     a2e:	subs	r2, #1

  if (_length <= 0) {
     a30:	cmp	r2, #0
};

void Note::tick() {
  if (!_active) return;

  _length--;
     a32:	str	r2, [r0, #8]

  if (_length <= 0) {
     a34:	ble.n	a38 <Note::tick()+0x10>
     a36:	bx	lr

Note::Note () {
  reset();
};

void Note::tick() {
     a38:	push	{r4, lr}
  _length--;

  if (_length <= 0) {
    // String noteLog = "Note off, pitch: ";
    // //Serial.println(noteLog + _pitch);    
    noteOff(_channel, _pitch, _velocity);
     a3a:	ldrb	r3, [r0, #4]
     a3c:	ldrb	r2, [r0, #0]
     a3e:	ldrb	r1, [r0, #12]
     a40:	mov	r4, r0
     a42:	bl	9f8 <Note::noteOff(unsigned char, unsigned char, unsigned char)>
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     a46:	movs	r3, #0
     a48:	str	r3, [r4, #8]
  _pitch = 0;
     a4a:	str	r3, [r4, #0]
  _velocity = 0;
     a4c:	str	r3, [r4, #4]
  _channel = 0;
     a4e:	str	r3, [r4, #12]
  _active = false;
     a50:	str	r3, [r4, #16]
     a52:	pop	{r4, pc}

00000a54 <Transport::Transport(Sequencer*)>:
// this class has to keep track of the midi packets coming from the outside
// it also has the implementation of the top right knob that controls resolution
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
     a54:	push	{r4}
  _sequencer = sequencer;
  _state = false;
  max_ppqn = 24;
     a56:	movs	r4, #24
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     a58:	movs	r2, #0
  max_ppqn = 24;
     a5a:	stmia.w	r0, {r1, r4}
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     a5e:	str	r2, [r0, #12]
  max_ppqn = 24;
  ppqn = 0;
     a60:	str	r2, [r0, #8]
};
     a62:	ldr.w	r4, [sp], #4
     a66:	bx	lr

00000a68 <Transport::controlTempo(int)>:
int Transport::getPPQN () {
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
     a68:	cmp.w	r1, #400	; 0x190
     a6c:	bge.n	a7e <Transport::controlTempo(int)+0x16>
    max_ppqn = 6;

    if (ppqn >= 6) {
     a6e:	ldr	r3, [r0, #8]
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     a70:	movs	r2, #6

    if (ppqn >= 6) {
     a72:	cmp	r3, #5
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     a74:	str	r2, [r0, #4]

    if (ppqn >= 6) {
     a76:	ble.n	a94 <Transport::controlTempo(int)+0x2c>
      ppqn = 0;
     a78:	movs	r3, #0
     a7a:	str	r3, [r0, #8]
     a7c:	bx	lr
    }
  } else if (value >= 400 && value < 800) {
     a7e:	sub.w	r3, r1, #400	; 0x190
     a82:	cmp.w	r3, #400	; 0x190
     a86:	bcc.n	a96 <Transport::controlTempo(int)+0x2e>
    max_ppqn = 8;

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 800 && value <= 1023) {
     a88:	sub.w	r1, r1, #800	; 0x320
     a8c:	cmp	r1, #223	; 0xdf
    max_ppqn = 10;
     a8e:	itt	ls
     a90:	movls	r3, #10
     a92:	strls	r3, [r0, #4]
     a94:	bx	lr
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;

    if (ppqn >= 8) {
     a96:	ldr	r3, [r0, #8]

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     a98:	movs	r2, #8

    if (ppqn >= 8) {
     a9a:	cmp	r3, #7

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     a9c:	str	r2, [r0, #4]

    if (ppqn >= 8) {
     a9e:	bgt.n	a78 <Transport::controlTempo(int)+0x10>
     aa0:	bx	lr
     aa2:	nop

00000aa4 <Transport::advancePPQN()>:
    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
     aa4:	push	{r3, r4, r5, lr}
  ++ppqn;
     aa6:	ldr	r3, [r0, #8]

  _sequencer->_piano->tick();
     aa8:	ldr	r2, [r0, #0]
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     aaa:	adds	r3, #1
    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
     aac:	mov	r4, r0
  ++ppqn;
     aae:	str	r3, [r0, #8]

  _sequencer->_piano->tick();
     ab0:	ldr	r0, [r2, #52]	; 0x34
     ab2:	bl	7c8 <Piano::tick()>
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     ab6:	ldmia.w	r4, {r1, r2}
void Transport::advancePPQN () {
  ++ppqn;

  _sequencer->_piano->tick();

  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
     aba:	ldr	r3, [r1, #48]	; 0x30
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     abc:	ldr	r0, [r4, #8]
void Transport::advancePPQN () {
  ++ppqn;

  _sequencer->_piano->tick();

  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
     abe:	adds	r3, #8
     ac0:	ldr.w	r5, [r1, r3, lsl #2]
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     ac4:	ldr	r3, [r5, #28]
     ac6:	add	r3, r2
     ac8:	cmp	r0, r3
     aca:	beq.n	ad2 <Transport::advancePPQN()+0x2e>
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
  }

  if (ppqn == max_ppqn) {
     acc:	cmp	r0, r2
     ace:	beq.n	aea <Transport::advancePPQN()+0x46>
     ad0:	pop	{r3, r4, r5, pc}
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     ad2:	ldrb	r3, [r5, #20]
     ad4:	cmp	r3, #0
     ad6:	beq.n	acc <Transport::advancePPQN()+0x28>
    int rand = random(100);
     ad8:	movs	r0, #100	; 0x64
     ada:	bl	3184 <random(unsigned long)>
    if (rand <= current->chance) _sequencer->_piano->play(current);
     ade:	ldr	r3, [r5, #24]
     ae0:	cmp	r0, r3
     ae2:	ble.n	af6 <Transport::advancePPQN()+0x52>
     ae4:	ldr	r0, [r4, #8]
     ae6:	ldr	r2, [r4, #4]
     ae8:	b.n	acc <Transport::advancePPQN()+0x28>
  }

  if (ppqn == max_ppqn) {
    _sequencer->step();
     aea:	ldr	r0, [r4, #0]
     aec:	bl	4fc <Sequencer::step()>
    ppqn = 0;
     af0:	movs	r3, #0
     af2:	str	r3, [r4, #8]
     af4:	pop	{r3, r4, r5, pc}
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
     af6:	ldr	r3, [r4, #0]
     af8:	mov	r1, r5
     afa:	ldr	r0, [r3, #52]	; 0x34
     afc:	bl	7e0 <Piano::play(Step*)>
     b00:	b.n	ae4 <Transport::advancePPQN()+0x40>
     b02:	nop

00000b04 <Transport::startPPQN()>:
    _sequencer->step();
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     b04:	push	{r4, lr}
  _state = true;
     b06:	movs	r2, #1
    _sequencer->step();
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     b08:	mov	r4, r0
  _state = true;
  ppqn = 0;
     b0a:	movs	r3, #0
    ppqn = 0;
  }
};

void Transport::startPPQN () {
  _state = true;
     b0c:	str	r2, [r0, #12]
  ppqn = 0;
     b0e:	str	r3, [r0, #8]
  _sequencer->step();
     b10:	ldr	r0, [r0, #0]
     b12:	bl	4fc <Sequencer::step()>
  _sequencer->_piano->tick();
     b16:	ldr	r3, [r4, #0]
     b18:	ldr	r0, [r3, #52]	; 0x34
     b1a:	bl	7c8 <Piano::tick()>
  _sequencer->_controller->_leds[5]->toggle();
     b1e:	ldr	r3, [r4, #0]
     b20:	ldr	r3, [r3, #8]
};
     b22:	ldmia.w	sp!, {r4, lr}
void Transport::startPPQN () {
  _state = true;
  ppqn = 0;
  _sequencer->step();
  _sequencer->_piano->tick();
  _sequencer->_controller->_leds[5]->toggle();
     b26:	ldr	r0, [r3, #72]	; 0x48
     b28:	b.w	8ac <Led::toggle()>

00000b2c <Transport::stopPPQN()>:
};

void Transport::stopPPQN () {
     b2c:	push	{r4, lr}
  _state = false;
     b2e:	movs	r3, #0
  _sequencer->step();
  _sequencer->_piano->tick();
  _sequencer->_controller->_leds[5]->toggle();
};

void Transport::stopPPQN () {
     b30:	mov	r4, r0
  _state = false;
     b32:	str	r3, [r0, #12]
  ppqn = 0;
     b34:	str	r3, [r0, #8]
  _sequencer->resetStep();
     b36:	ldr	r0, [r0, #0]
     b38:	bl	54c <Sequencer::resetStep()>
  _sequencer->_controller->_leds[5]->toggle();
     b3c:	ldr	r3, [r4, #0]
     b3e:	ldr	r3, [r3, #8]
};
     b40:	ldmia.w	sp!, {r4, lr}

void Transport::stopPPQN () {
  _state = false;
  ppqn = 0;
  _sequencer->resetStep();
  _sequencer->_controller->_leds[5]->toggle();
     b44:	ldr	r0, [r3, #72]	; 0x48
     b46:	b.w	8ac <Led::toggle()>
     b4a:	nop

00000b4c <Transport::processMidi()>:
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     b4c:	ldr	r3, [pc, #28]	; (b6c <Transport::processMidi()+0x20>)
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     b4e:	ldrb	r3, [r3, #0]
     b50:	cmp	r3, #250	; 0xfa
     b52:	beq.n	b66 <Transport::processMidi()+0x1a>
     b54:	cmp	r3, #252	; 0xfc
     b56:	beq.n	b62 <Transport::processMidi()+0x16>
     b58:	cmp	r3, #248	; 0xf8
     b5a:	beq.n	b5e <Transport::processMidi()+0x12>
     b5c:	bx	lr
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
     b5e:	b.w	aa4 <Transport::advancePPQN()>
    case usbMIDI.Start: // 0xFA
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      stopPPQN();
     b62:	b.w	b2c <Transport::stopPPQN()>
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      startPPQN();
     b66:	b.w	b04 <Transport::startPPQN()>
     b6a:	nop
     b6c:	.word	0x1fff1a8c

00000b70 <Transport::tick()>:
  _state = false;
  max_ppqn = 24;
  ppqn = 0;
};

void Transport::tick () {
     b70:	push	{r4, lr}
     b72:	mov	r4, r0
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     b74:	movs	r0, #0
     b76:	bl	1e3c <usb_midi_read>
  if (usbMIDI.read()) {
     b7a:	cbnz	r0, b7e <Transport::tick()+0xe>
     b7c:	pop	{r4, pc}
    processMidi();
     b7e:	mov	r0, r4
  }
};
     b80:	ldmia.w	sp!, {r4, lr}
  ppqn = 0;
};

void Transport::tick () {
  if (usbMIDI.read()) {
    processMidi();
     b84:	b.w	b4c <Transport::processMidi()>

00000b88 <Paginator::Paginator(Sequencer*)>:
#include "paginator.h"
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
     b88:	push	{r3, r4, r5, lr}
     b8a:	movs	r2, #64	; 0x40
     b8c:	mov	r4, r0
     b8e:	mov	r5, r1
     b90:	adds	r0, #16
     b92:	movs	r1, #0
     b94:	bl	4174 <memset>
  _sequencer = sequencer;
  _currentEditPage = 0;
     b98:	movs	r3, #0
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
     b9a:	str	r5, [r4, #0]
  _currentEditPage = 0;
     b9c:	str	r3, [r4, #4]
  _createdPages = 0;
     b9e:	str	r3, [r4, #12]
  _currentPlaybackPage = 0;
     ba0:	str	r3, [r4, #8]
};
     ba2:	mov	r0, r4
     ba4:	pop	{r3, r4, r5, pc}
     ba6:	nop

00000ba8 <Paginator::getNextPlaybackPage(int)>:

int Paginator::getPage () {
  return _currentEditPage;
};

void Paginator::getNextPlaybackPage (int direction) {
     ba8:	push	{r3, r4, r5, lr}
  if (_createdPages == 0) return;
     baa:	ldr	r3, [r0, #12]
     bac:	cbz	r3, bfa <Paginator::getNextPlaybackPage(int)+0x52>

  if (_currentPlaybackPage < _createdPages && direction == 1) {
     bae:	ldr	r2, [r0, #8]
     bb0:	cmp	r3, r2
     bb2:	ble.n	bb8 <Paginator::getNextPlaybackPage(int)+0x10>
     bb4:	cmp	r1, #1
     bb6:	beq.n	c0a <Paginator::getNextPlaybackPage(int)+0x62>
    _currentPlaybackPage++;
  } else if (_currentPlaybackPage > 0 && direction == -1) {
     bb8:	cmp	r2, #0
     bba:	ble.n	bfc <Paginator::getNextPlaybackPage(int)+0x54>
     bbc:	adds	r1, #1
     bbe:	beq.n	c10 <Paginator::getNextPlaybackPage(int)+0x68>
    _currentPlaybackPage--;
  } else if (_currentPlaybackPage == 0 && direction == -1) {
    _currentPlaybackPage = _createdPages;
  } else if (_currentPlaybackPage == _createdPages) {
     bc0:	cmp	r3, r2
     bc2:	beq.n	c06 <Paginator::getNextPlaybackPage(int)+0x5e>
     bc4:	mov	r4, r0
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     bc6:	movs	r1, #21
     bc8:	ldr	r0, [pc, #76]	; (c18 <Paginator::getNextPlaybackPage(int)+0x70>)
     bca:	bl	14d8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     bce:	ldr	r0, [pc, #76]	; (c1c <Paginator::getNextPlaybackPage(int)+0x74>)
     bd0:	bl	304c <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     bd4:	ldr	r1, [r4, #8]
     bd6:	ldr	r0, [pc, #68]	; (c1c <Paginator::getNextPlaybackPage(int)+0x74>)
     bd8:	bl	30ec <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     bdc:	ldr	r0, [pc, #60]	; (c1c <Paginator::getNextPlaybackPage(int)+0x74>)
     bde:	bl	304c <Print::println()>
     be2:	ldr	r0, [r4, #8]
     be4:	ldr	r3, [r4, #0]

  Serial.println("Current playback page");
  Serial.println(_currentPlaybackPage);

  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
     be6:	add.w	r2, r4, r0, lsl #4
     bea:	add.w	r0, r2, #20
     bee:	ldr	r5, [r2, #16]
     bf0:	ldmia	r0, {r0, r1, r2}
     bf2:	str	r5, [r3, #32]
     bf4:	str	r0, [r3, #36]	; 0x24
     bf6:	str	r1, [r3, #40]	; 0x28
     bf8:	str	r2, [r3, #44]	; 0x2c
     bfa:	pop	{r3, r4, r5, pc}

  if (_currentPlaybackPage < _createdPages && direction == 1) {
    _currentPlaybackPage++;
  } else if (_currentPlaybackPage > 0 && direction == -1) {
    _currentPlaybackPage--;
  } else if (_currentPlaybackPage == 0 && direction == -1) {
     bfc:	bne.n	bc0 <Paginator::getNextPlaybackPage(int)+0x18>
     bfe:	adds	r1, #1
     c00:	bne.n	bc4 <Paginator::getNextPlaybackPage(int)+0x1c>
    _currentPlaybackPage = _createdPages;
  } else if (_currentPlaybackPage == _createdPages) {
    _currentPlaybackPage = 0;
     c02:	str	r3, [r0, #8]
     c04:	b.n	bc4 <Paginator::getNextPlaybackPage(int)+0x1c>
     c06:	movs	r3, #0
     c08:	b.n	c02 <Paginator::getNextPlaybackPage(int)+0x5a>

void Paginator::getNextPlaybackPage (int direction) {
  if (_createdPages == 0) return;

  if (_currentPlaybackPage < _createdPages && direction == 1) {
    _currentPlaybackPage++;
     c0a:	adds	r2, #1
     c0c:	str	r2, [r0, #8]
     c0e:	b.n	bc4 <Paginator::getNextPlaybackPage(int)+0x1c>
  } else if (_currentPlaybackPage > 0 && direction == -1) {
    _currentPlaybackPage--;
     c10:	subs	r2, #1
     c12:	str	r2, [r0, #8]
     c14:	b.n	bc4 <Paginator::getNextPlaybackPage(int)+0x1c>
     c16:	nop
     c18:	.word	0x000045b8
     c1c:	.word	0x1fff0c48

00000c20 <Paginator::setLeds(unsigned int)>:
  step1->swing = step2->swing;
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
     c20:	ldr	r2, [r0, #0]
     c22:	adds	r0, r1, #4
  Led * newStepLed = _sequencer->_controller->_leds[i];
     c24:	ldr	r3, [r2, #8]

  if (newStep->_state == 0) {
     c26:	ldr.w	r2, [r2, r0, lsl #2]
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];
     c2a:	add.w	r1, r3, r1, lsl #2

  if (newStep->_state == 0) {
     c2e:	ldrb	r3, [r2, #20]
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];
     c30:	ldr	r0, [r1, #52]	; 0x34

  if (newStep->_state == 0) {
     c32:	cbz	r3, c38 <Paginator::setLeds(unsigned int)+0x18>
    newStepLed->off();
  } else {
    newStepLed->on();
     c34:	b.w	8e4 <Led::on()>
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];

  if (newStep->_state == 0) {
    newStepLed->off();
     c38:	b.w	8d8 <Led::off()>

00000c3c <Paginator::changePage(int)>:
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     c3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     c40:	cmp	r1, #1
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     c42:	sub	sp, #12
     c44:	mov	r7, r1
     c46:	mov	r4, r0
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     c48:	beq.w	dd2 <Paginator::changePage(int)+0x196>
     c4c:	ldr	r3, [r4, #4]
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     c4e:	movs	r5, #0
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];
     c50:	add.w	r2, r5, r3, lsl #2
     c54:	ldr	r1, [r4, #0]
     c56:	adds	r6, r5, #4
     c58:	adds	r2, #4

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
     c5a:	add	r3, r7
     c5c:	add.w	r3, r5, r3, lsl #2
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];
     c60:	ldr.w	r1, [r1, r6, lsl #2]
     c64:	str.w	r1, [r4, r2, lsl #2]

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
     c68:	adds	r3, #4
     c6a:	ldr.w	r3, [r4, r3, lsl #2]
     c6e:	cmp	r3, #0
     c70:	beq.n	d64 <Paginator::changePage(int)+0x128>
     c72:	movs	r1, #19
     c74:	ldr	r0, [pc, #368]	; (de8 <Paginator::changePage(int)+0x1ac>)
     c76:	bl	14d8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     c7a:	ldr	r0, [pc, #368]	; (dec <Paginator::changePage(int)+0x1b0>)
     c7c:	bl	304c <Print::println()>
      _sequencer->_stepsEdit[i] = step;
      _pages[_currentEditPage + direction][i] = step;
    } else {
      Serial.println("loading from memory");

      Step * step = new Step(_sequencer);
     c80:	movs	r0, #32
     c82:	bl	3190 <operator new(unsigned int)>
     c86:	ldr	r1, [r4, #0]
     c88:	mov	r8, r0
     c8a:	bl	e94 <Step::Step(Sequencer*)>

      if (_sequencer->_controller->getCopyMode()) {
     c8e:	ldr	r3, [r4, #0]
     c90:	ldr	r0, [r3, #8]
     c92:	bl	13f4 <Controller::getCopyMode()>
     c96:	cmp	r0, #0
     c98:	beq.n	d14 <Paginator::changePage(int)+0xd8>
     c9a:	movs	r1, #29
     c9c:	ldr	r0, [pc, #336]	; (df0 <Paginator::changePage(int)+0x1b4>)
     c9e:	bl	14d8 <usb_serial_write>
     ca2:	ldr	r0, [pc, #328]	; (dec <Paginator::changePage(int)+0x1b0>)
     ca4:	bl	304c <Print::println()>
        Serial.println("copying and setting in memory");

        copyStep(step, _sequencer->_stepsEdit[i]);
     ca8:	ldmia.w	r4, {r2, r3}
        _pages[_currentEditPage + direction][i] = step;
     cac:	add.w	lr, r7, r3
      Step * step = new Step(_sequencer);

      if (_sequencer->_controller->getCopyMode()) {
        Serial.println("copying and setting in memory");

        copyStep(step, _sequencer->_stepsEdit[i]);
     cb0:	ldr.w	r3, [r2, r6, lsl #2]

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     cb4:	adds	r0, r3, #4
     cb6:	ldmia	r0, {r0, r1, r2}

      if (_sequencer->_controller->getCopyMode()) {
        Serial.println("copying and setting in memory");

        copyStep(step, _sequencer->_stepsEdit[i]);
        _pages[_currentEditPage + direction][i] = step;
     cb8:	add.w	lr, r5, lr, lsl #2
     cbc:	add.w	lr, lr, #4

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     cc0:	str	r2, [sp, #4]
  step1->length = step2->length;
  step1->_state = step2->_state;
     cc2:	ldrb.w	r9, [r3, #20]
// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     cc6:	ldr	r2, [r3, #16]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     cc8:	str.w	r0, [r8, #4]
  step1->pitchGrade = step2->pitchGrade;
     ccc:	str.w	r1, [r8, #8]
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
  step1->chance = step2->chance;
  step1->swing = step2->swing;
     cd0:	ldr	r0, [r3, #28]
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     cd2:	ldr	r1, [r3, #24]

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     cd4:	ldr	r3, [sp, #4]

      if (_sequencer->_controller->getCopyMode()) {
        Serial.println("copying and setting in memory");

        copyStep(step, _sequencer->_stepsEdit[i]);
        _pages[_currentEditPage + direction][i] = step;
     cd6:	str.w	r8, [r4, lr, lsl #2]
// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     cda:	str.w	r2, [r8, #16]

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     cde:	str.w	r3, [r8, #12]
  step1->length = step2->length;
  step1->_state = step2->_state;
     ce2:	strb.w	r9, [r8, #20]
  step1->chance = step2->chance;
     ce6:	str.w	r1, [r8, #24]
  step1->swing = step2->swing;
     cea:	str.w	r0, [r8, #28]
     cee:	movs	r1, #25
     cf0:	ldr	r0, [pc, #256]	; (df4 <Paginator::changePage(int)+0x1b8>)
     cf2:	bl	14d8 <usb_serial_write>
     cf6:	ldr	r0, [pc, #244]	; (dec <Paginator::changePage(int)+0x1b0>)
     cf8:	bl	304c <Print::println()>

        copyStep(step, _pages[_currentEditPage + direction][i]);
      }

      Serial.println("Setting steps for editing");
      _sequencer->_stepsEdit[i] = step;
     cfc:	ldr	r3, [r4, #0]
     cfe:	str.w	r8, [r3, r6, lsl #2]
    }
    
    setLeds(i);
     d02:	mov	r1, r5
     d04:	mov	r0, r4
    _createdPages++;
    // //Serial.println("Incrementing created pages to:");
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
     d06:	adds	r5, #1

      Serial.println("Setting steps for editing");
      _sequencer->_stepsEdit[i] = step;
    }
    
    setLeds(i);
     d08:	bl	c20 <Paginator::setLeds(unsigned int)>
    _createdPages++;
    // //Serial.println("Incrementing created pages to:");
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
     d0c:	cmp	r5, #4
     d0e:	beq.n	d5e <Paginator::changePage(int)+0x122>
     d10:	ldr	r3, [r4, #4]
     d12:	b.n	c50 <Paginator::changePage(int)+0x14>
     d14:	movs	r1, #24
     d16:	ldr	r0, [pc, #224]	; (df8 <Paginator::changePage(int)+0x1bc>)
     d18:	bl	14d8 <usb_serial_write>
     d1c:	ldr	r0, [pc, #204]	; (dec <Paginator::changePage(int)+0x1b0>)
     d1e:	bl	304c <Print::println()>
        copyStep(step, _sequencer->_stepsEdit[i]);
        _pages[_currentEditPage + direction][i] = step;
      } else {
        Serial.println("copying only from memory");

        copyStep(step, _pages[_currentEditPage + direction][i]);
     d22:	ldr	r3, [r4, #4]
     d24:	add	r3, r7
     d26:	add.w	r3, r5, r3, lsl #2
     d2a:	adds	r3, #4
     d2c:	ldr.w	r3, [r4, r3, lsl #2]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     d30:	ldr	r1, [r3, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     d32:	ldr	r0, [r3, #12]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     d34:	ldr	r2, [r3, #8]
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
     d36:	ldrb.w	ip, [r3, #20]

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     d3a:	str.w	r0, [r8, #12]
  step1->length = step2->length;
     d3e:	ldr	r0, [r3, #16]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     d40:	str.w	r1, [r8, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     d44:	ldr	r1, [r3, #24]
  step1->swing = step2->swing;
     d46:	ldr	r3, [r3, #28]
     d48:	str.w	r3, [r8, #28]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     d4c:	str.w	r2, [r8, #8]
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     d50:	str.w	r0, [r8, #16]
  step1->_state = step2->_state;
     d54:	strb.w	ip, [r8, #20]
  step1->chance = step2->chance;
     d58:	str.w	r1, [r8, #24]
     d5c:	b.n	cee <Paginator::changePage(int)+0xb2>
      _sequencer->_stepsEdit[i] = step;
    }
    
    setLeds(i);
  }
};
     d5e:	add	sp, #12
     d60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     d64:	movs	r1, #12
     d66:	ldr	r0, [pc, #148]	; (dfc <Paginator::changePage(int)+0x1c0>)
     d68:	bl	14d8 <usb_serial_write>
     d6c:	ldr	r0, [pc, #124]	; (dec <Paginator::changePage(int)+0x1b0>)
     d6e:	bl	304c <Print::println()>

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
      Serial.println("no steps yet");
      Step * step = new Step(_sequencer);
     d72:	movs	r0, #32
     d74:	bl	3190 <operator new(unsigned int)>
     d78:	ldr	r1, [r4, #0]
     d7a:	mov	r8, r0
     d7c:	bl	e94 <Step::Step(Sequencer*)>

      if (_sequencer->_controller->getCopyMode()) {
     d80:	ldr	r3, [r4, #0]
     d82:	ldr	r0, [r3, #8]
     d84:	bl	13f4 <Controller::getCopyMode()>
     d88:	cbnz	r0, da0 <Paginator::changePage(int)+0x164>
     d8a:	ldr	r0, [r4, #0]
        copyStep(step, _sequencer->_stepsEdit[i]);
      }

      _sequencer->_stepsEdit[i] = step;
      _pages[_currentEditPage + direction][i] = step;
     d8c:	ldr	r3, [r4, #4]

      if (_sequencer->_controller->getCopyMode()) {
        copyStep(step, _sequencer->_stepsEdit[i]);
      }

      _sequencer->_stepsEdit[i] = step;
     d8e:	str.w	r8, [r0, r6, lsl #2]
      _pages[_currentEditPage + direction][i] = step;
     d92:	add	r3, r7
     d94:	add.w	r3, r5, r3, lsl #2
     d98:	adds	r3, #4
     d9a:	str.w	r8, [r4, r3, lsl #2]
     d9e:	b.n	d02 <Paginator::changePage(int)+0xc6>
    if (_pages[_currentEditPage + direction][i] == 0) {
      Serial.println("no steps yet");
      Step * step = new Step(_sequencer);

      if (_sequencer->_controller->getCopyMode()) {
        copyStep(step, _sequencer->_stepsEdit[i]);
     da0:	ldr	r0, [r4, #0]
     da2:	ldr.w	r3, [r0, r6, lsl #2]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     da6:	ldr	r1, [r3, #4]
  step1->pitchGrade = step2->pitchGrade;
     da8:	ldr	r2, [r3, #8]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     daa:	str.w	r1, [r8, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     dae:	ldr	r1, [r3, #12]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     db0:	str.w	r2, [r8, #8]
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     db4:	ldr	r2, [r3, #16]

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     db6:	str.w	r1, [r8, #12]
  step1->length = step2->length;
  step1->_state = step2->_state;
     dba:	ldrb	r1, [r3, #20]
// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     dbc:	str.w	r2, [r8, #16]
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     dc0:	ldr	r2, [r3, #24]
  step1->swing = step2->swing;
     dc2:	ldr	r3, [r3, #28]
     dc4:	str.w	r3, [r8, #28]
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
     dc8:	strb.w	r1, [r8, #20]
  step1->chance = step2->chance;
     dcc:	str.w	r2, [r8, #24]
     dd0:	b.n	d8c <Paginator::changePage(int)+0x150>

  debugPages();
};

void Paginator::changePage (int direction) {
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     dd2:	ldr	r2, [r0, #12]
     dd4:	cmp	r2, #2
     dd6:	bgt.w	c4c <Paginator::changePage(int)+0x10>
     dda:	ldr	r3, [r0, #4]
     ddc:	cmp	r2, r3
    // this is a nasty flag i should get rid of
    _createdPages++;
     dde:	itt	eq
     de0:	addeq	r2, r3, #1
     de2:	streq	r2, [r0, #12]
     de4:	b.n	c4e <Paginator::changePage(int)+0x12>
     de6:	nop
     de8:	.word	0x000045e0
     dec:	.word	0x1fff0c48
     df0:	.word	0x000045f4
     df4:	.word	0x00004630
     df8:	.word	0x00004614
     dfc:	.word	0x000045d0

00000e00 <Paginator::debugPages()>:
  } else {
    newStepLed->on();
  }
};

void Paginator::debugPages () {
     e00:	push	{r4, r5, r6, lr}
     e02:	add.w	r4, r0, #16
     e06:	add.w	r6, r0, #80	; 0x50
     e0a:	add.w	r5, r4, #16
  for (size_t i = 0; i < 4; i++) {
    for (size_t y = 0; y < 4; y++) {
      Step * step = _pages[i][y];
     e0e:	ldr.w	r3, [r4], #4
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e12:	ldr	r0, [pc, #24]	; (e2c <Paginator::debugPages()+0x2c>)
     e14:	ldrb	r1, [r3, #20]
     e16:	bl	30ec <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e1a:	ldr	r0, [pc, #16]	; (e2c <Paginator::debugPages()+0x2c>)
     e1c:	bl	304c <Print::println()>
  }
};

void Paginator::debugPages () {
  for (size_t i = 0; i < 4; i++) {
    for (size_t y = 0; y < 4; y++) {
     e20:	cmp	r4, r5
     e22:	bne.n	e0e <Paginator::debugPages()+0xe>
    newStepLed->on();
  }
};

void Paginator::debugPages () {
  for (size_t i = 0; i < 4; i++) {
     e24:	cmp	r6, r4
     e26:	bne.n	e0a <Paginator::debugPages()+0xa>
    for (size_t y = 0; y < 4; y++) {
      Step * step = _pages[i][y];
      Serial.println(step->_state);
    }
  }
};
     e28:	pop	{r4, r5, r6, pc}
     e2a:	nop
     e2c:	.word	0x1fff0c48

00000e30 <Paginator::nextPage()>:
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
  }
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
     e30:	ldr	r3, [r0, #4]
     e32:	cmp	r3, #2
  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
  }
};

void Paginator::nextPage () {
     e34:	push	{r4, lr}
     e36:	mov	r4, r0
  if (_currentEditPage < 3) {
     e38:	bgt.n	e56 <Paginator::nextPage()+0x26>
    changePage(1);
     e3a:	movs	r1, #1
     e3c:	bl	c3c <Paginator::changePage(int)>
    _currentEditPage++;
     e40:	ldmia.w	r4, {r2, r3}
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     e44:	ldr	r2, [r2, #8]
     e46:	add.w	r2, r2, r3, lsl #2
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
     e4a:	adds	r3, #1
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     e4c:	ldr	r0, [r2, #56]	; 0x38
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
     e4e:	str	r3, [r4, #4]
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     e50:	movs	r1, #3
     e52:	bl	878 <Led::blink(int)>
  }

  debugPages();
     e56:	mov	r0, r4
};
     e58:	ldmia.w	sp!, {r4, lr}
    changePage(1);
    _currentEditPage++;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  }

  debugPages();
     e5c:	b.w	e00 <Paginator::debugPages()>

00000e60 <Paginator::previousPage()>:
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
     e60:	ldr	r3, [r0, #4]
     e62:	cmp	r3, #0
  }

  debugPages();
};

void Paginator::previousPage () {
     e64:	push	{r4, lr}
     e66:	mov	r4, r0
  if (_currentEditPage > 0) {
     e68:	ble.n	e88 <Paginator::previousPage()+0x28>
    changePage(-1);
     e6a:	mov.w	r1, #4294967295
     e6e:	bl	c3c <Paginator::changePage(int)>
    _currentEditPage--;
     e72:	ldmia.w	r4, {r2, r3}
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     e76:	ldr	r2, [r2, #8]
     e78:	add.w	r2, r2, r3, lsl #2
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
     e7c:	subs	r3, #1
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     e7e:	ldr	r0, [r2, #48]	; 0x30
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
     e80:	str	r3, [r4, #4]
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     e82:	movs	r1, #3
     e84:	bl	878 <Led::blink(int)>
  };

  debugPages();
     e88:	mov	r0, r4
};
     e8a:	ldmia.w	sp!, {r4, lr}
    changePage(-1);
    _currentEditPage--;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  };

  debugPages();
     e8e:	b.w	e00 <Paginator::debugPages()>
     e92:	nop

00000e94 <Step::Step(Sequencer*)>:
#include <Arduino.h>
#include "step.h"
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
     e94:	push	{r4, r5}
  _state = false;
     e96:	movs	r2, #0
  _sequencer = sequencer;
  pitchScale = 0;
  pitchGrade = 0;
  velocity = 100;
     e98:	movs	r4, #100	; 0x64
  length = 4;
     e9a:	movs	r5, #4
     e9c:	str	r5, [r0, #16]
Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
  pitchScale = 0;
  pitchGrade = 0;
  velocity = 100;
     e9e:	str	r4, [r0, #12]
  length = 4;
  chance = 100;
     ea0:	str	r4, [r0, #24]
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
     ea2:	str	r1, [r0, #0]
#include "step.h"
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
     ea4:	strb	r2, [r0, #20]
  _sequencer = sequencer;
  pitchScale = 0;
     ea6:	str	r2, [r0, #4]
  pitchGrade = 0;
     ea8:	str	r2, [r0, #8]
  velocity = 100;
  length = 4;
  chance = 100;
  swing = 0;
     eaa:	str	r2, [r0, #28]
};
     eac:	pop	{r4, r5}
     eae:	bx	lr

00000eb0 <Step::toggle()>:
void Step::setStep (Step* step) {
  _state = step->_state;
};

void Step::toggle () {
  _state = !_state;
     eb0:	ldrb	r3, [r0, #20]
     eb2:	eor.w	r3, r3, #1
     eb6:	strb	r3, [r0, #20]
     eb8:	bx	lr
     eba:	nop

00000ebc <Step::controlLength(int)>:
};

void Step::controlLength (int value) {
  int newValue = map(value, 0, 1000, 16, 0); // <- hack i guess
  length = newValue;
     ebc:	ldr	r3, [pc, #20]	; (ed4 <Step::controlLength(int)+0x18>)
     ebe:	sub.w	r1, r1, r1, lsl #4
     ec2:	smull	r2, r3, r3, r1
     ec6:	asrs	r1, r1, #31
     ec8:	rsb	r1, r1, r3, asr #8
     ecc:	adds	r1, #16
     ece:	str	r1, [r0, #16]
     ed0:	bx	lr
     ed2:	nop
     ed4:	.word	0x4178749f

00000ed8 <Step::controlPitch(int)>:
};

void Step::controlPitch (int value) {
  int newValue = value;

  if (value < 330) {
     ed8:	cmp.w	r1, #330	; 0x14a
     edc:	blt.n	ef6 <Step::controlPitch(int)+0x1e>
    newValue = 2;
  } else if (value < 660) {
     ede:	cmp.w	r1, #660	; 0x294
     ee2:	blt.n	ef0 <Step::controlPitch(int)+0x18>
    newValue = 1;
  } else if (value <= 1023) {
     ee4:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     ee8:	it	lt
     eea:	movlt	r1, #0
  }

  pitchGrade = newValue;
     eec:	str	r1, [r0, #8]
     eee:	bx	lr
  int newValue = value;

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
     ef0:	movs	r1, #1
  } else if (value <= 1023) {
    newValue = 0;
  }

  pitchGrade = newValue;
     ef2:	str	r1, [r0, #8]
     ef4:	bx	lr

void Step::controlPitch (int value) {
  int newValue = value;

  if (value < 330) {
    newValue = 2;
     ef6:	movs	r1, #2
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  pitchGrade = newValue;
     ef8:	str	r1, [r0, #8]
     efa:	bx	lr

00000efc <Step::controlVelocity(int)>:
};

void Step::controlVelocity (int value) {
  int newValue = map(value, 0, 1023, 127, 62);
  velocity = newValue;
     efc:	rsb	r1, r1, r1, lsl #26
     f00:	lsls	r1, r1, #6
     f02:	it	mi
     f04:	addwmi	r1, r1, #1023	; 0x3ff
     f08:	asrs	r1, r1, #10
     f0a:	adds	r1, #127	; 0x7f
     f0c:	str	r1, [r0, #12]
     f0e:	bx	lr

00000f10 <Step::controlChance(int)>:
};

void Step::controlChance (int value) {
     f10:	push	{r3, lr}
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     f12:	mvn.w	r3, #98	; 0x62
     f16:	mul.w	r1, r3, r1
     f1a:	cmp	r1, #0
     f1c:	it	lt
     f1e:	addwlt	r1, r1, #1023	; 0x3ff
     f22:	asrs	r1, r1, #10
     f24:	adds	r1, #100	; 0x64
  int newValue = map(value, 0, 1023, 100, 0);
  chance = newValue;
     f26:	str	r1, [r0, #24]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     f28:	ldr	r0, [pc, #12]	; (f38 <Step::controlChance(int)+0x28>)
     f2a:	bl	30ec <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     f2e:	ldr	r0, [pc, #8]	; (f38 <Step::controlChance(int)+0x28>)
  Serial.println(chance);
};
     f30:	ldmia.w	sp!, {r3, lr}
     f34:	b.w	304c <Print::println()>
     f38:	.word	0x1fff0c48

00000f3c <Step::controlSwing(int)>:

void Step::controlSwing (int value) {
  int newValue = value;

  if (value < 100) {
     f3c:	cmp	r1, #99	; 0x63
     f3e:	ble.n	f5e <Step::controlSwing(int)+0x22>
    newValue = -3;
  } else if (value < 200) {
     f40:	cmp	r1, #199	; 0xc7
     f42:	ble.n	f56 <Step::controlSwing(int)+0x1a>
    newValue = -2;
  } else if (value <= 600) {
     f44:	cmp.w	r1, #600	; 0x258
     f48:	ble.n	f66 <Step::controlSwing(int)+0x2a>
    newValue = -1;
  } else if (value <= 1023) {
     f4a:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     f4e:	it	lt
     f50:	movlt	r1, #0
  }

  swing = newValue;
     f52:	str	r1, [r0, #28]
     f54:	bx	lr
  int newValue = value;

  if (value < 100) {
    newValue = -3;
  } else if (value < 200) {
    newValue = -2;
     f56:	mvn.w	r1, #1
    newValue = -1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  swing = newValue;
     f5a:	str	r1, [r0, #28]
     f5c:	bx	lr

void Step::controlSwing (int value) {
  int newValue = value;

  if (value < 100) {
    newValue = -3;
     f5e:	mvn.w	r1, #2
    newValue = -1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  swing = newValue;
     f62:	str	r1, [r0, #28]
     f64:	bx	lr
  if (value < 100) {
    newValue = -3;
  } else if (value < 200) {
    newValue = -2;
  } else if (value <= 600) {
    newValue = -1;
     f66:	mov.w	r1, #4294967295
  } else if (value <= 1023) {
    newValue = 0;
  }

  swing = newValue;
     f6a:	str	r1, [r0, #28]
     f6c:	bx	lr
     f6e:	nop

00000f70 <Knob::Knob(unsigned char, int, Controller*)>:
#include "step.h"
#include "sequencer.h"
#include "transport.h"
#include "piano.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
     f70:	push	{r4, r5}
  _pin = pin;
  _id = id;
  _controller = controller;
  _value = 0;
     f72:	movs	r5, #0
     f74:	str	r5, [r0, #4]
#include "sequencer.h"
#include "transport.h"
#include "piano.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
  _pin = pin;
     f76:	str	r1, [r0, #0]
  _id = id;
     f78:	str	r2, [r0, #12]
  _controller = controller;
     f7a:	str	r3, [r0, #16]
  _value = 0;
};
     f7c:	pop	{r4, r5}
     f7e:	bx	lr

00000f80 <Knob::onChange()>:

void Knob::onChange () {
  if (_id == 4) {
     f80:	ldr	r3, [r0, #12]
     f82:	cmp	r3, #4
     f84:	beq.n	ff8 <Knob::onChange()+0x78>
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
     f86:	cmp	r3, #5
     f88:	beq.n	fd6 <Knob::onChange()+0x56>
  _id = id;
  _controller = controller;
  _value = 0;
};

void Knob::onChange () {
     f8a:	push	{r4, lr}
     f8c:	mov	r4, r0
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
     f8e:	ldr	r0, [r0, #16]
     f90:	bl	1404 <Controller::getMode()>
     f94:	cmp	r0, #1
     f96:	beq.n	fe2 <Knob::onChange()+0x62>
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
     f98:	ldr	r0, [r4, #16]
     f9a:	bl	1404 <Controller::getMode()>
     f9e:	cbz	r0, fc0 <Knob::onChange()+0x40>
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
     fa0:	ldr	r0, [r4, #16]
     fa2:	bl	1404 <Controller::getMode()>
     fa6:	cmp	r0, #2
     fa8:	beq.n	1004 <Knob::onChange()+0x84>
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
  } else if (_controller->getMode() == CHANCE) {
     faa:	ldr	r0, [r4, #16]
     fac:	bl	1404 <Controller::getMode()>
     fb0:	cmp	r0, #3
     fb2:	beq.n	101a <Knob::onChange()+0x9a>
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
  } else if (_controller->getMode() == SWING) {
     fb4:	ldr	r0, [r4, #16]
     fb6:	bl	1404 <Controller::getMode()>
     fba:	cmp	r0, #4
     fbc:	beq.n	1030 <Knob::onChange()+0xb0>
     fbe:	pop	{r4, pc}
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
     fc0:	ldr	r2, [r4, #16]
     fc2:	ldr	r3, [r4, #12]
     fc4:	ldr	r2, [r2, #76]	; 0x4c
     fc6:	ldr	r1, [r4, #4]
     fc8:	adds	r3, #4
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
  }
}
     fca:	ldmia.w	sp!, {r4, lr}
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
     fce:	ldr.w	r0, [r2, r3, lsl #2]
     fd2:	b.w	ed8 <Step::controlPitch(int)>

void Knob::onChange () {
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
     fd6:	ldr	r3, [r0, #16]
     fd8:	ldr	r1, [r0, #4]
     fda:	ldr	r3, [r3, #76]	; 0x4c
     fdc:	ldr	r0, [r3, #4]
     fde:	b.w	a68 <Transport::controlTempo(int)>
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
     fe2:	ldr	r2, [r4, #16]
     fe4:	ldr	r3, [r4, #12]
     fe6:	ldr	r2, [r2, #76]	; 0x4c
     fe8:	ldr	r1, [r4, #4]
     fea:	adds	r3, #4
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
  }
}
     fec:	ldmia.w	sp!, {r4, lr}
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
     ff0:	ldr.w	r0, [r2, r3, lsl #2]
     ff4:	b.w	efc <Step::controlVelocity(int)>
  _value = 0;
};

void Knob::onChange () {
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
     ff8:	ldr	r3, [r0, #16]
     ffa:	ldr	r1, [r0, #4]
     ffc:	ldr	r3, [r3, #76]	; 0x4c
     ffe:	ldr	r0, [r3, #52]	; 0x34
    1000:	b.w	80c <Piano::transpose(int)>
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    1004:	ldr	r2, [r4, #16]
    1006:	ldr	r3, [r4, #12]
    1008:	ldr	r2, [r2, #76]	; 0x4c
    100a:	ldr	r1, [r4, #4]
    100c:	adds	r3, #4
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
  }
}
    100e:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    1012:	ldr.w	r0, [r2, r3, lsl #2]
    1016:	b.w	ebc <Step::controlLength(int)>
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    101a:	ldr	r2, [r4, #16]
    101c:	ldr	r3, [r4, #12]
    101e:	ldr	r2, [r2, #76]	; 0x4c
    1020:	ldr	r1, [r4, #4]
    1022:	adds	r3, #4
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
  }
}
    1024:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    1028:	ldr.w	r0, [r2, r3, lsl #2]
    102c:	b.w	f10 <Step::controlChance(int)>
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    1030:	ldr	r2, [r4, #16]
    1032:	ldr	r3, [r4, #12]
    1034:	ldr	r2, [r2, #76]	; 0x4c
    1036:	ldr	r1, [r4, #4]
    1038:	adds	r3, #4
  }
}
    103a:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    103e:	ldr.w	r0, [r2, r3, lsl #2]
    1042:	b.w	f3c <Step::controlSwing(int)>
    1046:	nop

00001048 <Knob::tick()>:
  }
}

// todo latch
void Knob::tick () {
    1048:	push	{r4, lr}
    104a:	mov	r4, r0
  _value = analogRead(_pin);
    104c:	ldrb	r0, [r0, #0]
    104e:	bl	1904 <analogRead>

  int diff = abs(_value - _lastValue);
    1052:	ldr	r3, [r4, #8]
  }
}

// todo latch
void Knob::tick () {
  _value = analogRead(_pin);
    1054:	str	r0, [r4, #4]

  int diff = abs(_value - _lastValue);

  // "filter"
  const boolean isChanging = _value != _lastValue && diff > 10;
    1056:	cmp	r0, r3
    1058:	beq.n	1070 <Knob::tick()+0x28>
    105a:	subs	r0, r0, r3
    105c:	cmp	r0, #0
    105e:	it	lt
    1060:	neglt	r0, r0
    1062:	cmp	r0, #10
    1064:	ble.n	1070 <Knob::tick()+0x28>

  if (isChanging) {
    onChange();
    1066:	mov	r0, r4
    1068:	bl	f80 <Knob::onChange()>

    _lastValue = _value;
    106c:	ldr	r3, [r4, #4]
    106e:	str	r3, [r4, #8]
    1070:	pop	{r4, pc}
    1072:	nop

00001074 <Controller::Controller(Sequencer*)>:
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"
#include "paginator.h"

Controller::Controller (Sequencer* sequencer) {
    1074:	push	{r4, r5, r6, r7, lr}
  _sequencer = sequencer;
  _modeBeforeChance = PITCH;
    1076:	movs	r5, #0
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"
#include "paginator.h"

Controller::Controller (Sequencer* sequencer) {
    1078:	sub	sp, #20
    107a:	mov	r4, r0
  _sequencer = sequencer;
    107c:	str	r1, [r0, #76]	; 0x4c
  _modeBeforeChance = PITCH;
    107e:	strb.w	r5, [r0, #50]	; 0x32
  _currentMode = PITCH;
    1082:	strb.w	r5, [r0, #49]	; 0x31
  _shiftMode = false;
    1086:	strb.w	r5, [r0, #48]	; 0x30
  _copyMode = false;
    108a:	strb.w	r5, [r0, #80]	; 0x50
  
  _leds[0] = new Led(3, LOW);
    108e:	movs	r0, #24
    1090:	bl	3190 <operator new(unsigned int)>
    1094:	mov	r2, r5
    1096:	mov	r6, r0
    1098:	movs	r1, #3
    109a:	bl	850 <Led::Led(int, int)>
    109e:	str	r6, [r4, #52]	; 0x34
  _leds[1] = new Led(5, LOW);
    10a0:	movs	r0, #24
    10a2:	bl	3190 <operator new(unsigned int)>
    10a6:	mov	r2, r5
    10a8:	mov	r6, r0
    10aa:	movs	r1, #5
    10ac:	bl	850 <Led::Led(int, int)>
    10b0:	str	r6, [r4, #56]	; 0x38
  _leds[2] = new Led(7, LOW);
    10b2:	movs	r0, #24
    10b4:	bl	3190 <operator new(unsigned int)>
    10b8:	mov	r2, r5
    10ba:	mov	r6, r0
    10bc:	movs	r1, #7
    10be:	bl	850 <Led::Led(int, int)>
    10c2:	str	r6, [r4, #60]	; 0x3c
  _leds[3] = new Led(9, LOW);
    10c4:	movs	r0, #24
    10c6:	bl	3190 <operator new(unsigned int)>
    10ca:	mov	r2, r5
    10cc:	mov	r6, r0
    10ce:	movs	r1, #9
    10d0:	bl	850 <Led::Led(int, int)>
    10d4:	str	r6, [r4, #64]	; 0x40
  _leds[4] = new Led(11, LOW);
    10d6:	movs	r0, #24
    10d8:	bl	3190 <operator new(unsigned int)>
    10dc:	mov	r2, r5
    10de:	mov	r6, r0
    10e0:	movs	r1, #11
    10e2:	bl	850 <Led::Led(int, int)>
    10e6:	str	r6, [r4, #68]	; 0x44
  _leds[5] = new Led(24, LOW);
    10e8:	movs	r0, #24
    10ea:	bl	3190 <operator new(unsigned int)>
    10ee:	mov	r2, r5
    10f0:	movs	r1, #24
    10f2:	mov	r6, r0
    10f4:	bl	850 <Led::Led(int, int)>
    10f8:	str	r6, [r4, #72]	; 0x48

  _leds[4]->toggle();
    10fa:	ldr	r0, [r4, #68]	; 0x44
    10fc:	bl	8ac <Led::toggle()>
  _leds[5]->toggle();
    1100:	ldr	r0, [r4, #72]	; 0x48
    1102:	bl	8ac <Led::toggle()>

  _buttons[0] = new Button(1, step1pin, _leds[0], false, false, this);
    1106:	movs	r0, #56	; 0x38
    1108:	bl	3190 <operator new(unsigned int)>
    110c:	ldr	r3, [r4, #52]	; 0x34
    110e:	str	r5, [sp, #4]
    1110:	mov	r6, r0
    1112:	str	r5, [sp, #0]
    1114:	movs	r2, #2
    1116:	movs	r1, #1
    1118:	str	r4, [sp, #8]
    111a:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    111e:	str	r6, [r4, #0]
  _buttons[1] = new Button(2, step2pin, _leds[1], false, false, this);
    1120:	movs	r0, #56	; 0x38
    1122:	bl	3190 <operator new(unsigned int)>
    1126:	ldr	r3, [r4, #56]	; 0x38
    1128:	str	r5, [sp, #4]
    112a:	mov	r6, r0
    112c:	str	r5, [sp, #0]
    112e:	movs	r2, #4
    1130:	movs	r1, #2
    1132:	str	r4, [sp, #8]
    1134:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1138:	str	r6, [r4, #4]
  _buttons[2] = new Button(3, step3pin, _leds[2], false, false, this);
    113a:	movs	r0, #56	; 0x38
    113c:	bl	3190 <operator new(unsigned int)>
    1140:	ldr	r3, [r4, #60]	; 0x3c
    1142:	str	r5, [sp, #4]
    1144:	mov	r6, r0
    1146:	str	r5, [sp, #0]
    1148:	movs	r2, #6
    114a:	movs	r1, #3
    114c:	str	r4, [sp, #8]
    114e:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1152:	str	r6, [r4, #8]
  _buttons[3] = new Button(4, step4pin, _leds[3], false, false, this);
    1154:	movs	r0, #56	; 0x38
    1156:	bl	3190 <operator new(unsigned int)>
    115a:	ldr	r3, [r4, #64]	; 0x40
    115c:	str	r5, [sp, #4]
    115e:	mov	r6, r0
    1160:	str	r5, [sp, #0]
    1162:	movs	r2, #8
    1164:	movs	r1, #4
    1166:	str	r4, [sp, #8]
    1168:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    116c:	str	r6, [r4, #12]
  _buttons[4] = new Button(5, shiftPin, _leds[4], true, false, this);
    116e:	movs	r0, #56	; 0x38
    1170:	bl	3190 <operator new(unsigned int)>
    1174:	movs	r6, #1
    1176:	ldr	r3, [r4, #68]	; 0x44
    1178:	str	r5, [sp, #4]
    117a:	mov	r7, r0
    117c:	movs	r2, #10
    117e:	movs	r1, #5
    1180:	str	r4, [sp, #8]
    1182:	str	r6, [sp, #0]
    1184:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1188:	str	r7, [r4, #16]
  _buttons[5] = new Button(6, playPin, _leds[5], false, true, this);
    118a:	movs	r0, #56	; 0x38
    118c:	bl	3190 <operator new(unsigned int)>
    1190:	ldr	r3, [r4, #72]	; 0x48
    1192:	str	r4, [sp, #8]
    1194:	mov	r7, r0
    1196:	stmia.w	sp, {r5, r6}
    119a:	movs	r2, #12
    119c:	movs	r1, #6
    119e:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    11a2:	str	r7, [r4, #20]

  _knobs[0] = new Knob(A0, 0, this);
    11a4:	movs	r0, #20
    11a6:	bl	3190 <operator new(unsigned int)>
    11aa:	mov	r3, r4
    11ac:	mov	r2, r5
    11ae:	mov	r7, r0
    11b0:	movs	r1, #14
    11b2:	bl	f70 <Knob::Knob(unsigned char, int, Controller*)>
    11b6:	str	r7, [r4, #24]
  _knobs[1] = new Knob(A1, 1, this);
    11b8:	movs	r0, #20
    11ba:	bl	3190 <operator new(unsigned int)>
    11be:	mov	r3, r4
    11c0:	mov	r2, r6
    11c2:	mov	r5, r0
    11c4:	movs	r1, #15
    11c6:	bl	f70 <Knob::Knob(unsigned char, int, Controller*)>
    11ca:	str	r5, [r4, #28]
  _knobs[2] = new Knob(A2, 2, this);
    11cc:	movs	r0, #20
    11ce:	bl	3190 <operator new(unsigned int)>
    11d2:	mov	r3, r4
    11d4:	mov	r5, r0
    11d6:	movs	r2, #2
    11d8:	movs	r1, #16
    11da:	bl	f70 <Knob::Knob(unsigned char, int, Controller*)>
    11de:	str	r5, [r4, #32]
  _knobs[3] = new Knob(A3, 3, this);
    11e0:	movs	r0, #20
    11e2:	bl	3190 <operator new(unsigned int)>
    11e6:	mov	r3, r4
    11e8:	mov	r5, r0
    11ea:	movs	r2, #3
    11ec:	movs	r1, #17
    11ee:	bl	f70 <Knob::Knob(unsigned char, int, Controller*)>
    11f2:	str	r5, [r4, #36]	; 0x24
  _knobs[4] = new Knob(A4, 4, this);
    11f4:	movs	r0, #20
    11f6:	bl	3190 <operator new(unsigned int)>
    11fa:	mov	r3, r4
    11fc:	mov	r5, r0
    11fe:	movs	r2, #4
    1200:	movs	r1, #18
    1202:	bl	f70 <Knob::Knob(unsigned char, int, Controller*)>
    1206:	str	r5, [r4, #40]	; 0x28
  _knobs[5] = new Knob(A5, 5, this);
    1208:	movs	r0, #20
    120a:	bl	3190 <operator new(unsigned int)>
    120e:	mov	r3, r4
    1210:	movs	r2, #5
    1212:	movs	r1, #19
    1214:	mov	r5, r0
    1216:	bl	f70 <Knob::Knob(unsigned char, int, Controller*)>
};
    121a:	mov	r0, r4
  _knobs[0] = new Knob(A0, 0, this);
  _knobs[1] = new Knob(A1, 1, this);
  _knobs[2] = new Knob(A2, 2, this);
  _knobs[3] = new Knob(A3, 3, this);
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
    121c:	str	r5, [r4, #44]	; 0x2c
};
    121e:	add	sp, #20
    1220:	pop	{r4, r5, r6, r7, pc}
    1222:	nop

00001224 <Controller::tick()>:

void Controller::tick() {
    1224:	push	{r3, r4, r5, r6, r7, lr}
    1226:	add.w	r7, r0, #20
    122a:	mov	r6, r7
    122c:	subs	r4, r0, #4
    122e:	add.w	r5, r0, #48	; 0x30
  for (size_t i = 0; i < 6; i++) {
    _buttons[i]->tick();
    1232:	ldr.w	r0, [r4, #4]!
    1236:	bl	6e0 <Button::tick()>
    _leds[i]->tick();
    123a:	ldr.w	r0, [r5, #4]!
    123e:	bl	8f4 <Led::tick()>
    _knobs[i]->tick();
    1242:	ldr.w	r0, [r6, #4]!
    1246:	bl	1048 <Knob::tick()>
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
};

void Controller::tick() {
  for (size_t i = 0; i < 6; i++) {
    124a:	cmp	r4, r7
    124c:	bne.n	1232 <Controller::tick()+0xe>
    _buttons[i]->tick();
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}
    124e:	pop	{r3, r4, r5, r6, r7, pc}

00001250 <Controller::toggleMode()>:

void Controller::toggleMode () {
    1250:	push	{r3, r4, r5, lr}
  if (_currentMode == PITCH) {
    1252:	ldrb.w	r3, [r0, #49]	; 0x31
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}

void Controller::toggleMode () {
    1256:	mov	r4, r0
  if (_currentMode == PITCH) {
    1258:	cbz	r3, 1264 <Controller::toggleMode()+0x14>
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    125a:	cmp	r3, #1
    125c:	beq.n	12ac <Controller::toggleMode()+0x5c>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    125e:	cmp	r3, #2
    1260:	beq.n	1286 <Controller::toggleMode()+0x36>
    1262:	pop	{r3, r4, r5, pc}
  }
}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    1264:	movs	r3, #1
    1266:	strb.w	r3, [r0, #49]	; 0x31
    126a:	movs	r1, #8
    126c:	ldr	r0, [pc, #100]	; (12d4 <Controller::toggleMode()+0x84>)
    126e:	bl	14d8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1272:	ldr	r0, [pc, #100]	; (12d8 <Controller::toggleMode()+0x88>)
    1274:	bl	304c <Print::println()>
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
    1278:	ldr	r0, [r4, #68]	; 0x44
    127a:	movw	r1, #999	; 0x3e7
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
    127e:	ldmia.w	sp!, {r3, r4, r5, lr}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
    1282:	b.w	878 <Led::blink(int)>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    1286:	movs	r5, #0
    1288:	strb.w	r5, [r0, #49]	; 0x31
    128c:	movs	r1, #5
    128e:	ldr	r0, [pc, #76]	; (12dc <Controller::toggleMode()+0x8c>)
    1290:	bl	14d8 <usb_serial_write>
    1294:	ldr	r0, [pc, #64]	; (12d8 <Controller::toggleMode()+0x88>)
    1296:	bl	304c <Print::println()>
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    129a:	ldr	r0, [r4, #68]	; 0x44
    129c:	mov	r1, r5
    129e:	bl	878 <Led::blink(int)>
    _leds[4]->on();
    12a2:	ldr	r0, [r4, #68]	; 0x44
  }
};
    12a4:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
    12a8:	b.w	8e4 <Led::on()>
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    12ac:	movs	r3, #2
    12ae:	strb.w	r3, [r0, #49]	; 0x31
    12b2:	movs	r1, #10
    12b4:	ldr	r0, [pc, #40]	; (12e0 <Controller::toggleMode()+0x90>)
    12b6:	bl	14d8 <usb_serial_write>
    12ba:	ldr	r0, [pc, #28]	; (12d8 <Controller::toggleMode()+0x88>)
    12bc:	bl	304c <Print::println()>
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    12c0:	ldr	r0, [r4, #68]	; 0x44
    12c2:	movs	r1, #0
    12c4:	bl	878 <Led::blink(int)>
    _leds[4]->off();
    12c8:	ldr	r0, [r4, #68]	; 0x44
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
    12ca:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
    12ce:	b.w	8d8 <Led::off()>
    12d2:	nop
    12d4:	.word	0x0000464c
    12d8:	.word	0x1fff0c48
    12dc:	.word	0x00004664
    12e0:	.word	0x00004658

000012e4 <Controller::enterShiftMode()>:
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
    12e4:	ldr	r3, [r0, #76]	; 0x4c
    12e6:	ldr	r3, [r3, #12]
  // todo: maybe shift mode should be a mode like the others duh
  _shiftMode = true;
    12e8:	movs	r2, #1
    12ea:	ldr	r3, [r3, #4]
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
    12ec:	push	{r4, r5, r6, lr}
    12ee:	mov	r6, r0
  // todo: maybe shift mode should be a mode like the others duh
  _shiftMode = true;
    12f0:	strb.w	r2, [r0, #48]	; 0x30
    12f4:	add.w	r5, r0, #52	; 0x34

  for (int i = 0; i < 4; i++) {
    12f8:	movs	r4, #0
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
    12fa:	cmp	r4, r3

void Controller::enterShiftMode () {
  // todo: maybe shift mode should be a mode like the others duh
  _shiftMode = true;

  for (int i = 0; i < 4; i++) {
    12fc:	add.w	r4, r4, #1
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
    1300:	beq.n	130e <Controller::enterShiftMode()+0x2a>
    1302:	ldr	r0, [r5, #0]
    1304:	bl	8d8 <Led::off()>
    1308:	ldr	r3, [r6, #76]	; 0x4c
    130a:	ldr	r3, [r3, #12]
    130c:	ldr	r3, [r3, #4]

void Controller::enterShiftMode () {
  // todo: maybe shift mode should be a mode like the others duh
  _shiftMode = true;

  for (int i = 0; i < 4; i++) {
    130e:	cmp	r4, #4
    1310:	add.w	r5, r5, #4
    1314:	bne.n	12fa <Controller::enterShiftMode()+0x16>
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
    1316:	add.w	r6, r6, r3, lsl #2
    131a:	ldr	r0, [r6, #52]	; 0x34
};
    131c:	ldmia.w	sp!, {r4, r5, r6, lr}

  for (int i = 0; i < 4; i++) {
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
    1320:	b.w	8e4 <Led::on()>

00001324 <Controller::exitShiftMode()>:
};

void Controller::exitShiftMode () {
    1324:	push	{r4, r5, r6, lr}
  _shiftMode = false;
    1326:	mov	r5, r0
    1328:	movs	r4, #0
    132a:	strb.w	r4, [r5, #48]!
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
};

void Controller::exitShiftMode () {
    132e:	mov	r6, r0
  _shiftMode = false;

  for (size_t i = 0; i < 4; i++) {
    _leds[i]->off();
    1330:	ldr.w	r0, [r5, #4]!
    1334:	bl	8d8 <Led::off()>
    _sequencer->_paginator->setLeds(i);
    1338:	ldr	r3, [r6, #76]	; 0x4c
    133a:	mov	r1, r4
    133c:	ldr	r0, [r3, #12]
};

void Controller::exitShiftMode () {
  _shiftMode = false;

  for (size_t i = 0; i < 4; i++) {
    133e:	adds	r4, #1
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
    1340:	bl	c20 <Paginator::setLeds(unsigned int)>
};

void Controller::exitShiftMode () {
  _shiftMode = false;

  for (size_t i = 0; i < 4; i++) {
    1344:	cmp	r4, #4
    1346:	bne.n	1330 <Controller::exitShiftMode()+0xc>
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
  }
};
    1348:	pop	{r4, r5, r6, pc}
    134a:	nop

0000134c <Controller::enterCopyMode()>:

void Controller::enterCopyMode () {
  _copyMode = true;
    134c:	movs	r3, #1
    134e:	strb.w	r3, [r0, #80]	; 0x50
    1352:	bx	lr

00001354 <Controller::exitCopyMode()>:
}

void Controller::exitCopyMode () {
  _copyMode = false;
    1354:	movs	r3, #0
    1356:	strb.w	r3, [r0, #80]	; 0x50
    135a:	bx	lr

0000135c <Controller::enterChanceMode()>:
}

void Controller::enterChanceMode () {
  if (_currentMode != CHANCE && _currentMode != SWING) {
    135c:	ldrb.w	r3, [r0, #49]	; 0x31
    1360:	subs	r2, r3, #3
    1362:	cmp	r2, #1
    1364:	bls.n	1384 <Controller::enterChanceMode()+0x28>

void Controller::exitCopyMode () {
  _copyMode = false;
}

void Controller::enterChanceMode () {
    1366:	push	{r4, lr}
    1368:	movs	r1, #6
  if (_currentMode != CHANCE && _currentMode != SWING) {
    _modeBeforeChance = _currentMode;
    136a:	strb.w	r3, [r0, #50]	; 0x32
    136e:	mov	r4, r0
    1370:	ldr	r0, [pc, #20]	; (1388 <Controller::enterChanceMode()+0x2c>)
    1372:	bl	14d8 <usb_serial_write>
    1376:	ldr	r0, [pc, #20]	; (138c <Controller::enterChanceMode()+0x30>)
    1378:	bl	304c <Print::println()>
    Serial.println("CHANCE");
    _currentMode = CHANCE;
    137c:	movs	r3, #3
    137e:	strb.w	r3, [r4, #49]	; 0x31
    1382:	pop	{r4, pc}
    1384:	bx	lr
    1386:	nop
    1388:	.word	0x0000466c
    138c:	.word	0x1fff0c48

00001390 <Controller::exitChanceMode()>:
    1390:	ldrb.w	r3, [r0, #50]	; 0x32
    1394:	strb.w	r3, [r0, #49]	; 0x31
    1398:	bx	lr
    139a:	nop

0000139c <Controller::enterSwingMode()>:
void Controller::exitChanceMode () {
  _currentMode = _modeBeforeChance;
};

void Controller::enterSwingMode () {
  if (_currentMode != SWING) {
    139c:	ldrb.w	r3, [r0, #49]	; 0x31
    13a0:	cmp	r3, #4

void Controller::exitChanceMode () {
  _currentMode = _modeBeforeChance;
};

void Controller::enterSwingMode () {
    13a2:	push	{r4, lr}
    13a4:	mov	r4, r0
  if (_currentMode != SWING) {
    13a6:	beq.n	13b6 <Controller::enterSwingMode()+0x1a>
    13a8:	movs	r1, #5
    13aa:	ldr	r0, [pc, #20]	; (13c0 <Controller::enterSwingMode()+0x24>)
    13ac:	bl	14d8 <usb_serial_write>
    13b0:	ldr	r0, [pc, #16]	; (13c4 <Controller::enterSwingMode()+0x28>)
    13b2:	bl	304c <Print::println()>
    Serial.println("SWING");
  }

  _currentMode = SWING;
    13b6:	movs	r3, #4
    13b8:	strb.w	r3, [r4, #49]	; 0x31
    13bc:	pop	{r4, pc}
    13be:	nop
    13c0:	.word	0x00004674
    13c4:	.word	0x1fff0c48

000013c8 <Controller::exitSwingMode()>:
};

void Controller::exitSwingMode () {
  _currentMode = _modeBeforeChance;
    13c8:	ldrb.w	r3, [r0, #50]	; 0x32
    13cc:	strb.w	r3, [r0, #49]	; 0x31
    13d0:	bx	lr
    13d2:	nop

000013d4 <Controller::getChanceMode()>:
};

bool Controller::getChanceMode () {
  return _currentMode == CHANCE;
    13d4:	ldrb.w	r0, [r0, #49]	; 0x31
};
    13d8:	sub.w	r0, r0, #3
    13dc:	clz	r0, r0
    13e0:	lsrs	r0, r0, #5
    13e2:	bx	lr

000013e4 <Controller::getSwingMode()>:

bool Controller::getSwingMode () {
  return _currentMode == SWING;
    13e4:	ldrb.w	r0, [r0, #49]	; 0x31
}
    13e8:	sub.w	r0, r0, #4
    13ec:	clz	r0, r0
    13f0:	lsrs	r0, r0, #5
    13f2:	bx	lr

000013f4 <Controller::getCopyMode()>:

bool Controller::getCopyMode () {
  return _copyMode;
}
    13f4:	ldrb.w	r0, [r0, #80]	; 0x50
    13f8:	bx	lr
    13fa:	nop

000013fc <Controller::getShiftMode()>:

bool Controller::getShiftMode () {
  return _shiftMode;
};
    13fc:	ldrb.w	r0, [r0, #48]	; 0x30
    1400:	bx	lr
    1402:	nop

00001404 <Controller::getMode()>:

Modes Controller::getMode() {
  return _currentMode;
};
    1404:	ldrb.w	r0, [r0, #49]	; 0x31
    1408:	bx	lr
    140a:	nop

0000140c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    140c:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    140e:	ldr	r5, [pc, #60]	; (144c <usb_serial_getchar+0x40>)
    1410:	ldr	r0, [r5, #0]
    1412:	cbz	r0, 1434 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1414:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1416:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1418:	adds	r1, r0, r3
    141a:	adds	r3, #1
	if (i >= rx_packet->len) {
    141c:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    141e:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1420:	bcs.n	1428 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1422:	strh	r3, [r0, #2]
	}
	return c;
    1424:	mov	r0, r4
}
    1426:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1428:	bl	22b8 <usb_free>
		rx_packet = NULL;
    142c:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    142e:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1430:	str	r3, [r5, #0]
    1432:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1434:	ldr	r3, [pc, #24]	; (1450 <usb_serial_getchar+0x44>)
    1436:	ldrb	r3, [r3, #0]
    1438:	cbz	r3, 1446 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    143a:	movs	r0, #2
    143c:	bl	2304 <usb_rx>
    1440:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1442:	cmp	r0, #0
    1444:	bne.n	1414 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1446:	mov.w	r0, #4294967295
    144a:	pop	{r3, r4, r5, pc}
    144c:	.word	0x1fff15c0
    1450:	.word	0x1fff1720

00001454 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1454:	push	{r4, lr}
	if (!rx_packet) {
    1456:	ldr	r4, [pc, #36]	; (147c <usb_serial_peekchar+0x28>)
    1458:	ldr	r0, [r4, #0]
    145a:	cbz	r0, 1464 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    145c:	ldrh	r3, [r0, #2]
    145e:	add	r0, r3
    1460:	ldrb	r0, [r0, #8]
}
    1462:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1464:	ldr	r3, [pc, #24]	; (1480 <usb_serial_peekchar+0x2c>)
    1466:	ldrb	r3, [r3, #0]
    1468:	cbz	r3, 1476 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    146a:	movs	r0, #2
    146c:	bl	2304 <usb_rx>
    1470:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1472:	cmp	r0, #0
    1474:	bne.n	145c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1476:	mov.w	r0, #4294967295
    147a:	pop	{r4, pc}
    147c:	.word	0x1fff15c0
    1480:	.word	0x1fff1720

00001484 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1484:	ldr	r3, [pc, #16]	; (1498 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1486:	ldr	r2, [pc, #20]	; (149c <usb_serial_available+0x18>)
    1488:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    148a:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    148c:	cbz	r3, 1496 <usb_serial_available+0x12>
    148e:	ldrh	r2, [r3, #0]
    1490:	ldrh	r3, [r3, #2]
    1492:	subs	r3, r2, r3
    1494:	add	r0, r3
	return count;
}
    1496:	bx	lr
    1498:	.word	0x1fff15c0
    149c:	.word	0x1fff1bb8

000014a0 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    14a0:	ldr	r3, [pc, #44]	; (14d0 <usb_serial_flush_input+0x30>)
    14a2:	ldrb	r3, [r3, #0]
    14a4:	cbz	r3, 14ce <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    14a6:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    14a8:	ldr	r4, [pc, #40]	; (14d4 <usb_serial_flush_input+0x34>)
    14aa:	ldr	r0, [r4, #0]
    14ac:	cbz	r0, 14c2 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    14ae:	bl	22b8 <usb_free>
		rx_packet = NULL;
    14b2:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    14b4:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    14b6:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    14b8:	bl	2304 <usb_rx>
		if (!rx) break;
    14bc:	cbz	r0, 14cc <usb_serial_flush_input+0x2c>
		usb_free(rx);
    14be:	bl	22b8 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    14c2:	movs	r0, #2
    14c4:	bl	2304 <usb_rx>
		if (!rx) break;
    14c8:	cmp	r0, #0
    14ca:	bne.n	14be <usb_serial_flush_input+0x1e>
    14cc:	pop	{r4, pc}
    14ce:	bx	lr
    14d0:	.word	0x1fff1720
    14d4:	.word	0x1fff15c0

000014d8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    14d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    14dc:	ldr.w	r9, [pc, #248]	; 15d8 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    14e0:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    14e2:	movs	r2, #1
    14e4:	strb.w	r2, [r9]
	while (size > 0) {
    14e8:	str	r1, [sp, #4]
    14ea:	cbz	r1, 1548 <usb_serial_write+0x70>
    14ec:	ldr.w	r8, [pc, #236]	; 15dc <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    14f0:	ldr	r7, [pc, #212]	; (15c8 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    14f2:	ldr	r6, [sp, #4]
    14f4:	mov	fp, r0
		if (!tx_packet) {
    14f6:	ldr.w	r0, [r8]
    14fa:	cbz	r0, 156a <usb_serial_write+0x92>
    14fc:	ldr	r5, [pc, #204]	; (15cc <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    14fe:	ldrh	r4, [r0, #2]
    1500:	rsb	r1, r4, #64	; 0x40
    1504:	cmp	r1, r6
    1506:	it	cs
    1508:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    150a:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    150e:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1510:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1514:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1516:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1518:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    151c:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1520:	cbz	r1, 1538 <usb_serial_write+0x60>
    1522:	subs	r4, #1
    1524:	add	r2, r4
    1526:	add	r1, fp
    1528:	ldrb.w	r4, [fp], #1
    152c:	strb.w	r4, [r2, #1]!
    1530:	cmp	fp, r1
    1532:	bne.n	1528 <usb_serial_write+0x50>
    1534:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1538:	cmp.w	lr, #63	; 0x3f
    153c:	bhi.n	1556 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    153e:	ldr	r2, [pc, #144]	; (15d0 <usb_serial_write+0xf8>)
    1540:	movs	r1, #5
    1542:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1544:	cmp	r6, #0
    1546:	bne.n	14f6 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1548:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    154a:	movs	r3, #0
    154c:	strb.w	r3, [r9]
	return ret;
}
    1550:	add	sp, #12
    1552:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1556:	movs	r2, #64	; 0x40
    1558:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    155a:	mov	r1, r0
    155c:	movs	r0, #3
    155e:	bl	2454 <usb_tx>
			tx_packet = NULL;
    1562:	movs	r2, #0
    1564:	str.w	r2, [r8]
    1568:	b.n	153e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    156a:	ldrb	r2, [r7, #0]
    156c:	cbz	r2, 15b8 <usb_serial_write+0xe0>
    156e:	ldr	r4, [pc, #100]	; (15d4 <usb_serial_write+0xfc>)
    1570:	ldr	r5, [pc, #88]	; (15cc <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1572:	mov.w	sl, #1
    1576:	b.n	1588 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1578:	subs	r4, #1
    157a:	beq.n	15aa <usb_serial_write+0xd2>
    157c:	ldrb	r2, [r5, #0]
    157e:	cbnz	r2, 15aa <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1580:	bl	2f58 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1584:	ldrb	r2, [r7, #0]
    1586:	cbz	r2, 15b8 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1588:	movs	r0, #3
    158a:	bl	2340 <usb_tx_packet_count>
    158e:	cmp	r0, #7
    1590:	bhi.n	1578 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1592:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1596:	bl	2278 <usb_malloc>
    159a:	str.w	r0, [r8]
					if (tx_packet) break;
    159e:	cmp	r0, #0
    15a0:	bne.n	14fe <usb_serial_write+0x26>
					tx_noautoflush = 0;
    15a2:	ldr	r3, [pc, #52]	; (15d8 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    15a4:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    15a6:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    15a8:	bne.n	157c <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    15aa:	movs	r3, #1
					return -1;
    15ac:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    15b0:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    15b2:	add	sp, #12
    15b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    15b8:	movs	r3, #0
					return -1;
    15ba:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    15be:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    15c2:	add	sp, #12
    15c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15c8:	.word	0x1fff1720
    15cc:	.word	0x1fff15bc
    15d0:	.word	0x1fff15b4
    15d4:	.word	0x00014821
    15d8:	.word	0x1fff15b5
    15dc:	.word	0x1fff15b8

000015e0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    15e0:	push	{lr}
    15e2:	sub	sp, #12
    15e4:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    15e6:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    15e8:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    15ec:	mov	r0, r3
    15ee:	bl	14d8 <usb_serial_write>
}
    15f2:	add	sp, #12
    15f4:	ldr.w	pc, [sp], #4

000015f8 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    15f8:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    15fa:	ldr	r5, [pc, #56]	; (1634 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    15fc:	ldr	r4, [pc, #56]	; (1638 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    15fe:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1600:	movs	r3, #1
    1602:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1604:	cbz	r0, 1612 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1606:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1608:	movs	r3, #0
    160a:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    160c:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1610:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1612:	ldr	r3, [pc, #40]	; (163c <usb_serial_write_buffer_free+0x44>)
    1614:	ldrb	r3, [r3, #0]
    1616:	cbnz	r3, 161e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1618:	movs	r0, #0
    161a:	strb	r0, [r4, #0]
			return 0;
    161c:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    161e:	movs	r0, #3
    1620:	bl	2340 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1624:	cmp	r0, #7
    1626:	bhi.n	1618 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1628:	bl	2278 <usb_malloc>
    162c:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    162e:	cmp	r0, #0
    1630:	bne.n	1606 <usb_serial_write_buffer_free+0xe>
    1632:	b.n	1618 <usb_serial_write_buffer_free+0x20>
    1634:	.word	0x1fff15b8
    1638:	.word	0x1fff15b5
    163c:	.word	0x1fff1720

00001640 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1640:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1642:	ldr	r3, [pc, #68]	; (1688 <usb_serial_flush_output+0x48>)
    1644:	ldrb	r3, [r3, #0]
    1646:	cbz	r3, 166c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1648:	ldr	r6, [pc, #64]	; (168c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    164a:	ldr	r5, [pc, #68]	; (1690 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    164c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    164e:	movs	r7, #1
    1650:	strb	r7, [r5, #0]
	if (tx_packet) {
    1652:	cbz	r4, 166e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1654:	ldr	r2, [pc, #60]	; (1694 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1656:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1658:	movs	r7, #0
    165a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    165c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    165e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1660:	movs	r0, #3
    1662:	bl	2454 <usb_tx>
		tx_packet = NULL;
    1666:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1668:	movs	r3, #0
    166a:	strb	r3, [r5, #0]
    166c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    166e:	bl	2278 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1672:	ldr	r3, [pc, #32]	; (1694 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1674:	cbz	r0, 1682 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1676:	mov	r1, r0
    1678:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    167a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    167c:	bl	2454 <usb_tx>
    1680:	b.n	1668 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1682:	strb	r7, [r3, #0]
    1684:	b.n	1668 <usb_serial_flush_output+0x28>
    1686:	nop
    1688:	.word	0x1fff1720
    168c:	.word	0x1fff15b8
    1690:	.word	0x1fff15b5
    1694:	.word	0x1fff15b4

00001698 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1698:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    169a:	ldr	r3, [pc, #56]	; (16d4 <usb_serial_flush_callback+0x3c>)
    169c:	ldrb	r3, [r3, #0]
    169e:	cbnz	r3, 16be <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    16a0:	ldr	r4, [pc, #52]	; (16d8 <usb_serial_flush_callback+0x40>)
    16a2:	ldr	r1, [r4, #0]
    16a4:	cbz	r1, 16c0 <usb_serial_flush_callback+0x28>
    16a6:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    16aa:	ldrh	r3, [r1, #2]
    16ac:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    16ae:	movs	r0, #3
    16b0:	bl	2454 <usb_tx>
		tx_packet = NULL;
    16b4:	str	r5, [r4, #0]
    16b6:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    16b8:	ldr	r3, [pc, #32]	; (16dc <usb_serial_flush_callback+0x44>)
    16ba:	movs	r2, #1
    16bc:	strb	r2, [r3, #0]
    16be:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    16c0:	bl	2278 <usb_malloc>
		if (tx) {
    16c4:	cmp	r0, #0
    16c6:	beq.n	16b8 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    16c8:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    16ca:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    16ce:	movs	r0, #3
    16d0:	b.w	2454 <usb_tx>
    16d4:	.word	0x1fff15b5
    16d8:	.word	0x1fff15b8
    16dc:	.word	0x1fff15b4

000016e0 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    16e0:	ldr	r2, [pc, #220]	; (17c0 <wait_for_cal+0xe0>)
    16e2:	ldr	r1, [pc, #224]	; (17c4 <wait_for_cal+0xe4>)
    16e4:	ldr	r3, [r2, #0]
    16e6:	lsls	r3, r3, #24
    16e8:	bmi.n	16e4 <wait_for_cal+0x4>
    16ea:	ldr	r3, [r1, #0]
    16ec:	ands.w	r3, r3, #128	; 0x80
    16f0:	bne.n	16e4 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    16f2:	cpsid	i
	if (calibrating) {
    16f4:	ldr	r1, [pc, #208]	; (17c8 <wait_for_cal+0xe8>)
    16f6:	ldrb	r2, [r1, #0]
    16f8:	cmp	r2, #0
    16fa:	beq.n	17bc <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    16fc:	ldr	r2, [pc, #204]	; (17cc <wait_for_cal+0xec>)
    16fe:	ldr	r0, [pc, #208]	; (17d0 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1700:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1702:	ldr	r4, [pc, #208]	; (17d4 <wait_for_cal+0xf4>)
    1704:	ldr	r7, [r2, #0]
    1706:	ldr	r6, [r0, #0]
    1708:	ldr	r5, [r4, #0]
    170a:	ldr	r4, [r2, #12]
    170c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    170e:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1710:	adds	r2, #20
    1712:	ldr	r0, [r0, #0]
    1714:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1716:	ldr	r7, [pc, #192]	; (17d8 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1718:	add	r5, r6
    171a:	add	r4, r5
    171c:	add	r0, r4
    171e:	add	r2, r0
    1720:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1724:	ldr	r6, [pc, #180]	; (17dc <wait_for_cal+0xfc>)
    1726:	ldr	r0, [pc, #184]	; (17e0 <wait_for_cal+0x100>)
    1728:	ldr	r5, [pc, #184]	; (17e4 <wait_for_cal+0x104>)
    172a:	ldr	r4, [pc, #188]	; (17e8 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    172c:	orr.w	r2, r2, #32768	; 0x8000
    1730:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1732:	ldr	r7, [r6, #0]
    1734:	ldr	r6, [r0, #0]
    1736:	ldr	r5, [r5, #0]
    1738:	ldr	r2, [pc, #176]	; (17ec <wait_for_cal+0x10c>)
    173a:	ldr	r4, [r4, #0]
    173c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    173e:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1740:	ldr	r0, [r0, #0]
    1742:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1744:	ldr	r7, [pc, #168]	; (17f0 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1746:	add	r5, r6
    1748:	add	r4, r5
    174a:	add	r0, r4
    174c:	add	r2, r0
    174e:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1752:	ldr	r6, [pc, #160]	; (17f4 <wait_for_cal+0x114>)
    1754:	ldr	r0, [pc, #160]	; (17f8 <wait_for_cal+0x118>)
    1756:	ldr	r5, [pc, #164]	; (17fc <wait_for_cal+0x11c>)
    1758:	ldr	r4, [pc, #164]	; (1800 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    175a:	orr.w	r2, r2, #32768	; 0x8000
    175e:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1760:	ldr	r7, [r6, #0]
    1762:	ldr	r6, [r0, #0]
    1764:	ldr	r5, [r5, #0]
    1766:	ldr	r2, [pc, #156]	; (1804 <wait_for_cal+0x124>)
    1768:	ldr	r4, [r4, #0]
    176a:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    176c:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    176e:	ldr	r0, [r0, #0]
    1770:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1772:	ldr	r7, [pc, #148]	; (1808 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1774:	add	r5, r6
    1776:	add	r4, r5
    1778:	add	r0, r4
    177a:	add	r2, r0
    177c:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1780:	ldr	r6, [pc, #136]	; (180c <wait_for_cal+0x12c>)
    1782:	ldr	r0, [pc, #140]	; (1810 <wait_for_cal+0x130>)
    1784:	ldr	r5, [pc, #140]	; (1814 <wait_for_cal+0x134>)
    1786:	ldr	r4, [pc, #144]	; (1818 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1788:	orr.w	r2, r2, #32768	; 0x8000
    178c:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    178e:	ldr	r7, [r6, #0]
    1790:	ldr	r6, [r0, #0]
    1792:	ldr	r5, [r5, #0]
    1794:	ldr	r2, [pc, #132]	; (181c <wait_for_cal+0x13c>)
    1796:	ldr	r4, [r4, #0]
    1798:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    179a:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    179c:	ldr	r0, [r0, #0]
    179e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    17a0:	add	r5, r6
    17a2:	add	r4, r5
    17a4:	add	r0, r4
    17a6:	add	r2, r0
    17a8:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    17ac:	ldr	r0, [pc, #112]	; (1820 <wait_for_cal+0x140>)
    17ae:	orr.w	r2, r2, #32768	; 0x8000
    17b2:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    17b4:	strb	r3, [r1, #0]
	}
	__enable_irq();
    17b6:	cpsie	i
}
    17b8:	pop	{r4, r5, r6, r7}
    17ba:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    17bc:	cpsie	i
    17be:	bx	lr
    17c0:	.word	0x4003b024
    17c4:	.word	0x400bb024
    17c8:	.word	0x1fff15c6
    17cc:	.word	0x4003b038
    17d0:	.word	0x4003b03c
    17d4:	.word	0x4003b040
    17d8:	.word	0x4003b02c
    17dc:	.word	0x4003b058
    17e0:	.word	0x4003b05c
    17e4:	.word	0x4003b060
    17e8:	.word	0x4003b064
    17ec:	.word	0x4003b06c
    17f0:	.word	0x4003b030
    17f4:	.word	0x400bb038
    17f8:	.word	0x400bb03c
    17fc:	.word	0x400bb040
    1800:	.word	0x400bb044
    1804:	.word	0x400bb04c
    1808:	.word	0x400bb02c
    180c:	.word	0x400bb058
    1810:	.word	0x400bb05c
    1814:	.word	0x400bb060
    1818:	.word	0x400bb064
    181c:	.word	0x400bb06c
    1820:	.word	0x400bb030

00001824 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1824:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1826:	ldr	r0, [pc, #164]	; (18cc <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1828:	ldr	r2, [pc, #164]	; (18d0 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    182a:	ldr	r3, [pc, #168]	; (18d4 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    182c:	ldr	r5, [pc, #168]	; (18d8 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    182e:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1830:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1832:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1834:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1836:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1838:	ldr	r4, [pc, #160]	; (18dc <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    183a:	cmp	r3, #8
    183c:	beq.n	18a0 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    183e:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1840:	ldr	r0, [pc, #156]	; (18e0 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1842:	ldr	r1, [pc, #160]	; (18e4 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1844:	beq.n	18b6 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1846:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1848:	ite	eq
    184a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    184c:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    184e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1850:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1852:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1854:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1856:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1858:	ldr	r3, [pc, #140]	; (18e8 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    185a:	ldr	r1, [pc, #144]	; (18ec <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    185c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    185e:	ldr	r2, [pc, #144]	; (18f0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1860:	cbz	r3, 1892 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1862:	movs	r3, #1
    1864:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1866:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1868:	ldr	r3, [pc, #136]	; (18f4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    186a:	ldr	r1, [pc, #140]	; (18f8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    186c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    186e:	ldr	r2, [pc, #140]	; (18fc <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1870:	cmp	r3, #1
    1872:	bls.n	18c2 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1874:	cmp	r3, #4
    1876:	bls.n	1898 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1878:	cmp	r3, #8
    187a:	bls.n	18ba <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    187c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    187e:	ite	ls
    1880:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1882:	movhi	r3, #135	; 0x87
    1884:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1886:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1888:	ldr	r3, [pc, #116]	; (1900 <analog_init+0xdc>)
    188a:	movs	r2, #1
    188c:	strb	r2, [r3, #0]
}
    188e:	pop	{r4, r5}
    1890:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1892:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1894:	str	r3, [r2, #0]
    1896:	b.n	1868 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1898:	movs	r3, #132	; 0x84
    189a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    189c:	str	r3, [r2, #0]
    189e:	b.n	1888 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    18a0:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    18a4:	ldr	r1, [pc, #60]	; (18e4 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    18a6:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    18a8:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    18aa:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    18ac:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    18ae:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    18b0:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    18b2:	str	r3, [r1, #0]
    18b4:	b.n	1858 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    18b6:	movs	r2, #57	; 0x39
    18b8:	b.n	18aa <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    18ba:	movs	r3, #133	; 0x85
    18bc:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    18be:	str	r3, [r2, #0]
    18c0:	b.n	1888 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    18c2:	movs	r3, #128	; 0x80
    18c4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    18c6:	str	r3, [r2, #0]
    18c8:	b.n	1888 <analog_init+0x64>
    18ca:	nop
    18cc:	.word	0x40074000
    18d0:	.word	0x40074001
    18d4:	.word	0x1fff0c40
    18d8:	.word	0x4003b008
    18dc:	.word	0x4003b00c
    18e0:	.word	0x400bb008
    18e4:	.word	0x400bb00c
    18e8:	.word	0x1fff15c9
    18ec:	.word	0x4003b020
    18f0:	.word	0x400bb020
    18f4:	.word	0x1fff0c41
    18f8:	.word	0x4003b024
    18fc:	.word	0x400bb024
    1900:	.word	0x1fff15c6

00001904 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1904:	cmp	r0, #71	; 0x47
    1906:	bhi.n	1968 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1908:	ldr	r3, [pc, #204]	; (19d8 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    190a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    190e:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1910:	cmp	r6, #255	; 0xff
    1912:	beq.n	196c <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1914:	ldr	r3, [pc, #196]	; (19dc <analogRead+0xd8>)
    1916:	ldrb	r3, [r3, #0]
    1918:	cmp	r3, #0
    191a:	bne.n	1972 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    191c:	lsls	r2, r6, #24
    191e:	bmi.n	197a <analogRead+0x76>
#endif

	__disable_irq();
    1920:	cpsid	i
    1922:	ldr	r5, [pc, #188]	; (19e0 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1924:	ldr	r4, [pc, #188]	; (19e4 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1926:	mov	r7, r5
    1928:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    192a:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    192c:	strb	r3, [r5, #0]
	__enable_irq();
    192e:	cpsie	i
	while (1) {
		__disable_irq();
    1930:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1932:	ldr	r3, [r4, #0]
    1934:	lsls	r3, r3, #24
    1936:	bmi.n	1952 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1938:	ldrb	r3, [r7, #0]
    193a:	cbnz	r3, 1944 <analogRead+0x40>
    193c:	b.n	1928 <analogRead+0x24>
    193e:	ldrb	r3, [r5, #0]
    1940:	cmp	r3, #0
    1942:	beq.n	1928 <analogRead+0x24>
		__enable_irq();
    1944:	cpsie	i
		yield();
    1946:	bl	2f58 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    194a:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    194c:	ldr	r3, [r4, #0]
    194e:	lsls	r0, r3, #24
    1950:	bpl.n	193e <analogRead+0x3a>
			result = ADC0_RA;
    1952:	ldr	r3, [pc, #148]	; (19e8 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1954:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1956:	movs	r2, #0
    1958:	strb	r2, [r5, #0]
			__enable_irq();
    195a:	cpsie	i
			result >>= analog_right_shift;
    195c:	ldr	r2, [pc, #140]	; (19ec <analogRead+0xe8>)
    195e:	ldrb	r0, [r2, #0]
    1960:	asr.w	r0, r3, r0
			return result;
    1964:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1968:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    196a:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    196c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    196e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1972:	bl	16e0 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1976:	lsls	r2, r6, #24
    1978:	bpl.n	1920 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    197a:	cpsid	i
    197c:	ldr	r5, [pc, #112]	; (19f0 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    197e:	ldr.w	r8, [pc, #124]	; 19fc <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    1982:	ldr	r4, [pc, #112]	; (19f4 <analogRead+0xf0>)
    1984:	and.w	r7, r6, #64	; 0x40
    1988:	uxtb	r7, r7
    198a:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    198e:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    1992:	cbz	r7, 19cc <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1994:	bic.w	r3, r3, #16
    1998:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    199c:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    199e:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    19a0:	ldr	r2, [pc, #76]	; (19f0 <analogRead+0xec>)
    19a2:	strb	r3, [r5, #0]
	__enable_irq();
    19a4:	cpsie	i
	while (1) {
		__disable_irq();
    19a6:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    19a8:	ldr	r3, [r4, #0]
    19aa:	lsls	r1, r3, #24
    19ac:	bmi.n	19c8 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    19ae:	ldrb	r3, [r2, #0]
    19b0:	cbnz	r3, 19ba <analogRead+0xb6>
    19b2:	b.n	198e <analogRead+0x8a>
    19b4:	ldrb	r3, [r5, #0]
    19b6:	cmp	r3, #0
    19b8:	beq.n	198e <analogRead+0x8a>
		__enable_irq();
    19ba:	cpsie	i
		yield();
    19bc:	bl	2f58 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    19c0:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    19c2:	ldr	r3, [r4, #0]
    19c4:	lsls	r3, r3, #24
    19c6:	bpl.n	19b4 <analogRead+0xb0>
			result = ADC1_RA;
    19c8:	ldr	r3, [pc, #44]	; (19f8 <analogRead+0xf4>)
    19ca:	b.n	1954 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    19cc:	orr.w	r3, r3, #16
    19d0:	str.w	r3, [r8]
    19d4:	b.n	199c <analogRead+0x98>
    19d6:	nop
    19d8:	.word	0x0000467c
    19dc:	.word	0x1fff15c6
    19e0:	.word	0x1fff15c8
    19e4:	.word	0x4003b000
    19e8:	.word	0x4003b010
    19ec:	.word	0x1fff15c5
    19f0:	.word	0x1fff15c7
    19f4:	.word	0x400bb000
    19f8:	.word	0x400bb010
    19fc:	.word	0x400bb00c

00001a00 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1a00:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1a02:	ldr	r3, [pc, #68]	; (1a48 <digitalWrite.part.1+0x48>)
    1a04:	ldr.w	r2, [r3, r0, lsl #3]
    1a08:	ldrb.w	r4, [r2, #640]	; 0x280
    1a0c:	cbz	r4, 1a1c <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1a0e:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1a10:	cbz	r1, 1a32 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1a12:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1a16:	ldr.w	r4, [sp], #4
    1a1a:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1a1c:	add.w	r3, r3, r0, lsl #3
    1a20:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1a22:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1a24:	cbnz	r1, 1a3c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1a26:	bic.w	r2, r2, #2
    1a2a:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1a2c:	ldr.w	r4, [sp], #4
    1a30:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1a32:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1a36:	ldr.w	r4, [sp], #4
    1a3a:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1a3c:	orr.w	r2, r2, #3
    1a40:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1a42:	ldr.w	r4, [sp], #4
    1a46:	bx	lr
    1a48:	.word	0x000046c4

00001a4c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1a4c:	ldr	r2, [pc, #112]	; (1ac0 <pinMode.part.2+0x74>)
    1a4e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1a52:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1a54:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1a56:	beq.n	1a7c <pinMode.part.2+0x30>
    1a58:	cmp	r1, #4
    1a5a:	beq.n	1a94 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1a5c:	ldr.w	r0, [r2, r0, lsl #3]
    1a60:	movs	r2, #0
    1a62:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1a66:	cbz	r1, 1a74 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1a68:	cmp	r1, #2
    1a6a:	beq.n	1aae <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1a6c:	cmp	r1, #3
    1a6e:	beq.n	1ab6 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1a70:	str	r2, [r3, #0]
    1a72:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1a74:	mov.w	r2, #256	; 0x100
    1a78:	str	r2, [r3, #0]
    1a7a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1a7c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1a80:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1a84:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1a88:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1a8a:	ldr	r2, [r3, #0]
    1a8c:	bic.w	r2, r2, #32
    1a90:	str	r2, [r3, #0]
    1a92:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1a94:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1a98:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1a9c:	movs	r0, #1
    1a9e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1aa2:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    1aa4:	ldr	r2, [r3, #0]
    1aa6:	orr.w	r2, r2, #32
    1aaa:	str	r2, [r3, #0]
    1aac:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    1aae:	movw	r2, #259	; 0x103
    1ab2:	str	r2, [r3, #0]
    1ab4:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    1ab6:	mov.w	r2, #258	; 0x102
    1aba:	str	r2, [r3, #0]
    1abc:	bx	lr
    1abe:	nop
    1ac0:	.word	0x000046c4

00001ac4 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    1ac4:	push	{r4, r5}
	RTC_SR = 0;
    1ac6:	ldr	r3, [pc, #20]	; (1adc <rtc_set+0x18>)
	RTC_TPR = 0;
    1ac8:	ldr	r5, [pc, #20]	; (1ae0 <rtc_set+0x1c>)
	RTC_TSR = t;
    1aca:	ldr	r4, [pc, #24]	; (1ae4 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1acc:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    1ace:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1ad0:	str	r2, [r3, #0]
	RTC_TPR = 0;
    1ad2:	str	r2, [r5, #0]
	RTC_TSR = t;
    1ad4:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    1ad6:	str	r1, [r3, #0]
}
    1ad8:	pop	{r4, r5}
    1ada:	bx	lr
    1adc:	.word	0x4003d014
    1ae0:	.word	0x4003d004
    1ae4:	.word	0x4003d000

00001ae8 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    1ae8:	cmp	r0, #63	; 0x3f
    1aea:	bhi.n	1af0 <digitalWrite+0x8>
    1aec:	b.w	1a00 <digitalWrite.part.1>
    1af0:	bx	lr
    1af2:	nop

00001af4 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1af4:	cmp	r0, #63	; 0x3f
    1af6:	bhi.n	1b06 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    1af8:	ldr	r3, [pc, #16]	; (1b0c <digitalRead+0x18>)
    1afa:	ldr.w	r3, [r3, r0, lsl #3]
    1afe:	ldrb.w	r0, [r3, #512]	; 0x200
    1b02:	uxtb	r0, r0
    1b04:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1b06:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    1b08:	bx	lr
    1b0a:	nop
    1b0c:	.word	0x000046c4

00001b10 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1b10:	cmp	r0, #63	; 0x3f
    1b12:	bhi.n	1b18 <pinMode+0x8>
    1b14:	b.w	1a4c <pinMode.part.2>
    1b18:	bx	lr
    1b1a:	nop

00001b1c <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1b1c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1b20:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1b22:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1b24:	ldr	r7, [pc, #136]	; (1bb0 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1b26:	ldr	r3, [pc, #140]	; (1bb4 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1b28:	ldr	r2, [pc, #140]	; (1bb8 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1b2a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1b2c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1b2e:	ldr	r2, [r2, #0]
	__enable_irq();
    1b30:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1b32:	lsls	r2, r2, #5
    1b34:	bpl.n	1b3c <delay+0x20>
    1b36:	cmp	r3, #50	; 0x32
    1b38:	it	hi
    1b3a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1b3c:	cbz	r5, 1bac <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1b3e:	rsb	r3, r3, #179200	; 0x2bc00
    1b42:	addw	r3, r3, #799	; 0x31f
    1b46:	ldr	r6, [pc, #116]	; (1bbc <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1b48:	ldr.w	r9, [pc, #104]	; 1bb4 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1b4c:	ldr.w	r8, [pc, #104]	; 1bb8 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1b50:	lsrs	r3, r3, #2
    1b52:	mov.w	r2, #1000	; 0x3e8
    1b56:	umull	r1, r3, r6, r3
    1b5a:	mul.w	r4, r2, r4
    1b5e:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1b62:	cpsid	i
	current = SYST_CVR;
    1b64:	ldr.w	r1, [r9]
	count = systick_millis_count;
    1b68:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1b6a:	ldr.w	lr, [r8]
	__enable_irq();
    1b6e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1b70:	rsb	r3, r1, #179200	; 0x2bc00
    1b74:	addw	r3, r3, #799	; 0x31f
    1b78:	lsrs	r3, r3, #2
    1b7a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1b7e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1b82:	rsb	r3, r4, r3, lsr #2
    1b86:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1b8a:	beq.n	1b92 <delay+0x76>
    1b8c:	cmp	r1, #50	; 0x32
    1b8e:	it	hi
    1b90:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1b92:	mla	r3, r0, r2, r3
    1b96:	cmp.w	r3, #1000	; 0x3e8
    1b9a:	bcc.n	1ba6 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    1b9c:	subs	r5, #1
    1b9e:	beq.n	1bac <delay+0x90>
				start += 1000;
    1ba0:	add.w	r4, r4, #1000	; 0x3e8
    1ba4:	b.n	1b62 <delay+0x46>
			}
			yield();
    1ba6:	bl	2f58 <yield>
		}
    1baa:	b.n	1b62 <delay+0x46>
    1bac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1bb0:	.word	0x1fff15cc
    1bb4:	.word	0xe000e018
    1bb8:	.word	0xe000ed04
    1bbc:	.word	0x16c16c17

00001bc0 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    1bc0:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1bc2:	ldr	r3, [pc, #312]	; (1cfc <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1bc4:	ldr	r0, [pc, #312]	; (1d00 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    1bc6:	ldr.w	ip, [pc, #348]	; 1d24 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    1bca:	ldr	r4, [pc, #312]	; (1d04 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    1bcc:	ldr	r1, [pc, #312]	; (1d08 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1bce:	ldr.w	lr, [pc, #344]	; 1d28 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    1bd2:	ldr	r6, [pc, #312]	; (1d0c <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    1bd4:	ldr	r5, [pc, #312]	; (1d10 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    1bd6:	ldr	r7, [pc, #316]	; (1d14 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1bd8:	mov.w	r2, #134217728	; 0x8000000
    1bdc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    1bde:	mov.w	r2, #268435456	; 0x10000000
    1be2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1be4:	mov.w	r2, #536870912	; 0x20000000
    1be8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    1bea:	mov.w	r2, #1073741824	; 0x40000000
    1bee:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1bf0:	mov.w	r2, #2147483648	; 0x80000000
    1bf4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1bf6:	movs	r2, #0
    1bf8:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1bfa:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1bfc:	movw	r0, #61439	; 0xefff
    1c00:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1c04:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1c08:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1c0a:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    1c0e:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1c10:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1c12:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1c14:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1c18:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    1c1a:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    1c1e:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1c20:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1c24:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1c26:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    1c2a:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1c2e:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    1c32:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1c36:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    1c3a:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1c3c:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1c40:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1c42:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1c44:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    1c46:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    1c4a:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    1c4c:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    1c4e:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1c50:	ldr	r4, [pc, #196]	; (1d18 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    1c52:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    1c54:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1c56:	movs	r1, #9
    1c58:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    1c5a:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    1c5e:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1c62:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    1c64:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1c66:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    1c68:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    1c6a:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    1c6c:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1c6e:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1c72:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    1c76:	add.w	r7, r7, #520192	; 0x7f000
    1c7a:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1c7c:	addw	r4, r4, #2044	; 0x7fc
    1c80:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    1c82:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    1c84:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    1c86:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1c88:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    1c8c:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    1c8e:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    1c92:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    1c96:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1c98:	sub.w	r4, r4, #460800	; 0x70800
    1c9c:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    1ca0:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1ca2:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1ca4:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1ca8:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1caa:	ldr	r0, [pc, #112]	; (1d1c <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1cac:	orr.w	r1, r1, #512	; 0x200
    1cb0:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1cb2:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1cb4:	ldr	r4, [pc, #104]	; (1d20 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    1cb6:	add.w	lr, lr, #65280	; 0xff00
    1cba:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    1cbe:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    1cc2:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    1cc6:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1cca:	orr.w	r1, r1, #33554432	; 0x2000000
    1cce:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    1cd0:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    1cd4:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1cd8:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    1cda:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    1cdc:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    1cde:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1ce0:	str	r2, [r4, #0]
#endif
	analog_init();
    1ce2:	bl	1824 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    1ce6:	movs	r0, #25
    1ce8:	bl	1b1c <delay>
	usb_init();
    1cec:	bl	2e88 <usb_init>
	delay(275);
    1cf0:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    1cf4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    1cf8:	b.w	1b1c <delay>
    1cfc:	.word	0xe000e104
    1d00:	.word	0x40038004
    1d04:	.word	0x40038014
    1d08:	.word	0x4003801c
    1d0c:	.word	0x40038024
    1d10:	.word	0x4003802c
    1d14:	.word	0x40038034
    1d18:	.word	0x40038000
    1d1c:	.word	0x40048004
    1d20:	.word	0x400c9000
    1d24:	.word	0x40038008
    1d28:	.word	0x4003800c

00001d2c <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1d2c:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1d2e:	ldr	r3, [pc, #56]	; (1d68 <sysex_byte+0x3c>)
    1d30:	ldr	r4, [pc, #56]	; (1d6c <sysex_byte+0x40>)
    1d32:	ldr	r3, [r3, #0]
    1d34:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1d36:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1d38:	cbz	r3, 1d5e <sysex_byte+0x32>
    1d3a:	cmp.w	r1, #290	; 0x122
    1d3e:	bcs.n	1d4c <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1d40:	ldr	r2, [pc, #44]	; (1d70 <sysex_byte+0x44>)
    1d42:	adds	r3, r1, #1
    1d44:	strb	r5, [r2, r1]
    1d46:	uxth	r3, r3
    1d48:	strh	r3, [r4, #0]
	}
}
    1d4a:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1d4c:	movs	r2, #0
    1d4e:	ldr	r0, [pc, #32]	; (1d70 <sysex_byte+0x44>)
    1d50:	blx	r3
    1d52:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1d54:	ldr	r2, [pc, #24]	; (1d70 <sysex_byte+0x44>)
    1d56:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1d58:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1d5a:	strh	r3, [r4, #0]
	}
}
    1d5c:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    1d5e:	cmp.w	r1, #290	; 0x122
    1d62:	bcc.n	1d40 <sysex_byte+0x14>
    1d64:	pop	{r3, r4, r5, pc}
    1d66:	nop
    1d68:	.word	0x1fff15f4
    1d6c:	.word	0x1fff1a8e
    1d70:	.word	0x1fff1a94

00001d74 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1d74:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1d78:	ldr	r6, [pc, #132]	; (1e00 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1d7a:	ldr	r7, [pc, #136]	; (1e04 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    1d7c:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1d7e:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1d80:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1d82:	strb	r3, [r7, #0]
	if (!tx_packet) {
    1d84:	cbz	r1, 1db4 <usb_midi_write_packed+0x40>
    1d86:	ldr	r5, [pc, #128]	; (1e08 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    1d88:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1d8a:	add.w	r2, r1, r3, lsl #2
    1d8e:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1d90:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1d92:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1d94:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1d98:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1d9a:	bhi.n	1da6 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    1d9c:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    1d9e:	movs	r3, #0
    1da0:	strb	r3, [r7, #0]
    1da2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    1da6:	movs	r3, #64	; 0x40
    1da8:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1daa:	movs	r0, #4
    1dac:	bl	2454 <usb_tx>
		tx_packet = NULL;
    1db0:	str	r4, [r6, #0]
    1db2:	b.n	1d9e <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1db4:	ldr.w	r9, [pc, #84]	; 1e0c <usb_midi_write_packed+0x98>
    1db8:	ldrb.w	r3, [r9]
    1dbc:	cmp	r3, #0
    1dbe:	beq.n	1da2 <usb_midi_write_packed+0x2e>
    1dc0:	ldr	r5, [pc, #68]	; (1e08 <usb_midi_write_packed+0x94>)
    1dc2:	movw	r4, #48001	; 0xbb81
    1dc6:	b.n	1dda <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1dc8:	subs	r4, #1
    1dca:	beq.n	1df2 <usb_midi_write_packed+0x7e>
    1dcc:	ldrb	r3, [r5, #0]
    1dce:	cbnz	r3, 1df2 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    1dd0:	bl	2f58 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1dd4:	ldrb.w	r3, [r9]
    1dd8:	cbz	r3, 1dfa <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1dda:	movs	r0, #4
    1ddc:	bl	2340 <usb_tx_packet_count>
    1de0:	cmp	r0, #5
    1de2:	bhi.n	1dc8 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    1de4:	bl	2278 <usb_malloc>
    1de8:	mov	r1, r0
    1dea:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    1dec:	cmp	r0, #0
    1dee:	beq.n	1dc8 <usb_midi_write_packed+0x54>
    1df0:	b.n	1d88 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    1df2:	movs	r3, #1
    1df4:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    1df6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1dfa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1dfe:	nop
    1e00:	.word	0x1fff1610
    1e04:	.word	0x1fff15e4
    1e08:	.word	0x1fff1614
    1e0c:	.word	0x1fff1720

00001e10 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    1e10:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    1e12:	ldr	r3, [pc, #32]	; (1e34 <usb_midi_flush_output+0x24>)
    1e14:	ldrb	r4, [r3, #0]
    1e16:	cbnz	r4, 1e22 <usb_midi_flush_output+0x12>
    1e18:	ldr	r5, [pc, #28]	; (1e38 <usb_midi_flush_output+0x28>)
    1e1a:	ldr	r1, [r5, #0]
    1e1c:	cbz	r1, 1e22 <usb_midi_flush_output+0x12>
    1e1e:	ldrh	r3, [r1, #2]
    1e20:	cbnz	r3, 1e24 <usb_midi_flush_output+0x14>
    1e22:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1e24:	lsls	r3, r3, #2
    1e26:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1e28:	movs	r0, #4
    1e2a:	bl	2454 <usb_tx>
		tx_packet = NULL;
    1e2e:	str	r4, [r5, #0]
    1e30:	pop	{r3, r4, r5, pc}
    1e32:	nop
    1e34:	.word	0x1fff15e4
    1e38:	.word	0x1fff1610

00001e3c <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1e3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1e40:	ldr	r6, [pc, #692]	; (20f8 <usb_midi_read+0x2bc>)
    1e42:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1e44:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1e46:	cmp	r3, #0
    1e48:	beq.w	1f70 <usb_midi_read+0x134>
    1e4c:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    1e4e:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1e50:	lsrs	r1, r2, #2
    1e52:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    1e56:	adds	r2, #4
	if (index < rx_packet->len) {
    1e58:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1e5a:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    1e5c:	bcs.n	1ee4 <usb_midi_read+0xa8>
		rx_packet->index = index;
    1e5e:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    1e60:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1e64:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    1e68:	ldr	r1, [pc, #656]	; (20fc <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1e6a:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1e6e:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    1e72:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1e76:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1e78:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    1e7c:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1e7e:	bls.n	1eb6 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1e80:	subs	r3, r6, #2
    1e82:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1e84:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1e88:	bls.n	1f28 <usb_midi_read+0xec>
    1e8a:	cmp	r6, #5
    1e8c:	beq.n	1f20 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    1e8e:	cmp	r6, #4
    1e90:	beq.w	21dc <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    1e94:	subs	r3, r6, #5
    1e96:	cmp	r3, #2
    1e98:	bls.n	1f9a <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    1e9a:	cmp	r6, #15
    1e9c:	bne.n	1ebc <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    1e9e:	cmp	r0, #247	; 0xf7
    1ea0:	bhi.n	1f28 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    1ea2:	cmp	r0, #240	; 0xf0
    1ea4:	beq.n	1eac <usb_midi_read+0x70>
    1ea6:	ldr	r3, [pc, #600]	; (2100 <usb_midi_read+0x2c4>)
    1ea8:	ldrh	r3, [r3, #0]
    1eaa:	cbz	r3, 1ebc <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    1eac:	bl	1d2c <sysex_byte>
		}
	}
	return 0;
    1eb0:	movs	r0, #0
    1eb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    1eb6:	cbz	r7, 1ec2 <usb_midi_read+0x86>
    1eb8:	cmp	r5, r7
    1eba:	beq.n	1ec2 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    1ebc:	movs	r0, #0
    1ebe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1ec2:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    1ec4:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1ec8:	beq.w	1fda <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1ecc:	cmp	r6, #9
    1ece:	beq.n	1ef4 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    1ed0:	cmp	r6, #10
    1ed2:	bne.w	1ffe <usb_midi_read+0x1c2>
    1ed6:	cmp	r3, #10
    1ed8:	bne.n	1ebc <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    1eda:	ldr	r3, [pc, #552]	; (2104 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1edc:	ldr	r2, [pc, #552]	; (2108 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    1ede:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1ee0:	movs	r1, #160	; 0xa0
    1ee2:	b.n	1fe8 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    1ee4:	mov	r0, r3
    1ee6:	bl	22b8 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1eea:	movs	r0, #5
    1eec:	bl	2304 <usb_rx>
    1ef0:	str	r0, [r6, #0]
    1ef2:	b.n	1e60 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1ef4:	cmp	r3, #9
    1ef6:	bne.n	1ebc <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    1ef8:	lsrs	r7, r4, #24
    1efa:	beq.w	21f4 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1efe:	ldr	r3, [pc, #524]	; (210c <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1f00:	ldr	r2, [pc, #516]	; (2108 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    1f02:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1f04:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1f06:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1f0a:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1f0c:	uxtb	r5, r5
    1f0e:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1f10:	cmp	r3, #0
    1f12:	beq.w	2050 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1f16:	mov	r2, r4
    1f18:	mov	r1, r6
    1f1a:	mov	r0, r5
    1f1c:	blx	r3
    1f1e:	b.n	2050 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1f20:	cmp	r0, #240	; 0xf0
    1f22:	bls.n	1fac <usb_midi_read+0x170>
    1f24:	cmp	r0, #247	; 0xf7
    1f26:	beq.n	1fac <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    1f28:	subs	r0, #241	; 0xf1
    1f2a:	cmp	r0, #14
    1f2c:	bhi.n	1ebc <usb_midi_read+0x80>
    1f2e:	add	r3, pc, #4	; (adr r3, 1f34 <usb_midi_read+0xf8>)
    1f30:	ldr.w	pc, [r3, r0, lsl #2]
    1f34:	.word	0x000020eb
    1f38:	.word	0x000020cf
    1f3c:	.word	0x000020bd
    1f40:	.word	0x00001ebd
    1f44:	.word	0x00001ebd
    1f48:	.word	0x000020af
    1f4c:	.word	0x00001ebd
    1f50:	.word	0x0000218f
    1f54:	.word	0x00001ebd
    1f58:	.word	0x00002159
    1f5c:	.word	0x00002173
    1f60:	.word	0x00002097
    1f64:	.word	0x00001ebd
    1f68:	.word	0x0000207f
    1f6c:	.word	0x00002063
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    1f70:	ldr	r3, [pc, #412]	; (2110 <usb_midi_read+0x2d4>)
    1f72:	ldrb	r3, [r3, #0]
    1f74:	cmp	r3, #0
    1f76:	beq.n	1ebc <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1f78:	movs	r0, #5
    1f7a:	bl	2304 <usb_rx>
    1f7e:	mov	r3, r0
    1f80:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    1f82:	cmp	r0, #0
    1f84:	beq.n	1ebc <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    1f86:	ldrh	r5, [r0, #0]
    1f88:	cmp	r5, #0
    1f8a:	bne.w	1e4e <usb_midi_read+0x12>
			usb_free(rx_packet);
    1f8e:	bl	22b8 <usb_free>
			rx_packet = NULL;
    1f92:	str	r5, [r6, #0]
			return 0;
    1f94:	mov	r0, r5
    1f96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    1f9a:	bl	1d2c <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    1f9e:	ubfx	r0, r4, #16, #8
    1fa2:	bl	1d2c <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    1fa6:	cmp	r6, #7
    1fa8:	bne.n	1fb0 <usb_midi_read+0x174>
    1faa:	lsrs	r0, r4, #24
    1fac:	bl	1d2c <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    1fb0:	ldr	r3, [pc, #332]	; (2100 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1fb2:	ldr	r2, [pc, #352]	; (2114 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    1fb4:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    1fb6:	ldr	r0, [pc, #352]	; (2118 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1fb8:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1fba:	ldr	r5, [pc, #352]	; (211c <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1fbc:	ldr	r2, [pc, #328]	; (2108 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    1fbe:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1fc0:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1fc2:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1fc4:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1fc6:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1fc8:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1fca:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    1fcc:	cbz	r4, 2012 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    1fce:	movs	r2, #1
    1fd0:	ldr	r0, [pc, #332]	; (2120 <usb_midi_read+0x2e4>)
    1fd2:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1fd4:	movs	r0, #1
    1fd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1fda:	cmp	r3, #8
    1fdc:	bne.w	1ebc <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    1fe0:	ldr	r3, [pc, #320]	; (2124 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1fe2:	ldr	r2, [pc, #292]	; (2108 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    1fe4:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1fe6:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1fe8:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1fec:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1fee:	uxtb	r5, r5
    1ff0:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1ff2:	cbz	r3, 2050 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1ff4:	mov	r0, r5
    1ff6:	mov	r2, r4
    1ff8:	mov	r1, r6
    1ffa:	blx	r3
    1ffc:	b.n	2050 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    1ffe:	cmp	r6, #11
    2000:	bne.n	2026 <usb_midi_read+0x1ea>
    2002:	cmp	r3, #11
    2004:	bne.w	1ebc <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    2008:	ldr	r3, [pc, #284]	; (2128 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    200a:	ldr	r2, [pc, #252]	; (2108 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    200c:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    200e:	movs	r1, #176	; 0xb0
    2010:	b.n	1fe8 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    2012:	ldr	r3, [pc, #280]	; (212c <usb_midi_read+0x2f0>)
    2014:	ldr	r3, [r3, #0]
    2016:	cmp	r3, #0
    2018:	beq.w	2212 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    201c:	ldr	r0, [pc, #256]	; (2120 <usb_midi_read+0x2e4>)
    201e:	blx	r3
		}
		return 1;
    2020:	movs	r0, #1
    2022:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    2026:	cmp	r6, #12
    2028:	bne.w	222c <usb_midi_read+0x3f0>
    202c:	cmp	r3, #12
    202e:	bne.w	1ebc <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2032:	ldr	r3, [pc, #252]	; (2130 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2034:	ldr	r2, [pc, #208]	; (2108 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    2036:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2038:	movs	r1, #192	; 0xc0
    203a:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    203c:	uxtb	r5, r5
    203e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2042:	cmp	r3, #0
    2044:	beq.w	21d8 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2048:	mov	r0, r5
    204a:	mov	r1, r6
    204c:	lsrs	r4, r4, #24
    204e:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2050:	ldr	r1, [pc, #224]	; (2134 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2052:	ldr	r2, [pc, #196]	; (2118 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2054:	ldr	r3, [pc, #196]	; (211c <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2056:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2058:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    205a:	strb	r4, [r3, #0]
		return 1;
    205c:	movs	r0, #1
    205e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2062:	ldr	r3, [pc, #212]	; (2138 <usb_midi_read+0x2fc>)
    2064:	ldr	r3, [r3, #0]
    2066:	cmp	r3, #0
    2068:	beq.w	2218 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    206c:	blx	r3
    206e:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2072:	ldr	r3, [pc, #148]	; (2108 <usb_midi_read+0x2cc>)
    2074:	uxtb	r5, r5
    2076:	lsrs	r4, r4, #24
    2078:	strb.w	r8, [r3]
		goto return_message;
    207c:	b.n	2050 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    207e:	ldr	r3, [pc, #188]	; (213c <usb_midi_read+0x300>)
    2080:	ldr	r3, [r3, #0]
    2082:	cmp	r3, #0
    2084:	bne.n	206c <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2086:	ldr	r3, [pc, #184]	; (2140 <usb_midi_read+0x304>)
    2088:	ldr	r3, [r3, #0]
    208a:	cbz	r3, 20b6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    208c:	movs	r0, #254	; 0xfe
    208e:	blx	r3
    2090:	ubfx	r6, r4, #16, #8
    2094:	b.n	2072 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2096:	ldr	r3, [pc, #172]	; (2144 <usb_midi_read+0x308>)
    2098:	ldr	r3, [r3, #0]
    209a:	cmp	r3, #0
    209c:	bne.n	206c <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    209e:	ldr	r3, [pc, #160]	; (2140 <usb_midi_read+0x304>)
    20a0:	ldr	r3, [r3, #0]
    20a2:	cbz	r3, 20b6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    20a4:	movs	r0, #252	; 0xfc
    20a6:	blx	r3
    20a8:	ubfx	r6, r4, #16, #8
    20ac:	b.n	2072 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    20ae:	ldr	r3, [pc, #152]	; (2148 <usb_midi_read+0x30c>)
    20b0:	ldr	r3, [r3, #0]
    20b2:	cmp	r3, #0
    20b4:	bne.n	206c <usb_midi_read+0x230>
    20b6:	ubfx	r6, r4, #16, #8
    20ba:	b.n	2072 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    20bc:	ldr	r3, [pc, #140]	; (214c <usb_midi_read+0x310>)
    20be:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    20c0:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    20c4:	cmp	r3, #0
    20c6:	beq.n	2072 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    20c8:	mov	r0, r6
    20ca:	blx	r3
    20cc:	b.n	2072 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    20ce:	ldr	r3, [pc, #128]	; (2150 <usb_midi_read+0x314>)
    20d0:	ldr	r2, [r3, #0]
    20d2:	cmp	r2, #0
    20d4:	beq.n	20b6 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    20d6:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    20d8:	lsrs	r3, r4, #17
    20da:	and.w	r0, r6, #127	; 0x7f
    20de:	and.w	r3, r3, #16256	; 0x3f80
    20e2:	orrs	r0, r3
    20e4:	uxtb	r6, r6
    20e6:	blx	r2
    20e8:	b.n	2072 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    20ea:	ldr	r3, [pc, #104]	; (2154 <usb_midi_read+0x318>)
    20ec:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    20ee:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    20f2:	cmp	r3, #0
    20f4:	bne.n	20c8 <usb_midi_read+0x28c>
    20f6:	b.n	2072 <usb_midi_read+0x236>
    20f8:	.word	0x1fff161c
    20fc:	.word	0x1fff1a92
    2100:	.word	0x1fff1a8e
    2104:	.word	0x1fff15f8
    2108:	.word	0x1fff1a8c
    210c:	.word	0x1fff162c
    2110:	.word	0x1fff1720
    2114:	.word	0x1fff15f4
    2118:	.word	0x1fff1a90
    211c:	.word	0x1fff1a91
    2120:	.word	0x1fff1a94
    2124:	.word	0x1fff1624
    2128:	.word	0x1fff1628
    212c:	.word	0x1fff160c
    2130:	.word	0x1fff15e8
    2134:	.word	0x1fff1a93
    2138:	.word	0x1fff15d4
    213c:	.word	0x1fff15d8
    2140:	.word	0x1fff15dc
    2144:	.word	0x1fff1618
    2148:	.word	0x1fff1608
    214c:	.word	0x1fff1620
    2150:	.word	0x1fff15f0
    2154:	.word	0x1fff1604
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2158:	ldr	r3, [pc, #252]	; (2258 <usb_midi_read+0x41c>)
    215a:	ldr	r3, [r3, #0]
    215c:	cmp	r3, #0
    215e:	bne.n	206c <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2160:	ldr	r3, [pc, #248]	; (225c <usb_midi_read+0x420>)
    2162:	ldr	r3, [r3, #0]
    2164:	cmp	r3, #0
    2166:	beq.n	20b6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2168:	movs	r0, #250	; 0xfa
    216a:	blx	r3
    216c:	ubfx	r6, r4, #16, #8
    2170:	b.n	2072 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2172:	ldr	r3, [pc, #236]	; (2260 <usb_midi_read+0x424>)
    2174:	ldr	r3, [r3, #0]
    2176:	cmp	r3, #0
    2178:	bne.w	206c <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    217c:	ldr	r3, [pc, #220]	; (225c <usb_midi_read+0x420>)
    217e:	ldr	r3, [r3, #0]
    2180:	cmp	r3, #0
    2182:	beq.n	20b6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2184:	movs	r0, #251	; 0xfb
    2186:	blx	r3
    2188:	ubfx	r6, r4, #16, #8
    218c:	b.n	2072 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    218e:	ldr	r3, [pc, #212]	; (2264 <usb_midi_read+0x428>)
    2190:	ldr	r3, [r3, #0]
    2192:	cmp	r3, #0
    2194:	bne.w	206c <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2198:	ldr	r3, [pc, #192]	; (225c <usb_midi_read+0x420>)
    219a:	ldr	r3, [r3, #0]
    219c:	cmp	r3, #0
    219e:	beq.n	20b6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    21a0:	movs	r0, #248	; 0xf8
    21a2:	blx	r3
    21a4:	ubfx	r6, r4, #16, #8
    21a8:	b.n	2072 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    21aa:	cmp	r3, #14
    21ac:	bne.w	1ebc <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    21b0:	ldr	r2, [pc, #180]	; (2268 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    21b2:	ldr	r3, [pc, #184]	; (226c <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    21b4:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    21b6:	movs	r1, #224	; 0xe0
    21b8:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    21ba:	cmp	r2, #0
    21bc:	beq.n	224e <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    21be:	lsrs	r6, r4, #16
    21c0:	lsrs	r1, r4, #17
    21c2:	and.w	r3, r6, #127	; 0x7f
    21c6:	and.w	r1, r1, #16256	; 0x3f80
    21ca:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    21cc:	uxtb	r5, r5
    21ce:	sub.w	r1, r1, #8192	; 0x2000
    21d2:	mov	r0, r5
    21d4:	blx	r2
    21d6:	uxtb	r6, r6
    21d8:	lsrs	r4, r4, #24
    21da:	b.n	2050 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    21dc:	bl	1d2c <sysex_byte>
		sysex_byte(n >> 16);
    21e0:	ubfx	r0, r4, #16, #8
    21e4:	bl	1d2c <sysex_byte>
		sysex_byte(n >> 24);
    21e8:	lsrs	r0, r4, #24
    21ea:	bl	1d2c <sysex_byte>
		return 0;
    21ee:	movs	r0, #0
    21f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    21f4:	ldr	r3, [pc, #120]	; (2270 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    21f6:	ldr	r2, [pc, #116]	; (226c <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    21f8:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    21fa:	movs	r1, #128	; 0x80
    21fc:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    21fe:	uxtb	r5, r5
    2200:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2204:	cbz	r3, 2228 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2206:	mov	r1, r6
    2208:	mov	r0, r5
    220a:	mov	r2, r7
    220c:	blx	r3
    220e:	mov	r4, r7
    2210:	b.n	2050 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2212:	movs	r0, #1
    2214:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2218:	ldr	r3, [pc, #64]	; (225c <usb_midi_read+0x420>)
    221a:	ldr	r3, [r3, #0]
    221c:	cmp	r3, #0
    221e:	beq.w	20b6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    2222:	movs	r0, #255	; 0xff
    2224:	blx	r3
    2226:	b.n	20b6 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2228:	mov	r4, r3
    222a:	b.n	2050 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    222c:	cmp	r6, #13
    222e:	bne.n	21aa <usb_midi_read+0x36e>
    2230:	cmp	r3, #13
    2232:	bne.w	1ebc <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2236:	ldr	r3, [pc, #60]	; (2274 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2238:	ldr	r2, [pc, #48]	; (226c <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    223a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    223c:	movs	r1, #208	; 0xd0
    223e:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2240:	uxtb	r5, r5
    2242:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2246:	cmp	r3, #0
    2248:	bne.w	2048 <usb_midi_read+0x20c>
    224c:	b.n	21d8 <usb_midi_read+0x39c>
    224e:	ubfx	r6, r4, #16, #8
    2252:	uxtb	r5, r5
    2254:	lsrs	r4, r4, #24
    2256:	b.n	2050 <usb_midi_read+0x214>
    2258:	.word	0x1fff1600
    225c:	.word	0x1fff15dc
    2260:	.word	0x1fff15e0
    2264:	.word	0x1fff15d0
    2268:	.word	0x1fff15ec
    226c:	.word	0x1fff1a8c
    2270:	.word	0x1fff1624
    2274:	.word	0x1fff15fc

00002278 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2278:	cpsid	i
	avail = usb_buffer_available;
    227a:	ldr	r0, [pc, #52]	; (22b0 <usb_malloc+0x38>)
    227c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    227e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2282:	cmp	r3, #29
    2284:	bgt.n	22a8 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2286:	mov.w	r1, #2147483648	; 0x80000000
    228a:	lsrs	r1, r3
    228c:	bic.w	r2, r2, r1
    2290:	str	r2, [r0, #0]
	__enable_irq();
    2292:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2294:	ldr	r0, [pc, #28]	; (22b4 <usb_malloc+0x3c>)
    2296:	add.w	r3, r3, r3, lsl #3
    229a:	lsls	r3, r3, #3
    229c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    229e:	movs	r1, #0
    22a0:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    22a2:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    22a4:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    22a6:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    22a8:	cpsie	i
		return NULL;
    22aa:	movs	r0, #0
    22ac:	bx	lr
    22ae:	nop
    22b0:	.word	0x1fff0c44
    22b4:	.word	0x1fff03d0

000022b8 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    22b8:	ldr	r3, [pc, #52]	; (22f0 <usb_free+0x38>)
    22ba:	ldr	r2, [pc, #56]	; (22f4 <usb_free+0x3c>)
    22bc:	subs	r3, r0, r3
    22be:	umull	r2, r3, r2, r3
    22c2:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    22c4:	cmp	r3, #29
    22c6:	bhi.n	22e2 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    22c8:	ldr	r2, [pc, #44]	; (22f8 <usb_free+0x40>)
    22ca:	ldrb	r2, [r2, #0]
    22cc:	cbnz	r2, 22e4 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    22ce:	cpsid	i
	usb_buffer_available |= mask;
    22d0:	ldr	r0, [pc, #40]	; (22fc <usb_free+0x44>)
    22d2:	mov.w	r1, #2147483648	; 0x80000000
    22d6:	ldr	r2, [r0, #0]
    22d8:	lsr.w	r3, r1, r3
    22dc:	orrs	r2, r3
    22de:	str	r2, [r0, #0]
	__enable_irq();
    22e0:	cpsie	i
    22e2:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    22e4:	ldr	r2, [pc, #24]	; (2300 <usb_free+0x48>)
    22e6:	ldrb	r2, [r2, #0]
    22e8:	cmp	r2, #0
    22ea:	beq.n	22ce <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    22ec:	b.w	236c <usb_rx_memory>
    22f0:	.word	0x1fff03d0
    22f4:	.word	0x38e38e39
    22f8:	.word	0x1fff1715
    22fc:	.word	0x1fff0c44
    2300:	.word	0x1fff1720

00002304 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2304:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2306:	cmp	r3, #4
    2308:	bhi.n	2334 <usb_rx+0x30>
	__disable_irq();
    230a:	cpsid	i
	ret = rx_first[endpoint];
    230c:	ldr	r1, [pc, #40]	; (2338 <usb_rx+0x34>)
    230e:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2312:	cbz	r0, 2330 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2314:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2316:	ldr	r4, [pc, #36]	; (233c <usb_rx+0x38>)
    2318:	ldrh	r5, [r0, #0]
    231a:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    231e:	ldr	r6, [r0, #4]
    2320:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2324:	subs	r2, r2, r5
    2326:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    232a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    232c:	pop	{r4, r5, r6}
    232e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2330:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2332:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2334:	movs	r0, #0
    2336:	bx	lr
    2338:	.word	0x1fff168c
    233c:	.word	0x1fff1bb8

00002340 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2340:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2342:	cmp	r0, #4
    2344:	bhi.n	235e <usb_tx_packet_count+0x1e>
	__disable_irq();
    2346:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2348:	ldr	r3, [pc, #28]	; (2368 <usb_tx_packet_count+0x28>)
    234a:	ldr.w	r3, [r3, r0, lsl #2]
    234e:	cbz	r3, 2362 <usb_tx_packet_count+0x22>
    2350:	movs	r0, #0
    2352:	ldr	r3, [r3, #4]
    2354:	adds	r0, #1
    2356:	cmp	r3, #0
    2358:	bne.n	2352 <usb_tx_packet_count+0x12>
	__enable_irq();
    235a:	cpsie	i
	return count;
    235c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    235e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2360:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2362:	mov	r0, r3
    2364:	b.n	235a <usb_tx_packet_count+0x1a>
    2366:	nop
    2368:	.word	0x1fff16e4

0000236c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    236c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    236e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2370:	ldr	r2, [pc, #204]	; (2440 <usb_rx_memory+0xd4>)
    2372:	ldrb	r3, [r2, #0]
    2374:	lsls	r3, r3, #28
    2376:	bpl.n	2386 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2378:	ldr	r3, [pc, #200]	; (2444 <usb_rx_memory+0xd8>)
    237a:	ldr	r1, [r3, #32]
    237c:	cmp	r1, #0
    237e:	beq.n	2408 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2380:	ldr	r1, [r3, #40]	; 0x28
    2382:	cmp	r1, #0
    2384:	beq.n	2424 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2386:	ldrb	r3, [r2, #1]
    2388:	lsls	r5, r3, #28
    238a:	bpl.n	239a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    238c:	ldr	r3, [pc, #180]	; (2444 <usb_rx_memory+0xd8>)
    238e:	ldr	r1, [r3, #64]	; 0x40
    2390:	cmp	r1, #0
    2392:	beq.n	2430 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2394:	ldr	r1, [r3, #72]	; 0x48
    2396:	cmp	r1, #0
    2398:	beq.n	2428 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    239a:	ldrb	r3, [r2, #2]
    239c:	lsls	r4, r3, #28
    239e:	bpl.n	23ae <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    23a0:	ldr	r3, [pc, #160]	; (2444 <usb_rx_memory+0xd8>)
    23a2:	ldr	r1, [r3, #96]	; 0x60
    23a4:	cmp	r1, #0
    23a6:	beq.n	2434 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    23a8:	ldr	r1, [r3, #104]	; 0x68
    23aa:	cmp	r1, #0
    23ac:	beq.n	242c <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    23ae:	ldrb	r3, [r2, #3]
    23b0:	lsls	r1, r3, #28
    23b2:	bpl.n	23c4 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    23b4:	ldr	r3, [pc, #140]	; (2444 <usb_rx_memory+0xd8>)
    23b6:	ldr.w	r1, [r3, #128]	; 0x80
    23ba:	cmp	r1, #0
    23bc:	beq.n	243c <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    23be:	ldr.w	r1, [r3, #136]	; 0x88
    23c2:	cbz	r1, 23ea <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    23c4:	ldrb	r3, [r2, #4]
    23c6:	lsls	r3, r3, #28
    23c8:	bpl.n	23dc <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    23ca:	ldr	r3, [pc, #120]	; (2444 <usb_rx_memory+0xd8>)
    23cc:	ldr.w	r2, [r3, #160]	; 0xa0
    23d0:	cmp	r2, #0
    23d2:	beq.n	2438 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    23d4:	ldr.w	r2, [r3, #168]	; 0xa8
    23d8:	movs	r4, #21
    23da:	cbz	r2, 23ec <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    23dc:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    23de:	ldr	r3, [pc, #104]	; (2448 <usb_rx_memory+0xdc>)
    23e0:	movs	r2, #0
    23e2:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    23e4:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    23e6:	b.w	22b8 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    23ea:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    23ec:	ldr	r1, [pc, #88]	; (2448 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    23ee:	ldr	r5, [pc, #92]	; (244c <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    23f0:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    23f2:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    23f6:	add.w	r3, r3, r4, lsl #3
    23fa:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    23fc:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    23fe:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2400:	strb	r2, [r1, #0]
				__enable_irq();
    2402:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2404:	pop	{r4, r5}
    2406:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2408:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    240a:	ldr	r4, [pc, #60]	; (2448 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    240c:	ldr	r5, [pc, #64]	; (2450 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    240e:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2410:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2414:	add.w	r3, r3, r2, lsl #3
    2418:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    241a:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    241c:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    241e:	strb	r2, [r4, #0]
				__enable_irq();
    2420:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2422:	b.n	2404 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2424:	movs	r4, #5
    2426:	b.n	23ec <usb_rx_memory+0x80>
    2428:	movs	r4, #9
    242a:	b.n	23ec <usb_rx_memory+0x80>
    242c:	movs	r4, #13
    242e:	b.n	23ec <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2430:	movs	r2, #8
    2432:	b.n	240a <usb_rx_memory+0x9e>
    2434:	movs	r2, #12
    2436:	b.n	240a <usb_rx_memory+0x9e>
    2438:	movs	r2, #20
    243a:	b.n	240a <usb_rx_memory+0x9e>
    243c:	movs	r2, #16
    243e:	b.n	240a <usb_rx_memory+0x9e>
    2440:	.word	0x000048f0
    2444:	.word	0x1fff0000
    2448:	.word	0x1fff1715
    244c:	.word	0x004000c8
    2450:	.word	0x00400088

00002454 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2454:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2456:	cmp	r3, #4
    2458:	bhi.n	2496 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    245a:	ldr	r2, [pc, #108]	; (24c8 <usb_tx+0x74>)
    245c:	lsls	r0, r0, #5
    245e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2462:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2464:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2466:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2468:	ldr	r4, [pc, #96]	; (24cc <usb_tx+0x78>)
    246a:	ldrb	r2, [r4, r3]
    246c:	cmp	r2, #3
    246e:	bhi.n	24a8 <usb_tx+0x54>
    2470:	tbb	[pc, r2]
    2474:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2478:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    247a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    247c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    247e:	tst.w	r0, #8
    2482:	ite	ne
    2484:	movne	r3, #200	; 0xc8
    2486:	moveq	r3, #136	; 0x88
    2488:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    248c:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    248e:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2490:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2492:	cpsie	i
}
    2494:	pop	{r4, r5}
    2496:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2498:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    249a:	movs	r2, #2
		break;
    249c:	b.n	247a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    249e:	movs	r2, #5
    24a0:	b.n	247a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    24a2:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    24a4:	movs	r2, #4
		break;
    24a6:	b.n	247a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    24a8:	ldr	r2, [pc, #36]	; (24d0 <usb_tx+0x7c>)
    24aa:	ldr.w	r0, [r2, r3, lsl #2]
    24ae:	cbz	r0, 24c0 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    24b0:	ldr	r2, [pc, #32]	; (24d4 <usb_tx+0x80>)
    24b2:	ldr.w	r0, [r2, r3, lsl #2]
    24b6:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    24b8:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    24bc:	cpsie	i
		return;
    24be:	b.n	2494 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    24c0:	str.w	r1, [r2, r3, lsl #2]
    24c4:	ldr	r2, [pc, #12]	; (24d4 <usb_tx+0x80>)
    24c6:	b.n	24b8 <usb_tx+0x64>
    24c8:	.word	0x1fff0000
    24cc:	.word	0x1fff1724
    24d0:	.word	0x1fff16e4
    24d4:	.word	0x1fff16f8

000024d8 <usb_isr>:
}



void usb_isr(void)
{
    24d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    24dc:	ldr.w	fp, [pc, #776]	; 27e8 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    24e0:	ldr.w	sl, [pc, #776]	; 27ec <usb_isr+0x314>
}



void usb_isr(void)
{
    24e4:	sub	sp, #28
    24e6:	b.n	2572 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    24e8:	ldr	r7, [pc, #680]	; (2794 <usb_isr+0x2bc>)
    24ea:	mov.w	r8, r3, lsr #2
    24ee:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    24f2:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    24f4:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    24f8:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    24fc:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    24fe:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2502:	and.w	r4, r3, #255	; 0xff
    2506:	cmp	r3, #0
    2508:	bne.w	270c <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    250c:	ldr.w	r3, [r7, r8, lsl #3]
    2510:	lsrs	r3, r3, #16
    2512:	uxth	r1, r3
    2514:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2518:	cmp	r3, #0
    251a:	beq.w	26fa <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    251e:	ldr	r3, [pc, #632]	; (2798 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2520:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2524:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2528:	ldr.w	r2, [r3, r6, lsl #2]
    252c:	cmp	r2, #0
    252e:	beq.w	299c <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2532:	ldr	r5, [pc, #616]	; (279c <usb_isr+0x2c4>)
    2534:	ldr.w	r3, [r5, r6, lsl #2]
    2538:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    253a:	ldr	r4, [pc, #612]	; (27a0 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    253c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2540:	ldrh.w	r3, [r4, r6, lsl #1]
    2544:	add	r1, r3
    2546:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    254a:	bl	2278 <usb_malloc>
					if (packet) {
    254e:	cmp	r0, #0
    2550:	beq.w	298e <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2554:	ldr	r2, [pc, #588]	; (27a4 <usb_isr+0x2cc>)
    2556:	ldr	r3, [pc, #592]	; (27a8 <usb_isr+0x2d0>)
    2558:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    255c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2560:	it	ne
    2562:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2564:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2568:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    256c:	movs	r3, #8
    256e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2572:	ldrb.w	r4, [fp]
    2576:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2578:	lsls	r0, r4, #29
    257a:	bpl.n	25b6 <usb_isr+0xde>
		if (usb_configuration) {
    257c:	ldr	r3, [pc, #556]	; (27ac <usb_isr+0x2d4>)
    257e:	ldrb	r3, [r3, #0]
    2580:	cbz	r3, 25b0 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2582:	ldr	r1, [pc, #556]	; (27b0 <usb_isr+0x2d8>)
    2584:	ldrb	r2, [r1, #0]
			if (t) {
    2586:	and.w	r3, r2, #255	; 0xff
    258a:	cbz	r2, 2596 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    258c:	subs	r3, #1
    258e:	uxtb	r3, r3
    2590:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2592:	cbnz	r3, 2596 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2594:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2596:	ldr	r1, [pc, #540]	; (27b4 <usb_isr+0x2dc>)
    2598:	ldrb	r2, [r1, #0]
			if (t) {
    259a:	and.w	r3, r2, #255	; 0xff
    259e:	cbz	r2, 25ac <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    25a0:	subs	r3, #1
    25a2:	uxtb	r3, r3
    25a4:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    25a6:	cmp	r3, #0
    25a8:	beq.w	293a <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    25ac:	bl	1e10 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    25b0:	movs	r3, #4
    25b2:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    25b6:	and.w	r3, r4, #8
    25ba:	and.w	r2, r3, #255	; 0xff
    25be:	cmp	r3, #0
    25c0:	beq.w	2754 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    25c4:	ldrb.w	r3, [sl]
    25c8:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    25ca:	lsrs	r6, r3, #4
    25cc:	bne.n	24e8 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    25ce:	lsrs	r4, r3, #2
    25d0:	ldr.w	r9, [pc, #448]	; 2794 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    25d4:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    25d8:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    25dc:	ubfx	r2, r2, #2, #4
    25e0:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    25e2:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    25e4:	cmp	r2, #12
    25e6:	bhi.w	26f2 <usb_isr+0x21a>
    25ea:	tbb	[pc, r2]
    25ee:	.short	0x7878
    25f0:	.word	0x82828282
    25f4:	.word	0x82438282
    25f8:	.short	0x8282
    25fa:	.byte	0x07
    25fb:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    25fc:	ldr	r0, [r1, #0]
    25fe:	ldr	r5, [pc, #440]	; (27b8 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2600:	ldr	r3, [pc, #416]	; (27a4 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2602:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2604:	ldr	r7, [pc, #436]	; (27bc <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2606:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    260a:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    260c:	ldr	r6, [pc, #432]	; (27c0 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    260e:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2610:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2614:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2616:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2618:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    261a:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    261e:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2620:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2624:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2628:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    262a:	bhi.w	27f0 <usb_isr+0x318>
    262e:	cmp.w	r1, #1664	; 0x680
    2632:	bcs.w	2c5c <usb_isr+0x784>
    2636:	cmp.w	r1, #258	; 0x102
    263a:	beq.w	2a0a <usb_isr+0x532>
    263e:	bhi.w	29d4 <usb_isr+0x4fc>
    2642:	cmp	r1, #128	; 0x80
    2644:	beq.w	2c90 <usb_isr+0x7b8>
    2648:	cmp	r1, #130	; 0x82
    264a:	bne.w	2a16 <usb_isr+0x53e>
    264e:	ldrh	r1, [r5, #4]
    2650:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2654:	cmp	r1, #5
    2656:	bhi.w	2a16 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    265a:	ldr	r3, [pc, #360]	; (27c4 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    265c:	ldr	r4, [pc, #360]	; (27c8 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    265e:	lsls	r1, r1, #2
    2660:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2662:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2664:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2666:	ldrb	r2, [r3, #0]
    2668:	lsls	r3, r2, #30
    266a:	bpl.w	2da0 <usb_isr+0x8c8>
    266e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2670:	movs	r0, #2
    2672:	b.n	2a9e <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2674:	ldr	r7, [pc, #324]	; (27bc <usb_isr+0x2e4>)
    2676:	ldr	r2, [r7, #0]
		if (data) {
    2678:	cbz	r2, 26c8 <usb_isr+0x1f0>
			size = ep0_tx_len;
    267a:	ldr	r3, [pc, #336]	; (27cc <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    267c:	ldr	r6, [pc, #320]	; (27c0 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    267e:	ldr	r1, [pc, #336]	; (27d0 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2680:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2682:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2684:	ldrb	r5, [r1, #0]
    2686:	cmp	r0, #64	; 0x40
    2688:	mov	lr, r0
    268a:	orr.w	r8, r5, #2
    268e:	it	cs
    2690:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2694:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2696:	eor.w	r4, r4, #1
    269a:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    269c:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    26a0:	ite	eq
    26a2:	moveq	r4, #136	; 0x88
    26a4:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    26a6:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    26aa:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    26ac:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    26b0:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    26b4:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    26b6:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    26b8:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    26bc:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    26be:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    26c0:	cmp	r0, #0
    26c2:	beq.w	2832 <usb_isr+0x35a>
    26c6:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    26c8:	ldr	r3, [pc, #236]	; (27b8 <usb_isr+0x2e0>)
    26ca:	ldrh	r2, [r3, #0]
    26cc:	cmp.w	r2, #1280	; 0x500
    26d0:	bne.n	26f2 <usb_isr+0x21a>
			setup.bRequest = 0;
    26d2:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    26d4:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    26d6:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    26d8:	ldr	r3, [pc, #248]	; (27d4 <usb_isr+0x2fc>)
    26da:	strb	r2, [r3, #0]
    26dc:	b.n	26f2 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    26de:	ldr	r2, [pc, #216]	; (27b8 <usb_isr+0x2e0>)
    26e0:	ldrh	r0, [r2, #0]
    26e2:	movw	r2, #8225	; 0x2021
    26e6:	cmp	r0, r2
    26e8:	beq.w	283c <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    26ec:	ldr	r2, [pc, #180]	; (27a4 <usb_isr+0x2cc>)
    26ee:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    26f2:	ldr	r2, [pc, #228]	; (27d8 <usb_isr+0x300>)
    26f4:	movs	r3, #1
    26f6:	strb	r3, [r2, #0]
    26f8:	b.n	256c <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    26fa:	ldr	r2, [pc, #168]	; (27a4 <usb_isr+0x2cc>)
    26fc:	ldr	r3, [pc, #168]	; (27a8 <usb_isr+0x2d0>)
    26fe:	tst.w	r9, #8
    2702:	it	ne
    2704:	movne	r3, r2
    2706:	str.w	r3, [r7, r8, lsl #3]
    270a:	b.n	256c <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    270c:	bl	22b8 <usb_free>
				packet = tx_first[endpoint];
    2710:	ldr	r2, [pc, #200]	; (27dc <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2712:	ldr	r1, [pc, #204]	; (27e0 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2714:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2718:	cmp	r3, #0
    271a:	beq.w	29a4 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    271e:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2720:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2722:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2726:	add.w	r2, r3, #8
    272a:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    272e:	cmp	r4, #3
    2730:	bhi.n	273e <usb_isr+0x266>
    2732:	tbb	[pc, r4]
    2736:	.short	0x022c
    2738:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    273a:	movs	r2, #2
    273c:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    273e:	ldrh	r2, [r3, #0]
    2740:	tst.w	r9, #8
    2744:	ite	eq
    2746:	moveq	r3, #136	; 0x88
    2748:	movne	r3, #200	; 0xc8
    274a:	orr.w	r3, r3, r2, lsl #16
    274e:	str.w	r3, [r7, r8, lsl #3]
    2752:	b.n	256c <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2754:	lsls	r0, r4, #31
    2756:	bmi.w	2940 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    275a:	lsls	r1, r4, #24
    275c:	bmi.w	29c0 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2760:	lsls	r2, r4, #30
    2762:	bpl.n	2772 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2764:	ldr	r2, [pc, #124]	; (27e4 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2766:	ldr	r1, [pc, #128]	; (27e8 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2768:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    276a:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    276c:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    276e:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2770:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2772:	lsls	r3, r4, #27
    2774:	bpl.n	277c <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2776:	ldr	r3, [pc, #112]	; (27e8 <usb_isr+0x310>)
    2778:	movs	r2, #16
    277a:	strb	r2, [r3, #0]
	}

}
    277c:	add	sp, #28
    277e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2782:	movs	r2, #4
    2784:	strb	r2, [r1, r6]
						break;
    2786:	b.n	273e <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2788:	movs	r2, #5
    278a:	strb	r2, [r1, r6]
						break;
    278c:	b.n	273e <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    278e:	movs	r2, #3
    2790:	strb	r2, [r1, r6]
						break;
    2792:	b.n	273e <usb_isr+0x266>
    2794:	.word	0x1fff0000
    2798:	.word	0x1fff168c
    279c:	.word	0x1fff1634
    27a0:	.word	0x1fff1bb8
    27a4:	.word	0x004000c8
    27a8:	.word	0x00400088
    27ac:	.word	0x1fff1720
    27b0:	.word	0x1fff16a1
    27b4:	.word	0x1fff15b4
    27b8:	.word	0x1fff170c
    27bc:	.word	0x1fff1630
    27c0:	.word	0x1fff16a0
    27c4:	.word	0x400720c0
    27c8:	.word	0x1fff1718
    27cc:	.word	0x1fff1648
    27d0:	.word	0x1fff1714
    27d4:	.word	0x40072098
    27d8:	.word	0x40072094
    27dc:	.word	0x1fff16e4
    27e0:	.word	0x1fff1724
    27e4:	.word	0x40072088
    27e8:	.word	0x40072080
    27ec:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    27f0:	movw	r4, #8225	; 0x2021
    27f4:	cmp	r1, r4
    27f6:	beq.w	2932 <usb_isr+0x45a>
    27fa:	bhi.n	2890 <usb_isr+0x3b8>
    27fc:	cmp.w	r1, #2176	; 0x880
    2800:	beq.w	2a96 <usb_isr+0x5be>
    2804:	cmp.w	r1, #2304	; 0x900
    2808:	bne.w	2a16 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    280c:	ldr	r2, [pc, #712]	; (2ad8 <usb_isr+0x600>)
    280e:	ldr	r4, [pc, #716]	; (2adc <usb_isr+0x604>)
    2810:	ldrb	r1, [r5, #2]
    2812:	strb	r1, [r2, #0]
    2814:	add.w	r5, r4, #160	; 0xa0
    2818:	b.n	2822 <usb_isr+0x34a>
    281a:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    281c:	cmp	r5, r4
    281e:	beq.w	2b34 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2822:	ldr	r3, [r4, #32]
    2824:	lsls	r1, r3, #24
    2826:	bpl.n	281a <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2828:	ldr	r0, [r4, #36]	; 0x24
    282a:	subs	r0, #8
    282c:	bl	22b8 <usb_free>
    2830:	b.n	281a <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2832:	cmp.w	lr, #64	; 0x40
    2836:	it	ne
    2838:	movne	r2, #0
    283a:	b.n	26c6 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    283c:	ldr	r2, [pc, #672]	; (2ae0 <usb_isr+0x608>)
    283e:	ldrb	r5, [r1, #0]
    2840:	ldrb	r0, [r1, #1]
    2842:	strb	r5, [r2, #0]
    2844:	strb	r0, [r2, #1]
    2846:	ldrb	r5, [r1, #2]
    2848:	ldrb	r0, [r1, #3]
    284a:	strb	r5, [r2, #2]
    284c:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    284e:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2850:	ldrb	r5, [r1, #4]
    2852:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2854:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2856:	ldrb	r5, [r1, #5]
    2858:	ldrb	r1, [r1, #6]
    285a:	strb	r5, [r2, #5]
    285c:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    285e:	beq.w	2a8e <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2862:	ldr	r1, [pc, #640]	; (2ae4 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2864:	ldr	r6, [pc, #640]	; (2ae8 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2866:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2868:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    286a:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    286e:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2870:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2874:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2876:	ite	eq
    2878:	moveq	r1, #136	; 0x88
    287a:	movne	r1, #200	; 0xc8
    287c:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2880:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2884:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2888:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    288a:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    288c:	str	r1, [r2, #4]
    288e:	b.n	26ec <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2890:	movw	r4, #8737	; 0x2221
    2894:	cmp	r1, r4
    2896:	bne.w	2caa <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    289a:	ldr.w	ip, [pc, #656]	; 2b2c <usb_isr+0x654>
    289e:	ldr	r3, [pc, #588]	; (2aec <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    28a0:	ldr	r1, [pc, #588]	; (2af0 <usb_isr+0x618>)
    28a2:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    28a4:	ldr.w	r5, [ip]
    28a8:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    28aa:	str	r0, [sp, #4]
    28ac:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    28ae:	movs	r0, #0
    28b0:	str	r0, [sp, #8]
    28b2:	mov	r8, r0
    28b4:	mov	ip, r0
    28b6:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    28b8:	ldr	r1, [pc, #552]	; (2ae4 <usb_isr+0x60c>)
    28ba:	ldrb	r5, [r1, #0]
    28bc:	orr.w	lr, r5, #2
    28c0:	add.w	r3, r9, lr, lsl #3
    28c4:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    28c6:	ldr	r3, [sp, #4]
    28c8:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    28ca:	ldr	r3, [sp, #12]
    28cc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    28ce:	ite	eq
    28d0:	moveq	r4, #136	; 0x88
    28d2:	movne	r4, #200	; 0xc8
    28d4:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    28d8:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    28dc:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    28e0:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    28e2:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    28e4:	ldr.w	lr, [pc, #500]	; 2adc <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    28e8:	ldr	r3, [pc, #508]	; (2ae8 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    28ea:	ldr.w	r8, [pc, #504]	; 2ae4 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    28ee:	cmp	r0, #0
    28f0:	bne.w	2a24 <usb_isr+0x54c>
    28f4:	cmp.w	ip, #64	; 0x40
    28f8:	bne.n	2932 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    28fa:	orr.w	ip, r4, #2
    28fe:	add.w	r3, r9, ip, lsl #3
    2902:	ldr	r4, [sp, #8]
    2904:	ldr.w	lr, [pc, #468]	; 2adc <usb_isr+0x604>
    2908:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    290a:	cmp	r2, #0
    290c:	bne.w	2a50 <usb_isr+0x578>
    2910:	lsls	r2, r0, #16
    2912:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2916:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    291a:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    291e:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2920:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2922:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2924:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2926:	cmp	r0, #64	; 0x40
    2928:	bne.n	2932 <usb_isr+0x45a>
    292a:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    292c:	ldr	r2, [pc, #452]	; (2af4 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    292e:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2930:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2932:	ldr	r2, [pc, #452]	; (2af8 <usb_isr+0x620>)
    2934:	movs	r3, #1
    2936:	strb	r3, [r2, #0]
    2938:	b.n	26f2 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    293a:	bl	1698 <usb_serial_flush_callback>
    293e:	b.n	25ac <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2940:	ldr	r3, [pc, #408]	; (2adc <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2942:	ldr	r0, [pc, #436]	; (2af8 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2944:	ldr	r1, [pc, #412]	; (2ae4 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2946:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2948:	mov.w	lr, #2
    294c:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2950:	ldr	r7, [pc, #424]	; (2afc <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2952:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2954:	ldr	r1, [pc, #424]	; (2b00 <usb_isr+0x628>)
    2956:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2958:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    295a:	ldr	r6, [pc, #424]	; (2b04 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    295c:	ldr	r5, [pc, #424]	; (2b08 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    295e:	ldr	r4, [pc, #428]	; (2b0c <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2960:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2962:	movs	r1, #13
    2964:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2966:	movs	r1, #255	; 0xff
    2968:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    296a:	ldr.w	lr, [pc, #452]	; 2b30 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    296e:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2970:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2972:	ldr	r5, [pc, #412]	; (2b10 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2974:	ldr	r2, [pc, #412]	; (2b14 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2976:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    297a:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    297c:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    297e:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2982:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2984:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2986:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    2988:	add	sp, #28
    298a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    298e:	ldr	r2, [pc, #392]	; (2b18 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2990:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2994:	ldrb	r3, [r2, #0]
    2996:	adds	r3, #1
    2998:	strb	r3, [r2, #0]
    299a:	b.n	256c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    299c:	str.w	r0, [r3, r6, lsl #2]
    29a0:	ldr	r5, [pc, #376]	; (2b1c <usb_isr+0x644>)
    29a2:	b.n	253a <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    29a4:	ldrb	r3, [r1, r6]
    29a6:	cmp	r3, #3
    29a8:	bhi.n	2a80 <usb_isr+0x5a8>
    29aa:	add	r2, pc, #4	; (adr r2, 29b0 <usb_isr+0x4d8>)
    29ac:	ldr.w	pc, [r2, r3, lsl #2]
    29b0:	.word	0x0000256d
    29b4:	.word	0x0000256d
    29b8:	.word	0x00002a05
    29bc:	.word	0x000029ff
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    29c0:	ldr	r1, [pc, #312]	; (2afc <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    29c2:	ldr	r3, [pc, #324]	; (2b08 <usb_isr+0x630>)
    29c4:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    29c6:	movs	r0, #13
    29c8:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    29ca:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    29cc:	lsls	r2, r4, #30
    29ce:	bpl.w	2772 <usb_isr+0x29a>
    29d2:	b.n	2764 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    29d4:	movw	r2, #770	; 0x302
    29d8:	cmp	r1, r2
    29da:	bne.w	2c9a <usb_isr+0x7c2>
    29de:	ldrh	r1, [r5, #4]
    29e0:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    29e4:	cmp	r1, #5
    29e6:	bhi.n	2a16 <usb_isr+0x53e>
    29e8:	ldrh	r2, [r5, #2]
    29ea:	cbnz	r2, 2a16 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    29ec:	ldr	r4, [pc, #268]	; (2afc <usb_isr+0x624>)
    29ee:	str	r0, [sp, #4]
    29f0:	lsls	r1, r1, #2
    29f2:	add	r4, r1
    29f4:	ldrb	r1, [r4, #0]
    29f6:	orr.w	r1, r1, #2
    29fa:	strb	r1, [r4, #0]
    29fc:	b.n	28ae <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    29fe:	movs	r3, #1
    2a00:	strb	r3, [r1, r6]
						break;
    2a02:	b.n	256c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2a04:	movs	r3, #0
    2a06:	strb	r3, [r1, r6]
						break;
    2a08:	b.n	256c <usb_isr+0x94>
    2a0a:	ldrh	r1, [r5, #4]
    2a0c:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2a10:	cmp	r1, #5
    2a12:	bls.w	2cb4 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2a16:	ldr	r2, [pc, #228]	; (2afc <usb_isr+0x624>)
    2a18:	movs	r3, #15
    2a1a:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2a1c:	ldr	r2, [pc, #216]	; (2af8 <usb_isr+0x620>)
    2a1e:	movs	r3, #1
    2a20:	strb	r3, [r2, #0]
    2a22:	b.n	26f2 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2a24:	cmp	r0, #64	; 0x40
    2a26:	bls.w	28fa <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a2a:	orr.w	r4, r4, #2
    2a2e:	add.w	r1, lr, r4, lsl #3
    2a32:	ldr	r6, [sp, #8]
    2a34:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a36:	cbz	r2, 2a68 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    2a38:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a3c:	ldr	r2, [pc, #224]	; (2b20 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    2a3e:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2a40:	mov	r3, r6
    2a42:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2a44:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2a48:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a4a:	str.w	r2, [lr, r4, lsl #3]
    2a4e:	b.n	292c <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    2a50:	ldrb.w	r3, [sp, #4]
    2a54:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a56:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2a58:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2a5a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a5c:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2a60:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a62:	str.w	r2, [lr, ip, lsl #3]
    2a66:	b.n	2926 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    2a68:	ldrb.w	r1, [sp, #4]
    2a6c:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2a6e:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a70:	ldr	r2, [pc, #140]	; (2b00 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2a72:	strb.w	r5, [r8]
    2a76:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2a78:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a7a:	str.w	r2, [lr, r4, lsl #3]
    2a7e:	b.n	292c <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2a80:	tst.w	r9, #8
    2a84:	ite	eq
    2a86:	moveq	r3, #2
    2a88:	movne	r3, #3
    2a8a:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2a8c:	b.n	256c <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2a8e:	ldr	r2, [pc, #148]	; (2b24 <usb_isr+0x64c>)
    2a90:	movs	r1, #15
    2a92:	strb	r1, [r2, #0]
    2a94:	b.n	2862 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2a96:	ldr	r2, [pc, #64]	; (2ad8 <usb_isr+0x600>)
    2a98:	ldr	r4, [pc, #140]	; (2b28 <usb_isr+0x650>)
    2a9a:	ldrb	r2, [r2, #0]
    2a9c:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2a9e:	ldrh	r2, [r5, #6]
    2aa0:	cmp	r2, r0
    2aa2:	bcs.w	2e68 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2aa6:	ldr	r1, [pc, #60]	; (2ae4 <usb_isr+0x60c>)
    2aa8:	ldrb	r5, [r1, #0]
    2aaa:	cmp	r2, #64	; 0x40
    2aac:	mov	ip, r2
    2aae:	orr.w	lr, r5, #2
    2ab2:	it	cs
    2ab4:	movcs.w	ip, #64	; 0x40
    2ab8:	add.w	r3, r4, ip
    2abc:	add.w	r0, r9, lr, lsl #3
    2ac0:	str	r3, [sp, #8]
    2ac2:	movs	r3, #1
    2ac4:	str	r4, [r0, #4]
    2ac6:	mov.w	r8, ip, lsl #16
    2aca:	rsb	r0, ip, r2
    2ace:	str	r3, [sp, #4]
    2ad0:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ad2:	movs	r4, #200	; 0xc8
    2ad4:	b.n	28d4 <usb_isr+0x3fc>
    2ad6:	nop
    2ad8:	.word	0x1fff1720
    2adc:	.word	0x1fff0000
    2ae0:	.word	0x1fff1a80
    2ae4:	.word	0x1fff1714
    2ae8:	.word	0x1fff16a0
    2aec:	.word	0x1fff1a88
    2af0:	.word	0x1fff15c4
    2af4:	.word	0x1fff1648
    2af8:	.word	0x40072094
    2afc:	.word	0x400720c0
    2b00:	.word	0x00400088
    2b04:	.word	0x40072088
    2b08:	.word	0x40072080
    2b0c:	.word	0x40072098
    2b10:	.word	0x1fff164c
    2b14:	.word	0x1fff16a4
    2b18:	.word	0x1fff1715
    2b1c:	.word	0x1fff1634
    2b20:	.word	0x004000c8
    2b24:	.word	0x1fff16a1
    2b28:	.word	0x1fff1718
    2b2c:	.word	0x1fff15cc
    2b30:	.word	0x4007208c
    2b34:	ldr	r4, [pc, #704]	; (2df8 <usb_isr+0x920>)
    2b36:	ldr	r2, [pc, #708]	; (2dfc <usb_isr+0x924>)
    2b38:	ldr	r1, [pc, #708]	; (2e00 <usb_isr+0x928>)
    2b3a:	ldr	r0, [pc, #712]	; (2e04 <usb_isr+0x92c>)
    2b3c:	ldr	r5, [pc, #712]	; (2e08 <usb_isr+0x930>)
    2b3e:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2b40:	movs	r3, #0
    2b42:	ldr	r4, [pc, #712]	; (2e0c <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2b44:	str	r4, [sp, #8]
    2b46:	str	r6, [sp, #20]
    2b48:	str	r5, [sp, #12]
    2b4a:	mov	r8, r0
    2b4c:	mov	r4, r3
    2b4e:	str	r7, [sp, #16]
    2b50:	mov	r6, r2
    2b52:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2b54:	ldr	r0, [r6, #0]
			while (p) {
    2b56:	cbz	r0, 2b64 <usb_isr+0x68c>
				n = p->next;
    2b58:	ldr	r7, [r0, #4]
				usb_free(p);
    2b5a:	bl	22b8 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    2b5e:	mov	r0, r7
    2b60:	cmp	r7, #0
    2b62:	bne.n	2b58 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2b64:	movs	r3, #0
    2b66:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2b68:	ldr	r3, [sp, #12]
			p = tx_first[i];
    2b6a:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2b6c:	mov	r2, r3
    2b6e:	movs	r3, #0
    2b70:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2b74:	cbz	r0, 2b82 <usb_isr+0x6aa>
				n = p->next;
    2b76:	ldr	r7, [r0, #4]
				usb_free(p);
    2b78:	bl	22b8 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2b7c:	mov	r0, r7
    2b7e:	cmp	r7, #0
    2b80:	bne.n	2b76 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2b82:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2b84:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2b86:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2b88:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    2b8a:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    2b8e:	ldr	r2, [sp, #8]
    2b90:	mov.w	r1, #0
			switch (tx_state[i]) {
    2b94:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    2b96:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    2b9a:	cmp	r3, #3
    2b9c:	bhi.n	2bae <usb_isr+0x6d6>
    2b9e:	tbb	[pc, r3]
    2ba2:	.short	0x0258
    2ba4:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2ba6:	ldr	r3, [sp, #4]
    2ba8:	mov.w	r2, #1
    2bac:	strb	r2, [r3, #0]
    2bae:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    2bb0:	adds	r4, #1
    2bb2:	adds	r3, #1
    2bb4:	cmp	r4, #5
    2bb6:	add.w	r6, r6, #4
    2bba:	add.w	r5, r5, #4
    2bbe:	str	r3, [sp, #4]
    2bc0:	bne.n	2b54 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2bc2:	ldr	r4, [pc, #588]	; (2e10 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2bc4:	ldr	r5, [pc, #588]	; (2e14 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2bc6:	ldrb	r2, [r4, #0]
			*reg = epconf;
    2bc8:	ldr	r3, [pc, #588]	; (2e18 <usb_isr+0x940>)
    2bca:	ldr	r7, [sp, #16]
    2bcc:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2bce:	movs	r1, #0
    2bd0:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2bd2:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2bd4:	lsls	r2, r2, #28
    2bd6:	bmi.n	2cce <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2bd8:	ldrb	r2, [r4, #1]
			*reg = epconf;
    2bda:	ldr	r1, [pc, #576]	; (2e1c <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2bdc:	ldr.w	r8, [pc, #588]	; 2e2c <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2be0:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2be2:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2be4:	mov.w	r1, #0
    2be8:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    2bec:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2bf0:	bmi.w	2d7a <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2bf4:	ldrb	r2, [r4, #2]
			*reg = epconf;
    2bf6:	ldr	r1, [pc, #552]	; (2e20 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2bf8:	ldr.w	r8, [pc, #560]	; 2e2c <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2bfc:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2bfe:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2c00:	mov.w	r1, #0
    2c04:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    2c08:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2c0c:	bmi.w	2d52 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2c10:	ldr	r1, [pc, #528]	; (2e24 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2c12:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2c14:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2c16:	movs	r1, #0
    2c18:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2c1c:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2c20:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2c22:	ldr.w	r8, [pc, #520]	; 2e2c <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2c26:	bmi.n	2d24 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2c28:	ldrb	r2, [r4, #4]
			*reg = epconf;
    2c2a:	ldr	r1, [pc, #508]	; (2e28 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2c2c:	ldr	r4, [pc, #508]	; (2e2c <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2c2e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2c30:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2c32:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2c34:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    2c38:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2c3c:	bmi.n	2cfa <usb_isr+0x822>
    2c3e:	ldrb	r3, [r6, #0]
    2c40:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2c42:	movs	r1, #0
    2c44:	eor.w	r2, r3, #1
    2c48:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    2c4c:	str.w	r1, [r9, #184]	; 0xb8
    2c50:	b.n	28ae <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2c52:	ldr	r3, [sp, #4]
    2c54:	mov.w	r2, #0
    2c58:	strb	r2, [r3, #0]
    2c5a:	b.n	2bae <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    2c5c:	ldr	r2, [pc, #464]	; (2e30 <usb_isr+0x958>)
    2c5e:	ldr	r4, [r2, #4]
    2c60:	cmp	r4, #0
    2c62:	beq.w	2a16 <usb_isr+0x53e>
    2c66:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2c68:	ldrh.w	lr, [r5, #4]
    2c6c:	b.n	2c78 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    2c6e:	adds	r2, #12
			if (list->addr == NULL) break;
    2c70:	ldr	r4, [r2, #4]
    2c72:	cmp	r4, #0
    2c74:	beq.w	2a16 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2c78:	ldrh	r3, [r2, #0]
    2c7a:	cmp	r3, r0
    2c7c:	bne.n	2c6e <usb_isr+0x796>
    2c7e:	ldrh	r3, [r2, #2]
    2c80:	cmp	r3, lr
    2c82:	bne.n	2c6e <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    2c84:	lsrs	r0, r0, #8
    2c86:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    2c88:	ite	eq
    2c8a:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    2c8c:	ldrhne	r0, [r2, #8]
    2c8e:	b.n	2a9e <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2c90:	ldr	r4, [pc, #416]	; (2e34 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    2c92:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2c94:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2c96:	strb	r2, [r4, #1]
    2c98:	b.n	2a9e <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2c9a:	cmp.w	r1, #1280	; 0x500
    2c9e:	bne.w	2a16 <usb_isr+0x53e>
    2ca2:	movs	r3, #1
    2ca4:	movs	r2, #0
    2ca6:	str	r3, [sp, #4]
    2ca8:	b.n	28ae <usb_isr+0x3d6>
    2caa:	movw	r2, #8993	; 0x2321
    2cae:	cmp	r1, r2
    2cb0:	beq.n	2ca2 <usb_isr+0x7ca>
    2cb2:	b.n	2a16 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2cb4:	ldrh	r2, [r5, #2]
    2cb6:	cmp	r2, #0
    2cb8:	bne.w	2a16 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    2cbc:	ldr	r4, [pc, #376]	; (2e38 <usb_isr+0x960>)
    2cbe:	str	r0, [sp, #4]
    2cc0:	lsls	r1, r1, #2
    2cc2:	add	r4, r1
    2cc4:	ldrb	r1, [r4, #0]
    2cc6:	bic.w	r1, r1, #2
    2cca:	strb	r1, [r4, #0]
    2ccc:	b.n	28ae <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2cce:	bl	2278 <usb_malloc>
				if (p) {
    2cd2:	cmp	r0, #0
    2cd4:	beq.w	2e44 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    2cd8:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2cda:	ldr	r2, [pc, #352]	; (2e3c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2cdc:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2ce0:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2ce4:	bl	2278 <usb_malloc>
				if (p) {
    2ce8:	cmp	r0, #0
    2cea:	beq.n	2dec <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    2cec:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2cee:	ldr	r2, [pc, #336]	; (2e40 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2cf0:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2cf4:	str.w	r2, [r9, #40]	; 0x28
    2cf8:	b.n	2bd8 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2cfa:	bl	2278 <usb_malloc>
				if (p) {
    2cfe:	cmp	r0, #0
    2d00:	beq.n	2db0 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    2d02:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2d04:	ldr	r2, [pc, #308]	; (2e3c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2d06:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2d0a:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2d0e:	bl	2278 <usb_malloc>
				if (p) {
    2d12:	cmp	r0, #0
    2d14:	beq.n	2da4 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    2d16:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2d18:	ldr	r2, [pc, #292]	; (2e40 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2d1a:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2d1e:	str.w	r2, [r9, #168]	; 0xa8
    2d22:	b.n	2c3e <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2d24:	bl	2278 <usb_malloc>
				if (p) {
    2d28:	cmp	r0, #0
    2d2a:	beq.w	2e5c <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    2d2e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2d30:	ldr	r2, [pc, #264]	; (2e3c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2d32:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2d36:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2d3a:	bl	2278 <usb_malloc>
				if (p) {
    2d3e:	cmp	r0, #0
    2d40:	beq.w	2e50 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2d44:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2d46:	ldr	r2, [pc, #248]	; (2e40 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2d48:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2d4c:	str.w	r2, [r9, #136]	; 0x88
    2d50:	b.n	2c28 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2d52:	bl	2278 <usb_malloc>
				if (p) {
    2d56:	cmp	r0, #0
    2d58:	beq.n	2de0 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    2d5a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2d5c:	ldr	r2, [pc, #220]	; (2e3c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2d5e:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2d62:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2d66:	bl	2278 <usb_malloc>
				if (p) {
    2d6a:	cbz	r0, 2dd4 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    2d6c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2d6e:	ldr	r2, [pc, #208]	; (2e40 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2d70:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2d74:	str.w	r2, [r9, #104]	; 0x68
    2d78:	b.n	2c10 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2d7a:	bl	2278 <usb_malloc>
				if (p) {
    2d7e:	cbz	r0, 2dc8 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    2d80:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2d82:	ldr	r2, [pc, #184]	; (2e3c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2d84:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2d88:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2d8c:	bl	2278 <usb_malloc>
				if (p) {
    2d90:	cbz	r0, 2dbc <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    2d92:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2d94:	ldr	r2, [pc, #168]	; (2e40 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2d96:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2d9a:	str.w	r2, [r9, #72]	; 0x48
    2d9e:	b.n	2bf4 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    2da0:	movs	r0, #2
    2da2:	b.n	2a9e <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2da4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2da6:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    2daa:	adds	r2, #1
    2dac:	strb	r2, [r5, #0]
    2dae:	b.n	2c3e <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2db0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2db2:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    2db6:	adds	r2, #1
    2db8:	strb	r2, [r5, #0]
    2dba:	b.n	2d0e <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2dbc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2dbe:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    2dc2:	adds	r2, #1
    2dc4:	strb	r2, [r5, #0]
    2dc6:	b.n	2bf4 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2dc8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2dca:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    2dce:	adds	r2, #1
    2dd0:	strb	r2, [r5, #0]
    2dd2:	b.n	2d8c <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2dd4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2dd6:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    2dda:	adds	r2, #1
    2ddc:	strb	r2, [r5, #0]
    2dde:	b.n	2c10 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2de0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2de2:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    2de6:	adds	r2, #1
    2de8:	strb	r2, [r5, #0]
    2dea:	b.n	2d66 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2dec:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2dee:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    2df2:	adds	r2, #1
    2df4:	strb	r2, [r5, #0]
    2df6:	b.n	2bd8 <usb_isr+0x700>
    2df8:	.word	0x1fff1724
    2dfc:	.word	0x1fff168c
    2e00:	.word	0x1fff16e4
    2e04:	.word	0x1fff16f8
    2e08:	.word	0x1fff1634
    2e0c:	.word	0x1fff1bb8
    2e10:	.word	0x000048f0
    2e14:	.word	0x1fff1715
    2e18:	.word	0x400720c4
    2e1c:	.word	0x400720c8
    2e20:	.word	0x400720cc
    2e24:	.word	0x400720d0
    2e28:	.word	0x400720d4
    2e2c:	.word	0x1fff0000
    2e30:	.word	0x000048f8
    2e34:	.word	0x1fff1718
    2e38:	.word	0x400720c0
    2e3c:	.word	0x00400088
    2e40:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2e44:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2e46:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    2e4a:	adds	r2, #1
    2e4c:	strb	r2, [r5, #0]
    2e4e:	b.n	2ce4 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2e50:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2e52:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2e56:	adds	r2, #1
    2e58:	strb	r2, [r5, #0]
    2e5a:	b.n	2c28 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2e5c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2e5e:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    2e62:	adds	r2, #1
    2e64:	strb	r2, [r5, #0]
    2e66:	b.n	2d3a <usb_isr+0x862>
    2e68:	cmp	r0, #64	; 0x40
    2e6a:	mov	ip, r0
    2e6c:	it	cs
    2e6e:	movcs.w	ip, #64	; 0x40
    2e72:	add.w	r3, r4, ip
    2e76:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2e78:	movs	r3, #1
    2e7a:	rsb	r0, ip, r0
    2e7e:	mov.w	r8, ip, lsl #16
    2e82:	movs	r2, #0
    2e84:	str	r3, [sp, #4]
    2e86:	b.n	28b8 <usb_isr+0x3e0>

00002e88 <usb_init>:
}



void usb_init(void)
{
    2e88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e8c:	ldr	r4, [pc, #156]	; (2f2c <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2e8e:	bl	37d4 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2e92:	movs	r2, #0
    2e94:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2e98:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2e9a:	str	r2, [r3, #0]
		table[i].addr = 0;
    2e9c:	str	r2, [r3, #4]
    2e9e:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2ea0:	cmp	r3, r0
		table[i].desc = 0;
    2ea2:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2ea6:	bne.n	2e9a <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2ea8:	ldr	r0, [pc, #132]	; (2f30 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2eaa:	ldr	r2, [pc, #136]	; (2f34 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2eac:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    2eae:	ldr.w	lr, [pc, #156]	; 2f4c <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2eb2:	ldr	r6, [pc, #132]	; (2f38 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2eb4:	ldr	r5, [pc, #132]	; (2f3c <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2eb6:	ldr	r7, [pc, #136]	; (2f40 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2eb8:	ldr.w	ip, [pc, #148]	; 2f50 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    2ebc:	ldr.w	r8, [pc, #148]	; 2f54 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2ec0:	orr.w	r3, r3, #262144	; 0x40000
    2ec4:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2ec6:	ldr	r3, [r2, #0]
    2ec8:	orr.w	r3, r3, #50331648	; 0x3000000
    2ecc:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    2ece:	movs	r3, #3
    2ed0:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2ed4:	movs	r3, #160	; 0xa0
    2ed6:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2ed8:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2edc:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2ee0:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2ee4:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2ee6:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2ee8:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2eec:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2eee:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2ef0:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2ef2:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2ef4:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2ef6:	ldr	r5, [pc, #76]	; (2f44 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2ef8:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2efc:	ldr	r0, [pc, #72]	; (2f48 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    2efe:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    2f02:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2f04:	movs	r3, #1
    2f06:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2f0a:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2f0e:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2f12:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2f14:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2f16:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2f1a:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2f1c:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2f1e:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2f22:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2f26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f2a:	nop
    2f2c:	.word	0x1fff0000
    2f30:	.word	0x40048034
    2f34:	.word	0x4000d800
    2f38:	.word	0x40072140
    2f3c:	.word	0x4007209c
    2f40:	.word	0x400720b0
    2f44:	.word	0xe000e435
    2f48:	.word	0xe000e104
    2f4c:	.word	0x40072144
    2f50:	.word	0x40072080
    2f54:	.word	0x40072088

00002f58 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2f58:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2f5a:	ldr	r4, [pc, #176]	; (300c <yield+0xb4>)
    2f5c:	ldrb	r3, [r4, #0]
    2f5e:	cbz	r3, 2f62 <yield+0xa>
    2f60:	pop	{r3, r4, r5, pc}
	running = 1;
    2f62:	movs	r3, #1
    2f64:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2f66:	bl	1484 <usb_serial_available>
	if (Serial.available()) serialEvent();
    2f6a:	cmp	r0, #0
    2f6c:	bne.n	2ff4 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    2f6e:	bl	35a4 <serial_available>
	if (Serial1.available()) serialEvent1();
    2f72:	cmp	r0, #0
    2f74:	bne.n	2fee <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    2f76:	bl	328c <serial2_available>
	if (Serial2.available()) serialEvent2();
    2f7a:	cmp	r0, #0
    2f7c:	bne.n	2fe8 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    2f7e:	bl	38a4 <serial3_available>
	if (Serial3.available()) serialEvent3();
    2f82:	cbnz	r0, 2fe2 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    2f84:	bl	33b8 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2f88:	cbnz	r0, 2fdc <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    2f8a:	bl	3194 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2f8e:	cbnz	r0, 2fd6 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    2f90:	bl	36d0 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2f94:	cbnz	r0, 2fd0 <yield+0x78>
#endif
	running = 0;
    2f96:	movs	r3, #0
    2f98:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2f9a:	mrs	r3, IPSR
		if (ipsr != 0) return;
    2f9e:	cmp	r3, #0
    2fa0:	bne.n	2f60 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2fa2:	mrs	r1, PRIMASK
		__disable_irq();
    2fa6:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2fa8:	ldr	r3, [pc, #100]	; (3010 <yield+0xb8>)
    2faa:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2fac:	cbz	r0, 2ffa <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2fae:	ldr	r4, [pc, #100]	; (3014 <yield+0xbc>)
    2fb0:	ldrb	r2, [r4, #0]
    2fb2:	cbnz	r2, 2ffa <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    2fb4:	ldr	r5, [r0, #20]
    2fb6:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2fb8:	movs	r3, #1
    2fba:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    2fbc:	cbz	r5, 3002 <yield+0xaa>
			firstYield->_prev = nullptr;
    2fbe:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2fc0:	cbnz	r1, 2fc4 <yield+0x6c>
    2fc2:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2fc4:	movs	r5, #0
    2fc6:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2fc8:	ldr	r3, [r0, #8]
    2fca:	blx	r3
		runningFromYield = false;
    2fcc:	strb	r5, [r4, #0]
    2fce:	b.n	2f60 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2fd0:	bl	318c <serialEvent6()>
    2fd4:	b.n	2f96 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2fd6:	bl	301c <serialEvent5()>
    2fda:	b.n	2f90 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2fdc:	bl	3100 <serialEvent4()>
    2fe0:	b.n	2f8a <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    2fe2:	bl	39a0 <serialEvent3()>
    2fe6:	b.n	2f84 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    2fe8:	bl	30fc <serialEvent2()>
    2fec:	b.n	2f7e <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    2fee:	bl	399c <serialEvent1()>
    2ff2:	b.n	2f76 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    2ff4:	bl	3048 <serialEvent()>
    2ff8:	b.n	2f6e <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2ffa:	cmp	r1, #0
    2ffc:	bne.n	2f60 <yield+0x8>
    2ffe:	cpsie	i
    3000:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3002:	ldr	r3, [pc, #20]	; (3018 <yield+0xc0>)
    3004:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3006:	cmp	r1, #0
    3008:	bne.n	2fc4 <yield+0x6c>
    300a:	b.n	2fc2 <yield+0x6a>
    300c:	.word	0x1fff1729
    3010:	.word	0x1fff1a40
    3014:	.word	0x1fff1a44
    3018:	.word	0x1fff1a3c

0000301c <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    301c:	bx	lr
    301e:	nop

00003020 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3020:	b.w	14a0 <usb_serial_flush_input>

00003024 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3024:	b.w	1454 <usb_serial_peekchar>

00003028 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3028:	b.w	140c <usb_serial_getchar>

0000302c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    302c:	b.w	1484 <usb_serial_available>

00003030 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3030:	b.w	1640 <usb_serial_flush_output>

00003034 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3034:	b.w	15f8 <usb_serial_write_buffer_free>

00003038 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3038:	mov	r0, r1
    303a:	mov	r1, r2
    303c:	b.w	14d8 <usb_serial_write>

00003040 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3040:	mov	r0, r1
    3042:	b.w	15e0 <usb_serial_putchar>
    3046:	nop

00003048 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3048:	bx	lr
    304a:	nop

0000304c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    304c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    304e:	ldr	r2, [pc, #24]	; (3068 <Print::println()+0x1c>)
	return write(buf, 2);
    3050:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3052:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3054:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3056:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3058:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    305a:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    305e:	movs	r2, #2
    3060:	blx	r3
}
    3062:	add	sp, #12
    3064:	ldr.w	pc, [sp], #4
    3068:	.word	0x000048ec

0000306c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    306c:	push	{r4, r5, r6, r7, lr}
    306e:	mov	r7, r0
    3070:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3072:	cmp	r2, #0
    3074:	beq.n	30de <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    3076:	cmp	r2, #1
    3078:	it	eq
    307a:	moveq	r2, #10
	}


	if (n == 0) {
    307c:	cbz	r1, 30d4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    307e:	movs	r4, #33	; 0x21
    3080:	b.n	3084 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3082:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3084:	udiv	r5, r1, r2
    3088:	mls	r1, r2, r5, r1
    308c:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    308e:	cmp	r1, #9
    3090:	add.w	r1, r0, #48	; 0x30
    3094:	it	ls
    3096:	uxtbls	r0, r1
    3098:	add	r1, sp, #40	; 0x28
    309a:	it	hi
    309c:	addhi	r0, #55	; 0x37
    309e:	add	r1, r4
    30a0:	it	hi
    30a2:	uxtbhi	r0, r0
    30a4:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    30a8:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    30aa:	mov	r1, r5
    30ac:	cmp	r5, #0
    30ae:	bne.n	3082 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    30b0:	cbz	r3, 30c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    30b2:	subs	r4, #1
    30b4:	uxtb	r4, r4
		buf[i] = '-';
    30b6:	add	r3, sp, #40	; 0x28
    30b8:	add	r3, r4
    30ba:	movs	r2, #45	; 0x2d
    30bc:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    30c0:	ldr	r3, [r7, #0]
    30c2:	add	r2, sp, #4
    30c4:	adds	r1, r2, r4
    30c6:	ldr	r3, [r3, #4]
    30c8:	mov	r0, r7
    30ca:	rsb	r2, r4, #34	; 0x22
    30ce:	blx	r3
}
    30d0:	add	sp, #44	; 0x2c
    30d2:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    30d4:	movs	r2, #48	; 0x30
    30d6:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    30da:	movs	r4, #33	; 0x21
    30dc:	b.n	30b0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    30de:	ldr	r3, [r0, #0]
    30e0:	uxtb	r1, r1
    30e2:	ldr	r3, [r3, #0]
    30e4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    30e6:	add	sp, #44	; 0x2c
    30e8:	pop	{r4, r5, r6, r7, pc}
    30ea:	nop

000030ec <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    30ec:	cmp	r1, #0
		sign = '-';
		n = -n;
    30ee:	itte	lt
    30f0:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    30f2:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    30f4:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    30f6:	movs	r2, #10
    30f8:	b.w	306c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000030fc <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    30fc:	bx	lr
    30fe:	nop

00003100 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3100:	bx	lr
    3102:	nop

00003104 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3104:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3106:	bl	96c <setup>
	while (1) {
		loop();
    310a:	bl	970 <loop>
		yield();
    310e:	bl	2f58 <yield>
    3112:	b.n	310a <main+0x6>

00003114 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    3114:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    3116:	ldr	r5, [pc, #88]	; (3170 <random(unsigned long) [clone .part.0]+0x5c>)
    3118:	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    311a:	cbz	r2, 3160 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    311c:	ldr	r1, [pc, #84]	; (3174 <random(unsigned long) [clone .part.0]+0x60>)
    311e:	ldr	r3, [pc, #88]	; (3178 <random(unsigned long) [clone .part.0]+0x64>)
    3120:	ldr.w	lr, [pc, #92]	; 3180 <random(unsigned long) [clone .part.0]+0x6c>
    3124:	smull	r6, r7, r2, r1
    3128:	smull	r1, r4, r1, r2
    312c:	asrs	r6, r2, #31
    312e:	adds	r1, r2, r7
    3130:	add	r4, r2
    3132:	rsb	r1, r6, r1, asr #16
    3136:	rsb	r4, r6, r4, asr #16
    313a:	mul.w	r4, r3, r4
    313e:	mls	r2, lr, r1, r2
    3142:	movw	r3, #16807	; 0x41a7
    3146:	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    314a:	cmp	r3, #0
    314c:	bge.n	3154 <random(unsigned long) [clone .part.0]+0x40>
    314e:	add.w	r3, r3, #2147483648	; 0x80000000
    3152:	subs	r3, #1
    3154:	udiv	r2, r3, r0
	seed = x;
    3158:	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    315a:	mls	r0, r0, r2, r3
    315e:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    3160:	ldr	r3, [pc, #24]	; (317c <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    3162:	str	r3, [r5, #0]
    3164:	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    3168:	mls	r0, r0, r2, r3
    316c:	pop	{r4, r5, r6, r7, pc}
    316e:	nop
    3170:	.word	0x1fff172c
    3174:	.word	0x834e0b5f
    3178:	.word	0xfffff4ec
    317c:	.word	0x1f0cce42
    3180:	.word	0x0001f31d

00003184 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    3184:	cbz	r0, 318a <random(unsigned long)+0x6>
    3186:	b.w	3114 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    318a:	bx	lr

0000318c <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    318c:	bx	lr
    318e:	nop

00003190 <operator new(unsigned int)>:
    3190:	b.w	3bf4 <malloc>

00003194 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3194:	ldr	r2, [pc, #20]	; (31ac <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3196:	ldr	r3, [pc, #24]	; (31b0 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3198:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    319a:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    319c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    319e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    31a0:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    31a2:	it	cc
    31a4:	addcc	r0, #64	; 0x40
    31a6:	subs	r0, r0, r3
}
    31a8:	bx	lr
    31aa:	nop
    31ac:	.word	0x1fff1734
    31b0:	.word	0x1fff1735

000031b4 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    31b4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    31b6:	ldr	r3, [pc, #172]	; (3264 <uart4_status_isr+0xb0>)
    31b8:	ldrb	r2, [r3, #4]
    31ba:	lsls	r4, r2, #26
    31bc:	bpl.n	31fe <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    31be:	ldr	r0, [pc, #168]	; (3268 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    31c0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    31c2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31c4:	ldr	r1, [pc, #164]	; (326c <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    31c6:	adds	r3, #1
    31c8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31ca:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    31cc:	it	gt
    31ce:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31d0:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    31d2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31d4:	beq.n	31de <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    31d6:	ldr	r4, [pc, #152]	; (3270 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    31d8:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    31da:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    31dc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    31de:	ldr	r2, [pc, #148]	; (3274 <uart4_status_isr+0xc0>)
    31e0:	ldr	r1, [r2, #0]
    31e2:	cbz	r1, 31fe <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    31e4:	ldr	r2, [pc, #144]	; (3278 <uart4_status_isr+0xc4>)
    31e6:	ldrb	r2, [r2, #0]
    31e8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    31ea:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    31ec:	itet	cc
    31ee:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    31f2:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    31f4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    31f6:	cmp	r3, #39	; 0x27
    31f8:	itt	gt
    31fa:	movgt	r3, #1
    31fc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    31fe:	ldr	r2, [pc, #100]	; (3264 <uart4_status_isr+0xb0>)
    3200:	ldrb	r3, [r2, #3]
    3202:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3204:	lsls	r0, r3, #24
    3206:	bmi.n	322c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3208:	lsls	r2, r3, #25
    320a:	bpl.n	3228 <uart4_status_isr+0x74>
    320c:	ldr	r3, [pc, #84]	; (3264 <uart4_status_isr+0xb0>)
    320e:	ldrb	r3, [r3, #4]
    3210:	lsls	r3, r3, #25
    3212:	bpl.n	3228 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3214:	ldr	r3, [pc, #100]	; (327c <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3216:	ldr	r1, [pc, #104]	; (3280 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3218:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    321a:	movs	r2, #0
    321c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    321e:	cbz	r3, 3222 <uart4_status_isr+0x6e>
    3220:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    3222:	ldr	r3, [pc, #64]	; (3264 <uart4_status_isr+0xb0>)
    3224:	movs	r2, #44	; 0x2c
    3226:	strb	r2, [r3, #3]
	}
}
    3228:	pop	{r4, r5}
    322a:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    322c:	ldrb	r1, [r2, #4]
    322e:	lsls	r1, r1, #24
    3230:	bpl.n	3208 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3232:	ldr	r1, [pc, #80]	; (3284 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3234:	ldr	r0, [pc, #64]	; (3278 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3236:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3238:	ldrb	r1, [r0, #0]
    323a:	uxtb	r1, r1
		if (head == tail) {
    323c:	cmp	r4, r1
    323e:	beq.n	325c <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3240:	adds	r2, r1, #1
    3242:	cmp	r2, #39	; 0x27
    3244:	itt	hi
    3246:	movhi	r1, #0
    3248:	movhi	r2, r1
			n = tx_buffer[tail];
    324a:	ldr	r5, [pc, #60]	; (3288 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    324c:	ldr	r4, [pc, #20]	; (3264 <uart4_status_isr+0xb0>)
    324e:	it	ls
    3250:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3252:	ldrb	r2, [r5, r2]
    3254:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3256:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3258:	strb	r1, [r0, #0]
    325a:	b.n	3208 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    325c:	movs	r1, #108	; 0x6c
    325e:	strb	r1, [r2, #3]
    3260:	b.n	3208 <uart4_status_isr+0x54>
    3262:	nop
    3264:	.word	0x400ea000
    3268:	.word	0x1fff1734
    326c:	.word	0x1fff1735
    3270:	.word	0x1fff1760
    3274:	.word	0x1fff1730
    3278:	.word	0x1fff17a1
    327c:	.word	0x1fff17a4
    3280:	.word	0x1fff17a0
    3284:	.word	0x1fff17a8
    3288:	.word	0x1fff1738

0000328c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    328c:	ldr	r2, [pc, #20]	; (32a4 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    328e:	ldr	r3, [pc, #24]	; (32a8 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3290:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3292:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3294:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3296:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3298:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    329a:	it	cc
    329c:	addcc	r0, #64	; 0x40
    329e:	subs	r0, r0, r3
}
    32a0:	bx	lr
    32a2:	nop
    32a4:	.word	0x1fff181c
    32a8:	.word	0x1fff17b1

000032ac <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    32ac:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    32ae:	ldr	r3, [pc, #224]	; (3390 <uart1_status_isr+0xe4>)
    32b0:	ldrb	r2, [r3, #4]
    32b2:	tst.w	r2, #48	; 0x30
    32b6:	beq.n	3312 <uart1_status_isr+0x66>
		__disable_irq();
    32b8:	cpsid	i
		avail = UART1_RCFIFO;
    32ba:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    32bc:	and.w	r2, r1, #255	; 0xff
    32c0:	cmp	r1, #0
    32c2:	beq.n	3340 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    32c4:	cpsie	i
			head = rx_buffer_head;
    32c6:	ldr	r7, [pc, #204]	; (3394 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    32c8:	ldr	r1, [pc, #204]	; (3398 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    32ca:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    32cc:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    32ce:	ldr	r6, [pc, #204]	; (339c <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    32d0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    32d2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    32d4:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    32d6:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    32d8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    32da:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    32dc:	it	cs
    32de:	movcs	r3, #0
				if (newhead != tail) {
    32e0:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    32e2:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    32e6:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    32e8:	itt	ne
    32ea:	strbne	r1, [r6, r3]
    32ec:	movne	r0, r3
				}
			} while (--avail > 0);
    32ee:	ands.w	r2, r2, #255	; 0xff
    32f2:	bne.n	32d6 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    32f4:	ldr	r3, [pc, #168]	; (33a0 <uart1_status_isr+0xf4>)
    32f6:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    32f8:	uxtb	r2, r0
    32fa:	strb	r2, [r7, #0]
			if (rts_pin) {
    32fc:	cbz	r3, 3312 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    32fe:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3300:	itet	cc
    3302:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3306:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3308:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    330a:	cmp	r0, #39	; 0x27
    330c:	itt	gt
    330e:	movgt	r2, #1
    3310:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3312:	ldr	r1, [pc, #124]	; (3390 <uart1_status_isr+0xe4>)
    3314:	ldrb	r2, [r1, #3]
    3316:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3318:	lsls	r5, r2, #24
    331a:	bmi.n	334a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    331c:	lsls	r2, r2, #25
    331e:	bpl.n	333c <uart1_status_isr+0x90>
    3320:	ldr	r3, [pc, #108]	; (3390 <uart1_status_isr+0xe4>)
    3322:	ldrb	r3, [r3, #4]
    3324:	lsls	r3, r3, #25
    3326:	bpl.n	333c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3328:	ldr	r3, [pc, #120]	; (33a4 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    332a:	ldr	r1, [pc, #124]	; (33a8 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    332c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    332e:	movs	r2, #0
    3330:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3332:	cbz	r3, 3336 <uart1_status_isr+0x8a>
    3334:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3336:	ldr	r3, [pc, #88]	; (3390 <uart1_status_isr+0xe4>)
    3338:	movs	r2, #60	; 0x3c
    333a:	strb	r2, [r3, #3]
	}
}
    333c:	pop	{r4, r5, r6, r7}
    333e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3340:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3342:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3344:	strb	r2, [r3, #17]
			__enable_irq();
    3346:	cpsie	i
    3348:	b.n	3312 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    334a:	ldrb	r3, [r1, #4]
    334c:	lsls	r4, r3, #24
    334e:	bpl.n	331c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3350:	ldr	r3, [pc, #88]	; (33ac <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3352:	ldr	r6, [pc, #92]	; (33b0 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3354:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3356:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3358:	uxtb	r4, r4
		tail = tx_buffer_tail;
    335a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    335c:	cmp	r4, r3
    335e:	beq.n	337e <uart1_status_isr+0xd2>
    3360:	ldr	r5, [pc, #80]	; (33b4 <uart1_status_isr+0x108>)
    3362:	b.n	3368 <uart1_status_isr+0xbc>
    3364:	cmp	r3, r4
    3366:	beq.n	337e <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3368:	adds	r3, #1
    336a:	cmp	r3, #40	; 0x28
    336c:	it	cs
    336e:	movcs	r3, #0
			avail = UART1_S1;
    3370:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3372:	ldrb	r0, [r5, r3]
    3374:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3376:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3378:	ldrb	r0, [r1, #20]
    337a:	cmp	r0, #7
    337c:	bls.n	3364 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    337e:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3380:	ldr	r1, [pc, #12]	; (3390 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3382:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3384:	ldrb	r3, [r1, #4]
    3386:	lsls	r0, r3, #24
    3388:	itt	mi
    338a:	movmi	r3, #124	; 0x7c
    338c:	strbmi	r3, [r1, #3]
    338e:	b.n	331c <uart1_status_isr+0x70>
    3390:	.word	0x4006b000
    3394:	.word	0x1fff181c
    3398:	.word	0x1fff17b1
    339c:	.word	0x1fff17dc
    33a0:	.word	0x1fff17ac
    33a4:	.word	0x1fff1820
    33a8:	.word	0x1fff17b0
    33ac:	.word	0x1fff1824
    33b0:	.word	0x1fff181d
    33b4:	.word	0x1fff17b4

000033b8 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    33b8:	ldr	r2, [pc, #20]	; (33d0 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    33ba:	ldr	r3, [pc, #24]	; (33d4 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    33bc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    33be:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    33c0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    33c2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    33c4:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    33c6:	it	cc
    33c8:	addcc	r0, #64	; 0x40
    33ca:	subs	r0, r0, r3
}
    33cc:	bx	lr
    33ce:	nop
    33d0:	.word	0x1fff182c
    33d4:	.word	0x1fff182d

000033d8 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    33d8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    33da:	ldr	r3, [pc, #172]	; (3488 <uart3_status_isr+0xb0>)
    33dc:	ldrb	r2, [r3, #4]
    33de:	lsls	r4, r2, #26
    33e0:	bpl.n	3422 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    33e2:	ldr	r0, [pc, #168]	; (348c <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    33e4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    33e6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    33e8:	ldr	r1, [pc, #164]	; (3490 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    33ea:	adds	r3, #1
    33ec:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    33ee:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    33f0:	it	gt
    33f2:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    33f4:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    33f6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    33f8:	beq.n	3402 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    33fa:	ldr	r4, [pc, #152]	; (3494 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    33fc:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    33fe:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3400:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3402:	ldr	r2, [pc, #148]	; (3498 <uart3_status_isr+0xc0>)
    3404:	ldr	r1, [r2, #0]
    3406:	cbz	r1, 3422 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3408:	ldr	r2, [pc, #144]	; (349c <uart3_status_isr+0xc4>)
    340a:	ldrb	r2, [r2, #0]
    340c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    340e:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3410:	itet	cc
    3412:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3416:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3418:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    341a:	cmp	r3, #39	; 0x27
    341c:	itt	gt
    341e:	movgt	r3, #1
    3420:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3422:	ldr	r2, [pc, #100]	; (3488 <uart3_status_isr+0xb0>)
    3424:	ldrb	r3, [r2, #3]
    3426:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3428:	lsls	r0, r3, #24
    342a:	bmi.n	3450 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    342c:	lsls	r2, r3, #25
    342e:	bpl.n	344c <uart3_status_isr+0x74>
    3430:	ldr	r3, [pc, #84]	; (3488 <uart3_status_isr+0xb0>)
    3432:	ldrb	r3, [r3, #4]
    3434:	lsls	r3, r3, #25
    3436:	bpl.n	344c <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3438:	ldr	r3, [pc, #100]	; (34a0 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    343a:	ldr	r1, [pc, #104]	; (34a4 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    343c:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    343e:	movs	r2, #0
    3440:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3442:	cbz	r3, 3446 <uart3_status_isr+0x6e>
    3444:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3446:	ldr	r3, [pc, #64]	; (3488 <uart3_status_isr+0xb0>)
    3448:	movs	r2, #44	; 0x2c
    344a:	strb	r2, [r3, #3]
	}
}
    344c:	pop	{r4, r5}
    344e:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3450:	ldrb	r1, [r2, #4]
    3452:	lsls	r1, r1, #24
    3454:	bpl.n	342c <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3456:	ldr	r1, [pc, #80]	; (34a8 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3458:	ldr	r0, [pc, #64]	; (349c <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    345a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    345c:	ldrb	r1, [r0, #0]
    345e:	uxtb	r1, r1
		if (head == tail) {
    3460:	cmp	r4, r1
    3462:	beq.n	3480 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3464:	adds	r2, r1, #1
    3466:	cmp	r2, #39	; 0x27
    3468:	itt	hi
    346a:	movhi	r1, #0
    346c:	movhi	r2, r1
			n = tx_buffer[tail];
    346e:	ldr	r5, [pc, #60]	; (34ac <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3470:	ldr	r4, [pc, #20]	; (3488 <uart3_status_isr+0xb0>)
    3472:	it	ls
    3474:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3476:	ldrb	r2, [r5, r2]
    3478:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    347a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    347c:	strb	r1, [r0, #0]
    347e:	b.n	342c <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3480:	movs	r1, #108	; 0x6c
    3482:	strb	r1, [r2, #3]
    3484:	b.n	342c <uart3_status_isr+0x54>
    3486:	nop
    3488:	.word	0x4006d000
    348c:	.word	0x1fff182c
    3490:	.word	0x1fff182d
    3494:	.word	0x1fff1858
    3498:	.word	0x1fff1828
    349c:	.word	0x1fff1899
    34a0:	.word	0x1fff189c
    34a4:	.word	0x1fff1898
    34a8:	.word	0x1fff18a0
    34ac:	.word	0x1fff1830

000034b0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    34b0:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    34b2:	ldr	r4, [pc, #64]	; (34f4 <fault_isr+0x44>)
    34b4:	b.n	34c8 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    34b6:	ldr	r3, [r4, #0]
    34b8:	lsls	r1, r3, #21
    34ba:	bmi.n	34d8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    34bc:	ldr	r3, [r4, #0]
    34be:	lsls	r2, r3, #20
    34c0:	bmi.n	34e2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    34c2:	ldr	r3, [r4, #0]
    34c4:	lsls	r3, r3, #19
    34c6:	bmi.n	34ec <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    34c8:	ldr	r3, [r4, #0]
    34ca:	lsls	r0, r3, #13
    34cc:	bpl.n	34b6 <fault_isr+0x6>
    34ce:	bl	24d8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    34d2:	ldr	r3, [r4, #0]
    34d4:	lsls	r1, r3, #21
    34d6:	bpl.n	34bc <fault_isr+0xc>
    34d8:	bl	35c4 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    34dc:	ldr	r3, [r4, #0]
    34de:	lsls	r2, r3, #20
    34e0:	bpl.n	34c2 <fault_isr+0x12>
    34e2:	bl	32ac <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    34e6:	ldr	r3, [r4, #0]
    34e8:	lsls	r3, r3, #19
    34ea:	bpl.n	34c8 <fault_isr+0x18>
    34ec:	bl	38c4 <uart2_status_isr>
    34f0:	b.n	34c8 <fault_isr+0x18>
    34f2:	nop
    34f4:	.word	0x40048034

000034f8 <unused_isr>:
	}
}

void unused_isr(void)
{
    34f8:	push	{r3, lr}
	fault_isr();
    34fa:	bl	34b0 <fault_isr>
    34fe:	nop

00003500 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3500:	ldr	r3, [pc, #4]	; (3508 <startup_early_hook+0x8>)
    3502:	movs	r2, #16
    3504:	strh	r2, [r3, #0]
    3506:	bx	lr
    3508:	.word	0x40052000

0000350c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    350c:	bx	lr
    350e:	nop

00003510 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3510:	ldr	r1, [pc, #36]	; (3538 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3512:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3514:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3516:	cbz	r0, 3526 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3518:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    351a:	add	r0, r3
    351c:	sub.w	r2, r2, #8192	; 0x2000
    3520:	cmp	r0, r2
    3522:	bcs.n	352a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3524:	str	r0, [r1, #0]
	}
	return prev;
    3526:	mov	r0, r3
}
    3528:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    352a:	bl	3b98 <__errno>
    352e:	movs	r3, #12
    3530:	str	r3, [r0, #0]
			return (void *)-1;
    3532:	mov.w	r0, #4294967295
    3536:	pop	{r3, pc}
    3538:	.word	0x1fff0c58

0000353c <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    353c:	ldr	r2, [pc, #32]	; (3560 <kinetis_hsrun_disable+0x24>)
    353e:	ldrb	r3, [r2, #0]
    3540:	cmp	r3, #128	; 0x80
    3542:	beq.n	3548 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3544:	movs	r0, #0
}
    3546:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3548:	ldr	r1, [pc, #24]	; (3564 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    354a:	ldr	r3, [pc, #28]	; (3568 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    354c:	ldr	r0, [pc, #28]	; (356c <kinetis_hsrun_disable+0x30>)
    354e:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3550:	movs	r1, #0
    3552:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3554:	ldrb	r3, [r2, #0]
    3556:	cmp	r3, #128	; 0x80
    3558:	beq.n	3554 <kinetis_hsrun_disable+0x18>
		return 1;
    355a:	movs	r0, #1
    355c:	bx	lr
    355e:	nop
    3560:	.word	0x4007e003
    3564:	.word	0x40048044
    3568:	.word	0x4007e001
    356c:	.word	0x22280000

00003570 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3570:	ldr	r2, [pc, #36]	; (3598 <kinetis_hsrun_enable+0x28>)
    3572:	ldrb	r3, [r2, #0]
    3574:	cmp	r3, #1
    3576:	beq.n	357c <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3578:	movs	r0, #0
}
    357a:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    357c:	add.w	r3, r3, #1073741824	; 0x40000000
    3580:	add.w	r3, r3, #516096	; 0x7e000
    3584:	movs	r1, #96	; 0x60
    3586:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3588:	ldrb	r3, [r2, #0]
    358a:	cmp	r3, #128	; 0x80
    358c:	bne.n	3588 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    358e:	ldr	r3, [pc, #12]	; (359c <kinetis_hsrun_enable+0x2c>)
    3590:	ldr	r2, [pc, #12]	; (35a0 <kinetis_hsrun_enable+0x30>)
    3592:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3594:	movs	r0, #1
    3596:	bx	lr
    3598:	.word	0x4007e003
    359c:	.word	0x40048044
    35a0:	.word	0x02060000

000035a4 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35a4:	ldr	r2, [pc, #20]	; (35bc <serial_available+0x18>)
	tail = rx_buffer_tail;
    35a6:	ldr	r3, [pc, #24]	; (35c0 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35a8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    35aa:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35ac:	uxtb	r0, r0
	tail = rx_buffer_tail;
    35ae:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    35b0:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    35b2:	it	cc
    35b4:	addcc	r0, #64	; 0x40
    35b6:	subs	r0, r0, r3
}
    35b8:	bx	lr
    35ba:	nop
    35bc:	.word	0x1fff18a8
    35c0:	.word	0x1fff18a9

000035c4 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    35c4:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    35c6:	ldr	r3, [pc, #224]	; (36a8 <uart0_status_isr+0xe4>)
    35c8:	ldrb	r2, [r3, #4]
    35ca:	tst.w	r2, #48	; 0x30
    35ce:	beq.n	362a <uart0_status_isr+0x66>
		__disable_irq();
    35d0:	cpsid	i
		avail = UART0_RCFIFO;
    35d2:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    35d4:	and.w	r2, r1, #255	; 0xff
    35d8:	cmp	r1, #0
    35da:	beq.n	3658 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    35dc:	cpsie	i
			head = rx_buffer_head;
    35de:	ldr	r7, [pc, #204]	; (36ac <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    35e0:	ldr	r1, [pc, #204]	; (36b0 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    35e2:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    35e4:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    35e6:	ldr	r6, [pc, #204]	; (36b4 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    35e8:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    35ea:	uxtb	r0, r0
			tail = rx_buffer_tail;
    35ec:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    35ee:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    35f0:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    35f2:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    35f4:	it	cs
    35f6:	movcs	r3, #0
				if (newhead != tail) {
    35f8:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    35fa:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    35fe:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3600:	itt	ne
    3602:	strbne	r1, [r6, r3]
    3604:	movne	r0, r3
				}
			} while (--avail > 0);
    3606:	ands.w	r2, r2, #255	; 0xff
    360a:	bne.n	35ee <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    360c:	ldr	r3, [pc, #168]	; (36b8 <uart0_status_isr+0xf4>)
    360e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3610:	uxtb	r2, r0
    3612:	strb	r2, [r7, #0]
			if (rts_pin) {
    3614:	cbz	r3, 362a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3616:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3618:	itet	cc
    361a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    361e:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3620:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3622:	cmp	r0, #39	; 0x27
    3624:	itt	gt
    3626:	movgt	r2, #1
    3628:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    362a:	ldr	r1, [pc, #124]	; (36a8 <uart0_status_isr+0xe4>)
    362c:	ldrb	r2, [r1, #3]
    362e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3630:	lsls	r5, r2, #24
    3632:	bmi.n	3662 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3634:	lsls	r2, r2, #25
    3636:	bpl.n	3654 <uart0_status_isr+0x90>
    3638:	ldr	r3, [pc, #108]	; (36a8 <uart0_status_isr+0xe4>)
    363a:	ldrb	r3, [r3, #4]
    363c:	lsls	r3, r3, #25
    363e:	bpl.n	3654 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3640:	ldr	r3, [pc, #120]	; (36bc <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3642:	ldr	r1, [pc, #124]	; (36c0 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3644:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3646:	movs	r2, #0
    3648:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    364a:	cbz	r3, 364e <uart0_status_isr+0x8a>
    364c:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    364e:	ldr	r3, [pc, #88]	; (36a8 <uart0_status_isr+0xe4>)
    3650:	movs	r2, #60	; 0x3c
    3652:	strb	r2, [r3, #3]
	}
}
    3654:	pop	{r4, r5, r6, r7}
    3656:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3658:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    365a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    365c:	strb	r2, [r3, #17]
			__enable_irq();
    365e:	cpsie	i
    3660:	b.n	362a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3662:	ldrb	r3, [r1, #4]
    3664:	lsls	r4, r3, #24
    3666:	bpl.n	3634 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3668:	ldr	r3, [pc, #88]	; (36c4 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    366a:	ldr	r6, [pc, #92]	; (36c8 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    366c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    366e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3670:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3672:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3674:	cmp	r4, r3
    3676:	beq.n	3696 <uart0_status_isr+0xd2>
    3678:	ldr	r5, [pc, #80]	; (36cc <uart0_status_isr+0x108>)
    367a:	b.n	3680 <uart0_status_isr+0xbc>
    367c:	cmp	r3, r4
    367e:	beq.n	3696 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3680:	adds	r3, #1
    3682:	cmp	r3, #64	; 0x40
    3684:	it	cs
    3686:	movcs	r3, #0
			avail = UART0_S1;
    3688:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    368a:	ldrb	r0, [r5, r3]
    368c:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    368e:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3690:	ldrb	r0, [r1, #20]
    3692:	cmp	r0, #7
    3694:	bls.n	367c <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3696:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3698:	ldr	r1, [pc, #12]	; (36a8 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    369a:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    369c:	ldrb	r3, [r1, #4]
    369e:	lsls	r0, r3, #24
    36a0:	itt	mi
    36a2:	movmi	r3, #124	; 0x7c
    36a4:	strbmi	r3, [r1, #3]
    36a6:	b.n	3634 <uart0_status_isr+0x70>
    36a8:	.word	0x4006a000
    36ac:	.word	0x1fff18a8
    36b0:	.word	0x1fff18a9
    36b4:	.word	0x1fff18ec
    36b8:	.word	0x1fff18a4
    36bc:	.word	0x1fff1930
    36c0:	.word	0x1fff192c
    36c4:	.word	0x1fff1934
    36c8:	.word	0x1fff192d
    36cc:	.word	0x1fff18ac

000036d0 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    36d0:	ldr	r2, [pc, #20]	; (36e8 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    36d2:	ldr	r3, [pc, #24]	; (36ec <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    36d4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    36d6:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    36d8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    36da:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    36dc:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    36de:	it	cc
    36e0:	addcc	r0, #64	; 0x40
    36e2:	subs	r0, r0, r3
}
    36e4:	bx	lr
    36e6:	nop
    36e8:	.word	0x1fff193c
    36ec:	.word	0x1fff193d

000036f0 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    36f0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    36f2:	ldr	r3, [pc, #176]	; (37a4 <lpuart0_status_isr+0xb4>)
    36f4:	ldr	r2, [r3, #4]
    36f6:	lsls	r4, r2, #10
    36f8:	bpl.n	373a <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    36fa:	ldr	r0, [pc, #172]	; (37a8 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    36fc:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    36fe:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3700:	ldr	r1, [pc, #168]	; (37ac <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3702:	adds	r3, #1
    3704:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3706:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3708:	it	gt
    370a:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    370c:	cmp	r3, r1
    370e:	beq.n	371a <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3710:	ldr	r4, [pc, #156]	; (37b0 <lpuart0_status_isr+0xc0>)
    3712:	uxtb	r2, r2
			rx_buffer_head = head;
    3714:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3716:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3718:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    371a:	ldr	r2, [pc, #152]	; (37b4 <lpuart0_status_isr+0xc4>)
    371c:	ldr	r1, [r2, #0]
    371e:	cbz	r1, 373a <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3720:	ldr	r2, [pc, #148]	; (37b8 <lpuart0_status_isr+0xc8>)
    3722:	ldrb	r2, [r2, #0]
    3724:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3726:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3728:	itet	cc
    372a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    372e:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3730:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3732:	cmp	r3, #39	; 0x27
    3734:	itt	gt
    3736:	movgt	r3, #1
    3738:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    373a:	ldr	r2, [pc, #104]	; (37a4 <lpuart0_status_isr+0xb4>)
    373c:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    373e:	lsls	r0, r3, #8
    3740:	bpl.n	3748 <lpuart0_status_isr+0x58>
    3742:	ldr	r2, [r2, #4]
    3744:	lsls	r1, r2, #8
    3746:	bmi.n	376c <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3748:	lsls	r2, r3, #9
    374a:	bpl.n	3768 <lpuart0_status_isr+0x78>
    374c:	ldr	r3, [pc, #84]	; (37a4 <lpuart0_status_isr+0xb4>)
    374e:	ldr	r3, [r3, #4]
    3750:	lsls	r3, r3, #9
    3752:	bpl.n	3768 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3754:	ldr	r3, [pc, #100]	; (37bc <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3756:	ldr	r1, [pc, #104]	; (37c0 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3758:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    375a:	movs	r2, #0
    375c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    375e:	cbz	r3, 3762 <lpuart0_status_isr+0x72>
    3760:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3762:	ldr	r3, [pc, #96]	; (37c4 <lpuart0_status_isr+0xd4>)
    3764:	movs	r2, #0
    3766:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3768:	pop	{r4, r5}
    376a:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    376c:	ldr	r2, [pc, #88]	; (37c8 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    376e:	ldr	r1, [pc, #72]	; (37b8 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3770:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3772:	ldrb	r2, [r1, #0]
    3774:	uxtb	r2, r2
		if (head == tail) {
    3776:	cmp	r0, r2
    3778:	beq.n	3796 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    377a:	adds	r2, #1
    377c:	cmp	r2, #39	; 0x27
    377e:	itt	hi
    3780:	movhi	r0, #0
    3782:	movhi	r2, r0
			n = tx_buffer[tail];
    3784:	ldr	r5, [pc, #68]	; (37cc <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3786:	ldr	r4, [pc, #28]	; (37a4 <lpuart0_status_isr+0xb4>)
    3788:	it	ls
    378a:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    378c:	ldrb	r2, [r5, r2]
    378e:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3790:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3792:	strb	r0, [r1, #0]
    3794:	b.n	3748 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3796:	ldr	r0, [pc, #56]	; (37d0 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3798:	ldr	r2, [pc, #40]	; (37c4 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    379a:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    379c:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    379e:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    37a0:	str	r1, [r2, #0]
    37a2:	b.n	3748 <lpuart0_status_isr+0x58>
    37a4:	.word	0x400c4000
    37a8:	.word	0x1fff193c
    37ac:	.word	0x1fff193d
    37b0:	.word	0x1fff1968
    37b4:	.word	0x1fff1938
    37b8:	.word	0x1fff19a9
    37bc:	.word	0x1fff19ac
    37c0:	.word	0x1fff19a8
    37c4:	.word	0x43880158
    37c8:	.word	0x1fff19b0
    37cc:	.word	0x1fff1940
    37d0:	.word	0x4388015c

000037d4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    37d4:	push	{r4, lr}
    37d6:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    37d8:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    37da:	bl	353c <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    37de:	ldr	r2, [pc, #96]	; (3840 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    37e0:	ldr	r3, [pc, #96]	; (3844 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    37e2:	ldr	r1, [pc, #100]	; (3848 <usb_init_serialnumber+0x74>)
    37e4:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    37e6:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    37e8:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    37ea:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    37ec:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    37ee:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    37f0:	ldrb	r3, [r2, #0]
    37f2:	lsls	r3, r3, #24
    37f4:	bpl.n	37f0 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    37f6:	ldr	r3, [pc, #84]	; (384c <usb_init_serialnumber+0x78>)
    37f8:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    37fa:	bl	3570 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    37fe:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3800:	ldr	r3, [pc, #76]	; (3850 <usb_init_serialnumber+0x7c>)
    3802:	cmp	r4, r3
    3804:	itt	ls
    3806:	addls.w	r4, r4, r4, lsl #2
    380a:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    380c:	mov	r0, r4
    380e:	ldr	r4, [pc, #68]	; (3854 <usb_init_serialnumber+0x80>)
    3810:	add	r1, sp, #4
    3812:	movs	r2, #10
    3814:	bl	3858 <ultoa>
    3818:	add	r1, sp, #4
    381a:	mov	r0, r4
	for (i=0; i<10; i++) {
    381c:	movs	r3, #0
		char c = buf[i];
    381e:	ldrb.w	r2, [r1], #1
    3822:	adds	r3, #1
		if (!c) break;
    3824:	cbz	r2, 3836 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3826:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3828:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    382c:	bne.n	381e <usb_init_serialnumber+0x4a>
    382e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3830:	strb	r3, [r4, #0]
}
    3832:	add	sp, #16
    3834:	pop	{r4, pc}
    3836:	lsls	r3, r3, #1
    3838:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    383a:	strb	r3, [r4, #0]
}
    383c:	add	sp, #16
    383e:	pop	{r4, pc}
    3840:	.word	0x40020004
    3844:	.word	0x40020000
    3848:	.word	0x41070000
    384c:	.word	0x4002000c
    3850:	.word	0x0098967f
    3854:	.word	0x1fff0d3c

00003858 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3858:	push	{r4, r5, r6, r7}
    385a:	subs	r5, r1, #1
    385c:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    385e:	movs	r4, #0
    3860:	b.n	3864 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3862:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3864:	udiv	r3, r0, r2
    3868:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    386c:	cmp	r0, #9
    386e:	add.w	r7, r0, #48	; 0x30
    3872:	itet	hi
    3874:	addhi	r0, #55	; 0x37
    3876:	uxtbls	r0, r7
    3878:	uxtbhi	r0, r0
    387a:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    387e:	mov	r0, r3
    3880:	cmp	r3, #0
    3882:	bne.n	3862 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3884:	adds	r2, r1, r4
    3886:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3888:	cbz	r4, 389e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    388a:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    388c:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3890:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3892:	adds	r3, #1
    3894:	subs	r0, r4, r3
    3896:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3898:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    389c:	blt.n	388a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    389e:	mov	r0, r1
    38a0:	pop	{r4, r5, r6, r7}
    38a2:	bx	lr

000038a4 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38a4:	ldr	r2, [pc, #20]	; (38bc <serial3_available+0x18>)
	tail = rx_buffer_tail;
    38a6:	ldr	r3, [pc, #24]	; (38c0 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38a8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    38aa:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38ac:	uxtb	r0, r0
	tail = rx_buffer_tail;
    38ae:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    38b0:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    38b2:	it	cc
    38b4:	addcc	r0, #64	; 0x40
    38b6:	subs	r0, r0, r3
}
    38b8:	bx	lr
    38ba:	nop
    38bc:	.word	0x1fff19b8
    38c0:	.word	0x1fff19b9

000038c4 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    38c4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    38c6:	ldr	r3, [pc, #172]	; (3974 <uart2_status_isr+0xb0>)
    38c8:	ldrb	r2, [r3, #4]
    38ca:	lsls	r4, r2, #26
    38cc:	bpl.n	390e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    38ce:	ldr	r0, [pc, #168]	; (3978 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    38d0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    38d2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38d4:	ldr	r1, [pc, #164]	; (397c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    38d6:	adds	r3, #1
    38d8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38da:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    38dc:	it	gt
    38de:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38e0:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    38e2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38e4:	beq.n	38ee <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    38e6:	ldr	r4, [pc, #152]	; (3980 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    38e8:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    38ea:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    38ec:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    38ee:	ldr	r2, [pc, #148]	; (3984 <uart2_status_isr+0xc0>)
    38f0:	ldr	r1, [r2, #0]
    38f2:	cbz	r1, 390e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    38f4:	ldr	r2, [pc, #144]	; (3988 <uart2_status_isr+0xc4>)
    38f6:	ldrb	r2, [r2, #0]
    38f8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    38fa:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    38fc:	itet	cc
    38fe:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3902:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3904:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3906:	cmp	r3, #39	; 0x27
    3908:	itt	gt
    390a:	movgt	r3, #1
    390c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    390e:	ldr	r2, [pc, #100]	; (3974 <uart2_status_isr+0xb0>)
    3910:	ldrb	r3, [r2, #3]
    3912:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3914:	lsls	r0, r3, #24
    3916:	bmi.n	393c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3918:	lsls	r2, r3, #25
    391a:	bpl.n	3938 <uart2_status_isr+0x74>
    391c:	ldr	r3, [pc, #84]	; (3974 <uart2_status_isr+0xb0>)
    391e:	ldrb	r3, [r3, #4]
    3920:	lsls	r3, r3, #25
    3922:	bpl.n	3938 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3924:	ldr	r3, [pc, #100]	; (398c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3926:	ldr	r1, [pc, #104]	; (3990 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3928:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    392a:	movs	r2, #0
    392c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    392e:	cbz	r3, 3932 <uart2_status_isr+0x6e>
    3930:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3932:	ldr	r3, [pc, #64]	; (3974 <uart2_status_isr+0xb0>)
    3934:	movs	r2, #44	; 0x2c
    3936:	strb	r2, [r3, #3]
	}
}
    3938:	pop	{r4, r5}
    393a:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    393c:	ldrb	r1, [r2, #4]
    393e:	lsls	r1, r1, #24
    3940:	bpl.n	3918 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3942:	ldr	r1, [pc, #80]	; (3994 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3944:	ldr	r0, [pc, #64]	; (3988 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3946:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3948:	ldrb	r1, [r0, #0]
    394a:	uxtb	r1, r1
		if (head == tail) {
    394c:	cmp	r4, r1
    394e:	beq.n	396c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3950:	adds	r2, r1, #1
    3952:	cmp	r2, #39	; 0x27
    3954:	itt	hi
    3956:	movhi	r1, #0
    3958:	movhi	r2, r1
			n = tx_buffer[tail];
    395a:	ldr	r5, [pc, #60]	; (3998 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    395c:	ldr	r4, [pc, #20]	; (3974 <uart2_status_isr+0xb0>)
    395e:	it	ls
    3960:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3962:	ldrb	r2, [r5, r2]
    3964:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3966:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3968:	strb	r1, [r0, #0]
    396a:	b.n	3918 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    396c:	movs	r1, #108	; 0x6c
    396e:	strb	r1, [r2, #3]
    3970:	b.n	3918 <uart2_status_isr+0x54>
    3972:	nop
    3974:	.word	0x4006c000
    3978:	.word	0x1fff19b8
    397c:	.word	0x1fff19b9
    3980:	.word	0x1fff19e4
    3984:	.word	0x1fff19b4
    3988:	.word	0x1fff1a25
    398c:	.word	0x1fff1a28
    3990:	.word	0x1fff1a24
    3994:	.word	0x1fff1a2c
    3998:	.word	0x1fff19bc

0000399c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    399c:	bx	lr
    399e:	nop

000039a0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    39a0:	bx	lr
    39a2:	nop

000039a4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    39a4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    39a6:	mrs	r2, PRIMASK
		__disable_irq();
    39aa:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    39ac:	ldrb	r3, [r0, #29]
    39ae:	cbnz	r3, 39be <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    39b0:	ldrb	r1, [r0, #28]
    39b2:	cmp	r1, #1
    39b4:	beq.n	39c8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    39b6:	cmp	r1, #3
    39b8:	beq.n	39dc <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    39ba:	movs	r3, #1
    39bc:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39be:	cbnz	r2, 39c2 <EventResponder::triggerEventNotImmediate()+0x1e>
    39c0:	cpsie	i
	}
	enableInterrupts(irq);
}
    39c2:	ldr.w	r4, [sp], #4
    39c6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    39c8:	ldr	r4, [pc, #68]	; (3a10 <EventResponder::triggerEventNotImmediate()+0x6c>)
    39ca:	ldr	r1, [r4, #0]
    39cc:	cbz	r1, 39f8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    39ce:	ldr	r1, [pc, #68]	; (3a14 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    39d0:	str	r3, [r0, #20]
				_prev = lastYield;
    39d2:	ldr	r3, [r1, #0]
    39d4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    39d6:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    39d8:	str	r0, [r3, #20]
    39da:	b.n	39ba <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    39dc:	ldr	r4, [pc, #56]	; (3a18 <EventResponder::triggerEventNotImmediate()+0x74>)
    39de:	ldr	r1, [r4, #0]
    39e0:	cbz	r1, 3a04 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    39e2:	ldr	r1, [pc, #56]	; (3a1c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    39e4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    39e6:	ldr	r3, [r1, #0]
    39e8:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    39ea:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    39ec:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    39ee:	ldr	r3, [pc, #48]	; (3a20 <EventResponder::triggerEventNotImmediate()+0x7c>)
    39f0:	mov.w	r1, #268435456	; 0x10000000
    39f4:	str	r1, [r3, #0]
    39f6:	b.n	39ba <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    39f8:	ldr	r3, [pc, #24]	; (3a14 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    39fa:	str	r1, [r0, #20]
				_prev = nullptr;
    39fc:	str	r1, [r0, #24]
				firstYield = this;
    39fe:	str	r0, [r4, #0]
				lastYield = this;
    3a00:	str	r0, [r3, #0]
    3a02:	b.n	39ba <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3a04:	ldr	r3, [pc, #20]	; (3a1c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3a06:	str	r1, [r0, #20]
				_prev = nullptr;
    3a08:	str	r1, [r0, #24]
				firstInterrupt = this;
    3a0a:	str	r0, [r4, #0]
				lastInterrupt = this;
    3a0c:	str	r0, [r3, #0]
    3a0e:	b.n	39ee <EventResponder::triggerEventNotImmediate()+0x4a>
    3a10:	.word	0x1fff1a40
    3a14:	.word	0x1fff1a3c
    3a18:	.word	0x1fff1a30
    3a1c:	.word	0x1fff1a34
    3a20:	.word	0xe000ed04

00003a24 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3a24:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3a26:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3a28:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3a2a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3a2c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3a2e:	beq.n	3a38 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3a30:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3a34:	b.w	39a4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3a38:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3a3a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3a3e:	bx	r3

00003a40 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3a40:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3a42:	mrs	r2, PRIMASK
		__disable_irq();
    3a46:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3a48:	ldr	r4, [pc, #48]	; (3a7c <EventResponder::runFromInterrupt()+0x3c>)
    3a4a:	ldr	r0, [r4, #0]
		if (first) {
    3a4c:	cbz	r0, 3a70 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3a4e:	ldr	r6, [pc, #48]	; (3a80 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3a50:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3a52:	ldr	r3, [r0, #20]
    3a54:	str	r3, [r4, #0]
			if (firstInterrupt) {
    3a56:	cbz	r3, 3a76 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3a58:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3a5a:	cbnz	r2, 3a5e <EventResponder::runFromInterrupt()+0x1e>
    3a5c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3a5e:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3a60:	ldr	r3, [r0, #8]
    3a62:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3a64:	mrs	r2, PRIMASK
		__disable_irq();
    3a68:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3a6a:	ldr	r0, [r4, #0]
		if (first) {
    3a6c:	cmp	r0, #0
    3a6e:	bne.n	3a52 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3a70:	cbnz	r2, 3a74 <EventResponder::runFromInterrupt()+0x34>
    3a72:	cpsie	i
    3a74:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3a76:	str	r3, [r6, #0]
    3a78:	b.n	3a5a <EventResponder::runFromInterrupt()+0x1a>
    3a7a:	nop
    3a7c:	.word	0x1fff1a30
    3a80:	.word	0x1fff1a34

00003a84 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3a84:	b.w	3a40 <EventResponder::runFromInterrupt()>

00003a88 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3a88:	ldr	r2, [pc, #96]	; (3aec <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3a8a:	push	{r4, r5}
	if (listActive == nullptr) {
    3a8c:	ldr	r4, [r2, #0]
    3a8e:	cmp	r4, #0
    3a90:	beq.n	3ae2 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3a92:	ldr	r3, [r0, #0]
    3a94:	ldr	r1, [r4, #0]
    3a96:	cmp	r3, r1
    3a98:	bcs.n	3ab8 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3a9a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3a9c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3a9e:	str	r4, [r0, #8]
		_prev = nullptr;
    3aa0:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3aa2:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3aa4:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3aa6:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3aa8:	movs	r3, #2
    3aaa:	strb	r3, [r0, #20]
}
    3aac:	pop	{r4, r5}
    3aae:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3ab0:	ldr	r1, [r2, #0]
    3ab2:	cmp	r3, r1
    3ab4:	mov	r4, r2
    3ab6:	bcc.n	3aca <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3ab8:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3aba:	subs	r3, r3, r1
    3abc:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3abe:	cmp	r2, #0
    3ac0:	bne.n	3ab0 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3ac2:	str	r2, [r0, #8]
		_prev = timer;
    3ac4:	str	r4, [r0, #12]
		timer->_next = this;
    3ac6:	str	r0, [r4, #8]
    3ac8:	b.n	3aa8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3aca:	ldr	r2, [r2, #12]
    3acc:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3ace:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3ad0:	str	r0, [r4, #12]
				_prev->_next = this;
    3ad2:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3ad4:	subs	r3, r1, r3
				_state = TimerActive;
    3ad6:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    3ad8:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    3ada:	str	r3, [r4, #0]
				_state = TimerActive;
    3adc:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3ade:	pop	{r4, r5}
    3ae0:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3ae2:	str	r4, [r0, #8]
		_prev = nullptr;
    3ae4:	str	r4, [r0, #12]
		listActive = this;
    3ae6:	str	r0, [r2, #0]
    3ae8:	b.n	3aa8 <MillisTimer::addToActiveList()+0x20>
    3aea:	nop
    3aec:	.word	0x1fff1a38

00003af0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3af0:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3af2:	ldr	r6, [pc, #136]	; (3b7c <MillisTimer::runFromTimer()+0x8c>)
    3af4:	ldr	r4, [r6, #0]
	while (timer) {
    3af6:	cbz	r4, 3b44 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3af8:	ldr	r3, [r4, #0]
    3afa:	cmp	r3, #0
    3afc:	bne.n	3b74 <MillisTimer::runFromTimer()+0x84>
    3afe:	ldr	r7, [pc, #128]	; (3b80 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3b00:	mov	r5, r3
    3b02:	b.n	3b0e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3b04:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3b06:	cbz	r4, 3b44 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3b08:	ldr	r3, [r4, #0]
    3b0a:	cmp	r3, #0
    3b0c:	bne.n	3b74 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3b0e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3b10:	cbz	r3, 3b14 <MillisTimer::runFromTimer()+0x24>
    3b12:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3b14:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3b16:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3b18:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3b1a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3b1c:	ldr	r3, [r3, #0]
    3b1e:	cmp	r3, r7
    3b20:	bne.n	3b66 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3b22:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3b24:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3b26:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3b28:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3b2a:	beq.n	3b6e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3b2c:	bl	39a4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3b30:	ldr	r3, [r4, #4]
    3b32:	cmp	r3, #0
    3b34:	beq.n	3b04 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3b36:	str	r3, [r4, #0]
				timer->addToActiveList();
    3b38:	mov	r0, r4
    3b3a:	bl	3a88 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3b3e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3b40:	cmp	r4, #0
    3b42:	bne.n	3b08 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3b44:	mrs	r3, PRIMASK
		__disable_irq();
    3b48:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3b4a:	ldr	r2, [pc, #56]	; (3b84 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3b4c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3b4e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3b50:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3b52:	cbnz	r3, 3b56 <MillisTimer::runFromTimer()+0x66>
    3b54:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3b56:	cbz	r0, 3b64 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3b58:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3b5a:	bl	3a88 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3b5e:	mov	r0, r4
    3b60:	cmp	r0, #0
    3b62:	bne.n	3b58 <MillisTimer::runFromTimer()+0x68>
    3b64:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3b66:	mov	r2, r4
    3b68:	movs	r1, #0
    3b6a:	blx	r3
    3b6c:	b.n	3b30 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3b6e:	ldr	r3, [r0, #8]
    3b70:	blx	r3
    3b72:	b.n	3b30 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3b74:	subs	r3, #1
    3b76:	str	r3, [r4, #0]
			break;
    3b78:	b.n	3b44 <MillisTimer::runFromTimer()+0x54>
    3b7a:	nop
    3b7c:	.word	0x1fff1a38
    3b80:	.word	0x00003a25
    3b84:	.word	0x1fff1a48

00003b88 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    3b88:	ldr	r2, [pc, #8]	; (3b94 <systick_isr+0xc>)
    3b8a:	ldr	r3, [r2, #0]
    3b8c:	adds	r3, #1
    3b8e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3b90:	b.w	3af0 <MillisTimer::runFromTimer()>
    3b94:	.word	0x1fff15cc

00003b98 <__errno>:
    3b98:	ldr	r3, [pc, #4]	; (3ba0 <__errno+0x8>)
    3b9a:	ldr	r0, [r3, #0]
    3b9c:	bx	lr
    3b9e:	nop
    3ba0:	.word	0x1fff1180

00003ba4 <__libc_init_array>:
    3ba4:	push	{r4, r5, r6, lr}
    3ba6:	ldr	r6, [pc, #60]	; (3be4 <__libc_init_array+0x40>)
    3ba8:	ldr	r5, [pc, #60]	; (3be8 <__libc_init_array+0x44>)
    3baa:	subs	r6, r6, r5
    3bac:	asrs	r6, r6, #2
    3bae:	it	ne
    3bb0:	movne	r4, #0
    3bb2:	beq.n	3bc0 <__libc_init_array+0x1c>
    3bb4:	adds	r4, #1
    3bb6:	ldr.w	r3, [r5], #4
    3bba:	blx	r3
    3bbc:	cmp	r6, r4
    3bbe:	bne.n	3bb4 <__libc_init_array+0x10>
    3bc0:	ldr	r6, [pc, #40]	; (3bec <__libc_init_array+0x48>)
    3bc2:	ldr	r5, [pc, #44]	; (3bf0 <__libc_init_array+0x4c>)
    3bc4:	subs	r6, r6, r5
    3bc6:	bl	4950 <_init>
    3bca:	asrs	r6, r6, #2
    3bcc:	it	ne
    3bce:	movne	r4, #0
    3bd0:	beq.n	3be0 <__libc_init_array+0x3c>
    3bd2:	adds	r4, #1
    3bd4:	ldr.w	r3, [r5], #4
    3bd8:	blx	r3
    3bda:	cmp	r6, r4
    3bdc:	bne.n	3bd2 <__libc_init_array+0x2e>
    3bde:	pop	{r4, r5, r6, pc}
    3be0:	pop	{r4, r5, r6, pc}
    3be2:	nop
    3be4:	.word	0x0000495c
    3be8:	.word	0x0000495c
    3bec:	.word	0x00004968
    3bf0:	.word	0x0000495c

00003bf4 <malloc>:
    3bf4:	ldr	r3, [pc, #8]	; (3c00 <malloc+0xc>)
    3bf6:	mov	r1, r0
    3bf8:	ldr	r0, [r3, #0]
    3bfa:	b.w	3c04 <_malloc_r>
    3bfe:	nop
    3c00:	.word	0x1fff1180

00003c04 <_malloc_r>:
    3c04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c08:	add.w	r5, r1, #11
    3c0c:	cmp	r5, #22
    3c0e:	sub	sp, #12
    3c10:	mov	r6, r0
    3c12:	bls.w	3d54 <_malloc_r+0x150>
    3c16:	bics.w	r5, r5, #7
    3c1a:	bmi.w	3d9c <_malloc_r+0x198>
    3c1e:	cmp	r1, r5
    3c20:	bhi.w	3d9c <_malloc_r+0x198>
    3c24:	bl	4210 <__malloc_lock>
    3c28:	cmp.w	r5, #504	; 0x1f8
    3c2c:	bcc.w	4168 <_malloc_r+0x564>
    3c30:	lsrs	r3, r5, #9
    3c32:	beq.w	3daa <_malloc_r+0x1a6>
    3c36:	cmp	r3, #4
    3c38:	bhi.w	3f42 <_malloc_r+0x33e>
    3c3c:	lsrs	r0, r5, #6
    3c3e:	add.w	lr, r0, #57	; 0x39
    3c42:	mov.w	r3, lr, lsl #1
    3c46:	adds	r0, #56	; 0x38
    3c48:	ldr	r7, [pc, #784]	; (3f5c <_malloc_r+0x358>)
    3c4a:	add.w	r3, r7, r3, lsl #2
    3c4e:	sub.w	r1, r3, #8
    3c52:	ldr	r4, [r3, #4]
    3c54:	cmp	r1, r4
    3c56:	bne.n	3c68 <_malloc_r+0x64>
    3c58:	b.n	3db4 <_malloc_r+0x1b0>
    3c5a:	cmp	r2, #0
    3c5c:	bge.w	3db8 <_malloc_r+0x1b4>
    3c60:	ldr	r4, [r4, #12]
    3c62:	cmp	r1, r4
    3c64:	beq.w	3db4 <_malloc_r+0x1b0>
    3c68:	ldr	r3, [r4, #4]
    3c6a:	bic.w	r3, r3, #3
    3c6e:	subs	r2, r3, r5
    3c70:	cmp	r2, #15
    3c72:	ble.n	3c5a <_malloc_r+0x56>
    3c74:	ldr	r1, [pc, #740]	; (3f5c <_malloc_r+0x358>)
    3c76:	ldr	r4, [r7, #16]
    3c78:	add.w	lr, r1, #8
    3c7c:	cmp	r4, lr
    3c7e:	beq.w	3fe8 <_malloc_r+0x3e4>
    3c82:	ldr	r3, [r4, #4]
    3c84:	bic.w	r3, r3, #3
    3c88:	subs	r2, r3, r5
    3c8a:	cmp	r2, #15
    3c8c:	bgt.w	3fc2 <_malloc_r+0x3be>
    3c90:	cmp	r2, #0
    3c92:	str.w	lr, [r1, #20]
    3c96:	str.w	lr, [r1, #16]
    3c9a:	bge.w	3dda <_malloc_r+0x1d6>
    3c9e:	cmp.w	r3, #512	; 0x200
    3ca2:	bcs.w	3f74 <_malloc_r+0x370>
    3ca6:	lsrs	r3, r3, #3
    3ca8:	add.w	ip, r3, #1
    3cac:	movs	r2, #1
    3cae:	asrs	r3, r3, #2
    3cb0:	lsl.w	r3, r2, r3
    3cb4:	ldr	r2, [r1, #4]
    3cb6:	ldr.w	r8, [r1, ip, lsl #3]
    3cba:	str.w	r8, [r4, #8]
    3cbe:	add.w	r9, r1, ip, lsl #3
    3cc2:	orrs	r2, r3
    3cc4:	sub.w	r3, r9, #8
    3cc8:	str	r3, [r4, #12]
    3cca:	str	r2, [r1, #4]
    3ccc:	str.w	r4, [r1, ip, lsl #3]
    3cd0:	str.w	r4, [r8, #12]
    3cd4:	asrs	r3, r0, #2
    3cd6:	movs	r4, #1
    3cd8:	lsls	r4, r3
    3cda:	cmp	r4, r2
    3cdc:	bhi.w	3df4 <_malloc_r+0x1f0>
    3ce0:	tst	r4, r2
    3ce2:	bne.n	3cf2 <_malloc_r+0xee>
    3ce4:	bic.w	r0, r0, #3
    3ce8:	lsls	r4, r4, #1
    3cea:	tst	r4, r2
    3cec:	add.w	r0, r0, #4
    3cf0:	beq.n	3ce8 <_malloc_r+0xe4>
    3cf2:	add.w	r9, r7, r0, lsl #3
    3cf6:	mov	ip, r9
    3cf8:	mov	r8, r0
    3cfa:	ldr.w	r1, [ip, #12]
    3cfe:	cmp	ip, r1
    3d00:	bne.n	3d12 <_malloc_r+0x10e>
    3d02:	b.n	3fec <_malloc_r+0x3e8>
    3d04:	cmp	r2, #0
    3d06:	bge.w	400c <_malloc_r+0x408>
    3d0a:	ldr	r1, [r1, #12]
    3d0c:	cmp	ip, r1
    3d0e:	beq.w	3fec <_malloc_r+0x3e8>
    3d12:	ldr	r3, [r1, #4]
    3d14:	bic.w	r3, r3, #3
    3d18:	subs	r2, r3, r5
    3d1a:	cmp	r2, #15
    3d1c:	ble.n	3d04 <_malloc_r+0x100>
    3d1e:	mov	r4, r1
    3d20:	ldr.w	ip, [r1, #12]
    3d24:	ldr.w	r8, [r4, #8]!
    3d28:	adds	r3, r1, r5
    3d2a:	orr.w	r5, r5, #1
    3d2e:	str	r5, [r1, #4]
    3d30:	orr.w	r1, r2, #1
    3d34:	str.w	ip, [r8, #12]
    3d38:	mov	r0, r6
    3d3a:	str.w	r8, [ip, #8]
    3d3e:	str	r3, [r7, #20]
    3d40:	str	r3, [r7, #16]
    3d42:	str.w	lr, [r3, #12]
    3d46:	str.w	lr, [r3, #8]
    3d4a:	str	r1, [r3, #4]
    3d4c:	str	r2, [r3, r2]
    3d4e:	bl	4214 <__malloc_unlock>
    3d52:	b.n	3d94 <_malloc_r+0x190>
    3d54:	cmp	r1, #16
    3d56:	bhi.n	3d9c <_malloc_r+0x198>
    3d58:	bl	4210 <__malloc_lock>
    3d5c:	movs	r5, #16
    3d5e:	movs	r3, #6
    3d60:	movs	r0, #2
    3d62:	ldr	r7, [pc, #504]	; (3f5c <_malloc_r+0x358>)
    3d64:	add.w	r3, r7, r3, lsl #2
    3d68:	sub.w	r2, r3, #8
    3d6c:	ldr	r4, [r3, #4]
    3d6e:	cmp	r4, r2
    3d70:	beq.w	3ffe <_malloc_r+0x3fa>
    3d74:	ldr	r3, [r4, #4]
    3d76:	ldr	r1, [r4, #12]
    3d78:	ldr	r5, [r4, #8]
    3d7a:	bic.w	r3, r3, #3
    3d7e:	add	r3, r4
    3d80:	mov	r0, r6
    3d82:	ldr	r2, [r3, #4]
    3d84:	str	r1, [r5, #12]
    3d86:	orr.w	r2, r2, #1
    3d8a:	str	r5, [r1, #8]
    3d8c:	str	r2, [r3, #4]
    3d8e:	bl	4214 <__malloc_unlock>
    3d92:	adds	r4, #8
    3d94:	mov	r0, r4
    3d96:	add	sp, #12
    3d98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d9c:	movs	r4, #0
    3d9e:	movs	r3, #12
    3da0:	mov	r0, r4
    3da2:	str	r3, [r6, #0]
    3da4:	add	sp, #12
    3da6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3daa:	movs	r3, #128	; 0x80
    3dac:	mov.w	lr, #64	; 0x40
    3db0:	movs	r0, #63	; 0x3f
    3db2:	b.n	3c48 <_malloc_r+0x44>
    3db4:	mov	r0, lr
    3db6:	b.n	3c74 <_malloc_r+0x70>
    3db8:	add	r3, r4
    3dba:	ldr	r1, [r4, #12]
    3dbc:	ldr	r2, [r3, #4]
    3dbe:	ldr	r5, [r4, #8]
    3dc0:	orr.w	r2, r2, #1
    3dc4:	str	r1, [r5, #12]
    3dc6:	mov	r0, r6
    3dc8:	str	r5, [r1, #8]
    3dca:	str	r2, [r3, #4]
    3dcc:	bl	4214 <__malloc_unlock>
    3dd0:	adds	r4, #8
    3dd2:	mov	r0, r4
    3dd4:	add	sp, #12
    3dd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3dda:	add	r3, r4
    3ddc:	mov	r0, r6
    3dde:	ldr	r2, [r3, #4]
    3de0:	orr.w	r2, r2, #1
    3de4:	str	r2, [r3, #4]
    3de6:	bl	4214 <__malloc_unlock>
    3dea:	adds	r4, #8
    3dec:	mov	r0, r4
    3dee:	add	sp, #12
    3df0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3df4:	ldr	r4, [r7, #8]
    3df6:	ldr	r3, [r4, #4]
    3df8:	bic.w	r8, r3, #3
    3dfc:	cmp	r8, r5
    3dfe:	bcc.n	3e0a <_malloc_r+0x206>
    3e00:	rsb	r3, r5, r8
    3e04:	cmp	r3, #15
    3e06:	bgt.w	3f22 <_malloc_r+0x31e>
    3e0a:	ldr	r3, [pc, #340]	; (3f60 <_malloc_r+0x35c>)
    3e0c:	ldr.w	r9, [pc, #352]	; 3f70 <_malloc_r+0x36c>
    3e10:	ldr	r2, [r3, #0]
    3e12:	ldr.w	r3, [r9]
    3e16:	adds	r3, #1
    3e18:	add	r2, r5
    3e1a:	add.w	sl, r4, r8
    3e1e:	beq.w	40e2 <_malloc_r+0x4de>
    3e22:	add.w	r2, r2, #4096	; 0x1000
    3e26:	adds	r2, #15
    3e28:	bic.w	r2, r2, #4080	; 0xff0
    3e2c:	bic.w	r2, r2, #15
    3e30:	mov	r1, r2
    3e32:	mov	r0, r6
    3e34:	str	r2, [sp, #4]
    3e36:	bl	4218 <_sbrk_r>
    3e3a:	cmp.w	r0, #4294967295
    3e3e:	mov	fp, r0
    3e40:	ldr	r2, [sp, #4]
    3e42:	beq.w	40f6 <_malloc_r+0x4f2>
    3e46:	cmp	sl, r0
    3e48:	bhi.w	4044 <_malloc_r+0x440>
    3e4c:	ldr	r3, [pc, #276]	; (3f64 <_malloc_r+0x360>)
    3e4e:	ldr	r1, [r3, #0]
    3e50:	cmp	sl, fp
    3e52:	add	r1, r2
    3e54:	str	r1, [r3, #0]
    3e56:	beq.w	4100 <_malloc_r+0x4fc>
    3e5a:	ldr.w	r0, [r9]
    3e5e:	ldr.w	lr, [pc, #272]	; 3f70 <_malloc_r+0x36c>
    3e62:	adds	r0, #1
    3e64:	ittet	ne
    3e66:	rsbne	sl, sl, fp
    3e6a:	addne	r1, sl
    3e6c:	streq.w	fp, [lr]
    3e70:	strne	r1, [r3, #0]
    3e72:	ands.w	r1, fp, #7
    3e76:	beq.w	40a8 <_malloc_r+0x4a4>
    3e7a:	rsb	r0, r1, #8
    3e7e:	rsb	r1, r1, #4096	; 0x1000
    3e82:	add	fp, r0
    3e84:	adds	r1, #8
    3e86:	add	r2, fp
    3e88:	ubfx	r2, r2, #0, #12
    3e8c:	rsb	r9, r2, r1
    3e90:	mov	r1, r9
    3e92:	mov	r0, r6
    3e94:	str	r3, [sp, #4]
    3e96:	bl	4218 <_sbrk_r>
    3e9a:	adds	r3, r0, #1
    3e9c:	ldr	r3, [sp, #4]
    3e9e:	beq.w	4120 <_malloc_r+0x51c>
    3ea2:	rsb	r2, fp, r0
    3ea6:	add	r2, r9
    3ea8:	orr.w	r2, r2, #1
    3eac:	ldr	r1, [r3, #0]
    3eae:	str.w	fp, [r7, #8]
    3eb2:	add	r1, r9
    3eb4:	cmp	r4, r7
    3eb6:	str.w	r2, [fp, #4]
    3eba:	str	r1, [r3, #0]
    3ebc:	ldr.w	r9, [pc, #164]	; 3f64 <_malloc_r+0x360>
    3ec0:	beq.n	3ef0 <_malloc_r+0x2ec>
    3ec2:	cmp.w	r8, #15
    3ec6:	bls.w	40c4 <_malloc_r+0x4c0>
    3eca:	ldr	r2, [r4, #4]
    3ecc:	sub.w	r3, r8, #12
    3ed0:	bic.w	r3, r3, #7
    3ed4:	adds	r0, r4, r3
    3ed6:	and.w	r2, r2, #1
    3eda:	mov.w	lr, #5
    3ede:	orrs	r2, r3
    3ee0:	cmp	r3, #15
    3ee2:	str	r2, [r4, #4]
    3ee4:	str.w	lr, [r0, #4]
    3ee8:	str.w	lr, [r0, #8]
    3eec:	bhi.w	4128 <_malloc_r+0x524>
    3ef0:	ldr	r3, [pc, #116]	; (3f68 <_malloc_r+0x364>)
    3ef2:	ldr	r4, [r7, #8]
    3ef4:	ldr	r2, [r3, #0]
    3ef6:	cmp	r1, r2
    3ef8:	it	hi
    3efa:	strhi	r1, [r3, #0]
    3efc:	ldr	r3, [pc, #108]	; (3f6c <_malloc_r+0x368>)
    3efe:	ldr	r2, [r3, #0]
    3f00:	cmp	r1, r2
    3f02:	ldr	r2, [r4, #4]
    3f04:	it	hi
    3f06:	strhi	r1, [r3, #0]
    3f08:	bic.w	r2, r2, #3
    3f0c:	cmp	r5, r2
    3f0e:	sub.w	r3, r2, r5
    3f12:	bhi.n	3f18 <_malloc_r+0x314>
    3f14:	cmp	r3, #15
    3f16:	bgt.n	3f22 <_malloc_r+0x31e>
    3f18:	mov	r0, r6
    3f1a:	bl	4214 <__malloc_unlock>
    3f1e:	movs	r4, #0
    3f20:	b.n	3d94 <_malloc_r+0x190>
    3f22:	adds	r2, r4, r5
    3f24:	orr.w	r3, r3, #1
    3f28:	orr.w	r5, r5, #1
    3f2c:	str	r5, [r4, #4]
    3f2e:	mov	r0, r6
    3f30:	str	r2, [r7, #8]
    3f32:	str	r3, [r2, #4]
    3f34:	bl	4214 <__malloc_unlock>
    3f38:	adds	r4, #8
    3f3a:	mov	r0, r4
    3f3c:	add	sp, #12
    3f3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f42:	cmp	r3, #20
    3f44:	bls.n	402a <_malloc_r+0x426>
    3f46:	cmp	r3, #84	; 0x54
    3f48:	bhi.w	4094 <_malloc_r+0x490>
    3f4c:	lsrs	r0, r5, #12
    3f4e:	add.w	lr, r0, #111	; 0x6f
    3f52:	mov.w	r3, lr, lsl #1
    3f56:	adds	r0, #110	; 0x6e
    3f58:	b.n	3c48 <_malloc_r+0x44>
    3f5a:	nop
    3f5c:	.word	0x1fff1184
    3f60:	.word	0x1fff1a54
    3f64:	.word	0x1fff1a58
    3f68:	.word	0x1fff1a50
    3f6c:	.word	0x1fff1a4c
    3f70:	.word	0x1fff1590
    3f74:	lsrs	r2, r3, #9
    3f76:	cmp	r2, #4
    3f78:	bls.n	4038 <_malloc_r+0x434>
    3f7a:	cmp	r2, #20
    3f7c:	bhi.w	40e6 <_malloc_r+0x4e2>
    3f80:	add.w	r1, r2, #92	; 0x5c
    3f84:	lsls	r1, r1, #1
    3f86:	adds	r2, #91	; 0x5b
    3f88:	add.w	ip, r7, r1, lsl #2
    3f8c:	ldr.w	r1, [r7, r1, lsl #2]
    3f90:	ldr.w	r8, [pc, #476]	; 4170 <_malloc_r+0x56c>
    3f94:	sub.w	ip, ip, #8
    3f98:	cmp	ip, r1
    3f9a:	beq.w	40ae <_malloc_r+0x4aa>
    3f9e:	ldr	r2, [r1, #4]
    3fa0:	bic.w	r2, r2, #3
    3fa4:	cmp	r3, r2
    3fa6:	bcs.n	3fae <_malloc_r+0x3aa>
    3fa8:	ldr	r1, [r1, #8]
    3faa:	cmp	ip, r1
    3fac:	bne.n	3f9e <_malloc_r+0x39a>
    3fae:	ldr.w	ip, [r1, #12]
    3fb2:	ldr	r2, [r7, #4]
    3fb4:	str.w	ip, [r4, #12]
    3fb8:	str	r1, [r4, #8]
    3fba:	str.w	r4, [ip, #8]
    3fbe:	str	r4, [r1, #12]
    3fc0:	b.n	3cd4 <_malloc_r+0xd0>
    3fc2:	adds	r3, r4, r5
    3fc4:	orr.w	r7, r2, #1
    3fc8:	orr.w	r5, r5, #1
    3fcc:	str	r5, [r4, #4]
    3fce:	mov	r0, r6
    3fd0:	str	r3, [r1, #20]
    3fd2:	str	r3, [r1, #16]
    3fd4:	str.w	lr, [r3, #12]
    3fd8:	str.w	lr, [r3, #8]
    3fdc:	str	r7, [r3, #4]
    3fde:	str	r2, [r3, r2]
    3fe0:	adds	r4, #8
    3fe2:	bl	4214 <__malloc_unlock>
    3fe6:	b.n	3d94 <_malloc_r+0x190>
    3fe8:	ldr	r2, [r1, #4]
    3fea:	b.n	3cd4 <_malloc_r+0xd0>
    3fec:	add.w	r8, r8, #1
    3ff0:	tst.w	r8, #3
    3ff4:	add.w	ip, ip, #8
    3ff8:	bne.w	3cfa <_malloc_r+0xf6>
    3ffc:	b.n	4060 <_malloc_r+0x45c>
    3ffe:	ldr	r4, [r3, #12]
    4000:	cmp	r3, r4
    4002:	it	eq
    4004:	addeq	r0, #2
    4006:	beq.w	3c74 <_malloc_r+0x70>
    400a:	b.n	3d74 <_malloc_r+0x170>
    400c:	add	r3, r1
    400e:	mov	r4, r1
    4010:	ldr	r2, [r3, #4]
    4012:	ldr	r1, [r1, #12]
    4014:	ldr.w	r5, [r4, #8]!
    4018:	orr.w	r2, r2, #1
    401c:	str	r2, [r3, #4]
    401e:	mov	r0, r6
    4020:	str	r1, [r5, #12]
    4022:	str	r5, [r1, #8]
    4024:	bl	4214 <__malloc_unlock>
    4028:	b.n	3d94 <_malloc_r+0x190>
    402a:	add.w	lr, r3, #92	; 0x5c
    402e:	add.w	r0, r3, #91	; 0x5b
    4032:	mov.w	r3, lr, lsl #1
    4036:	b.n	3c48 <_malloc_r+0x44>
    4038:	lsrs	r2, r3, #6
    403a:	add.w	r1, r2, #57	; 0x39
    403e:	lsls	r1, r1, #1
    4040:	adds	r2, #56	; 0x38
    4042:	b.n	3f88 <_malloc_r+0x384>
    4044:	cmp	r4, r7
    4046:	ldr	r3, [pc, #296]	; (4170 <_malloc_r+0x56c>)
    4048:	beq.w	3e4c <_malloc_r+0x248>
    404c:	ldr	r4, [r3, #8]
    404e:	ldr	r2, [r4, #4]
    4050:	bic.w	r2, r2, #3
    4054:	b.n	3f0c <_malloc_r+0x308>
    4056:	ldr.w	r3, [r9], #-8
    405a:	cmp	r9, r3
    405c:	bne.w	4164 <_malloc_r+0x560>
    4060:	tst.w	r0, #3
    4064:	add.w	r0, r0, #4294967295
    4068:	bne.n	4056 <_malloc_r+0x452>
    406a:	ldr	r3, [r7, #4]
    406c:	bic.w	r3, r3, r4
    4070:	str	r3, [r7, #4]
    4072:	lsls	r4, r4, #1
    4074:	cmp	r4, r3
    4076:	bhi.w	3df4 <_malloc_r+0x1f0>
    407a:	cmp	r4, #0
    407c:	beq.w	3df4 <_malloc_r+0x1f0>
    4080:	tst	r4, r3
    4082:	mov	r0, r8
    4084:	bne.w	3cf2 <_malloc_r+0xee>
    4088:	lsls	r4, r4, #1
    408a:	tst	r4, r3
    408c:	add.w	r0, r0, #4
    4090:	beq.n	4088 <_malloc_r+0x484>
    4092:	b.n	3cf2 <_malloc_r+0xee>
    4094:	cmp.w	r3, #340	; 0x154
    4098:	bhi.n	40cc <_malloc_r+0x4c8>
    409a:	lsrs	r0, r5, #15
    409c:	add.w	lr, r0, #120	; 0x78
    40a0:	mov.w	r3, lr, lsl #1
    40a4:	adds	r0, #119	; 0x77
    40a6:	b.n	3c48 <_malloc_r+0x44>
    40a8:	mov.w	r1, #4096	; 0x1000
    40ac:	b.n	3e86 <_malloc_r+0x282>
    40ae:	movs	r1, #1
    40b0:	ldr.w	r3, [r8, #4]
    40b4:	asrs	r2, r2, #2
    40b6:	lsl.w	r2, r1, r2
    40ba:	orrs	r2, r3
    40bc:	str.w	r2, [r8, #4]
    40c0:	mov	r1, ip
    40c2:	b.n	3fb4 <_malloc_r+0x3b0>
    40c4:	movs	r3, #1
    40c6:	str.w	r3, [fp, #4]
    40ca:	b.n	3f18 <_malloc_r+0x314>
    40cc:	movw	r2, #1364	; 0x554
    40d0:	cmp	r3, r2
    40d2:	bhi.n	4116 <_malloc_r+0x512>
    40d4:	lsrs	r0, r5, #18
    40d6:	add.w	lr, r0, #125	; 0x7d
    40da:	mov.w	r3, lr, lsl #1
    40de:	adds	r0, #124	; 0x7c
    40e0:	b.n	3c48 <_malloc_r+0x44>
    40e2:	adds	r2, #16
    40e4:	b.n	3e30 <_malloc_r+0x22c>
    40e6:	cmp	r2, #84	; 0x54
    40e8:	bhi.n	4138 <_malloc_r+0x534>
    40ea:	lsrs	r2, r3, #12
    40ec:	add.w	r1, r2, #111	; 0x6f
    40f0:	lsls	r1, r1, #1
    40f2:	adds	r2, #110	; 0x6e
    40f4:	b.n	3f88 <_malloc_r+0x384>
    40f6:	ldr	r4, [r7, #8]
    40f8:	ldr	r2, [r4, #4]
    40fa:	bic.w	r2, r2, #3
    40fe:	b.n	3f0c <_malloc_r+0x308>
    4100:	ubfx	r0, sl, #0, #12
    4104:	cmp	r0, #0
    4106:	bne.w	3e5a <_malloc_r+0x256>
    410a:	add	r2, r8
    410c:	ldr	r3, [r7, #8]
    410e:	orr.w	r2, r2, #1
    4112:	str	r2, [r3, #4]
    4114:	b.n	3ef0 <_malloc_r+0x2ec>
    4116:	movs	r3, #254	; 0xfe
    4118:	mov.w	lr, #127	; 0x7f
    411c:	movs	r0, #126	; 0x7e
    411e:	b.n	3c48 <_malloc_r+0x44>
    4120:	movs	r2, #1
    4122:	mov.w	r9, #0
    4126:	b.n	3eac <_malloc_r+0x2a8>
    4128:	add.w	r1, r4, #8
    412c:	mov	r0, r6
    412e:	bl	4320 <_free_r>
    4132:	ldr.w	r1, [r9]
    4136:	b.n	3ef0 <_malloc_r+0x2ec>
    4138:	cmp.w	r2, #340	; 0x154
    413c:	bhi.n	414a <_malloc_r+0x546>
    413e:	lsrs	r2, r3, #15
    4140:	add.w	r1, r2, #120	; 0x78
    4144:	lsls	r1, r1, #1
    4146:	adds	r2, #119	; 0x77
    4148:	b.n	3f88 <_malloc_r+0x384>
    414a:	movw	r1, #1364	; 0x554
    414e:	cmp	r2, r1
    4150:	bhi.n	415e <_malloc_r+0x55a>
    4152:	lsrs	r2, r3, #18
    4154:	add.w	r1, r2, #125	; 0x7d
    4158:	lsls	r1, r1, #1
    415a:	adds	r2, #124	; 0x7c
    415c:	b.n	3f88 <_malloc_r+0x384>
    415e:	movs	r1, #254	; 0xfe
    4160:	movs	r2, #126	; 0x7e
    4162:	b.n	3f88 <_malloc_r+0x384>
    4164:	ldr	r3, [r7, #4]
    4166:	b.n	4072 <_malloc_r+0x46e>
    4168:	lsrs	r0, r5, #3
    416a:	adds	r3, r0, #1
    416c:	lsls	r3, r3, #1
    416e:	b.n	3d62 <_malloc_r+0x15e>
    4170:	.word	0x1fff1184

00004174 <memset>:
    4174:	push	{r4, r5, r6}
    4176:	lsls	r4, r0, #30
    4178:	beq.n	4208 <memset+0x94>
    417a:	subs	r4, r2, #1
    417c:	cmp	r2, #0
    417e:	beq.n	4204 <memset+0x90>
    4180:	uxtb	r5, r1
    4182:	mov	r3, r0
    4184:	b.n	418c <memset+0x18>
    4186:	subs	r2, r4, #1
    4188:	cbz	r4, 4204 <memset+0x90>
    418a:	mov	r4, r2
    418c:	strb.w	r5, [r3], #1
    4190:	lsls	r2, r3, #30
    4192:	bne.n	4186 <memset+0x12>
    4194:	cmp	r4, #3
    4196:	bls.n	41f6 <memset+0x82>
    4198:	uxtb	r5, r1
    419a:	orr.w	r5, r5, r5, lsl #8
    419e:	cmp	r4, #15
    41a0:	orr.w	r5, r5, r5, lsl #16
    41a4:	bls.n	41da <memset+0x66>
    41a6:	add.w	r2, r3, #16
    41aa:	mov	r6, r4
    41ac:	subs	r6, #16
    41ae:	cmp	r6, #15
    41b0:	str.w	r5, [r2, #-16]
    41b4:	str.w	r5, [r2, #-12]
    41b8:	str.w	r5, [r2, #-8]
    41bc:	str.w	r5, [r2, #-4]
    41c0:	add.w	r2, r2, #16
    41c4:	bhi.n	41ac <memset+0x38>
    41c6:	sub.w	r2, r4, #16
    41ca:	bic.w	r2, r2, #15
    41ce:	and.w	r4, r4, #15
    41d2:	adds	r2, #16
    41d4:	cmp	r4, #3
    41d6:	add	r3, r2
    41d8:	bls.n	41f6 <memset+0x82>
    41da:	mov	r6, r3
    41dc:	mov	r2, r4
    41de:	subs	r2, #4
    41e0:	cmp	r2, #3
    41e2:	str.w	r5, [r6], #4
    41e6:	bhi.n	41de <memset+0x6a>
    41e8:	subs	r2, r4, #4
    41ea:	bic.w	r2, r2, #3
    41ee:	adds	r2, #4
    41f0:	add	r3, r2
    41f2:	and.w	r4, r4, #3
    41f6:	cbz	r4, 4204 <memset+0x90>
    41f8:	uxtb	r1, r1
    41fa:	add	r4, r3
    41fc:	strb.w	r1, [r3], #1
    4200:	cmp	r3, r4
    4202:	bne.n	41fc <memset+0x88>
    4204:	pop	{r4, r5, r6}
    4206:	bx	lr
    4208:	mov	r4, r2
    420a:	mov	r3, r0
    420c:	b.n	4194 <memset+0x20>
    420e:	nop

00004210 <__malloc_lock>:
    4210:	bx	lr
    4212:	nop

00004214 <__malloc_unlock>:
    4214:	bx	lr
    4216:	nop

00004218 <_sbrk_r>:
    4218:	push	{r3, r4, r5, lr}
    421a:	ldr	r4, [pc, #28]	; (4238 <_sbrk_r+0x20>)
    421c:	movs	r3, #0
    421e:	mov	r5, r0
    4220:	mov	r0, r1
    4222:	str	r3, [r4, #0]
    4224:	bl	3510 <_sbrk>
    4228:	adds	r3, r0, #1
    422a:	beq.n	422e <_sbrk_r+0x16>
    422c:	pop	{r3, r4, r5, pc}
    422e:	ldr	r3, [r4, #0]
    4230:	cmp	r3, #0
    4232:	beq.n	422c <_sbrk_r+0x14>
    4234:	str	r3, [r5, #0]
    4236:	pop	{r3, r4, r5, pc}
    4238:	.word	0x1fff1bc4

0000423c <register_fini>:
    423c:	ldr	r3, [pc, #8]	; (4248 <register_fini+0xc>)
    423e:	cbz	r3, 4246 <register_fini+0xa>
    4240:	ldr	r0, [pc, #8]	; (424c <register_fini+0x10>)
    4242:	b.w	4250 <atexit>
    4246:	bx	lr
    4248:	.word	0x00000000
    424c:	.word	0x0000425d

00004250 <atexit>:
    4250:	movs	r3, #0
    4252:	mov	r1, r0
    4254:	mov	r2, r3
    4256:	mov	r0, r3
    4258:	b.w	44f0 <__register_exitproc>

0000425c <__libc_fini_array>:
    425c:	push	{r3, r4, r5, lr}
    425e:	ldr	r5, [pc, #28]	; (427c <__libc_fini_array+0x20>)
    4260:	ldr	r4, [pc, #28]	; (4280 <__libc_fini_array+0x24>)
    4262:	subs	r4, r5, r4
    4264:	asrs	r4, r4, #2
    4266:	beq.n	4274 <__libc_fini_array+0x18>
    4268:	subs	r4, #1
    426a:	ldr.w	r3, [r5, #-4]!
    426e:	blx	r3
    4270:	cmp	r4, #0
    4272:	bne.n	4268 <__libc_fini_array+0xc>
    4274:	ldmia.w	sp!, {r3, r4, r5, lr}
    4278:	b.w	4968 <__init_array_end>
	...

00004284 <_malloc_trim_r>:
    4284:	push	{r3, r4, r5, r6, r7, lr}
    4286:	ldr	r7, [pc, #140]	; (4314 <_malloc_trim_r+0x90>)
    4288:	mov	r4, r1
    428a:	mov	r6, r0
    428c:	bl	4210 <__malloc_lock>
    4290:	ldr	r3, [r7, #8]
    4292:	ldr	r5, [r3, #4]
    4294:	bic.w	r5, r5, #3
    4298:	subs	r1, r5, r4
    429a:	addw	r1, r1, #4079	; 0xfef
    429e:	bic.w	r1, r1, #4080	; 0xff0
    42a2:	bic.w	r1, r1, #15
    42a6:	sub.w	r4, r1, #4096	; 0x1000
    42aa:	cmp.w	r4, #4096	; 0x1000
    42ae:	blt.n	42c0 <_malloc_trim_r+0x3c>
    42b0:	movs	r1, #0
    42b2:	mov	r0, r6
    42b4:	bl	4218 <_sbrk_r>
    42b8:	ldr	r3, [r7, #8]
    42ba:	add	r3, r5
    42bc:	cmp	r0, r3
    42be:	beq.n	42ca <_malloc_trim_r+0x46>
    42c0:	mov	r0, r6
    42c2:	bl	4214 <__malloc_unlock>
    42c6:	movs	r0, #0
    42c8:	pop	{r3, r4, r5, r6, r7, pc}
    42ca:	negs	r1, r4
    42cc:	mov	r0, r6
    42ce:	bl	4218 <_sbrk_r>
    42d2:	adds	r0, #1
    42d4:	beq.n	42f2 <_malloc_trim_r+0x6e>
    42d6:	ldr	r3, [pc, #64]	; (4318 <_malloc_trim_r+0x94>)
    42d8:	ldr	r2, [r7, #8]
    42da:	ldr	r1, [r3, #0]
    42dc:	subs	r5, r5, r4
    42de:	orr.w	r5, r5, #1
    42e2:	mov	r0, r6
    42e4:	subs	r1, r1, r4
    42e6:	str	r5, [r2, #4]
    42e8:	str	r1, [r3, #0]
    42ea:	bl	4214 <__malloc_unlock>
    42ee:	movs	r0, #1
    42f0:	pop	{r3, r4, r5, r6, r7, pc}
    42f2:	movs	r1, #0
    42f4:	mov	r0, r6
    42f6:	bl	4218 <_sbrk_r>
    42fa:	ldr	r2, [r7, #8]
    42fc:	subs	r3, r0, r2
    42fe:	cmp	r3, #15
    4300:	ble.n	42c0 <_malloc_trim_r+0x3c>
    4302:	ldr	r4, [pc, #24]	; (431c <_malloc_trim_r+0x98>)
    4304:	ldr	r1, [pc, #16]	; (4318 <_malloc_trim_r+0x94>)
    4306:	ldr	r4, [r4, #0]
    4308:	orr.w	r3, r3, #1
    430c:	subs	r0, r0, r4
    430e:	str	r3, [r2, #4]
    4310:	str	r0, [r1, #0]
    4312:	b.n	42c0 <_malloc_trim_r+0x3c>
    4314:	.word	0x1fff1184
    4318:	.word	0x1fff1a58
    431c:	.word	0x1fff1590

00004320 <_free_r>:
    4320:	cmp	r1, #0
    4322:	beq.n	43b0 <_free_r+0x90>
    4324:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4328:	mov	r5, r1
    432a:	mov	r8, r0
    432c:	bl	4210 <__malloc_lock>
    4330:	ldr.w	r7, [r5, #-4]
    4334:	ldr	r1, [pc, #424]	; (44e0 <_free_r+0x1c0>)
    4336:	bic.w	r3, r7, #1
    433a:	sub.w	r4, r5, #8
    433e:	adds	r2, r4, r3
    4340:	ldr	r6, [r1, #8]
    4342:	ldr	r0, [r2, #4]
    4344:	cmp	r2, r6
    4346:	bic.w	r0, r0, #3
    434a:	beq.n	4412 <_free_r+0xf2>
    434c:	lsls	r6, r7, #31
    434e:	str	r0, [r2, #4]
    4350:	bmi.n	436a <_free_r+0x4a>
    4352:	ldr.w	r7, [r5, #-8]
    4356:	subs	r4, r4, r7
    4358:	add.w	lr, r1, #8
    435c:	ldr	r5, [r4, #8]
    435e:	cmp	r5, lr
    4360:	add	r3, r7
    4362:	beq.n	4444 <_free_r+0x124>
    4364:	ldr	r7, [r4, #12]
    4366:	str	r7, [r5, #12]
    4368:	str	r5, [r7, #8]
    436a:	adds	r5, r2, r0
    436c:	ldr	r5, [r5, #4]
    436e:	lsls	r5, r5, #31
    4370:	bpl.n	43f8 <_free_r+0xd8>
    4372:	orr.w	r2, r3, #1
    4376:	str	r2, [r4, #4]
    4378:	str	r3, [r4, r3]
    437a:	cmp.w	r3, #512	; 0x200
    437e:	bcs.n	43b2 <_free_r+0x92>
    4380:	lsrs	r3, r3, #3
    4382:	adds	r2, r3, #1
    4384:	ldr	r5, [r1, #4]
    4386:	ldr.w	r7, [r1, r2, lsl #3]
    438a:	str	r7, [r4, #8]
    438c:	movs	r0, #1
    438e:	asrs	r3, r3, #2
    4390:	lsl.w	r3, r0, r3
    4394:	add.w	r0, r1, r2, lsl #3
    4398:	orrs	r5, r3
    439a:	subs	r0, #8
    439c:	str	r0, [r4, #12]
    439e:	str	r5, [r1, #4]
    43a0:	str.w	r4, [r1, r2, lsl #3]
    43a4:	str	r4, [r7, #12]
    43a6:	mov	r0, r8
    43a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    43ac:	b.w	4214 <__malloc_unlock>
    43b0:	bx	lr
    43b2:	lsrs	r2, r3, #9
    43b4:	cmp	r2, #4
    43b6:	bhi.n	4460 <_free_r+0x140>
    43b8:	lsrs	r2, r3, #6
    43ba:	add.w	r7, r2, #57	; 0x39
    43be:	lsls	r7, r7, #1
    43c0:	add.w	r5, r2, #56	; 0x38
    43c4:	add.w	r0, r1, r7, lsl #2
    43c8:	ldr.w	r2, [r1, r7, lsl #2]
    43cc:	ldr	r1, [pc, #272]	; (44e0 <_free_r+0x1c0>)
    43ce:	subs	r0, #8
    43d0:	cmp	r0, r2
    43d2:	beq.n	4470 <_free_r+0x150>
    43d4:	ldr	r1, [r2, #4]
    43d6:	bic.w	r1, r1, #3
    43da:	cmp	r3, r1
    43dc:	bcs.n	43e4 <_free_r+0xc4>
    43de:	ldr	r2, [r2, #8]
    43e0:	cmp	r0, r2
    43e2:	bne.n	43d4 <_free_r+0xb4>
    43e4:	ldr	r0, [r2, #12]
    43e6:	str	r0, [r4, #12]
    43e8:	str	r2, [r4, #8]
    43ea:	str	r4, [r0, #8]
    43ec:	str	r4, [r2, #12]
    43ee:	mov	r0, r8
    43f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    43f4:	b.w	4214 <__malloc_unlock>
    43f8:	ldr	r5, [r2, #8]
    43fa:	ldr	r7, [pc, #232]	; (44e4 <_free_r+0x1c4>)
    43fc:	cmp	r5, r7
    43fe:	add	r3, r0
    4400:	beq.n	4482 <_free_r+0x162>
    4402:	ldr	r0, [r2, #12]
    4404:	str	r0, [r5, #12]
    4406:	orr.w	r2, r3, #1
    440a:	str	r5, [r0, #8]
    440c:	str	r2, [r4, #4]
    440e:	str	r3, [r4, r3]
    4410:	b.n	437a <_free_r+0x5a>
    4412:	lsls	r7, r7, #31
    4414:	add	r3, r0
    4416:	bmi.n	4428 <_free_r+0x108>
    4418:	ldr.w	r2, [r5, #-8]
    441c:	subs	r4, r4, r2
    441e:	add	r3, r2
    4420:	ldr	r0, [r4, #8]
    4422:	ldr	r2, [r4, #12]
    4424:	str	r2, [r0, #12]
    4426:	str	r0, [r2, #8]
    4428:	ldr	r2, [pc, #188]	; (44e8 <_free_r+0x1c8>)
    442a:	ldr	r2, [r2, #0]
    442c:	orr.w	r0, r3, #1
    4430:	cmp	r3, r2
    4432:	str	r0, [r4, #4]
    4434:	str	r4, [r1, #8]
    4436:	bcc.n	43a6 <_free_r+0x86>
    4438:	ldr	r3, [pc, #176]	; (44ec <_free_r+0x1cc>)
    443a:	mov	r0, r8
    443c:	ldr	r1, [r3, #0]
    443e:	bl	4284 <_malloc_trim_r>
    4442:	b.n	43a6 <_free_r+0x86>
    4444:	adds	r1, r2, r0
    4446:	ldr	r1, [r1, #4]
    4448:	lsls	r1, r1, #31
    444a:	bmi.n	44d6 <_free_r+0x1b6>
    444c:	ldr	r1, [r2, #8]
    444e:	ldr	r2, [r2, #12]
    4450:	str	r2, [r1, #12]
    4452:	add	r3, r0
    4454:	orr.w	r0, r3, #1
    4458:	str	r1, [r2, #8]
    445a:	str	r0, [r4, #4]
    445c:	str	r3, [r4, r3]
    445e:	b.n	43a6 <_free_r+0x86>
    4460:	cmp	r2, #20
    4462:	bhi.n	4494 <_free_r+0x174>
    4464:	add.w	r7, r2, #92	; 0x5c
    4468:	lsls	r7, r7, #1
    446a:	add.w	r5, r2, #91	; 0x5b
    446e:	b.n	43c4 <_free_r+0xa4>
    4470:	asrs	r2, r5, #2
    4472:	ldr	r3, [r1, #4]
    4474:	movs	r5, #1
    4476:	lsl.w	r2, r5, r2
    447a:	orrs	r3, r2
    447c:	str	r3, [r1, #4]
    447e:	mov	r2, r0
    4480:	b.n	43e6 <_free_r+0xc6>
    4482:	orr.w	r2, r3, #1
    4486:	str	r4, [r1, #20]
    4488:	str	r4, [r1, #16]
    448a:	str	r5, [r4, #12]
    448c:	str	r5, [r4, #8]
    448e:	str	r2, [r4, #4]
    4490:	str	r3, [r4, r3]
    4492:	b.n	43a6 <_free_r+0x86>
    4494:	cmp	r2, #84	; 0x54
    4496:	bhi.n	44a6 <_free_r+0x186>
    4498:	lsrs	r2, r3, #12
    449a:	add.w	r7, r2, #111	; 0x6f
    449e:	lsls	r7, r7, #1
    44a0:	add.w	r5, r2, #110	; 0x6e
    44a4:	b.n	43c4 <_free_r+0xa4>
    44a6:	cmp.w	r2, #340	; 0x154
    44aa:	bhi.n	44ba <_free_r+0x19a>
    44ac:	lsrs	r2, r3, #15
    44ae:	add.w	r7, r2, #120	; 0x78
    44b2:	lsls	r7, r7, #1
    44b4:	add.w	r5, r2, #119	; 0x77
    44b8:	b.n	43c4 <_free_r+0xa4>
    44ba:	movw	r0, #1364	; 0x554
    44be:	cmp	r2, r0
    44c0:	bhi.n	44d0 <_free_r+0x1b0>
    44c2:	lsrs	r2, r3, #18
    44c4:	add.w	r7, r2, #125	; 0x7d
    44c8:	lsls	r7, r7, #1
    44ca:	add.w	r5, r2, #124	; 0x7c
    44ce:	b.n	43c4 <_free_r+0xa4>
    44d0:	movs	r7, #254	; 0xfe
    44d2:	movs	r5, #126	; 0x7e
    44d4:	b.n	43c4 <_free_r+0xa4>
    44d6:	orr.w	r2, r3, #1
    44da:	str	r2, [r4, #4]
    44dc:	str	r3, [r4, r3]
    44de:	b.n	43a6 <_free_r+0x86>
    44e0:	.word	0x1fff1184
    44e4:	.word	0x1fff118c
    44e8:	.word	0x1fff158c
    44ec:	.word	0x1fff1a54

000044f0 <__register_exitproc>:
    44f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    44f4:	ldr	r4, [pc, #148]	; (458c <__register_exitproc+0x9c>)
    44f6:	ldr	r5, [r4, #0]
    44f8:	ldr.w	r4, [r5, #328]	; 0x148
    44fc:	mov	r6, r0
    44fe:	mov	r8, r1
    4500:	mov	sl, r2
    4502:	mov	r9, r3
    4504:	cbz	r4, 4578 <__register_exitproc+0x88>
    4506:	ldr	r0, [r4, #4]
    4508:	cmp	r0, #31
    450a:	bgt.n	453c <__register_exitproc+0x4c>
    450c:	adds	r3, r0, #1
    450e:	cbz	r6, 452e <__register_exitproc+0x3e>
    4510:	add.w	r5, r4, r0, lsl #2
    4514:	movs	r2, #1
    4516:	str.w	sl, [r5, #136]	; 0x88
    451a:	ldr.w	r1, [r4, #392]	; 0x188
    451e:	lsls	r2, r0
    4520:	orrs	r1, r2
    4522:	cmp	r6, #2
    4524:	str.w	r1, [r4, #392]	; 0x188
    4528:	str.w	r9, [r5, #264]	; 0x108
    452c:	beq.n	456c <__register_exitproc+0x7c>
    452e:	adds	r0, #2
    4530:	str	r3, [r4, #4]
    4532:	str.w	r8, [r4, r0, lsl #2]
    4536:	movs	r0, #0
    4538:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    453c:	ldr	r3, [pc, #80]	; (4590 <__register_exitproc+0xa0>)
    453e:	cbz	r3, 4582 <__register_exitproc+0x92>
    4540:	mov.w	r0, #400	; 0x190
    4544:	bl	3bf4 <malloc>
    4548:	mov	r4, r0
    454a:	cbz	r0, 4582 <__register_exitproc+0x92>
    454c:	ldr.w	r3, [r5, #328]	; 0x148
    4550:	movs	r7, #0
    4552:	stmia.w	r0, {r3, r7}
    4556:	str.w	r4, [r5, #328]	; 0x148
    455a:	mov	r0, r7
    455c:	movs	r3, #1
    455e:	str.w	r7, [r4, #392]	; 0x188
    4562:	str.w	r7, [r4, #396]	; 0x18c
    4566:	cmp	r6, #0
    4568:	beq.n	452e <__register_exitproc+0x3e>
    456a:	b.n	4510 <__register_exitproc+0x20>
    456c:	ldr.w	r1, [r4, #396]	; 0x18c
    4570:	orrs	r2, r1
    4572:	str.w	r2, [r4, #396]	; 0x18c
    4576:	b.n	452e <__register_exitproc+0x3e>
    4578:	add.w	r4, r5, #332	; 0x14c
    457c:	str.w	r4, [r5, #328]	; 0x148
    4580:	b.n	4506 <__register_exitproc+0x16>
    4582:	mov.w	r0, #4294967295
    4586:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    458a:	nop
    458c:	.word	0x0000494c
    4590:	.word	0x00003bf5
    4594:	.word	0x00000024
    4598:	.word	0x00000029
    459c:	.word	0x0000002b
    45a0:	.word	0x0000002d
    45a4:	.word	0x00000032
    45a8:	.word	0x00000034
    45ac:	.word	0x00000026
    45b0:	.word	0x0000002d
    45b4:	.word	0x0000002f
    45b8:	.word	0x72727543
    45bc:	.word	0x20746e65
    45c0:	.word	0x79616c70
    45c4:	.word	0x6b636162
    45c8:	.word	0x67617020
    45cc:	.word	0x00000065
    45d0:	.word	0x73206f6e
    45d4:	.word	0x73706574
    45d8:	.word	0x74657920
    45dc:	.word	0x00000000
    45e0:	.word	0x64616f6c
    45e4:	.word	0x20676e69
    45e8:	.word	0x6d6f7266
    45ec:	.word	0x6d656d20
    45f0:	.word	0x0079726f
    45f4:	.word	0x79706f63
    45f8:	.word	0x20676e69
    45fc:	.word	0x20646e61
    4600:	.word	0x74746573
    4604:	.word	0x20676e69
    4608:	.word	0x6d206e69
    460c:	.word	0x726f6d65
    4610:	.word	0x00000079
    4614:	.word	0x79706f63
    4618:	.word	0x20676e69
    461c:	.word	0x796c6e6f
    4620:	.word	0x6f726620
    4624:	.word	0x656d206d
    4628:	.word	0x79726f6d
    462c:	.word	0x00000000
    4630:	.word	0x74746553
    4634:	.word	0x20676e69
    4638:	.word	0x70657473
    463c:	.word	0x6f662073
    4640:	.word	0x64652072
    4644:	.word	0x6e697469
    4648:	.word	0xffff0067
    464c:	.word	0x4f4c4556
    4650:	.word	0x59544943
    4654:	.word	0x00000000
    4658:	.word	0x45544f4e
    465c:	.word	0x474e454c
    4660:	.word	0x00004854
    4664:	.word	0x43544950
    4668:	.word	0x00000048
    466c:	.word	0x4e414843
    4670:	.word	0x00004543
    4674:	.word	0x4e495753
    4678:	.word	0x00000047

0000467c <pin2sc1a>:
    467c:	................
    468c:	................
    469c:	................
    46ac:	................
    46bc:	........

000046c4 <digital_pin_to_info_PGM>:
    46c4:	@..C@..@D..CD..@
    46d4:	...C...@0..C0..@
    46e4:	4..C4..@...C...@
    46f4:	...C...@...C...@
    4704:	...C...@...C...@
    4714:	...C...@...C...@
    4724:	...C...@...C...@
    4734:	...C...@...C...@
    4744:	...C...@...C...@
    4754:	...C...@...C...@
    4764:	...C...@...C...@
    4774:	...C...@...C...@
    4784:	h .Ch..@...C...@
    4794:	8..C8..@<..C<..@
    47a4:	@..C@..@H..CH..@
    47b4:	L..CL..@(..C(..@
    47c4:	,..C,..@` .C`..@
    47d4:	d .Cd..@ ..C ..@
    47e4:	$..C$..@(..C(..@
    47f4:	,..C,..@D..CD..@
    4804:	p..Cp..@t..Ct..@
    4814:	h..Ch..@P..CP..@
    4824:	X..CX..@\..C\..@
    4834:	T..CT..@ ..C ..@
    4844:	$..C$..@...C...@
    4854:	...C...@8..C8..@
    4864:	4..C4..@0..C0..@
    4874:	<..C<..@,..C,..@
    4884:	( .C(..@, .C,..@
    4894:	. .C...@. .C...@
    48a4:	. .C...@. .C...@
    48b4:	. .C...@. .C...@

000048c4 <vtable for usb_serial_class>:
	...
    48cc:	A0..90..50..10..
    48dc:	-0..)0..%0..!0..
    48ec:	....

000048f0 <usb_endpoint_config_table>:
    48f0:	........

000048f8 <usb_descriptor_list>:
    48f8:	....\...........
    4908:	............8...
    4918:	........p.......
    4928:	.... ...........
    4938:	<...............
    4948:	....

0000494c <_global_impure_ptr>:
    494c:	X...

00004950 <_init>:
    4950:	push	{r3, r4, r5, r6, r7, lr}
    4952:	nop
    4954:	pop	{r3, r4, r5, r6, r7}
    4956:	pop	{r3}
    4958:	mov	lr, r3
    495a:	bx	lr

0000495c <__init_array_start>:
    495c:	.word	0x0000423d

00004960 <__frame_dummy_init_array_entry>:
    4960:	5...}...

Disassembly of section .fini:

00004968 <_fini>:
    4968:	push	{r3, r4, r5, r6, r7, lr}
    496a:	nop

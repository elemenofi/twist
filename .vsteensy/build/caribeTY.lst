
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00005150 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15b0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003de8 l     F .text	0000000c startup_default_early_hook
00003df4 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15b0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15b4 l       .bss	00000000 object.8610
00005148 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001bec l     F .text	00000214 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff182d l     O .bss	00000001 tx_noautoflush
1fff1830 l     O .bss	00000004 tx_packet
1fff1834 l     O .bss	00000001 transmit_previous_timeout
1fff1838 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000020d4 l     F .text	00000144 wait_for_cal
1fff183d l     O .bss	00000001 analog_right_shift
1fff183e l     O .bss	00000001 calibrating
00004e64 l     O .text	00000048 pin2sc1a
1fff0c58 l     O .data	00000001 analog_config_bits
1fff183f l     O .bss	00000001 analogReadBusyADC1
1fff1840 l     O .bss	00000001 analogReadBusyADC0
1fff1841 l     O .bss	00000001 analog_reference_internal
1fff0c59 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000023f4 l     F .text	0000004c digitalWrite.part.1
00002440 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002720 l     F .text	00000048 sysex_byte
1fff185c l     O .bss	00000001 tx_noautoflush
1fff1888 l     O .bss	00000004 tx_packet
1fff188c l     O .bss	00000001 transmit_previous_timeout
1fff1894 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c5c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18a8 l     O .bss	00000004 ep0_tx_ptr
1fff18ac l     O .bss	00000014 rx_last
1fff18c0 l     O .bss	00000002 ep0_tx_len
1fff18c4 l     O .bss	00000040 ep0_rx0_buf
1fff1904 l     O .bss	00000014 rx_first
1fff1918 l     O .bss	00000001 ep0_tx_data_toggle
1fff191c l     O .bss	00000040 ep0_rx1_buf
1fff195c l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1970 l     O .bss	00000014 tx_last
1fff1984 l     O .bss	00000008 setup
1fff198c l     O .bss	00000001 ep0_tx_bdt_bank
1fff1990 l     O .bss	00000008 reply_buffer
1fff199c l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19a1 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19a4 l     O .bss	00000004 rts_pin
1fff19a8 l     O .bss	00000001 rx_buffer_head
1fff19a9 l     O .bss	00000001 rx_buffer_tail
1fff19ac l     O .bss	00000028 tx_buffer
1fff19d4 l     O .bss	00000040 rx_buffer
1fff1a14 l     O .bss	00000001 transmitting
1fff1a15 l     O .bss	00000001 tx_buffer_tail
1fff1a18 l     O .bss	00000004 transmit_pin
1fff1a1c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a20 l     O .bss	00000004 rts_pin
1fff1a24 l     O .bss	00000001 transmitting
1fff1a25 l     O .bss	00000001 rx_buffer_tail
1fff1a28 l     O .bss	00000028 tx_buffer
1fff1a50 l     O .bss	00000040 rx_buffer
1fff1a90 l     O .bss	00000001 rx_buffer_head
1fff1a91 l     O .bss	00000001 tx_buffer_tail
1fff1a94 l     O .bss	00000004 transmit_pin
1fff1a98 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a9c l     O .bss	00000004 rts_pin
1fff1aa0 l     O .bss	00000001 rx_buffer_head
1fff1aa1 l     O .bss	00000001 rx_buffer_tail
1fff1aa4 l     O .bss	00000028 tx_buffer
1fff1acc l     O .bss	00000040 rx_buffer
1fff1b0c l     O .bss	00000001 transmitting
1fff1b0d l     O .bss	00000001 tx_buffer_tail
1fff1b10 l     O .bss	00000004 transmit_pin
1fff1b14 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b18 l     O .bss	00000004 rts_pin
1fff1b1c l     O .bss	00000001 rx_buffer_head
1fff1b1d l     O .bss	00000001 rx_buffer_tail
1fff1b20 l     O .bss	00000040 tx_buffer
1fff1b60 l     O .bss	00000040 rx_buffer
1fff1ba0 l     O .bss	00000001 transmitting
1fff1ba1 l     O .bss	00000001 tx_buffer_tail
1fff1ba4 l     O .bss	00000004 transmit_pin
1fff1ba8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1bac l     O .bss	00000004 rts_pin
1fff1bb0 l     O .bss	00000001 rx_buffer_head
1fff1bb1 l     O .bss	00000001 rx_buffer_tail
1fff1bb4 l     O .bss	00000028 tx_buffer
1fff1bdc l     O .bss	00000040 rx_buffer
1fff1c1c l     O .bss	00000001 transmitting
1fff1c1d l     O .bss	00000001 tx_buffer_tail
1fff1c20 l     O .bss	00000004 transmit_pin
1fff1c24 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c74 l     O .data	00000012 device_descriptor
1fff0ca0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c28 l     O .bss	00000004 rts_pin
1fff1c2c l     O .bss	00000001 rx_buffer_head
1fff1c2d l     O .bss	00000001 rx_buffer_tail
1fff1c30 l     O .bss	00000028 tx_buffer
1fff1c58 l     O .bss	00000040 rx_buffer
1fff1c98 l     O .bss	00000001 transmitting
1fff1c99 l     O .bss	00000001 tx_buffer_tail
1fff1c9c l     O .bss	00000004 transmit_pin
1fff1ca0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004a88 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15b0 l       .bss	00000000 __bss_start__
1fff1e3c l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003de0  w    F .text	00000006 adc0_isr
00001e78 g     F .text	0000001c usb_serial_available
00003ca0 g     F .text	00000020 serial4_available
0000394c  w    F .text	000000c4 yield
1fff0c88 g     O .data	00000018 usb_string_manufacturer_name_default
00003e8c g     F .text	00000020 serial_available
1fff1860 g     O .bss	00000004 usb_midi_handleProgramChange
00003d98  w    F .text	00000048 hard_fault_isr
00003de0  w    F .text	00000006 dma_ch6_isr
00003a40 g     F .text	00000020 Print::println()
00003b74 g     F .text	00000020 serial2_available
00003de0  w    F .text	00000006 uart0_lon_isr
00002d60 g     F .text	000000e8 usb_rx_memory
00003a10  w    F .text	00000002 serialEvent5()
00003de0  w    F .text	00000006 dma_ch8_isr
00003fb8 g     F .text	00000020 serial6_available
00004a60 g     F .text	00000002 __malloc_unlock
1fff1874 g     O .bss	00000004 usb_midi_handleAfterTouch
00002218 g     F .text	000000e0 analog_init
00002e48 g     F .text	00000084 usb_tx
00003de0  w    F .text	00000006 portcd_isr
1fff1884 g     O .bss	00000004 usb_midi_handleSysExComplete
000043d8 g     F .text	00000098 MillisTimer::runFromTimer()
00003de0  w    F .text	00000006 can1_rx_warn_isr
00005154 g       .fini	00000000 __exidx_end
00003de0  w    F .text	00000006 dma_error_isr
1fff1d00 g     O .bss	00000001 usb_midi_msg_type
1fff1cb8 g     O .bss	00000001 EventResponder::runningFromYield
00003de0  w    F .text	00000006 i2c0_isr
00004480 g     F .text	0000000c __errno
00003de0  w    F .text	00000006 portd_isr
00003de0  w    F .text	00000006 enet_error_isr
1fff1ca4 g     O .bss	00000004 EventResponder::firstInterrupt
00003de0  w    F .text	00000006 tpm1_isr
00003a2c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004eac g     O .text	00000200 digital_pin_to_info_PGM
1fff1e38 g     O .bss	00000004 errno
00005154 g       .fini	00000000 _etext
1fff15b0 g       .bss	00000000 _sbss
00003a78  w    F .text	00000002 serialEvent6()
1fff1870 g     O .bss	00000004 usb_midi_handleVelocityChange
000024e8 g     F .text	0000001c digitalRead
00003de0  w    F .text	00000006 porte_isr
00000494 g     F .text	00001756 loop
00003de0  w    F .text	00000006 portb_isr
00002804 g     F .text	0000002c usb_midi_flush_output
00003de0  w    F .text	00000006 spi1_isr
00003cc0 g     F .text	000000d8 uart3_status_isr
00004284  w    F .text	00000002 serialEvent1()
1fff15fc g     O .bss	00000018 led4
00003de0  w    F .text	00000006 mcm_isr
00004370 g     F .text	00000068 MillisTimer::addToActiveList()
00002830 g     F .text	0000043c usb_midi_read
1fff184c g     O .bss	00000004 usb_midi_handleSystemReset
1fff1ca8 g     O .bss	00000004 EventResponder::lastInterrupt
00003b94 g     F .text	0000010c uart1_status_isr
1fff1d02 g     O .bss	00000002 usb_midi_msg_sysex_len
00003de0  w    F .text	00000006 randnum_isr
1fff1854 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1844 g     O .bss	00000004 systick_millis_count
00003d98  w    F .text	00000048 bus_fault_isr
00003de0  w    F .text	00000006 watchdog_isr
00003de0  w    F .text	00000006 i2c1_isr
1fff1998 g     O .bss	00000001 usb_configuration
00003de0  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003a60  w    F .text	00000002 serialEvent2()
00003de0  w    F .text	00000006 i2c2_isr
1fff0c88  w    O .data	00000018 usb_string_manufacturer_name
1fff1e2c g     O .bss	0000000a usb_rx_byte_count_data
00003de0  w    F .text	00000006 pit1_isr
000044dc g     F .text	00000010 malloc
00003de0  w    F .text	00000006 dma_ch4_isr
00003de0  w    F .text	00000006 software_isr
00003de0  w    F .text	00000006 dma_ch7_isr
0000430c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
0000387c g     F .text	000000d0 usb_init
00003de0  w    F .text	00000006 lptmr_isr
1fff1cc8 g     O .bss	00000004 __malloc_top_pad
000024b8 g     F .text	00000024 rtc_set
1fff17a8 g     O .bss	00000024 button5
1fff1808 g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff18a4 g     O .bss	00000004 usb_midi_handleNoteOn
00003e58 g     F .text	00000034 kinetis_hsrun_enable
00004a64 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001e00 g     F .text	00000048 usb_serial_getchar
00003de0  w    F .text	00000006 can1_bus_off_isr
00003de0  w    F .text	00000006 ftm2_isr
1fff1cf4 g     O .bss	00000008 usb_cdc_line_coding
000024dc g     F .text	0000000a digitalWrite
00003de0  w    F .text	00000006 uart5_status_isr
00003fd8 g     F .text	000000e4 lpuart0_status_isr
1fff1cb0 g     O .bss	00000004 EventResponder::lastYield
000050d8 g     O .text	00000005 usb_endpoint_config_table
00003de0  w    F .text	00000006 dma_ch9_isr
00003de0  w    F .text	00000006 pit2_isr
0000418c g     F .text	00000020 serial3_available
1fff1cc4 g     O .bss	00000004 __malloc_max_sbrked_mem
00002504 g     F .text	0000000a pinMode
00002cac g     F .text	0000004c usb_free
00003de0  w    F .text	00000006 i2c3_isr
1fff162c g     O .bss	00000018 led1
1fff186c g     O .bss	00000004 usb_midi_handleSysExPartial
00005154 g       .fini	00000000 __exidx_start
00003de0  w    F .text	00000006 pit0_isr
1fff1d04 g     O .bss	00000001 usb_midi_msg_data1
1fff1cb4 g     O .bss	00000004 EventResponder::firstYield
00005134 g     O .text	00000004 _global_impure_ptr
00003de0  w    F .text	00000006 can1_error_isr
0000448c g     F .text	00000050 __libc_init_array
1fff1e3c g       .bss	00000000 __bss_end
00003de0  w    F .text	00000006 can0_wakeup_isr
00003de0  w    F .text	00000006 flash_cmd_isr
1fff17f0 g     O .bss	00000018 knob5
00003a14  w    F .text	00000004 usb_serial_class::clear()
000041ac g     F .text	000000d8 uart2_status_isr
00003df8 g     F .text	0000002c _sbrk
1fff1cbc g     O .bss	00000004 MillisTimer::listWaiting
1fff0c70 g     O .data	00000004 __brkval
1fff183c g     O .bss	00000001 usb_cdc_line_rtsdtr
0000208c g     F .text	00000048 usb_serial_flush_callback
00005138 g     F .text	00000000 _init
00003de0  w    F .text	00000006 svcall_isr
00003de0  w    F .text	00000006 dma_ch15_isr
00003de0  w    F .text	00000006 uart1_error_isr
00004aa8 g     F .text	00000028 __libc_fini_array
00003de0  w    F .text	00000006 usbhs_phy_isr
1fff1e3c g       .bss	00000000 _ebss
00003de0 g     F .text	00000006 unused_isr
00003de0  w    F .text	00000006 spi0_isr
00003de0  w    F .text	00000006 dma_ch3_isr
00003de0  w    F .text	00000006 flash_error_isr
1fff1644 g     O .bss	00000018 knob2
00003a7c g     F .text	00000020 serial5_available
00003de0  w    F .text	00000006 uart5_error_isr
00003de0  w    F .text	00000006 rtc_seconds_isr
00003de0  w    F .text	00000006 pdb_isr
00003d98  w    F .text	00000048 usage_fault_isr
00003de0  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003de0  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1cfc g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000018 leds
00004470 g     F .text	00000010 systick_isr
00003de0  w    F .text	00000006 rtc_alarm_isr
00003de0  w    F .text	00000006 dma_ch2_isr
1fff0c60 g     O .data	00000010 Serial
00003de0  w    F .text	00000006 ftm1_isr
00003a34  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003de8  w    F .text	0000000c startup_early_hook
00003de0  w    F .text	00000006 dma_ch13_isr
00003de0  w    F .text	00000006 uart2_error_isr
00001e48 g     F .text	00000030 usb_serial_peekchar
1fff0d54 g     O .data	00000016 usb_string_serial_number_default
00003d98 g     F .text	00000048 fault_isr
00004b6c g     F .text	000001d0 _free_r
1fff1890 g     O .bss	00000004 usb_midi_handleStop
00003de0  w    F .text	00000006 usb_charge_isr
00003a24  w    F .text	00000004 usb_serial_class::flush()
00003de0  w    F .text	00000006 cmt_isr
00003de0  w    F .text	00000006 usbhs_isr
1fff18a0 g     O .bss	00000004 usb_midi_handleControlChange
1fff15a8 g     O .data	00000004 __malloc_sbrk_base
00003a1c  w    F .text	00000004 usb_serial_class::read()
00003de0  w    F .text	00000006 ftm3_isr
00003de0  w    F .text	00000006 tsi0_isr
1fff1690 g     O .bss	00000018 led6
1fff16a8 g     O .bss	00000018 knob1
00003de0  w    F .text	00000006 spi2_isr
00003a64  w    F .text	00000002 serialEvent4()
00003a3c  w    F .text	00000002 serialEvent()
1fff1919 g     O .bss	00000001 usb_reboot_timer
00004d3c g     F .text	000000a4 __register_exitproc
00001e94 g     F .text	00000038 usb_serial_flush_input
00001fd4 g     F .text	00000018 usb_serial_putchar
1fff1ccc g     O .bss	00000028 __malloc_current_mallinfo
00003de0  w    F .text	00000006 can0_bus_off_isr
1fff1614 g     O .bss	00000018 led5
1fff198d g     O .bss	00000001 usb_rx_memory_needed
00002ecc g     F .text	000009b0 usb_isr
1fff189c g     O .bss	00000004 usb_midi_handleNoteOff
000050ac  w    O .text	00000028 vtable for usb_serial_class
1fff1660 g     O .bss	00000018 knob3
00003de0  w    F .text	00000006 uart3_error_isr
1fff1cac g     O .bss	00000004 MillisTimer::listActive
00003de0  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003de0  w    F .text	00000006 low_voltage_isr
1fff16e4 g     O .bss	00000024 button2
1fff119c g     O .data	00000408 __malloc_av_
00003de0  w    F .text	00000006 can0_error_isr
000025b4 g     F .text	0000016c _init_Teensyduino_internal_
00002034 g     F .text	00000058 usb_serial_flush_output
00003de0  w    F .text	00000006 dma_ch12_isr
00004a5c g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003de0  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003de0  w    F .text	00000006 pit3_isr
00003de0  w    F .text	00000006 enet_rx_isr
00003de0  w    F .text	00000006 portc_isr
00003a68 g     F .text	00000010 main
1fff1cc0 g     O .bss	00000004 __malloc_max_total_mem
1fff15e4 g     O .bss	00000018 led3
00003d98  w    F .text	00000048 memmanage_fault_isr
000040bc g     F .text	00000084 usb_init_serialnumber
1fff165c g     O .bss	00000001 currentMode
00005150 g       .text	00000000 __init_array_end
000044ec g     F .text	00000570 _malloc_r
00003de0  w    F .text	00000006 debugmonitor_isr
1fff1868 g     O .bss	00000004 usb_midi_handleSongPosition
0000428c g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1858 g     O .bss	00000004 usb_midi_handleContinue
1fff1d05 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003de0  w    F .text	00000006 cmp1_isr
1fff1708 g     O .bss	00000024 button3
00003de0  w    F .text	00000006 ftm0_isr
00004ad0 g     F .text	0000009c _malloc_trim_r
1fff0d50 g     O .data	00000004 string0
00001ecc g     F .text	00000108 usb_serial_write
00003df4  w    F .text	00000002 startup_late_hook
00003a20  w    F .text	00000004 usb_serial_class::available()
1fff1d06 g     O .bss	00000001 usb_midi_msg_cable
1fff0d38  w    O .data	00000018 usb_string_product_name
00002510 g     F .text	000000a4 delay
00003de0  w    F .text	00000006 tpm0_isr
00005150 g     F .fini	00000000 _fini
00003de0  w    F .text	00000006 i2s0_rx_isr
00003de0  w    F .text	00000006 uart4_error_isr
00002768 g     F .text	0000009c usb_midi_write_packed
00004a9c g     F .text	0000000c atexit
00003de0  w    F .text	00000006 can0_message_isr
1fff1198 g     O .data	00000004 _impure_ptr
00003de0  w    F .text	00000006 can1_message_isr
00003de0  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1880 g     O .bss	00000004 usb_midi_handleTuneRequest
00005144 g       .text	00000000 __preinit_array_end
00003de0  w    F .text	00000006 sdhc_isr
1fff1d07 g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
000050e0 g     O .text	00000054 usb_descriptor_list
00002cf8 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1678 g     O .bss	00000018 knob4
00003de0  w    F .text	00000006 dma_ch10_isr
1fff1730 g     O .bss	00000078 sequence1
1fff1878 g     O .bss	00000004 usb_midi_handleStart
00003de0  w    F .text	00000006 uart0_error_isr
00002c6c g     F .text	00000040 usb_malloc
00003de0  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001fec g     F .text	00000048 usb_serial_write_buffer_free
00003de0  w    F .text	00000006 enet_timer_isr
1fff17cc g     O .bss	00000024 button6
1fff16c0 g     O .bss	00000024 button1
1fff15ac g       .data	00000000 _edata
00003de0  w    F .text	00000006 i2s0_tx_isr
00003de0  w    F .text	00000006 adc1_isr
00003a28  w    F .text	00000004 usb_serial_class::availableForWrite()
00003de0  w    F .text	00000006 cmp0_isr
1fff1848 g     O .bss	00000004 usb_midi_handleClock
00004140 g     F .text	0000004c ultoa
00004328 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15a4 g     O .data	00000004 __malloc_trim_threshold
00003a18  w    F .text	00000004 usb_serial_class::peek()
1fff182c g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1864 g     O .bss	00000004 usb_midi_handlePitchChange
00003de0  w    F .text	00000006 pit_isr
1fff187c g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003de0  w    F .text	00000006 dac0_isr
00005144 g       .text	00000000 __init_array_start
00003de0  w    F .text	00000006 can1_tx_warn_isr
000022f8 g     F .text	000000fc analogRead
1fff1d08 g     O .bss	00000122 usb_midi_msg_sysex
00003eac g     F .text	0000010c uart0_status_isr
00003de0  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d38 g     O .data	00000018 usb_string_product_name_default
00003de0  w    F .text	00000006 dma_ch1_isr
00002d34 g     F .text	0000002c usb_tx_packet_count
00003de0  w    F .text	00000006 dma_ch5_isr
00003de0  w    F .text	00000006 can0_rx_warn_isr
00003de0  w    F .text	00000006 can0_tx_warn_isr
00003a9c g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003e24 g     F .text	00000034 kinetis_hsrun_disable
00005144 g       .text	00000000 __preinit_array_start
00004288  w    F .text	00000002 serialEvent3()
1fff1898 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15cc g     O .bss	00000018 led2
00003de0  w    F .text	00000006 cmp2_isr
0000436c g     F .text	00000004 pendablesrvreq_isr
00003de0  w    F .text	00000006 wakeup_isr
00003de0  w    F .text	00000006 cmp3_isr
1fff1850 g     O .bss	00000004 usb_midi_handleActiveSensing
00003de0  w    F .text	00000006 tpm2_isr
00003de0  w    F .text	00000006 dma_ch0_isr
1fff0d54  w    O .data	00000016 usb_string_serial_number
00003de0  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....=...=..
      10:	.=...=...=...=..
      20:	.=...=...=...=..
      30:	.=...=..mC..qD..
      40:	.=...=...=...=..
      50:	.=...=...=...=..
      60:	.=...=...=...=..
      70:	.=...=...=...=..
      80:	.=...=...=...=..
      90:	.=...=...=...=..
      a0:	.=...=...=...=..
      b0:	.=...=...=...>..
      c0:	.=...;...=...A..
      d0:	.=...<...=...=..
      e0:	.=...=...=...=..
      f0:	.=...=...=...=..
     100:	.=...=...=...=..
     110:	.=.......=...=..
     120:	.=...=...=...=..
     130:	.=...=...=...=..
     140:	.=...=...:...=..
     150:	.=...=...=...=..
     160:	.=...=...=...=..
     170:	.=...=...=...=..
     180:	.=...=...=...=..
     190:	.=...=...?...=..
     1a0:	.=...=...=...=..
     1b0:	.=...=...=...=..
     1c0:	.=...=...=...=..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3de8 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	25b4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	24b8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	24b8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	448c <__libc_init_array>

	startup_late_hook();
     33a:	bl	3df4 <startup_late_hook>
	main();
     33e:	bl	3a68 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15ac
     374:	.word	0x00005150
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15b0
     380:	.word	0x1fff1e3c
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15b0
     42c:	.word	0x00000000
     430:	.word	0x00005154

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15b4
     460:	.word	0x00005154
     464:	.word	0x1fff15ac
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	2504 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	24dc <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);
Knob knob5(A4, sequence1, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #236	; 0xec
     49c:	bl	2830 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	84c <loop+0x3b8>
     4a6:	ldr	r4, [pc, #668]	; (744 <loop+0x2b0>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #668]	; (748 <loop+0x2b4>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	24e8 <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	a40 <loop+0x5ac>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #60]	; 0x3c
	return ret;
     4c4:	ldr	r3, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #56]	; 0x38
	return ret;
     4cc:	ldr	r1, [sp, #56]	; 0x38
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #628]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r3, r1
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #620]	; (748 <loop+0x2b4>)
     4da:	cmp	r5, r3
     4dc:	beq.w	a68 <loop+0x5d4>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r5, #0
     4e4:	beq.w	aba <loop+0x626>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r5, [pc, #608]	; (74c <loop+0x2b8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r5, #32]
     4f0:	bl	24e8 <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r5, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r6, r0
     4fc:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	a54 <loop+0x5c0>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #52]	; 0x34
	return ret;
     506:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     508:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #48]	; 0x30
	return ret;
     50e:	ldr	r1, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #560]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r1, r3
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r5, #4]
     51a:	ldr	r7, [pc, #560]	; (74c <loop+0x2b8>)
     51c:	cmp	r6, r3
     51e:	beq.w	a5c <loop+0x5c8>
          m_state = reading;
     522:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r6, #0
     526:	beq.w	af0 <loop+0x65c>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r6, [pc, #548]	; (750 <loop+0x2bc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r6, #32]
     532:	bl	24e8 <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r6, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r5, r0
     53e:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	a50 <loop+0x5bc>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #44]	; 0x2c
	return ret;
     548:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     54a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #40]	; 0x28
	return ret;
     550:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #496]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r6, #4]
     55c:	ldr	r7, [pc, #496]	; (750 <loop+0x2bc>)
     55e:	cmp	r5, r3
     560:	beq.w	a58 <loop+0x5c4>
          m_state = reading;
     564:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r5, #0
     568:	beq.w	b26 <loop+0x692>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r5, [pc, #484]	; (754 <loop+0x2c0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r5, #32]
     574:	bl	24e8 <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r5, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r6, r0
     580:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	a4c <loop+0x5b8>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #36]	; 0x24
	return ret;
     58a:	ldr	r3, [sp, #36]	; 0x24
        m_lastDebounceTime = millis();
     58c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #32]
	return ret;
     592:	ldr	r1, [sp, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #428]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r1, r3
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r5, #4]
     59e:	ldr	r7, [pc, #436]	; (754 <loop+0x2c0>)
     5a0:	cmp	r6, r3
     5a2:	beq.w	a64 <loop+0x5d0>
          m_state = reading;
     5a6:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r6, #0
     5aa:	beq.w	b5c <loop+0x6c8>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #424]	; (758 <loop+0x2c4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	24e8 <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	a48 <loop+0x5b4>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #28]
	return ret;
     5cc:	ldr	r3, [sp, #28]
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #24]
	return ret;
     5d4:	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #364]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #372]	; (758 <loop+0x2c4>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	a60 <loop+0x5cc>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r5, #0
     5ec:	beq.w	b92 <loop+0x6fe>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f0:	ldr	r5, [pc, #360]	; (75c <loop+0x2c8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r5, #32]
     5f8:	bl	24e8 <digitalRead>
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5fc:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5fe:	str	r0, [r5, #12]
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     600:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     602:	mov	r6, r0
     604:	mov	r2, r0
    void play () {
      Serial.println("Play");
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     606:	beq.w	a44 <loop+0x5b0>
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #20]
	return ret;
     60e:	ldr	r3, [sp, #20]
        m_lastDebounceTime = millis();
     610:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #16]
	return ret;
     616:	ldr	r1, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     618:	ldr.w	r8, [pc, #296]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     61c:	cmp	r1, r3
     61e:	beq.n	632 <loop+0x19e>
        if (reading != m_state) {
     620:	ldr	r3, [r5, #4]
     622:	ldr	r7, [pc, #312]	; (75c <loop+0x2c8>)
     624:	cmp	r6, r3
     626:	beq.w	a6c <loop+0x5d8>
          m_state = reading;
     62a:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     62c:	cmp	r6, #0
     62e:	beq.w	a84 <loop+0x5f0>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     632:	ldr	r6, [pc, #300]	; (760 <loop+0x2cc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     634:	str	r2, [r5, #8]
     636:	ldrb	r3, [r6, #16]
     638:	cmp	r3, #0
     63a:	bne.w	874 <loop+0x3e0>
     63e:	ldr	r5, [pc, #292]	; (764 <loop+0x2d0>)
     640:	ldrb	r3, [r5, #16]
     642:	cmp	r3, #0
     644:	bne.w	9e4 <loop+0x550>
     648:	ldr	r5, [pc, #284]	; (768 <loop+0x2d4>)
     64a:	ldrb	r3, [r5, #16]
     64c:	cmp	r3, #0
     64e:	bne.w	988 <loop+0x4f4>
     652:	ldr	r5, [pc, #280]	; (76c <loop+0x2d8>)
     654:	ldrb	r3, [r5, #16]
     656:	cmp	r3, #0
     658:	bne.w	92c <loop+0x498>
     65c:	ldr	r5, [pc, #272]	; (770 <loop+0x2dc>)
     65e:	ldrb	r3, [r5, #16]
     660:	cmp	r3, #0
     662:	bne.w	8d0 <loop+0x43c>
     666:	ldr	r5, [pc, #268]	; (774 <loop+0x2e0>)
     668:	ldrb	r3, [r5, #16]
     66a:	cmp	r3, #0
     66c:	bne.w	7f0 <loop+0x35c>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     670:	ldr	r4, [pc, #260]	; (778 <loop+0x2e4>)
     672:	ldrb	r0, [r4, #0]
     674:	bl	22f8 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     678:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     67a:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     67c:	cmp	r0, r3
     67e:	beq.n	68e <loop+0x1fa>
     680:	subs	r3, r0, r3
     682:	cmp	r3, #0
     684:	it	lt
     686:	neglt	r3, r3
     688:	cmp	r3, #10
     68a:	bgt.w	7d0 <loop+0x33c>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     68e:	ldr	r4, [pc, #236]	; (77c <loop+0x2e8>)
     690:	ldrb	r0, [r4, #0]
     692:	bl	22f8 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     696:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     698:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     69a:	cmp	r0, r3
     69c:	beq.n	6ac <loop+0x218>
     69e:	subs	r3, r0, r3
     6a0:	cmp	r3, #0
     6a2:	it	lt
     6a4:	neglt	r3, r3
     6a6:	cmp	r3, #10
     6a8:	bgt.w	7b0 <loop+0x31c>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6ac:	ldr	r4, [pc, #208]	; (780 <loop+0x2ec>)
     6ae:	ldrb	r0, [r4, #0]
     6b0:	bl	22f8 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6b4:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6b6:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6b8:	cmp	r0, r3
     6ba:	beq.n	6c8 <loop+0x234>
     6bc:	subs	r3, r0, r3
     6be:	cmp	r3, #0
     6c0:	it	lt
     6c2:	neglt	r3, r3
     6c4:	cmp	r3, #10
     6c6:	bgt.n	790 <loop+0x2fc>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6c8:	ldr	r4, [pc, #184]	; (784 <loop+0x2f0>)
     6ca:	ldrb	r0, [r4, #0]
     6cc:	bl	22f8 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6d0:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6d2:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6d4:	cmp	r0, r3
     6d6:	beq.n	6e4 <loop+0x250>
     6d8:	subs	r3, r0, r3
     6da:	cmp	r3, #0
     6dc:	it	lt
     6de:	neglt	r3, r3
     6e0:	cmp	r3, #10
     6e2:	bgt.n	724 <loop+0x290>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6e4:	ldr	r4, [pc, #160]	; (788 <loop+0x2f4>)
     6e6:	ldrb	r0, [r4, #0]
     6e8:	bl	22f8 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6ec:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6ee:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6f0:	cmp	r0, r3
     6f2:	beq.n	71e <loop+0x28a>
     6f4:	subs	r3, r0, r3
     6f6:	cmp	r3, #0
     6f8:	it	lt
     6fa:	neglt	r3, r3
     6fc:	cmp	r3, #10
     6fe:	ble.n	71e <loop+0x28a>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     700:	ldr	r3, [pc, #136]	; (78c <loop+0x2f8>)
     702:	ldrb	r3, [r3, #0]
     704:	cmp	r3, #0
     706:	beq.w	bea <loop+0x756>
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     70a:	cmp	r3, #2
     70c:	beq.w	11ea <loop+0xd56>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     710:	cmp	r3, #1
     712:	beq.w	1376 <loop+0xee2>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     716:	cmp	r3, #3
     718:	beq.w	e58 <loop+0x9c4>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     71c:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     71e:	add	sp, #236	; 0xec
     720:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     724:	ldr	r3, [pc, #100]	; (78c <loop+0x2f8>)
     726:	ldrb	r3, [r3, #0]
     728:	cmp	r3, #0
     72a:	beq.w	c50 <loop+0x7bc>
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     72e:	cmp	r3, #2
     730:	beq.w	11cc <loop+0xd38>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     734:	cmp	r3, #1
     736:	beq.w	1358 <loop+0xec4>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     73a:	cmp	r3, #3
     73c:	beq.w	df4 <loop+0x960>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     740:	str	r0, [r4, #8]
     742:	b.n	6e4 <loop+0x250>
     744:	.word	0x1fff1844
     748:	.word	0x1fff16c0
     74c:	.word	0x1fff16e4
     750:	.word	0x1fff1708
     754:	.word	0x1fff1808
     758:	.word	0x1fff17a8
     75c:	.word	0x1fff17cc
     760:	.word	0x1fff162c
     764:	.word	0x1fff15cc
     768:	.word	0x1fff15e4
     76c:	.word	0x1fff15fc
     770:	.word	0x1fff1614
     774:	.word	0x1fff1690
     778:	.word	0x1fff16a8
     77c:	.word	0x1fff1644
     780:	.word	0x1fff1660
     784:	.word	0x1fff1678
     788:	.word	0x1fff17f0
     78c:	.word	0x1fff165c
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     790:	ldr	r3, [pc, #732]	; (a70 <loop+0x5dc>)
     792:	ldrb	r3, [r3, #0]
     794:	cmp	r3, #0
     796:	beq.w	c2e <loop+0x79a>
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     79a:	cmp	r3, #2
     79c:	beq.w	1244 <loop+0xdb0>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     7a0:	cmp	r3, #1
     7a2:	beq.w	13b2 <loop+0xf1e>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     7a6:	cmp	r3, #3
     7a8:	beq.w	e26 <loop+0x992>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7ac:	str	r0, [r4, #8]
     7ae:	b.n	6c8 <loop+0x234>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     7b0:	ldr	r3, [pc, #700]	; (a70 <loop+0x5dc>)
     7b2:	ldrb	r3, [r3, #0]
     7b4:	cmp	r3, #0
     7b6:	beq.w	c0c <loop+0x778>
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     7ba:	cmp	r3, #2
     7bc:	beq.w	1226 <loop+0xd92>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     7c0:	cmp	r3, #1
     7c2:	beq.w	133a <loop+0xea6>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     7c6:	cmp	r3, #3
     7c8:	beq.w	ebc <loop+0xa28>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7cc:	str	r0, [r4, #8]
     7ce:	b.n	6ac <loop+0x218>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     7d0:	ldr	r3, [pc, #668]	; (a70 <loop+0x5dc>)
     7d2:	ldrb	r3, [r3, #0]
     7d4:	cmp	r3, #0
     7d6:	beq.w	bc8 <loop+0x734>
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     7da:	cmp	r3, #2
     7dc:	beq.w	1208 <loop+0xd74>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     7e0:	cmp	r3, #1
     7e2:	beq.w	1394 <loop+0xf00>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     7e6:	cmp	r3, #3
     7e8:	beq.w	e8a <loop+0x9f6>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7ec:	str	r0, [r4, #8]
     7ee:	b.n	68e <loop+0x1fa>
     7f0:	ldr	r3, [r4, #0]
     7f2:	str	r3, [sp, #224]	; 0xe0
	return ret;
     7f4:	ldr	r3, [sp, #224]	; 0xe0
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     7f6:	ldr	r1, [r5, #8]
     7f8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7fa:	ldr	r4, [pc, #632]	; (a74 <loop+0x5e0>)
     7fc:	subs	r3, r3, r1
     7fe:	cmp	r3, r2
     800:	bls.w	670 <loop+0x1dc>
        digitalWrite(m_pin, !digitalRead(m_pin));
     804:	ldrb	r6, [r5, #0]
     806:	mov	r0, r6
     808:	bl	24e8 <digitalRead>
     80c:	clz	r1, r0
     810:	lsrs	r1, r1, #5
     812:	mov	r0, r6
     814:	bl	24dc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     818:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     81a:	movs	r2, #0

        if (blinkingCounter > 0) {
     81c:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     81e:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     820:	ble.w	670 <loop+0x1dc>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     824:	ldrb	r6, [r5, #0]
     826:	mov	r0, r6
     828:	bl	24e8 <digitalRead>
     82c:	clz	r1, r0
     830:	lsrs	r1, r1, #5
     832:	mov	r0, r6
     834:	bl	24dc <digitalWrite>
     838:	ldr	r3, [r4, #0]
     83a:	str	r3, [sp, #228]	; 0xe4
	return ret;
     83c:	ldr	r3, [sp, #228]	; 0xe4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     83e:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     840:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     842:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     846:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     848:	str	r3, [r5, #20]
     84a:	b.n	670 <loop+0x1dc>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     84c:	ldr	r3, [pc, #552]	; (a78 <loop+0x5e4>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     84e:	ldrb	r3, [r3, #0]
     850:	cmp	r3, #250	; 0xfa
     852:	beq.w	c92 <loop+0x7fe>
     856:	cmp	r3, #252	; 0xfc
     858:	beq.w	c70 <loop+0x7dc>
     85c:	cmp	r3, #248	; 0xf8
     85e:	beq.w	cfa <loop+0x866>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     862:	movs	r1, #35	; 0x23
     864:	ldr	r0, [pc, #532]	; (a7c <loop+0x5e8>)
     866:	ldr	r4, [pc, #524]	; (a74 <loop+0x5e0>)
     868:	bl	1ecc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     86c:	ldr	r0, [pc, #528]	; (a80 <loop+0x5ec>)
     86e:	bl	3a40 <Print::println()>
     872:	b.n	4a8 <loop+0x14>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     874:	ldr	r3, [r4, #0]
     876:	str	r3, [sp, #184]	; 0xb8
	return ret;
     878:	ldr	r3, [sp, #184]	; 0xb8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     87a:	ldr	r1, [r6, #8]
     87c:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     87e:	ldr	r5, [pc, #500]	; (a74 <loop+0x5e0>)
     880:	subs	r3, r3, r1
     882:	cmp	r3, r2
     884:	bls.w	63e <loop+0x1aa>
        digitalWrite(m_pin, !digitalRead(m_pin));
     888:	ldrb	r7, [r6, #0]
     88a:	mov	r0, r7
     88c:	bl	24e8 <digitalRead>
     890:	clz	r1, r0
     894:	lsrs	r1, r1, #5
     896:	mov	r0, r7
     898:	bl	24dc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     89c:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     89e:	movs	r2, #0

        if (blinkingCounter > 0) {
     8a0:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8a2:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     8a4:	ble.w	63e <loop+0x1aa>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     8a8:	ldrb	r7, [r6, #0]
     8aa:	mov	r0, r7
     8ac:	bl	24e8 <digitalRead>
     8b0:	clz	r1, r0
     8b4:	lsrs	r1, r1, #5
     8b6:	mov	r0, r7
     8b8:	bl	24dc <digitalWrite>
     8bc:	ldr	r3, [r5, #0]
     8be:	str	r3, [sp, #188]	; 0xbc
	return ret;
     8c0:	ldr	r3, [sp, #188]	; 0xbc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     8c2:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8c4:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8c6:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8ca:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8cc:	str	r3, [r6, #20]
     8ce:	b.n	63e <loop+0x1aa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8d0:	ldr	r3, [r4, #0]
     8d2:	str	r3, [sp, #216]	; 0xd8
	return ret;
     8d4:	ldr	r3, [sp, #216]	; 0xd8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     8d6:	ldr	r1, [r5, #8]
     8d8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8da:	ldr	r6, [pc, #408]	; (a74 <loop+0x5e0>)
     8dc:	subs	r3, r3, r1
     8de:	cmp	r3, r2
     8e0:	bls.w	666 <loop+0x1d2>
        digitalWrite(m_pin, !digitalRead(m_pin));
     8e4:	ldrb	r7, [r5, #0]
     8e6:	mov	r0, r7
     8e8:	bl	24e8 <digitalRead>
     8ec:	clz	r1, r0
     8f0:	lsrs	r1, r1, #5
     8f2:	mov	r0, r7
     8f4:	bl	24dc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     8f8:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8fa:	movs	r2, #0

        if (blinkingCounter > 0) {
     8fc:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8fe:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     900:	ble.w	666 <loop+0x1d2>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     904:	ldrb	r7, [r5, #0]
     906:	mov	r0, r7
     908:	bl	24e8 <digitalRead>
     90c:	clz	r1, r0
     910:	lsrs	r1, r1, #5
     912:	mov	r0, r7
     914:	bl	24dc <digitalWrite>
     918:	ldr	r3, [r6, #0]
     91a:	str	r3, [sp, #220]	; 0xdc
	return ret;
     91c:	ldr	r3, [sp, #220]	; 0xdc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     91e:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     920:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     922:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     926:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     928:	str	r3, [r5, #20]
     92a:	b.n	666 <loop+0x1d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     92c:	ldr	r3, [r4, #0]
     92e:	str	r3, [sp, #208]	; 0xd0
	return ret;
     930:	ldr	r3, [sp, #208]	; 0xd0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     932:	ldr	r1, [r5, #8]
     934:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     936:	ldr	r6, [pc, #316]	; (a74 <loop+0x5e0>)
     938:	subs	r3, r3, r1
     93a:	cmp	r3, r2
     93c:	bls.w	65c <loop+0x1c8>
        digitalWrite(m_pin, !digitalRead(m_pin));
     940:	ldrb	r7, [r5, #0]
     942:	mov	r0, r7
     944:	bl	24e8 <digitalRead>
     948:	clz	r1, r0
     94c:	lsrs	r1, r1, #5
     94e:	mov	r0, r7
     950:	bl	24dc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     954:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     956:	movs	r2, #0

        if (blinkingCounter > 0) {
     958:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     95a:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     95c:	ble.w	65c <loop+0x1c8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     960:	ldrb	r7, [r5, #0]
     962:	mov	r0, r7
     964:	bl	24e8 <digitalRead>
     968:	clz	r1, r0
     96c:	lsrs	r1, r1, #5
     96e:	mov	r0, r7
     970:	bl	24dc <digitalWrite>
     974:	ldr	r3, [r6, #0]
     976:	str	r3, [sp, #212]	; 0xd4
	return ret;
     978:	ldr	r3, [sp, #212]	; 0xd4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     97a:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     97c:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     97e:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     982:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     984:	str	r3, [r5, #20]
     986:	b.n	65c <loop+0x1c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     988:	ldr	r3, [r4, #0]
     98a:	str	r3, [sp, #200]	; 0xc8
	return ret;
     98c:	ldr	r3, [sp, #200]	; 0xc8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     98e:	ldr	r1, [r5, #8]
     990:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     992:	ldr	r6, [pc, #224]	; (a74 <loop+0x5e0>)
     994:	subs	r3, r3, r1
     996:	cmp	r3, r2
     998:	bls.w	652 <loop+0x1be>
        digitalWrite(m_pin, !digitalRead(m_pin));
     99c:	ldrb	r7, [r5, #0]
     99e:	mov	r0, r7
     9a0:	bl	24e8 <digitalRead>
     9a4:	clz	r1, r0
     9a8:	lsrs	r1, r1, #5
     9aa:	mov	r0, r7
     9ac:	bl	24dc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9b0:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9b2:	movs	r2, #0

        if (blinkingCounter > 0) {
     9b4:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9b6:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9b8:	ble.w	652 <loop+0x1be>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9bc:	ldrb	r7, [r5, #0]
     9be:	mov	r0, r7
     9c0:	bl	24e8 <digitalRead>
     9c4:	clz	r1, r0
     9c8:	lsrs	r1, r1, #5
     9ca:	mov	r0, r7
     9cc:	bl	24dc <digitalWrite>
     9d0:	ldr	r3, [r6, #0]
     9d2:	str	r3, [sp, #204]	; 0xcc
	return ret;
     9d4:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     9d6:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9d8:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9da:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9de:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9e0:	str	r3, [r5, #20]
     9e2:	b.n	652 <loop+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9e4:	ldr	r3, [r4, #0]
     9e6:	str	r3, [sp, #192]	; 0xc0
	return ret;
     9e8:	ldr	r3, [sp, #192]	; 0xc0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     9ea:	ldr	r1, [r5, #8]
     9ec:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9ee:	ldr	r6, [pc, #132]	; (a74 <loop+0x5e0>)
     9f0:	subs	r3, r3, r1
     9f2:	cmp	r3, r2
     9f4:	bls.w	648 <loop+0x1b4>
        digitalWrite(m_pin, !digitalRead(m_pin));
     9f8:	ldrb	r7, [r5, #0]
     9fa:	mov	r0, r7
     9fc:	bl	24e8 <digitalRead>
     a00:	clz	r1, r0
     a04:	lsrs	r1, r1, #5
     a06:	mov	r0, r7
     a08:	bl	24dc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     a0c:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a0e:	movs	r2, #0

        if (blinkingCounter > 0) {
     a10:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a12:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     a14:	ble.w	648 <loop+0x1b4>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a18:	ldrb	r7, [r5, #0]
     a1a:	mov	r0, r7
     a1c:	bl	24e8 <digitalRead>
     a20:	clz	r1, r0
     a24:	lsrs	r1, r1, #5
     a26:	mov	r0, r7
     a28:	bl	24dc <digitalWrite>
     a2c:	ldr	r3, [r6, #0]
     a2e:	str	r3, [sp, #196]	; 0xc4
	return ret;
     a30:	ldr	r3, [sp, #196]	; 0xc4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a32:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a34:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a36:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a3a:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a3c:	str	r3, [r5, #20]
     a3e:	b.n	648 <loop+0x1b4>
     a40:	ldr	r3, [r6, #20]
     a42:	b.n	4c8 <loop+0x34>
     a44:	ldr	r3, [r5, #20]
     a46:	b.n	612 <loop+0x17e>
     a48:	ldr	r3, [r6, #20]
     a4a:	b.n	5d0 <loop+0x13c>
     a4c:	ldr	r3, [r5, #20]
     a4e:	b.n	58e <loop+0xfa>
     a50:	ldr	r3, [r6, #20]
     a52:	b.n	54c <loop+0xb8>
     a54:	ldr	r3, [r5, #20]
     a56:	b.n	50a <loop+0x76>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     a58:	mov	r2, r5
     a5a:	b.n	56c <loop+0xd8>
     a5c:	mov	r2, r6
     a5e:	b.n	52a <loop+0x96>
     a60:	mov	r2, r5
     a62:	b.n	5f0 <loop+0x15c>
     a64:	mov	r2, r6
     a66:	b.n	5ae <loop+0x11a>
     a68:	mov	r2, r5
     a6a:	b.n	4e8 <loop+0x54>
     a6c:	mov	r2, r6
     a6e:	b.n	632 <loop+0x19e>
     a70:	.word	0x1fff165c
     a74:	.word	0x1fff1844
     a78:	.word	0x1fff1d00
     a7c:	.word	0x00004e10
     a80:	.word	0x1fff0c60

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     a84:	ldrb	r3, [r7, #16]
     a86:	cmp	r3, #0
     a88:	bne.w	eee <loop+0xa5a>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     a8c:	ldrb	r3, [r7, #17]
     a8e:	cmp	r3, #0
     a90:	bne.w	12f2 <loop+0xe5e>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     a94:	ldr	r3, [r7, #24]
     a96:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     a9a:	clz	r1, r1
     a9e:	lsrs	r1, r1, #5
     aa0:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     aa2:	uxtb	r0, r0
     aa4:	bl	24dc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     aa8:	ldr	r3, [r7, #0]
     aaa:	ldr	r0, [r7, #28]
     aac:	ldr	r2, [r7, #12]
     aae:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     ab0:	ldrb	r1, [r0, r3]
     ab2:	eor.w	r1, r1, #1
     ab6:	strb	r1, [r0, r3]
     ab8:	b.n	632 <loop+0x19e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     aba:	ldrb	r3, [r7, #16]
     abc:	cmp	r3, #0
     abe:	bne.w	f74 <loop+0xae0>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     ac2:	ldrb	r3, [r7, #17]
     ac4:	cmp	r3, #0
     ac6:	bne.w	1286 <loop+0xdf2>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     aca:	ldr	r3, [r7, #24]
     acc:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ad0:	clz	r1, r1
     ad4:	lsrs	r1, r1, #5
     ad6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ad8:	uxtb	r0, r0
     ada:	bl	24dc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     ade:	ldr	r3, [r7, #0]
     ae0:	ldr	r0, [r7, #28]
     ae2:	ldr	r2, [r7, #12]
     ae4:	subs	r3, #1
     ae6:	ldrb	r1, [r0, r3]
     ae8:	eor.w	r1, r1, #1
     aec:	strb	r1, [r0, r3]
     aee:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     af0:	ldrb	r3, [r7, #16]
     af2:	cmp	r3, #0
     af4:	bne.w	1154 <loop+0xcc0>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     af8:	ldrb	r3, [r7, #17]
     afa:	cmp	r3, #0
     afc:	bne.w	1262 <loop+0xdce>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b00:	ldr	r3, [r7, #24]
     b02:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b06:	clz	r1, r1
     b0a:	lsrs	r1, r1, #5
     b0c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b0e:	uxtb	r0, r0
     b10:	bl	24dc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b14:	ldr	r3, [r7, #0]
     b16:	ldr	r0, [r7, #28]
     b18:	ldr	r2, [r7, #12]
     b1a:	subs	r3, #1
     b1c:	ldrb	r1, [r0, r3]
     b1e:	eor.w	r1, r1, #1
     b22:	strb	r1, [r0, r3]
     b24:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b26:	ldrb	r3, [r7, #16]
     b28:	cmp	r3, #0
     b2a:	bne.w	10dc <loop+0xc48>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b2e:	ldrb	r3, [r7, #17]
     b30:	cmp	r3, #0
     b32:	bne.w	12ce <loop+0xe3a>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b36:	ldr	r3, [r7, #24]
     b38:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b3c:	clz	r1, r1
     b40:	lsrs	r1, r1, #5
     b42:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b44:	uxtb	r0, r0
     b46:	bl	24dc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b4a:	ldr	r3, [r7, #0]
     b4c:	ldr	r0, [r7, #28]
     b4e:	ldr	r2, [r7, #12]
     b50:	subs	r3, #1
     b52:	ldrb	r1, [r0, r3]
     b54:	eor.w	r1, r1, #1
     b58:	strb	r1, [r0, r3]
     b5a:	b.n	56c <loop+0xd8>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b5c:	ldrb	r3, [r7, #16]
     b5e:	cmp	r3, #0
     b60:	bne.w	1064 <loop+0xbd0>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b64:	ldrb	r3, [r7, #17]
     b66:	cmp	r3, #0
     b68:	bne.w	12aa <loop+0xe16>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b6c:	ldr	r3, [r7, #24]
     b6e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b72:	clz	r1, r1
     b76:	lsrs	r1, r1, #5
     b78:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b7a:	uxtb	r0, r0
     b7c:	bl	24dc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b80:	ldr	r3, [r7, #0]
     b82:	ldr	r0, [r7, #28]
     b84:	ldr	r2, [r7, #12]
     b86:	subs	r3, #1
     b88:	ldrb	r1, [r0, r3]
     b8a:	eor.w	r1, r1, #1
     b8e:	strb	r1, [r0, r3]
     b90:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b92:	ldrb	r3, [r7, #16]
     b94:	cmp	r3, #0
     b96:	bne.w	fec <loop+0xb58>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b9a:	ldrb	r3, [r7, #17]
     b9c:	cmp	r3, #0
     b9e:	bne.w	1316 <loop+0xe82>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     ba2:	ldr	r3, [r7, #24]
     ba4:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ba8:	clz	r1, r1
     bac:	lsrs	r1, r1, #5
     bae:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bb0:	uxtb	r0, r0
     bb2:	bl	24dc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     bb6:	ldr	r3, [r7, #0]
     bb8:	ldr	r0, [r7, #28]
     bba:	ldr	r2, [r7, #12]
     bbc:	subs	r3, #1
     bbe:	ldrb	r1, [r0, r3]
     bc0:	eor.w	r1, r1, #1
     bc4:	strb	r1, [r0, r3]
     bc6:	b.n	5f0 <loop+0x15c>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     bc8:	ldrb	r3, [r4, #20]
     bca:	cmp	r3, #0
     bcc:	bne.w	7ec <loop+0x358>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     bd0:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     bd4:	ldr	r2, [r4, #16]
     bd6:	bge.w	d46 <loop+0x8b2>
        max_ppqn = 6;

        if (ppqn >= 6) {
     bda:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     bdc:	movs	r5, #6

        if (ppqn >= 6) {
     bde:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     be0:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     be2:	ble.w	7ec <loop+0x358>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     be6:	str	r3, [r2, #28]
     be8:	b.n	7ec <loop+0x358>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     bea:	ldrb	r3, [r4, #20]
     bec:	cmp	r3, #0
     bee:	bne.w	71c <loop+0x288>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     bf2:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     bf6:	ldr	r2, [r4, #16]
     bf8:	bge.w	d2c <loop+0x898>
        max_ppqn = 6;

        if (ppqn >= 6) {
     bfc:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     bfe:	movs	r5, #6

        if (ppqn >= 6) {
     c00:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c02:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     c04:	ble.w	71c <loop+0x288>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     c08:	str	r3, [r2, #28]
     c0a:	b.n	71c <loop+0x288>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     c0c:	ldrb	r3, [r4, #20]
     c0e:	cmp	r3, #0
     c10:	bne.w	7cc <loop+0x338>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     c14:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     c18:	ldr	r2, [r4, #16]
     c1a:	bge.w	d7a <loop+0x8e6>
        max_ppqn = 6;

        if (ppqn >= 6) {
     c1e:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c20:	movs	r5, #6

        if (ppqn >= 6) {
     c22:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c24:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     c26:	ble.w	7cc <loop+0x338>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     c2a:	str	r3, [r2, #28]
     c2c:	b.n	7cc <loop+0x338>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     c2e:	ldrb	r3, [r4, #20]
     c30:	cmp	r3, #0
     c32:	bne.w	7ac <loop+0x318>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     c36:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     c3a:	ldr	r2, [r4, #16]
     c3c:	bge.w	d94 <loop+0x900>
        max_ppqn = 6;

        if (ppqn >= 6) {
     c40:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c42:	movs	r5, #6

        if (ppqn >= 6) {
     c44:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c46:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     c48:	ble.w	7ac <loop+0x318>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     c4c:	str	r3, [r2, #28]
     c4e:	b.n	7ac <loop+0x318>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     c50:	ldrb	r3, [r4, #20]
     c52:	cmp	r3, #0
     c54:	bne.w	740 <loop+0x2ac>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     c58:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     c5c:	ldr	r2, [r4, #16]
     c5e:	bge.n	d60 <loop+0x8cc>
        max_ppqn = 6;

        if (ppqn >= 6) {
     c60:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c62:	movs	r5, #6

        if (ppqn >= 6) {
     c64:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     c66:	str	r5, [r2, #32]

        if (ppqn >= 6) {
     c68:	ble.w	740 <loop+0x2ac>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     c6c:	str	r3, [r2, #28]
     c6e:	b.n	740 <loop+0x2ac>
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c70:	ldr	r3, [pc, #756]	; (f68 <loop+0xad4>)
     c72:	ldr	r4, [pc, #760]	; (f6c <loop+0xad8>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[5]->toggle();
     c74:	ldr	r2, [r3, #108]	; 0x6c
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c76:	movs	r5, #0
      ppqn = 0;
     c78:	str	r5, [r3, #28]
      m_currentStep = 0;
     c7a:	str	r5, [r3, #8]
     c7c:	ldmia.w	r2, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c80:	clz	r1, r1
     c84:	lsrs	r1, r1, #5
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c86:	strb	r5, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c88:	uxtb	r0, r0
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c8a:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     c8c:	bl	24dc <digitalWrite>
     c90:	b.n	4a8 <loop+0x14>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     c92:	ldr	r5, [pc, #724]	; (f68 <loop+0xad4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c94:	ldr	r4, [pc, #724]	; (f6c <loop+0xad8>)
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     c96:	ldr	r3, [r5, #8]
     c98:	adds	r3, #22
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     c9a:	mov.w	r8, #1
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     c9e:	ldr.w	r6, [r5, r3, lsl #2]
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     ca2:	strb.w	r8, [r5, #4]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ca6:	ldrb.w	r9, [r6]
      ppqn = 0;
     caa:	movs	r7, #0
     cac:	mov	r0, r9
     cae:	str	r7, [r5, #28]
     cb0:	bl	24e8 <digitalRead>
     cb4:	clz	r1, r0
     cb8:	lsrs	r1, r1, #5
     cba:	mov	r0, r9
     cbc:	bl	24dc <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep].m_state) {
     cc0:	ldr	r3, [r5, #8]
     cc2:	ldr	r2, [r4, #0]
     cc4:	str	r2, [sp, #12]
     cc6:	ldrb	r2, [r5, r3]
	return ret;
     cc8:	ldr	r1, [sp, #12]
      blinking = true;
     cca:	strb.w	r8, [r6, #16]
      blinkingCounter = times;
     cce:	str	r7, [r6, #20]
      lastBlink = millis();  
     cd0:	str	r1, [r6, #8]
     cd2:	cmp	r2, #0
     cd4:	bne.w	1448 <loop+0xfb4>
          playStep(m_currentStep);
        }

        m_currentStep++;
     cd8:	adds	r3, #1

        if (m_currentStep > 3) {
     cda:	cmp	r3, #3
          m_currentStep = 0;
     cdc:	it	gt
     cde:	movgt	r3, #0
     ce0:	str	r3, [r5, #8]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[5]->toggle();
     ce2:	ldr	r3, [r5, #108]	; 0x6c
     ce4:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     ce8:	clz	r1, r1
     cec:	lsrs	r1, r1, #5
     cee:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     cf0:	uxtb	r0, r0
     cf2:	bl	24dc <digitalWrite>
     cf6:	b.w	4a8 <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     cfa:	ldr	r5, [pc, #620]	; (f68 <loop+0xad4>)

      if (ppqn >= notesLengths[m_currentStep]) {
     cfc:	ldr	r2, [r5, #8]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     cfe:	ldr	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     d00:	adds	r2, #18
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d02:	adds	r3, #1

      if (ppqn >= notesLengths[m_currentStep]) {
     d04:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d08:	str	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     d0a:	cmp	r3, r2
     d0c:	bge.w	143e <loop+0xfaa>
        // of the active note to see if i do the stop step
        stopStep();
      }


      if (ppqn == max_ppqn) {
     d10:	ldr	r2, [r5, #32]
     d12:	ldr	r6, [pc, #596]	; (f68 <loop+0xad4>)
     d14:	cmp	r2, r3
     d16:	bne.w	4a6 <loop+0x12>
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
     d1a:	ldrb	r3, [r6, #4]
     d1c:	cmp	r3, #0
     d1e:	bne.w	1648 <loop+0x11b4>
     d22:	ldr	r4, [pc, #584]	; (f6c <loop+0xad8>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     d24:	movs	r3, #0
     d26:	str	r3, [r5, #28]
     d28:	b.w	4a8 <loop+0x14>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     d2c:	sub.w	r1, r0, #400	; 0x190
     d30:	cmp.w	r1, #400	; 0x190
     d34:	bcc.n	de6 <loop+0x952>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     d36:	sub.w	r3, r0, #800	; 0x320
     d3a:	cmp	r3, #223	; 0xdf
     d3c:	bhi.w	71c <loop+0x288>
        max_ppqn = 12;
     d40:	movs	r3, #12
     d42:	str	r3, [r2, #32]
     d44:	b.n	71c <loop+0x288>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     d46:	sub.w	r1, r0, #400	; 0x190
     d4a:	cmp.w	r1, #400	; 0x190
     d4e:	bcc.n	dd8 <loop+0x944>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     d50:	sub.w	r3, r0, #800	; 0x320
     d54:	cmp	r3, #223	; 0xdf
     d56:	bhi.w	7ec <loop+0x358>
        max_ppqn = 12;
     d5a:	movs	r3, #12
     d5c:	str	r3, [r2, #32]
     d5e:	b.n	7ec <loop+0x358>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     d60:	sub.w	r1, r0, #400	; 0x190
     d64:	cmp.w	r1, #400	; 0x190
     d68:	bcc.n	dca <loop+0x936>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     d6a:	sub.w	r3, r0, #800	; 0x320
     d6e:	cmp	r3, #223	; 0xdf
     d70:	bhi.w	740 <loop+0x2ac>
        max_ppqn = 12;
     d74:	movs	r3, #12
     d76:	str	r3, [r2, #32]
     d78:	b.n	740 <loop+0x2ac>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     d7a:	sub.w	r1, r0, #400	; 0x190
     d7e:	cmp.w	r1, #400	; 0x190
     d82:	bcc.n	dbc <loop+0x928>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     d84:	sub.w	r3, r0, #800	; 0x320
     d88:	cmp	r3, #223	; 0xdf
     d8a:	bhi.w	7cc <loop+0x338>
        max_ppqn = 12;
     d8e:	movs	r3, #12
     d90:	str	r3, [r2, #32]
     d92:	b.n	7cc <loop+0x338>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     d94:	sub.w	r1, r0, #400	; 0x190
     d98:	cmp.w	r1, #400	; 0x190
     d9c:	bcc.n	dae <loop+0x91a>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     d9e:	sub.w	r3, r0, #800	; 0x320
     da2:	cmp	r3, #223	; 0xdf
     da4:	bhi.w	7ac <loop+0x318>
        max_ppqn = 12;
     da8:	movs	r3, #12
     daa:	str	r3, [r2, #32]
     dac:	b.n	7ac <loop+0x318>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
     dae:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     db0:	movs	r5, #8

        if (ppqn >= 8) {
     db2:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     db4:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     db6:	ble.w	7ac <loop+0x318>
     dba:	b.n	c4c <loop+0x7b8>
     dbc:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     dbe:	movs	r5, #8

        if (ppqn >= 8) {
     dc0:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     dc2:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     dc4:	ble.w	7cc <loop+0x338>
     dc8:	b.n	c2a <loop+0x796>
     dca:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     dcc:	movs	r5, #8

        if (ppqn >= 8) {
     dce:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     dd0:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     dd2:	ble.w	740 <loop+0x2ac>
     dd6:	b.n	c6c <loop+0x7d8>
     dd8:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     dda:	movs	r5, #8

        if (ppqn >= 8) {
     ddc:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     dde:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     de0:	ble.w	7ec <loop+0x358>
     de4:	b.n	be6 <loop+0x752>
     de6:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     de8:	movs	r5, #8

        if (ppqn >= 8) {
     dea:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     dec:	str	r5, [r2, #32]

        if (ppqn >= 8) {
     dee:	ble.w	71c <loop+0x288>
     df2:	b.n	c08 <loop+0x774>
      } else if (currentMode == VELOCITY) {
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
        m_sequence.controlLength(m_value, m_id);
     df4:	ldr	r5, [r4, #16]
     df6:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     df8:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     dfa:	movw	r6, #1022	; 0x3fe
     dfe:	rsb	r3, r2, #1
     e02:	cmp	r3, r6
     e04:	bgt.w	1428 <loop+0xf94>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     e08:	rsb	r3, r2, #2
     e0c:	mul.w	r3, r0, r3
     e10:	cmp	r3, #0
     e12:	it	lt
     e14:	addwlt	r3, r3, #1023	; 0x3ff
     e18:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     e1c:	add.w	r3, r1, #18
     e20:	str.w	r2, [r5, r3, lsl #2]
     e24:	b.n	740 <loop+0x2ac>
     e26:	ldr	r5, [r4, #16]
     e28:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     e2a:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     e2c:	movw	r6, #1022	; 0x3fe
     e30:	rsb	r3, r2, #1
     e34:	cmp	r3, r6
     e36:	bgt.w	13fc <loop+0xf68>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     e3a:	rsb	r3, r2, #2
     e3e:	mul.w	r3, r0, r3
     e42:	cmp	r3, #0
     e44:	it	lt
     e46:	addwlt	r3, r3, #1023	; 0x3ff
     e4a:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     e4e:	add.w	r3, r1, #18
     e52:	str.w	r2, [r5, r3, lsl #2]
     e56:	b.n	7ac <loop+0x318>
     e58:	ldr	r5, [r4, #16]
     e5a:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     e5c:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     e5e:	movw	r6, #1022	; 0x3fe
     e62:	rsb	r3, r2, #1
     e66:	cmp	r3, r6
     e68:	bgt.w	13d0 <loop+0xf3c>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     e6c:	rsb	r3, r2, #2
     e70:	mul.w	r3, r0, r3
     e74:	cmp	r3, #0
     e76:	it	lt
     e78:	addwlt	r3, r3, #1023	; 0x3ff
     e7c:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     e80:	add.w	r3, r1, #18
     e84:	str.w	r2, [r5, r3, lsl #2]
     e88:	b.n	71c <loop+0x288>
     e8a:	ldr	r5, [r4, #16]
     e8c:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     e8e:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     e90:	movw	r6, #1022	; 0x3fe
     e94:	rsb	r3, r2, #1
     e98:	cmp	r3, r6
     e9a:	bgt.w	1412 <loop+0xf7e>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     e9e:	rsb	r3, r2, #2
     ea2:	mul.w	r3, r0, r3
     ea6:	cmp	r3, #0
     ea8:	it	lt
     eaa:	addwlt	r3, r3, #1023	; 0x3ff
     eae:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     eb2:	add.w	r3, r1, #18
     eb6:	str.w	r2, [r5, r3, lsl #2]
     eba:	b.n	7ec <loop+0x358>
     ebc:	ldr	r5, [r4, #16]
     ebe:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     ec0:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     ec2:	movw	r6, #1022	; 0x3fe
     ec6:	rsb	r3, r2, #1
     eca:	cmp	r3, r6
     ecc:	bgt.w	13e6 <loop+0xf52>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     ed0:	rsb	r3, r2, #2
     ed4:	mul.w	r3, r0, r3
     ed8:	cmp	r3, #0
     eda:	it	lt
     edc:	addwlt	r3, r3, #1023	; 0x3ff
     ee0:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     ee4:	add.w	r3, r1, #18
     ee8:	str.w	r2, [r5, r3, lsl #2]
     eec:	b.n	7cc <loop+0x338>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     eee:	ldr	r3, [r7, #24]
     ef0:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ef4:	clz	r1, r1
     ef8:	lsrs	r1, r1, #5
     efa:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     efc:	uxtb	r0, r0
     efe:	bl	24dc <digitalWrite>
        m_sequence.toggleGlobalMode();
     f02:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
     f06:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     f0a:	ldrb.w	sl, [r9]
     f0e:	mov	r0, sl
     f10:	bl	24e8 <digitalRead>
     f14:	clz	r1, r0
     f18:	lsrs	r1, r1, #5
     f1a:	mov	r0, sl
     f1c:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f20:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
     f24:	ldr.w	lr, [pc, #72]	; f70 <loop+0xadc>
     f28:	str	r3, [sp, #164]	; 0xa4
	return ret;
     f2a:	ldr	r3, [sp, #164]	; 0xa4
     f2c:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     f30:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
     f34:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     f36:	movs	r3, #1
     f38:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
     f3c:	str.w	r2, [r9, #20]
     f40:	cmp.w	sl, #0
     f44:	beq.w	150e <loop+0x107a>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     f48:	cmp.w	sl, #1
     f4c:	beq.w	1890 <loop+0x13fc>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     f50:	cmp.w	sl, #2
     f54:	beq.w	19f8 <loop+0x1564>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     f58:	cmp.w	sl, #3
     f5c:	beq.w	17ee <loop+0x135a>
     f60:	ldr	r2, [r7, #12]
     f62:	b.w	632 <loop+0x19e>
     f66:	nop
     f68:	.word	0x1fff1730
     f6c:	.word	0x1fff1844
     f70:	.word	0x1fff165c
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     f74:	ldr	r3, [r7, #24]
     f76:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     f7a:	clz	r1, r1
     f7e:	lsrs	r1, r1, #5
     f80:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     f82:	uxtb	r0, r0
     f84:	bl	24dc <digitalWrite>
        m_sequence.toggleGlobalMode();
     f88:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
     f8c:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     f90:	ldrb.w	sl, [r9]
     f94:	mov	r0, sl
     f96:	bl	24e8 <digitalRead>
     f9a:	clz	r1, r0
     f9e:	lsrs	r1, r1, #5
     fa0:	mov	r0, sl
     fa2:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     fa6:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
     faa:	ldr.w	lr, [pc, #1472]	; 156c <loop+0x10d8>
     fae:	str	r3, [sp, #64]	; 0x40
	return ret;
     fb0:	ldr	r3, [sp, #64]	; 0x40
     fb2:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     fb6:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
     fba:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     fbc:	movs	r3, #1
     fbe:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
     fc2:	str.w	r2, [r9, #20]
     fc6:	cmp.w	sl, #0
     fca:	beq.w	15b8 <loop+0x1124>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     fce:	cmp.w	sl, #1
     fd2:	beq.w	1920 <loop+0x148c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     fd6:	cmp.w	sl, #2
     fda:	beq.w	1b60 <loop+0x16cc>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     fde:	cmp.w	sl, #3
     fe2:	beq.w	171c <loop+0x1288>
     fe6:	ldr	r2, [r7, #12]
     fe8:	b.w	4e8 <loop+0x54>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     fec:	ldr	r3, [r7, #24]
     fee:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ff2:	clz	r1, r1
     ff6:	lsrs	r1, r1, #5
     ff8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ffa:	uxtb	r0, r0
     ffc:	bl	24dc <digitalWrite>
        m_sequence.toggleGlobalMode();
    1000:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    1004:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1008:	ldrb.w	sl, [r9]
    100c:	mov	r0, sl
    100e:	bl	24e8 <digitalRead>
    1012:	clz	r1, r0
    1016:	lsrs	r1, r1, #5
    1018:	mov	r0, sl
    101a:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    101e:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    1022:	ldr.w	lr, [pc, #1352]	; 156c <loop+0x10d8>
    1026:	str	r3, [sp, #144]	; 0x90
	return ret;
    1028:	ldr	r3, [sp, #144]	; 0x90
    102a:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    102e:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1032:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1034:	movs	r3, #1
    1036:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    103a:	str.w	r2, [r9, #20]
    103e:	cmp.w	sl, #0
    1042:	beq.w	147e <loop+0xfea>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1046:	cmp.w	sl, #1
    104a:	beq.w	19b0 <loop+0x151c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    104e:	cmp.w	sl, #2
    1052:	beq.w	1b18 <loop+0x1684>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1056:	cmp.w	sl, #3
    105a:	beq.w	16d6 <loop+0x1242>
    105e:	ldr	r2, [r7, #12]
    1060:	b.w	5f0 <loop+0x15c>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1064:	ldr	r3, [r7, #24]
    1066:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    106a:	clz	r1, r1
    106e:	lsrs	r1, r1, #5
    1070:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1072:	uxtb	r0, r0
    1074:	bl	24dc <digitalWrite>
        m_sequence.toggleGlobalMode();
    1078:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    107c:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1080:	ldrb.w	sl, [r9]
    1084:	mov	r0, sl
    1086:	bl	24e8 <digitalRead>
    108a:	clz	r1, r0
    108e:	lsrs	r1, r1, #5
    1090:	mov	r0, sl
    1092:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1096:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    109a:	ldr.w	lr, [pc, #1232]	; 156c <loop+0x10d8>
    109e:	str	r3, [sp, #124]	; 0x7c
	return ret;
    10a0:	ldr	r3, [sp, #124]	; 0x7c
    10a2:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    10a6:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    10aa:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    10ac:	movs	r3, #1
    10ae:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    10b2:	str.w	r2, [r9, #20]
    10b6:	cmp.w	sl, #0
    10ba:	beq.w	1600 <loop+0x116c>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    10be:	cmp.w	sl, #1
    10c2:	beq.w	1968 <loop+0x14d4>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    10c6:	cmp.w	sl, #2
    10ca:	beq.w	1a40 <loop+0x15ac>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    10ce:	cmp.w	sl, #3
    10d2:	beq.w	1690 <loop+0x11fc>
    10d6:	ldr	r2, [r7, #12]
    10d8:	b.w	5ae <loop+0x11a>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    10dc:	ldr	r3, [r7, #24]
    10de:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    10e2:	clz	r1, r1
    10e6:	lsrs	r1, r1, #5
    10e8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    10ea:	uxtb	r0, r0
    10ec:	bl	24dc <digitalWrite>
        m_sequence.toggleGlobalMode();
    10f0:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    10f4:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10f8:	ldrb.w	sl, [r9]
    10fc:	mov	r0, sl
    10fe:	bl	24e8 <digitalRead>
    1102:	clz	r1, r0
    1106:	lsrs	r1, r1, #5
    1108:	mov	r0, sl
    110a:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    110e:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    1112:	ldr.w	lr, [pc, #1112]	; 156c <loop+0x10d8>
    1116:	str	r3, [sp, #104]	; 0x68
	return ret;
    1118:	ldr	r3, [sp, #104]	; 0x68
    111a:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    111e:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1122:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1124:	movs	r3, #1
    1126:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    112a:	str.w	r2, [r9, #20]
    112e:	cmp.w	sl, #0
    1132:	beq.w	14c6 <loop+0x1032>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1136:	cmp.w	sl, #1
    113a:	beq.w	1834 <loop+0x13a0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    113e:	cmp.w	sl, #2
    1142:	beq.w	1a88 <loop+0x15f4>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1146:	cmp.w	sl, #3
    114a:	beq.w	1762 <loop+0x12ce>
    114e:	ldr	r2, [r7, #12]
    1150:	b.w	56c <loop+0xd8>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1154:	ldr	r3, [r7, #24]
    1156:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    115a:	clz	r1, r1
    115e:	lsrs	r1, r1, #5
    1160:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1162:	uxtb	r0, r0
    1164:	bl	24dc <digitalWrite>
        m_sequence.toggleGlobalMode();
    1168:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    116c:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1170:	ldrb.w	sl, [r9]
    1174:	mov	r0, sl
    1176:	bl	24e8 <digitalRead>
    117a:	clz	r1, r0
    117e:	lsrs	r1, r1, #5
    1180:	mov	r0, sl
    1182:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1186:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    118a:	ldr.w	lr, [pc, #992]	; 156c <loop+0x10d8>
    118e:	str	r3, [sp, #84]	; 0x54
	return ret;
    1190:	ldr	r3, [sp, #84]	; 0x54
    1192:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1196:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    119a:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    119c:	movs	r3, #1
    119e:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    11a2:	str.w	r2, [r9, #20]
    11a6:	cmp.w	sl, #0
    11aa:	beq.w	1570 <loop+0x10dc>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    11ae:	cmp.w	sl, #1
    11b2:	beq.w	18d8 <loop+0x1444>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    11b6:	cmp.w	sl, #2
    11ba:	beq.w	1ad0 <loop+0x163c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    11be:	cmp.w	sl, #3
    11c2:	beq.w	17a8 <loop+0x1314>
    11c6:	ldr	r2, [r7, #12]
    11c8:	b.w	52a <loop+0x96>
      notes[id] = newValue;
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    11cc:	ldr	r3, [r4, #12]
    11ce:	ldr	r1, [r4, #16]
    11d0:	add.w	r2, r3, #14
    11d4:	subs.w	r3, r0, r0, lsl #6
    11d8:	it	mi
    11da:	addwmi	r3, r3, #1023	; 0x3ff
    11de:	asrs	r3, r3, #10
    11e0:	adds	r3, #127	; 0x7f
    11e2:	str.w	r3, [r1, r2, lsl #2]
    11e6:	b.w	740 <loop+0x2ac>
    11ea:	ldr	r3, [r4, #12]
    11ec:	ldr	r1, [r4, #16]
    11ee:	add.w	r2, r3, #14
    11f2:	subs.w	r3, r0, r0, lsl #6
    11f6:	it	mi
    11f8:	addwmi	r3, r3, #1023	; 0x3ff
    11fc:	asrs	r3, r3, #10
    11fe:	adds	r3, #127	; 0x7f
    1200:	str.w	r3, [r1, r2, lsl #2]
    1204:	b.w	71c <loop+0x288>
    1208:	ldr	r3, [r4, #12]
    120a:	ldr	r1, [r4, #16]
    120c:	add.w	r2, r3, #14
    1210:	subs.w	r3, r0, r0, lsl #6
    1214:	it	mi
    1216:	addwmi	r3, r3, #1023	; 0x3ff
    121a:	asrs	r3, r3, #10
    121c:	adds	r3, #127	; 0x7f
    121e:	str.w	r3, [r1, r2, lsl #2]
    1222:	b.w	7ec <loop+0x358>
    1226:	ldr	r3, [r4, #12]
    1228:	ldr	r1, [r4, #16]
    122a:	add.w	r2, r3, #14
    122e:	subs.w	r3, r0, r0, lsl #6
    1232:	it	mi
    1234:	addwmi	r3, r3, #1023	; 0x3ff
    1238:	asrs	r3, r3, #10
    123a:	adds	r3, #127	; 0x7f
    123c:	str.w	r3, [r1, r2, lsl #2]
    1240:	b.w	7cc <loop+0x338>
    1244:	ldr	r3, [r4, #12]
    1246:	ldr	r1, [r4, #16]
    1248:	add.w	r2, r3, #14
    124c:	subs.w	r3, r0, r0, lsl #6
    1250:	it	mi
    1252:	addwmi	r3, r3, #1023	; 0x3ff
    1256:	asrs	r3, r3, #10
    1258:	adds	r3, #127	; 0x7f
    125a:	str.w	r3, [r1, r2, lsl #2]
    125e:	b.w	7ac <loop+0x318>
      } else if (m_state == LOW && m_playButton) {
        m_led.toggle();
    1262:	ldr	r3, [r7, #24]
    1264:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1268:	clz	r1, r1
    126c:	lsrs	r1, r1, #5
    126e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1270:	uxtb	r0, r0
    1272:	bl	24dc <digitalWrite>
    1276:	movs	r1, #4
    1278:	ldr	r0, [pc, #732]	; (1558 <loop+0x10c4>)
    127a:	bl	1ecc <usb_serial_write>
    127e:	ldr	r0, [pc, #732]	; (155c <loop+0x10c8>)
    1280:	bl	3a40 <Print::println()>
    1284:	b.n	11c6 <loop+0xd32>
    1286:	ldr	r3, [r7, #24]
    1288:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    128c:	clz	r1, r1
    1290:	lsrs	r1, r1, #5
    1292:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1294:	uxtb	r0, r0
    1296:	bl	24dc <digitalWrite>
    129a:	movs	r1, #4
    129c:	ldr	r0, [pc, #696]	; (1558 <loop+0x10c4>)
    129e:	bl	1ecc <usb_serial_write>
    12a2:	ldr	r0, [pc, #696]	; (155c <loop+0x10c8>)
    12a4:	bl	3a40 <Print::println()>
    12a8:	b.n	fe6 <loop+0xb52>
    12aa:	ldr	r3, [r7, #24]
    12ac:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    12b0:	clz	r1, r1
    12b4:	lsrs	r1, r1, #5
    12b6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    12b8:	uxtb	r0, r0
    12ba:	bl	24dc <digitalWrite>
    12be:	movs	r1, #4
    12c0:	ldr	r0, [pc, #660]	; (1558 <loop+0x10c4>)
    12c2:	bl	1ecc <usb_serial_write>
    12c6:	ldr	r0, [pc, #660]	; (155c <loop+0x10c8>)
    12c8:	bl	3a40 <Print::println()>
    12cc:	b.n	10d6 <loop+0xc42>
    12ce:	ldr	r3, [r7, #24]
    12d0:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    12d4:	clz	r1, r1
    12d8:	lsrs	r1, r1, #5
    12da:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    12dc:	uxtb	r0, r0
    12de:	bl	24dc <digitalWrite>
    12e2:	movs	r1, #4
    12e4:	ldr	r0, [pc, #624]	; (1558 <loop+0x10c4>)
    12e6:	bl	1ecc <usb_serial_write>
    12ea:	ldr	r0, [pc, #624]	; (155c <loop+0x10c8>)
    12ec:	bl	3a40 <Print::println()>
    12f0:	b.n	114e <loop+0xcba>
    12f2:	ldr	r3, [r7, #24]
    12f4:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    12f8:	clz	r1, r1
    12fc:	lsrs	r1, r1, #5
    12fe:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1300:	uxtb	r0, r0
    1302:	bl	24dc <digitalWrite>
    1306:	movs	r1, #4
    1308:	ldr	r0, [pc, #588]	; (1558 <loop+0x10c4>)
    130a:	bl	1ecc <usb_serial_write>
    130e:	ldr	r0, [pc, #588]	; (155c <loop+0x10c8>)
    1310:	bl	3a40 <Print::println()>
    1314:	b.n	f60 <loop+0xacc>
    1316:	ldr	r3, [r7, #24]
    1318:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    131c:	clz	r1, r1
    1320:	lsrs	r1, r1, #5
    1322:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1324:	uxtb	r0, r0
    1326:	bl	24dc <digitalWrite>
    132a:	movs	r1, #4
    132c:	ldr	r0, [pc, #552]	; (1558 <loop+0x10c4>)
    132e:	bl	1ecc <usb_serial_write>
    1332:	ldr	r0, [pc, #552]	; (155c <loop+0x10c8>)
    1334:	bl	3a40 <Print::println()>
    1338:	b.n	105e <loop+0xbca>
      notesLengths[id] = newValue;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      notes[id] = newValue;
    133a:	sub.w	r3, r0, r0, lsl #2
    133e:	ldr	r2, [r4, #12]
    1340:	ldr	r1, [r4, #16]
    1342:	lsls	r3, r3, #2
    1344:	it	mi
    1346:	addwmi	r3, r3, #1023	; 0x3ff
    134a:	adds	r2, #10
    134c:	asrs	r3, r3, #10
    134e:	adds	r3, #51	; 0x33
    1350:	str.w	r3, [r1, r2, lsl #2]
    1354:	b.w	7cc <loop+0x338>
    1358:	sub.w	r3, r0, r0, lsl #2
    135c:	ldr	r2, [r4, #12]
    135e:	ldr	r1, [r4, #16]
    1360:	lsls	r3, r3, #2
    1362:	it	mi
    1364:	addwmi	r3, r3, #1023	; 0x3ff
    1368:	adds	r2, #10
    136a:	asrs	r3, r3, #10
    136c:	adds	r3, #51	; 0x33
    136e:	str.w	r3, [r1, r2, lsl #2]
    1372:	b.w	740 <loop+0x2ac>
    1376:	sub.w	r3, r0, r0, lsl #2
    137a:	ldr	r2, [r4, #12]
    137c:	ldr	r1, [r4, #16]
    137e:	lsls	r3, r3, #2
    1380:	it	mi
    1382:	addwmi	r3, r3, #1023	; 0x3ff
    1386:	adds	r2, #10
    1388:	asrs	r3, r3, #10
    138a:	adds	r3, #51	; 0x33
    138c:	str.w	r3, [r1, r2, lsl #2]
    1390:	b.w	71c <loop+0x288>
    1394:	sub.w	r3, r0, r0, lsl #2
    1398:	ldr	r2, [r4, #12]
    139a:	ldr	r1, [r4, #16]
    139c:	lsls	r3, r3, #2
    139e:	it	mi
    13a0:	addwmi	r3, r3, #1023	; 0x3ff
    13a4:	adds	r2, #10
    13a6:	asrs	r3, r3, #10
    13a8:	adds	r3, #51	; 0x33
    13aa:	str.w	r3, [r1, r2, lsl #2]
    13ae:	b.w	7ec <loop+0x358>
    13b2:	sub.w	r3, r0, r0, lsl #2
    13b6:	ldr	r2, [r4, #12]
    13b8:	ldr	r1, [r4, #16]
    13ba:	lsls	r3, r3, #2
    13bc:	it	mi
    13be:	addwmi	r3, r3, #1023	; 0x3ff
    13c2:	adds	r2, #10
    13c4:	asrs	r3, r3, #10
    13c6:	adds	r3, #51	; 0x33
    13c8:	str.w	r3, [r1, r2, lsl #2]
    13cc:	b.w	7ac <loop+0x318>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    13d0:	ldr	r6, [pc, #396]	; (1560 <loop+0x10cc>)
    13d2:	mul.w	r3, r3, r0
    13d6:	smull	r7, r6, r6, r3
    13da:	add	r6, r3
    13dc:	asrs	r3, r3, #31
    13de:	rsb	r3, r3, r6, asr #9
    13e2:	add	r2, r3
    13e4:	b.n	e80 <loop+0x9ec>
    13e6:	ldr	r6, [pc, #376]	; (1560 <loop+0x10cc>)
    13e8:	mul.w	r3, r3, r0
    13ec:	smull	r7, r6, r6, r3
    13f0:	add	r6, r3
    13f2:	asrs	r3, r3, #31
    13f4:	rsb	r3, r3, r6, asr #9
    13f8:	add	r2, r3
    13fa:	b.n	ee4 <loop+0xa50>
    13fc:	ldr	r6, [pc, #352]	; (1560 <loop+0x10cc>)
    13fe:	mul.w	r3, r3, r0
    1402:	smull	r7, r6, r6, r3
    1406:	add	r6, r3
    1408:	asrs	r3, r3, #31
    140a:	rsb	r3, r3, r6, asr #9
    140e:	add	r2, r3
    1410:	b.n	e4e <loop+0x9ba>
    1412:	ldr	r6, [pc, #332]	; (1560 <loop+0x10cc>)
    1414:	mul.w	r3, r3, r0
    1418:	smull	r7, r6, r6, r3
    141c:	add	r6, r3
    141e:	asrs	r3, r3, #31
    1420:	rsb	r3, r3, r6, asr #9
    1424:	add	r2, r3
    1426:	b.n	eb2 <loop+0xa1e>
    1428:	ldr	r6, [pc, #308]	; (1560 <loop+0x10cc>)
    142a:	mul.w	r3, r3, r0
    142e:	smull	r7, r6, r6, r3
    1432:	add	r6, r3
    1434:	asrs	r3, r3, #31
    1436:	rsb	r3, r3, r6, asr #9
    143a:	add	r2, r3
    143c:	b.n	e1c <loop+0x988>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    143e:	ldr	r0, [pc, #292]	; (1564 <loop+0x10d0>)
    1440:	bl	2768 <usb_midi_write_packed>
    1444:	ldr	r3, [r5, #28]
    1446:	b.n	d10 <loop+0x87c>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1448:	add.w	r6, r3, #10
    144c:	adds	r3, #14
    144e:	ldr.w	r2, [r5, r6, lsl #2]
    1452:	ldr.w	r3, [r5, r3, lsl #2]
    1456:	lsls	r2, r2, #16
    1458:	lsls	r0, r3, #24
    145a:	and.w	r3, r0, #2130706432	; 0x7f000000
    145e:	and.w	r0, r2, #8323072	; 0x7f0000
    1462:	orrs	r0, r3
    1464:	orr.w	r0, r0, #40704	; 0x9f00
    1468:	orr.w	r0, r0, #9
    146c:	bl	2768 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1470:	bl	2804 <usb_midi_flush_output>
      activeNote = notes[step];
    1474:	ldr.w	r2, [r5, r6, lsl #2]
    1478:	ldr	r3, [r5, #8]
    147a:	str	r2, [r5, #36]	; 0x24
    147c:	b.n	cd8 <loop+0x844>
    147e:	movs	r1, #5
    1480:	ldr	r0, [pc, #228]	; (1568 <loop+0x10d4>)
    1482:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1484:	strb.w	r3, [lr]
    1488:	str	r3, [sp, #0]
    148a:	bl	1ecc <usb_serial_write>
    148e:	ldr	r0, [pc, #204]	; (155c <loop+0x10c8>)
    1490:	bl	3a40 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    1494:	ldr.w	r5, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1498:	ldrb.w	r9, [r5]
    149c:	mov	r0, r9
    149e:	bl	24e8 <digitalRead>
    14a2:	clz	r1, r0
    14a6:	lsrs	r1, r1, #5
    14a8:	mov	r0, r9
    14aa:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14ae:	ldr.w	r1, [r8]
    14b2:	str	r1, [sp, #148]	; 0x94
      blinking = true;
      blinkingCounter = times;
    14b4:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14b6:	ldr	r3, [sp, #0]
	return ret;
    14b8:	ldr	r1, [sp, #148]	; 0x94
      blinkingCounter = times;
    14ba:	str	r2, [r5, #20]
    14bc:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14be:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    14c0:	str	r1, [r5, #8]
    14c2:	b.w	5f0 <loop+0x15c>
    14c6:	movs	r1, #5
    14c8:	ldr	r0, [pc, #156]	; (1568 <loop+0x10d4>)
    14ca:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    14cc:	strb.w	r3, [lr]
    14d0:	str	r3, [sp, #0]
    14d2:	bl	1ecc <usb_serial_write>
    14d6:	ldr	r0, [pc, #132]	; (155c <loop+0x10c8>)
    14d8:	bl	3a40 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    14dc:	ldr.w	r5, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14e0:	ldrb.w	r9, [r5]
    14e4:	mov	r0, r9
    14e6:	bl	24e8 <digitalRead>
    14ea:	clz	r1, r0
    14ee:	lsrs	r1, r1, #5
    14f0:	mov	r0, r9
    14f2:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14f6:	ldr.w	r1, [r8]
    14fa:	str	r1, [sp, #108]	; 0x6c
      blinking = true;
      blinkingCounter = times;
    14fc:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14fe:	ldr	r3, [sp, #0]
	return ret;
    1500:	ldr	r1, [sp, #108]	; 0x6c
      blinkingCounter = times;
    1502:	str	r2, [r5, #20]
    1504:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1506:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1508:	str	r1, [r5, #8]
    150a:	b.w	56c <loop+0xd8>
    150e:	movs	r1, #5
    1510:	ldr	r0, [pc, #84]	; (1568 <loop+0x10d4>)
    1512:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1514:	strb.w	r3, [lr]
    1518:	str	r3, [sp, #0]
    151a:	bl	1ecc <usb_serial_write>
    151e:	ldr	r0, [pc, #60]	; (155c <loop+0x10c8>)
    1520:	bl	3a40 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    1524:	ldr.w	r6, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1528:	ldrb.w	r9, [r6]
    152c:	mov	r0, r9
    152e:	bl	24e8 <digitalRead>
    1532:	clz	r1, r0
    1536:	lsrs	r1, r1, #5
    1538:	mov	r0, r9
    153a:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    153e:	ldr.w	r1, [r8]
    1542:	str	r1, [sp, #168]	; 0xa8
      blinking = true;
      blinkingCounter = times;
    1544:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1546:	ldr	r3, [sp, #0]
	return ret;
    1548:	ldr	r1, [sp, #168]	; 0xa8
      blinkingCounter = times;
    154a:	str	r2, [r6, #20]
    154c:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    154e:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1550:	str	r1, [r6, #8]
    1552:	b.w	632 <loop+0x19e>
    1556:	nop
    1558:	.word	0x00004e5c
    155c:	.word	0x1fff0c60
    1560:	.word	0x80200803
    1564:	.word	0x7f7bbf0b
    1568:	.word	0x00004e34
    156c:	.word	0x1fff165c
    1570:	movs	r1, #5
    1572:	ldr	r0, [pc, #776]	; (187c <loop+0x13e8>)
    1574:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1576:	strb.w	r3, [lr]
    157a:	str	r3, [sp, #0]
    157c:	bl	1ecc <usb_serial_write>
    1580:	ldr	r0, [pc, #764]	; (1880 <loop+0x13ec>)
    1582:	bl	3a40 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    1586:	ldr.w	r6, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    158a:	ldrb.w	r9, [r6]
    158e:	mov	r0, r9
    1590:	bl	24e8 <digitalRead>
    1594:	clz	r1, r0
    1598:	lsrs	r1, r1, #5
    159a:	mov	r0, r9
    159c:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15a0:	ldr.w	r1, [r8]
    15a4:	str	r1, [sp, #88]	; 0x58
      blinking = true;
      blinkingCounter = times;
    15a6:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15a8:	ldr	r3, [sp, #0]
	return ret;
    15aa:	ldr	r1, [sp, #88]	; 0x58
      blinkingCounter = times;
    15ac:	str	r2, [r6, #20]
    15ae:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15b0:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    15b2:	str	r1, [r6, #8]
    15b4:	b.w	52a <loop+0x96>
    15b8:	movs	r1, #5
    15ba:	ldr	r0, [pc, #704]	; (187c <loop+0x13e8>)
    15bc:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    15be:	strb.w	r3, [lr]
    15c2:	str	r3, [sp, #0]
    15c4:	bl	1ecc <usb_serial_write>
    15c8:	ldr	r0, [pc, #692]	; (1880 <loop+0x13ec>)
    15ca:	bl	3a40 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    15ce:	ldr.w	r5, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15d2:	ldrb.w	r9, [r5]
    15d6:	mov	r0, r9
    15d8:	bl	24e8 <digitalRead>
    15dc:	clz	r1, r0
    15e0:	lsrs	r1, r1, #5
    15e2:	mov	r0, r9
    15e4:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15e8:	ldr.w	r1, [r8]
    15ec:	str	r1, [sp, #68]	; 0x44
      blinking = true;
      blinkingCounter = times;
    15ee:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15f0:	ldr	r3, [sp, #0]
	return ret;
    15f2:	ldr	r1, [sp, #68]	; 0x44
      blinkingCounter = times;
    15f4:	str	r2, [r5, #20]
    15f6:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15f8:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    15fa:	str	r1, [r5, #8]
    15fc:	b.w	4e8 <loop+0x54>
    1600:	movs	r1, #5
    1602:	ldr	r0, [pc, #632]	; (187c <loop+0x13e8>)
    1604:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1606:	strb.w	r3, [lr]
    160a:	str	r3, [sp, #0]
    160c:	bl	1ecc <usb_serial_write>
    1610:	ldr	r0, [pc, #620]	; (1880 <loop+0x13ec>)
    1612:	bl	3a40 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    1616:	ldr.w	r6, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    161a:	ldrb.w	r9, [r6]
    161e:	mov	r0, r9
    1620:	bl	24e8 <digitalRead>
    1624:	clz	r1, r0
    1628:	lsrs	r1, r1, #5
    162a:	mov	r0, r9
    162c:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1630:	ldr.w	r1, [r8]
    1634:	str	r1, [sp, #128]	; 0x80
      blinking = true;
      blinkingCounter = times;
    1636:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1638:	ldr	r3, [sp, #0]
	return ret;
    163a:	ldr	r1, [sp, #128]	; 0x80
      blinkingCounter = times;
    163c:	str	r2, [r6, #20]
    163e:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1640:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1642:	str	r1, [r6, #8]
    1644:	b.w	5ae <loop+0x11a>
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
    1648:	ldr	r3, [r6, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    164a:	ldr	r4, [pc, #568]	; (1884 <loop+0x13f0>)
    164c:	adds	r3, #22
    164e:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1652:	ldrb.w	r8, [r7]
    1656:	mov	r0, r8
    1658:	bl	24e8 <digitalRead>
    165c:	clz	r1, r0
    1660:	lsrs	r1, r1, #5
    1662:	mov	r0, r8
    1664:	bl	24dc <digitalWrite>
    1668:	ldr	r2, [r4, #0]

        if (m_steps[m_currentStep].m_state) {
    166a:	ldr	r3, [r6, #8]
    166c:	str	r2, [sp, #8]
	return ret;
    166e:	ldr	r1, [sp, #8]
    1670:	ldrb	r2, [r6, r3]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1672:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1674:	movs	r0, #1
      blinkingCounter = times;
    1676:	movs	r1, #0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1678:	strb	r0, [r7, #16]
      blinkingCounter = times;
    167a:	str	r1, [r7, #20]
    167c:	cmp	r2, #0
    167e:	bne.w	1bb4 <loop+0x1720>
          playStep(m_currentStep);
        }

        m_currentStep++;
    1682:	adds	r3, #1

        if (m_currentStep > 3) {
    1684:	cmp	r3, #3
          m_currentStep = 0;
    1686:	it	gt
    1688:	movgt	r3, #0
    168a:	str	r3, [r5, #8]
    168c:	b.w	d24 <loop+0x890>
    1690:	movs	r1, #6
    1692:	ldr	r0, [pc, #500]	; (1888 <loop+0x13f4>)
    1694:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1696:	strb.w	r6, [lr]
    169a:	bl	1ecc <usb_serial_write>
    169e:	ldr	r0, [pc, #480]	; (1880 <loop+0x13ec>)
    16a0:	bl	3a40 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    16a4:	ldr.w	r6, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16a8:	ldrb.w	r9, [r6]
    16ac:	mov	r0, r9
    16ae:	bl	24e8 <digitalRead>
    16b2:	clz	r1, r0
    16b6:	lsrs	r1, r1, #5
    16b8:	mov	r0, r9
    16ba:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16be:	ldr.w	r2, [r8]
    16c2:	str	r2, [sp, #140]	; 0x8c
      blinking = true;
    16c4:	ldr	r3, [sp, #0]
	return ret;
    16c6:	ldr	r1, [sp, #140]	; 0x8c
    16c8:	ldr	r2, [r7, #12]
    16ca:	strb	r3, [r6, #16]
      blinkingCounter = times;
    16cc:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    16d0:	str	r1, [r6, #8]
    16d2:	b.w	5ae <loop+0x11a>
    16d6:	movs	r1, #6
    16d8:	ldr	r0, [pc, #428]	; (1888 <loop+0x13f4>)
    16da:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    16dc:	strb.w	r5, [lr]
    16e0:	bl	1ecc <usb_serial_write>
    16e4:	ldr	r0, [pc, #408]	; (1880 <loop+0x13ec>)
    16e6:	bl	3a40 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    16ea:	ldr.w	r5, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16ee:	ldrb.w	r9, [r5]
    16f2:	mov	r0, r9
    16f4:	bl	24e8 <digitalRead>
    16f8:	clz	r1, r0
    16fc:	lsrs	r1, r1, #5
    16fe:	mov	r0, r9
    1700:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1704:	ldr.w	r2, [r8]
    1708:	str	r2, [sp, #160]	; 0xa0
      blinking = true;
    170a:	ldr	r3, [sp, #0]
	return ret;
    170c:	ldr	r1, [sp, #160]	; 0xa0
    170e:	ldr	r2, [r7, #12]
    1710:	strb	r3, [r5, #16]
      blinkingCounter = times;
    1712:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    1716:	str	r1, [r5, #8]
    1718:	b.w	5f0 <loop+0x15c>
    171c:	movs	r1, #6
    171e:	ldr	r0, [pc, #360]	; (1888 <loop+0x13f4>)
    1720:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1722:	strb.w	r5, [lr]
    1726:	bl	1ecc <usb_serial_write>
    172a:	ldr	r0, [pc, #340]	; (1880 <loop+0x13ec>)
    172c:	bl	3a40 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    1730:	ldr.w	r5, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1734:	ldrb.w	r9, [r5]
    1738:	mov	r0, r9
    173a:	bl	24e8 <digitalRead>
    173e:	clz	r1, r0
    1742:	lsrs	r1, r1, #5
    1744:	mov	r0, r9
    1746:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    174a:	ldr.w	r2, [r8]
    174e:	str	r2, [sp, #80]	; 0x50
      blinking = true;
    1750:	ldr	r3, [sp, #0]
	return ret;
    1752:	ldr	r1, [sp, #80]	; 0x50
    1754:	ldr	r2, [r7, #12]
    1756:	strb	r3, [r5, #16]
      blinkingCounter = times;
    1758:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    175c:	str	r1, [r5, #8]
    175e:	b.w	4e8 <loop+0x54>
    1762:	movs	r1, #6
    1764:	ldr	r0, [pc, #288]	; (1888 <loop+0x13f4>)
    1766:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1768:	strb.w	r5, [lr]
    176c:	bl	1ecc <usb_serial_write>
    1770:	ldr	r0, [pc, #268]	; (1880 <loop+0x13ec>)
    1772:	bl	3a40 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    1776:	ldr.w	r5, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    177a:	ldrb.w	r9, [r5]
    177e:	mov	r0, r9
    1780:	bl	24e8 <digitalRead>
    1784:	clz	r1, r0
    1788:	lsrs	r1, r1, #5
    178a:	mov	r0, r9
    178c:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1790:	ldr.w	r2, [r8]
    1794:	str	r2, [sp, #120]	; 0x78
      blinking = true;
    1796:	ldr	r3, [sp, #0]
	return ret;
    1798:	ldr	r1, [sp, #120]	; 0x78
    179a:	ldr	r2, [r7, #12]
    179c:	strb	r3, [r5, #16]
      blinkingCounter = times;
    179e:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    17a2:	str	r1, [r5, #8]
    17a4:	b.w	56c <loop+0xd8>
    17a8:	movs	r1, #6
    17aa:	ldr	r0, [pc, #220]	; (1888 <loop+0x13f4>)
    17ac:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    17ae:	strb.w	r6, [lr]
    17b2:	bl	1ecc <usb_serial_write>
    17b6:	ldr	r0, [pc, #200]	; (1880 <loop+0x13ec>)
    17b8:	bl	3a40 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    17bc:	ldr.w	r6, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17c0:	ldrb.w	r9, [r6]
    17c4:	mov	r0, r9
    17c6:	bl	24e8 <digitalRead>
    17ca:	clz	r1, r0
    17ce:	lsrs	r1, r1, #5
    17d0:	mov	r0, r9
    17d2:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17d6:	ldr.w	r2, [r8]
    17da:	str	r2, [sp, #100]	; 0x64
      blinking = true;
    17dc:	ldr	r3, [sp, #0]
	return ret;
    17de:	ldr	r1, [sp, #100]	; 0x64
    17e0:	ldr	r2, [r7, #12]
    17e2:	strb	r3, [r6, #16]
      blinkingCounter = times;
    17e4:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    17e8:	str	r1, [r6, #8]
    17ea:	b.w	52a <loop+0x96>
    17ee:	movs	r1, #6
    17f0:	ldr	r0, [pc, #148]	; (1888 <loop+0x13f4>)
    17f2:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    17f4:	strb.w	r6, [lr]
    17f8:	bl	1ecc <usb_serial_write>
    17fc:	ldr	r0, [pc, #128]	; (1880 <loop+0x13ec>)
    17fe:	bl	3a40 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    1802:	ldr.w	r6, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1806:	ldrb.w	r9, [r6]
    180a:	mov	r0, r9
    180c:	bl	24e8 <digitalRead>
    1810:	clz	r1, r0
    1814:	lsrs	r1, r1, #5
    1816:	mov	r0, r9
    1818:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    181c:	ldr.w	r2, [r8]
    1820:	str	r2, [sp, #180]	; 0xb4
      blinking = true;
    1822:	ldr	r3, [sp, #0]
	return ret;
    1824:	ldr	r1, [sp, #180]	; 0xb4
    1826:	ldr	r2, [r7, #12]
    1828:	strb	r3, [r6, #16]
      blinkingCounter = times;
    182a:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    182e:	str	r1, [r6, #8]
    1830:	b.w	632 <loop+0x19e>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1834:	movs	r3, #2
    1836:	movs	r1, #8
    1838:	ldr	r0, [pc, #80]	; (188c <loop+0x13f8>)
    183a:	str	r2, [sp, #0]
    183c:	strb.w	r3, [lr]
    1840:	bl	1ecc <usb_serial_write>
    1844:	ldr	r0, [pc, #56]	; (1880 <loop+0x13ec>)
    1846:	bl	3a40 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    184a:	ldr.w	r5, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    184e:	ldrb.w	r9, [r5]
    1852:	mov	r0, r9
    1854:	bl	24e8 <digitalRead>
    1858:	clz	r1, r0
    185c:	lsrs	r1, r1, #5
    185e:	mov	r0, r9
    1860:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1864:	ldr.w	r3, [r8]
    1868:	str	r3, [sp, #112]	; 0x70
      blinking = true;
      blinkingCounter = times;
    186a:	ldr	r2, [sp, #0]
	return ret;
    186c:	ldr	r3, [sp, #112]	; 0x70
    186e:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1870:	strb.w	sl, [r5, #16]
    1874:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    1876:	str	r3, [r5, #8]
    1878:	b.w	56c <loop+0xd8>
    187c:	.word	0x00004e34
    1880:	.word	0x1fff0c60
    1884:	.word	0x1fff1844
    1888:	.word	0x00004e54
    188c:	.word	0x00004e3c
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1890:	movs	r3, #2
    1892:	movs	r1, #8
    1894:	ldr	r0, [pc, #784]	; (1ba8 <loop+0x1714>)
    1896:	str	r2, [sp, #0]
    1898:	strb.w	r3, [lr]
    189c:	bl	1ecc <usb_serial_write>
    18a0:	ldr	r0, [pc, #776]	; (1bac <loop+0x1718>)
    18a2:	bl	3a40 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    18a6:	ldr.w	r6, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18aa:	ldrb.w	r9, [r6]
    18ae:	mov	r0, r9
    18b0:	bl	24e8 <digitalRead>
    18b4:	clz	r1, r0
    18b8:	lsrs	r1, r1, #5
    18ba:	mov	r0, r9
    18bc:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18c0:	ldr.w	r3, [r8]
    18c4:	str	r3, [sp, #172]	; 0xac
      blinking = true;
      blinkingCounter = times;
    18c6:	ldr	r2, [sp, #0]
	return ret;
    18c8:	ldr	r3, [sp, #172]	; 0xac
    18ca:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18cc:	strb.w	sl, [r6, #16]
    18d0:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    18d2:	str	r3, [r6, #8]
    18d4:	b.w	632 <loop+0x19e>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    18d8:	movs	r3, #2
    18da:	movs	r1, #8
    18dc:	ldr	r0, [pc, #712]	; (1ba8 <loop+0x1714>)
    18de:	str	r2, [sp, #0]
    18e0:	strb.w	r3, [lr]
    18e4:	bl	1ecc <usb_serial_write>
    18e8:	ldr	r0, [pc, #704]	; (1bac <loop+0x1718>)
    18ea:	bl	3a40 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    18ee:	ldr.w	r6, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18f2:	ldrb.w	r9, [r6]
    18f6:	mov	r0, r9
    18f8:	bl	24e8 <digitalRead>
    18fc:	clz	r1, r0
    1900:	lsrs	r1, r1, #5
    1902:	mov	r0, r9
    1904:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1908:	ldr.w	r3, [r8]
    190c:	str	r3, [sp, #92]	; 0x5c
      blinking = true;
      blinkingCounter = times;
    190e:	ldr	r2, [sp, #0]
	return ret;
    1910:	ldr	r3, [sp, #92]	; 0x5c
    1912:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1914:	strb.w	sl, [r6, #16]
    1918:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    191a:	str	r3, [r6, #8]
    191c:	b.w	52a <loop+0x96>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1920:	movs	r3, #2
    1922:	movs	r1, #8
    1924:	ldr	r0, [pc, #640]	; (1ba8 <loop+0x1714>)
    1926:	str	r2, [sp, #0]
    1928:	strb.w	r3, [lr]
    192c:	bl	1ecc <usb_serial_write>
    1930:	ldr	r0, [pc, #632]	; (1bac <loop+0x1718>)
    1932:	bl	3a40 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    1936:	ldr.w	r5, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    193a:	ldrb.w	r9, [r5]
    193e:	mov	r0, r9
    1940:	bl	24e8 <digitalRead>
    1944:	clz	r1, r0
    1948:	lsrs	r1, r1, #5
    194a:	mov	r0, r9
    194c:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1950:	ldr.w	r3, [r8]
    1954:	str	r3, [sp, #72]	; 0x48
      blinking = true;
      blinkingCounter = times;
    1956:	ldr	r2, [sp, #0]
	return ret;
    1958:	ldr	r3, [sp, #72]	; 0x48
    195a:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    195c:	strb.w	sl, [r5, #16]
    1960:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    1962:	str	r3, [r5, #8]
    1964:	b.w	4e8 <loop+0x54>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1968:	movs	r3, #2
    196a:	movs	r1, #8
    196c:	ldr	r0, [pc, #568]	; (1ba8 <loop+0x1714>)
    196e:	str	r2, [sp, #0]
    1970:	strb.w	r3, [lr]
    1974:	bl	1ecc <usb_serial_write>
    1978:	ldr	r0, [pc, #560]	; (1bac <loop+0x1718>)
    197a:	bl	3a40 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    197e:	ldr.w	r6, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1982:	ldrb.w	r9, [r6]
    1986:	mov	r0, r9
    1988:	bl	24e8 <digitalRead>
    198c:	clz	r1, r0
    1990:	lsrs	r1, r1, #5
    1992:	mov	r0, r9
    1994:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1998:	ldr.w	r3, [r8]
    199c:	str	r3, [sp, #132]	; 0x84
      blinking = true;
      blinkingCounter = times;
    199e:	ldr	r2, [sp, #0]
	return ret;
    19a0:	ldr	r3, [sp, #132]	; 0x84
    19a2:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    19a4:	strb.w	sl, [r6, #16]
    19a8:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    19aa:	str	r3, [r6, #8]
    19ac:	b.w	5ae <loop+0x11a>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    19b0:	movs	r3, #2
    19b2:	movs	r1, #8
    19b4:	ldr	r0, [pc, #496]	; (1ba8 <loop+0x1714>)
    19b6:	str	r2, [sp, #0]
    19b8:	strb.w	r3, [lr]
    19bc:	bl	1ecc <usb_serial_write>
    19c0:	ldr	r0, [pc, #488]	; (1bac <loop+0x1718>)
    19c2:	bl	3a40 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    19c6:	ldr.w	r5, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    19ca:	ldrb.w	r9, [r5]
    19ce:	mov	r0, r9
    19d0:	bl	24e8 <digitalRead>
    19d4:	clz	r1, r0
    19d8:	lsrs	r1, r1, #5
    19da:	mov	r0, r9
    19dc:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19e0:	ldr.w	r3, [r8]
    19e4:	str	r3, [sp, #152]	; 0x98
      blinking = true;
      blinkingCounter = times;
    19e6:	ldr	r2, [sp, #0]
	return ret;
    19e8:	ldr	r3, [sp, #152]	; 0x98
    19ea:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    19ec:	strb.w	sl, [r5, #16]
    19f0:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    19f2:	str	r3, [r5, #8]
    19f4:	b.w	5f0 <loop+0x15c>
    19f8:	movs	r1, #10
    19fa:	ldr	r0, [pc, #436]	; (1bb0 <loop+0x171c>)
    19fc:	str	r3, [sp, #4]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    19fe:	strb.w	r2, [lr]
    1a02:	str	r2, [sp, #0]
    1a04:	bl	1ecc <usb_serial_write>
    1a08:	ldr	r0, [pc, #416]	; (1bac <loop+0x1718>)
    1a0a:	bl	3a40 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1a0e:	ldr.w	r6, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1a12:	ldrb.w	r9, [r6]
    1a16:	mov	r0, r9
    1a18:	bl	24e8 <digitalRead>
    1a1c:	clz	r1, r0
    1a20:	lsrs	r1, r1, #5
    1a22:	mov	r0, r9
    1a24:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a28:	ldr.w	r1, [r8]
    1a2c:	str	r1, [sp, #176]	; 0xb0
      blinking = true;
      blinkingCounter = times;
    1a2e:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a30:	ldr	r3, [sp, #4]
	return ret;
    1a32:	ldr	r1, [sp, #176]	; 0xb0
      blinkingCounter = times;
    1a34:	str	r2, [r6, #20]
    1a36:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a38:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1a3a:	str	r1, [r6, #8]
    1a3c:	b.w	632 <loop+0x19e>
    1a40:	movs	r1, #10
    1a42:	ldr	r0, [pc, #364]	; (1bb0 <loop+0x171c>)
    1a44:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1a46:	strb.w	r2, [lr]
    1a4a:	str	r2, [sp, #0]
    1a4c:	bl	1ecc <usb_serial_write>
    1a50:	ldr	r0, [pc, #344]	; (1bac <loop+0x1718>)
    1a52:	bl	3a40 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1a56:	ldr.w	r6, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1a5a:	ldrb.w	r9, [r6]
    1a5e:	mov	r0, r9
    1a60:	bl	24e8 <digitalRead>
    1a64:	clz	r1, r0
    1a68:	lsrs	r1, r1, #5
    1a6a:	mov	r0, r9
    1a6c:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a70:	ldr.w	r1, [r8]
    1a74:	str	r1, [sp, #136]	; 0x88
      blinking = true;
      blinkingCounter = times;
    1a76:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a78:	ldr	r3, [sp, #4]
	return ret;
    1a7a:	ldr	r1, [sp, #136]	; 0x88
      blinkingCounter = times;
    1a7c:	str	r2, [r6, #20]
    1a7e:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a80:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1a82:	str	r1, [r6, #8]
    1a84:	b.w	5ae <loop+0x11a>
    1a88:	movs	r1, #10
    1a8a:	ldr	r0, [pc, #292]	; (1bb0 <loop+0x171c>)
    1a8c:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1a8e:	strb.w	r2, [lr]
    1a92:	str	r2, [sp, #0]
    1a94:	bl	1ecc <usb_serial_write>
    1a98:	ldr	r0, [pc, #272]	; (1bac <loop+0x1718>)
    1a9a:	bl	3a40 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1a9e:	ldr.w	r5, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1aa2:	ldrb.w	r9, [r5]
    1aa6:	mov	r0, r9
    1aa8:	bl	24e8 <digitalRead>
    1aac:	clz	r1, r0
    1ab0:	lsrs	r1, r1, #5
    1ab2:	mov	r0, r9
    1ab4:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ab8:	ldr.w	r1, [r8]
    1abc:	str	r1, [sp, #116]	; 0x74
      blinking = true;
      blinkingCounter = times;
    1abe:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ac0:	ldr	r3, [sp, #4]
	return ret;
    1ac2:	ldr	r1, [sp, #116]	; 0x74
      blinkingCounter = times;
    1ac4:	str	r2, [r5, #20]
    1ac6:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ac8:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1aca:	str	r1, [r5, #8]
    1acc:	b.w	56c <loop+0xd8>
    1ad0:	movs	r1, #10
    1ad2:	ldr	r0, [pc, #220]	; (1bb0 <loop+0x171c>)
    1ad4:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1ad6:	strb.w	r2, [lr]
    1ada:	str	r2, [sp, #0]
    1adc:	bl	1ecc <usb_serial_write>
    1ae0:	ldr	r0, [pc, #200]	; (1bac <loop+0x1718>)
    1ae2:	bl	3a40 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1ae6:	ldr.w	r6, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1aea:	ldrb.w	r9, [r6]
    1aee:	mov	r0, r9
    1af0:	bl	24e8 <digitalRead>
    1af4:	clz	r1, r0
    1af8:	lsrs	r1, r1, #5
    1afa:	mov	r0, r9
    1afc:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b00:	ldr.w	r1, [r8]
    1b04:	str	r1, [sp, #96]	; 0x60
      blinking = true;
      blinkingCounter = times;
    1b06:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b08:	ldr	r3, [sp, #4]
	return ret;
    1b0a:	ldr	r1, [sp, #96]	; 0x60
      blinkingCounter = times;
    1b0c:	str	r2, [r6, #20]
    1b0e:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b10:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1b12:	str	r1, [r6, #8]
    1b14:	b.w	52a <loop+0x96>
    1b18:	movs	r1, #10
    1b1a:	ldr	r0, [pc, #148]	; (1bb0 <loop+0x171c>)
    1b1c:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1b1e:	strb.w	r2, [lr]
    1b22:	str	r2, [sp, #0]
    1b24:	bl	1ecc <usb_serial_write>
    1b28:	ldr	r0, [pc, #128]	; (1bac <loop+0x1718>)
    1b2a:	bl	3a40 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1b2e:	ldr.w	r5, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1b32:	ldrb.w	r9, [r5]
    1b36:	mov	r0, r9
    1b38:	bl	24e8 <digitalRead>
    1b3c:	clz	r1, r0
    1b40:	lsrs	r1, r1, #5
    1b42:	mov	r0, r9
    1b44:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b48:	ldr.w	r1, [r8]
    1b4c:	str	r1, [sp, #156]	; 0x9c
      blinking = true;
      blinkingCounter = times;
    1b4e:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b50:	ldr	r3, [sp, #4]
	return ret;
    1b52:	ldr	r1, [sp, #156]	; 0x9c
      blinkingCounter = times;
    1b54:	str	r2, [r5, #20]
    1b56:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b58:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1b5a:	str	r1, [r5, #8]
    1b5c:	b.w	5f0 <loop+0x15c>
    1b60:	movs	r1, #10
    1b62:	ldr	r0, [pc, #76]	; (1bb0 <loop+0x171c>)
    1b64:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1b66:	strb.w	r2, [lr]
    1b6a:	str	r2, [sp, #0]
    1b6c:	bl	1ecc <usb_serial_write>
    1b70:	ldr	r0, [pc, #56]	; (1bac <loop+0x1718>)
    1b72:	bl	3a40 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1b76:	ldr.w	r5, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1b7a:	ldrb.w	r9, [r5]
    1b7e:	mov	r0, r9
    1b80:	bl	24e8 <digitalRead>
    1b84:	clz	r1, r0
    1b88:	lsrs	r1, r1, #5
    1b8a:	mov	r0, r9
    1b8c:	bl	24dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b90:	ldr.w	r1, [r8]
    1b94:	str	r1, [sp, #76]	; 0x4c
      blinking = true;
      blinkingCounter = times;
    1b96:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b98:	ldr	r3, [sp, #4]
	return ret;
    1b9a:	ldr	r1, [sp, #76]	; 0x4c
      blinkingCounter = times;
    1b9c:	str	r2, [r5, #20]
    1b9e:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ba0:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1ba2:	str	r1, [r5, #8]
    1ba4:	b.w	4e8 <loop+0x54>
    1ba8:	.word	0x00004e3c
    1bac:	.word	0x1fff0c60
    1bb0:	.word	0x00004e48
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1bb4:	add.w	r7, r3, #10
    1bb8:	adds	r3, #14
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1bba:	ldr.w	r2, [r6, r7, lsl #2]
    1bbe:	ldr.w	r3, [r6, r3, lsl #2]
    1bc2:	lsls	r0, r2, #16
    1bc4:	lsls	r3, r3, #24
    1bc6:	and.w	r3, r3, #2130706432	; 0x7f000000
    1bca:	and.w	r0, r0, #8323072	; 0x7f0000
    1bce:	orrs	r0, r3
    1bd0:	orr.w	r0, r0, #40704	; 0x9f00
    1bd4:	orr.w	r0, r0, #9
    1bd8:	bl	2768 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1bdc:	bl	2804 <usb_midi_flush_output>
      activeNote = notes[step];
    1be0:	ldr.w	r2, [r6, r7, lsl #2]
    1be4:	ldr	r3, [r6, #8]
    1be6:	str	r2, [r6, #36]	; 0x24
    1be8:	b.n	1682 <loop+0x11ee>
    1bea:	nop

00001bec <_GLOBAL__sub_I_currentMode>:
    1bec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;
const int playPin = 12;

Led led1(3, LOW);
    1bf0:	movs	r2, #0
    1bf2:	movs	r1, #3
    1bf4:	ldr	r0, [pc, #436]	; (1dac <_GLOBAL__sub_I_currentMode+0x1c0>)
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1bf6:	ldr	r5, [pc, #440]	; (1db0 <_GLOBAL__sub_I_currentMode+0x1c4>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1bf8:	ldr	r4, [pc, #440]	; (1db4 <_GLOBAL__sub_I_currentMode+0x1c8>)
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1bfa:	ldr	r6, [pc, #444]	; (1db8 <_GLOBAL__sub_I_currentMode+0x1cc>)
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1bfc:	ldr.w	r9, [pc, #508]	; 1dfc <_GLOBAL__sub_I_currentMode+0x210>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1c00:	ldr	r7, [pc, #440]	; (1dbc <_GLOBAL__sub_I_currentMode+0x1d0>)
    1c02:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    1c06:	movs	r2, #0
    1c08:	movs	r1, #5
    1c0a:	ldr	r0, [pc, #436]	; (1dc0 <_GLOBAL__sub_I_currentMode+0x1d4>)
    1c0c:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    1c10:	movs	r2, #0
    1c12:	movs	r1, #7
    1c14:	ldr	r0, [pc, #428]	; (1dc4 <_GLOBAL__sub_I_currentMode+0x1d8>)
    1c16:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    1c1a:	movs	r2, #0
    1c1c:	movs	r1, #9
    1c1e:	ldr	r0, [pc, #424]	; (1dc8 <_GLOBAL__sub_I_currentMode+0x1dc>)
    1c20:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    1c24:	movs	r2, #0
    1c26:	movs	r1, #11
    1c28:	ldr	r0, [pc, #416]	; (1dcc <_GLOBAL__sub_I_currentMode+0x1e0>)
    1c2a:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    1c2e:	movs	r2, #0
    1c30:	movs	r1, #24
    1c32:	ldr	r0, [pc, #412]	; (1dd0 <_GLOBAL__sub_I_currentMode+0x1e4>)
    1c34:	bl	46c <Led::Led(int, int)>
    1c38:	ldmia.w	r5, {r0, r1, r2, r3}
    1c3c:	add.w	lr, r5, #16
    1c40:	add.w	ip, r4, #40	; 0x28
    1c44:	stmia.w	ip, {r0, r1, r2, r3}
    1c48:	ldmia.w	lr, {r0, r1, r2, r3}
    1c4c:	adds	r5, #32
    1c4e:	add.w	lr, r4, #56	; 0x38
    1c52:	stmia.w	lr, {r0, r1, r2, r3}
    1c56:	ldmia.w	r5, {r0, r1, r2, r3}
    1c5a:	movs	r5, #120	; 0x78
    1c5c:	add.w	lr, r4, #72	; 0x48
    1c60:	mov.w	ip, #24
    1c64:	mov.w	r8, #0
    1c68:	str	r5, [r4, #12]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1c6a:	movs	r5, #0
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1c6c:	str.w	ip, [r4, #32]
    1c70:	strd	r8, r9, [r4, #16]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1c74:	strb	r5, [r4, #0]
    1c76:	strb	r5, [r4, #1]
    1c78:	strb	r5, [r4, #2]
    1c7a:	strb	r5, [r4, #3]
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1c7c:	str	r5, [r4, #24]
    1c7e:	str	r5, [r4, #28]
    1c80:	str	r5, [r4, #36]	; 0x24
    1c82:	stmia.w	lr, {r0, r1, r2, r3}
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    1c86:	adds	r0, r6, #4
    1c88:	ldmia	r0, {r0, r1, r2}
      m_id = id;
      m_pin = pin;
    1c8a:	mov.w	r8, #2
    1c8e:	str	r2, [r4, #100]	; 0x64
      m_leds[4] = leds[4];
    1c90:	ldr	r2, [r6, #16]
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1c92:	ldr	r3, [r6, #0]
      m_leds[1] = leds[1];
    1c94:	str	r0, [r4, #92]	; 0x5c
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1c96:	mov.w	r9, #1
      m_leds[2] = leds[2];
    1c9a:	str	r1, [r4, #96]	; 0x60
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1c9c:	mov	r0, r8
    1c9e:	mov	r1, r5
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1ca0:	str	r2, [r4, #104]	; 0x68
      m_leds[5] = leds[5];
    1ca2:	ldr	r2, [r6, #20]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ca4:	str	r3, [r7, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1ca6:	strb	r5, [r7, #16]
      m_playButton = playButton;
    1ca8:	strb	r5, [r7, #17]
      m_state = state;
    1caa:	strb	r5, [r4, #4]
      m_currentStep = 0;
    1cac:	str	r5, [r4, #8]
      m_mode = GLOBAL;
    1cae:	strb.w	r5, [r4, #112]	; 0x70
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1cb2:	str	r2, [r4, #108]	; 0x6c
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1cb4:	str	r3, [r4, #88]	; 0x58
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cb6:	str	r4, [r7, #28]
      m_id = id;
    1cb8:	str.w	r9, [r7]
      m_pin = pin;
    1cbc:	str.w	r8, [r7, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cc0:	bl	2504 <pinMode>
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1cc4:	movs	r7, #4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cc6:	ldr	r3, [pc, #268]	; (1dd4 <_GLOBAL__sub_I_currentMode+0x1e8>)
    1cc8:	ldr	r2, [r6, #4]
    1cca:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ccc:	mov	r1, r5
    1cce:	mov	r0, r7
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1cd0:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1cd2:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1cd4:	mov.w	fp, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cd8:	str	r4, [r3, #28]
      m_id = id;
    1cda:	str.w	r8, [r3]
      m_pin = pin;
    1cde:	str	r7, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1ce0:	bl	2504 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ce4:	ldr	r3, [pc, #240]	; (1dd8 <_GLOBAL__sub_I_currentMode+0x1ec>)
    1ce6:	ldr	r2, [r6, #8]
    1ce8:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cea:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1cec:	mov.w	sl, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cf0:	mov	r0, fp
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1cf2:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1cf4:	strb	r5, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cf6:	str	r4, [r3, #28]
      m_id = id;
    1cf8:	str.w	sl, [r3]
      m_pin = pin;
    1cfc:	str.w	fp, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d00:	bl	2504 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d04:	ldr	r3, [pc, #212]	; (1ddc <_GLOBAL__sub_I_currentMode+0x1f0>)
    1d06:	ldr	r2, [r6, #12]
    1d08:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1d0a:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d0c:	mov	r0, r2
    1d0e:	mov	r1, r5
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1d10:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1d12:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1d14:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d16:	str	r4, [r3, #28]
      m_id = id;
    1d18:	str	r7, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d1a:	bl	2504 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d1e:	ldr	r3, [pc, #192]	; (1de0 <_GLOBAL__sub_I_currentMode+0x1f4>)
    1d20:	ldr	r2, [r6, #16]
    1d22:	str	r2, [r3, #24]
      m_id = id;
    1d24:	movs	r1, #5
      m_pin = pin;
    1d26:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1d28:	str	r1, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d2a:	mov	r0, r2
    1d2c:	mov	r1, r5
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1d2e:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1d30:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d32:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1d34:	strb.w	r9, [r3, #16]
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d38:	bl	2504 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d3c:	ldr	r3, [pc, #164]	; (1de4 <_GLOBAL__sub_I_currentMode+0x1f8>)
    1d3e:	ldr	r2, [r6, #20]
    1d40:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1d42:	movs	r6, #12
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d44:	mov	r0, r6
    1d46:	mov	r1, r5
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1d48:	str	r6, [r3, #32]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1d4a:	ldr	r6, [pc, #156]	; (1de8 <_GLOBAL__sub_I_currentMode+0x1fc>)
      m_shiftButton = shiftButton;
    1d4c:	strb	r5, [r3, #16]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1d4e:	str.w	fp, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d52:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1d54:	strb.w	r9, [r3, #17]

      pinMode(pin, INPUT);
    1d58:	bl	2504 <pinMode>
    1d5c:	ldr	r0, [pc, #140]	; (1dec <_GLOBAL__sub_I_currentMode+0x200>)
    1d5e:	ldr	r1, [pc, #144]	; (1df0 <_GLOBAL__sub_I_currentMode+0x204>)
    1d60:	ldr	r2, [pc, #144]	; (1df4 <_GLOBAL__sub_I_currentMode+0x208>)
    1d62:	ldr	r3, [pc, #148]	; (1df8 <_GLOBAL__sub_I_currentMode+0x20c>)
      m_pin = pin;
      m_knobType = knobType;
    1d64:	strb	r5, [r6, #20]
      m_id = id;
    1d66:	str	r5, [r6, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1d68:	mov.w	lr, #15
    1d6c:	movs	r5, #14
    1d6e:	strb	r5, [r6, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1d70:	str	r4, [r6, #16]
    1d72:	str	r4, [r0, #16]
      m_pin = pin;
    1d74:	movs	r6, #16
      m_knobType = knobType;
    1d76:	strb.w	r9, [r0, #20]
      m_id = id;
    1d7a:	str.w	r9, [r0, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1d7e:	movs	r5, #17
    1d80:	strb.w	lr, [r0]
    1d84:	movs	r0, #18
    1d86:	strb	r6, [r1, #0]
    1d88:	strb	r5, [r2, #0]
    1d8a:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1d8c:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1d8e:	strb.w	r8, [r1, #20]
      m_id = id;
    1d92:	str.w	r8, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1d96:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    1d98:	strb.w	sl, [r2, #20]
      m_id = id;
    1d9c:	str.w	sl, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1da0:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1da2:	strb	r7, [r3, #20]
      m_id = id;
    1da4:	str	r7, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1da6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1daa:	nop
    1dac:	.word	0x1fff162c
    1db0:	.word	0x00004de0
    1db4:	.word	0x1fff1730
    1db8:	.word	0x1fff0c40
    1dbc:	.word	0x1fff16c0
    1dc0:	.word	0x1fff15cc
    1dc4:	.word	0x1fff15e4
    1dc8:	.word	0x1fff15fc
    1dcc:	.word	0x1fff1614
    1dd0:	.word	0x1fff1690
    1dd4:	.word	0x1fff16e4
    1dd8:	.word	0x1fff1708
    1ddc:	.word	0x1fff1808
    1de0:	.word	0x1fff17a8
    1de4:	.word	0x1fff17cc
    1de8:	.word	0x1fff16a8
    1dec:	.word	0x1fff1644
    1df0:	.word	0x1fff1660
    1df4:	.word	0x1fff1678
    1df8:	.word	0x1fff17f0
    1dfc:	.word	0x407f4000

00001e00 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1e00:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1e02:	ldr	r5, [pc, #60]	; (1e40 <usb_serial_getchar+0x40>)
    1e04:	ldr	r0, [r5, #0]
    1e06:	cbz	r0, 1e28 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1e08:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1e0a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1e0c:	adds	r1, r0, r3
    1e0e:	adds	r3, #1
	if (i >= rx_packet->len) {
    1e10:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1e12:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1e14:	bcs.n	1e1c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1e16:	strh	r3, [r0, #2]
	}
	return c;
    1e18:	mov	r0, r4
}
    1e1a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1e1c:	bl	2cac <usb_free>
		rx_packet = NULL;
    1e20:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1e22:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1e24:	str	r3, [r5, #0]
    1e26:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e28:	ldr	r3, [pc, #24]	; (1e44 <usb_serial_getchar+0x44>)
    1e2a:	ldrb	r3, [r3, #0]
    1e2c:	cbz	r3, 1e3a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1e2e:	movs	r0, #2
    1e30:	bl	2cf8 <usb_rx>
    1e34:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1e36:	cmp	r0, #0
    1e38:	bne.n	1e08 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e3a:	mov.w	r0, #4294967295
    1e3e:	pop	{r3, r4, r5, pc}
    1e40:	.word	0x1fff1838
    1e44:	.word	0x1fff1998

00001e48 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1e48:	push	{r4, lr}
	if (!rx_packet) {
    1e4a:	ldr	r4, [pc, #36]	; (1e70 <usb_serial_peekchar+0x28>)
    1e4c:	ldr	r0, [r4, #0]
    1e4e:	cbz	r0, 1e58 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1e50:	ldrh	r3, [r0, #2]
    1e52:	add	r0, r3
    1e54:	ldrb	r0, [r0, #8]
}
    1e56:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e58:	ldr	r3, [pc, #24]	; (1e74 <usb_serial_peekchar+0x2c>)
    1e5a:	ldrb	r3, [r3, #0]
    1e5c:	cbz	r3, 1e6a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1e5e:	movs	r0, #2
    1e60:	bl	2cf8 <usb_rx>
    1e64:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1e66:	cmp	r0, #0
    1e68:	bne.n	1e50 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e6a:	mov.w	r0, #4294967295
    1e6e:	pop	{r4, pc}
    1e70:	.word	0x1fff1838
    1e74:	.word	0x1fff1998

00001e78 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1e78:	ldr	r3, [pc, #16]	; (1e8c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1e7a:	ldr	r2, [pc, #20]	; (1e90 <usb_serial_available+0x18>)
    1e7c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1e7e:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1e80:	cbz	r3, 1e8a <usb_serial_available+0x12>
    1e82:	ldrh	r2, [r3, #0]
    1e84:	ldrh	r3, [r3, #2]
    1e86:	subs	r3, r2, r3
    1e88:	add	r0, r3
	return count;
}
    1e8a:	bx	lr
    1e8c:	.word	0x1fff1838
    1e90:	.word	0x1fff1e2c

00001e94 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1e94:	ldr	r3, [pc, #44]	; (1ec4 <usb_serial_flush_input+0x30>)
    1e96:	ldrb	r3, [r3, #0]
    1e98:	cbz	r3, 1ec2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1e9a:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1e9c:	ldr	r4, [pc, #40]	; (1ec8 <usb_serial_flush_input+0x34>)
    1e9e:	ldr	r0, [r4, #0]
    1ea0:	cbz	r0, 1eb6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1ea2:	bl	2cac <usb_free>
		rx_packet = NULL;
    1ea6:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1ea8:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1eaa:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1eac:	bl	2cf8 <usb_rx>
		if (!rx) break;
    1eb0:	cbz	r0, 1ec0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1eb2:	bl	2cac <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1eb6:	movs	r0, #2
    1eb8:	bl	2cf8 <usb_rx>
		if (!rx) break;
    1ebc:	cmp	r0, #0
    1ebe:	bne.n	1eb2 <usb_serial_flush_input+0x1e>
    1ec0:	pop	{r4, pc}
    1ec2:	bx	lr
    1ec4:	.word	0x1fff1998
    1ec8:	.word	0x1fff1838

00001ecc <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1ecc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1ed0:	ldr.w	r9, [pc, #248]	; 1fcc <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1ed4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1ed6:	movs	r2, #1
    1ed8:	strb.w	r2, [r9]
	while (size > 0) {
    1edc:	str	r1, [sp, #4]
    1ede:	cbz	r1, 1f3c <usb_serial_write+0x70>
    1ee0:	ldr.w	r8, [pc, #236]	; 1fd0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1ee4:	ldr	r7, [pc, #212]	; (1fbc <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1ee6:	ldr	r6, [sp, #4]
    1ee8:	mov	fp, r0
		if (!tx_packet) {
    1eea:	ldr.w	r0, [r8]
    1eee:	cbz	r0, 1f5e <usb_serial_write+0x92>
    1ef0:	ldr	r5, [pc, #204]	; (1fc0 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1ef2:	ldrh	r4, [r0, #2]
    1ef4:	rsb	r1, r4, #64	; 0x40
    1ef8:	cmp	r1, r6
    1efa:	it	cs
    1efc:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1efe:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1f02:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1f04:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1f08:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1f0a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1f0c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1f10:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1f14:	cbz	r1, 1f2c <usb_serial_write+0x60>
    1f16:	subs	r4, #1
    1f18:	add	r2, r4
    1f1a:	add	r1, fp
    1f1c:	ldrb.w	r4, [fp], #1
    1f20:	strb.w	r4, [r2, #1]!
    1f24:	cmp	fp, r1
    1f26:	bne.n	1f1c <usb_serial_write+0x50>
    1f28:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1f2c:	cmp.w	lr, #63	; 0x3f
    1f30:	bhi.n	1f4a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1f32:	ldr	r2, [pc, #144]	; (1fc4 <usb_serial_write+0xf8>)
    1f34:	movs	r1, #5
    1f36:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1f38:	cmp	r6, #0
    1f3a:	bne.n	1eea <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1f3c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1f3e:	movs	r3, #0
    1f40:	strb.w	r3, [r9]
	return ret;
}
    1f44:	add	sp, #12
    1f46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1f4a:	movs	r2, #64	; 0x40
    1f4c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1f4e:	mov	r1, r0
    1f50:	movs	r0, #3
    1f52:	bl	2e48 <usb_tx>
			tx_packet = NULL;
    1f56:	movs	r2, #0
    1f58:	str.w	r2, [r8]
    1f5c:	b.n	1f32 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1f5e:	ldrb	r2, [r7, #0]
    1f60:	cbz	r2, 1fac <usb_serial_write+0xe0>
    1f62:	ldr	r4, [pc, #100]	; (1fc8 <usb_serial_write+0xfc>)
    1f64:	ldr	r5, [pc, #88]	; (1fc0 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1f66:	mov.w	sl, #1
    1f6a:	b.n	1f7c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f6c:	subs	r4, #1
    1f6e:	beq.n	1f9e <usb_serial_write+0xd2>
    1f70:	ldrb	r2, [r5, #0]
    1f72:	cbnz	r2, 1f9e <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1f74:	bl	394c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1f78:	ldrb	r2, [r7, #0]
    1f7a:	cbz	r2, 1fac <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1f7c:	movs	r0, #3
    1f7e:	bl	2d34 <usb_tx_packet_count>
    1f82:	cmp	r0, #7
    1f84:	bhi.n	1f6c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1f86:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1f8a:	bl	2c6c <usb_malloc>
    1f8e:	str.w	r0, [r8]
					if (tx_packet) break;
    1f92:	cmp	r0, #0
    1f94:	bne.n	1ef2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1f96:	ldr	r3, [pc, #52]	; (1fcc <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f98:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1f9a:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f9c:	bne.n	1f70 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1f9e:	movs	r3, #1
					return -1;
    1fa0:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1fa4:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1fa6:	add	sp, #12
    1fa8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1fac:	movs	r3, #0
					return -1;
    1fae:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1fb2:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1fb6:	add	sp, #12
    1fb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fbc:	.word	0x1fff1998
    1fc0:	.word	0x1fff1834
    1fc4:	.word	0x1fff182c
    1fc8:	.word	0x00014821
    1fcc:	.word	0x1fff182d
    1fd0:	.word	0x1fff1830

00001fd4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1fd4:	push	{lr}
    1fd6:	sub	sp, #12
    1fd8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1fda:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1fdc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1fe0:	mov	r0, r3
    1fe2:	bl	1ecc <usb_serial_write>
}
    1fe6:	add	sp, #12
    1fe8:	ldr.w	pc, [sp], #4

00001fec <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1fec:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1fee:	ldr	r5, [pc, #56]	; (2028 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1ff0:	ldr	r4, [pc, #56]	; (202c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1ff2:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1ff4:	movs	r3, #1
    1ff6:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1ff8:	cbz	r0, 2006 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1ffa:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1ffc:	movs	r3, #0
    1ffe:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    2000:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    2004:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    2006:	ldr	r3, [pc, #40]	; (2030 <usb_serial_write_buffer_free+0x44>)
    2008:	ldrb	r3, [r3, #0]
    200a:	cbnz	r3, 2012 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    200c:	movs	r0, #0
    200e:	strb	r0, [r4, #0]
			return 0;
    2010:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2012:	movs	r0, #3
    2014:	bl	2d34 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    2018:	cmp	r0, #7
    201a:	bhi.n	200c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    201c:	bl	2c6c <usb_malloc>
    2020:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2022:	cmp	r0, #0
    2024:	bne.n	1ffa <usb_serial_write_buffer_free+0xe>
    2026:	b.n	200c <usb_serial_write_buffer_free+0x20>
    2028:	.word	0x1fff1830
    202c:	.word	0x1fff182d
    2030:	.word	0x1fff1998

00002034 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    2034:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    2036:	ldr	r3, [pc, #68]	; (207c <usb_serial_flush_output+0x48>)
    2038:	ldrb	r3, [r3, #0]
    203a:	cbz	r3, 2060 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    203c:	ldr	r6, [pc, #64]	; (2080 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    203e:	ldr	r5, [pc, #68]	; (2084 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    2040:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2042:	movs	r7, #1
    2044:	strb	r7, [r5, #0]
	if (tx_packet) {
    2046:	cbz	r4, 2062 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    2048:	ldr	r2, [pc, #60]	; (2088 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    204a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    204c:	movs	r7, #0
    204e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2050:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    2052:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2054:	movs	r0, #3
    2056:	bl	2e48 <usb_tx>
		tx_packet = NULL;
    205a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    205c:	movs	r3, #0
    205e:	strb	r3, [r5, #0]
    2060:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2062:	bl	2c6c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    2066:	ldr	r3, [pc, #32]	; (2088 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    2068:	cbz	r0, 2076 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    206a:	mov	r1, r0
    206c:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    206e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    2070:	bl	2e48 <usb_tx>
    2074:	b.n	205c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2076:	strb	r7, [r3, #0]
    2078:	b.n	205c <usb_serial_flush_output+0x28>
    207a:	nop
    207c:	.word	0x1fff1998
    2080:	.word	0x1fff1830
    2084:	.word	0x1fff182d
    2088:	.word	0x1fff182c

0000208c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    208c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    208e:	ldr	r3, [pc, #56]	; (20c8 <usb_serial_flush_callback+0x3c>)
    2090:	ldrb	r3, [r3, #0]
    2092:	cbnz	r3, 20b2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2094:	ldr	r4, [pc, #52]	; (20cc <usb_serial_flush_callback+0x40>)
    2096:	ldr	r1, [r4, #0]
    2098:	cbz	r1, 20b4 <usb_serial_flush_callback+0x28>
    209a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    209e:	ldrh	r3, [r1, #2]
    20a0:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    20a2:	movs	r0, #3
    20a4:	bl	2e48 <usb_tx>
		tx_packet = NULL;
    20a8:	str	r5, [r4, #0]
    20aa:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    20ac:	ldr	r3, [pc, #32]	; (20d0 <usb_serial_flush_callback+0x44>)
    20ae:	movs	r2, #1
    20b0:	strb	r2, [r3, #0]
    20b2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    20b4:	bl	2c6c <usb_malloc>
		if (tx) {
    20b8:	cmp	r0, #0
    20ba:	beq.n	20ac <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    20bc:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    20be:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    20c2:	movs	r0, #3
    20c4:	b.w	2e48 <usb_tx>
    20c8:	.word	0x1fff182d
    20cc:	.word	0x1fff1830
    20d0:	.word	0x1fff182c

000020d4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    20d4:	ldr	r2, [pc, #220]	; (21b4 <wait_for_cal+0xe0>)
    20d6:	ldr	r1, [pc, #224]	; (21b8 <wait_for_cal+0xe4>)
    20d8:	ldr	r3, [r2, #0]
    20da:	lsls	r3, r3, #24
    20dc:	bmi.n	20d8 <wait_for_cal+0x4>
    20de:	ldr	r3, [r1, #0]
    20e0:	ands.w	r3, r3, #128	; 0x80
    20e4:	bne.n	20d8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    20e6:	cpsid	i
	if (calibrating) {
    20e8:	ldr	r1, [pc, #208]	; (21bc <wait_for_cal+0xe8>)
    20ea:	ldrb	r2, [r1, #0]
    20ec:	cmp	r2, #0
    20ee:	beq.n	21b0 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    20f0:	ldr	r2, [pc, #204]	; (21c0 <wait_for_cal+0xec>)
    20f2:	ldr	r0, [pc, #208]	; (21c4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    20f4:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    20f6:	ldr	r4, [pc, #208]	; (21c8 <wait_for_cal+0xf4>)
    20f8:	ldr	r7, [r2, #0]
    20fa:	ldr	r6, [r0, #0]
    20fc:	ldr	r5, [r4, #0]
    20fe:	ldr	r4, [r2, #12]
    2100:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2102:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    2104:	adds	r2, #20
    2106:	ldr	r0, [r0, #0]
    2108:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    210a:	ldr	r7, [pc, #192]	; (21cc <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    210c:	add	r5, r6
    210e:	add	r4, r5
    2110:	add	r0, r4
    2112:	add	r2, r0
    2114:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2118:	ldr	r6, [pc, #180]	; (21d0 <wait_for_cal+0xfc>)
    211a:	ldr	r0, [pc, #184]	; (21d4 <wait_for_cal+0x100>)
    211c:	ldr	r5, [pc, #184]	; (21d8 <wait_for_cal+0x104>)
    211e:	ldr	r4, [pc, #188]	; (21dc <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2120:	orr.w	r2, r2, #32768	; 0x8000
    2124:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2126:	ldr	r7, [r6, #0]
    2128:	ldr	r6, [r0, #0]
    212a:	ldr	r5, [r5, #0]
    212c:	ldr	r2, [pc, #176]	; (21e0 <wait_for_cal+0x10c>)
    212e:	ldr	r4, [r4, #0]
    2130:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2132:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2134:	ldr	r0, [r0, #0]
    2136:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2138:	ldr	r7, [pc, #168]	; (21e4 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    213a:	add	r5, r6
    213c:	add	r4, r5
    213e:	add	r0, r4
    2140:	add	r2, r0
    2142:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2146:	ldr	r6, [pc, #160]	; (21e8 <wait_for_cal+0x114>)
    2148:	ldr	r0, [pc, #160]	; (21ec <wait_for_cal+0x118>)
    214a:	ldr	r5, [pc, #164]	; (21f0 <wait_for_cal+0x11c>)
    214c:	ldr	r4, [pc, #164]	; (21f4 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    214e:	orr.w	r2, r2, #32768	; 0x8000
    2152:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2154:	ldr	r7, [r6, #0]
    2156:	ldr	r6, [r0, #0]
    2158:	ldr	r5, [r5, #0]
    215a:	ldr	r2, [pc, #156]	; (21f8 <wait_for_cal+0x124>)
    215c:	ldr	r4, [r4, #0]
    215e:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2160:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2162:	ldr	r0, [r0, #0]
    2164:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2166:	ldr	r7, [pc, #148]	; (21fc <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    2168:	add	r5, r6
    216a:	add	r4, r5
    216c:	add	r0, r4
    216e:	add	r2, r0
    2170:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2174:	ldr	r6, [pc, #136]	; (2200 <wait_for_cal+0x12c>)
    2176:	ldr	r0, [pc, #140]	; (2204 <wait_for_cal+0x130>)
    2178:	ldr	r5, [pc, #140]	; (2208 <wait_for_cal+0x134>)
    217a:	ldr	r4, [pc, #144]	; (220c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    217c:	orr.w	r2, r2, #32768	; 0x8000
    2180:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2182:	ldr	r7, [r6, #0]
    2184:	ldr	r6, [r0, #0]
    2186:	ldr	r5, [r5, #0]
    2188:	ldr	r2, [pc, #132]	; (2210 <wait_for_cal+0x13c>)
    218a:	ldr	r4, [r4, #0]
    218c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    218e:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2190:	ldr	r0, [r0, #0]
    2192:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    2194:	add	r5, r6
    2196:	add	r4, r5
    2198:	add	r0, r4
    219a:	add	r2, r0
    219c:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    21a0:	ldr	r0, [pc, #112]	; (2214 <wait_for_cal+0x140>)
    21a2:	orr.w	r2, r2, #32768	; 0x8000
    21a6:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    21a8:	strb	r3, [r1, #0]
	}
	__enable_irq();
    21aa:	cpsie	i
}
    21ac:	pop	{r4, r5, r6, r7}
    21ae:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    21b0:	cpsie	i
    21b2:	bx	lr
    21b4:	.word	0x4003b024
    21b8:	.word	0x400bb024
    21bc:	.word	0x1fff183e
    21c0:	.word	0x4003b038
    21c4:	.word	0x4003b03c
    21c8:	.word	0x4003b040
    21cc:	.word	0x4003b02c
    21d0:	.word	0x4003b058
    21d4:	.word	0x4003b05c
    21d8:	.word	0x4003b060
    21dc:	.word	0x4003b064
    21e0:	.word	0x4003b06c
    21e4:	.word	0x4003b030
    21e8:	.word	0x400bb038
    21ec:	.word	0x400bb03c
    21f0:	.word	0x400bb040
    21f4:	.word	0x400bb044
    21f8:	.word	0x400bb04c
    21fc:	.word	0x400bb02c
    2200:	.word	0x400bb058
    2204:	.word	0x400bb05c
    2208:	.word	0x400bb060
    220c:	.word	0x400bb064
    2210:	.word	0x400bb06c
    2214:	.word	0x400bb030

00002218 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2218:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    221a:	ldr	r0, [pc, #164]	; (22c0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    221c:	ldr	r2, [pc, #164]	; (22c4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    221e:	ldr	r3, [pc, #168]	; (22c8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2220:	ldr	r5, [pc, #168]	; (22cc <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2222:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2224:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2226:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2228:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    222a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    222c:	ldr	r4, [pc, #160]	; (22d0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    222e:	cmp	r3, #8
    2230:	beq.n	2294 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2232:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2234:	ldr	r0, [pc, #156]	; (22d4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2236:	ldr	r1, [pc, #160]	; (22d8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2238:	beq.n	22aa <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    223a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    223c:	ite	eq
    223e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2240:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2242:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2244:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2246:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2248:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    224a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    224c:	ldr	r3, [pc, #140]	; (22dc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    224e:	ldr	r1, [pc, #144]	; (22e0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2250:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2252:	ldr	r2, [pc, #144]	; (22e4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2254:	cbz	r3, 2286 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2256:	movs	r3, #1
    2258:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    225a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    225c:	ldr	r3, [pc, #136]	; (22e8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    225e:	ldr	r1, [pc, #140]	; (22ec <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2260:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2262:	ldr	r2, [pc, #140]	; (22f0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2264:	cmp	r3, #1
    2266:	bls.n	22b6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2268:	cmp	r3, #4
    226a:	bls.n	228c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    226c:	cmp	r3, #8
    226e:	bls.n	22ae <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2270:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2272:	ite	ls
    2274:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2276:	movhi	r3, #135	; 0x87
    2278:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    227a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    227c:	ldr	r3, [pc, #116]	; (22f4 <analog_init+0xdc>)
    227e:	movs	r2, #1
    2280:	strb	r2, [r3, #0]
}
    2282:	pop	{r4, r5}
    2284:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2286:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2288:	str	r3, [r2, #0]
    228a:	b.n	225c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    228c:	movs	r3, #132	; 0x84
    228e:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2290:	str	r3, [r2, #0]
    2292:	b.n	227c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2294:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2298:	ldr	r1, [pc, #60]	; (22d8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    229a:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    229c:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    229e:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    22a0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    22a2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    22a4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    22a6:	str	r3, [r1, #0]
    22a8:	b.n	224c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    22aa:	movs	r2, #57	; 0x39
    22ac:	b.n	229e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    22ae:	movs	r3, #133	; 0x85
    22b0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    22b2:	str	r3, [r2, #0]
    22b4:	b.n	227c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    22b6:	movs	r3, #128	; 0x80
    22b8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    22ba:	str	r3, [r2, #0]
    22bc:	b.n	227c <analog_init+0x64>
    22be:	nop
    22c0:	.word	0x40074000
    22c4:	.word	0x40074001
    22c8:	.word	0x1fff0c58
    22cc:	.word	0x4003b008
    22d0:	.word	0x4003b00c
    22d4:	.word	0x400bb008
    22d8:	.word	0x400bb00c
    22dc:	.word	0x1fff1841
    22e0:	.word	0x4003b020
    22e4:	.word	0x400bb020
    22e8:	.word	0x1fff0c59
    22ec:	.word	0x4003b024
    22f0:	.word	0x400bb024
    22f4:	.word	0x1fff183e

000022f8 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    22f8:	cmp	r0, #71	; 0x47
    22fa:	bhi.n	235c <analogRead+0x64>
	channel = pin2sc1a[pin];
    22fc:	ldr	r3, [pc, #204]	; (23cc <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    22fe:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    2302:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    2304:	cmp	r6, #255	; 0xff
    2306:	beq.n	2360 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2308:	ldr	r3, [pc, #196]	; (23d0 <analogRead+0xd8>)
    230a:	ldrb	r3, [r3, #0]
    230c:	cmp	r3, #0
    230e:	bne.n	2366 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2310:	lsls	r2, r6, #24
    2312:	bmi.n	236e <analogRead+0x76>
#endif

	__disable_irq();
    2314:	cpsid	i
    2316:	ldr	r5, [pc, #188]	; (23d4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2318:	ldr	r4, [pc, #188]	; (23d8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    231a:	mov	r7, r5
    231c:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    231e:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2320:	strb	r3, [r5, #0]
	__enable_irq();
    2322:	cpsie	i
	while (1) {
		__disable_irq();
    2324:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2326:	ldr	r3, [r4, #0]
    2328:	lsls	r3, r3, #24
    232a:	bmi.n	2346 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    232c:	ldrb	r3, [r7, #0]
    232e:	cbnz	r3, 2338 <analogRead+0x40>
    2330:	b.n	231c <analogRead+0x24>
    2332:	ldrb	r3, [r5, #0]
    2334:	cmp	r3, #0
    2336:	beq.n	231c <analogRead+0x24>
		__enable_irq();
    2338:	cpsie	i
		yield();
    233a:	bl	394c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    233e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2340:	ldr	r3, [r4, #0]
    2342:	lsls	r0, r3, #24
    2344:	bpl.n	2332 <analogRead+0x3a>
			result = ADC0_RA;
    2346:	ldr	r3, [pc, #148]	; (23dc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2348:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    234a:	movs	r2, #0
    234c:	strb	r2, [r5, #0]
			__enable_irq();
    234e:	cpsie	i
			result >>= analog_right_shift;
    2350:	ldr	r2, [pc, #140]	; (23e0 <analogRead+0xe8>)
    2352:	ldrb	r0, [r2, #0]
    2354:	asr.w	r0, r3, r0
			return result;
    2358:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    235c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    235e:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2360:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2362:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2366:	bl	20d4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    236a:	lsls	r2, r6, #24
    236c:	bpl.n	2314 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    236e:	cpsid	i
    2370:	ldr	r5, [pc, #112]	; (23e4 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2372:	ldr.w	r8, [pc, #124]	; 23f0 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2376:	ldr	r4, [pc, #112]	; (23e8 <analogRead+0xf0>)
    2378:	and.w	r7, r6, #64	; 0x40
    237c:	uxtb	r7, r7
    237e:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2382:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2386:	cbz	r7, 23c0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2388:	bic.w	r3, r3, #16
    238c:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2390:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2392:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2394:	ldr	r2, [pc, #76]	; (23e4 <analogRead+0xec>)
    2396:	strb	r3, [r5, #0]
	__enable_irq();
    2398:	cpsie	i
	while (1) {
		__disable_irq();
    239a:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    239c:	ldr	r3, [r4, #0]
    239e:	lsls	r1, r3, #24
    23a0:	bmi.n	23bc <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    23a2:	ldrb	r3, [r2, #0]
    23a4:	cbnz	r3, 23ae <analogRead+0xb6>
    23a6:	b.n	2382 <analogRead+0x8a>
    23a8:	ldrb	r3, [r5, #0]
    23aa:	cmp	r3, #0
    23ac:	beq.n	2382 <analogRead+0x8a>
		__enable_irq();
    23ae:	cpsie	i
		yield();
    23b0:	bl	394c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    23b4:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    23b6:	ldr	r3, [r4, #0]
    23b8:	lsls	r3, r3, #24
    23ba:	bpl.n	23a8 <analogRead+0xb0>
			result = ADC1_RA;
    23bc:	ldr	r3, [pc, #44]	; (23ec <analogRead+0xf4>)
    23be:	b.n	2348 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    23c0:	orr.w	r3, r3, #16
    23c4:	str.w	r3, [r8]
    23c8:	b.n	2390 <analogRead+0x98>
    23ca:	nop
    23cc:	.word	0x00004e64
    23d0:	.word	0x1fff183e
    23d4:	.word	0x1fff1840
    23d8:	.word	0x4003b000
    23dc:	.word	0x4003b010
    23e0:	.word	0x1fff183d
    23e4:	.word	0x1fff183f
    23e8:	.word	0x400bb000
    23ec:	.word	0x400bb010
    23f0:	.word	0x400bb00c

000023f4 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    23f4:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    23f6:	ldr	r3, [pc, #68]	; (243c <digitalWrite.part.1+0x48>)
    23f8:	ldr.w	r2, [r3, r0, lsl #3]
    23fc:	ldrb.w	r4, [r2, #640]	; 0x280
    2400:	cbz	r4, 2410 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    2402:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2404:	cbz	r1, 2426 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2406:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    240a:	ldr.w	r4, [sp], #4
    240e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2410:	add.w	r3, r3, r0, lsl #3
    2414:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2416:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2418:	cbnz	r1, 2430 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    241a:	bic.w	r2, r2, #2
    241e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2420:	ldr.w	r4, [sp], #4
    2424:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2426:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    242a:	ldr.w	r4, [sp], #4
    242e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2430:	orr.w	r2, r2, #3
    2434:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2436:	ldr.w	r4, [sp], #4
    243a:	bx	lr
    243c:	.word	0x00004eac

00002440 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2440:	ldr	r2, [pc, #112]	; (24b4 <pinMode.part.2+0x74>)
    2442:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2446:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2448:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    244a:	beq.n	2470 <pinMode.part.2+0x30>
    244c:	cmp	r1, #4
    244e:	beq.n	2488 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2450:	ldr.w	r0, [r2, r0, lsl #3]
    2454:	movs	r2, #0
    2456:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    245a:	cbz	r1, 2468 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    245c:	cmp	r1, #2
    245e:	beq.n	24a2 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2460:	cmp	r1, #3
    2462:	beq.n	24aa <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2464:	str	r2, [r3, #0]
    2466:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2468:	mov.w	r2, #256	; 0x100
    246c:	str	r2, [r3, #0]
    246e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2470:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2474:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2478:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    247c:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    247e:	ldr	r2, [r3, #0]
    2480:	bic.w	r2, r2, #32
    2484:	str	r2, [r3, #0]
    2486:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2488:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    248c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2490:	movs	r0, #1
    2492:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2496:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2498:	ldr	r2, [r3, #0]
    249a:	orr.w	r2, r2, #32
    249e:	str	r2, [r3, #0]
    24a0:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    24a2:	movw	r2, #259	; 0x103
    24a6:	str	r2, [r3, #0]
    24a8:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    24aa:	mov.w	r2, #258	; 0x102
    24ae:	str	r2, [r3, #0]
    24b0:	bx	lr
    24b2:	nop
    24b4:	.word	0x00004eac

000024b8 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    24b8:	push	{r4, r5}
	RTC_SR = 0;
    24ba:	ldr	r3, [pc, #20]	; (24d0 <rtc_set+0x18>)
	RTC_TPR = 0;
    24bc:	ldr	r5, [pc, #20]	; (24d4 <rtc_set+0x1c>)
	RTC_TSR = t;
    24be:	ldr	r4, [pc, #24]	; (24d8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    24c0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    24c2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    24c4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    24c6:	str	r2, [r5, #0]
	RTC_TSR = t;
    24c8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    24ca:	str	r1, [r3, #0]
}
    24cc:	pop	{r4, r5}
    24ce:	bx	lr
    24d0:	.word	0x4003d014
    24d4:	.word	0x4003d004
    24d8:	.word	0x4003d000

000024dc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    24dc:	cmp	r0, #63	; 0x3f
    24de:	bhi.n	24e4 <digitalWrite+0x8>
    24e0:	b.w	23f4 <digitalWrite.part.1>
    24e4:	bx	lr
    24e6:	nop

000024e8 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    24e8:	cmp	r0, #63	; 0x3f
    24ea:	bhi.n	24fa <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    24ec:	ldr	r3, [pc, #16]	; (2500 <digitalRead+0x18>)
    24ee:	ldr.w	r3, [r3, r0, lsl #3]
    24f2:	ldrb.w	r0, [r3, #512]	; 0x200
    24f6:	uxtb	r0, r0
    24f8:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    24fa:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    24fc:	bx	lr
    24fe:	nop
    2500:	.word	0x00004eac

00002504 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2504:	cmp	r0, #63	; 0x3f
    2506:	bhi.n	250c <pinMode+0x8>
    2508:	b.w	2440 <pinMode.part.2>
    250c:	bx	lr
    250e:	nop

00002510 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2510:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2514:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2516:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2518:	ldr	r7, [pc, #136]	; (25a4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    251a:	ldr	r3, [pc, #140]	; (25a8 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    251c:	ldr	r2, [pc, #140]	; (25ac <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    251e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2520:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2522:	ldr	r2, [r2, #0]
	__enable_irq();
    2524:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2526:	lsls	r2, r2, #5
    2528:	bpl.n	2530 <delay+0x20>
    252a:	cmp	r3, #50	; 0x32
    252c:	it	hi
    252e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2530:	cbz	r5, 25a0 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2532:	rsb	r3, r3, #179200	; 0x2bc00
    2536:	addw	r3, r3, #799	; 0x31f
    253a:	ldr	r6, [pc, #116]	; (25b0 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    253c:	ldr.w	r9, [pc, #104]	; 25a8 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2540:	ldr.w	r8, [pc, #104]	; 25ac <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2544:	lsrs	r3, r3, #2
    2546:	mov.w	r2, #1000	; 0x3e8
    254a:	umull	r1, r3, r6, r3
    254e:	mul.w	r4, r2, r4
    2552:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2556:	cpsid	i
	current = SYST_CVR;
    2558:	ldr.w	r1, [r9]
	count = systick_millis_count;
    255c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    255e:	ldr.w	lr, [r8]
	__enable_irq();
    2562:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2564:	rsb	r3, r1, #179200	; 0x2bc00
    2568:	addw	r3, r3, #799	; 0x31f
    256c:	lsrs	r3, r3, #2
    256e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2572:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2576:	rsb	r3, r4, r3, lsr #2
    257a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    257e:	beq.n	2586 <delay+0x76>
    2580:	cmp	r1, #50	; 0x32
    2582:	it	hi
    2584:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2586:	mla	r3, r0, r2, r3
    258a:	cmp.w	r3, #1000	; 0x3e8
    258e:	bcc.n	259a <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2590:	subs	r5, #1
    2592:	beq.n	25a0 <delay+0x90>
				start += 1000;
    2594:	add.w	r4, r4, #1000	; 0x3e8
    2598:	b.n	2556 <delay+0x46>
			}
			yield();
    259a:	bl	394c <yield>
		}
    259e:	b.n	2556 <delay+0x46>
    25a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    25a4:	.word	0x1fff1844
    25a8:	.word	0xe000e018
    25ac:	.word	0xe000ed04
    25b0:	.word	0x16c16c17

000025b4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    25b4:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    25b6:	ldr	r3, [pc, #312]	; (26f0 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    25b8:	ldr	r0, [pc, #312]	; (26f4 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    25ba:	ldr.w	ip, [pc, #348]	; 2718 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    25be:	ldr	r4, [pc, #312]	; (26f8 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    25c0:	ldr	r1, [pc, #312]	; (26fc <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25c2:	ldr.w	lr, [pc, #344]	; 271c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    25c6:	ldr	r6, [pc, #312]	; (2700 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    25c8:	ldr	r5, [pc, #312]	; (2704 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    25ca:	ldr	r7, [pc, #316]	; (2708 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    25cc:	mov.w	r2, #134217728	; 0x8000000
    25d0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    25d2:	mov.w	r2, #268435456	; 0x10000000
    25d6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    25d8:	mov.w	r2, #536870912	; 0x20000000
    25dc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    25de:	mov.w	r2, #1073741824	; 0x40000000
    25e2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    25e4:	mov.w	r2, #2147483648	; 0x80000000
    25e8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    25ea:	movs	r2, #0
    25ec:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25ee:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    25f0:	movw	r0, #61439	; 0xefff
    25f4:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25f8:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    25fc:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    25fe:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2602:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2604:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2606:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2608:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    260c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    260e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2612:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2614:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2618:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    261a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    261e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2622:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2626:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    262a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    262e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2630:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2634:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2636:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2638:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    263a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    263e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2640:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2642:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2644:	ldr	r4, [pc, #196]	; (270c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2646:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2648:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    264a:	movs	r1, #9
    264c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    264e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2652:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2656:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2658:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    265a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    265c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    265e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2660:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2662:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2666:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    266a:	add.w	r7, r7, #520192	; 0x7f000
    266e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2670:	addw	r4, r4, #2044	; 0x7fc
    2674:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2676:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2678:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    267a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    267c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2680:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2682:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2686:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    268a:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    268c:	sub.w	r4, r4, #460800	; 0x70800
    2690:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2694:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2696:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2698:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    269c:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    269e:	ldr	r0, [pc, #112]	; (2710 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    26a0:	orr.w	r1, r1, #512	; 0x200
    26a4:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    26a6:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    26a8:	ldr	r4, [pc, #104]	; (2714 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    26aa:	add.w	lr, lr, #65280	; 0xff00
    26ae:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    26b2:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    26b6:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    26ba:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    26be:	orr.w	r1, r1, #33554432	; 0x2000000
    26c2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    26c4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    26c8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    26cc:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    26ce:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    26d0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    26d2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    26d4:	str	r2, [r4, #0]
#endif
	analog_init();
    26d6:	bl	2218 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    26da:	movs	r0, #25
    26dc:	bl	2510 <delay>
	usb_init();
    26e0:	bl	387c <usb_init>
	delay(275);
    26e4:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    26e8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    26ec:	b.w	2510 <delay>
    26f0:	.word	0xe000e104
    26f4:	.word	0x40038004
    26f8:	.word	0x40038014
    26fc:	.word	0x4003801c
    2700:	.word	0x40038024
    2704:	.word	0x4003802c
    2708:	.word	0x40038034
    270c:	.word	0x40038000
    2710:	.word	0x40048004
    2714:	.word	0x400c9000
    2718:	.word	0x40038008
    271c:	.word	0x4003800c

00002720 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2720:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2722:	ldr	r3, [pc, #56]	; (275c <sysex_byte+0x3c>)
    2724:	ldr	r4, [pc, #56]	; (2760 <sysex_byte+0x40>)
    2726:	ldr	r3, [r3, #0]
    2728:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    272a:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    272c:	cbz	r3, 2752 <sysex_byte+0x32>
    272e:	cmp.w	r1, #290	; 0x122
    2732:	bcs.n	2740 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2734:	ldr	r2, [pc, #44]	; (2764 <sysex_byte+0x44>)
    2736:	adds	r3, r1, #1
    2738:	strb	r5, [r2, r1]
    273a:	uxth	r3, r3
    273c:	strh	r3, [r4, #0]
	}
}
    273e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2740:	movs	r2, #0
    2742:	ldr	r0, [pc, #32]	; (2764 <sysex_byte+0x44>)
    2744:	blx	r3
    2746:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2748:	ldr	r2, [pc, #24]	; (2764 <sysex_byte+0x44>)
    274a:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    274c:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    274e:	strh	r3, [r4, #0]
	}
}
    2750:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2752:	cmp.w	r1, #290	; 0x122
    2756:	bcc.n	2734 <sysex_byte+0x14>
    2758:	pop	{r3, r4, r5, pc}
    275a:	nop
    275c:	.word	0x1fff186c
    2760:	.word	0x1fff1d02
    2764:	.word	0x1fff1d08

00002768 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2768:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    276c:	ldr	r6, [pc, #132]	; (27f4 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    276e:	ldr	r7, [pc, #136]	; (27f8 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2770:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2772:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2774:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2776:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2778:	cbz	r1, 27a8 <usb_midi_write_packed+0x40>
    277a:	ldr	r5, [pc, #128]	; (27fc <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    277c:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    277e:	add.w	r2, r1, r3, lsl #2
    2782:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2784:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2786:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2788:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    278c:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    278e:	bhi.n	279a <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2790:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2792:	movs	r3, #0
    2794:	strb	r3, [r7, #0]
    2796:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    279a:	movs	r3, #64	; 0x40
    279c:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    279e:	movs	r0, #4
    27a0:	bl	2e48 <usb_tx>
		tx_packet = NULL;
    27a4:	str	r4, [r6, #0]
    27a6:	b.n	2792 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    27a8:	ldr.w	r9, [pc, #84]	; 2800 <usb_midi_write_packed+0x98>
    27ac:	ldrb.w	r3, [r9]
    27b0:	cmp	r3, #0
    27b2:	beq.n	2796 <usb_midi_write_packed+0x2e>
    27b4:	ldr	r5, [pc, #68]	; (27fc <usb_midi_write_packed+0x94>)
    27b6:	movw	r4, #48001	; 0xbb81
    27ba:	b.n	27ce <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    27bc:	subs	r4, #1
    27be:	beq.n	27e6 <usb_midi_write_packed+0x7e>
    27c0:	ldrb	r3, [r5, #0]
    27c2:	cbnz	r3, 27e6 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    27c4:	bl	394c <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    27c8:	ldrb.w	r3, [r9]
    27cc:	cbz	r3, 27ee <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    27ce:	movs	r0, #4
    27d0:	bl	2d34 <usb_tx_packet_count>
    27d4:	cmp	r0, #5
    27d6:	bhi.n	27bc <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    27d8:	bl	2c6c <usb_malloc>
    27dc:	mov	r1, r0
    27de:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    27e0:	cmp	r0, #0
    27e2:	beq.n	27bc <usb_midi_write_packed+0x54>
    27e4:	b.n	277c <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    27e6:	movs	r3, #1
    27e8:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    27ea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27ee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27f2:	nop
    27f4:	.word	0x1fff1888
    27f8:	.word	0x1fff185c
    27fc:	.word	0x1fff188c
    2800:	.word	0x1fff1998

00002804 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    2804:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    2806:	ldr	r3, [pc, #32]	; (2828 <usb_midi_flush_output+0x24>)
    2808:	ldrb	r4, [r3, #0]
    280a:	cbnz	r4, 2816 <usb_midi_flush_output+0x12>
    280c:	ldr	r5, [pc, #28]	; (282c <usb_midi_flush_output+0x28>)
    280e:	ldr	r1, [r5, #0]
    2810:	cbz	r1, 2816 <usb_midi_flush_output+0x12>
    2812:	ldrh	r3, [r1, #2]
    2814:	cbnz	r3, 2818 <usb_midi_flush_output+0x14>
    2816:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2818:	lsls	r3, r3, #2
    281a:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    281c:	movs	r0, #4
    281e:	bl	2e48 <usb_tx>
		tx_packet = NULL;
    2822:	str	r4, [r5, #0]
    2824:	pop	{r3, r4, r5, pc}
    2826:	nop
    2828:	.word	0x1fff185c
    282c:	.word	0x1fff1888

00002830 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2830:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2834:	ldr	r6, [pc, #692]	; (2aec <usb_midi_read+0x2bc>)
    2836:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2838:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    283a:	cmp	r3, #0
    283c:	beq.w	2964 <usb_midi_read+0x134>
    2840:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2842:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2844:	lsrs	r1, r2, #2
    2846:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    284a:	adds	r2, #4
	if (index < rx_packet->len) {
    284c:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    284e:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2850:	bcs.n	28d8 <usb_midi_read+0xa8>
		rx_packet->index = index;
    2852:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2854:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2858:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    285c:	ldr	r1, [pc, #656]	; (2af0 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    285e:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2862:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    2866:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    286a:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    286c:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2870:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2872:	bls.n	28aa <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2874:	subs	r3, r6, #2
    2876:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2878:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    287c:	bls.n	291c <usb_midi_read+0xec>
    287e:	cmp	r6, #5
    2880:	beq.n	2914 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2882:	cmp	r6, #4
    2884:	beq.w	2bd0 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2888:	subs	r3, r6, #5
    288a:	cmp	r3, #2
    288c:	bls.n	298e <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    288e:	cmp	r6, #15
    2890:	bne.n	28b0 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    2892:	cmp	r0, #247	; 0xf7
    2894:	bhi.n	291c <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    2896:	cmp	r0, #240	; 0xf0
    2898:	beq.n	28a0 <usb_midi_read+0x70>
    289a:	ldr	r3, [pc, #600]	; (2af4 <usb_midi_read+0x2c4>)
    289c:	ldrh	r3, [r3, #0]
    289e:	cbz	r3, 28b0 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    28a0:	bl	2720 <sysex_byte>
		}
	}
	return 0;
    28a4:	movs	r0, #0
    28a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    28aa:	cbz	r7, 28b6 <usb_midi_read+0x86>
    28ac:	cmp	r5, r7
    28ae:	beq.n	28b6 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    28b0:	movs	r0, #0
    28b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    28b6:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    28b8:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    28bc:	beq.w	29ce <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    28c0:	cmp	r6, #9
    28c2:	beq.n	28e8 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    28c4:	cmp	r6, #10
    28c6:	bne.w	29f2 <usb_midi_read+0x1c2>
    28ca:	cmp	r3, #10
    28cc:	bne.n	28b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    28ce:	ldr	r3, [pc, #552]	; (2af8 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    28d0:	ldr	r2, [pc, #552]	; (2afc <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    28d2:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    28d4:	movs	r1, #160	; 0xa0
    28d6:	b.n	29dc <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    28d8:	mov	r0, r3
    28da:	bl	2cac <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    28de:	movs	r0, #5
    28e0:	bl	2cf8 <usb_rx>
    28e4:	str	r0, [r6, #0]
    28e6:	b.n	2854 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    28e8:	cmp	r3, #9
    28ea:	bne.n	28b0 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    28ec:	lsrs	r7, r4, #24
    28ee:	beq.w	2be8 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    28f2:	ldr	r3, [pc, #524]	; (2b00 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    28f4:	ldr	r2, [pc, #516]	; (2afc <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    28f6:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    28f8:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    28fa:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    28fe:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2900:	uxtb	r5, r5
    2902:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2904:	cmp	r3, #0
    2906:	beq.w	2a44 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    290a:	mov	r2, r4
    290c:	mov	r1, r6
    290e:	mov	r0, r5
    2910:	blx	r3
    2912:	b.n	2a44 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2914:	cmp	r0, #240	; 0xf0
    2916:	bls.n	29a0 <usb_midi_read+0x170>
    2918:	cmp	r0, #247	; 0xf7
    291a:	beq.n	29a0 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    291c:	subs	r0, #241	; 0xf1
    291e:	cmp	r0, #14
    2920:	bhi.n	28b0 <usb_midi_read+0x80>
    2922:	add	r3, pc, #4	; (adr r3, 2928 <usb_midi_read+0xf8>)
    2924:	ldr.w	pc, [r3, r0, lsl #2]
    2928:	.word	0x00002adf
    292c:	.word	0x00002ac3
    2930:	.word	0x00002ab1
    2934:	.word	0x000028b1
    2938:	.word	0x000028b1
    293c:	.word	0x00002aa3
    2940:	.word	0x000028b1
    2944:	.word	0x00002b83
    2948:	.word	0x000028b1
    294c:	.word	0x00002b4d
    2950:	.word	0x00002b67
    2954:	.word	0x00002a8b
    2958:	.word	0x000028b1
    295c:	.word	0x00002a73
    2960:	.word	0x00002a57
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2964:	ldr	r3, [pc, #412]	; (2b04 <usb_midi_read+0x2d4>)
    2966:	ldrb	r3, [r3, #0]
    2968:	cmp	r3, #0
    296a:	beq.n	28b0 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    296c:	movs	r0, #5
    296e:	bl	2cf8 <usb_rx>
    2972:	mov	r3, r0
    2974:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    2976:	cmp	r0, #0
    2978:	beq.n	28b0 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    297a:	ldrh	r5, [r0, #0]
    297c:	cmp	r5, #0
    297e:	bne.w	2842 <usb_midi_read+0x12>
			usb_free(rx_packet);
    2982:	bl	2cac <usb_free>
			rx_packet = NULL;
    2986:	str	r5, [r6, #0]
			return 0;
    2988:	mov	r0, r5
    298a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    298e:	bl	2720 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    2992:	ubfx	r0, r4, #16, #8
    2996:	bl	2720 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    299a:	cmp	r6, #7
    299c:	bne.n	29a4 <usb_midi_read+0x174>
    299e:	lsrs	r0, r4, #24
    29a0:	bl	2720 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    29a4:	ldr	r3, [pc, #332]	; (2af4 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    29a6:	ldr	r2, [pc, #352]	; (2b08 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    29a8:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    29aa:	ldr	r0, [pc, #352]	; (2b0c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    29ac:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    29ae:	ldr	r5, [pc, #352]	; (2b10 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    29b0:	ldr	r2, [pc, #328]	; (2afc <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    29b2:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    29b4:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    29b6:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    29b8:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    29ba:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    29bc:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    29be:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    29c0:	cbz	r4, 2a06 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    29c2:	movs	r2, #1
    29c4:	ldr	r0, [pc, #332]	; (2b14 <usb_midi_read+0x2e4>)
    29c6:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    29c8:	movs	r0, #1
    29ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    29ce:	cmp	r3, #8
    29d0:	bne.w	28b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    29d4:	ldr	r3, [pc, #320]	; (2b18 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    29d6:	ldr	r2, [pc, #292]	; (2afc <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    29d8:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    29da:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    29dc:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    29e0:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    29e2:	uxtb	r5, r5
    29e4:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    29e6:	cbz	r3, 2a44 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    29e8:	mov	r0, r5
    29ea:	mov	r2, r4
    29ec:	mov	r1, r6
    29ee:	blx	r3
    29f0:	b.n	2a44 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    29f2:	cmp	r6, #11
    29f4:	bne.n	2a1a <usb_midi_read+0x1ea>
    29f6:	cmp	r3, #11
    29f8:	bne.w	28b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    29fc:	ldr	r3, [pc, #284]	; (2b1c <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    29fe:	ldr	r2, [pc, #252]	; (2afc <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    2a00:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2a02:	movs	r1, #176	; 0xb0
    2a04:	b.n	29dc <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    2a06:	ldr	r3, [pc, #280]	; (2b20 <usb_midi_read+0x2f0>)
    2a08:	ldr	r3, [r3, #0]
    2a0a:	cmp	r3, #0
    2a0c:	beq.w	2c06 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    2a10:	ldr	r0, [pc, #256]	; (2b14 <usb_midi_read+0x2e4>)
    2a12:	blx	r3
		}
		return 1;
    2a14:	movs	r0, #1
    2a16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    2a1a:	cmp	r6, #12
    2a1c:	bne.w	2c20 <usb_midi_read+0x3f0>
    2a20:	cmp	r3, #12
    2a22:	bne.w	28b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2a26:	ldr	r3, [pc, #252]	; (2b24 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2a28:	ldr	r2, [pc, #208]	; (2afc <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    2a2a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2a2c:	movs	r1, #192	; 0xc0
    2a2e:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2a30:	uxtb	r5, r5
    2a32:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2a36:	cmp	r3, #0
    2a38:	beq.w	2bcc <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2a3c:	mov	r0, r5
    2a3e:	mov	r1, r6
    2a40:	lsrs	r4, r4, #24
    2a42:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2a44:	ldr	r1, [pc, #224]	; (2b28 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2a46:	ldr	r2, [pc, #196]	; (2b0c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2a48:	ldr	r3, [pc, #196]	; (2b10 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2a4a:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2a4c:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    2a4e:	strb	r4, [r3, #0]
		return 1;
    2a50:	movs	r0, #1
    2a52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2a56:	ldr	r3, [pc, #212]	; (2b2c <usb_midi_read+0x2fc>)
    2a58:	ldr	r3, [r3, #0]
    2a5a:	cmp	r3, #0
    2a5c:	beq.w	2c0c <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2a60:	blx	r3
    2a62:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2a66:	ldr	r3, [pc, #148]	; (2afc <usb_midi_read+0x2cc>)
    2a68:	uxtb	r5, r5
    2a6a:	lsrs	r4, r4, #24
    2a6c:	strb.w	r8, [r3]
		goto return_message;
    2a70:	b.n	2a44 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    2a72:	ldr	r3, [pc, #188]	; (2b30 <usb_midi_read+0x300>)
    2a74:	ldr	r3, [r3, #0]
    2a76:	cmp	r3, #0
    2a78:	bne.n	2a60 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2a7a:	ldr	r3, [pc, #184]	; (2b34 <usb_midi_read+0x304>)
    2a7c:	ldr	r3, [r3, #0]
    2a7e:	cbz	r3, 2aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2a80:	movs	r0, #254	; 0xfe
    2a82:	blx	r3
    2a84:	ubfx	r6, r4, #16, #8
    2a88:	b.n	2a66 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2a8a:	ldr	r3, [pc, #172]	; (2b38 <usb_midi_read+0x308>)
    2a8c:	ldr	r3, [r3, #0]
    2a8e:	cmp	r3, #0
    2a90:	bne.n	2a60 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    2a92:	ldr	r3, [pc, #160]	; (2b34 <usb_midi_read+0x304>)
    2a94:	ldr	r3, [r3, #0]
    2a96:	cbz	r3, 2aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2a98:	movs	r0, #252	; 0xfc
    2a9a:	blx	r3
    2a9c:	ubfx	r6, r4, #16, #8
    2aa0:	b.n	2a66 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    2aa2:	ldr	r3, [pc, #152]	; (2b3c <usb_midi_read+0x30c>)
    2aa4:	ldr	r3, [r3, #0]
    2aa6:	cmp	r3, #0
    2aa8:	bne.n	2a60 <usb_midi_read+0x230>
    2aaa:	ubfx	r6, r4, #16, #8
    2aae:	b.n	2a66 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2ab0:	ldr	r3, [pc, #140]	; (2b40 <usb_midi_read+0x310>)
    2ab2:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    2ab4:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2ab8:	cmp	r3, #0
    2aba:	beq.n	2a66 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2abc:	mov	r0, r6
    2abe:	blx	r3
    2ac0:	b.n	2a66 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    2ac2:	ldr	r3, [pc, #128]	; (2b44 <usb_midi_read+0x314>)
    2ac4:	ldr	r2, [r3, #0]
    2ac6:	cmp	r2, #0
    2ac8:	beq.n	2aaa <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2aca:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2acc:	lsrs	r3, r4, #17
    2ace:	and.w	r0, r6, #127	; 0x7f
    2ad2:	and.w	r3, r3, #16256	; 0x3f80
    2ad6:	orrs	r0, r3
    2ad8:	uxtb	r6, r6
    2ada:	blx	r2
    2adc:	b.n	2a66 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2ade:	ldr	r3, [pc, #104]	; (2b48 <usb_midi_read+0x318>)
    2ae0:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    2ae2:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2ae6:	cmp	r3, #0
    2ae8:	bne.n	2abc <usb_midi_read+0x28c>
    2aea:	b.n	2a66 <usb_midi_read+0x236>
    2aec:	.word	0x1fff1894
    2af0:	.word	0x1fff1d06
    2af4:	.word	0x1fff1d02
    2af8:	.word	0x1fff1870
    2afc:	.word	0x1fff1d00
    2b00:	.word	0x1fff18a4
    2b04:	.word	0x1fff1998
    2b08:	.word	0x1fff186c
    2b0c:	.word	0x1fff1d04
    2b10:	.word	0x1fff1d05
    2b14:	.word	0x1fff1d08
    2b18:	.word	0x1fff189c
    2b1c:	.word	0x1fff18a0
    2b20:	.word	0x1fff1884
    2b24:	.word	0x1fff1860
    2b28:	.word	0x1fff1d07
    2b2c:	.word	0x1fff184c
    2b30:	.word	0x1fff1850
    2b34:	.word	0x1fff1854
    2b38:	.word	0x1fff1890
    2b3c:	.word	0x1fff1880
    2b40:	.word	0x1fff1898
    2b44:	.word	0x1fff1868
    2b48:	.word	0x1fff187c
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2b4c:	ldr	r3, [pc, #252]	; (2c4c <usb_midi_read+0x41c>)
    2b4e:	ldr	r3, [r3, #0]
    2b50:	cmp	r3, #0
    2b52:	bne.n	2a60 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2b54:	ldr	r3, [pc, #248]	; (2c50 <usb_midi_read+0x420>)
    2b56:	ldr	r3, [r3, #0]
    2b58:	cmp	r3, #0
    2b5a:	beq.n	2aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2b5c:	movs	r0, #250	; 0xfa
    2b5e:	blx	r3
    2b60:	ubfx	r6, r4, #16, #8
    2b64:	b.n	2a66 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2b66:	ldr	r3, [pc, #236]	; (2c54 <usb_midi_read+0x424>)
    2b68:	ldr	r3, [r3, #0]
    2b6a:	cmp	r3, #0
    2b6c:	bne.w	2a60 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2b70:	ldr	r3, [pc, #220]	; (2c50 <usb_midi_read+0x420>)
    2b72:	ldr	r3, [r3, #0]
    2b74:	cmp	r3, #0
    2b76:	beq.n	2aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2b78:	movs	r0, #251	; 0xfb
    2b7a:	blx	r3
    2b7c:	ubfx	r6, r4, #16, #8
    2b80:	b.n	2a66 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2b82:	ldr	r3, [pc, #212]	; (2c58 <usb_midi_read+0x428>)
    2b84:	ldr	r3, [r3, #0]
    2b86:	cmp	r3, #0
    2b88:	bne.w	2a60 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2b8c:	ldr	r3, [pc, #192]	; (2c50 <usb_midi_read+0x420>)
    2b8e:	ldr	r3, [r3, #0]
    2b90:	cmp	r3, #0
    2b92:	beq.n	2aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2b94:	movs	r0, #248	; 0xf8
    2b96:	blx	r3
    2b98:	ubfx	r6, r4, #16, #8
    2b9c:	b.n	2a66 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2b9e:	cmp	r3, #14
    2ba0:	bne.w	28b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2ba4:	ldr	r2, [pc, #180]	; (2c5c <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2ba6:	ldr	r3, [pc, #184]	; (2c60 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2ba8:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2baa:	movs	r1, #224	; 0xe0
    2bac:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    2bae:	cmp	r2, #0
    2bb0:	beq.n	2c42 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    2bb2:	lsrs	r6, r4, #16
    2bb4:	lsrs	r1, r4, #17
    2bb6:	and.w	r3, r6, #127	; 0x7f
    2bba:	and.w	r1, r1, #16256	; 0x3f80
    2bbe:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    2bc0:	uxtb	r5, r5
    2bc2:	sub.w	r1, r1, #8192	; 0x2000
    2bc6:	mov	r0, r5
    2bc8:	blx	r2
    2bca:	uxtb	r6, r6
    2bcc:	lsrs	r4, r4, #24
    2bce:	b.n	2a44 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    2bd0:	bl	2720 <sysex_byte>
		sysex_byte(n >> 16);
    2bd4:	ubfx	r0, r4, #16, #8
    2bd8:	bl	2720 <sysex_byte>
		sysex_byte(n >> 24);
    2bdc:	lsrs	r0, r4, #24
    2bde:	bl	2720 <sysex_byte>
		return 0;
    2be2:	movs	r0, #0
    2be4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2be8:	ldr	r3, [pc, #120]	; (2c64 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2bea:	ldr	r2, [pc, #116]	; (2c60 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    2bec:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2bee:	movs	r1, #128	; 0x80
    2bf0:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2bf2:	uxtb	r5, r5
    2bf4:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2bf8:	cbz	r3, 2c1c <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2bfa:	mov	r1, r6
    2bfc:	mov	r0, r5
    2bfe:	mov	r2, r7
    2c00:	blx	r3
    2c02:	mov	r4, r7
    2c04:	b.n	2a44 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2c06:	movs	r0, #1
    2c08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2c0c:	ldr	r3, [pc, #64]	; (2c50 <usb_midi_read+0x420>)
    2c0e:	ldr	r3, [r3, #0]
    2c10:	cmp	r3, #0
    2c12:	beq.w	2aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    2c16:	movs	r0, #255	; 0xff
    2c18:	blx	r3
    2c1a:	b.n	2aaa <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2c1c:	mov	r4, r3
    2c1e:	b.n	2a44 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2c20:	cmp	r6, #13
    2c22:	bne.n	2b9e <usb_midi_read+0x36e>
    2c24:	cmp	r3, #13
    2c26:	bne.w	28b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2c2a:	ldr	r3, [pc, #60]	; (2c68 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2c2c:	ldr	r2, [pc, #48]	; (2c60 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2c2e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2c30:	movs	r1, #208	; 0xd0
    2c32:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2c34:	uxtb	r5, r5
    2c36:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2c3a:	cmp	r3, #0
    2c3c:	bne.w	2a3c <usb_midi_read+0x20c>
    2c40:	b.n	2bcc <usb_midi_read+0x39c>
    2c42:	ubfx	r6, r4, #16, #8
    2c46:	uxtb	r5, r5
    2c48:	lsrs	r4, r4, #24
    2c4a:	b.n	2a44 <usb_midi_read+0x214>
    2c4c:	.word	0x1fff1878
    2c50:	.word	0x1fff1854
    2c54:	.word	0x1fff1858
    2c58:	.word	0x1fff1848
    2c5c:	.word	0x1fff1864
    2c60:	.word	0x1fff1d00
    2c64:	.word	0x1fff189c
    2c68:	.word	0x1fff1874

00002c6c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2c6c:	cpsid	i
	avail = usb_buffer_available;
    2c6e:	ldr	r0, [pc, #52]	; (2ca4 <usb_malloc+0x38>)
    2c70:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2c72:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2c76:	cmp	r3, #29
    2c78:	bgt.n	2c9c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2c7a:	mov.w	r1, #2147483648	; 0x80000000
    2c7e:	lsrs	r1, r3
    2c80:	bic.w	r2, r2, r1
    2c84:	str	r2, [r0, #0]
	__enable_irq();
    2c86:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2c88:	ldr	r0, [pc, #28]	; (2ca8 <usb_malloc+0x3c>)
    2c8a:	add.w	r3, r3, r3, lsl #3
    2c8e:	lsls	r3, r3, #3
    2c90:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2c92:	movs	r1, #0
    2c94:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2c96:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2c98:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2c9a:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2c9c:	cpsie	i
		return NULL;
    2c9e:	movs	r0, #0
    2ca0:	bx	lr
    2ca2:	nop
    2ca4:	.word	0x1fff0c5c
    2ca8:	.word	0x1fff03d0

00002cac <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2cac:	ldr	r3, [pc, #52]	; (2ce4 <usb_free+0x38>)
    2cae:	ldr	r2, [pc, #56]	; (2ce8 <usb_free+0x3c>)
    2cb0:	subs	r3, r0, r3
    2cb2:	umull	r2, r3, r2, r3
    2cb6:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2cb8:	cmp	r3, #29
    2cba:	bhi.n	2cd6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2cbc:	ldr	r2, [pc, #44]	; (2cec <usb_free+0x40>)
    2cbe:	ldrb	r2, [r2, #0]
    2cc0:	cbnz	r2, 2cd8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2cc2:	cpsid	i
	usb_buffer_available |= mask;
    2cc4:	ldr	r0, [pc, #40]	; (2cf0 <usb_free+0x44>)
    2cc6:	mov.w	r1, #2147483648	; 0x80000000
    2cca:	ldr	r2, [r0, #0]
    2ccc:	lsr.w	r3, r1, r3
    2cd0:	orrs	r2, r3
    2cd2:	str	r2, [r0, #0]
	__enable_irq();
    2cd4:	cpsie	i
    2cd6:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2cd8:	ldr	r2, [pc, #24]	; (2cf4 <usb_free+0x48>)
    2cda:	ldrb	r2, [r2, #0]
    2cdc:	cmp	r2, #0
    2cde:	beq.n	2cc2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2ce0:	b.w	2d60 <usb_rx_memory>
    2ce4:	.word	0x1fff03d0
    2ce8:	.word	0x38e38e39
    2cec:	.word	0x1fff198d
    2cf0:	.word	0x1fff0c5c
    2cf4:	.word	0x1fff1998

00002cf8 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2cf8:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2cfa:	cmp	r3, #4
    2cfc:	bhi.n	2d28 <usb_rx+0x30>
	__disable_irq();
    2cfe:	cpsid	i
	ret = rx_first[endpoint];
    2d00:	ldr	r1, [pc, #40]	; (2d2c <usb_rx+0x34>)
    2d02:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2d06:	cbz	r0, 2d24 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2d08:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2d0a:	ldr	r4, [pc, #36]	; (2d30 <usb_rx+0x38>)
    2d0c:	ldrh	r5, [r0, #0]
    2d0e:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2d12:	ldr	r6, [r0, #4]
    2d14:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2d18:	subs	r2, r2, r5
    2d1a:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2d1e:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2d20:	pop	{r4, r5, r6}
    2d22:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2d24:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2d26:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2d28:	movs	r0, #0
    2d2a:	bx	lr
    2d2c:	.word	0x1fff1904
    2d30:	.word	0x1fff1e2c

00002d34 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2d34:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2d36:	cmp	r0, #4
    2d38:	bhi.n	2d52 <usb_tx_packet_count+0x1e>
	__disable_irq();
    2d3a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2d3c:	ldr	r3, [pc, #28]	; (2d5c <usb_tx_packet_count+0x28>)
    2d3e:	ldr.w	r3, [r3, r0, lsl #2]
    2d42:	cbz	r3, 2d56 <usb_tx_packet_count+0x22>
    2d44:	movs	r0, #0
    2d46:	ldr	r3, [r3, #4]
    2d48:	adds	r0, #1
    2d4a:	cmp	r3, #0
    2d4c:	bne.n	2d46 <usb_tx_packet_count+0x12>
	__enable_irq();
    2d4e:	cpsie	i
	return count;
    2d50:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2d52:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2d54:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2d56:	mov	r0, r3
    2d58:	b.n	2d4e <usb_tx_packet_count+0x1a>
    2d5a:	nop
    2d5c:	.word	0x1fff195c

00002d60 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2d60:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2d62:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d64:	ldr	r2, [pc, #204]	; (2e34 <usb_rx_memory+0xd4>)
    2d66:	ldrb	r3, [r2, #0]
    2d68:	lsls	r3, r3, #28
    2d6a:	bpl.n	2d7a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d6c:	ldr	r3, [pc, #200]	; (2e38 <usb_rx_memory+0xd8>)
    2d6e:	ldr	r1, [r3, #32]
    2d70:	cmp	r1, #0
    2d72:	beq.n	2dfc <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d74:	ldr	r1, [r3, #40]	; 0x28
    2d76:	cmp	r1, #0
    2d78:	beq.n	2e18 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d7a:	ldrb	r3, [r2, #1]
    2d7c:	lsls	r5, r3, #28
    2d7e:	bpl.n	2d8e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d80:	ldr	r3, [pc, #180]	; (2e38 <usb_rx_memory+0xd8>)
    2d82:	ldr	r1, [r3, #64]	; 0x40
    2d84:	cmp	r1, #0
    2d86:	beq.n	2e24 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d88:	ldr	r1, [r3, #72]	; 0x48
    2d8a:	cmp	r1, #0
    2d8c:	beq.n	2e1c <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d8e:	ldrb	r3, [r2, #2]
    2d90:	lsls	r4, r3, #28
    2d92:	bpl.n	2da2 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d94:	ldr	r3, [pc, #160]	; (2e38 <usb_rx_memory+0xd8>)
    2d96:	ldr	r1, [r3, #96]	; 0x60
    2d98:	cmp	r1, #0
    2d9a:	beq.n	2e28 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d9c:	ldr	r1, [r3, #104]	; 0x68
    2d9e:	cmp	r1, #0
    2da0:	beq.n	2e20 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2da2:	ldrb	r3, [r2, #3]
    2da4:	lsls	r1, r3, #28
    2da6:	bpl.n	2db8 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2da8:	ldr	r3, [pc, #140]	; (2e38 <usb_rx_memory+0xd8>)
    2daa:	ldr.w	r1, [r3, #128]	; 0x80
    2dae:	cmp	r1, #0
    2db0:	beq.n	2e30 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2db2:	ldr.w	r1, [r3, #136]	; 0x88
    2db6:	cbz	r1, 2dde <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2db8:	ldrb	r3, [r2, #4]
    2dba:	lsls	r3, r3, #28
    2dbc:	bpl.n	2dd0 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2dbe:	ldr	r3, [pc, #120]	; (2e38 <usb_rx_memory+0xd8>)
    2dc0:	ldr.w	r2, [r3, #160]	; 0xa0
    2dc4:	cmp	r2, #0
    2dc6:	beq.n	2e2c <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2dc8:	ldr.w	r2, [r3, #168]	; 0xa8
    2dcc:	movs	r4, #21
    2dce:	cbz	r2, 2de0 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2dd0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2dd2:	ldr	r3, [pc, #104]	; (2e3c <usb_rx_memory+0xdc>)
    2dd4:	movs	r2, #0
    2dd6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2dd8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2dda:	b.w	2cac <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2dde:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2de0:	ldr	r1, [pc, #88]	; (2e3c <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2de2:	ldr	r5, [pc, #92]	; (2e40 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2de4:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2de6:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2dea:	add.w	r3, r3, r4, lsl #3
    2dee:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2df0:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2df2:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2df4:	strb	r2, [r1, #0]
				__enable_irq();
    2df6:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2df8:	pop	{r4, r5}
    2dfa:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2dfc:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2dfe:	ldr	r4, [pc, #60]	; (2e3c <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2e00:	ldr	r5, [pc, #64]	; (2e44 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2e02:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2e04:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2e08:	add.w	r3, r3, r2, lsl #3
    2e0c:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2e0e:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2e10:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2e12:	strb	r2, [r4, #0]
				__enable_irq();
    2e14:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2e16:	b.n	2df8 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2e18:	movs	r4, #5
    2e1a:	b.n	2de0 <usb_rx_memory+0x80>
    2e1c:	movs	r4, #9
    2e1e:	b.n	2de0 <usb_rx_memory+0x80>
    2e20:	movs	r4, #13
    2e22:	b.n	2de0 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2e24:	movs	r2, #8
    2e26:	b.n	2dfe <usb_rx_memory+0x9e>
    2e28:	movs	r2, #12
    2e2a:	b.n	2dfe <usb_rx_memory+0x9e>
    2e2c:	movs	r2, #20
    2e2e:	b.n	2dfe <usb_rx_memory+0x9e>
    2e30:	movs	r2, #16
    2e32:	b.n	2dfe <usb_rx_memory+0x9e>
    2e34:	.word	0x000050d8
    2e38:	.word	0x1fff0000
    2e3c:	.word	0x1fff198d
    2e40:	.word	0x004000c8
    2e44:	.word	0x00400088

00002e48 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2e48:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2e4a:	cmp	r3, #4
    2e4c:	bhi.n	2e8a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2e4e:	ldr	r2, [pc, #108]	; (2ebc <usb_tx+0x74>)
    2e50:	lsls	r0, r0, #5
    2e52:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2e56:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2e58:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2e5a:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2e5c:	ldr	r4, [pc, #96]	; (2ec0 <usb_tx+0x78>)
    2e5e:	ldrb	r2, [r4, r3]
    2e60:	cmp	r2, #3
    2e62:	bhi.n	2e9c <usb_tx+0x54>
    2e64:	tbb	[pc, r2]
    2e68:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2e6c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e6e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2e70:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e72:	tst.w	r0, #8
    2e76:	ite	ne
    2e78:	movne	r3, #200	; 0xc8
    2e7a:	moveq	r3, #136	; 0x88
    2e7c:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2e80:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e82:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2e84:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2e86:	cpsie	i
}
    2e88:	pop	{r4, r5}
    2e8a:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2e8c:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2e8e:	movs	r2, #2
		break;
    2e90:	b.n	2e6e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2e92:	movs	r2, #5
    2e94:	b.n	2e6e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2e96:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2e98:	movs	r2, #4
		break;
    2e9a:	b.n	2e6e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2e9c:	ldr	r2, [pc, #36]	; (2ec4 <usb_tx+0x7c>)
    2e9e:	ldr.w	r0, [r2, r3, lsl #2]
    2ea2:	cbz	r0, 2eb4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2ea4:	ldr	r2, [pc, #32]	; (2ec8 <usb_tx+0x80>)
    2ea6:	ldr.w	r0, [r2, r3, lsl #2]
    2eaa:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2eac:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2eb0:	cpsie	i
		return;
    2eb2:	b.n	2e88 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2eb4:	str.w	r1, [r2, r3, lsl #2]
    2eb8:	ldr	r2, [pc, #12]	; (2ec8 <usb_tx+0x80>)
    2eba:	b.n	2eac <usb_tx+0x64>
    2ebc:	.word	0x1fff0000
    2ec0:	.word	0x1fff199c
    2ec4:	.word	0x1fff195c
    2ec8:	.word	0x1fff1970

00002ecc <usb_isr>:
}



void usb_isr(void)
{
    2ecc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2ed0:	ldr.w	fp, [pc, #776]	; 31dc <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2ed4:	ldr.w	sl, [pc, #776]	; 31e0 <usb_isr+0x314>
}



void usb_isr(void)
{
    2ed8:	sub	sp, #28
    2eda:	b.n	2f66 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2edc:	ldr	r7, [pc, #680]	; (3188 <usb_isr+0x2bc>)
    2ede:	mov.w	r8, r3, lsr #2
    2ee2:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2ee6:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2ee8:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2eec:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2ef0:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2ef2:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2ef6:	and.w	r4, r3, #255	; 0xff
    2efa:	cmp	r3, #0
    2efc:	bne.w	3100 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2f00:	ldr.w	r3, [r7, r8, lsl #3]
    2f04:	lsrs	r3, r3, #16
    2f06:	uxth	r1, r3
    2f08:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2f0c:	cmp	r3, #0
    2f0e:	beq.w	30ee <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2f12:	ldr	r3, [pc, #632]	; (318c <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2f14:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2f18:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2f1c:	ldr.w	r2, [r3, r6, lsl #2]
    2f20:	cmp	r2, #0
    2f22:	beq.w	3390 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2f26:	ldr	r5, [pc, #616]	; (3190 <usb_isr+0x2c4>)
    2f28:	ldr.w	r3, [r5, r6, lsl #2]
    2f2c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2f2e:	ldr	r4, [pc, #612]	; (3194 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2f30:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2f34:	ldrh.w	r3, [r4, r6, lsl #1]
    2f38:	add	r1, r3
    2f3a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2f3e:	bl	2c6c <usb_malloc>
					if (packet) {
    2f42:	cmp	r0, #0
    2f44:	beq.w	3382 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2f48:	ldr	r2, [pc, #588]	; (3198 <usb_isr+0x2cc>)
    2f4a:	ldr	r3, [pc, #592]	; (319c <usb_isr+0x2d0>)
    2f4c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2f50:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2f54:	it	ne
    2f56:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2f58:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2f5c:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2f60:	movs	r3, #8
    2f62:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2f66:	ldrb.w	r4, [fp]
    2f6a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2f6c:	lsls	r0, r4, #29
    2f6e:	bpl.n	2faa <usb_isr+0xde>
		if (usb_configuration) {
    2f70:	ldr	r3, [pc, #556]	; (31a0 <usb_isr+0x2d4>)
    2f72:	ldrb	r3, [r3, #0]
    2f74:	cbz	r3, 2fa4 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2f76:	ldr	r1, [pc, #556]	; (31a4 <usb_isr+0x2d8>)
    2f78:	ldrb	r2, [r1, #0]
			if (t) {
    2f7a:	and.w	r3, r2, #255	; 0xff
    2f7e:	cbz	r2, 2f8a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2f80:	subs	r3, #1
    2f82:	uxtb	r3, r3
    2f84:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2f86:	cbnz	r3, 2f8a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2f88:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2f8a:	ldr	r1, [pc, #540]	; (31a8 <usb_isr+0x2dc>)
    2f8c:	ldrb	r2, [r1, #0]
			if (t) {
    2f8e:	and.w	r3, r2, #255	; 0xff
    2f92:	cbz	r2, 2fa0 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2f94:	subs	r3, #1
    2f96:	uxtb	r3, r3
    2f98:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2f9a:	cmp	r3, #0
    2f9c:	beq.w	332e <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2fa0:	bl	2804 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2fa4:	movs	r3, #4
    2fa6:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2faa:	and.w	r3, r4, #8
    2fae:	and.w	r2, r3, #255	; 0xff
    2fb2:	cmp	r3, #0
    2fb4:	beq.w	3148 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2fb8:	ldrb.w	r3, [sl]
    2fbc:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2fbe:	lsrs	r6, r3, #4
    2fc0:	bne.n	2edc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2fc2:	lsrs	r4, r3, #2
    2fc4:	ldr.w	r9, [pc, #448]	; 3188 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2fc8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2fcc:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2fd0:	ubfx	r2, r2, #2, #4
    2fd4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2fd6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2fd8:	cmp	r2, #12
    2fda:	bhi.w	30e6 <usb_isr+0x21a>
    2fde:	tbb	[pc, r2]
    2fe2:	.short	0x7878
    2fe4:	.word	0x82828282
    2fe8:	.word	0x82438282
    2fec:	.short	0x8282
    2fee:	.byte	0x07
    2fef:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2ff0:	ldr	r0, [r1, #0]
    2ff2:	ldr	r5, [pc, #440]	; (31ac <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2ff4:	ldr	r3, [pc, #416]	; (3198 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2ff6:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2ff8:	ldr	r7, [pc, #436]	; (31b0 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2ffa:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2ffe:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3000:	ldr	r6, [pc, #432]	; (31b4 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    3002:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3004:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3008:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    300a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    300c:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    300e:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3012:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3014:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    3018:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    301c:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    301e:	bhi.w	31e4 <usb_isr+0x318>
    3022:	cmp.w	r1, #1664	; 0x680
    3026:	bcs.w	3650 <usb_isr+0x784>
    302a:	cmp.w	r1, #258	; 0x102
    302e:	beq.w	33fe <usb_isr+0x532>
    3032:	bhi.w	33c8 <usb_isr+0x4fc>
    3036:	cmp	r1, #128	; 0x80
    3038:	beq.w	3684 <usb_isr+0x7b8>
    303c:	cmp	r1, #130	; 0x82
    303e:	bne.w	340a <usb_isr+0x53e>
    3042:	ldrh	r1, [r5, #4]
    3044:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3048:	cmp	r1, #5
    304a:	bhi.w	340a <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    304e:	ldr	r3, [pc, #360]	; (31b8 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3050:	ldr	r4, [pc, #360]	; (31bc <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3052:	lsls	r1, r1, #2
    3054:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3056:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3058:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    305a:	ldrb	r2, [r3, #0]
    305c:	lsls	r3, r2, #30
    305e:	bpl.w	3794 <usb_isr+0x8c8>
    3062:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    3064:	movs	r0, #2
    3066:	b.n	3492 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3068:	ldr	r7, [pc, #324]	; (31b0 <usb_isr+0x2e4>)
    306a:	ldr	r2, [r7, #0]
		if (data) {
    306c:	cbz	r2, 30bc <usb_isr+0x1f0>
			size = ep0_tx_len;
    306e:	ldr	r3, [pc, #336]	; (31c0 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3070:	ldr	r6, [pc, #320]	; (31b4 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3072:	ldr	r1, [pc, #336]	; (31c4 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3074:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3076:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3078:	ldrb	r5, [r1, #0]
    307a:	cmp	r0, #64	; 0x40
    307c:	mov	lr, r0
    307e:	orr.w	r8, r5, #2
    3082:	it	cs
    3084:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3088:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    308a:	eor.w	r4, r4, #1
    308e:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3090:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3094:	ite	eq
    3096:	moveq	r4, #136	; 0x88
    3098:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    309a:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    309e:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    30a0:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30a4:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    30a8:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    30aa:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30ac:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    30b0:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    30b2:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    30b4:	cmp	r0, #0
    30b6:	beq.w	3226 <usb_isr+0x35a>
    30ba:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    30bc:	ldr	r3, [pc, #236]	; (31ac <usb_isr+0x2e0>)
    30be:	ldrh	r2, [r3, #0]
    30c0:	cmp.w	r2, #1280	; 0x500
    30c4:	bne.n	30e6 <usb_isr+0x21a>
			setup.bRequest = 0;
    30c6:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    30c8:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    30ca:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    30cc:	ldr	r3, [pc, #248]	; (31c8 <usb_isr+0x2fc>)
    30ce:	strb	r2, [r3, #0]
    30d0:	b.n	30e6 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    30d2:	ldr	r2, [pc, #216]	; (31ac <usb_isr+0x2e0>)
    30d4:	ldrh	r0, [r2, #0]
    30d6:	movw	r2, #8225	; 0x2021
    30da:	cmp	r0, r2
    30dc:	beq.w	3230 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    30e0:	ldr	r2, [pc, #180]	; (3198 <usb_isr+0x2cc>)
    30e2:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    30e6:	ldr	r2, [pc, #228]	; (31cc <usb_isr+0x300>)
    30e8:	movs	r3, #1
    30ea:	strb	r3, [r2, #0]
    30ec:	b.n	2f60 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    30ee:	ldr	r2, [pc, #168]	; (3198 <usb_isr+0x2cc>)
    30f0:	ldr	r3, [pc, #168]	; (319c <usb_isr+0x2d0>)
    30f2:	tst.w	r9, #8
    30f6:	it	ne
    30f8:	movne	r3, r2
    30fa:	str.w	r3, [r7, r8, lsl #3]
    30fe:	b.n	2f60 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    3100:	bl	2cac <usb_free>
				packet = tx_first[endpoint];
    3104:	ldr	r2, [pc, #200]	; (31d0 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3106:	ldr	r1, [pc, #204]	; (31d4 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    3108:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    310c:	cmp	r3, #0
    310e:	beq.w	3398 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3112:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3114:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3116:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    311a:	add.w	r2, r3, #8
    311e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    3122:	cmp	r4, #3
    3124:	bhi.n	3132 <usb_isr+0x266>
    3126:	tbb	[pc, r4]
    312a:	.short	0x022c
    312c:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    312e:	movs	r2, #2
    3130:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    3132:	ldrh	r2, [r3, #0]
    3134:	tst.w	r9, #8
    3138:	ite	eq
    313a:	moveq	r3, #136	; 0x88
    313c:	movne	r3, #200	; 0xc8
    313e:	orr.w	r3, r3, r2, lsl #16
    3142:	str.w	r3, [r7, r8, lsl #3]
    3146:	b.n	2f60 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3148:	lsls	r0, r4, #31
    314a:	bmi.w	3334 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    314e:	lsls	r1, r4, #24
    3150:	bmi.w	33b4 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3154:	lsls	r2, r4, #30
    3156:	bpl.n	3166 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    3158:	ldr	r2, [pc, #124]	; (31d8 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    315a:	ldr	r1, [pc, #128]	; (31dc <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    315c:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    315e:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3160:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    3162:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3164:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    3166:	lsls	r3, r4, #27
    3168:	bpl.n	3170 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    316a:	ldr	r3, [pc, #112]	; (31dc <usb_isr+0x310>)
    316c:	movs	r2, #16
    316e:	strb	r2, [r3, #0]
	}

}
    3170:	add	sp, #28
    3172:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3176:	movs	r2, #4
    3178:	strb	r2, [r1, r6]
						break;
    317a:	b.n	3132 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    317c:	movs	r2, #5
    317e:	strb	r2, [r1, r6]
						break;
    3180:	b.n	3132 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3182:	movs	r2, #3
    3184:	strb	r2, [r1, r6]
						break;
    3186:	b.n	3132 <usb_isr+0x266>
    3188:	.word	0x1fff0000
    318c:	.word	0x1fff1904
    3190:	.word	0x1fff18ac
    3194:	.word	0x1fff1e2c
    3198:	.word	0x004000c8
    319c:	.word	0x00400088
    31a0:	.word	0x1fff1998
    31a4:	.word	0x1fff1919
    31a8:	.word	0x1fff182c
    31ac:	.word	0x1fff1984
    31b0:	.word	0x1fff18a8
    31b4:	.word	0x1fff1918
    31b8:	.word	0x400720c0
    31bc:	.word	0x1fff1990
    31c0:	.word	0x1fff18c0
    31c4:	.word	0x1fff198c
    31c8:	.word	0x40072098
    31cc:	.word	0x40072094
    31d0:	.word	0x1fff195c
    31d4:	.word	0x1fff199c
    31d8:	.word	0x40072088
    31dc:	.word	0x40072080
    31e0:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    31e4:	movw	r4, #8225	; 0x2021
    31e8:	cmp	r1, r4
    31ea:	beq.w	3326 <usb_isr+0x45a>
    31ee:	bhi.n	3284 <usb_isr+0x3b8>
    31f0:	cmp.w	r1, #2176	; 0x880
    31f4:	beq.w	348a <usb_isr+0x5be>
    31f8:	cmp.w	r1, #2304	; 0x900
    31fc:	bne.w	340a <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3200:	ldr	r2, [pc, #712]	; (34cc <usb_isr+0x600>)
    3202:	ldr	r4, [pc, #716]	; (34d0 <usb_isr+0x604>)
    3204:	ldrb	r1, [r5, #2]
    3206:	strb	r1, [r2, #0]
    3208:	add.w	r5, r4, #160	; 0xa0
    320c:	b.n	3216 <usb_isr+0x34a>
    320e:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3210:	cmp	r5, r4
    3212:	beq.w	3528 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    3216:	ldr	r3, [r4, #32]
    3218:	lsls	r1, r3, #24
    321a:	bpl.n	320e <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    321c:	ldr	r0, [r4, #36]	; 0x24
    321e:	subs	r0, #8
    3220:	bl	2cac <usb_free>
    3224:	b.n	320e <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3226:	cmp.w	lr, #64	; 0x40
    322a:	it	ne
    322c:	movne	r2, #0
    322e:	b.n	30ba <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3230:	ldr	r2, [pc, #672]	; (34d4 <usb_isr+0x608>)
    3232:	ldrb	r5, [r1, #0]
    3234:	ldrb	r0, [r1, #1]
    3236:	strb	r5, [r2, #0]
    3238:	strb	r0, [r2, #1]
    323a:	ldrb	r5, [r1, #2]
    323c:	ldrb	r0, [r1, #3]
    323e:	strb	r5, [r2, #2]
    3240:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3242:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3244:	ldrb	r5, [r1, #4]
    3246:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3248:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    324a:	ldrb	r5, [r1, #5]
    324c:	ldrb	r1, [r1, #6]
    324e:	strb	r5, [r2, #5]
    3250:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3252:	beq.w	3482 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3256:	ldr	r1, [pc, #640]	; (34d8 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3258:	ldr	r6, [pc, #640]	; (34dc <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    325a:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    325c:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    325e:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3262:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3264:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3268:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    326a:	ite	eq
    326c:	moveq	r1, #136	; 0x88
    326e:	movne	r1, #200	; 0xc8
    3270:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3274:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3278:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    327c:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    327e:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3280:	str	r1, [r2, #4]
    3282:	b.n	30e0 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3284:	movw	r4, #8737	; 0x2221
    3288:	cmp	r1, r4
    328a:	bne.w	369e <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    328e:	ldr.w	ip, [pc, #656]	; 3520 <usb_isr+0x654>
    3292:	ldr	r3, [pc, #588]	; (34e0 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3294:	ldr	r1, [pc, #588]	; (34e4 <usb_isr+0x618>)
    3296:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3298:	ldr.w	r5, [ip]
    329c:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    329e:	str	r0, [sp, #4]
    32a0:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    32a2:	movs	r0, #0
    32a4:	str	r0, [sp, #8]
    32a6:	mov	r8, r0
    32a8:	mov	ip, r0
    32aa:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32ac:	ldr	r1, [pc, #552]	; (34d8 <usb_isr+0x60c>)
    32ae:	ldrb	r5, [r1, #0]
    32b0:	orr.w	lr, r5, #2
    32b4:	add.w	r3, r9, lr, lsl #3
    32b8:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32ba:	ldr	r3, [sp, #4]
    32bc:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32be:	ldr	r3, [sp, #12]
    32c0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32c2:	ite	eq
    32c4:	moveq	r4, #136	; 0x88
    32c6:	movne	r4, #200	; 0xc8
    32c8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    32cc:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32d0:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    32d4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    32d6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32d8:	ldr.w	lr, [pc, #500]	; 34d0 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    32dc:	ldr	r3, [pc, #508]	; (34dc <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    32de:	ldr.w	r8, [pc, #504]	; 34d8 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    32e2:	cmp	r0, #0
    32e4:	bne.w	3418 <usb_isr+0x54c>
    32e8:	cmp.w	ip, #64	; 0x40
    32ec:	bne.n	3326 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32ee:	orr.w	ip, r4, #2
    32f2:	add.w	r3, r9, ip, lsl #3
    32f6:	ldr	r4, [sp, #8]
    32f8:	ldr.w	lr, [pc, #468]	; 34d0 <usb_isr+0x604>
    32fc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32fe:	cmp	r2, #0
    3300:	bne.w	3444 <usb_isr+0x578>
    3304:	lsls	r2, r0, #16
    3306:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    330a:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    330e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3312:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3314:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3316:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3318:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    331a:	cmp	r0, #64	; 0x40
    331c:	bne.n	3326 <usb_isr+0x45a>
    331e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3320:	ldr	r2, [pc, #452]	; (34e8 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3322:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3324:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3326:	ldr	r2, [pc, #452]	; (34ec <usb_isr+0x620>)
    3328:	movs	r3, #1
    332a:	strb	r3, [r2, #0]
    332c:	b.n	30e6 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    332e:	bl	208c <usb_serial_flush_callback>
    3332:	b.n	2fa0 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3334:	ldr	r3, [pc, #408]	; (34d0 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3336:	ldr	r0, [pc, #436]	; (34ec <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3338:	ldr	r1, [pc, #412]	; (34d8 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    333a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    333c:	mov.w	lr, #2
    3340:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3344:	ldr	r7, [pc, #424]	; (34f0 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3346:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3348:	ldr	r1, [pc, #424]	; (34f4 <usb_isr+0x628>)
    334a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    334c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    334e:	ldr	r6, [pc, #424]	; (34f8 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3350:	ldr	r5, [pc, #424]	; (34fc <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3352:	ldr	r4, [pc, #428]	; (3500 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3354:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3356:	movs	r1, #13
    3358:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    335a:	movs	r1, #255	; 0xff
    335c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    335e:	ldr.w	lr, [pc, #452]	; 3524 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3362:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3364:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3366:	ldr	r5, [pc, #412]	; (3504 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3368:	ldr	r2, [pc, #412]	; (3508 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    336a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    336e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3370:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3372:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3376:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3378:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    337a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    337c:	add	sp, #28
    337e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3382:	ldr	r2, [pc, #392]	; (350c <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3384:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3388:	ldrb	r3, [r2, #0]
    338a:	adds	r3, #1
    338c:	strb	r3, [r2, #0]
    338e:	b.n	2f60 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3390:	str.w	r0, [r3, r6, lsl #2]
    3394:	ldr	r5, [pc, #376]	; (3510 <usb_isr+0x644>)
    3396:	b.n	2f2e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3398:	ldrb	r3, [r1, r6]
    339a:	cmp	r3, #3
    339c:	bhi.n	3474 <usb_isr+0x5a8>
    339e:	add	r2, pc, #4	; (adr r2, 33a4 <usb_isr+0x4d8>)
    33a0:	ldr.w	pc, [r2, r3, lsl #2]
    33a4:	.word	0x00002f61
    33a8:	.word	0x00002f61
    33ac:	.word	0x000033f9
    33b0:	.word	0x000033f3
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    33b4:	ldr	r1, [pc, #312]	; (34f0 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    33b6:	ldr	r3, [pc, #324]	; (34fc <usb_isr+0x630>)
    33b8:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    33ba:	movs	r0, #13
    33bc:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    33be:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    33c0:	lsls	r2, r4, #30
    33c2:	bpl.w	3166 <usb_isr+0x29a>
    33c6:	b.n	3158 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    33c8:	movw	r2, #770	; 0x302
    33cc:	cmp	r1, r2
    33ce:	bne.w	368e <usb_isr+0x7c2>
    33d2:	ldrh	r1, [r5, #4]
    33d4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    33d8:	cmp	r1, #5
    33da:	bhi.n	340a <usb_isr+0x53e>
    33dc:	ldrh	r2, [r5, #2]
    33de:	cbnz	r2, 340a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    33e0:	ldr	r4, [pc, #268]	; (34f0 <usb_isr+0x624>)
    33e2:	str	r0, [sp, #4]
    33e4:	lsls	r1, r1, #2
    33e6:	add	r4, r1
    33e8:	ldrb	r1, [r4, #0]
    33ea:	orr.w	r1, r1, #2
    33ee:	strb	r1, [r4, #0]
    33f0:	b.n	32a2 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    33f2:	movs	r3, #1
    33f4:	strb	r3, [r1, r6]
						break;
    33f6:	b.n	2f60 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    33f8:	movs	r3, #0
    33fa:	strb	r3, [r1, r6]
						break;
    33fc:	b.n	2f60 <usb_isr+0x94>
    33fe:	ldrh	r1, [r5, #4]
    3400:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3404:	cmp	r1, #5
    3406:	bls.w	36a8 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    340a:	ldr	r2, [pc, #228]	; (34f0 <usb_isr+0x624>)
    340c:	movs	r3, #15
    340e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3410:	ldr	r2, [pc, #216]	; (34ec <usb_isr+0x620>)
    3412:	movs	r3, #1
    3414:	strb	r3, [r2, #0]
    3416:	b.n	30e6 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3418:	cmp	r0, #64	; 0x40
    341a:	bls.w	32ee <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    341e:	orr.w	r4, r4, #2
    3422:	add.w	r1, lr, r4, lsl #3
    3426:	ldr	r6, [sp, #8]
    3428:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    342a:	cbz	r2, 345c <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    342c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3430:	ldr	r2, [pc, #224]	; (3514 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3432:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3434:	mov	r3, r6
    3436:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3438:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    343c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    343e:	str.w	r2, [lr, r4, lsl #3]
    3442:	b.n	3320 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3444:	ldrb.w	r3, [sp, #4]
    3448:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    344a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    344c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    344e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3450:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3454:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3456:	str.w	r2, [lr, ip, lsl #3]
    345a:	b.n	331a <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    345c:	ldrb.w	r1, [sp, #4]
    3460:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3462:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3464:	ldr	r2, [pc, #140]	; (34f4 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3466:	strb.w	r5, [r8]
    346a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    346c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    346e:	str.w	r2, [lr, r4, lsl #3]
    3472:	b.n	3320 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3474:	tst.w	r9, #8
    3478:	ite	eq
    347a:	moveq	r3, #2
    347c:	movne	r3, #3
    347e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3480:	b.n	2f60 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3482:	ldr	r2, [pc, #148]	; (3518 <usb_isr+0x64c>)
    3484:	movs	r1, #15
    3486:	strb	r1, [r2, #0]
    3488:	b.n	3256 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    348a:	ldr	r2, [pc, #64]	; (34cc <usb_isr+0x600>)
    348c:	ldr	r4, [pc, #140]	; (351c <usb_isr+0x650>)
    348e:	ldrb	r2, [r2, #0]
    3490:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3492:	ldrh	r2, [r5, #6]
    3494:	cmp	r2, r0
    3496:	bcs.w	385c <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    349a:	ldr	r1, [pc, #60]	; (34d8 <usb_isr+0x60c>)
    349c:	ldrb	r5, [r1, #0]
    349e:	cmp	r2, #64	; 0x40
    34a0:	mov	ip, r2
    34a2:	orr.w	lr, r5, #2
    34a6:	it	cs
    34a8:	movcs.w	ip, #64	; 0x40
    34ac:	add.w	r3, r4, ip
    34b0:	add.w	r0, r9, lr, lsl #3
    34b4:	str	r3, [sp, #8]
    34b6:	movs	r3, #1
    34b8:	str	r4, [r0, #4]
    34ba:	mov.w	r8, ip, lsl #16
    34be:	rsb	r0, ip, r2
    34c2:	str	r3, [sp, #4]
    34c4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34c6:	movs	r4, #200	; 0xc8
    34c8:	b.n	32c8 <usb_isr+0x3fc>
    34ca:	nop
    34cc:	.word	0x1fff1998
    34d0:	.word	0x1fff0000
    34d4:	.word	0x1fff1cf4
    34d8:	.word	0x1fff198c
    34dc:	.word	0x1fff1918
    34e0:	.word	0x1fff1cfc
    34e4:	.word	0x1fff183c
    34e8:	.word	0x1fff18c0
    34ec:	.word	0x40072094
    34f0:	.word	0x400720c0
    34f4:	.word	0x00400088
    34f8:	.word	0x40072088
    34fc:	.word	0x40072080
    3500:	.word	0x40072098
    3504:	.word	0x1fff18c4
    3508:	.word	0x1fff191c
    350c:	.word	0x1fff198d
    3510:	.word	0x1fff18ac
    3514:	.word	0x004000c8
    3518:	.word	0x1fff1919
    351c:	.word	0x1fff1990
    3520:	.word	0x1fff1844
    3524:	.word	0x4007208c
    3528:	ldr	r4, [pc, #704]	; (37ec <usb_isr+0x920>)
    352a:	ldr	r2, [pc, #708]	; (37f0 <usb_isr+0x924>)
    352c:	ldr	r1, [pc, #708]	; (37f4 <usb_isr+0x928>)
    352e:	ldr	r0, [pc, #712]	; (37f8 <usb_isr+0x92c>)
    3530:	ldr	r5, [pc, #712]	; (37fc <usb_isr+0x930>)
    3532:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3534:	movs	r3, #0
    3536:	ldr	r4, [pc, #712]	; (3800 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3538:	str	r4, [sp, #8]
    353a:	str	r6, [sp, #20]
    353c:	str	r5, [sp, #12]
    353e:	mov	r8, r0
    3540:	mov	r4, r3
    3542:	str	r7, [sp, #16]
    3544:	mov	r6, r2
    3546:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3548:	ldr	r0, [r6, #0]
			while (p) {
    354a:	cbz	r0, 3558 <usb_isr+0x68c>
				n = p->next;
    354c:	ldr	r7, [r0, #4]
				usb_free(p);
    354e:	bl	2cac <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3552:	mov	r0, r7
    3554:	cmp	r7, #0
    3556:	bne.n	354c <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3558:	movs	r3, #0
    355a:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    355c:	ldr	r3, [sp, #12]
			p = tx_first[i];
    355e:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3560:	mov	r2, r3
    3562:	movs	r3, #0
    3564:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3568:	cbz	r0, 3576 <usb_isr+0x6aa>
				n = p->next;
    356a:	ldr	r7, [r0, #4]
				usb_free(p);
    356c:	bl	2cac <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3570:	mov	r0, r7
    3572:	cmp	r7, #0
    3574:	bne.n	356a <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3576:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3578:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    357a:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    357c:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    357e:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3582:	ldr	r2, [sp, #8]
    3584:	mov.w	r1, #0
			switch (tx_state[i]) {
    3588:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    358a:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    358e:	cmp	r3, #3
    3590:	bhi.n	35a2 <usb_isr+0x6d6>
    3592:	tbb	[pc, r3]
    3596:	.short	0x0258
    3598:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    359a:	ldr	r3, [sp, #4]
    359c:	mov.w	r2, #1
    35a0:	strb	r2, [r3, #0]
    35a2:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    35a4:	adds	r4, #1
    35a6:	adds	r3, #1
    35a8:	cmp	r4, #5
    35aa:	add.w	r6, r6, #4
    35ae:	add.w	r5, r5, #4
    35b2:	str	r3, [sp, #4]
    35b4:	bne.n	3548 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35b6:	ldr	r4, [pc, #588]	; (3804 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    35b8:	ldr	r5, [pc, #588]	; (3808 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35ba:	ldrb	r2, [r4, #0]
			*reg = epconf;
    35bc:	ldr	r3, [pc, #588]	; (380c <usb_isr+0x940>)
    35be:	ldr	r7, [sp, #16]
    35c0:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    35c2:	movs	r1, #0
    35c4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35c6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35c8:	lsls	r2, r2, #28
    35ca:	bmi.n	36c2 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35cc:	ldrb	r2, [r4, #1]
			*reg = epconf;
    35ce:	ldr	r1, [pc, #576]	; (3810 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35d0:	ldr.w	r8, [pc, #588]	; 3820 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35d4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35d6:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35d8:	mov.w	r1, #0
    35dc:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    35e0:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35e4:	bmi.w	376e <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35e8:	ldrb	r2, [r4, #2]
			*reg = epconf;
    35ea:	ldr	r1, [pc, #552]	; (3814 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35ec:	ldr.w	r8, [pc, #560]	; 3820 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35f0:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35f2:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35f4:	mov.w	r1, #0
    35f8:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    35fc:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3600:	bmi.w	3746 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3604:	ldr	r1, [pc, #528]	; (3818 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3606:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3608:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    360a:	movs	r1, #0
    360c:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3610:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3614:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3616:	ldr.w	r8, [pc, #520]	; 3820 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    361a:	bmi.n	3718 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    361c:	ldrb	r2, [r4, #4]
			*reg = epconf;
    361e:	ldr	r1, [pc, #508]	; (381c <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3620:	ldr	r4, [pc, #508]	; (3820 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3622:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3624:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3626:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3628:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    362c:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3630:	bmi.n	36ee <usb_isr+0x822>
    3632:	ldrb	r3, [r6, #0]
    3634:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3636:	movs	r1, #0
    3638:	eor.w	r2, r3, #1
    363c:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3640:	str.w	r1, [r9, #184]	; 0xb8
    3644:	b.n	32a2 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3646:	ldr	r3, [sp, #4]
    3648:	mov.w	r2, #0
    364c:	strb	r2, [r3, #0]
    364e:	b.n	35a2 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3650:	ldr	r2, [pc, #464]	; (3824 <usb_isr+0x958>)
    3652:	ldr	r4, [r2, #4]
    3654:	cmp	r4, #0
    3656:	beq.w	340a <usb_isr+0x53e>
    365a:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    365c:	ldrh.w	lr, [r5, #4]
    3660:	b.n	366c <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3662:	adds	r2, #12
			if (list->addr == NULL) break;
    3664:	ldr	r4, [r2, #4]
    3666:	cmp	r4, #0
    3668:	beq.w	340a <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    366c:	ldrh	r3, [r2, #0]
    366e:	cmp	r3, r0
    3670:	bne.n	3662 <usb_isr+0x796>
    3672:	ldrh	r3, [r2, #2]
    3674:	cmp	r3, lr
    3676:	bne.n	3662 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3678:	lsrs	r0, r0, #8
    367a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    367c:	ite	eq
    367e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3680:	ldrhne	r0, [r2, #8]
    3682:	b.n	3492 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3684:	ldr	r4, [pc, #416]	; (3828 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3686:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3688:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    368a:	strb	r2, [r4, #1]
    368c:	b.n	3492 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    368e:	cmp.w	r1, #1280	; 0x500
    3692:	bne.w	340a <usb_isr+0x53e>
    3696:	movs	r3, #1
    3698:	movs	r2, #0
    369a:	str	r3, [sp, #4]
    369c:	b.n	32a2 <usb_isr+0x3d6>
    369e:	movw	r2, #8993	; 0x2321
    36a2:	cmp	r1, r2
    36a4:	beq.n	3696 <usb_isr+0x7ca>
    36a6:	b.n	340a <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    36a8:	ldrh	r2, [r5, #2]
    36aa:	cmp	r2, #0
    36ac:	bne.w	340a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    36b0:	ldr	r4, [pc, #376]	; (382c <usb_isr+0x960>)
    36b2:	str	r0, [sp, #4]
    36b4:	lsls	r1, r1, #2
    36b6:	add	r4, r1
    36b8:	ldrb	r1, [r4, #0]
    36ba:	bic.w	r1, r1, #2
    36be:	strb	r1, [r4, #0]
    36c0:	b.n	32a2 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    36c2:	bl	2c6c <usb_malloc>
				if (p) {
    36c6:	cmp	r0, #0
    36c8:	beq.w	3838 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    36cc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36ce:	ldr	r2, [pc, #352]	; (3830 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    36d0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36d4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    36d8:	bl	2c6c <usb_malloc>
				if (p) {
    36dc:	cmp	r0, #0
    36de:	beq.n	37e0 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    36e0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    36e2:	ldr	r2, [pc, #336]	; (3834 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    36e4:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    36e8:	str.w	r2, [r9, #40]	; 0x28
    36ec:	b.n	35cc <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    36ee:	bl	2c6c <usb_malloc>
				if (p) {
    36f2:	cmp	r0, #0
    36f4:	beq.n	37a4 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    36f6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36f8:	ldr	r2, [pc, #308]	; (3830 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    36fa:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36fe:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3702:	bl	2c6c <usb_malloc>
				if (p) {
    3706:	cmp	r0, #0
    3708:	beq.n	3798 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    370a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    370c:	ldr	r2, [pc, #292]	; (3834 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    370e:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3712:	str.w	r2, [r9, #168]	; 0xa8
    3716:	b.n	3632 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3718:	bl	2c6c <usb_malloc>
				if (p) {
    371c:	cmp	r0, #0
    371e:	beq.w	3850 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3722:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3724:	ldr	r2, [pc, #264]	; (3830 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3726:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    372a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    372e:	bl	2c6c <usb_malloc>
				if (p) {
    3732:	cmp	r0, #0
    3734:	beq.w	3844 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3738:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    373a:	ldr	r2, [pc, #248]	; (3834 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    373c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3740:	str.w	r2, [r9, #136]	; 0x88
    3744:	b.n	361c <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3746:	bl	2c6c <usb_malloc>
				if (p) {
    374a:	cmp	r0, #0
    374c:	beq.n	37d4 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    374e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3750:	ldr	r2, [pc, #220]	; (3830 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3752:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3756:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    375a:	bl	2c6c <usb_malloc>
				if (p) {
    375e:	cbz	r0, 37c8 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3760:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3762:	ldr	r2, [pc, #208]	; (3834 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3764:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3768:	str.w	r2, [r9, #104]	; 0x68
    376c:	b.n	3604 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    376e:	bl	2c6c <usb_malloc>
				if (p) {
    3772:	cbz	r0, 37bc <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3774:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3776:	ldr	r2, [pc, #184]	; (3830 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3778:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    377c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3780:	bl	2c6c <usb_malloc>
				if (p) {
    3784:	cbz	r0, 37b0 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3786:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3788:	ldr	r2, [pc, #168]	; (3834 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    378a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    378e:	str.w	r2, [r9, #72]	; 0x48
    3792:	b.n	35e8 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3794:	movs	r0, #2
    3796:	b.n	3492 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3798:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    379a:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    379e:	adds	r2, #1
    37a0:	strb	r2, [r5, #0]
    37a2:	b.n	3632 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    37a4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    37a6:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    37aa:	adds	r2, #1
    37ac:	strb	r2, [r5, #0]
    37ae:	b.n	3702 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    37b0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    37b2:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    37b6:	adds	r2, #1
    37b8:	strb	r2, [r5, #0]
    37ba:	b.n	35e8 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    37bc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    37be:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    37c2:	adds	r2, #1
    37c4:	strb	r2, [r5, #0]
    37c6:	b.n	3780 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    37c8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    37ca:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    37ce:	adds	r2, #1
    37d0:	strb	r2, [r5, #0]
    37d2:	b.n	3604 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    37d4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    37d6:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    37da:	adds	r2, #1
    37dc:	strb	r2, [r5, #0]
    37de:	b.n	375a <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    37e0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    37e2:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    37e6:	adds	r2, #1
    37e8:	strb	r2, [r5, #0]
    37ea:	b.n	35cc <usb_isr+0x700>
    37ec:	.word	0x1fff199c
    37f0:	.word	0x1fff1904
    37f4:	.word	0x1fff195c
    37f8:	.word	0x1fff1970
    37fc:	.word	0x1fff18ac
    3800:	.word	0x1fff1e2c
    3804:	.word	0x000050d8
    3808:	.word	0x1fff198d
    380c:	.word	0x400720c4
    3810:	.word	0x400720c8
    3814:	.word	0x400720cc
    3818:	.word	0x400720d0
    381c:	.word	0x400720d4
    3820:	.word	0x1fff0000
    3824:	.word	0x000050e0
    3828:	.word	0x1fff1990
    382c:	.word	0x400720c0
    3830:	.word	0x00400088
    3834:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3838:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    383a:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    383e:	adds	r2, #1
    3840:	strb	r2, [r5, #0]
    3842:	b.n	36d8 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3844:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3846:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    384a:	adds	r2, #1
    384c:	strb	r2, [r5, #0]
    384e:	b.n	361c <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3850:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3852:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    3856:	adds	r2, #1
    3858:	strb	r2, [r5, #0]
    385a:	b.n	372e <usb_isr+0x862>
    385c:	cmp	r0, #64	; 0x40
    385e:	mov	ip, r0
    3860:	it	cs
    3862:	movcs.w	ip, #64	; 0x40
    3866:	add.w	r3, r4, ip
    386a:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    386c:	movs	r3, #1
    386e:	rsb	r0, ip, r0
    3872:	mov.w	r8, ip, lsl #16
    3876:	movs	r2, #0
    3878:	str	r3, [sp, #4]
    387a:	b.n	32ac <usb_isr+0x3e0>

0000387c <usb_init>:
}



void usb_init(void)
{
    387c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3880:	ldr	r4, [pc, #156]	; (3920 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3882:	bl	40bc <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3886:	movs	r2, #0
    3888:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    388c:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    388e:	str	r2, [r3, #0]
		table[i].addr = 0;
    3890:	str	r2, [r3, #4]
    3892:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3894:	cmp	r3, r0
		table[i].desc = 0;
    3896:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    389a:	bne.n	388e <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    389c:	ldr	r0, [pc, #132]	; (3924 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    389e:	ldr	r2, [pc, #136]	; (3928 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    38a0:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    38a2:	ldr.w	lr, [pc, #156]	; 3940 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    38a6:	ldr	r6, [pc, #132]	; (392c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    38a8:	ldr	r5, [pc, #132]	; (3930 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    38aa:	ldr	r7, [pc, #136]	; (3934 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    38ac:	ldr.w	ip, [pc, #148]	; 3944 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    38b0:	ldr.w	r8, [pc, #148]	; 3948 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    38b4:	orr.w	r3, r3, #262144	; 0x40000
    38b8:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    38ba:	ldr	r3, [r2, #0]
    38bc:	orr.w	r3, r3, #50331648	; 0x3000000
    38c0:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    38c2:	movs	r3, #3
    38c4:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    38c8:	movs	r3, #160	; 0xa0
    38ca:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    38cc:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    38d0:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38d4:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    38d8:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38da:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    38dc:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    38e0:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    38e2:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38e4:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    38e6:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38e8:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    38ea:	ldr	r5, [pc, #76]	; (3938 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    38ec:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    38f0:	ldr	r0, [pc, #72]	; (393c <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    38f2:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    38f6:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    38f8:	movs	r3, #1
    38fa:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    38fe:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3902:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3906:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3908:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    390a:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    390e:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3910:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3912:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3916:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    391a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    391e:	nop
    3920:	.word	0x1fff0000
    3924:	.word	0x40048034
    3928:	.word	0x4000d800
    392c:	.word	0x40072140
    3930:	.word	0x4007209c
    3934:	.word	0x400720b0
    3938:	.word	0xe000e435
    393c:	.word	0xe000e104
    3940:	.word	0x40072144
    3944:	.word	0x40072080
    3948:	.word	0x40072088

0000394c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    394c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    394e:	ldr	r4, [pc, #176]	; (3a00 <yield+0xb4>)
    3950:	ldrb	r3, [r4, #0]
    3952:	cbz	r3, 3956 <yield+0xa>
    3954:	pop	{r3, r4, r5, pc}
	running = 1;
    3956:	movs	r3, #1
    3958:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    395a:	bl	1e78 <usb_serial_available>
	if (Serial.available()) serialEvent();
    395e:	cmp	r0, #0
    3960:	bne.n	39e8 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3962:	bl	3e8c <serial_available>
	if (Serial1.available()) serialEvent1();
    3966:	cmp	r0, #0
    3968:	bne.n	39e2 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    396a:	bl	3b74 <serial2_available>
	if (Serial2.available()) serialEvent2();
    396e:	cmp	r0, #0
    3970:	bne.n	39dc <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3972:	bl	418c <serial3_available>
	if (Serial3.available()) serialEvent3();
    3976:	cbnz	r0, 39d6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3978:	bl	3ca0 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    397c:	cbnz	r0, 39d0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    397e:	bl	3a7c <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3982:	cbnz	r0, 39ca <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3984:	bl	3fb8 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3988:	cbnz	r0, 39c4 <yield+0x78>
#endif
	running = 0;
    398a:	movs	r3, #0
    398c:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    398e:	mrs	r3, IPSR
		if (ipsr != 0) return;
    3992:	cmp	r3, #0
    3994:	bne.n	3954 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3996:	mrs	r1, PRIMASK
		__disable_irq();
    399a:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    399c:	ldr	r3, [pc, #100]	; (3a04 <yield+0xb8>)
    399e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    39a0:	cbz	r0, 39ee <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    39a2:	ldr	r4, [pc, #100]	; (3a08 <yield+0xbc>)
    39a4:	ldrb	r2, [r4, #0]
    39a6:	cbnz	r2, 39ee <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    39a8:	ldr	r5, [r0, #20]
    39aa:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    39ac:	movs	r3, #1
    39ae:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    39b0:	cbz	r5, 39f6 <yield+0xaa>
			firstYield->_prev = nullptr;
    39b2:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39b4:	cbnz	r1, 39b8 <yield+0x6c>
    39b6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    39b8:	movs	r5, #0
    39ba:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    39bc:	ldr	r3, [r0, #8]
    39be:	blx	r3
		runningFromYield = false;
    39c0:	strb	r5, [r4, #0]
    39c2:	b.n	3954 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    39c4:	bl	3a78 <serialEvent6()>
    39c8:	b.n	398a <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    39ca:	bl	3a10 <serialEvent5()>
    39ce:	b.n	3984 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    39d0:	bl	3a64 <serialEvent4()>
    39d4:	b.n	397e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    39d6:	bl	4288 <serialEvent3()>
    39da:	b.n	3978 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    39dc:	bl	3a60 <serialEvent2()>
    39e0:	b.n	3972 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    39e2:	bl	4284 <serialEvent1()>
    39e6:	b.n	396a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    39e8:	bl	3a3c <serialEvent()>
    39ec:	b.n	3962 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39ee:	cmp	r1, #0
    39f0:	bne.n	3954 <yield+0x8>
    39f2:	cpsie	i
    39f4:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    39f6:	ldr	r3, [pc, #20]	; (3a0c <yield+0xc0>)
    39f8:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39fa:	cmp	r1, #0
    39fc:	bne.n	39b8 <yield+0x6c>
    39fe:	b.n	39b6 <yield+0x6a>
    3a00:	.word	0x1fff19a1
    3a04:	.word	0x1fff1cb4
    3a08:	.word	0x1fff1cb8
    3a0c:	.word	0x1fff1cb0

00003a10 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    3a10:	bx	lr
    3a12:	nop

00003a14 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3a14:	b.w	1e94 <usb_serial_flush_input>

00003a18 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3a18:	b.w	1e48 <usb_serial_peekchar>

00003a1c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3a1c:	b.w	1e00 <usb_serial_getchar>

00003a20 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3a20:	b.w	1e78 <usb_serial_available>

00003a24 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3a24:	b.w	2034 <usb_serial_flush_output>

00003a28 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3a28:	b.w	1fec <usb_serial_write_buffer_free>

00003a2c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3a2c:	mov	r0, r1
    3a2e:	mov	r1, r2
    3a30:	b.w	1ecc <usb_serial_write>

00003a34 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3a34:	mov	r0, r1
    3a36:	b.w	1fd4 <usb_serial_putchar>
    3a3a:	nop

00003a3c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3a3c:	bx	lr
    3a3e:	nop

00003a40 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3a40:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3a42:	ldr	r2, [pc, #24]	; (3a5c <Print::println()+0x1c>)
	return write(buf, 2);
    3a44:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3a46:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3a48:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3a4a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3a4c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3a4e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3a52:	movs	r2, #2
    3a54:	blx	r3
}
    3a56:	add	sp, #12
    3a58:	ldr.w	pc, [sp], #4
    3a5c:	.word	0x000050d4

00003a60 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3a60:	bx	lr
    3a62:	nop

00003a64 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3a64:	bx	lr
    3a66:	nop

00003a68 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3a68:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3a6a:	bl	490 <setup>
	while (1) {
		loop();
    3a6e:	bl	494 <loop>
		yield();
    3a72:	bl	394c <yield>
    3a76:	b.n	3a6e <main+0x6>

00003a78 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3a78:	bx	lr
    3a7a:	nop

00003a7c <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a7c:	ldr	r2, [pc, #20]	; (3a94 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3a7e:	ldr	r3, [pc, #24]	; (3a98 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a80:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3a82:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a84:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3a86:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3a88:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3a8a:	it	cc
    3a8c:	addcc	r0, #64	; 0x40
    3a8e:	subs	r0, r0, r3
}
    3a90:	bx	lr
    3a92:	nop
    3a94:	.word	0x1fff19a8
    3a98:	.word	0x1fff19a9

00003a9c <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3a9c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3a9e:	ldr	r3, [pc, #172]	; (3b4c <uart4_status_isr+0xb0>)
    3aa0:	ldrb	r2, [r3, #4]
    3aa2:	lsls	r4, r2, #26
    3aa4:	bpl.n	3ae6 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3aa6:	ldr	r0, [pc, #168]	; (3b50 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3aa8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3aaa:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3aac:	ldr	r1, [pc, #164]	; (3b54 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3aae:	adds	r3, #1
    3ab0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ab2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3ab4:	it	gt
    3ab6:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ab8:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3aba:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3abc:	beq.n	3ac6 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    3abe:	ldr	r4, [pc, #152]	; (3b58 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    3ac0:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3ac2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3ac4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3ac6:	ldr	r2, [pc, #148]	; (3b5c <uart4_status_isr+0xc0>)
    3ac8:	ldr	r1, [r2, #0]
    3aca:	cbz	r1, 3ae6 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3acc:	ldr	r2, [pc, #144]	; (3b60 <uart4_status_isr+0xc4>)
    3ace:	ldrb	r2, [r2, #0]
    3ad0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3ad2:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3ad4:	itet	cc
    3ad6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3ada:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3adc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ade:	cmp	r3, #39	; 0x27
    3ae0:	itt	gt
    3ae2:	movgt	r3, #1
    3ae4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    3ae6:	ldr	r2, [pc, #100]	; (3b4c <uart4_status_isr+0xb0>)
    3ae8:	ldrb	r3, [r2, #3]
    3aea:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3aec:	lsls	r0, r3, #24
    3aee:	bmi.n	3b14 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3af0:	lsls	r2, r3, #25
    3af2:	bpl.n	3b10 <uart4_status_isr+0x74>
    3af4:	ldr	r3, [pc, #84]	; (3b4c <uart4_status_isr+0xb0>)
    3af6:	ldrb	r3, [r3, #4]
    3af8:	lsls	r3, r3, #25
    3afa:	bpl.n	3b10 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3afc:	ldr	r3, [pc, #100]	; (3b64 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3afe:	ldr	r1, [pc, #104]	; (3b68 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3b00:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3b02:	movs	r2, #0
    3b04:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3b06:	cbz	r3, 3b0a <uart4_status_isr+0x6e>
    3b08:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    3b0a:	ldr	r3, [pc, #64]	; (3b4c <uart4_status_isr+0xb0>)
    3b0c:	movs	r2, #44	; 0x2c
    3b0e:	strb	r2, [r3, #3]
	}
}
    3b10:	pop	{r4, r5}
    3b12:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3b14:	ldrb	r1, [r2, #4]
    3b16:	lsls	r1, r1, #24
    3b18:	bpl.n	3af0 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3b1a:	ldr	r1, [pc, #80]	; (3b6c <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3b1c:	ldr	r0, [pc, #64]	; (3b60 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3b1e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3b20:	ldrb	r1, [r0, #0]
    3b22:	uxtb	r1, r1
		if (head == tail) {
    3b24:	cmp	r4, r1
    3b26:	beq.n	3b44 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3b28:	adds	r2, r1, #1
    3b2a:	cmp	r2, #39	; 0x27
    3b2c:	itt	hi
    3b2e:	movhi	r1, #0
    3b30:	movhi	r2, r1
			n = tx_buffer[tail];
    3b32:	ldr	r5, [pc, #60]	; (3b70 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3b34:	ldr	r4, [pc, #20]	; (3b4c <uart4_status_isr+0xb0>)
    3b36:	it	ls
    3b38:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3b3a:	ldrb	r2, [r5, r2]
    3b3c:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3b3e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3b40:	strb	r1, [r0, #0]
    3b42:	b.n	3af0 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3b44:	movs	r1, #108	; 0x6c
    3b46:	strb	r1, [r2, #3]
    3b48:	b.n	3af0 <uart4_status_isr+0x54>
    3b4a:	nop
    3b4c:	.word	0x400ea000
    3b50:	.word	0x1fff19a8
    3b54:	.word	0x1fff19a9
    3b58:	.word	0x1fff19d4
    3b5c:	.word	0x1fff19a4
    3b60:	.word	0x1fff1a15
    3b64:	.word	0x1fff1a18
    3b68:	.word	0x1fff1a14
    3b6c:	.word	0x1fff1a1c
    3b70:	.word	0x1fff19ac

00003b74 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b74:	ldr	r2, [pc, #20]	; (3b8c <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3b76:	ldr	r3, [pc, #24]	; (3b90 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b78:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3b7a:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b7c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3b7e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3b80:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3b82:	it	cc
    3b84:	addcc	r0, #64	; 0x40
    3b86:	subs	r0, r0, r3
}
    3b88:	bx	lr
    3b8a:	nop
    3b8c:	.word	0x1fff1a90
    3b90:	.word	0x1fff1a25

00003b94 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3b94:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3b96:	ldr	r3, [pc, #224]	; (3c78 <uart1_status_isr+0xe4>)
    3b98:	ldrb	r2, [r3, #4]
    3b9a:	tst.w	r2, #48	; 0x30
    3b9e:	beq.n	3bfa <uart1_status_isr+0x66>
		__disable_irq();
    3ba0:	cpsid	i
		avail = UART1_RCFIFO;
    3ba2:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3ba4:	and.w	r2, r1, #255	; 0xff
    3ba8:	cmp	r1, #0
    3baa:	beq.n	3c28 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3bac:	cpsie	i
			head = rx_buffer_head;
    3bae:	ldr	r7, [pc, #204]	; (3c7c <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3bb0:	ldr	r1, [pc, #204]	; (3c80 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3bb2:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3bb4:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3bb6:	ldr	r6, [pc, #204]	; (3c84 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3bb8:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3bba:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3bbc:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3bbe:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3bc0:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3bc2:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3bc4:	it	cs
    3bc6:	movcs	r3, #0
				if (newhead != tail) {
    3bc8:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3bca:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3bce:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3bd0:	itt	ne
    3bd2:	strbne	r1, [r6, r3]
    3bd4:	movne	r0, r3
				}
			} while (--avail > 0);
    3bd6:	ands.w	r2, r2, #255	; 0xff
    3bda:	bne.n	3bbe <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3bdc:	ldr	r3, [pc, #168]	; (3c88 <uart1_status_isr+0xf4>)
    3bde:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3be0:	uxtb	r2, r0
    3be2:	strb	r2, [r7, #0]
			if (rts_pin) {
    3be4:	cbz	r3, 3bfa <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3be6:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3be8:	itet	cc
    3bea:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3bee:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3bf0:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3bf2:	cmp	r0, #39	; 0x27
    3bf4:	itt	gt
    3bf6:	movgt	r2, #1
    3bf8:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3bfa:	ldr	r1, [pc, #124]	; (3c78 <uart1_status_isr+0xe4>)
    3bfc:	ldrb	r2, [r1, #3]
    3bfe:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3c00:	lsls	r5, r2, #24
    3c02:	bmi.n	3c32 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    3c04:	lsls	r2, r2, #25
    3c06:	bpl.n	3c24 <uart1_status_isr+0x90>
    3c08:	ldr	r3, [pc, #108]	; (3c78 <uart1_status_isr+0xe4>)
    3c0a:	ldrb	r3, [r3, #4]
    3c0c:	lsls	r3, r3, #25
    3c0e:	bpl.n	3c24 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3c10:	ldr	r3, [pc, #120]	; (3c8c <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c12:	ldr	r1, [pc, #124]	; (3c90 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3c14:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c16:	movs	r2, #0
    3c18:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3c1a:	cbz	r3, 3c1e <uart1_status_isr+0x8a>
    3c1c:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3c1e:	ldr	r3, [pc, #88]	; (3c78 <uart1_status_isr+0xe4>)
    3c20:	movs	r2, #60	; 0x3c
    3c22:	strb	r2, [r3, #3]
	}
}
    3c24:	pop	{r4, r5, r6, r7}
    3c26:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3c28:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3c2a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3c2c:	strb	r2, [r3, #17]
			__enable_irq();
    3c2e:	cpsie	i
    3c30:	b.n	3bfa <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3c32:	ldrb	r3, [r1, #4]
    3c34:	lsls	r4, r3, #24
    3c36:	bpl.n	3c04 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3c38:	ldr	r3, [pc, #88]	; (3c94 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3c3a:	ldr	r6, [pc, #92]	; (3c98 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c3c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3c3e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c40:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3c42:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3c44:	cmp	r4, r3
    3c46:	beq.n	3c66 <uart1_status_isr+0xd2>
    3c48:	ldr	r5, [pc, #80]	; (3c9c <uart1_status_isr+0x108>)
    3c4a:	b.n	3c50 <uart1_status_isr+0xbc>
    3c4c:	cmp	r3, r4
    3c4e:	beq.n	3c66 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3c50:	adds	r3, #1
    3c52:	cmp	r3, #40	; 0x28
    3c54:	it	cs
    3c56:	movcs	r3, #0
			avail = UART1_S1;
    3c58:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3c5a:	ldrb	r0, [r5, r3]
    3c5c:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3c5e:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3c60:	ldrb	r0, [r1, #20]
    3c62:	cmp	r0, #7
    3c64:	bls.n	3c4c <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3c66:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3c68:	ldr	r1, [pc, #12]	; (3c78 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3c6a:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3c6c:	ldrb	r3, [r1, #4]
    3c6e:	lsls	r0, r3, #24
    3c70:	itt	mi
    3c72:	movmi	r3, #124	; 0x7c
    3c74:	strbmi	r3, [r1, #3]
    3c76:	b.n	3c04 <uart1_status_isr+0x70>
    3c78:	.word	0x4006b000
    3c7c:	.word	0x1fff1a90
    3c80:	.word	0x1fff1a25
    3c84:	.word	0x1fff1a50
    3c88:	.word	0x1fff1a20
    3c8c:	.word	0x1fff1a94
    3c90:	.word	0x1fff1a24
    3c94:	.word	0x1fff1a98
    3c98:	.word	0x1fff1a91
    3c9c:	.word	0x1fff1a28

00003ca0 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ca0:	ldr	r2, [pc, #20]	; (3cb8 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3ca2:	ldr	r3, [pc, #24]	; (3cbc <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ca4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3ca6:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ca8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3caa:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3cac:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3cae:	it	cc
    3cb0:	addcc	r0, #64	; 0x40
    3cb2:	subs	r0, r0, r3
}
    3cb4:	bx	lr
    3cb6:	nop
    3cb8:	.word	0x1fff1aa0
    3cbc:	.word	0x1fff1aa1

00003cc0 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3cc0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3cc2:	ldr	r3, [pc, #172]	; (3d70 <uart3_status_isr+0xb0>)
    3cc4:	ldrb	r2, [r3, #4]
    3cc6:	lsls	r4, r2, #26
    3cc8:	bpl.n	3d0a <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3cca:	ldr	r0, [pc, #168]	; (3d74 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3ccc:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3cce:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cd0:	ldr	r1, [pc, #164]	; (3d78 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3cd2:	adds	r3, #1
    3cd4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cd6:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3cd8:	it	gt
    3cda:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cdc:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3cde:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ce0:	beq.n	3cea <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3ce2:	ldr	r4, [pc, #152]	; (3d7c <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3ce4:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3ce6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3ce8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3cea:	ldr	r2, [pc, #148]	; (3d80 <uart3_status_isr+0xc0>)
    3cec:	ldr	r1, [r2, #0]
    3cee:	cbz	r1, 3d0a <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3cf0:	ldr	r2, [pc, #144]	; (3d84 <uart3_status_isr+0xc4>)
    3cf2:	ldrb	r2, [r2, #0]
    3cf4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3cf6:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3cf8:	itet	cc
    3cfa:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3cfe:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3d00:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3d02:	cmp	r3, #39	; 0x27
    3d04:	itt	gt
    3d06:	movgt	r3, #1
    3d08:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3d0a:	ldr	r2, [pc, #100]	; (3d70 <uart3_status_isr+0xb0>)
    3d0c:	ldrb	r3, [r2, #3]
    3d0e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3d10:	lsls	r0, r3, #24
    3d12:	bmi.n	3d38 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3d14:	lsls	r2, r3, #25
    3d16:	bpl.n	3d34 <uart3_status_isr+0x74>
    3d18:	ldr	r3, [pc, #84]	; (3d70 <uart3_status_isr+0xb0>)
    3d1a:	ldrb	r3, [r3, #4]
    3d1c:	lsls	r3, r3, #25
    3d1e:	bpl.n	3d34 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3d20:	ldr	r3, [pc, #100]	; (3d88 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d22:	ldr	r1, [pc, #104]	; (3d8c <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3d24:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d26:	movs	r2, #0
    3d28:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3d2a:	cbz	r3, 3d2e <uart3_status_isr+0x6e>
    3d2c:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3d2e:	ldr	r3, [pc, #64]	; (3d70 <uart3_status_isr+0xb0>)
    3d30:	movs	r2, #44	; 0x2c
    3d32:	strb	r2, [r3, #3]
	}
}
    3d34:	pop	{r4, r5}
    3d36:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3d38:	ldrb	r1, [r2, #4]
    3d3a:	lsls	r1, r1, #24
    3d3c:	bpl.n	3d14 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3d3e:	ldr	r1, [pc, #80]	; (3d90 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3d40:	ldr	r0, [pc, #64]	; (3d84 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d42:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3d44:	ldrb	r1, [r0, #0]
    3d46:	uxtb	r1, r1
		if (head == tail) {
    3d48:	cmp	r4, r1
    3d4a:	beq.n	3d68 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3d4c:	adds	r2, r1, #1
    3d4e:	cmp	r2, #39	; 0x27
    3d50:	itt	hi
    3d52:	movhi	r1, #0
    3d54:	movhi	r2, r1
			n = tx_buffer[tail];
    3d56:	ldr	r5, [pc, #60]	; (3d94 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3d58:	ldr	r4, [pc, #20]	; (3d70 <uart3_status_isr+0xb0>)
    3d5a:	it	ls
    3d5c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3d5e:	ldrb	r2, [r5, r2]
    3d60:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3d62:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3d64:	strb	r1, [r0, #0]
    3d66:	b.n	3d14 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3d68:	movs	r1, #108	; 0x6c
    3d6a:	strb	r1, [r2, #3]
    3d6c:	b.n	3d14 <uart3_status_isr+0x54>
    3d6e:	nop
    3d70:	.word	0x4006d000
    3d74:	.word	0x1fff1aa0
    3d78:	.word	0x1fff1aa1
    3d7c:	.word	0x1fff1acc
    3d80:	.word	0x1fff1a9c
    3d84:	.word	0x1fff1b0d
    3d88:	.word	0x1fff1b10
    3d8c:	.word	0x1fff1b0c
    3d90:	.word	0x1fff1b14
    3d94:	.word	0x1fff1aa4

00003d98 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3d98:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3d9a:	ldr	r4, [pc, #64]	; (3ddc <fault_isr+0x44>)
    3d9c:	b.n	3db0 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3d9e:	ldr	r3, [r4, #0]
    3da0:	lsls	r1, r3, #21
    3da2:	bmi.n	3dc0 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3da4:	ldr	r3, [r4, #0]
    3da6:	lsls	r2, r3, #20
    3da8:	bmi.n	3dca <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3daa:	ldr	r3, [r4, #0]
    3dac:	lsls	r3, r3, #19
    3dae:	bmi.n	3dd4 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3db0:	ldr	r3, [r4, #0]
    3db2:	lsls	r0, r3, #13
    3db4:	bpl.n	3d9e <fault_isr+0x6>
    3db6:	bl	2ecc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3dba:	ldr	r3, [r4, #0]
    3dbc:	lsls	r1, r3, #21
    3dbe:	bpl.n	3da4 <fault_isr+0xc>
    3dc0:	bl	3eac <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3dc4:	ldr	r3, [r4, #0]
    3dc6:	lsls	r2, r3, #20
    3dc8:	bpl.n	3daa <fault_isr+0x12>
    3dca:	bl	3b94 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3dce:	ldr	r3, [r4, #0]
    3dd0:	lsls	r3, r3, #19
    3dd2:	bpl.n	3db0 <fault_isr+0x18>
    3dd4:	bl	41ac <uart2_status_isr>
    3dd8:	b.n	3db0 <fault_isr+0x18>
    3dda:	nop
    3ddc:	.word	0x40048034

00003de0 <unused_isr>:
	}
}

void unused_isr(void)
{
    3de0:	push	{r3, lr}
	fault_isr();
    3de2:	bl	3d98 <fault_isr>
    3de6:	nop

00003de8 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3de8:	ldr	r3, [pc, #4]	; (3df0 <startup_early_hook+0x8>)
    3dea:	movs	r2, #16
    3dec:	strh	r2, [r3, #0]
    3dee:	bx	lr
    3df0:	.word	0x40052000

00003df4 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3df4:	bx	lr
    3df6:	nop

00003df8 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3df8:	ldr	r1, [pc, #36]	; (3e20 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3dfa:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3dfc:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3dfe:	cbz	r0, 3e0e <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3e00:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3e02:	add	r0, r3
    3e04:	sub.w	r2, r2, #8192	; 0x2000
    3e08:	cmp	r0, r2
    3e0a:	bcs.n	3e12 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3e0c:	str	r0, [r1, #0]
	}
	return prev;
    3e0e:	mov	r0, r3
}
    3e10:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3e12:	bl	4480 <__errno>
    3e16:	movs	r3, #12
    3e18:	str	r3, [r0, #0]
			return (void *)-1;
    3e1a:	mov.w	r0, #4294967295
    3e1e:	pop	{r3, pc}
    3e20:	.word	0x1fff0c70

00003e24 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3e24:	ldr	r2, [pc, #32]	; (3e48 <kinetis_hsrun_disable+0x24>)
    3e26:	ldrb	r3, [r2, #0]
    3e28:	cmp	r3, #128	; 0x80
    3e2a:	beq.n	3e30 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3e2c:	movs	r0, #0
}
    3e2e:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3e30:	ldr	r1, [pc, #24]	; (3e4c <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3e32:	ldr	r3, [pc, #28]	; (3e50 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3e34:	ldr	r0, [pc, #28]	; (3e54 <kinetis_hsrun_disable+0x30>)
    3e36:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3e38:	movs	r1, #0
    3e3a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3e3c:	ldrb	r3, [r2, #0]
    3e3e:	cmp	r3, #128	; 0x80
    3e40:	beq.n	3e3c <kinetis_hsrun_disable+0x18>
		return 1;
    3e42:	movs	r0, #1
    3e44:	bx	lr
    3e46:	nop
    3e48:	.word	0x4007e003
    3e4c:	.word	0x40048044
    3e50:	.word	0x4007e001
    3e54:	.word	0x22280000

00003e58 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3e58:	ldr	r2, [pc, #36]	; (3e80 <kinetis_hsrun_enable+0x28>)
    3e5a:	ldrb	r3, [r2, #0]
    3e5c:	cmp	r3, #1
    3e5e:	beq.n	3e64 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3e60:	movs	r0, #0
}
    3e62:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3e64:	add.w	r3, r3, #1073741824	; 0x40000000
    3e68:	add.w	r3, r3, #516096	; 0x7e000
    3e6c:	movs	r1, #96	; 0x60
    3e6e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3e70:	ldrb	r3, [r2, #0]
    3e72:	cmp	r3, #128	; 0x80
    3e74:	bne.n	3e70 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3e76:	ldr	r3, [pc, #12]	; (3e84 <kinetis_hsrun_enable+0x2c>)
    3e78:	ldr	r2, [pc, #12]	; (3e88 <kinetis_hsrun_enable+0x30>)
    3e7a:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3e7c:	movs	r0, #1
    3e7e:	bx	lr
    3e80:	.word	0x4007e003
    3e84:	.word	0x40048044
    3e88:	.word	0x02060000

00003e8c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e8c:	ldr	r2, [pc, #20]	; (3ea4 <serial_available+0x18>)
	tail = rx_buffer_tail;
    3e8e:	ldr	r3, [pc, #24]	; (3ea8 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e90:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3e92:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e94:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3e96:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3e98:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3e9a:	it	cc
    3e9c:	addcc	r0, #64	; 0x40
    3e9e:	subs	r0, r0, r3
}
    3ea0:	bx	lr
    3ea2:	nop
    3ea4:	.word	0x1fff1b1c
    3ea8:	.word	0x1fff1b1d

00003eac <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3eac:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3eae:	ldr	r3, [pc, #224]	; (3f90 <uart0_status_isr+0xe4>)
    3eb0:	ldrb	r2, [r3, #4]
    3eb2:	tst.w	r2, #48	; 0x30
    3eb6:	beq.n	3f12 <uart0_status_isr+0x66>
		__disable_irq();
    3eb8:	cpsid	i
		avail = UART0_RCFIFO;
    3eba:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3ebc:	and.w	r2, r1, #255	; 0xff
    3ec0:	cmp	r1, #0
    3ec2:	beq.n	3f40 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3ec4:	cpsie	i
			head = rx_buffer_head;
    3ec6:	ldr	r7, [pc, #204]	; (3f94 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3ec8:	ldr	r1, [pc, #204]	; (3f98 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3eca:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3ecc:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3ece:	ldr	r6, [pc, #204]	; (3f9c <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3ed0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3ed2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3ed4:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3ed6:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3ed8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3eda:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3edc:	it	cs
    3ede:	movcs	r3, #0
				if (newhead != tail) {
    3ee0:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3ee2:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3ee6:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3ee8:	itt	ne
    3eea:	strbne	r1, [r6, r3]
    3eec:	movne	r0, r3
				}
			} while (--avail > 0);
    3eee:	ands.w	r2, r2, #255	; 0xff
    3ef2:	bne.n	3ed6 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3ef4:	ldr	r3, [pc, #168]	; (3fa0 <uart0_status_isr+0xf4>)
    3ef6:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3ef8:	uxtb	r2, r0
    3efa:	strb	r2, [r7, #0]
			if (rts_pin) {
    3efc:	cbz	r3, 3f12 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3efe:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3f00:	itet	cc
    3f02:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3f06:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3f08:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3f0a:	cmp	r0, #39	; 0x27
    3f0c:	itt	gt
    3f0e:	movgt	r2, #1
    3f10:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3f12:	ldr	r1, [pc, #124]	; (3f90 <uart0_status_isr+0xe4>)
    3f14:	ldrb	r2, [r1, #3]
    3f16:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3f18:	lsls	r5, r2, #24
    3f1a:	bmi.n	3f4a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3f1c:	lsls	r2, r2, #25
    3f1e:	bpl.n	3f3c <uart0_status_isr+0x90>
    3f20:	ldr	r3, [pc, #108]	; (3f90 <uart0_status_isr+0xe4>)
    3f22:	ldrb	r3, [r3, #4]
    3f24:	lsls	r3, r3, #25
    3f26:	bpl.n	3f3c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3f28:	ldr	r3, [pc, #120]	; (3fa4 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f2a:	ldr	r1, [pc, #124]	; (3fa8 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3f2c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f2e:	movs	r2, #0
    3f30:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3f32:	cbz	r3, 3f36 <uart0_status_isr+0x8a>
    3f34:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3f36:	ldr	r3, [pc, #88]	; (3f90 <uart0_status_isr+0xe4>)
    3f38:	movs	r2, #60	; 0x3c
    3f3a:	strb	r2, [r3, #3]
	}
}
    3f3c:	pop	{r4, r5, r6, r7}
    3f3e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3f40:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3f42:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3f44:	strb	r2, [r3, #17]
			__enable_irq();
    3f46:	cpsie	i
    3f48:	b.n	3f12 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3f4a:	ldrb	r3, [r1, #4]
    3f4c:	lsls	r4, r3, #24
    3f4e:	bpl.n	3f1c <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3f50:	ldr	r3, [pc, #88]	; (3fac <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3f52:	ldr	r6, [pc, #92]	; (3fb0 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f54:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3f56:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f58:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3f5a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3f5c:	cmp	r4, r3
    3f5e:	beq.n	3f7e <uart0_status_isr+0xd2>
    3f60:	ldr	r5, [pc, #80]	; (3fb4 <uart0_status_isr+0x108>)
    3f62:	b.n	3f68 <uart0_status_isr+0xbc>
    3f64:	cmp	r3, r4
    3f66:	beq.n	3f7e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3f68:	adds	r3, #1
    3f6a:	cmp	r3, #64	; 0x40
    3f6c:	it	cs
    3f6e:	movcs	r3, #0
			avail = UART0_S1;
    3f70:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3f72:	ldrb	r0, [r5, r3]
    3f74:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3f76:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3f78:	ldrb	r0, [r1, #20]
    3f7a:	cmp	r0, #7
    3f7c:	bls.n	3f64 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3f7e:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3f80:	ldr	r1, [pc, #12]	; (3f90 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3f82:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3f84:	ldrb	r3, [r1, #4]
    3f86:	lsls	r0, r3, #24
    3f88:	itt	mi
    3f8a:	movmi	r3, #124	; 0x7c
    3f8c:	strbmi	r3, [r1, #3]
    3f8e:	b.n	3f1c <uart0_status_isr+0x70>
    3f90:	.word	0x4006a000
    3f94:	.word	0x1fff1b1c
    3f98:	.word	0x1fff1b1d
    3f9c:	.word	0x1fff1b60
    3fa0:	.word	0x1fff1b18
    3fa4:	.word	0x1fff1ba4
    3fa8:	.word	0x1fff1ba0
    3fac:	.word	0x1fff1ba8
    3fb0:	.word	0x1fff1ba1
    3fb4:	.word	0x1fff1b20

00003fb8 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3fb8:	ldr	r2, [pc, #20]	; (3fd0 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3fba:	ldr	r3, [pc, #24]	; (3fd4 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3fbc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3fbe:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3fc0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3fc2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3fc4:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3fc6:	it	cc
    3fc8:	addcc	r0, #64	; 0x40
    3fca:	subs	r0, r0, r3
}
    3fcc:	bx	lr
    3fce:	nop
    3fd0:	.word	0x1fff1bb0
    3fd4:	.word	0x1fff1bb1

00003fd8 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3fd8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3fda:	ldr	r3, [pc, #176]	; (408c <lpuart0_status_isr+0xb4>)
    3fdc:	ldr	r2, [r3, #4]
    3fde:	lsls	r4, r2, #10
    3fe0:	bpl.n	4022 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3fe2:	ldr	r0, [pc, #172]	; (4090 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3fe4:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3fe6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fe8:	ldr	r1, [pc, #168]	; (4094 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3fea:	adds	r3, #1
    3fec:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fee:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3ff0:	it	gt
    3ff2:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ff4:	cmp	r3, r1
    3ff6:	beq.n	4002 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3ff8:	ldr	r4, [pc, #156]	; (4098 <lpuart0_status_isr+0xc0>)
    3ffa:	uxtb	r2, r2
			rx_buffer_head = head;
    3ffc:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3ffe:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4000:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4002:	ldr	r2, [pc, #152]	; (409c <lpuart0_status_isr+0xc4>)
    4004:	ldr	r1, [r2, #0]
    4006:	cbz	r1, 4022 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4008:	ldr	r2, [pc, #148]	; (40a0 <lpuart0_status_isr+0xc8>)
    400a:	ldrb	r2, [r2, #0]
    400c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    400e:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4010:	itet	cc
    4012:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4016:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4018:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    401a:	cmp	r3, #39	; 0x27
    401c:	itt	gt
    401e:	movgt	r3, #1
    4020:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    4022:	ldr	r2, [pc, #104]	; (408c <lpuart0_status_isr+0xb4>)
    4024:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    4026:	lsls	r0, r3, #8
    4028:	bpl.n	4030 <lpuart0_status_isr+0x58>
    402a:	ldr	r2, [r2, #4]
    402c:	lsls	r1, r2, #8
    402e:	bmi.n	4054 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    4030:	lsls	r2, r3, #9
    4032:	bpl.n	4050 <lpuart0_status_isr+0x78>
    4034:	ldr	r3, [pc, #84]	; (408c <lpuart0_status_isr+0xb4>)
    4036:	ldr	r3, [r3, #4]
    4038:	lsls	r3, r3, #9
    403a:	bpl.n	4050 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    403c:	ldr	r3, [pc, #100]	; (40a4 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    403e:	ldr	r1, [pc, #104]	; (40a8 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    4040:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    4042:	movs	r2, #0
    4044:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4046:	cbz	r3, 404a <lpuart0_status_isr+0x72>
    4048:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    404a:	ldr	r3, [pc, #96]	; (40ac <lpuart0_status_isr+0xd4>)
    404c:	movs	r2, #0
    404e:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    4050:	pop	{r4, r5}
    4052:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    4054:	ldr	r2, [pc, #88]	; (40b0 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    4056:	ldr	r1, [pc, #72]	; (40a0 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    4058:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    405a:	ldrb	r2, [r1, #0]
    405c:	uxtb	r2, r2
		if (head == tail) {
    405e:	cmp	r0, r2
    4060:	beq.n	407e <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    4062:	adds	r2, #1
    4064:	cmp	r2, #39	; 0x27
    4066:	itt	hi
    4068:	movhi	r0, #0
    406a:	movhi	r2, r0
			n = tx_buffer[tail];
    406c:	ldr	r5, [pc, #68]	; (40b4 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    406e:	ldr	r4, [pc, #28]	; (408c <lpuart0_status_isr+0xb4>)
    4070:	it	ls
    4072:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4074:	ldrb	r2, [r5, r2]
    4076:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    4078:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    407a:	strb	r0, [r1, #0]
    407c:	b.n	4030 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    407e:	ldr	r0, [pc, #56]	; (40b8 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4080:	ldr	r2, [pc, #40]	; (40ac <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4082:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4084:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4086:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4088:	str	r1, [r2, #0]
    408a:	b.n	4030 <lpuart0_status_isr+0x58>
    408c:	.word	0x400c4000
    4090:	.word	0x1fff1bb0
    4094:	.word	0x1fff1bb1
    4098:	.word	0x1fff1bdc
    409c:	.word	0x1fff1bac
    40a0:	.word	0x1fff1c1d
    40a4:	.word	0x1fff1c20
    40a8:	.word	0x1fff1c1c
    40ac:	.word	0x43880158
    40b0:	.word	0x1fff1c24
    40b4:	.word	0x1fff1bb4
    40b8:	.word	0x4388015c

000040bc <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    40bc:	push	{r4, lr}
    40be:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    40c0:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    40c2:	bl	3e24 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    40c6:	ldr	r2, [pc, #96]	; (4128 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    40c8:	ldr	r3, [pc, #96]	; (412c <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    40ca:	ldr	r1, [pc, #100]	; (4130 <usb_init_serialnumber+0x74>)
    40cc:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    40ce:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    40d0:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    40d2:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    40d4:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    40d6:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    40d8:	ldrb	r3, [r2, #0]
    40da:	lsls	r3, r3, #24
    40dc:	bpl.n	40d8 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    40de:	ldr	r3, [pc, #84]	; (4134 <usb_init_serialnumber+0x78>)
    40e0:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    40e2:	bl	3e58 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    40e6:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    40e8:	ldr	r3, [pc, #76]	; (4138 <usb_init_serialnumber+0x7c>)
    40ea:	cmp	r4, r3
    40ec:	itt	ls
    40ee:	addls.w	r4, r4, r4, lsl #2
    40f2:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    40f4:	mov	r0, r4
    40f6:	ldr	r4, [pc, #68]	; (413c <usb_init_serialnumber+0x80>)
    40f8:	add	r1, sp, #4
    40fa:	movs	r2, #10
    40fc:	bl	4140 <ultoa>
    4100:	add	r1, sp, #4
    4102:	mov	r0, r4
	for (i=0; i<10; i++) {
    4104:	movs	r3, #0
		char c = buf[i];
    4106:	ldrb.w	r2, [r1], #1
    410a:	adds	r3, #1
		if (!c) break;
    410c:	cbz	r2, 411e <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    410e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4110:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4114:	bne.n	4106 <usb_init_serialnumber+0x4a>
    4116:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4118:	strb	r3, [r4, #0]
}
    411a:	add	sp, #16
    411c:	pop	{r4, pc}
    411e:	lsls	r3, r3, #1
    4120:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4122:	strb	r3, [r4, #0]
}
    4124:	add	sp, #16
    4126:	pop	{r4, pc}
    4128:	.word	0x40020004
    412c:	.word	0x40020000
    4130:	.word	0x41070000
    4134:	.word	0x4002000c
    4138:	.word	0x0098967f
    413c:	.word	0x1fff0d54

00004140 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4140:	push	{r4, r5, r6, r7}
    4142:	subs	r5, r1, #1
    4144:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    4146:	movs	r4, #0
    4148:	b.n	414c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    414a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    414c:	udiv	r3, r0, r2
    4150:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4154:	cmp	r0, #9
    4156:	add.w	r7, r0, #48	; 0x30
    415a:	itet	hi
    415c:	addhi	r0, #55	; 0x37
    415e:	uxtbls	r0, r7
    4160:	uxtbhi	r0, r0
    4162:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    4166:	mov	r0, r3
    4168:	cmp	r3, #0
    416a:	bne.n	414a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    416c:	adds	r2, r1, r4
    416e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4170:	cbz	r4, 4186 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4172:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4174:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    4178:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    417a:	adds	r3, #1
    417c:	subs	r0, r4, r3
    417e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4180:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4184:	blt.n	4172 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4186:	mov	r0, r1
    4188:	pop	{r4, r5, r6, r7}
    418a:	bx	lr

0000418c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    418c:	ldr	r2, [pc, #20]	; (41a4 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    418e:	ldr	r3, [pc, #24]	; (41a8 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4190:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4192:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4194:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4196:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4198:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    419a:	it	cc
    419c:	addcc	r0, #64	; 0x40
    419e:	subs	r0, r0, r3
}
    41a0:	bx	lr
    41a2:	nop
    41a4:	.word	0x1fff1c2c
    41a8:	.word	0x1fff1c2d

000041ac <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    41ac:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    41ae:	ldr	r3, [pc, #172]	; (425c <uart2_status_isr+0xb0>)
    41b0:	ldrb	r2, [r3, #4]
    41b2:	lsls	r4, r2, #26
    41b4:	bpl.n	41f6 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    41b6:	ldr	r0, [pc, #168]	; (4260 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    41b8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    41ba:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41bc:	ldr	r1, [pc, #164]	; (4264 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    41be:	adds	r3, #1
    41c0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41c2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    41c4:	it	gt
    41c6:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41c8:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    41ca:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41cc:	beq.n	41d6 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    41ce:	ldr	r4, [pc, #152]	; (4268 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    41d0:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    41d2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    41d4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    41d6:	ldr	r2, [pc, #148]	; (426c <uart2_status_isr+0xc0>)
    41d8:	ldr	r1, [r2, #0]
    41da:	cbz	r1, 41f6 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    41dc:	ldr	r2, [pc, #144]	; (4270 <uart2_status_isr+0xc4>)
    41de:	ldrb	r2, [r2, #0]
    41e0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    41e2:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    41e4:	itet	cc
    41e6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    41ea:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    41ec:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    41ee:	cmp	r3, #39	; 0x27
    41f0:	itt	gt
    41f2:	movgt	r3, #1
    41f4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    41f6:	ldr	r2, [pc, #100]	; (425c <uart2_status_isr+0xb0>)
    41f8:	ldrb	r3, [r2, #3]
    41fa:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    41fc:	lsls	r0, r3, #24
    41fe:	bmi.n	4224 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4200:	lsls	r2, r3, #25
    4202:	bpl.n	4220 <uart2_status_isr+0x74>
    4204:	ldr	r3, [pc, #84]	; (425c <uart2_status_isr+0xb0>)
    4206:	ldrb	r3, [r3, #4]
    4208:	lsls	r3, r3, #25
    420a:	bpl.n	4220 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    420c:	ldr	r3, [pc, #100]	; (4274 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    420e:	ldr	r1, [pc, #104]	; (4278 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4210:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4212:	movs	r2, #0
    4214:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4216:	cbz	r3, 421a <uart2_status_isr+0x6e>
    4218:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    421a:	ldr	r3, [pc, #64]	; (425c <uart2_status_isr+0xb0>)
    421c:	movs	r2, #44	; 0x2c
    421e:	strb	r2, [r3, #3]
	}
}
    4220:	pop	{r4, r5}
    4222:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4224:	ldrb	r1, [r2, #4]
    4226:	lsls	r1, r1, #24
    4228:	bpl.n	4200 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    422a:	ldr	r1, [pc, #80]	; (427c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    422c:	ldr	r0, [pc, #64]	; (4270 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    422e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4230:	ldrb	r1, [r0, #0]
    4232:	uxtb	r1, r1
		if (head == tail) {
    4234:	cmp	r4, r1
    4236:	beq.n	4254 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4238:	adds	r2, r1, #1
    423a:	cmp	r2, #39	; 0x27
    423c:	itt	hi
    423e:	movhi	r1, #0
    4240:	movhi	r2, r1
			n = tx_buffer[tail];
    4242:	ldr	r5, [pc, #60]	; (4280 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4244:	ldr	r4, [pc, #20]	; (425c <uart2_status_isr+0xb0>)
    4246:	it	ls
    4248:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    424a:	ldrb	r2, [r5, r2]
    424c:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    424e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4250:	strb	r1, [r0, #0]
    4252:	b.n	4200 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4254:	movs	r1, #108	; 0x6c
    4256:	strb	r1, [r2, #3]
    4258:	b.n	4200 <uart2_status_isr+0x54>
    425a:	nop
    425c:	.word	0x4006c000
    4260:	.word	0x1fff1c2c
    4264:	.word	0x1fff1c2d
    4268:	.word	0x1fff1c58
    426c:	.word	0x1fff1c28
    4270:	.word	0x1fff1c99
    4274:	.word	0x1fff1c9c
    4278:	.word	0x1fff1c98
    427c:	.word	0x1fff1ca0
    4280:	.word	0x1fff1c30

00004284 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4284:	bx	lr
    4286:	nop

00004288 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4288:	bx	lr
    428a:	nop

0000428c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    428c:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    428e:	mrs	r2, PRIMASK
		__disable_irq();
    4292:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4294:	ldrb	r3, [r0, #29]
    4296:	cbnz	r3, 42a6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4298:	ldrb	r1, [r0, #28]
    429a:	cmp	r1, #1
    429c:	beq.n	42b0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    429e:	cmp	r1, #3
    42a0:	beq.n	42c4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    42a2:	movs	r3, #1
    42a4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    42a6:	cbnz	r2, 42aa <EventResponder::triggerEventNotImmediate()+0x1e>
    42a8:	cpsie	i
	}
	enableInterrupts(irq);
}
    42aa:	ldr.w	r4, [sp], #4
    42ae:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    42b0:	ldr	r4, [pc, #68]	; (42f8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    42b2:	ldr	r1, [r4, #0]
    42b4:	cbz	r1, 42e0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    42b6:	ldr	r1, [pc, #68]	; (42fc <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    42b8:	str	r3, [r0, #20]
				_prev = lastYield;
    42ba:	ldr	r3, [r1, #0]
    42bc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    42be:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    42c0:	str	r0, [r3, #20]
    42c2:	b.n	42a2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    42c4:	ldr	r4, [pc, #56]	; (4300 <EventResponder::triggerEventNotImmediate()+0x74>)
    42c6:	ldr	r1, [r4, #0]
    42c8:	cbz	r1, 42ec <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    42ca:	ldr	r1, [pc, #56]	; (4304 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    42cc:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    42ce:	ldr	r3, [r1, #0]
    42d0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    42d2:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    42d4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    42d6:	ldr	r3, [pc, #48]	; (4308 <EventResponder::triggerEventNotImmediate()+0x7c>)
    42d8:	mov.w	r1, #268435456	; 0x10000000
    42dc:	str	r1, [r3, #0]
    42de:	b.n	42a2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    42e0:	ldr	r3, [pc, #24]	; (42fc <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    42e2:	str	r1, [r0, #20]
				_prev = nullptr;
    42e4:	str	r1, [r0, #24]
				firstYield = this;
    42e6:	str	r0, [r4, #0]
				lastYield = this;
    42e8:	str	r0, [r3, #0]
    42ea:	b.n	42a2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    42ec:	ldr	r3, [pc, #20]	; (4304 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    42ee:	str	r1, [r0, #20]
				_prev = nullptr;
    42f0:	str	r1, [r0, #24]
				firstInterrupt = this;
    42f2:	str	r0, [r4, #0]
				lastInterrupt = this;
    42f4:	str	r0, [r3, #0]
    42f6:	b.n	42d6 <EventResponder::triggerEventNotImmediate()+0x4a>
    42f8:	.word	0x1fff1cb4
    42fc:	.word	0x1fff1cb0
    4300:	.word	0x1fff1ca4
    4304:	.word	0x1fff1ca8
    4308:	.word	0xe000ed04

0000430c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    430c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    430e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4310:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4312:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4314:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4316:	beq.n	4320 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4318:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    431c:	b.w	428c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4320:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4322:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4326:	bx	r3

00004328 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4328:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    432a:	mrs	r2, PRIMASK
		__disable_irq();
    432e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4330:	ldr	r4, [pc, #48]	; (4364 <EventResponder::runFromInterrupt()+0x3c>)
    4332:	ldr	r0, [r4, #0]
		if (first) {
    4334:	cbz	r0, 4358 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4336:	ldr	r6, [pc, #48]	; (4368 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4338:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    433a:	ldr	r3, [r0, #20]
    433c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    433e:	cbz	r3, 435e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4340:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4342:	cbnz	r2, 4346 <EventResponder::runFromInterrupt()+0x1e>
    4344:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4346:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4348:	ldr	r3, [r0, #8]
    434a:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    434c:	mrs	r2, PRIMASK
		__disable_irq();
    4350:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4352:	ldr	r0, [r4, #0]
		if (first) {
    4354:	cmp	r0, #0
    4356:	bne.n	433a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4358:	cbnz	r2, 435c <EventResponder::runFromInterrupt()+0x34>
    435a:	cpsie	i
    435c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    435e:	str	r3, [r6, #0]
    4360:	b.n	4342 <EventResponder::runFromInterrupt()+0x1a>
    4362:	nop
    4364:	.word	0x1fff1ca4
    4368:	.word	0x1fff1ca8

0000436c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    436c:	b.w	4328 <EventResponder::runFromInterrupt()>

00004370 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4370:	ldr	r2, [pc, #96]	; (43d4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4372:	push	{r4, r5}
	if (listActive == nullptr) {
    4374:	ldr	r4, [r2, #0]
    4376:	cmp	r4, #0
    4378:	beq.n	43ca <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    437a:	ldr	r3, [r0, #0]
    437c:	ldr	r1, [r4, #0]
    437e:	cmp	r3, r1
    4380:	bcs.n	43a0 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4382:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4384:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4386:	str	r4, [r0, #8]
		_prev = nullptr;
    4388:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    438a:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    438c:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    438e:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4390:	movs	r3, #2
    4392:	strb	r3, [r0, #20]
}
    4394:	pop	{r4, r5}
    4396:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4398:	ldr	r1, [r2, #0]
    439a:	cmp	r3, r1
    439c:	mov	r4, r2
    439e:	bcc.n	43b2 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    43a0:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    43a2:	subs	r3, r3, r1
    43a4:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    43a6:	cmp	r2, #0
    43a8:	bne.n	4398 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    43aa:	str	r2, [r0, #8]
		_prev = timer;
    43ac:	str	r4, [r0, #12]
		timer->_next = this;
    43ae:	str	r0, [r4, #8]
    43b0:	b.n	4390 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    43b2:	ldr	r2, [r2, #12]
    43b4:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    43b6:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    43b8:	str	r0, [r4, #12]
				_prev->_next = this;
    43ba:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    43bc:	subs	r3, r1, r3
				_state = TimerActive;
    43be:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    43c0:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    43c2:	str	r3, [r4, #0]
				_state = TimerActive;
    43c4:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    43c6:	pop	{r4, r5}
    43c8:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    43ca:	str	r4, [r0, #8]
		_prev = nullptr;
    43cc:	str	r4, [r0, #12]
		listActive = this;
    43ce:	str	r0, [r2, #0]
    43d0:	b.n	4390 <MillisTimer::addToActiveList()+0x20>
    43d2:	nop
    43d4:	.word	0x1fff1cac

000043d8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    43d8:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    43da:	ldr	r6, [pc, #136]	; (4464 <MillisTimer::runFromTimer()+0x8c>)
    43dc:	ldr	r4, [r6, #0]
	while (timer) {
    43de:	cbz	r4, 442c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    43e0:	ldr	r3, [r4, #0]
    43e2:	cmp	r3, #0
    43e4:	bne.n	445c <MillisTimer::runFromTimer()+0x84>
    43e6:	ldr	r7, [pc, #128]	; (4468 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    43e8:	mov	r5, r3
    43ea:	b.n	43f6 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    43ec:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    43ee:	cbz	r4, 442c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    43f0:	ldr	r3, [r4, #0]
    43f2:	cmp	r3, #0
    43f4:	bne.n	445c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    43f6:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    43f8:	cbz	r3, 43fc <MillisTimer::runFromTimer()+0x24>
    43fa:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    43fc:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    43fe:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4400:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4402:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4404:	ldr	r3, [r3, #0]
    4406:	cmp	r3, r7
    4408:	bne.n	444e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    440a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    440c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    440e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4410:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4412:	beq.n	4456 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4414:	bl	428c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4418:	ldr	r3, [r4, #4]
    441a:	cmp	r3, #0
    441c:	beq.n	43ec <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    441e:	str	r3, [r4, #0]
				timer->addToActiveList();
    4420:	mov	r0, r4
    4422:	bl	4370 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4426:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4428:	cmp	r4, #0
    442a:	bne.n	43f0 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    442c:	mrs	r3, PRIMASK
		__disable_irq();
    4430:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4432:	ldr	r2, [pc, #56]	; (446c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4434:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4436:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4438:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    443a:	cbnz	r3, 443e <MillisTimer::runFromTimer()+0x66>
    443c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    443e:	cbz	r0, 444c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4440:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4442:	bl	4370 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4446:	mov	r0, r4
    4448:	cmp	r0, #0
    444a:	bne.n	4440 <MillisTimer::runFromTimer()+0x68>
    444c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    444e:	mov	r2, r4
    4450:	movs	r1, #0
    4452:	blx	r3
    4454:	b.n	4418 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4456:	ldr	r3, [r0, #8]
    4458:	blx	r3
    445a:	b.n	4418 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    445c:	subs	r3, #1
    445e:	str	r3, [r4, #0]
			break;
    4460:	b.n	442c <MillisTimer::runFromTimer()+0x54>
    4462:	nop
    4464:	.word	0x1fff1cac
    4468:	.word	0x0000430d
    446c:	.word	0x1fff1cbc

00004470 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4470:	ldr	r2, [pc, #8]	; (447c <systick_isr+0xc>)
    4472:	ldr	r3, [r2, #0]
    4474:	adds	r3, #1
    4476:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4478:	b.w	43d8 <MillisTimer::runFromTimer()>
    447c:	.word	0x1fff1844

00004480 <__errno>:
    4480:	ldr	r3, [pc, #4]	; (4488 <__errno+0x8>)
    4482:	ldr	r0, [r3, #0]
    4484:	bx	lr
    4486:	nop
    4488:	.word	0x1fff1198

0000448c <__libc_init_array>:
    448c:	push	{r4, r5, r6, lr}
    448e:	ldr	r6, [pc, #60]	; (44cc <__libc_init_array+0x40>)
    4490:	ldr	r5, [pc, #60]	; (44d0 <__libc_init_array+0x44>)
    4492:	subs	r6, r6, r5
    4494:	asrs	r6, r6, #2
    4496:	it	ne
    4498:	movne	r4, #0
    449a:	beq.n	44a8 <__libc_init_array+0x1c>
    449c:	adds	r4, #1
    449e:	ldr.w	r3, [r5], #4
    44a2:	blx	r3
    44a4:	cmp	r6, r4
    44a6:	bne.n	449c <__libc_init_array+0x10>
    44a8:	ldr	r6, [pc, #40]	; (44d4 <__libc_init_array+0x48>)
    44aa:	ldr	r5, [pc, #44]	; (44d8 <__libc_init_array+0x4c>)
    44ac:	subs	r6, r6, r5
    44ae:	bl	5138 <_init>
    44b2:	asrs	r6, r6, #2
    44b4:	it	ne
    44b6:	movne	r4, #0
    44b8:	beq.n	44c8 <__libc_init_array+0x3c>
    44ba:	adds	r4, #1
    44bc:	ldr.w	r3, [r5], #4
    44c0:	blx	r3
    44c2:	cmp	r6, r4
    44c4:	bne.n	44ba <__libc_init_array+0x2e>
    44c6:	pop	{r4, r5, r6, pc}
    44c8:	pop	{r4, r5, r6, pc}
    44ca:	nop
    44cc:	.word	0x00005144
    44d0:	.word	0x00005144
    44d4:	.word	0x00005150
    44d8:	.word	0x00005144

000044dc <malloc>:
    44dc:	ldr	r3, [pc, #8]	; (44e8 <malloc+0xc>)
    44de:	mov	r1, r0
    44e0:	ldr	r0, [r3, #0]
    44e2:	b.w	44ec <_malloc_r>
    44e6:	nop
    44e8:	.word	0x1fff1198

000044ec <_malloc_r>:
    44ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44f0:	add.w	r5, r1, #11
    44f4:	cmp	r5, #22
    44f6:	sub	sp, #12
    44f8:	mov	r6, r0
    44fa:	bls.w	463c <_malloc_r+0x150>
    44fe:	bics.w	r5, r5, #7
    4502:	bmi.w	4684 <_malloc_r+0x198>
    4506:	cmp	r1, r5
    4508:	bhi.w	4684 <_malloc_r+0x198>
    450c:	bl	4a5c <__malloc_lock>
    4510:	cmp.w	r5, #504	; 0x1f8
    4514:	bcc.w	4a50 <_malloc_r+0x564>
    4518:	lsrs	r3, r5, #9
    451a:	beq.w	4692 <_malloc_r+0x1a6>
    451e:	cmp	r3, #4
    4520:	bhi.w	482a <_malloc_r+0x33e>
    4524:	lsrs	r0, r5, #6
    4526:	add.w	lr, r0, #57	; 0x39
    452a:	mov.w	r3, lr, lsl #1
    452e:	adds	r0, #56	; 0x38
    4530:	ldr	r7, [pc, #784]	; (4844 <_malloc_r+0x358>)
    4532:	add.w	r3, r7, r3, lsl #2
    4536:	sub.w	r1, r3, #8
    453a:	ldr	r4, [r3, #4]
    453c:	cmp	r1, r4
    453e:	bne.n	4550 <_malloc_r+0x64>
    4540:	b.n	469c <_malloc_r+0x1b0>
    4542:	cmp	r2, #0
    4544:	bge.w	46a0 <_malloc_r+0x1b4>
    4548:	ldr	r4, [r4, #12]
    454a:	cmp	r1, r4
    454c:	beq.w	469c <_malloc_r+0x1b0>
    4550:	ldr	r3, [r4, #4]
    4552:	bic.w	r3, r3, #3
    4556:	subs	r2, r3, r5
    4558:	cmp	r2, #15
    455a:	ble.n	4542 <_malloc_r+0x56>
    455c:	ldr	r1, [pc, #740]	; (4844 <_malloc_r+0x358>)
    455e:	ldr	r4, [r7, #16]
    4560:	add.w	lr, r1, #8
    4564:	cmp	r4, lr
    4566:	beq.w	48d0 <_malloc_r+0x3e4>
    456a:	ldr	r3, [r4, #4]
    456c:	bic.w	r3, r3, #3
    4570:	subs	r2, r3, r5
    4572:	cmp	r2, #15
    4574:	bgt.w	48aa <_malloc_r+0x3be>
    4578:	cmp	r2, #0
    457a:	str.w	lr, [r1, #20]
    457e:	str.w	lr, [r1, #16]
    4582:	bge.w	46c2 <_malloc_r+0x1d6>
    4586:	cmp.w	r3, #512	; 0x200
    458a:	bcs.w	485c <_malloc_r+0x370>
    458e:	lsrs	r3, r3, #3
    4590:	add.w	ip, r3, #1
    4594:	movs	r2, #1
    4596:	asrs	r3, r3, #2
    4598:	lsl.w	r3, r2, r3
    459c:	ldr	r2, [r1, #4]
    459e:	ldr.w	r8, [r1, ip, lsl #3]
    45a2:	str.w	r8, [r4, #8]
    45a6:	add.w	r9, r1, ip, lsl #3
    45aa:	orrs	r2, r3
    45ac:	sub.w	r3, r9, #8
    45b0:	str	r3, [r4, #12]
    45b2:	str	r2, [r1, #4]
    45b4:	str.w	r4, [r1, ip, lsl #3]
    45b8:	str.w	r4, [r8, #12]
    45bc:	asrs	r3, r0, #2
    45be:	movs	r4, #1
    45c0:	lsls	r4, r3
    45c2:	cmp	r4, r2
    45c4:	bhi.w	46dc <_malloc_r+0x1f0>
    45c8:	tst	r4, r2
    45ca:	bne.n	45da <_malloc_r+0xee>
    45cc:	bic.w	r0, r0, #3
    45d0:	lsls	r4, r4, #1
    45d2:	tst	r4, r2
    45d4:	add.w	r0, r0, #4
    45d8:	beq.n	45d0 <_malloc_r+0xe4>
    45da:	add.w	r9, r7, r0, lsl #3
    45de:	mov	ip, r9
    45e0:	mov	r8, r0
    45e2:	ldr.w	r1, [ip, #12]
    45e6:	cmp	ip, r1
    45e8:	bne.n	45fa <_malloc_r+0x10e>
    45ea:	b.n	48d4 <_malloc_r+0x3e8>
    45ec:	cmp	r2, #0
    45ee:	bge.w	48f4 <_malloc_r+0x408>
    45f2:	ldr	r1, [r1, #12]
    45f4:	cmp	ip, r1
    45f6:	beq.w	48d4 <_malloc_r+0x3e8>
    45fa:	ldr	r3, [r1, #4]
    45fc:	bic.w	r3, r3, #3
    4600:	subs	r2, r3, r5
    4602:	cmp	r2, #15
    4604:	ble.n	45ec <_malloc_r+0x100>
    4606:	mov	r4, r1
    4608:	ldr.w	ip, [r1, #12]
    460c:	ldr.w	r8, [r4, #8]!
    4610:	adds	r3, r1, r5
    4612:	orr.w	r5, r5, #1
    4616:	str	r5, [r1, #4]
    4618:	orr.w	r1, r2, #1
    461c:	str.w	ip, [r8, #12]
    4620:	mov	r0, r6
    4622:	str.w	r8, [ip, #8]
    4626:	str	r3, [r7, #20]
    4628:	str	r3, [r7, #16]
    462a:	str.w	lr, [r3, #12]
    462e:	str.w	lr, [r3, #8]
    4632:	str	r1, [r3, #4]
    4634:	str	r2, [r3, r2]
    4636:	bl	4a60 <__malloc_unlock>
    463a:	b.n	467c <_malloc_r+0x190>
    463c:	cmp	r1, #16
    463e:	bhi.n	4684 <_malloc_r+0x198>
    4640:	bl	4a5c <__malloc_lock>
    4644:	movs	r5, #16
    4646:	movs	r3, #6
    4648:	movs	r0, #2
    464a:	ldr	r7, [pc, #504]	; (4844 <_malloc_r+0x358>)
    464c:	add.w	r3, r7, r3, lsl #2
    4650:	sub.w	r2, r3, #8
    4654:	ldr	r4, [r3, #4]
    4656:	cmp	r4, r2
    4658:	beq.w	48e6 <_malloc_r+0x3fa>
    465c:	ldr	r3, [r4, #4]
    465e:	ldr	r1, [r4, #12]
    4660:	ldr	r5, [r4, #8]
    4662:	bic.w	r3, r3, #3
    4666:	add	r3, r4
    4668:	mov	r0, r6
    466a:	ldr	r2, [r3, #4]
    466c:	str	r1, [r5, #12]
    466e:	orr.w	r2, r2, #1
    4672:	str	r5, [r1, #8]
    4674:	str	r2, [r3, #4]
    4676:	bl	4a60 <__malloc_unlock>
    467a:	adds	r4, #8
    467c:	mov	r0, r4
    467e:	add	sp, #12
    4680:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4684:	movs	r4, #0
    4686:	movs	r3, #12
    4688:	mov	r0, r4
    468a:	str	r3, [r6, #0]
    468c:	add	sp, #12
    468e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4692:	movs	r3, #128	; 0x80
    4694:	mov.w	lr, #64	; 0x40
    4698:	movs	r0, #63	; 0x3f
    469a:	b.n	4530 <_malloc_r+0x44>
    469c:	mov	r0, lr
    469e:	b.n	455c <_malloc_r+0x70>
    46a0:	add	r3, r4
    46a2:	ldr	r1, [r4, #12]
    46a4:	ldr	r2, [r3, #4]
    46a6:	ldr	r5, [r4, #8]
    46a8:	orr.w	r2, r2, #1
    46ac:	str	r1, [r5, #12]
    46ae:	mov	r0, r6
    46b0:	str	r5, [r1, #8]
    46b2:	str	r2, [r3, #4]
    46b4:	bl	4a60 <__malloc_unlock>
    46b8:	adds	r4, #8
    46ba:	mov	r0, r4
    46bc:	add	sp, #12
    46be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46c2:	add	r3, r4
    46c4:	mov	r0, r6
    46c6:	ldr	r2, [r3, #4]
    46c8:	orr.w	r2, r2, #1
    46cc:	str	r2, [r3, #4]
    46ce:	bl	4a60 <__malloc_unlock>
    46d2:	adds	r4, #8
    46d4:	mov	r0, r4
    46d6:	add	sp, #12
    46d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46dc:	ldr	r4, [r7, #8]
    46de:	ldr	r3, [r4, #4]
    46e0:	bic.w	r8, r3, #3
    46e4:	cmp	r8, r5
    46e6:	bcc.n	46f2 <_malloc_r+0x206>
    46e8:	rsb	r3, r5, r8
    46ec:	cmp	r3, #15
    46ee:	bgt.w	480a <_malloc_r+0x31e>
    46f2:	ldr	r3, [pc, #340]	; (4848 <_malloc_r+0x35c>)
    46f4:	ldr.w	r9, [pc, #352]	; 4858 <_malloc_r+0x36c>
    46f8:	ldr	r2, [r3, #0]
    46fa:	ldr.w	r3, [r9]
    46fe:	adds	r3, #1
    4700:	add	r2, r5
    4702:	add.w	sl, r4, r8
    4706:	beq.w	49ca <_malloc_r+0x4de>
    470a:	add.w	r2, r2, #4096	; 0x1000
    470e:	adds	r2, #15
    4710:	bic.w	r2, r2, #4080	; 0xff0
    4714:	bic.w	r2, r2, #15
    4718:	mov	r1, r2
    471a:	mov	r0, r6
    471c:	str	r2, [sp, #4]
    471e:	bl	4a64 <_sbrk_r>
    4722:	cmp.w	r0, #4294967295
    4726:	mov	fp, r0
    4728:	ldr	r2, [sp, #4]
    472a:	beq.w	49de <_malloc_r+0x4f2>
    472e:	cmp	sl, r0
    4730:	bhi.w	492c <_malloc_r+0x440>
    4734:	ldr	r3, [pc, #276]	; (484c <_malloc_r+0x360>)
    4736:	ldr	r1, [r3, #0]
    4738:	cmp	sl, fp
    473a:	add	r1, r2
    473c:	str	r1, [r3, #0]
    473e:	beq.w	49e8 <_malloc_r+0x4fc>
    4742:	ldr.w	r0, [r9]
    4746:	ldr.w	lr, [pc, #272]	; 4858 <_malloc_r+0x36c>
    474a:	adds	r0, #1
    474c:	ittet	ne
    474e:	rsbne	sl, sl, fp
    4752:	addne	r1, sl
    4754:	streq.w	fp, [lr]
    4758:	strne	r1, [r3, #0]
    475a:	ands.w	r1, fp, #7
    475e:	beq.w	4990 <_malloc_r+0x4a4>
    4762:	rsb	r0, r1, #8
    4766:	rsb	r1, r1, #4096	; 0x1000
    476a:	add	fp, r0
    476c:	adds	r1, #8
    476e:	add	r2, fp
    4770:	ubfx	r2, r2, #0, #12
    4774:	rsb	r9, r2, r1
    4778:	mov	r1, r9
    477a:	mov	r0, r6
    477c:	str	r3, [sp, #4]
    477e:	bl	4a64 <_sbrk_r>
    4782:	adds	r3, r0, #1
    4784:	ldr	r3, [sp, #4]
    4786:	beq.w	4a08 <_malloc_r+0x51c>
    478a:	rsb	r2, fp, r0
    478e:	add	r2, r9
    4790:	orr.w	r2, r2, #1
    4794:	ldr	r1, [r3, #0]
    4796:	str.w	fp, [r7, #8]
    479a:	add	r1, r9
    479c:	cmp	r4, r7
    479e:	str.w	r2, [fp, #4]
    47a2:	str	r1, [r3, #0]
    47a4:	ldr.w	r9, [pc, #164]	; 484c <_malloc_r+0x360>
    47a8:	beq.n	47d8 <_malloc_r+0x2ec>
    47aa:	cmp.w	r8, #15
    47ae:	bls.w	49ac <_malloc_r+0x4c0>
    47b2:	ldr	r2, [r4, #4]
    47b4:	sub.w	r3, r8, #12
    47b8:	bic.w	r3, r3, #7
    47bc:	adds	r0, r4, r3
    47be:	and.w	r2, r2, #1
    47c2:	mov.w	lr, #5
    47c6:	orrs	r2, r3
    47c8:	cmp	r3, #15
    47ca:	str	r2, [r4, #4]
    47cc:	str.w	lr, [r0, #4]
    47d0:	str.w	lr, [r0, #8]
    47d4:	bhi.w	4a10 <_malloc_r+0x524>
    47d8:	ldr	r3, [pc, #116]	; (4850 <_malloc_r+0x364>)
    47da:	ldr	r4, [r7, #8]
    47dc:	ldr	r2, [r3, #0]
    47de:	cmp	r1, r2
    47e0:	it	hi
    47e2:	strhi	r1, [r3, #0]
    47e4:	ldr	r3, [pc, #108]	; (4854 <_malloc_r+0x368>)
    47e6:	ldr	r2, [r3, #0]
    47e8:	cmp	r1, r2
    47ea:	ldr	r2, [r4, #4]
    47ec:	it	hi
    47ee:	strhi	r1, [r3, #0]
    47f0:	bic.w	r2, r2, #3
    47f4:	cmp	r5, r2
    47f6:	sub.w	r3, r2, r5
    47fa:	bhi.n	4800 <_malloc_r+0x314>
    47fc:	cmp	r3, #15
    47fe:	bgt.n	480a <_malloc_r+0x31e>
    4800:	mov	r0, r6
    4802:	bl	4a60 <__malloc_unlock>
    4806:	movs	r4, #0
    4808:	b.n	467c <_malloc_r+0x190>
    480a:	adds	r2, r4, r5
    480c:	orr.w	r3, r3, #1
    4810:	orr.w	r5, r5, #1
    4814:	str	r5, [r4, #4]
    4816:	mov	r0, r6
    4818:	str	r2, [r7, #8]
    481a:	str	r3, [r2, #4]
    481c:	bl	4a60 <__malloc_unlock>
    4820:	adds	r4, #8
    4822:	mov	r0, r4
    4824:	add	sp, #12
    4826:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    482a:	cmp	r3, #20
    482c:	bls.n	4912 <_malloc_r+0x426>
    482e:	cmp	r3, #84	; 0x54
    4830:	bhi.w	497c <_malloc_r+0x490>
    4834:	lsrs	r0, r5, #12
    4836:	add.w	lr, r0, #111	; 0x6f
    483a:	mov.w	r3, lr, lsl #1
    483e:	adds	r0, #110	; 0x6e
    4840:	b.n	4530 <_malloc_r+0x44>
    4842:	nop
    4844:	.word	0x1fff119c
    4848:	.word	0x1fff1cc8
    484c:	.word	0x1fff1ccc
    4850:	.word	0x1fff1cc4
    4854:	.word	0x1fff1cc0
    4858:	.word	0x1fff15a8
    485c:	lsrs	r2, r3, #9
    485e:	cmp	r2, #4
    4860:	bls.n	4920 <_malloc_r+0x434>
    4862:	cmp	r2, #20
    4864:	bhi.w	49ce <_malloc_r+0x4e2>
    4868:	add.w	r1, r2, #92	; 0x5c
    486c:	lsls	r1, r1, #1
    486e:	adds	r2, #91	; 0x5b
    4870:	add.w	ip, r7, r1, lsl #2
    4874:	ldr.w	r1, [r7, r1, lsl #2]
    4878:	ldr.w	r8, [pc, #476]	; 4a58 <_malloc_r+0x56c>
    487c:	sub.w	ip, ip, #8
    4880:	cmp	ip, r1
    4882:	beq.w	4996 <_malloc_r+0x4aa>
    4886:	ldr	r2, [r1, #4]
    4888:	bic.w	r2, r2, #3
    488c:	cmp	r3, r2
    488e:	bcs.n	4896 <_malloc_r+0x3aa>
    4890:	ldr	r1, [r1, #8]
    4892:	cmp	ip, r1
    4894:	bne.n	4886 <_malloc_r+0x39a>
    4896:	ldr.w	ip, [r1, #12]
    489a:	ldr	r2, [r7, #4]
    489c:	str.w	ip, [r4, #12]
    48a0:	str	r1, [r4, #8]
    48a2:	str.w	r4, [ip, #8]
    48a6:	str	r4, [r1, #12]
    48a8:	b.n	45bc <_malloc_r+0xd0>
    48aa:	adds	r3, r4, r5
    48ac:	orr.w	r7, r2, #1
    48b0:	orr.w	r5, r5, #1
    48b4:	str	r5, [r4, #4]
    48b6:	mov	r0, r6
    48b8:	str	r3, [r1, #20]
    48ba:	str	r3, [r1, #16]
    48bc:	str.w	lr, [r3, #12]
    48c0:	str.w	lr, [r3, #8]
    48c4:	str	r7, [r3, #4]
    48c6:	str	r2, [r3, r2]
    48c8:	adds	r4, #8
    48ca:	bl	4a60 <__malloc_unlock>
    48ce:	b.n	467c <_malloc_r+0x190>
    48d0:	ldr	r2, [r1, #4]
    48d2:	b.n	45bc <_malloc_r+0xd0>
    48d4:	add.w	r8, r8, #1
    48d8:	tst.w	r8, #3
    48dc:	add.w	ip, ip, #8
    48e0:	bne.w	45e2 <_malloc_r+0xf6>
    48e4:	b.n	4948 <_malloc_r+0x45c>
    48e6:	ldr	r4, [r3, #12]
    48e8:	cmp	r3, r4
    48ea:	it	eq
    48ec:	addeq	r0, #2
    48ee:	beq.w	455c <_malloc_r+0x70>
    48f2:	b.n	465c <_malloc_r+0x170>
    48f4:	add	r3, r1
    48f6:	mov	r4, r1
    48f8:	ldr	r2, [r3, #4]
    48fa:	ldr	r1, [r1, #12]
    48fc:	ldr.w	r5, [r4, #8]!
    4900:	orr.w	r2, r2, #1
    4904:	str	r2, [r3, #4]
    4906:	mov	r0, r6
    4908:	str	r1, [r5, #12]
    490a:	str	r5, [r1, #8]
    490c:	bl	4a60 <__malloc_unlock>
    4910:	b.n	467c <_malloc_r+0x190>
    4912:	add.w	lr, r3, #92	; 0x5c
    4916:	add.w	r0, r3, #91	; 0x5b
    491a:	mov.w	r3, lr, lsl #1
    491e:	b.n	4530 <_malloc_r+0x44>
    4920:	lsrs	r2, r3, #6
    4922:	add.w	r1, r2, #57	; 0x39
    4926:	lsls	r1, r1, #1
    4928:	adds	r2, #56	; 0x38
    492a:	b.n	4870 <_malloc_r+0x384>
    492c:	cmp	r4, r7
    492e:	ldr	r3, [pc, #296]	; (4a58 <_malloc_r+0x56c>)
    4930:	beq.w	4734 <_malloc_r+0x248>
    4934:	ldr	r4, [r3, #8]
    4936:	ldr	r2, [r4, #4]
    4938:	bic.w	r2, r2, #3
    493c:	b.n	47f4 <_malloc_r+0x308>
    493e:	ldr.w	r3, [r9], #-8
    4942:	cmp	r9, r3
    4944:	bne.w	4a4c <_malloc_r+0x560>
    4948:	tst.w	r0, #3
    494c:	add.w	r0, r0, #4294967295
    4950:	bne.n	493e <_malloc_r+0x452>
    4952:	ldr	r3, [r7, #4]
    4954:	bic.w	r3, r3, r4
    4958:	str	r3, [r7, #4]
    495a:	lsls	r4, r4, #1
    495c:	cmp	r4, r3
    495e:	bhi.w	46dc <_malloc_r+0x1f0>
    4962:	cmp	r4, #0
    4964:	beq.w	46dc <_malloc_r+0x1f0>
    4968:	tst	r4, r3
    496a:	mov	r0, r8
    496c:	bne.w	45da <_malloc_r+0xee>
    4970:	lsls	r4, r4, #1
    4972:	tst	r4, r3
    4974:	add.w	r0, r0, #4
    4978:	beq.n	4970 <_malloc_r+0x484>
    497a:	b.n	45da <_malloc_r+0xee>
    497c:	cmp.w	r3, #340	; 0x154
    4980:	bhi.n	49b4 <_malloc_r+0x4c8>
    4982:	lsrs	r0, r5, #15
    4984:	add.w	lr, r0, #120	; 0x78
    4988:	mov.w	r3, lr, lsl #1
    498c:	adds	r0, #119	; 0x77
    498e:	b.n	4530 <_malloc_r+0x44>
    4990:	mov.w	r1, #4096	; 0x1000
    4994:	b.n	476e <_malloc_r+0x282>
    4996:	movs	r1, #1
    4998:	ldr.w	r3, [r8, #4]
    499c:	asrs	r2, r2, #2
    499e:	lsl.w	r2, r1, r2
    49a2:	orrs	r2, r3
    49a4:	str.w	r2, [r8, #4]
    49a8:	mov	r1, ip
    49aa:	b.n	489c <_malloc_r+0x3b0>
    49ac:	movs	r3, #1
    49ae:	str.w	r3, [fp, #4]
    49b2:	b.n	4800 <_malloc_r+0x314>
    49b4:	movw	r2, #1364	; 0x554
    49b8:	cmp	r3, r2
    49ba:	bhi.n	49fe <_malloc_r+0x512>
    49bc:	lsrs	r0, r5, #18
    49be:	add.w	lr, r0, #125	; 0x7d
    49c2:	mov.w	r3, lr, lsl #1
    49c6:	adds	r0, #124	; 0x7c
    49c8:	b.n	4530 <_malloc_r+0x44>
    49ca:	adds	r2, #16
    49cc:	b.n	4718 <_malloc_r+0x22c>
    49ce:	cmp	r2, #84	; 0x54
    49d0:	bhi.n	4a20 <_malloc_r+0x534>
    49d2:	lsrs	r2, r3, #12
    49d4:	add.w	r1, r2, #111	; 0x6f
    49d8:	lsls	r1, r1, #1
    49da:	adds	r2, #110	; 0x6e
    49dc:	b.n	4870 <_malloc_r+0x384>
    49de:	ldr	r4, [r7, #8]
    49e0:	ldr	r2, [r4, #4]
    49e2:	bic.w	r2, r2, #3
    49e6:	b.n	47f4 <_malloc_r+0x308>
    49e8:	ubfx	r0, sl, #0, #12
    49ec:	cmp	r0, #0
    49ee:	bne.w	4742 <_malloc_r+0x256>
    49f2:	add	r2, r8
    49f4:	ldr	r3, [r7, #8]
    49f6:	orr.w	r2, r2, #1
    49fa:	str	r2, [r3, #4]
    49fc:	b.n	47d8 <_malloc_r+0x2ec>
    49fe:	movs	r3, #254	; 0xfe
    4a00:	mov.w	lr, #127	; 0x7f
    4a04:	movs	r0, #126	; 0x7e
    4a06:	b.n	4530 <_malloc_r+0x44>
    4a08:	movs	r2, #1
    4a0a:	mov.w	r9, #0
    4a0e:	b.n	4794 <_malloc_r+0x2a8>
    4a10:	add.w	r1, r4, #8
    4a14:	mov	r0, r6
    4a16:	bl	4b6c <_free_r>
    4a1a:	ldr.w	r1, [r9]
    4a1e:	b.n	47d8 <_malloc_r+0x2ec>
    4a20:	cmp.w	r2, #340	; 0x154
    4a24:	bhi.n	4a32 <_malloc_r+0x546>
    4a26:	lsrs	r2, r3, #15
    4a28:	add.w	r1, r2, #120	; 0x78
    4a2c:	lsls	r1, r1, #1
    4a2e:	adds	r2, #119	; 0x77
    4a30:	b.n	4870 <_malloc_r+0x384>
    4a32:	movw	r1, #1364	; 0x554
    4a36:	cmp	r2, r1
    4a38:	bhi.n	4a46 <_malloc_r+0x55a>
    4a3a:	lsrs	r2, r3, #18
    4a3c:	add.w	r1, r2, #125	; 0x7d
    4a40:	lsls	r1, r1, #1
    4a42:	adds	r2, #124	; 0x7c
    4a44:	b.n	4870 <_malloc_r+0x384>
    4a46:	movs	r1, #254	; 0xfe
    4a48:	movs	r2, #126	; 0x7e
    4a4a:	b.n	4870 <_malloc_r+0x384>
    4a4c:	ldr	r3, [r7, #4]
    4a4e:	b.n	495a <_malloc_r+0x46e>
    4a50:	lsrs	r0, r5, #3
    4a52:	adds	r3, r0, #1
    4a54:	lsls	r3, r3, #1
    4a56:	b.n	464a <_malloc_r+0x15e>
    4a58:	.word	0x1fff119c

00004a5c <__malloc_lock>:
    4a5c:	bx	lr
    4a5e:	nop

00004a60 <__malloc_unlock>:
    4a60:	bx	lr
    4a62:	nop

00004a64 <_sbrk_r>:
    4a64:	push	{r3, r4, r5, lr}
    4a66:	ldr	r4, [pc, #28]	; (4a84 <_sbrk_r+0x20>)
    4a68:	movs	r3, #0
    4a6a:	mov	r5, r0
    4a6c:	mov	r0, r1
    4a6e:	str	r3, [r4, #0]
    4a70:	bl	3df8 <_sbrk>
    4a74:	adds	r3, r0, #1
    4a76:	beq.n	4a7a <_sbrk_r+0x16>
    4a78:	pop	{r3, r4, r5, pc}
    4a7a:	ldr	r3, [r4, #0]
    4a7c:	cmp	r3, #0
    4a7e:	beq.n	4a78 <_sbrk_r+0x14>
    4a80:	str	r3, [r5, #0]
    4a82:	pop	{r3, r4, r5, pc}
    4a84:	.word	0x1fff1e38

00004a88 <register_fini>:
    4a88:	ldr	r3, [pc, #8]	; (4a94 <register_fini+0xc>)
    4a8a:	cbz	r3, 4a92 <register_fini+0xa>
    4a8c:	ldr	r0, [pc, #8]	; (4a98 <register_fini+0x10>)
    4a8e:	b.w	4a9c <atexit>
    4a92:	bx	lr
    4a94:	.word	0x00000000
    4a98:	.word	0x00004aa9

00004a9c <atexit>:
    4a9c:	movs	r3, #0
    4a9e:	mov	r1, r0
    4aa0:	mov	r2, r3
    4aa2:	mov	r0, r3
    4aa4:	b.w	4d3c <__register_exitproc>

00004aa8 <__libc_fini_array>:
    4aa8:	push	{r3, r4, r5, lr}
    4aaa:	ldr	r5, [pc, #28]	; (4ac8 <__libc_fini_array+0x20>)
    4aac:	ldr	r4, [pc, #28]	; (4acc <__libc_fini_array+0x24>)
    4aae:	subs	r4, r5, r4
    4ab0:	asrs	r4, r4, #2
    4ab2:	beq.n	4ac0 <__libc_fini_array+0x18>
    4ab4:	subs	r4, #1
    4ab6:	ldr.w	r3, [r5, #-4]!
    4aba:	blx	r3
    4abc:	cmp	r4, #0
    4abe:	bne.n	4ab4 <__libc_fini_array+0xc>
    4ac0:	ldmia.w	sp!, {r3, r4, r5, lr}
    4ac4:	b.w	5150 <__init_array_end>
	...

00004ad0 <_malloc_trim_r>:
    4ad0:	push	{r3, r4, r5, r6, r7, lr}
    4ad2:	ldr	r7, [pc, #140]	; (4b60 <_malloc_trim_r+0x90>)
    4ad4:	mov	r4, r1
    4ad6:	mov	r6, r0
    4ad8:	bl	4a5c <__malloc_lock>
    4adc:	ldr	r3, [r7, #8]
    4ade:	ldr	r5, [r3, #4]
    4ae0:	bic.w	r5, r5, #3
    4ae4:	subs	r1, r5, r4
    4ae6:	addw	r1, r1, #4079	; 0xfef
    4aea:	bic.w	r1, r1, #4080	; 0xff0
    4aee:	bic.w	r1, r1, #15
    4af2:	sub.w	r4, r1, #4096	; 0x1000
    4af6:	cmp.w	r4, #4096	; 0x1000
    4afa:	blt.n	4b0c <_malloc_trim_r+0x3c>
    4afc:	movs	r1, #0
    4afe:	mov	r0, r6
    4b00:	bl	4a64 <_sbrk_r>
    4b04:	ldr	r3, [r7, #8]
    4b06:	add	r3, r5
    4b08:	cmp	r0, r3
    4b0a:	beq.n	4b16 <_malloc_trim_r+0x46>
    4b0c:	mov	r0, r6
    4b0e:	bl	4a60 <__malloc_unlock>
    4b12:	movs	r0, #0
    4b14:	pop	{r3, r4, r5, r6, r7, pc}
    4b16:	negs	r1, r4
    4b18:	mov	r0, r6
    4b1a:	bl	4a64 <_sbrk_r>
    4b1e:	adds	r0, #1
    4b20:	beq.n	4b3e <_malloc_trim_r+0x6e>
    4b22:	ldr	r3, [pc, #64]	; (4b64 <_malloc_trim_r+0x94>)
    4b24:	ldr	r2, [r7, #8]
    4b26:	ldr	r1, [r3, #0]
    4b28:	subs	r5, r5, r4
    4b2a:	orr.w	r5, r5, #1
    4b2e:	mov	r0, r6
    4b30:	subs	r1, r1, r4
    4b32:	str	r5, [r2, #4]
    4b34:	str	r1, [r3, #0]
    4b36:	bl	4a60 <__malloc_unlock>
    4b3a:	movs	r0, #1
    4b3c:	pop	{r3, r4, r5, r6, r7, pc}
    4b3e:	movs	r1, #0
    4b40:	mov	r0, r6
    4b42:	bl	4a64 <_sbrk_r>
    4b46:	ldr	r2, [r7, #8]
    4b48:	subs	r3, r0, r2
    4b4a:	cmp	r3, #15
    4b4c:	ble.n	4b0c <_malloc_trim_r+0x3c>
    4b4e:	ldr	r4, [pc, #24]	; (4b68 <_malloc_trim_r+0x98>)
    4b50:	ldr	r1, [pc, #16]	; (4b64 <_malloc_trim_r+0x94>)
    4b52:	ldr	r4, [r4, #0]
    4b54:	orr.w	r3, r3, #1
    4b58:	subs	r0, r0, r4
    4b5a:	str	r3, [r2, #4]
    4b5c:	str	r0, [r1, #0]
    4b5e:	b.n	4b0c <_malloc_trim_r+0x3c>
    4b60:	.word	0x1fff119c
    4b64:	.word	0x1fff1ccc
    4b68:	.word	0x1fff15a8

00004b6c <_free_r>:
    4b6c:	cmp	r1, #0
    4b6e:	beq.n	4bfc <_free_r+0x90>
    4b70:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b74:	mov	r5, r1
    4b76:	mov	r8, r0
    4b78:	bl	4a5c <__malloc_lock>
    4b7c:	ldr.w	r7, [r5, #-4]
    4b80:	ldr	r1, [pc, #424]	; (4d2c <_free_r+0x1c0>)
    4b82:	bic.w	r3, r7, #1
    4b86:	sub.w	r4, r5, #8
    4b8a:	adds	r2, r4, r3
    4b8c:	ldr	r6, [r1, #8]
    4b8e:	ldr	r0, [r2, #4]
    4b90:	cmp	r2, r6
    4b92:	bic.w	r0, r0, #3
    4b96:	beq.n	4c5e <_free_r+0xf2>
    4b98:	lsls	r6, r7, #31
    4b9a:	str	r0, [r2, #4]
    4b9c:	bmi.n	4bb6 <_free_r+0x4a>
    4b9e:	ldr.w	r7, [r5, #-8]
    4ba2:	subs	r4, r4, r7
    4ba4:	add.w	lr, r1, #8
    4ba8:	ldr	r5, [r4, #8]
    4baa:	cmp	r5, lr
    4bac:	add	r3, r7
    4bae:	beq.n	4c90 <_free_r+0x124>
    4bb0:	ldr	r7, [r4, #12]
    4bb2:	str	r7, [r5, #12]
    4bb4:	str	r5, [r7, #8]
    4bb6:	adds	r5, r2, r0
    4bb8:	ldr	r5, [r5, #4]
    4bba:	lsls	r5, r5, #31
    4bbc:	bpl.n	4c44 <_free_r+0xd8>
    4bbe:	orr.w	r2, r3, #1
    4bc2:	str	r2, [r4, #4]
    4bc4:	str	r3, [r4, r3]
    4bc6:	cmp.w	r3, #512	; 0x200
    4bca:	bcs.n	4bfe <_free_r+0x92>
    4bcc:	lsrs	r3, r3, #3
    4bce:	adds	r2, r3, #1
    4bd0:	ldr	r5, [r1, #4]
    4bd2:	ldr.w	r7, [r1, r2, lsl #3]
    4bd6:	str	r7, [r4, #8]
    4bd8:	movs	r0, #1
    4bda:	asrs	r3, r3, #2
    4bdc:	lsl.w	r3, r0, r3
    4be0:	add.w	r0, r1, r2, lsl #3
    4be4:	orrs	r5, r3
    4be6:	subs	r0, #8
    4be8:	str	r0, [r4, #12]
    4bea:	str	r5, [r1, #4]
    4bec:	str.w	r4, [r1, r2, lsl #3]
    4bf0:	str	r4, [r7, #12]
    4bf2:	mov	r0, r8
    4bf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4bf8:	b.w	4a60 <__malloc_unlock>
    4bfc:	bx	lr
    4bfe:	lsrs	r2, r3, #9
    4c00:	cmp	r2, #4
    4c02:	bhi.n	4cac <_free_r+0x140>
    4c04:	lsrs	r2, r3, #6
    4c06:	add.w	r7, r2, #57	; 0x39
    4c0a:	lsls	r7, r7, #1
    4c0c:	add.w	r5, r2, #56	; 0x38
    4c10:	add.w	r0, r1, r7, lsl #2
    4c14:	ldr.w	r2, [r1, r7, lsl #2]
    4c18:	ldr	r1, [pc, #272]	; (4d2c <_free_r+0x1c0>)
    4c1a:	subs	r0, #8
    4c1c:	cmp	r0, r2
    4c1e:	beq.n	4cbc <_free_r+0x150>
    4c20:	ldr	r1, [r2, #4]
    4c22:	bic.w	r1, r1, #3
    4c26:	cmp	r3, r1
    4c28:	bcs.n	4c30 <_free_r+0xc4>
    4c2a:	ldr	r2, [r2, #8]
    4c2c:	cmp	r0, r2
    4c2e:	bne.n	4c20 <_free_r+0xb4>
    4c30:	ldr	r0, [r2, #12]
    4c32:	str	r0, [r4, #12]
    4c34:	str	r2, [r4, #8]
    4c36:	str	r4, [r0, #8]
    4c38:	str	r4, [r2, #12]
    4c3a:	mov	r0, r8
    4c3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c40:	b.w	4a60 <__malloc_unlock>
    4c44:	ldr	r5, [r2, #8]
    4c46:	ldr	r7, [pc, #232]	; (4d30 <_free_r+0x1c4>)
    4c48:	cmp	r5, r7
    4c4a:	add	r3, r0
    4c4c:	beq.n	4cce <_free_r+0x162>
    4c4e:	ldr	r0, [r2, #12]
    4c50:	str	r0, [r5, #12]
    4c52:	orr.w	r2, r3, #1
    4c56:	str	r5, [r0, #8]
    4c58:	str	r2, [r4, #4]
    4c5a:	str	r3, [r4, r3]
    4c5c:	b.n	4bc6 <_free_r+0x5a>
    4c5e:	lsls	r7, r7, #31
    4c60:	add	r3, r0
    4c62:	bmi.n	4c74 <_free_r+0x108>
    4c64:	ldr.w	r2, [r5, #-8]
    4c68:	subs	r4, r4, r2
    4c6a:	add	r3, r2
    4c6c:	ldr	r0, [r4, #8]
    4c6e:	ldr	r2, [r4, #12]
    4c70:	str	r2, [r0, #12]
    4c72:	str	r0, [r2, #8]
    4c74:	ldr	r2, [pc, #188]	; (4d34 <_free_r+0x1c8>)
    4c76:	ldr	r2, [r2, #0]
    4c78:	orr.w	r0, r3, #1
    4c7c:	cmp	r3, r2
    4c7e:	str	r0, [r4, #4]
    4c80:	str	r4, [r1, #8]
    4c82:	bcc.n	4bf2 <_free_r+0x86>
    4c84:	ldr	r3, [pc, #176]	; (4d38 <_free_r+0x1cc>)
    4c86:	mov	r0, r8
    4c88:	ldr	r1, [r3, #0]
    4c8a:	bl	4ad0 <_malloc_trim_r>
    4c8e:	b.n	4bf2 <_free_r+0x86>
    4c90:	adds	r1, r2, r0
    4c92:	ldr	r1, [r1, #4]
    4c94:	lsls	r1, r1, #31
    4c96:	bmi.n	4d22 <_free_r+0x1b6>
    4c98:	ldr	r1, [r2, #8]
    4c9a:	ldr	r2, [r2, #12]
    4c9c:	str	r2, [r1, #12]
    4c9e:	add	r3, r0
    4ca0:	orr.w	r0, r3, #1
    4ca4:	str	r1, [r2, #8]
    4ca6:	str	r0, [r4, #4]
    4ca8:	str	r3, [r4, r3]
    4caa:	b.n	4bf2 <_free_r+0x86>
    4cac:	cmp	r2, #20
    4cae:	bhi.n	4ce0 <_free_r+0x174>
    4cb0:	add.w	r7, r2, #92	; 0x5c
    4cb4:	lsls	r7, r7, #1
    4cb6:	add.w	r5, r2, #91	; 0x5b
    4cba:	b.n	4c10 <_free_r+0xa4>
    4cbc:	asrs	r2, r5, #2
    4cbe:	ldr	r3, [r1, #4]
    4cc0:	movs	r5, #1
    4cc2:	lsl.w	r2, r5, r2
    4cc6:	orrs	r3, r2
    4cc8:	str	r3, [r1, #4]
    4cca:	mov	r2, r0
    4ccc:	b.n	4c32 <_free_r+0xc6>
    4cce:	orr.w	r2, r3, #1
    4cd2:	str	r4, [r1, #20]
    4cd4:	str	r4, [r1, #16]
    4cd6:	str	r5, [r4, #12]
    4cd8:	str	r5, [r4, #8]
    4cda:	str	r2, [r4, #4]
    4cdc:	str	r3, [r4, r3]
    4cde:	b.n	4bf2 <_free_r+0x86>
    4ce0:	cmp	r2, #84	; 0x54
    4ce2:	bhi.n	4cf2 <_free_r+0x186>
    4ce4:	lsrs	r2, r3, #12
    4ce6:	add.w	r7, r2, #111	; 0x6f
    4cea:	lsls	r7, r7, #1
    4cec:	add.w	r5, r2, #110	; 0x6e
    4cf0:	b.n	4c10 <_free_r+0xa4>
    4cf2:	cmp.w	r2, #340	; 0x154
    4cf6:	bhi.n	4d06 <_free_r+0x19a>
    4cf8:	lsrs	r2, r3, #15
    4cfa:	add.w	r7, r2, #120	; 0x78
    4cfe:	lsls	r7, r7, #1
    4d00:	add.w	r5, r2, #119	; 0x77
    4d04:	b.n	4c10 <_free_r+0xa4>
    4d06:	movw	r0, #1364	; 0x554
    4d0a:	cmp	r2, r0
    4d0c:	bhi.n	4d1c <_free_r+0x1b0>
    4d0e:	lsrs	r2, r3, #18
    4d10:	add.w	r7, r2, #125	; 0x7d
    4d14:	lsls	r7, r7, #1
    4d16:	add.w	r5, r2, #124	; 0x7c
    4d1a:	b.n	4c10 <_free_r+0xa4>
    4d1c:	movs	r7, #254	; 0xfe
    4d1e:	movs	r5, #126	; 0x7e
    4d20:	b.n	4c10 <_free_r+0xa4>
    4d22:	orr.w	r2, r3, #1
    4d26:	str	r2, [r4, #4]
    4d28:	str	r3, [r4, r3]
    4d2a:	b.n	4bf2 <_free_r+0x86>
    4d2c:	.word	0x1fff119c
    4d30:	.word	0x1fff11a4
    4d34:	.word	0x1fff15a4
    4d38:	.word	0x1fff1cc8

00004d3c <__register_exitproc>:
    4d3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d40:	ldr	r4, [pc, #148]	; (4dd8 <__register_exitproc+0x9c>)
    4d42:	ldr	r5, [r4, #0]
    4d44:	ldr.w	r4, [r5, #328]	; 0x148
    4d48:	mov	r6, r0
    4d4a:	mov	r8, r1
    4d4c:	mov	sl, r2
    4d4e:	mov	r9, r3
    4d50:	cbz	r4, 4dc4 <__register_exitproc+0x88>
    4d52:	ldr	r0, [r4, #4]
    4d54:	cmp	r0, #31
    4d56:	bgt.n	4d88 <__register_exitproc+0x4c>
    4d58:	adds	r3, r0, #1
    4d5a:	cbz	r6, 4d7a <__register_exitproc+0x3e>
    4d5c:	add.w	r5, r4, r0, lsl #2
    4d60:	movs	r2, #1
    4d62:	str.w	sl, [r5, #136]	; 0x88
    4d66:	ldr.w	r1, [r4, #392]	; 0x188
    4d6a:	lsls	r2, r0
    4d6c:	orrs	r1, r2
    4d6e:	cmp	r6, #2
    4d70:	str.w	r1, [r4, #392]	; 0x188
    4d74:	str.w	r9, [r5, #264]	; 0x108
    4d78:	beq.n	4db8 <__register_exitproc+0x7c>
    4d7a:	adds	r0, #2
    4d7c:	str	r3, [r4, #4]
    4d7e:	str.w	r8, [r4, r0, lsl #2]
    4d82:	movs	r0, #0
    4d84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d88:	ldr	r3, [pc, #80]	; (4ddc <__register_exitproc+0xa0>)
    4d8a:	cbz	r3, 4dce <__register_exitproc+0x92>
    4d8c:	mov.w	r0, #400	; 0x190
    4d90:	bl	44dc <malloc>
    4d94:	mov	r4, r0
    4d96:	cbz	r0, 4dce <__register_exitproc+0x92>
    4d98:	ldr.w	r3, [r5, #328]	; 0x148
    4d9c:	movs	r7, #0
    4d9e:	stmia.w	r0, {r3, r7}
    4da2:	str.w	r4, [r5, #328]	; 0x148
    4da6:	mov	r0, r7
    4da8:	movs	r3, #1
    4daa:	str.w	r7, [r4, #392]	; 0x188
    4dae:	str.w	r7, [r4, #396]	; 0x18c
    4db2:	cmp	r6, #0
    4db4:	beq.n	4d7a <__register_exitproc+0x3e>
    4db6:	b.n	4d5c <__register_exitproc+0x20>
    4db8:	ldr.w	r1, [r4, #396]	; 0x18c
    4dbc:	orrs	r2, r1
    4dbe:	str.w	r2, [r4, #396]	; 0x18c
    4dc2:	b.n	4d7a <__register_exitproc+0x3e>
    4dc4:	add.w	r4, r5, #332	; 0x14c
    4dc8:	str.w	r4, [r5, #328]	; 0x148
    4dcc:	b.n	4d52 <__register_exitproc+0x16>
    4dce:	mov.w	r0, #4294967295
    4dd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dd6:	nop
    4dd8:	.word	0x00005134
    4ddc:	.word	0x000044dd
    4de0:	.word	0x00000026
    4de4:	.word	0x00000029
    4de8:	.word	0x0000002d
    4dec:	.word	0x00000033
    4df0:	.word	0x00000064
    4df4:	.word	0x00000064
    4df8:	.word	0x00000064
    4dfc:	.word	0x00000064
    4e00:	.word	0x00000001
    4e04:	.word	0x00000001
    4e08:	.word	0x00000001
    4e0c:	.word	0x00000001
    4e10:	.word	0x7370704f
    4e14:	.word	0x6e61202c
    4e18:	.word	0x6b6e7520
    4e1c:	.word	0x6e776f6e
    4e20:	.word	0x44494d20
    4e24:	.word	0x656d2049
    4e28:	.word	0x67617373
    4e2c:	.word	0x79742065
    4e30:	.word	0x00216570
    4e34:	.word	0x43544950
    4e38:	.word	0x00000048
    4e3c:	.word	0x4f4c4556
    4e40:	.word	0x59544943
    4e44:	.word	0x00000000
    4e48:	.word	0x45544f4e
    4e4c:	.word	0x474e454c
    4e50:	.word	0x00004854
    4e54:	.word	0x424f4c47
    4e58:	.word	0x00004c41
    4e5c:	.word	0x79616c50
    4e60:	.word	0x00000000

00004e64 <pin2sc1a>:
    4e64:	................
    4e74:	................
    4e84:	................
    4e94:	................
    4ea4:	........

00004eac <digital_pin_to_info_PGM>:
    4eac:	@..C@..@D..CD..@
    4ebc:	...C...@0..C0..@
    4ecc:	4..C4..@...C...@
    4edc:	...C...@...C...@
    4eec:	...C...@...C...@
    4efc:	...C...@...C...@
    4f0c:	...C...@...C...@
    4f1c:	...C...@...C...@
    4f2c:	...C...@...C...@
    4f3c:	...C...@...C...@
    4f4c:	...C...@...C...@
    4f5c:	...C...@...C...@
    4f6c:	h .Ch..@...C...@
    4f7c:	8..C8..@<..C<..@
    4f8c:	@..C@..@H..CH..@
    4f9c:	L..CL..@(..C(..@
    4fac:	,..C,..@` .C`..@
    4fbc:	d .Cd..@ ..C ..@
    4fcc:	$..C$..@(..C(..@
    4fdc:	,..C,..@D..CD..@
    4fec:	p..Cp..@t..Ct..@
    4ffc:	h..Ch..@P..CP..@
    500c:	X..CX..@\..C\..@
    501c:	T..CT..@ ..C ..@
    502c:	$..C$..@...C...@
    503c:	...C...@8..C8..@
    504c:	4..C4..@0..C0..@
    505c:	<..C<..@,..C,..@
    506c:	( .C(..@, .C,..@
    507c:	. .C...@. .C...@
    508c:	. .C...@. .C...@
    509c:	. .C...@. .C...@

000050ac <vtable for usb_serial_class>:
	...
    50b4:	5:..-:..):..%:..
    50c4:	!:...:...:...:..
    50d4:	....

000050d8 <usb_endpoint_config_table>:
    50d8:	........

000050e0 <usb_descriptor_list>:
    50e0:	....t...........
    50f0:	............P...
    5100:	................
    5110:	....8...........
    5120:	T...............
    5130:	....

00005134 <_global_impure_ptr>:
    5134:	p...

00005138 <_init>:
    5138:	push	{r3, r4, r5, r6, r7, lr}
    513a:	nop
    513c:	pop	{r3, r4, r5, r6, r7}
    513e:	pop	{r3}
    5140:	mov	lr, r3
    5142:	bx	lr

00005144 <__init_array_start>:
    5144:	.word	0x00004a89

00005148 <__frame_dummy_init_array_entry>:
    5148:	5.......

Disassembly of section .fini:

00005150 <_fini>:
    5150:	push	{r3, r4, r5, r6, r7, lr}
    5152:	nop

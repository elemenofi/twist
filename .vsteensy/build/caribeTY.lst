
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004d18 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15b0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000039a4 l     F .text	0000000c startup_default_early_hook
000039b0 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15b0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15b4 l       .bss	00000000 object.8610
00004d10 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000017a8 l     F .text	00000214 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1821 l     O .bss	00000001 tx_noautoflush
1fff1824 l     O .bss	00000004 tx_packet
1fff1828 l     O .bss	00000001 transmit_previous_timeout
1fff182c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001c90 l     F .text	00000144 wait_for_cal
1fff1831 l     O .bss	00000001 analog_right_shift
1fff1832 l     O .bss	00000001 calibrating
00004a2c l     O .text	00000048 pin2sc1a
1fff0c58 l     O .data	00000001 analog_config_bits
1fff1833 l     O .bss	00000001 analogReadBusyADC1
1fff1834 l     O .bss	00000001 analogReadBusyADC0
1fff1835 l     O .bss	00000001 analog_reference_internal
1fff0c59 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001fb0 l     F .text	0000004c digitalWrite.part.1
00001ffc l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
000022dc l     F .text	00000048 sysex_byte
1fff1850 l     O .bss	00000001 tx_noautoflush
1fff187c l     O .bss	00000004 tx_packet
1fff1880 l     O .bss	00000001 transmit_previous_timeout
1fff1888 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c5c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff189c l     O .bss	00000004 ep0_tx_ptr
1fff18a0 l     O .bss	00000014 rx_last
1fff18b4 l     O .bss	00000002 ep0_tx_len
1fff18b8 l     O .bss	00000040 ep0_rx0_buf
1fff18f8 l     O .bss	00000014 rx_first
1fff190c l     O .bss	00000001 ep0_tx_data_toggle
1fff1910 l     O .bss	00000040 ep0_rx1_buf
1fff1950 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1964 l     O .bss	00000014 tx_last
1fff1978 l     O .bss	00000008 setup
1fff1980 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1984 l     O .bss	00000008 reply_buffer
1fff1990 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1995 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1998 l     O .bss	00000004 rts_pin
1fff199c l     O .bss	00000001 rx_buffer_head
1fff199d l     O .bss	00000001 rx_buffer_tail
1fff19a0 l     O .bss	00000028 tx_buffer
1fff19c8 l     O .bss	00000040 rx_buffer
1fff1a08 l     O .bss	00000001 transmitting
1fff1a09 l     O .bss	00000001 tx_buffer_tail
1fff1a0c l     O .bss	00000004 transmit_pin
1fff1a10 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a14 l     O .bss	00000004 rts_pin
1fff1a18 l     O .bss	00000001 transmitting
1fff1a19 l     O .bss	00000001 rx_buffer_tail
1fff1a1c l     O .bss	00000028 tx_buffer
1fff1a44 l     O .bss	00000040 rx_buffer
1fff1a84 l     O .bss	00000001 rx_buffer_head
1fff1a85 l     O .bss	00000001 tx_buffer_tail
1fff1a88 l     O .bss	00000004 transmit_pin
1fff1a8c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a90 l     O .bss	00000004 rts_pin
1fff1a94 l     O .bss	00000001 rx_buffer_head
1fff1a95 l     O .bss	00000001 rx_buffer_tail
1fff1a98 l     O .bss	00000028 tx_buffer
1fff1ac0 l     O .bss	00000040 rx_buffer
1fff1b00 l     O .bss	00000001 transmitting
1fff1b01 l     O .bss	00000001 tx_buffer_tail
1fff1b04 l     O .bss	00000004 transmit_pin
1fff1b08 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b0c l     O .bss	00000004 rts_pin
1fff1b10 l     O .bss	00000001 rx_buffer_head
1fff1b11 l     O .bss	00000001 rx_buffer_tail
1fff1b14 l     O .bss	00000040 tx_buffer
1fff1b54 l     O .bss	00000040 rx_buffer
1fff1b94 l     O .bss	00000001 transmitting
1fff1b95 l     O .bss	00000001 tx_buffer_tail
1fff1b98 l     O .bss	00000004 transmit_pin
1fff1b9c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1ba0 l     O .bss	00000004 rts_pin
1fff1ba4 l     O .bss	00000001 rx_buffer_head
1fff1ba5 l     O .bss	00000001 rx_buffer_tail
1fff1ba8 l     O .bss	00000028 tx_buffer
1fff1bd0 l     O .bss	00000040 rx_buffer
1fff1c10 l     O .bss	00000001 transmitting
1fff1c11 l     O .bss	00000001 tx_buffer_tail
1fff1c14 l     O .bss	00000004 transmit_pin
1fff1c18 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c74 l     O .data	00000012 device_descriptor
1fff0ca0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c1c l     O .bss	00000004 rts_pin
1fff1c20 l     O .bss	00000001 rx_buffer_head
1fff1c21 l     O .bss	00000001 rx_buffer_tail
1fff1c24 l     O .bss	00000028 tx_buffer
1fff1c4c l     O .bss	00000040 rx_buffer
1fff1c8c l     O .bss	00000001 transmitting
1fff1c8d l     O .bss	00000001 tx_buffer_tail
1fff1c90 l     O .bss	00000004 transmit_pin
1fff1c94 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004644 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15b0 l       .bss	00000000 __bss_start__
1fff1e30 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000399c  w    F .text	00000006 adc0_isr
00001a34 g     F .text	0000001c usb_serial_available
0000385c g     F .text	00000020 serial4_available
00003508  w    F .text	000000c4 yield
1fff0c88 g     O .data	00000018 usb_string_manufacturer_name_default
00003a48 g     F .text	00000020 serial_available
1fff1854 g     O .bss	00000004 usb_midi_handleProgramChange
00003954  w    F .text	00000048 hard_fault_isr
0000399c  w    F .text	00000006 dma_ch6_isr
000035fc g     F .text	00000020 Print::println()
00003730 g     F .text	00000020 serial2_available
0000399c  w    F .text	00000006 uart0_lon_isr
0000291c g     F .text	000000e8 usb_rx_memory
000035cc  w    F .text	00000002 serialEvent5()
0000399c  w    F .text	00000006 dma_ch8_isr
00003b74 g     F .text	00000020 serial6_available
0000461c g     F .text	00000002 __malloc_unlock
1fff1868 g     O .bss	00000004 usb_midi_handleAfterTouch
00001dd4 g     F .text	000000e0 analog_init
00002a04 g     F .text	00000084 usb_tx
0000399c  w    F .text	00000006 portcd_isr
1fff1878 g     O .bss	00000004 usb_midi_handleSysExComplete
00003f94 g     F .text	00000098 MillisTimer::runFromTimer()
0000399c  w    F .text	00000006 can1_rx_warn_isr
00004d1c g       .fini	00000000 __exidx_end
0000399c  w    F .text	00000006 dma_error_isr
1fff1cf4 g     O .bss	00000001 usb_midi_msg_type
1fff1cac g     O .bss	00000001 EventResponder::runningFromYield
0000399c  w    F .text	00000006 i2c0_isr
0000403c g     F .text	0000000c __errno
0000399c  w    F .text	00000006 portd_isr
0000399c  w    F .text	00000006 enet_error_isr
1fff1c98 g     O .bss	00000004 EventResponder::firstInterrupt
0000399c  w    F .text	00000006 tpm1_isr
000035e8  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004a74 g     O .text	00000200 digital_pin_to_info_PGM
1fff1e2c g     O .bss	00000004 errno
00004d1c g       .fini	00000000 _etext
1fff15b0 g       .bss	00000000 _sbss
00003634  w    F .text	00000002 serialEvent6()
1fff1864 g     O .bss	00000004 usb_midi_handleVelocityChange
000020a4 g     F .text	0000001c digitalRead
0000399c  w    F .text	00000006 porte_isr
00000494 g     F .text	00001314 loop
0000399c  w    F .text	00000006 portb_isr
000023c0 g     F .text	0000002c usb_midi_flush_output
0000399c  w    F .text	00000006 spi1_isr
0000387c g     F .text	000000d8 uart3_status_isr
00003e40  w    F .text	00000002 serialEvent1()
1fff15fc g     O .bss	00000018 led4
0000399c  w    F .text	00000006 mcm_isr
00003f2c g     F .text	00000068 MillisTimer::addToActiveList()
000023ec g     F .text	0000043c usb_midi_read
1fff1840 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1c9c g     O .bss	00000004 EventResponder::lastInterrupt
00003750 g     F .text	0000010c uart1_status_isr
1fff1cf6 g     O .bss	00000002 usb_midi_msg_sysex_len
0000399c  w    F .text	00000006 randnum_isr
1fff1848 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1838 g     O .bss	00000004 systick_millis_count
00003954  w    F .text	00000048 bus_fault_isr
0000399c  w    F .text	00000006 watchdog_isr
0000399c  w    F .text	00000006 i2c1_isr
1fff198c g     O .bss	00000001 usb_configuration
0000399c  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
0000361c  w    F .text	00000002 serialEvent2()
0000399c  w    F .text	00000006 i2c2_isr
1fff0c88  w    O .data	00000018 usb_string_manufacturer_name
1fff1e20 g     O .bss	0000000a usb_rx_byte_count_data
0000399c  w    F .text	00000006 pit1_isr
00004098 g     F .text	00000010 malloc
0000399c  w    F .text	00000006 dma_ch4_isr
0000399c  w    F .text	00000006 software_isr
0000399c  w    F .text	00000006 dma_ch7_isr
00003ec8  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003438 g     F .text	000000d0 usb_init
0000399c  w    F .text	00000006 lptmr_isr
1fff1cbc g     O .bss	00000004 __malloc_top_pad
00002074 g     F .text	00000024 rtc_set
1fff17a8 g     O .bss	00000028 button5
1fff17f8 g     O .bss	00000028 button4
1fff0c40 g       .data	00000000 _sdata
1fff1898 g     O .bss	00000004 usb_midi_handleNoteOn
00003a14 g     F .text	00000034 kinetis_hsrun_enable
00004620 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
000019bc g     F .text	00000048 usb_serial_getchar
0000399c  w    F .text	00000006 can1_bus_off_isr
0000399c  w    F .text	00000006 ftm2_isr
1fff1ce8 g     O .bss	00000008 usb_cdc_line_coding
00002098 g     F .text	0000000a digitalWrite
0000399c  w    F .text	00000006 uart5_status_isr
00003b94 g     F .text	000000e4 lpuart0_status_isr
1fff1ca4 g     O .bss	00000004 EventResponder::lastYield
00004ca0 g     O .text	00000005 usb_endpoint_config_table
0000399c  w    F .text	00000006 dma_ch9_isr
0000399c  w    F .text	00000006 pit2_isr
00003d48 g     F .text	00000020 serial3_available
1fff1cb8 g     O .bss	00000004 __malloc_max_sbrked_mem
000020c0 g     F .text	0000000a pinMode
00002868 g     F .text	0000004c usb_free
0000399c  w    F .text	00000006 i2c3_isr
1fff162c g     O .bss	00000018 led1
1fff1860 g     O .bss	00000004 usb_midi_handleSysExPartial
00004d1c g       .fini	00000000 __exidx_start
0000399c  w    F .text	00000006 pit0_isr
1fff1cf8 g     O .bss	00000001 usb_midi_msg_data1
1fff1ca8 g     O .bss	00000004 EventResponder::firstYield
00004cfc g     O .text	00000004 _global_impure_ptr
0000399c  w    F .text	00000006 can1_error_isr
00004048 g     F .text	00000050 __libc_init_array
1fff1e30 g       .bss	00000000 __bss_end
0000399c  w    F .text	00000006 can0_wakeup_isr
0000399c  w    F .text	00000006 flash_cmd_isr
000035d0  w    F .text	00000004 usb_serial_class::clear()
00003d68 g     F .text	000000d8 uart2_status_isr
000039b4 g     F .text	0000002c _sbrk
1fff1cb0 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c70 g     O .data	00000004 __brkval
1fff1830 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001c48 g     F .text	00000048 usb_serial_flush_callback
00004d00 g     F .text	00000000 _init
0000399c  w    F .text	00000006 svcall_isr
0000399c  w    F .text	00000006 dma_ch15_isr
0000399c  w    F .text	00000006 uart1_error_isr
00004664 g     F .text	00000028 __libc_fini_array
0000399c  w    F .text	00000006 usbhs_phy_isr
1fff1e30 g       .bss	00000000 _ebss
0000399c g     F .text	00000006 unused_isr
0000399c  w    F .text	00000006 spi0_isr
0000399c  w    F .text	00000006 dma_ch3_isr
0000399c  w    F .text	00000006 flash_error_isr
1fff1644 g     O .bss	00000018 knob2
00003638 g     F .text	00000020 serial5_available
0000399c  w    F .text	00000006 uart5_error_isr
0000399c  w    F .text	00000006 rtc_seconds_isr
0000399c  w    F .text	00000006 pdb_isr
00003954  w    F .text	00000048 usage_fault_isr
0000399c  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
0000399c  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1cf0 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000018 leds
0000402c g     F .text	00000010 systick_isr
0000399c  w    F .text	00000006 rtc_alarm_isr
0000399c  w    F .text	00000006 dma_ch2_isr
1fff0c60 g     O .data	00000010 Serial
0000399c  w    F .text	00000006 ftm1_isr
000035f0  w    F .text	00000006 usb_serial_class::write(unsigned char)
000039a4  w    F .text	0000000c startup_early_hook
0000399c  w    F .text	00000006 dma_ch13_isr
0000399c  w    F .text	00000006 uart2_error_isr
00001a04 g     F .text	00000030 usb_serial_peekchar
1fff0d54 g     O .data	00000016 usb_string_serial_number_default
00003954 g     F .text	00000048 fault_isr
00004728 g     F .text	000001d0 _free_r
1fff1884 g     O .bss	00000004 usb_midi_handleStop
0000399c  w    F .text	00000006 usb_charge_isr
000035e0  w    F .text	00000004 usb_serial_class::flush()
0000399c  w    F .text	00000006 cmt_isr
0000399c  w    F .text	00000006 usbhs_isr
1fff1894 g     O .bss	00000004 usb_midi_handleControlChange
1fff15a8 g     O .data	00000004 __malloc_sbrk_base
000035d8  w    F .text	00000004 usb_serial_class::read()
0000399c  w    F .text	00000006 ftm3_isr
0000399c  w    F .text	00000006 tsi0_isr
1fff1690 g     O .bss	00000018 led6
1fff16a8 g     O .bss	00000018 knob1
0000399c  w    F .text	00000006 spi2_isr
00003620  w    F .text	00000002 serialEvent4()
000035f8  w    F .text	00000002 serialEvent()
1fff190d g     O .bss	00000001 usb_reboot_timer
000048f8 g     F .text	000000a4 __register_exitproc
00001a50 g     F .text	00000038 usb_serial_flush_input
00001b90 g     F .text	00000018 usb_serial_putchar
1fff1cc0 g     O .bss	00000028 __malloc_current_mallinfo
0000399c  w    F .text	00000006 can0_bus_off_isr
1fff1614 g     O .bss	00000018 led5
1fff1981 g     O .bss	00000001 usb_rx_memory_needed
00002a88 g     F .text	000009b0 usb_isr
1fff1890 g     O .bss	00000004 usb_midi_handleNoteOff
00004c74  w    O .text	00000028 vtable for usb_serial_class
1fff1660 g     O .bss	00000018 knob3
0000399c  w    F .text	00000006 uart3_error_isr
1fff1ca0 g     O .bss	00000004 MillisTimer::listActive
0000399c  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
0000399c  w    F .text	00000006 low_voltage_isr
1fff16e8 g     O .bss	00000028 button2
1fff119c g     O .data	00000408 __malloc_av_
0000399c  w    F .text	00000006 can0_error_isr
00002170 g     F .text	0000016c _init_Teensyduino_internal_
00001bf0 g     F .text	00000058 usb_serial_flush_output
0000399c  w    F .text	00000006 dma_ch12_isr
00004618 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
0000399c  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000399c  w    F .text	00000006 pit3_isr
0000399c  w    F .text	00000006 enet_rx_isr
0000399c  w    F .text	00000006 portc_isr
00003624 g     F .text	00000010 main
1fff1cb4 g     O .bss	00000004 __malloc_max_total_mem
1fff15e4 g     O .bss	00000018 led3
00003954  w    F .text	00000048 memmanage_fault_isr
00003c78 g     F .text	00000084 usb_init_serialnumber
1fff165c g     O .bss	00000001 currentMode
00004d18 g       .text	00000000 __init_array_end
000040a8 g     F .text	00000570 _malloc_r
0000399c  w    F .text	00000006 debugmonitor_isr
1fff185c g     O .bss	00000004 usb_midi_handleSongPosition
00003e48 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff184c g     O .bss	00000004 usb_midi_handleContinue
1fff1cf9 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
0000399c  w    F .text	00000006 cmp1_isr
1fff1710 g     O .bss	00000028 button3
0000399c  w    F .text	00000006 ftm0_isr
0000468c g     F .text	0000009c _malloc_trim_r
1fff0d50 g     O .data	00000004 string0
00001a88 g     F .text	00000108 usb_serial_write
000039b0  w    F .text	00000002 startup_late_hook
000035dc  w    F .text	00000004 usb_serial_class::available()
1fff1cfa g     O .bss	00000001 usb_midi_msg_cable
1fff0d38  w    O .data	00000018 usb_string_product_name
000020cc g     F .text	000000a4 delay
0000399c  w    F .text	00000006 tpm0_isr
00004d18 g     F .fini	00000000 _fini
0000399c  w    F .text	00000006 i2s0_rx_isr
0000399c  w    F .text	00000006 uart4_error_isr
00002324 g     F .text	0000009c usb_midi_write_packed
00004658 g     F .text	0000000c atexit
0000399c  w    F .text	00000006 can0_message_isr
1fff1198 g     O .data	00000004 _impure_ptr
0000399c  w    F .text	00000006 can1_message_isr
0000399c  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1874 g     O .bss	00000004 usb_midi_handleTuneRequest
00004d0c g       .text	00000000 __preinit_array_end
0000399c  w    F .text	00000006 sdhc_isr
1fff1cfb g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00004ca8 g     O .text	00000054 usb_descriptor_list
000028b4 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1678 g     O .bss	00000018 knob4
0000399c  w    F .text	00000006 dma_ch10_isr
1fff1738 g     O .bss	00000070 sequence1
1fff186c g     O .bss	00000004 usb_midi_handleStart
0000399c  w    F .text	00000006 uart0_error_isr
00002828 g     F .text	00000040 usb_malloc
0000399c  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001ba8 g     F .text	00000048 usb_serial_write_buffer_free
0000399c  w    F .text	00000006 enet_timer_isr
1fff17d0 g     O .bss	00000028 button6
1fff16c0 g     O .bss	00000028 button1
1fff15ac g       .data	00000000 _edata
0000399c  w    F .text	00000006 i2s0_tx_isr
0000399c  w    F .text	00000006 adc1_isr
000035e4  w    F .text	00000004 usb_serial_class::availableForWrite()
0000399c  w    F .text	00000006 cmp0_isr
1fff183c g     O .bss	00000004 usb_midi_handleClock
00003cfc g     F .text	0000004c ultoa
00003ee4 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15a4 g     O .data	00000004 __malloc_trim_threshold
000035d4  w    F .text	00000004 usb_serial_class::peek()
1fff1820 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1858 g     O .bss	00000004 usb_midi_handlePitchChange
0000399c  w    F .text	00000006 pit_isr
1fff1870 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
0000399c  w    F .text	00000006 dac0_isr
00004d0c g       .text	00000000 __init_array_start
0000399c  w    F .text	00000006 can1_tx_warn_isr
00001eb4 g     F .text	000000fc analogRead
1fff1cfc g     O .bss	00000122 usb_midi_msg_sysex
00003a68 g     F .text	0000010c uart0_status_isr
0000399c  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d38 g     O .data	00000018 usb_string_product_name_default
0000399c  w    F .text	00000006 dma_ch1_isr
000028f0 g     F .text	0000002c usb_tx_packet_count
0000399c  w    F .text	00000006 dma_ch5_isr
0000399c  w    F .text	00000006 can0_rx_warn_isr
0000399c  w    F .text	00000006 can0_tx_warn_isr
00003658 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000039e0 g     F .text	00000034 kinetis_hsrun_disable
00004d0c g       .text	00000000 __preinit_array_start
00003e44  w    F .text	00000002 serialEvent3()
1fff188c g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15cc g     O .bss	00000018 led2
0000399c  w    F .text	00000006 cmp2_isr
00003f28 g     F .text	00000004 pendablesrvreq_isr
0000399c  w    F .text	00000006 wakeup_isr
0000399c  w    F .text	00000006 cmp3_isr
1fff1844 g     O .bss	00000004 usb_midi_handleActiveSensing
0000399c  w    F .text	00000006 tpm2_isr
0000399c  w    F .text	00000006 dma_ch0_isr
1fff0d54  w    O .data	00000016 usb_string_serial_number
0000399c  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....9..U9..
      10:	U9..U9..U9..U9..
      20:	U9..U9..U9...9..
      30:	.9..U9..)?..-@..
      40:	.9...9...9...9..
      50:	.9...9...9...9..
      60:	.9...9...9...9..
      70:	.9...9...9...9..
      80:	.9...9...9...9..
      90:	.9...9...9...9..
      a0:	.9...9...9...9..
      b0:	.9...9...9..i:..
      c0:	.9..Q7...9..i=..
      d0:	.9..}8...9...9..
      e0:	.9...9...9...9..
      f0:	.9...9...9...9..
     100:	.9...9...9...9..
     110:	.9...*...9...9..
     120:	.9...9...9...9..
     130:	.9...9...9...9..
     140:	.9...9..Y6...9..
     150:	.9...9...9...9..
     160:	.9...9...9...9..
     170:	.9...9...9...9..
     180:	.9...9...9...9..
     190:	.9...9...;...9..
     1a0:	.9...9...9...9..
     1b0:	.9...9...9...9..
     1c0:	.9...9...9...9..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	39a4 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	2170 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2074 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2074 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4048 <__libc_init_array>

	startup_late_hook();
     33a:	bl	39b0 <startup_late_hook>
	main();
     33e:	bl	3624 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15ac
     374:	.word	0x00004d18
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15b0
     380:	.word	0x1fff1e30
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15b0
     42c:	.word	0x00000000
     430:	.word	0x00004d1c

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15b4
     460:	.word	0x00004d1c
     464:	.word	0x1fff15ac
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	20c0 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	2098 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob1(A0, sequence1, FIRST, 0);
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #228	; 0xe4
     49c:	bl	23ec <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	714 <loop+0x280>
     4a6:	ldr	r4, [pc, #660]	; (73c <loop+0x2a8>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #660]	; (740 <loop+0x2ac>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	20a4 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	954 <loop+0x4c0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #52]	; 0x34
	return ret;
     4c4:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #48]	; 0x30
	return ret;
     4cc:	ldr	r1, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #620]	; 73c <loop+0x2a8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r3, r1
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #612]	; (740 <loop+0x2ac>)
     4da:	cmp	r5, r3
     4dc:	beq.w	97c <loop+0x4e8>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r5, #0
     4e4:	beq.w	9ba <loop+0x526>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r5, [pc, #600]	; (744 <loop+0x2b0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r5, #32]
     4f0:	bl	20a4 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r6, r0
     4fc:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	968 <loop+0x4d4>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #44]	; 0x2c
	return ret;
     506:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     508:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #40]	; 0x28
	return ret;
     50e:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #552]	; 73c <loop+0x2a8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r1, r3
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r5, #4]
     51a:	ldr	r7, [pc, #552]	; (744 <loop+0x2b0>)
     51c:	cmp	r6, r3
     51e:	beq.w	970 <loop+0x4dc>
          m_state = reading;
     522:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r6, #0
     526:	beq.w	9f0 <loop+0x55c>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r6, [pc, #540]	; (748 <loop+0x2b4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r6, #32]
     532:	bl	20a4 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r5, r0
     53e:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	964 <loop+0x4d0>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #36]	; 0x24
	return ret;
     548:	ldr	r3, [sp, #36]	; 0x24
        m_lastDebounceTime = millis();
     54a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #32]
	return ret;
     550:	ldr	r1, [sp, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #488]	; 73c <loop+0x2a8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r6, #4]
     55c:	ldr	r7, [pc, #488]	; (748 <loop+0x2b4>)
     55e:	cmp	r5, r3
     560:	beq.w	96c <loop+0x4d8>
          m_state = reading;
     564:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r5, #0
     568:	beq.w	a26 <loop+0x592>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r5, [pc, #476]	; (74c <loop+0x2b8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r5, #32]
     574:	bl	20a4 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r6, r0
     580:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	960 <loop+0x4cc>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #28]
	return ret;
     58a:	ldr	r3, [sp, #28]
        m_lastDebounceTime = millis();
     58c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #24]
	return ret;
     592:	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #420]	; 73c <loop+0x2a8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r1, r3
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r5, #4]
     59e:	ldr	r7, [pc, #428]	; (74c <loop+0x2b8>)
     5a0:	cmp	r6, r3
     5a2:	beq.w	978 <loop+0x4e4>
          m_state = reading;
     5a6:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r6, #0
     5aa:	beq.w	a60 <loop+0x5cc>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #416]	; (750 <loop+0x2bc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	20a4 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	95c <loop+0x4c8>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #20]
	return ret;
     5cc:	ldr	r3, [sp, #20]
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #16]
	return ret;
     5d4:	ldr	r1, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #356]	; 73c <loop+0x2a8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #364]	; (750 <loop+0x2bc>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	974 <loop+0x4e0>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r5, #0
     5ec:	beq.w	a96 <loop+0x602>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f0:	ldr	r5, [pc, #352]	; (754 <loop+0x2c0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r5, #32]
     5f8:	bl	20a4 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5fc:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5fe:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     600:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     602:	mov	r6, r0
     604:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     606:	beq.w	958 <loop+0x4c4>
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #12]
	return ret;
     60e:	ldr	r3, [sp, #12]
        m_lastDebounceTime = millis();
     610:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #8]
	return ret;
     616:	ldr	r1, [sp, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     618:	ldr.w	r8, [pc, #288]	; 73c <loop+0x2a8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     61c:	cmp	r1, r3
     61e:	beq.n	632 <loop+0x19e>
        if (reading != m_state) {
     620:	ldr	r3, [r5, #4]
     622:	ldr	r7, [pc, #304]	; (754 <loop+0x2c0>)
     624:	cmp	r6, r3
     626:	beq.w	980 <loop+0x4ec>
          m_state = reading;
     62a:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     62c:	cmp	r6, #0
     62e:	beq.w	984 <loop+0x4f0>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     632:	ldr	r6, [pc, #292]	; (758 <loop+0x2c4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     634:	str	r2, [r5, #8]
     636:	ldrb	r3, [r6, #16]
     638:	cmp	r3, #0
     63a:	bne.w	788 <loop+0x2f4>
     63e:	ldr	r5, [pc, #284]	; (75c <loop+0x2c8>)
     640:	ldrb	r3, [r5, #16]
     642:	cmp	r3, #0
     644:	bne.w	8f8 <loop+0x464>
     648:	ldr	r5, [pc, #276]	; (760 <loop+0x2cc>)
     64a:	ldrb	r3, [r5, #16]
     64c:	cmp	r3, #0
     64e:	bne.w	89c <loop+0x408>
     652:	ldr	r5, [pc, #272]	; (764 <loop+0x2d0>)
     654:	ldrb	r3, [r5, #16]
     656:	cmp	r3, #0
     658:	bne.w	840 <loop+0x3ac>
     65c:	ldr	r5, [pc, #264]	; (768 <loop+0x2d4>)
     65e:	ldrb	r3, [r5, #16]
     660:	cmp	r3, #0
     662:	bne.w	7e4 <loop+0x350>
     666:	ldr	r5, [pc, #260]	; (76c <loop+0x2d8>)
     668:	ldrb	r3, [r5, #16]
     66a:	cbnz	r3, 6bc <loop+0x228>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     66c:	ldr	r4, [pc, #256]	; (770 <loop+0x2dc>)
     66e:	ldrb	r0, [r4, #0]
     670:	bl	1eb4 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     674:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     676:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     678:	cmp	r0, r3
     67a:	beq.n	6b6 <loop+0x222>
     67c:	subs	r0, r0, r3
     67e:	cmp	r0, #0
     680:	it	lt
     682:	neglt	r0, r0
     684:	cmp	r0, #10
     686:	ble.n	6b6 <loop+0x222>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     688:	movs	r1, #5
     68a:	ldr	r0, [pc, #232]	; (774 <loop+0x2e0>)
     68c:	bl	1a88 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     690:	ldr	r0, [pc, #228]	; (778 <loop+0x2e4>)
     692:	bl	35fc <Print::println()>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     696:	ldr	r3, [pc, #228]	; (77c <loop+0x2e8>)
     698:	ldrb	r3, [r3, #0]
     69a:	cmp	r3, #0
     69c:	beq.w	acc <loop+0x638>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     6a0:	cmp	r3, #2
     6a2:	beq.w	f10 <loop+0xa7c>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     6a6:	cmp	r3, #1
     6a8:	beq.w	1008 <loop+0xb74>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     6ac:	cmp	r3, #3
     6ae:	beq.w	bce <loop+0x73a>
     6b2:	ldr	r3, [r4, #4]

      if (isChanging) {
        Serial.println("Hallo");
        onChange();

        m_lastValue = m_value;
     6b4:	str	r3, [r4, #8]
  led3.check();
  led4.check();
  led5.check();
  led6.check();
  knob1.check();
}
     6b6:	add	sp, #228	; 0xe4
     6b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6bc:	ldr	r3, [r4, #0]
     6be:	str	r3, [sp, #216]	; 0xd8
	return ret;
     6c0:	ldr	r3, [sp, #216]	; 0xd8
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6c2:	ldr	r1, [r5, #8]
     6c4:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6c6:	ldr	r4, [pc, #116]	; (73c <loop+0x2a8>)
     6c8:	subs	r3, r3, r1
     6ca:	cmp	r3, r2
     6cc:	bls.n	66c <loop+0x1d8>
        digitalWrite(m_pin, !digitalRead(m_pin));
     6ce:	ldrb	r6, [r5, #0]
     6d0:	mov	r0, r6
     6d2:	bl	20a4 <digitalRead>
     6d6:	clz	r1, r0
     6da:	lsrs	r1, r1, #5
     6dc:	mov	r0, r6
     6de:	bl	2098 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     6e2:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     6e4:	movs	r2, #0

        if (blinkingCounter > 0) {
     6e6:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     6e8:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     6ea:	ble.n	66c <loop+0x1d8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     6ec:	ldrb	r6, [r5, #0]
     6ee:	mov	r0, r6
     6f0:	bl	20a4 <digitalRead>
     6f4:	clz	r1, r0
     6f8:	lsrs	r1, r1, #5
     6fa:	mov	r0, r6
     6fc:	bl	2098 <digitalWrite>
     700:	ldr	r3, [r4, #0]
     702:	str	r3, [sp, #220]	; 0xdc
	return ret;
     704:	ldr	r3, [sp, #220]	; 0xdc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     706:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     708:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     70a:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     70e:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     710:	str	r3, [r5, #20]
     712:	b.n	66c <loop+0x1d8>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     714:	ldr	r3, [pc, #104]	; (780 <loop+0x2ec>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     716:	ldrb	r3, [r3, #0]
     718:	cmp	r3, #250	; 0xfa
     71a:	beq.w	b10 <loop+0x67c>
     71e:	cmp	r3, #252	; 0xfc
     720:	beq.w	aee <loop+0x65a>
     724:	cmp	r3, #248	; 0xf8
     726:	beq.w	b76 <loop+0x6e2>
     72a:	movs	r1, #35	; 0x23
     72c:	ldr	r0, [pc, #84]	; (784 <loop+0x2f0>)
     72e:	ldr	r4, [pc, #12]	; (73c <loop+0x2a8>)
     730:	bl	1a88 <usb_serial_write>
     734:	ldr	r0, [pc, #64]	; (778 <loop+0x2e4>)
     736:	bl	35fc <Print::println()>
     73a:	b.n	4a8 <loop+0x14>
     73c:	.word	0x1fff1838
     740:	.word	0x1fff16c0
     744:	.word	0x1fff16e8
     748:	.word	0x1fff1710
     74c:	.word	0x1fff17f8
     750:	.word	0x1fff17a8
     754:	.word	0x1fff17d0
     758:	.word	0x1fff162c
     75c:	.word	0x1fff15cc
     760:	.word	0x1fff15e4
     764:	.word	0x1fff15fc
     768:	.word	0x1fff1614
     76c:	.word	0x1fff1690
     770:	.word	0x1fff16a8
     774:	.word	0x00004a24
     778:	.word	0x1fff0c60
     77c:	.word	0x1fff165c
     780:	.word	0x1fff1cf4
     784:	.word	0x000049cc
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     788:	ldr	r3, [r4, #0]
     78a:	str	r3, [sp, #176]	; 0xb0
	return ret;
     78c:	ldr	r3, [sp, #176]	; 0xb0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     78e:	ldr	r1, [r6, #8]
     790:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     792:	ldr	r5, [pc, #712]	; (a5c <loop+0x5c8>)
     794:	subs	r3, r3, r1
     796:	cmp	r3, r2
     798:	bls.w	63e <loop+0x1aa>
        digitalWrite(m_pin, !digitalRead(m_pin));
     79c:	ldrb	r7, [r6, #0]
     79e:	mov	r0, r7
     7a0:	bl	20a4 <digitalRead>
     7a4:	clz	r1, r0
     7a8:	lsrs	r1, r1, #5
     7aa:	mov	r0, r7
     7ac:	bl	2098 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     7b0:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     7b2:	movs	r2, #0

        if (blinkingCounter > 0) {
     7b4:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     7b6:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     7b8:	ble.w	63e <loop+0x1aa>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     7bc:	ldrb	r7, [r6, #0]
     7be:	mov	r0, r7
     7c0:	bl	20a4 <digitalRead>
     7c4:	clz	r1, r0
     7c8:	lsrs	r1, r1, #5
     7ca:	mov	r0, r7
     7cc:	bl	2098 <digitalWrite>
     7d0:	ldr	r3, [r5, #0]
     7d2:	str	r3, [sp, #180]	; 0xb4
	return ret;
     7d4:	ldr	r3, [sp, #180]	; 0xb4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     7d6:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     7d8:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     7da:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     7de:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     7e0:	str	r3, [r6, #20]
     7e2:	b.n	63e <loop+0x1aa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7e4:	ldr	r3, [r4, #0]
     7e6:	str	r3, [sp, #208]	; 0xd0
	return ret;
     7e8:	ldr	r3, [sp, #208]	; 0xd0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     7ea:	ldr	r1, [r5, #8]
     7ec:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7ee:	ldr	r6, [pc, #620]	; (a5c <loop+0x5c8>)
     7f0:	subs	r3, r3, r1
     7f2:	cmp	r3, r2
     7f4:	bls.w	666 <loop+0x1d2>
        digitalWrite(m_pin, !digitalRead(m_pin));
     7f8:	ldrb	r7, [r5, #0]
     7fa:	mov	r0, r7
     7fc:	bl	20a4 <digitalRead>
     800:	clz	r1, r0
     804:	lsrs	r1, r1, #5
     806:	mov	r0, r7
     808:	bl	2098 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     80c:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     80e:	movs	r2, #0

        if (blinkingCounter > 0) {
     810:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     812:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     814:	ble.w	666 <loop+0x1d2>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     818:	ldrb	r7, [r5, #0]
     81a:	mov	r0, r7
     81c:	bl	20a4 <digitalRead>
     820:	clz	r1, r0
     824:	lsrs	r1, r1, #5
     826:	mov	r0, r7
     828:	bl	2098 <digitalWrite>
     82c:	ldr	r3, [r6, #0]
     82e:	str	r3, [sp, #212]	; 0xd4
	return ret;
     830:	ldr	r3, [sp, #212]	; 0xd4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     832:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     834:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     836:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     83a:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     83c:	str	r3, [r5, #20]
     83e:	b.n	666 <loop+0x1d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     840:	ldr	r3, [r4, #0]
     842:	str	r3, [sp, #200]	; 0xc8
	return ret;
     844:	ldr	r3, [sp, #200]	; 0xc8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     846:	ldr	r1, [r5, #8]
     848:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     84a:	ldr	r6, [pc, #528]	; (a5c <loop+0x5c8>)
     84c:	subs	r3, r3, r1
     84e:	cmp	r3, r2
     850:	bls.w	65c <loop+0x1c8>
        digitalWrite(m_pin, !digitalRead(m_pin));
     854:	ldrb	r7, [r5, #0]
     856:	mov	r0, r7
     858:	bl	20a4 <digitalRead>
     85c:	clz	r1, r0
     860:	lsrs	r1, r1, #5
     862:	mov	r0, r7
     864:	bl	2098 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     868:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     86a:	movs	r2, #0

        if (blinkingCounter > 0) {
     86c:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     86e:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     870:	ble.w	65c <loop+0x1c8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     874:	ldrb	r7, [r5, #0]
     876:	mov	r0, r7
     878:	bl	20a4 <digitalRead>
     87c:	clz	r1, r0
     880:	lsrs	r1, r1, #5
     882:	mov	r0, r7
     884:	bl	2098 <digitalWrite>
     888:	ldr	r3, [r6, #0]
     88a:	str	r3, [sp, #204]	; 0xcc
	return ret;
     88c:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     88e:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     890:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     892:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     896:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     898:	str	r3, [r5, #20]
     89a:	b.n	65c <loop+0x1c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     89c:	ldr	r3, [r4, #0]
     89e:	str	r3, [sp, #192]	; 0xc0
	return ret;
     8a0:	ldr	r3, [sp, #192]	; 0xc0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     8a2:	ldr	r1, [r5, #8]
     8a4:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8a6:	ldr	r6, [pc, #436]	; (a5c <loop+0x5c8>)
     8a8:	subs	r3, r3, r1
     8aa:	cmp	r3, r2
     8ac:	bls.w	652 <loop+0x1be>
        digitalWrite(m_pin, !digitalRead(m_pin));
     8b0:	ldrb	r7, [r5, #0]
     8b2:	mov	r0, r7
     8b4:	bl	20a4 <digitalRead>
     8b8:	clz	r1, r0
     8bc:	lsrs	r1, r1, #5
     8be:	mov	r0, r7
     8c0:	bl	2098 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     8c4:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8c6:	movs	r2, #0

        if (blinkingCounter > 0) {
     8c8:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8ca:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     8cc:	ble.w	652 <loop+0x1be>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     8d0:	ldrb	r7, [r5, #0]
     8d2:	mov	r0, r7
     8d4:	bl	20a4 <digitalRead>
     8d8:	clz	r1, r0
     8dc:	lsrs	r1, r1, #5
     8de:	mov	r0, r7
     8e0:	bl	2098 <digitalWrite>
     8e4:	ldr	r3, [r6, #0]
     8e6:	str	r3, [sp, #196]	; 0xc4
	return ret;
     8e8:	ldr	r3, [sp, #196]	; 0xc4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     8ea:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8ec:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8ee:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8f2:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8f4:	str	r3, [r5, #20]
     8f6:	b.n	652 <loop+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8f8:	ldr	r3, [r4, #0]
     8fa:	str	r3, [sp, #184]	; 0xb8
	return ret;
     8fc:	ldr	r3, [sp, #184]	; 0xb8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     8fe:	ldr	r1, [r5, #8]
     900:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     902:	ldr	r6, [pc, #344]	; (a5c <loop+0x5c8>)
     904:	subs	r3, r3, r1
     906:	cmp	r3, r2
     908:	bls.w	648 <loop+0x1b4>
        digitalWrite(m_pin, !digitalRead(m_pin));
     90c:	ldrb	r7, [r5, #0]
     90e:	mov	r0, r7
     910:	bl	20a4 <digitalRead>
     914:	clz	r1, r0
     918:	lsrs	r1, r1, #5
     91a:	mov	r0, r7
     91c:	bl	2098 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     920:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     922:	movs	r2, #0

        if (blinkingCounter > 0) {
     924:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     926:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     928:	ble.w	648 <loop+0x1b4>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     92c:	ldrb	r7, [r5, #0]
     92e:	mov	r0, r7
     930:	bl	20a4 <digitalRead>
     934:	clz	r1, r0
     938:	lsrs	r1, r1, #5
     93a:	mov	r0, r7
     93c:	bl	2098 <digitalWrite>
     940:	ldr	r3, [r6, #0]
     942:	str	r3, [sp, #188]	; 0xbc
	return ret;
     944:	ldr	r3, [sp, #188]	; 0xbc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     946:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     948:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     94a:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     94e:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     950:	str	r3, [r5, #20]
     952:	b.n	648 <loop+0x1b4>
     954:	ldr	r3, [r6, #20]
     956:	b.n	4c8 <loop+0x34>
     958:	ldr	r3, [r5, #20]
     95a:	b.n	612 <loop+0x17e>
     95c:	ldr	r3, [r6, #20]
     95e:	b.n	5d0 <loop+0x13c>
     960:	ldr	r3, [r5, #20]
     962:	b.n	58e <loop+0xfa>
     964:	ldr	r3, [r6, #20]
     966:	b.n	54c <loop+0xb8>
     968:	ldr	r3, [r5, #20]
     96a:	b.n	50a <loop+0x76>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     96c:	mov	r2, r5
     96e:	b.n	56c <loop+0xd8>
     970:	mov	r2, r6
     972:	b.n	52a <loop+0x96>
     974:	mov	r2, r5
     976:	b.n	5f0 <loop+0x15c>
     978:	mov	r2, r6
     97a:	b.n	5ae <loop+0x11a>
     97c:	mov	r2, r5
     97e:	b.n	4e8 <loop+0x54>
     980:	mov	r2, r6
     982:	b.n	632 <loop+0x19e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     984:	ldrb	r3, [r7, #16]
     986:	cmp	r3, #0
     988:	bne.w	c02 <loop+0x76e>
        m_led.toggle();
        Serial.println("a");
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     98c:	ldrb	r3, [r7, #17]
     98e:	cmp	r3, #0
     990:	bne.w	fe4 <loop+0xb50>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     994:	ldr	r3, [r7, #24]
     996:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     99a:	clz	r1, r1
     99e:	lsrs	r1, r1, #5
     9a0:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     9a2:	uxtb	r0, r0
     9a4:	bl	2098 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     9a8:	ldr	r3, [r7, #0]
     9aa:	ldr	r0, [r7, #28]
     9ac:	ldr	r2, [r7, #12]
     9ae:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     9b0:	ldrb	r1, [r0, r3]
     9b2:	eor.w	r1, r1, #1
     9b6:	strb	r1, [r0, r3]
     9b8:	b.n	632 <loop+0x19e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     9ba:	ldrb	r3, [r7, #16]
     9bc:	cmp	r3, #0
     9be:	bne.w	d7c <loop+0x8e8>
        m_led.toggle();
        Serial.println("a");
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     9c2:	ldrb	r3, [r7, #17]
     9c4:	cmp	r3, #0
     9c6:	bne.w	f78 <loop+0xae4>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     9ca:	ldr	r3, [r7, #24]
     9cc:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     9d0:	clz	r1, r1
     9d4:	lsrs	r1, r1, #5
     9d6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     9d8:	uxtb	r0, r0
     9da:	bl	2098 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     9de:	ldr	r3, [r7, #0]
     9e0:	ldr	r0, [r7, #28]
     9e2:	ldr	r2, [r7, #12]
     9e4:	subs	r3, #1
     9e6:	ldrb	r1, [r0, r3]
     9e8:	eor.w	r1, r1, #1
     9ec:	strb	r1, [r0, r3]
     9ee:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     9f0:	ldrb	r3, [r7, #16]
     9f2:	cmp	r3, #0
     9f4:	bne.w	e90 <loop+0x9fc>
        m_led.toggle();
        Serial.println("a");
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     9f8:	ldrb	r3, [r7, #17]
     9fa:	cmp	r3, #0
     9fc:	bne.w	f54 <loop+0xac0>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     a00:	ldr	r3, [r7, #24]
     a02:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     a06:	clz	r1, r1
     a0a:	lsrs	r1, r1, #5
     a0c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     a0e:	uxtb	r0, r0
     a10:	bl	2098 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     a14:	ldr	r3, [r7, #0]
     a16:	ldr	r0, [r7, #28]
     a18:	ldr	r2, [r7, #12]
     a1a:	subs	r3, #1
     a1c:	ldrb	r1, [r0, r3]
     a1e:	eor.w	r1, r1, #1
     a22:	strb	r1, [r0, r3]
     a24:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     a26:	ldrb	r3, [r7, #16]
     a28:	cmp	r3, #0
     a2a:	bne.w	e10 <loop+0x97c>
        m_led.toggle();
        Serial.println("a");
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     a2e:	ldrb	r3, [r7, #17]
     a30:	cmp	r3, #0
     a32:	bne.w	fc0 <loop+0xb2c>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     a36:	ldr	r3, [r7, #24]
     a38:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     a3c:	clz	r1, r1
     a40:	lsrs	r1, r1, #5
     a42:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     a44:	uxtb	r0, r0
     a46:	bl	2098 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     a4a:	ldr	r3, [r7, #0]
     a4c:	ldr	r0, [r7, #28]
     a4e:	ldr	r2, [r7, #12]
     a50:	subs	r3, #1
     a52:	ldrb	r1, [r0, r3]
     a54:	eor.w	r1, r1, #1
     a58:	strb	r1, [r0, r3]
     a5a:	b.n	56c <loop+0xd8>
     a5c:	.word	0x1fff1838

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     a60:	ldrb	r3, [r7, #16]
     a62:	cmp	r3, #0
     a64:	bne.w	cfe <loop+0x86a>
        m_led.toggle();
        Serial.println("a");
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     a68:	ldrb	r3, [r7, #17]
     a6a:	cmp	r3, #0
     a6c:	bne.w	f9c <loop+0xb08>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     a70:	ldr	r3, [r7, #24]
     a72:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     a76:	clz	r1, r1
     a7a:	lsrs	r1, r1, #5
     a7c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     a7e:	uxtb	r0, r0
     a80:	bl	2098 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     a84:	ldr	r3, [r7, #0]
     a86:	ldr	r0, [r7, #28]
     a88:	ldr	r2, [r7, #12]
     a8a:	subs	r3, #1
     a8c:	ldrb	r1, [r0, r3]
     a8e:	eor.w	r1, r1, #1
     a92:	strb	r1, [r0, r3]
     a94:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     a96:	ldrb	r3, [r7, #16]
     a98:	cmp	r3, #0
     a9a:	bne.w	c80 <loop+0x7ec>
        m_led.toggle();
        Serial.println("a");
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     a9e:	ldrb	r3, [r7, #17]
     aa0:	cmp	r3, #0
     aa2:	bne.w	f30 <loop+0xa9c>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     aa6:	ldr	r3, [r7, #24]
     aa8:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     aac:	clz	r1, r1
     ab0:	lsrs	r1, r1, #5
     ab2:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ab4:	uxtb	r0, r0
     ab6:	bl	2098 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     aba:	ldr	r3, [r7, #0]
     abc:	ldr	r0, [r7, #28]
     abe:	ldr	r2, [r7, #12]
     ac0:	subs	r3, #1
     ac2:	ldrb	r1, [r0, r3]
     ac4:	eor.w	r1, r1, #1
     ac8:	strb	r1, [r0, r3]
     aca:	b.n	5f0 <loop+0x15c>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     acc:	ldrb	r2, [r4, #20]
     ace:	cmp	r2, #0
     ad0:	bne.w	6b2 <loop+0x21e>
          m_sequence.controlTempo(m_value);
     ad4:	ldr	r3, [r4, #4]
     ad6:	ldr	r1, [r4, #16]
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     ad8:	cmp.w	r3, #400	; 0x190
     adc:	bge.n	ba6 <loop+0x712>
        max_ppqn = 6;

        if (ppqn >= 6) {
     ade:	ldr	r0, [r1, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ae0:	movs	r5, #6

        if (ppqn >= 6) {
     ae2:	cmp	r0, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ae4:	str	r5, [r1, #32]

        if (ppqn >= 6) {
     ae6:	ble.w	6b4 <loop+0x220>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     aea:	str	r2, [r1, #28]
     aec:	b.n	6b4 <loop+0x220>
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     aee:	ldr	r3, [pc, #780]	; (dfc <loop+0x968>)
     af0:	ldr	r4, [pc, #780]	; (e00 <loop+0x96c>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[5]->toggle();
     af2:	ldr	r2, [r3, #108]	; 0x6c
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     af4:	movs	r5, #0
      ppqn = 0;
     af6:	str	r5, [r3, #28]
      m_currentStep = 0;
     af8:	str	r5, [r3, #8]
     afa:	ldmia.w	r2, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     afe:	clz	r1, r1
     b02:	lsrs	r1, r1, #5
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     b04:	strb	r5, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b06:	uxtb	r0, r0
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b08:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     b0a:	bl	2098 <digitalWrite>
     b0e:	b.n	4a8 <loop+0x14>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     b10:	ldr	r5, [pc, #744]	; (dfc <loop+0x968>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b12:	ldr	r4, [pc, #748]	; (e00 <loop+0x96c>)
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     b14:	ldr	r3, [r5, #8]
     b16:	adds	r3, #22
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     b18:	mov.w	r8, #1
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     b1c:	ldr.w	r6, [r5, r3, lsl #2]
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     b20:	strb.w	r8, [r5, #4]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b24:	ldrb.w	r9, [r6]
      ppqn = 0;
     b28:	movs	r7, #0
     b2a:	mov	r0, r9
     b2c:	str	r7, [r5, #28]
     b2e:	bl	20a4 <digitalRead>
     b32:	clz	r1, r0
     b36:	lsrs	r1, r1, #5
     b38:	mov	r0, r9
     b3a:	bl	2098 <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep].m_state) {
     b3e:	ldr	r3, [r5, #8]
     b40:	ldr	r2, [r4, #0]
     b42:	str	r2, [sp, #4]
     b44:	ldrb	r2, [r5, r3]
	return ret;
     b46:	ldr	r1, [sp, #4]
      blinking = true;
     b48:	strb.w	r8, [r6, #16]
      blinkingCounter = times;
     b4c:	str	r7, [r6, #20]
      lastBlink = millis();  
     b4e:	str	r1, [r6, #8]
     b50:	cmp	r2, #0
     b52:	bne.w	1048 <loop+0xbb4>
          playStep(m_currentStep);
        }

        m_currentStep++;
     b56:	adds	r3, #1

        if (m_currentStep > 3) {
     b58:	cmp	r3, #3
          m_currentStep = 0;
     b5a:	it	gt
     b5c:	movgt	r3, #0
     b5e:	str	r3, [r5, #8]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[5]->toggle();
     b60:	ldr	r3, [r5, #108]	; 0x6c
     b62:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     b66:	clz	r1, r1
     b6a:	lsrs	r1, r1, #5
     b6c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b6e:	uxtb	r0, r0
     b70:	bl	2098 <digitalWrite>
     b74:	b.n	4a8 <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     b76:	ldr	r5, [pc, #644]	; (dfc <loop+0x968>)

      if (ppqn >= notesLengths[m_currentStep]) {
     b78:	ldr	r2, [r5, #8]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     b7a:	ldr	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     b7c:	adds	r2, #18
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     b7e:	adds	r3, #1

      if (ppqn >= notesLengths[m_currentStep]) {
     b80:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     b84:	str	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     b86:	cmp	r3, r2
     b88:	bge.w	103e <loop+0xbaa>
        // of the active note to see if i do the stop step
        stopStep();
      }


      if (ppqn == max_ppqn) {
     b8c:	ldr	r2, [r5, #32]
     b8e:	ldr	r6, [pc, #620]	; (dfc <loop+0x968>)
     b90:	cmp	r2, r3
     b92:	bne.w	4a6 <loop+0x12>
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
     b96:	ldrb	r3, [r6, #4]
     b98:	cmp	r3, #0
     b9a:	bne.w	1234 <loop+0xda0>
     b9e:	ldr	r4, [pc, #608]	; (e00 <loop+0x96c>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     ba0:	movs	r3, #0
     ba2:	str	r3, [r5, #28]
     ba4:	b.n	4a8 <loop+0x14>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     ba6:	sub.w	r0, r3, #400	; 0x190
     baa:	cmp.w	r0, #400	; 0x190
     bae:	bcc.n	bc0 <loop+0x72c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     bb0:	sub.w	r2, r3, #800	; 0x320
     bb4:	cmp	r2, #223	; 0xdf
     bb6:	bhi.w	6b4 <loop+0x220>
        max_ppqn = 12;
     bba:	movs	r2, #12
     bbc:	str	r2, [r1, #32]
     bbe:	b.n	6b4 <loop+0x220>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
     bc0:	ldr	r0, [r1, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     bc2:	movs	r5, #8

        if (ppqn >= 8) {
     bc4:	cmp	r0, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     bc6:	str	r5, [r1, #32]

        if (ppqn >= 8) {
     bc8:	ble.w	6b4 <loop+0x220>
     bcc:	b.n	aea <loop+0x656>
      } else if (currentMode == VELOCITY) {
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
        m_sequence.controlLength(m_value, m_id);
     bce:	ldr	r5, [r4, #16]
     bd0:	ldr	r3, [r4, #4]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     bd2:	ldr	r1, [r5, #32]
     bd4:	ldr	r0, [r4, #12]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     bd6:	rsb	r2, r1, #1
     bda:	movw	r6, #1022	; 0x3fe
     bde:	cmp	r2, r6
     be0:	bgt.w	1028 <loop+0xb94>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     be4:	rsb	r2, r1, #2
     be8:	mul.w	r2, r3, r2
     bec:	cmp	r2, #0
     bee:	it	lt
     bf0:	addwlt	r2, r2, #1023	; 0x3ff
     bf4:	add.w	r1, r1, r2, asr #10
      notesLengths[id] = newValue;
     bf8:	add.w	r2, r0, #18
     bfc:	str.w	r1, [r5, r2, lsl #2]
     c00:	b.n	6b4 <loop+0x220>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     c02:	ldr	r3, [r7, #24]
     c04:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c08:	clz	r1, r1
     c0c:	lsrs	r1, r1, #5
     c0e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c10:	uxtb	r0, r0
     c12:	bl	2098 <digitalWrite>
     c16:	movs	r1, #1
     c18:	ldr	r0, [pc, #488]	; (e04 <loop+0x970>)
     c1a:	bl	1a88 <usb_serial_write>
     c1e:	ldr	r0, [pc, #488]	; (e08 <loop+0x974>)
     c20:	bl	35fc <Print::println()>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     c24:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c28:	ldrb.w	sl, [r9]
     c2c:	mov	r0, sl
     c2e:	bl	20a4 <digitalRead>
     c32:	clz	r1, r0
     c36:	lsrs	r1, r1, #5
     c38:	mov	r0, sl
     c3a:	bl	2098 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     c3e:	ldr	r3, [pc, #460]	; (e0c <loop+0x978>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c40:	ldr.w	r2, [r8]
     c44:	str	r2, [sp, #156]	; 0x9c
     c46:	ldrb.w	sl, [r3]
	return ret;
     c4a:	ldr	r2, [sp, #156]	; 0x9c
      blinking = true;
      blinkingCounter = times;
     c4c:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c50:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     c54:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c58:	strb.w	fp, [r9, #16]
     c5c:	cmp.w	sl, #0
     c60:	beq.w	1106 <loop+0xc72>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     c64:	cmp.w	sl, #1
     c68:	beq.w	144a <loop+0xfb6>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     c6c:	cmp.w	sl, #2
     c70:	beq.w	15b4 <loop+0x1120>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     c74:	cmp.w	sl, #3
     c78:	beq.w	13c4 <loop+0xf30>
     c7c:	ldr	r2, [r7, #12]
     c7e:	b.n	632 <loop+0x19e>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     c80:	ldr	r3, [r7, #24]
     c82:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c86:	clz	r1, r1
     c8a:	lsrs	r1, r1, #5
     c8c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c8e:	uxtb	r0, r0
     c90:	bl	2098 <digitalWrite>
     c94:	movs	r1, #1
     c96:	ldr	r0, [pc, #364]	; (e04 <loop+0x970>)
     c98:	bl	1a88 <usb_serial_write>
     c9c:	ldr	r0, [pc, #360]	; (e08 <loop+0x974>)
     c9e:	bl	35fc <Print::println()>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     ca2:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ca6:	ldrb.w	sl, [r9]
     caa:	mov	r0, sl
     cac:	bl	20a4 <digitalRead>
     cb0:	clz	r1, r0
     cb4:	lsrs	r1, r1, #5
     cb6:	mov	r0, sl
     cb8:	bl	2098 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     cbc:	ldr	r3, [pc, #332]	; (e0c <loop+0x978>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cbe:	ldr.w	r2, [r8]
     cc2:	str	r2, [sp, #136]	; 0x88
     cc4:	ldrb.w	sl, [r3]
	return ret;
     cc8:	ldr	r2, [sp, #136]	; 0x88
      blinking = true;
      blinkingCounter = times;
     cca:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     cce:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     cd2:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     cd6:	strb.w	fp, [r9, #16]
     cda:	cmp.w	sl, #0
     cde:	beq.w	10c2 <loop+0xc2e>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     ce2:	cmp.w	sl, #1
     ce6:	beq.w	1406 <loop+0xf72>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     cea:	cmp.w	sl, #2
     cee:	beq.w	1644 <loop+0x11b0>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     cf2:	cmp.w	sl, #3
     cf6:	beq.w	1340 <loop+0xeac>
     cfa:	ldr	r2, [r7, #12]
     cfc:	b.n	5f0 <loop+0x15c>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     cfe:	ldr	r3, [r7, #24]
     d00:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     d04:	clz	r1, r1
     d08:	lsrs	r1, r1, #5
     d0a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     d0c:	uxtb	r0, r0
     d0e:	bl	2098 <digitalWrite>
     d12:	movs	r1, #1
     d14:	ldr	r0, [pc, #236]	; (e04 <loop+0x970>)
     d16:	bl	1a88 <usb_serial_write>
     d1a:	ldr	r0, [pc, #236]	; (e08 <loop+0x974>)
     d1c:	bl	35fc <Print::println()>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     d20:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     d24:	ldrb.w	sl, [r9]
     d28:	mov	r0, sl
     d2a:	bl	20a4 <digitalRead>
     d2e:	clz	r1, r0
     d32:	lsrs	r1, r1, #5
     d34:	mov	r0, sl
     d36:	bl	2098 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     d3a:	ldr	r3, [pc, #208]	; (e0c <loop+0x978>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d3c:	ldr.w	r2, [r8]
     d40:	str	r2, [sp, #116]	; 0x74
     d42:	ldrb.w	sl, [r3]
	return ret;
     d46:	ldr	r2, [sp, #116]	; 0x74
      blinking = true;
      blinkingCounter = times;
     d48:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d4c:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     d50:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d54:	strb.w	fp, [r9, #16]
     d58:	cmp.w	sl, #0
     d5c:	beq.w	11ac <loop+0xd18>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     d60:	cmp.w	sl, #1
     d64:	beq.w	14e8 <loop+0x1054>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     d68:	cmp.w	sl, #2
     d6c:	beq.w	171c <loop+0x1288>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     d70:	cmp.w	sl, #3
     d74:	beq.w	12fe <loop+0xe6a>
     d78:	ldr	r2, [r7, #12]
     d7a:	b.n	5ae <loop+0x11a>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     d7c:	ldr	r3, [r7, #24]
     d7e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     d82:	clz	r1, r1
     d86:	lsrs	r1, r1, #5
     d88:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     d8a:	uxtb	r0, r0
     d8c:	bl	2098 <digitalWrite>
     d90:	movs	r1, #1
     d92:	ldr	r0, [pc, #112]	; (e04 <loop+0x970>)
     d94:	bl	1a88 <usb_serial_write>
     d98:	ldr	r0, [pc, #108]	; (e08 <loop+0x974>)
     d9a:	bl	35fc <Print::println()>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     d9e:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     da2:	ldrb.w	sl, [r9]
     da6:	mov	r0, sl
     da8:	bl	20a4 <digitalRead>
     dac:	clz	r1, r0
     db0:	lsrs	r1, r1, #5
     db2:	mov	r0, sl
     db4:	bl	2098 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     db8:	ldr	r3, [pc, #80]	; (e0c <loop+0x978>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dba:	ldr.w	r2, [r8]
     dbe:	str	r2, [sp, #56]	; 0x38
     dc0:	ldrb.w	sl, [r3]
	return ret;
     dc4:	ldr	r2, [sp, #56]	; 0x38
      blinking = true;
      blinkingCounter = times;
     dc6:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     dca:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     dce:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     dd2:	strb.w	fp, [r9, #16]
     dd6:	cmp.w	sl, #0
     dda:	beq.w	1168 <loop+0xcd4>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     dde:	cmp.w	sl, #1
     de2:	beq.w	14a4 <loop+0x1010>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     de6:	cmp.w	sl, #2
     dea:	beq.w	168c <loop+0x11f8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     dee:	cmp.w	sl, #3
     df2:	beq.w	1382 <loop+0xeee>
     df6:	ldr	r2, [r7, #12]
     df8:	b.w	4e8 <loop+0x54>
     dfc:	.word	0x1fff1738
     e00:	.word	0x1fff1838
     e04:	.word	0x000049f0
     e08:	.word	0x1fff0c60
     e0c:	.word	0x1fff165c
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     e10:	ldr	r3, [r7, #24]
     e12:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     e16:	clz	r1, r1
     e1a:	lsrs	r1, r1, #5
     e1c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     e1e:	uxtb	r0, r0
     e20:	bl	2098 <digitalWrite>
     e24:	movs	r1, #1
     e26:	ldr	r0, [pc, #804]	; (114c <loop+0xcb8>)
     e28:	bl	1a88 <usb_serial_write>
     e2c:	ldr	r0, [pc, #800]	; (1150 <loop+0xcbc>)
     e2e:	bl	35fc <Print::println()>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     e32:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e36:	ldrb.w	sl, [r9]
     e3a:	mov	r0, sl
     e3c:	bl	20a4 <digitalRead>
     e40:	clz	r1, r0
     e44:	lsrs	r1, r1, #5
     e46:	mov	r0, sl
     e48:	bl	2098 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     e4c:	ldr	r3, [pc, #772]	; (1154 <loop+0xcc0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e4e:	ldr.w	r2, [r8]
     e52:	str	r2, [sp, #96]	; 0x60
     e54:	ldrb.w	sl, [r3]
	return ret;
     e58:	ldr	r2, [sp, #96]	; 0x60
      blinking = true;
      blinkingCounter = times;
     e5a:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e5e:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     e62:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e66:	strb.w	fp, [r9, #16]
     e6a:	cmp.w	sl, #0
     e6e:	beq.w	107e <loop+0xbea>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     e72:	cmp.w	sl, #1
     e76:	beq.w	1570 <loop+0x10dc>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     e7a:	cmp.w	sl, #2
     e7e:	beq.w	16d4 <loop+0x1240>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     e82:	cmp.w	sl, #3
     e86:	beq.w	12bc <loop+0xe28>
     e8a:	ldr	r2, [r7, #12]
     e8c:	b.w	56c <loop+0xd8>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     e90:	ldr	r3, [r7, #24]
     e92:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     e96:	clz	r1, r1
     e9a:	lsrs	r1, r1, #5
     e9c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     e9e:	uxtb	r0, r0
     ea0:	bl	2098 <digitalWrite>
     ea4:	movs	r1, #1
     ea6:	ldr	r0, [pc, #676]	; (114c <loop+0xcb8>)
     ea8:	bl	1a88 <usb_serial_write>
     eac:	ldr	r0, [pc, #672]	; (1150 <loop+0xcbc>)
     eae:	bl	35fc <Print::println()>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     eb2:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     eb6:	ldrb.w	sl, [r9]
     eba:	mov	r0, sl
     ebc:	bl	20a4 <digitalRead>
     ec0:	clz	r1, r0
     ec4:	lsrs	r1, r1, #5
     ec6:	mov	r0, sl
     ec8:	bl	2098 <digitalWrite>
      
      if (currentMode == GLOBAL) {
     ecc:	ldr	r3, [pc, #644]	; (1154 <loop+0xcc0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ece:	ldr.w	r2, [r8]
     ed2:	str	r2, [sp, #76]	; 0x4c
     ed4:	ldrb.w	sl, [r3]
	return ret;
     ed8:	ldr	r2, [sp, #76]	; 0x4c
      blinking = true;
      blinkingCounter = times;
     eda:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ede:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
     ee2:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ee6:	strb.w	fp, [r9, #16]
     eea:	cmp.w	sl, #0
     eee:	beq.w	11f0 <loop+0xd5c>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
     ef2:	cmp.w	sl, #1
     ef6:	beq.w	152c <loop+0x1098>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
     efa:	cmp.w	sl, #2
     efe:	beq.w	15fc <loop+0x1168>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
     f02:	cmp.w	sl, #3
     f06:	beq.w	127a <loop+0xde6>
     f0a:	ldr	r2, [r7, #12]
     f0c:	b.w	52a <loop+0x96>
      notes[id] = newValue;
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
     f10:	ldr	r2, [r4, #12]
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
        m_sequence.controlVelocity(m_value, m_id);
     f12:	ldr	r3, [r4, #4]
     f14:	ldr	r0, [r4, #16]
     f16:	add.w	r1, r2, #14
     f1a:	subs.w	r2, r3, r3, lsl #6
     f1e:	it	mi
     f20:	addwmi	r2, r2, #1023	; 0x3ff
     f24:	asrs	r2, r2, #10
     f26:	adds	r2, #127	; 0x7f
     f28:	str.w	r2, [r0, r1, lsl #2]
     f2c:	b.w	6b4 <loop+0x220>
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
        Serial.println("a");
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
        m_led.toggle();
     f30:	ldr	r3, [r7, #24]
     f32:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     f36:	clz	r1, r1
     f3a:	lsrs	r1, r1, #5
     f3c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     f3e:	uxtb	r0, r0
     f40:	bl	2098 <digitalWrite>
     f44:	movs	r1, #4
     f46:	ldr	r0, [pc, #528]	; (1158 <loop+0xcc4>)
     f48:	bl	1a88 <usb_serial_write>
     f4c:	ldr	r0, [pc, #512]	; (1150 <loop+0xcbc>)
     f4e:	bl	35fc <Print::println()>
     f52:	b.n	cfa <loop+0x866>
     f54:	ldr	r3, [r7, #24]
     f56:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     f5a:	clz	r1, r1
     f5e:	lsrs	r1, r1, #5
     f60:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     f62:	uxtb	r0, r0
     f64:	bl	2098 <digitalWrite>
     f68:	movs	r1, #4
     f6a:	ldr	r0, [pc, #492]	; (1158 <loop+0xcc4>)
     f6c:	bl	1a88 <usb_serial_write>
     f70:	ldr	r0, [pc, #476]	; (1150 <loop+0xcbc>)
     f72:	bl	35fc <Print::println()>
     f76:	b.n	f0a <loop+0xa76>
     f78:	ldr	r3, [r7, #24]
     f7a:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     f7e:	clz	r1, r1
     f82:	lsrs	r1, r1, #5
     f84:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     f86:	uxtb	r0, r0
     f88:	bl	2098 <digitalWrite>
     f8c:	movs	r1, #4
     f8e:	ldr	r0, [pc, #456]	; (1158 <loop+0xcc4>)
     f90:	bl	1a88 <usb_serial_write>
     f94:	ldr	r0, [pc, #440]	; (1150 <loop+0xcbc>)
     f96:	bl	35fc <Print::println()>
     f9a:	b.n	df6 <loop+0x962>
     f9c:	ldr	r3, [r7, #24]
     f9e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     fa2:	clz	r1, r1
     fa6:	lsrs	r1, r1, #5
     fa8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     faa:	uxtb	r0, r0
     fac:	bl	2098 <digitalWrite>
     fb0:	movs	r1, #4
     fb2:	ldr	r0, [pc, #420]	; (1158 <loop+0xcc4>)
     fb4:	bl	1a88 <usb_serial_write>
     fb8:	ldr	r0, [pc, #404]	; (1150 <loop+0xcbc>)
     fba:	bl	35fc <Print::println()>
     fbe:	b.n	d78 <loop+0x8e4>
     fc0:	ldr	r3, [r7, #24]
     fc2:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     fc6:	clz	r1, r1
     fca:	lsrs	r1, r1, #5
     fcc:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     fce:	uxtb	r0, r0
     fd0:	bl	2098 <digitalWrite>
     fd4:	movs	r1, #4
     fd6:	ldr	r0, [pc, #384]	; (1158 <loop+0xcc4>)
     fd8:	bl	1a88 <usb_serial_write>
     fdc:	ldr	r0, [pc, #368]	; (1150 <loop+0xcbc>)
     fde:	bl	35fc <Print::println()>
     fe2:	b.n	e8a <loop+0x9f6>
     fe4:	ldr	r3, [r7, #24]
     fe6:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     fea:	clz	r1, r1
     fee:	lsrs	r1, r1, #5
     ff0:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ff2:	uxtb	r0, r0
     ff4:	bl	2098 <digitalWrite>
     ff8:	movs	r1, #4
     ffa:	ldr	r0, [pc, #348]	; (1158 <loop+0xcc4>)
     ffc:	bl	1a88 <usb_serial_write>
    1000:	ldr	r0, [pc, #332]	; (1150 <loop+0xcbc>)
    1002:	bl	35fc <Print::println()>
    1006:	b.n	c7c <loop+0x7e8>
      } else if (currentMode == PITCH) {
        m_sequence.controlPitch(m_value, m_id);
    1008:	ldr	r3, [r4, #4]
      notesLengths[id] = newValue;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      notes[id] = newValue;
    100a:	ldr	r1, [r4, #12]
    100c:	ldr	r0, [r4, #16]
    100e:	sub.w	r2, r3, r3, lsl #2
    1012:	lsls	r2, r2, #2
    1014:	it	mi
    1016:	addwmi	r2, r2, #1023	; 0x3ff
    101a:	adds	r1, #10
    101c:	asrs	r2, r2, #10
    101e:	adds	r2, #51	; 0x33
    1020:	str.w	r2, [r0, r1, lsl #2]
    1024:	b.w	6b4 <loop+0x220>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1028:	ldr	r6, [pc, #304]	; (115c <loop+0xcc8>)
    102a:	mul.w	r2, r2, r3
    102e:	smull	r7, r6, r6, r2
    1032:	add	r6, r2
    1034:	asrs	r2, r2, #31
    1036:	rsb	r2, r2, r6, asr #9
    103a:	add	r1, r2
    103c:	b.n	bf8 <loop+0x764>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    103e:	ldr	r0, [pc, #288]	; (1160 <loop+0xccc>)
    1040:	bl	2324 <usb_midi_write_packed>
    1044:	ldr	r3, [r5, #28]
    1046:	b.n	b8c <loop+0x6f8>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1048:	add.w	r6, r3, #10
    104c:	adds	r3, #14
    104e:	ldr.w	r2, [r5, r6, lsl #2]
    1052:	ldr.w	r3, [r5, r3, lsl #2]
    1056:	lsls	r2, r2, #16
    1058:	lsls	r0, r3, #24
    105a:	and.w	r3, r0, #2130706432	; 0x7f000000
    105e:	and.w	r0, r2, #8323072	; 0x7f0000
    1062:	orrs	r0, r3
    1064:	orr.w	r0, r0, #40704	; 0x9f00
    1068:	orr.w	r0, r0, #9
    106c:	bl	2324 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1070:	bl	23c0 <usb_midi_flush_output>
      activeNote = notes[step];
    1074:	ldr.w	r2, [r5, r6, lsl #2]
    1078:	ldr	r3, [r5, #8]
    107a:	str	r2, [r5, #36]	; 0x24
    107c:	b.n	b56 <loop+0x6c2>
    107e:	movs	r1, #5
    1080:	ldr	r0, [pc, #224]	; (1164 <loop+0xcd0>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1082:	strb.w	fp, [r3]
    1086:	bl	1a88 <usb_serial_write>
    108a:	ldr	r0, [pc, #196]	; (1150 <loop+0xcbc>)
    108c:	bl	35fc <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1090:	ldr	r3, [r7, #28]
    1092:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1094:	ldrb.w	r9, [r5]
    1098:	mov	r0, r9
    109a:	bl	20a4 <digitalRead>
    109e:	clz	r1, r0
    10a2:	lsrs	r1, r1, #5
    10a4:	mov	r0, r9
    10a6:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10aa:	ldr.w	r3, [r8]
    10ae:	str	r3, [sp, #100]	; 0x64
	return ret;
    10b0:	ldr	r3, [sp, #100]	; 0x64
    10b2:	ldr	r2, [r7, #12]
      blinking = true;
    10b4:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    10b8:	movs	r1, #3
    10ba:	str	r1, [r5, #20]
      lastBlink = millis();  
    10bc:	str	r3, [r5, #8]
    10be:	b.w	56c <loop+0xd8>
    10c2:	movs	r1, #5
    10c4:	ldr	r0, [pc, #156]	; (1164 <loop+0xcd0>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    10c6:	strb.w	fp, [r3]
    10ca:	bl	1a88 <usb_serial_write>
    10ce:	ldr	r0, [pc, #128]	; (1150 <loop+0xcbc>)
    10d0:	bl	35fc <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    10d4:	ldr	r3, [r7, #28]
    10d6:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10d8:	ldrb.w	r9, [r5]
    10dc:	mov	r0, r9
    10de:	bl	20a4 <digitalRead>
    10e2:	clz	r1, r0
    10e6:	lsrs	r1, r1, #5
    10e8:	mov	r0, r9
    10ea:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10ee:	ldr.w	r3, [r8]
    10f2:	str	r3, [sp, #140]	; 0x8c
	return ret;
    10f4:	ldr	r3, [sp, #140]	; 0x8c
    10f6:	ldr	r2, [r7, #12]
      blinking = true;
    10f8:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    10fc:	movs	r1, #3
    10fe:	str	r1, [r5, #20]
      lastBlink = millis();  
    1100:	str	r3, [r5, #8]
    1102:	b.w	5f0 <loop+0x15c>
    1106:	movs	r1, #5
    1108:	ldr	r0, [pc, #88]	; (1164 <loop+0xcd0>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    110a:	strb.w	fp, [r3]
    110e:	bl	1a88 <usb_serial_write>
    1112:	ldr	r0, [pc, #60]	; (1150 <loop+0xcbc>)
    1114:	bl	35fc <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1118:	ldr	r3, [r7, #28]
    111a:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    111c:	ldrb.w	r9, [r6]
    1120:	mov	r0, r9
    1122:	bl	20a4 <digitalRead>
    1126:	clz	r1, r0
    112a:	lsrs	r1, r1, #5
    112c:	mov	r0, r9
    112e:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1132:	ldr.w	r3, [r8]
    1136:	str	r3, [sp, #160]	; 0xa0
	return ret;
    1138:	ldr	r3, [sp, #160]	; 0xa0
    113a:	ldr	r2, [r7, #12]
      blinking = true;
    113c:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    1140:	movs	r1, #3
    1142:	str	r1, [r6, #20]
      lastBlink = millis();  
    1144:	str	r3, [r6, #8]
    1146:	b.w	632 <loop+0x19e>
    114a:	nop
    114c:	.word	0x000049f0
    1150:	.word	0x1fff0c60
    1154:	.word	0x1fff165c
    1158:	.word	0x00004a1c
    115c:	.word	0x80200803
    1160:	.word	0x7f7bbf0b
    1164:	.word	0x000049f4
    1168:	movne	r1, #5
    116a:	ldr	r0, [pc, #804]	; (1490 <loop+0xffc>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    116c:	strb.w	fp, [r3]
    1170:	bl	1a88 <usb_serial_write>
    1174:	ldr	r0, [pc, #796]	; (1494 <loop+0x1000>)
    1176:	bl	35fc <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    117a:	ldr	r3, [r7, #28]
    117c:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    117e:	ldrb.w	r9, [r5]
    1182:	mov	r0, r9
    1184:	bl	20a4 <digitalRead>
    1188:	clz	r1, r0
    118c:	lsrs	r1, r1, #5
    118e:	mov	r0, r9
    1190:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1194:	ldr.w	r3, [r8]
    1198:	str	r3, [sp, #60]	; 0x3c
	return ret;
    119a:	ldr	r3, [sp, #60]	; 0x3c
    119c:	ldr	r2, [r7, #12]
      blinking = true;
    119e:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    11a2:	movs	r1, #3
    11a4:	str	r1, [r5, #20]
      lastBlink = millis();  
    11a6:	str	r3, [r5, #8]
    11a8:	b.w	4e8 <loop+0x54>
    11ac:	movs	r1, #5
    11ae:	ldr	r0, [pc, #736]	; (1490 <loop+0xffc>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    11b0:	strb.w	fp, [r3]
    11b4:	bl	1a88 <usb_serial_write>
    11b8:	ldr	r0, [pc, #728]	; (1494 <loop+0x1000>)
    11ba:	bl	35fc <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    11be:	ldr	r3, [r7, #28]
    11c0:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11c2:	ldrb.w	r9, [r6]
    11c6:	mov	r0, r9
    11c8:	bl	20a4 <digitalRead>
    11cc:	clz	r1, r0
    11d0:	lsrs	r1, r1, #5
    11d2:	mov	r0, r9
    11d4:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11d8:	ldr.w	r3, [r8]
    11dc:	str	r3, [sp, #120]	; 0x78
	return ret;
    11de:	ldr	r3, [sp, #120]	; 0x78
    11e0:	ldr	r2, [r7, #12]
      blinking = true;
    11e2:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    11e6:	movs	r1, #3
    11e8:	str	r1, [r6, #20]
      lastBlink = millis();  
    11ea:	str	r3, [r6, #8]
    11ec:	b.w	5ae <loop+0x11a>
    11f0:	movs	r1, #5
    11f2:	ldr	r0, [pc, #668]	; (1490 <loop+0xffc>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    11f4:	strb.w	fp, [r3]
    11f8:	bl	1a88 <usb_serial_write>
    11fc:	ldr	r0, [pc, #660]	; (1494 <loop+0x1000>)
    11fe:	bl	35fc <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1202:	ldr	r3, [r7, #28]
    1204:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1206:	ldrb.w	r9, [r6]
    120a:	mov	r0, r9
    120c:	bl	20a4 <digitalRead>
    1210:	clz	r1, r0
    1214:	lsrs	r1, r1, #5
    1216:	mov	r0, r9
    1218:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    121c:	ldr.w	r3, [r8]
    1220:	str	r3, [sp, #80]	; 0x50
	return ret;
    1222:	ldr	r3, [sp, #80]	; 0x50
    1224:	ldr	r2, [r7, #12]
      blinking = true;
    1226:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    122a:	movs	r1, #3
    122c:	str	r1, [r6, #20]
      lastBlink = millis();  
    122e:	str	r3, [r6, #8]
    1230:	b.w	52a <loop+0x96>
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
    1234:	ldr	r3, [r6, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1236:	ldr	r4, [pc, #608]	; (1498 <loop+0x1004>)
    1238:	adds	r3, #22
    123a:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    123e:	ldrb.w	r8, [r7]
    1242:	mov	r0, r8
    1244:	bl	20a4 <digitalRead>
    1248:	clz	r1, r0
    124c:	lsrs	r1, r1, #5
    124e:	mov	r0, r8
    1250:	bl	2098 <digitalWrite>
    1254:	ldr	r2, [r4, #0]

        if (m_steps[m_currentStep].m_state) {
    1256:	ldr	r3, [r6, #8]
    1258:	str	r2, [sp, #0]
	return ret;
    125a:	ldr	r1, [sp, #0]
    125c:	ldrb	r2, [r6, r3]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    125e:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1260:	movs	r0, #1
      blinkingCounter = times;
    1262:	movs	r1, #0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1264:	strb	r0, [r7, #16]
      blinkingCounter = times;
    1266:	str	r1, [r7, #20]
    1268:	cmp	r2, #0
    126a:	bne.w	1764 <loop+0x12d0>
          playStep(m_currentStep);
        }

        m_currentStep++;
    126e:	adds	r3, #1

        if (m_currentStep > 3) {
    1270:	cmp	r3, #3
          m_currentStep = 0;
    1272:	it	gt
    1274:	movgt	r3, #0
    1276:	str	r3, [r5, #8]
    1278:	b.n	ba0 <loop+0x70c>
    127a:	movs	r1, #6
    127c:	ldr	r0, [pc, #540]	; (149c <loop+0x1008>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    127e:	strb	r6, [r3, #0]
    1280:	bl	1a88 <usb_serial_write>
    1284:	ldr	r0, [pc, #524]	; (1494 <loop+0x1000>)
    1286:	bl	35fc <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    128a:	ldr	r3, [r7, #28]
    128c:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    128e:	ldrb.w	r9, [r6]
    1292:	mov	r0, r9
    1294:	bl	20a4 <digitalRead>
    1298:	clz	r1, r0
    129c:	lsrs	r1, r1, #5
    129e:	mov	r0, r9
    12a0:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12a4:	ldr.w	r3, [r8]
    12a8:	str	r3, [sp, #92]	; 0x5c
	return ret;
    12aa:	ldr	r3, [sp, #92]	; 0x5c
    12ac:	ldr	r2, [r7, #12]
      blinking = true;
    12ae:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    12b2:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    12b6:	str	r3, [r6, #8]
    12b8:	b.w	52a <loop+0x96>
    12bc:	movs	r1, #6
    12be:	ldr	r0, [pc, #476]	; (149c <loop+0x1008>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    12c0:	strb	r5, [r3, #0]
    12c2:	bl	1a88 <usb_serial_write>
    12c6:	ldr	r0, [pc, #460]	; (1494 <loop+0x1000>)
    12c8:	bl	35fc <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    12cc:	ldr	r3, [r7, #28]
    12ce:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12d0:	ldrb.w	r9, [r5]
    12d4:	mov	r0, r9
    12d6:	bl	20a4 <digitalRead>
    12da:	clz	r1, r0
    12de:	lsrs	r1, r1, #5
    12e0:	mov	r0, r9
    12e2:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12e6:	ldr.w	r3, [r8]
    12ea:	str	r3, [sp, #112]	; 0x70
	return ret;
    12ec:	ldr	r3, [sp, #112]	; 0x70
    12ee:	ldr	r2, [r7, #12]
      blinking = true;
    12f0:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    12f4:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    12f8:	str	r3, [r5, #8]
    12fa:	b.w	56c <loop+0xd8>
    12fe:	movs	r1, #6
    1300:	ldr	r0, [pc, #408]	; (149c <loop+0x1008>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1302:	strb	r6, [r3, #0]
    1304:	bl	1a88 <usb_serial_write>
    1308:	ldr	r0, [pc, #392]	; (1494 <loop+0x1000>)
    130a:	bl	35fc <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    130e:	ldr	r3, [r7, #28]
    1310:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1312:	ldrb.w	r9, [r6]
    1316:	mov	r0, r9
    1318:	bl	20a4 <digitalRead>
    131c:	clz	r1, r0
    1320:	lsrs	r1, r1, #5
    1322:	mov	r0, r9
    1324:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1328:	ldr.w	r3, [r8]
    132c:	str	r3, [sp, #132]	; 0x84
	return ret;
    132e:	ldr	r3, [sp, #132]	; 0x84
    1330:	ldr	r2, [r7, #12]
      blinking = true;
    1332:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    1336:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    133a:	str	r3, [r6, #8]
    133c:	b.w	5ae <loop+0x11a>
    1340:	movs	r1, #6
    1342:	ldr	r0, [pc, #344]	; (149c <loop+0x1008>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1344:	strb	r5, [r3, #0]
    1346:	bl	1a88 <usb_serial_write>
    134a:	ldr	r0, [pc, #328]	; (1494 <loop+0x1000>)
    134c:	bl	35fc <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    1350:	ldr	r3, [r7, #28]
    1352:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1354:	ldrb.w	r9, [r5]
    1358:	mov	r0, r9
    135a:	bl	20a4 <digitalRead>
    135e:	clz	r1, r0
    1362:	lsrs	r1, r1, #5
    1364:	mov	r0, r9
    1366:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    136a:	ldr.w	r3, [r8]
    136e:	str	r3, [sp, #152]	; 0x98
	return ret;
    1370:	ldr	r3, [sp, #152]	; 0x98
    1372:	ldr	r2, [r7, #12]
      blinking = true;
    1374:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    1378:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    137c:	str	r3, [r5, #8]
    137e:	b.w	5f0 <loop+0x15c>
    1382:	movs	r1, #6
    1384:	ldr	r0, [pc, #276]	; (149c <loop+0x1008>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1386:	strb	r5, [r3, #0]
    1388:	bl	1a88 <usb_serial_write>
    138c:	ldr	r0, [pc, #260]	; (1494 <loop+0x1000>)
    138e:	bl	35fc <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    1392:	ldr	r3, [r7, #28]
    1394:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1396:	ldrb.w	r9, [r5]
    139a:	mov	r0, r9
    139c:	bl	20a4 <digitalRead>
    13a0:	clz	r1, r0
    13a4:	lsrs	r1, r1, #5
    13a6:	mov	r0, r9
    13a8:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13ac:	ldr.w	r3, [r8]
    13b0:	str	r3, [sp, #72]	; 0x48
	return ret;
    13b2:	ldr	r3, [sp, #72]	; 0x48
    13b4:	ldr	r2, [r7, #12]
      blinking = true;
    13b6:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    13ba:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    13be:	str	r3, [r5, #8]
    13c0:	b.w	4e8 <loop+0x54>
    13c4:	movs	r1, #6
    13c6:	ldr	r0, [pc, #212]	; (149c <loop+0x1008>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    13c8:	strb	r6, [r3, #0]
    13ca:	bl	1a88 <usb_serial_write>
    13ce:	ldr	r0, [pc, #196]	; (1494 <loop+0x1000>)
    13d0:	bl	35fc <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    13d4:	ldr	r3, [r7, #28]
    13d6:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    13d8:	ldrb.w	r9, [r6]
    13dc:	mov	r0, r9
    13de:	bl	20a4 <digitalRead>
    13e2:	clz	r1, r0
    13e6:	lsrs	r1, r1, #5
    13e8:	mov	r0, r9
    13ea:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13ee:	ldr.w	r3, [r8]
    13f2:	str	r3, [sp, #172]	; 0xac
	return ret;
    13f4:	ldr	r3, [sp, #172]	; 0xac
    13f6:	ldr	r2, [r7, #12]
      blinking = true;
    13f8:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    13fc:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1400:	str	r3, [r6, #8]
    1402:	b.w	632 <loop+0x19e>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1406:	movs	r2, #2
    1408:	movs	r1, #8
    140a:	ldr	r0, [pc, #148]	; (14a0 <loop+0x100c>)
    140c:	strb	r2, [r3, #0]
    140e:	bl	1a88 <usb_serial_write>
    1412:	ldr	r0, [pc, #128]	; (1494 <loop+0x1000>)
    1414:	bl	35fc <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1418:	ldr	r3, [r7, #28]
    141a:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    141c:	ldrb.w	r9, [r5]
    1420:	mov	r0, r9
    1422:	bl	20a4 <digitalRead>
    1426:	clz	r1, r0
    142a:	lsrs	r1, r1, #5
    142c:	mov	r0, r9
    142e:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1432:	ldr.w	r3, [r8]
    1436:	str	r3, [sp, #144]	; 0x90
	return ret;
    1438:	ldr	r3, [sp, #144]	; 0x90
    143a:	ldr	r2, [r7, #12]
      blinking = true;
    143c:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1440:	movs	r1, #3
    1442:	str	r1, [r5, #20]
      lastBlink = millis();  
    1444:	str	r3, [r5, #8]
    1446:	b.w	5f0 <loop+0x15c>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    144a:	movs	r2, #2
    144c:	movs	r1, #8
    144e:	ldr	r0, [pc, #80]	; (14a0 <loop+0x100c>)
    1450:	strb	r2, [r3, #0]
    1452:	bl	1a88 <usb_serial_write>
    1456:	ldr	r0, [pc, #60]	; (1494 <loop+0x1000>)
    1458:	bl	35fc <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    145c:	ldr	r3, [r7, #28]
    145e:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1460:	ldrb.w	r9, [r6]
    1464:	mov	r0, r9
    1466:	bl	20a4 <digitalRead>
    146a:	clz	r1, r0
    146e:	lsrs	r1, r1, #5
    1470:	mov	r0, r9
    1472:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1476:	ldr.w	r3, [r8]
    147a:	str	r3, [sp, #164]	; 0xa4
	return ret;
    147c:	ldr	r3, [sp, #164]	; 0xa4
    147e:	ldr	r2, [r7, #12]
      blinking = true;
    1480:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    1484:	movs	r1, #3
    1486:	str	r1, [r6, #20]
      lastBlink = millis();  
    1488:	str	r3, [r6, #8]
    148a:	b.w	632 <loop+0x19e>
    148e:	nop
    1490:	.word	0x000049f4
    1494:	.word	0x1fff0c60
    1498:	.word	0x1fff1838
    149c:	.word	0x00004a14
    14a0:	.word	0x000049fc
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    14a4:	movs	r2, #2
    14a6:	movs	r1, #8
    14a8:	ldr	r0, [pc, #752]	; (179c <loop+0x1308>)
    14aa:	strb	r2, [r3, #0]
    14ac:	bl	1a88 <usb_serial_write>
    14b0:	ldr	r0, [pc, #748]	; (17a0 <loop+0x130c>)
    14b2:	bl	35fc <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    14b6:	ldr	r3, [r7, #28]
    14b8:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14ba:	ldrb.w	r9, [r5]
    14be:	mov	r0, r9
    14c0:	bl	20a4 <digitalRead>
    14c4:	clz	r1, r0
    14c8:	lsrs	r1, r1, #5
    14ca:	mov	r0, r9
    14cc:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14d0:	ldr.w	r3, [r8]
    14d4:	str	r3, [sp, #64]	; 0x40
	return ret;
    14d6:	ldr	r3, [sp, #64]	; 0x40
    14d8:	ldr	r2, [r7, #12]
      blinking = true;
    14da:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    14de:	movs	r1, #3
    14e0:	str	r1, [r5, #20]
      lastBlink = millis();  
    14e2:	str	r3, [r5, #8]
    14e4:	b.w	4e8 <loop+0x54>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    14e8:	movs	r2, #2
    14ea:	movs	r1, #8
    14ec:	ldr	r0, [pc, #684]	; (179c <loop+0x1308>)
    14ee:	strb	r2, [r3, #0]
    14f0:	bl	1a88 <usb_serial_write>
    14f4:	ldr	r0, [pc, #680]	; (17a0 <loop+0x130c>)
    14f6:	bl	35fc <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    14fa:	ldr	r3, [r7, #28]
    14fc:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14fe:	ldrb.w	r9, [r6]
    1502:	mov	r0, r9
    1504:	bl	20a4 <digitalRead>
    1508:	clz	r1, r0
    150c:	lsrs	r1, r1, #5
    150e:	mov	r0, r9
    1510:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1514:	ldr.w	r3, [r8]
    1518:	str	r3, [sp, #124]	; 0x7c
	return ret;
    151a:	ldr	r3, [sp, #124]	; 0x7c
    151c:	ldr	r2, [r7, #12]
      blinking = true;
    151e:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    1522:	movs	r1, #3
    1524:	str	r1, [r6, #20]
      lastBlink = millis();  
    1526:	str	r3, [r6, #8]
    1528:	b.w	5ae <loop+0x11a>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    152c:	movs	r2, #2
    152e:	movs	r1, #8
    1530:	ldr	r0, [pc, #616]	; (179c <loop+0x1308>)
    1532:	strb	r2, [r3, #0]
    1534:	bl	1a88 <usb_serial_write>
    1538:	ldr	r0, [pc, #612]	; (17a0 <loop+0x130c>)
    153a:	bl	35fc <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    153e:	ldr	r3, [r7, #28]
    1540:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1542:	ldrb.w	r9, [r6]
    1546:	mov	r0, r9
    1548:	bl	20a4 <digitalRead>
    154c:	clz	r1, r0
    1550:	lsrs	r1, r1, #5
    1552:	mov	r0, r9
    1554:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1558:	ldr.w	r3, [r8]
    155c:	str	r3, [sp, #84]	; 0x54
	return ret;
    155e:	ldr	r3, [sp, #84]	; 0x54
    1560:	ldr	r2, [r7, #12]
      blinking = true;
    1562:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    1566:	movs	r1, #3
    1568:	str	r1, [r6, #20]
      lastBlink = millis();  
    156a:	str	r3, [r6, #8]
    156c:	b.w	52a <loop+0x96>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1570:	movs	r2, #2
    1572:	movs	r1, #8
    1574:	ldr	r0, [pc, #548]	; (179c <loop+0x1308>)
    1576:	strb	r2, [r3, #0]
    1578:	bl	1a88 <usb_serial_write>
    157c:	ldr	r0, [pc, #544]	; (17a0 <loop+0x130c>)
    157e:	bl	35fc <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1582:	ldr	r3, [r7, #28]
    1584:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1586:	ldrb.w	r9, [r5]
    158a:	mov	r0, r9
    158c:	bl	20a4 <digitalRead>
    1590:	clz	r1, r0
    1594:	lsrs	r1, r1, #5
    1596:	mov	r0, r9
    1598:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    159c:	ldr.w	r3, [r8]
    15a0:	str	r3, [sp, #104]	; 0x68
	return ret;
    15a2:	ldr	r3, [sp, #104]	; 0x68
    15a4:	ldr	r2, [r7, #12]
      blinking = true;
    15a6:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    15aa:	movs	r1, #3
    15ac:	str	r1, [r5, #20]
      lastBlink = millis();  
    15ae:	str	r3, [r5, #8]
    15b0:	b.w	56c <loop+0xd8>
    15b4:	movs	r1, #10
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    15b6:	mov.w	r9, #3
    15ba:	ldr	r0, [pc, #488]	; (17a4 <loop+0x1310>)
    15bc:	strb.w	r9, [r3]
    15c0:	bl	1a88 <usb_serial_write>
    15c4:	ldr	r0, [pc, #472]	; (17a0 <loop+0x130c>)
    15c6:	bl	35fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    15ca:	ldr	r3, [r7, #28]
    15cc:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15ce:	ldrb.w	sl, [r6]
    15d2:	mov	r0, sl
    15d4:	bl	20a4 <digitalRead>
    15d8:	clz	r1, r0
    15dc:	lsrs	r1, r1, #5
    15de:	mov	r0, sl
    15e0:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15e4:	ldr.w	r3, [r8]
    15e8:	str	r3, [sp, #168]	; 0xa8
	return ret;
    15ea:	ldr	r3, [sp, #168]	; 0xa8
    15ec:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    15ee:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15f2:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    15f6:	str	r3, [r6, #8]
    15f8:	b.w	632 <loop+0x19e>
    15fc:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    15fe:	mov.w	r9, #3
    1602:	ldr	r0, [pc, #416]	; (17a4 <loop+0x1310>)
    1604:	strb.w	r9, [r3]
    1608:	bl	1a88 <usb_serial_write>
    160c:	ldr	r0, [pc, #400]	; (17a0 <loop+0x130c>)
    160e:	bl	35fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1612:	ldr	r3, [r7, #28]
    1614:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1616:	ldrb.w	sl, [r6]
    161a:	mov	r0, sl
    161c:	bl	20a4 <digitalRead>
    1620:	clz	r1, r0
    1624:	lsrs	r1, r1, #5
    1626:	mov	r0, sl
    1628:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    162c:	ldr.w	r3, [r8]
    1630:	str	r3, [sp, #88]	; 0x58
	return ret;
    1632:	ldr	r3, [sp, #88]	; 0x58
    1634:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1636:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    163a:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    163e:	str	r3, [r6, #8]
    1640:	b.w	52a <loop+0x96>
    1644:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1646:	mov.w	r9, #3
    164a:	ldr	r0, [pc, #344]	; (17a4 <loop+0x1310>)
    164c:	strb.w	r9, [r3]
    1650:	bl	1a88 <usb_serial_write>
    1654:	ldr	r0, [pc, #328]	; (17a0 <loop+0x130c>)
    1656:	bl	35fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    165a:	ldr	r3, [r7, #28]
    165c:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    165e:	ldrb.w	sl, [r5]
    1662:	mov	r0, sl
    1664:	bl	20a4 <digitalRead>
    1668:	clz	r1, r0
    166c:	lsrs	r1, r1, #5
    166e:	mov	r0, sl
    1670:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1674:	ldr.w	r3, [r8]
    1678:	str	r3, [sp, #148]	; 0x94
	return ret;
    167a:	ldr	r3, [sp, #148]	; 0x94
    167c:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    167e:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1682:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1686:	str	r3, [r5, #8]
    1688:	b.w	5f0 <loop+0x15c>
    168c:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    168e:	mov.w	r9, #3
    1692:	ldr	r0, [pc, #272]	; (17a4 <loop+0x1310>)
    1694:	strb.w	r9, [r3]
    1698:	bl	1a88 <usb_serial_write>
    169c:	ldr	r0, [pc, #256]	; (17a0 <loop+0x130c>)
    169e:	bl	35fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    16a2:	ldr	r3, [r7, #28]
    16a4:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16a6:	ldrb.w	sl, [r5]
    16aa:	mov	r0, sl
    16ac:	bl	20a4 <digitalRead>
    16b0:	clz	r1, r0
    16b4:	lsrs	r1, r1, #5
    16b6:	mov	r0, sl
    16b8:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16bc:	ldr.w	r3, [r8]
    16c0:	str	r3, [sp, #68]	; 0x44
	return ret;
    16c2:	ldr	r3, [sp, #68]	; 0x44
    16c4:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    16c6:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    16ca:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    16ce:	str	r3, [r5, #8]
    16d0:	b.w	4e8 <loop+0x54>
    16d4:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    16d6:	mov.w	r9, #3
    16da:	ldr	r0, [pc, #200]	; (17a4 <loop+0x1310>)
    16dc:	strb.w	r9, [r3]
    16e0:	bl	1a88 <usb_serial_write>
    16e4:	ldr	r0, [pc, #184]	; (17a0 <loop+0x130c>)
    16e6:	bl	35fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    16ea:	ldr	r3, [r7, #28]
    16ec:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16ee:	ldrb.w	sl, [r5]
    16f2:	mov	r0, sl
    16f4:	bl	20a4 <digitalRead>
    16f8:	clz	r1, r0
    16fc:	lsrs	r1, r1, #5
    16fe:	mov	r0, sl
    1700:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1704:	ldr.w	r3, [r8]
    1708:	str	r3, [sp, #108]	; 0x6c
	return ret;
    170a:	ldr	r3, [sp, #108]	; 0x6c
    170c:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    170e:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1712:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1716:	str	r3, [r5, #8]
    1718:	b.w	56c <loop+0xd8>
    171c:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    171e:	mov.w	r9, #3
    1722:	ldr	r0, [pc, #128]	; (17a4 <loop+0x1310>)
    1724:	strb.w	r9, [r3]
    1728:	bl	1a88 <usb_serial_write>
    172c:	ldr	r0, [pc, #112]	; (17a0 <loop+0x130c>)
    172e:	bl	35fc <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1732:	ldr	r3, [r7, #28]
    1734:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1736:	ldrb.w	sl, [r6]
    173a:	mov	r0, sl
    173c:	bl	20a4 <digitalRead>
    1740:	clz	r1, r0
    1744:	lsrs	r1, r1, #5
    1746:	mov	r0, sl
    1748:	bl	2098 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    174c:	ldr.w	r3, [r8]
    1750:	str	r3, [sp, #128]	; 0x80
	return ret;
    1752:	ldr	r3, [sp, #128]	; 0x80
    1754:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1756:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    175a:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    175e:	str	r3, [r6, #8]
    1760:	b.w	5ae <loop+0x11a>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1764:	add.w	r7, r3, #10
    1768:	adds	r3, #14
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    176a:	ldr.w	r2, [r6, r7, lsl #2]
    176e:	ldr.w	r3, [r6, r3, lsl #2]
    1772:	lsls	r0, r2, #16
    1774:	lsls	r3, r3, #24
    1776:	and.w	r3, r3, #2130706432	; 0x7f000000
    177a:	and.w	r0, r0, #8323072	; 0x7f0000
    177e:	orrs	r0, r3
    1780:	orr.w	r0, r0, #40704	; 0x9f00
    1784:	orr.w	r0, r0, #9
    1788:	bl	2324 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    178c:	bl	23c0 <usb_midi_flush_output>
      activeNote = notes[step];
    1790:	ldr.w	r2, [r6, r7, lsl #2]
    1794:	ldr	r3, [r6, #8]
    1796:	str	r2, [r6, #36]	; 0x24
    1798:	b.n	126e <loop+0xdda>
    179a:	nop
    179c:	.word	0x000049fc
    17a0:	.word	0x1fff0c60
    17a4:	.word	0x00004a08

000017a8 <_GLOBAL__sub_I_currentMode>:
    17a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;
const int playPin = 12;

Led led1(3, LOW);
    17ac:	movs	r2, #0
    17ae:	movs	r1, #3
    17b0:	ldr	r0, [pc, #440]	; (196c <_GLOBAL__sub_I_currentMode+0x1c4>)
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
    17b2:	ldr	r4, [pc, #444]	; (1970 <_GLOBAL__sub_I_currentMode+0x1c8>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    17b4:	ldr	r5, [pc, #444]	; (1974 <_GLOBAL__sub_I_currentMode+0x1cc>)
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    17b6:	ldr	r6, [pc, #448]	; (1978 <_GLOBAL__sub_I_currentMode+0x1d0>)
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
    17b8:	ldr.w	r9, [pc, #508]	; 19b8 <_GLOBAL__sub_I_currentMode+0x210>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    17bc:	ldr	r7, [pc, #444]	; (197c <_GLOBAL__sub_I_currentMode+0x1d4>)
    17be:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    17c2:	movs	r2, #0
    17c4:	movs	r1, #5
    17c6:	ldr	r0, [pc, #440]	; (1980 <_GLOBAL__sub_I_currentMode+0x1d8>)
    17c8:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    17cc:	movs	r2, #0
    17ce:	movs	r1, #7
    17d0:	ldr	r0, [pc, #432]	; (1984 <_GLOBAL__sub_I_currentMode+0x1dc>)
    17d2:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    17d6:	movs	r2, #0
    17d8:	movs	r1, #9
    17da:	ldr	r0, [pc, #428]	; (1988 <_GLOBAL__sub_I_currentMode+0x1e0>)
    17dc:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    17e0:	movs	r2, #0
    17e2:	movs	r1, #11
    17e4:	ldr	r0, [pc, #420]	; (198c <_GLOBAL__sub_I_currentMode+0x1e4>)
    17e6:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    17ea:	movs	r2, #0
    17ec:	movs	r1, #24
    17ee:	ldr	r0, [pc, #416]	; (1990 <_GLOBAL__sub_I_currentMode+0x1e8>)
    17f0:	bl	46c <Led::Led(int, int)>
    17f4:	ldmia.w	r4, {r0, r1, r2, r3}
    17f8:	add.w	lr, r4, #16
    17fc:	add.w	ip, r5, #40	; 0x28
    1800:	stmia.w	ip, {r0, r1, r2, r3}
    1804:	ldmia.w	lr, {r0, r1, r2, r3}
    1808:	adds	r4, #32
    180a:	add.w	lr, r5, #56	; 0x38
    180e:	stmia.w	lr, {r0, r1, r2, r3}
    1812:	ldmia.w	r4, {r0, r1, r2, r3}
    1816:	movs	r4, #120	; 0x78
    1818:	add.w	lr, r5, #72	; 0x48
    181c:	mov.w	ip, #24
    1820:	mov.w	r8, #0
    1824:	str	r4, [r5, #12]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1826:	movs	r4, #0
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
    1828:	str.w	ip, [r5, #32]
    182c:	strd	r8, r9, [r5, #16]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1830:	strb	r4, [r5, #0]
    1832:	strb	r4, [r5, #1]
    1834:	strb	r4, [r5, #2]
    1836:	strb	r4, [r5, #3]
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
    1838:	str	r4, [r5, #24]
    183a:	str	r4, [r5, #28]
    183c:	str	r4, [r5, #36]	; 0x24
    183e:	stmia.w	lr, {r0, r1, r2, r3}
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    1842:	adds	r0, r6, #4
    1844:	ldmia	r0, {r0, r1, r2}
      m_id = id;
      m_pin = pin;
    1846:	mov.w	r8, #2
    184a:	str	r2, [r5, #100]	; 0x64
      m_leds[4] = leds[4];
    184c:	ldr	r2, [r6, #16]
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    184e:	ldr	r3, [r6, #0]
      m_leds[1] = leds[1];
    1850:	str	r0, [r5, #92]	; 0x5c
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1852:	mov.w	r9, #1
      m_leds[2] = leds[2];
    1856:	str	r1, [r5, #96]	; 0x60
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1858:	mov	r0, r8
    185a:	mov	r1, r4
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    185c:	str	r2, [r5, #104]	; 0x68
      m_leds[5] = leds[5];
    185e:	ldr	r2, [r6, #20]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1860:	str	r3, [r7, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1862:	strb	r4, [r7, #16]
      m_playButton = playButton;
    1864:	strb	r4, [r7, #17]
      m_mode = GLOBAL;
    1866:	strb.w	r4, [r7, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    186a:	mov.w	fp, #4
      m_state = state;
    186e:	strb	r4, [r5, #4]
      m_currentStep = 0;
    1870:	str	r4, [r5, #8]
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1872:	str	r2, [r5, #108]	; 0x6c
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1874:	str	r3, [r5, #88]	; 0x58
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1876:	str	r5, [r7, #28]
      m_id = id;
    1878:	str.w	r9, [r7]
      m_pin = pin;
    187c:	str.w	r8, [r7, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1880:	bl	20c0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1884:	ldr	r3, [pc, #268]	; (1994 <_GLOBAL__sub_I_currentMode+0x1ec>)
    1886:	ldr	r2, [r6, #4]
    1888:	str	r2, [r3, #24]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    188a:	mov	r1, r4
    188c:	mov	r0, fp
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    188e:	strb	r4, [r3, #16]
      m_playButton = playButton;
    1890:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    1892:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1896:	mov.w	sl, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    189a:	str	r5, [r3, #28]
      m_id = id;
    189c:	str.w	r8, [r3]
      m_pin = pin;
    18a0:	str.w	fp, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    18a4:	bl	20c0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    18a8:	ldr	r3, [pc, #236]	; (1998 <_GLOBAL__sub_I_currentMode+0x1f0>)
    18aa:	ldr	r2, [r6, #8]
    18ac:	str	r2, [r3, #24]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    18ae:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    18b0:	movs	r7, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    18b2:	mov	r0, sl
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    18b4:	strb	r4, [r3, #16]
      m_playButton = playButton;
    18b6:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    18b8:	strb.w	r4, [r3, #36]	; 0x24
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    18bc:	str	r5, [r3, #28]
      m_id = id;
    18be:	str	r7, [r3, #0]
      m_pin = pin;
    18c0:	str.w	sl, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    18c4:	bl	20c0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    18c8:	ldr	r3, [pc, #208]	; (199c <_GLOBAL__sub_I_currentMode+0x1f4>)
    18ca:	ldr	r1, [r6, #12]
    18cc:	str	r1, [r3, #24]
      m_id = id;
      m_pin = pin;
    18ce:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    18d0:	mov	r0, r2
    18d2:	mov	r1, r4
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    18d4:	strb	r4, [r3, #16]
      m_playButton = playButton;
    18d6:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    18d8:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    18dc:	str	r2, [r3, #32]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    18de:	str.w	fp, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    18e2:	str	r5, [r3, #28]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    18e4:	bl	20c0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    18e8:	ldr	r3, [pc, #180]	; (19a0 <_GLOBAL__sub_I_currentMode+0x1f8>)
    18ea:	ldr	r2, [r6, #16]
    18ec:	str	r2, [r3, #24]
      m_id = id;
    18ee:	movs	r1, #5
      m_pin = pin;
    18f0:	movs	r2, #10
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    18f2:	mov	r0, r2
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    18f4:	str	r1, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    18f6:	mov	r1, r4
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    18f8:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    18fa:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    18fe:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1900:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1902:	strb.w	r9, [r3, #16]
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1906:	bl	20c0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    190a:	ldr	r3, [pc, #152]	; (19a4 <_GLOBAL__sub_I_currentMode+0x1fc>)
    190c:	ldr	r2, [r6, #20]
    190e:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1910:	movs	r6, #12
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1912:	mov	r0, r6
    1914:	mov	r1, r4
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1916:	strb	r4, [r3, #16]
      m_playButton = playButton;
      m_mode = GLOBAL;
    1918:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    191c:	str	r6, [r3, #32]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    191e:	str.w	sl, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1922:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1924:	strb.w	r9, [r3, #17]
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1928:	bl	20c0 <pinMode>
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    192c:	ldr	r0, [pc, #120]	; (19a8 <_GLOBAL__sub_I_currentMode+0x200>)
    192e:	ldr	r1, [pc, #124]	; (19ac <_GLOBAL__sub_I_currentMode+0x204>)
    1930:	ldr	r2, [pc, #124]	; (19b0 <_GLOBAL__sub_I_currentMode+0x208>)
    1932:	ldr	r3, [pc, #128]	; (19b4 <_GLOBAL__sub_I_currentMode+0x20c>)
      m_pin = pin;
      m_knobType = knobType;
    1934:	strb	r4, [r0, #20]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1936:	mov.w	lr, #14
      m_knobType = knobType;
      m_id = id;
    193a:	str	r4, [r0, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    193c:	str	r5, [r0, #16]
      m_pin = pin;
    193e:	movs	r6, #15
    1940:	movs	r4, #16
    1942:	strb.w	lr, [r0]
    1946:	movs	r0, #17
    1948:	strb	r6, [r1, #0]
    194a:	strb	r4, [r2, #0]
    194c:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    194e:	str	r5, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1950:	strb.w	r9, [r1, #20]
      m_id = id;
    1954:	str.w	r9, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1958:	str	r5, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    195a:	strb.w	r8, [r2, #20]
      m_id = id;
    195e:	str.w	r8, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1962:	str	r5, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1964:	strb	r7, [r3, #20]
      m_id = id;
    1966:	str	r7, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1968:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    196c:	.word	0x1fff162c
    1970:	.word	0x0000499c
    1974:	.word	0x1fff1738
    1978:	.word	0x1fff0c40
    197c:	.word	0x1fff16c0
    1980:	.word	0x1fff15cc
    1984:	.word	0x1fff15e4
    1988:	.word	0x1fff15fc
    198c:	.word	0x1fff1614
    1990:	.word	0x1fff1690
    1994:	.word	0x1fff16e8
    1998:	.word	0x1fff1710
    199c:	.word	0x1fff17f8
    19a0:	.word	0x1fff17a8
    19a4:	.word	0x1fff17d0
    19a8:	.word	0x1fff16a8
    19ac:	.word	0x1fff1644
    19b0:	.word	0x1fff1660
    19b4:	.word	0x1fff1678
    19b8:	.word	0x407f4000

000019bc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    19bc:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    19be:	ldr	r5, [pc, #60]	; (19fc <usb_serial_getchar+0x40>)
    19c0:	ldr	r0, [r5, #0]
    19c2:	cbz	r0, 19e4 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    19c4:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    19c6:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    19c8:	adds	r1, r0, r3
    19ca:	adds	r3, #1
	if (i >= rx_packet->len) {
    19cc:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    19ce:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    19d0:	bcs.n	19d8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    19d2:	strh	r3, [r0, #2]
	}
	return c;
    19d4:	mov	r0, r4
}
    19d6:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    19d8:	bl	2868 <usb_free>
		rx_packet = NULL;
    19dc:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    19de:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    19e0:	str	r3, [r5, #0]
    19e2:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    19e4:	ldr	r3, [pc, #24]	; (1a00 <usb_serial_getchar+0x44>)
    19e6:	ldrb	r3, [r3, #0]
    19e8:	cbz	r3, 19f6 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    19ea:	movs	r0, #2
    19ec:	bl	28b4 <usb_rx>
    19f0:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    19f2:	cmp	r0, #0
    19f4:	bne.n	19c4 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    19f6:	mov.w	r0, #4294967295
    19fa:	pop	{r3, r4, r5, pc}
    19fc:	.word	0x1fff182c
    1a00:	.word	0x1fff198c

00001a04 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1a04:	push	{r4, lr}
	if (!rx_packet) {
    1a06:	ldr	r4, [pc, #36]	; (1a2c <usb_serial_peekchar+0x28>)
    1a08:	ldr	r0, [r4, #0]
    1a0a:	cbz	r0, 1a14 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1a0c:	ldrh	r3, [r0, #2]
    1a0e:	add	r0, r3
    1a10:	ldrb	r0, [r0, #8]
}
    1a12:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1a14:	ldr	r3, [pc, #24]	; (1a30 <usb_serial_peekchar+0x2c>)
    1a16:	ldrb	r3, [r3, #0]
    1a18:	cbz	r3, 1a26 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1a1a:	movs	r0, #2
    1a1c:	bl	28b4 <usb_rx>
    1a20:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1a22:	cmp	r0, #0
    1a24:	bne.n	1a0c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1a26:	mov.w	r0, #4294967295
    1a2a:	pop	{r4, pc}
    1a2c:	.word	0x1fff182c
    1a30:	.word	0x1fff198c

00001a34 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1a34:	ldr	r3, [pc, #16]	; (1a48 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1a36:	ldr	r2, [pc, #20]	; (1a4c <usb_serial_available+0x18>)
    1a38:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1a3a:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1a3c:	cbz	r3, 1a46 <usb_serial_available+0x12>
    1a3e:	ldrh	r2, [r3, #0]
    1a40:	ldrh	r3, [r3, #2]
    1a42:	subs	r3, r2, r3
    1a44:	add	r0, r3
	return count;
}
    1a46:	bx	lr
    1a48:	.word	0x1fff182c
    1a4c:	.word	0x1fff1e20

00001a50 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1a50:	ldr	r3, [pc, #44]	; (1a80 <usb_serial_flush_input+0x30>)
    1a52:	ldrb	r3, [r3, #0]
    1a54:	cbz	r3, 1a7e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1a56:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1a58:	ldr	r4, [pc, #40]	; (1a84 <usb_serial_flush_input+0x34>)
    1a5a:	ldr	r0, [r4, #0]
    1a5c:	cbz	r0, 1a72 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1a5e:	bl	2868 <usb_free>
		rx_packet = NULL;
    1a62:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1a64:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1a66:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1a68:	bl	28b4 <usb_rx>
		if (!rx) break;
    1a6c:	cbz	r0, 1a7c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1a6e:	bl	2868 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1a72:	movs	r0, #2
    1a74:	bl	28b4 <usb_rx>
		if (!rx) break;
    1a78:	cmp	r0, #0
    1a7a:	bne.n	1a6e <usb_serial_flush_input+0x1e>
    1a7c:	pop	{r4, pc}
    1a7e:	bx	lr
    1a80:	.word	0x1fff198c
    1a84:	.word	0x1fff182c

00001a88 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1a88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1a8c:	ldr.w	r9, [pc, #248]	; 1b88 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1a90:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1a92:	movs	r2, #1
    1a94:	strb.w	r2, [r9]
	while (size > 0) {
    1a98:	str	r1, [sp, #4]
    1a9a:	cbz	r1, 1af8 <usb_serial_write+0x70>
    1a9c:	ldr.w	r8, [pc, #236]	; 1b8c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1aa0:	ldr	r7, [pc, #212]	; (1b78 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1aa2:	ldr	r6, [sp, #4]
    1aa4:	mov	fp, r0
		if (!tx_packet) {
    1aa6:	ldr.w	r0, [r8]
    1aaa:	cbz	r0, 1b1a <usb_serial_write+0x92>
    1aac:	ldr	r5, [pc, #204]	; (1b7c <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1aae:	ldrh	r4, [r0, #2]
    1ab0:	rsb	r1, r4, #64	; 0x40
    1ab4:	cmp	r1, r6
    1ab6:	it	cs
    1ab8:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1aba:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1abe:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1ac0:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1ac4:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1ac6:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1ac8:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1acc:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1ad0:	cbz	r1, 1ae8 <usb_serial_write+0x60>
    1ad2:	subs	r4, #1
    1ad4:	add	r2, r4
    1ad6:	add	r1, fp
    1ad8:	ldrb.w	r4, [fp], #1
    1adc:	strb.w	r4, [r2, #1]!
    1ae0:	cmp	fp, r1
    1ae2:	bne.n	1ad8 <usb_serial_write+0x50>
    1ae4:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1ae8:	cmp.w	lr, #63	; 0x3f
    1aec:	bhi.n	1b06 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1aee:	ldr	r2, [pc, #144]	; (1b80 <usb_serial_write+0xf8>)
    1af0:	movs	r1, #5
    1af2:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1af4:	cmp	r6, #0
    1af6:	bne.n	1aa6 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1af8:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1afa:	movs	r3, #0
    1afc:	strb.w	r3, [r9]
	return ret;
}
    1b00:	add	sp, #12
    1b02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1b06:	movs	r2, #64	; 0x40
    1b08:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1b0a:	mov	r1, r0
    1b0c:	movs	r0, #3
    1b0e:	bl	2a04 <usb_tx>
			tx_packet = NULL;
    1b12:	movs	r2, #0
    1b14:	str.w	r2, [r8]
    1b18:	b.n	1aee <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1b1a:	ldrb	r2, [r7, #0]
    1b1c:	cbz	r2, 1b68 <usb_serial_write+0xe0>
    1b1e:	ldr	r4, [pc, #100]	; (1b84 <usb_serial_write+0xfc>)
    1b20:	ldr	r5, [pc, #88]	; (1b7c <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1b22:	mov.w	sl, #1
    1b26:	b.n	1b38 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1b28:	subs	r4, #1
    1b2a:	beq.n	1b5a <usb_serial_write+0xd2>
    1b2c:	ldrb	r2, [r5, #0]
    1b2e:	cbnz	r2, 1b5a <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1b30:	bl	3508 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1b34:	ldrb	r2, [r7, #0]
    1b36:	cbz	r2, 1b68 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1b38:	movs	r0, #3
    1b3a:	bl	28f0 <usb_tx_packet_count>
    1b3e:	cmp	r0, #7
    1b40:	bhi.n	1b28 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1b42:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1b46:	bl	2828 <usb_malloc>
    1b4a:	str.w	r0, [r8]
					if (tx_packet) break;
    1b4e:	cmp	r0, #0
    1b50:	bne.n	1aae <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1b52:	ldr	r3, [pc, #52]	; (1b88 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1b54:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1b56:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1b58:	bne.n	1b2c <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1b5a:	movs	r3, #1
					return -1;
    1b5c:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1b60:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1b62:	add	sp, #12
    1b64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1b68:	movs	r3, #0
					return -1;
    1b6a:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1b6e:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1b72:	add	sp, #12
    1b74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b78:	.word	0x1fff198c
    1b7c:	.word	0x1fff1828
    1b80:	.word	0x1fff1820
    1b84:	.word	0x00014821
    1b88:	.word	0x1fff1821
    1b8c:	.word	0x1fff1824

00001b90 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1b90:	push	{lr}
    1b92:	sub	sp, #12
    1b94:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1b96:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1b98:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1b9c:	mov	r0, r3
    1b9e:	bl	1a88 <usb_serial_write>
}
    1ba2:	add	sp, #12
    1ba4:	ldr.w	pc, [sp], #4

00001ba8 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1ba8:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1baa:	ldr	r5, [pc, #56]	; (1be4 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1bac:	ldr	r4, [pc, #56]	; (1be8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1bae:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1bb0:	movs	r3, #1
    1bb2:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1bb4:	cbz	r0, 1bc2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1bb6:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1bb8:	movs	r3, #0
    1bba:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1bbc:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1bc0:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1bc2:	ldr	r3, [pc, #40]	; (1bec <usb_serial_write_buffer_free+0x44>)
    1bc4:	ldrb	r3, [r3, #0]
    1bc6:	cbnz	r3, 1bce <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1bc8:	movs	r0, #0
    1bca:	strb	r0, [r4, #0]
			return 0;
    1bcc:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1bce:	movs	r0, #3
    1bd0:	bl	28f0 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1bd4:	cmp	r0, #7
    1bd6:	bhi.n	1bc8 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1bd8:	bl	2828 <usb_malloc>
    1bdc:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1bde:	cmp	r0, #0
    1be0:	bne.n	1bb6 <usb_serial_write_buffer_free+0xe>
    1be2:	b.n	1bc8 <usb_serial_write_buffer_free+0x20>
    1be4:	.word	0x1fff1824
    1be8:	.word	0x1fff1821
    1bec:	.word	0x1fff198c

00001bf0 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1bf0:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1bf2:	ldr	r3, [pc, #68]	; (1c38 <usb_serial_flush_output+0x48>)
    1bf4:	ldrb	r3, [r3, #0]
    1bf6:	cbz	r3, 1c1c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1bf8:	ldr	r6, [pc, #64]	; (1c3c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1bfa:	ldr	r5, [pc, #68]	; (1c40 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1bfc:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1bfe:	movs	r7, #1
    1c00:	strb	r7, [r5, #0]
	if (tx_packet) {
    1c02:	cbz	r4, 1c1e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1c04:	ldr	r2, [pc, #60]	; (1c44 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1c06:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1c08:	movs	r7, #0
    1c0a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1c0c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1c0e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1c10:	movs	r0, #3
    1c12:	bl	2a04 <usb_tx>
		tx_packet = NULL;
    1c16:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1c18:	movs	r3, #0
    1c1a:	strb	r3, [r5, #0]
    1c1c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1c1e:	bl	2828 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1c22:	ldr	r3, [pc, #32]	; (1c44 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1c24:	cbz	r0, 1c32 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1c26:	mov	r1, r0
    1c28:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1c2a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1c2c:	bl	2a04 <usb_tx>
    1c30:	b.n	1c18 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1c32:	strb	r7, [r3, #0]
    1c34:	b.n	1c18 <usb_serial_flush_output+0x28>
    1c36:	nop
    1c38:	.word	0x1fff198c
    1c3c:	.word	0x1fff1824
    1c40:	.word	0x1fff1821
    1c44:	.word	0x1fff1820

00001c48 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1c48:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1c4a:	ldr	r3, [pc, #56]	; (1c84 <usb_serial_flush_callback+0x3c>)
    1c4c:	ldrb	r3, [r3, #0]
    1c4e:	cbnz	r3, 1c6e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1c50:	ldr	r4, [pc, #52]	; (1c88 <usb_serial_flush_callback+0x40>)
    1c52:	ldr	r1, [r4, #0]
    1c54:	cbz	r1, 1c70 <usb_serial_flush_callback+0x28>
    1c56:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1c5a:	ldrh	r3, [r1, #2]
    1c5c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1c5e:	movs	r0, #3
    1c60:	bl	2a04 <usb_tx>
		tx_packet = NULL;
    1c64:	str	r5, [r4, #0]
    1c66:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1c68:	ldr	r3, [pc, #32]	; (1c8c <usb_serial_flush_callback+0x44>)
    1c6a:	movs	r2, #1
    1c6c:	strb	r2, [r3, #0]
    1c6e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1c70:	bl	2828 <usb_malloc>
		if (tx) {
    1c74:	cmp	r0, #0
    1c76:	beq.n	1c68 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1c78:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1c7a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1c7e:	movs	r0, #3
    1c80:	b.w	2a04 <usb_tx>
    1c84:	.word	0x1fff1821
    1c88:	.word	0x1fff1824
    1c8c:	.word	0x1fff1820

00001c90 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1c90:	ldr	r2, [pc, #220]	; (1d70 <wait_for_cal+0xe0>)
    1c92:	ldr	r1, [pc, #224]	; (1d74 <wait_for_cal+0xe4>)
    1c94:	ldr	r3, [r2, #0]
    1c96:	lsls	r3, r3, #24
    1c98:	bmi.n	1c94 <wait_for_cal+0x4>
    1c9a:	ldr	r3, [r1, #0]
    1c9c:	ands.w	r3, r3, #128	; 0x80
    1ca0:	bne.n	1c94 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1ca2:	cpsid	i
	if (calibrating) {
    1ca4:	ldr	r1, [pc, #208]	; (1d78 <wait_for_cal+0xe8>)
    1ca6:	ldrb	r2, [r1, #0]
    1ca8:	cmp	r2, #0
    1caa:	beq.n	1d6c <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1cac:	ldr	r2, [pc, #204]	; (1d7c <wait_for_cal+0xec>)
    1cae:	ldr	r0, [pc, #208]	; (1d80 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1cb0:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1cb2:	ldr	r4, [pc, #208]	; (1d84 <wait_for_cal+0xf4>)
    1cb4:	ldr	r7, [r2, #0]
    1cb6:	ldr	r6, [r0, #0]
    1cb8:	ldr	r5, [r4, #0]
    1cba:	ldr	r4, [r2, #12]
    1cbc:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1cbe:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1cc0:	adds	r2, #20
    1cc2:	ldr	r0, [r0, #0]
    1cc4:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1cc6:	ldr	r7, [pc, #192]	; (1d88 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1cc8:	add	r5, r6
    1cca:	add	r4, r5
    1ccc:	add	r0, r4
    1cce:	add	r2, r0
    1cd0:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1cd4:	ldr	r6, [pc, #180]	; (1d8c <wait_for_cal+0xfc>)
    1cd6:	ldr	r0, [pc, #184]	; (1d90 <wait_for_cal+0x100>)
    1cd8:	ldr	r5, [pc, #184]	; (1d94 <wait_for_cal+0x104>)
    1cda:	ldr	r4, [pc, #188]	; (1d98 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1cdc:	orr.w	r2, r2, #32768	; 0x8000
    1ce0:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1ce2:	ldr	r7, [r6, #0]
    1ce4:	ldr	r6, [r0, #0]
    1ce6:	ldr	r5, [r5, #0]
    1ce8:	ldr	r2, [pc, #176]	; (1d9c <wait_for_cal+0x10c>)
    1cea:	ldr	r4, [r4, #0]
    1cec:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1cee:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1cf0:	ldr	r0, [r0, #0]
    1cf2:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1cf4:	ldr	r7, [pc, #168]	; (1da0 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1cf6:	add	r5, r6
    1cf8:	add	r4, r5
    1cfa:	add	r0, r4
    1cfc:	add	r2, r0
    1cfe:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1d02:	ldr	r6, [pc, #160]	; (1da4 <wait_for_cal+0x114>)
    1d04:	ldr	r0, [pc, #160]	; (1da8 <wait_for_cal+0x118>)
    1d06:	ldr	r5, [pc, #164]	; (1dac <wait_for_cal+0x11c>)
    1d08:	ldr	r4, [pc, #164]	; (1db0 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1d0a:	orr.w	r2, r2, #32768	; 0x8000
    1d0e:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1d10:	ldr	r7, [r6, #0]
    1d12:	ldr	r6, [r0, #0]
    1d14:	ldr	r5, [r5, #0]
    1d16:	ldr	r2, [pc, #156]	; (1db4 <wait_for_cal+0x124>)
    1d18:	ldr	r4, [r4, #0]
    1d1a:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1d1c:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1d1e:	ldr	r0, [r0, #0]
    1d20:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1d22:	ldr	r7, [pc, #148]	; (1db8 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1d24:	add	r5, r6
    1d26:	add	r4, r5
    1d28:	add	r0, r4
    1d2a:	add	r2, r0
    1d2c:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1d30:	ldr	r6, [pc, #136]	; (1dbc <wait_for_cal+0x12c>)
    1d32:	ldr	r0, [pc, #140]	; (1dc0 <wait_for_cal+0x130>)
    1d34:	ldr	r5, [pc, #140]	; (1dc4 <wait_for_cal+0x134>)
    1d36:	ldr	r4, [pc, #144]	; (1dc8 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1d38:	orr.w	r2, r2, #32768	; 0x8000
    1d3c:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1d3e:	ldr	r7, [r6, #0]
    1d40:	ldr	r6, [r0, #0]
    1d42:	ldr	r5, [r5, #0]
    1d44:	ldr	r2, [pc, #132]	; (1dcc <wait_for_cal+0x13c>)
    1d46:	ldr	r4, [r4, #0]
    1d48:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1d4a:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1d4c:	ldr	r0, [r0, #0]
    1d4e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1d50:	add	r5, r6
    1d52:	add	r4, r5
    1d54:	add	r0, r4
    1d56:	add	r2, r0
    1d58:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1d5c:	ldr	r0, [pc, #112]	; (1dd0 <wait_for_cal+0x140>)
    1d5e:	orr.w	r2, r2, #32768	; 0x8000
    1d62:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1d64:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1d66:	cpsie	i
}
    1d68:	pop	{r4, r5, r6, r7}
    1d6a:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1d6c:	cpsie	i
    1d6e:	bx	lr
    1d70:	.word	0x4003b024
    1d74:	.word	0x400bb024
    1d78:	.word	0x1fff1832
    1d7c:	.word	0x4003b038
    1d80:	.word	0x4003b03c
    1d84:	.word	0x4003b040
    1d88:	.word	0x4003b02c
    1d8c:	.word	0x4003b058
    1d90:	.word	0x4003b05c
    1d94:	.word	0x4003b060
    1d98:	.word	0x4003b064
    1d9c:	.word	0x4003b06c
    1da0:	.word	0x4003b030
    1da4:	.word	0x400bb038
    1da8:	.word	0x400bb03c
    1dac:	.word	0x400bb040
    1db0:	.word	0x400bb044
    1db4:	.word	0x400bb04c
    1db8:	.word	0x400bb02c
    1dbc:	.word	0x400bb058
    1dc0:	.word	0x400bb05c
    1dc4:	.word	0x400bb060
    1dc8:	.word	0x400bb064
    1dcc:	.word	0x400bb06c
    1dd0:	.word	0x400bb030

00001dd4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1dd4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1dd6:	ldr	r0, [pc, #164]	; (1e7c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1dd8:	ldr	r2, [pc, #164]	; (1e80 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1dda:	ldr	r3, [pc, #168]	; (1e84 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1ddc:	ldr	r5, [pc, #168]	; (1e88 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1dde:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1de0:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1de2:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1de4:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1de6:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1de8:	ldr	r4, [pc, #160]	; (1e8c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1dea:	cmp	r3, #8
    1dec:	beq.n	1e50 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1dee:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1df0:	ldr	r0, [pc, #156]	; (1e90 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1df2:	ldr	r1, [pc, #160]	; (1e94 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1df4:	beq.n	1e66 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1df6:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1df8:	ite	eq
    1dfa:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1dfc:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1dfe:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1e00:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1e02:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1e04:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1e06:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1e08:	ldr	r3, [pc, #140]	; (1e98 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1e0a:	ldr	r1, [pc, #144]	; (1e9c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1e0c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1e0e:	ldr	r2, [pc, #144]	; (1ea0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1e10:	cbz	r3, 1e42 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1e12:	movs	r3, #1
    1e14:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1e16:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1e18:	ldr	r3, [pc, #136]	; (1ea4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1e1a:	ldr	r1, [pc, #140]	; (1ea8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1e1c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1e1e:	ldr	r2, [pc, #140]	; (1eac <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1e20:	cmp	r3, #1
    1e22:	bls.n	1e72 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1e24:	cmp	r3, #4
    1e26:	bls.n	1e48 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1e28:	cmp	r3, #8
    1e2a:	bls.n	1e6a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1e2c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1e2e:	ite	ls
    1e30:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1e32:	movhi	r3, #135	; 0x87
    1e34:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1e36:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1e38:	ldr	r3, [pc, #116]	; (1eb0 <analog_init+0xdc>)
    1e3a:	movs	r2, #1
    1e3c:	strb	r2, [r3, #0]
}
    1e3e:	pop	{r4, r5}
    1e40:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1e42:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1e44:	str	r3, [r2, #0]
    1e46:	b.n	1e18 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1e48:	movs	r3, #132	; 0x84
    1e4a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1e4c:	str	r3, [r2, #0]
    1e4e:	b.n	1e38 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1e50:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1e54:	ldr	r1, [pc, #60]	; (1e94 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1e56:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1e58:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1e5a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1e5c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1e5e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1e60:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1e62:	str	r3, [r1, #0]
    1e64:	b.n	1e08 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1e66:	movs	r2, #57	; 0x39
    1e68:	b.n	1e5a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1e6a:	movs	r3, #133	; 0x85
    1e6c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1e6e:	str	r3, [r2, #0]
    1e70:	b.n	1e38 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1e72:	movs	r3, #128	; 0x80
    1e74:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1e76:	str	r3, [r2, #0]
    1e78:	b.n	1e38 <analog_init+0x64>
    1e7a:	nop
    1e7c:	.word	0x40074000
    1e80:	.word	0x40074001
    1e84:	.word	0x1fff0c58
    1e88:	.word	0x4003b008
    1e8c:	.word	0x4003b00c
    1e90:	.word	0x400bb008
    1e94:	.word	0x400bb00c
    1e98:	.word	0x1fff1835
    1e9c:	.word	0x4003b020
    1ea0:	.word	0x400bb020
    1ea4:	.word	0x1fff0c59
    1ea8:	.word	0x4003b024
    1eac:	.word	0x400bb024
    1eb0:	.word	0x1fff1832

00001eb4 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1eb4:	cmp	r0, #71	; 0x47
    1eb6:	bhi.n	1f18 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1eb8:	ldr	r3, [pc, #204]	; (1f88 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1eba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1ebe:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1ec0:	cmp	r6, #255	; 0xff
    1ec2:	beq.n	1f1c <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1ec4:	ldr	r3, [pc, #196]	; (1f8c <analogRead+0xd8>)
    1ec6:	ldrb	r3, [r3, #0]
    1ec8:	cmp	r3, #0
    1eca:	bne.n	1f22 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1ecc:	lsls	r2, r6, #24
    1ece:	bmi.n	1f2a <analogRead+0x76>
#endif

	__disable_irq();
    1ed0:	cpsid	i
    1ed2:	ldr	r5, [pc, #188]	; (1f90 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1ed4:	ldr	r4, [pc, #188]	; (1f94 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1ed6:	mov	r7, r5
    1ed8:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1eda:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1edc:	strb	r3, [r5, #0]
	__enable_irq();
    1ede:	cpsie	i
	while (1) {
		__disable_irq();
    1ee0:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1ee2:	ldr	r3, [r4, #0]
    1ee4:	lsls	r3, r3, #24
    1ee6:	bmi.n	1f02 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1ee8:	ldrb	r3, [r7, #0]
    1eea:	cbnz	r3, 1ef4 <analogRead+0x40>
    1eec:	b.n	1ed8 <analogRead+0x24>
    1eee:	ldrb	r3, [r5, #0]
    1ef0:	cmp	r3, #0
    1ef2:	beq.n	1ed8 <analogRead+0x24>
		__enable_irq();
    1ef4:	cpsie	i
		yield();
    1ef6:	bl	3508 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1efa:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1efc:	ldr	r3, [r4, #0]
    1efe:	lsls	r0, r3, #24
    1f00:	bpl.n	1eee <analogRead+0x3a>
			result = ADC0_RA;
    1f02:	ldr	r3, [pc, #148]	; (1f98 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1f04:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1f06:	movs	r2, #0
    1f08:	strb	r2, [r5, #0]
			__enable_irq();
    1f0a:	cpsie	i
			result >>= analog_right_shift;
    1f0c:	ldr	r2, [pc, #140]	; (1f9c <analogRead+0xe8>)
    1f0e:	ldrb	r0, [r2, #0]
    1f10:	asr.w	r0, r3, r0
			return result;
    1f14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1f18:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1f1a:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1f1c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1f1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1f22:	bl	1c90 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1f26:	lsls	r2, r6, #24
    1f28:	bpl.n	1ed0 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    1f2a:	cpsid	i
    1f2c:	ldr	r5, [pc, #112]	; (1fa0 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1f2e:	ldr.w	r8, [pc, #124]	; 1fac <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    1f32:	ldr	r4, [pc, #112]	; (1fa4 <analogRead+0xf0>)
    1f34:	and.w	r7, r6, #64	; 0x40
    1f38:	uxtb	r7, r7
    1f3a:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1f3e:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    1f42:	cbz	r7, 1f7c <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1f44:	bic.w	r3, r3, #16
    1f48:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    1f4c:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    1f4e:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    1f50:	ldr	r2, [pc, #76]	; (1fa0 <analogRead+0xec>)
    1f52:	strb	r3, [r5, #0]
	__enable_irq();
    1f54:	cpsie	i
	while (1) {
		__disable_irq();
    1f56:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1f58:	ldr	r3, [r4, #0]
    1f5a:	lsls	r1, r3, #24
    1f5c:	bmi.n	1f78 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    1f5e:	ldrb	r3, [r2, #0]
    1f60:	cbnz	r3, 1f6a <analogRead+0xb6>
    1f62:	b.n	1f3e <analogRead+0x8a>
    1f64:	ldrb	r3, [r5, #0]
    1f66:	cmp	r3, #0
    1f68:	beq.n	1f3e <analogRead+0x8a>
		__enable_irq();
    1f6a:	cpsie	i
		yield();
    1f6c:	bl	3508 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1f70:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1f72:	ldr	r3, [r4, #0]
    1f74:	lsls	r3, r3, #24
    1f76:	bpl.n	1f64 <analogRead+0xb0>
			result = ADC1_RA;
    1f78:	ldr	r3, [pc, #44]	; (1fa8 <analogRead+0xf4>)
    1f7a:	b.n	1f04 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1f7c:	orr.w	r3, r3, #16
    1f80:	str.w	r3, [r8]
    1f84:	b.n	1f4c <analogRead+0x98>
    1f86:	nop
    1f88:	.word	0x00004a2c
    1f8c:	.word	0x1fff1832
    1f90:	.word	0x1fff1834
    1f94:	.word	0x4003b000
    1f98:	.word	0x4003b010
    1f9c:	.word	0x1fff1831
    1fa0:	.word	0x1fff1833
    1fa4:	.word	0x400bb000
    1fa8:	.word	0x400bb010
    1fac:	.word	0x400bb00c

00001fb0 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1fb0:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1fb2:	ldr	r3, [pc, #68]	; (1ff8 <digitalWrite.part.1+0x48>)
    1fb4:	ldr.w	r2, [r3, r0, lsl #3]
    1fb8:	ldrb.w	r4, [r2, #640]	; 0x280
    1fbc:	cbz	r4, 1fcc <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1fbe:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1fc0:	cbz	r1, 1fe2 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1fc2:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1fc6:	ldr.w	r4, [sp], #4
    1fca:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1fcc:	add.w	r3, r3, r0, lsl #3
    1fd0:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1fd2:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1fd4:	cbnz	r1, 1fec <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1fd6:	bic.w	r2, r2, #2
    1fda:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1fdc:	ldr.w	r4, [sp], #4
    1fe0:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1fe2:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1fe6:	ldr.w	r4, [sp], #4
    1fea:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1fec:	orr.w	r2, r2, #3
    1ff0:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1ff2:	ldr.w	r4, [sp], #4
    1ff6:	bx	lr
    1ff8:	.word	0x00004a74

00001ffc <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1ffc:	ldr	r2, [pc, #112]	; (2070 <pinMode.part.2+0x74>)
    1ffe:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2002:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2004:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2006:	beq.n	202c <pinMode.part.2+0x30>
    2008:	cmp	r1, #4
    200a:	beq.n	2044 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    200c:	ldr.w	r0, [r2, r0, lsl #3]
    2010:	movs	r2, #0
    2012:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2016:	cbz	r1, 2024 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2018:	cmp	r1, #2
    201a:	beq.n	205e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    201c:	cmp	r1, #3
    201e:	beq.n	2066 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2020:	str	r2, [r3, #0]
    2022:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2024:	mov.w	r2, #256	; 0x100
    2028:	str	r2, [r3, #0]
    202a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    202c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2030:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2034:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2038:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    203a:	ldr	r2, [r3, #0]
    203c:	bic.w	r2, r2, #32
    2040:	str	r2, [r3, #0]
    2042:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2044:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2048:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    204c:	movs	r0, #1
    204e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2052:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2054:	ldr	r2, [r3, #0]
    2056:	orr.w	r2, r2, #32
    205a:	str	r2, [r3, #0]
    205c:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    205e:	movw	r2, #259	; 0x103
    2062:	str	r2, [r3, #0]
    2064:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2066:	mov.w	r2, #258	; 0x102
    206a:	str	r2, [r3, #0]
    206c:	bx	lr
    206e:	nop
    2070:	.word	0x00004a74

00002074 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2074:	push	{r4, r5}
	RTC_SR = 0;
    2076:	ldr	r3, [pc, #20]	; (208c <rtc_set+0x18>)
	RTC_TPR = 0;
    2078:	ldr	r5, [pc, #20]	; (2090 <rtc_set+0x1c>)
	RTC_TSR = t;
    207a:	ldr	r4, [pc, #24]	; (2094 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    207c:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    207e:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2080:	str	r2, [r3, #0]
	RTC_TPR = 0;
    2082:	str	r2, [r5, #0]
	RTC_TSR = t;
    2084:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2086:	str	r1, [r3, #0]
}
    2088:	pop	{r4, r5}
    208a:	bx	lr
    208c:	.word	0x4003d014
    2090:	.word	0x4003d004
    2094:	.word	0x4003d000

00002098 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2098:	cmp	r0, #63	; 0x3f
    209a:	bhi.n	20a0 <digitalWrite+0x8>
    209c:	b.w	1fb0 <digitalWrite.part.1>
    20a0:	bx	lr
    20a2:	nop

000020a4 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    20a4:	cmp	r0, #63	; 0x3f
    20a6:	bhi.n	20b6 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    20a8:	ldr	r3, [pc, #16]	; (20bc <digitalRead+0x18>)
    20aa:	ldr.w	r3, [r3, r0, lsl #3]
    20ae:	ldrb.w	r0, [r3, #512]	; 0x200
    20b2:	uxtb	r0, r0
    20b4:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    20b6:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    20b8:	bx	lr
    20ba:	nop
    20bc:	.word	0x00004a74

000020c0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    20c0:	cmp	r0, #63	; 0x3f
    20c2:	bhi.n	20c8 <pinMode+0x8>
    20c4:	b.w	1ffc <pinMode.part.2>
    20c8:	bx	lr
    20ca:	nop

000020cc <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    20cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    20d0:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    20d2:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    20d4:	ldr	r7, [pc, #136]	; (2160 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    20d6:	ldr	r3, [pc, #140]	; (2164 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    20d8:	ldr	r2, [pc, #140]	; (2168 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    20da:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    20dc:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    20de:	ldr	r2, [r2, #0]
	__enable_irq();
    20e0:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    20e2:	lsls	r2, r2, #5
    20e4:	bpl.n	20ec <delay+0x20>
    20e6:	cmp	r3, #50	; 0x32
    20e8:	it	hi
    20ea:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    20ec:	cbz	r5, 215c <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    20ee:	rsb	r3, r3, #179200	; 0x2bc00
    20f2:	addw	r3, r3, #799	; 0x31f
    20f6:	ldr	r6, [pc, #116]	; (216c <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    20f8:	ldr.w	r9, [pc, #104]	; 2164 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    20fc:	ldr.w	r8, [pc, #104]	; 2168 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2100:	lsrs	r3, r3, #2
    2102:	mov.w	r2, #1000	; 0x3e8
    2106:	umull	r1, r3, r6, r3
    210a:	mul.w	r4, r2, r4
    210e:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2112:	cpsid	i
	current = SYST_CVR;
    2114:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2118:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    211a:	ldr.w	lr, [r8]
	__enable_irq();
    211e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2120:	rsb	r3, r1, #179200	; 0x2bc00
    2124:	addw	r3, r3, #799	; 0x31f
    2128:	lsrs	r3, r3, #2
    212a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    212e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2132:	rsb	r3, r4, r3, lsr #2
    2136:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    213a:	beq.n	2142 <delay+0x76>
    213c:	cmp	r1, #50	; 0x32
    213e:	it	hi
    2140:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2142:	mla	r3, r0, r2, r3
    2146:	cmp.w	r3, #1000	; 0x3e8
    214a:	bcc.n	2156 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    214c:	subs	r5, #1
    214e:	beq.n	215c <delay+0x90>
				start += 1000;
    2150:	add.w	r4, r4, #1000	; 0x3e8
    2154:	b.n	2112 <delay+0x46>
			}
			yield();
    2156:	bl	3508 <yield>
		}
    215a:	b.n	2112 <delay+0x46>
    215c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2160:	.word	0x1fff1838
    2164:	.word	0xe000e018
    2168:	.word	0xe000ed04
    216c:	.word	0x16c16c17

00002170 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2170:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2172:	ldr	r3, [pc, #312]	; (22ac <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2174:	ldr	r0, [pc, #312]	; (22b0 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2176:	ldr.w	ip, [pc, #348]	; 22d4 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    217a:	ldr	r4, [pc, #312]	; (22b4 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    217c:	ldr	r1, [pc, #312]	; (22b8 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    217e:	ldr.w	lr, [pc, #344]	; 22d8 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2182:	ldr	r6, [pc, #312]	; (22bc <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2184:	ldr	r5, [pc, #312]	; (22c0 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2186:	ldr	r7, [pc, #316]	; (22c4 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2188:	mov.w	r2, #134217728	; 0x8000000
    218c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    218e:	mov.w	r2, #268435456	; 0x10000000
    2192:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2194:	mov.w	r2, #536870912	; 0x20000000
    2198:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    219a:	mov.w	r2, #1073741824	; 0x40000000
    219e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    21a0:	mov.w	r2, #2147483648	; 0x80000000
    21a4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    21a6:	movs	r2, #0
    21a8:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    21aa:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    21ac:	movw	r0, #61439	; 0xefff
    21b0:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    21b4:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    21b8:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    21ba:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    21be:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    21c0:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    21c2:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    21c4:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    21c8:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    21ca:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    21ce:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    21d0:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    21d4:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    21d6:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    21da:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    21de:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    21e2:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    21e6:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    21ea:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    21ec:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    21f0:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    21f2:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    21f4:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    21f6:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    21fa:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    21fc:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    21fe:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2200:	ldr	r4, [pc, #196]	; (22c8 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2202:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2204:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2206:	movs	r1, #9
    2208:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    220a:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    220e:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2212:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2214:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2216:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2218:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    221a:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    221c:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    221e:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2222:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2226:	add.w	r7, r7, #520192	; 0x7f000
    222a:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    222c:	addw	r4, r4, #2044	; 0x7fc
    2230:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2232:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2234:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2236:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2238:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    223c:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    223e:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2242:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2246:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2248:	sub.w	r4, r4, #460800	; 0x70800
    224c:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2250:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2252:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2254:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2258:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    225a:	ldr	r0, [pc, #112]	; (22cc <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    225c:	orr.w	r1, r1, #512	; 0x200
    2260:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2262:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2264:	ldr	r4, [pc, #104]	; (22d0 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2266:	add.w	lr, lr, #65280	; 0xff00
    226a:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    226e:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2272:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2276:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    227a:	orr.w	r1, r1, #33554432	; 0x2000000
    227e:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2280:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2284:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2288:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    228a:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    228c:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    228e:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2290:	str	r2, [r4, #0]
#endif
	analog_init();
    2292:	bl	1dd4 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2296:	movs	r0, #25
    2298:	bl	20cc <delay>
	usb_init();
    229c:	bl	3438 <usb_init>
	delay(275);
    22a0:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    22a4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    22a8:	b.w	20cc <delay>
    22ac:	.word	0xe000e104
    22b0:	.word	0x40038004
    22b4:	.word	0x40038014
    22b8:	.word	0x4003801c
    22bc:	.word	0x40038024
    22c0:	.word	0x4003802c
    22c4:	.word	0x40038034
    22c8:	.word	0x40038000
    22cc:	.word	0x40048004
    22d0:	.word	0x400c9000
    22d4:	.word	0x40038008
    22d8:	.word	0x4003800c

000022dc <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    22dc:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    22de:	ldr	r3, [pc, #56]	; (2318 <sysex_byte+0x3c>)
    22e0:	ldr	r4, [pc, #56]	; (231c <sysex_byte+0x40>)
    22e2:	ldr	r3, [r3, #0]
    22e4:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    22e6:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    22e8:	cbz	r3, 230e <sysex_byte+0x32>
    22ea:	cmp.w	r1, #290	; 0x122
    22ee:	bcs.n	22fc <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    22f0:	ldr	r2, [pc, #44]	; (2320 <sysex_byte+0x44>)
    22f2:	adds	r3, r1, #1
    22f4:	strb	r5, [r2, r1]
    22f6:	uxth	r3, r3
    22f8:	strh	r3, [r4, #0]
	}
}
    22fa:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    22fc:	movs	r2, #0
    22fe:	ldr	r0, [pc, #32]	; (2320 <sysex_byte+0x44>)
    2300:	blx	r3
    2302:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2304:	ldr	r2, [pc, #24]	; (2320 <sysex_byte+0x44>)
    2306:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2308:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    230a:	strh	r3, [r4, #0]
	}
}
    230c:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    230e:	cmp.w	r1, #290	; 0x122
    2312:	bcc.n	22f0 <sysex_byte+0x14>
    2314:	pop	{r3, r4, r5, pc}
    2316:	nop
    2318:	.word	0x1fff1860
    231c:	.word	0x1fff1cf6
    2320:	.word	0x1fff1cfc

00002324 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2324:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2328:	ldr	r6, [pc, #132]	; (23b0 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    232a:	ldr	r7, [pc, #136]	; (23b4 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    232c:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    232e:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2330:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2332:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2334:	cbz	r1, 2364 <usb_midi_write_packed+0x40>
    2336:	ldr	r5, [pc, #128]	; (23b8 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2338:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    233a:	add.w	r2, r1, r3, lsl #2
    233e:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2340:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2342:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2344:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2348:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    234a:	bhi.n	2356 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    234c:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    234e:	movs	r3, #0
    2350:	strb	r3, [r7, #0]
    2352:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2356:	movs	r3, #64	; 0x40
    2358:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    235a:	movs	r0, #4
    235c:	bl	2a04 <usb_tx>
		tx_packet = NULL;
    2360:	str	r4, [r6, #0]
    2362:	b.n	234e <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2364:	ldr.w	r9, [pc, #84]	; 23bc <usb_midi_write_packed+0x98>
    2368:	ldrb.w	r3, [r9]
    236c:	cmp	r3, #0
    236e:	beq.n	2352 <usb_midi_write_packed+0x2e>
    2370:	ldr	r5, [pc, #68]	; (23b8 <usb_midi_write_packed+0x94>)
    2372:	movw	r4, #48001	; 0xbb81
    2376:	b.n	238a <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2378:	subs	r4, #1
    237a:	beq.n	23a2 <usb_midi_write_packed+0x7e>
    237c:	ldrb	r3, [r5, #0]
    237e:	cbnz	r3, 23a2 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    2380:	bl	3508 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2384:	ldrb.w	r3, [r9]
    2388:	cbz	r3, 23aa <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    238a:	movs	r0, #4
    238c:	bl	28f0 <usb_tx_packet_count>
    2390:	cmp	r0, #5
    2392:	bhi.n	2378 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2394:	bl	2828 <usb_malloc>
    2398:	mov	r1, r0
    239a:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    239c:	cmp	r0, #0
    239e:	beq.n	2378 <usb_midi_write_packed+0x54>
    23a0:	b.n	2338 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    23a2:	movs	r3, #1
    23a4:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    23a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    23aa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    23ae:	nop
    23b0:	.word	0x1fff187c
    23b4:	.word	0x1fff1850
    23b8:	.word	0x1fff1880
    23bc:	.word	0x1fff198c

000023c0 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    23c0:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    23c2:	ldr	r3, [pc, #32]	; (23e4 <usb_midi_flush_output+0x24>)
    23c4:	ldrb	r4, [r3, #0]
    23c6:	cbnz	r4, 23d2 <usb_midi_flush_output+0x12>
    23c8:	ldr	r5, [pc, #28]	; (23e8 <usb_midi_flush_output+0x28>)
    23ca:	ldr	r1, [r5, #0]
    23cc:	cbz	r1, 23d2 <usb_midi_flush_output+0x12>
    23ce:	ldrh	r3, [r1, #2]
    23d0:	cbnz	r3, 23d4 <usb_midi_flush_output+0x14>
    23d2:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    23d4:	lsls	r3, r3, #2
    23d6:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    23d8:	movs	r0, #4
    23da:	bl	2a04 <usb_tx>
		tx_packet = NULL;
    23de:	str	r4, [r5, #0]
    23e0:	pop	{r3, r4, r5, pc}
    23e2:	nop
    23e4:	.word	0x1fff1850
    23e8:	.word	0x1fff187c

000023ec <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    23ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    23f0:	ldr	r6, [pc, #692]	; (26a8 <usb_midi_read+0x2bc>)
    23f2:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    23f4:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    23f6:	cmp	r3, #0
    23f8:	beq.w	2520 <usb_midi_read+0x134>
    23fc:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    23fe:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2400:	lsrs	r1, r2, #2
    2402:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    2406:	adds	r2, #4
	if (index < rx_packet->len) {
    2408:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    240a:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    240c:	bcs.n	2494 <usb_midi_read+0xa8>
		rx_packet->index = index;
    240e:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2410:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2414:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2418:	ldr	r1, [pc, #656]	; (26ac <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    241a:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    241e:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    2422:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2426:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2428:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    242c:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    242e:	bls.n	2466 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2430:	subs	r3, r6, #2
    2432:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2434:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2438:	bls.n	24d8 <usb_midi_read+0xec>
    243a:	cmp	r6, #5
    243c:	beq.n	24d0 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    243e:	cmp	r6, #4
    2440:	beq.w	278c <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2444:	subs	r3, r6, #5
    2446:	cmp	r3, #2
    2448:	bls.n	254a <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    244a:	cmp	r6, #15
    244c:	bne.n	246c <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    244e:	cmp	r0, #247	; 0xf7
    2450:	bhi.n	24d8 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    2452:	cmp	r0, #240	; 0xf0
    2454:	beq.n	245c <usb_midi_read+0x70>
    2456:	ldr	r3, [pc, #600]	; (26b0 <usb_midi_read+0x2c4>)
    2458:	ldrh	r3, [r3, #0]
    245a:	cbz	r3, 246c <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    245c:	bl	22dc <sysex_byte>
		}
	}
	return 0;
    2460:	movs	r0, #0
    2462:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    2466:	cbz	r7, 2472 <usb_midi_read+0x86>
    2468:	cmp	r5, r7
    246a:	beq.n	2472 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    246c:	movs	r0, #0
    246e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2472:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2474:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2478:	beq.w	258a <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    247c:	cmp	r6, #9
    247e:	beq.n	24a4 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    2480:	cmp	r6, #10
    2482:	bne.w	25ae <usb_midi_read+0x1c2>
    2486:	cmp	r3, #10
    2488:	bne.n	246c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    248a:	ldr	r3, [pc, #552]	; (26b4 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    248c:	ldr	r2, [pc, #552]	; (26b8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    248e:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2490:	movs	r1, #160	; 0xa0
    2492:	b.n	2598 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    2494:	mov	r0, r3
    2496:	bl	2868 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    249a:	movs	r0, #5
    249c:	bl	28b4 <usb_rx>
    24a0:	str	r0, [r6, #0]
    24a2:	b.n	2410 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    24a4:	cmp	r3, #9
    24a6:	bne.n	246c <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    24a8:	lsrs	r7, r4, #24
    24aa:	beq.w	27a4 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    24ae:	ldr	r3, [pc, #524]	; (26bc <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    24b0:	ldr	r2, [pc, #516]	; (26b8 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    24b2:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    24b4:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    24b6:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    24ba:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    24bc:	uxtb	r5, r5
    24be:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    24c0:	cmp	r3, #0
    24c2:	beq.w	2600 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    24c6:	mov	r2, r4
    24c8:	mov	r1, r6
    24ca:	mov	r0, r5
    24cc:	blx	r3
    24ce:	b.n	2600 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    24d0:	cmp	r0, #240	; 0xf0
    24d2:	bls.n	255c <usb_midi_read+0x170>
    24d4:	cmp	r0, #247	; 0xf7
    24d6:	beq.n	255c <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    24d8:	subs	r0, #241	; 0xf1
    24da:	cmp	r0, #14
    24dc:	bhi.n	246c <usb_midi_read+0x80>
    24de:	add	r3, pc, #4	; (adr r3, 24e4 <usb_midi_read+0xf8>)
    24e0:	ldr.w	pc, [r3, r0, lsl #2]
    24e4:	.word	0x0000269b
    24e8:	.word	0x0000267f
    24ec:	.word	0x0000266d
    24f0:	.word	0x0000246d
    24f4:	.word	0x0000246d
    24f8:	.word	0x0000265f
    24fc:	.word	0x0000246d
    2500:	.word	0x0000273f
    2504:	.word	0x0000246d
    2508:	.word	0x00002709
    250c:	.word	0x00002723
    2510:	.word	0x00002647
    2514:	.word	0x0000246d
    2518:	.word	0x0000262f
    251c:	.word	0x00002613
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2520:	ldr	r3, [pc, #412]	; (26c0 <usb_midi_read+0x2d4>)
    2522:	ldrb	r3, [r3, #0]
    2524:	cmp	r3, #0
    2526:	beq.n	246c <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2528:	movs	r0, #5
    252a:	bl	28b4 <usb_rx>
    252e:	mov	r3, r0
    2530:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    2532:	cmp	r0, #0
    2534:	beq.n	246c <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    2536:	ldrh	r5, [r0, #0]
    2538:	cmp	r5, #0
    253a:	bne.w	23fe <usb_midi_read+0x12>
			usb_free(rx_packet);
    253e:	bl	2868 <usb_free>
			rx_packet = NULL;
    2542:	str	r5, [r6, #0]
			return 0;
    2544:	mov	r0, r5
    2546:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    254a:	bl	22dc <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    254e:	ubfx	r0, r4, #16, #8
    2552:	bl	22dc <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    2556:	cmp	r6, #7
    2558:	bne.n	2560 <usb_midi_read+0x174>
    255a:	lsrs	r0, r4, #24
    255c:	bl	22dc <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    2560:	ldr	r3, [pc, #332]	; (26b0 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2562:	ldr	r2, [pc, #352]	; (26c4 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2564:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    2566:	ldr	r0, [pc, #352]	; (26c8 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2568:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    256a:	ldr	r5, [pc, #352]	; (26cc <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    256c:	ldr	r2, [pc, #328]	; (26b8 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    256e:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2570:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2572:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2574:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2576:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2578:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    257a:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    257c:	cbz	r4, 25c2 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    257e:	movs	r2, #1
    2580:	ldr	r0, [pc, #332]	; (26d0 <usb_midi_read+0x2e4>)
    2582:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2584:	movs	r0, #1
    2586:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    258a:	cmp	r3, #8
    258c:	bne.w	246c <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    2590:	ldr	r3, [pc, #320]	; (26d4 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2592:	ldr	r2, [pc, #292]	; (26b8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    2594:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2596:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2598:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    259c:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    259e:	uxtb	r5, r5
    25a0:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    25a2:	cbz	r3, 2600 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    25a4:	mov	r0, r5
    25a6:	mov	r2, r4
    25a8:	mov	r1, r6
    25aa:	blx	r3
    25ac:	b.n	2600 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    25ae:	cmp	r6, #11
    25b0:	bne.n	25d6 <usb_midi_read+0x1ea>
    25b2:	cmp	r3, #11
    25b4:	bne.w	246c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    25b8:	ldr	r3, [pc, #284]	; (26d8 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    25ba:	ldr	r2, [pc, #252]	; (26b8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    25bc:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    25be:	movs	r1, #176	; 0xb0
    25c0:	b.n	2598 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    25c2:	ldr	r3, [pc, #280]	; (26dc <usb_midi_read+0x2f0>)
    25c4:	ldr	r3, [r3, #0]
    25c6:	cmp	r3, #0
    25c8:	beq.w	27c2 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    25cc:	ldr	r0, [pc, #256]	; (26d0 <usb_midi_read+0x2e4>)
    25ce:	blx	r3
		}
		return 1;
    25d0:	movs	r0, #1
    25d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    25d6:	cmp	r6, #12
    25d8:	bne.w	27dc <usb_midi_read+0x3f0>
    25dc:	cmp	r3, #12
    25de:	bne.w	246c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    25e2:	ldr	r3, [pc, #252]	; (26e0 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    25e4:	ldr	r2, [pc, #208]	; (26b8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    25e6:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    25e8:	movs	r1, #192	; 0xc0
    25ea:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    25ec:	uxtb	r5, r5
    25ee:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    25f2:	cmp	r3, #0
    25f4:	beq.w	2788 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    25f8:	mov	r0, r5
    25fa:	mov	r1, r6
    25fc:	lsrs	r4, r4, #24
    25fe:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2600:	ldr	r1, [pc, #224]	; (26e4 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2602:	ldr	r2, [pc, #196]	; (26c8 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2604:	ldr	r3, [pc, #196]	; (26cc <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2606:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2608:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    260a:	strb	r4, [r3, #0]
		return 1;
    260c:	movs	r0, #1
    260e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2612:	ldr	r3, [pc, #212]	; (26e8 <usb_midi_read+0x2fc>)
    2614:	ldr	r3, [r3, #0]
    2616:	cmp	r3, #0
    2618:	beq.w	27c8 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    261c:	blx	r3
    261e:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2622:	ldr	r3, [pc, #148]	; (26b8 <usb_midi_read+0x2cc>)
    2624:	uxtb	r5, r5
    2626:	lsrs	r4, r4, #24
    2628:	strb.w	r8, [r3]
		goto return_message;
    262c:	b.n	2600 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    262e:	ldr	r3, [pc, #188]	; (26ec <usb_midi_read+0x300>)
    2630:	ldr	r3, [r3, #0]
    2632:	cmp	r3, #0
    2634:	bne.n	261c <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2636:	ldr	r3, [pc, #184]	; (26f0 <usb_midi_read+0x304>)
    2638:	ldr	r3, [r3, #0]
    263a:	cbz	r3, 2666 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    263c:	movs	r0, #254	; 0xfe
    263e:	blx	r3
    2640:	ubfx	r6, r4, #16, #8
    2644:	b.n	2622 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2646:	ldr	r3, [pc, #172]	; (26f4 <usb_midi_read+0x308>)
    2648:	ldr	r3, [r3, #0]
    264a:	cmp	r3, #0
    264c:	bne.n	261c <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    264e:	ldr	r3, [pc, #160]	; (26f0 <usb_midi_read+0x304>)
    2650:	ldr	r3, [r3, #0]
    2652:	cbz	r3, 2666 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2654:	movs	r0, #252	; 0xfc
    2656:	blx	r3
    2658:	ubfx	r6, r4, #16, #8
    265c:	b.n	2622 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    265e:	ldr	r3, [pc, #152]	; (26f8 <usb_midi_read+0x30c>)
    2660:	ldr	r3, [r3, #0]
    2662:	cmp	r3, #0
    2664:	bne.n	261c <usb_midi_read+0x230>
    2666:	ubfx	r6, r4, #16, #8
    266a:	b.n	2622 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    266c:	ldr	r3, [pc, #140]	; (26fc <usb_midi_read+0x310>)
    266e:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    2670:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2674:	cmp	r3, #0
    2676:	beq.n	2622 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2678:	mov	r0, r6
    267a:	blx	r3
    267c:	b.n	2622 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    267e:	ldr	r3, [pc, #128]	; (2700 <usb_midi_read+0x314>)
    2680:	ldr	r2, [r3, #0]
    2682:	cmp	r2, #0
    2684:	beq.n	2666 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2686:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2688:	lsrs	r3, r4, #17
    268a:	and.w	r0, r6, #127	; 0x7f
    268e:	and.w	r3, r3, #16256	; 0x3f80
    2692:	orrs	r0, r3
    2694:	uxtb	r6, r6
    2696:	blx	r2
    2698:	b.n	2622 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    269a:	ldr	r3, [pc, #104]	; (2704 <usb_midi_read+0x318>)
    269c:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    269e:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    26a2:	cmp	r3, #0
    26a4:	bne.n	2678 <usb_midi_read+0x28c>
    26a6:	b.n	2622 <usb_midi_read+0x236>
    26a8:	.word	0x1fff1888
    26ac:	.word	0x1fff1cfa
    26b0:	.word	0x1fff1cf6
    26b4:	.word	0x1fff1864
    26b8:	.word	0x1fff1cf4
    26bc:	.word	0x1fff1898
    26c0:	.word	0x1fff198c
    26c4:	.word	0x1fff1860
    26c8:	.word	0x1fff1cf8
    26cc:	.word	0x1fff1cf9
    26d0:	.word	0x1fff1cfc
    26d4:	.word	0x1fff1890
    26d8:	.word	0x1fff1894
    26dc:	.word	0x1fff1878
    26e0:	.word	0x1fff1854
    26e4:	.word	0x1fff1cfb
    26e8:	.word	0x1fff1840
    26ec:	.word	0x1fff1844
    26f0:	.word	0x1fff1848
    26f4:	.word	0x1fff1884
    26f8:	.word	0x1fff1874
    26fc:	.word	0x1fff188c
    2700:	.word	0x1fff185c
    2704:	.word	0x1fff1870
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2708:	ldr	r3, [pc, #252]	; (2808 <usb_midi_read+0x41c>)
    270a:	ldr	r3, [r3, #0]
    270c:	cmp	r3, #0
    270e:	bne.n	261c <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2710:	ldr	r3, [pc, #248]	; (280c <usb_midi_read+0x420>)
    2712:	ldr	r3, [r3, #0]
    2714:	cmp	r3, #0
    2716:	beq.n	2666 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2718:	movs	r0, #250	; 0xfa
    271a:	blx	r3
    271c:	ubfx	r6, r4, #16, #8
    2720:	b.n	2622 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2722:	ldr	r3, [pc, #236]	; (2810 <usb_midi_read+0x424>)
    2724:	ldr	r3, [r3, #0]
    2726:	cmp	r3, #0
    2728:	bne.w	261c <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    272c:	ldr	r3, [pc, #220]	; (280c <usb_midi_read+0x420>)
    272e:	ldr	r3, [r3, #0]
    2730:	cmp	r3, #0
    2732:	beq.n	2666 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2734:	movs	r0, #251	; 0xfb
    2736:	blx	r3
    2738:	ubfx	r6, r4, #16, #8
    273c:	b.n	2622 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    273e:	ldr	r3, [pc, #212]	; (2814 <usb_midi_read+0x428>)
    2740:	ldr	r3, [r3, #0]
    2742:	cmp	r3, #0
    2744:	bne.w	261c <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2748:	ldr	r3, [pc, #192]	; (280c <usb_midi_read+0x420>)
    274a:	ldr	r3, [r3, #0]
    274c:	cmp	r3, #0
    274e:	beq.n	2666 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2750:	movs	r0, #248	; 0xf8
    2752:	blx	r3
    2754:	ubfx	r6, r4, #16, #8
    2758:	b.n	2622 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    275a:	cmp	r3, #14
    275c:	bne.w	246c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2760:	ldr	r2, [pc, #180]	; (2818 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2762:	ldr	r3, [pc, #184]	; (281c <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2764:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2766:	movs	r1, #224	; 0xe0
    2768:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    276a:	cmp	r2, #0
    276c:	beq.n	27fe <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    276e:	lsrs	r6, r4, #16
    2770:	lsrs	r1, r4, #17
    2772:	and.w	r3, r6, #127	; 0x7f
    2776:	and.w	r1, r1, #16256	; 0x3f80
    277a:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    277c:	uxtb	r5, r5
    277e:	sub.w	r1, r1, #8192	; 0x2000
    2782:	mov	r0, r5
    2784:	blx	r2
    2786:	uxtb	r6, r6
    2788:	lsrs	r4, r4, #24
    278a:	b.n	2600 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    278c:	bl	22dc <sysex_byte>
		sysex_byte(n >> 16);
    2790:	ubfx	r0, r4, #16, #8
    2794:	bl	22dc <sysex_byte>
		sysex_byte(n >> 24);
    2798:	lsrs	r0, r4, #24
    279a:	bl	22dc <sysex_byte>
		return 0;
    279e:	movs	r0, #0
    27a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    27a4:	ldr	r3, [pc, #120]	; (2820 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    27a6:	ldr	r2, [pc, #116]	; (281c <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    27a8:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    27aa:	movs	r1, #128	; 0x80
    27ac:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    27ae:	uxtb	r5, r5
    27b0:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    27b4:	cbz	r3, 27d8 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    27b6:	mov	r1, r6
    27b8:	mov	r0, r5
    27ba:	mov	r2, r7
    27bc:	blx	r3
    27be:	mov	r4, r7
    27c0:	b.n	2600 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    27c2:	movs	r0, #1
    27c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    27c8:	ldr	r3, [pc, #64]	; (280c <usb_midi_read+0x420>)
    27ca:	ldr	r3, [r3, #0]
    27cc:	cmp	r3, #0
    27ce:	beq.w	2666 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    27d2:	movs	r0, #255	; 0xff
    27d4:	blx	r3
    27d6:	b.n	2666 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    27d8:	mov	r4, r3
    27da:	b.n	2600 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    27dc:	cmp	r6, #13
    27de:	bne.n	275a <usb_midi_read+0x36e>
    27e0:	cmp	r3, #13
    27e2:	bne.w	246c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    27e6:	ldr	r3, [pc, #60]	; (2824 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    27e8:	ldr	r2, [pc, #48]	; (281c <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    27ea:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    27ec:	movs	r1, #208	; 0xd0
    27ee:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    27f0:	uxtb	r5, r5
    27f2:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    27f6:	cmp	r3, #0
    27f8:	bne.w	25f8 <usb_midi_read+0x20c>
    27fc:	b.n	2788 <usb_midi_read+0x39c>
    27fe:	ubfx	r6, r4, #16, #8
    2802:	uxtb	r5, r5
    2804:	lsrs	r4, r4, #24
    2806:	b.n	2600 <usb_midi_read+0x214>
    2808:	.word	0x1fff186c
    280c:	.word	0x1fff1848
    2810:	.word	0x1fff184c
    2814:	.word	0x1fff183c
    2818:	.word	0x1fff1858
    281c:	.word	0x1fff1cf4
    2820:	.word	0x1fff1890
    2824:	.word	0x1fff1868

00002828 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2828:	cpsid	i
	avail = usb_buffer_available;
    282a:	ldr	r0, [pc, #52]	; (2860 <usb_malloc+0x38>)
    282c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    282e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2832:	cmp	r3, #29
    2834:	bgt.n	2858 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2836:	mov.w	r1, #2147483648	; 0x80000000
    283a:	lsrs	r1, r3
    283c:	bic.w	r2, r2, r1
    2840:	str	r2, [r0, #0]
	__enable_irq();
    2842:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2844:	ldr	r0, [pc, #28]	; (2864 <usb_malloc+0x3c>)
    2846:	add.w	r3, r3, r3, lsl #3
    284a:	lsls	r3, r3, #3
    284c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    284e:	movs	r1, #0
    2850:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2852:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2854:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2856:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2858:	cpsie	i
		return NULL;
    285a:	movs	r0, #0
    285c:	bx	lr
    285e:	nop
    2860:	.word	0x1fff0c5c
    2864:	.word	0x1fff03d0

00002868 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2868:	ldr	r3, [pc, #52]	; (28a0 <usb_free+0x38>)
    286a:	ldr	r2, [pc, #56]	; (28a4 <usb_free+0x3c>)
    286c:	subs	r3, r0, r3
    286e:	umull	r2, r3, r2, r3
    2872:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2874:	cmp	r3, #29
    2876:	bhi.n	2892 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2878:	ldr	r2, [pc, #44]	; (28a8 <usb_free+0x40>)
    287a:	ldrb	r2, [r2, #0]
    287c:	cbnz	r2, 2894 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    287e:	cpsid	i
	usb_buffer_available |= mask;
    2880:	ldr	r0, [pc, #40]	; (28ac <usb_free+0x44>)
    2882:	mov.w	r1, #2147483648	; 0x80000000
    2886:	ldr	r2, [r0, #0]
    2888:	lsr.w	r3, r1, r3
    288c:	orrs	r2, r3
    288e:	str	r2, [r0, #0]
	__enable_irq();
    2890:	cpsie	i
    2892:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2894:	ldr	r2, [pc, #24]	; (28b0 <usb_free+0x48>)
    2896:	ldrb	r2, [r2, #0]
    2898:	cmp	r2, #0
    289a:	beq.n	287e <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    289c:	b.w	291c <usb_rx_memory>
    28a0:	.word	0x1fff03d0
    28a4:	.word	0x38e38e39
    28a8:	.word	0x1fff1981
    28ac:	.word	0x1fff0c5c
    28b0:	.word	0x1fff198c

000028b4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    28b4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    28b6:	cmp	r3, #4
    28b8:	bhi.n	28e4 <usb_rx+0x30>
	__disable_irq();
    28ba:	cpsid	i
	ret = rx_first[endpoint];
    28bc:	ldr	r1, [pc, #40]	; (28e8 <usb_rx+0x34>)
    28be:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    28c2:	cbz	r0, 28e0 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    28c4:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    28c6:	ldr	r4, [pc, #36]	; (28ec <usb_rx+0x38>)
    28c8:	ldrh	r5, [r0, #0]
    28ca:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    28ce:	ldr	r6, [r0, #4]
    28d0:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    28d4:	subs	r2, r2, r5
    28d6:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    28da:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    28dc:	pop	{r4, r5, r6}
    28de:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    28e0:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    28e2:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    28e4:	movs	r0, #0
    28e6:	bx	lr
    28e8:	.word	0x1fff18f8
    28ec:	.word	0x1fff1e20

000028f0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    28f0:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    28f2:	cmp	r0, #4
    28f4:	bhi.n	290e <usb_tx_packet_count+0x1e>
	__disable_irq();
    28f6:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    28f8:	ldr	r3, [pc, #28]	; (2918 <usb_tx_packet_count+0x28>)
    28fa:	ldr.w	r3, [r3, r0, lsl #2]
    28fe:	cbz	r3, 2912 <usb_tx_packet_count+0x22>
    2900:	movs	r0, #0
    2902:	ldr	r3, [r3, #4]
    2904:	adds	r0, #1
    2906:	cmp	r3, #0
    2908:	bne.n	2902 <usb_tx_packet_count+0x12>
	__enable_irq();
    290a:	cpsie	i
	return count;
    290c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    290e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2910:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2912:	mov	r0, r3
    2914:	b.n	290a <usb_tx_packet_count+0x1a>
    2916:	nop
    2918:	.word	0x1fff1950

0000291c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    291c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    291e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2920:	ldr	r2, [pc, #204]	; (29f0 <usb_rx_memory+0xd4>)
    2922:	ldrb	r3, [r2, #0]
    2924:	lsls	r3, r3, #28
    2926:	bpl.n	2936 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2928:	ldr	r3, [pc, #200]	; (29f4 <usb_rx_memory+0xd8>)
    292a:	ldr	r1, [r3, #32]
    292c:	cmp	r1, #0
    292e:	beq.n	29b8 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2930:	ldr	r1, [r3, #40]	; 0x28
    2932:	cmp	r1, #0
    2934:	beq.n	29d4 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2936:	ldrb	r3, [r2, #1]
    2938:	lsls	r5, r3, #28
    293a:	bpl.n	294a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    293c:	ldr	r3, [pc, #180]	; (29f4 <usb_rx_memory+0xd8>)
    293e:	ldr	r1, [r3, #64]	; 0x40
    2940:	cmp	r1, #0
    2942:	beq.n	29e0 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2944:	ldr	r1, [r3, #72]	; 0x48
    2946:	cmp	r1, #0
    2948:	beq.n	29d8 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    294a:	ldrb	r3, [r2, #2]
    294c:	lsls	r4, r3, #28
    294e:	bpl.n	295e <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2950:	ldr	r3, [pc, #160]	; (29f4 <usb_rx_memory+0xd8>)
    2952:	ldr	r1, [r3, #96]	; 0x60
    2954:	cmp	r1, #0
    2956:	beq.n	29e4 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2958:	ldr	r1, [r3, #104]	; 0x68
    295a:	cmp	r1, #0
    295c:	beq.n	29dc <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    295e:	ldrb	r3, [r2, #3]
    2960:	lsls	r1, r3, #28
    2962:	bpl.n	2974 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2964:	ldr	r3, [pc, #140]	; (29f4 <usb_rx_memory+0xd8>)
    2966:	ldr.w	r1, [r3, #128]	; 0x80
    296a:	cmp	r1, #0
    296c:	beq.n	29ec <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    296e:	ldr.w	r1, [r3, #136]	; 0x88
    2972:	cbz	r1, 299a <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2974:	ldrb	r3, [r2, #4]
    2976:	lsls	r3, r3, #28
    2978:	bpl.n	298c <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    297a:	ldr	r3, [pc, #120]	; (29f4 <usb_rx_memory+0xd8>)
    297c:	ldr.w	r2, [r3, #160]	; 0xa0
    2980:	cmp	r2, #0
    2982:	beq.n	29e8 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2984:	ldr.w	r2, [r3, #168]	; 0xa8
    2988:	movs	r4, #21
    298a:	cbz	r2, 299c <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    298c:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    298e:	ldr	r3, [pc, #104]	; (29f8 <usb_rx_memory+0xdc>)
    2990:	movs	r2, #0
    2992:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2994:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2996:	b.w	2868 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    299a:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    299c:	ldr	r1, [pc, #88]	; (29f8 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    299e:	ldr	r5, [pc, #92]	; (29fc <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    29a0:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    29a2:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    29a6:	add.w	r3, r3, r4, lsl #3
    29aa:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    29ac:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    29ae:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    29b0:	strb	r2, [r1, #0]
				__enable_irq();
    29b2:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    29b4:	pop	{r4, r5}
    29b6:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    29b8:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    29ba:	ldr	r4, [pc, #60]	; (29f8 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    29bc:	ldr	r5, [pc, #64]	; (2a00 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    29be:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    29c0:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    29c4:	add.w	r3, r3, r2, lsl #3
    29c8:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    29ca:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    29cc:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    29ce:	strb	r2, [r4, #0]
				__enable_irq();
    29d0:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    29d2:	b.n	29b4 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    29d4:	movs	r4, #5
    29d6:	b.n	299c <usb_rx_memory+0x80>
    29d8:	movs	r4, #9
    29da:	b.n	299c <usb_rx_memory+0x80>
    29dc:	movs	r4, #13
    29de:	b.n	299c <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    29e0:	movs	r2, #8
    29e2:	b.n	29ba <usb_rx_memory+0x9e>
    29e4:	movs	r2, #12
    29e6:	b.n	29ba <usb_rx_memory+0x9e>
    29e8:	movs	r2, #20
    29ea:	b.n	29ba <usb_rx_memory+0x9e>
    29ec:	movs	r2, #16
    29ee:	b.n	29ba <usb_rx_memory+0x9e>
    29f0:	.word	0x00004ca0
    29f4:	.word	0x1fff0000
    29f8:	.word	0x1fff1981
    29fc:	.word	0x004000c8
    2a00:	.word	0x00400088

00002a04 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2a04:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2a06:	cmp	r3, #4
    2a08:	bhi.n	2a46 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2a0a:	ldr	r2, [pc, #108]	; (2a78 <usb_tx+0x74>)
    2a0c:	lsls	r0, r0, #5
    2a0e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2a12:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2a14:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2a16:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2a18:	ldr	r4, [pc, #96]	; (2a7c <usb_tx+0x78>)
    2a1a:	ldrb	r2, [r4, r3]
    2a1c:	cmp	r2, #3
    2a1e:	bhi.n	2a58 <usb_tx+0x54>
    2a20:	tbb	[pc, r2]
    2a24:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2a28:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2a2a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2a2c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2a2e:	tst.w	r0, #8
    2a32:	ite	ne
    2a34:	movne	r3, #200	; 0xc8
    2a36:	moveq	r3, #136	; 0x88
    2a38:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2a3c:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2a3e:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2a40:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2a42:	cpsie	i
}
    2a44:	pop	{r4, r5}
    2a46:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2a48:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2a4a:	movs	r2, #2
		break;
    2a4c:	b.n	2a2a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2a4e:	movs	r2, #5
    2a50:	b.n	2a2a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2a52:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2a54:	movs	r2, #4
		break;
    2a56:	b.n	2a2a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2a58:	ldr	r2, [pc, #36]	; (2a80 <usb_tx+0x7c>)
    2a5a:	ldr.w	r0, [r2, r3, lsl #2]
    2a5e:	cbz	r0, 2a70 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2a60:	ldr	r2, [pc, #32]	; (2a84 <usb_tx+0x80>)
    2a62:	ldr.w	r0, [r2, r3, lsl #2]
    2a66:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2a68:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2a6c:	cpsie	i
		return;
    2a6e:	b.n	2a44 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2a70:	str.w	r1, [r2, r3, lsl #2]
    2a74:	ldr	r2, [pc, #12]	; (2a84 <usb_tx+0x80>)
    2a76:	b.n	2a68 <usb_tx+0x64>
    2a78:	.word	0x1fff0000
    2a7c:	.word	0x1fff1990
    2a80:	.word	0x1fff1950
    2a84:	.word	0x1fff1964

00002a88 <usb_isr>:
}



void usb_isr(void)
{
    2a88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2a8c:	ldr.w	fp, [pc, #776]	; 2d98 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2a90:	ldr.w	sl, [pc, #776]	; 2d9c <usb_isr+0x314>
}



void usb_isr(void)
{
    2a94:	sub	sp, #28
    2a96:	b.n	2b22 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2a98:	ldr	r7, [pc, #680]	; (2d44 <usb_isr+0x2bc>)
    2a9a:	mov.w	r8, r3, lsr #2
    2a9e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2aa2:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2aa4:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2aa8:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2aac:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2aae:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2ab2:	and.w	r4, r3, #255	; 0xff
    2ab6:	cmp	r3, #0
    2ab8:	bne.w	2cbc <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2abc:	ldr.w	r3, [r7, r8, lsl #3]
    2ac0:	lsrs	r3, r3, #16
    2ac2:	uxth	r1, r3
    2ac4:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2ac8:	cmp	r3, #0
    2aca:	beq.w	2caa <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2ace:	ldr	r3, [pc, #632]	; (2d48 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2ad0:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2ad4:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2ad8:	ldr.w	r2, [r3, r6, lsl #2]
    2adc:	cmp	r2, #0
    2ade:	beq.w	2f4c <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2ae2:	ldr	r5, [pc, #616]	; (2d4c <usb_isr+0x2c4>)
    2ae4:	ldr.w	r3, [r5, r6, lsl #2]
    2ae8:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2aea:	ldr	r4, [pc, #612]	; (2d50 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2aec:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2af0:	ldrh.w	r3, [r4, r6, lsl #1]
    2af4:	add	r1, r3
    2af6:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2afa:	bl	2828 <usb_malloc>
					if (packet) {
    2afe:	cmp	r0, #0
    2b00:	beq.w	2f3e <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2b04:	ldr	r2, [pc, #588]	; (2d54 <usb_isr+0x2cc>)
    2b06:	ldr	r3, [pc, #592]	; (2d58 <usb_isr+0x2d0>)
    2b08:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2b0c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2b10:	it	ne
    2b12:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2b14:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2b18:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2b1c:	movs	r3, #8
    2b1e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2b22:	ldrb.w	r4, [fp]
    2b26:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2b28:	lsls	r0, r4, #29
    2b2a:	bpl.n	2b66 <usb_isr+0xde>
		if (usb_configuration) {
    2b2c:	ldr	r3, [pc, #556]	; (2d5c <usb_isr+0x2d4>)
    2b2e:	ldrb	r3, [r3, #0]
    2b30:	cbz	r3, 2b60 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2b32:	ldr	r1, [pc, #556]	; (2d60 <usb_isr+0x2d8>)
    2b34:	ldrb	r2, [r1, #0]
			if (t) {
    2b36:	and.w	r3, r2, #255	; 0xff
    2b3a:	cbz	r2, 2b46 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2b3c:	subs	r3, #1
    2b3e:	uxtb	r3, r3
    2b40:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2b42:	cbnz	r3, 2b46 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2b44:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2b46:	ldr	r1, [pc, #540]	; (2d64 <usb_isr+0x2dc>)
    2b48:	ldrb	r2, [r1, #0]
			if (t) {
    2b4a:	and.w	r3, r2, #255	; 0xff
    2b4e:	cbz	r2, 2b5c <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2b50:	subs	r3, #1
    2b52:	uxtb	r3, r3
    2b54:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2b56:	cmp	r3, #0
    2b58:	beq.w	2eea <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2b5c:	bl	23c0 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2b60:	movs	r3, #4
    2b62:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2b66:	and.w	r3, r4, #8
    2b6a:	and.w	r2, r3, #255	; 0xff
    2b6e:	cmp	r3, #0
    2b70:	beq.w	2d04 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2b74:	ldrb.w	r3, [sl]
    2b78:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2b7a:	lsrs	r6, r3, #4
    2b7c:	bne.n	2a98 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2b7e:	lsrs	r4, r3, #2
    2b80:	ldr.w	r9, [pc, #448]	; 2d44 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2b84:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2b88:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2b8c:	ubfx	r2, r2, #2, #4
    2b90:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2b92:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2b94:	cmp	r2, #12
    2b96:	bhi.w	2ca2 <usb_isr+0x21a>
    2b9a:	tbb	[pc, r2]
    2b9e:	.short	0x7878
    2ba0:	.word	0x82828282
    2ba4:	.word	0x82438282
    2ba8:	.short	0x8282
    2baa:	.byte	0x07
    2bab:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2bac:	ldr	r0, [r1, #0]
    2bae:	ldr	r5, [pc, #440]	; (2d68 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2bb0:	ldr	r3, [pc, #416]	; (2d54 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2bb2:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2bb4:	ldr	r7, [pc, #436]	; (2d6c <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2bb6:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2bba:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2bbc:	ldr	r6, [pc, #432]	; (2d70 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2bbe:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2bc0:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2bc4:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2bc6:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2bc8:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2bca:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2bce:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2bd0:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2bd4:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2bd8:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2bda:	bhi.w	2da0 <usb_isr+0x318>
    2bde:	cmp.w	r1, #1664	; 0x680
    2be2:	bcs.w	320c <usb_isr+0x784>
    2be6:	cmp.w	r1, #258	; 0x102
    2bea:	beq.w	2fba <usb_isr+0x532>
    2bee:	bhi.w	2f84 <usb_isr+0x4fc>
    2bf2:	cmp	r1, #128	; 0x80
    2bf4:	beq.w	3240 <usb_isr+0x7b8>
    2bf8:	cmp	r1, #130	; 0x82
    2bfa:	bne.w	2fc6 <usb_isr+0x53e>
    2bfe:	ldrh	r1, [r5, #4]
    2c00:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2c04:	cmp	r1, #5
    2c06:	bhi.w	2fc6 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2c0a:	ldr	r3, [pc, #360]	; (2d74 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2c0c:	ldr	r4, [pc, #360]	; (2d78 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2c0e:	lsls	r1, r1, #2
    2c10:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2c12:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2c14:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2c16:	ldrb	r2, [r3, #0]
    2c18:	lsls	r3, r2, #30
    2c1a:	bpl.w	3350 <usb_isr+0x8c8>
    2c1e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2c20:	movs	r0, #2
    2c22:	b.n	304e <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2c24:	ldr	r7, [pc, #324]	; (2d6c <usb_isr+0x2e4>)
    2c26:	ldr	r2, [r7, #0]
		if (data) {
    2c28:	cbz	r2, 2c78 <usb_isr+0x1f0>
			size = ep0_tx_len;
    2c2a:	ldr	r3, [pc, #336]	; (2d7c <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c2c:	ldr	r6, [pc, #320]	; (2d70 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c2e:	ldr	r1, [pc, #336]	; (2d80 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2c30:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c32:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c34:	ldrb	r5, [r1, #0]
    2c36:	cmp	r0, #64	; 0x40
    2c38:	mov	lr, r0
    2c3a:	orr.w	r8, r5, #2
    2c3e:	it	cs
    2c40:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c44:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2c46:	eor.w	r4, r4, #1
    2c4a:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2c4c:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c50:	ite	eq
    2c52:	moveq	r4, #136	; 0x88
    2c54:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c56:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2c5a:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2c5c:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c60:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c64:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2c66:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c68:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2c6c:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2c6e:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2c70:	cmp	r0, #0
    2c72:	beq.w	2de2 <usb_isr+0x35a>
    2c76:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2c78:	ldr	r3, [pc, #236]	; (2d68 <usb_isr+0x2e0>)
    2c7a:	ldrh	r2, [r3, #0]
    2c7c:	cmp.w	r2, #1280	; 0x500
    2c80:	bne.n	2ca2 <usb_isr+0x21a>
			setup.bRequest = 0;
    2c82:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2c84:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2c86:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2c88:	ldr	r3, [pc, #248]	; (2d84 <usb_isr+0x2fc>)
    2c8a:	strb	r2, [r3, #0]
    2c8c:	b.n	2ca2 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2c8e:	ldr	r2, [pc, #216]	; (2d68 <usb_isr+0x2e0>)
    2c90:	ldrh	r0, [r2, #0]
    2c92:	movw	r2, #8225	; 0x2021
    2c96:	cmp	r0, r2
    2c98:	beq.w	2dec <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2c9c:	ldr	r2, [pc, #180]	; (2d54 <usb_isr+0x2cc>)
    2c9e:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2ca2:	ldr	r2, [pc, #228]	; (2d88 <usb_isr+0x300>)
    2ca4:	movs	r3, #1
    2ca6:	strb	r3, [r2, #0]
    2ca8:	b.n	2b1c <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2caa:	ldr	r2, [pc, #168]	; (2d54 <usb_isr+0x2cc>)
    2cac:	ldr	r3, [pc, #168]	; (2d58 <usb_isr+0x2d0>)
    2cae:	tst.w	r9, #8
    2cb2:	it	ne
    2cb4:	movne	r3, r2
    2cb6:	str.w	r3, [r7, r8, lsl #3]
    2cba:	b.n	2b1c <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2cbc:	bl	2868 <usb_free>
				packet = tx_first[endpoint];
    2cc0:	ldr	r2, [pc, #200]	; (2d8c <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2cc2:	ldr	r1, [pc, #204]	; (2d90 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2cc4:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2cc8:	cmp	r3, #0
    2cca:	beq.w	2f54 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2cce:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2cd0:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2cd2:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2cd6:	add.w	r2, r3, #8
    2cda:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2cde:	cmp	r4, #3
    2ce0:	bhi.n	2cee <usb_isr+0x266>
    2ce2:	tbb	[pc, r4]
    2ce6:	.short	0x022c
    2ce8:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2cea:	movs	r2, #2
    2cec:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2cee:	ldrh	r2, [r3, #0]
    2cf0:	tst.w	r9, #8
    2cf4:	ite	eq
    2cf6:	moveq	r3, #136	; 0x88
    2cf8:	movne	r3, #200	; 0xc8
    2cfa:	orr.w	r3, r3, r2, lsl #16
    2cfe:	str.w	r3, [r7, r8, lsl #3]
    2d02:	b.n	2b1c <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2d04:	lsls	r0, r4, #31
    2d06:	bmi.w	2ef0 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2d0a:	lsls	r1, r4, #24
    2d0c:	bmi.w	2f70 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2d10:	lsls	r2, r4, #30
    2d12:	bpl.n	2d22 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2d14:	ldr	r2, [pc, #124]	; (2d94 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2d16:	ldr	r1, [pc, #128]	; (2d98 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2d18:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2d1a:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2d1c:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2d1e:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2d20:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2d22:	lsls	r3, r4, #27
    2d24:	bpl.n	2d2c <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2d26:	ldr	r3, [pc, #112]	; (2d98 <usb_isr+0x310>)
    2d28:	movs	r2, #16
    2d2a:	strb	r2, [r3, #0]
	}

}
    2d2c:	add	sp, #28
    2d2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2d32:	movs	r2, #4
    2d34:	strb	r2, [r1, r6]
						break;
    2d36:	b.n	2cee <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2d38:	movs	r2, #5
    2d3a:	strb	r2, [r1, r6]
						break;
    2d3c:	b.n	2cee <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2d3e:	movs	r2, #3
    2d40:	strb	r2, [r1, r6]
						break;
    2d42:	b.n	2cee <usb_isr+0x266>
    2d44:	.word	0x1fff0000
    2d48:	.word	0x1fff18f8
    2d4c:	.word	0x1fff18a0
    2d50:	.word	0x1fff1e20
    2d54:	.word	0x004000c8
    2d58:	.word	0x00400088
    2d5c:	.word	0x1fff198c
    2d60:	.word	0x1fff190d
    2d64:	.word	0x1fff1820
    2d68:	.word	0x1fff1978
    2d6c:	.word	0x1fff189c
    2d70:	.word	0x1fff190c
    2d74:	.word	0x400720c0
    2d78:	.word	0x1fff1984
    2d7c:	.word	0x1fff18b4
    2d80:	.word	0x1fff1980
    2d84:	.word	0x40072098
    2d88:	.word	0x40072094
    2d8c:	.word	0x1fff1950
    2d90:	.word	0x1fff1990
    2d94:	.word	0x40072088
    2d98:	.word	0x40072080
    2d9c:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2da0:	movw	r4, #8225	; 0x2021
    2da4:	cmp	r1, r4
    2da6:	beq.w	2ee2 <usb_isr+0x45a>
    2daa:	bhi.n	2e40 <usb_isr+0x3b8>
    2dac:	cmp.w	r1, #2176	; 0x880
    2db0:	beq.w	3046 <usb_isr+0x5be>
    2db4:	cmp.w	r1, #2304	; 0x900
    2db8:	bne.w	2fc6 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2dbc:	ldr	r2, [pc, #712]	; (3088 <usb_isr+0x600>)
    2dbe:	ldr	r4, [pc, #716]	; (308c <usb_isr+0x604>)
    2dc0:	ldrb	r1, [r5, #2]
    2dc2:	strb	r1, [r2, #0]
    2dc4:	add.w	r5, r4, #160	; 0xa0
    2dc8:	b.n	2dd2 <usb_isr+0x34a>
    2dca:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2dcc:	cmp	r5, r4
    2dce:	beq.w	30e4 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2dd2:	ldr	r3, [r4, #32]
    2dd4:	lsls	r1, r3, #24
    2dd6:	bpl.n	2dca <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2dd8:	ldr	r0, [r4, #36]	; 0x24
    2dda:	subs	r0, #8
    2ddc:	bl	2868 <usb_free>
    2de0:	b.n	2dca <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2de2:	cmp.w	lr, #64	; 0x40
    2de6:	it	ne
    2de8:	movne	r2, #0
    2dea:	b.n	2c76 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2dec:	ldr	r2, [pc, #672]	; (3090 <usb_isr+0x608>)
    2dee:	ldrb	r5, [r1, #0]
    2df0:	ldrb	r0, [r1, #1]
    2df2:	strb	r5, [r2, #0]
    2df4:	strb	r0, [r2, #1]
    2df6:	ldrb	r5, [r1, #2]
    2df8:	ldrb	r0, [r1, #3]
    2dfa:	strb	r5, [r2, #2]
    2dfc:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2dfe:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2e00:	ldrb	r5, [r1, #4]
    2e02:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2e04:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2e06:	ldrb	r5, [r1, #5]
    2e08:	ldrb	r1, [r1, #6]
    2e0a:	strb	r5, [r2, #5]
    2e0c:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2e0e:	beq.w	303e <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e12:	ldr	r1, [pc, #640]	; (3094 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e14:	ldr	r6, [pc, #640]	; (3098 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e16:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e18:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e1a:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e1e:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e20:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e24:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e26:	ite	eq
    2e28:	moveq	r1, #136	; 0x88
    2e2a:	movne	r1, #200	; 0xc8
    2e2c:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e30:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2e34:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e38:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2e3a:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e3c:	str	r1, [r2, #4]
    2e3e:	b.n	2c9c <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2e40:	movw	r4, #8737	; 0x2221
    2e44:	cmp	r1, r4
    2e46:	bne.w	325a <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2e4a:	ldr.w	ip, [pc, #656]	; 30dc <usb_isr+0x654>
    2e4e:	ldr	r3, [pc, #588]	; (309c <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2e50:	ldr	r1, [pc, #588]	; (30a0 <usb_isr+0x618>)
    2e52:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2e54:	ldr.w	r5, [ip]
    2e58:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2e5a:	str	r0, [sp, #4]
    2e5c:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2e5e:	movs	r0, #0
    2e60:	str	r0, [sp, #8]
    2e62:	mov	r8, r0
    2e64:	mov	ip, r0
    2e66:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e68:	ldr	r1, [pc, #552]	; (3094 <usb_isr+0x60c>)
    2e6a:	ldrb	r5, [r1, #0]
    2e6c:	orr.w	lr, r5, #2
    2e70:	add.w	r3, r9, lr, lsl #3
    2e74:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e76:	ldr	r3, [sp, #4]
    2e78:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e7a:	ldr	r3, [sp, #12]
    2e7c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e7e:	ite	eq
    2e80:	moveq	r4, #136	; 0x88
    2e82:	movne	r4, #200	; 0xc8
    2e84:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e88:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e8c:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2e90:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2e92:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e94:	ldr.w	lr, [pc, #500]	; 308c <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2e98:	ldr	r3, [pc, #508]	; (3098 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    2e9a:	ldr.w	r8, [pc, #504]	; 3094 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2e9e:	cmp	r0, #0
    2ea0:	bne.w	2fd4 <usb_isr+0x54c>
    2ea4:	cmp.w	ip, #64	; 0x40
    2ea8:	bne.n	2ee2 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2eaa:	orr.w	ip, r4, #2
    2eae:	add.w	r3, r9, ip, lsl #3
    2eb2:	ldr	r4, [sp, #8]
    2eb4:	ldr.w	lr, [pc, #468]	; 308c <usb_isr+0x604>
    2eb8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2eba:	cmp	r2, #0
    2ebc:	bne.w	3000 <usb_isr+0x578>
    2ec0:	lsls	r2, r0, #16
    2ec2:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2ec6:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2eca:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2ece:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2ed0:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2ed2:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2ed4:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2ed6:	cmp	r0, #64	; 0x40
    2ed8:	bne.n	2ee2 <usb_isr+0x45a>
    2eda:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2edc:	ldr	r2, [pc, #452]	; (30a4 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2ede:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2ee0:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2ee2:	ldr	r2, [pc, #452]	; (30a8 <usb_isr+0x620>)
    2ee4:	movs	r3, #1
    2ee6:	strb	r3, [r2, #0]
    2ee8:	b.n	2ca2 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    2eea:	bl	1c48 <usb_serial_flush_callback>
    2eee:	b.n	2b5c <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2ef0:	ldr	r3, [pc, #408]	; (308c <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2ef2:	ldr	r0, [pc, #436]	; (30a8 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2ef4:	ldr	r1, [pc, #412]	; (3094 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2ef6:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2ef8:	mov.w	lr, #2
    2efc:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2f00:	ldr	r7, [pc, #424]	; (30ac <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2f02:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2f04:	ldr	r1, [pc, #424]	; (30b0 <usb_isr+0x628>)
    2f06:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2f08:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2f0a:	ldr	r6, [pc, #424]	; (30b4 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2f0c:	ldr	r5, [pc, #424]	; (30b8 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2f0e:	ldr	r4, [pc, #428]	; (30bc <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2f10:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2f12:	movs	r1, #13
    2f14:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2f16:	movs	r1, #255	; 0xff
    2f18:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2f1a:	ldr.w	lr, [pc, #452]	; 30e0 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    2f1e:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2f20:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2f22:	ldr	r5, [pc, #412]	; (30c0 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2f24:	ldr	r2, [pc, #412]	; (30c4 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2f26:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2f2a:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2f2c:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2f2e:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2f32:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2f34:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2f36:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    2f38:	add	sp, #28
    2f3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    2f3e:	ldr	r2, [pc, #392]	; (30c8 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2f40:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2f44:	ldrb	r3, [r2, #0]
    2f46:	adds	r3, #1
    2f48:	strb	r3, [r2, #0]
    2f4a:	b.n	2b1c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2f4c:	str.w	r0, [r3, r6, lsl #2]
    2f50:	ldr	r5, [pc, #376]	; (30cc <usb_isr+0x644>)
    2f52:	b.n	2aea <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2f54:	ldrb	r3, [r1, r6]
    2f56:	cmp	r3, #3
    2f58:	bhi.n	3030 <usb_isr+0x5a8>
    2f5a:	add	r2, pc, #4	; (adr r2, 2f60 <usb_isr+0x4d8>)
    2f5c:	ldr.w	pc, [r2, r3, lsl #2]
    2f60:	.word	0x00002b1d
    2f64:	.word	0x00002b1d
    2f68:	.word	0x00002fb5
    2f6c:	.word	0x00002faf
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2f70:	ldr	r1, [pc, #312]	; (30ac <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    2f72:	ldr	r3, [pc, #324]	; (30b8 <usb_isr+0x630>)
    2f74:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2f76:	movs	r0, #13
    2f78:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    2f7a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2f7c:	lsls	r2, r4, #30
    2f7e:	bpl.w	2d22 <usb_isr+0x29a>
    2f82:	b.n	2d14 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2f84:	movw	r2, #770	; 0x302
    2f88:	cmp	r1, r2
    2f8a:	bne.w	324a <usb_isr+0x7c2>
    2f8e:	ldrh	r1, [r5, #4]
    2f90:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2f94:	cmp	r1, #5
    2f96:	bhi.n	2fc6 <usb_isr+0x53e>
    2f98:	ldrh	r2, [r5, #2]
    2f9a:	cbnz	r2, 2fc6 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    2f9c:	ldr	r4, [pc, #268]	; (30ac <usb_isr+0x624>)
    2f9e:	str	r0, [sp, #4]
    2fa0:	lsls	r1, r1, #2
    2fa2:	add	r4, r1
    2fa4:	ldrb	r1, [r4, #0]
    2fa6:	orr.w	r1, r1, #2
    2faa:	strb	r1, [r4, #0]
    2fac:	b.n	2e5e <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2fae:	movs	r3, #1
    2fb0:	strb	r3, [r1, r6]
						break;
    2fb2:	b.n	2b1c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2fb4:	movs	r3, #0
    2fb6:	strb	r3, [r1, r6]
						break;
    2fb8:	b.n	2b1c <usb_isr+0x94>
    2fba:	ldrh	r1, [r5, #4]
    2fbc:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2fc0:	cmp	r1, #5
    2fc2:	bls.w	3264 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2fc6:	ldr	r2, [pc, #228]	; (30ac <usb_isr+0x624>)
    2fc8:	movs	r3, #15
    2fca:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2fcc:	ldr	r2, [pc, #216]	; (30a8 <usb_isr+0x620>)
    2fce:	movs	r3, #1
    2fd0:	strb	r3, [r2, #0]
    2fd2:	b.n	2ca2 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2fd4:	cmp	r0, #64	; 0x40
    2fd6:	bls.w	2eaa <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fda:	orr.w	r4, r4, #2
    2fde:	add.w	r1, lr, r4, lsl #3
    2fe2:	ldr	r6, [sp, #8]
    2fe4:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fe6:	cbz	r2, 3018 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    2fe8:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fec:	ldr	r2, [pc, #224]	; (30d0 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    2fee:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2ff0:	mov	r3, r6
    2ff2:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2ff4:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2ff8:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ffa:	str.w	r2, [lr, r4, lsl #3]
    2ffe:	b.n	2edc <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3000:	ldrb.w	r3, [sp, #4]
    3004:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3006:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3008:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    300a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    300c:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3010:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3012:	str.w	r2, [lr, ip, lsl #3]
    3016:	b.n	2ed6 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3018:	ldrb.w	r1, [sp, #4]
    301c:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    301e:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3020:	ldr	r2, [pc, #140]	; (30b0 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3022:	strb.w	r5, [r8]
    3026:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3028:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    302a:	str.w	r2, [lr, r4, lsl #3]
    302e:	b.n	2edc <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3030:	tst.w	r9, #8
    3034:	ite	eq
    3036:	moveq	r3, #2
    3038:	movne	r3, #3
    303a:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    303c:	b.n	2b1c <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    303e:	ldr	r2, [pc, #148]	; (30d4 <usb_isr+0x64c>)
    3040:	movs	r1, #15
    3042:	strb	r1, [r2, #0]
    3044:	b.n	2e12 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3046:	ldr	r2, [pc, #64]	; (3088 <usb_isr+0x600>)
    3048:	ldr	r4, [pc, #140]	; (30d8 <usb_isr+0x650>)
    304a:	ldrb	r2, [r2, #0]
    304c:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    304e:	ldrh	r2, [r5, #6]
    3050:	cmp	r2, r0
    3052:	bcs.w	3418 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3056:	ldr	r1, [pc, #60]	; (3094 <usb_isr+0x60c>)
    3058:	ldrb	r5, [r1, #0]
    305a:	cmp	r2, #64	; 0x40
    305c:	mov	ip, r2
    305e:	orr.w	lr, r5, #2
    3062:	it	cs
    3064:	movcs.w	ip, #64	; 0x40
    3068:	add.w	r3, r4, ip
    306c:	add.w	r0, r9, lr, lsl #3
    3070:	str	r3, [sp, #8]
    3072:	movs	r3, #1
    3074:	str	r4, [r0, #4]
    3076:	mov.w	r8, ip, lsl #16
    307a:	rsb	r0, ip, r2
    307e:	str	r3, [sp, #4]
    3080:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3082:	movs	r4, #200	; 0xc8
    3084:	b.n	2e84 <usb_isr+0x3fc>
    3086:	nop
    3088:	.word	0x1fff198c
    308c:	.word	0x1fff0000
    3090:	.word	0x1fff1ce8
    3094:	.word	0x1fff1980
    3098:	.word	0x1fff190c
    309c:	.word	0x1fff1cf0
    30a0:	.word	0x1fff1830
    30a4:	.word	0x1fff18b4
    30a8:	.word	0x40072094
    30ac:	.word	0x400720c0
    30b0:	.word	0x00400088
    30b4:	.word	0x40072088
    30b8:	.word	0x40072080
    30bc:	.word	0x40072098
    30c0:	.word	0x1fff18b8
    30c4:	.word	0x1fff1910
    30c8:	.word	0x1fff1981
    30cc:	.word	0x1fff18a0
    30d0:	.word	0x004000c8
    30d4:	.word	0x1fff190d
    30d8:	.word	0x1fff1984
    30dc:	.word	0x1fff1838
    30e0:	.word	0x4007208c
    30e4:	ldr	r4, [pc, #704]	; (33a8 <usb_isr+0x920>)
    30e6:	ldr	r2, [pc, #708]	; (33ac <usb_isr+0x924>)
    30e8:	ldr	r1, [pc, #708]	; (33b0 <usb_isr+0x928>)
    30ea:	ldr	r0, [pc, #712]	; (33b4 <usb_isr+0x92c>)
    30ec:	ldr	r5, [pc, #712]	; (33b8 <usb_isr+0x930>)
    30ee:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    30f0:	movs	r3, #0
    30f2:	ldr	r4, [pc, #712]	; (33bc <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    30f4:	str	r4, [sp, #8]
    30f6:	str	r6, [sp, #20]
    30f8:	str	r5, [sp, #12]
    30fa:	mov	r8, r0
    30fc:	mov	r4, r3
    30fe:	str	r7, [sp, #16]
    3100:	mov	r6, r2
    3102:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3104:	ldr	r0, [r6, #0]
			while (p) {
    3106:	cbz	r0, 3114 <usb_isr+0x68c>
				n = p->next;
    3108:	ldr	r7, [r0, #4]
				usb_free(p);
    310a:	bl	2868 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    310e:	mov	r0, r7
    3110:	cmp	r7, #0
    3112:	bne.n	3108 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3114:	movs	r3, #0
    3116:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3118:	ldr	r3, [sp, #12]
			p = tx_first[i];
    311a:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    311c:	mov	r2, r3
    311e:	movs	r3, #0
    3120:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3124:	cbz	r0, 3132 <usb_isr+0x6aa>
				n = p->next;
    3126:	ldr	r7, [r0, #4]
				usb_free(p);
    3128:	bl	2868 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    312c:	mov	r0, r7
    312e:	cmp	r7, #0
    3130:	bne.n	3126 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3132:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3134:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3136:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3138:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    313a:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    313e:	ldr	r2, [sp, #8]
    3140:	mov.w	r1, #0
			switch (tx_state[i]) {
    3144:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3146:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    314a:	cmp	r3, #3
    314c:	bhi.n	315e <usb_isr+0x6d6>
    314e:	tbb	[pc, r3]
    3152:	.short	0x0258
    3154:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3156:	ldr	r3, [sp, #4]
    3158:	mov.w	r2, #1
    315c:	strb	r2, [r3, #0]
    315e:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3160:	adds	r4, #1
    3162:	adds	r3, #1
    3164:	cmp	r4, #5
    3166:	add.w	r6, r6, #4
    316a:	add.w	r5, r5, #4
    316e:	str	r3, [sp, #4]
    3170:	bne.n	3104 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3172:	ldr	r4, [pc, #588]	; (33c0 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3174:	ldr	r5, [pc, #588]	; (33c4 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3176:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3178:	ldr	r3, [pc, #588]	; (33c8 <usb_isr+0x940>)
    317a:	ldr	r7, [sp, #16]
    317c:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    317e:	movs	r1, #0
    3180:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3182:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3184:	lsls	r2, r2, #28
    3186:	bmi.n	327e <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3188:	ldrb	r2, [r4, #1]
			*reg = epconf;
    318a:	ldr	r1, [pc, #576]	; (33cc <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    318c:	ldr.w	r8, [pc, #588]	; 33dc <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3190:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3192:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3194:	mov.w	r1, #0
    3198:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    319c:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    31a0:	bmi.w	332a <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    31a4:	ldrb	r2, [r4, #2]
			*reg = epconf;
    31a6:	ldr	r1, [pc, #552]	; (33d0 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    31a8:	ldr.w	r8, [pc, #560]	; 33dc <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    31ac:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    31ae:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    31b0:	mov.w	r1, #0
    31b4:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    31b8:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    31bc:	bmi.w	3302 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    31c0:	ldr	r1, [pc, #528]	; (33d4 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    31c2:	ldrb	r2, [r4, #3]
			*reg = epconf;
    31c4:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    31c6:	movs	r1, #0
    31c8:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    31cc:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    31d0:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    31d2:	ldr.w	r8, [pc, #520]	; 33dc <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    31d6:	bmi.n	32d4 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    31d8:	ldrb	r2, [r4, #4]
			*reg = epconf;
    31da:	ldr	r1, [pc, #508]	; (33d8 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    31dc:	ldr	r4, [pc, #508]	; (33dc <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    31de:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    31e0:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    31e2:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    31e4:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    31e8:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    31ec:	bmi.n	32aa <usb_isr+0x822>
    31ee:	ldrb	r3, [r6, #0]
    31f0:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    31f2:	movs	r1, #0
    31f4:	eor.w	r2, r3, #1
    31f8:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    31fc:	str.w	r1, [r9, #184]	; 0xb8
    3200:	b.n	2e5e <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3202:	ldr	r3, [sp, #4]
    3204:	mov.w	r2, #0
    3208:	strb	r2, [r3, #0]
    320a:	b.n	315e <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    320c:	ldr	r2, [pc, #464]	; (33e0 <usb_isr+0x958>)
    320e:	ldr	r4, [r2, #4]
    3210:	cmp	r4, #0
    3212:	beq.w	2fc6 <usb_isr+0x53e>
    3216:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3218:	ldrh.w	lr, [r5, #4]
    321c:	b.n	3228 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    321e:	adds	r2, #12
			if (list->addr == NULL) break;
    3220:	ldr	r4, [r2, #4]
    3222:	cmp	r4, #0
    3224:	beq.w	2fc6 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3228:	ldrh	r3, [r2, #0]
    322a:	cmp	r3, r0
    322c:	bne.n	321e <usb_isr+0x796>
    322e:	ldrh	r3, [r2, #2]
    3230:	cmp	r3, lr
    3232:	bne.n	321e <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3234:	lsrs	r0, r0, #8
    3236:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3238:	ite	eq
    323a:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    323c:	ldrhne	r0, [r2, #8]
    323e:	b.n	304e <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3240:	ldr	r4, [pc, #416]	; (33e4 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3242:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3244:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3246:	strb	r2, [r4, #1]
    3248:	b.n	304e <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    324a:	cmp.w	r1, #1280	; 0x500
    324e:	bne.w	2fc6 <usb_isr+0x53e>
    3252:	movs	r3, #1
    3254:	movs	r2, #0
    3256:	str	r3, [sp, #4]
    3258:	b.n	2e5e <usb_isr+0x3d6>
    325a:	movw	r2, #8993	; 0x2321
    325e:	cmp	r1, r2
    3260:	beq.n	3252 <usb_isr+0x7ca>
    3262:	b.n	2fc6 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3264:	ldrh	r2, [r5, #2]
    3266:	cmp	r2, #0
    3268:	bne.w	2fc6 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    326c:	ldr	r4, [pc, #376]	; (33e8 <usb_isr+0x960>)
    326e:	str	r0, [sp, #4]
    3270:	lsls	r1, r1, #2
    3272:	add	r4, r1
    3274:	ldrb	r1, [r4, #0]
    3276:	bic.w	r1, r1, #2
    327a:	strb	r1, [r4, #0]
    327c:	b.n	2e5e <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    327e:	bl	2828 <usb_malloc>
				if (p) {
    3282:	cmp	r0, #0
    3284:	beq.w	33f4 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3288:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    328a:	ldr	r2, [pc, #352]	; (33ec <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    328c:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3290:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3294:	bl	2828 <usb_malloc>
				if (p) {
    3298:	cmp	r0, #0
    329a:	beq.n	339c <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    329c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    329e:	ldr	r2, [pc, #336]	; (33f0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    32a0:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    32a4:	str.w	r2, [r9, #40]	; 0x28
    32a8:	b.n	3188 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    32aa:	bl	2828 <usb_malloc>
				if (p) {
    32ae:	cmp	r0, #0
    32b0:	beq.n	3360 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    32b2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    32b4:	ldr	r2, [pc, #308]	; (33ec <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    32b6:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    32ba:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    32be:	bl	2828 <usb_malloc>
				if (p) {
    32c2:	cmp	r0, #0
    32c4:	beq.n	3354 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    32c6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    32c8:	ldr	r2, [pc, #292]	; (33f0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    32ca:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    32ce:	str.w	r2, [r9, #168]	; 0xa8
    32d2:	b.n	31ee <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    32d4:	bl	2828 <usb_malloc>
				if (p) {
    32d8:	cmp	r0, #0
    32da:	beq.w	340c <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    32de:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    32e0:	ldr	r2, [pc, #264]	; (33ec <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    32e2:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    32e6:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    32ea:	bl	2828 <usb_malloc>
				if (p) {
    32ee:	cmp	r0, #0
    32f0:	beq.w	3400 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    32f4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    32f6:	ldr	r2, [pc, #248]	; (33f0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    32f8:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    32fc:	str.w	r2, [r9, #136]	; 0x88
    3300:	b.n	31d8 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3302:	bl	2828 <usb_malloc>
				if (p) {
    3306:	cmp	r0, #0
    3308:	beq.n	3390 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    330a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    330c:	ldr	r2, [pc, #220]	; (33ec <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    330e:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3312:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3316:	bl	2828 <usb_malloc>
				if (p) {
    331a:	cbz	r0, 3384 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    331c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    331e:	ldr	r2, [pc, #208]	; (33f0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3320:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3324:	str.w	r2, [r9, #104]	; 0x68
    3328:	b.n	31c0 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    332a:	bl	2828 <usb_malloc>
				if (p) {
    332e:	cbz	r0, 3378 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3330:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3332:	ldr	r2, [pc, #184]	; (33ec <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3334:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3338:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    333c:	bl	2828 <usb_malloc>
				if (p) {
    3340:	cbz	r0, 336c <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3342:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3344:	ldr	r2, [pc, #168]	; (33f0 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3346:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    334a:	str.w	r2, [r9, #72]	; 0x48
    334e:	b.n	31a4 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3350:	movs	r0, #2
    3352:	b.n	304e <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3354:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3356:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    335a:	adds	r2, #1
    335c:	strb	r2, [r5, #0]
    335e:	b.n	31ee <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3360:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3362:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3366:	adds	r2, #1
    3368:	strb	r2, [r5, #0]
    336a:	b.n	32be <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    336c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    336e:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3372:	adds	r2, #1
    3374:	strb	r2, [r5, #0]
    3376:	b.n	31a4 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3378:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    337a:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    337e:	adds	r2, #1
    3380:	strb	r2, [r5, #0]
    3382:	b.n	333c <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3384:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3386:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    338a:	adds	r2, #1
    338c:	strb	r2, [r5, #0]
    338e:	b.n	31c0 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3390:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3392:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3396:	adds	r2, #1
    3398:	strb	r2, [r5, #0]
    339a:	b.n	3316 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    339c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    339e:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    33a2:	adds	r2, #1
    33a4:	strb	r2, [r5, #0]
    33a6:	b.n	3188 <usb_isr+0x700>
    33a8:	.word	0x1fff1990
    33ac:	.word	0x1fff18f8
    33b0:	.word	0x1fff1950
    33b4:	.word	0x1fff1964
    33b8:	.word	0x1fff18a0
    33bc:	.word	0x1fff1e20
    33c0:	.word	0x00004ca0
    33c4:	.word	0x1fff1981
    33c8:	.word	0x400720c4
    33cc:	.word	0x400720c8
    33d0:	.word	0x400720cc
    33d4:	.word	0x400720d0
    33d8:	.word	0x400720d4
    33dc:	.word	0x1fff0000
    33e0:	.word	0x00004ca8
    33e4:	.word	0x1fff1984
    33e8:	.word	0x400720c0
    33ec:	.word	0x00400088
    33f0:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    33f4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    33f6:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    33fa:	adds	r2, #1
    33fc:	strb	r2, [r5, #0]
    33fe:	b.n	3294 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3400:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3402:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3406:	adds	r2, #1
    3408:	strb	r2, [r5, #0]
    340a:	b.n	31d8 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    340c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    340e:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    3412:	adds	r2, #1
    3414:	strb	r2, [r5, #0]
    3416:	b.n	32ea <usb_isr+0x862>
    3418:	cmp	r0, #64	; 0x40
    341a:	mov	ip, r0
    341c:	it	cs
    341e:	movcs.w	ip, #64	; 0x40
    3422:	add.w	r3, r4, ip
    3426:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3428:	movs	r3, #1
    342a:	rsb	r0, ip, r0
    342e:	mov.w	r8, ip, lsl #16
    3432:	movs	r2, #0
    3434:	str	r3, [sp, #4]
    3436:	b.n	2e68 <usb_isr+0x3e0>

00003438 <usb_init>:
}



void usb_init(void)
{
    3438:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    343c:	ldr	r4, [pc, #156]	; (34dc <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    343e:	bl	3c78 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3442:	movs	r2, #0
    3444:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3448:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    344a:	str	r2, [r3, #0]
		table[i].addr = 0;
    344c:	str	r2, [r3, #4]
    344e:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3450:	cmp	r3, r0
		table[i].desc = 0;
    3452:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3456:	bne.n	344a <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3458:	ldr	r0, [pc, #132]	; (34e0 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    345a:	ldr	r2, [pc, #136]	; (34e4 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    345c:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    345e:	ldr.w	lr, [pc, #156]	; 34fc <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3462:	ldr	r6, [pc, #132]	; (34e8 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3464:	ldr	r5, [pc, #132]	; (34ec <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3466:	ldr	r7, [pc, #136]	; (34f0 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3468:	ldr.w	ip, [pc, #148]	; 3500 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    346c:	ldr.w	r8, [pc, #148]	; 3504 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3470:	orr.w	r3, r3, #262144	; 0x40000
    3474:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3476:	ldr	r3, [r2, #0]
    3478:	orr.w	r3, r3, #50331648	; 0x3000000
    347c:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    347e:	movs	r3, #3
    3480:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3484:	movs	r3, #160	; 0xa0
    3486:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3488:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    348c:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3490:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3494:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3496:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3498:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    349c:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    349e:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    34a0:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    34a2:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    34a4:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    34a6:	ldr	r5, [pc, #76]	; (34f4 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    34a8:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    34ac:	ldr	r0, [pc, #72]	; (34f8 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    34ae:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    34b2:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    34b4:	movs	r3, #1
    34b6:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    34ba:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    34be:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    34c2:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    34c4:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    34c6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    34ca:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    34cc:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    34ce:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    34d2:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    34d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34da:	nop
    34dc:	.word	0x1fff0000
    34e0:	.word	0x40048034
    34e4:	.word	0x4000d800
    34e8:	.word	0x40072140
    34ec:	.word	0x4007209c
    34f0:	.word	0x400720b0
    34f4:	.word	0xe000e435
    34f8:	.word	0xe000e104
    34fc:	.word	0x40072144
    3500:	.word	0x40072080
    3504:	.word	0x40072088

00003508 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3508:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    350a:	ldr	r4, [pc, #176]	; (35bc <yield+0xb4>)
    350c:	ldrb	r3, [r4, #0]
    350e:	cbz	r3, 3512 <yield+0xa>
    3510:	pop	{r3, r4, r5, pc}
	running = 1;
    3512:	movs	r3, #1
    3514:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3516:	bl	1a34 <usb_serial_available>
	if (Serial.available()) serialEvent();
    351a:	cmp	r0, #0
    351c:	bne.n	35a4 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    351e:	bl	3a48 <serial_available>
	if (Serial1.available()) serialEvent1();
    3522:	cmp	r0, #0
    3524:	bne.n	359e <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    3526:	bl	3730 <serial2_available>
	if (Serial2.available()) serialEvent2();
    352a:	cmp	r0, #0
    352c:	bne.n	3598 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    352e:	bl	3d48 <serial3_available>
	if (Serial3.available()) serialEvent3();
    3532:	cbnz	r0, 3592 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3534:	bl	385c <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3538:	cbnz	r0, 358c <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    353a:	bl	3638 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    353e:	cbnz	r0, 3586 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3540:	bl	3b74 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3544:	cbnz	r0, 3580 <yield+0x78>
#endif
	running = 0;
    3546:	movs	r3, #0
    3548:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    354a:	mrs	r3, IPSR
		if (ipsr != 0) return;
    354e:	cmp	r3, #0
    3550:	bne.n	3510 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3552:	mrs	r1, PRIMASK
		__disable_irq();
    3556:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3558:	ldr	r3, [pc, #100]	; (35c0 <yield+0xb8>)
    355a:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    355c:	cbz	r0, 35aa <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    355e:	ldr	r4, [pc, #100]	; (35c4 <yield+0xbc>)
    3560:	ldrb	r2, [r4, #0]
    3562:	cbnz	r2, 35aa <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3564:	ldr	r5, [r0, #20]
    3566:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3568:	movs	r3, #1
    356a:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    356c:	cbz	r5, 35b2 <yield+0xaa>
			firstYield->_prev = nullptr;
    356e:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3570:	cbnz	r1, 3574 <yield+0x6c>
    3572:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3574:	movs	r5, #0
    3576:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3578:	ldr	r3, [r0, #8]
    357a:	blx	r3
		runningFromYield = false;
    357c:	strb	r5, [r4, #0]
    357e:	b.n	3510 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3580:	bl	3634 <serialEvent6()>
    3584:	b.n	3546 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3586:	bl	35cc <serialEvent5()>
    358a:	b.n	3540 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    358c:	bl	3620 <serialEvent4()>
    3590:	b.n	353a <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    3592:	bl	3e44 <serialEvent3()>
    3596:	b.n	3534 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    3598:	bl	361c <serialEvent2()>
    359c:	b.n	352e <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    359e:	bl	3e40 <serialEvent1()>
    35a2:	b.n	3526 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    35a4:	bl	35f8 <serialEvent()>
    35a8:	b.n	351e <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    35aa:	cmp	r1, #0
    35ac:	bne.n	3510 <yield+0x8>
    35ae:	cpsie	i
    35b0:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    35b2:	ldr	r3, [pc, #20]	; (35c8 <yield+0xc0>)
    35b4:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    35b6:	cmp	r1, #0
    35b8:	bne.n	3574 <yield+0x6c>
    35ba:	b.n	3572 <yield+0x6a>
    35bc:	.word	0x1fff1995
    35c0:	.word	0x1fff1ca8
    35c4:	.word	0x1fff1cac
    35c8:	.word	0x1fff1ca4

000035cc <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    35cc:	bx	lr
    35ce:	nop

000035d0 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    35d0:	b.w	1a50 <usb_serial_flush_input>

000035d4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    35d4:	b.w	1a04 <usb_serial_peekchar>

000035d8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    35d8:	b.w	19bc <usb_serial_getchar>

000035dc <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    35dc:	b.w	1a34 <usb_serial_available>

000035e0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    35e0:	b.w	1bf0 <usb_serial_flush_output>

000035e4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    35e4:	b.w	1ba8 <usb_serial_write_buffer_free>

000035e8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    35e8:	mov	r0, r1
    35ea:	mov	r1, r2
    35ec:	b.w	1a88 <usb_serial_write>

000035f0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    35f0:	mov	r0, r1
    35f2:	b.w	1b90 <usb_serial_putchar>
    35f6:	nop

000035f8 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    35f8:	bx	lr
    35fa:	nop

000035fc <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    35fc:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    35fe:	ldr	r2, [pc, #24]	; (3618 <Print::println()+0x1c>)
	return write(buf, 2);
    3600:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3602:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3604:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3606:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3608:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    360a:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    360e:	movs	r2, #2
    3610:	blx	r3
}
    3612:	add	sp, #12
    3614:	ldr.w	pc, [sp], #4
    3618:	.word	0x00004c9c

0000361c <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    361c:	bx	lr
    361e:	nop

00003620 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3620:	bx	lr
    3622:	nop

00003624 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3624:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3626:	bl	490 <setup>
	while (1) {
		loop();
    362a:	bl	494 <loop>
		yield();
    362e:	bl	3508 <yield>
    3632:	b.n	362a <main+0x6>

00003634 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3634:	bx	lr
    3636:	nop

00003638 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3638:	ldr	r2, [pc, #20]	; (3650 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    363a:	ldr	r3, [pc, #24]	; (3654 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    363c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    363e:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3640:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3642:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3644:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3646:	it	cc
    3648:	addcc	r0, #64	; 0x40
    364a:	subs	r0, r0, r3
}
    364c:	bx	lr
    364e:	nop
    3650:	.word	0x1fff199c
    3654:	.word	0x1fff199d

00003658 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3658:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    365a:	ldr	r3, [pc, #172]	; (3708 <uart4_status_isr+0xb0>)
    365c:	ldrb	r2, [r3, #4]
    365e:	lsls	r4, r2, #26
    3660:	bpl.n	36a2 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3662:	ldr	r0, [pc, #168]	; (370c <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3664:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3666:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3668:	ldr	r1, [pc, #164]	; (3710 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    366a:	adds	r3, #1
    366c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    366e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3670:	it	gt
    3672:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3674:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3676:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3678:	beq.n	3682 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    367a:	ldr	r4, [pc, #152]	; (3714 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    367c:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    367e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3680:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3682:	ldr	r2, [pc, #148]	; (3718 <uart4_status_isr+0xc0>)
    3684:	ldr	r1, [r2, #0]
    3686:	cbz	r1, 36a2 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3688:	ldr	r2, [pc, #144]	; (371c <uart4_status_isr+0xc4>)
    368a:	ldrb	r2, [r2, #0]
    368c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    368e:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3690:	itet	cc
    3692:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3696:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3698:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    369a:	cmp	r3, #39	; 0x27
    369c:	itt	gt
    369e:	movgt	r3, #1
    36a0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    36a2:	ldr	r2, [pc, #100]	; (3708 <uart4_status_isr+0xb0>)
    36a4:	ldrb	r3, [r2, #3]
    36a6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    36a8:	lsls	r0, r3, #24
    36aa:	bmi.n	36d0 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    36ac:	lsls	r2, r3, #25
    36ae:	bpl.n	36cc <uart4_status_isr+0x74>
    36b0:	ldr	r3, [pc, #84]	; (3708 <uart4_status_isr+0xb0>)
    36b2:	ldrb	r3, [r3, #4]
    36b4:	lsls	r3, r3, #25
    36b6:	bpl.n	36cc <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    36b8:	ldr	r3, [pc, #100]	; (3720 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    36ba:	ldr	r1, [pc, #104]	; (3724 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    36bc:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    36be:	movs	r2, #0
    36c0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    36c2:	cbz	r3, 36c6 <uart4_status_isr+0x6e>
    36c4:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    36c6:	ldr	r3, [pc, #64]	; (3708 <uart4_status_isr+0xb0>)
    36c8:	movs	r2, #44	; 0x2c
    36ca:	strb	r2, [r3, #3]
	}
}
    36cc:	pop	{r4, r5}
    36ce:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    36d0:	ldrb	r1, [r2, #4]
    36d2:	lsls	r1, r1, #24
    36d4:	bpl.n	36ac <uart4_status_isr+0x54>
		head = tx_buffer_head;
    36d6:	ldr	r1, [pc, #80]	; (3728 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    36d8:	ldr	r0, [pc, #64]	; (371c <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    36da:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    36dc:	ldrb	r1, [r0, #0]
    36de:	uxtb	r1, r1
		if (head == tail) {
    36e0:	cmp	r4, r1
    36e2:	beq.n	3700 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    36e4:	adds	r2, r1, #1
    36e6:	cmp	r2, #39	; 0x27
    36e8:	itt	hi
    36ea:	movhi	r1, #0
    36ec:	movhi	r2, r1
			n = tx_buffer[tail];
    36ee:	ldr	r5, [pc, #60]	; (372c <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    36f0:	ldr	r4, [pc, #20]	; (3708 <uart4_status_isr+0xb0>)
    36f2:	it	ls
    36f4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    36f6:	ldrb	r2, [r5, r2]
    36f8:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    36fa:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    36fc:	strb	r1, [r0, #0]
    36fe:	b.n	36ac <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3700:	movs	r1, #108	; 0x6c
    3702:	strb	r1, [r2, #3]
    3704:	b.n	36ac <uart4_status_isr+0x54>
    3706:	nop
    3708:	.word	0x400ea000
    370c:	.word	0x1fff199c
    3710:	.word	0x1fff199d
    3714:	.word	0x1fff19c8
    3718:	.word	0x1fff1998
    371c:	.word	0x1fff1a09
    3720:	.word	0x1fff1a0c
    3724:	.word	0x1fff1a08
    3728:	.word	0x1fff1a10
    372c:	.word	0x1fff19a0

00003730 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3730:	ldr	r2, [pc, #20]	; (3748 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3732:	ldr	r3, [pc, #24]	; (374c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3734:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3736:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3738:	uxtb	r0, r0
	tail = rx_buffer_tail;
    373a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    373c:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    373e:	it	cc
    3740:	addcc	r0, #64	; 0x40
    3742:	subs	r0, r0, r3
}
    3744:	bx	lr
    3746:	nop
    3748:	.word	0x1fff1a84
    374c:	.word	0x1fff1a19

00003750 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3750:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3752:	ldr	r3, [pc, #224]	; (3834 <uart1_status_isr+0xe4>)
    3754:	ldrb	r2, [r3, #4]
    3756:	tst.w	r2, #48	; 0x30
    375a:	beq.n	37b6 <uart1_status_isr+0x66>
		__disable_irq();
    375c:	cpsid	i
		avail = UART1_RCFIFO;
    375e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3760:	and.w	r2, r1, #255	; 0xff
    3764:	cmp	r1, #0
    3766:	beq.n	37e4 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3768:	cpsie	i
			head = rx_buffer_head;
    376a:	ldr	r7, [pc, #204]	; (3838 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    376c:	ldr	r1, [pc, #204]	; (383c <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    376e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3770:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3772:	ldr	r6, [pc, #204]	; (3840 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3774:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3776:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3778:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    377a:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    377c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    377e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3780:	it	cs
    3782:	movcs	r3, #0
				if (newhead != tail) {
    3784:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3786:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    378a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    378c:	itt	ne
    378e:	strbne	r1, [r6, r3]
    3790:	movne	r0, r3
				}
			} while (--avail > 0);
    3792:	ands.w	r2, r2, #255	; 0xff
    3796:	bne.n	377a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3798:	ldr	r3, [pc, #168]	; (3844 <uart1_status_isr+0xf4>)
    379a:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    379c:	uxtb	r2, r0
    379e:	strb	r2, [r7, #0]
			if (rts_pin) {
    37a0:	cbz	r3, 37b6 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    37a2:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    37a4:	itet	cc
    37a6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    37aa:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    37ac:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    37ae:	cmp	r0, #39	; 0x27
    37b0:	itt	gt
    37b2:	movgt	r2, #1
    37b4:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    37b6:	ldr	r1, [pc, #124]	; (3834 <uart1_status_isr+0xe4>)
    37b8:	ldrb	r2, [r1, #3]
    37ba:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    37bc:	lsls	r5, r2, #24
    37be:	bmi.n	37ee <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    37c0:	lsls	r2, r2, #25
    37c2:	bpl.n	37e0 <uart1_status_isr+0x90>
    37c4:	ldr	r3, [pc, #108]	; (3834 <uart1_status_isr+0xe4>)
    37c6:	ldrb	r3, [r3, #4]
    37c8:	lsls	r3, r3, #25
    37ca:	bpl.n	37e0 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    37cc:	ldr	r3, [pc, #120]	; (3848 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    37ce:	ldr	r1, [pc, #124]	; (384c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    37d0:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    37d2:	movs	r2, #0
    37d4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    37d6:	cbz	r3, 37da <uart1_status_isr+0x8a>
    37d8:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    37da:	ldr	r3, [pc, #88]	; (3834 <uart1_status_isr+0xe4>)
    37dc:	movs	r2, #60	; 0x3c
    37de:	strb	r2, [r3, #3]
	}
}
    37e0:	pop	{r4, r5, r6, r7}
    37e2:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    37e4:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    37e6:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    37e8:	strb	r2, [r3, #17]
			__enable_irq();
    37ea:	cpsie	i
    37ec:	b.n	37b6 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    37ee:	ldrb	r3, [r1, #4]
    37f0:	lsls	r4, r3, #24
    37f2:	bpl.n	37c0 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    37f4:	ldr	r3, [pc, #88]	; (3850 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    37f6:	ldr	r6, [pc, #92]	; (3854 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    37f8:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    37fa:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    37fc:	uxtb	r4, r4
		tail = tx_buffer_tail;
    37fe:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3800:	cmp	r4, r3
    3802:	beq.n	3822 <uart1_status_isr+0xd2>
    3804:	ldr	r5, [pc, #80]	; (3858 <uart1_status_isr+0x108>)
    3806:	b.n	380c <uart1_status_isr+0xbc>
    3808:	cmp	r3, r4
    380a:	beq.n	3822 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    380c:	adds	r3, #1
    380e:	cmp	r3, #40	; 0x28
    3810:	it	cs
    3812:	movcs	r3, #0
			avail = UART1_S1;
    3814:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3816:	ldrb	r0, [r5, r3]
    3818:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    381a:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    381c:	ldrb	r0, [r1, #20]
    381e:	cmp	r0, #7
    3820:	bls.n	3808 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3822:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3824:	ldr	r1, [pc, #12]	; (3834 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3826:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3828:	ldrb	r3, [r1, #4]
    382a:	lsls	r0, r3, #24
    382c:	itt	mi
    382e:	movmi	r3, #124	; 0x7c
    3830:	strbmi	r3, [r1, #3]
    3832:	b.n	37c0 <uart1_status_isr+0x70>
    3834:	.word	0x4006b000
    3838:	.word	0x1fff1a84
    383c:	.word	0x1fff1a19
    3840:	.word	0x1fff1a44
    3844:	.word	0x1fff1a14
    3848:	.word	0x1fff1a88
    384c:	.word	0x1fff1a18
    3850:	.word	0x1fff1a8c
    3854:	.word	0x1fff1a85
    3858:	.word	0x1fff1a1c

0000385c <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    385c:	ldr	r2, [pc, #20]	; (3874 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    385e:	ldr	r3, [pc, #24]	; (3878 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3860:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3862:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3864:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3866:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3868:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    386a:	it	cc
    386c:	addcc	r0, #64	; 0x40
    386e:	subs	r0, r0, r3
}
    3870:	bx	lr
    3872:	nop
    3874:	.word	0x1fff1a94
    3878:	.word	0x1fff1a95

0000387c <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    387c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    387e:	ldr	r3, [pc, #172]	; (392c <uart3_status_isr+0xb0>)
    3880:	ldrb	r2, [r3, #4]
    3882:	lsls	r4, r2, #26
    3884:	bpl.n	38c6 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3886:	ldr	r0, [pc, #168]	; (3930 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3888:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    388a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    388c:	ldr	r1, [pc, #164]	; (3934 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    388e:	adds	r3, #1
    3890:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3892:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3894:	it	gt
    3896:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3898:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    389a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    389c:	beq.n	38a6 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    389e:	ldr	r4, [pc, #152]	; (3938 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    38a0:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    38a2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    38a4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    38a6:	ldr	r2, [pc, #148]	; (393c <uart3_status_isr+0xc0>)
    38a8:	ldr	r1, [r2, #0]
    38aa:	cbz	r1, 38c6 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    38ac:	ldr	r2, [pc, #144]	; (3940 <uart3_status_isr+0xc4>)
    38ae:	ldrb	r2, [r2, #0]
    38b0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    38b2:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    38b4:	itet	cc
    38b6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    38ba:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    38bc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    38be:	cmp	r3, #39	; 0x27
    38c0:	itt	gt
    38c2:	movgt	r3, #1
    38c4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    38c6:	ldr	r2, [pc, #100]	; (392c <uart3_status_isr+0xb0>)
    38c8:	ldrb	r3, [r2, #3]
    38ca:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    38cc:	lsls	r0, r3, #24
    38ce:	bmi.n	38f4 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    38d0:	lsls	r2, r3, #25
    38d2:	bpl.n	38f0 <uart3_status_isr+0x74>
    38d4:	ldr	r3, [pc, #84]	; (392c <uart3_status_isr+0xb0>)
    38d6:	ldrb	r3, [r3, #4]
    38d8:	lsls	r3, r3, #25
    38da:	bpl.n	38f0 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    38dc:	ldr	r3, [pc, #100]	; (3944 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    38de:	ldr	r1, [pc, #104]	; (3948 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    38e0:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    38e2:	movs	r2, #0
    38e4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    38e6:	cbz	r3, 38ea <uart3_status_isr+0x6e>
    38e8:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    38ea:	ldr	r3, [pc, #64]	; (392c <uart3_status_isr+0xb0>)
    38ec:	movs	r2, #44	; 0x2c
    38ee:	strb	r2, [r3, #3]
	}
}
    38f0:	pop	{r4, r5}
    38f2:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    38f4:	ldrb	r1, [r2, #4]
    38f6:	lsls	r1, r1, #24
    38f8:	bpl.n	38d0 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    38fa:	ldr	r1, [pc, #80]	; (394c <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    38fc:	ldr	r0, [pc, #64]	; (3940 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    38fe:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3900:	ldrb	r1, [r0, #0]
    3902:	uxtb	r1, r1
		if (head == tail) {
    3904:	cmp	r4, r1
    3906:	beq.n	3924 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3908:	adds	r2, r1, #1
    390a:	cmp	r2, #39	; 0x27
    390c:	itt	hi
    390e:	movhi	r1, #0
    3910:	movhi	r2, r1
			n = tx_buffer[tail];
    3912:	ldr	r5, [pc, #60]	; (3950 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3914:	ldr	r4, [pc, #20]	; (392c <uart3_status_isr+0xb0>)
    3916:	it	ls
    3918:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    391a:	ldrb	r2, [r5, r2]
    391c:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    391e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3920:	strb	r1, [r0, #0]
    3922:	b.n	38d0 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3924:	movs	r1, #108	; 0x6c
    3926:	strb	r1, [r2, #3]
    3928:	b.n	38d0 <uart3_status_isr+0x54>
    392a:	nop
    392c:	.word	0x4006d000
    3930:	.word	0x1fff1a94
    3934:	.word	0x1fff1a95
    3938:	.word	0x1fff1ac0
    393c:	.word	0x1fff1a90
    3940:	.word	0x1fff1b01
    3944:	.word	0x1fff1b04
    3948:	.word	0x1fff1b00
    394c:	.word	0x1fff1b08
    3950:	.word	0x1fff1a98

00003954 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3954:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3956:	ldr	r4, [pc, #64]	; (3998 <fault_isr+0x44>)
    3958:	b.n	396c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    395a:	ldr	r3, [r4, #0]
    395c:	lsls	r1, r3, #21
    395e:	bmi.n	397c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3960:	ldr	r3, [r4, #0]
    3962:	lsls	r2, r3, #20
    3964:	bmi.n	3986 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3966:	ldr	r3, [r4, #0]
    3968:	lsls	r3, r3, #19
    396a:	bmi.n	3990 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    396c:	ldr	r3, [r4, #0]
    396e:	lsls	r0, r3, #13
    3970:	bpl.n	395a <fault_isr+0x6>
    3972:	bl	2a88 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3976:	ldr	r3, [r4, #0]
    3978:	lsls	r1, r3, #21
    397a:	bpl.n	3960 <fault_isr+0xc>
    397c:	bl	3a68 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3980:	ldr	r3, [r4, #0]
    3982:	lsls	r2, r3, #20
    3984:	bpl.n	3966 <fault_isr+0x12>
    3986:	bl	3750 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    398a:	ldr	r3, [r4, #0]
    398c:	lsls	r3, r3, #19
    398e:	bpl.n	396c <fault_isr+0x18>
    3990:	bl	3d68 <uart2_status_isr>
    3994:	b.n	396c <fault_isr+0x18>
    3996:	nop
    3998:	.word	0x40048034

0000399c <unused_isr>:
	}
}

void unused_isr(void)
{
    399c:	push	{r3, lr}
	fault_isr();
    399e:	bl	3954 <fault_isr>
    39a2:	nop

000039a4 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    39a4:	ldr	r3, [pc, #4]	; (39ac <startup_early_hook+0x8>)
    39a6:	movs	r2, #16
    39a8:	strh	r2, [r3, #0]
    39aa:	bx	lr
    39ac:	.word	0x40052000

000039b0 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    39b0:	bx	lr
    39b2:	nop

000039b4 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    39b4:	ldr	r1, [pc, #36]	; (39dc <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    39b6:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    39b8:	ldr	r3, [r1, #0]
	if (incr != 0) {
    39ba:	cbz	r0, 39ca <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    39bc:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    39be:	add	r0, r3
    39c0:	sub.w	r2, r2, #8192	; 0x2000
    39c4:	cmp	r0, r2
    39c6:	bcs.n	39ce <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    39c8:	str	r0, [r1, #0]
	}
	return prev;
    39ca:	mov	r0, r3
}
    39cc:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    39ce:	bl	403c <__errno>
    39d2:	movs	r3, #12
    39d4:	str	r3, [r0, #0]
			return (void *)-1;
    39d6:	mov.w	r0, #4294967295
    39da:	pop	{r3, pc}
    39dc:	.word	0x1fff0c70

000039e0 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    39e0:	ldr	r2, [pc, #32]	; (3a04 <kinetis_hsrun_disable+0x24>)
    39e2:	ldrb	r3, [r2, #0]
    39e4:	cmp	r3, #128	; 0x80
    39e6:	beq.n	39ec <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    39e8:	movs	r0, #0
}
    39ea:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    39ec:	ldr	r1, [pc, #24]	; (3a08 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    39ee:	ldr	r3, [pc, #28]	; (3a0c <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    39f0:	ldr	r0, [pc, #28]	; (3a10 <kinetis_hsrun_disable+0x30>)
    39f2:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    39f4:	movs	r1, #0
    39f6:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    39f8:	ldrb	r3, [r2, #0]
    39fa:	cmp	r3, #128	; 0x80
    39fc:	beq.n	39f8 <kinetis_hsrun_disable+0x18>
		return 1;
    39fe:	movs	r0, #1
    3a00:	bx	lr
    3a02:	nop
    3a04:	.word	0x4007e003
    3a08:	.word	0x40048044
    3a0c:	.word	0x4007e001
    3a10:	.word	0x22280000

00003a14 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3a14:	ldr	r2, [pc, #36]	; (3a3c <kinetis_hsrun_enable+0x28>)
    3a16:	ldrb	r3, [r2, #0]
    3a18:	cmp	r3, #1
    3a1a:	beq.n	3a20 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3a1c:	movs	r0, #0
}
    3a1e:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3a20:	add.w	r3, r3, #1073741824	; 0x40000000
    3a24:	add.w	r3, r3, #516096	; 0x7e000
    3a28:	movs	r1, #96	; 0x60
    3a2a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3a2c:	ldrb	r3, [r2, #0]
    3a2e:	cmp	r3, #128	; 0x80
    3a30:	bne.n	3a2c <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3a32:	ldr	r3, [pc, #12]	; (3a40 <kinetis_hsrun_enable+0x2c>)
    3a34:	ldr	r2, [pc, #12]	; (3a44 <kinetis_hsrun_enable+0x30>)
    3a36:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3a38:	movs	r0, #1
    3a3a:	bx	lr
    3a3c:	.word	0x4007e003
    3a40:	.word	0x40048044
    3a44:	.word	0x02060000

00003a48 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a48:	ldr	r2, [pc, #20]	; (3a60 <serial_available+0x18>)
	tail = rx_buffer_tail;
    3a4a:	ldr	r3, [pc, #24]	; (3a64 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a4c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3a4e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a50:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3a52:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3a54:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3a56:	it	cc
    3a58:	addcc	r0, #64	; 0x40
    3a5a:	subs	r0, r0, r3
}
    3a5c:	bx	lr
    3a5e:	nop
    3a60:	.word	0x1fff1b10
    3a64:	.word	0x1fff1b11

00003a68 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3a68:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3a6a:	ldr	r3, [pc, #224]	; (3b4c <uart0_status_isr+0xe4>)
    3a6c:	ldrb	r2, [r3, #4]
    3a6e:	tst.w	r2, #48	; 0x30
    3a72:	beq.n	3ace <uart0_status_isr+0x66>
		__disable_irq();
    3a74:	cpsid	i
		avail = UART0_RCFIFO;
    3a76:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3a78:	and.w	r2, r1, #255	; 0xff
    3a7c:	cmp	r1, #0
    3a7e:	beq.n	3afc <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3a80:	cpsie	i
			head = rx_buffer_head;
    3a82:	ldr	r7, [pc, #204]	; (3b50 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3a84:	ldr	r1, [pc, #204]	; (3b54 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3a86:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3a88:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3a8a:	ldr	r6, [pc, #204]	; (3b58 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3a8c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3a8e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3a90:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3a92:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3a94:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3a96:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3a98:	it	cs
    3a9a:	movcs	r3, #0
				if (newhead != tail) {
    3a9c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3a9e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3aa2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3aa4:	itt	ne
    3aa6:	strbne	r1, [r6, r3]
    3aa8:	movne	r0, r3
				}
			} while (--avail > 0);
    3aaa:	ands.w	r2, r2, #255	; 0xff
    3aae:	bne.n	3a92 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3ab0:	ldr	r3, [pc, #168]	; (3b5c <uart0_status_isr+0xf4>)
    3ab2:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3ab4:	uxtb	r2, r0
    3ab6:	strb	r2, [r7, #0]
			if (rts_pin) {
    3ab8:	cbz	r3, 3ace <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3aba:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3abc:	itet	cc
    3abe:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3ac2:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3ac4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ac6:	cmp	r0, #39	; 0x27
    3ac8:	itt	gt
    3aca:	movgt	r2, #1
    3acc:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3ace:	ldr	r1, [pc, #124]	; (3b4c <uart0_status_isr+0xe4>)
    3ad0:	ldrb	r2, [r1, #3]
    3ad2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3ad4:	lsls	r5, r2, #24
    3ad6:	bmi.n	3b06 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3ad8:	lsls	r2, r2, #25
    3ada:	bpl.n	3af8 <uart0_status_isr+0x90>
    3adc:	ldr	r3, [pc, #108]	; (3b4c <uart0_status_isr+0xe4>)
    3ade:	ldrb	r3, [r3, #4]
    3ae0:	lsls	r3, r3, #25
    3ae2:	bpl.n	3af8 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3ae4:	ldr	r3, [pc, #120]	; (3b60 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ae6:	ldr	r1, [pc, #124]	; (3b64 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3ae8:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3aea:	movs	r2, #0
    3aec:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3aee:	cbz	r3, 3af2 <uart0_status_isr+0x8a>
    3af0:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3af2:	ldr	r3, [pc, #88]	; (3b4c <uart0_status_isr+0xe4>)
    3af4:	movs	r2, #60	; 0x3c
    3af6:	strb	r2, [r3, #3]
	}
}
    3af8:	pop	{r4, r5, r6, r7}
    3afa:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3afc:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3afe:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3b00:	strb	r2, [r3, #17]
			__enable_irq();
    3b02:	cpsie	i
    3b04:	b.n	3ace <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3b06:	ldrb	r3, [r1, #4]
    3b08:	lsls	r4, r3, #24
    3b0a:	bpl.n	3ad8 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3b0c:	ldr	r3, [pc, #88]	; (3b68 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3b0e:	ldr	r6, [pc, #92]	; (3b6c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3b10:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3b12:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3b14:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3b16:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3b18:	cmp	r4, r3
    3b1a:	beq.n	3b3a <uart0_status_isr+0xd2>
    3b1c:	ldr	r5, [pc, #80]	; (3b70 <uart0_status_isr+0x108>)
    3b1e:	b.n	3b24 <uart0_status_isr+0xbc>
    3b20:	cmp	r3, r4
    3b22:	beq.n	3b3a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3b24:	adds	r3, #1
    3b26:	cmp	r3, #64	; 0x40
    3b28:	it	cs
    3b2a:	movcs	r3, #0
			avail = UART0_S1;
    3b2c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3b2e:	ldrb	r0, [r5, r3]
    3b30:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3b32:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3b34:	ldrb	r0, [r1, #20]
    3b36:	cmp	r0, #7
    3b38:	bls.n	3b20 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3b3a:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3b3c:	ldr	r1, [pc, #12]	; (3b4c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3b3e:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3b40:	ldrb	r3, [r1, #4]
    3b42:	lsls	r0, r3, #24
    3b44:	itt	mi
    3b46:	movmi	r3, #124	; 0x7c
    3b48:	strbmi	r3, [r1, #3]
    3b4a:	b.n	3ad8 <uart0_status_isr+0x70>
    3b4c:	.word	0x4006a000
    3b50:	.word	0x1fff1b10
    3b54:	.word	0x1fff1b11
    3b58:	.word	0x1fff1b54
    3b5c:	.word	0x1fff1b0c
    3b60:	.word	0x1fff1b98
    3b64:	.word	0x1fff1b94
    3b68:	.word	0x1fff1b9c
    3b6c:	.word	0x1fff1b95
    3b70:	.word	0x1fff1b14

00003b74 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b74:	ldr	r2, [pc, #20]	; (3b8c <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3b76:	ldr	r3, [pc, #24]	; (3b90 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b78:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3b7a:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b7c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3b7e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3b80:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3b82:	it	cc
    3b84:	addcc	r0, #64	; 0x40
    3b86:	subs	r0, r0, r3
}
    3b88:	bx	lr
    3b8a:	nop
    3b8c:	.word	0x1fff1ba4
    3b90:	.word	0x1fff1ba5

00003b94 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3b94:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3b96:	ldr	r3, [pc, #176]	; (3c48 <lpuart0_status_isr+0xb4>)
    3b98:	ldr	r2, [r3, #4]
    3b9a:	lsls	r4, r2, #10
    3b9c:	bpl.n	3bde <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3b9e:	ldr	r0, [pc, #172]	; (3c4c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3ba0:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3ba2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ba4:	ldr	r1, [pc, #168]	; (3c50 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3ba6:	adds	r3, #1
    3ba8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3baa:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3bac:	it	gt
    3bae:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3bb0:	cmp	r3, r1
    3bb2:	beq.n	3bbe <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3bb4:	ldr	r4, [pc, #156]	; (3c54 <lpuart0_status_isr+0xc0>)
    3bb6:	uxtb	r2, r2
			rx_buffer_head = head;
    3bb8:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3bba:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3bbc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3bbe:	ldr	r2, [pc, #152]	; (3c58 <lpuart0_status_isr+0xc4>)
    3bc0:	ldr	r1, [r2, #0]
    3bc2:	cbz	r1, 3bde <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3bc4:	ldr	r2, [pc, #148]	; (3c5c <lpuart0_status_isr+0xc8>)
    3bc6:	ldrb	r2, [r2, #0]
    3bc8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3bca:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3bcc:	itet	cc
    3bce:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3bd2:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3bd4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3bd6:	cmp	r3, #39	; 0x27
    3bd8:	itt	gt
    3bda:	movgt	r3, #1
    3bdc:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3bde:	ldr	r2, [pc, #104]	; (3c48 <lpuart0_status_isr+0xb4>)
    3be0:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3be2:	lsls	r0, r3, #8
    3be4:	bpl.n	3bec <lpuart0_status_isr+0x58>
    3be6:	ldr	r2, [r2, #4]
    3be8:	lsls	r1, r2, #8
    3bea:	bmi.n	3c10 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3bec:	lsls	r2, r3, #9
    3bee:	bpl.n	3c0c <lpuart0_status_isr+0x78>
    3bf0:	ldr	r3, [pc, #84]	; (3c48 <lpuart0_status_isr+0xb4>)
    3bf2:	ldr	r3, [r3, #4]
    3bf4:	lsls	r3, r3, #9
    3bf6:	bpl.n	3c0c <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3bf8:	ldr	r3, [pc, #100]	; (3c60 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3bfa:	ldr	r1, [pc, #104]	; (3c64 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3bfc:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3bfe:	movs	r2, #0
    3c00:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3c02:	cbz	r3, 3c06 <lpuart0_status_isr+0x72>
    3c04:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3c06:	ldr	r3, [pc, #96]	; (3c68 <lpuart0_status_isr+0xd4>)
    3c08:	movs	r2, #0
    3c0a:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3c0c:	pop	{r4, r5}
    3c0e:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3c10:	ldr	r2, [pc, #88]	; (3c6c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3c12:	ldr	r1, [pc, #72]	; (3c5c <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3c14:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3c16:	ldrb	r2, [r1, #0]
    3c18:	uxtb	r2, r2
		if (head == tail) {
    3c1a:	cmp	r0, r2
    3c1c:	beq.n	3c3a <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3c1e:	adds	r2, #1
    3c20:	cmp	r2, #39	; 0x27
    3c22:	itt	hi
    3c24:	movhi	r0, #0
    3c26:	movhi	r2, r0
			n = tx_buffer[tail];
    3c28:	ldr	r5, [pc, #68]	; (3c70 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3c2a:	ldr	r4, [pc, #28]	; (3c48 <lpuart0_status_isr+0xb4>)
    3c2c:	it	ls
    3c2e:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3c30:	ldrb	r2, [r5, r2]
    3c32:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3c34:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3c36:	strb	r0, [r1, #0]
    3c38:	b.n	3bec <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3c3a:	ldr	r0, [pc, #56]	; (3c74 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3c3c:	ldr	r2, [pc, #40]	; (3c68 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3c3e:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3c40:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3c42:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3c44:	str	r1, [r2, #0]
    3c46:	b.n	3bec <lpuart0_status_isr+0x58>
    3c48:	.word	0x400c4000
    3c4c:	.word	0x1fff1ba4
    3c50:	.word	0x1fff1ba5
    3c54:	.word	0x1fff1bd0
    3c58:	.word	0x1fff1ba0
    3c5c:	.word	0x1fff1c11
    3c60:	.word	0x1fff1c14
    3c64:	.word	0x1fff1c10
    3c68:	.word	0x43880158
    3c6c:	.word	0x1fff1c18
    3c70:	.word	0x1fff1ba8
    3c74:	.word	0x4388015c

00003c78 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3c78:	push	{r4, lr}
    3c7a:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3c7c:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3c7e:	bl	39e0 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3c82:	ldr	r2, [pc, #96]	; (3ce4 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3c84:	ldr	r3, [pc, #96]	; (3ce8 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3c86:	ldr	r1, [pc, #100]	; (3cec <usb_init_serialnumber+0x74>)
    3c88:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3c8a:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3c8c:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3c8e:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3c90:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3c92:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3c94:	ldrb	r3, [r2, #0]
    3c96:	lsls	r3, r3, #24
    3c98:	bpl.n	3c94 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3c9a:	ldr	r3, [pc, #84]	; (3cf0 <usb_init_serialnumber+0x78>)
    3c9c:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3c9e:	bl	3a14 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3ca2:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3ca4:	ldr	r3, [pc, #76]	; (3cf4 <usb_init_serialnumber+0x7c>)
    3ca6:	cmp	r4, r3
    3ca8:	itt	ls
    3caa:	addls.w	r4, r4, r4, lsl #2
    3cae:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3cb0:	mov	r0, r4
    3cb2:	ldr	r4, [pc, #68]	; (3cf8 <usb_init_serialnumber+0x80>)
    3cb4:	add	r1, sp, #4
    3cb6:	movs	r2, #10
    3cb8:	bl	3cfc <ultoa>
    3cbc:	add	r1, sp, #4
    3cbe:	mov	r0, r4
	for (i=0; i<10; i++) {
    3cc0:	movs	r3, #0
		char c = buf[i];
    3cc2:	ldrb.w	r2, [r1], #1
    3cc6:	adds	r3, #1
		if (!c) break;
    3cc8:	cbz	r2, 3cda <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3cca:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3ccc:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3cd0:	bne.n	3cc2 <usb_init_serialnumber+0x4a>
    3cd2:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3cd4:	strb	r3, [r4, #0]
}
    3cd6:	add	sp, #16
    3cd8:	pop	{r4, pc}
    3cda:	lsls	r3, r3, #1
    3cdc:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3cde:	strb	r3, [r4, #0]
}
    3ce0:	add	sp, #16
    3ce2:	pop	{r4, pc}
    3ce4:	.word	0x40020004
    3ce8:	.word	0x40020000
    3cec:	.word	0x41070000
    3cf0:	.word	0x4002000c
    3cf4:	.word	0x0098967f
    3cf8:	.word	0x1fff0d54

00003cfc <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3cfc:	push	{r4, r5, r6, r7}
    3cfe:	subs	r5, r1, #1
    3d00:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3d02:	movs	r4, #0
    3d04:	b.n	3d08 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3d06:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3d08:	udiv	r3, r0, r2
    3d0c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3d10:	cmp	r0, #9
    3d12:	add.w	r7, r0, #48	; 0x30
    3d16:	itet	hi
    3d18:	addhi	r0, #55	; 0x37
    3d1a:	uxtbls	r0, r7
    3d1c:	uxtbhi	r0, r0
    3d1e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3d22:	mov	r0, r3
    3d24:	cmp	r3, #0
    3d26:	bne.n	3d06 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3d28:	adds	r2, r1, r4
    3d2a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3d2c:	cbz	r4, 3d42 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3d2e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3d30:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3d34:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3d36:	adds	r3, #1
    3d38:	subs	r0, r4, r3
    3d3a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3d3c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3d40:	blt.n	3d2e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3d42:	mov	r0, r1
    3d44:	pop	{r4, r5, r6, r7}
    3d46:	bx	lr

00003d48 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d48:	ldr	r2, [pc, #20]	; (3d60 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3d4a:	ldr	r3, [pc, #24]	; (3d64 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d4c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3d4e:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d50:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3d52:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3d54:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3d56:	it	cc
    3d58:	addcc	r0, #64	; 0x40
    3d5a:	subs	r0, r0, r3
}
    3d5c:	bx	lr
    3d5e:	nop
    3d60:	.word	0x1fff1c20
    3d64:	.word	0x1fff1c21

00003d68 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3d68:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3d6a:	ldr	r3, [pc, #172]	; (3e18 <uart2_status_isr+0xb0>)
    3d6c:	ldrb	r2, [r3, #4]
    3d6e:	lsls	r4, r2, #26
    3d70:	bpl.n	3db2 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3d72:	ldr	r0, [pc, #168]	; (3e1c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3d74:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3d76:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d78:	ldr	r1, [pc, #164]	; (3e20 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3d7a:	adds	r3, #1
    3d7c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d7e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3d80:	it	gt
    3d82:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d84:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3d86:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d88:	beq.n	3d92 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3d8a:	ldr	r4, [pc, #152]	; (3e24 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3d8c:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3d8e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3d90:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3d92:	ldr	r2, [pc, #148]	; (3e28 <uart2_status_isr+0xc0>)
    3d94:	ldr	r1, [r2, #0]
    3d96:	cbz	r1, 3db2 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3d98:	ldr	r2, [pc, #144]	; (3e2c <uart2_status_isr+0xc4>)
    3d9a:	ldrb	r2, [r2, #0]
    3d9c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3d9e:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3da0:	itet	cc
    3da2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3da6:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3da8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3daa:	cmp	r3, #39	; 0x27
    3dac:	itt	gt
    3dae:	movgt	r3, #1
    3db0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3db2:	ldr	r2, [pc, #100]	; (3e18 <uart2_status_isr+0xb0>)
    3db4:	ldrb	r3, [r2, #3]
    3db6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3db8:	lsls	r0, r3, #24
    3dba:	bmi.n	3de0 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3dbc:	lsls	r2, r3, #25
    3dbe:	bpl.n	3ddc <uart2_status_isr+0x74>
    3dc0:	ldr	r3, [pc, #84]	; (3e18 <uart2_status_isr+0xb0>)
    3dc2:	ldrb	r3, [r3, #4]
    3dc4:	lsls	r3, r3, #25
    3dc6:	bpl.n	3ddc <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3dc8:	ldr	r3, [pc, #100]	; (3e30 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3dca:	ldr	r1, [pc, #104]	; (3e34 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3dcc:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3dce:	movs	r2, #0
    3dd0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3dd2:	cbz	r3, 3dd6 <uart2_status_isr+0x6e>
    3dd4:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3dd6:	ldr	r3, [pc, #64]	; (3e18 <uart2_status_isr+0xb0>)
    3dd8:	movs	r2, #44	; 0x2c
    3dda:	strb	r2, [r3, #3]
	}
}
    3ddc:	pop	{r4, r5}
    3dde:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3de0:	ldrb	r1, [r2, #4]
    3de2:	lsls	r1, r1, #24
    3de4:	bpl.n	3dbc <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3de6:	ldr	r1, [pc, #80]	; (3e38 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3de8:	ldr	r0, [pc, #64]	; (3e2c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3dea:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3dec:	ldrb	r1, [r0, #0]
    3dee:	uxtb	r1, r1
		if (head == tail) {
    3df0:	cmp	r4, r1
    3df2:	beq.n	3e10 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3df4:	adds	r2, r1, #1
    3df6:	cmp	r2, #39	; 0x27
    3df8:	itt	hi
    3dfa:	movhi	r1, #0
    3dfc:	movhi	r2, r1
			n = tx_buffer[tail];
    3dfe:	ldr	r5, [pc, #60]	; (3e3c <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3e00:	ldr	r4, [pc, #20]	; (3e18 <uart2_status_isr+0xb0>)
    3e02:	it	ls
    3e04:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3e06:	ldrb	r2, [r5, r2]
    3e08:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3e0a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3e0c:	strb	r1, [r0, #0]
    3e0e:	b.n	3dbc <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3e10:	movs	r1, #108	; 0x6c
    3e12:	strb	r1, [r2, #3]
    3e14:	b.n	3dbc <uart2_status_isr+0x54>
    3e16:	nop
    3e18:	.word	0x4006c000
    3e1c:	.word	0x1fff1c20
    3e20:	.word	0x1fff1c21
    3e24:	.word	0x1fff1c4c
    3e28:	.word	0x1fff1c1c
    3e2c:	.word	0x1fff1c8d
    3e30:	.word	0x1fff1c90
    3e34:	.word	0x1fff1c8c
    3e38:	.word	0x1fff1c94
    3e3c:	.word	0x1fff1c24

00003e40 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3e40:	bx	lr
    3e42:	nop

00003e44 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3e44:	bx	lr
    3e46:	nop

00003e48 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3e48:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3e4a:	mrs	r2, PRIMASK
		__disable_irq();
    3e4e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3e50:	ldrb	r3, [r0, #29]
    3e52:	cbnz	r3, 3e62 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3e54:	ldrb	r1, [r0, #28]
    3e56:	cmp	r1, #1
    3e58:	beq.n	3e6c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3e5a:	cmp	r1, #3
    3e5c:	beq.n	3e80 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3e5e:	movs	r3, #1
    3e60:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3e62:	cbnz	r2, 3e66 <EventResponder::triggerEventNotImmediate()+0x1e>
    3e64:	cpsie	i
	}
	enableInterrupts(irq);
}
    3e66:	ldr.w	r4, [sp], #4
    3e6a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3e6c:	ldr	r4, [pc, #68]	; (3eb4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3e6e:	ldr	r1, [r4, #0]
    3e70:	cbz	r1, 3e9c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3e72:	ldr	r1, [pc, #68]	; (3eb8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3e74:	str	r3, [r0, #20]
				_prev = lastYield;
    3e76:	ldr	r3, [r1, #0]
    3e78:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3e7a:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3e7c:	str	r0, [r3, #20]
    3e7e:	b.n	3e5e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3e80:	ldr	r4, [pc, #56]	; (3ebc <EventResponder::triggerEventNotImmediate()+0x74>)
    3e82:	ldr	r1, [r4, #0]
    3e84:	cbz	r1, 3ea8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3e86:	ldr	r1, [pc, #56]	; (3ec0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3e88:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3e8a:	ldr	r3, [r1, #0]
    3e8c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3e8e:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3e90:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3e92:	ldr	r3, [pc, #48]	; (3ec4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3e94:	mov.w	r1, #268435456	; 0x10000000
    3e98:	str	r1, [r3, #0]
    3e9a:	b.n	3e5e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3e9c:	ldr	r3, [pc, #24]	; (3eb8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3e9e:	str	r1, [r0, #20]
				_prev = nullptr;
    3ea0:	str	r1, [r0, #24]
				firstYield = this;
    3ea2:	str	r0, [r4, #0]
				lastYield = this;
    3ea4:	str	r0, [r3, #0]
    3ea6:	b.n	3e5e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3ea8:	ldr	r3, [pc, #20]	; (3ec0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3eaa:	str	r1, [r0, #20]
				_prev = nullptr;
    3eac:	str	r1, [r0, #24]
				firstInterrupt = this;
    3eae:	str	r0, [r4, #0]
				lastInterrupt = this;
    3eb0:	str	r0, [r3, #0]
    3eb2:	b.n	3e92 <EventResponder::triggerEventNotImmediate()+0x4a>
    3eb4:	.word	0x1fff1ca8
    3eb8:	.word	0x1fff1ca4
    3ebc:	.word	0x1fff1c98
    3ec0:	.word	0x1fff1c9c
    3ec4:	.word	0xe000ed04

00003ec8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3ec8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3eca:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3ecc:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3ece:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3ed0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3ed2:	beq.n	3edc <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3ed4:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3ed8:	b.w	3e48 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3edc:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3ede:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3ee2:	bx	r3

00003ee4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3ee4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3ee6:	mrs	r2, PRIMASK
		__disable_irq();
    3eea:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3eec:	ldr	r4, [pc, #48]	; (3f20 <EventResponder::runFromInterrupt()+0x3c>)
    3eee:	ldr	r0, [r4, #0]
		if (first) {
    3ef0:	cbz	r0, 3f14 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3ef2:	ldr	r6, [pc, #48]	; (3f24 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3ef4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3ef6:	ldr	r3, [r0, #20]
    3ef8:	str	r3, [r4, #0]
			if (firstInterrupt) {
    3efa:	cbz	r3, 3f1a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3efc:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3efe:	cbnz	r2, 3f02 <EventResponder::runFromInterrupt()+0x1e>
    3f00:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3f02:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3f04:	ldr	r3, [r0, #8]
    3f06:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3f08:	mrs	r2, PRIMASK
		__disable_irq();
    3f0c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3f0e:	ldr	r0, [r4, #0]
		if (first) {
    3f10:	cmp	r0, #0
    3f12:	bne.n	3ef6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3f14:	cbnz	r2, 3f18 <EventResponder::runFromInterrupt()+0x34>
    3f16:	cpsie	i
    3f18:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3f1a:	str	r3, [r6, #0]
    3f1c:	b.n	3efe <EventResponder::runFromInterrupt()+0x1a>
    3f1e:	nop
    3f20:	.word	0x1fff1c98
    3f24:	.word	0x1fff1c9c

00003f28 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3f28:	b.w	3ee4 <EventResponder::runFromInterrupt()>

00003f2c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3f2c:	ldr	r2, [pc, #96]	; (3f90 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3f2e:	push	{r4, r5}
	if (listActive == nullptr) {
    3f30:	ldr	r4, [r2, #0]
    3f32:	cmp	r4, #0
    3f34:	beq.n	3f86 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3f36:	ldr	r3, [r0, #0]
    3f38:	ldr	r1, [r4, #0]
    3f3a:	cmp	r3, r1
    3f3c:	bcs.n	3f5c <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3f3e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3f40:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3f42:	str	r4, [r0, #8]
		_prev = nullptr;
    3f44:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3f46:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3f48:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3f4a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3f4c:	movs	r3, #2
    3f4e:	strb	r3, [r0, #20]
}
    3f50:	pop	{r4, r5}
    3f52:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3f54:	ldr	r1, [r2, #0]
    3f56:	cmp	r3, r1
    3f58:	mov	r4, r2
    3f5a:	bcc.n	3f6e <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3f5c:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3f5e:	subs	r3, r3, r1
    3f60:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3f62:	cmp	r2, #0
    3f64:	bne.n	3f54 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3f66:	str	r2, [r0, #8]
		_prev = timer;
    3f68:	str	r4, [r0, #12]
		timer->_next = this;
    3f6a:	str	r0, [r4, #8]
    3f6c:	b.n	3f4c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3f6e:	ldr	r2, [r2, #12]
    3f70:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3f72:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3f74:	str	r0, [r4, #12]
				_prev->_next = this;
    3f76:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3f78:	subs	r3, r1, r3
				_state = TimerActive;
    3f7a:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    3f7c:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    3f7e:	str	r3, [r4, #0]
				_state = TimerActive;
    3f80:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3f82:	pop	{r4, r5}
    3f84:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3f86:	str	r4, [r0, #8]
		_prev = nullptr;
    3f88:	str	r4, [r0, #12]
		listActive = this;
    3f8a:	str	r0, [r2, #0]
    3f8c:	b.n	3f4c <MillisTimer::addToActiveList()+0x20>
    3f8e:	nop
    3f90:	.word	0x1fff1ca0

00003f94 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3f94:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3f96:	ldr	r6, [pc, #136]	; (4020 <MillisTimer::runFromTimer()+0x8c>)
    3f98:	ldr	r4, [r6, #0]
	while (timer) {
    3f9a:	cbz	r4, 3fe8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3f9c:	ldr	r3, [r4, #0]
    3f9e:	cmp	r3, #0
    3fa0:	bne.n	4018 <MillisTimer::runFromTimer()+0x84>
    3fa2:	ldr	r7, [pc, #128]	; (4024 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3fa4:	mov	r5, r3
    3fa6:	b.n	3fb2 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3fa8:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3faa:	cbz	r4, 3fe8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3fac:	ldr	r3, [r4, #0]
    3fae:	cmp	r3, #0
    3fb0:	bne.n	4018 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3fb2:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3fb4:	cbz	r3, 3fb8 <MillisTimer::runFromTimer()+0x24>
    3fb6:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3fb8:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3fba:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3fbc:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3fbe:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3fc0:	ldr	r3, [r3, #0]
    3fc2:	cmp	r3, r7
    3fc4:	bne.n	400a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3fc6:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3fc8:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3fca:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3fcc:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3fce:	beq.n	4012 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3fd0:	bl	3e48 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3fd4:	ldr	r3, [r4, #4]
    3fd6:	cmp	r3, #0
    3fd8:	beq.n	3fa8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3fda:	str	r3, [r4, #0]
				timer->addToActiveList();
    3fdc:	mov	r0, r4
    3fde:	bl	3f2c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3fe2:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3fe4:	cmp	r4, #0
    3fe6:	bne.n	3fac <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3fe8:	mrs	r3, PRIMASK
		__disable_irq();
    3fec:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3fee:	ldr	r2, [pc, #56]	; (4028 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3ff0:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3ff2:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3ff4:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3ff6:	cbnz	r3, 3ffa <MillisTimer::runFromTimer()+0x66>
    3ff8:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3ffa:	cbz	r0, 4008 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3ffc:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3ffe:	bl	3f2c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4002:	mov	r0, r4
    4004:	cmp	r0, #0
    4006:	bne.n	3ffc <MillisTimer::runFromTimer()+0x68>
    4008:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    400a:	mov	r2, r4
    400c:	movs	r1, #0
    400e:	blx	r3
    4010:	b.n	3fd4 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4012:	ldr	r3, [r0, #8]
    4014:	blx	r3
    4016:	b.n	3fd4 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4018:	subs	r3, #1
    401a:	str	r3, [r4, #0]
			break;
    401c:	b.n	3fe8 <MillisTimer::runFromTimer()+0x54>
    401e:	nop
    4020:	.word	0x1fff1ca0
    4024:	.word	0x00003ec9
    4028:	.word	0x1fff1cb0

0000402c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    402c:	ldr	r2, [pc, #8]	; (4038 <systick_isr+0xc>)
    402e:	ldr	r3, [r2, #0]
    4030:	adds	r3, #1
    4032:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4034:	b.w	3f94 <MillisTimer::runFromTimer()>
    4038:	.word	0x1fff1838

0000403c <__errno>:
    403c:	ldr	r3, [pc, #4]	; (4044 <__errno+0x8>)
    403e:	ldr	r0, [r3, #0]
    4040:	bx	lr
    4042:	nop
    4044:	.word	0x1fff1198

00004048 <__libc_init_array>:
    4048:	push	{r4, r5, r6, lr}
    404a:	ldr	r6, [pc, #60]	; (4088 <__libc_init_array+0x40>)
    404c:	ldr	r5, [pc, #60]	; (408c <__libc_init_array+0x44>)
    404e:	subs	r6, r6, r5
    4050:	asrs	r6, r6, #2
    4052:	it	ne
    4054:	movne	r4, #0
    4056:	beq.n	4064 <__libc_init_array+0x1c>
    4058:	adds	r4, #1
    405a:	ldr.w	r3, [r5], #4
    405e:	blx	r3
    4060:	cmp	r6, r4
    4062:	bne.n	4058 <__libc_init_array+0x10>
    4064:	ldr	r6, [pc, #40]	; (4090 <__libc_init_array+0x48>)
    4066:	ldr	r5, [pc, #44]	; (4094 <__libc_init_array+0x4c>)
    4068:	subs	r6, r6, r5
    406a:	bl	4d00 <_init>
    406e:	asrs	r6, r6, #2
    4070:	it	ne
    4072:	movne	r4, #0
    4074:	beq.n	4084 <__libc_init_array+0x3c>
    4076:	adds	r4, #1
    4078:	ldr.w	r3, [r5], #4
    407c:	blx	r3
    407e:	cmp	r6, r4
    4080:	bne.n	4076 <__libc_init_array+0x2e>
    4082:	pop	{r4, r5, r6, pc}
    4084:	pop	{r4, r5, r6, pc}
    4086:	nop
    4088:	.word	0x00004d0c
    408c:	.word	0x00004d0c
    4090:	.word	0x00004d18
    4094:	.word	0x00004d0c

00004098 <malloc>:
    4098:	ldr	r3, [pc, #8]	; (40a4 <malloc+0xc>)
    409a:	mov	r1, r0
    409c:	ldr	r0, [r3, #0]
    409e:	b.w	40a8 <_malloc_r>
    40a2:	nop
    40a4:	.word	0x1fff1198

000040a8 <_malloc_r>:
    40a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40ac:	add.w	r5, r1, #11
    40b0:	cmp	r5, #22
    40b2:	sub	sp, #12
    40b4:	mov	r6, r0
    40b6:	bls.w	41f8 <_malloc_r+0x150>
    40ba:	bics.w	r5, r5, #7
    40be:	bmi.w	4240 <_malloc_r+0x198>
    40c2:	cmp	r1, r5
    40c4:	bhi.w	4240 <_malloc_r+0x198>
    40c8:	bl	4618 <__malloc_lock>
    40cc:	cmp.w	r5, #504	; 0x1f8
    40d0:	bcc.w	460c <_malloc_r+0x564>
    40d4:	lsrs	r3, r5, #9
    40d6:	beq.w	424e <_malloc_r+0x1a6>
    40da:	cmp	r3, #4
    40dc:	bhi.w	43e6 <_malloc_r+0x33e>
    40e0:	lsrs	r0, r5, #6
    40e2:	add.w	lr, r0, #57	; 0x39
    40e6:	mov.w	r3, lr, lsl #1
    40ea:	adds	r0, #56	; 0x38
    40ec:	ldr	r7, [pc, #784]	; (4400 <_malloc_r+0x358>)
    40ee:	add.w	r3, r7, r3, lsl #2
    40f2:	sub.w	r1, r3, #8
    40f6:	ldr	r4, [r3, #4]
    40f8:	cmp	r1, r4
    40fa:	bne.n	410c <_malloc_r+0x64>
    40fc:	b.n	4258 <_malloc_r+0x1b0>
    40fe:	cmp	r2, #0
    4100:	bge.w	425c <_malloc_r+0x1b4>
    4104:	ldr	r4, [r4, #12]
    4106:	cmp	r1, r4
    4108:	beq.w	4258 <_malloc_r+0x1b0>
    410c:	ldr	r3, [r4, #4]
    410e:	bic.w	r3, r3, #3
    4112:	subs	r2, r3, r5
    4114:	cmp	r2, #15
    4116:	ble.n	40fe <_malloc_r+0x56>
    4118:	ldr	r1, [pc, #740]	; (4400 <_malloc_r+0x358>)
    411a:	ldr	r4, [r7, #16]
    411c:	add.w	lr, r1, #8
    4120:	cmp	r4, lr
    4122:	beq.w	448c <_malloc_r+0x3e4>
    4126:	ldr	r3, [r4, #4]
    4128:	bic.w	r3, r3, #3
    412c:	subs	r2, r3, r5
    412e:	cmp	r2, #15
    4130:	bgt.w	4466 <_malloc_r+0x3be>
    4134:	cmp	r2, #0
    4136:	str.w	lr, [r1, #20]
    413a:	str.w	lr, [r1, #16]
    413e:	bge.w	427e <_malloc_r+0x1d6>
    4142:	cmp.w	r3, #512	; 0x200
    4146:	bcs.w	4418 <_malloc_r+0x370>
    414a:	lsrs	r3, r3, #3
    414c:	add.w	ip, r3, #1
    4150:	movs	r2, #1
    4152:	asrs	r3, r3, #2
    4154:	lsl.w	r3, r2, r3
    4158:	ldr	r2, [r1, #4]
    415a:	ldr.w	r8, [r1, ip, lsl #3]
    415e:	str.w	r8, [r4, #8]
    4162:	add.w	r9, r1, ip, lsl #3
    4166:	orrs	r2, r3
    4168:	sub.w	r3, r9, #8
    416c:	str	r3, [r4, #12]
    416e:	str	r2, [r1, #4]
    4170:	str.w	r4, [r1, ip, lsl #3]
    4174:	str.w	r4, [r8, #12]
    4178:	asrs	r3, r0, #2
    417a:	movs	r4, #1
    417c:	lsls	r4, r3
    417e:	cmp	r4, r2
    4180:	bhi.w	4298 <_malloc_r+0x1f0>
    4184:	tst	r4, r2
    4186:	bne.n	4196 <_malloc_r+0xee>
    4188:	bic.w	r0, r0, #3
    418c:	lsls	r4, r4, #1
    418e:	tst	r4, r2
    4190:	add.w	r0, r0, #4
    4194:	beq.n	418c <_malloc_r+0xe4>
    4196:	add.w	r9, r7, r0, lsl #3
    419a:	mov	ip, r9
    419c:	mov	r8, r0
    419e:	ldr.w	r1, [ip, #12]
    41a2:	cmp	ip, r1
    41a4:	bne.n	41b6 <_malloc_r+0x10e>
    41a6:	b.n	4490 <_malloc_r+0x3e8>
    41a8:	cmp	r2, #0
    41aa:	bge.w	44b0 <_malloc_r+0x408>
    41ae:	ldr	r1, [r1, #12]
    41b0:	cmp	ip, r1
    41b2:	beq.w	4490 <_malloc_r+0x3e8>
    41b6:	ldr	r3, [r1, #4]
    41b8:	bic.w	r3, r3, #3
    41bc:	subs	r2, r3, r5
    41be:	cmp	r2, #15
    41c0:	ble.n	41a8 <_malloc_r+0x100>
    41c2:	mov	r4, r1
    41c4:	ldr.w	ip, [r1, #12]
    41c8:	ldr.w	r8, [r4, #8]!
    41cc:	adds	r3, r1, r5
    41ce:	orr.w	r5, r5, #1
    41d2:	str	r5, [r1, #4]
    41d4:	orr.w	r1, r2, #1
    41d8:	str.w	ip, [r8, #12]
    41dc:	mov	r0, r6
    41de:	str.w	r8, [ip, #8]
    41e2:	str	r3, [r7, #20]
    41e4:	str	r3, [r7, #16]
    41e6:	str.w	lr, [r3, #12]
    41ea:	str.w	lr, [r3, #8]
    41ee:	str	r1, [r3, #4]
    41f0:	str	r2, [r3, r2]
    41f2:	bl	461c <__malloc_unlock>
    41f6:	b.n	4238 <_malloc_r+0x190>
    41f8:	cmp	r1, #16
    41fa:	bhi.n	4240 <_malloc_r+0x198>
    41fc:	bl	4618 <__malloc_lock>
    4200:	movs	r5, #16
    4202:	movs	r3, #6
    4204:	movs	r0, #2
    4206:	ldr	r7, [pc, #504]	; (4400 <_malloc_r+0x358>)
    4208:	add.w	r3, r7, r3, lsl #2
    420c:	sub.w	r2, r3, #8
    4210:	ldr	r4, [r3, #4]
    4212:	cmp	r4, r2
    4214:	beq.w	44a2 <_malloc_r+0x3fa>
    4218:	ldr	r3, [r4, #4]
    421a:	ldr	r1, [r4, #12]
    421c:	ldr	r5, [r4, #8]
    421e:	bic.w	r3, r3, #3
    4222:	add	r3, r4
    4224:	mov	r0, r6
    4226:	ldr	r2, [r3, #4]
    4228:	str	r1, [r5, #12]
    422a:	orr.w	r2, r2, #1
    422e:	str	r5, [r1, #8]
    4230:	str	r2, [r3, #4]
    4232:	bl	461c <__malloc_unlock>
    4236:	adds	r4, #8
    4238:	mov	r0, r4
    423a:	add	sp, #12
    423c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4240:	movs	r4, #0
    4242:	movs	r3, #12
    4244:	mov	r0, r4
    4246:	str	r3, [r6, #0]
    4248:	add	sp, #12
    424a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    424e:	movs	r3, #128	; 0x80
    4250:	mov.w	lr, #64	; 0x40
    4254:	movs	r0, #63	; 0x3f
    4256:	b.n	40ec <_malloc_r+0x44>
    4258:	mov	r0, lr
    425a:	b.n	4118 <_malloc_r+0x70>
    425c:	add	r3, r4
    425e:	ldr	r1, [r4, #12]
    4260:	ldr	r2, [r3, #4]
    4262:	ldr	r5, [r4, #8]
    4264:	orr.w	r2, r2, #1
    4268:	str	r1, [r5, #12]
    426a:	mov	r0, r6
    426c:	str	r5, [r1, #8]
    426e:	str	r2, [r3, #4]
    4270:	bl	461c <__malloc_unlock>
    4274:	adds	r4, #8
    4276:	mov	r0, r4
    4278:	add	sp, #12
    427a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    427e:	add	r3, r4
    4280:	mov	r0, r6
    4282:	ldr	r2, [r3, #4]
    4284:	orr.w	r2, r2, #1
    4288:	str	r2, [r3, #4]
    428a:	bl	461c <__malloc_unlock>
    428e:	adds	r4, #8
    4290:	mov	r0, r4
    4292:	add	sp, #12
    4294:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4298:	ldr	r4, [r7, #8]
    429a:	ldr	r3, [r4, #4]
    429c:	bic.w	r8, r3, #3
    42a0:	cmp	r8, r5
    42a2:	bcc.n	42ae <_malloc_r+0x206>
    42a4:	rsb	r3, r5, r8
    42a8:	cmp	r3, #15
    42aa:	bgt.w	43c6 <_malloc_r+0x31e>
    42ae:	ldr	r3, [pc, #340]	; (4404 <_malloc_r+0x35c>)
    42b0:	ldr.w	r9, [pc, #352]	; 4414 <_malloc_r+0x36c>
    42b4:	ldr	r2, [r3, #0]
    42b6:	ldr.w	r3, [r9]
    42ba:	adds	r3, #1
    42bc:	add	r2, r5
    42be:	add.w	sl, r4, r8
    42c2:	beq.w	4586 <_malloc_r+0x4de>
    42c6:	add.w	r2, r2, #4096	; 0x1000
    42ca:	adds	r2, #15
    42cc:	bic.w	r2, r2, #4080	; 0xff0
    42d0:	bic.w	r2, r2, #15
    42d4:	mov	r1, r2
    42d6:	mov	r0, r6
    42d8:	str	r2, [sp, #4]
    42da:	bl	4620 <_sbrk_r>
    42de:	cmp.w	r0, #4294967295
    42e2:	mov	fp, r0
    42e4:	ldr	r2, [sp, #4]
    42e6:	beq.w	459a <_malloc_r+0x4f2>
    42ea:	cmp	sl, r0
    42ec:	bhi.w	44e8 <_malloc_r+0x440>
    42f0:	ldr	r3, [pc, #276]	; (4408 <_malloc_r+0x360>)
    42f2:	ldr	r1, [r3, #0]
    42f4:	cmp	sl, fp
    42f6:	add	r1, r2
    42f8:	str	r1, [r3, #0]
    42fa:	beq.w	45a4 <_malloc_r+0x4fc>
    42fe:	ldr.w	r0, [r9]
    4302:	ldr.w	lr, [pc, #272]	; 4414 <_malloc_r+0x36c>
    4306:	adds	r0, #1
    4308:	ittet	ne
    430a:	rsbne	sl, sl, fp
    430e:	addne	r1, sl
    4310:	streq.w	fp, [lr]
    4314:	strne	r1, [r3, #0]
    4316:	ands.w	r1, fp, #7
    431a:	beq.w	454c <_malloc_r+0x4a4>
    431e:	rsb	r0, r1, #8
    4322:	rsb	r1, r1, #4096	; 0x1000
    4326:	add	fp, r0
    4328:	adds	r1, #8
    432a:	add	r2, fp
    432c:	ubfx	r2, r2, #0, #12
    4330:	rsb	r9, r2, r1
    4334:	mov	r1, r9
    4336:	mov	r0, r6
    4338:	str	r3, [sp, #4]
    433a:	bl	4620 <_sbrk_r>
    433e:	adds	r3, r0, #1
    4340:	ldr	r3, [sp, #4]
    4342:	beq.w	45c4 <_malloc_r+0x51c>
    4346:	rsb	r2, fp, r0
    434a:	add	r2, r9
    434c:	orr.w	r2, r2, #1
    4350:	ldr	r1, [r3, #0]
    4352:	str.w	fp, [r7, #8]
    4356:	add	r1, r9
    4358:	cmp	r4, r7
    435a:	str.w	r2, [fp, #4]
    435e:	str	r1, [r3, #0]
    4360:	ldr.w	r9, [pc, #164]	; 4408 <_malloc_r+0x360>
    4364:	beq.n	4394 <_malloc_r+0x2ec>
    4366:	cmp.w	r8, #15
    436a:	bls.w	4568 <_malloc_r+0x4c0>
    436e:	ldr	r2, [r4, #4]
    4370:	sub.w	r3, r8, #12
    4374:	bic.w	r3, r3, #7
    4378:	adds	r0, r4, r3
    437a:	and.w	r2, r2, #1
    437e:	mov.w	lr, #5
    4382:	orrs	r2, r3
    4384:	cmp	r3, #15
    4386:	str	r2, [r4, #4]
    4388:	str.w	lr, [r0, #4]
    438c:	str.w	lr, [r0, #8]
    4390:	bhi.w	45cc <_malloc_r+0x524>
    4394:	ldr	r3, [pc, #116]	; (440c <_malloc_r+0x364>)
    4396:	ldr	r4, [r7, #8]
    4398:	ldr	r2, [r3, #0]
    439a:	cmp	r1, r2
    439c:	it	hi
    439e:	strhi	r1, [r3, #0]
    43a0:	ldr	r3, [pc, #108]	; (4410 <_malloc_r+0x368>)
    43a2:	ldr	r2, [r3, #0]
    43a4:	cmp	r1, r2
    43a6:	ldr	r2, [r4, #4]
    43a8:	it	hi
    43aa:	strhi	r1, [r3, #0]
    43ac:	bic.w	r2, r2, #3
    43b0:	cmp	r5, r2
    43b2:	sub.w	r3, r2, r5
    43b6:	bhi.n	43bc <_malloc_r+0x314>
    43b8:	cmp	r3, #15
    43ba:	bgt.n	43c6 <_malloc_r+0x31e>
    43bc:	mov	r0, r6
    43be:	bl	461c <__malloc_unlock>
    43c2:	movs	r4, #0
    43c4:	b.n	4238 <_malloc_r+0x190>
    43c6:	adds	r2, r4, r5
    43c8:	orr.w	r3, r3, #1
    43cc:	orr.w	r5, r5, #1
    43d0:	str	r5, [r4, #4]
    43d2:	mov	r0, r6
    43d4:	str	r2, [r7, #8]
    43d6:	str	r3, [r2, #4]
    43d8:	bl	461c <__malloc_unlock>
    43dc:	adds	r4, #8
    43de:	mov	r0, r4
    43e0:	add	sp, #12
    43e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43e6:	cmp	r3, #20
    43e8:	bls.n	44ce <_malloc_r+0x426>
    43ea:	cmp	r3, #84	; 0x54
    43ec:	bhi.w	4538 <_malloc_r+0x490>
    43f0:	lsrs	r0, r5, #12
    43f2:	add.w	lr, r0, #111	; 0x6f
    43f6:	mov.w	r3, lr, lsl #1
    43fa:	adds	r0, #110	; 0x6e
    43fc:	b.n	40ec <_malloc_r+0x44>
    43fe:	nop
    4400:	.word	0x1fff119c
    4404:	.word	0x1fff1cbc
    4408:	.word	0x1fff1cc0
    440c:	.word	0x1fff1cb8
    4410:	.word	0x1fff1cb4
    4414:	.word	0x1fff15a8
    4418:	lsrs	r2, r3, #9
    441a:	cmp	r2, #4
    441c:	bls.n	44dc <_malloc_r+0x434>
    441e:	cmp	r2, #20
    4420:	bhi.w	458a <_malloc_r+0x4e2>
    4424:	add.w	r1, r2, #92	; 0x5c
    4428:	lsls	r1, r1, #1
    442a:	adds	r2, #91	; 0x5b
    442c:	add.w	ip, r7, r1, lsl #2
    4430:	ldr.w	r1, [r7, r1, lsl #2]
    4434:	ldr.w	r8, [pc, #476]	; 4614 <_malloc_r+0x56c>
    4438:	sub.w	ip, ip, #8
    443c:	cmp	ip, r1
    443e:	beq.w	4552 <_malloc_r+0x4aa>
    4442:	ldr	r2, [r1, #4]
    4444:	bic.w	r2, r2, #3
    4448:	cmp	r3, r2
    444a:	bcs.n	4452 <_malloc_r+0x3aa>
    444c:	ldr	r1, [r1, #8]
    444e:	cmp	ip, r1
    4450:	bne.n	4442 <_malloc_r+0x39a>
    4452:	ldr.w	ip, [r1, #12]
    4456:	ldr	r2, [r7, #4]
    4458:	str.w	ip, [r4, #12]
    445c:	str	r1, [r4, #8]
    445e:	str.w	r4, [ip, #8]
    4462:	str	r4, [r1, #12]
    4464:	b.n	4178 <_malloc_r+0xd0>
    4466:	adds	r3, r4, r5
    4468:	orr.w	r7, r2, #1
    446c:	orr.w	r5, r5, #1
    4470:	str	r5, [r4, #4]
    4472:	mov	r0, r6
    4474:	str	r3, [r1, #20]
    4476:	str	r3, [r1, #16]
    4478:	str.w	lr, [r3, #12]
    447c:	str.w	lr, [r3, #8]
    4480:	str	r7, [r3, #4]
    4482:	str	r2, [r3, r2]
    4484:	adds	r4, #8
    4486:	bl	461c <__malloc_unlock>
    448a:	b.n	4238 <_malloc_r+0x190>
    448c:	ldr	r2, [r1, #4]
    448e:	b.n	4178 <_malloc_r+0xd0>
    4490:	add.w	r8, r8, #1
    4494:	tst.w	r8, #3
    4498:	add.w	ip, ip, #8
    449c:	bne.w	419e <_malloc_r+0xf6>
    44a0:	b.n	4504 <_malloc_r+0x45c>
    44a2:	ldr	r4, [r3, #12]
    44a4:	cmp	r3, r4
    44a6:	it	eq
    44a8:	addeq	r0, #2
    44aa:	beq.w	4118 <_malloc_r+0x70>
    44ae:	b.n	4218 <_malloc_r+0x170>
    44b0:	add	r3, r1
    44b2:	mov	r4, r1
    44b4:	ldr	r2, [r3, #4]
    44b6:	ldr	r1, [r1, #12]
    44b8:	ldr.w	r5, [r4, #8]!
    44bc:	orr.w	r2, r2, #1
    44c0:	str	r2, [r3, #4]
    44c2:	mov	r0, r6
    44c4:	str	r1, [r5, #12]
    44c6:	str	r5, [r1, #8]
    44c8:	bl	461c <__malloc_unlock>
    44cc:	b.n	4238 <_malloc_r+0x190>
    44ce:	add.w	lr, r3, #92	; 0x5c
    44d2:	add.w	r0, r3, #91	; 0x5b
    44d6:	mov.w	r3, lr, lsl #1
    44da:	b.n	40ec <_malloc_r+0x44>
    44dc:	lsrs	r2, r3, #6
    44de:	add.w	r1, r2, #57	; 0x39
    44e2:	lsls	r1, r1, #1
    44e4:	adds	r2, #56	; 0x38
    44e6:	b.n	442c <_malloc_r+0x384>
    44e8:	cmp	r4, r7
    44ea:	ldr	r3, [pc, #296]	; (4614 <_malloc_r+0x56c>)
    44ec:	beq.w	42f0 <_malloc_r+0x248>
    44f0:	ldr	r4, [r3, #8]
    44f2:	ldr	r2, [r4, #4]
    44f4:	bic.w	r2, r2, #3
    44f8:	b.n	43b0 <_malloc_r+0x308>
    44fa:	ldr.w	r3, [r9], #-8
    44fe:	cmp	r9, r3
    4500:	bne.w	4608 <_malloc_r+0x560>
    4504:	tst.w	r0, #3
    4508:	add.w	r0, r0, #4294967295
    450c:	bne.n	44fa <_malloc_r+0x452>
    450e:	ldr	r3, [r7, #4]
    4510:	bic.w	r3, r3, r4
    4514:	str	r3, [r7, #4]
    4516:	lsls	r4, r4, #1
    4518:	cmp	r4, r3
    451a:	bhi.w	4298 <_malloc_r+0x1f0>
    451e:	cmp	r4, #0
    4520:	beq.w	4298 <_malloc_r+0x1f0>
    4524:	tst	r4, r3
    4526:	mov	r0, r8
    4528:	bne.w	4196 <_malloc_r+0xee>
    452c:	lsls	r4, r4, #1
    452e:	tst	r4, r3
    4530:	add.w	r0, r0, #4
    4534:	beq.n	452c <_malloc_r+0x484>
    4536:	b.n	4196 <_malloc_r+0xee>
    4538:	cmp.w	r3, #340	; 0x154
    453c:	bhi.n	4570 <_malloc_r+0x4c8>
    453e:	lsrs	r0, r5, #15
    4540:	add.w	lr, r0, #120	; 0x78
    4544:	mov.w	r3, lr, lsl #1
    4548:	adds	r0, #119	; 0x77
    454a:	b.n	40ec <_malloc_r+0x44>
    454c:	mov.w	r1, #4096	; 0x1000
    4550:	b.n	432a <_malloc_r+0x282>
    4552:	movs	r1, #1
    4554:	ldr.w	r3, [r8, #4]
    4558:	asrs	r2, r2, #2
    455a:	lsl.w	r2, r1, r2
    455e:	orrs	r2, r3
    4560:	str.w	r2, [r8, #4]
    4564:	mov	r1, ip
    4566:	b.n	4458 <_malloc_r+0x3b0>
    4568:	movs	r3, #1
    456a:	str.w	r3, [fp, #4]
    456e:	b.n	43bc <_malloc_r+0x314>
    4570:	movw	r2, #1364	; 0x554
    4574:	cmp	r3, r2
    4576:	bhi.n	45ba <_malloc_r+0x512>
    4578:	lsrs	r0, r5, #18
    457a:	add.w	lr, r0, #125	; 0x7d
    457e:	mov.w	r3, lr, lsl #1
    4582:	adds	r0, #124	; 0x7c
    4584:	b.n	40ec <_malloc_r+0x44>
    4586:	adds	r2, #16
    4588:	b.n	42d4 <_malloc_r+0x22c>
    458a:	cmp	r2, #84	; 0x54
    458c:	bhi.n	45dc <_malloc_r+0x534>
    458e:	lsrs	r2, r3, #12
    4590:	add.w	r1, r2, #111	; 0x6f
    4594:	lsls	r1, r1, #1
    4596:	adds	r2, #110	; 0x6e
    4598:	b.n	442c <_malloc_r+0x384>
    459a:	ldr	r4, [r7, #8]
    459c:	ldr	r2, [r4, #4]
    459e:	bic.w	r2, r2, #3
    45a2:	b.n	43b0 <_malloc_r+0x308>
    45a4:	ubfx	r0, sl, #0, #12
    45a8:	cmp	r0, #0
    45aa:	bne.w	42fe <_malloc_r+0x256>
    45ae:	add	r2, r8
    45b0:	ldr	r3, [r7, #8]
    45b2:	orr.w	r2, r2, #1
    45b6:	str	r2, [r3, #4]
    45b8:	b.n	4394 <_malloc_r+0x2ec>
    45ba:	movs	r3, #254	; 0xfe
    45bc:	mov.w	lr, #127	; 0x7f
    45c0:	movs	r0, #126	; 0x7e
    45c2:	b.n	40ec <_malloc_r+0x44>
    45c4:	movs	r2, #1
    45c6:	mov.w	r9, #0
    45ca:	b.n	4350 <_malloc_r+0x2a8>
    45cc:	add.w	r1, r4, #8
    45d0:	mov	r0, r6
    45d2:	bl	4728 <_free_r>
    45d6:	ldr.w	r1, [r9]
    45da:	b.n	4394 <_malloc_r+0x2ec>
    45dc:	cmp.w	r2, #340	; 0x154
    45e0:	bhi.n	45ee <_malloc_r+0x546>
    45e2:	lsrs	r2, r3, #15
    45e4:	add.w	r1, r2, #120	; 0x78
    45e8:	lsls	r1, r1, #1
    45ea:	adds	r2, #119	; 0x77
    45ec:	b.n	442c <_malloc_r+0x384>
    45ee:	movw	r1, #1364	; 0x554
    45f2:	cmp	r2, r1
    45f4:	bhi.n	4602 <_malloc_r+0x55a>
    45f6:	lsrs	r2, r3, #18
    45f8:	add.w	r1, r2, #125	; 0x7d
    45fc:	lsls	r1, r1, #1
    45fe:	adds	r2, #124	; 0x7c
    4600:	b.n	442c <_malloc_r+0x384>
    4602:	movs	r1, #254	; 0xfe
    4604:	movs	r2, #126	; 0x7e
    4606:	b.n	442c <_malloc_r+0x384>
    4608:	ldr	r3, [r7, #4]
    460a:	b.n	4516 <_malloc_r+0x46e>
    460c:	lsrs	r0, r5, #3
    460e:	adds	r3, r0, #1
    4610:	lsls	r3, r3, #1
    4612:	b.n	4206 <_malloc_r+0x15e>
    4614:	.word	0x1fff119c

00004618 <__malloc_lock>:
    4618:	bx	lr
    461a:	nop

0000461c <__malloc_unlock>:
    461c:	bx	lr
    461e:	nop

00004620 <_sbrk_r>:
    4620:	push	{r3, r4, r5, lr}
    4622:	ldr	r4, [pc, #28]	; (4640 <_sbrk_r+0x20>)
    4624:	movs	r3, #0
    4626:	mov	r5, r0
    4628:	mov	r0, r1
    462a:	str	r3, [r4, #0]
    462c:	bl	39b4 <_sbrk>
    4630:	adds	r3, r0, #1
    4632:	beq.n	4636 <_sbrk_r+0x16>
    4634:	pop	{r3, r4, r5, pc}
    4636:	ldr	r3, [r4, #0]
    4638:	cmp	r3, #0
    463a:	beq.n	4634 <_sbrk_r+0x14>
    463c:	str	r3, [r5, #0]
    463e:	pop	{r3, r4, r5, pc}
    4640:	.word	0x1fff1e2c

00004644 <register_fini>:
    4644:	ldr	r3, [pc, #8]	; (4650 <register_fini+0xc>)
    4646:	cbz	r3, 464e <register_fini+0xa>
    4648:	ldr	r0, [pc, #8]	; (4654 <register_fini+0x10>)
    464a:	b.w	4658 <atexit>
    464e:	bx	lr
    4650:	.word	0x00000000
    4654:	.word	0x00004665

00004658 <atexit>:
    4658:	movs	r3, #0
    465a:	mov	r1, r0
    465c:	mov	r2, r3
    465e:	mov	r0, r3
    4660:	b.w	48f8 <__register_exitproc>

00004664 <__libc_fini_array>:
    4664:	push	{r3, r4, r5, lr}
    4666:	ldr	r5, [pc, #28]	; (4684 <__libc_fini_array+0x20>)
    4668:	ldr	r4, [pc, #28]	; (4688 <__libc_fini_array+0x24>)
    466a:	subs	r4, r5, r4
    466c:	asrs	r4, r4, #2
    466e:	beq.n	467c <__libc_fini_array+0x18>
    4670:	subs	r4, #1
    4672:	ldr.w	r3, [r5, #-4]!
    4676:	blx	r3
    4678:	cmp	r4, #0
    467a:	bne.n	4670 <__libc_fini_array+0xc>
    467c:	ldmia.w	sp!, {r3, r4, r5, lr}
    4680:	b.w	4d18 <__init_array_end>
	...

0000468c <_malloc_trim_r>:
    468c:	push	{r3, r4, r5, r6, r7, lr}
    468e:	ldr	r7, [pc, #140]	; (471c <_malloc_trim_r+0x90>)
    4690:	mov	r4, r1
    4692:	mov	r6, r0
    4694:	bl	4618 <__malloc_lock>
    4698:	ldr	r3, [r7, #8]
    469a:	ldr	r5, [r3, #4]
    469c:	bic.w	r5, r5, #3
    46a0:	subs	r1, r5, r4
    46a2:	addw	r1, r1, #4079	; 0xfef
    46a6:	bic.w	r1, r1, #4080	; 0xff0
    46aa:	bic.w	r1, r1, #15
    46ae:	sub.w	r4, r1, #4096	; 0x1000
    46b2:	cmp.w	r4, #4096	; 0x1000
    46b6:	blt.n	46c8 <_malloc_trim_r+0x3c>
    46b8:	movs	r1, #0
    46ba:	mov	r0, r6
    46bc:	bl	4620 <_sbrk_r>
    46c0:	ldr	r3, [r7, #8]
    46c2:	add	r3, r5
    46c4:	cmp	r0, r3
    46c6:	beq.n	46d2 <_malloc_trim_r+0x46>
    46c8:	mov	r0, r6
    46ca:	bl	461c <__malloc_unlock>
    46ce:	movs	r0, #0
    46d0:	pop	{r3, r4, r5, r6, r7, pc}
    46d2:	negs	r1, r4
    46d4:	mov	r0, r6
    46d6:	bl	4620 <_sbrk_r>
    46da:	adds	r0, #1
    46dc:	beq.n	46fa <_malloc_trim_r+0x6e>
    46de:	ldr	r3, [pc, #64]	; (4720 <_malloc_trim_r+0x94>)
    46e0:	ldr	r2, [r7, #8]
    46e2:	ldr	r1, [r3, #0]
    46e4:	subs	r5, r5, r4
    46e6:	orr.w	r5, r5, #1
    46ea:	mov	r0, r6
    46ec:	subs	r1, r1, r4
    46ee:	str	r5, [r2, #4]
    46f0:	str	r1, [r3, #0]
    46f2:	bl	461c <__malloc_unlock>
    46f6:	movs	r0, #1
    46f8:	pop	{r3, r4, r5, r6, r7, pc}
    46fa:	movs	r1, #0
    46fc:	mov	r0, r6
    46fe:	bl	4620 <_sbrk_r>
    4702:	ldr	r2, [r7, #8]
    4704:	subs	r3, r0, r2
    4706:	cmp	r3, #15
    4708:	ble.n	46c8 <_malloc_trim_r+0x3c>
    470a:	ldr	r4, [pc, #24]	; (4724 <_malloc_trim_r+0x98>)
    470c:	ldr	r1, [pc, #16]	; (4720 <_malloc_trim_r+0x94>)
    470e:	ldr	r4, [r4, #0]
    4710:	orr.w	r3, r3, #1
    4714:	subs	r0, r0, r4
    4716:	str	r3, [r2, #4]
    4718:	str	r0, [r1, #0]
    471a:	b.n	46c8 <_malloc_trim_r+0x3c>
    471c:	.word	0x1fff119c
    4720:	.word	0x1fff1cc0
    4724:	.word	0x1fff15a8

00004728 <_free_r>:
    4728:	cmp	r1, #0
    472a:	beq.n	47b8 <_free_r+0x90>
    472c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4730:	mov	r5, r1
    4732:	mov	r8, r0
    4734:	bl	4618 <__malloc_lock>
    4738:	ldr.w	r7, [r5, #-4]
    473c:	ldr	r1, [pc, #424]	; (48e8 <_free_r+0x1c0>)
    473e:	bic.w	r3, r7, #1
    4742:	sub.w	r4, r5, #8
    4746:	adds	r2, r4, r3
    4748:	ldr	r6, [r1, #8]
    474a:	ldr	r0, [r2, #4]
    474c:	cmp	r2, r6
    474e:	bic.w	r0, r0, #3
    4752:	beq.n	481a <_free_r+0xf2>
    4754:	lsls	r6, r7, #31
    4756:	str	r0, [r2, #4]
    4758:	bmi.n	4772 <_free_r+0x4a>
    475a:	ldr.w	r7, [r5, #-8]
    475e:	subs	r4, r4, r7
    4760:	add.w	lr, r1, #8
    4764:	ldr	r5, [r4, #8]
    4766:	cmp	r5, lr
    4768:	add	r3, r7
    476a:	beq.n	484c <_free_r+0x124>
    476c:	ldr	r7, [r4, #12]
    476e:	str	r7, [r5, #12]
    4770:	str	r5, [r7, #8]
    4772:	adds	r5, r2, r0
    4774:	ldr	r5, [r5, #4]
    4776:	lsls	r5, r5, #31
    4778:	bpl.n	4800 <_free_r+0xd8>
    477a:	orr.w	r2, r3, #1
    477e:	str	r2, [r4, #4]
    4780:	str	r3, [r4, r3]
    4782:	cmp.w	r3, #512	; 0x200
    4786:	bcs.n	47ba <_free_r+0x92>
    4788:	lsrs	r3, r3, #3
    478a:	adds	r2, r3, #1
    478c:	ldr	r5, [r1, #4]
    478e:	ldr.w	r7, [r1, r2, lsl #3]
    4792:	str	r7, [r4, #8]
    4794:	movs	r0, #1
    4796:	asrs	r3, r3, #2
    4798:	lsl.w	r3, r0, r3
    479c:	add.w	r0, r1, r2, lsl #3
    47a0:	orrs	r5, r3
    47a2:	subs	r0, #8
    47a4:	str	r0, [r4, #12]
    47a6:	str	r5, [r1, #4]
    47a8:	str.w	r4, [r1, r2, lsl #3]
    47ac:	str	r4, [r7, #12]
    47ae:	mov	r0, r8
    47b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    47b4:	b.w	461c <__malloc_unlock>
    47b8:	bx	lr
    47ba:	lsrs	r2, r3, #9
    47bc:	cmp	r2, #4
    47be:	bhi.n	4868 <_free_r+0x140>
    47c0:	lsrs	r2, r3, #6
    47c2:	add.w	r7, r2, #57	; 0x39
    47c6:	lsls	r7, r7, #1
    47c8:	add.w	r5, r2, #56	; 0x38
    47cc:	add.w	r0, r1, r7, lsl #2
    47d0:	ldr.w	r2, [r1, r7, lsl #2]
    47d4:	ldr	r1, [pc, #272]	; (48e8 <_free_r+0x1c0>)
    47d6:	subs	r0, #8
    47d8:	cmp	r0, r2
    47da:	beq.n	4878 <_free_r+0x150>
    47dc:	ldr	r1, [r2, #4]
    47de:	bic.w	r1, r1, #3
    47e2:	cmp	r3, r1
    47e4:	bcs.n	47ec <_free_r+0xc4>
    47e6:	ldr	r2, [r2, #8]
    47e8:	cmp	r0, r2
    47ea:	bne.n	47dc <_free_r+0xb4>
    47ec:	ldr	r0, [r2, #12]
    47ee:	str	r0, [r4, #12]
    47f0:	str	r2, [r4, #8]
    47f2:	str	r4, [r0, #8]
    47f4:	str	r4, [r2, #12]
    47f6:	mov	r0, r8
    47f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    47fc:	b.w	461c <__malloc_unlock>
    4800:	ldr	r5, [r2, #8]
    4802:	ldr	r7, [pc, #232]	; (48ec <_free_r+0x1c4>)
    4804:	cmp	r5, r7
    4806:	add	r3, r0
    4808:	beq.n	488a <_free_r+0x162>
    480a:	ldr	r0, [r2, #12]
    480c:	str	r0, [r5, #12]
    480e:	orr.w	r2, r3, #1
    4812:	str	r5, [r0, #8]
    4814:	str	r2, [r4, #4]
    4816:	str	r3, [r4, r3]
    4818:	b.n	4782 <_free_r+0x5a>
    481a:	lsls	r7, r7, #31
    481c:	add	r3, r0
    481e:	bmi.n	4830 <_free_r+0x108>
    4820:	ldr.w	r2, [r5, #-8]
    4824:	subs	r4, r4, r2
    4826:	add	r3, r2
    4828:	ldr	r0, [r4, #8]
    482a:	ldr	r2, [r4, #12]
    482c:	str	r2, [r0, #12]
    482e:	str	r0, [r2, #8]
    4830:	ldr	r2, [pc, #188]	; (48f0 <_free_r+0x1c8>)
    4832:	ldr	r2, [r2, #0]
    4834:	orr.w	r0, r3, #1
    4838:	cmp	r3, r2
    483a:	str	r0, [r4, #4]
    483c:	str	r4, [r1, #8]
    483e:	bcc.n	47ae <_free_r+0x86>
    4840:	ldr	r3, [pc, #176]	; (48f4 <_free_r+0x1cc>)
    4842:	mov	r0, r8
    4844:	ldr	r1, [r3, #0]
    4846:	bl	468c <_malloc_trim_r>
    484a:	b.n	47ae <_free_r+0x86>
    484c:	adds	r1, r2, r0
    484e:	ldr	r1, [r1, #4]
    4850:	lsls	r1, r1, #31
    4852:	bmi.n	48de <_free_r+0x1b6>
    4854:	ldr	r1, [r2, #8]
    4856:	ldr	r2, [r2, #12]
    4858:	str	r2, [r1, #12]
    485a:	add	r3, r0
    485c:	orr.w	r0, r3, #1
    4860:	str	r1, [r2, #8]
    4862:	str	r0, [r4, #4]
    4864:	str	r3, [r4, r3]
    4866:	b.n	47ae <_free_r+0x86>
    4868:	cmp	r2, #20
    486a:	bhi.n	489c <_free_r+0x174>
    486c:	add.w	r7, r2, #92	; 0x5c
    4870:	lsls	r7, r7, #1
    4872:	add.w	r5, r2, #91	; 0x5b
    4876:	b.n	47cc <_free_r+0xa4>
    4878:	asrs	r2, r5, #2
    487a:	ldr	r3, [r1, #4]
    487c:	movs	r5, #1
    487e:	lsl.w	r2, r5, r2
    4882:	orrs	r3, r2
    4884:	str	r3, [r1, #4]
    4886:	mov	r2, r0
    4888:	b.n	47ee <_free_r+0xc6>
    488a:	orr.w	r2, r3, #1
    488e:	str	r4, [r1, #20]
    4890:	str	r4, [r1, #16]
    4892:	str	r5, [r4, #12]
    4894:	str	r5, [r4, #8]
    4896:	str	r2, [r4, #4]
    4898:	str	r3, [r4, r3]
    489a:	b.n	47ae <_free_r+0x86>
    489c:	cmp	r2, #84	; 0x54
    489e:	bhi.n	48ae <_free_r+0x186>
    48a0:	lsrs	r2, r3, #12
    48a2:	add.w	r7, r2, #111	; 0x6f
    48a6:	lsls	r7, r7, #1
    48a8:	add.w	r5, r2, #110	; 0x6e
    48ac:	b.n	47cc <_free_r+0xa4>
    48ae:	cmp.w	r2, #340	; 0x154
    48b2:	bhi.n	48c2 <_free_r+0x19a>
    48b4:	lsrs	r2, r3, #15
    48b6:	add.w	r7, r2, #120	; 0x78
    48ba:	lsls	r7, r7, #1
    48bc:	add.w	r5, r2, #119	; 0x77
    48c0:	b.n	47cc <_free_r+0xa4>
    48c2:	movw	r0, #1364	; 0x554
    48c6:	cmp	r2, r0
    48c8:	bhi.n	48d8 <_free_r+0x1b0>
    48ca:	lsrs	r2, r3, #18
    48cc:	add.w	r7, r2, #125	; 0x7d
    48d0:	lsls	r7, r7, #1
    48d2:	add.w	r5, r2, #124	; 0x7c
    48d6:	b.n	47cc <_free_r+0xa4>
    48d8:	movs	r7, #254	; 0xfe
    48da:	movs	r5, #126	; 0x7e
    48dc:	b.n	47cc <_free_r+0xa4>
    48de:	orr.w	r2, r3, #1
    48e2:	str	r2, [r4, #4]
    48e4:	str	r3, [r4, r3]
    48e6:	b.n	47ae <_free_r+0x86>
    48e8:	.word	0x1fff119c
    48ec:	.word	0x1fff11a4
    48f0:	.word	0x1fff15a4
    48f4:	.word	0x1fff1cbc

000048f8 <__register_exitproc>:
    48f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    48fc:	ldr	r4, [pc, #148]	; (4994 <__register_exitproc+0x9c>)
    48fe:	ldr	r5, [r4, #0]
    4900:	ldr.w	r4, [r5, #328]	; 0x148
    4904:	mov	r6, r0
    4906:	mov	r8, r1
    4908:	mov	sl, r2
    490a:	mov	r9, r3
    490c:	cbz	r4, 4980 <__register_exitproc+0x88>
    490e:	ldr	r0, [r4, #4]
    4910:	cmp	r0, #31
    4912:	bgt.n	4944 <__register_exitproc+0x4c>
    4914:	adds	r3, r0, #1
    4916:	cbz	r6, 4936 <__register_exitproc+0x3e>
    4918:	add.w	r5, r4, r0, lsl #2
    491c:	movs	r2, #1
    491e:	str.w	sl, [r5, #136]	; 0x88
    4922:	ldr.w	r1, [r4, #392]	; 0x188
    4926:	lsls	r2, r0
    4928:	orrs	r1, r2
    492a:	cmp	r6, #2
    492c:	str.w	r1, [r4, #392]	; 0x188
    4930:	str.w	r9, [r5, #264]	; 0x108
    4934:	beq.n	4974 <__register_exitproc+0x7c>
    4936:	adds	r0, #2
    4938:	str	r3, [r4, #4]
    493a:	str.w	r8, [r4, r0, lsl #2]
    493e:	movs	r0, #0
    4940:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4944:	ldr	r3, [pc, #80]	; (4998 <__register_exitproc+0xa0>)
    4946:	cbz	r3, 498a <__register_exitproc+0x92>
    4948:	mov.w	r0, #400	; 0x190
    494c:	bl	4098 <malloc>
    4950:	mov	r4, r0
    4952:	cbz	r0, 498a <__register_exitproc+0x92>
    4954:	ldr.w	r3, [r5, #328]	; 0x148
    4958:	movs	r7, #0
    495a:	stmia.w	r0, {r3, r7}
    495e:	str.w	r4, [r5, #328]	; 0x148
    4962:	mov	r0, r7
    4964:	movs	r3, #1
    4966:	str.w	r7, [r4, #392]	; 0x188
    496a:	str.w	r7, [r4, #396]	; 0x18c
    496e:	cmp	r6, #0
    4970:	beq.n	4936 <__register_exitproc+0x3e>
    4972:	b.n	4918 <__register_exitproc+0x20>
    4974:	ldr.w	r1, [r4, #396]	; 0x18c
    4978:	orrs	r2, r1
    497a:	str.w	r2, [r4, #396]	; 0x18c
    497e:	b.n	4936 <__register_exitproc+0x3e>
    4980:	add.w	r4, r5, #332	; 0x14c
    4984:	str.w	r4, [r5, #328]	; 0x148
    4988:	b.n	490e <__register_exitproc+0x16>
    498a:	mov.w	r0, #4294967295
    498e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4992:	nop
    4994:	.word	0x00004cfc
    4998:	.word	0x00004099
    499c:	.word	0x00000026
    49a0:	.word	0x00000029
    49a4:	.word	0x0000002d
    49a8:	.word	0x00000033
    49ac:	.word	0x00000064
    49b0:	.word	0x00000064
    49b4:	.word	0x00000064
    49b8:	.word	0x00000064
    49bc:	.word	0x00000001
    49c0:	.word	0x00000001
    49c4:	.word	0x00000001
    49c8:	.word	0x00000001
    49cc:	.word	0x7370704f
    49d0:	.word	0x6e61202c
    49d4:	.word	0x6b6e7520
    49d8:	.word	0x6e776f6e
    49dc:	.word	0x44494d20
    49e0:	.word	0x656d2049
    49e4:	.word	0x67617373
    49e8:	.word	0x79742065
    49ec:	.word	0x00216570
    49f0:	.word	0x00000061
    49f4:	.word	0x43544950
    49f8:	.word	0x00000048
    49fc:	.word	0x4f4c4556
    4a00:	.word	0x59544943
    4a04:	.word	0x00000000
    4a08:	.word	0x45544f4e
    4a0c:	.word	0x474e454c
    4a10:	.word	0x00004854
    4a14:	.word	0x424f4c47
    4a18:	.word	0x00004c41
    4a1c:	.word	0x79616c50
    4a20:	.word	0x00000000
    4a24:	.word	0x6c6c6148
    4a28:	.word	0x0000006f

00004a2c <pin2sc1a>:
    4a2c:	................
    4a3c:	................
    4a4c:	................
    4a5c:	................
    4a6c:	........

00004a74 <digital_pin_to_info_PGM>:
    4a74:	@..C@..@D..CD..@
    4a84:	...C...@0..C0..@
    4a94:	4..C4..@...C...@
    4aa4:	...C...@...C...@
    4ab4:	...C...@...C...@
    4ac4:	...C...@...C...@
    4ad4:	...C...@...C...@
    4ae4:	...C...@...C...@
    4af4:	...C...@...C...@
    4b04:	...C...@...C...@
    4b14:	...C...@...C...@
    4b24:	...C...@...C...@
    4b34:	h .Ch..@...C...@
    4b44:	8..C8..@<..C<..@
    4b54:	@..C@..@H..CH..@
    4b64:	L..CL..@(..C(..@
    4b74:	,..C,..@` .C`..@
    4b84:	d .Cd..@ ..C ..@
    4b94:	$..C$..@(..C(..@
    4ba4:	,..C,..@D..CD..@
    4bb4:	p..Cp..@t..Ct..@
    4bc4:	h..Ch..@P..CP..@
    4bd4:	X..CX..@\..C\..@
    4be4:	T..CT..@ ..C ..@
    4bf4:	$..C$..@...C...@
    4c04:	...C...@8..C8..@
    4c14:	4..C4..@0..C0..@
    4c24:	<..C<..@,..C,..@
    4c34:	( .C(..@, .C,..@
    4c44:	. .C...@. .C...@
    4c54:	. .C...@. .C...@
    4c64:	. .C...@. .C...@

00004c74 <vtable for usb_serial_class>:
	...
    4c7c:	.5...5...5...5..
    4c8c:	.5...5...5...5..
    4c9c:	....

00004ca0 <usb_endpoint_config_table>:
    4ca0:	........

00004ca8 <usb_descriptor_list>:
    4ca8:	....t...........
    4cb8:	............P...
    4cc8:	................
    4cd8:	....8...........
    4ce8:	T...............
    4cf8:	....

00004cfc <_global_impure_ptr>:
    4cfc:	p...

00004d00 <_init>:
    4d00:	push	{r3, r4, r5, r6, r7, lr}
    4d02:	nop
    4d04:	pop	{r3, r4, r5, r6, r7}
    4d06:	pop	{r3}
    4d08:	mov	lr, r3
    4d0a:	bx	lr

00004d0c <__init_array_start>:
    4d0c:	.word	0x00004645

00004d10 <__frame_dummy_init_array_entry>:
    4d10:	5.......

Disassembly of section .fini:

00004d18 <_fini>:
    4d18:	push	{r3, r4, r5, r6, r7, lr}
    4d1a:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004e98 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003b70 l     F .text	0000000c startup_default_early_hook
00003b7c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
00004e90 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000018d4 l     F .text	000002b4 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1865 l     O .bss	00000001 tx_noautoflush
1fff1868 l     O .bss	00000004 tx_packet
1fff186c l     O .bss	00000001 transmit_previous_timeout
1fff1870 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001e5c l     F .text	00000144 wait_for_cal
1fff1875 l     O .bss	00000001 analog_right_shift
1fff1876 l     O .bss	00000001 calibrating
00004bac l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff1877 l     O .bss	00000001 analogReadBusyADC1
1fff1878 l     O .bss	00000001 analogReadBusyADC0
1fff1879 l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
0000217c l     F .text	0000004c digitalWrite.part.1
000021c8 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
000024a8 l     F .text	00000048 sysex_byte
1fff1894 l     O .bss	00000001 tx_noautoflush
1fff18c0 l     O .bss	00000004 tx_packet
1fff18c4 l     O .bss	00000001 transmit_previous_timeout
1fff18cc l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18e0 l     O .bss	00000004 ep0_tx_ptr
1fff18e4 l     O .bss	00000014 rx_last
1fff18f8 l     O .bss	00000002 ep0_tx_len
1fff18fc l     O .bss	00000040 ep0_rx0_buf
1fff193c l     O .bss	00000014 rx_first
1fff1950 l     O .bss	00000001 ep0_tx_data_toggle
1fff1954 l     O .bss	00000040 ep0_rx1_buf
1fff1994 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff19a8 l     O .bss	00000014 tx_last
1fff19bc l     O .bss	00000008 setup
1fff19c4 l     O .bss	00000001 ep0_tx_bdt_bank
1fff19c8 l     O .bss	00000008 reply_buffer
1fff19d4 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19d9 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19dc l     O .bss	00000004 rts_pin
1fff19e0 l     O .bss	00000001 rx_buffer_head
1fff19e1 l     O .bss	00000001 rx_buffer_tail
1fff19e4 l     O .bss	00000028 tx_buffer
1fff1a0c l     O .bss	00000040 rx_buffer
1fff1a4c l     O .bss	00000001 transmitting
1fff1a4d l     O .bss	00000001 tx_buffer_tail
1fff1a50 l     O .bss	00000004 transmit_pin
1fff1a54 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a58 l     O .bss	00000004 rts_pin
1fff1a5c l     O .bss	00000001 transmitting
1fff1a5d l     O .bss	00000001 rx_buffer_tail
1fff1a60 l     O .bss	00000028 tx_buffer
1fff1a88 l     O .bss	00000040 rx_buffer
1fff1ac8 l     O .bss	00000001 rx_buffer_head
1fff1ac9 l     O .bss	00000001 tx_buffer_tail
1fff1acc l     O .bss	00000004 transmit_pin
1fff1ad0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1ad4 l     O .bss	00000004 rts_pin
1fff1ad8 l     O .bss	00000001 rx_buffer_head
1fff1ad9 l     O .bss	00000001 rx_buffer_tail
1fff1adc l     O .bss	00000028 tx_buffer
1fff1b04 l     O .bss	00000040 rx_buffer
1fff1b44 l     O .bss	00000001 transmitting
1fff1b45 l     O .bss	00000001 tx_buffer_tail
1fff1b48 l     O .bss	00000004 transmit_pin
1fff1b4c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b50 l     O .bss	00000004 rts_pin
1fff1b54 l     O .bss	00000001 rx_buffer_head
1fff1b55 l     O .bss	00000001 rx_buffer_tail
1fff1b58 l     O .bss	00000040 tx_buffer
1fff1b98 l     O .bss	00000040 rx_buffer
1fff1bd8 l     O .bss	00000001 transmitting
1fff1bd9 l     O .bss	00000001 tx_buffer_tail
1fff1bdc l     O .bss	00000004 transmit_pin
1fff1be0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1be4 l     O .bss	00000004 rts_pin
1fff1be8 l     O .bss	00000001 rx_buffer_head
1fff1be9 l     O .bss	00000001 rx_buffer_tail
1fff1bec l     O .bss	00000028 tx_buffer
1fff1c14 l     O .bss	00000040 rx_buffer
1fff1c54 l     O .bss	00000001 transmitting
1fff1c55 l     O .bss	00000001 tx_buffer_tail
1fff1c58 l     O .bss	00000004 transmit_pin
1fff1c5c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c60 l     O .bss	00000004 rts_pin
1fff1c64 l     O .bss	00000001 rx_buffer_head
1fff1c65 l     O .bss	00000001 rx_buffer_tail
1fff1c68 l     O .bss	00000028 tx_buffer
1fff1c90 l     O .bss	00000040 rx_buffer
1fff1cd0 l     O .bss	00000001 transmitting
1fff1cd1 l     O .bss	00000001 tx_buffer_tail
1fff1cd4 l     O .bss	00000004 transmit_pin
1fff1cd8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004810 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1e74 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003b68  w    F .text	00000006 adc0_isr
00001c00 g     F .text	0000001c usb_serial_available
00003a28 g     F .text	00000020 serial4_available
000036d4  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
00003c14 g     F .text	00000020 serial_available
1fff1898 g     O .bss	00000004 usb_midi_handleProgramChange
00003b20  w    F .text	00000048 hard_fault_isr
00003b68  w    F .text	00000006 dma_ch6_isr
000037c8 g     F .text	00000020 Print::println()
000038fc g     F .text	00000020 serial2_available
00003b68  w    F .text	00000006 uart0_lon_isr
00002ae8 g     F .text	000000e8 usb_rx_memory
00003798  w    F .text	00000002 serialEvent5()
00003b68  w    F .text	00000006 dma_ch8_isr
00003d40 g     F .text	00000020 serial6_available
000047e8 g     F .text	00000002 __malloc_unlock
1fff18ac g     O .bss	00000004 usb_midi_handleAfterTouch
00001fa0 g     F .text	000000e0 analog_init
00002bd0 g     F .text	00000084 usb_tx
00003b68  w    F .text	00000006 portcd_isr
1fff18bc g     O .bss	00000004 usb_midi_handleSysExComplete
00004160 g     F .text	00000098 MillisTimer::runFromTimer()
00003b68  w    F .text	00000006 can1_rx_warn_isr
00004e9c g       .fini	00000000 __exidx_end
00003b68  w    F .text	00000006 dma_error_isr
1fff1d38 g     O .bss	00000001 usb_midi_msg_type
1fff1cf0 g     O .bss	00000001 EventResponder::runningFromYield
00003b68  w    F .text	00000006 i2c0_isr
00004208 g     F .text	0000000c __errno
00003b68  w    F .text	00000006 portd_isr
00003b68  w    F .text	00000006 enet_error_isr
1fff1cdc g     O .bss	00000004 EventResponder::firstInterrupt
00003b68  w    F .text	00000006 tpm1_isr
000037b4  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004bf4 g     O .text	00000200 digital_pin_to_info_PGM
1fff1e70 g     O .bss	00000004 errno
00004e9c g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
00003800  w    F .text	00000002 serialEvent6()
1fff18a8 g     O .bss	00000004 usb_midi_handleVelocityChange
00002270 g     F .text	0000001c digitalRead
00003b68  w    F .text	00000006 porte_isr
00000494 g     F .text	00001440 loop
00003b68  w    F .text	00000006 portb_isr
1fff170c g     O .bss	00000014 step3
0000258c g     F .text	0000002c usb_midi_flush_output
00003b68  w    F .text	00000006 spi1_isr
00003a48 g     F .text	000000d8 uart3_status_isr
0000400c  w    F .text	00000002 serialEvent1()
1fff184c g     O .bss	00000018 led4
00003b68  w    F .text	00000006 mcm_isr
000040f8 g     F .text	00000068 MillisTimer::addToActiveList()
000025b8 g     F .text	0000043c usb_midi_read
1fff1884 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1ce0 g     O .bss	00000004 EventResponder::lastInterrupt
0000391c g     F .text	0000010c uart1_status_isr
1fff1d3a g     O .bss	00000002 usb_midi_msg_sysex_len
00003b68  w    F .text	00000006 randnum_isr
1fff188c g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff187c g     O .bss	00000004 systick_millis_count
00003b20  w    F .text	00000048 bus_fault_isr
00003b68  w    F .text	00000006 watchdog_isr
00003b68  w    F .text	00000006 i2c1_isr
1fff19d0 g     O .bss	00000001 usb_configuration
00003b68  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
000037e8  w    F .text	00000002 serialEvent2()
00003b68  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1e64 g     O .bss	0000000a usb_rx_byte_count_data
00003b68  w    F .text	00000006 pit1_isr
00004264 g     F .text	00000010 malloc
00003b68  w    F .text	00000006 dma_ch4_isr
00003b68  w    F .text	00000006 software_isr
00003b68  w    F .text	00000006 dma_ch7_isr
00004094  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003604 g     F .text	000000d0 usb_init
00003b68  w    F .text	00000006 lptmr_isr
1fff1d00 g     O .bss	00000004 __malloc_top_pad
00002240 g     F .text	00000024 rtc_set
1fff169c g     O .bss	00000024 button5
1fff1678 g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff18dc g     O .bss	00000004 usb_midi_handleNoteOn
00003be0 g     F .text	00000034 kinetis_hsrun_enable
000047ec g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001b88 g     F .text	00000048 usb_serial_getchar
00003b68  w    F .text	00000006 can1_bus_off_isr
00003b68  w    F .text	00000006 ftm2_isr
1fff1d2c g     O .bss	00000008 usb_cdc_line_coding
00002264 g     F .text	0000000a digitalWrite
00003b68  w    F .text	00000006 uart5_status_isr
00003d60 g     F .text	000000e4 lpuart0_status_isr
1fff1ce8 g     O .bss	00000004 EventResponder::lastYield
00004e20 g     O .text	00000005 usb_endpoint_config_table
00003b68  w    F .text	00000006 dma_ch9_isr
00003b68  w    F .text	00000006 pit2_isr
00003f14 g     F .text	00000020 serial3_available
1fff1720 g     O .bss	00000014 step4
1fff1cfc g     O .bss	00000004 __malloc_max_sbrked_mem
0000228c g     F .text	0000000a pinMode
00002a34 g     F .text	0000004c usb_free
00003b68  w    F .text	00000006 i2c3_isr
1fff1804 g     O .bss	00000018 led1
1fff18a4 g     O .bss	00000004 usb_midi_handleSysExPartial
00004e9c g       .fini	00000000 __exidx_start
00003b68  w    F .text	00000006 pit0_isr
1fff1d3c g     O .bss	00000001 usb_midi_msg_data1
1fff1cec g     O .bss	00000004 EventResponder::firstYield
00004e7c g     O .text	00000004 _global_impure_ptr
00003b68  w    F .text	00000006 can1_error_isr
00004214 g     F .text	00000050 __libc_init_array
1fff1e74 g       .bss	00000000 __bss_end
00003b68  w    F .text	00000006 can0_wakeup_isr
00003b68  w    F .text	00000006 flash_cmd_isr
1fff17a4 g     O .bss	0000001c knob5
0000379c  w    F .text	00000004 usb_serial_class::clear()
00003f34 g     F .text	000000d8 uart2_status_isr
00003b80 g     F .text	0000002c _sbrk
1fff1cf4 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff1874 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001e14 g     F .text	00000048 usb_serial_flush_callback
00004e80 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
00003b68  w    F .text	00000006 svcall_isr
00003b68  w    F .text	00000006 dma_ch15_isr
00003b68  w    F .text	00000006 uart1_error_isr
00004830 g     F .text	00000028 __libc_fini_array
00003b68  w    F .text	00000006 usbhs_phy_isr
1fff1e74 g       .bss	00000000 _ebss
00003b68 g     F .text	00000006 unused_isr
00003b68  w    F .text	00000006 spi0_isr
00003b68  w    F .text	00000006 dma_ch3_isr
00003b68  w    F .text	00000006 flash_error_isr
1fff1750 g     O .bss	0000001c knob2
00003804 g     F .text	00000020 serial5_available
00003b68  w    F .text	00000006 uart5_error_isr
00003b68  w    F .text	00000006 rtc_seconds_isr
00003b68  w    F .text	00000006 pdb_isr
00003b20  w    F .text	00000048 usage_fault_isr
00003b68  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003b68  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1d34 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff17f0 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
000041f8 g     F .text	00000010 systick_isr
00003b68  w    F .text	00000006 rtc_alarm_isr
00003b68  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
00003b68  w    F .text	00000006 ftm1_isr
000037bc  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003b70  w    F .text	0000000c startup_early_hook
00003b68  w    F .text	00000006 dma_ch13_isr
00003b68  w    F .text	00000006 uart2_error_isr
00001bd0 g     F .text	00000030 usb_serial_peekchar
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
00003b20 g     F .text	00000048 fault_isr
000048f4 g     F .text	000001d0 _free_r
1fff18c8 g     O .bss	00000004 usb_midi_handleStop
00003b68  w    F .text	00000006 usb_charge_isr
000037ac  w    F .text	00000004 usb_serial_class::flush()
00003b68  w    F .text	00000006 cmt_isr
00003b68  w    F .text	00000006 usbhs_isr
1fff18d8 g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
000037a4  w    F .text	00000004 usb_serial_class::read()
00003b68  w    F .text	00000006 ftm3_isr
00003b68  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff1734 g     O .bss	0000001c knob1
00003b68  w    F .text	00000006 spi2_isr
000037ec  w    F .text	00000002 serialEvent4()
000037c4  w    F .text	00000002 serialEvent()
1fff1951 g     O .bss	00000001 usb_reboot_timer
00004ac4 g     F .text	000000a4 __register_exitproc
00001c1c g     F .text	00000038 usb_serial_flush_input
00001d5c g     F .text	00000018 usb_serial_putchar
1fff1d04 g     O .bss	00000028 __malloc_current_mallinfo
00003b68  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff19c5 g     O .bss	00000001 usb_rx_memory_needed
00002c54 g     F .text	000009b0 usb_isr
1fff16e4 g     O .bss	00000014 step1
1fff18d4 g     O .bss	00000004 usb_midi_handleNoteOff
00004df4  w    O .text	00000028 vtable for usb_serial_class
1fff176c g     O .bss	0000001c knob3
00003b68  w    F .text	00000006 uart3_error_isr
1fff1ce4 g     O .bss	00000004 MillisTimer::listActive
00003b68  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003b68  w    F .text	00000006 low_voltage_isr
1fff1630 g     O .bss	00000024 button2
1fff11ac g     O .data	00000408 __malloc_av_
00003b68  w    F .text	00000006 can0_error_isr
0000233c g     F .text	0000016c _init_Teensyduino_internal_
00001dbc g     F .text	00000058 usb_serial_flush_output
00003b68  w    F .text	00000006 dma_ch12_isr
000047e4 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003b68  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003b68  w    F .text	00000006 pit3_isr
00003b68  w    F .text	00000006 enet_rx_isr
00003b68  w    F .text	00000006 portc_isr
000037f0 g     F .text	00000010 main
1fff1cf8 g     O .bss	00000004 __malloc_max_total_mem
1fff1834 g     O .bss	00000018 led3
00003b20  w    F .text	00000048 memmanage_fault_isr
00003e44 g     F .text	00000084 usb_init_serialnumber
1fff1800 g     O .bss	00000001 currentMode
00004e98 g       .text	00000000 __init_array_end
00004274 g     F .text	00000570 _malloc_r
00003b68  w    F .text	00000006 debugmonitor_isr
1fff18a0 g     O .bss	00000004 usb_midi_handleSongPosition
00004014 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1890 g     O .bss	00000004 usb_midi_handleContinue
1fff1d3d g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003b68  w    F .text	00000006 cmp1_isr
1fff1654 g     O .bss	00000024 button3
00003b68  w    F .text	00000006 ftm0_isr
00004858 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
00001c54 g     F .text	00000108 usb_serial_write
00003b7c  w    F .text	00000002 startup_late_hook
000037a8  w    F .text	00000004 usb_serial_class::available()
1fff1d3e g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
00002298 g     F .text	000000a4 delay
00003b68  w    F .text	00000006 tpm0_isr
00004e98 g     F .fini	00000000 _fini
1fff16f8 g     O .bss	00000014 step2
00003b68  w    F .text	00000006 i2s0_rx_isr
00003b68  w    F .text	00000006 uart4_error_isr
000024f0 g     F .text	0000009c usb_midi_write_packed
00004824 g     F .text	0000000c atexit
00003b68  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
00003b68  w    F .text	00000006 can1_message_isr
00003b68  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff18b8 g     O .bss	00000004 usb_midi_handleTuneRequest
00004e8c g       .text	00000000 __preinit_array_end
00003b68  w    F .text	00000006 sdhc_isr
1fff1d3f g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00004e28 g     O .text	00000054 usb_descriptor_list
00002a80 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1788 g     O .bss	0000001c knob4
00003b68  w    F .text	00000006 dma_ch10_isr
1fff17c0 g     O .bss	00000030 sequence1
1fff18b0 g     O .bss	00000004 usb_midi_handleStart
00003b68  w    F .text	00000006 uart0_error_isr
000029f4 g     F .text	00000040 usb_malloc
00003b68  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001d74 g     F .text	00000048 usb_serial_write_buffer_free
00003b68  w    F .text	00000006 enet_timer_isr
1fff16c0 g     O .bss	00000024 button6
1fff160c g     O .bss	00000024 button1
1fff15bc g       .data	00000000 _edata
00003b68  w    F .text	00000006 i2s0_tx_isr
00003b68  w    F .text	00000006 adc1_isr
000037b0  w    F .text	00000004 usb_serial_class::availableForWrite()
00003b68  w    F .text	00000006 cmp0_isr
1fff1880 g     O .bss	00000004 usb_midi_handleClock
00003ec8 g     F .text	0000004c ultoa
000040b0 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
000037a0  w    F .text	00000004 usb_serial_class::peek()
1fff1864 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff189c g     O .bss	00000004 usb_midi_handlePitchChange
00003b68  w    F .text	00000006 pit_isr
1fff18b4 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003b68  w    F .text	00000006 dac0_isr
00004e8c g       .text	00000000 __init_array_start
00003b68  w    F .text	00000006 can1_tx_warn_isr
00002080 g     F .text	000000fc analogRead
1fff1d40 g     O .bss	00000122 usb_midi_msg_sysex
00003c34 g     F .text	0000010c uart0_status_isr
00003b68  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
00003b68  w    F .text	00000006 dma_ch1_isr
00002abc g     F .text	0000002c usb_tx_packet_count
00003b68  w    F .text	00000006 dma_ch5_isr
00003b68  w    F .text	00000006 can0_rx_warn_isr
00003b68  w    F .text	00000006 can0_tx_warn_isr
00003824 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003bac g     F .text	00000034 kinetis_hsrun_disable
00004e8c g       .text	00000000 __preinit_array_start
00004010  w    F .text	00000002 serialEvent3()
1fff18d0 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff181c g     O .bss	00000018 led2
00003b68  w    F .text	00000006 cmp2_isr
000040f4 g     F .text	00000004 pendablesrvreq_isr
00003b68  w    F .text	00000006 wakeup_isr
00003b68  w    F .text	00000006 cmp3_isr
1fff1888 g     O .bss	00000004 usb_midi_handleActiveSensing
00003b68  w    F .text	00000006 tpm2_isr
00003b68  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
00003b68  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ....i;..!;..
      10:	!;..!;..!;..!;..
      20:	!;..!;..!;..i;..
      30:	i;..!;...@...A..
      40:	i;..i;..i;..i;..
      50:	i;..i;..i;..i;..
      60:	i;..i;..i;..i;..
      70:	i;..i;..i;..i;..
      80:	i;..i;..i;..i;..
      90:	i;..i;..i;..i;..
      a0:	i;..i;..i;..i;..
      b0:	i;..i;..i;..5<..
      c0:	i;...9..i;..5?..
      d0:	i;..I:..i;..i;..
      e0:	i;..i;..i;..i;..
      f0:	i;..i;..i;..i;..
     100:	i;..i;..i;..i;..
     110:	i;..U,..i;..i;..
     120:	i;..i;..i;..i;..
     130:	i;..i;..i;..i;..
     140:	i;..i;..%8..i;..
     150:	i;..i;..i;..i;..
     160:	i;..i;..i;..i;..
     170:	i;..i;..i;..i;..
     180:	i;..i;..i;..i;..
     190:	i;..i;..a=..i;..
     1a0:	i;..i;..i;..i;..
     1b0:	i;..i;..i;..i;..
     1c0:	i;..i;..i;..i;..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3b70 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	233c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2240 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2240 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4214 <__libc_init_array>

	startup_late_hook();
     33a:	bl	3b7c <startup_late_hook>
	main();
     33e:	bl	37f0 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x00004e98
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1e74
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x00004e9c

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x00004e9c
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #75	; 0x4b
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	228c <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	2264 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, transport, SECOND, 1);
Knob knob3(A2, sequence1, transport, THIRD, 2);
Knob knob4(A3, sequence1, transport, FOURTH, 3);
Knob knob5(A4, sequence1, transport, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #232	; 0xe8
     49c:	bl	25b8 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	cfe <loop+0x86a>
     4a6:	ldr	r4, [pc, #644]	; (72c <loop+0x298>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #644]	; (730 <loop+0x29c>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	2270 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	d2e <loop+0x89a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #132]	; 0x84
	return ret;
     4c4:	ldr	r3, [sp, #132]	; 0x84
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #128]	; 0x80
	return ret;
     4cc:	ldr	r1, [sp, #128]	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #604]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r1, r3
     4d4:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #596]	; (730 <loop+0x29c>)
     4da:	cmp	r5, r3
     4dc:	beq.w	d76 <loop+0x8e2>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cbnz	r5, 52a <loop+0x96>
     4e4:	ldrb	r3, [r7, #16]
     4e6:	cmp	r3, #0
     4e8:	bne.w	12a2 <loop+0xe0e>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
        m_led.toggle();
     4ec:	ldr	r5, [r7, #24]
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     4ee:	ldrb	r3, [r7, #17]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     4f0:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     4f2:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     4f4:	clz	r1, r1
     4f8:	lsrs	r1, r1, #5
     4fa:	str	r1, [r5, #4]
     4fc:	cmp	r3, #0
     4fe:	bne.w	1452 <loop+0xfbe>

      digitalWrite(m_pin, m_state);
     502:	bl	2264 <digitalWrite>

      if (blinking) {
     506:	ldrb	r3, [r5, #16]
     508:	cbz	r3, 518 <loop+0x84>
        digitalWrite(m_pin, !m_state);
     50a:	ldr	r1, [r5, #4]
     50c:	ldrb	r0, [r5, #0]
     50e:	clz	r1, r1
     512:	lsrs	r1, r1, #5
     514:	bl	2264 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     518:	ldr	r3, [r6, #28]
     51a:	ldr	r1, [r6, #0]
     51c:	ldr	r2, [r6, #12]
     51e:	ldr.w	r1, [r3, r1, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
     522:	ldrb	r3, [r1, #4]
     524:	eor.w	r3, r3, #1
     528:	strb	r3, [r1, #4]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r5, [pc, #520]	; (734 <loop+0x2a0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r5, #32]
     532:	bl	2270 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r6, r0
     53e:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	d68 <loop+0x8d4>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #124]	; 0x7c
	return ret;
     548:	ldr	r3, [sp, #124]	; 0x7c
        m_lastDebounceTime = millis();
     54a:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #120]	; 0x78
	return ret;
     550:	ldr	r1, [sp, #120]	; 0x78
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #472]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     55a:	ldr	r3, [r5, #4]
     55c:	ldr	r7, [pc, #468]	; (734 <loop+0x2a0>)
     55e:	cmp	r6, r3
     560:	beq.w	d72 <loop+0x8de>
          m_state = reading;
     564:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cbnz	r6, 5ae <loop+0x11a>
     568:	ldrb	r3, [r7, #16]
     56a:	cmp	r3, #0
     56c:	bne.w	1308 <loop+0xe74>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
        m_led.toggle();
     570:	ldr	r6, [r7, #24]
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     572:	ldrb	r3, [r7, #17]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     574:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
     576:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     578:	clz	r1, r1
     57c:	lsrs	r1, r1, #5
     57e:	str	r1, [r6, #4]
     580:	cmp	r3, #0
     582:	bne.w	147c <loop+0xfe8>

      digitalWrite(m_pin, m_state);
     586:	bl	2264 <digitalWrite>

      if (blinking) {
     58a:	ldrb	r3, [r6, #16]
     58c:	cbz	r3, 59c <loop+0x108>
        digitalWrite(m_pin, !m_state);
     58e:	ldr	r1, [r6, #4]
     590:	ldrb	r0, [r6, #0]
     592:	clz	r1, r1
     596:	lsrs	r1, r1, #5
     598:	bl	2264 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     59c:	ldr	r3, [r5, #28]
     59e:	ldr	r1, [r5, #0]
     5a0:	ldr	r2, [r5, #12]
     5a2:	ldr.w	r1, [r3, r1, lsl #2]
     5a6:	ldrb	r3, [r1, #4]
     5a8:	eor.w	r3, r3, #1
     5ac:	strb	r3, [r1, #4]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #392]	; (738 <loop+0x2a4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	2270 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	d38 <loop+0x8a4>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #116]	; 0x74
	return ret;
     5cc:	ldr	r3, [sp, #116]	; 0x74
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #112]	; 0x70
	return ret;
     5d4:	ldr	r1, [sp, #112]	; 0x70
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #340]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	632 <loop+0x19e>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #340]	; (738 <loop+0x2a4>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	d6e <loop+0x8da>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cbnz	r5, 632 <loop+0x19e>
     5ec:	ldrb	r3, [r7, #16]
     5ee:	cmp	r3, #0
     5f0:	bne.w	123c <loop+0xda8>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
        m_led.toggle();
     5f4:	ldr	r5, [r7, #24]
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     5f6:	ldrb	r3, [r7, #17]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     5f8:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     5fa:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     5fc:	clz	r1, r1
     600:	lsrs	r1, r1, #5
     602:	str	r1, [r5, #4]
     604:	cmp	r3, #0
     606:	bne.w	1428 <loop+0xf94>

      digitalWrite(m_pin, m_state);
     60a:	bl	2264 <digitalWrite>

      if (blinking) {
     60e:	ldrb	r3, [r5, #16]
     610:	cbz	r3, 620 <loop+0x18c>
        digitalWrite(m_pin, !m_state);
     612:	ldr	r1, [r5, #4]
     614:	ldrb	r0, [r5, #0]
     616:	clz	r1, r1
     61a:	lsrs	r1, r1, #5
     61c:	bl	2264 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     620:	ldr	r3, [r6, #28]
     622:	ldr	r1, [r6, #0]
     624:	ldr	r2, [r6, #12]
     626:	ldr.w	r1, [r3, r1, lsl #2]
     62a:	ldrb	r3, [r1, #4]
     62c:	eor.w	r3, r3, #1
     630:	strb	r3, [r1, #4]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     632:	ldr	r5, [pc, #264]	; (73c <loop+0x2a8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     634:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     636:	ldrb.w	r0, [r5, #32]
     63a:	bl	2270 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     63e:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     640:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     642:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     644:	mov	r6, r0
     646:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     648:	beq.w	d34 <loop+0x8a0>
     64c:	ldr	r3, [r4, #0]
     64e:	str	r3, [sp, #108]	; 0x6c
	return ret;
     650:	ldr	r3, [sp, #108]	; 0x6c
        m_lastDebounceTime = millis();
     652:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     654:	ldr	r1, [r4, #0]
     656:	str	r1, [sp, #104]	; 0x68
	return ret;
     658:	ldr	r1, [sp, #104]	; 0x68
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     65a:	ldr.w	r8, [pc, #208]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     65e:	cmp	r1, r3
     660:	beq.n	6b6 <loop+0x222>
        if (reading != m_state) {
     662:	ldr	r3, [r5, #4]
     664:	ldr	r7, [pc, #212]	; (73c <loop+0x2a8>)
     666:	cmp	r6, r3
     668:	beq.w	d7c <loop+0x8e8>
          m_state = reading;
     66c:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     66e:	cbnz	r6, 6b6 <loop+0x222>
     670:	ldrb	r3, [r7, #16]
     672:	cmp	r3, #0
     674:	bne.w	11d6 <loop+0xd42>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
        m_led.toggle();
     678:	ldr	r6, [r7, #24]
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     67a:	ldrb	r3, [r7, #17]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     67c:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
     67e:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     680:	clz	r1, r1
     684:	lsrs	r1, r1, #5
     686:	str	r1, [r6, #4]
     688:	cmp	r3, #0
     68a:	bne.w	13fe <loop+0xf6a>

      digitalWrite(m_pin, m_state);
     68e:	bl	2264 <digitalWrite>

      if (blinking) {
     692:	ldrb	r3, [r6, #16]
     694:	cbz	r3, 6a4 <loop+0x210>
        digitalWrite(m_pin, !m_state);
     696:	ldr	r1, [r6, #4]
     698:	ldrb	r0, [r6, #0]
     69a:	clz	r1, r1
     69e:	lsrs	r1, r1, #5
     6a0:	bl	2264 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     6a4:	ldr	r3, [r5, #28]
     6a6:	ldr	r1, [r5, #0]
     6a8:	ldr	r2, [r5, #12]
     6aa:	ldr.w	r1, [r3, r1, lsl #2]
     6ae:	ldrb	r3, [r1, #4]
     6b0:	eor.w	r3, r3, #1
     6b4:	strb	r3, [r1, #4]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     6b6:	ldr	r6, [pc, #136]	; (740 <loop+0x2ac>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     6b8:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     6ba:	ldrb.w	r0, [r6, #32]
     6be:	bl	2270 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     6c2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     6c4:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     6c6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     6c8:	mov	r5, r0
     6ca:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     6cc:	beq.w	d26 <loop+0x892>
     6d0:	ldr	r3, [r4, #0]
     6d2:	str	r3, [sp, #100]	; 0x64
	return ret;
     6d4:	ldr	r3, [sp, #100]	; 0x64
        m_lastDebounceTime = millis();
     6d6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6d8:	ldr	r1, [r4, #0]
     6da:	str	r1, [sp, #96]	; 0x60
	return ret;
     6dc:	ldr	r1, [sp, #96]	; 0x60
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6de:	ldr.w	r8, [pc, #76]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     6e2:	cmp	r1, r3
     6e4:	beq.n	756 <loop+0x2c2>
        if (reading != m_state) {
     6e6:	ldr	r3, [r6, #4]
     6e8:	ldr	r7, [pc, #84]	; (740 <loop+0x2ac>)
     6ea:	cmp	r5, r3
     6ec:	beq.w	d80 <loop+0x8ec>
          m_state = reading;
     6f0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     6f2:	cmp	r5, #0
     6f4:	bne.n	756 <loop+0x2c2>
     6f6:	ldrb	r3, [r7, #16]
     6f8:	cmp	r3, #0
     6fa:	bne.w	1170 <loop+0xcdc>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
        m_led.toggle();
     6fe:	ldr	r5, [r7, #24]
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     700:	ldrb	r3, [r7, #17]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     702:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     704:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     706:	clz	r1, r1
     70a:	lsrs	r1, r1, #5
     70c:	str	r1, [r5, #4]
     70e:	cmp	r3, #0
     710:	bne.w	14a6 <loop+0x1012>

      digitalWrite(m_pin, m_state);
     714:	bl	2264 <digitalWrite>

      if (blinking) {
     718:	ldrb	r3, [r5, #16]
     71a:	cbz	r3, 744 <loop+0x2b0>
        digitalWrite(m_pin, !m_state);
     71c:	ldr	r1, [r5, #4]
     71e:	ldrb	r0, [r5, #0]
     720:	clz	r1, r1
     724:	lsrs	r1, r1, #5
     726:	bl	2264 <digitalWrite>
     72a:	b.n	744 <loop+0x2b0>
     72c:	.word	0x1fff187c
     730:	.word	0x1fff160c
     734:	.word	0x1fff1630
     738:	.word	0x1fff1654
     73c:	.word	0x1fff1678
     740:	.word	0x1fff169c
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     744:	ldr	r3, [r6, #28]
     746:	ldr	r1, [r6, #0]
     748:	ldr	r2, [r6, #12]
     74a:	ldr.w	r1, [r3, r1, lsl #2]
     74e:	ldrb	r3, [r1, #4]
     750:	eor.w	r3, r3, #1
     754:	strb	r3, [r1, #4]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     756:	ldr	r5, [pc, #688]	; (a08 <loop+0x574>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     758:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     75a:	ldrb.w	r0, [r5, #32]
     75e:	bl	2270 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     762:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     764:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     766:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     768:	mov	r6, r0
     76a:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     76c:	beq.w	d2a <loop+0x896>
     770:	ldr	r3, [r4, #0]
     772:	str	r3, [sp, #92]	; 0x5c
	return ret;
     774:	ldr	r3, [sp, #92]	; 0x5c
        m_lastDebounceTime = millis();
     776:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     778:	ldr	r1, [r4, #0]
     77a:	str	r1, [sp, #88]	; 0x58
	return ret;
     77c:	ldr	r1, [sp, #88]	; 0x58
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     77e:	ldr.w	r8, [pc, #656]	; a10 <loop+0x57c>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     782:	cmp	r1, r3
     784:	beq.n	7da <loop+0x346>
        if (reading != m_state) {
     786:	ldr	r3, [r5, #4]
     788:	ldr	r7, [pc, #636]	; (a08 <loop+0x574>)
     78a:	cmp	r6, r3
     78c:	beq.w	d84 <loop+0x8f0>
          m_state = reading;
     790:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     792:	cbnz	r6, 7da <loop+0x346>
     794:	ldrb	r3, [r7, #16]
     796:	cmp	r3, #0
     798:	bne.w	136e <loop+0xeda>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
        m_led.toggle();
     79c:	ldr	r6, [r7, #24]
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     79e:	ldrb	r3, [r7, #17]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     7a0:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
     7a2:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     7a4:	clz	r1, r1
     7a8:	lsrs	r1, r1, #5
     7aa:	str	r1, [r6, #4]
     7ac:	cmp	r3, #0
     7ae:	bne.w	13d4 <loop+0xf40>

      digitalWrite(m_pin, m_state);
     7b2:	bl	2264 <digitalWrite>

      if (blinking) {
     7b6:	ldrb	r3, [r6, #16]
     7b8:	cbz	r3, 7c8 <loop+0x334>
        digitalWrite(m_pin, !m_state);
     7ba:	ldr	r1, [r6, #4]
     7bc:	ldrb	r0, [r6, #0]
     7be:	clz	r1, r1
     7c2:	lsrs	r1, r1, #5
     7c4:	bl	2264 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     7c8:	ldr	r3, [r5, #28]
     7ca:	ldr	r1, [r5, #0]
     7cc:	ldr	r2, [r5, #12]
     7ce:	ldr.w	r1, [r3, r1, lsl #2]
     7d2:	ldrb	r3, [r1, #4]
     7d4:	eor.w	r3, r3, #1
     7d8:	strb	r3, [r1, #4]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
     7da:	ldr	r6, [pc, #560]	; (a0c <loop+0x578>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     7dc:	str	r2, [r5, #8]
     7de:	ldrb	r3, [r6, #16]
     7e0:	cmp	r3, #0
     7e2:	beq.w	cb6 <loop+0x822>
     7e6:	ldr	r3, [r4, #0]
     7e8:	str	r3, [sp, #80]	; 0x50
	return ret;
     7ea:	ldr	r3, [sp, #80]	; 0x50
     7ec:	ldr	r1, [r6, #8]
     7ee:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7f0:	ldr	r7, [pc, #540]	; (a10 <loop+0x57c>)
     7f2:	subs	r3, r3, r1
     7f4:	cmp	r2, r3
     7f6:	bcc.w	c96 <loop+0x802>
     7fa:	ldr	r5, [pc, #536]	; (a14 <loop+0x580>)
     7fc:	ldrb	r3, [r5, #16]
     7fe:	cmp	r3, #0
     800:	beq.w	c4e <loop+0x7ba>
     804:	ldr	r3, [r4, #0]
     806:	str	r3, [sp, #68]	; 0x44
	return ret;
     808:	ldr	r3, [sp, #68]	; 0x44
     80a:	ldr	r1, [r5, #8]
     80c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     80e:	ldr	r7, [pc, #512]	; (a10 <loop+0x57c>)
     810:	subs	r3, r3, r1
     812:	cmp	r2, r3
     814:	bcc.w	c2e <loop+0x79a>
     818:	ldr	r5, [pc, #508]	; (a18 <loop+0x584>)
     81a:	ldrb	r3, [r5, #16]
     81c:	cmp	r3, #0
     81e:	beq.w	be6 <loop+0x752>
     822:	ldr	r3, [r4, #0]
     824:	str	r3, [sp, #56]	; 0x38
	return ret;
     826:	ldr	r3, [sp, #56]	; 0x38
     828:	ldr	r1, [r5, #8]
     82a:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     82c:	ldr	r7, [pc, #480]	; (a10 <loop+0x57c>)
     82e:	subs	r3, r3, r1
     830:	cmp	r2, r3
     832:	bcc.w	bc6 <loop+0x732>
     836:	ldr	r5, [pc, #484]	; (a1c <loop+0x588>)
     838:	ldrb	r3, [r5, #16]
     83a:	cmp	r3, #0
     83c:	beq.w	b7e <loop+0x6ea>
     840:	ldr	r3, [r4, #0]
     842:	str	r3, [sp, #44]	; 0x2c
	return ret;
     844:	ldr	r3, [sp, #44]	; 0x2c
     846:	ldr	r1, [r5, #8]
     848:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     84a:	ldr	r7, [pc, #452]	; (a10 <loop+0x57c>)
     84c:	subs	r3, r3, r1
     84e:	cmp	r2, r3
     850:	bcc.w	b5e <loop+0x6ca>
     854:	ldr	r5, [pc, #456]	; (a20 <loop+0x58c>)
     856:	ldrb	r3, [r5, #16]
     858:	cmp	r3, #0
     85a:	beq.w	b16 <loop+0x682>
     85e:	ldr	r3, [r4, #0]
     860:	str	r3, [sp, #32]
	return ret;
     862:	ldr	r3, [sp, #32]
     864:	ldr	r1, [r5, #8]
     866:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     868:	ldr	r7, [pc, #420]	; (a10 <loop+0x57c>)
     86a:	subs	r3, r3, r1
     86c:	cmp	r2, r3
     86e:	bcc.w	af6 <loop+0x662>
     872:	ldr	r5, [pc, #432]	; (a24 <loop+0x590>)
     874:	ldrb	r3, [r5, #16]
     876:	cmp	r3, #0
     878:	beq.w	ab2 <loop+0x61e>
     87c:	ldr	r3, [r4, #0]
     87e:	str	r3, [sp, #20]
	return ret;
     880:	ldr	r3, [sp, #20]
     882:	ldr	r1, [r5, #8]
     884:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     886:	ldr	r7, [pc, #392]	; (a10 <loop+0x57c>)
     888:	subs	r3, r3, r1
     88a:	cmp	r2, r3
     88c:	bcc.w	a92 <loop+0x5fe>
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     890:	ldr	r4, [pc, #404]	; (a28 <loop+0x594>)
     892:	ldrb	r0, [r4, #0]
     894:	bl	2080 <analogRead>

      int diff = abs(m_value - m_lastValue);
     898:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     89a:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     89c:	cmp	r0, r3
     89e:	beq.n	8ea <loop+0x456>
     8a0:	subs	r3, r0, r3
     8a2:	cmp	r3, #0
     8a4:	it	lt
     8a6:	neglt	r3, r3
     8a8:	cmp	r3, #10
     8aa:	ble.n	8ea <loop+0x456>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     8ac:	ldrb	r3, [r4, #24]
     8ae:	cmp	r3, #4
     8b0:	beq.w	e74 <loop+0x9e0>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     8b4:	ldr	r3, [pc, #372]	; (a2c <loop+0x598>)
     8b6:	ldrb	r3, [r3, #0]
     8b8:	cmp	r3, #1
     8ba:	beq.w	1058 <loop+0xbc4>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     8be:	cmp	r3, #0
     8c0:	beq.w	dc2 <loop+0x92e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     8c4:	cmp	r3, #2
     8c6:	bne.n	8e8 <loop+0x454>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     8c8:	ldr	r2, [r4, #16]
     8ca:	ldr	r1, [r4, #12]
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     8cc:	mvn.w	r3, #21
     8d0:	mul.w	r3, r3, r0
     8d4:	cmp	r3, #0
     8d6:	add.w	r2, r2, r1, lsl #2
     8da:	it	lt
     8dc:	addwlt	r3, r3, #1023	; 0x3ff
     8e0:	ldr	r2, [r2, #4]
     8e2:	asrs	r3, r3, #10
     8e4:	adds	r3, #24
     8e6:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     8e8:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     8ea:	ldr	r4, [pc, #324]	; (a30 <loop+0x59c>)
     8ec:	ldrb	r0, [r4, #0]
     8ee:	bl	2080 <analogRead>

      int diff = abs(m_value - m_lastValue);
     8f2:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     8f4:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     8f6:	cmp	r0, r3
     8f8:	beq.n	944 <loop+0x4b0>
     8fa:	subs	r3, r0, r3
     8fc:	cmp	r3, #0
     8fe:	it	lt
     900:	neglt	r3, r3
     902:	cmp	r3, #10
     904:	ble.n	944 <loop+0x4b0>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     906:	ldrb	r3, [r4, #24]
     908:	cmp	r3, #4
     90a:	beq.w	e90 <loop+0x9fc>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     90e:	ldr	r3, [pc, #284]	; (a2c <loop+0x598>)
     910:	ldrb	r3, [r3, #0]
     912:	cmp	r3, #1
     914:	beq.w	ffc <loop+0xb68>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     918:	cmp	r3, #0
     91a:	beq.w	e3a <loop+0x9a6>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     91e:	cmp	r3, #2
     920:	bne.n	942 <loop+0x4ae>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     922:	ldr	r2, [r4, #16]
     924:	ldr	r1, [r4, #12]
     926:	mvn.w	r3, #21
     92a:	mul.w	r3, r3, r0
     92e:	cmp	r3, #0
     930:	add.w	r2, r2, r1, lsl #2
     934:	it	lt
     936:	addwlt	r3, r3, #1023	; 0x3ff
     93a:	ldr	r2, [r2, #4]
     93c:	asrs	r3, r3, #10
     93e:	adds	r3, #24
     940:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     942:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     944:	ldr	r4, [pc, #236]	; (a34 <loop+0x5a0>)
     946:	ldrb	r0, [r4, #0]
     948:	bl	2080 <analogRead>

      int diff = abs(m_value - m_lastValue);
     94c:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     94e:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     950:	cmp	r0, r3
     952:	beq.n	99e <loop+0x50a>
     954:	subs	r3, r0, r3
     956:	cmp	r3, #0
     958:	it	lt
     95a:	neglt	r3, r3
     95c:	cmp	r3, #10
     95e:	ble.n	99e <loop+0x50a>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     960:	ldrb	r3, [r4, #24]
     962:	cmp	r3, #4
     964:	beq.w	ec8 <loop+0xa34>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     968:	ldr	r3, [pc, #192]	; (a2c <loop+0x598>)
     96a:	ldrb	r3, [r3, #0]
     96c:	cmp	r3, #1
     96e:	beq.w	1018 <loop+0xb84>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     972:	cmp	r3, #0
     974:	beq.w	e1c <loop+0x988>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     978:	cmp	r3, #2
     97a:	bne.n	99c <loop+0x508>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     97c:	ldr	r2, [r4, #16]
     97e:	ldr	r1, [r4, #12]
     980:	mvn.w	r3, #21
     984:	mul.w	r3, r3, r0
     988:	cmp	r3, #0
     98a:	add.w	r2, r2, r1, lsl #2
     98e:	it	lt
     990:	addwlt	r3, r3, #1023	; 0x3ff
     994:	ldr	r2, [r2, #4]
     996:	asrs	r3, r3, #10
     998:	adds	r3, #24
     99a:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     99c:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     99e:	ldr	r4, [pc, #152]	; (a38 <loop+0x5a4>)
     9a0:	ldrb	r0, [r4, #0]
     9a2:	bl	2080 <analogRead>

      int diff = abs(m_value - m_lastValue);
     9a6:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     9a8:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     9aa:	cmp	r0, r3
     9ac:	beq.n	9f8 <loop+0x564>
     9ae:	subs	r3, r0, r3
     9b0:	cmp	r3, #0
     9b2:	it	lt
     9b4:	neglt	r3, r3
     9b6:	cmp	r3, #10
     9b8:	ble.n	9f8 <loop+0x564>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     9ba:	ldrb	r3, [r4, #24]
     9bc:	cmp	r3, #4
     9be:	beq.w	eac <loop+0xa18>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     9c2:	ldr	r3, [pc, #104]	; (a2c <loop+0x598>)
     9c4:	ldrb	r3, [r3, #0]
     9c6:	cmp	r3, #1
     9c8:	beq.w	1034 <loop+0xba0>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     9cc:	cmp	r3, #0
     9ce:	beq.w	de0 <loop+0x94c>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     9d2:	cmp	r3, #2
     9d4:	bne.n	9f6 <loop+0x562>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     9d6:	ldr	r2, [r4, #16]
     9d8:	ldr	r1, [r4, #12]
     9da:	mvn.w	r3, #21
     9de:	mul.w	r3, r3, r0
     9e2:	cmp	r3, #0
     9e4:	add.w	r2, r2, r1, lsl #2
     9e8:	it	lt
     9ea:	addwlt	r3, r3, #1023	; 0x3ff
     9ee:	ldr	r2, [r2, #4]
     9f0:	asrs	r3, r3, #10
     9f2:	adds	r3, #24
     9f4:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     9f6:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     9f8:	ldr	r4, [pc, #64]	; (a3c <loop+0x5a8>)
     9fa:	ldrb	r0, [r4, #0]
     9fc:	bl	2080 <analogRead>

      int diff = abs(m_value - m_lastValue);
     a00:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     a02:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     a04:	cmp	r0, r3
     a06:	b.n	a40 <loop+0x5ac>
     a08:	.word	0x1fff16c0
     a0c:	.word	0x1fff1804
     a10:	.word	0x1fff187c
     a14:	.word	0x1fff181c
     a18:	.word	0x1fff1834
     a1c:	.word	0x1fff184c
     a20:	.word	0x1fff15d8
     a24:	.word	0x1fff15f0
     a28:	.word	0x1fff1734
     a2c:	.word	0x1fff1800
     a30:	.word	0x1fff1750
     a34:	.word	0x1fff176c
     a38:	.word	0x1fff1788
     a3c:	.word	0x1fff17a4
     a40:	beq.n	a8c <loop+0x5f8>
     a42:	subs	r3, r0, r3
     a44:	cmp	r3, #0
     a46:	it	lt
     a48:	neglt	r3, r3
     a4a:	cmp	r3, #10
     a4c:	ble.n	a8c <loop+0x5f8>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     a4e:	ldrb	r3, [r4, #24]
     a50:	cmp	r3, #4
     a52:	beq.w	e58 <loop+0x9c4>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     a56:	ldr	r3, [pc, #740]	; (d3c <loop+0x8a8>)
     a58:	ldrb	r3, [r3, #0]
     a5a:	cmp	r3, #1
     a5c:	beq.w	1074 <loop+0xbe0>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     a60:	cmp	r3, #0
     a62:	beq.w	dfe <loop+0x96a>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     a66:	cmp	r3, #2
     a68:	bne.n	a8a <loop+0x5f6>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     a6a:	ldr	r2, [r4, #16]
     a6c:	ldr	r1, [r4, #12]
     a6e:	mvn.w	r3, #21
     a72:	mul.w	r3, r3, r0
     a76:	cmp	r3, #0
     a78:	add.w	r2, r2, r1, lsl #2
     a7c:	it	lt
     a7e:	addwlt	r3, r3, #1023	; 0x3ff
     a82:	ldr	r2, [r2, #4]
     a84:	asrs	r3, r3, #10
     a86:	adds	r3, #24
     a88:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     a8a:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     a8c:	add	sp, #232	; 0xe8
     a8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        digitalWrite(m_pin, !digitalRead(m_pin));
     a92:	ldrb	r6, [r5, #0]
     a94:	mov	r0, r6
     a96:	bl	2270 <digitalRead>
     a9a:	clz	r1, r0
     a9e:	lsrs	r1, r1, #5
     aa0:	mov	r0, r6
     aa2:	bl	2264 <digitalWrite>
     aa6:	ldr	r3, [r7, #0]
     aa8:	str	r3, [sp, #24]
	return ret;
     aaa:	ldr	r3, [sp, #24]
        blinking = false;
        lastBlink = millis();        
     aac:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     aae:	movs	r3, #0
     ab0:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     ab2:	ldr	r6, [r5, #20]
     ab4:	ldr	r5, [pc, #648]	; (d40 <loop+0x8ac>)
     ab6:	cmp	r6, #0
     ab8:	ble.w	890 <loop+0x3fc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     abc:	ldr	r3, [r4, #0]
     abe:	str	r3, [sp, #16]
	return ret;
     ac0:	ldr	r3, [sp, #16]
     ac2:	ldr	r1, [r5, #8]
     ac4:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ac6:	ldr	r7, [pc, #636]	; (d44 <loop+0x8b0>)
     ac8:	subs	r3, r3, r1
     aca:	cmp	r2, r3
     acc:	bcs.w	890 <loop+0x3fc>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ad0:	ldrb	r4, [r5, #0]
     ad2:	mov	r0, r4
     ad4:	bl	2270 <digitalRead>
     ad8:	clz	r1, r0
     adc:	lsrs	r1, r1, #5
     ade:	mov	r0, r4
     ae0:	bl	2264 <digitalWrite>
     ae4:	ldr	r3, [r7, #0]
     ae6:	str	r3, [sp, #228]	; 0xe4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     ae8:	subs	r6, #2
	return ret;
     aea:	ldr	r2, [sp, #228]	; 0xe4
     aec:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     aee:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     af0:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     af2:	strb	r3, [r5, #16]
     af4:	b.n	890 <loop+0x3fc>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     af6:	ldrb	r6, [r5, #0]
     af8:	mov	r0, r6
     afa:	bl	2270 <digitalRead>
     afe:	clz	r1, r0
     b02:	lsrs	r1, r1, #5
     b04:	mov	r0, r6
     b06:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b0a:	ldr	r3, [r7, #0]
     b0c:	str	r3, [sp, #36]	; 0x24
	return ret;
     b0e:	ldr	r3, [sp, #36]	; 0x24
        blinking = false;
        lastBlink = millis();        
     b10:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b12:	movs	r3, #0
     b14:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b16:	ldr	r6, [r5, #20]
     b18:	ldr	r5, [pc, #556]	; (d48 <loop+0x8b4>)
     b1a:	cmp	r6, #0
     b1c:	ble.w	872 <loop+0x3de>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b20:	ldr	r3, [r4, #0]
     b22:	str	r3, [sp, #28]
	return ret;
     b24:	ldr	r3, [sp, #28]
     b26:	ldr	r1, [r5, #8]
     b28:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b2a:	ldr.w	r8, [pc, #536]	; d44 <loop+0x8b0>
     b2e:	subs	r3, r3, r1
     b30:	cmp	r2, r3
     b32:	bcs.w	872 <loop+0x3de>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b36:	ldrb	r7, [r5, #0]
     b38:	mov	r0, r7
     b3a:	bl	2270 <digitalRead>
     b3e:	clz	r1, r0
     b42:	lsrs	r1, r1, #5
     b44:	mov	r0, r7
     b46:	bl	2264 <digitalWrite>
     b4a:	ldr.w	r3, [r8]
     b4e:	str	r3, [sp, #224]	; 0xe0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b50:	subs	r6, #2
	return ret;
     b52:	ldr	r2, [sp, #224]	; 0xe0
     b54:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b56:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     b58:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b5a:	strb	r3, [r5, #16]
     b5c:	b.n	872 <loop+0x3de>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     b5e:	ldrb	r6, [r5, #0]
     b60:	mov	r0, r6
     b62:	bl	2270 <digitalRead>
     b66:	clz	r1, r0
     b6a:	lsrs	r1, r1, #5
     b6c:	mov	r0, r6
     b6e:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b72:	ldr	r3, [r7, #0]
     b74:	str	r3, [sp, #48]	; 0x30
	return ret;
     b76:	ldr	r3, [sp, #48]	; 0x30
        blinking = false;
        lastBlink = millis();        
     b78:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b7a:	movs	r3, #0
     b7c:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b7e:	ldr	r6, [r5, #20]
     b80:	ldr	r5, [pc, #456]	; (d4c <loop+0x8b8>)
     b82:	cmp	r6, #0
     b84:	ble.w	854 <loop+0x3c0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b88:	ldr	r3, [r4, #0]
     b8a:	str	r3, [sp, #40]	; 0x28
	return ret;
     b8c:	ldr	r3, [sp, #40]	; 0x28
     b8e:	ldr	r1, [r5, #8]
     b90:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b92:	ldr.w	r8, [pc, #432]	; d44 <loop+0x8b0>
     b96:	subs	r3, r3, r1
     b98:	cmp	r2, r3
     b9a:	bcs.w	854 <loop+0x3c0>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b9e:	ldrb	r7, [r5, #0]
     ba0:	mov	r0, r7
     ba2:	bl	2270 <digitalRead>
     ba6:	clz	r1, r0
     baa:	lsrs	r1, r1, #5
     bac:	mov	r0, r7
     bae:	bl	2264 <digitalWrite>
     bb2:	ldr.w	r3, [r8]
     bb6:	str	r3, [sp, #220]	; 0xdc
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     bb8:	subs	r6, #2
	return ret;
     bba:	ldr	r2, [sp, #220]	; 0xdc
     bbc:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     bbe:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     bc0:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     bc2:	strb	r3, [r5, #16]
     bc4:	b.n	854 <loop+0x3c0>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     bc6:	ldrb	r6, [r5, #0]
     bc8:	mov	r0, r6
     bca:	bl	2270 <digitalRead>
     bce:	clz	r1, r0
     bd2:	lsrs	r1, r1, #5
     bd4:	mov	r0, r6
     bd6:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bda:	ldr	r3, [r7, #0]
     bdc:	str	r3, [sp, #60]	; 0x3c
	return ret;
     bde:	ldr	r3, [sp, #60]	; 0x3c
        blinking = false;
        lastBlink = millis();        
     be0:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     be2:	movs	r3, #0
     be4:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     be6:	ldr	r6, [r5, #20]
     be8:	ldr	r5, [pc, #356]	; (d50 <loop+0x8bc>)
     bea:	cmp	r6, #0
     bec:	ble.w	836 <loop+0x3a2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bf0:	ldr	r3, [r4, #0]
     bf2:	str	r3, [sp, #52]	; 0x34
	return ret;
     bf4:	ldr	r3, [sp, #52]	; 0x34
     bf6:	ldr	r1, [r5, #8]
     bf8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bfa:	ldr.w	r8, [pc, #328]	; d44 <loop+0x8b0>
     bfe:	subs	r3, r3, r1
     c00:	cmp	r2, r3
     c02:	bcs.w	836 <loop+0x3a2>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c06:	ldrb	r7, [r5, #0]
     c08:	mov	r0, r7
     c0a:	bl	2270 <digitalRead>
     c0e:	clz	r1, r0
     c12:	lsrs	r1, r1, #5
     c14:	mov	r0, r7
     c16:	bl	2264 <digitalWrite>
     c1a:	ldr.w	r3, [r8]
     c1e:	str	r3, [sp, #216]	; 0xd8
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     c20:	subs	r6, #2
	return ret;
     c22:	ldr	r2, [sp, #216]	; 0xd8
     c24:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c26:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     c28:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c2a:	strb	r3, [r5, #16]
     c2c:	b.n	836 <loop+0x3a2>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     c2e:	ldrb	r6, [r5, #0]
     c30:	mov	r0, r6
     c32:	bl	2270 <digitalRead>
     c36:	clz	r1, r0
     c3a:	lsrs	r1, r1, #5
     c3c:	mov	r0, r6
     c3e:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c42:	ldr	r3, [r7, #0]
     c44:	str	r3, [sp, #72]	; 0x48
	return ret;
     c46:	ldr	r3, [sp, #72]	; 0x48
        blinking = false;
        lastBlink = millis();        
     c48:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     c4a:	movs	r3, #0
     c4c:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     c4e:	ldr	r6, [r5, #20]
     c50:	ldr	r5, [pc, #256]	; (d54 <loop+0x8c0>)
     c52:	cmp	r6, #0
     c54:	ble.w	818 <loop+0x384>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c58:	ldr	r3, [r4, #0]
     c5a:	str	r3, [sp, #64]	; 0x40
	return ret;
     c5c:	ldr	r3, [sp, #64]	; 0x40
     c5e:	ldr	r1, [r5, #8]
     c60:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c62:	ldr.w	r8, [pc, #224]	; d44 <loop+0x8b0>
     c66:	subs	r3, r3, r1
     c68:	cmp	r2, r3
     c6a:	bcs.w	818 <loop+0x384>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c6e:	ldrb	r7, [r5, #0]
     c70:	mov	r0, r7
     c72:	bl	2270 <digitalRead>
     c76:	clz	r1, r0
     c7a:	lsrs	r1, r1, #5
     c7c:	mov	r0, r7
     c7e:	bl	2264 <digitalWrite>
     c82:	ldr.w	r3, [r8]
     c86:	str	r3, [sp, #212]	; 0xd4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     c88:	subs	r6, #2
	return ret;
     c8a:	ldr	r2, [sp, #212]	; 0xd4
     c8c:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c8e:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     c90:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c92:	strb	r3, [r5, #16]
     c94:	b.n	818 <loop+0x384>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     c96:	ldrb	r5, [r6, #0]
     c98:	mov	r0, r5
     c9a:	bl	2270 <digitalRead>
     c9e:	clz	r1, r0
     ca2:	lsrs	r1, r1, #5
     ca4:	mov	r0, r5
     ca6:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     caa:	ldr	r3, [r7, #0]
     cac:	str	r3, [sp, #84]	; 0x54
	return ret;
     cae:	ldr	r3, [sp, #84]	; 0x54
        blinking = false;
        lastBlink = millis();        
     cb0:	str	r3, [r6, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     cb2:	movs	r3, #0
     cb4:	strb	r3, [r6, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     cb6:	ldr	r6, [r6, #20]
     cb8:	ldr	r5, [pc, #156]	; (d58 <loop+0x8c4>)
     cba:	cmp	r6, #0
     cbc:	ble.w	7fa <loop+0x366>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cc0:	ldr	r3, [r4, #0]
     cc2:	str	r3, [sp, #76]	; 0x4c
	return ret;
     cc4:	ldr	r3, [sp, #76]	; 0x4c
     cc6:	ldr	r1, [r5, #8]
     cc8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cca:	ldr.w	r8, [pc, #120]	; d44 <loop+0x8b0>
     cce:	subs	r3, r3, r1
     cd0:	cmp	r2, r3
     cd2:	bcs.w	7fa <loop+0x366>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     cd6:	ldrb	r7, [r5, #0]
     cd8:	mov	r0, r7
     cda:	bl	2270 <digitalRead>
     cde:	clz	r1, r0
     ce2:	lsrs	r1, r1, #5
     ce4:	mov	r0, r7
     ce6:	bl	2264 <digitalWrite>
     cea:	ldr.w	r3, [r8]
     cee:	str	r3, [sp, #208]	; 0xd0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     cf0:	subs	r6, #2
	return ret;
     cf2:	ldr	r2, [sp, #208]	; 0xd0
     cf4:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     cf6:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     cf8:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     cfa:	strb	r3, [r5, #16]
     cfc:	b.n	7fa <loop+0x366>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     cfe:	ldr	r3, [pc, #92]	; (d5c <loop+0x8c8>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     d00:	ldrb	r3, [r3, #0]
     d02:	cmp	r3, #250	; 0xfa
     d04:	beq.w	ee4 <loop+0xa50>
     d08:	cmp	r3, #252	; 0xfc
     d0a:	beq.n	d88 <loop+0x8f4>
     d0c:	cmp	r3, #248	; 0xf8
     d0e:	beq.w	f7a <loop+0xae6>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     d12:	movs	r1, #35	; 0x23
     d14:	ldr	r0, [pc, #72]	; (d60 <loop+0x8cc>)
     d16:	ldr	r4, [pc, #44]	; (d44 <loop+0x8b0>)
     d18:	bl	1c54 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     d1c:	ldr	r0, [pc, #68]	; (d64 <loop+0x8d0>)
     d1e:	bl	37c8 <Print::println()>
     d22:	b.w	4a8 <loop+0x14>
     d26:	ldr	r3, [r6, #20]
     d28:	b.n	6d8 <loop+0x244>
     d2a:	ldr	r3, [r5, #20]
     d2c:	b.n	778 <loop+0x2e4>
     d2e:	ldr	r3, [r6, #20]
     d30:	b.w	4c8 <loop+0x34>
     d34:	ldr	r3, [r5, #20]
     d36:	b.n	654 <loop+0x1c0>
     d38:	ldr	r3, [r6, #20]
     d3a:	b.n	5d0 <loop+0x13c>
     d3c:	.word	0x1fff1800
     d40:	.word	0x1fff15f0
     d44:	.word	0x1fff187c
     d48:	.word	0x1fff15d8
     d4c:	.word	0x1fff184c
     d50:	.word	0x1fff1834
     d54:	.word	0x1fff181c
     d58:	.word	0x1fff1804
     d5c:	.word	0x1fff1d38
     d60:	.word	0x00004b68
     d64:	.word	0x1fff0c70
     d68:	ldr	r3, [r5, #20]
     d6a:	b.w	54c <loop+0xb8>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     d6e:	mov	r2, r5
     d70:	b.n	632 <loop+0x19e>
     d72:	mov	r2, r6
     d74:	b.n	5ae <loop+0x11a>
     d76:	mov	r2, r5
     d78:	b.w	52a <loop+0x96>
     d7c:	mov	r2, r6
     d7e:	b.n	6b6 <loop+0x222>
     d80:	mov	r2, r5
     d82:	b.n	756 <loop+0x2c2>
     d84:	mov	r2, r6
     d86:	b.n	7da <loop+0x346>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     d88:	ldr	r2, [pc, #708]	; (1050 <loop+0xbbc>)
      ppqn = 0;
      m_sequence.resetStep();
     d8a:	ldr	r1, [r2, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     d8c:	movs	r3, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
     d8e:	ldr	r4, [r1, #40]	; 0x28
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
     d90:	str	r3, [r2, #8]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     d92:	strb	r3, [r2, #0]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
     d94:	str	r3, [r1, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     d96:	ldr	r1, [r4, #4]

      digitalWrite(m_pin, m_state);
     d98:	ldrb	r0, [r4, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     d9a:	clz	r1, r1
     d9e:	lsrs	r1, r1, #5
     da0:	str	r1, [r4, #4]

      digitalWrite(m_pin, m_state);
     da2:	bl	2264 <digitalWrite>

      if (blinking) {
     da6:	ldrb	r3, [r4, #16]
     da8:	cmp	r3, #0
     daa:	beq.w	4a6 <loop+0x12>
        digitalWrite(m_pin, !m_state);
     dae:	ldr	r1, [r4, #4]
     db0:	ldrb	r0, [r4, #0]
     db2:	ldr	r4, [pc, #672]	; (1054 <loop+0xbc0>)
     db4:	clz	r1, r1
     db8:	lsrs	r1, r1, #5
     dba:	bl	2264 <digitalWrite>
     dbe:	b.w	4a8 <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
     dc2:	ldr	r3, [r4, #16]
     dc4:	ldr	r2, [r4, #12]
     dc6:	add.w	r2, r3, r2, lsl #2
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
     dca:	sub.w	r3, r0, r0, lsl #2
     dce:	lsls	r3, r3, #2
     dd0:	it	mi
     dd2:	addwmi	r3, r3, #1023	; 0x3ff
     dd6:	ldr	r2, [r2, #4]
     dd8:	asrs	r3, r3, #10
     dda:	adds	r3, #51	; 0x33
     ddc:	str	r3, [r2, #8]
     dde:	b.n	8e8 <loop+0x454>
     de0:	ldr	r3, [r4, #16]
     de2:	ldr	r2, [r4, #12]
     de4:	add.w	r2, r3, r2, lsl #2
     de8:	sub.w	r3, r0, r0, lsl #2
     dec:	lsls	r3, r3, #2
     dee:	it	mi
     df0:	addwmi	r3, r3, #1023	; 0x3ff
     df4:	ldr	r2, [r2, #4]
     df6:	asrs	r3, r3, #10
     df8:	adds	r3, #51	; 0x33
     dfa:	str	r3, [r2, #8]
     dfc:	b.n	9f6 <loop+0x562>
     dfe:	ldr	r3, [r4, #16]
     e00:	ldr	r2, [r4, #12]
     e02:	add.w	r2, r3, r2, lsl #2
     e06:	sub.w	r3, r0, r0, lsl #2
     e0a:	lsls	r3, r3, #2
     e0c:	it	mi
     e0e:	addwmi	r3, r3, #1023	; 0x3ff
     e12:	ldr	r2, [r2, #4]
     e14:	asrs	r3, r3, #10
     e16:	adds	r3, #51	; 0x33
     e18:	str	r3, [r2, #8]
     e1a:	b.n	a8a <loop+0x5f6>
     e1c:	ldr	r3, [r4, #16]
     e1e:	ldr	r2, [r4, #12]
     e20:	add.w	r2, r3, r2, lsl #2
     e24:	sub.w	r3, r0, r0, lsl #2
     e28:	lsls	r3, r3, #2
     e2a:	it	mi
     e2c:	addwmi	r3, r3, #1023	; 0x3ff
     e30:	ldr	r2, [r2, #4]
     e32:	asrs	r3, r3, #10
     e34:	adds	r3, #51	; 0x33
     e36:	str	r3, [r2, #8]
     e38:	b.n	99c <loop+0x508>
     e3a:	ldr	r3, [r4, #16]
     e3c:	ldr	r2, [r4, #12]
     e3e:	add.w	r2, r3, r2, lsl #2
     e42:	sub.w	r3, r0, r0, lsl #2
     e46:	lsls	r3, r3, #2
     e48:	it	mi
     e4a:	addwmi	r3, r3, #1023	; 0x3ff
     e4e:	ldr	r2, [r2, #4]
     e50:	asrs	r3, r3, #10
     e52:	adds	r3, #51	; 0x33
     e54:	str	r3, [r2, #8]
     e56:	b.n	942 <loop+0x4ae>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     e58:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
     e5c:	ldr	r3, [r4, #20]
     e5e:	bge.w	1090 <loop+0xbfc>
        max_ppqn = 6;

        if (ppqn >= 6) {
     e62:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e64:	movs	r1, #6

        if (ppqn >= 6) {
     e66:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e68:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     e6a:	ble.n	e70 <loop+0x9dc>
          ppqn = 0;
     e6c:	movs	r2, #0
     e6e:	str	r2, [r3, #8]
     e70:	ldr	r0, [r4, #4]
     e72:	b.n	a8a <loop+0x5f6>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     e74:	cmp.w	r0, #400	; 0x190
     e78:	ldr	r3, [r4, #20]
     e7a:	bge.w	1100 <loop+0xc6c>
        max_ppqn = 6;

        if (ppqn >= 6) {
     e7e:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e80:	movs	r1, #6

        if (ppqn >= 6) {
     e82:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e84:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     e86:	ble.n	e8c <loop+0x9f8>
          ppqn = 0;
     e88:	movs	r2, #0
     e8a:	str	r2, [r3, #8]
     e8c:	ldr	r0, [r4, #4]
     e8e:	b.n	8e8 <loop+0x454>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     e90:	cmp.w	r0, #400	; 0x190
     e94:	ldr	r3, [r4, #20]
     e96:	bge.w	10ac <loop+0xc18>
        max_ppqn = 6;

        if (ppqn >= 6) {
     e9a:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e9c:	movs	r1, #6

        if (ppqn >= 6) {
     e9e:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ea0:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     ea2:	ble.n	ea8 <loop+0xa14>
          ppqn = 0;
     ea4:	movs	r2, #0
     ea6:	str	r2, [r3, #8]
     ea8:	ldr	r0, [r4, #4]
     eaa:	b.n	942 <loop+0x4ae>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     eac:	cmp.w	r0, #400	; 0x190
     eb0:	ldr	r3, [r4, #20]
     eb2:	bge.w	10e4 <loop+0xc50>
        max_ppqn = 6;

        if (ppqn >= 6) {
     eb6:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     eb8:	movs	r1, #6

        if (ppqn >= 6) {
     eba:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ebc:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     ebe:	ble.n	ec4 <loop+0xa30>
          ppqn = 0;
     ec0:	movs	r2, #0
     ec2:	str	r2, [r3, #8]
     ec4:	ldr	r0, [r4, #4]
     ec6:	b.n	9f6 <loop+0x562>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     ec8:	cmp.w	r0, #400	; 0x190
     ecc:	ldr	r3, [r4, #20]
     ece:	bge.w	10c8 <loop+0xc34>
        max_ppqn = 6;

        if (ppqn >= 6) {
     ed2:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ed4:	movs	r1, #6

        if (ppqn >= 6) {
     ed6:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ed8:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     eda:	ble.n	ee0 <loop+0xa4c>
          ppqn = 0;
     edc:	movs	r2, #0
     ede:	str	r2, [r3, #8]
     ee0:	ldr	r0, [r4, #4]
     ee2:	b.n	99c <loop+0x508>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     ee4:	ldr	r5, [pc, #360]	; (1050 <loop+0xbbc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ee6:	ldr	r4, [pc, #364]	; (1054 <loop+0xbc0>)
      ppqn = 0;
      m_sequence.doStep(); 
     ee8:	ldr	r6, [r5, #12]
        m_leds[4]->blink();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
     eea:	ldr	r3, [r6, #0]
     eec:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     ef0:	mov.w	r9, #1
     ef4:	ldr	r7, [r3, #20]
     ef6:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     efa:	ldrb.w	sl, [r7]
      ppqn = 0;
     efe:	mov.w	r8, #0
     f02:	mov	r0, sl
     f04:	str.w	r8, [r5, #8]
     f08:	bl	2270 <digitalRead>
     f0c:	clz	r1, r0
     f10:	lsrs	r1, r1, #5
     f12:	mov	r0, sl
     f14:	bl	2264 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
     f18:	ldr	r3, [r6, #0]
     f1a:	ldr	r2, [r4, #0]
     f1c:	str	r2, [sp, #12]
     f1e:	add.w	r2, r6, r3, lsl #2
	return ret;
     f22:	ldr	r0, [sp, #12]
     f24:	ldr	r2, [r2, #4]
      blinking = true;
     f26:	strb.w	r9, [r7, #16]
     f2a:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
     f2c:	str.w	r8, [r7, #20]
      lastBlink = millis();  
     f30:	str	r0, [r7, #8]
     f32:	cmp	r1, #0
     f34:	bne.w	14ec <loop+0x1058>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
     f38:	ldrb.w	r2, [r6, #45]	; 0x2d
     f3c:	cmp	r2, #0
     f3e:	beq.w	111e <loop+0xc8a>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
     f42:	subs	r2, r3, #1
     f44:	cmp	r3, #0
     f46:	beq.w	1512 <loop+0x107e>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
     f4a:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
     f4c:	ldr	r3, [r5, #12]
     f4e:	ldr	r5, [r3, #40]	; 0x28
    };

    void toggle () {
      m_state = !m_state;
     f50:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     f52:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     f54:	clz	r1, r1
     f58:	lsrs	r1, r1, #5
     f5a:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     f5c:	bl	2264 <digitalWrite>

      if (blinking) {
     f60:	ldrb	r3, [r5, #16]
     f62:	cmp	r3, #0
     f64:	beq.w	4a8 <loop+0x14>
        digitalWrite(m_pin, !m_state);
     f68:	ldr	r1, [r5, #4]
     f6a:	ldrb	r0, [r5, #0]
     f6c:	clz	r1, r1
     f70:	lsrs	r1, r1, #5
     f72:	bl	2264 <digitalWrite>
     f76:	b.w	4a8 <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
     f7a:	ldr	r5, [pc, #212]	; (1050 <loop+0xbbc>)

      if (m_sequence.stepIsOver(ppqn)) {
     f7c:	ldr	r2, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
     f7e:	ldr	r3, [r5, #8]
        }
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
     f80:	ldr	r1, [r2, #0]
     f82:	add.w	r2, r2, r1, lsl #2
     f86:	adds	r3, #1
     f88:	ldr	r2, [r2, #4]
     f8a:	str	r3, [r5, #8]

      if (m_sequence.stepIsOver(ppqn)) {
     f8c:	ldr	r2, [r2, #16]
     f8e:	cmp	r3, r2
     f90:	bge.w	14d0 <loop+0x103c>
        // here i have to check the note length
        // of the active note to see if i do the stop step
        m_sequence.stopCurrentStep();
      }

      if (ppqn == max_ppqn) {
     f94:	ldr	r2, [r5, #4]
     f96:	ldr	r1, [pc, #184]	; (1050 <loop+0xbbc>)
     f98:	cmp	r2, r3
     f9a:	bne.w	4a6 <loop+0x12>
        m_sequence.doStep(); 
     f9e:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     fa0:	ldr	r4, [pc, #176]	; (1054 <loop+0xbc0>)
        m_leds[4]->blink();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
     fa2:	ldr	r3, [r6, #0]
     fa4:	add.w	r3, r6, r3, lsl #2
     fa8:	ldr	r7, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     faa:	ldrb.w	r8, [r7]
     fae:	mov	r0, r8
     fb0:	bl	2270 <digitalRead>
     fb4:	clz	r1, r0
     fb8:	lsrs	r1, r1, #5
     fba:	mov	r0, r8
     fbc:	bl	2264 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
     fc0:	ldr	r3, [r6, #0]
     fc2:	ldr	r2, [r4, #0]
     fc4:	str	r2, [sp, #8]
     fc6:	add.w	r2, r6, r3, lsl #2
      blinking = true;
     fca:	movs	r1, #1
     fcc:	ldr	r2, [r2, #4]
     fce:	strb	r1, [r7, #16]
      blinkingCounter = times;
     fd0:	movs	r1, #0
     fd2:	str	r1, [r7, #20]
     fd4:	ldrb	r1, [r2, #4]
	return ret;
     fd6:	ldr	r0, [sp, #8]
      lastBlink = millis();  
     fd8:	str	r0, [r7, #8]
     fda:	cmp	r1, #0
     fdc:	bne.w	16d4 <loop+0x1240>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
     fe0:	ldrb.w	r2, [r6, #45]	; 0x2d
     fe4:	cmp	r2, #0
     fe6:	bne.w	1518 <loop+0x1084>
        m_currentStep++;
     fea:	adds	r3, #1
     fec:	cmp	r3, #3
     fee:	it	gt
     ff0:	movgt	r3, #0
     ff2:	str	r3, [r6, #0]
        ppqn = 0;
     ff4:	movs	r3, #0
     ff6:	str	r3, [r5, #8]
     ff8:	b.w	4a8 <loop+0x14>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
     ffc:	ldr	r2, [r4, #12]
     ffe:	ldr	r3, [r4, #16]
    1000:	add.w	r3, r3, r2, lsl #2
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
    1004:	ldr	r2, [r3, #4]
    1006:	subs.w	r3, r0, r0, lsl #6
    100a:	it	mi
    100c:	addwmi	r3, r3, #1023	; 0x3ff
    1010:	asrs	r3, r3, #10
    1012:	adds	r3, #127	; 0x7f
    1014:	str	r3, [r2, #12]
    1016:	b.n	942 <loop+0x4ae>
    1018:	ldr	r2, [r4, #12]
    101a:	ldr	r3, [r4, #16]
    101c:	add.w	r3, r3, r2, lsl #2
    1020:	ldr	r2, [r3, #4]
    1022:	subs.w	r3, r0, r0, lsl #6
    1026:	it	mi
    1028:	addwmi	r3, r3, #1023	; 0x3ff
    102c:	asrs	r3, r3, #10
    102e:	adds	r3, #127	; 0x7f
    1030:	str	r3, [r2, #12]
    1032:	b.n	99c <loop+0x508>
    1034:	ldr	r2, [r4, #12]
    1036:	ldr	r3, [r4, #16]
    1038:	add.w	r3, r3, r2, lsl #2
    103c:	ldr	r2, [r3, #4]
    103e:	subs.w	r3, r0, r0, lsl #6
    1042:	it	mi
    1044:	addwmi	r3, r3, #1023	; 0x3ff
    1048:	asrs	r3, r3, #10
    104a:	adds	r3, #127	; 0x7f
    104c:	str	r3, [r2, #12]
    104e:	b.n	9f6 <loop+0x562>
    1050:	.word	0x1fff17f0
    1054:	.word	0x1fff187c
    1058:	ldr	r2, [r4, #12]
    105a:	ldr	r3, [r4, #16]
    105c:	add.w	r3, r3, r2, lsl #2
    1060:	ldr	r2, [r3, #4]
    1062:	subs.w	r3, r0, r0, lsl #6
    1066:	it	mi
    1068:	addwmi	r3, r3, #1023	; 0x3ff
    106c:	asrs	r3, r3, #10
    106e:	adds	r3, #127	; 0x7f
    1070:	str	r3, [r2, #12]
    1072:	b.n	8e8 <loop+0x454>
    1074:	ldr	r2, [r4, #12]
    1076:	ldr	r3, [r4, #16]
    1078:	add.w	r3, r3, r2, lsl #2
    107c:	ldr	r2, [r3, #4]
    107e:	subs.w	r3, r0, r0, lsl #6
    1082:	it	mi
    1084:	addwmi	r3, r3, #1023	; 0x3ff
    1088:	asrs	r3, r3, #10
    108a:	adds	r3, #127	; 0x7f
    108c:	str	r3, [r2, #12]
    108e:	b.n	a8a <loop+0x5f6>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1090:	sub.w	r2, r0, #400	; 0x190
    1094:	cmp.w	r2, #400	; 0x190
    1098:	bcc.n	1162 <loop+0xcce>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    109a:	sub.w	r2, r0, #800	; 0x320
    109e:	cmp	r2, #223	; 0xdf
    10a0:	bhi.w	a8a <loop+0x5f6>
        max_ppqn = 12;
    10a4:	movs	r2, #12
    10a6:	str	r2, [r3, #4]
    10a8:	ldr	r0, [r4, #4]
    10aa:	b.n	a8a <loop+0x5f6>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    10ac:	sub.w	r2, r0, #400	; 0x190
    10b0:	cmp.w	r2, #400	; 0x190
    10b4:	bcc.n	1154 <loop+0xcc0>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    10b6:	sub.w	r2, r0, #800	; 0x320
    10ba:	cmp	r2, #223	; 0xdf
    10bc:	bhi.w	942 <loop+0x4ae>
        max_ppqn = 12;
    10c0:	movs	r2, #12
    10c2:	str	r2, [r3, #4]
    10c4:	ldr	r0, [r4, #4]
    10c6:	b.n	942 <loop+0x4ae>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    10c8:	sub.w	r2, r0, #400	; 0x190
    10cc:	cmp.w	r2, #400	; 0x190
    10d0:	bcc.n	1146 <loop+0xcb2>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    10d2:	sub.w	r2, r0, #800	; 0x320
    10d6:	cmp	r2, #223	; 0xdf
    10d8:	bhi.w	99c <loop+0x508>
        max_ppqn = 12;
    10dc:	movs	r2, #12
    10de:	str	r2, [r3, #4]
    10e0:	ldr	r0, [r4, #4]
    10e2:	b.n	99c <loop+0x508>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    10e4:	sub.w	r2, r0, #400	; 0x190
    10e8:	cmp.w	r2, #400	; 0x190
    10ec:	bcc.n	1138 <loop+0xca4>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    10ee:	sub.w	r2, r0, #800	; 0x320
    10f2:	cmp	r2, #223	; 0xdf
    10f4:	bhi.w	9f6 <loop+0x562>
        max_ppqn = 12;
    10f8:	movs	r2, #12
    10fa:	str	r2, [r3, #4]
    10fc:	ldr	r0, [r4, #4]
    10fe:	b.n	9f6 <loop+0x562>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1100:	sub.w	r2, r0, #400	; 0x190
    1104:	cmp.w	r2, #400	; 0x190
    1108:	bcc.n	112a <loop+0xc96>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    110a:	sub.w	r2, r0, #800	; 0x320
    110e:	cmp	r2, #223	; 0xdf
    1110:	bhi.w	8e8 <loop+0x454>
        max_ppqn = 12;
    1114:	movs	r2, #12
    1116:	str	r2, [r3, #4]
    1118:	ldr	r0, [r4, #4]
    111a:	b.w	8e8 <loop+0x454>
    111e:	adds	r3, #1
    1120:	cmp	r3, #3
    1122:	it	gt
    1124:	movgt	r3, #0
    1126:	str	r3, [r6, #0]
    1128:	b.n	f4c <loop+0xab8>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    112a:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    112c:	movs	r1, #8

        if (ppqn >= 8) {
    112e:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1130:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1132:	bgt.w	e88 <loop+0x9f4>
    1136:	b.n	e8c <loop+0x9f8>
    1138:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    113a:	movs	r1, #8

        if (ppqn >= 8) {
    113c:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    113e:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1140:	bgt.w	ec0 <loop+0xa2c>
    1144:	b.n	ec4 <loop+0xa30>
    1146:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1148:	movs	r1, #8

        if (ppqn >= 8) {
    114a:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    114c:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    114e:	bgt.w	edc <loop+0xa48>
    1152:	b.n	ee0 <loop+0xa4c>
    1154:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1156:	movs	r1, #8

        if (ppqn >= 8) {
    1158:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    115a:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    115c:	bgt.w	ea4 <loop+0xa10>
    1160:	b.n	ea8 <loop+0xa14>
    1162:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1164:	movs	r1, #8

        if (ppqn >= 8) {
    1166:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1168:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    116a:	bgt.w	e6c <loop+0x9d8>
    116e:	b.n	e70 <loop+0x9dc>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1170:	ldr.w	lr, [pc, #884]	; 14e8 <loop+0x1054>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
    1174:	ldr.w	r9, [r7, #28]
    1178:	ldrb.w	r3, [lr]
    117c:	cmp	r3, #0
    117e:	beq.w	156c <loop+0x10d8>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    1182:	cmp	r3, #1
    1184:	beq.w	1700 <loop+0x126c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    1188:	cmp	r3, #2
    118a:	bne.w	756 <loop+0x2c2>
    118e:	movs	r1, #5
    1190:	ldr	r0, [pc, #840]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    1192:	strb.w	r5, [lr]
    1196:	bl	1c54 <usb_serial_write>
    119a:	ldr	r0, [pc, #836]	; (14e0 <loop+0x104c>)
    119c:	bl	37c8 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    11a0:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11a4:	ldrb.w	sl, [r9]
    11a8:	mov	r0, sl
    11aa:	bl	2270 <digitalRead>
    11ae:	clz	r1, r0
    11b2:	lsrs	r1, r1, #5
    11b4:	mov	r0, sl
    11b6:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11ba:	ldr.w	r3, [r8]
    11be:	str	r3, [sp, #192]	; 0xc0
      blinking = true;
    11c0:	movs	r1, #1
	return ret;
    11c2:	ldr	r3, [sp, #192]	; 0xc0
    11c4:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    11c6:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11ca:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    11ce:	str.w	r3, [r9, #8]
    11d2:	b.w	756 <loop+0x2c2>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    11d6:	ldr.w	lr, [pc, #784]	; 14e8 <loop+0x1054>
    11da:	ldr.w	r9, [r7, #28]
    11de:	ldrb.w	r3, [lr]
    11e2:	cmp	r3, #0
    11e4:	beq.w	15b4 <loop+0x1120>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    11e8:	cmp	r3, #1
    11ea:	beq.w	1828 <loop+0x1394>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    11ee:	cmp	r3, #2
    11f0:	bne.w	6b6 <loop+0x222>
    11f4:	movs	r1, #5
    11f6:	ldr	r0, [pc, #740]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    11f8:	strb.w	r6, [lr]
    11fc:	bl	1c54 <usb_serial_write>
    1200:	ldr	r0, [pc, #732]	; (14e0 <loop+0x104c>)
    1202:	bl	37c8 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    1206:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    120a:	ldrb.w	sl, [r9]
    120e:	mov	r0, sl
    1210:	bl	2270 <digitalRead>
    1214:	clz	r1, r0
    1218:	lsrs	r1, r1, #5
    121a:	mov	r0, sl
    121c:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1220:	ldr.w	r3, [r8]
    1224:	str	r3, [sp, #180]	; 0xb4
      blinking = true;
    1226:	movs	r1, #1
	return ret;
    1228:	ldr	r3, [sp, #180]	; 0xb4
    122a:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    122c:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1230:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1234:	str.w	r3, [r9, #8]
    1238:	b.w	6b6 <loop+0x222>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    123c:	ldr.w	lr, [pc, #680]	; 14e8 <loop+0x1054>
    1240:	ldr.w	r9, [r7, #28]
    1244:	ldrb.w	r3, [lr]
    1248:	cmp	r3, #0
    124a:	beq.w	1644 <loop+0x11b0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    124e:	cmp	r3, #1
    1250:	beq.w	1794 <loop+0x1300>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    1254:	cmp	r3, #2
    1256:	bne.w	632 <loop+0x19e>
    125a:	movs	r1, #5
    125c:	ldr	r0, [pc, #636]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    125e:	strb.w	r5, [lr]
    1262:	bl	1c54 <usb_serial_write>
    1266:	ldr	r0, [pc, #632]	; (14e0 <loop+0x104c>)
    1268:	bl	37c8 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    126c:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1270:	ldrb.w	sl, [r9]
    1274:	mov	r0, sl
    1276:	bl	2270 <digitalRead>
    127a:	clz	r1, r0
    127e:	lsrs	r1, r1, #5
    1280:	mov	r0, sl
    1282:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1286:	ldr.w	r3, [r8]
    128a:	str	r3, [sp, #168]	; 0xa8
      blinking = true;
    128c:	movs	r1, #1
	return ret;
    128e:	ldr	r3, [sp, #168]	; 0xa8
    1290:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    1292:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1296:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    129a:	str.w	r3, [r9, #8]
    129e:	b.w	632 <loop+0x19e>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    12a2:	ldr.w	lr, [pc, #580]	; 14e8 <loop+0x1054>
    12a6:	ldr.w	r9, [r7, #28]
    12aa:	ldrb.w	r3, [lr]
    12ae:	cmp	r3, #0
    12b0:	beq.w	15fc <loop+0x1168>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    12b4:	cmp	r3, #1
    12b6:	beq.w	1880 <loop+0x13ec>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    12ba:	cmp	r3, #2
    12bc:	bne.w	52a <loop+0x96>
    12c0:	movs	r1, #5
    12c2:	ldr	r0, [pc, #536]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    12c4:	strb.w	r5, [lr]
    12c8:	bl	1c54 <usb_serial_write>
    12cc:	ldr	r0, [pc, #528]	; (14e0 <loop+0x104c>)
    12ce:	bl	37c8 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    12d2:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12d6:	ldrb.w	sl, [r9]
    12da:	mov	r0, sl
    12dc:	bl	2270 <digitalRead>
    12e0:	clz	r1, r0
    12e4:	lsrs	r1, r1, #5
    12e6:	mov	r0, sl
    12e8:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12ec:	ldr.w	r3, [r8]
    12f0:	str	r3, [sp, #144]	; 0x90
      blinking = true;
    12f2:	movs	r1, #1
	return ret;
    12f4:	ldr	r3, [sp, #144]	; 0x90
    12f6:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    12f8:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    12fc:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1300:	str.w	r3, [r9, #8]
    1304:	b.w	52a <loop+0x96>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1308:	ldr.w	lr, [pc, #476]	; 14e8 <loop+0x1054>
    130c:	ldr.w	r9, [r7, #28]
    1310:	ldrb.w	r3, [lr]
    1314:	cmp	r3, #0
    1316:	beq.w	168c <loop+0x11f8>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    131a:	cmp	r3, #1
    131c:	beq.w	17de <loop+0x134a>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    1320:	cmp	r3, #2
    1322:	bne.w	5ae <loop+0x11a>
    1326:	movs	r1, #5
    1328:	ldr	r0, [pc, #432]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    132a:	strb.w	r6, [lr]
    132e:	bl	1c54 <usb_serial_write>
    1332:	ldr	r0, [pc, #428]	; (14e0 <loop+0x104c>)
    1334:	bl	37c8 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    1338:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    133c:	ldrb.w	sl, [r9]
    1340:	mov	r0, sl
    1342:	bl	2270 <digitalRead>
    1346:	clz	r1, r0
    134a:	lsrs	r1, r1, #5
    134c:	mov	r0, sl
    134e:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1352:	ldr.w	r3, [r8]
    1356:	str	r3, [sp, #156]	; 0x9c
      blinking = true;
    1358:	movs	r1, #1
	return ret;
    135a:	ldr	r3, [sp, #156]	; 0x9c
    135c:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    135e:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1362:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1366:	str.w	r3, [r9, #8]
    136a:	b.w	5ae <loop+0x11a>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    136e:	ldr.w	lr, [pc, #376]	; 14e8 <loop+0x1054>
    1372:	ldr.w	r9, [r7, #28]
    1376:	ldrb.w	r3, [lr]
    137a:	cmp	r3, #0
    137c:	beq.w	1524 <loop+0x1090>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    1380:	cmp	r3, #1
    1382:	beq.w	174a <loop+0x12b6>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    1386:	cmp	r3, #2
    1388:	bne.w	7da <loop+0x346>
    138c:	movs	r1, #5
    138e:	ldr	r0, [pc, #332]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    1390:	strb.w	r6, [lr]
    1394:	bl	1c54 <usb_serial_write>
    1398:	ldr	r0, [pc, #324]	; (14e0 <loop+0x104c>)
    139a:	bl	37c8 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    139e:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    13a2:	ldrb.w	sl, [r9]
    13a6:	mov	r0, sl
    13a8:	bl	2270 <digitalRead>
    13ac:	clz	r1, r0
    13b0:	lsrs	r1, r1, #5
    13b2:	mov	r0, sl
    13b4:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13b8:	ldr.w	r3, [r8]
    13bc:	str	r3, [sp, #204]	; 0xcc
      blinking = true;
    13be:	movs	r1, #1
	return ret;
    13c0:	ldr	r3, [sp, #204]	; 0xcc
    13c2:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    13c4:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    13c8:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    13cc:	str.w	r3, [r9, #8]
    13d0:	b.w	7da <loop+0x346>
    };

    void toggle () {
      m_state = !m_state;

      digitalWrite(m_pin, m_state);
    13d4:	bl	2264 <digitalWrite>

      if (blinking) {
    13d8:	ldrb	r3, [r6, #16]
    13da:	cbz	r3, 13ea <loop+0xf56>
        digitalWrite(m_pin, !m_state);
    13dc:	ldr	r1, [r6, #4]
    13de:	ldrb	r0, [r6, #0]
    13e0:	clz	r1, r1
    13e4:	lsrs	r1, r1, #5
    13e6:	bl	2264 <digitalWrite>
    13ea:	ldr	r1, [r5, #28]
    13ec:	ldr	r2, [r5, #12]
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    13ee:	ldrb.w	r3, [r1, #45]	; 0x2d
    13f2:	eor.w	r3, r3, #1
    13f6:	strb.w	r3, [r1, #45]	; 0x2d
    13fa:	b.w	7da <loop+0x346>
    };

    void toggle () {
      m_state = !m_state;

      digitalWrite(m_pin, m_state);
    13fe:	bl	2264 <digitalWrite>

      if (blinking) {
    1402:	ldrb	r3, [r6, #16]
    1404:	cbz	r3, 1414 <loop+0xf80>
        digitalWrite(m_pin, !m_state);
    1406:	ldr	r1, [r6, #4]
    1408:	ldrb	r0, [r6, #0]
    140a:	clz	r1, r1
    140e:	lsrs	r1, r1, #5
    1410:	bl	2264 <digitalWrite>
    1414:	ldr	r1, [r5, #28]
    1416:	ldr	r2, [r5, #12]
    1418:	ldrb.w	r3, [r1, #45]	; 0x2d
    141c:	eor.w	r3, r3, #1
    1420:	strb.w	r3, [r1, #45]	; 0x2d
    1424:	b.w	6b6 <loop+0x222>
    };

    void toggle () {
      m_state = !m_state;

      digitalWrite(m_pin, m_state);
    1428:	bl	2264 <digitalWrite>

      if (blinking) {
    142c:	ldrb	r3, [r5, #16]
    142e:	cbz	r3, 143e <loop+0xfaa>
        digitalWrite(m_pin, !m_state);
    1430:	ldr	r1, [r5, #4]
    1432:	ldrb	r0, [r5, #0]
    1434:	clz	r1, r1
    1438:	lsrs	r1, r1, #5
    143a:	bl	2264 <digitalWrite>
    143e:	ldr	r1, [r6, #28]
    1440:	ldr	r2, [r6, #12]
    1442:	ldrb.w	r3, [r1, #45]	; 0x2d
    1446:	eor.w	r3, r3, #1
    144a:	strb.w	r3, [r1, #45]	; 0x2d
    144e:	b.w	632 <loop+0x19e>
    };

    void toggle () {
      m_state = !m_state;

      digitalWrite(m_pin, m_state);
    1452:	bl	2264 <digitalWrite>

      if (blinking) {
    1456:	ldrb	r3, [r5, #16]
    1458:	cbz	r3, 1468 <loop+0xfd4>
        digitalWrite(m_pin, !m_state);
    145a:	ldr	r1, [r5, #4]
    145c:	ldrb	r0, [r5, #0]
    145e:	clz	r1, r1
    1462:	lsrs	r1, r1, #5
    1464:	bl	2264 <digitalWrite>
    1468:	ldr	r1, [r6, #28]
    146a:	ldr	r2, [r6, #12]
    146c:	ldrb.w	r3, [r1, #45]	; 0x2d
    1470:	eor.w	r3, r3, #1
    1474:	strb.w	r3, [r1, #45]	; 0x2d
    1478:	b.w	52a <loop+0x96>
    };

    void toggle () {
      m_state = !m_state;

      digitalWrite(m_pin, m_state);
    147c:	bl	2264 <digitalWrite>

      if (blinking) {
    1480:	ldrb	r3, [r6, #16]
    1482:	cbz	r3, 1492 <loop+0xffe>
        digitalWrite(m_pin, !m_state);
    1484:	ldr	r1, [r6, #4]
    1486:	ldrb	r0, [r6, #0]
    1488:	clz	r1, r1
    148c:	lsrs	r1, r1, #5
    148e:	bl	2264 <digitalWrite>
    1492:	ldr	r1, [r5, #28]
    1494:	ldr	r2, [r5, #12]
    1496:	ldrb.w	r3, [r1, #45]	; 0x2d
    149a:	eor.w	r3, r3, #1
    149e:	strb.w	r3, [r1, #45]	; 0x2d
    14a2:	b.w	5ae <loop+0x11a>
    };

    void toggle () {
      m_state = !m_state;

      digitalWrite(m_pin, m_state);
    14a6:	bl	2264 <digitalWrite>

      if (blinking) {
    14aa:	ldrb	r3, [r5, #16]
    14ac:	cbz	r3, 14bc <loop+0x1028>
        digitalWrite(m_pin, !m_state);
    14ae:	ldr	r1, [r5, #4]
    14b0:	ldrb	r0, [r5, #0]
    14b2:	clz	r1, r1
    14b6:	lsrs	r1, r1, #5
    14b8:	bl	2264 <digitalWrite>
    14bc:	ldr	r1, [r6, #28]
    14be:	ldr	r2, [r6, #12]
    14c0:	ldrb.w	r3, [r1, #45]	; 0x2d
    14c4:	eor.w	r3, r3, #1
    14c8:	strb.w	r3, [r1, #45]	; 0x2d
    14cc:	b.w	756 <loop+0x2c2>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    14d0:	ldr	r0, [pc, #16]	; (14e4 <loop+0x1050>)
    14d2:	bl	24f0 <usb_midi_write_packed>
    14d6:	ldr	r3, [r5, #8]
    14d8:	b.n	f94 <loop+0xb00>
    14da:	nop
    14dc:	.word	0x00004ba4
    14e0:	.word	0x1fff0c70
    14e4:	.word	0x7f7bbf0b
    14e8:	.word	0x1fff1800
    14ec:	ldrne	r0, [r2, #8]
    14ee:	ldr	r3, [r2, #12]
    14f0:	lsls	r0, r0, #16
    14f2:	lsls	r3, r3, #24
    14f4:	and.w	r3, r3, #2130706432	; 0x7f000000
    14f8:	and.w	r0, r0, #8323072	; 0x7f0000
    14fc:	orrs	r0, r3
    14fe:	orr.w	r0, r0, #40704	; 0x9f00
    1502:	orr.w	r0, r0, #9
    1506:	bl	24f0 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    150a:	bl	258c <usb_midi_flush_output>
    150e:	ldr	r3, [r6, #0]
    1510:	b.n	f38 <loop+0xaa4>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1512:	movs	r3, #3
    1514:	str	r3, [r6, #0]
    1516:	b.n	f4c <loop+0xab8>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1518:	subs	r2, r3, #1
    151a:	cmp	r3, #0
    151c:	beq.w	16fa <loop+0x1266>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1520:	str	r2, [r6, #0]
    1522:	b.n	ff4 <loop+0xb60>
    1524:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1526:	mov.w	sl, #1
    152a:	ldr	r0, [pc, #840]	; (1874 <loop+0x13e0>)
    152c:	strb.w	sl, [lr]
    1530:	bl	1c54 <usb_serial_write>
    1534:	ldr	r0, [pc, #832]	; (1878 <loop+0x13e4>)
    1536:	bl	37c8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    153a:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    153e:	ldrb.w	r9, [r6]
    1542:	mov	r0, r9
    1544:	bl	2270 <digitalRead>
    1548:	clz	r1, r0
    154c:	lsrs	r1, r1, #5
    154e:	mov	r0, r9
    1550:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1554:	ldr.w	r3, [r8]
    1558:	str	r3, [sp, #196]	; 0xc4
	return ret;
    155a:	ldr	r3, [sp, #196]	; 0xc4
    155c:	ldr	r2, [r7, #12]
      blinking = true;
    155e:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    1562:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1566:	str	r3, [r6, #8]
    1568:	b.w	7da <loop+0x346>
    156c:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    156e:	mov.w	sl, #1
    1572:	ldr	r0, [pc, #768]	; (1874 <loop+0x13e0>)
    1574:	strb.w	sl, [lr]
    1578:	bl	1c54 <usb_serial_write>
    157c:	ldr	r0, [pc, #760]	; (1878 <loop+0x13e4>)
    157e:	bl	37c8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    1582:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1586:	ldrb.w	r9, [r5]
    158a:	mov	r0, r9
    158c:	bl	2270 <digitalRead>
    1590:	clz	r1, r0
    1594:	lsrs	r1, r1, #5
    1596:	mov	r0, r9
    1598:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    159c:	ldr.w	r3, [r8]
    15a0:	str	r3, [sp, #184]	; 0xb8
	return ret;
    15a2:	ldr	r3, [sp, #184]	; 0xb8
    15a4:	ldr	r2, [r7, #12]
      blinking = true;
    15a6:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    15aa:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    15ae:	str	r3, [r5, #8]
    15b0:	b.w	756 <loop+0x2c2>
    15b4:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    15b6:	mov.w	sl, #1
    15ba:	ldr	r0, [pc, #696]	; (1874 <loop+0x13e0>)
    15bc:	strb.w	sl, [lr]
    15c0:	bl	1c54 <usb_serial_write>
    15c4:	ldr	r0, [pc, #688]	; (1878 <loop+0x13e4>)
    15c6:	bl	37c8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    15ca:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15ce:	ldrb.w	r9, [r6]
    15d2:	mov	r0, r9
    15d4:	bl	2270 <digitalRead>
    15d8:	clz	r1, r0
    15dc:	lsrs	r1, r1, #5
    15de:	mov	r0, r9
    15e0:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15e4:	ldr.w	r3, [r8]
    15e8:	str	r3, [sp, #172]	; 0xac
	return ret;
    15ea:	ldr	r3, [sp, #172]	; 0xac
    15ec:	ldr	r2, [r7, #12]
      blinking = true;
    15ee:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    15f2:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    15f6:	str	r3, [r6, #8]
    15f8:	b.w	6b6 <loop+0x222>
    15fc:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    15fe:	mov.w	sl, #1
    1602:	ldr	r0, [pc, #624]	; (1874 <loop+0x13e0>)
    1604:	strb.w	sl, [lr]
    1608:	bl	1c54 <usb_serial_write>
    160c:	ldr	r0, [pc, #616]	; (1878 <loop+0x13e4>)
    160e:	bl	37c8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    1612:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1616:	ldrb.w	r9, [r5]
    161a:	mov	r0, r9
    161c:	bl	2270 <digitalRead>
    1620:	clz	r1, r0
    1624:	lsrs	r1, r1, #5
    1626:	mov	r0, r9
    1628:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    162c:	ldr.w	r3, [r8]
    1630:	str	r3, [sp, #136]	; 0x88
	return ret;
    1632:	ldr	r3, [sp, #136]	; 0x88
    1634:	ldr	r2, [r7, #12]
      blinking = true;
    1636:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    163a:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    163e:	str	r3, [r5, #8]
    1640:	b.w	52a <loop+0x96>
    1644:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1646:	mov.w	sl, #1
    164a:	ldr	r0, [pc, #552]	; (1874 <loop+0x13e0>)
    164c:	strb.w	sl, [lr]
    1650:	bl	1c54 <usb_serial_write>
    1654:	ldr	r0, [pc, #544]	; (1878 <loop+0x13e4>)
    1656:	bl	37c8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    165a:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    165e:	ldrb.w	r9, [r5]
    1662:	mov	r0, r9
    1664:	bl	2270 <digitalRead>
    1668:	clz	r1, r0
    166c:	lsrs	r1, r1, #5
    166e:	mov	r0, r9
    1670:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1674:	ldr.w	r3, [r8]
    1678:	str	r3, [sp, #160]	; 0xa0
	return ret;
    167a:	ldr	r3, [sp, #160]	; 0xa0
    167c:	ldr	r2, [r7, #12]
      blinking = true;
    167e:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1682:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    1686:	str	r3, [r5, #8]
    1688:	b.w	632 <loop+0x19e>
    168c:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    168e:	mov.w	sl, #1
    1692:	ldr	r0, [pc, #480]	; (1874 <loop+0x13e0>)
    1694:	strb.w	sl, [lr]
    1698:	bl	1c54 <usb_serial_write>
    169c:	ldr	r0, [pc, #472]	; (1878 <loop+0x13e4>)
    169e:	bl	37c8 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    16a2:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16a6:	ldrb.w	r9, [r6]
    16aa:	mov	r0, r9
    16ac:	bl	2270 <digitalRead>
    16b0:	clz	r1, r0
    16b4:	lsrs	r1, r1, #5
    16b6:	mov	r0, r9
    16b8:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16bc:	ldr.w	r3, [r8]
    16c0:	str	r3, [sp, #148]	; 0x94
	return ret;
    16c2:	ldr	r3, [sp, #148]	; 0x94
    16c4:	ldr	r2, [r7, #12]
      blinking = true;
    16c6:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    16ca:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    16ce:	str	r3, [r6, #8]
    16d0:	b.w	5ae <loop+0x11a>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    16d4:	ldr	r0, [r2, #8]
    16d6:	ldr	r3, [r2, #12]
    16d8:	lsls	r0, r0, #16
    16da:	lsls	r3, r3, #24
    16dc:	and.w	r3, r3, #2130706432	; 0x7f000000
    16e0:	and.w	r0, r0, #8323072	; 0x7f0000
    16e4:	orrs	r0, r3
    16e6:	orr.w	r0, r0, #40704	; 0x9f00
    16ea:	orr.w	r0, r0, #9
    16ee:	bl	24f0 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    16f2:	bl	258c <usb_midi_flush_output>
    16f6:	ldr	r3, [r6, #0]
    16f8:	b.n	fe0 <loop+0xb4c>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    16fa:	movs	r3, #3
    16fc:	str	r3, [r6, #0]
    16fe:	b.n	ff4 <loop+0xb60>
    1700:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1702:	mov.w	sl, #2
    1706:	ldr	r0, [pc, #372]	; (187c <loop+0x13e8>)
    1708:	str	r3, [sp, #4]
    170a:	strb.w	sl, [lr]
    170e:	bl	1c54 <usb_serial_write>
    1712:	ldr	r0, [pc, #356]	; (1878 <loop+0x13e4>)
    1714:	bl	37c8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    1718:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    171c:	ldrb.w	r9, [r5]
    1720:	mov	r0, r9
    1722:	bl	2270 <digitalRead>
    1726:	clz	r1, r0
    172a:	lsrs	r1, r1, #5
    172c:	mov	r0, r9
    172e:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1732:	ldr.w	r2, [r8]
    1736:	str	r2, [sp, #188]	; 0xbc
	return ret;
    1738:	ldr	r1, [sp, #188]	; 0xbc
      blinking = true;
    173a:	ldr	r3, [sp, #4]
    173c:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    173e:	str.w	sl, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1742:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1744:	str	r1, [r5, #8]
    1746:	b.w	756 <loop+0x2c2>
    174a:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    174c:	mov.w	sl, #2
    1750:	ldr	r0, [pc, #296]	; (187c <loop+0x13e8>)
    1752:	str	r3, [sp, #4]
    1754:	strb.w	sl, [lr]
    1758:	bl	1c54 <usb_serial_write>
    175c:	ldr	r0, [pc, #280]	; (1878 <loop+0x13e4>)
    175e:	bl	37c8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    1762:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1766:	ldrb.w	r9, [r6]
    176a:	mov	r0, r9
    176c:	bl	2270 <digitalRead>
    1770:	clz	r1, r0
    1774:	lsrs	r1, r1, #5
    1776:	mov	r0, r9
    1778:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    177c:	ldr.w	r2, [r8]
    1780:	str	r2, [sp, #200]	; 0xc8
	return ret;
    1782:	ldr	r1, [sp, #200]	; 0xc8
      blinking = true;
    1784:	ldr	r3, [sp, #4]
    1786:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    1788:	str.w	sl, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    178c:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    178e:	str	r1, [r6, #8]
    1790:	b.w	7da <loop+0x346>
    1794:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1796:	mov.w	sl, #2
    179a:	ldr	r0, [pc, #224]	; (187c <loop+0x13e8>)
    179c:	str	r3, [sp, #4]
    179e:	strb.w	sl, [lr]
    17a2:	bl	1c54 <usb_serial_write>
    17a6:	ldr	r0, [pc, #208]	; (1878 <loop+0x13e4>)
    17a8:	bl	37c8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    17ac:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17b0:	ldrb.w	r9, [r5]
    17b4:	mov	r0, r9
    17b6:	bl	2270 <digitalRead>
    17ba:	clz	r1, r0
    17be:	lsrs	r1, r1, #5
    17c0:	mov	r0, r9
    17c2:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17c6:	ldr.w	r2, [r8]
    17ca:	str	r2, [sp, #164]	; 0xa4
	return ret;
    17cc:	ldr	r1, [sp, #164]	; 0xa4
      blinking = true;
    17ce:	ldr	r3, [sp, #4]
    17d0:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    17d2:	str.w	sl, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    17d6:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    17d8:	str	r1, [r5, #8]
    17da:	b.w	632 <loop+0x19e>
    17de:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    17e0:	mov.w	sl, #2
    17e4:	ldr	r0, [pc, #148]	; (187c <loop+0x13e8>)
    17e6:	str	r3, [sp, #4]
    17e8:	strb.w	sl, [lr]
    17ec:	bl	1c54 <usb_serial_write>
    17f0:	ldr	r0, [pc, #132]	; (1878 <loop+0x13e4>)
    17f2:	bl	37c8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    17f6:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17fa:	ldrb.w	r9, [r6]
    17fe:	mov	r0, r9
    1800:	bl	2270 <digitalRead>
    1804:	clz	r1, r0
    1808:	lsrs	r1, r1, #5
    180a:	mov	r0, r9
    180c:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1810:	ldr.w	r2, [r8]
    1814:	str	r2, [sp, #152]	; 0x98
	return ret;
    1816:	ldr	r1, [sp, #152]	; 0x98
      blinking = true;
    1818:	ldr	r3, [sp, #4]
    181a:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    181c:	str.w	sl, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1820:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1822:	str	r1, [r6, #8]
    1824:	b.w	5ae <loop+0x11a>
    1828:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    182a:	mov.w	sl, #2
    182e:	ldr	r0, [pc, #76]	; (187c <loop+0x13e8>)
    1830:	str	r3, [sp, #4]
    1832:	strb.w	sl, [lr]
    1836:	bl	1c54 <usb_serial_write>
    183a:	ldr	r0, [pc, #60]	; (1878 <loop+0x13e4>)
    183c:	bl	37c8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    1840:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1844:	ldrb.w	r9, [r6]
    1848:	mov	r0, r9
    184a:	bl	2270 <digitalRead>
    184e:	clz	r1, r0
    1852:	lsrs	r1, r1, #5
    1854:	mov	r0, r9
    1856:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    185a:	ldr.w	r2, [r8]
    185e:	str	r2, [sp, #176]	; 0xb0
	return ret;
    1860:	ldr	r1, [sp, #176]	; 0xb0
      blinking = true;
    1862:	ldr	r3, [sp, #4]
    1864:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    1866:	str.w	sl, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    186a:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    186c:	str	r1, [r6, #8]
    186e:	b.w	6b6 <loop+0x222>
    1872:	nop
    1874:	.word	0x00004b8c
    1878:	.word	0x1fff0c70
    187c:	.word	0x00004b98
    1880:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1882:	mov.w	sl, #2
    1886:	ldr	r0, [pc, #68]	; (18cc <loop+0x1438>)
    1888:	str	r3, [sp, #4]
    188a:	strb.w	sl, [lr]
    188e:	bl	1c54 <usb_serial_write>
    1892:	ldr	r0, [pc, #60]	; (18d0 <loop+0x143c>)
    1894:	bl	37c8 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    1898:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    189c:	ldrb.w	r9, [r5]
    18a0:	mov	r0, r9
    18a2:	bl	2270 <digitalRead>
    18a6:	clz	r1, r0
    18aa:	lsrs	r1, r1, #5
    18ac:	mov	r0, r9
    18ae:	bl	2264 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18b2:	ldr.w	r2, [r8]
    18b6:	str	r2, [sp, #140]	; 0x8c
	return ret;
    18b8:	ldr	r1, [sp, #140]	; 0x8c
      blinking = true;
    18ba:	ldr	r3, [sp, #4]
    18bc:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    18be:	str.w	sl, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18c2:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    18c4:	str	r1, [r5, #8]
    18c6:	b.w	52a <loop+0x96>
    18ca:	nop
    18cc:	.word	0x00004b98
    18d0:	.word	0x1fff0c70

000018d4 <_GLOBAL__sub_I_currentMode>:
    18d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "controller.h"
#include "transport.h"
#include "step.h"


Led led1(3, LOW);
    18d8:	movs	r2, #0
    18da:	movs	r1, #3
    18dc:	ldr	r0, [pc, #576]	; (1b20 <_GLOBAL__sub_I_currentMode+0x24c>)
    Led* m_leds[6];
    Modes m_mode;
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
    18de:	ldr	r6, [pc, #580]	; (1b24 <_GLOBAL__sub_I_currentMode+0x250>)
    18e0:	ldr	r4, [pc, #580]	; (1b28 <_GLOBAL__sub_I_currentMode+0x254>)
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    18e2:	ldr	r7, [pc, #584]	; (1b2c <_GLOBAL__sub_I_currentMode+0x258>)
    18e4:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    18e8:	movs	r2, #0
    18ea:	movs	r1, #5
    18ec:	ldr	r0, [pc, #576]	; (1b30 <_GLOBAL__sub_I_currentMode+0x25c>)
    18ee:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    18f2:	movs	r2, #0
    18f4:	movs	r1, #7
    18f6:	ldr	r0, [pc, #572]	; (1b34 <_GLOBAL__sub_I_currentMode+0x260>)
    18f8:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    18fc:	movs	r2, #0
    18fe:	movs	r1, #9
    1900:	ldr	r0, [pc, #564]	; (1b38 <_GLOBAL__sub_I_currentMode+0x264>)
    1902:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    1906:	movs	r2, #0
    1908:	movs	r1, #11
    190a:	ldr	r0, [pc, #560]	; (1b3c <_GLOBAL__sub_I_currentMode+0x268>)
    190c:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    1910:	movs	r2, #0
    1912:	movs	r1, #24
    1914:	ldr	r0, [pc, #552]	; (1b40 <_GLOBAL__sub_I_currentMode+0x26c>)
    1916:	bl	46c <Led::Led(int, int)>
    191a:	ldr	r2, [pc, #552]	; (1b44 <_GLOBAL__sub_I_currentMode+0x270>)
    191c:	ldr	r5, [r6, #0]
      m_leds[1] = leds[1];
    191e:	ldr	r3, [r6, #4]
      m_leds[2] = leds[2];
    1920:	ldr	r0, [r6, #8]
      m_leds[3] = leds[3];
    1922:	ldr	r1, [r6, #12]
    Led* m_leds[6];
    Modes m_mode;
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
    1924:	str	r5, [r4, #20]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    1926:	mov.w	ip, #38	; 0x26
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    192a:	ldr	r5, [pc, #540]	; (1b48 <_GLOBAL__sub_I_currentMode+0x274>)
      m_leds[1] = leds[1];
    192c:	str	r3, [r4, #24]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    192e:	mov.w	r9, #100	; 0x64
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    1932:	movs	r3, #0
      m_leds[2] = leds[2];
    1934:	str	r0, [r4, #28]
      m_leds[3] = leds[3];
    1936:	str	r1, [r4, #32]
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    1938:	movs	r0, #4
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    193a:	ldr	r1, [r6, #20]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    193c:	strb	r3, [r2, #4]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    193e:	str	r5, [r2, #0]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    1940:	str.w	ip, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    1944:	str	r0, [r2, #16]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    1946:	strb	r3, [r7, #4]
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    1948:	str.w	r9, [r2, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    194c:	str	r5, [r7, #0]
    194e:	ldr	r2, [pc, #508]	; (1b4c <_GLOBAL__sub_I_currentMode+0x278>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    1950:	str.w	ip, [r7, #8]
      m_velocity = 100;
      m_length = 4;
    1954:	str	r0, [r7, #16]
    1956:	str	r1, [r4, #40]	; 0x28

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    1958:	str.w	r9, [r7, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    195c:	ldr	r1, [pc, #496]	; (1b50 <_GLOBAL__sub_I_currentMode+0x27c>)
      m_steps[0] = steps[0];
    195e:	ldr	r7, [pc, #500]	; (1b54 <_GLOBAL__sub_I_currentMode+0x280>)
    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1960:	ldr.w	r8, [r6, #16]
      m_state = false;
    1964:	strb	r3, [r1, #4]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1966:	str	r5, [r1, #0]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    1968:	str.w	ip, [r1, #8]
      m_velocity = 100;
      m_length = 4;
    196c:	str	r0, [r1, #16]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    196e:	strb	r3, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    1970:	str.w	r9, [r1, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1974:	str	r5, [r2, #0]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    1976:	str.w	ip, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    197a:	str	r0, [r2, #16]
    197c:	str.w	r8, [r4, #36]	; 0x24

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    1980:	str.w	r9, [r2, #12]
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    1984:	ldr	r2, [r7, #0]
    1986:	str	r2, [r4, #4]
    };

    void toggle () {
      m_state = !m_state;
    1988:	ldr.w	r2, [r8, #4]
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
    198c:	ldr	r0, [r7, #8]
      m_steps[3] = steps[3];
    198e:	ldr	r1, [r7, #12]
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
    1990:	ldr	r5, [r7, #4]
      m_steps[2] = steps[2];
      m_steps[3] = steps[3];
      m_currentStep = 0;
      m_mode = PITCH;
    1992:	strb.w	r3, [r4, #44]	; 0x2c
    1996:	clz	r2, r2
    199a:	lsrs	r2, r2, #5
      m_reverse = false;
    199c:	strb.w	r3, [r4, #45]	; 0x2d
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
    19a0:	str	r0, [r4, #12]
      m_steps[3] = steps[3];
    19a2:	str	r1, [r4, #16]
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
    19a4:	str	r5, [r4, #8]

      digitalWrite(m_pin, m_state);
    19a6:	ldrb.w	r0, [r8]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19aa:	str.w	r2, [r8, #4]

      digitalWrite(m_pin, m_state);
    19ae:	mov	r1, r2
      m_steps[2] = steps[2];
      m_steps[3] = steps[3];
      m_currentStep = 0;
    19b0:	str	r3, [r4, #0]
    19b2:	bl	2264 <digitalWrite>

      if (blinking) {
    19b6:	ldrb.w	r3, [r8, #16]
    19ba:	cbz	r3, 19ce <_GLOBAL__sub_I_currentMode+0xfa>
        digitalWrite(m_pin, !m_state);
    19bc:	ldr.w	r1, [r8, #4]
    19c0:	ldrb.w	r0, [r8]
    19c4:	clz	r1, r1
    19c8:	lsrs	r1, r1, #5
    19ca:	bl	2264 <digitalWrite>
      m_mode = PITCH;
      m_reverse = false;
      m_leds[4]->toggle();
      m_leds[5]->toggle();
    19ce:	ldr	r5, [r4, #40]	; 0x28
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19d0:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    19d2:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19d4:	clz	r1, r1
    19d8:	lsrs	r1, r1, #5
    19da:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    19dc:	bl	2264 <digitalWrite>

      if (blinking) {
    19e0:	ldrb	r3, [r5, #16]
    19e2:	cbz	r3, 19f2 <_GLOBAL__sub_I_currentMode+0x11e>
        digitalWrite(m_pin, !m_state);
    19e4:	ldr	r1, [r5, #4]
    19e6:	ldrb	r0, [r5, #0]
    19e8:	clz	r1, r1
    19ec:	lsrs	r1, r1, #5
    19ee:	bl	2264 <digitalWrite>
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    19f2:	ldr	r7, [pc, #356]	; (1b58 <_GLOBAL__sub_I_currentMode+0x284>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    19f4:	ldr	r2, [pc, #356]	; (1b5c <_GLOBAL__sub_I_currentMode+0x288>)
    19f6:	str	r4, [r7, #12]
    19f8:	movs	r5, #0
      m_id = id;
      m_pin = pin;
    19fa:	mov.w	r9, #2
    19fe:	movs	r3, #24
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1a00:	mov.w	sl, #1
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a04:	mov	r1, r5
    1a06:	mov	r0, r9
    1a08:	str	r3, [r7, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a0a:	ldr	r3, [r6, #0]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a0c:	strb	r5, [r2, #16]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1a0e:	mov.w	r8, #4
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    1a12:	strb	r5, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a14:	str	r3, [r2, #24]
    1a16:	str	r5, [r7, #8]
      m_state = false;
    1a18:	strb	r5, [r7, #0]
    1a1a:	str	r4, [r2, #28]
      m_id = id;
    1a1c:	str.w	sl, [r2]
      m_pin = pin;
    1a20:	str.w	r9, [r2, #32]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a24:	bl	228c <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a28:	ldr	r2, [pc, #308]	; (1b60 <_GLOBAL__sub_I_currentMode+0x28c>)
    1a2a:	ldr	r3, [r6, #4]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a2c:	strb	r5, [r2, #16]
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a2e:	mov	r1, r5
    1a30:	mov	r0, r8
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    1a32:	strb	r5, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a34:	str	r3, [r2, #24]
      m_id = id;
    1a36:	str.w	r9, [r2]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a3a:	str	r4, [r2, #28]
      m_id = id;
      m_pin = pin;
    1a3c:	str.w	r8, [r2, #32]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a40:	bl	228c <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a44:	ldr	r3, [pc, #284]	; (1b64 <_GLOBAL__sub_I_currentMode+0x290>)
    1a46:	ldr	r2, [r6, #8]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a48:	strb	r5, [r3, #16]
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a4a:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1a4c:	mov.w	fp, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a50:	movs	r0, #6
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    1a52:	strb	r5, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a54:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1a56:	str	r0, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a58:	str	r4, [r3, #28]
      m_id = id;
    1a5a:	str.w	fp, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a5e:	bl	228c <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a62:	ldr	r3, [pc, #260]	; (1b68 <_GLOBAL__sub_I_currentMode+0x294>)
    1a64:	ldr	r0, [r6, #12]
    1a66:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    1a68:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a6a:	mov	r1, r5
    1a6c:	mov	r0, r2
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a6e:	strb	r5, [r3, #16]
      m_reverseButton = reverseButton;
    1a70:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1a72:	str	r2, [r3, #32]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1a74:	str.w	r8, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a78:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a7a:	bl	228c <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a7e:	ldr	r3, [pc, #236]	; (1b6c <_GLOBAL__sub_I_currentMode+0x298>)
    1a80:	ldr	r0, [r6, #16]
    1a82:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    1a84:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1a86:	movs	r0, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a88:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1a8a:	str	r0, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a8c:	mov	r0, r2
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    1a8e:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1a90:	str	r2, [r3, #32]
      m_shiftButton = shiftButton;
    1a92:	strb.w	sl, [r3, #16]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a96:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a98:	bl	228c <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a9c:	ldr	r3, [pc, #208]	; (1b70 <_GLOBAL__sub_I_currentMode+0x29c>)
    1a9e:	ldr	r6, [r6, #20]
    1aa0:	str	r6, [r3, #24]
      m_id = id;
    1aa2:	movs	r2, #6
    1aa4:	str	r2, [r3, #0]
      m_pin = pin;
    1aa6:	movs	r2, #12
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1aa8:	ldr	r6, [pc, #200]	; (1b74 <_GLOBAL__sub_I_currentMode+0x2a0>)
      m_shiftButton = shiftButton;
    1aaa:	strb	r5, [r3, #16]
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1aac:	mov	r0, r2
    1aae:	mov	r1, r5
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1ab0:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1ab2:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    1ab4:	strb.w	sl, [r3, #17]

      pinMode(pin, INPUT);
    1ab8:	bl	228c <pinMode>
    1abc:	ldr	r0, [pc, #184]	; (1b78 <_GLOBAL__sub_I_currentMode+0x2a4>)
    1abe:	ldr	r1, [pc, #188]	; (1b7c <_GLOBAL__sub_I_currentMode+0x2a8>)
    1ac0:	ldr	r2, [pc, #188]	; (1b80 <_GLOBAL__sub_I_currentMode+0x2ac>)
    1ac2:	ldr	r3, [pc, #192]	; (1b84 <_GLOBAL__sub_I_currentMode+0x2b0>)
      m_pin = pin;
      m_knobType = knobType;
    1ac4:	strb	r5, [r6, #24]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1ac6:	mov.w	ip, #14
      m_knobType = knobType;
      m_id = id;
    1aca:	str	r5, [r6, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1acc:	strb.w	ip, [r6]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1ad0:	str	r7, [r6, #20]
    1ad2:	str	r4, [r6, #16]
      m_pin = pin;
    1ad4:	mov.w	lr, #15
    1ad8:	mov.w	ip, #16
    1adc:	movs	r6, #17
    1ade:	movs	r5, #18
    1ae0:	strb.w	lr, [r0]
    1ae4:	strb.w	ip, [r1]
    1ae8:	strb	r6, [r2, #0]
    1aea:	strb	r5, [r3, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1aec:	str	r7, [r0, #20]
    1aee:	str	r4, [r0, #16]
      m_pin = pin;
      m_knobType = knobType;
    1af0:	strb.w	sl, [r0, #24]
      m_id = id;
    1af4:	str.w	sl, [r0, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1af8:	str	r7, [r1, #20]
    1afa:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1afc:	strb.w	r9, [r1, #24]
      m_id = id;
    1b00:	str.w	r9, [r1, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1b04:	str	r7, [r2, #20]
    1b06:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    1b08:	strb.w	fp, [r2, #24]
      m_id = id;
    1b0c:	str.w	fp, [r2, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1b10:	str	r7, [r3, #20]
    1b12:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1b14:	strb.w	r8, [r3, #24]
      m_id = id;
    1b18:	str.w	r8, [r3, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1b1c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b20:	.word	0x1fff1804
    1b24:	.word	0x1fff0c50
    1b28:	.word	0x1fff17c0
    1b2c:	.word	0x1fff16f8
    1b30:	.word	0x1fff181c
    1b34:	.word	0x1fff1834
    1b38:	.word	0x1fff184c
    1b3c:	.word	0x1fff15d8
    1b40:	.word	0x1fff15f0
    1b44:	.word	0x1fff16e4
    1b48:	.word	0x1fff1608
    1b4c:	.word	0x1fff1720
    1b50:	.word	0x1fff170c
    1b54:	.word	0x1fff0c40
    1b58:	.word	0x1fff17f0
    1b5c:	.word	0x1fff160c
    1b60:	.word	0x1fff1630
    1b64:	.word	0x1fff1654
    1b68:	.word	0x1fff1678
    1b6c:	.word	0x1fff169c
    1b70:	.word	0x1fff16c0
    1b74:	.word	0x1fff1734
    1b78:	.word	0x1fff1750
    1b7c:	.word	0x1fff176c
    1b80:	.word	0x1fff1788
    1b84:	.word	0x1fff17a4

00001b88 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1b88:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1b8a:	ldr	r5, [pc, #60]	; (1bc8 <usb_serial_getchar+0x40>)
    1b8c:	ldr	r0, [r5, #0]
    1b8e:	cbz	r0, 1bb0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1b90:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1b92:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1b94:	adds	r1, r0, r3
    1b96:	adds	r3, #1
	if (i >= rx_packet->len) {
    1b98:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1b9a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1b9c:	bcs.n	1ba4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1b9e:	strh	r3, [r0, #2]
	}
	return c;
    1ba0:	mov	r0, r4
}
    1ba2:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1ba4:	bl	2a34 <usb_free>
		rx_packet = NULL;
    1ba8:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1baa:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1bac:	str	r3, [r5, #0]
    1bae:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1bb0:	ldr	r3, [pc, #24]	; (1bcc <usb_serial_getchar+0x44>)
    1bb2:	ldrb	r3, [r3, #0]
    1bb4:	cbz	r3, 1bc2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1bb6:	movs	r0, #2
    1bb8:	bl	2a80 <usb_rx>
    1bbc:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1bbe:	cmp	r0, #0
    1bc0:	bne.n	1b90 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1bc2:	mov.w	r0, #4294967295
    1bc6:	pop	{r3, r4, r5, pc}
    1bc8:	.word	0x1fff1870
    1bcc:	.word	0x1fff19d0

00001bd0 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1bd0:	push	{r4, lr}
	if (!rx_packet) {
    1bd2:	ldr	r4, [pc, #36]	; (1bf8 <usb_serial_peekchar+0x28>)
    1bd4:	ldr	r0, [r4, #0]
    1bd6:	cbz	r0, 1be0 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1bd8:	ldrh	r3, [r0, #2]
    1bda:	add	r0, r3
    1bdc:	ldrb	r0, [r0, #8]
}
    1bde:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1be0:	ldr	r3, [pc, #24]	; (1bfc <usb_serial_peekchar+0x2c>)
    1be2:	ldrb	r3, [r3, #0]
    1be4:	cbz	r3, 1bf2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1be6:	movs	r0, #2
    1be8:	bl	2a80 <usb_rx>
    1bec:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1bee:	cmp	r0, #0
    1bf0:	bne.n	1bd8 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1bf2:	mov.w	r0, #4294967295
    1bf6:	pop	{r4, pc}
    1bf8:	.word	0x1fff1870
    1bfc:	.word	0x1fff19d0

00001c00 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1c00:	ldr	r3, [pc, #16]	; (1c14 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1c02:	ldr	r2, [pc, #20]	; (1c18 <usb_serial_available+0x18>)
    1c04:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1c06:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1c08:	cbz	r3, 1c12 <usb_serial_available+0x12>
    1c0a:	ldrh	r2, [r3, #0]
    1c0c:	ldrh	r3, [r3, #2]
    1c0e:	subs	r3, r2, r3
    1c10:	add	r0, r3
	return count;
}
    1c12:	bx	lr
    1c14:	.word	0x1fff1870
    1c18:	.word	0x1fff1e64

00001c1c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1c1c:	ldr	r3, [pc, #44]	; (1c4c <usb_serial_flush_input+0x30>)
    1c1e:	ldrb	r3, [r3, #0]
    1c20:	cbz	r3, 1c4a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1c22:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1c24:	ldr	r4, [pc, #40]	; (1c50 <usb_serial_flush_input+0x34>)
    1c26:	ldr	r0, [r4, #0]
    1c28:	cbz	r0, 1c3e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1c2a:	bl	2a34 <usb_free>
		rx_packet = NULL;
    1c2e:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1c30:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1c32:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1c34:	bl	2a80 <usb_rx>
		if (!rx) break;
    1c38:	cbz	r0, 1c48 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1c3a:	bl	2a34 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1c3e:	movs	r0, #2
    1c40:	bl	2a80 <usb_rx>
		if (!rx) break;
    1c44:	cmp	r0, #0
    1c46:	bne.n	1c3a <usb_serial_flush_input+0x1e>
    1c48:	pop	{r4, pc}
    1c4a:	bx	lr
    1c4c:	.word	0x1fff19d0
    1c50:	.word	0x1fff1870

00001c54 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1c54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1c58:	ldr.w	r9, [pc, #248]	; 1d54 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1c5c:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1c5e:	movs	r2, #1
    1c60:	strb.w	r2, [r9]
	while (size > 0) {
    1c64:	str	r1, [sp, #4]
    1c66:	cbz	r1, 1cc4 <usb_serial_write+0x70>
    1c68:	ldr.w	r8, [pc, #236]	; 1d58 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1c6c:	ldr	r7, [pc, #212]	; (1d44 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1c6e:	ldr	r6, [sp, #4]
    1c70:	mov	fp, r0
		if (!tx_packet) {
    1c72:	ldr.w	r0, [r8]
    1c76:	cbz	r0, 1ce6 <usb_serial_write+0x92>
    1c78:	ldr	r5, [pc, #204]	; (1d48 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1c7a:	ldrh	r4, [r0, #2]
    1c7c:	rsb	r1, r4, #64	; 0x40
    1c80:	cmp	r1, r6
    1c82:	it	cs
    1c84:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1c86:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1c8a:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1c8c:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1c90:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1c92:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1c94:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1c98:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1c9c:	cbz	r1, 1cb4 <usb_serial_write+0x60>
    1c9e:	subs	r4, #1
    1ca0:	add	r2, r4
    1ca2:	add	r1, fp
    1ca4:	ldrb.w	r4, [fp], #1
    1ca8:	strb.w	r4, [r2, #1]!
    1cac:	cmp	fp, r1
    1cae:	bne.n	1ca4 <usb_serial_write+0x50>
    1cb0:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1cb4:	cmp.w	lr, #63	; 0x3f
    1cb8:	bhi.n	1cd2 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1cba:	ldr	r2, [pc, #144]	; (1d4c <usb_serial_write+0xf8>)
    1cbc:	movs	r1, #5
    1cbe:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1cc0:	cmp	r6, #0
    1cc2:	bne.n	1c72 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1cc4:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1cc6:	movs	r3, #0
    1cc8:	strb.w	r3, [r9]
	return ret;
}
    1ccc:	add	sp, #12
    1cce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1cd2:	movs	r2, #64	; 0x40
    1cd4:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1cd6:	mov	r1, r0
    1cd8:	movs	r0, #3
    1cda:	bl	2bd0 <usb_tx>
			tx_packet = NULL;
    1cde:	movs	r2, #0
    1ce0:	str.w	r2, [r8]
    1ce4:	b.n	1cba <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1ce6:	ldrb	r2, [r7, #0]
    1ce8:	cbz	r2, 1d34 <usb_serial_write+0xe0>
    1cea:	ldr	r4, [pc, #100]	; (1d50 <usb_serial_write+0xfc>)
    1cec:	ldr	r5, [pc, #88]	; (1d48 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1cee:	mov.w	sl, #1
    1cf2:	b.n	1d04 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1cf4:	subs	r4, #1
    1cf6:	beq.n	1d26 <usb_serial_write+0xd2>
    1cf8:	ldrb	r2, [r5, #0]
    1cfa:	cbnz	r2, 1d26 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1cfc:	bl	36d4 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1d00:	ldrb	r2, [r7, #0]
    1d02:	cbz	r2, 1d34 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1d04:	movs	r0, #3
    1d06:	bl	2abc <usb_tx_packet_count>
    1d0a:	cmp	r0, #7
    1d0c:	bhi.n	1cf4 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1d0e:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1d12:	bl	29f4 <usb_malloc>
    1d16:	str.w	r0, [r8]
					if (tx_packet) break;
    1d1a:	cmp	r0, #0
    1d1c:	bne.n	1c7a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1d1e:	ldr	r3, [pc, #52]	; (1d54 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1d20:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1d22:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1d24:	bne.n	1cf8 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1d26:	movs	r3, #1
					return -1;
    1d28:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1d2c:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1d2e:	add	sp, #12
    1d30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1d34:	movs	r3, #0
					return -1;
    1d36:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1d3a:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1d3e:	add	sp, #12
    1d40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d44:	.word	0x1fff19d0
    1d48:	.word	0x1fff186c
    1d4c:	.word	0x1fff1864
    1d50:	.word	0x00014821
    1d54:	.word	0x1fff1865
    1d58:	.word	0x1fff1868

00001d5c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1d5c:	push	{lr}
    1d5e:	sub	sp, #12
    1d60:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1d62:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1d64:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1d68:	mov	r0, r3
    1d6a:	bl	1c54 <usb_serial_write>
}
    1d6e:	add	sp, #12
    1d70:	ldr.w	pc, [sp], #4

00001d74 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1d74:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1d76:	ldr	r5, [pc, #56]	; (1db0 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1d78:	ldr	r4, [pc, #56]	; (1db4 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1d7a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1d7c:	movs	r3, #1
    1d7e:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1d80:	cbz	r0, 1d8e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1d82:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1d84:	movs	r3, #0
    1d86:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1d88:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1d8c:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1d8e:	ldr	r3, [pc, #40]	; (1db8 <usb_serial_write_buffer_free+0x44>)
    1d90:	ldrb	r3, [r3, #0]
    1d92:	cbnz	r3, 1d9a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1d94:	movs	r0, #0
    1d96:	strb	r0, [r4, #0]
			return 0;
    1d98:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1d9a:	movs	r0, #3
    1d9c:	bl	2abc <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1da0:	cmp	r0, #7
    1da2:	bhi.n	1d94 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1da4:	bl	29f4 <usb_malloc>
    1da8:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1daa:	cmp	r0, #0
    1dac:	bne.n	1d82 <usb_serial_write_buffer_free+0xe>
    1dae:	b.n	1d94 <usb_serial_write_buffer_free+0x20>
    1db0:	.word	0x1fff1868
    1db4:	.word	0x1fff1865
    1db8:	.word	0x1fff19d0

00001dbc <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1dbc:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1dbe:	ldr	r3, [pc, #68]	; (1e04 <usb_serial_flush_output+0x48>)
    1dc0:	ldrb	r3, [r3, #0]
    1dc2:	cbz	r3, 1de8 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1dc4:	ldr	r6, [pc, #64]	; (1e08 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1dc6:	ldr	r5, [pc, #68]	; (1e0c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1dc8:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1dca:	movs	r7, #1
    1dcc:	strb	r7, [r5, #0]
	if (tx_packet) {
    1dce:	cbz	r4, 1dea <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1dd0:	ldr	r2, [pc, #60]	; (1e10 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1dd2:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1dd4:	movs	r7, #0
    1dd6:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1dd8:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1dda:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1ddc:	movs	r0, #3
    1dde:	bl	2bd0 <usb_tx>
		tx_packet = NULL;
    1de2:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1de4:	movs	r3, #0
    1de6:	strb	r3, [r5, #0]
    1de8:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1dea:	bl	29f4 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1dee:	ldr	r3, [pc, #32]	; (1e10 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1df0:	cbz	r0, 1dfe <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1df2:	mov	r1, r0
    1df4:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1df6:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1df8:	bl	2bd0 <usb_tx>
    1dfc:	b.n	1de4 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1dfe:	strb	r7, [r3, #0]
    1e00:	b.n	1de4 <usb_serial_flush_output+0x28>
    1e02:	nop
    1e04:	.word	0x1fff19d0
    1e08:	.word	0x1fff1868
    1e0c:	.word	0x1fff1865
    1e10:	.word	0x1fff1864

00001e14 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1e14:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1e16:	ldr	r3, [pc, #56]	; (1e50 <usb_serial_flush_callback+0x3c>)
    1e18:	ldrb	r3, [r3, #0]
    1e1a:	cbnz	r3, 1e3a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1e1c:	ldr	r4, [pc, #52]	; (1e54 <usb_serial_flush_callback+0x40>)
    1e1e:	ldr	r1, [r4, #0]
    1e20:	cbz	r1, 1e3c <usb_serial_flush_callback+0x28>
    1e22:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1e26:	ldrh	r3, [r1, #2]
    1e28:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1e2a:	movs	r0, #3
    1e2c:	bl	2bd0 <usb_tx>
		tx_packet = NULL;
    1e30:	str	r5, [r4, #0]
    1e32:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1e34:	ldr	r3, [pc, #32]	; (1e58 <usb_serial_flush_callback+0x44>)
    1e36:	movs	r2, #1
    1e38:	strb	r2, [r3, #0]
    1e3a:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1e3c:	bl	29f4 <usb_malloc>
		if (tx) {
    1e40:	cmp	r0, #0
    1e42:	beq.n	1e34 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e44:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1e46:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1e4a:	movs	r0, #3
    1e4c:	b.w	2bd0 <usb_tx>
    1e50:	.word	0x1fff1865
    1e54:	.word	0x1fff1868
    1e58:	.word	0x1fff1864

00001e5c <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1e5c:	ldr	r2, [pc, #220]	; (1f3c <wait_for_cal+0xe0>)
    1e5e:	ldr	r1, [pc, #224]	; (1f40 <wait_for_cal+0xe4>)
    1e60:	ldr	r3, [r2, #0]
    1e62:	lsls	r3, r3, #24
    1e64:	bmi.n	1e60 <wait_for_cal+0x4>
    1e66:	ldr	r3, [r1, #0]
    1e68:	ands.w	r3, r3, #128	; 0x80
    1e6c:	bne.n	1e60 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1e6e:	cpsid	i
	if (calibrating) {
    1e70:	ldr	r1, [pc, #208]	; (1f44 <wait_for_cal+0xe8>)
    1e72:	ldrb	r2, [r1, #0]
    1e74:	cmp	r2, #0
    1e76:	beq.n	1f38 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1e78:	ldr	r2, [pc, #204]	; (1f48 <wait_for_cal+0xec>)
    1e7a:	ldr	r0, [pc, #208]	; (1f4c <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1e7c:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1e7e:	ldr	r4, [pc, #208]	; (1f50 <wait_for_cal+0xf4>)
    1e80:	ldr	r7, [r2, #0]
    1e82:	ldr	r6, [r0, #0]
    1e84:	ldr	r5, [r4, #0]
    1e86:	ldr	r4, [r2, #12]
    1e88:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1e8a:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1e8c:	adds	r2, #20
    1e8e:	ldr	r0, [r0, #0]
    1e90:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1e92:	ldr	r7, [pc, #192]	; (1f54 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1e94:	add	r5, r6
    1e96:	add	r4, r5
    1e98:	add	r0, r4
    1e9a:	add	r2, r0
    1e9c:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1ea0:	ldr	r6, [pc, #180]	; (1f58 <wait_for_cal+0xfc>)
    1ea2:	ldr	r0, [pc, #184]	; (1f5c <wait_for_cal+0x100>)
    1ea4:	ldr	r5, [pc, #184]	; (1f60 <wait_for_cal+0x104>)
    1ea6:	ldr	r4, [pc, #188]	; (1f64 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1ea8:	orr.w	r2, r2, #32768	; 0x8000
    1eac:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1eae:	ldr	r7, [r6, #0]
    1eb0:	ldr	r6, [r0, #0]
    1eb2:	ldr	r5, [r5, #0]
    1eb4:	ldr	r2, [pc, #176]	; (1f68 <wait_for_cal+0x10c>)
    1eb6:	ldr	r4, [r4, #0]
    1eb8:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1eba:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1ebc:	ldr	r0, [r0, #0]
    1ebe:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1ec0:	ldr	r7, [pc, #168]	; (1f6c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1ec2:	add	r5, r6
    1ec4:	add	r4, r5
    1ec6:	add	r0, r4
    1ec8:	add	r2, r0
    1eca:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1ece:	ldr	r6, [pc, #160]	; (1f70 <wait_for_cal+0x114>)
    1ed0:	ldr	r0, [pc, #160]	; (1f74 <wait_for_cal+0x118>)
    1ed2:	ldr	r5, [pc, #164]	; (1f78 <wait_for_cal+0x11c>)
    1ed4:	ldr	r4, [pc, #164]	; (1f7c <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1ed6:	orr.w	r2, r2, #32768	; 0x8000
    1eda:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1edc:	ldr	r7, [r6, #0]
    1ede:	ldr	r6, [r0, #0]
    1ee0:	ldr	r5, [r5, #0]
    1ee2:	ldr	r2, [pc, #156]	; (1f80 <wait_for_cal+0x124>)
    1ee4:	ldr	r4, [r4, #0]
    1ee6:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1ee8:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1eea:	ldr	r0, [r0, #0]
    1eec:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1eee:	ldr	r7, [pc, #148]	; (1f84 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1ef0:	add	r5, r6
    1ef2:	add	r4, r5
    1ef4:	add	r0, r4
    1ef6:	add	r2, r0
    1ef8:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1efc:	ldr	r6, [pc, #136]	; (1f88 <wait_for_cal+0x12c>)
    1efe:	ldr	r0, [pc, #140]	; (1f8c <wait_for_cal+0x130>)
    1f00:	ldr	r5, [pc, #140]	; (1f90 <wait_for_cal+0x134>)
    1f02:	ldr	r4, [pc, #144]	; (1f94 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1f04:	orr.w	r2, r2, #32768	; 0x8000
    1f08:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f0a:	ldr	r7, [r6, #0]
    1f0c:	ldr	r6, [r0, #0]
    1f0e:	ldr	r5, [r5, #0]
    1f10:	ldr	r2, [pc, #132]	; (1f98 <wait_for_cal+0x13c>)
    1f12:	ldr	r4, [r4, #0]
    1f14:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1f16:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1f18:	ldr	r0, [r0, #0]
    1f1a:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1f1c:	add	r5, r6
    1f1e:	add	r4, r5
    1f20:	add	r0, r4
    1f22:	add	r2, r0
    1f24:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1f28:	ldr	r0, [pc, #112]	; (1f9c <wait_for_cal+0x140>)
    1f2a:	orr.w	r2, r2, #32768	; 0x8000
    1f2e:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1f30:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1f32:	cpsie	i
}
    1f34:	pop	{r4, r5, r6, r7}
    1f36:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1f38:	cpsie	i
    1f3a:	bx	lr
    1f3c:	.word	0x4003b024
    1f40:	.word	0x400bb024
    1f44:	.word	0x1fff1876
    1f48:	.word	0x4003b038
    1f4c:	.word	0x4003b03c
    1f50:	.word	0x4003b040
    1f54:	.word	0x4003b02c
    1f58:	.word	0x4003b058
    1f5c:	.word	0x4003b05c
    1f60:	.word	0x4003b060
    1f64:	.word	0x4003b064
    1f68:	.word	0x4003b06c
    1f6c:	.word	0x4003b030
    1f70:	.word	0x400bb038
    1f74:	.word	0x400bb03c
    1f78:	.word	0x400bb040
    1f7c:	.word	0x400bb044
    1f80:	.word	0x400bb04c
    1f84:	.word	0x400bb02c
    1f88:	.word	0x400bb058
    1f8c:	.word	0x400bb05c
    1f90:	.word	0x400bb060
    1f94:	.word	0x400bb064
    1f98:	.word	0x400bb06c
    1f9c:	.word	0x400bb030

00001fa0 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1fa0:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1fa2:	ldr	r0, [pc, #164]	; (2048 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1fa4:	ldr	r2, [pc, #164]	; (204c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1fa6:	ldr	r3, [pc, #168]	; (2050 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1fa8:	ldr	r5, [pc, #168]	; (2054 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1faa:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1fac:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1fae:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1fb0:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1fb2:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1fb4:	ldr	r4, [pc, #160]	; (2058 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1fb6:	cmp	r3, #8
    1fb8:	beq.n	201c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1fba:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1fbc:	ldr	r0, [pc, #156]	; (205c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1fbe:	ldr	r1, [pc, #160]	; (2060 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1fc0:	beq.n	2032 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1fc2:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1fc4:	ite	eq
    1fc6:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1fc8:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1fca:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1fcc:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1fce:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1fd0:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1fd2:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1fd4:	ldr	r3, [pc, #140]	; (2064 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1fd6:	ldr	r1, [pc, #144]	; (2068 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1fd8:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1fda:	ldr	r2, [pc, #144]	; (206c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1fdc:	cbz	r3, 200e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1fde:	movs	r3, #1
    1fe0:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1fe2:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1fe4:	ldr	r3, [pc, #136]	; (2070 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1fe6:	ldr	r1, [pc, #140]	; (2074 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1fe8:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1fea:	ldr	r2, [pc, #140]	; (2078 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1fec:	cmp	r3, #1
    1fee:	bls.n	203e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1ff0:	cmp	r3, #4
    1ff2:	bls.n	2014 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1ff4:	cmp	r3, #8
    1ff6:	bls.n	2036 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1ff8:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1ffa:	ite	ls
    1ffc:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1ffe:	movhi	r3, #135	; 0x87
    2000:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2002:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2004:	ldr	r3, [pc, #116]	; (207c <analog_init+0xdc>)
    2006:	movs	r2, #1
    2008:	strb	r2, [r3, #0]
}
    200a:	pop	{r4, r5}
    200c:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    200e:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2010:	str	r3, [r2, #0]
    2012:	b.n	1fe4 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2014:	movs	r3, #132	; 0x84
    2016:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2018:	str	r3, [r2, #0]
    201a:	b.n	2004 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    201c:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2020:	ldr	r1, [pc, #60]	; (2060 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2022:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2024:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2026:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2028:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    202a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    202c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    202e:	str	r3, [r1, #0]
    2030:	b.n	1fd4 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2032:	movs	r2, #57	; 0x39
    2034:	b.n	2026 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2036:	movs	r3, #133	; 0x85
    2038:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    203a:	str	r3, [r2, #0]
    203c:	b.n	2004 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    203e:	movs	r3, #128	; 0x80
    2040:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2042:	str	r3, [r2, #0]
    2044:	b.n	2004 <analog_init+0x64>
    2046:	nop
    2048:	.word	0x40074000
    204c:	.word	0x40074001
    2050:	.word	0x1fff0c68
    2054:	.word	0x4003b008
    2058:	.word	0x4003b00c
    205c:	.word	0x400bb008
    2060:	.word	0x400bb00c
    2064:	.word	0x1fff1879
    2068:	.word	0x4003b020
    206c:	.word	0x400bb020
    2070:	.word	0x1fff0c69
    2074:	.word	0x4003b024
    2078:	.word	0x400bb024
    207c:	.word	0x1fff1876

00002080 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2080:	cmp	r0, #71	; 0x47
    2082:	bhi.n	20e4 <analogRead+0x64>
	channel = pin2sc1a[pin];
    2084:	ldr	r3, [pc, #204]	; (2154 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    2086:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    208a:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    208c:	cmp	r6, #255	; 0xff
    208e:	beq.n	20e8 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2090:	ldr	r3, [pc, #196]	; (2158 <analogRead+0xd8>)
    2092:	ldrb	r3, [r3, #0]
    2094:	cmp	r3, #0
    2096:	bne.n	20ee <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2098:	lsls	r2, r6, #24
    209a:	bmi.n	20f6 <analogRead+0x76>
#endif

	__disable_irq();
    209c:	cpsid	i
    209e:	ldr	r5, [pc, #188]	; (215c <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    20a0:	ldr	r4, [pc, #188]	; (2160 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    20a2:	mov	r7, r5
    20a4:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    20a6:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    20a8:	strb	r3, [r5, #0]
	__enable_irq();
    20aa:	cpsie	i
	while (1) {
		__disable_irq();
    20ac:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    20ae:	ldr	r3, [r4, #0]
    20b0:	lsls	r3, r3, #24
    20b2:	bmi.n	20ce <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    20b4:	ldrb	r3, [r7, #0]
    20b6:	cbnz	r3, 20c0 <analogRead+0x40>
    20b8:	b.n	20a4 <analogRead+0x24>
    20ba:	ldrb	r3, [r5, #0]
    20bc:	cmp	r3, #0
    20be:	beq.n	20a4 <analogRead+0x24>
		__enable_irq();
    20c0:	cpsie	i
		yield();
    20c2:	bl	36d4 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    20c6:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    20c8:	ldr	r3, [r4, #0]
    20ca:	lsls	r0, r3, #24
    20cc:	bpl.n	20ba <analogRead+0x3a>
			result = ADC0_RA;
    20ce:	ldr	r3, [pc, #148]	; (2164 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    20d0:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    20d2:	movs	r2, #0
    20d4:	strb	r2, [r5, #0]
			__enable_irq();
    20d6:	cpsie	i
			result >>= analog_right_shift;
    20d8:	ldr	r2, [pc, #140]	; (2168 <analogRead+0xe8>)
    20da:	ldrb	r0, [r2, #0]
    20dc:	asr.w	r0, r3, r0
			return result;
    20e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    20e4:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    20e6:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    20e8:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    20ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    20ee:	bl	1e5c <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    20f2:	lsls	r2, r6, #24
    20f4:	bpl.n	209c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    20f6:	cpsid	i
    20f8:	ldr	r5, [pc, #112]	; (216c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    20fa:	ldr.w	r8, [pc, #124]	; 2178 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    20fe:	ldr	r4, [pc, #112]	; (2170 <analogRead+0xf0>)
    2100:	and.w	r7, r6, #64	; 0x40
    2104:	uxtb	r7, r7
    2106:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    210a:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    210e:	cbz	r7, 2148 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2110:	bic.w	r3, r3, #16
    2114:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2118:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    211a:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    211c:	ldr	r2, [pc, #76]	; (216c <analogRead+0xec>)
    211e:	strb	r3, [r5, #0]
	__enable_irq();
    2120:	cpsie	i
	while (1) {
		__disable_irq();
    2122:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2124:	ldr	r3, [r4, #0]
    2126:	lsls	r1, r3, #24
    2128:	bmi.n	2144 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    212a:	ldrb	r3, [r2, #0]
    212c:	cbnz	r3, 2136 <analogRead+0xb6>
    212e:	b.n	210a <analogRead+0x8a>
    2130:	ldrb	r3, [r5, #0]
    2132:	cmp	r3, #0
    2134:	beq.n	210a <analogRead+0x8a>
		__enable_irq();
    2136:	cpsie	i
		yield();
    2138:	bl	36d4 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    213c:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    213e:	ldr	r3, [r4, #0]
    2140:	lsls	r3, r3, #24
    2142:	bpl.n	2130 <analogRead+0xb0>
			result = ADC1_RA;
    2144:	ldr	r3, [pc, #44]	; (2174 <analogRead+0xf4>)
    2146:	b.n	20d0 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2148:	orr.w	r3, r3, #16
    214c:	str.w	r3, [r8]
    2150:	b.n	2118 <analogRead+0x98>
    2152:	nop
    2154:	.word	0x00004bac
    2158:	.word	0x1fff1876
    215c:	.word	0x1fff1878
    2160:	.word	0x4003b000
    2164:	.word	0x4003b010
    2168:	.word	0x1fff1875
    216c:	.word	0x1fff1877
    2170:	.word	0x400bb000
    2174:	.word	0x400bb010
    2178:	.word	0x400bb00c

0000217c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    217c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    217e:	ldr	r3, [pc, #68]	; (21c4 <digitalWrite.part.1+0x48>)
    2180:	ldr.w	r2, [r3, r0, lsl #3]
    2184:	ldrb.w	r4, [r2, #640]	; 0x280
    2188:	cbz	r4, 2198 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    218a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    218c:	cbz	r1, 21ae <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    218e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2192:	ldr.w	r4, [sp], #4
    2196:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2198:	add.w	r3, r3, r0, lsl #3
    219c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    219e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    21a0:	cbnz	r1, 21b8 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    21a2:	bic.w	r2, r2, #2
    21a6:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    21a8:	ldr.w	r4, [sp], #4
    21ac:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    21ae:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    21b2:	ldr.w	r4, [sp], #4
    21b6:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    21b8:	orr.w	r2, r2, #3
    21bc:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    21be:	ldr.w	r4, [sp], #4
    21c2:	bx	lr
    21c4:	.word	0x00004bf4

000021c8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    21c8:	ldr	r2, [pc, #112]	; (223c <pinMode.part.2+0x74>)
    21ca:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    21ce:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    21d0:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    21d2:	beq.n	21f8 <pinMode.part.2+0x30>
    21d4:	cmp	r1, #4
    21d6:	beq.n	2210 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    21d8:	ldr.w	r0, [r2, r0, lsl #3]
    21dc:	movs	r2, #0
    21de:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    21e2:	cbz	r1, 21f0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    21e4:	cmp	r1, #2
    21e6:	beq.n	222a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    21e8:	cmp	r1, #3
    21ea:	beq.n	2232 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    21ec:	str	r2, [r3, #0]
    21ee:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    21f0:	mov.w	r2, #256	; 0x100
    21f4:	str	r2, [r3, #0]
    21f6:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    21f8:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    21fc:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2200:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2204:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2206:	ldr	r2, [r3, #0]
    2208:	bic.w	r2, r2, #32
    220c:	str	r2, [r3, #0]
    220e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2210:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2214:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2218:	movs	r0, #1
    221a:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    221e:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2220:	ldr	r2, [r3, #0]
    2222:	orr.w	r2, r2, #32
    2226:	str	r2, [r3, #0]
    2228:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    222a:	movw	r2, #259	; 0x103
    222e:	str	r2, [r3, #0]
    2230:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2232:	mov.w	r2, #258	; 0x102
    2236:	str	r2, [r3, #0]
    2238:	bx	lr
    223a:	nop
    223c:	.word	0x00004bf4

00002240 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2240:	push	{r4, r5}
	RTC_SR = 0;
    2242:	ldr	r3, [pc, #20]	; (2258 <rtc_set+0x18>)
	RTC_TPR = 0;
    2244:	ldr	r5, [pc, #20]	; (225c <rtc_set+0x1c>)
	RTC_TSR = t;
    2246:	ldr	r4, [pc, #24]	; (2260 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2248:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    224a:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    224c:	str	r2, [r3, #0]
	RTC_TPR = 0;
    224e:	str	r2, [r5, #0]
	RTC_TSR = t;
    2250:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2252:	str	r1, [r3, #0]
}
    2254:	pop	{r4, r5}
    2256:	bx	lr
    2258:	.word	0x4003d014
    225c:	.word	0x4003d004
    2260:	.word	0x4003d000

00002264 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2264:	cmp	r0, #63	; 0x3f
    2266:	bhi.n	226c <digitalWrite+0x8>
    2268:	b.w	217c <digitalWrite.part.1>
    226c:	bx	lr
    226e:	nop

00002270 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2270:	cmp	r0, #63	; 0x3f
    2272:	bhi.n	2282 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2274:	ldr	r3, [pc, #16]	; (2288 <digitalRead+0x18>)
    2276:	ldr.w	r3, [r3, r0, lsl #3]
    227a:	ldrb.w	r0, [r3, #512]	; 0x200
    227e:	uxtb	r0, r0
    2280:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2282:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    2284:	bx	lr
    2286:	nop
    2288:	.word	0x00004bf4

0000228c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    228c:	cmp	r0, #63	; 0x3f
    228e:	bhi.n	2294 <pinMode+0x8>
    2290:	b.w	21c8 <pinMode.part.2>
    2294:	bx	lr
    2296:	nop

00002298 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2298:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    229c:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    229e:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    22a0:	ldr	r7, [pc, #136]	; (232c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    22a2:	ldr	r3, [pc, #140]	; (2330 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    22a4:	ldr	r2, [pc, #140]	; (2334 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    22a6:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    22a8:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    22aa:	ldr	r2, [r2, #0]
	__enable_irq();
    22ac:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    22ae:	lsls	r2, r2, #5
    22b0:	bpl.n	22b8 <delay+0x20>
    22b2:	cmp	r3, #50	; 0x32
    22b4:	it	hi
    22b6:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    22b8:	cbz	r5, 2328 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    22ba:	rsb	r3, r3, #179200	; 0x2bc00
    22be:	addw	r3, r3, #799	; 0x31f
    22c2:	ldr	r6, [pc, #116]	; (2338 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    22c4:	ldr.w	r9, [pc, #104]	; 2330 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    22c8:	ldr.w	r8, [pc, #104]	; 2334 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    22cc:	lsrs	r3, r3, #2
    22ce:	mov.w	r2, #1000	; 0x3e8
    22d2:	umull	r1, r3, r6, r3
    22d6:	mul.w	r4, r2, r4
    22da:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    22de:	cpsid	i
	current = SYST_CVR;
    22e0:	ldr.w	r1, [r9]
	count = systick_millis_count;
    22e4:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    22e6:	ldr.w	lr, [r8]
	__enable_irq();
    22ea:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    22ec:	rsb	r3, r1, #179200	; 0x2bc00
    22f0:	addw	r3, r3, #799	; 0x31f
    22f4:	lsrs	r3, r3, #2
    22f6:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    22fa:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    22fe:	rsb	r3, r4, r3, lsr #2
    2302:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2306:	beq.n	230e <delay+0x76>
    2308:	cmp	r1, #50	; 0x32
    230a:	it	hi
    230c:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    230e:	mla	r3, r0, r2, r3
    2312:	cmp.w	r3, #1000	; 0x3e8
    2316:	bcc.n	2322 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2318:	subs	r5, #1
    231a:	beq.n	2328 <delay+0x90>
				start += 1000;
    231c:	add.w	r4, r4, #1000	; 0x3e8
    2320:	b.n	22de <delay+0x46>
			}
			yield();
    2322:	bl	36d4 <yield>
		}
    2326:	b.n	22de <delay+0x46>
    2328:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    232c:	.word	0x1fff187c
    2330:	.word	0xe000e018
    2334:	.word	0xe000ed04
    2338:	.word	0x16c16c17

0000233c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    233c:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    233e:	ldr	r3, [pc, #312]	; (2478 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2340:	ldr	r0, [pc, #312]	; (247c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2342:	ldr.w	ip, [pc, #348]	; 24a0 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2346:	ldr	r4, [pc, #312]	; (2480 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2348:	ldr	r1, [pc, #312]	; (2484 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    234a:	ldr.w	lr, [pc, #344]	; 24a4 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    234e:	ldr	r6, [pc, #312]	; (2488 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2350:	ldr	r5, [pc, #312]	; (248c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2352:	ldr	r7, [pc, #316]	; (2490 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2354:	mov.w	r2, #134217728	; 0x8000000
    2358:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    235a:	mov.w	r2, #268435456	; 0x10000000
    235e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2360:	mov.w	r2, #536870912	; 0x20000000
    2364:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2366:	mov.w	r2, #1073741824	; 0x40000000
    236a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    236c:	mov.w	r2, #2147483648	; 0x80000000
    2370:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2372:	movs	r2, #0
    2374:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2376:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2378:	movw	r0, #61439	; 0xefff
    237c:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2380:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2384:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2386:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    238a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    238c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    238e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2390:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2394:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2396:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    239a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    239c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    23a0:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    23a2:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    23a6:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    23aa:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    23ae:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    23b2:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    23b6:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    23b8:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    23bc:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    23be:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    23c0:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    23c2:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    23c6:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    23c8:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    23ca:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    23cc:	ldr	r4, [pc, #196]	; (2494 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    23ce:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    23d0:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    23d2:	movs	r1, #9
    23d4:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    23d6:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    23da:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    23de:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    23e0:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    23e2:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    23e4:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    23e6:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    23e8:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    23ea:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    23ee:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    23f2:	add.w	r7, r7, #520192	; 0x7f000
    23f6:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    23f8:	addw	r4, r4, #2044	; 0x7fc
    23fc:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    23fe:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2400:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2402:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2404:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2408:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    240a:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    240e:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2412:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2414:	sub.w	r4, r4, #460800	; 0x70800
    2418:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    241c:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    241e:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2420:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2424:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2426:	ldr	r0, [pc, #112]	; (2498 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2428:	orr.w	r1, r1, #512	; 0x200
    242c:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    242e:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2430:	ldr	r4, [pc, #104]	; (249c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2432:	add.w	lr, lr, #65280	; 0xff00
    2436:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    243a:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    243e:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2442:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2446:	orr.w	r1, r1, #33554432	; 0x2000000
    244a:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    244c:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2450:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2454:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2456:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2458:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    245a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    245c:	str	r2, [r4, #0]
#endif
	analog_init();
    245e:	bl	1fa0 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2462:	movs	r0, #25
    2464:	bl	2298 <delay>
	usb_init();
    2468:	bl	3604 <usb_init>
	delay(275);
    246c:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2470:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2474:	b.w	2298 <delay>
    2478:	.word	0xe000e104
    247c:	.word	0x40038004
    2480:	.word	0x40038014
    2484:	.word	0x4003801c
    2488:	.word	0x40038024
    248c:	.word	0x4003802c
    2490:	.word	0x40038034
    2494:	.word	0x40038000
    2498:	.word	0x40048004
    249c:	.word	0x400c9000
    24a0:	.word	0x40038008
    24a4:	.word	0x4003800c

000024a8 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    24a8:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    24aa:	ldr	r3, [pc, #56]	; (24e4 <sysex_byte+0x3c>)
    24ac:	ldr	r4, [pc, #56]	; (24e8 <sysex_byte+0x40>)
    24ae:	ldr	r3, [r3, #0]
    24b0:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    24b2:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    24b4:	cbz	r3, 24da <sysex_byte+0x32>
    24b6:	cmp.w	r1, #290	; 0x122
    24ba:	bcs.n	24c8 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    24bc:	ldr	r2, [pc, #44]	; (24ec <sysex_byte+0x44>)
    24be:	adds	r3, r1, #1
    24c0:	strb	r5, [r2, r1]
    24c2:	uxth	r3, r3
    24c4:	strh	r3, [r4, #0]
	}
}
    24c6:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    24c8:	movs	r2, #0
    24ca:	ldr	r0, [pc, #32]	; (24ec <sysex_byte+0x44>)
    24cc:	blx	r3
    24ce:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    24d0:	ldr	r2, [pc, #24]	; (24ec <sysex_byte+0x44>)
    24d2:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    24d4:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    24d6:	strh	r3, [r4, #0]
	}
}
    24d8:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    24da:	cmp.w	r1, #290	; 0x122
    24de:	bcc.n	24bc <sysex_byte+0x14>
    24e0:	pop	{r3, r4, r5, pc}
    24e2:	nop
    24e4:	.word	0x1fff18a4
    24e8:	.word	0x1fff1d3a
    24ec:	.word	0x1fff1d40

000024f0 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    24f0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    24f4:	ldr	r6, [pc, #132]	; (257c <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    24f6:	ldr	r7, [pc, #136]	; (2580 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    24f8:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    24fa:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    24fc:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    24fe:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2500:	cbz	r1, 2530 <usb_midi_write_packed+0x40>
    2502:	ldr	r5, [pc, #128]	; (2584 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2504:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2506:	add.w	r2, r1, r3, lsl #2
    250a:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    250c:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    250e:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2510:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2514:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2516:	bhi.n	2522 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2518:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    251a:	movs	r3, #0
    251c:	strb	r3, [r7, #0]
    251e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2522:	movs	r3, #64	; 0x40
    2524:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2526:	movs	r0, #4
    2528:	bl	2bd0 <usb_tx>
		tx_packet = NULL;
    252c:	str	r4, [r6, #0]
    252e:	b.n	251a <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2530:	ldr.w	r9, [pc, #84]	; 2588 <usb_midi_write_packed+0x98>
    2534:	ldrb.w	r3, [r9]
    2538:	cmp	r3, #0
    253a:	beq.n	251e <usb_midi_write_packed+0x2e>
    253c:	ldr	r5, [pc, #68]	; (2584 <usb_midi_write_packed+0x94>)
    253e:	movw	r4, #48001	; 0xbb81
    2542:	b.n	2556 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2544:	subs	r4, #1
    2546:	beq.n	256e <usb_midi_write_packed+0x7e>
    2548:	ldrb	r3, [r5, #0]
    254a:	cbnz	r3, 256e <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    254c:	bl	36d4 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2550:	ldrb.w	r3, [r9]
    2554:	cbz	r3, 2576 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2556:	movs	r0, #4
    2558:	bl	2abc <usb_tx_packet_count>
    255c:	cmp	r0, #5
    255e:	bhi.n	2544 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2560:	bl	29f4 <usb_malloc>
    2564:	mov	r1, r0
    2566:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2568:	cmp	r0, #0
    256a:	beq.n	2544 <usb_midi_write_packed+0x54>
    256c:	b.n	2504 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    256e:	movs	r3, #1
    2570:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2572:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2576:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    257a:	nop
    257c:	.word	0x1fff18c0
    2580:	.word	0x1fff1894
    2584:	.word	0x1fff18c4
    2588:	.word	0x1fff19d0

0000258c <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    258c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    258e:	ldr	r3, [pc, #32]	; (25b0 <usb_midi_flush_output+0x24>)
    2590:	ldrb	r4, [r3, #0]
    2592:	cbnz	r4, 259e <usb_midi_flush_output+0x12>
    2594:	ldr	r5, [pc, #28]	; (25b4 <usb_midi_flush_output+0x28>)
    2596:	ldr	r1, [r5, #0]
    2598:	cbz	r1, 259e <usb_midi_flush_output+0x12>
    259a:	ldrh	r3, [r1, #2]
    259c:	cbnz	r3, 25a0 <usb_midi_flush_output+0x14>
    259e:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    25a0:	lsls	r3, r3, #2
    25a2:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    25a4:	movs	r0, #4
    25a6:	bl	2bd0 <usb_tx>
		tx_packet = NULL;
    25aa:	str	r4, [r5, #0]
    25ac:	pop	{r3, r4, r5, pc}
    25ae:	nop
    25b0:	.word	0x1fff1894
    25b4:	.word	0x1fff18c0

000025b8 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    25b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    25bc:	ldr	r6, [pc, #692]	; (2874 <usb_midi_read+0x2bc>)
    25be:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    25c0:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    25c2:	cmp	r3, #0
    25c4:	beq.w	26ec <usb_midi_read+0x134>
    25c8:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    25ca:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    25cc:	lsrs	r1, r2, #2
    25ce:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    25d2:	adds	r2, #4
	if (index < rx_packet->len) {
    25d4:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    25d6:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    25d8:	bcs.n	2660 <usb_midi_read+0xa8>
		rx_packet->index = index;
    25da:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    25dc:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    25e0:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    25e4:	ldr	r1, [pc, #656]	; (2878 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    25e6:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    25ea:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    25ee:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    25f2:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    25f4:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    25f8:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    25fa:	bls.n	2632 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    25fc:	subs	r3, r6, #2
    25fe:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2600:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2604:	bls.n	26a4 <usb_midi_read+0xec>
    2606:	cmp	r6, #5
    2608:	beq.n	269c <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    260a:	cmp	r6, #4
    260c:	beq.w	2958 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2610:	subs	r3, r6, #5
    2612:	cmp	r3, #2
    2614:	bls.n	2716 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    2616:	cmp	r6, #15
    2618:	bne.n	2638 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    261a:	cmp	r0, #247	; 0xf7
    261c:	bhi.n	26a4 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    261e:	cmp	r0, #240	; 0xf0
    2620:	beq.n	2628 <usb_midi_read+0x70>
    2622:	ldr	r3, [pc, #600]	; (287c <usb_midi_read+0x2c4>)
    2624:	ldrh	r3, [r3, #0]
    2626:	cbz	r3, 2638 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2628:	bl	24a8 <sysex_byte>
		}
	}
	return 0;
    262c:	movs	r0, #0
    262e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    2632:	cbz	r7, 263e <usb_midi_read+0x86>
    2634:	cmp	r5, r7
    2636:	beq.n	263e <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2638:	movs	r0, #0
    263a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    263e:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2640:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2644:	beq.w	2756 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2648:	cmp	r6, #9
    264a:	beq.n	2670 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    264c:	cmp	r6, #10
    264e:	bne.w	277a <usb_midi_read+0x1c2>
    2652:	cmp	r3, #10
    2654:	bne.n	2638 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    2656:	ldr	r3, [pc, #552]	; (2880 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2658:	ldr	r2, [pc, #552]	; (2884 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    265a:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    265c:	movs	r1, #160	; 0xa0
    265e:	b.n	2764 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    2660:	mov	r0, r3
    2662:	bl	2a34 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2666:	movs	r0, #5
    2668:	bl	2a80 <usb_rx>
    266c:	str	r0, [r6, #0]
    266e:	b.n	25dc <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2670:	cmp	r3, #9
    2672:	bne.n	2638 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    2674:	lsrs	r7, r4, #24
    2676:	beq.w	2970 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    267a:	ldr	r3, [pc, #524]	; (2888 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    267c:	ldr	r2, [pc, #516]	; (2884 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    267e:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2680:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2682:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2686:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2688:	uxtb	r5, r5
    268a:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    268c:	cmp	r3, #0
    268e:	beq.w	27cc <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2692:	mov	r2, r4
    2694:	mov	r1, r6
    2696:	mov	r0, r5
    2698:	blx	r3
    269a:	b.n	27cc <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    269c:	cmp	r0, #240	; 0xf0
    269e:	bls.n	2728 <usb_midi_read+0x170>
    26a0:	cmp	r0, #247	; 0xf7
    26a2:	beq.n	2728 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    26a4:	subs	r0, #241	; 0xf1
    26a6:	cmp	r0, #14
    26a8:	bhi.n	2638 <usb_midi_read+0x80>
    26aa:	add	r3, pc, #4	; (adr r3, 26b0 <usb_midi_read+0xf8>)
    26ac:	ldr.w	pc, [r3, r0, lsl #2]
    26b0:	.word	0x00002867
    26b4:	.word	0x0000284b
    26b8:	.word	0x00002839
    26bc:	.word	0x00002639
    26c0:	.word	0x00002639
    26c4:	.word	0x0000282b
    26c8:	.word	0x00002639
    26cc:	.word	0x0000290b
    26d0:	.word	0x00002639
    26d4:	.word	0x000028d5
    26d8:	.word	0x000028ef
    26dc:	.word	0x00002813
    26e0:	.word	0x00002639
    26e4:	.word	0x000027fb
    26e8:	.word	0x000027df
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    26ec:	ldr	r3, [pc, #412]	; (288c <usb_midi_read+0x2d4>)
    26ee:	ldrb	r3, [r3, #0]
    26f0:	cmp	r3, #0
    26f2:	beq.n	2638 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    26f4:	movs	r0, #5
    26f6:	bl	2a80 <usb_rx>
    26fa:	mov	r3, r0
    26fc:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    26fe:	cmp	r0, #0
    2700:	beq.n	2638 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    2702:	ldrh	r5, [r0, #0]
    2704:	cmp	r5, #0
    2706:	bne.w	25ca <usb_midi_read+0x12>
			usb_free(rx_packet);
    270a:	bl	2a34 <usb_free>
			rx_packet = NULL;
    270e:	str	r5, [r6, #0]
			return 0;
    2710:	mov	r0, r5
    2712:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    2716:	bl	24a8 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    271a:	ubfx	r0, r4, #16, #8
    271e:	bl	24a8 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    2722:	cmp	r6, #7
    2724:	bne.n	272c <usb_midi_read+0x174>
    2726:	lsrs	r0, r4, #24
    2728:	bl	24a8 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    272c:	ldr	r3, [pc, #332]	; (287c <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    272e:	ldr	r2, [pc, #352]	; (2890 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2730:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    2732:	ldr	r0, [pc, #352]	; (2894 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2734:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2736:	ldr	r5, [pc, #352]	; (2898 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2738:	ldr	r2, [pc, #328]	; (2884 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    273a:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    273c:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    273e:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2740:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2742:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2744:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2746:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    2748:	cbz	r4, 278e <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    274a:	movs	r2, #1
    274c:	ldr	r0, [pc, #332]	; (289c <usb_midi_read+0x2e4>)
    274e:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2750:	movs	r0, #1
    2752:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2756:	cmp	r3, #8
    2758:	bne.w	2638 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    275c:	ldr	r3, [pc, #320]	; (28a0 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    275e:	ldr	r2, [pc, #292]	; (2884 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    2760:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2762:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2764:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2768:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    276a:	uxtb	r5, r5
    276c:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    276e:	cbz	r3, 27cc <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2770:	mov	r0, r5
    2772:	mov	r2, r4
    2774:	mov	r1, r6
    2776:	blx	r3
    2778:	b.n	27cc <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    277a:	cmp	r6, #11
    277c:	bne.n	27a2 <usb_midi_read+0x1ea>
    277e:	cmp	r3, #11
    2780:	bne.w	2638 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    2784:	ldr	r3, [pc, #284]	; (28a4 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2786:	ldr	r2, [pc, #252]	; (2884 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    2788:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    278a:	movs	r1, #176	; 0xb0
    278c:	b.n	2764 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    278e:	ldr	r3, [pc, #280]	; (28a8 <usb_midi_read+0x2f0>)
    2790:	ldr	r3, [r3, #0]
    2792:	cmp	r3, #0
    2794:	beq.w	298e <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    2798:	ldr	r0, [pc, #256]	; (289c <usb_midi_read+0x2e4>)
    279a:	blx	r3
		}
		return 1;
    279c:	movs	r0, #1
    279e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    27a2:	cmp	r6, #12
    27a4:	bne.w	29a8 <usb_midi_read+0x3f0>
    27a8:	cmp	r3, #12
    27aa:	bne.w	2638 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    27ae:	ldr	r3, [pc, #252]	; (28ac <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    27b0:	ldr	r2, [pc, #208]	; (2884 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    27b2:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    27b4:	movs	r1, #192	; 0xc0
    27b6:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    27b8:	uxtb	r5, r5
    27ba:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    27be:	cmp	r3, #0
    27c0:	beq.w	2954 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    27c4:	mov	r0, r5
    27c6:	mov	r1, r6
    27c8:	lsrs	r4, r4, #24
    27ca:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    27cc:	ldr	r1, [pc, #224]	; (28b0 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    27ce:	ldr	r2, [pc, #196]	; (2894 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    27d0:	ldr	r3, [pc, #196]	; (2898 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    27d2:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    27d4:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    27d6:	strb	r4, [r3, #0]
		return 1;
    27d8:	movs	r0, #1
    27da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    27de:	ldr	r3, [pc, #212]	; (28b4 <usb_midi_read+0x2fc>)
    27e0:	ldr	r3, [r3, #0]
    27e2:	cmp	r3, #0
    27e4:	beq.w	2994 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    27e8:	blx	r3
    27ea:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    27ee:	ldr	r3, [pc, #148]	; (2884 <usb_midi_read+0x2cc>)
    27f0:	uxtb	r5, r5
    27f2:	lsrs	r4, r4, #24
    27f4:	strb.w	r8, [r3]
		goto return_message;
    27f8:	b.n	27cc <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    27fa:	ldr	r3, [pc, #188]	; (28b8 <usb_midi_read+0x300>)
    27fc:	ldr	r3, [r3, #0]
    27fe:	cmp	r3, #0
    2800:	bne.n	27e8 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2802:	ldr	r3, [pc, #184]	; (28bc <usb_midi_read+0x304>)
    2804:	ldr	r3, [r3, #0]
    2806:	cbz	r3, 2832 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2808:	movs	r0, #254	; 0xfe
    280a:	blx	r3
    280c:	ubfx	r6, r4, #16, #8
    2810:	b.n	27ee <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2812:	ldr	r3, [pc, #172]	; (28c0 <usb_midi_read+0x308>)
    2814:	ldr	r3, [r3, #0]
    2816:	cmp	r3, #0
    2818:	bne.n	27e8 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    281a:	ldr	r3, [pc, #160]	; (28bc <usb_midi_read+0x304>)
    281c:	ldr	r3, [r3, #0]
    281e:	cbz	r3, 2832 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2820:	movs	r0, #252	; 0xfc
    2822:	blx	r3
    2824:	ubfx	r6, r4, #16, #8
    2828:	b.n	27ee <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    282a:	ldr	r3, [pc, #152]	; (28c4 <usb_midi_read+0x30c>)
    282c:	ldr	r3, [r3, #0]
    282e:	cmp	r3, #0
    2830:	bne.n	27e8 <usb_midi_read+0x230>
    2832:	ubfx	r6, r4, #16, #8
    2836:	b.n	27ee <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2838:	ldr	r3, [pc, #140]	; (28c8 <usb_midi_read+0x310>)
    283a:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    283c:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2840:	cmp	r3, #0
    2842:	beq.n	27ee <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2844:	mov	r0, r6
    2846:	blx	r3
    2848:	b.n	27ee <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    284a:	ldr	r3, [pc, #128]	; (28cc <usb_midi_read+0x314>)
    284c:	ldr	r2, [r3, #0]
    284e:	cmp	r2, #0
    2850:	beq.n	2832 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2852:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2854:	lsrs	r3, r4, #17
    2856:	and.w	r0, r6, #127	; 0x7f
    285a:	and.w	r3, r3, #16256	; 0x3f80
    285e:	orrs	r0, r3
    2860:	uxtb	r6, r6
    2862:	blx	r2
    2864:	b.n	27ee <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2866:	ldr	r3, [pc, #104]	; (28d0 <usb_midi_read+0x318>)
    2868:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    286a:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    286e:	cmp	r3, #0
    2870:	bne.n	2844 <usb_midi_read+0x28c>
    2872:	b.n	27ee <usb_midi_read+0x236>
    2874:	.word	0x1fff18cc
    2878:	.word	0x1fff1d3e
    287c:	.word	0x1fff1d3a
    2880:	.word	0x1fff18a8
    2884:	.word	0x1fff1d38
    2888:	.word	0x1fff18dc
    288c:	.word	0x1fff19d0
    2890:	.word	0x1fff18a4
    2894:	.word	0x1fff1d3c
    2898:	.word	0x1fff1d3d
    289c:	.word	0x1fff1d40
    28a0:	.word	0x1fff18d4
    28a4:	.word	0x1fff18d8
    28a8:	.word	0x1fff18bc
    28ac:	.word	0x1fff1898
    28b0:	.word	0x1fff1d3f
    28b4:	.word	0x1fff1884
    28b8:	.word	0x1fff1888
    28bc:	.word	0x1fff188c
    28c0:	.word	0x1fff18c8
    28c4:	.word	0x1fff18b8
    28c8:	.word	0x1fff18d0
    28cc:	.word	0x1fff18a0
    28d0:	.word	0x1fff18b4
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    28d4:	ldr	r3, [pc, #252]	; (29d4 <usb_midi_read+0x41c>)
    28d6:	ldr	r3, [r3, #0]
    28d8:	cmp	r3, #0
    28da:	bne.n	27e8 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    28dc:	ldr	r3, [pc, #248]	; (29d8 <usb_midi_read+0x420>)
    28de:	ldr	r3, [r3, #0]
    28e0:	cmp	r3, #0
    28e2:	beq.n	2832 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    28e4:	movs	r0, #250	; 0xfa
    28e6:	blx	r3
    28e8:	ubfx	r6, r4, #16, #8
    28ec:	b.n	27ee <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    28ee:	ldr	r3, [pc, #236]	; (29dc <usb_midi_read+0x424>)
    28f0:	ldr	r3, [r3, #0]
    28f2:	cmp	r3, #0
    28f4:	bne.w	27e8 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    28f8:	ldr	r3, [pc, #220]	; (29d8 <usb_midi_read+0x420>)
    28fa:	ldr	r3, [r3, #0]
    28fc:	cmp	r3, #0
    28fe:	beq.n	2832 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2900:	movs	r0, #251	; 0xfb
    2902:	blx	r3
    2904:	ubfx	r6, r4, #16, #8
    2908:	b.n	27ee <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    290a:	ldr	r3, [pc, #212]	; (29e0 <usb_midi_read+0x428>)
    290c:	ldr	r3, [r3, #0]
    290e:	cmp	r3, #0
    2910:	bne.w	27e8 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2914:	ldr	r3, [pc, #192]	; (29d8 <usb_midi_read+0x420>)
    2916:	ldr	r3, [r3, #0]
    2918:	cmp	r3, #0
    291a:	beq.n	2832 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    291c:	movs	r0, #248	; 0xf8
    291e:	blx	r3
    2920:	ubfx	r6, r4, #16, #8
    2924:	b.n	27ee <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2926:	cmp	r3, #14
    2928:	bne.w	2638 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    292c:	ldr	r2, [pc, #180]	; (29e4 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    292e:	ldr	r3, [pc, #184]	; (29e8 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2930:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2932:	movs	r1, #224	; 0xe0
    2934:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    2936:	cmp	r2, #0
    2938:	beq.n	29ca <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    293a:	lsrs	r6, r4, #16
    293c:	lsrs	r1, r4, #17
    293e:	and.w	r3, r6, #127	; 0x7f
    2942:	and.w	r1, r1, #16256	; 0x3f80
    2946:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    2948:	uxtb	r5, r5
    294a:	sub.w	r1, r1, #8192	; 0x2000
    294e:	mov	r0, r5
    2950:	blx	r2
    2952:	uxtb	r6, r6
    2954:	lsrs	r4, r4, #24
    2956:	b.n	27cc <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    2958:	bl	24a8 <sysex_byte>
		sysex_byte(n >> 16);
    295c:	ubfx	r0, r4, #16, #8
    2960:	bl	24a8 <sysex_byte>
		sysex_byte(n >> 24);
    2964:	lsrs	r0, r4, #24
    2966:	bl	24a8 <sysex_byte>
		return 0;
    296a:	movs	r0, #0
    296c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2970:	ldr	r3, [pc, #120]	; (29ec <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2972:	ldr	r2, [pc, #116]	; (29e8 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    2974:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2976:	movs	r1, #128	; 0x80
    2978:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    297a:	uxtb	r5, r5
    297c:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2980:	cbz	r3, 29a4 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2982:	mov	r1, r6
    2984:	mov	r0, r5
    2986:	mov	r2, r7
    2988:	blx	r3
    298a:	mov	r4, r7
    298c:	b.n	27cc <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    298e:	movs	r0, #1
    2990:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2994:	ldr	r3, [pc, #64]	; (29d8 <usb_midi_read+0x420>)
    2996:	ldr	r3, [r3, #0]
    2998:	cmp	r3, #0
    299a:	beq.w	2832 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    299e:	movs	r0, #255	; 0xff
    29a0:	blx	r3
    29a2:	b.n	2832 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    29a4:	mov	r4, r3
    29a6:	b.n	27cc <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    29a8:	cmp	r6, #13
    29aa:	bne.n	2926 <usb_midi_read+0x36e>
    29ac:	cmp	r3, #13
    29ae:	bne.w	2638 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    29b2:	ldr	r3, [pc, #60]	; (29f0 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    29b4:	ldr	r2, [pc, #48]	; (29e8 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    29b6:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    29b8:	movs	r1, #208	; 0xd0
    29ba:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    29bc:	uxtb	r5, r5
    29be:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    29c2:	cmp	r3, #0
    29c4:	bne.w	27c4 <usb_midi_read+0x20c>
    29c8:	b.n	2954 <usb_midi_read+0x39c>
    29ca:	ubfx	r6, r4, #16, #8
    29ce:	uxtb	r5, r5
    29d0:	lsrs	r4, r4, #24
    29d2:	b.n	27cc <usb_midi_read+0x214>
    29d4:	.word	0x1fff18b0
    29d8:	.word	0x1fff188c
    29dc:	.word	0x1fff1890
    29e0:	.word	0x1fff1880
    29e4:	.word	0x1fff189c
    29e8:	.word	0x1fff1d38
    29ec:	.word	0x1fff18d4
    29f0:	.word	0x1fff18ac

000029f4 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    29f4:	cpsid	i
	avail = usb_buffer_available;
    29f6:	ldr	r0, [pc, #52]	; (2a2c <usb_malloc+0x38>)
    29f8:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    29fa:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    29fe:	cmp	r3, #29
    2a00:	bgt.n	2a24 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2a02:	mov.w	r1, #2147483648	; 0x80000000
    2a06:	lsrs	r1, r3
    2a08:	bic.w	r2, r2, r1
    2a0c:	str	r2, [r0, #0]
	__enable_irq();
    2a0e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2a10:	ldr	r0, [pc, #28]	; (2a30 <usb_malloc+0x3c>)
    2a12:	add.w	r3, r3, r3, lsl #3
    2a16:	lsls	r3, r3, #3
    2a18:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2a1a:	movs	r1, #0
    2a1c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2a1e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2a20:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2a22:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2a24:	cpsie	i
		return NULL;
    2a26:	movs	r0, #0
    2a28:	bx	lr
    2a2a:	nop
    2a2c:	.word	0x1fff0c6c
    2a30:	.word	0x1fff03d0

00002a34 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2a34:	ldr	r3, [pc, #52]	; (2a6c <usb_free+0x38>)
    2a36:	ldr	r2, [pc, #56]	; (2a70 <usb_free+0x3c>)
    2a38:	subs	r3, r0, r3
    2a3a:	umull	r2, r3, r2, r3
    2a3e:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2a40:	cmp	r3, #29
    2a42:	bhi.n	2a5e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2a44:	ldr	r2, [pc, #44]	; (2a74 <usb_free+0x40>)
    2a46:	ldrb	r2, [r2, #0]
    2a48:	cbnz	r2, 2a60 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2a4a:	cpsid	i
	usb_buffer_available |= mask;
    2a4c:	ldr	r0, [pc, #40]	; (2a78 <usb_free+0x44>)
    2a4e:	mov.w	r1, #2147483648	; 0x80000000
    2a52:	ldr	r2, [r0, #0]
    2a54:	lsr.w	r3, r1, r3
    2a58:	orrs	r2, r3
    2a5a:	str	r2, [r0, #0]
	__enable_irq();
    2a5c:	cpsie	i
    2a5e:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2a60:	ldr	r2, [pc, #24]	; (2a7c <usb_free+0x48>)
    2a62:	ldrb	r2, [r2, #0]
    2a64:	cmp	r2, #0
    2a66:	beq.n	2a4a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2a68:	b.w	2ae8 <usb_rx_memory>
    2a6c:	.word	0x1fff03d0
    2a70:	.word	0x38e38e39
    2a74:	.word	0x1fff19c5
    2a78:	.word	0x1fff0c6c
    2a7c:	.word	0x1fff19d0

00002a80 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2a80:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2a82:	cmp	r3, #4
    2a84:	bhi.n	2ab0 <usb_rx+0x30>
	__disable_irq();
    2a86:	cpsid	i
	ret = rx_first[endpoint];
    2a88:	ldr	r1, [pc, #40]	; (2ab4 <usb_rx+0x34>)
    2a8a:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2a8e:	cbz	r0, 2aac <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2a90:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2a92:	ldr	r4, [pc, #36]	; (2ab8 <usb_rx+0x38>)
    2a94:	ldrh	r5, [r0, #0]
    2a96:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2a9a:	ldr	r6, [r0, #4]
    2a9c:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2aa0:	subs	r2, r2, r5
    2aa2:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2aa6:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2aa8:	pop	{r4, r5, r6}
    2aaa:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2aac:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2aae:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2ab0:	movs	r0, #0
    2ab2:	bx	lr
    2ab4:	.word	0x1fff193c
    2ab8:	.word	0x1fff1e64

00002abc <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2abc:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2abe:	cmp	r0, #4
    2ac0:	bhi.n	2ada <usb_tx_packet_count+0x1e>
	__disable_irq();
    2ac2:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2ac4:	ldr	r3, [pc, #28]	; (2ae4 <usb_tx_packet_count+0x28>)
    2ac6:	ldr.w	r3, [r3, r0, lsl #2]
    2aca:	cbz	r3, 2ade <usb_tx_packet_count+0x22>
    2acc:	movs	r0, #0
    2ace:	ldr	r3, [r3, #4]
    2ad0:	adds	r0, #1
    2ad2:	cmp	r3, #0
    2ad4:	bne.n	2ace <usb_tx_packet_count+0x12>
	__enable_irq();
    2ad6:	cpsie	i
	return count;
    2ad8:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2ada:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2adc:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2ade:	mov	r0, r3
    2ae0:	b.n	2ad6 <usb_tx_packet_count+0x1a>
    2ae2:	nop
    2ae4:	.word	0x1fff1994

00002ae8 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2ae8:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2aea:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2aec:	ldr	r2, [pc, #204]	; (2bbc <usb_rx_memory+0xd4>)
    2aee:	ldrb	r3, [r2, #0]
    2af0:	lsls	r3, r3, #28
    2af2:	bpl.n	2b02 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2af4:	ldr	r3, [pc, #200]	; (2bc0 <usb_rx_memory+0xd8>)
    2af6:	ldr	r1, [r3, #32]
    2af8:	cmp	r1, #0
    2afa:	beq.n	2b84 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2afc:	ldr	r1, [r3, #40]	; 0x28
    2afe:	cmp	r1, #0
    2b00:	beq.n	2ba0 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b02:	ldrb	r3, [r2, #1]
    2b04:	lsls	r5, r3, #28
    2b06:	bpl.n	2b16 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b08:	ldr	r3, [pc, #180]	; (2bc0 <usb_rx_memory+0xd8>)
    2b0a:	ldr	r1, [r3, #64]	; 0x40
    2b0c:	cmp	r1, #0
    2b0e:	beq.n	2bac <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b10:	ldr	r1, [r3, #72]	; 0x48
    2b12:	cmp	r1, #0
    2b14:	beq.n	2ba4 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b16:	ldrb	r3, [r2, #2]
    2b18:	lsls	r4, r3, #28
    2b1a:	bpl.n	2b2a <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b1c:	ldr	r3, [pc, #160]	; (2bc0 <usb_rx_memory+0xd8>)
    2b1e:	ldr	r1, [r3, #96]	; 0x60
    2b20:	cmp	r1, #0
    2b22:	beq.n	2bb0 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b24:	ldr	r1, [r3, #104]	; 0x68
    2b26:	cmp	r1, #0
    2b28:	beq.n	2ba8 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b2a:	ldrb	r3, [r2, #3]
    2b2c:	lsls	r1, r3, #28
    2b2e:	bpl.n	2b40 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b30:	ldr	r3, [pc, #140]	; (2bc0 <usb_rx_memory+0xd8>)
    2b32:	ldr.w	r1, [r3, #128]	; 0x80
    2b36:	cmp	r1, #0
    2b38:	beq.n	2bb8 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b3a:	ldr.w	r1, [r3, #136]	; 0x88
    2b3e:	cbz	r1, 2b66 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b40:	ldrb	r3, [r2, #4]
    2b42:	lsls	r3, r3, #28
    2b44:	bpl.n	2b58 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b46:	ldr	r3, [pc, #120]	; (2bc0 <usb_rx_memory+0xd8>)
    2b48:	ldr.w	r2, [r3, #160]	; 0xa0
    2b4c:	cmp	r2, #0
    2b4e:	beq.n	2bb4 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b50:	ldr.w	r2, [r3, #168]	; 0xa8
    2b54:	movs	r4, #21
    2b56:	cbz	r2, 2b68 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2b58:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2b5a:	ldr	r3, [pc, #104]	; (2bc4 <usb_rx_memory+0xdc>)
    2b5c:	movs	r2, #0
    2b5e:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2b60:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2b62:	b.w	2a34 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b66:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2b68:	ldr	r1, [pc, #88]	; (2bc4 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2b6a:	ldr	r5, [pc, #92]	; (2bc8 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2b6c:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2b6e:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2b72:	add.w	r3, r3, r4, lsl #3
    2b76:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2b78:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2b7a:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2b7c:	strb	r2, [r1, #0]
				__enable_irq();
    2b7e:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2b80:	pop	{r4, r5}
    2b82:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b84:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2b86:	ldr	r4, [pc, #60]	; (2bc4 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2b88:	ldr	r5, [pc, #64]	; (2bcc <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2b8a:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2b8c:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2b90:	add.w	r3, r3, r2, lsl #3
    2b94:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2b96:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2b98:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2b9a:	strb	r2, [r4, #0]
				__enable_irq();
    2b9c:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2b9e:	b.n	2b80 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2ba0:	movs	r4, #5
    2ba2:	b.n	2b68 <usb_rx_memory+0x80>
    2ba4:	movs	r4, #9
    2ba6:	b.n	2b68 <usb_rx_memory+0x80>
    2ba8:	movs	r4, #13
    2baa:	b.n	2b68 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2bac:	movs	r2, #8
    2bae:	b.n	2b86 <usb_rx_memory+0x9e>
    2bb0:	movs	r2, #12
    2bb2:	b.n	2b86 <usb_rx_memory+0x9e>
    2bb4:	movs	r2, #20
    2bb6:	b.n	2b86 <usb_rx_memory+0x9e>
    2bb8:	movs	r2, #16
    2bba:	b.n	2b86 <usb_rx_memory+0x9e>
    2bbc:	.word	0x00004e20
    2bc0:	.word	0x1fff0000
    2bc4:	.word	0x1fff19c5
    2bc8:	.word	0x004000c8
    2bcc:	.word	0x00400088

00002bd0 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2bd0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2bd2:	cmp	r3, #4
    2bd4:	bhi.n	2c12 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2bd6:	ldr	r2, [pc, #108]	; (2c44 <usb_tx+0x74>)
    2bd8:	lsls	r0, r0, #5
    2bda:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2bde:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2be0:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2be2:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2be4:	ldr	r4, [pc, #96]	; (2c48 <usb_tx+0x78>)
    2be6:	ldrb	r2, [r4, r3]
    2be8:	cmp	r2, #3
    2bea:	bhi.n	2c24 <usb_tx+0x54>
    2bec:	tbb	[pc, r2]
    2bf0:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2bf4:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2bf6:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2bf8:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2bfa:	tst.w	r0, #8
    2bfe:	ite	ne
    2c00:	movne	r3, #200	; 0xc8
    2c02:	moveq	r3, #136	; 0x88
    2c04:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2c08:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c0a:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2c0c:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2c0e:	cpsie	i
}
    2c10:	pop	{r4, r5}
    2c12:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2c14:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2c16:	movs	r2, #2
		break;
    2c18:	b.n	2bf6 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2c1a:	movs	r2, #5
    2c1c:	b.n	2bf6 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2c1e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2c20:	movs	r2, #4
		break;
    2c22:	b.n	2bf6 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2c24:	ldr	r2, [pc, #36]	; (2c4c <usb_tx+0x7c>)
    2c26:	ldr.w	r0, [r2, r3, lsl #2]
    2c2a:	cbz	r0, 2c3c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2c2c:	ldr	r2, [pc, #32]	; (2c50 <usb_tx+0x80>)
    2c2e:	ldr.w	r0, [r2, r3, lsl #2]
    2c32:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2c34:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2c38:	cpsie	i
		return;
    2c3a:	b.n	2c10 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2c3c:	str.w	r1, [r2, r3, lsl #2]
    2c40:	ldr	r2, [pc, #12]	; (2c50 <usb_tx+0x80>)
    2c42:	b.n	2c34 <usb_tx+0x64>
    2c44:	.word	0x1fff0000
    2c48:	.word	0x1fff19d4
    2c4c:	.word	0x1fff1994
    2c50:	.word	0x1fff19a8

00002c54 <usb_isr>:
}



void usb_isr(void)
{
    2c54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2c58:	ldr.w	fp, [pc, #776]	; 2f64 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2c5c:	ldr.w	sl, [pc, #776]	; 2f68 <usb_isr+0x314>
}



void usb_isr(void)
{
    2c60:	sub	sp, #28
    2c62:	b.n	2cee <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2c64:	ldr	r7, [pc, #680]	; (2f10 <usb_isr+0x2bc>)
    2c66:	mov.w	r8, r3, lsr #2
    2c6a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2c6e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2c70:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2c74:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2c78:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2c7a:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2c7e:	and.w	r4, r3, #255	; 0xff
    2c82:	cmp	r3, #0
    2c84:	bne.w	2e88 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2c88:	ldr.w	r3, [r7, r8, lsl #3]
    2c8c:	lsrs	r3, r3, #16
    2c8e:	uxth	r1, r3
    2c90:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2c94:	cmp	r3, #0
    2c96:	beq.w	2e76 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2c9a:	ldr	r3, [pc, #632]	; (2f14 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2c9c:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2ca0:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2ca4:	ldr.w	r2, [r3, r6, lsl #2]
    2ca8:	cmp	r2, #0
    2caa:	beq.w	3118 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2cae:	ldr	r5, [pc, #616]	; (2f18 <usb_isr+0x2c4>)
    2cb0:	ldr.w	r3, [r5, r6, lsl #2]
    2cb4:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2cb6:	ldr	r4, [pc, #612]	; (2f1c <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2cb8:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2cbc:	ldrh.w	r3, [r4, r6, lsl #1]
    2cc0:	add	r1, r3
    2cc2:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2cc6:	bl	29f4 <usb_malloc>
					if (packet) {
    2cca:	cmp	r0, #0
    2ccc:	beq.w	310a <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2cd0:	ldr	r2, [pc, #588]	; (2f20 <usb_isr+0x2cc>)
    2cd2:	ldr	r3, [pc, #592]	; (2f24 <usb_isr+0x2d0>)
    2cd4:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2cd8:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2cdc:	it	ne
    2cde:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2ce0:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2ce4:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2ce8:	movs	r3, #8
    2cea:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2cee:	ldrb.w	r4, [fp]
    2cf2:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2cf4:	lsls	r0, r4, #29
    2cf6:	bpl.n	2d32 <usb_isr+0xde>
		if (usb_configuration) {
    2cf8:	ldr	r3, [pc, #556]	; (2f28 <usb_isr+0x2d4>)
    2cfa:	ldrb	r3, [r3, #0]
    2cfc:	cbz	r3, 2d2c <usb_isr+0xd8>
			t = usb_reboot_timer;
    2cfe:	ldr	r1, [pc, #556]	; (2f2c <usb_isr+0x2d8>)
    2d00:	ldrb	r2, [r1, #0]
			if (t) {
    2d02:	and.w	r3, r2, #255	; 0xff
    2d06:	cbz	r2, 2d12 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2d08:	subs	r3, #1
    2d0a:	uxtb	r3, r3
    2d0c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2d0e:	cbnz	r3, 2d12 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2d10:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2d12:	ldr	r1, [pc, #540]	; (2f30 <usb_isr+0x2dc>)
    2d14:	ldrb	r2, [r1, #0]
			if (t) {
    2d16:	and.w	r3, r2, #255	; 0xff
    2d1a:	cbz	r2, 2d28 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2d1c:	subs	r3, #1
    2d1e:	uxtb	r3, r3
    2d20:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2d22:	cmp	r3, #0
    2d24:	beq.w	30b6 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2d28:	bl	258c <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2d2c:	movs	r3, #4
    2d2e:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2d32:	and.w	r3, r4, #8
    2d36:	and.w	r2, r3, #255	; 0xff
    2d3a:	cmp	r3, #0
    2d3c:	beq.w	2ed0 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2d40:	ldrb.w	r3, [sl]
    2d44:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2d46:	lsrs	r6, r3, #4
    2d48:	bne.n	2c64 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2d4a:	lsrs	r4, r3, #2
    2d4c:	ldr.w	r9, [pc, #448]	; 2f10 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2d50:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2d54:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2d58:	ubfx	r2, r2, #2, #4
    2d5c:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2d5e:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2d60:	cmp	r2, #12
    2d62:	bhi.w	2e6e <usb_isr+0x21a>
    2d66:	tbb	[pc, r2]
    2d6a:	.short	0x7878
    2d6c:	.word	0x82828282
    2d70:	.word	0x82438282
    2d74:	.short	0x8282
    2d76:	.byte	0x07
    2d77:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2d78:	ldr	r0, [r1, #0]
    2d7a:	ldr	r5, [pc, #440]	; (2f34 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2d7c:	ldr	r3, [pc, #416]	; (2f20 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2d7e:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2d80:	ldr	r7, [pc, #436]	; (2f38 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2d82:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2d86:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2d88:	ldr	r6, [pc, #432]	; (2f3c <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2d8a:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2d8c:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2d90:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2d92:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2d94:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2d96:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2d9a:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2d9c:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2da0:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2da4:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2da6:	bhi.w	2f6c <usb_isr+0x318>
    2daa:	cmp.w	r1, #1664	; 0x680
    2dae:	bcs.w	33d8 <usb_isr+0x784>
    2db2:	cmp.w	r1, #258	; 0x102
    2db6:	beq.w	3186 <usb_isr+0x532>
    2dba:	bhi.w	3150 <usb_isr+0x4fc>
    2dbe:	cmp	r1, #128	; 0x80
    2dc0:	beq.w	340c <usb_isr+0x7b8>
    2dc4:	cmp	r1, #130	; 0x82
    2dc6:	bne.w	3192 <usb_isr+0x53e>
    2dca:	ldrh	r1, [r5, #4]
    2dcc:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2dd0:	cmp	r1, #5
    2dd2:	bhi.w	3192 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2dd6:	ldr	r3, [pc, #360]	; (2f40 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2dd8:	ldr	r4, [pc, #360]	; (2f44 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2dda:	lsls	r1, r1, #2
    2ddc:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2dde:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2de0:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2de2:	ldrb	r2, [r3, #0]
    2de4:	lsls	r3, r2, #30
    2de6:	bpl.w	351c <usb_isr+0x8c8>
    2dea:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2dec:	movs	r0, #2
    2dee:	b.n	321a <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2df0:	ldr	r7, [pc, #324]	; (2f38 <usb_isr+0x2e4>)
    2df2:	ldr	r2, [r7, #0]
		if (data) {
    2df4:	cbz	r2, 2e44 <usb_isr+0x1f0>
			size = ep0_tx_len;
    2df6:	ldr	r3, [pc, #336]	; (2f48 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2df8:	ldr	r6, [pc, #320]	; (2f3c <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2dfa:	ldr	r1, [pc, #336]	; (2f4c <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2dfc:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2dfe:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e00:	ldrb	r5, [r1, #0]
    2e02:	cmp	r0, #64	; 0x40
    2e04:	mov	lr, r0
    2e06:	orr.w	r8, r5, #2
    2e0a:	it	cs
    2e0c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e10:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2e12:	eor.w	r4, r4, #1
    2e16:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2e18:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e1c:	ite	eq
    2e1e:	moveq	r4, #136	; 0x88
    2e20:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e22:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2e26:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e28:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e2c:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e30:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2e32:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e34:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2e38:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e3a:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2e3c:	cmp	r0, #0
    2e3e:	beq.w	2fae <usb_isr+0x35a>
    2e42:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2e44:	ldr	r3, [pc, #236]	; (2f34 <usb_isr+0x2e0>)
    2e46:	ldrh	r2, [r3, #0]
    2e48:	cmp.w	r2, #1280	; 0x500
    2e4c:	bne.n	2e6e <usb_isr+0x21a>
			setup.bRequest = 0;
    2e4e:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2e50:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2e52:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2e54:	ldr	r3, [pc, #248]	; (2f50 <usb_isr+0x2fc>)
    2e56:	strb	r2, [r3, #0]
    2e58:	b.n	2e6e <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2e5a:	ldr	r2, [pc, #216]	; (2f34 <usb_isr+0x2e0>)
    2e5c:	ldrh	r0, [r2, #0]
    2e5e:	movw	r2, #8225	; 0x2021
    2e62:	cmp	r0, r2
    2e64:	beq.w	2fb8 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2e68:	ldr	r2, [pc, #180]	; (2f20 <usb_isr+0x2cc>)
    2e6a:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2e6e:	ldr	r2, [pc, #228]	; (2f54 <usb_isr+0x300>)
    2e70:	movs	r3, #1
    2e72:	strb	r3, [r2, #0]
    2e74:	b.n	2ce8 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e76:	ldr	r2, [pc, #168]	; (2f20 <usb_isr+0x2cc>)
    2e78:	ldr	r3, [pc, #168]	; (2f24 <usb_isr+0x2d0>)
    2e7a:	tst.w	r9, #8
    2e7e:	it	ne
    2e80:	movne	r3, r2
    2e82:	str.w	r3, [r7, r8, lsl #3]
    2e86:	b.n	2ce8 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2e88:	bl	2a34 <usb_free>
				packet = tx_first[endpoint];
    2e8c:	ldr	r2, [pc, #200]	; (2f58 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2e8e:	ldr	r1, [pc, #204]	; (2f5c <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2e90:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2e94:	cmp	r3, #0
    2e96:	beq.w	3120 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2e9a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2e9c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2e9e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2ea2:	add.w	r2, r3, #8
    2ea6:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2eaa:	cmp	r4, #3
    2eac:	bhi.n	2eba <usb_isr+0x266>
    2eae:	tbb	[pc, r4]
    2eb2:	.short	0x022c
    2eb4:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2eb6:	movs	r2, #2
    2eb8:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2eba:	ldrh	r2, [r3, #0]
    2ebc:	tst.w	r9, #8
    2ec0:	ite	eq
    2ec2:	moveq	r3, #136	; 0x88
    2ec4:	movne	r3, #200	; 0xc8
    2ec6:	orr.w	r3, r3, r2, lsl #16
    2eca:	str.w	r3, [r7, r8, lsl #3]
    2ece:	b.n	2ce8 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2ed0:	lsls	r0, r4, #31
    2ed2:	bmi.w	30bc <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2ed6:	lsls	r1, r4, #24
    2ed8:	bmi.w	313c <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2edc:	lsls	r2, r4, #30
    2ede:	bpl.n	2eee <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2ee0:	ldr	r2, [pc, #124]	; (2f60 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2ee2:	ldr	r1, [pc, #128]	; (2f64 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2ee4:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2ee6:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2ee8:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2eea:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2eec:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2eee:	lsls	r3, r4, #27
    2ef0:	bpl.n	2ef8 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2ef2:	ldr	r3, [pc, #112]	; (2f64 <usb_isr+0x310>)
    2ef4:	movs	r2, #16
    2ef6:	strb	r2, [r3, #0]
	}

}
    2ef8:	add	sp, #28
    2efa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2efe:	movs	r2, #4
    2f00:	strb	r2, [r1, r6]
						break;
    2f02:	b.n	2eba <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2f04:	movs	r2, #5
    2f06:	strb	r2, [r1, r6]
						break;
    2f08:	b.n	2eba <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2f0a:	movs	r2, #3
    2f0c:	strb	r2, [r1, r6]
						break;
    2f0e:	b.n	2eba <usb_isr+0x266>
    2f10:	.word	0x1fff0000
    2f14:	.word	0x1fff193c
    2f18:	.word	0x1fff18e4
    2f1c:	.word	0x1fff1e64
    2f20:	.word	0x004000c8
    2f24:	.word	0x00400088
    2f28:	.word	0x1fff19d0
    2f2c:	.word	0x1fff1951
    2f30:	.word	0x1fff1864
    2f34:	.word	0x1fff19bc
    2f38:	.word	0x1fff18e0
    2f3c:	.word	0x1fff1950
    2f40:	.word	0x400720c0
    2f44:	.word	0x1fff19c8
    2f48:	.word	0x1fff18f8
    2f4c:	.word	0x1fff19c4
    2f50:	.word	0x40072098
    2f54:	.word	0x40072094
    2f58:	.word	0x1fff1994
    2f5c:	.word	0x1fff19d4
    2f60:	.word	0x40072088
    2f64:	.word	0x40072080
    2f68:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2f6c:	movw	r4, #8225	; 0x2021
    2f70:	cmp	r1, r4
    2f72:	beq.w	30ae <usb_isr+0x45a>
    2f76:	bhi.n	300c <usb_isr+0x3b8>
    2f78:	cmp.w	r1, #2176	; 0x880
    2f7c:	beq.w	3212 <usb_isr+0x5be>
    2f80:	cmp.w	r1, #2304	; 0x900
    2f84:	bne.w	3192 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2f88:	ldr	r2, [pc, #712]	; (3254 <usb_isr+0x600>)
    2f8a:	ldr	r4, [pc, #716]	; (3258 <usb_isr+0x604>)
    2f8c:	ldrb	r1, [r5, #2]
    2f8e:	strb	r1, [r2, #0]
    2f90:	add.w	r5, r4, #160	; 0xa0
    2f94:	b.n	2f9e <usb_isr+0x34a>
    2f96:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2f98:	cmp	r5, r4
    2f9a:	beq.w	32b0 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2f9e:	ldr	r3, [r4, #32]
    2fa0:	lsls	r1, r3, #24
    2fa2:	bpl.n	2f96 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2fa4:	ldr	r0, [r4, #36]	; 0x24
    2fa6:	subs	r0, #8
    2fa8:	bl	2a34 <usb_free>
    2fac:	b.n	2f96 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2fae:	cmp.w	lr, #64	; 0x40
    2fb2:	it	ne
    2fb4:	movne	r2, #0
    2fb6:	b.n	2e42 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2fb8:	ldr	r2, [pc, #672]	; (325c <usb_isr+0x608>)
    2fba:	ldrb	r5, [r1, #0]
    2fbc:	ldrb	r0, [r1, #1]
    2fbe:	strb	r5, [r2, #0]
    2fc0:	strb	r0, [r2, #1]
    2fc2:	ldrb	r5, [r1, #2]
    2fc4:	ldrb	r0, [r1, #3]
    2fc6:	strb	r5, [r2, #2]
    2fc8:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2fca:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2fcc:	ldrb	r5, [r1, #4]
    2fce:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2fd0:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2fd2:	ldrb	r5, [r1, #5]
    2fd4:	ldrb	r1, [r1, #6]
    2fd6:	strb	r5, [r2, #5]
    2fd8:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2fda:	beq.w	320a <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fde:	ldr	r1, [pc, #640]	; (3260 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fe0:	ldr	r6, [pc, #640]	; (3264 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fe2:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fe4:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2fe6:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fea:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fec:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2ff0:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ff2:	ite	eq
    2ff4:	moveq	r1, #136	; 0x88
    2ff6:	movne	r1, #200	; 0xc8
    2ff8:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2ffc:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3000:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3004:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3006:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3008:	str	r1, [r2, #4]
    300a:	b.n	2e68 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    300c:	movw	r4, #8737	; 0x2221
    3010:	cmp	r1, r4
    3012:	bne.w	3426 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3016:	ldr.w	ip, [pc, #656]	; 32a8 <usb_isr+0x654>
    301a:	ldr	r3, [pc, #588]	; (3268 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    301c:	ldr	r1, [pc, #588]	; (326c <usb_isr+0x618>)
    301e:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3020:	ldr.w	r5, [ip]
    3024:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3026:	str	r0, [sp, #4]
    3028:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    302a:	movs	r0, #0
    302c:	str	r0, [sp, #8]
    302e:	mov	r8, r0
    3030:	mov	ip, r0
    3032:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3034:	ldr	r1, [pc, #552]	; (3260 <usb_isr+0x60c>)
    3036:	ldrb	r5, [r1, #0]
    3038:	orr.w	lr, r5, #2
    303c:	add.w	r3, r9, lr, lsl #3
    3040:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3042:	ldr	r3, [sp, #4]
    3044:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3046:	ldr	r3, [sp, #12]
    3048:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    304a:	ite	eq
    304c:	moveq	r4, #136	; 0x88
    304e:	movne	r4, #200	; 0xc8
    3050:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3054:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3058:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    305c:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    305e:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3060:	ldr.w	lr, [pc, #500]	; 3258 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    3064:	ldr	r3, [pc, #508]	; (3264 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    3066:	ldr.w	r8, [pc, #504]	; 3260 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    306a:	cmp	r0, #0
    306c:	bne.w	31a0 <usb_isr+0x54c>
    3070:	cmp.w	ip, #64	; 0x40
    3074:	bne.n	30ae <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3076:	orr.w	ip, r4, #2
    307a:	add.w	r3, r9, ip, lsl #3
    307e:	ldr	r4, [sp, #8]
    3080:	ldr.w	lr, [pc, #468]	; 3258 <usb_isr+0x604>
    3084:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3086:	cmp	r2, #0
    3088:	bne.w	31cc <usb_isr+0x578>
    308c:	lsls	r2, r0, #16
    308e:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3092:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3096:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    309a:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    309c:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    309e:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    30a0:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    30a2:	cmp	r0, #64	; 0x40
    30a4:	bne.n	30ae <usb_isr+0x45a>
    30a6:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    30a8:	ldr	r2, [pc, #452]	; (3270 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    30aa:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    30ac:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    30ae:	ldr	r2, [pc, #452]	; (3274 <usb_isr+0x620>)
    30b0:	movs	r3, #1
    30b2:	strb	r3, [r2, #0]
    30b4:	b.n	2e6e <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    30b6:	bl	1e14 <usb_serial_flush_callback>
    30ba:	b.n	2d28 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    30bc:	ldr	r3, [pc, #408]	; (3258 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    30be:	ldr	r0, [pc, #436]	; (3274 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    30c0:	ldr	r1, [pc, #412]	; (3260 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    30c2:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    30c4:	mov.w	lr, #2
    30c8:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    30cc:	ldr	r7, [pc, #424]	; (3278 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    30ce:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    30d0:	ldr	r1, [pc, #424]	; (327c <usb_isr+0x628>)
    30d2:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    30d4:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    30d6:	ldr	r6, [pc, #424]	; (3280 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    30d8:	ldr	r5, [pc, #424]	; (3284 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    30da:	ldr	r4, [pc, #428]	; (3288 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    30dc:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    30de:	movs	r1, #13
    30e0:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    30e2:	movs	r1, #255	; 0xff
    30e4:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    30e6:	ldr.w	lr, [pc, #452]	; 32ac <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    30ea:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    30ec:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    30ee:	ldr	r5, [pc, #412]	; (328c <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    30f0:	ldr	r2, [pc, #412]	; (3290 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    30f2:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    30f6:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    30f8:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    30fa:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    30fe:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3100:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3102:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3104:	add	sp, #28
    3106:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    310a:	ldr	r2, [pc, #392]	; (3294 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    310c:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3110:	ldrb	r3, [r2, #0]
    3112:	adds	r3, #1
    3114:	strb	r3, [r2, #0]
    3116:	b.n	2ce8 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3118:	str.w	r0, [r3, r6, lsl #2]
    311c:	ldr	r5, [pc, #376]	; (3298 <usb_isr+0x644>)
    311e:	b.n	2cb6 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3120:	ldrb	r3, [r1, r6]
    3122:	cmp	r3, #3
    3124:	bhi.n	31fc <usb_isr+0x5a8>
    3126:	add	r2, pc, #4	; (adr r2, 312c <usb_isr+0x4d8>)
    3128:	ldr.w	pc, [r2, r3, lsl #2]
    312c:	.word	0x00002ce9
    3130:	.word	0x00002ce9
    3134:	.word	0x00003181
    3138:	.word	0x0000317b
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    313c:	ldr	r1, [pc, #312]	; (3278 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    313e:	ldr	r3, [pc, #324]	; (3284 <usb_isr+0x630>)
    3140:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3142:	movs	r0, #13
    3144:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3146:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3148:	lsls	r2, r4, #30
    314a:	bpl.w	2eee <usb_isr+0x29a>
    314e:	b.n	2ee0 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3150:	movw	r2, #770	; 0x302
    3154:	cmp	r1, r2
    3156:	bne.w	3416 <usb_isr+0x7c2>
    315a:	ldrh	r1, [r5, #4]
    315c:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3160:	cmp	r1, #5
    3162:	bhi.n	3192 <usb_isr+0x53e>
    3164:	ldrh	r2, [r5, #2]
    3166:	cbnz	r2, 3192 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3168:	ldr	r4, [pc, #268]	; (3278 <usb_isr+0x624>)
    316a:	str	r0, [sp, #4]
    316c:	lsls	r1, r1, #2
    316e:	add	r4, r1
    3170:	ldrb	r1, [r4, #0]
    3172:	orr.w	r1, r1, #2
    3176:	strb	r1, [r4, #0]
    3178:	b.n	302a <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    317a:	movs	r3, #1
    317c:	strb	r3, [r1, r6]
						break;
    317e:	b.n	2ce8 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3180:	movs	r3, #0
    3182:	strb	r3, [r1, r6]
						break;
    3184:	b.n	2ce8 <usb_isr+0x94>
    3186:	ldrh	r1, [r5, #4]
    3188:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    318c:	cmp	r1, #5
    318e:	bls.w	3430 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3192:	ldr	r2, [pc, #228]	; (3278 <usb_isr+0x624>)
    3194:	movs	r3, #15
    3196:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3198:	ldr	r2, [pc, #216]	; (3274 <usb_isr+0x620>)
    319a:	movs	r3, #1
    319c:	strb	r3, [r2, #0]
    319e:	b.n	2e6e <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    31a0:	cmp	r0, #64	; 0x40
    31a2:	bls.w	3076 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    31a6:	orr.w	r4, r4, #2
    31aa:	add.w	r1, lr, r4, lsl #3
    31ae:	ldr	r6, [sp, #8]
    31b0:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31b2:	cbz	r2, 31e4 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    31b4:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31b8:	ldr	r2, [pc, #224]	; (329c <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    31ba:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    31bc:	mov	r3, r6
    31be:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    31c0:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    31c4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31c6:	str.w	r2, [lr, r4, lsl #3]
    31ca:	b.n	30a8 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    31cc:	ldrb.w	r3, [sp, #4]
    31d0:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31d2:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    31d4:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    31d6:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31d8:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    31dc:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31de:	str.w	r2, [lr, ip, lsl #3]
    31e2:	b.n	30a2 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    31e4:	ldrb.w	r1, [sp, #4]
    31e8:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    31ea:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31ec:	ldr	r2, [pc, #140]	; (327c <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    31ee:	strb.w	r5, [r8]
    31f2:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    31f4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31f6:	str.w	r2, [lr, r4, lsl #3]
    31fa:	b.n	30a8 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    31fc:	tst.w	r9, #8
    3200:	ite	eq
    3202:	moveq	r3, #2
    3204:	movne	r3, #3
    3206:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3208:	b.n	2ce8 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    320a:	ldr	r2, [pc, #148]	; (32a0 <usb_isr+0x64c>)
    320c:	movs	r1, #15
    320e:	strb	r1, [r2, #0]
    3210:	b.n	2fde <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3212:	ldr	r2, [pc, #64]	; (3254 <usb_isr+0x600>)
    3214:	ldr	r4, [pc, #140]	; (32a4 <usb_isr+0x650>)
    3216:	ldrb	r2, [r2, #0]
    3218:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    321a:	ldrh	r2, [r5, #6]
    321c:	cmp	r2, r0
    321e:	bcs.w	35e4 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3222:	ldr	r1, [pc, #60]	; (3260 <usb_isr+0x60c>)
    3224:	ldrb	r5, [r1, #0]
    3226:	cmp	r2, #64	; 0x40
    3228:	mov	ip, r2
    322a:	orr.w	lr, r5, #2
    322e:	it	cs
    3230:	movcs.w	ip, #64	; 0x40
    3234:	add.w	r3, r4, ip
    3238:	add.w	r0, r9, lr, lsl #3
    323c:	str	r3, [sp, #8]
    323e:	movs	r3, #1
    3240:	str	r4, [r0, #4]
    3242:	mov.w	r8, ip, lsl #16
    3246:	rsb	r0, ip, r2
    324a:	str	r3, [sp, #4]
    324c:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    324e:	movs	r4, #200	; 0xc8
    3250:	b.n	3050 <usb_isr+0x3fc>
    3252:	nop
    3254:	.word	0x1fff19d0
    3258:	.word	0x1fff0000
    325c:	.word	0x1fff1d2c
    3260:	.word	0x1fff19c4
    3264:	.word	0x1fff1950
    3268:	.word	0x1fff1d34
    326c:	.word	0x1fff1874
    3270:	.word	0x1fff18f8
    3274:	.word	0x40072094
    3278:	.word	0x400720c0
    327c:	.word	0x00400088
    3280:	.word	0x40072088
    3284:	.word	0x40072080
    3288:	.word	0x40072098
    328c:	.word	0x1fff18fc
    3290:	.word	0x1fff1954
    3294:	.word	0x1fff19c5
    3298:	.word	0x1fff18e4
    329c:	.word	0x004000c8
    32a0:	.word	0x1fff1951
    32a4:	.word	0x1fff19c8
    32a8:	.word	0x1fff187c
    32ac:	.word	0x4007208c
    32b0:	ldr	r4, [pc, #704]	; (3574 <usb_isr+0x920>)
    32b2:	ldr	r2, [pc, #708]	; (3578 <usb_isr+0x924>)
    32b4:	ldr	r1, [pc, #708]	; (357c <usb_isr+0x928>)
    32b6:	ldr	r0, [pc, #712]	; (3580 <usb_isr+0x92c>)
    32b8:	ldr	r5, [pc, #712]	; (3584 <usb_isr+0x930>)
    32ba:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    32bc:	movs	r3, #0
    32be:	ldr	r4, [pc, #712]	; (3588 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    32c0:	str	r4, [sp, #8]
    32c2:	str	r6, [sp, #20]
    32c4:	str	r5, [sp, #12]
    32c6:	mov	r8, r0
    32c8:	mov	r4, r3
    32ca:	str	r7, [sp, #16]
    32cc:	mov	r6, r2
    32ce:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    32d0:	ldr	r0, [r6, #0]
			while (p) {
    32d2:	cbz	r0, 32e0 <usb_isr+0x68c>
				n = p->next;
    32d4:	ldr	r7, [r0, #4]
				usb_free(p);
    32d6:	bl	2a34 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    32da:	mov	r0, r7
    32dc:	cmp	r7, #0
    32de:	bne.n	32d4 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    32e0:	movs	r3, #0
    32e2:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    32e4:	ldr	r3, [sp, #12]
			p = tx_first[i];
    32e6:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    32e8:	mov	r2, r3
    32ea:	movs	r3, #0
    32ec:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    32f0:	cbz	r0, 32fe <usb_isr+0x6aa>
				n = p->next;
    32f2:	ldr	r7, [r0, #4]
				usb_free(p);
    32f4:	bl	2a34 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    32f8:	mov	r0, r7
    32fa:	cmp	r7, #0
    32fc:	bne.n	32f2 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    32fe:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3300:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3302:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3304:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3306:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    330a:	ldr	r2, [sp, #8]
    330c:	mov.w	r1, #0
			switch (tx_state[i]) {
    3310:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3312:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3316:	cmp	r3, #3
    3318:	bhi.n	332a <usb_isr+0x6d6>
    331a:	tbb	[pc, r3]
    331e:	.short	0x0258
    3320:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3322:	ldr	r3, [sp, #4]
    3324:	mov.w	r2, #1
    3328:	strb	r2, [r3, #0]
    332a:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    332c:	adds	r4, #1
    332e:	adds	r3, #1
    3330:	cmp	r4, #5
    3332:	add.w	r6, r6, #4
    3336:	add.w	r5, r5, #4
    333a:	str	r3, [sp, #4]
    333c:	bne.n	32d0 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    333e:	ldr	r4, [pc, #588]	; (358c <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3340:	ldr	r5, [pc, #588]	; (3590 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3342:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3344:	ldr	r3, [pc, #588]	; (3594 <usb_isr+0x940>)
    3346:	ldr	r7, [sp, #16]
    3348:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    334a:	movs	r1, #0
    334c:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    334e:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3350:	lsls	r2, r2, #28
    3352:	bmi.n	344a <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3354:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3356:	ldr	r1, [pc, #576]	; (3598 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3358:	ldr.w	r8, [pc, #588]	; 35a8 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    335c:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    335e:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3360:	mov.w	r1, #0
    3364:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3368:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    336c:	bmi.w	34f6 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3370:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3372:	ldr	r1, [pc, #552]	; (359c <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3374:	ldr.w	r8, [pc, #560]	; 35a8 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3378:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    337a:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    337c:	mov.w	r1, #0
    3380:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3384:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3388:	bmi.w	34ce <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    338c:	ldr	r1, [pc, #528]	; (35a0 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    338e:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3390:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3392:	movs	r1, #0
    3394:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3398:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    339c:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    339e:	ldr.w	r8, [pc, #520]	; 35a8 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33a2:	bmi.n	34a0 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    33a4:	ldrb	r2, [r4, #4]
			*reg = epconf;
    33a6:	ldr	r1, [pc, #508]	; (35a4 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33a8:	ldr	r4, [pc, #508]	; (35a8 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    33aa:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33ac:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33ae:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33b0:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    33b4:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    33b8:	bmi.n	3476 <usb_isr+0x822>
    33ba:	ldrb	r3, [r6, #0]
    33bc:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    33be:	movs	r1, #0
    33c0:	eor.w	r2, r3, #1
    33c4:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    33c8:	str.w	r1, [r9, #184]	; 0xb8
    33cc:	b.n	302a <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    33ce:	ldr	r3, [sp, #4]
    33d0:	mov.w	r2, #0
    33d4:	strb	r2, [r3, #0]
    33d6:	b.n	332a <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    33d8:	ldr	r2, [pc, #464]	; (35ac <usb_isr+0x958>)
    33da:	ldr	r4, [r2, #4]
    33dc:	cmp	r4, #0
    33de:	beq.w	3192 <usb_isr+0x53e>
    33e2:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    33e4:	ldrh.w	lr, [r5, #4]
    33e8:	b.n	33f4 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    33ea:	adds	r2, #12
			if (list->addr == NULL) break;
    33ec:	ldr	r4, [r2, #4]
    33ee:	cmp	r4, #0
    33f0:	beq.w	3192 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    33f4:	ldrh	r3, [r2, #0]
    33f6:	cmp	r3, r0
    33f8:	bne.n	33ea <usb_isr+0x796>
    33fa:	ldrh	r3, [r2, #2]
    33fc:	cmp	r3, lr
    33fe:	bne.n	33ea <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3400:	lsrs	r0, r0, #8
    3402:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3404:	ite	eq
    3406:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3408:	ldrhne	r0, [r2, #8]
    340a:	b.n	321a <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    340c:	ldr	r4, [pc, #416]	; (35b0 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    340e:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3410:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3412:	strb	r2, [r4, #1]
    3414:	b.n	321a <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3416:	cmp.w	r1, #1280	; 0x500
    341a:	bne.w	3192 <usb_isr+0x53e>
    341e:	movs	r3, #1
    3420:	movs	r2, #0
    3422:	str	r3, [sp, #4]
    3424:	b.n	302a <usb_isr+0x3d6>
    3426:	movw	r2, #8993	; 0x2321
    342a:	cmp	r1, r2
    342c:	beq.n	341e <usb_isr+0x7ca>
    342e:	b.n	3192 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3430:	ldrh	r2, [r5, #2]
    3432:	cmp	r2, #0
    3434:	bne.w	3192 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3438:	ldr	r4, [pc, #376]	; (35b4 <usb_isr+0x960>)
    343a:	str	r0, [sp, #4]
    343c:	lsls	r1, r1, #2
    343e:	add	r4, r1
    3440:	ldrb	r1, [r4, #0]
    3442:	bic.w	r1, r1, #2
    3446:	strb	r1, [r4, #0]
    3448:	b.n	302a <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    344a:	bl	29f4 <usb_malloc>
				if (p) {
    344e:	cmp	r0, #0
    3450:	beq.w	35c0 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3454:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3456:	ldr	r2, [pc, #352]	; (35b8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3458:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    345c:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3460:	bl	29f4 <usb_malloc>
				if (p) {
    3464:	cmp	r0, #0
    3466:	beq.n	3568 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3468:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    346a:	ldr	r2, [pc, #336]	; (35bc <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    346c:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3470:	str.w	r2, [r9, #40]	; 0x28
    3474:	b.n	3354 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3476:	bl	29f4 <usb_malloc>
				if (p) {
    347a:	cmp	r0, #0
    347c:	beq.n	352c <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    347e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3480:	ldr	r2, [pc, #308]	; (35b8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3482:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3486:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    348a:	bl	29f4 <usb_malloc>
				if (p) {
    348e:	cmp	r0, #0
    3490:	beq.n	3520 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3492:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3494:	ldr	r2, [pc, #292]	; (35bc <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3496:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    349a:	str.w	r2, [r9, #168]	; 0xa8
    349e:	b.n	33ba <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34a0:	bl	29f4 <usb_malloc>
				if (p) {
    34a4:	cmp	r0, #0
    34a6:	beq.w	35d8 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    34aa:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34ac:	ldr	r2, [pc, #264]	; (35b8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    34ae:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34b2:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    34b6:	bl	29f4 <usb_malloc>
				if (p) {
    34ba:	cmp	r0, #0
    34bc:	beq.w	35cc <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    34c0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34c2:	ldr	r2, [pc, #248]	; (35bc <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    34c4:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34c8:	str.w	r2, [r9, #136]	; 0x88
    34cc:	b.n	33a4 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34ce:	bl	29f4 <usb_malloc>
				if (p) {
    34d2:	cmp	r0, #0
    34d4:	beq.n	355c <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    34d6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34d8:	ldr	r2, [pc, #220]	; (35b8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    34da:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34de:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    34e2:	bl	29f4 <usb_malloc>
				if (p) {
    34e6:	cbz	r0, 3550 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    34e8:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34ea:	ldr	r2, [pc, #208]	; (35bc <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    34ec:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34f0:	str.w	r2, [r9, #104]	; 0x68
    34f4:	b.n	338c <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34f6:	bl	29f4 <usb_malloc>
				if (p) {
    34fa:	cbz	r0, 3544 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    34fc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34fe:	ldr	r2, [pc, #184]	; (35b8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3500:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3504:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3508:	bl	29f4 <usb_malloc>
				if (p) {
    350c:	cbz	r0, 3538 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    350e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3510:	ldr	r2, [pc, #168]	; (35bc <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3512:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3516:	str.w	r2, [r9, #72]	; 0x48
    351a:	b.n	3370 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    351c:	movs	r0, #2
    351e:	b.n	321a <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3520:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3522:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3526:	adds	r2, #1
    3528:	strb	r2, [r5, #0]
    352a:	b.n	33ba <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    352c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    352e:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3532:	adds	r2, #1
    3534:	strb	r2, [r5, #0]
    3536:	b.n	348a <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3538:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    353a:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    353e:	adds	r2, #1
    3540:	strb	r2, [r5, #0]
    3542:	b.n	3370 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3544:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3546:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    354a:	adds	r2, #1
    354c:	strb	r2, [r5, #0]
    354e:	b.n	3508 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3550:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3552:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3556:	adds	r2, #1
    3558:	strb	r2, [r5, #0]
    355a:	b.n	338c <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    355c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    355e:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3562:	adds	r2, #1
    3564:	strb	r2, [r5, #0]
    3566:	b.n	34e2 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3568:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    356a:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    356e:	adds	r2, #1
    3570:	strb	r2, [r5, #0]
    3572:	b.n	3354 <usb_isr+0x700>
    3574:	.word	0x1fff19d4
    3578:	.word	0x1fff193c
    357c:	.word	0x1fff1994
    3580:	.word	0x1fff19a8
    3584:	.word	0x1fff18e4
    3588:	.word	0x1fff1e64
    358c:	.word	0x00004e20
    3590:	.word	0x1fff19c5
    3594:	.word	0x400720c4
    3598:	.word	0x400720c8
    359c:	.word	0x400720cc
    35a0:	.word	0x400720d0
    35a4:	.word	0x400720d4
    35a8:	.word	0x1fff0000
    35ac:	.word	0x00004e28
    35b0:	.word	0x1fff19c8
    35b4:	.word	0x400720c0
    35b8:	.word	0x00400088
    35bc:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    35c0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    35c2:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    35c6:	adds	r2, #1
    35c8:	strb	r2, [r5, #0]
    35ca:	b.n	3460 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    35cc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    35ce:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    35d2:	adds	r2, #1
    35d4:	strb	r2, [r5, #0]
    35d6:	b.n	33a4 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    35d8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    35da:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    35de:	adds	r2, #1
    35e0:	strb	r2, [r5, #0]
    35e2:	b.n	34b6 <usb_isr+0x862>
    35e4:	cmp	r0, #64	; 0x40
    35e6:	mov	ip, r0
    35e8:	it	cs
    35ea:	movcs.w	ip, #64	; 0x40
    35ee:	add.w	r3, r4, ip
    35f2:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    35f4:	movs	r3, #1
    35f6:	rsb	r0, ip, r0
    35fa:	mov.w	r8, ip, lsl #16
    35fe:	movs	r2, #0
    3600:	str	r3, [sp, #4]
    3602:	b.n	3034 <usb_isr+0x3e0>

00003604 <usb_init>:
}



void usb_init(void)
{
    3604:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3608:	ldr	r4, [pc, #156]	; (36a8 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    360a:	bl	3e44 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    360e:	movs	r2, #0
    3610:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3614:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3616:	str	r2, [r3, #0]
		table[i].addr = 0;
    3618:	str	r2, [r3, #4]
    361a:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    361c:	cmp	r3, r0
		table[i].desc = 0;
    361e:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3622:	bne.n	3616 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3624:	ldr	r0, [pc, #132]	; (36ac <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3626:	ldr	r2, [pc, #136]	; (36b0 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3628:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    362a:	ldr.w	lr, [pc, #156]	; 36c8 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    362e:	ldr	r6, [pc, #132]	; (36b4 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3630:	ldr	r5, [pc, #132]	; (36b8 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3632:	ldr	r7, [pc, #136]	; (36bc <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3634:	ldr.w	ip, [pc, #148]	; 36cc <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3638:	ldr.w	r8, [pc, #148]	; 36d0 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    363c:	orr.w	r3, r3, #262144	; 0x40000
    3640:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3642:	ldr	r3, [r2, #0]
    3644:	orr.w	r3, r3, #50331648	; 0x3000000
    3648:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    364a:	movs	r3, #3
    364c:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3650:	movs	r3, #160	; 0xa0
    3652:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3654:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3658:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    365c:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3660:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3662:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3664:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3668:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    366a:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    366c:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    366e:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3670:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3672:	ldr	r5, [pc, #76]	; (36c0 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3674:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3678:	ldr	r0, [pc, #72]	; (36c4 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    367a:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    367e:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3680:	movs	r3, #1
    3682:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3686:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    368a:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    368e:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3690:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3692:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3696:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3698:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    369a:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    369e:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    36a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36a6:	nop
    36a8:	.word	0x1fff0000
    36ac:	.word	0x40048034
    36b0:	.word	0x4000d800
    36b4:	.word	0x40072140
    36b8:	.word	0x4007209c
    36bc:	.word	0x400720b0
    36c0:	.word	0xe000e435
    36c4:	.word	0xe000e104
    36c8:	.word	0x40072144
    36cc:	.word	0x40072080
    36d0:	.word	0x40072088

000036d4 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    36d4:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    36d6:	ldr	r4, [pc, #176]	; (3788 <yield+0xb4>)
    36d8:	ldrb	r3, [r4, #0]
    36da:	cbz	r3, 36de <yield+0xa>
    36dc:	pop	{r3, r4, r5, pc}
	running = 1;
    36de:	movs	r3, #1
    36e0:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    36e2:	bl	1c00 <usb_serial_available>
	if (Serial.available()) serialEvent();
    36e6:	cmp	r0, #0
    36e8:	bne.n	3770 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    36ea:	bl	3c14 <serial_available>
	if (Serial1.available()) serialEvent1();
    36ee:	cmp	r0, #0
    36f0:	bne.n	376a <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    36f2:	bl	38fc <serial2_available>
	if (Serial2.available()) serialEvent2();
    36f6:	cmp	r0, #0
    36f8:	bne.n	3764 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    36fa:	bl	3f14 <serial3_available>
	if (Serial3.available()) serialEvent3();
    36fe:	cbnz	r0, 375e <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3700:	bl	3a28 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3704:	cbnz	r0, 3758 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    3706:	bl	3804 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    370a:	cbnz	r0, 3752 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    370c:	bl	3d40 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3710:	cbnz	r0, 374c <yield+0x78>
#endif
	running = 0;
    3712:	movs	r3, #0
    3714:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3716:	mrs	r3, IPSR
		if (ipsr != 0) return;
    371a:	cmp	r3, #0
    371c:	bne.n	36dc <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    371e:	mrs	r1, PRIMASK
		__disable_irq();
    3722:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3724:	ldr	r3, [pc, #100]	; (378c <yield+0xb8>)
    3726:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3728:	cbz	r0, 3776 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    372a:	ldr	r4, [pc, #100]	; (3790 <yield+0xbc>)
    372c:	ldrb	r2, [r4, #0]
    372e:	cbnz	r2, 3776 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3730:	ldr	r5, [r0, #20]
    3732:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3734:	movs	r3, #1
    3736:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3738:	cbz	r5, 377e <yield+0xaa>
			firstYield->_prev = nullptr;
    373a:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    373c:	cbnz	r1, 3740 <yield+0x6c>
    373e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3740:	movs	r5, #0
    3742:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3744:	ldr	r3, [r0, #8]
    3746:	blx	r3
		runningFromYield = false;
    3748:	strb	r5, [r4, #0]
    374a:	b.n	36dc <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    374c:	bl	3800 <serialEvent6()>
    3750:	b.n	3712 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3752:	bl	3798 <serialEvent5()>
    3756:	b.n	370c <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3758:	bl	37ec <serialEvent4()>
    375c:	b.n	3706 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    375e:	bl	4010 <serialEvent3()>
    3762:	b.n	3700 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    3764:	bl	37e8 <serialEvent2()>
    3768:	b.n	36fa <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    376a:	bl	400c <serialEvent1()>
    376e:	b.n	36f2 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    3770:	bl	37c4 <serialEvent()>
    3774:	b.n	36ea <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3776:	cmp	r1, #0
    3778:	bne.n	36dc <yield+0x8>
    377a:	cpsie	i
    377c:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    377e:	ldr	r3, [pc, #20]	; (3794 <yield+0xc0>)
    3780:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3782:	cmp	r1, #0
    3784:	bne.n	3740 <yield+0x6c>
    3786:	b.n	373e <yield+0x6a>
    3788:	.word	0x1fff19d9
    378c:	.word	0x1fff1cec
    3790:	.word	0x1fff1cf0
    3794:	.word	0x1fff1ce8

00003798 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    3798:	bx	lr
    379a:	nop

0000379c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    379c:	b.w	1c1c <usb_serial_flush_input>

000037a0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    37a0:	b.w	1bd0 <usb_serial_peekchar>

000037a4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    37a4:	b.w	1b88 <usb_serial_getchar>

000037a8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    37a8:	b.w	1c00 <usb_serial_available>

000037ac <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    37ac:	b.w	1dbc <usb_serial_flush_output>

000037b0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    37b0:	b.w	1d74 <usb_serial_write_buffer_free>

000037b4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    37b4:	mov	r0, r1
    37b6:	mov	r1, r2
    37b8:	b.w	1c54 <usb_serial_write>

000037bc <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    37bc:	mov	r0, r1
    37be:	b.w	1d5c <usb_serial_putchar>
    37c2:	nop

000037c4 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    37c4:	bx	lr
    37c6:	nop

000037c8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    37c8:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    37ca:	ldr	r2, [pc, #24]	; (37e4 <Print::println()+0x1c>)
	return write(buf, 2);
    37cc:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    37ce:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    37d0:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    37d2:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    37d4:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    37d6:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    37da:	movs	r2, #2
    37dc:	blx	r3
}
    37de:	add	sp, #12
    37e0:	ldr.w	pc, [sp], #4
    37e4:	.word	0x00004e1c

000037e8 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    37e8:	bx	lr
    37ea:	nop

000037ec <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    37ec:	bx	lr
    37ee:	nop

000037f0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    37f0:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    37f2:	bl	490 <setup>
	while (1) {
		loop();
    37f6:	bl	494 <loop>
		yield();
    37fa:	bl	36d4 <yield>
    37fe:	b.n	37f6 <main+0x6>

00003800 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3800:	bx	lr
    3802:	nop

00003804 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3804:	ldr	r2, [pc, #20]	; (381c <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3806:	ldr	r3, [pc, #24]	; (3820 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3808:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    380a:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    380c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    380e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3810:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3812:	it	cc
    3814:	addcc	r0, #64	; 0x40
    3816:	subs	r0, r0, r3
}
    3818:	bx	lr
    381a:	nop
    381c:	.word	0x1fff19e0
    3820:	.word	0x1fff19e1

00003824 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3824:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3826:	ldr	r3, [pc, #172]	; (38d4 <uart4_status_isr+0xb0>)
    3828:	ldrb	r2, [r3, #4]
    382a:	lsls	r4, r2, #26
    382c:	bpl.n	386e <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    382e:	ldr	r0, [pc, #168]	; (38d8 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3830:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3832:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3834:	ldr	r1, [pc, #164]	; (38dc <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3836:	adds	r3, #1
    3838:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    383a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    383c:	it	gt
    383e:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3840:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3842:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3844:	beq.n	384e <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    3846:	ldr	r4, [pc, #152]	; (38e0 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    3848:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    384a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    384c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    384e:	ldr	r2, [pc, #148]	; (38e4 <uart4_status_isr+0xc0>)
    3850:	ldr	r1, [r2, #0]
    3852:	cbz	r1, 386e <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3854:	ldr	r2, [pc, #144]	; (38e8 <uart4_status_isr+0xc4>)
    3856:	ldrb	r2, [r2, #0]
    3858:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    385a:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    385c:	itet	cc
    385e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3862:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3864:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3866:	cmp	r3, #39	; 0x27
    3868:	itt	gt
    386a:	movgt	r3, #1
    386c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    386e:	ldr	r2, [pc, #100]	; (38d4 <uart4_status_isr+0xb0>)
    3870:	ldrb	r3, [r2, #3]
    3872:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3874:	lsls	r0, r3, #24
    3876:	bmi.n	389c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3878:	lsls	r2, r3, #25
    387a:	bpl.n	3898 <uart4_status_isr+0x74>
    387c:	ldr	r3, [pc, #84]	; (38d4 <uart4_status_isr+0xb0>)
    387e:	ldrb	r3, [r3, #4]
    3880:	lsls	r3, r3, #25
    3882:	bpl.n	3898 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3884:	ldr	r3, [pc, #100]	; (38ec <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3886:	ldr	r1, [pc, #104]	; (38f0 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3888:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    388a:	movs	r2, #0
    388c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    388e:	cbz	r3, 3892 <uart4_status_isr+0x6e>
    3890:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    3892:	ldr	r3, [pc, #64]	; (38d4 <uart4_status_isr+0xb0>)
    3894:	movs	r2, #44	; 0x2c
    3896:	strb	r2, [r3, #3]
	}
}
    3898:	pop	{r4, r5}
    389a:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    389c:	ldrb	r1, [r2, #4]
    389e:	lsls	r1, r1, #24
    38a0:	bpl.n	3878 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    38a2:	ldr	r1, [pc, #80]	; (38f4 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    38a4:	ldr	r0, [pc, #64]	; (38e8 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    38a6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    38a8:	ldrb	r1, [r0, #0]
    38aa:	uxtb	r1, r1
		if (head == tail) {
    38ac:	cmp	r4, r1
    38ae:	beq.n	38cc <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    38b0:	adds	r2, r1, #1
    38b2:	cmp	r2, #39	; 0x27
    38b4:	itt	hi
    38b6:	movhi	r1, #0
    38b8:	movhi	r2, r1
			n = tx_buffer[tail];
    38ba:	ldr	r5, [pc, #60]	; (38f8 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    38bc:	ldr	r4, [pc, #20]	; (38d4 <uart4_status_isr+0xb0>)
    38be:	it	ls
    38c0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    38c2:	ldrb	r2, [r5, r2]
    38c4:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    38c6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    38c8:	strb	r1, [r0, #0]
    38ca:	b.n	3878 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    38cc:	movs	r1, #108	; 0x6c
    38ce:	strb	r1, [r2, #3]
    38d0:	b.n	3878 <uart4_status_isr+0x54>
    38d2:	nop
    38d4:	.word	0x400ea000
    38d8:	.word	0x1fff19e0
    38dc:	.word	0x1fff19e1
    38e0:	.word	0x1fff1a0c
    38e4:	.word	0x1fff19dc
    38e8:	.word	0x1fff1a4d
    38ec:	.word	0x1fff1a50
    38f0:	.word	0x1fff1a4c
    38f4:	.word	0x1fff1a54
    38f8:	.word	0x1fff19e4

000038fc <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38fc:	ldr	r2, [pc, #20]	; (3914 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    38fe:	ldr	r3, [pc, #24]	; (3918 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3900:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3902:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3904:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3906:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3908:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    390a:	it	cc
    390c:	addcc	r0, #64	; 0x40
    390e:	subs	r0, r0, r3
}
    3910:	bx	lr
    3912:	nop
    3914:	.word	0x1fff1ac8
    3918:	.word	0x1fff1a5d

0000391c <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    391c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    391e:	ldr	r3, [pc, #224]	; (3a00 <uart1_status_isr+0xe4>)
    3920:	ldrb	r2, [r3, #4]
    3922:	tst.w	r2, #48	; 0x30
    3926:	beq.n	3982 <uart1_status_isr+0x66>
		__disable_irq();
    3928:	cpsid	i
		avail = UART1_RCFIFO;
    392a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    392c:	and.w	r2, r1, #255	; 0xff
    3930:	cmp	r1, #0
    3932:	beq.n	39b0 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3934:	cpsie	i
			head = rx_buffer_head;
    3936:	ldr	r7, [pc, #204]	; (3a04 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3938:	ldr	r1, [pc, #204]	; (3a08 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    393a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    393c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    393e:	ldr	r6, [pc, #204]	; (3a0c <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3940:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3942:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3944:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3946:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3948:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    394a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    394c:	it	cs
    394e:	movcs	r3, #0
				if (newhead != tail) {
    3950:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3952:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3956:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3958:	itt	ne
    395a:	strbne	r1, [r6, r3]
    395c:	movne	r0, r3
				}
			} while (--avail > 0);
    395e:	ands.w	r2, r2, #255	; 0xff
    3962:	bne.n	3946 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3964:	ldr	r3, [pc, #168]	; (3a10 <uart1_status_isr+0xf4>)
    3966:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3968:	uxtb	r2, r0
    396a:	strb	r2, [r7, #0]
			if (rts_pin) {
    396c:	cbz	r3, 3982 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    396e:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3970:	itet	cc
    3972:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3976:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3978:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    397a:	cmp	r0, #39	; 0x27
    397c:	itt	gt
    397e:	movgt	r2, #1
    3980:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3982:	ldr	r1, [pc, #124]	; (3a00 <uart1_status_isr+0xe4>)
    3984:	ldrb	r2, [r1, #3]
    3986:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3988:	lsls	r5, r2, #24
    398a:	bmi.n	39ba <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    398c:	lsls	r2, r2, #25
    398e:	bpl.n	39ac <uart1_status_isr+0x90>
    3990:	ldr	r3, [pc, #108]	; (3a00 <uart1_status_isr+0xe4>)
    3992:	ldrb	r3, [r3, #4]
    3994:	lsls	r3, r3, #25
    3996:	bpl.n	39ac <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3998:	ldr	r3, [pc, #120]	; (3a14 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    399a:	ldr	r1, [pc, #124]	; (3a18 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    399c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    399e:	movs	r2, #0
    39a0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    39a2:	cbz	r3, 39a6 <uart1_status_isr+0x8a>
    39a4:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    39a6:	ldr	r3, [pc, #88]	; (3a00 <uart1_status_isr+0xe4>)
    39a8:	movs	r2, #60	; 0x3c
    39aa:	strb	r2, [r3, #3]
	}
}
    39ac:	pop	{r4, r5, r6, r7}
    39ae:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    39b0:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    39b2:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    39b4:	strb	r2, [r3, #17]
			__enable_irq();
    39b6:	cpsie	i
    39b8:	b.n	3982 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    39ba:	ldrb	r3, [r1, #4]
    39bc:	lsls	r4, r3, #24
    39be:	bpl.n	398c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    39c0:	ldr	r3, [pc, #88]	; (3a1c <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    39c2:	ldr	r6, [pc, #92]	; (3a20 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    39c4:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    39c6:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    39c8:	uxtb	r4, r4
		tail = tx_buffer_tail;
    39ca:	uxtb	r3, r3
		do {
			if (tail == head) break;
    39cc:	cmp	r4, r3
    39ce:	beq.n	39ee <uart1_status_isr+0xd2>
    39d0:	ldr	r5, [pc, #80]	; (3a24 <uart1_status_isr+0x108>)
    39d2:	b.n	39d8 <uart1_status_isr+0xbc>
    39d4:	cmp	r3, r4
    39d6:	beq.n	39ee <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    39d8:	adds	r3, #1
    39da:	cmp	r3, #40	; 0x28
    39dc:	it	cs
    39de:	movcs	r3, #0
			avail = UART1_S1;
    39e0:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    39e2:	ldrb	r0, [r5, r3]
    39e4:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    39e6:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    39e8:	ldrb	r0, [r1, #20]
    39ea:	cmp	r0, #7
    39ec:	bls.n	39d4 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    39ee:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    39f0:	ldr	r1, [pc, #12]	; (3a00 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    39f2:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    39f4:	ldrb	r3, [r1, #4]
    39f6:	lsls	r0, r3, #24
    39f8:	itt	mi
    39fa:	movmi	r3, #124	; 0x7c
    39fc:	strbmi	r3, [r1, #3]
    39fe:	b.n	398c <uart1_status_isr+0x70>
    3a00:	.word	0x4006b000
    3a04:	.word	0x1fff1ac8
    3a08:	.word	0x1fff1a5d
    3a0c:	.word	0x1fff1a88
    3a10:	.word	0x1fff1a58
    3a14:	.word	0x1fff1acc
    3a18:	.word	0x1fff1a5c
    3a1c:	.word	0x1fff1ad0
    3a20:	.word	0x1fff1ac9
    3a24:	.word	0x1fff1a60

00003a28 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a28:	ldr	r2, [pc, #20]	; (3a40 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3a2a:	ldr	r3, [pc, #24]	; (3a44 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a2c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3a2e:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a30:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3a32:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3a34:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3a36:	it	cc
    3a38:	addcc	r0, #64	; 0x40
    3a3a:	subs	r0, r0, r3
}
    3a3c:	bx	lr
    3a3e:	nop
    3a40:	.word	0x1fff1ad8
    3a44:	.word	0x1fff1ad9

00003a48 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3a48:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3a4a:	ldr	r3, [pc, #172]	; (3af8 <uart3_status_isr+0xb0>)
    3a4c:	ldrb	r2, [r3, #4]
    3a4e:	lsls	r4, r2, #26
    3a50:	bpl.n	3a92 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3a52:	ldr	r0, [pc, #168]	; (3afc <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3a54:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3a56:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a58:	ldr	r1, [pc, #164]	; (3b00 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3a5a:	adds	r3, #1
    3a5c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a5e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3a60:	it	gt
    3a62:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a64:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3a66:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a68:	beq.n	3a72 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3a6a:	ldr	r4, [pc, #152]	; (3b04 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3a6c:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3a6e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3a70:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3a72:	ldr	r2, [pc, #148]	; (3b08 <uart3_status_isr+0xc0>)
    3a74:	ldr	r1, [r2, #0]
    3a76:	cbz	r1, 3a92 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3a78:	ldr	r2, [pc, #144]	; (3b0c <uart3_status_isr+0xc4>)
    3a7a:	ldrb	r2, [r2, #0]
    3a7c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3a7e:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3a80:	itet	cc
    3a82:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3a86:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3a88:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3a8a:	cmp	r3, #39	; 0x27
    3a8c:	itt	gt
    3a8e:	movgt	r3, #1
    3a90:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3a92:	ldr	r2, [pc, #100]	; (3af8 <uart3_status_isr+0xb0>)
    3a94:	ldrb	r3, [r2, #3]
    3a96:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3a98:	lsls	r0, r3, #24
    3a9a:	bmi.n	3ac0 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3a9c:	lsls	r2, r3, #25
    3a9e:	bpl.n	3abc <uart3_status_isr+0x74>
    3aa0:	ldr	r3, [pc, #84]	; (3af8 <uart3_status_isr+0xb0>)
    3aa2:	ldrb	r3, [r3, #4]
    3aa4:	lsls	r3, r3, #25
    3aa6:	bpl.n	3abc <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3aa8:	ldr	r3, [pc, #100]	; (3b10 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3aaa:	ldr	r1, [pc, #104]	; (3b14 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3aac:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3aae:	movs	r2, #0
    3ab0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3ab2:	cbz	r3, 3ab6 <uart3_status_isr+0x6e>
    3ab4:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3ab6:	ldr	r3, [pc, #64]	; (3af8 <uart3_status_isr+0xb0>)
    3ab8:	movs	r2, #44	; 0x2c
    3aba:	strb	r2, [r3, #3]
	}
}
    3abc:	pop	{r4, r5}
    3abe:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3ac0:	ldrb	r1, [r2, #4]
    3ac2:	lsls	r1, r1, #24
    3ac4:	bpl.n	3a9c <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3ac6:	ldr	r1, [pc, #80]	; (3b18 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3ac8:	ldr	r0, [pc, #64]	; (3b0c <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3aca:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3acc:	ldrb	r1, [r0, #0]
    3ace:	uxtb	r1, r1
		if (head == tail) {
    3ad0:	cmp	r4, r1
    3ad2:	beq.n	3af0 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3ad4:	adds	r2, r1, #1
    3ad6:	cmp	r2, #39	; 0x27
    3ad8:	itt	hi
    3ada:	movhi	r1, #0
    3adc:	movhi	r2, r1
			n = tx_buffer[tail];
    3ade:	ldr	r5, [pc, #60]	; (3b1c <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3ae0:	ldr	r4, [pc, #20]	; (3af8 <uart3_status_isr+0xb0>)
    3ae2:	it	ls
    3ae4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3ae6:	ldrb	r2, [r5, r2]
    3ae8:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3aea:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3aec:	strb	r1, [r0, #0]
    3aee:	b.n	3a9c <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3af0:	movs	r1, #108	; 0x6c
    3af2:	strb	r1, [r2, #3]
    3af4:	b.n	3a9c <uart3_status_isr+0x54>
    3af6:	nop
    3af8:	.word	0x4006d000
    3afc:	.word	0x1fff1ad8
    3b00:	.word	0x1fff1ad9
    3b04:	.word	0x1fff1b04
    3b08:	.word	0x1fff1ad4
    3b0c:	.word	0x1fff1b45
    3b10:	.word	0x1fff1b48
    3b14:	.word	0x1fff1b44
    3b18:	.word	0x1fff1b4c
    3b1c:	.word	0x1fff1adc

00003b20 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3b20:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3b22:	ldr	r4, [pc, #64]	; (3b64 <fault_isr+0x44>)
    3b24:	b.n	3b38 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3b26:	ldr	r3, [r4, #0]
    3b28:	lsls	r1, r3, #21
    3b2a:	bmi.n	3b48 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3b2c:	ldr	r3, [r4, #0]
    3b2e:	lsls	r2, r3, #20
    3b30:	bmi.n	3b52 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3b32:	ldr	r3, [r4, #0]
    3b34:	lsls	r3, r3, #19
    3b36:	bmi.n	3b5c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3b38:	ldr	r3, [r4, #0]
    3b3a:	lsls	r0, r3, #13
    3b3c:	bpl.n	3b26 <fault_isr+0x6>
    3b3e:	bl	2c54 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3b42:	ldr	r3, [r4, #0]
    3b44:	lsls	r1, r3, #21
    3b46:	bpl.n	3b2c <fault_isr+0xc>
    3b48:	bl	3c34 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3b4c:	ldr	r3, [r4, #0]
    3b4e:	lsls	r2, r3, #20
    3b50:	bpl.n	3b32 <fault_isr+0x12>
    3b52:	bl	391c <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3b56:	ldr	r3, [r4, #0]
    3b58:	lsls	r3, r3, #19
    3b5a:	bpl.n	3b38 <fault_isr+0x18>
    3b5c:	bl	3f34 <uart2_status_isr>
    3b60:	b.n	3b38 <fault_isr+0x18>
    3b62:	nop
    3b64:	.word	0x40048034

00003b68 <unused_isr>:
	}
}

void unused_isr(void)
{
    3b68:	push	{r3, lr}
	fault_isr();
    3b6a:	bl	3b20 <fault_isr>
    3b6e:	nop

00003b70 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3b70:	ldr	r3, [pc, #4]	; (3b78 <startup_early_hook+0x8>)
    3b72:	movs	r2, #16
    3b74:	strh	r2, [r3, #0]
    3b76:	bx	lr
    3b78:	.word	0x40052000

00003b7c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3b7c:	bx	lr
    3b7e:	nop

00003b80 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3b80:	ldr	r1, [pc, #36]	; (3ba8 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3b82:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3b84:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3b86:	cbz	r0, 3b96 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3b88:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3b8a:	add	r0, r3
    3b8c:	sub.w	r2, r2, #8192	; 0x2000
    3b90:	cmp	r0, r2
    3b92:	bcs.n	3b9a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3b94:	str	r0, [r1, #0]
	}
	return prev;
    3b96:	mov	r0, r3
}
    3b98:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3b9a:	bl	4208 <__errno>
    3b9e:	movs	r3, #12
    3ba0:	str	r3, [r0, #0]
			return (void *)-1;
    3ba2:	mov.w	r0, #4294967295
    3ba6:	pop	{r3, pc}
    3ba8:	.word	0x1fff0c80

00003bac <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3bac:	ldr	r2, [pc, #32]	; (3bd0 <kinetis_hsrun_disable+0x24>)
    3bae:	ldrb	r3, [r2, #0]
    3bb0:	cmp	r3, #128	; 0x80
    3bb2:	beq.n	3bb8 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3bb4:	movs	r0, #0
}
    3bb6:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3bb8:	ldr	r1, [pc, #24]	; (3bd4 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3bba:	ldr	r3, [pc, #28]	; (3bd8 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3bbc:	ldr	r0, [pc, #28]	; (3bdc <kinetis_hsrun_disable+0x30>)
    3bbe:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3bc0:	movs	r1, #0
    3bc2:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3bc4:	ldrb	r3, [r2, #0]
    3bc6:	cmp	r3, #128	; 0x80
    3bc8:	beq.n	3bc4 <kinetis_hsrun_disable+0x18>
		return 1;
    3bca:	movs	r0, #1
    3bcc:	bx	lr
    3bce:	nop
    3bd0:	.word	0x4007e003
    3bd4:	.word	0x40048044
    3bd8:	.word	0x4007e001
    3bdc:	.word	0x22280000

00003be0 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3be0:	ldr	r2, [pc, #36]	; (3c08 <kinetis_hsrun_enable+0x28>)
    3be2:	ldrb	r3, [r2, #0]
    3be4:	cmp	r3, #1
    3be6:	beq.n	3bec <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3be8:	movs	r0, #0
}
    3bea:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3bec:	add.w	r3, r3, #1073741824	; 0x40000000
    3bf0:	add.w	r3, r3, #516096	; 0x7e000
    3bf4:	movs	r1, #96	; 0x60
    3bf6:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3bf8:	ldrb	r3, [r2, #0]
    3bfa:	cmp	r3, #128	; 0x80
    3bfc:	bne.n	3bf8 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3bfe:	ldr	r3, [pc, #12]	; (3c0c <kinetis_hsrun_enable+0x2c>)
    3c00:	ldr	r2, [pc, #12]	; (3c10 <kinetis_hsrun_enable+0x30>)
    3c02:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3c04:	movs	r0, #1
    3c06:	bx	lr
    3c08:	.word	0x4007e003
    3c0c:	.word	0x40048044
    3c10:	.word	0x02060000

00003c14 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c14:	ldr	r2, [pc, #20]	; (3c2c <serial_available+0x18>)
	tail = rx_buffer_tail;
    3c16:	ldr	r3, [pc, #24]	; (3c30 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c18:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3c1a:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c1c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3c1e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3c20:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3c22:	it	cc
    3c24:	addcc	r0, #64	; 0x40
    3c26:	subs	r0, r0, r3
}
    3c28:	bx	lr
    3c2a:	nop
    3c2c:	.word	0x1fff1b54
    3c30:	.word	0x1fff1b55

00003c34 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3c34:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3c36:	ldr	r3, [pc, #224]	; (3d18 <uart0_status_isr+0xe4>)
    3c38:	ldrb	r2, [r3, #4]
    3c3a:	tst.w	r2, #48	; 0x30
    3c3e:	beq.n	3c9a <uart0_status_isr+0x66>
		__disable_irq();
    3c40:	cpsid	i
		avail = UART0_RCFIFO;
    3c42:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3c44:	and.w	r2, r1, #255	; 0xff
    3c48:	cmp	r1, #0
    3c4a:	beq.n	3cc8 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3c4c:	cpsie	i
			head = rx_buffer_head;
    3c4e:	ldr	r7, [pc, #204]	; (3d1c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3c50:	ldr	r1, [pc, #204]	; (3d20 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3c52:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3c54:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3c56:	ldr	r6, [pc, #204]	; (3d24 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3c58:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3c5a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3c5c:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3c5e:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3c60:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3c62:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3c64:	it	cs
    3c66:	movcs	r3, #0
				if (newhead != tail) {
    3c68:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3c6a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3c6e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3c70:	itt	ne
    3c72:	strbne	r1, [r6, r3]
    3c74:	movne	r0, r3
				}
			} while (--avail > 0);
    3c76:	ands.w	r2, r2, #255	; 0xff
    3c7a:	bne.n	3c5e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3c7c:	ldr	r3, [pc, #168]	; (3d28 <uart0_status_isr+0xf4>)
    3c7e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3c80:	uxtb	r2, r0
    3c82:	strb	r2, [r7, #0]
			if (rts_pin) {
    3c84:	cbz	r3, 3c9a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3c86:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3c88:	itet	cc
    3c8a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3c8e:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3c90:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3c92:	cmp	r0, #39	; 0x27
    3c94:	itt	gt
    3c96:	movgt	r2, #1
    3c98:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3c9a:	ldr	r1, [pc, #124]	; (3d18 <uart0_status_isr+0xe4>)
    3c9c:	ldrb	r2, [r1, #3]
    3c9e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3ca0:	lsls	r5, r2, #24
    3ca2:	bmi.n	3cd2 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3ca4:	lsls	r2, r2, #25
    3ca6:	bpl.n	3cc4 <uart0_status_isr+0x90>
    3ca8:	ldr	r3, [pc, #108]	; (3d18 <uart0_status_isr+0xe4>)
    3caa:	ldrb	r3, [r3, #4]
    3cac:	lsls	r3, r3, #25
    3cae:	bpl.n	3cc4 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3cb0:	ldr	r3, [pc, #120]	; (3d2c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3cb2:	ldr	r1, [pc, #124]	; (3d30 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3cb4:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3cb6:	movs	r2, #0
    3cb8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3cba:	cbz	r3, 3cbe <uart0_status_isr+0x8a>
    3cbc:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3cbe:	ldr	r3, [pc, #88]	; (3d18 <uart0_status_isr+0xe4>)
    3cc0:	movs	r2, #60	; 0x3c
    3cc2:	strb	r2, [r3, #3]
	}
}
    3cc4:	pop	{r4, r5, r6, r7}
    3cc6:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3cc8:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3cca:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3ccc:	strb	r2, [r3, #17]
			__enable_irq();
    3cce:	cpsie	i
    3cd0:	b.n	3c9a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3cd2:	ldrb	r3, [r1, #4]
    3cd4:	lsls	r4, r3, #24
    3cd6:	bpl.n	3ca4 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3cd8:	ldr	r3, [pc, #88]	; (3d34 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3cda:	ldr	r6, [pc, #92]	; (3d38 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3cdc:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3cde:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3ce0:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3ce2:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3ce4:	cmp	r4, r3
    3ce6:	beq.n	3d06 <uart0_status_isr+0xd2>
    3ce8:	ldr	r5, [pc, #80]	; (3d3c <uart0_status_isr+0x108>)
    3cea:	b.n	3cf0 <uart0_status_isr+0xbc>
    3cec:	cmp	r3, r4
    3cee:	beq.n	3d06 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3cf0:	adds	r3, #1
    3cf2:	cmp	r3, #64	; 0x40
    3cf4:	it	cs
    3cf6:	movcs	r3, #0
			avail = UART0_S1;
    3cf8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3cfa:	ldrb	r0, [r5, r3]
    3cfc:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3cfe:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3d00:	ldrb	r0, [r1, #20]
    3d02:	cmp	r0, #7
    3d04:	bls.n	3cec <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3d06:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3d08:	ldr	r1, [pc, #12]	; (3d18 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3d0a:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3d0c:	ldrb	r3, [r1, #4]
    3d0e:	lsls	r0, r3, #24
    3d10:	itt	mi
    3d12:	movmi	r3, #124	; 0x7c
    3d14:	strbmi	r3, [r1, #3]
    3d16:	b.n	3ca4 <uart0_status_isr+0x70>
    3d18:	.word	0x4006a000
    3d1c:	.word	0x1fff1b54
    3d20:	.word	0x1fff1b55
    3d24:	.word	0x1fff1b98
    3d28:	.word	0x1fff1b50
    3d2c:	.word	0x1fff1bdc
    3d30:	.word	0x1fff1bd8
    3d34:	.word	0x1fff1be0
    3d38:	.word	0x1fff1bd9
    3d3c:	.word	0x1fff1b58

00003d40 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d40:	ldr	r2, [pc, #20]	; (3d58 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3d42:	ldr	r3, [pc, #24]	; (3d5c <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d44:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3d46:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d48:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3d4a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3d4c:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3d4e:	it	cc
    3d50:	addcc	r0, #64	; 0x40
    3d52:	subs	r0, r0, r3
}
    3d54:	bx	lr
    3d56:	nop
    3d58:	.word	0x1fff1be8
    3d5c:	.word	0x1fff1be9

00003d60 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3d60:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3d62:	ldr	r3, [pc, #176]	; (3e14 <lpuart0_status_isr+0xb4>)
    3d64:	ldr	r2, [r3, #4]
    3d66:	lsls	r4, r2, #10
    3d68:	bpl.n	3daa <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3d6a:	ldr	r0, [pc, #172]	; (3e18 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3d6c:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3d6e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d70:	ldr	r1, [pc, #168]	; (3e1c <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3d72:	adds	r3, #1
    3d74:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d76:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3d78:	it	gt
    3d7a:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d7c:	cmp	r3, r1
    3d7e:	beq.n	3d8a <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3d80:	ldr	r4, [pc, #156]	; (3e20 <lpuart0_status_isr+0xc0>)
    3d82:	uxtb	r2, r2
			rx_buffer_head = head;
    3d84:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3d86:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3d88:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3d8a:	ldr	r2, [pc, #152]	; (3e24 <lpuart0_status_isr+0xc4>)
    3d8c:	ldr	r1, [r2, #0]
    3d8e:	cbz	r1, 3daa <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3d90:	ldr	r2, [pc, #148]	; (3e28 <lpuart0_status_isr+0xc8>)
    3d92:	ldrb	r2, [r2, #0]
    3d94:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3d96:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3d98:	itet	cc
    3d9a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3d9e:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3da0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3da2:	cmp	r3, #39	; 0x27
    3da4:	itt	gt
    3da6:	movgt	r3, #1
    3da8:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3daa:	ldr	r2, [pc, #104]	; (3e14 <lpuart0_status_isr+0xb4>)
    3dac:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3dae:	lsls	r0, r3, #8
    3db0:	bpl.n	3db8 <lpuart0_status_isr+0x58>
    3db2:	ldr	r2, [r2, #4]
    3db4:	lsls	r1, r2, #8
    3db6:	bmi.n	3ddc <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3db8:	lsls	r2, r3, #9
    3dba:	bpl.n	3dd8 <lpuart0_status_isr+0x78>
    3dbc:	ldr	r3, [pc, #84]	; (3e14 <lpuart0_status_isr+0xb4>)
    3dbe:	ldr	r3, [r3, #4]
    3dc0:	lsls	r3, r3, #9
    3dc2:	bpl.n	3dd8 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3dc4:	ldr	r3, [pc, #100]	; (3e2c <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3dc6:	ldr	r1, [pc, #104]	; (3e30 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3dc8:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3dca:	movs	r2, #0
    3dcc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3dce:	cbz	r3, 3dd2 <lpuart0_status_isr+0x72>
    3dd0:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3dd2:	ldr	r3, [pc, #96]	; (3e34 <lpuart0_status_isr+0xd4>)
    3dd4:	movs	r2, #0
    3dd6:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3dd8:	pop	{r4, r5}
    3dda:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3ddc:	ldr	r2, [pc, #88]	; (3e38 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3dde:	ldr	r1, [pc, #72]	; (3e28 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3de0:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3de2:	ldrb	r2, [r1, #0]
    3de4:	uxtb	r2, r2
		if (head == tail) {
    3de6:	cmp	r0, r2
    3de8:	beq.n	3e06 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3dea:	adds	r2, #1
    3dec:	cmp	r2, #39	; 0x27
    3dee:	itt	hi
    3df0:	movhi	r0, #0
    3df2:	movhi	r2, r0
			n = tx_buffer[tail];
    3df4:	ldr	r5, [pc, #68]	; (3e3c <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3df6:	ldr	r4, [pc, #28]	; (3e14 <lpuart0_status_isr+0xb4>)
    3df8:	it	ls
    3dfa:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3dfc:	ldrb	r2, [r5, r2]
    3dfe:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3e00:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3e02:	strb	r0, [r1, #0]
    3e04:	b.n	3db8 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e06:	ldr	r0, [pc, #56]	; (3e40 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e08:	ldr	r2, [pc, #40]	; (3e34 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e0a:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e0c:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3e0e:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3e10:	str	r1, [r2, #0]
    3e12:	b.n	3db8 <lpuart0_status_isr+0x58>
    3e14:	.word	0x400c4000
    3e18:	.word	0x1fff1be8
    3e1c:	.word	0x1fff1be9
    3e20:	.word	0x1fff1c14
    3e24:	.word	0x1fff1be4
    3e28:	.word	0x1fff1c55
    3e2c:	.word	0x1fff1c58
    3e30:	.word	0x1fff1c54
    3e34:	.word	0x43880158
    3e38:	.word	0x1fff1c5c
    3e3c:	.word	0x1fff1bec
    3e40:	.word	0x4388015c

00003e44 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3e44:	push	{r4, lr}
    3e46:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3e48:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3e4a:	bl	3bac <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3e4e:	ldr	r2, [pc, #96]	; (3eb0 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3e50:	ldr	r3, [pc, #96]	; (3eb4 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3e52:	ldr	r1, [pc, #100]	; (3eb8 <usb_init_serialnumber+0x74>)
    3e54:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3e56:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3e58:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3e5a:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3e5c:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3e5e:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3e60:	ldrb	r3, [r2, #0]
    3e62:	lsls	r3, r3, #24
    3e64:	bpl.n	3e60 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3e66:	ldr	r3, [pc, #84]	; (3ebc <usb_init_serialnumber+0x78>)
    3e68:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3e6a:	bl	3be0 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3e6e:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3e70:	ldr	r3, [pc, #76]	; (3ec0 <usb_init_serialnumber+0x7c>)
    3e72:	cmp	r4, r3
    3e74:	itt	ls
    3e76:	addls.w	r4, r4, r4, lsl #2
    3e7a:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3e7c:	mov	r0, r4
    3e7e:	ldr	r4, [pc, #68]	; (3ec4 <usb_init_serialnumber+0x80>)
    3e80:	add	r1, sp, #4
    3e82:	movs	r2, #10
    3e84:	bl	3ec8 <ultoa>
    3e88:	add	r1, sp, #4
    3e8a:	mov	r0, r4
	for (i=0; i<10; i++) {
    3e8c:	movs	r3, #0
		char c = buf[i];
    3e8e:	ldrb.w	r2, [r1], #1
    3e92:	adds	r3, #1
		if (!c) break;
    3e94:	cbz	r2, 3ea6 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3e96:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3e98:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3e9c:	bne.n	3e8e <usb_init_serialnumber+0x4a>
    3e9e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3ea0:	strb	r3, [r4, #0]
}
    3ea2:	add	sp, #16
    3ea4:	pop	{r4, pc}
    3ea6:	lsls	r3, r3, #1
    3ea8:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3eaa:	strb	r3, [r4, #0]
}
    3eac:	add	sp, #16
    3eae:	pop	{r4, pc}
    3eb0:	.word	0x40020004
    3eb4:	.word	0x40020000
    3eb8:	.word	0x41070000
    3ebc:	.word	0x4002000c
    3ec0:	.word	0x0098967f
    3ec4:	.word	0x1fff0d64

00003ec8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3ec8:	push	{r4, r5, r6, r7}
    3eca:	subs	r5, r1, #1
    3ecc:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3ece:	movs	r4, #0
    3ed0:	b.n	3ed4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3ed2:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3ed4:	udiv	r3, r0, r2
    3ed8:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3edc:	cmp	r0, #9
    3ede:	add.w	r7, r0, #48	; 0x30
    3ee2:	itet	hi
    3ee4:	addhi	r0, #55	; 0x37
    3ee6:	uxtbls	r0, r7
    3ee8:	uxtbhi	r0, r0
    3eea:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3eee:	mov	r0, r3
    3ef0:	cmp	r3, #0
    3ef2:	bne.n	3ed2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3ef4:	adds	r2, r1, r4
    3ef6:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3ef8:	cbz	r4, 3f0e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3efa:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3efc:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3f00:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f02:	adds	r3, #1
    3f04:	subs	r0, r4, r3
    3f06:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3f08:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3f0c:	blt.n	3efa <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3f0e:	mov	r0, r1
    3f10:	pop	{r4, r5, r6, r7}
    3f12:	bx	lr

00003f14 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f14:	ldr	r2, [pc, #20]	; (3f2c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3f16:	ldr	r3, [pc, #24]	; (3f30 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f18:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3f1a:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f1c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3f1e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3f20:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3f22:	it	cc
    3f24:	addcc	r0, #64	; 0x40
    3f26:	subs	r0, r0, r3
}
    3f28:	bx	lr
    3f2a:	nop
    3f2c:	.word	0x1fff1c64
    3f30:	.word	0x1fff1c65

00003f34 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3f34:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3f36:	ldr	r3, [pc, #172]	; (3fe4 <uart2_status_isr+0xb0>)
    3f38:	ldrb	r2, [r3, #4]
    3f3a:	lsls	r4, r2, #26
    3f3c:	bpl.n	3f7e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3f3e:	ldr	r0, [pc, #168]	; (3fe8 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3f40:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3f42:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f44:	ldr	r1, [pc, #164]	; (3fec <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3f46:	adds	r3, #1
    3f48:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f4a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3f4c:	it	gt
    3f4e:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f50:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3f52:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f54:	beq.n	3f5e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3f56:	ldr	r4, [pc, #152]	; (3ff0 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3f58:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3f5a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3f5c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3f5e:	ldr	r2, [pc, #148]	; (3ff4 <uart2_status_isr+0xc0>)
    3f60:	ldr	r1, [r2, #0]
    3f62:	cbz	r1, 3f7e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3f64:	ldr	r2, [pc, #144]	; (3ff8 <uart2_status_isr+0xc4>)
    3f66:	ldrb	r2, [r2, #0]
    3f68:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3f6a:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3f6c:	itet	cc
    3f6e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3f72:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3f74:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3f76:	cmp	r3, #39	; 0x27
    3f78:	itt	gt
    3f7a:	movgt	r3, #1
    3f7c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3f7e:	ldr	r2, [pc, #100]	; (3fe4 <uart2_status_isr+0xb0>)
    3f80:	ldrb	r3, [r2, #3]
    3f82:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3f84:	lsls	r0, r3, #24
    3f86:	bmi.n	3fac <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3f88:	lsls	r2, r3, #25
    3f8a:	bpl.n	3fa8 <uart2_status_isr+0x74>
    3f8c:	ldr	r3, [pc, #84]	; (3fe4 <uart2_status_isr+0xb0>)
    3f8e:	ldrb	r3, [r3, #4]
    3f90:	lsls	r3, r3, #25
    3f92:	bpl.n	3fa8 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3f94:	ldr	r3, [pc, #100]	; (3ffc <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f96:	ldr	r1, [pc, #104]	; (4000 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3f98:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f9a:	movs	r2, #0
    3f9c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3f9e:	cbz	r3, 3fa2 <uart2_status_isr+0x6e>
    3fa0:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3fa2:	ldr	r3, [pc, #64]	; (3fe4 <uart2_status_isr+0xb0>)
    3fa4:	movs	r2, #44	; 0x2c
    3fa6:	strb	r2, [r3, #3]
	}
}
    3fa8:	pop	{r4, r5}
    3faa:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3fac:	ldrb	r1, [r2, #4]
    3fae:	lsls	r1, r1, #24
    3fb0:	bpl.n	3f88 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3fb2:	ldr	r1, [pc, #80]	; (4004 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3fb4:	ldr	r0, [pc, #64]	; (3ff8 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3fb6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3fb8:	ldrb	r1, [r0, #0]
    3fba:	uxtb	r1, r1
		if (head == tail) {
    3fbc:	cmp	r4, r1
    3fbe:	beq.n	3fdc <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3fc0:	adds	r2, r1, #1
    3fc2:	cmp	r2, #39	; 0x27
    3fc4:	itt	hi
    3fc6:	movhi	r1, #0
    3fc8:	movhi	r2, r1
			n = tx_buffer[tail];
    3fca:	ldr	r5, [pc, #60]	; (4008 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3fcc:	ldr	r4, [pc, #20]	; (3fe4 <uart2_status_isr+0xb0>)
    3fce:	it	ls
    3fd0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3fd2:	ldrb	r2, [r5, r2]
    3fd4:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3fd6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3fd8:	strb	r1, [r0, #0]
    3fda:	b.n	3f88 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3fdc:	movs	r1, #108	; 0x6c
    3fde:	strb	r1, [r2, #3]
    3fe0:	b.n	3f88 <uart2_status_isr+0x54>
    3fe2:	nop
    3fe4:	.word	0x4006c000
    3fe8:	.word	0x1fff1c64
    3fec:	.word	0x1fff1c65
    3ff0:	.word	0x1fff1c90
    3ff4:	.word	0x1fff1c60
    3ff8:	.word	0x1fff1cd1
    3ffc:	.word	0x1fff1cd4
    4000:	.word	0x1fff1cd0
    4004:	.word	0x1fff1cd8
    4008:	.word	0x1fff1c68

0000400c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    400c:	bx	lr
    400e:	nop

00004010 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4010:	bx	lr
    4012:	nop

00004014 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4014:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4016:	mrs	r2, PRIMASK
		__disable_irq();
    401a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    401c:	ldrb	r3, [r0, #29]
    401e:	cbnz	r3, 402e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4020:	ldrb	r1, [r0, #28]
    4022:	cmp	r1, #1
    4024:	beq.n	4038 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4026:	cmp	r1, #3
    4028:	beq.n	404c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    402a:	movs	r3, #1
    402c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    402e:	cbnz	r2, 4032 <EventResponder::triggerEventNotImmediate()+0x1e>
    4030:	cpsie	i
	}
	enableInterrupts(irq);
}
    4032:	ldr.w	r4, [sp], #4
    4036:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4038:	ldr	r4, [pc, #68]	; (4080 <EventResponder::triggerEventNotImmediate()+0x6c>)
    403a:	ldr	r1, [r4, #0]
    403c:	cbz	r1, 4068 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    403e:	ldr	r1, [pc, #68]	; (4084 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4040:	str	r3, [r0, #20]
				_prev = lastYield;
    4042:	ldr	r3, [r1, #0]
    4044:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4046:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4048:	str	r0, [r3, #20]
    404a:	b.n	402a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    404c:	ldr	r4, [pc, #56]	; (4088 <EventResponder::triggerEventNotImmediate()+0x74>)
    404e:	ldr	r1, [r4, #0]
    4050:	cbz	r1, 4074 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4052:	ldr	r1, [pc, #56]	; (408c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4054:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4056:	ldr	r3, [r1, #0]
    4058:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    405a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    405c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    405e:	ldr	r3, [pc, #48]	; (4090 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4060:	mov.w	r1, #268435456	; 0x10000000
    4064:	str	r1, [r3, #0]
    4066:	b.n	402a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4068:	ldr	r3, [pc, #24]	; (4084 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    406a:	str	r1, [r0, #20]
				_prev = nullptr;
    406c:	str	r1, [r0, #24]
				firstYield = this;
    406e:	str	r0, [r4, #0]
				lastYield = this;
    4070:	str	r0, [r3, #0]
    4072:	b.n	402a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4074:	ldr	r3, [pc, #20]	; (408c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4076:	str	r1, [r0, #20]
				_prev = nullptr;
    4078:	str	r1, [r0, #24]
				firstInterrupt = this;
    407a:	str	r0, [r4, #0]
				lastInterrupt = this;
    407c:	str	r0, [r3, #0]
    407e:	b.n	405e <EventResponder::triggerEventNotImmediate()+0x4a>
    4080:	.word	0x1fff1cec
    4084:	.word	0x1fff1ce8
    4088:	.word	0x1fff1cdc
    408c:	.word	0x1fff1ce0
    4090:	.word	0xe000ed04

00004094 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4094:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4096:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4098:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    409a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    409c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    409e:	beq.n	40a8 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    40a0:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    40a4:	b.w	4014 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    40a8:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    40aa:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    40ae:	bx	r3

000040b0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    40b0:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    40b2:	mrs	r2, PRIMASK
		__disable_irq();
    40b6:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    40b8:	ldr	r4, [pc, #48]	; (40ec <EventResponder::runFromInterrupt()+0x3c>)
    40ba:	ldr	r0, [r4, #0]
		if (first) {
    40bc:	cbz	r0, 40e0 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    40be:	ldr	r6, [pc, #48]	; (40f0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    40c0:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    40c2:	ldr	r3, [r0, #20]
    40c4:	str	r3, [r4, #0]
			if (firstInterrupt) {
    40c6:	cbz	r3, 40e6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    40c8:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    40ca:	cbnz	r2, 40ce <EventResponder::runFromInterrupt()+0x1e>
    40cc:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    40ce:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    40d0:	ldr	r3, [r0, #8]
    40d2:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    40d4:	mrs	r2, PRIMASK
		__disable_irq();
    40d8:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    40da:	ldr	r0, [r4, #0]
		if (first) {
    40dc:	cmp	r0, #0
    40de:	bne.n	40c2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    40e0:	cbnz	r2, 40e4 <EventResponder::runFromInterrupt()+0x34>
    40e2:	cpsie	i
    40e4:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    40e6:	str	r3, [r6, #0]
    40e8:	b.n	40ca <EventResponder::runFromInterrupt()+0x1a>
    40ea:	nop
    40ec:	.word	0x1fff1cdc
    40f0:	.word	0x1fff1ce0

000040f4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    40f4:	b.w	40b0 <EventResponder::runFromInterrupt()>

000040f8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    40f8:	ldr	r2, [pc, #96]	; (415c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    40fa:	push	{r4, r5}
	if (listActive == nullptr) {
    40fc:	ldr	r4, [r2, #0]
    40fe:	cmp	r4, #0
    4100:	beq.n	4152 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4102:	ldr	r3, [r0, #0]
    4104:	ldr	r1, [r4, #0]
    4106:	cmp	r3, r1
    4108:	bcs.n	4128 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    410a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    410c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    410e:	str	r4, [r0, #8]
		_prev = nullptr;
    4110:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4112:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4114:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4116:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4118:	movs	r3, #2
    411a:	strb	r3, [r0, #20]
}
    411c:	pop	{r4, r5}
    411e:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4120:	ldr	r1, [r2, #0]
    4122:	cmp	r3, r1
    4124:	mov	r4, r2
    4126:	bcc.n	413a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4128:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    412a:	subs	r3, r3, r1
    412c:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    412e:	cmp	r2, #0
    4130:	bne.n	4120 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4132:	str	r2, [r0, #8]
		_prev = timer;
    4134:	str	r4, [r0, #12]
		timer->_next = this;
    4136:	str	r0, [r4, #8]
    4138:	b.n	4118 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    413a:	ldr	r2, [r2, #12]
    413c:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    413e:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4140:	str	r0, [r4, #12]
				_prev->_next = this;
    4142:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4144:	subs	r3, r1, r3
				_state = TimerActive;
    4146:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4148:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    414a:	str	r3, [r4, #0]
				_state = TimerActive;
    414c:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    414e:	pop	{r4, r5}
    4150:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4152:	str	r4, [r0, #8]
		_prev = nullptr;
    4154:	str	r4, [r0, #12]
		listActive = this;
    4156:	str	r0, [r2, #0]
    4158:	b.n	4118 <MillisTimer::addToActiveList()+0x20>
    415a:	nop
    415c:	.word	0x1fff1ce4

00004160 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4160:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4162:	ldr	r6, [pc, #136]	; (41ec <MillisTimer::runFromTimer()+0x8c>)
    4164:	ldr	r4, [r6, #0]
	while (timer) {
    4166:	cbz	r4, 41b4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4168:	ldr	r3, [r4, #0]
    416a:	cmp	r3, #0
    416c:	bne.n	41e4 <MillisTimer::runFromTimer()+0x84>
    416e:	ldr	r7, [pc, #128]	; (41f0 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4170:	mov	r5, r3
    4172:	b.n	417e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4174:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4176:	cbz	r4, 41b4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4178:	ldr	r3, [r4, #0]
    417a:	cmp	r3, #0
    417c:	bne.n	41e4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    417e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4180:	cbz	r3, 4184 <MillisTimer::runFromTimer()+0x24>
    4182:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4184:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4186:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4188:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    418a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    418c:	ldr	r3, [r3, #0]
    418e:	cmp	r3, r7
    4190:	bne.n	41d6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4192:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4194:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4196:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4198:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    419a:	beq.n	41de <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    419c:	bl	4014 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    41a0:	ldr	r3, [r4, #4]
    41a2:	cmp	r3, #0
    41a4:	beq.n	4174 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    41a6:	str	r3, [r4, #0]
				timer->addToActiveList();
    41a8:	mov	r0, r4
    41aa:	bl	40f8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    41ae:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    41b0:	cmp	r4, #0
    41b2:	bne.n	4178 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    41b4:	mrs	r3, PRIMASK
		__disable_irq();
    41b8:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    41ba:	ldr	r2, [pc, #56]	; (41f4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    41bc:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    41be:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    41c0:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    41c2:	cbnz	r3, 41c6 <MillisTimer::runFromTimer()+0x66>
    41c4:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    41c6:	cbz	r0, 41d4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    41c8:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    41ca:	bl	40f8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    41ce:	mov	r0, r4
    41d0:	cmp	r0, #0
    41d2:	bne.n	41c8 <MillisTimer::runFromTimer()+0x68>
    41d4:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    41d6:	mov	r2, r4
    41d8:	movs	r1, #0
    41da:	blx	r3
    41dc:	b.n	41a0 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    41de:	ldr	r3, [r0, #8]
    41e0:	blx	r3
    41e2:	b.n	41a0 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    41e4:	subs	r3, #1
    41e6:	str	r3, [r4, #0]
			break;
    41e8:	b.n	41b4 <MillisTimer::runFromTimer()+0x54>
    41ea:	nop
    41ec:	.word	0x1fff1ce4
    41f0:	.word	0x00004095
    41f4:	.word	0x1fff1cf4

000041f8 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    41f8:	ldr	r2, [pc, #8]	; (4204 <systick_isr+0xc>)
    41fa:	ldr	r3, [r2, #0]
    41fc:	adds	r3, #1
    41fe:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4200:	b.w	4160 <MillisTimer::runFromTimer()>
    4204:	.word	0x1fff187c

00004208 <__errno>:
    4208:	ldr	r3, [pc, #4]	; (4210 <__errno+0x8>)
    420a:	ldr	r0, [r3, #0]
    420c:	bx	lr
    420e:	nop
    4210:	.word	0x1fff11a8

00004214 <__libc_init_array>:
    4214:	push	{r4, r5, r6, lr}
    4216:	ldr	r6, [pc, #60]	; (4254 <__libc_init_array+0x40>)
    4218:	ldr	r5, [pc, #60]	; (4258 <__libc_init_array+0x44>)
    421a:	subs	r6, r6, r5
    421c:	asrs	r6, r6, #2
    421e:	it	ne
    4220:	movne	r4, #0
    4222:	beq.n	4230 <__libc_init_array+0x1c>
    4224:	adds	r4, #1
    4226:	ldr.w	r3, [r5], #4
    422a:	blx	r3
    422c:	cmp	r6, r4
    422e:	bne.n	4224 <__libc_init_array+0x10>
    4230:	ldr	r6, [pc, #40]	; (425c <__libc_init_array+0x48>)
    4232:	ldr	r5, [pc, #44]	; (4260 <__libc_init_array+0x4c>)
    4234:	subs	r6, r6, r5
    4236:	bl	4e80 <_init>
    423a:	asrs	r6, r6, #2
    423c:	it	ne
    423e:	movne	r4, #0
    4240:	beq.n	4250 <__libc_init_array+0x3c>
    4242:	adds	r4, #1
    4244:	ldr.w	r3, [r5], #4
    4248:	blx	r3
    424a:	cmp	r6, r4
    424c:	bne.n	4242 <__libc_init_array+0x2e>
    424e:	pop	{r4, r5, r6, pc}
    4250:	pop	{r4, r5, r6, pc}
    4252:	nop
    4254:	.word	0x00004e8c
    4258:	.word	0x00004e8c
    425c:	.word	0x00004e98
    4260:	.word	0x00004e8c

00004264 <malloc>:
    4264:	ldr	r3, [pc, #8]	; (4270 <malloc+0xc>)
    4266:	mov	r1, r0
    4268:	ldr	r0, [r3, #0]
    426a:	b.w	4274 <_malloc_r>
    426e:	nop
    4270:	.word	0x1fff11a8

00004274 <_malloc_r>:
    4274:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4278:	add.w	r5, r1, #11
    427c:	cmp	r5, #22
    427e:	sub	sp, #12
    4280:	mov	r6, r0
    4282:	bls.w	43c4 <_malloc_r+0x150>
    4286:	bics.w	r5, r5, #7
    428a:	bmi.w	440c <_malloc_r+0x198>
    428e:	cmp	r1, r5
    4290:	bhi.w	440c <_malloc_r+0x198>
    4294:	bl	47e4 <__malloc_lock>
    4298:	cmp.w	r5, #504	; 0x1f8
    429c:	bcc.w	47d8 <_malloc_r+0x564>
    42a0:	lsrs	r3, r5, #9
    42a2:	beq.w	441a <_malloc_r+0x1a6>
    42a6:	cmp	r3, #4
    42a8:	bhi.w	45b2 <_malloc_r+0x33e>
    42ac:	lsrs	r0, r5, #6
    42ae:	add.w	lr, r0, #57	; 0x39
    42b2:	mov.w	r3, lr, lsl #1
    42b6:	adds	r0, #56	; 0x38
    42b8:	ldr	r7, [pc, #784]	; (45cc <_malloc_r+0x358>)
    42ba:	add.w	r3, r7, r3, lsl #2
    42be:	sub.w	r1, r3, #8
    42c2:	ldr	r4, [r3, #4]
    42c4:	cmp	r1, r4
    42c6:	bne.n	42d8 <_malloc_r+0x64>
    42c8:	b.n	4424 <_malloc_r+0x1b0>
    42ca:	cmp	r2, #0
    42cc:	bge.w	4428 <_malloc_r+0x1b4>
    42d0:	ldr	r4, [r4, #12]
    42d2:	cmp	r1, r4
    42d4:	beq.w	4424 <_malloc_r+0x1b0>
    42d8:	ldr	r3, [r4, #4]
    42da:	bic.w	r3, r3, #3
    42de:	subs	r2, r3, r5
    42e0:	cmp	r2, #15
    42e2:	ble.n	42ca <_malloc_r+0x56>
    42e4:	ldr	r1, [pc, #740]	; (45cc <_malloc_r+0x358>)
    42e6:	ldr	r4, [r7, #16]
    42e8:	add.w	lr, r1, #8
    42ec:	cmp	r4, lr
    42ee:	beq.w	4658 <_malloc_r+0x3e4>
    42f2:	ldr	r3, [r4, #4]
    42f4:	bic.w	r3, r3, #3
    42f8:	subs	r2, r3, r5
    42fa:	cmp	r2, #15
    42fc:	bgt.w	4632 <_malloc_r+0x3be>
    4300:	cmp	r2, #0
    4302:	str.w	lr, [r1, #20]
    4306:	str.w	lr, [r1, #16]
    430a:	bge.w	444a <_malloc_r+0x1d6>
    430e:	cmp.w	r3, #512	; 0x200
    4312:	bcs.w	45e4 <_malloc_r+0x370>
    4316:	lsrs	r3, r3, #3
    4318:	add.w	ip, r3, #1
    431c:	movs	r2, #1
    431e:	asrs	r3, r3, #2
    4320:	lsl.w	r3, r2, r3
    4324:	ldr	r2, [r1, #4]
    4326:	ldr.w	r8, [r1, ip, lsl #3]
    432a:	str.w	r8, [r4, #8]
    432e:	add.w	r9, r1, ip, lsl #3
    4332:	orrs	r2, r3
    4334:	sub.w	r3, r9, #8
    4338:	str	r3, [r4, #12]
    433a:	str	r2, [r1, #4]
    433c:	str.w	r4, [r1, ip, lsl #3]
    4340:	str.w	r4, [r8, #12]
    4344:	asrs	r3, r0, #2
    4346:	movs	r4, #1
    4348:	lsls	r4, r3
    434a:	cmp	r4, r2
    434c:	bhi.w	4464 <_malloc_r+0x1f0>
    4350:	tst	r4, r2
    4352:	bne.n	4362 <_malloc_r+0xee>
    4354:	bic.w	r0, r0, #3
    4358:	lsls	r4, r4, #1
    435a:	tst	r4, r2
    435c:	add.w	r0, r0, #4
    4360:	beq.n	4358 <_malloc_r+0xe4>
    4362:	add.w	r9, r7, r0, lsl #3
    4366:	mov	ip, r9
    4368:	mov	r8, r0
    436a:	ldr.w	r1, [ip, #12]
    436e:	cmp	ip, r1
    4370:	bne.n	4382 <_malloc_r+0x10e>
    4372:	b.n	465c <_malloc_r+0x3e8>
    4374:	cmp	r2, #0
    4376:	bge.w	467c <_malloc_r+0x408>
    437a:	ldr	r1, [r1, #12]
    437c:	cmp	ip, r1
    437e:	beq.w	465c <_malloc_r+0x3e8>
    4382:	ldr	r3, [r1, #4]
    4384:	bic.w	r3, r3, #3
    4388:	subs	r2, r3, r5
    438a:	cmp	r2, #15
    438c:	ble.n	4374 <_malloc_r+0x100>
    438e:	mov	r4, r1
    4390:	ldr.w	ip, [r1, #12]
    4394:	ldr.w	r8, [r4, #8]!
    4398:	adds	r3, r1, r5
    439a:	orr.w	r5, r5, #1
    439e:	str	r5, [r1, #4]
    43a0:	orr.w	r1, r2, #1
    43a4:	str.w	ip, [r8, #12]
    43a8:	mov	r0, r6
    43aa:	str.w	r8, [ip, #8]
    43ae:	str	r3, [r7, #20]
    43b0:	str	r3, [r7, #16]
    43b2:	str.w	lr, [r3, #12]
    43b6:	str.w	lr, [r3, #8]
    43ba:	str	r1, [r3, #4]
    43bc:	str	r2, [r3, r2]
    43be:	bl	47e8 <__malloc_unlock>
    43c2:	b.n	4404 <_malloc_r+0x190>
    43c4:	cmp	r1, #16
    43c6:	bhi.n	440c <_malloc_r+0x198>
    43c8:	bl	47e4 <__malloc_lock>
    43cc:	movs	r5, #16
    43ce:	movs	r3, #6
    43d0:	movs	r0, #2
    43d2:	ldr	r7, [pc, #504]	; (45cc <_malloc_r+0x358>)
    43d4:	add.w	r3, r7, r3, lsl #2
    43d8:	sub.w	r2, r3, #8
    43dc:	ldr	r4, [r3, #4]
    43de:	cmp	r4, r2
    43e0:	beq.w	466e <_malloc_r+0x3fa>
    43e4:	ldr	r3, [r4, #4]
    43e6:	ldr	r1, [r4, #12]
    43e8:	ldr	r5, [r4, #8]
    43ea:	bic.w	r3, r3, #3
    43ee:	add	r3, r4
    43f0:	mov	r0, r6
    43f2:	ldr	r2, [r3, #4]
    43f4:	str	r1, [r5, #12]
    43f6:	orr.w	r2, r2, #1
    43fa:	str	r5, [r1, #8]
    43fc:	str	r2, [r3, #4]
    43fe:	bl	47e8 <__malloc_unlock>
    4402:	adds	r4, #8
    4404:	mov	r0, r4
    4406:	add	sp, #12
    4408:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    440c:	movs	r4, #0
    440e:	movs	r3, #12
    4410:	mov	r0, r4
    4412:	str	r3, [r6, #0]
    4414:	add	sp, #12
    4416:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    441a:	movs	r3, #128	; 0x80
    441c:	mov.w	lr, #64	; 0x40
    4420:	movs	r0, #63	; 0x3f
    4422:	b.n	42b8 <_malloc_r+0x44>
    4424:	mov	r0, lr
    4426:	b.n	42e4 <_malloc_r+0x70>
    4428:	add	r3, r4
    442a:	ldr	r1, [r4, #12]
    442c:	ldr	r2, [r3, #4]
    442e:	ldr	r5, [r4, #8]
    4430:	orr.w	r2, r2, #1
    4434:	str	r1, [r5, #12]
    4436:	mov	r0, r6
    4438:	str	r5, [r1, #8]
    443a:	str	r2, [r3, #4]
    443c:	bl	47e8 <__malloc_unlock>
    4440:	adds	r4, #8
    4442:	mov	r0, r4
    4444:	add	sp, #12
    4446:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    444a:	add	r3, r4
    444c:	mov	r0, r6
    444e:	ldr	r2, [r3, #4]
    4450:	orr.w	r2, r2, #1
    4454:	str	r2, [r3, #4]
    4456:	bl	47e8 <__malloc_unlock>
    445a:	adds	r4, #8
    445c:	mov	r0, r4
    445e:	add	sp, #12
    4460:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4464:	ldr	r4, [r7, #8]
    4466:	ldr	r3, [r4, #4]
    4468:	bic.w	r8, r3, #3
    446c:	cmp	r8, r5
    446e:	bcc.n	447a <_malloc_r+0x206>
    4470:	rsb	r3, r5, r8
    4474:	cmp	r3, #15
    4476:	bgt.w	4592 <_malloc_r+0x31e>
    447a:	ldr	r3, [pc, #340]	; (45d0 <_malloc_r+0x35c>)
    447c:	ldr.w	r9, [pc, #352]	; 45e0 <_malloc_r+0x36c>
    4480:	ldr	r2, [r3, #0]
    4482:	ldr.w	r3, [r9]
    4486:	adds	r3, #1
    4488:	add	r2, r5
    448a:	add.w	sl, r4, r8
    448e:	beq.w	4752 <_malloc_r+0x4de>
    4492:	add.w	r2, r2, #4096	; 0x1000
    4496:	adds	r2, #15
    4498:	bic.w	r2, r2, #4080	; 0xff0
    449c:	bic.w	r2, r2, #15
    44a0:	mov	r1, r2
    44a2:	mov	r0, r6
    44a4:	str	r2, [sp, #4]
    44a6:	bl	47ec <_sbrk_r>
    44aa:	cmp.w	r0, #4294967295
    44ae:	mov	fp, r0
    44b0:	ldr	r2, [sp, #4]
    44b2:	beq.w	4766 <_malloc_r+0x4f2>
    44b6:	cmp	sl, r0
    44b8:	bhi.w	46b4 <_malloc_r+0x440>
    44bc:	ldr	r3, [pc, #276]	; (45d4 <_malloc_r+0x360>)
    44be:	ldr	r1, [r3, #0]
    44c0:	cmp	sl, fp
    44c2:	add	r1, r2
    44c4:	str	r1, [r3, #0]
    44c6:	beq.w	4770 <_malloc_r+0x4fc>
    44ca:	ldr.w	r0, [r9]
    44ce:	ldr.w	lr, [pc, #272]	; 45e0 <_malloc_r+0x36c>
    44d2:	adds	r0, #1
    44d4:	ittet	ne
    44d6:	rsbne	sl, sl, fp
    44da:	addne	r1, sl
    44dc:	streq.w	fp, [lr]
    44e0:	strne	r1, [r3, #0]
    44e2:	ands.w	r1, fp, #7
    44e6:	beq.w	4718 <_malloc_r+0x4a4>
    44ea:	rsb	r0, r1, #8
    44ee:	rsb	r1, r1, #4096	; 0x1000
    44f2:	add	fp, r0
    44f4:	adds	r1, #8
    44f6:	add	r2, fp
    44f8:	ubfx	r2, r2, #0, #12
    44fc:	rsb	r9, r2, r1
    4500:	mov	r1, r9
    4502:	mov	r0, r6
    4504:	str	r3, [sp, #4]
    4506:	bl	47ec <_sbrk_r>
    450a:	adds	r3, r0, #1
    450c:	ldr	r3, [sp, #4]
    450e:	beq.w	4790 <_malloc_r+0x51c>
    4512:	rsb	r2, fp, r0
    4516:	add	r2, r9
    4518:	orr.w	r2, r2, #1
    451c:	ldr	r1, [r3, #0]
    451e:	str.w	fp, [r7, #8]
    4522:	add	r1, r9
    4524:	cmp	r4, r7
    4526:	str.w	r2, [fp, #4]
    452a:	str	r1, [r3, #0]
    452c:	ldr.w	r9, [pc, #164]	; 45d4 <_malloc_r+0x360>
    4530:	beq.n	4560 <_malloc_r+0x2ec>
    4532:	cmp.w	r8, #15
    4536:	bls.w	4734 <_malloc_r+0x4c0>
    453a:	ldr	r2, [r4, #4]
    453c:	sub.w	r3, r8, #12
    4540:	bic.w	r3, r3, #7
    4544:	adds	r0, r4, r3
    4546:	and.w	r2, r2, #1
    454a:	mov.w	lr, #5
    454e:	orrs	r2, r3
    4550:	cmp	r3, #15
    4552:	str	r2, [r4, #4]
    4554:	str.w	lr, [r0, #4]
    4558:	str.w	lr, [r0, #8]
    455c:	bhi.w	4798 <_malloc_r+0x524>
    4560:	ldr	r3, [pc, #116]	; (45d8 <_malloc_r+0x364>)
    4562:	ldr	r4, [r7, #8]
    4564:	ldr	r2, [r3, #0]
    4566:	cmp	r1, r2
    4568:	it	hi
    456a:	strhi	r1, [r3, #0]
    456c:	ldr	r3, [pc, #108]	; (45dc <_malloc_r+0x368>)
    456e:	ldr	r2, [r3, #0]
    4570:	cmp	r1, r2
    4572:	ldr	r2, [r4, #4]
    4574:	it	hi
    4576:	strhi	r1, [r3, #0]
    4578:	bic.w	r2, r2, #3
    457c:	cmp	r5, r2
    457e:	sub.w	r3, r2, r5
    4582:	bhi.n	4588 <_malloc_r+0x314>
    4584:	cmp	r3, #15
    4586:	bgt.n	4592 <_malloc_r+0x31e>
    4588:	mov	r0, r6
    458a:	bl	47e8 <__malloc_unlock>
    458e:	movs	r4, #0
    4590:	b.n	4404 <_malloc_r+0x190>
    4592:	adds	r2, r4, r5
    4594:	orr.w	r3, r3, #1
    4598:	orr.w	r5, r5, #1
    459c:	str	r5, [r4, #4]
    459e:	mov	r0, r6
    45a0:	str	r2, [r7, #8]
    45a2:	str	r3, [r2, #4]
    45a4:	bl	47e8 <__malloc_unlock>
    45a8:	adds	r4, #8
    45aa:	mov	r0, r4
    45ac:	add	sp, #12
    45ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45b2:	cmp	r3, #20
    45b4:	bls.n	469a <_malloc_r+0x426>
    45b6:	cmp	r3, #84	; 0x54
    45b8:	bhi.w	4704 <_malloc_r+0x490>
    45bc:	lsrs	r0, r5, #12
    45be:	add.w	lr, r0, #111	; 0x6f
    45c2:	mov.w	r3, lr, lsl #1
    45c6:	adds	r0, #110	; 0x6e
    45c8:	b.n	42b8 <_malloc_r+0x44>
    45ca:	nop
    45cc:	.word	0x1fff11ac
    45d0:	.word	0x1fff1d00
    45d4:	.word	0x1fff1d04
    45d8:	.word	0x1fff1cfc
    45dc:	.word	0x1fff1cf8
    45e0:	.word	0x1fff15b8
    45e4:	lsrs	r2, r3, #9
    45e6:	cmp	r2, #4
    45e8:	bls.n	46a8 <_malloc_r+0x434>
    45ea:	cmp	r2, #20
    45ec:	bhi.w	4756 <_malloc_r+0x4e2>
    45f0:	add.w	r1, r2, #92	; 0x5c
    45f4:	lsls	r1, r1, #1
    45f6:	adds	r2, #91	; 0x5b
    45f8:	add.w	ip, r7, r1, lsl #2
    45fc:	ldr.w	r1, [r7, r1, lsl #2]
    4600:	ldr.w	r8, [pc, #476]	; 47e0 <_malloc_r+0x56c>
    4604:	sub.w	ip, ip, #8
    4608:	cmp	ip, r1
    460a:	beq.w	471e <_malloc_r+0x4aa>
    460e:	ldr	r2, [r1, #4]
    4610:	bic.w	r2, r2, #3
    4614:	cmp	r3, r2
    4616:	bcs.n	461e <_malloc_r+0x3aa>
    4618:	ldr	r1, [r1, #8]
    461a:	cmp	ip, r1
    461c:	bne.n	460e <_malloc_r+0x39a>
    461e:	ldr.w	ip, [r1, #12]
    4622:	ldr	r2, [r7, #4]
    4624:	str.w	ip, [r4, #12]
    4628:	str	r1, [r4, #8]
    462a:	str.w	r4, [ip, #8]
    462e:	str	r4, [r1, #12]
    4630:	b.n	4344 <_malloc_r+0xd0>
    4632:	adds	r3, r4, r5
    4634:	orr.w	r7, r2, #1
    4638:	orr.w	r5, r5, #1
    463c:	str	r5, [r4, #4]
    463e:	mov	r0, r6
    4640:	str	r3, [r1, #20]
    4642:	str	r3, [r1, #16]
    4644:	str.w	lr, [r3, #12]
    4648:	str.w	lr, [r3, #8]
    464c:	str	r7, [r3, #4]
    464e:	str	r2, [r3, r2]
    4650:	adds	r4, #8
    4652:	bl	47e8 <__malloc_unlock>
    4656:	b.n	4404 <_malloc_r+0x190>
    4658:	ldr	r2, [r1, #4]
    465a:	b.n	4344 <_malloc_r+0xd0>
    465c:	add.w	r8, r8, #1
    4660:	tst.w	r8, #3
    4664:	add.w	ip, ip, #8
    4668:	bne.w	436a <_malloc_r+0xf6>
    466c:	b.n	46d0 <_malloc_r+0x45c>
    466e:	ldr	r4, [r3, #12]
    4670:	cmp	r3, r4
    4672:	it	eq
    4674:	addeq	r0, #2
    4676:	beq.w	42e4 <_malloc_r+0x70>
    467a:	b.n	43e4 <_malloc_r+0x170>
    467c:	add	r3, r1
    467e:	mov	r4, r1
    4680:	ldr	r2, [r3, #4]
    4682:	ldr	r1, [r1, #12]
    4684:	ldr.w	r5, [r4, #8]!
    4688:	orr.w	r2, r2, #1
    468c:	str	r2, [r3, #4]
    468e:	mov	r0, r6
    4690:	str	r1, [r5, #12]
    4692:	str	r5, [r1, #8]
    4694:	bl	47e8 <__malloc_unlock>
    4698:	b.n	4404 <_malloc_r+0x190>
    469a:	add.w	lr, r3, #92	; 0x5c
    469e:	add.w	r0, r3, #91	; 0x5b
    46a2:	mov.w	r3, lr, lsl #1
    46a6:	b.n	42b8 <_malloc_r+0x44>
    46a8:	lsrs	r2, r3, #6
    46aa:	add.w	r1, r2, #57	; 0x39
    46ae:	lsls	r1, r1, #1
    46b0:	adds	r2, #56	; 0x38
    46b2:	b.n	45f8 <_malloc_r+0x384>
    46b4:	cmp	r4, r7
    46b6:	ldr	r3, [pc, #296]	; (47e0 <_malloc_r+0x56c>)
    46b8:	beq.w	44bc <_malloc_r+0x248>
    46bc:	ldr	r4, [r3, #8]
    46be:	ldr	r2, [r4, #4]
    46c0:	bic.w	r2, r2, #3
    46c4:	b.n	457c <_malloc_r+0x308>
    46c6:	ldr.w	r3, [r9], #-8
    46ca:	cmp	r9, r3
    46cc:	bne.w	47d4 <_malloc_r+0x560>
    46d0:	tst.w	r0, #3
    46d4:	add.w	r0, r0, #4294967295
    46d8:	bne.n	46c6 <_malloc_r+0x452>
    46da:	ldr	r3, [r7, #4]
    46dc:	bic.w	r3, r3, r4
    46e0:	str	r3, [r7, #4]
    46e2:	lsls	r4, r4, #1
    46e4:	cmp	r4, r3
    46e6:	bhi.w	4464 <_malloc_r+0x1f0>
    46ea:	cmp	r4, #0
    46ec:	beq.w	4464 <_malloc_r+0x1f0>
    46f0:	tst	r4, r3
    46f2:	mov	r0, r8
    46f4:	bne.w	4362 <_malloc_r+0xee>
    46f8:	lsls	r4, r4, #1
    46fa:	tst	r4, r3
    46fc:	add.w	r0, r0, #4
    4700:	beq.n	46f8 <_malloc_r+0x484>
    4702:	b.n	4362 <_malloc_r+0xee>
    4704:	cmp.w	r3, #340	; 0x154
    4708:	bhi.n	473c <_malloc_r+0x4c8>
    470a:	lsrs	r0, r5, #15
    470c:	add.w	lr, r0, #120	; 0x78
    4710:	mov.w	r3, lr, lsl #1
    4714:	adds	r0, #119	; 0x77
    4716:	b.n	42b8 <_malloc_r+0x44>
    4718:	mov.w	r1, #4096	; 0x1000
    471c:	b.n	44f6 <_malloc_r+0x282>
    471e:	movs	r1, #1
    4720:	ldr.w	r3, [r8, #4]
    4724:	asrs	r2, r2, #2
    4726:	lsl.w	r2, r1, r2
    472a:	orrs	r2, r3
    472c:	str.w	r2, [r8, #4]
    4730:	mov	r1, ip
    4732:	b.n	4624 <_malloc_r+0x3b0>
    4734:	movs	r3, #1
    4736:	str.w	r3, [fp, #4]
    473a:	b.n	4588 <_malloc_r+0x314>
    473c:	movw	r2, #1364	; 0x554
    4740:	cmp	r3, r2
    4742:	bhi.n	4786 <_malloc_r+0x512>
    4744:	lsrs	r0, r5, #18
    4746:	add.w	lr, r0, #125	; 0x7d
    474a:	mov.w	r3, lr, lsl #1
    474e:	adds	r0, #124	; 0x7c
    4750:	b.n	42b8 <_malloc_r+0x44>
    4752:	adds	r2, #16
    4754:	b.n	44a0 <_malloc_r+0x22c>
    4756:	cmp	r2, #84	; 0x54
    4758:	bhi.n	47a8 <_malloc_r+0x534>
    475a:	lsrs	r2, r3, #12
    475c:	add.w	r1, r2, #111	; 0x6f
    4760:	lsls	r1, r1, #1
    4762:	adds	r2, #110	; 0x6e
    4764:	b.n	45f8 <_malloc_r+0x384>
    4766:	ldr	r4, [r7, #8]
    4768:	ldr	r2, [r4, #4]
    476a:	bic.w	r2, r2, #3
    476e:	b.n	457c <_malloc_r+0x308>
    4770:	ubfx	r0, sl, #0, #12
    4774:	cmp	r0, #0
    4776:	bne.w	44ca <_malloc_r+0x256>
    477a:	add	r2, r8
    477c:	ldr	r3, [r7, #8]
    477e:	orr.w	r2, r2, #1
    4782:	str	r2, [r3, #4]
    4784:	b.n	4560 <_malloc_r+0x2ec>
    4786:	movs	r3, #254	; 0xfe
    4788:	mov.w	lr, #127	; 0x7f
    478c:	movs	r0, #126	; 0x7e
    478e:	b.n	42b8 <_malloc_r+0x44>
    4790:	movs	r2, #1
    4792:	mov.w	r9, #0
    4796:	b.n	451c <_malloc_r+0x2a8>
    4798:	add.w	r1, r4, #8
    479c:	mov	r0, r6
    479e:	bl	48f4 <_free_r>
    47a2:	ldr.w	r1, [r9]
    47a6:	b.n	4560 <_malloc_r+0x2ec>
    47a8:	cmp.w	r2, #340	; 0x154
    47ac:	bhi.n	47ba <_malloc_r+0x546>
    47ae:	lsrs	r2, r3, #15
    47b0:	add.w	r1, r2, #120	; 0x78
    47b4:	lsls	r1, r1, #1
    47b6:	adds	r2, #119	; 0x77
    47b8:	b.n	45f8 <_malloc_r+0x384>
    47ba:	movw	r1, #1364	; 0x554
    47be:	cmp	r2, r1
    47c0:	bhi.n	47ce <_malloc_r+0x55a>
    47c2:	lsrs	r2, r3, #18
    47c4:	add.w	r1, r2, #125	; 0x7d
    47c8:	lsls	r1, r1, #1
    47ca:	adds	r2, #124	; 0x7c
    47cc:	b.n	45f8 <_malloc_r+0x384>
    47ce:	movs	r1, #254	; 0xfe
    47d0:	movs	r2, #126	; 0x7e
    47d2:	b.n	45f8 <_malloc_r+0x384>
    47d4:	ldr	r3, [r7, #4]
    47d6:	b.n	46e2 <_malloc_r+0x46e>
    47d8:	lsrs	r0, r5, #3
    47da:	adds	r3, r0, #1
    47dc:	lsls	r3, r3, #1
    47de:	b.n	43d2 <_malloc_r+0x15e>
    47e0:	.word	0x1fff11ac

000047e4 <__malloc_lock>:
    47e4:	bx	lr
    47e6:	nop

000047e8 <__malloc_unlock>:
    47e8:	bx	lr
    47ea:	nop

000047ec <_sbrk_r>:
    47ec:	push	{r3, r4, r5, lr}
    47ee:	ldr	r4, [pc, #28]	; (480c <_sbrk_r+0x20>)
    47f0:	movs	r3, #0
    47f2:	mov	r5, r0
    47f4:	mov	r0, r1
    47f6:	str	r3, [r4, #0]
    47f8:	bl	3b80 <_sbrk>
    47fc:	adds	r3, r0, #1
    47fe:	beq.n	4802 <_sbrk_r+0x16>
    4800:	pop	{r3, r4, r5, pc}
    4802:	ldr	r3, [r4, #0]
    4804:	cmp	r3, #0
    4806:	beq.n	4800 <_sbrk_r+0x14>
    4808:	str	r3, [r5, #0]
    480a:	pop	{r3, r4, r5, pc}
    480c:	.word	0x1fff1e70

00004810 <register_fini>:
    4810:	ldr	r3, [pc, #8]	; (481c <register_fini+0xc>)
    4812:	cbz	r3, 481a <register_fini+0xa>
    4814:	ldr	r0, [pc, #8]	; (4820 <register_fini+0x10>)
    4816:	b.w	4824 <atexit>
    481a:	bx	lr
    481c:	.word	0x00000000
    4820:	.word	0x00004831

00004824 <atexit>:
    4824:	movs	r3, #0
    4826:	mov	r1, r0
    4828:	mov	r2, r3
    482a:	mov	r0, r3
    482c:	b.w	4ac4 <__register_exitproc>

00004830 <__libc_fini_array>:
    4830:	push	{r3, r4, r5, lr}
    4832:	ldr	r5, [pc, #28]	; (4850 <__libc_fini_array+0x20>)
    4834:	ldr	r4, [pc, #28]	; (4854 <__libc_fini_array+0x24>)
    4836:	subs	r4, r5, r4
    4838:	asrs	r4, r4, #2
    483a:	beq.n	4848 <__libc_fini_array+0x18>
    483c:	subs	r4, #1
    483e:	ldr.w	r3, [r5, #-4]!
    4842:	blx	r3
    4844:	cmp	r4, #0
    4846:	bne.n	483c <__libc_fini_array+0xc>
    4848:	ldmia.w	sp!, {r3, r4, r5, lr}
    484c:	b.w	4e98 <__init_array_end>
	...

00004858 <_malloc_trim_r>:
    4858:	push	{r3, r4, r5, r6, r7, lr}
    485a:	ldr	r7, [pc, #140]	; (48e8 <_malloc_trim_r+0x90>)
    485c:	mov	r4, r1
    485e:	mov	r6, r0
    4860:	bl	47e4 <__malloc_lock>
    4864:	ldr	r3, [r7, #8]
    4866:	ldr	r5, [r3, #4]
    4868:	bic.w	r5, r5, #3
    486c:	subs	r1, r5, r4
    486e:	addw	r1, r1, #4079	; 0xfef
    4872:	bic.w	r1, r1, #4080	; 0xff0
    4876:	bic.w	r1, r1, #15
    487a:	sub.w	r4, r1, #4096	; 0x1000
    487e:	cmp.w	r4, #4096	; 0x1000
    4882:	blt.n	4894 <_malloc_trim_r+0x3c>
    4884:	movs	r1, #0
    4886:	mov	r0, r6
    4888:	bl	47ec <_sbrk_r>
    488c:	ldr	r3, [r7, #8]
    488e:	add	r3, r5
    4890:	cmp	r0, r3
    4892:	beq.n	489e <_malloc_trim_r+0x46>
    4894:	mov	r0, r6
    4896:	bl	47e8 <__malloc_unlock>
    489a:	movs	r0, #0
    489c:	pop	{r3, r4, r5, r6, r7, pc}
    489e:	negs	r1, r4
    48a0:	mov	r0, r6
    48a2:	bl	47ec <_sbrk_r>
    48a6:	adds	r0, #1
    48a8:	beq.n	48c6 <_malloc_trim_r+0x6e>
    48aa:	ldr	r3, [pc, #64]	; (48ec <_malloc_trim_r+0x94>)
    48ac:	ldr	r2, [r7, #8]
    48ae:	ldr	r1, [r3, #0]
    48b0:	subs	r5, r5, r4
    48b2:	orr.w	r5, r5, #1
    48b6:	mov	r0, r6
    48b8:	subs	r1, r1, r4
    48ba:	str	r5, [r2, #4]
    48bc:	str	r1, [r3, #0]
    48be:	bl	47e8 <__malloc_unlock>
    48c2:	movs	r0, #1
    48c4:	pop	{r3, r4, r5, r6, r7, pc}
    48c6:	movs	r1, #0
    48c8:	mov	r0, r6
    48ca:	bl	47ec <_sbrk_r>
    48ce:	ldr	r2, [r7, #8]
    48d0:	subs	r3, r0, r2
    48d2:	cmp	r3, #15
    48d4:	ble.n	4894 <_malloc_trim_r+0x3c>
    48d6:	ldr	r4, [pc, #24]	; (48f0 <_malloc_trim_r+0x98>)
    48d8:	ldr	r1, [pc, #16]	; (48ec <_malloc_trim_r+0x94>)
    48da:	ldr	r4, [r4, #0]
    48dc:	orr.w	r3, r3, #1
    48e0:	subs	r0, r0, r4
    48e2:	str	r3, [r2, #4]
    48e4:	str	r0, [r1, #0]
    48e6:	b.n	4894 <_malloc_trim_r+0x3c>
    48e8:	.word	0x1fff11ac
    48ec:	.word	0x1fff1d04
    48f0:	.word	0x1fff15b8

000048f4 <_free_r>:
    48f4:	cmp	r1, #0
    48f6:	beq.n	4984 <_free_r+0x90>
    48f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48fc:	mov	r5, r1
    48fe:	mov	r8, r0
    4900:	bl	47e4 <__malloc_lock>
    4904:	ldr.w	r7, [r5, #-4]
    4908:	ldr	r1, [pc, #424]	; (4ab4 <_free_r+0x1c0>)
    490a:	bic.w	r3, r7, #1
    490e:	sub.w	r4, r5, #8
    4912:	adds	r2, r4, r3
    4914:	ldr	r6, [r1, #8]
    4916:	ldr	r0, [r2, #4]
    4918:	cmp	r2, r6
    491a:	bic.w	r0, r0, #3
    491e:	beq.n	49e6 <_free_r+0xf2>
    4920:	lsls	r6, r7, #31
    4922:	str	r0, [r2, #4]
    4924:	bmi.n	493e <_free_r+0x4a>
    4926:	ldr.w	r7, [r5, #-8]
    492a:	subs	r4, r4, r7
    492c:	add.w	lr, r1, #8
    4930:	ldr	r5, [r4, #8]
    4932:	cmp	r5, lr
    4934:	add	r3, r7
    4936:	beq.n	4a18 <_free_r+0x124>
    4938:	ldr	r7, [r4, #12]
    493a:	str	r7, [r5, #12]
    493c:	str	r5, [r7, #8]
    493e:	adds	r5, r2, r0
    4940:	ldr	r5, [r5, #4]
    4942:	lsls	r5, r5, #31
    4944:	bpl.n	49cc <_free_r+0xd8>
    4946:	orr.w	r2, r3, #1
    494a:	str	r2, [r4, #4]
    494c:	str	r3, [r4, r3]
    494e:	cmp.w	r3, #512	; 0x200
    4952:	bcs.n	4986 <_free_r+0x92>
    4954:	lsrs	r3, r3, #3
    4956:	adds	r2, r3, #1
    4958:	ldr	r5, [r1, #4]
    495a:	ldr.w	r7, [r1, r2, lsl #3]
    495e:	str	r7, [r4, #8]
    4960:	movs	r0, #1
    4962:	asrs	r3, r3, #2
    4964:	lsl.w	r3, r0, r3
    4968:	add.w	r0, r1, r2, lsl #3
    496c:	orrs	r5, r3
    496e:	subs	r0, #8
    4970:	str	r0, [r4, #12]
    4972:	str	r5, [r1, #4]
    4974:	str.w	r4, [r1, r2, lsl #3]
    4978:	str	r4, [r7, #12]
    497a:	mov	r0, r8
    497c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4980:	b.w	47e8 <__malloc_unlock>
    4984:	bx	lr
    4986:	lsrs	r2, r3, #9
    4988:	cmp	r2, #4
    498a:	bhi.n	4a34 <_free_r+0x140>
    498c:	lsrs	r2, r3, #6
    498e:	add.w	r7, r2, #57	; 0x39
    4992:	lsls	r7, r7, #1
    4994:	add.w	r5, r2, #56	; 0x38
    4998:	add.w	r0, r1, r7, lsl #2
    499c:	ldr.w	r2, [r1, r7, lsl #2]
    49a0:	ldr	r1, [pc, #272]	; (4ab4 <_free_r+0x1c0>)
    49a2:	subs	r0, #8
    49a4:	cmp	r0, r2
    49a6:	beq.n	4a44 <_free_r+0x150>
    49a8:	ldr	r1, [r2, #4]
    49aa:	bic.w	r1, r1, #3
    49ae:	cmp	r3, r1
    49b0:	bcs.n	49b8 <_free_r+0xc4>
    49b2:	ldr	r2, [r2, #8]
    49b4:	cmp	r0, r2
    49b6:	bne.n	49a8 <_free_r+0xb4>
    49b8:	ldr	r0, [r2, #12]
    49ba:	str	r0, [r4, #12]
    49bc:	str	r2, [r4, #8]
    49be:	str	r4, [r0, #8]
    49c0:	str	r4, [r2, #12]
    49c2:	mov	r0, r8
    49c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    49c8:	b.w	47e8 <__malloc_unlock>
    49cc:	ldr	r5, [r2, #8]
    49ce:	ldr	r7, [pc, #232]	; (4ab8 <_free_r+0x1c4>)
    49d0:	cmp	r5, r7
    49d2:	add	r3, r0
    49d4:	beq.n	4a56 <_free_r+0x162>
    49d6:	ldr	r0, [r2, #12]
    49d8:	str	r0, [r5, #12]
    49da:	orr.w	r2, r3, #1
    49de:	str	r5, [r0, #8]
    49e0:	str	r2, [r4, #4]
    49e2:	str	r3, [r4, r3]
    49e4:	b.n	494e <_free_r+0x5a>
    49e6:	lsls	r7, r7, #31
    49e8:	add	r3, r0
    49ea:	bmi.n	49fc <_free_r+0x108>
    49ec:	ldr.w	r2, [r5, #-8]
    49f0:	subs	r4, r4, r2
    49f2:	add	r3, r2
    49f4:	ldr	r0, [r4, #8]
    49f6:	ldr	r2, [r4, #12]
    49f8:	str	r2, [r0, #12]
    49fa:	str	r0, [r2, #8]
    49fc:	ldr	r2, [pc, #188]	; (4abc <_free_r+0x1c8>)
    49fe:	ldr	r2, [r2, #0]
    4a00:	orr.w	r0, r3, #1
    4a04:	cmp	r3, r2
    4a06:	str	r0, [r4, #4]
    4a08:	str	r4, [r1, #8]
    4a0a:	bcc.n	497a <_free_r+0x86>
    4a0c:	ldr	r3, [pc, #176]	; (4ac0 <_free_r+0x1cc>)
    4a0e:	mov	r0, r8
    4a10:	ldr	r1, [r3, #0]
    4a12:	bl	4858 <_malloc_trim_r>
    4a16:	b.n	497a <_free_r+0x86>
    4a18:	adds	r1, r2, r0
    4a1a:	ldr	r1, [r1, #4]
    4a1c:	lsls	r1, r1, #31
    4a1e:	bmi.n	4aaa <_free_r+0x1b6>
    4a20:	ldr	r1, [r2, #8]
    4a22:	ldr	r2, [r2, #12]
    4a24:	str	r2, [r1, #12]
    4a26:	add	r3, r0
    4a28:	orr.w	r0, r3, #1
    4a2c:	str	r1, [r2, #8]
    4a2e:	str	r0, [r4, #4]
    4a30:	str	r3, [r4, r3]
    4a32:	b.n	497a <_free_r+0x86>
    4a34:	cmp	r2, #20
    4a36:	bhi.n	4a68 <_free_r+0x174>
    4a38:	add.w	r7, r2, #92	; 0x5c
    4a3c:	lsls	r7, r7, #1
    4a3e:	add.w	r5, r2, #91	; 0x5b
    4a42:	b.n	4998 <_free_r+0xa4>
    4a44:	asrs	r2, r5, #2
    4a46:	ldr	r3, [r1, #4]
    4a48:	movs	r5, #1
    4a4a:	lsl.w	r2, r5, r2
    4a4e:	orrs	r3, r2
    4a50:	str	r3, [r1, #4]
    4a52:	mov	r2, r0
    4a54:	b.n	49ba <_free_r+0xc6>
    4a56:	orr.w	r2, r3, #1
    4a5a:	str	r4, [r1, #20]
    4a5c:	str	r4, [r1, #16]
    4a5e:	str	r5, [r4, #12]
    4a60:	str	r5, [r4, #8]
    4a62:	str	r2, [r4, #4]
    4a64:	str	r3, [r4, r3]
    4a66:	b.n	497a <_free_r+0x86>
    4a68:	cmp	r2, #84	; 0x54
    4a6a:	bhi.n	4a7a <_free_r+0x186>
    4a6c:	lsrs	r2, r3, #12
    4a6e:	add.w	r7, r2, #111	; 0x6f
    4a72:	lsls	r7, r7, #1
    4a74:	add.w	r5, r2, #110	; 0x6e
    4a78:	b.n	4998 <_free_r+0xa4>
    4a7a:	cmp.w	r2, #340	; 0x154
    4a7e:	bhi.n	4a8e <_free_r+0x19a>
    4a80:	lsrs	r2, r3, #15
    4a82:	add.w	r7, r2, #120	; 0x78
    4a86:	lsls	r7, r7, #1
    4a88:	add.w	r5, r2, #119	; 0x77
    4a8c:	b.n	4998 <_free_r+0xa4>
    4a8e:	movw	r0, #1364	; 0x554
    4a92:	cmp	r2, r0
    4a94:	bhi.n	4aa4 <_free_r+0x1b0>
    4a96:	lsrs	r2, r3, #18
    4a98:	add.w	r7, r2, #125	; 0x7d
    4a9c:	lsls	r7, r7, #1
    4a9e:	add.w	r5, r2, #124	; 0x7c
    4aa2:	b.n	4998 <_free_r+0xa4>
    4aa4:	movs	r7, #254	; 0xfe
    4aa6:	movs	r5, #126	; 0x7e
    4aa8:	b.n	4998 <_free_r+0xa4>
    4aaa:	orr.w	r2, r3, #1
    4aae:	str	r2, [r4, #4]
    4ab0:	str	r3, [r4, r3]
    4ab2:	b.n	497a <_free_r+0x86>
    4ab4:	.word	0x1fff11ac
    4ab8:	.word	0x1fff11b4
    4abc:	.word	0x1fff15b4
    4ac0:	.word	0x1fff1d00

00004ac4 <__register_exitproc>:
    4ac4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ac8:	ldr	r4, [pc, #148]	; (4b60 <__register_exitproc+0x9c>)
    4aca:	ldr	r5, [r4, #0]
    4acc:	ldr.w	r4, [r5, #328]	; 0x148
    4ad0:	mov	r6, r0
    4ad2:	mov	r8, r1
    4ad4:	mov	sl, r2
    4ad6:	mov	r9, r3
    4ad8:	cbz	r4, 4b4c <__register_exitproc+0x88>
    4ada:	ldr	r0, [r4, #4]
    4adc:	cmp	r0, #31
    4ade:	bgt.n	4b10 <__register_exitproc+0x4c>
    4ae0:	adds	r3, r0, #1
    4ae2:	cbz	r6, 4b02 <__register_exitproc+0x3e>
    4ae4:	add.w	r5, r4, r0, lsl #2
    4ae8:	movs	r2, #1
    4aea:	str.w	sl, [r5, #136]	; 0x88
    4aee:	ldr.w	r1, [r4, #392]	; 0x188
    4af2:	lsls	r2, r0
    4af4:	orrs	r1, r2
    4af6:	cmp	r6, #2
    4af8:	str.w	r1, [r4, #392]	; 0x188
    4afc:	str.w	r9, [r5, #264]	; 0x108
    4b00:	beq.n	4b40 <__register_exitproc+0x7c>
    4b02:	adds	r0, #2
    4b04:	str	r3, [r4, #4]
    4b06:	str.w	r8, [r4, r0, lsl #2]
    4b0a:	movs	r0, #0
    4b0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b10:	ldr	r3, [pc, #80]	; (4b64 <__register_exitproc+0xa0>)
    4b12:	cbz	r3, 4b56 <__register_exitproc+0x92>
    4b14:	mov.w	r0, #400	; 0x190
    4b18:	bl	4264 <malloc>
    4b1c:	mov	r4, r0
    4b1e:	cbz	r0, 4b56 <__register_exitproc+0x92>
    4b20:	ldr.w	r3, [r5, #328]	; 0x148
    4b24:	movs	r7, #0
    4b26:	stmia.w	r0, {r3, r7}
    4b2a:	str.w	r4, [r5, #328]	; 0x148
    4b2e:	mov	r0, r7
    4b30:	movs	r3, #1
    4b32:	str.w	r7, [r4, #392]	; 0x188
    4b36:	str.w	r7, [r4, #396]	; 0x18c
    4b3a:	cmp	r6, #0
    4b3c:	beq.n	4b02 <__register_exitproc+0x3e>
    4b3e:	b.n	4ae4 <__register_exitproc+0x20>
    4b40:	ldr.w	r1, [r4, #396]	; 0x18c
    4b44:	orrs	r2, r1
    4b46:	str.w	r2, [r4, #396]	; 0x18c
    4b4a:	b.n	4b02 <__register_exitproc+0x3e>
    4b4c:	add.w	r4, r5, #332	; 0x14c
    4b50:	str.w	r4, [r5, #328]	; 0x148
    4b54:	b.n	4ada <__register_exitproc+0x16>
    4b56:	mov.w	r0, #4294967295
    4b5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b5e:	nop
    4b60:	.word	0x00004e7c
    4b64:	.word	0x00004265
    4b68:	.word	0x7370704f
    4b6c:	.word	0x6e61202c
    4b70:	.word	0x6b6e7520
    4b74:	.word	0x6e776f6e
    4b78:	.word	0x44494d20
    4b7c:	.word	0x656d2049
    4b80:	.word	0x67617373
    4b84:	.word	0x79742065
    4b88:	.word	0x00216570
    4b8c:	.word	0x4f4c4556
    4b90:	.word	0x59544943
    4b94:	.word	0x00000000
    4b98:	.word	0x45544f4e
    4b9c:	.word	0x474e454c
    4ba0:	.word	0x00004854
    4ba4:	.word	0x43544950
    4ba8:	.word	0x00000048

00004bac <pin2sc1a>:
    4bac:	................
    4bbc:	................
    4bcc:	................
    4bdc:	................
    4bec:	........

00004bf4 <digital_pin_to_info_PGM>:
    4bf4:	@..C@..@D..CD..@
    4c04:	...C...@0..C0..@
    4c14:	4..C4..@...C...@
    4c24:	...C...@...C...@
    4c34:	...C...@...C...@
    4c44:	...C...@...C...@
    4c54:	...C...@...C...@
    4c64:	...C...@...C...@
    4c74:	...C...@...C...@
    4c84:	...C...@...C...@
    4c94:	...C...@...C...@
    4ca4:	...C...@...C...@
    4cb4:	h .Ch..@...C...@
    4cc4:	8..C8..@<..C<..@
    4cd4:	@..C@..@H..CH..@
    4ce4:	L..CL..@(..C(..@
    4cf4:	,..C,..@` .C`..@
    4d04:	d .Cd..@ ..C ..@
    4d14:	$..C$..@(..C(..@
    4d24:	,..C,..@D..CD..@
    4d34:	p..Cp..@t..Ct..@
    4d44:	h..Ch..@P..CP..@
    4d54:	X..CX..@\..C\..@
    4d64:	T..CT..@ ..C ..@
    4d74:	$..C$..@...C...@
    4d84:	...C...@8..C8..@
    4d94:	4..C4..@0..C0..@
    4da4:	<..C<..@,..C,..@
    4db4:	( .C(..@, .C,..@
    4dc4:	. .C...@. .C...@
    4dd4:	. .C...@. .C...@
    4de4:	. .C...@. .C...@

00004df4 <vtable for usb_serial_class>:
	...
    4dfc:	.7...7...7...7..
    4e0c:	.7...7...7...7..
    4e1c:	....

00004e20 <usb_endpoint_config_table>:
    4e20:	........

00004e28 <usb_descriptor_list>:
    4e28:	................
    4e38:	............`...
    4e48:	................
    4e58:	....H...........
    4e68:	d...............
    4e78:	....

00004e7c <_global_impure_ptr>:
    4e7c:	....

00004e80 <_init>:
    4e80:	push	{r3, r4, r5, r6, r7, lr}
    4e82:	nop
    4e84:	pop	{r3, r4, r5, r6, r7}
    4e86:	pop	{r3}
    4e88:	mov	lr, r3
    4e8a:	bx	lr

00004e8c <__init_array_start>:
    4e8c:	.word	0x00004811

00004e90 <__frame_dummy_init_array_entry>:
    4e90:	5.......

Disassembly of section .fini:

00004e98 <_fini>:
    4e98:	push	{r3, r4, r5, r6, r7, lr}
    4e9a:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004b4c l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff1594 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000036d0 l     F .text	0000000c startup_default_early_hook
000036dc l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1594 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1598 l       .bss	00000000 object.8610
00004b44 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 sequencer.cpp
00000000 l    df *ABS*	00000000 button.cpp
00000000 l    df *ABS*	00000000 piano.cpp
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 main.cpp
0000099c l     F .text	00000018 _GLOBAL__sub_I_sequencer
00000000 l    df *ABS*	00000000 note.cpp
00000000 l    df *ABS*	00000000 transport.cpp
00000000 l    df *ABS*	00000000 paginator.cpp
00000000 l    df *ABS*	00000000 step.cpp
00000000 l    df *ABS*	00000000 knob.cpp
00000000 l    df *ABS*	00000000 controller.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
1fff15b5 l     O .bss	00000001 tx_noautoflush
1fff15b8 l     O .bss	00000004 tx_packet
1fff15bc l     O .bss	00000001 transmit_previous_timeout
1fff15c0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000018b0 l     F .text	00000144 wait_for_cal
1fff15c5 l     O .bss	00000001 analog_right_shift
1fff15c6 l     O .bss	00000001 calibrating
00004860 l     O .text	00000048 pin2sc1a
1fff0c40 l     O .data	00000001 analog_config_bits
1fff15c7 l     O .bss	00000001 analogReadBusyADC1
1fff15c8 l     O .bss	00000001 analogReadBusyADC0
1fff15c9 l     O .bss	00000001 analog_reference_internal
1fff0c41 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001bd0 l     F .text	0000004c digitalWrite.part.1
00001c1c l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00001efc l     F .text	00000048 sysex_byte
1fff15e4 l     O .bss	00000001 tx_noautoflush
1fff1610 l     O .bss	00000004 tx_packet
1fff1614 l     O .bss	00000001 transmit_previous_timeout
1fff161c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c44 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1630 l     O .bss	00000004 ep0_tx_ptr
1fff1634 l     O .bss	00000014 rx_last
1fff1648 l     O .bss	00000002 ep0_tx_len
1fff164c l     O .bss	00000040 ep0_rx0_buf
1fff168c l     O .bss	00000014 rx_first
1fff16a0 l     O .bss	00000001 ep0_tx_data_toggle
1fff16a4 l     O .bss	00000040 ep0_rx1_buf
1fff16e4 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff16f8 l     O .bss	00000014 tx_last
1fff170c l     O .bss	00000008 setup
1fff1714 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1718 l     O .bss	00000008 reply_buffer
1fff1724 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1729 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 WMath.cpp
000032e4 l     F .text	00000070 random(unsigned long) [clone .part.0]
1fff172c l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1730 l     O .bss	00000004 rts_pin
1fff1734 l     O .bss	00000001 rx_buffer_head
1fff1735 l     O .bss	00000001 rx_buffer_tail
1fff1738 l     O .bss	00000028 tx_buffer
1fff1760 l     O .bss	00000040 rx_buffer
1fff17a0 l     O .bss	00000001 transmitting
1fff17a1 l     O .bss	00000001 tx_buffer_tail
1fff17a4 l     O .bss	00000004 transmit_pin
1fff17a8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff17ac l     O .bss	00000004 rts_pin
1fff17b0 l     O .bss	00000001 transmitting
1fff17b1 l     O .bss	00000001 rx_buffer_tail
1fff17b4 l     O .bss	00000028 tx_buffer
1fff17dc l     O .bss	00000040 rx_buffer
1fff181c l     O .bss	00000001 rx_buffer_head
1fff181d l     O .bss	00000001 tx_buffer_tail
1fff1820 l     O .bss	00000004 transmit_pin
1fff1824 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1828 l     O .bss	00000004 rts_pin
1fff182c l     O .bss	00000001 rx_buffer_head
1fff182d l     O .bss	00000001 rx_buffer_tail
1fff1830 l     O .bss	00000028 tx_buffer
1fff1858 l     O .bss	00000040 rx_buffer
1fff1898 l     O .bss	00000001 transmitting
1fff1899 l     O .bss	00000001 tx_buffer_tail
1fff189c l     O .bss	00000004 transmit_pin
1fff18a0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff18a4 l     O .bss	00000004 rts_pin
1fff18a8 l     O .bss	00000001 rx_buffer_head
1fff18a9 l     O .bss	00000001 rx_buffer_tail
1fff18ac l     O .bss	00000040 tx_buffer
1fff18ec l     O .bss	00000040 rx_buffer
1fff192c l     O .bss	00000001 transmitting
1fff192d l     O .bss	00000001 tx_buffer_tail
1fff1930 l     O .bss	00000004 transmit_pin
1fff1934 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1938 l     O .bss	00000004 rts_pin
1fff193c l     O .bss	00000001 rx_buffer_head
1fff193d l     O .bss	00000001 rx_buffer_tail
1fff1940 l     O .bss	00000028 tx_buffer
1fff1968 l     O .bss	00000040 rx_buffer
1fff19a8 l     O .bss	00000001 transmitting
1fff19a9 l     O .bss	00000001 tx_buffer_tail
1fff19ac l     O .bss	00000004 transmit_pin
1fff19b0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c5c l     O .data	00000012 device_descriptor
1fff0c88 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff19b4 l     O .bss	00000004 rts_pin
1fff19b8 l     O .bss	00000001 rx_buffer_head
1fff19b9 l     O .bss	00000001 rx_buffer_tail
1fff19bc l     O .bss	00000028 tx_buffer
1fff19e4 l     O .bss	00000040 rx_buffer
1fff1a24 l     O .bss	00000001 transmitting
1fff1a25 l     O .bss	00000001 tx_buffer_tail
1fff1a28 l     O .bss	00000004 transmit_pin
1fff1a2c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000440c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d58 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1594 l       .bss	00000000 __bss_start__
1fff1bc8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000036c8  w    F .text	00000006 adc0_isr
00001654 g     F .text	0000001c usb_serial_available
00003588 g     F .text	00000020 serial4_available
00003128  w    F .text	000000c4 yield
1fff0c70 g     O .data	00000018 usb_string_manufacturer_name_default
00003774 g     F .text	00000020 serial_available
1fff15e8 g     O .bss	00000004 usb_midi_handleProgramChange
00001568 g     F .text	0000000a Controller::exitSwingMode()
00003680  w    F .text	00000048 hard_fault_isr
000036c8  w    F .text	00000006 dma_ch6_isr
0000321c g     F .text	00000020 Print::println()
0000345c g     F .text	00000020 serial2_available
000036c8  w    F .text	00000006 uart0_lon_isr
0000253c g     F .text	000000e8 usb_rx_memory
000031ec  w    F .text	00000002 serialEvent5()
000015cc g     F .text	00000006 Controller::getShiftMode()
000036c8  w    F .text	00000006 dma_ch8_isr
000038a0 g     F .text	00000020 serial6_available
000043e4 g     F .text	00000002 __malloc_unlock
1fff15fc g     O .bss	00000004 usb_midi_handleAfterTouch
000004fc g     F .text	00000050 Sequencer::step()
000019f4 g     F .text	000000e0 analog_init
00002624 g     F .text	00000084 usb_tx
000036c8  w    F .text	00000006 portcd_isr
1fff160c g     O .bss	00000004 usb_midi_handleSysExComplete
00001360 g     F .text	00000058 Controller::printCurrentMode()
00003cc0 g     F .text	00000098 MillisTimer::runFromTimer()
000036c8  w    F .text	00000006 can1_rx_warn_isr
00004b50 g       .fini	00000000 __exidx_end
000036c8  w    F .text	00000006 dma_error_isr
1fff1a8c g     O .bss	00000001 usb_midi_msg_type
1fff1a44 g     O .bss	00000001 EventResponder::runningFromYield
000036c8  w    F .text	00000006 i2c0_isr
00003d68 g     F .text	0000000c __errno
000036c8  w    F .text	00000006 portd_isr
000036c8  w    F .text	00000006 enet_error_isr
1fff1a30 g     O .bss	00000004 EventResponder::firstInterrupt
00000a48 g     F .text	0000002c Note::tick()
00001148 g     F .text	0000002a Knob::tick()
000036c8  w    F .text	00000006 tpm1_isr
00003208  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000048a8 g     O .text	00000200 digital_pin_to_info_PGM
000015d4 g     F .text	00000006 Controller::getMode()
1fff1bc4 g     O .bss	00000004 errno
00004b50 g       .fini	00000000 _etext
1fff1594 g       .bss	00000000 _sbss
0000335c  w    F .text	00000002 serialEvent6()
1fff15f8 g     O .bss	00000004 usb_midi_handleVelocityChange
00001cc4 g     F .text	0000001c digitalRead
000036c8  w    F .text	00000006 porte_isr
00000990 g     F .text	0000000c loop
000036c8  w    F .text	00000006 portb_isr
000004dc g     F .text	00000014 Sequencer::tick()
00001fe0 g     F .text	0000002c usb_midi_flush_output
000036c8  w    F .text	00000006 spi1_isr
000035a8 g     F .text	000000d8 uart3_status_isr
00003b6c  w    F .text	00000002 serialEvent1()
00001334 g     F .text	0000002c Controller::tick()
000036c8  w    F .text	00000006 mcm_isr
00003c58 g     F .text	00000068 MillisTimer::addToActiveList()
0000200c g     F .text	0000043c usb_midi_read
0000144c g     F .text	00000060 Controller::enterShiftMode()
1fff15d4 g     O .bss	00000004 usb_midi_handleSystemReset
000007a8 g     F .text	00000040 Piano::Piano(Sequencer*)
0000063c g     F .text	0000006c Button::onHold()
1fff1a34 g     O .bss	00000004 EventResponder::lastInterrupt
000015c4 g     F .text	00000006 Controller::getCopyMode()
0000347c g     F .text	0000010c uart1_status_isr
00000914 g     F .text	00000078 Led::tick()
1fff1a8e g     O .bss	00000002 usb_midi_msg_sysex_len
0000054c g     F .text	00000006 Sequencer::resetStep()
000036c8  w    F .text	00000006 randnum_isr
000009c4 g     F .text	0000002e Note::noteOn(unsigned char, unsigned char, unsigned char)
1fff15dc g     O .bss	00000004 usb_midi_handleRealTimeSystem
000014fc g     F .text	00000008 Controller::exitCopyMode()
1fff15cc g     O .bss	00000004 systick_millis_count
00003680  w    F .text	00000048 bus_fault_isr
000008cc g     F .text	0000002c Led::toggle()
000036c8  w    F .text	00000006 watchdog_isr
000036c8  w    F .text	00000006 i2c1_isr
1fff1720 g     O .bss	00000001 usb_configuration
000036c8  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
000032cc  w    F .text	00000002 serialEvent2()
000036c8  w    F .text	00000006 i2c2_isr
1fff0c70  w    O .data	00000018 usb_string_manufacturer_name
1fff1bb8 g     O .bss	0000000a usb_rx_byte_count_data
000036c8  w    F .text	00000006 pit1_isr
00000e9c g     F .text	00000034 Paginator::previousPage()
00003dc4 g     F .text	00000010 malloc
000036c8  w    F .text	00000006 dma_ch4_isr
000036c8  w    F .text	00000006 software_isr
000036c8  w    F .text	00000006 dma_ch7_isr
00003bf4  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003058 g     F .text	000000d0 usb_init
000036c8  w    F .text	00000006 lptmr_isr
00000b6c g     F .text	00000060 Transport::processMidi()
1fff1a54 g     O .bss	00000004 __malloc_top_pad
00001c94 g     F .text	00000024 rtc_set
000005c0 g     F .text	0000007c Button::onRelease()
00000ef8 g     F .text	0000001c Step::controlLength(int)
1fff0c40 g       .data	00000000 _sdata
1fff162c g     O .bss	00000004 usb_midi_handleNoteOn
00000a18 g     F .text	0000002e Note::noteOff(unsigned char, unsigned char, unsigned char)
00003740 g     F .text	00000034 kinetis_hsrun_enable
000043e8 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
000015dc g     F .text	00000048 usb_serial_getchar
000036c8  w    F .text	00000006 can1_bus_off_isr
000036c8  w    F .text	00000006 ftm2_isr
00000554 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1a80 g     O .bss	00000008 usb_cdc_line_coding
00001cb8 g     F .text	0000000a digitalWrite
000036c8  w    F .text	00000006 uart5_status_isr
000038c0 g     F .text	000000e4 lpuart0_status_isr
1fff1a3c g     O .bss	00000004 EventResponder::lastYield
00000a88 g     F .text	0000003a Transport::controlTempo(int)
00004ad4 g     O .text	00000005 usb_endpoint_config_table
00001174 g     F .text	000001be Controller::Controller(Sequencer*)
000036c8  w    F .text	00000006 dma_ch9_isr
000036c8  w    F .text	00000006 pit2_isr
00003a74 g     F .text	00000020 serial3_available
000015a0 g     F .text	0000000a Controller::exitMotionMode()
1fff1a50 g     O .bss	00000004 __malloc_max_sbrked_mem
00001504 g     F .text	00000030 Controller::enterChanceMode()
00001ce0 g     F .text	0000000a pinMode
00002488 g     F .text	0000004c usb_free
000036c8  w    F .text	00000006 i2c3_isr
1fff15f4 g     O .bss	00000004 usb_midi_handleSysExPartial
00004b50 g       .fini	00000000 __exidx_start
000036c8  w    F .text	00000006 pit0_isr
1fff1a90 g     O .bss	00000001 usb_midi_msg_data1
1fff1a40 g     O .bss	00000004 EventResponder::firstYield
00004b30 g     O .text	00000004 _global_impure_ptr
000036c8  w    F .text	00000006 can1_error_isr
00003d74 g     F .text	00000050 __libc_init_array
1fff1bc8 g       .bss	00000000 __bss_end
000036c8  w    F .text	00000006 can0_wakeup_isr
000036c8  w    F .text	00000006 flash_cmd_isr
000031f0  w    F .text	00000004 usb_serial_class::clear()
00003a94 g     F .text	000000d8 uart2_status_isr
000036e0 g     F .text	0000002c _sbrk
1fff1a48 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c58 g     O .data	00000004 __brkval
1fff15c4 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001868 g     F .text	00000048 usb_serial_flush_callback
00004b34 g     F .text	00000000 _init
000036c8  w    F .text	00000006 svcall_isr
00000f4c g     F .text	0000002c Step::controlChance(int)
000036c8  w    F .text	00000006 dma_ch15_isr
000036c8  w    F .text	00000006 uart1_error_isr
0000442c g     F .text	00000028 __libc_fini_array
000036c8  w    F .text	00000006 usbhs_phy_isr
00000be4 g     F .text	0000001e Paginator::Paginator(Sequencer*)
00000554 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1bc8 g       .bss	00000000 _ebss
000036c8 g     F .text	00000006 unused_isr
00000fac g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
000036c8  w    F .text	00000006 spi0_isr
00001574 g     F .text	0000002c Controller::enterMotionMode()
000036c8  w    F .text	00000006 dma_ch3_isr
00000e68 g     F .text	00000032 Paginator::nextPage()
00000ed0 g     F .text	0000001c Step::Step(Sequencer*)
00000ed0 g     F .text	0000001c Step::Step(Sequencer*)
000036c8  w    F .text	00000006 flash_error_isr
00003364 g     F .text	00000020 serial5_available
000036c8  w    F .text	00000006 uart5_error_isr
000015bc g     F .text	00000006 Controller::getMotionMode()
000036c8  w    F .text	00000006 rtc_seconds_isr
000036c8  w    F .text	00000006 pdb_isr
00003680  w    F .text	00000048 usage_fault_isr
000036c8  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00000bcc g     F .text	00000018 Transport::tick()
000036c8  w    F .text	00000006 dma_ch14_isr
00000fbc g     F .text	0000018a Knob::onChange()
000009b4 g     F .text	0000000e Note::Note()
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1a88 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00000a74 g     F .text	00000014 Transport::Transport(Sequencer*)
00003d58 g     F .text	00000010 systick_isr
000036c8  w    F .text	00000006 rtc_alarm_isr
0000046c g     F .text	0000006e Sequencer::Sequencer()
000036c8  w    F .text	00000006 dma_ch2_isr
1fff0c48 g     O .data	00000010 Serial
00000a74 g     F .text	00000014 Transport::Transport(Sequencer*)
000036c8  w    F .text	00000006 ftm1_isr
00003210  w    F .text	00000006 usb_serial_class::write(unsigned char)
000036d0  w    F .text	0000000c startup_early_hook
000036c8  w    F .text	00000006 dma_ch13_isr
000036c8  w    F .text	00000006 uart2_error_isr
00001624 g     F .text	00000030 usb_serial_peekchar
00000898 g     F .text	00000034 Led::blink(int)
1fff0d3c g     O .data	00000016 usb_string_serial_number_default
00003680 g     F .text	00000048 fault_isr
000044f0 g     F .text	000001d0 _free_r
1fff1618 g     O .bss	00000004 usb_midi_handleStop
000036c8  w    F .text	00000006 usb_charge_isr
00003200  w    F .text	00000004 usb_serial_class::flush()
000036c8  w    F .text	00000006 cmt_isr
000036c8  w    F .text	00000006 usbhs_isr
1fff1628 g     O .bss	00000004 usb_midi_handleControlChange
1fff1590 g     O .data	00000004 __malloc_sbrk_base
000031f8  w    F .text	00000004 usb_serial_class::read()
000036c8  w    F .text	00000006 ftm3_isr
000007a8 g     F .text	00000040 Piano::Piano(Sequencer*)
000036c8  w    F .text	00000006 tsi0_isr
000036c8  w    F .text	00000006 spi2_isr
000032d0  w    F .text	00000002 serialEvent4()
00003218  w    F .text	00000002 serialEvent()
1fff16a1 g     O .bss	00000001 usb_reboot_timer
000046c0 g     F .text	000000a4 __register_exitproc
00001670 g     F .text	00000038 usb_serial_flush_input
000017b0 g     F .text	00000018 usb_serial_putchar
1fff1a58 g     O .bss	00000028 __malloc_current_mallinfo
000036c8  w    F .text	00000006 can0_bus_off_isr
00001174 g     F .text	000001be Controller::Controller(Sequencer*)
1fff1715 g     O .bss	00000001 usb_rx_memory_needed
000004f0 g     F .text	0000000a Sequencer::reverse()
000026a8 g     F .text	000009b0 usb_isr
00000b4c g     F .text	0000001e Transport::stopPPQN()
1fff1624 g     O .bss	00000004 usb_midi_handleNoteOff
000009b4 g     F .text	0000000e Note::Note()
00003354 g     F .text	00000008 random(unsigned long)
00004aa8  w    O .text	00000028 vtable for usb_serial_class
00000700 g     F .text	000000a8 Button::tick()
000036c8  w    F .text	00000006 uart3_error_isr
1fff1a38 g     O .bss	00000004 MillisTimer::listActive
000036c8  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
000036c8  w    F .text	00000006 low_voltage_isr
1fff1184 g     O .data	00000408 __malloc_av_
000036c8  w    F .text	00000006 can0_error_isr
000014ac g     F .text	00000028 Controller::exitShiftMode()
00001d90 g     F .text	0000016c _init_Teensyduino_internal_
00000fac g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00001810 g     F .text	00000058 usb_serial_flush_output
000036c8  w    F .text	00000006 dma_ch12_isr
000043e0 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000036c8  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
000036c8  w    F .text	00000006 pit3_isr
00000580 g     F .text	00000040 Button::onPressWhileHolding()
00000800 g     F .text	0000002a Piano::play(Step*)
00000be4 g     F .text	0000001e Paginator::Paginator(Sequencer*)
000036c8  w    F .text	00000006 enet_rx_isr
000036c8  w    F .text	00000006 portc_isr
00004344 g     F .text	0000009a memset
000032d4 g     F .text	00000010 main
1fff1a4c g     O .bss	00000004 __malloc_max_total_mem
00000904 g     F .text	0000000e Led::on()
00003680  w    F .text	00000048 memmanage_fault_isr
000039a4 g     F .text	00000084 usb_init_serialnumber
00004b4c g       .text	00000000 __init_array_end
00003dd4 g     F .text	00000570 _malloc_r
000036c8  w    F .text	00000006 debugmonitor_isr
1fff15f0 g     O .bss	00000004 usb_midi_handleSongPosition
00001534 g     F .text	0000000a Controller::exitChanceMode()
00003b74 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff15e0 g     O .bss	00000004 usb_midi_handleContinue
1fff1a91 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
000036c8  w    F .text	00000006 cmp1_isr
000036c8  w    F .text	00000006 ftm0_isr
00004454 g     F .text	0000009c _malloc_trim_r
1fff0d38 g     O .data	00000004 string0
000016a8 g     F .text	00000108 usb_serial_write
000036dc  w    F .text	00000002 startup_late_hook
00000f14 g     F .text	00000024 Step::controlPitch(int)
000031fc  w    F .text	00000004 usb_serial_class::available()
1fff1a92 g     O .bss	00000001 usb_midi_msg_cable
1fff0d20  w    O .data	00000018 usb_string_product_name
00000c04 g     F .text	00000056 Paginator::getNextPlaybackPage(int)
00001cec g     F .text	000000a4 delay
000014d4 g     F .text	00000028 Controller::enterCopyMode()
000036c8  w    F .text	00000006 tpm0_isr
00004b4c g     F .fini	00000000 _fini
000036c8  w    F .text	00000006 i2s0_rx_isr
00000ac4 g     F .text	0000005e Transport::advancePPQN()
000036c8  w    F .text	00000006 uart4_error_isr
000032bc g     F .text	00000010 Print::print(long)
00001f44 g     F .text	0000009c usb_midi_write_packed
00000c78 g     F .text	000001c0 Paginator::changePage(int)
00004420 g     F .text	0000000c atexit
000036c8  w    F .text	00000006 can0_message_isr
000013b8 g     F .text	00000094 Controller::toggleMode()
1fff1180 g     O .data	00000004 _impure_ptr
000036c8  w    F .text	00000006 can1_message_isr
000036c8  w    F .text	00000006 nmi_isr
00000870 g     F .text	00000026 Led::Led(int, int)
0000046c g     F .text	0000006e Sequencer::Sequencer()
1fff1608 g     O .bss	00000004 usb_midi_handleTuneRequest
000007e8 g     F .text	00000016 Piano::tick()
00004b40 g       .text	00000000 __preinit_array_end
00000eec g     F .text	0000000a Step::toggle()
000036c8  w    F .text	00000006 sdhc_isr
00000f78 g     F .text	00000032 Step::controlSwing(int)
1fff1a93 g     O .bss	00000001 usb_midi_msg_channel
0000098c g     F .text	00000002 setup
00004adc g     O .text	00000054 usb_descriptor_list
000024d4 g     F .text	0000003c usb_rx
00000870 g     F .text	00000026 Led::Led(int, int)
00000e38 g     F .text	00000030 Paginator::debugPages()
000036c8  w    F .text	00000006 dma_ch10_isr
1fff1600 g     O .bss	00000004 usb_midi_handleStart
000036c8  w    F .text	00000006 uart0_error_isr
000015b4 g     F .text	00000006 Controller::getSwingMode()
000009f4 g     F .text	00000022 Note::play(Step*, int*)
00002448 g     F .text	00000040 usb_malloc
0000082c g     F .text	00000044 Piano::transpose(int)
000036c8  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
000017c8 g     F .text	00000048 usb_serial_write_buffer_free
000036c8  w    F .text	00000006 enet_timer_isr
1fff1594 g       .data	00000000 _edata
000036c8  w    F .text	00000006 i2s0_tx_isr
000036c8  w    F .text	00000006 adc1_isr
00000f38 g     F .text	00000014 Step::controlVelocity(int)
00003204  w    F .text	00000004 usb_serial_class::availableForWrite()
000036c8  w    F .text	00000006 cmp0_isr
1fff15d0 g     O .bss	00000004 usb_midi_handleClock
00003a28 g     F .text	0000004c ultoa
000006a8 g     F .text	00000056 Button::onHoldRelease()
00003360 g     F .text	00000004 operator new(unsigned int)
00003c10 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff158c g     O .data	00000004 __malloc_trim_threshold
000031f4  w    F .text	00000004 usb_serial_class::peek()
000015ac g     F .text	00000006 Controller::getChanceMode()
1fff15b4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff15ec g     O .bss	00000004 usb_midi_handlePitchChange
000036c8  w    F .text	00000006 pit_isr
1fff1604 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
000036c8  w    F .text	00000006 dac0_isr
00004b40 g       .text	00000000 __init_array_start
000036c8  w    F .text	00000006 can1_tx_warn_isr
00001ad4 g     F .text	000000fc analogRead
1fff1a94 g     O .bss	00000122 usb_midi_msg_sysex
00003794 g     F .text	0000010c uart0_status_isr
000036c8  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d20 g     O .data	00000018 usb_string_product_name_default
000036c8  w    F .text	00000006 dma_ch1_isr
00000b24 g     F .text	00000028 Transport::startPPQN()
00002510 g     F .text	0000002c usb_tx_packet_count
000036c8  w    F .text	00000006 dma_ch5_isr
000036c8  w    F .text	00000006 can0_rx_warn_isr
000036c8  w    F .text	00000006 can0_tx_warn_isr
00003384 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000370c g     F .text	00000034 kinetis_hsrun_disable
00004b40 g       .text	00000000 __preinit_array_start
1fff15b0 g     O .bss	00000004 sequencer
00003b70  w    F .text	00000002 serialEvent3()
1fff1620 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
000036c8  w    F .text	00000006 cmp2_isr
00003c54 g     F .text	00000004 pendablesrvreq_isr
000036c8  w    F .text	00000006 wakeup_isr
00000c5c g     F .text	0000001c Paginator::setLeds(unsigned int)
000036c8  w    F .text	00000006 cmp3_isr
0000323c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000008f8 g     F .text	0000000c Led::off()
1fff15d8 g     O .bss	00000004 usb_midi_handleActiveSensing
00001540 g     F .text	00000028 Controller::enterSwingMode()
000036c8  w    F .text	00000006 tpm2_isr
000036c8  w    F .text	00000006 dma_ch0_isr
1fff0d3c  w    O .data	00000016 usb_string_serial_number
000036c8  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... .....6...6..
      10:	.6...6...6...6..
      20:	.6...6...6...6..
      30:	.6...6..U<..Y=..
      40:	.6...6...6...6..
      50:	.6...6...6...6..
      60:	.6...6...6...6..
      70:	.6...6...6...6..
      80:	.6...6...6...6..
      90:	.6...6...6...6..
      a0:	.6...6...6...6..
      b0:	.6...6...6...7..
      c0:	.6..}4...6...:..
      d0:	.6...5...6...6..
      e0:	.6...6...6...6..
      f0:	.6...6...6...6..
     100:	.6...6...6...6..
     110:	.6...&...6...6..
     120:	.6...6...6...6..
     130:	.6...6...6...6..
     140:	.6...6...3...6..
     150:	.6...6...6...6..
     160:	.6...6...6...6..
     170:	.6...6...6...6..
     180:	.6...6...6...6..
     190:	.6...6...8...6..
     1a0:	.6...6...6...6..
     1b0:	.6...6...6...6..
     1c0:	.6...6...6...6..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	36d0 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	1d90 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	1c94 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	1c94 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	3d74 <__libc_init_array>

	startup_late_hook();
     33a:	bl	36dc <startup_late_hook>
	main();
     33e:	bl	32d4 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff1594
     374:	.word	0x00004b4c
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff1594
     380:	.word	0x1fff1bc8
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1594
     42c:	.word	0x00000000
     430:	.word	0x00004b50

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1598
     460:	.word	0x00004b50
     464:	.word	0x1fff1594
     468:	.word	0x00000000

0000046c <Sequencer::Sequencer()>:
#include "paginator.h"
#include "step.h"
#include "led.h"
#include "piano.h"

Sequencer::Sequencer () {
     46c:	push	{r3, r4, r5, r6, r7, lr}
     46e:	mov	r4, r0
  _controller = new Controller(this);
     470:	movs	r0, #88	; 0x58
     472:	bl	3360 <operator new(unsigned int)>
     476:	mov	r1, r4
     478:	mov	r5, r0
     47a:	bl	1174 <Controller::Controller(Sequencer*)>
     47e:	str	r5, [r4, #8]
  _transport = new Transport(this);
     480:	movs	r0, #16
     482:	bl	3360 <operator new(unsigned int)>
     486:	mov	r1, r4
     488:	mov	r5, r0
     48a:	bl	a74 <Transport::Transport(Sequencer*)>
     48e:	str	r5, [r4, #4]
  _paginator = new Paginator(this);
     490:	movs	r0, #80	; 0x50
     492:	bl	3360 <operator new(unsigned int)>
     496:	mov	r1, r4
     498:	mov	r5, r0
     49a:	bl	be4 <Paginator::Paginator(Sequencer*)>
     49e:	str	r5, [r4, #12]
  _piano = new Piano(this);
     4a0:	movs	r0, #60	; 0x3c
     4a2:	bl	3360 <operator new(unsigned int)>
     4a6:	mov	r1, r4
     4a8:	mov	r5, r0
     4aa:	bl	7a8 <Piano::Piano(Sequencer*)>
  _reversed = false;
     4ae:	movs	r3, #0

Sequencer::Sequencer () {
  _controller = new Controller(this);
  _transport = new Transport(this);
  _paginator = new Paginator(this);
  _piano = new Piano(this);
     4b0:	str	r5, [r4, #52]	; 0x34
  _reversed = false;
     4b2:	strb	r3, [r4, #0]
  _currentStep = 0;
     4b4:	str	r3, [r4, #48]	; 0x30
     4b6:	add.w	r5, r4, #12
     4ba:	add.w	r7, r4, #28

  for (int i = 0; i < 4; i++) {
    _stepsEdit[i] = new Step(this);
     4be:	movs	r0, #32
     4c0:	bl	3360 <operator new(unsigned int)>
     4c4:	mov	r1, r4
     4c6:	mov	r6, r0
     4c8:	bl	ed0 <Step::Step(Sequencer*)>
     4cc:	str.w	r6, [r5, #4]!
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
     4d0:	cmp	r5, r7
    _stepsEdit[i] = new Step(this);
    _stepsPlayback[i] = _stepsEdit[i];
     4d2:	str	r6, [r5, #16]
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
     4d4:	bne.n	4be <Sequencer::Sequencer()+0x52>
    _stepsEdit[i] = new Step(this);
    _stepsPlayback[i] = _stepsEdit[i];
  };
};
     4d6:	mov	r0, r4
     4d8:	pop	{r3, r4, r5, r6, r7, pc}
     4da:	nop

000004dc <Sequencer::tick()>:

// todo: implement sequencer motion record
// todo: implement multi midi channel

void Sequencer::tick() {
     4dc:	push	{r4, lr}
     4de:	mov	r4, r0
  _transport->tick();
     4e0:	ldr	r0, [r0, #4]
     4e2:	bl	bcc <Transport::tick()>
  _controller->tick();
     4e6:	ldr	r0, [r4, #8]
}
     4e8:	ldmia.w	sp!, {r4, lr}
// todo: implement sequencer motion record
// todo: implement multi midi channel

void Sequencer::tick() {
  _transport->tick();
  _controller->tick();
     4ec:	b.w	1334 <Controller::tick()>

000004f0 <Sequencer::reverse()>:
}

void Sequencer::reverse() {
  _reversed = !_reversed;
     4f0:	ldrb	r3, [r0, #0]
     4f2:	eor.w	r3, r3, #1
     4f6:	strb	r3, [r0, #0]
     4f8:	bx	lr
     4fa:	nop

000004fc <Sequencer::step()>:
}

void Sequencer::step () {  
     4fc:	push	{r3, r4, r5, lr}
     4fe:	mov	r4, r0
  if (!_controller->getShiftMode()) {
     500:	ldr	r0, [r0, #8]
     502:	bl	15cc <Controller::getShiftMode()>
     506:	cbz	r0, 52e <Sequencer::step()+0x32>
    _controller->_leds[_currentStep]->blink();
  }

  if (!_reversed) {
     508:	ldrb	r5, [r4, #0]
     50a:	cbnz	r5, 518 <Sequencer::step()+0x1c>
    _currentStep++;
     50c:	ldr	r3, [r4, #48]	; 0x30
     50e:	adds	r3, #1

    if (_currentStep > 3) {
     510:	cmp	r3, #3
  if (!_controller->getShiftMode()) {
    _controller->_leds[_currentStep]->blink();
  }

  if (!_reversed) {
    _currentStep++;
     512:	str	r3, [r4, #48]	; 0x30

    if (_currentStep > 3) {
     514:	bgt.n	540 <Sequencer::step()+0x44>
     516:	pop	{r3, r4, r5, pc}
      _paginator->getNextPlaybackPage(1);
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     518:	ldr	r1, [r4, #48]	; 0x30
     51a:	subs	r1, #1

    if (_currentStep == -1) {
     51c:	adds	r3, r1, #1
    if (_currentStep > 3) {
      _paginator->getNextPlaybackPage(1);
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     51e:	str	r1, [r4, #48]	; 0x30

    if (_currentStep == -1) {
     520:	bne.n	516 <Sequencer::step()+0x1a>
      _paginator->getNextPlaybackPage(-1);
     522:	ldr	r0, [r4, #12]
     524:	bl	c04 <Paginator::getNextPlaybackPage(int)>
      _currentStep = 3;
     528:	movs	r3, #3
     52a:	str	r3, [r4, #48]	; 0x30
    }
  }
};
     52c:	b.n	516 <Sequencer::step()+0x1a>
  _reversed = !_reversed;
}

void Sequencer::step () {  
  if (!_controller->getShiftMode()) {
    _controller->_leds[_currentStep]->blink();
     52e:	ldr	r3, [r4, #48]	; 0x30
     530:	ldr	r2, [r4, #8]
     532:	adds	r3, #14
     534:	mov	r1, r0
     536:	ldr.w	r0, [r2, r3, lsl #2]
     53a:	bl	898 <Led::blink(int)>
     53e:	b.n	508 <Sequencer::step()+0xc>

  if (!_reversed) {
    _currentStep++;

    if (_currentStep > 3) {
      _paginator->getNextPlaybackPage(1);
     540:	movs	r1, #1
     542:	ldr	r0, [r4, #12]
     544:	bl	c04 <Paginator::getNextPlaybackPage(int)>
      _currentStep = 0;
     548:	str	r5, [r4, #48]	; 0x30
     54a:	pop	{r3, r4, r5, pc}

0000054c <Sequencer::resetStep()>:
    }
  }
};

void Sequencer::resetStep () {
  _currentStep = 0;
     54c:	movs	r3, #0
     54e:	str	r3, [r0, #48]	; 0x30
     550:	bx	lr
     552:	nop

00000554 <Button::Button(int, int, Led*, bool, bool, Controller*)>:
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     554:	push	{r3, r4, r5, r6, r7, lr}
     556:	mov	r4, r0
  Led* led,
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
     558:	str	r1, [r0, #0]
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     55a:	ldrb.w	r7, [sp, #24]
     55e:	ldrb.w	r6, [sp, #28]
     562:	ldr	r5, [sp, #32]
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
  _led = led;
     564:	str	r3, [r0, #52]	; 0x34
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
     566:	mov.w	r1, #300	; 0x12c
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
     56a:	str	r2, [r0, #24]
  _reverseButton = reverseButton;
  _holdThreshold = 300;
  _led = led;
  _controller = controller;

  pinMode(pin, INPUT);
     56c:	uxtb	r0, r2
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
     56e:	str	r1, [r4, #44]	; 0x2c
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
     570:	strb	r7, [r4, #16]
  _reverseButton = reverseButton;
     572:	strb	r6, [r4, #17]
  _holdThreshold = 300;
  _led = led;
  _controller = controller;
     574:	str	r5, [r4, #48]	; 0x30

  pinMode(pin, INPUT);
     576:	movs	r1, #0
     578:	bl	1ce0 <pinMode>
};
     57c:	mov	r0, r4
     57e:	pop	{r3, r4, r5, r6, r7, pc}

00000580 <Button::onPressWhileHolding()>:
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
     580:	ldr	r3, [r0, #4]
     582:	cmp	r3, #1
     584:	beq.n	588 <Button::onPressWhileHolding()+0x8>
     586:	bx	lr
     588:	mov	r3, r0
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     58a:	ldr	r0, [r0, #48]	; 0x30

  if (_state == HIGH && _shiftButton) {
     58c:	ldrb	r2, [r3, #16]
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     58e:	ldr	r1, [r0, #80]	; 0x50
// this is actually on press while hold
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
     590:	push	{r4, lr}
  Paginator * paginator = _controller->_sequencer->_paginator;
     592:	ldr	r4, [r1, #12]

  if (_state == HIGH && _shiftButton) {
     594:	cbnz	r2, 59c <Button::onPressWhileHolding()+0x1c>
    if (_controller->getShiftMode()) {
      paginator->previousPage();
    }
  } else if (_state == HIGH && _reverseButton) {
     596:	ldrb	r3, [r3, #17]
     598:	cbnz	r3, 5ae <Button::onPressWhileHolding()+0x2e>
     59a:	pop	{r4, pc}
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
     59c:	bl	15cc <Controller::getShiftMode()>
     5a0:	cmp	r0, #0
     5a2:	beq.n	59a <Button::onPressWhileHolding()+0x1a>
      paginator->previousPage();
     5a4:	mov	r0, r4
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
    }
  }
}
     5a6:	ldmia.w	sp!, {r4, lr}
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
     5aa:	b.w	e9c <Paginator::previousPage()>
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
     5ae:	bl	15cc <Controller::getShiftMode()>
     5b2:	cmp	r0, #0
     5b4:	beq.n	59a <Button::onPressWhileHolding()+0x1a>
      paginator->nextPage();
     5b6:	mov	r0, r4
    }
  }
}
     5b8:	ldmia.w	sp!, {r4, lr}
    if (_controller->getShiftMode()) {
      paginator->previousPage();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
     5bc:	b.w	e68 <Paginator::nextPage()>

000005c0 <Button::onRelease()>:
    }
  }
}

void Button::onRelease () {
     5c0:	push	{r4, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5c2:	ldr	r3, [pc, #116]	; (638 <Button::onRelease()+0x78>)
  if (timeSincePress() < _holdThreshold) {
     5c4:	ldr	r1, [r0, #36]	; 0x24
     5c6:	ldr	r3, [r3, #0]
     5c8:	ldr	r2, [r0, #44]	; 0x2c
      paginator->nextPage();
    }
  }
}

void Button::onRelease () {
     5ca:	sub	sp, #8
     5cc:	str	r3, [sp, #4]
	return ret;
     5ce:	ldr	r3, [sp, #4]
  if (timeSincePress() < _holdThreshold) {
     5d0:	subs	r3, r3, r1
     5d2:	cmp	r2, r3
     5d4:	bls.n	5f6 <Button::onRelease()+0x36>
    if (_shiftButton && !_controller->getShiftMode()) {
     5d6:	ldrb	r3, [r0, #16]
     5d8:	mov	r4, r0
     5da:	cbnz	r3, 5fa <Button::onRelease()+0x3a>
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
     5dc:	ldrb	r3, [r0, #17]
     5de:	cbz	r3, 60e <Button::onRelease()+0x4e>
     5e0:	ldr	r0, [r4, #48]	; 0x30
     5e2:	bl	15cc <Controller::getShiftMode()>
     5e6:	cbnz	r0, 630 <Button::onRelease()+0x70>
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
     5e8:	ldr	r3, [r4, #48]	; 0x30
     5ea:	ldr	r0, [r3, #80]	; 0x50
     5ec:	bl	4f0 <Sequencer::reverse()>
      _led->toggle();
     5f0:	ldr	r0, [r4, #52]	; 0x34
     5f2:	bl	8cc <Led::toggle()>
    } else if (!_reverseButton && !_shiftButton) {
      _led->toggle();
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
    }
  } 
};
     5f6:	add	sp, #8
     5f8:	pop	{r4, pc}
  }
}

void Button::onRelease () {
  if (timeSincePress() < _holdThreshold) {
    if (_shiftButton && !_controller->getShiftMode()) {
     5fa:	ldr	r0, [r0, #48]	; 0x30
     5fc:	bl	15cc <Controller::getShiftMode()>
     600:	cbz	r0, 626 <Button::onRelease()+0x66>
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
     602:	ldrb	r3, [r4, #17]
     604:	cmp	r3, #0
     606:	bne.n	5e0 <Button::onRelease()+0x20>
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
      _led->toggle();
    } else if (!_reverseButton && !_shiftButton) {
     608:	ldrb	r3, [r4, #16]
     60a:	cmp	r3, #0
     60c:	bne.n	5f6 <Button::onRelease()+0x36>
      _led->toggle();
     60e:	ldr	r0, [r4, #52]	; 0x34
     610:	bl	8cc <Led::toggle()>
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
     614:	ldr	r2, [r4, #48]	; 0x30
     616:	ldr	r3, [r4, #0]
     618:	ldr	r2, [r2, #80]	; 0x50
     61a:	adds	r3, #3
     61c:	ldr.w	r0, [r2, r3, lsl #2]
     620:	bl	eec <Step::toggle()>
    }
  } 
};
     624:	b.n	5f6 <Button::onRelease()+0x36>
}

void Button::onRelease () {
  if (timeSincePress() < _holdThreshold) {
    if (_shiftButton && !_controller->getShiftMode()) {
      _controller->toggleMode();
     626:	ldr	r0, [r4, #48]	; 0x30
     628:	bl	13b8 <Controller::toggleMode()>
    } else if (!_reverseButton && !_shiftButton) {
      _led->toggle();
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
    }
  } 
};
     62c:	add	sp, #8
     62e:	pop	{r4, pc}
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
      _led->toggle();
    } else if (!_reverseButton && !_shiftButton) {
     630:	ldrb	r3, [r4, #17]
     632:	cmp	r3, #0
     634:	bne.n	5f6 <Button::onRelease()+0x36>
     636:	b.n	608 <Button::onRelease()+0x48>
     638:	.word	0x1fff15cc

0000063c <Button::onHold()>:
// i have to check if shift mode is true when holding _id 2 after
// changing it all to be ifs or a switch maybe is even better
// the problem is that copy mode is accessed through shift mode
// and swing mode is accessed through chance mode, which is also strange
void Button::onHold () {
  if (_id == 1) {
     63c:	ldr	r3, [r0, #0]
     63e:	cmp	r3, #1
     640:	beq.n	66a <Button::onHold()+0x2e>
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
     642:	cmp	r3, #2
// there two ifs and then two else ifs and that is a bit strange
// i have to check if shift mode is true when holding _id 2 after
// changing it all to be ifs or a switch maybe is even better
// the problem is that copy mode is accessed through shift mode
// and swing mode is accessed through chance mode, which is also strange
void Button::onHold () {
     644:	push	{r4, lr}
     646:	mov	r4, r0
  if (_id == 1) {
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
     648:	beq.n	654 <Button::onHold()+0x18>
    _controller->enterCopyMode();
  } else if (_id == 5) {
     64a:	cmp	r3, #5
     64c:	beq.n	69c <Button::onHold()+0x60>
    _controller->enterChanceMode();
  } else if (_id == 6 && _controller->getChanceMode()) {
     64e:	cmp	r3, #6
     650:	beq.n	670 <Button::onHold()+0x34>
     652:	pop	{r4, pc}
// the problem is that copy mode is accessed through shift mode
// and swing mode is accessed through chance mode, which is also strange
void Button::onHold () {
  if (_id == 1) {
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
     654:	ldr	r0, [r0, #48]	; 0x30
     656:	bl	15cc <Controller::getShiftMode()>
     65a:	cbnz	r0, 660 <Button::onHold()+0x24>
     65c:	ldr	r3, [r4, #0]
     65e:	b.n	64a <Button::onHold()+0xe>
    _controller->enterCopyMode();
     660:	ldr	r0, [r4, #48]	; 0x30
  } else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  } else if (_id == 6 && !_controller->getSwingMode()) {
    _controller->enterMotionMode();
  }
}
     662:	ldmia.w	sp!, {r4, lr}
// and swing mode is accessed through chance mode, which is also strange
void Button::onHold () {
  if (_id == 1) {
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
     666:	b.w	14d4 <Controller::enterCopyMode()>
// changing it all to be ifs or a switch maybe is even better
// the problem is that copy mode is accessed through shift mode
// and swing mode is accessed through chance mode, which is also strange
void Button::onHold () {
  if (_id == 1) {
    _controller->enterShiftMode();
     66a:	ldr	r0, [r0, #48]	; 0x30
     66c:	b.w	144c <Controller::enterShiftMode()>
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } else if (_id == 5) {
    _controller->enterChanceMode();
  } else if (_id == 6 && _controller->getChanceMode()) {
     670:	ldr	r0, [r4, #48]	; 0x30
     672:	bl	15ac <Controller::getChanceMode()>
     676:	cbnz	r0, 692 <Button::onHold()+0x56>
    _controller->enterSwingMode();
  } else if (_id == 6 && !_controller->getSwingMode()) {
     678:	ldr	r3, [r4, #0]
     67a:	cmp	r3, #6
     67c:	bne.n	6a6 <Button::onHold()+0x6a>
     67e:	ldr	r0, [r4, #48]	; 0x30
     680:	bl	15b4 <Controller::getSwingMode()>
     684:	cmp	r0, #0
     686:	bne.n	652 <Button::onHold()+0x16>
    _controller->enterMotionMode();
     688:	ldr	r0, [r4, #48]	; 0x30
  }
}
     68a:	ldmia.w	sp!, {r4, lr}
  } else if (_id == 5) {
    _controller->enterChanceMode();
  } else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  } else if (_id == 6 && !_controller->getSwingMode()) {
    _controller->enterMotionMode();
     68e:	b.w	1574 <Controller::enterMotionMode()>
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } else if (_id == 5) {
    _controller->enterChanceMode();
  } else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
     692:	ldr	r0, [r4, #48]	; 0x30
  } else if (_id == 6 && !_controller->getSwingMode()) {
    _controller->enterMotionMode();
  }
}
     694:	ldmia.w	sp!, {r4, lr}
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } else if (_id == 5) {
    _controller->enterChanceMode();
  } else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
     698:	b.w	1540 <Controller::enterSwingMode()>
  if (_id == 1) {
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } else if (_id == 5) {
    _controller->enterChanceMode();
     69c:	ldr	r0, [r4, #48]	; 0x30
  } else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  } else if (_id == 6 && !_controller->getSwingMode()) {
    _controller->enterMotionMode();
  }
}
     69e:	ldmia.w	sp!, {r4, lr}
  if (_id == 1) {
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } else if (_id == 5) {
    _controller->enterChanceMode();
     6a2:	b.w	1504 <Controller::enterChanceMode()>
     6a6:	pop	{r4, pc}

000006a8 <Button::onHoldRelease()>:
// we still want to quit both modes, but if the user
// releases 2 but still holds 1, we want to stay in shift mode
// == behavior for chance mode and swing mode, maybe they
// could be refactored into 1
void Button::onHoldRelease () {
  if (_id == 1) {
     6a8:	ldr	r3, [r0, #0]
     6aa:	cmp	r3, #1
// both shift and copy. if user releases 1 but not 2 
// we still want to quit both modes, but if the user
// releases 2 but still holds 1, we want to stay in shift mode
// == behavior for chance mode and swing mode, maybe they
// could be refactored into 1
void Button::onHoldRelease () {
     6ac:	push	{r4, lr}
     6ae:	mov	r4, r0
  if (_id == 1) {
     6b0:	beq.n	6c0 <Button::onHoldRelease()+0x18>
    _controller->exitShiftMode();

    if (_controller->getCopyMode()) {
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
     6b2:	cmp	r3, #2
     6b4:	beq.n	6d0 <Button::onHoldRelease()+0x28>
    _controller->exitCopyMode();
  } else if (_id == 5) {
     6b6:	cmp	r3, #5
     6b8:	beq.n	6e4 <Button::onHoldRelease()+0x3c>
    _controller->exitChanceMode();

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
     6ba:	cmp	r3, #6
     6bc:	beq.n	6da <Button::onHoldRelease()+0x32>
     6be:	pop	{r4, pc}
// releases 2 but still holds 1, we want to stay in shift mode
// == behavior for chance mode and swing mode, maybe they
// could be refactored into 1
void Button::onHoldRelease () {
  if (_id == 1) {
    _controller->exitShiftMode();
     6c0:	ldr	r0, [r0, #48]	; 0x30
     6c2:	bl	14ac <Controller::exitShiftMode()>

    if (_controller->getCopyMode()) {
     6c6:	ldr	r0, [r4, #48]	; 0x30
     6c8:	bl	15c4 <Controller::getCopyMode()>
     6cc:	cmp	r0, #0
     6ce:	beq.n	6be <Button::onHoldRelease()+0x16>
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
     6d0:	ldr	r0, [r4, #48]	; 0x30
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitMotionMode();
  }
};
     6d2:	ldmia.w	sp!, {r4, lr}

    if (_controller->getCopyMode()) {
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
     6d6:	b.w	14fc <Controller::exitCopyMode()>

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitMotionMode();
     6da:	ldr	r0, [r0, #48]	; 0x30
  }
};
     6dc:	ldmia.w	sp!, {r4, lr}

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitMotionMode();
     6e0:	b.w	15a0 <Controller::exitMotionMode()>
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
  } else if (_id == 5) {
    _controller->exitChanceMode();
     6e4:	ldr	r0, [r0, #48]	; 0x30
     6e6:	bl	1534 <Controller::exitChanceMode()>

    if (_controller->getSwingMode()) {
     6ea:	ldr	r0, [r4, #48]	; 0x30
     6ec:	bl	15b4 <Controller::getSwingMode()>
     6f0:	cmp	r0, #0
     6f2:	beq.n	6be <Button::onHoldRelease()+0x16>
      _controller->exitSwingMode();
     6f4:	ldr	r0, [r4, #48]	; 0x30
    }
  } else if (_id == 6) {
    _controller->exitMotionMode();
  }
};
     6f6:	ldmia.w	sp!, {r4, lr}
    _controller->exitCopyMode();
  } else if (_id == 5) {
    _controller->exitChanceMode();

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
     6fa:	b.w	1568 <Controller::exitSwingMode()>
     6fe:	nop

00000700 <Button::tick()>:
  } else if (_id == 6) {
    _controller->exitMotionMode();
  }
};

void Button::tick () {
     700:	push	{r4, r5, lr}
     702:	mov	r4, r0
     704:	sub	sp, #28
  _current = digitalRead(_pin);
     706:	ldrb	r0, [r0, #24]
     708:	bl	1cc4 <digitalRead>
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     70c:	cmp	r0, #1
    _controller->exitMotionMode();
  }
};

void Button::tick () {
  _current = digitalRead(_pin);
     70e:	str	r0, [r4, #28]
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     710:	beq.n	74c <Button::tick()+0x4c>
     712:	ldr	r3, [r4, #36]	; 0x24
     714:	ldr	r5, [pc, #140]	; (7a4 <Button::tick()+0xa4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     716:	ldr	r2, [r5, #0]
     718:	str	r2, [sp, #16]
	return ret;
     71a:	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     71c:	ldr	r1, [pc, #132]	; (7a4 <Button::tick()+0xa4>)
    };
    //Serial.println("onHold");
    onHold();
  }

  if (timeSincePress() > 10) {    
     71e:	subs	r2, r2, r3
     720:	cmp	r2, #10
     722:	bls.n	746 <Button::tick()+0x46>
    if (_state != _current) {
     724:	ldr	r2, [r4, #4]
     726:	cmp	r0, r2
     728:	beq.n	746 <Button::tick()+0x46>
      _state = _current;

      if (_state == HIGH) {
     72a:	cmp	r0, #1
    onHold();
  }

  if (timeSincePress() > 10) {    
    if (_state != _current) {
      _state = _current;
     72c:	str	r0, [r4, #4]

      if (_state == HIGH) {
     72e:	beq.n	798 <Button::tick()+0x98>
     730:	ldr	r2, [r1, #0]
     732:	str	r2, [sp, #20]
	return ret;
     734:	ldr	r2, [sp, #20]
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     736:	ldr	r1, [r4, #44]	; 0x2c
     738:	subs	r3, r2, r3
     73a:	cmp	r1, r3
          //Serial.println("onHoldRelease");
          onHoldRelease();
     73c:	mov	r0, r4
      if (_state == HIGH) {
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     73e:	bls.n	78c <Button::tick()+0x8c>
          //Serial.println("onHoldRelease");
          onHoldRelease();
        } else {
          onRelease();
     740:	bl	5c0 <Button::onRelease()>
     744:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     746:	str	r0, [r4, #32]
};
     748:	add	sp, #28
     74a:	pop	{r4, r5, pc}
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     74c:	ldr	r2, [r4, #32]
     74e:	cbz	r2, 780 <Button::tick()+0x80>

  _previous = _current;
};

bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
     750:	cmp	r2, #1
     752:	ldr	r3, [r4, #36]	; 0x24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     754:	ldr	r5, [pc, #76]	; (7a4 <Button::tick()+0xa4>)
     756:	bne.n	716 <Button::tick()+0x16>
     758:	ldr	r2, [r5, #0]
     75a:	str	r2, [sp, #12]
	return ret;
     75c:	ldr	r2, [sp, #12]

  if (currentWentUp()) {
    _firstTime = millis();
  }

  if (currentIsUp() && timeSincePress() > _holdThreshold) {
     75e:	ldr	r1, [r4, #44]	; 0x2c
     760:	subs	r2, r2, r3
     762:	cmp	r1, r2
     764:	bcs.n	716 <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     766:	ldr	r3, [r5, #0]
     768:	str	r3, [sp, #8]
	return ret;
     76a:	ldr	r3, [sp, #8]
    _firstHoldTime = millis();
     76c:	str	r3, [r4, #40]	; 0x28
    if (!_controller->getShiftMode()) {
     76e:	ldr	r0, [r4, #48]	; 0x30
     770:	bl	15cc <Controller::getShiftMode()>
      //Serial.println("shiftMode")
    };
    //Serial.println("onHold");
    onHold();
     774:	mov	r0, r4
     776:	bl	63c <Button::onHold()>
     77a:	ldr	r0, [r4, #28]
     77c:	ldr	r3, [r4, #36]	; 0x24
     77e:	b.n	716 <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     780:	ldr	r5, [pc, #32]	; (7a4 <Button::tick()+0xa4>)
     782:	ldr	r3, [r5, #0]
     784:	str	r3, [sp, #4]
	return ret;
     786:	ldr	r3, [sp, #4]

void Button::tick () {
  _current = digitalRead(_pin);

  if (currentWentUp()) {
    _firstTime = millis();
     788:	str	r3, [r4, #36]	; 0x24
     78a:	b.n	716 <Button::tick()+0x16>
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
          //Serial.println("onHoldRelease");
          onHoldRelease();
     78c:	bl	6a8 <Button::onHoldRelease()>
     790:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     792:	str	r0, [r4, #32]
};
     794:	add	sp, #28
     796:	pop	{r4, r5, pc}
    if (_state != _current) {
      _state = _current;

      if (_state == HIGH) {
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
     798:	mov	r0, r4
     79a:	bl	580 <Button::onPressWhileHolding()>
     79e:	ldr	r0, [r4, #28]
     7a0:	b.n	746 <Button::tick()+0x46>
     7a2:	nop
     7a4:	.word	0x1fff15cc

000007a8 <Piano::Piano(Sequencer*)>:
#include "note.h"
#include "piano.h"
#include "step.h"
#include "sequencer.h"

Piano::Piano (Sequencer* sequencer) {
     7a8:	push	{r3, r4, r5, r6, r7, lr}
     7aa:	ldr	r5, [pc, #56]	; (7e4 <Piano::Piano(Sequencer*)+0x3c>)
     7ac:	mov	r6, r0
     7ae:	mov	r7, r1
     7b0:	ldmia	r5!, {r0, r1, r2, r3}
     7b2:	add.w	r4, r6, #20
     7b6:	stmia	r4!, {r0, r1, r2, r3}
     7b8:	ldmia	r5!, {r0, r1, r2, r3}
     7ba:	stmia	r4!, {r0, r1, r2, r3}
     7bc:	ldr	r3, [r5, #0]
     7be:	str	r3, [r4, #0]
  _sequencer = sequencer;

  _currentScale = 0;
     7c0:	movs	r3, #0
#include "piano.h"
#include "step.h"
#include "sequencer.h"

Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;
     7c2:	str	r7, [r6, #16]

  _currentScale = 0;
     7c4:	str	r3, [r6, #56]	; 0x38
     7c6:	subs	r4, r6, #4
     7c8:	add.w	r7, r6, #12

  for (int i = 0; i < 4; i++) {
    _notes[i] = new Note();
     7cc:	movs	r0, #20
     7ce:	bl	3360 <operator new(unsigned int)>
     7d2:	mov	r5, r0
     7d4:	bl	9b4 <Note::Note()>
     7d8:	str.w	r5, [r4, #4]!
Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;

  _currentScale = 0;

  for (int i = 0; i < 4; i++) {
     7dc:	cmp	r4, r7
     7de:	bne.n	7cc <Piano::Piano(Sequencer*)+0x24>
    _notes[i] = new Note();
  } 
};
     7e0:	mov	r0, r6
     7e2:	pop	{r3, r4, r5, r6, r7, pc}
     7e4:	.word	0x00004764

000007e8 <Piano::tick()>:

void Piano::tick () {
     7e8:	push	{r3, r4, r5, lr}
     7ea:	subs	r4, r0, #4
     7ec:	add.w	r5, r0, #12
  for (int i = 0; i < 4; i++) {
    _notes[i]->tick();
     7f0:	ldr.w	r0, [r4, #4]!
     7f4:	bl	a48 <Note::tick()>
    _notes[i] = new Note();
  } 
};

void Piano::tick () {
  for (int i = 0; i < 4; i++) {
     7f8:	cmp	r4, r5
     7fa:	bne.n	7f0 <Piano::tick()+0x8>
    _notes[i]->tick();
  } 
};
     7fc:	pop	{r3, r4, r5, pc}
     7fe:	nop

00000800 <Piano::play(Step*)>:
  }

  return 0; // <-- hack to get rid of a warning, hate my life
};

void Piano::play (Step* step) {
     800:	push	{r4, r5}
     802:	subs	r3, r0, #4
     804:	add.w	r2, r0, #12
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
    if (!_notes[i]->_active) {
     808:	ldr.w	r4, [r3, #4]!
     80c:	ldr	r5, [r4, #16]
     80e:	cbz	r5, 816 <Piano::play(Step*)+0x16>
    _notes[i]->tick();
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
     810:	cmp	r3, r2
     812:	bne.n	808 <Piano::play(Step*)+0x8>
    if (!_notes[i]->_active) {
      return _notes[i];
    }
  }

  return 0; // <-- hack to get rid of a warning, hate my life
     814:	movs	r4, #0
};

void Piano::play (Step* step) {
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
     816:	ldr	r2, [r1, #4]
     818:	add.w	r2, r2, r2, lsl #1
     81c:	add.w	r2, r0, r2, lsl #2
  note->play(step, scale);
     820:	adds	r2, #20
     822:	mov	r0, r4
};
     824:	pop	{r4, r5}
};

void Piano::play (Step* step) {
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
  note->play(step, scale);
     826:	b.w	9f4 <Note::play(Step*, int*)>
     82a:	nop

0000082c <Piano::transpose(int)>:

// todo: implement global transpose
void Piano::transpose (int value) {
  int newValue = value;

  if (value < 330) {
     82c:	cmp.w	r1, #330	; 0x14a
     830:	blt.n	844 <Piano::transpose(int)+0x18>
    newValue = 2;
  } else if (value < 660) {
     832:	cmp.w	r1, #660	; 0x294
     836:	bge.n	866 <Piano::transpose(int)+0x3a>
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     838:	ldr	r3, [r0, #56]	; 0x38
  int newValue = value;

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
     83a:	movs	r1, #1
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     83c:	cmp	r1, r3
     83e:	bne.n	84c <Piano::transpose(int)+0x20>
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
    }
  }

  _currentScale = newValue;
     840:	str	r1, [r0, #56]	; 0x38
     842:	bx	lr
// todo: implement global transpose
void Piano::transpose (int value) {
  int newValue = value;

  if (value < 330) {
    newValue = 2;
     844:	movs	r1, #2
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     846:	ldr	r3, [r0, #56]	; 0x38
     848:	cmp	r1, r3
     84a:	beq.n	840 <Piano::transpose(int)+0x14>
  auto& scale = _scale[step->pitchScale];
  note->play(step, scale);
};

// todo: implement global transpose
void Piano::transpose (int value) {
     84c:	push	{r4, r5}
     84e:	ldr	r3, [r0, #16]
    newValue = 0;
  }

  if (_currentScale != newValue) {
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
     850:	ldr	r5, [r3, #16]
     852:	ldr	r4, [r3, #20]
     854:	ldr	r2, [r3, #24]
     856:	ldr	r3, [r3, #28]
     858:	str	r1, [r5, #4]
     85a:	str	r1, [r4, #4]
     85c:	str	r1, [r2, #4]
    }
  }

  _currentScale = newValue;
};
     85e:	pop	{r4, r5}
    newValue = 0;
  }

  if (_currentScale != newValue) {
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
     860:	str	r1, [r3, #4]
    }
  }

  _currentScale = newValue;
     862:	str	r1, [r0, #56]	; 0x38
};
     864:	bx	lr

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
  } else if (value <= 1023) {
     866:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     86a:	it	lt
     86c:	movlt	r1, #0
     86e:	b.n	846 <Piano::transpose(int)+0x1a>

00000870 <Led::Led(int, int)>:
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
     870:	push	{r3, r4, r5, lr}
     872:	mov	r4, r0
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     874:	movs	r3, #0
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     876:	movs	r5, #75	; 0x4b
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
     878:	stmia.w	r0, {r1, r2}
  _state = state;
  _blinkLength = 75;
  _blinking = false;
  _blinkingCounter = 0;

  pinMode(_pin, OUTPUT);
     87c:	uxtb	r0, r1

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     87e:	strb	r3, [r4, #16]
  _blinkingCounter = 0;
     880:	str	r3, [r4, #20]
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     882:	str	r5, [r4, #12]
  _blinking = false;
  _blinkingCounter = 0;

  pinMode(_pin, OUTPUT);
     884:	movs	r1, #1
     886:	bl	1ce0 <pinMode>
  digitalWrite(_pin, _state);
     88a:	ldrb	r0, [r4, #0]
     88c:	ldrb	r1, [r4, #4]
     88e:	bl	1cb8 <digitalWrite>
};
     892:	mov	r0, r4
     894:	pop	{r3, r4, r5, pc}
     896:	nop

00000898 <Led::blink(int)>:

void Led::blink (int times) {
     898:	push	{r4, r5, r6, lr}
  digitalWrite(_pin, !digitalRead(_pin));
     89a:	ldrb	r5, [r0, #0]

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     89c:	sub	sp, #8
     89e:	mov	r4, r0
  digitalWrite(_pin, !digitalRead(_pin));
     8a0:	mov	r0, r5

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     8a2:	mov	r6, r1
  digitalWrite(_pin, !digitalRead(_pin));
     8a4:	bl	1cc4 <digitalRead>
     8a8:	clz	r1, r0
     8ac:	lsrs	r1, r1, #5
     8ae:	mov	r0, r5
     8b0:	bl	1cb8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8b4:	ldr	r3, [pc, #16]	; (8c8 <Led::blink(int)+0x30>)
  _blinking = true;
  _blinkingCounter = times;
     8b6:	str	r6, [r4, #20]
     8b8:	ldr	r3, [r3, #0]
     8ba:	str	r3, [sp, #4]
	return ret;
     8bc:	ldr	r3, [sp, #4]
  _lastBlink = millis();  
     8be:	str	r3, [r4, #8]
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
  digitalWrite(_pin, !digitalRead(_pin));
  _blinking = true;
     8c0:	movs	r2, #1
     8c2:	strb	r2, [r4, #16]
  _blinkingCounter = times;
  _lastBlink = millis();  
};
     8c4:	add	sp, #8
     8c6:	pop	{r4, r5, r6, pc}
     8c8:	.word	0x1fff15cc

000008cc <Led::toggle()>:

void Led::toggle () {
  _state = !_state;
     8cc:	ldr	r1, [r0, #4]
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     8ce:	push	{r4, lr}
  _state = !_state;
     8d0:	clz	r1, r1
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     8d4:	mov	r4, r0
  _state = !_state;
     8d6:	lsrs	r1, r1, #5

  digitalWrite(_pin, _state);
     8d8:	ldrb	r0, [r0, #0]
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
  _state = !_state;
     8da:	str	r1, [r4, #4]

  digitalWrite(_pin, _state);
     8dc:	bl	1cb8 <digitalWrite>

  if (_blinking) {
     8e0:	ldrb	r3, [r4, #16]
     8e2:	cbnz	r3, 8e6 <Led::toggle()+0x1a>
     8e4:	pop	{r4, pc}
    digitalWrite(_pin, !_state);
     8e6:	ldr	r1, [r4, #4]
     8e8:	ldrb	r0, [r4, #0]
     8ea:	clz	r1, r1
     8ee:	lsrs	r1, r1, #5
  }
};
     8f0:	ldmia.w	sp!, {r4, lr}
  _state = !_state;

  digitalWrite(_pin, _state);

  if (_blinking) {
    digitalWrite(_pin, !_state);
     8f4:	b.w	1cb8 <digitalWrite>

000008f8 <Led::off()>:
  }
};

void Led::off () {
  _blinking = false;
     8f8:	movs	r1, #0
     8fa:	strb	r1, [r0, #16]
  _state = 0;
     8fc:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     8fe:	ldrb	r0, [r0, #0]
     900:	b.w	1cb8 <digitalWrite>

00000904 <Led::on()>:
}

void Led::on () {
  _blinking = false;
     904:	movs	r3, #0
  _state = 1;
     906:	movs	r1, #1
  _state = 0;
  digitalWrite(_pin, _state);
}

void Led::on () {
  _blinking = false;
     908:	strb	r3, [r0, #16]
  _state = 1;
     90a:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     90c:	ldrb	r0, [r0, #0]
     90e:	b.w	1cb8 <digitalWrite>
     912:	nop

00000914 <Led::tick()>:

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     914:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     916:	ldr	r5, [pc, #112]	; (988 <Led::tick()+0x74>)
     918:	sub	sp, #16
     91a:	ldr	r3, [r5, #0]
     91c:	str	r3, [sp, #0]
	return ret;
     91e:	ldr	r2, [sp, #0]
  // hack
  if (millis() < 3000) return; 
     920:	movw	r3, #2999	; 0xbb7
     924:	cmp	r2, r3
     926:	bls.n	952 <Led::tick()+0x3e>

  if (_blinking && blinkTimePassed()) {
     928:	ldrb	r3, [r0, #16]
     92a:	mov	r4, r0
     92c:	cbnz	r3, 956 <Led::tick()+0x42>
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
    _lastBlink = millis();        
  }

  if (!_blinking && _blinkingCounter > 0 && blinkTimePassed()) {
     92e:	ldr	r1, [r4, #20]
     930:	cmp	r1, #0
     932:	ble.n	952 <Led::tick()+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     934:	ldr	r3, [r5, #0]
     936:	str	r3, [sp, #12]
	return ret;
     938:	ldr	r3, [sp, #12]
     93a:	ldr	r0, [r4, #8]
     93c:	ldr	r2, [r4, #12]
     93e:	subs	r3, r3, r0
     940:	cmp	r3, r2
     942:	bls.n	952 <Led::tick()+0x3e>
    blink(_blinkingCounter - 1);
     944:	subs	r1, #1
     946:	mov	r0, r4
     948:	bl	898 <Led::blink(int)>
    _blinkingCounter--;
     94c:	ldr	r3, [r4, #20]
     94e:	subs	r3, #1
     950:	str	r3, [r4, #20]
  }
};
     952:	add	sp, #16
     954:	pop	{r4, r5, r6, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     956:	ldr	r3, [r5, #0]
     958:	str	r3, [sp, #8]
	return ret;
     95a:	ldr	r3, [sp, #8]

void Led::tick () {
  // hack
  if (millis() < 3000) return; 

  if (_blinking && blinkTimePassed()) {
     95c:	ldr	r1, [r0, #8]
     95e:	ldr	r2, [r0, #12]
     960:	subs	r3, r3, r1
     962:	cmp	r3, r2
     964:	bls.n	952 <Led::tick()+0x3e>
    digitalWrite(_pin, !digitalRead(_pin));
     966:	ldrb	r6, [r0, #0]
     968:	mov	r0, r6
     96a:	bl	1cc4 <digitalRead>
     96e:	clz	r1, r0
     972:	lsrs	r1, r1, #5
     974:	mov	r0, r6
     976:	bl	1cb8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     97a:	ldr	r3, [r5, #0]
     97c:	str	r3, [sp, #4]
	return ret;
     97e:	ldr	r3, [sp, #4]
    _blinking = false;
    _lastBlink = millis();        
     980:	str	r3, [r4, #8]
  // hack
  if (millis() < 3000) return; 

  if (_blinking && blinkTimePassed()) {
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
     982:	movs	r3, #0
     984:	strb	r3, [r4, #16]
     986:	b.n	92e <Led::tick()+0x1a>
     988:	.word	0x1fff15cc

0000098c <setup>:
// channel, this would be cool to program
// for example drum machines or maybe more 
// complex polyphonic stuff
Sequencer* sequencer = new Sequencer();

void setup() {
     98c:	bx	lr
     98e:	nop

00000990 <loop>:
  Serial.begin(9600); 
}

void loop() {
  sequencer->tick();
     990:	ldr	r3, [pc, #4]	; (998 <loop+0x8>)
     992:	ldr	r0, [r3, #0]
     994:	b.w	4dc <Sequencer::tick()>
     998:	.word	0x1fff15b0

0000099c <_GLOBAL__sub_I_sequencer>:
     99c:	push	{r4, lr}
// but actually many tracks with each one 
// having a sequencer but all in the same
// channel, this would be cool to program
// for example drum machines or maybe more 
// complex polyphonic stuff
Sequencer* sequencer = new Sequencer();
     99e:	movs	r0, #56	; 0x38
     9a0:	bl	3360 <operator new(unsigned int)>
     9a4:	mov	r4, r0
     9a6:	bl	46c <Sequencer::Sequencer()>
     9aa:	ldr	r3, [pc, #4]	; (9b0 <_GLOBAL__sub_I_sequencer+0x14>)
     9ac:	str	r4, [r3, #0]
     9ae:	pop	{r4, pc}
     9b0:	.word	0x1fff15b0

000009b4 <Note::Note()>:
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     9b4:	movs	r2, #0
     9b6:	str	r2, [r0, #8]
  _pitch = 0;
     9b8:	str	r2, [r0, #0]
  _velocity = 0;
     9ba:	str	r2, [r0, #4]
  _channel = 0;
     9bc:	str	r2, [r0, #12]
  _active = false;
     9be:	str	r2, [r0, #16]
#include "step.h"
#include "note.h"

Note::Note () {
  reset();
};
     9c0:	bx	lr
     9c2:	nop

000009c4 <Note::noteOn(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     9c4:	subs	r1, #1
// First parameter is the event type (0x09 = note on, 0x08 = note off).
// Second parameter is note-on/note-off, combined with the channel.
// Channel can be anything between 0-15. Typically reported to the user as 1-16.
// Third parameter is the note number (48 = middle C).
// Fourth parameter is the velocity (64 = normal, 127 = fastest).
void Note::noteOn(byte channel, byte pitch, byte velocity) {
     9c6:	push	{r3, lr}
     9c8:	lsls	r1, r1, #8
     9ca:	lsls	r3, r3, #24
     9cc:	and.w	r1, r1, #3840	; 0xf00
     9d0:	and.w	r3, r3, #2130706432	; 0x7f000000
     9d4:	orrs	r3, r1
     9d6:	lsls	r2, r2, #16
     9d8:	orr.w	r3, r3, #36864	; 0x9000
     9dc:	orr.w	r3, r3, #9
     9e0:	and.w	r0, r2, #8323072	; 0x7f0000
     9e4:	orrs	r0, r3
     9e6:	bl	1f44 <usb_midi_write_packed>
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};
     9ea:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     9ee:	b.w	1fe0 <usb_midi_flush_output>
     9f2:	nop

000009f4 <Note::play(Step*, int*)>:
  _velocity = 0;
  _channel = 0;
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
     9f4:	push	{r4, r5}
  _active = true;
  _length = step->length;
     9f6:	ldr	r5, [r1, #16]
  _pitch = scale[step->pitchGrade];
     9f8:	ldr	r3, [r1, #8]
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
     9fa:	str	r5, [r0, #8]
  _channel = 0;
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
     9fc:	movs	r5, #1
     9fe:	str	r5, [r0, #16]
  _length = step->length;
  _pitch = scale[step->pitchGrade];
     a00:	ldr.w	r2, [r2, r3, lsl #2]
  _velocity = step->velocity;
     a04:	ldr	r3, [r1, #12]
     a06:	str	r3, [r0, #4]
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
  _pitch = scale[step->pitchGrade];
     a08:	str	r2, [r0, #0]
  _velocity = step->velocity;
  // String noteLog = "Playing note, length: ";
  // //Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
     a0a:	uxtb	r3, r3
     a0c:	uxtb	r2, r2
     a0e:	ldrb	r1, [r0, #12]
};
     a10:	pop	{r4, r5}
  _length = step->length;
  _pitch = scale[step->pitchGrade];
  _velocity = step->velocity;
  // String noteLog = "Playing note, length: ";
  // //Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
     a12:	b.w	9c4 <Note::noteOn(unsigned char, unsigned char, unsigned char)>
     a16:	nop

00000a18 <Note::noteOff(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     a18:	subs	r1, #1
void Note::noteOn(byte channel, byte pitch, byte velocity) {
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};

void Note::noteOff(byte channel, byte pitch, byte velocity) {
     a1a:	push	{r3, lr}
     a1c:	lsls	r1, r1, #8
     a1e:	lsls	r3, r3, #24
     a20:	and.w	r1, r1, #3840	; 0xf00
     a24:	and.w	r3, r3, #2130706432	; 0x7f000000
     a28:	orrs	r3, r1
     a2a:	lsls	r2, r2, #16
     a2c:	orr.w	r3, r3, #32768	; 0x8000
     a30:	orr.w	r3, r3, #8
     a34:	and.w	r0, r2, #8323072	; 0x7f0000
     a38:	orrs	r0, r3
     a3a:	bl	1f44 <usb_midi_write_packed>
  usbMIDI.sendNoteOff(pitch, velocity, channel);
  usbMIDI.send_now();
};
     a3e:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     a42:	b.w	1fe0 <usb_midi_flush_output>
     a46:	nop

00000a48 <Note::tick()>:
Note::Note () {
  reset();
};

void Note::tick() {
  if (!_active) return;
     a48:	ldr	r2, [r0, #16]
     a4a:	cbz	r2, a56 <Note::tick()+0xe>

  _length--;
     a4c:	ldr	r2, [r0, #8]
     a4e:	subs	r2, #1

  if (_length <= 0) {
     a50:	cmp	r2, #0
};

void Note::tick() {
  if (!_active) return;

  _length--;
     a52:	str	r2, [r0, #8]

  if (_length <= 0) {
     a54:	ble.n	a58 <Note::tick()+0x10>
     a56:	bx	lr

Note::Note () {
  reset();
};

void Note::tick() {
     a58:	push	{r4, lr}
  _length--;

  if (_length <= 0) {
    // String noteLog = "Note off, pitch: ";
    // //Serial.println(noteLog + _pitch);    
    noteOff(_channel, _pitch, _velocity);
     a5a:	ldrb	r3, [r0, #4]
     a5c:	ldrb	r2, [r0, #0]
     a5e:	ldrb	r1, [r0, #12]
     a60:	mov	r4, r0
     a62:	bl	a18 <Note::noteOff(unsigned char, unsigned char, unsigned char)>
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     a66:	movs	r3, #0
     a68:	str	r3, [r4, #8]
  _pitch = 0;
     a6a:	str	r3, [r4, #0]
  _velocity = 0;
     a6c:	str	r3, [r4, #4]
  _channel = 0;
     a6e:	str	r3, [r4, #12]
  _active = false;
     a70:	str	r3, [r4, #16]
     a72:	pop	{r4, pc}

00000a74 <Transport::Transport(Sequencer*)>:
// this class has to keep track of the midi packets coming from the outside
// it also has the implementation of the top right knob that controls resolution
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
     a74:	push	{r4}
  _sequencer = sequencer;
  _state = false;
  max_ppqn = 24;
     a76:	movs	r4, #24
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     a78:	movs	r2, #0
  max_ppqn = 24;
     a7a:	stmia.w	r0, {r1, r4}
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     a7e:	str	r2, [r0, #12]
  max_ppqn = 24;
  ppqn = 0;
     a80:	str	r2, [r0, #8]
};
     a82:	ldr.w	r4, [sp], #4
     a86:	bx	lr

00000a88 <Transport::controlTempo(int)>:
int Transport::getPPQN () {
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
     a88:	cmp.w	r1, #400	; 0x190
     a8c:	bge.n	a9e <Transport::controlTempo(int)+0x16>
    max_ppqn = 6;

    if (ppqn >= 6) {
     a8e:	ldr	r3, [r0, #8]
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     a90:	movs	r2, #6

    if (ppqn >= 6) {
     a92:	cmp	r3, #5
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     a94:	str	r2, [r0, #4]

    if (ppqn >= 6) {
     a96:	ble.n	ab4 <Transport::controlTempo(int)+0x2c>
      ppqn = 0;
     a98:	movs	r3, #0
     a9a:	str	r3, [r0, #8]
     a9c:	bx	lr
    }
  } else if (value >= 400 && value < 800) {
     a9e:	sub.w	r3, r1, #400	; 0x190
     aa2:	cmp.w	r3, #400	; 0x190
     aa6:	bcc.n	ab6 <Transport::controlTempo(int)+0x2e>
    max_ppqn = 8;

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 800 && value <= 1023) {
     aa8:	sub.w	r1, r1, #800	; 0x320
     aac:	cmp	r1, #223	; 0xdf
    max_ppqn = 10;
     aae:	itt	ls
     ab0:	movls	r3, #10
     ab2:	strls	r3, [r0, #4]
     ab4:	bx	lr
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;

    if (ppqn >= 8) {
     ab6:	ldr	r3, [r0, #8]

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     ab8:	movs	r2, #8

    if (ppqn >= 8) {
     aba:	cmp	r3, #7

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     abc:	str	r2, [r0, #4]

    if (ppqn >= 8) {
     abe:	bgt.n	a98 <Transport::controlTempo(int)+0x10>
     ac0:	bx	lr
     ac2:	nop

00000ac4 <Transport::advancePPQN()>:
    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
     ac4:	push	{r3, r4, r5, lr}
  ++ppqn;
     ac6:	ldr	r3, [r0, #8]

  _sequencer->_piano->tick();
     ac8:	ldr	r2, [r0, #0]
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     aca:	adds	r3, #1
    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
     acc:	mov	r4, r0
  ++ppqn;
     ace:	str	r3, [r0, #8]

  _sequencer->_piano->tick();
     ad0:	ldr	r0, [r2, #52]	; 0x34
     ad2:	bl	7e8 <Piano::tick()>
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     ad6:	ldmia.w	r4, {r1, r2}
void Transport::advancePPQN () {
  ++ppqn;

  _sequencer->_piano->tick();

  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
     ada:	ldr	r3, [r1, #48]	; 0x30
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     adc:	ldr	r0, [r4, #8]
void Transport::advancePPQN () {
  ++ppqn;

  _sequencer->_piano->tick();

  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
     ade:	adds	r3, #8
     ae0:	ldr.w	r5, [r1, r3, lsl #2]
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     ae4:	ldr	r3, [r5, #28]
     ae6:	add	r3, r2
     ae8:	cmp	r0, r3
     aea:	beq.n	af2 <Transport::advancePPQN()+0x2e>
    if (rand <= current->chance) _sequencer->_piano->play(current);
  }

  // this maybe should go before so that the sequencer does not get
  // out of sync from the master
  if (ppqn == max_ppqn) {
     aec:	cmp	r0, r2
     aee:	beq.n	b0a <Transport::advancePPQN()+0x46>
     af0:	pop	{r3, r4, r5, pc}
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     af2:	ldrb	r3, [r5, #20]
     af4:	cmp	r3, #0
     af6:	beq.n	aec <Transport::advancePPQN()+0x28>
    int rand = random(100);
     af8:	movs	r0, #100	; 0x64
     afa:	bl	3354 <random(unsigned long)>
    if (rand <= current->chance) _sequencer->_piano->play(current);
     afe:	ldr	r3, [r5, #24]
     b00:	cmp	r0, r3
     b02:	ble.n	b16 <Transport::advancePPQN()+0x52>
     b04:	ldr	r0, [r4, #8]
     b06:	ldr	r2, [r4, #4]
     b08:	b.n	aec <Transport::advancePPQN()+0x28>
  }

  // this maybe should go before so that the sequencer does not get
  // out of sync from the master
  if (ppqn == max_ppqn) {
    _sequencer->step();
     b0a:	ldr	r0, [r4, #0]
     b0c:	bl	4fc <Sequencer::step()>
    ppqn = 0;
     b10:	movs	r3, #0
     b12:	str	r3, [r4, #8]
     b14:	pop	{r3, r4, r5, pc}
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
     b16:	ldr	r3, [r4, #0]
     b18:	mov	r1, r5
     b1a:	ldr	r0, [r3, #52]	; 0x34
     b1c:	bl	800 <Piano::play(Step*)>
     b20:	b.n	b04 <Transport::advancePPQN()+0x40>
     b22:	nop

00000b24 <Transport::startPPQN()>:
    _sequencer->step();
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     b24:	push	{r4, lr}
  _state = true;
     b26:	movs	r2, #1
    _sequencer->step();
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     b28:	mov	r4, r0
  _state = true;
  ppqn = 0;
     b2a:	movs	r3, #0
    ppqn = 0;
  }
};

void Transport::startPPQN () {
  _state = true;
     b2c:	str	r2, [r0, #12]
  ppqn = 0;
     b2e:	str	r3, [r0, #8]
  _sequencer->step();
     b30:	ldr	r0, [r0, #0]
     b32:	bl	4fc <Sequencer::step()>
  _sequencer->_piano->tick();
     b36:	ldr	r3, [r4, #0]
     b38:	ldr	r0, [r3, #52]	; 0x34
     b3a:	bl	7e8 <Piano::tick()>
  _sequencer->_controller->_leds[5]->toggle();
     b3e:	ldr	r3, [r4, #0]
     b40:	ldr	r3, [r3, #8]
};
     b42:	ldmia.w	sp!, {r4, lr}
void Transport::startPPQN () {
  _state = true;
  ppqn = 0;
  _sequencer->step();
  _sequencer->_piano->tick();
  _sequencer->_controller->_leds[5]->toggle();
     b46:	ldr	r0, [r3, #76]	; 0x4c
     b48:	b.w	8cc <Led::toggle()>

00000b4c <Transport::stopPPQN()>:
};

void Transport::stopPPQN () {
     b4c:	push	{r4, lr}
  _state = false;
     b4e:	movs	r3, #0
  _sequencer->step();
  _sequencer->_piano->tick();
  _sequencer->_controller->_leds[5]->toggle();
};

void Transport::stopPPQN () {
     b50:	mov	r4, r0
  _state = false;
     b52:	str	r3, [r0, #12]
  ppqn = 0;
     b54:	str	r3, [r0, #8]
  _sequencer->resetStep();
     b56:	ldr	r0, [r0, #0]
     b58:	bl	54c <Sequencer::resetStep()>
  _sequencer->_controller->_leds[5]->toggle();
     b5c:	ldr	r3, [r4, #0]
     b5e:	ldr	r3, [r3, #8]
};
     b60:	ldmia.w	sp!, {r4, lr}

void Transport::stopPPQN () {
  _state = false;
  ppqn = 0;
  _sequencer->resetStep();
  _sequencer->_controller->_leds[5]->toggle();
     b64:	ldr	r0, [r3, #76]	; 0x4c
     b66:	b.w	8cc <Led::toggle()>
     b6a:	nop

00000b6c <Transport::processMidi()>:
  } else if (value >= 800 && value <= 1023) {
    max_ppqn = 10;
  }
};

void Transport::processMidi () {
     b6c:	push	{r4, lr}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     b6e:	ldr	r3, [pc, #76]	; (bbc <Transport::processMidi()+0x50>)
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     b70:	ldrb	r3, [r3, #0]
     b72:	cmp	r3, #250	; 0xfa
  } else if (value >= 800 && value <= 1023) {
    max_ppqn = 10;
  }
};

void Transport::processMidi () {
     b74:	mov	r4, r0
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     b76:	beq.n	ba2 <Transport::processMidi()+0x36>
     b78:	cmp	r3, #252	; 0xfc
     b7a:	beq.n	b8a <Transport::processMidi()+0x1e>
     b7c:	cmp	r3, #248	; 0xf8
     b7e:	beq.n	b82 <Transport::processMidi()+0x16>
     b80:	pop	{r4, pc}
      break;

    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}
     b82:	ldmia.w	sp!, {r4, lr}
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
     b86:	b.w	ac4 <Transport::advancePPQN()>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     b8a:	movs	r1, #4
     b8c:	ldr	r0, [pc, #48]	; (bc0 <Transport::processMidi()+0x54>)
     b8e:	bl	16a8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     b92:	ldr	r0, [pc, #48]	; (bc4 <Transport::processMidi()+0x58>)
     b94:	bl	321c <Print::println()>
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      Serial.println("STOP");
      stopPPQN();
     b98:	mov	r0, r4
      break;

    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}
     b9a:	ldmia.w	sp!, {r4, lr}
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      Serial.println("STOP");
      stopPPQN();
     b9e:	b.w	b4c <Transport::stopPPQN()>
     ba2:	movs	r1, #5
     ba4:	ldr	r0, [pc, #32]	; (bc8 <Transport::processMidi()+0x5c>)
     ba6:	bl	16a8 <usb_serial_write>
     baa:	ldr	r0, [pc, #24]	; (bc4 <Transport::processMidi()+0x58>)
     bac:	bl	321c <Print::println()>
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      Serial.println("START");
      startPPQN();
     bb0:	mov	r0, r4
      break;

    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}
     bb2:	ldmia.w	sp!, {r4, lr}
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      Serial.println("START");
      startPPQN();
     bb6:	b.w	b24 <Transport::startPPQN()>
     bba:	nop
     bbc:	.word	0x1fff1a8c
     bc0:	.word	0x00004790
     bc4:	.word	0x1fff0c48
     bc8:	.word	0x00004788

00000bcc <Transport::tick()>:
  _state = false;
  max_ppqn = 24;
  ppqn = 0;
};

void Transport::tick () {
     bcc:	push	{r4, lr}
     bce:	mov	r4, r0
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     bd0:	movs	r0, #0
     bd2:	bl	200c <usb_midi_read>
  if (usbMIDI.read()) {
     bd6:	cbnz	r0, bda <Transport::tick()+0xe>
     bd8:	pop	{r4, pc}
    processMidi();
     bda:	mov	r0, r4
  }
};
     bdc:	ldmia.w	sp!, {r4, lr}
  ppqn = 0;
};

void Transport::tick () {
  if (usbMIDI.read()) {
    processMidi();
     be0:	b.w	b6c <Transport::processMidi()>

00000be4 <Paginator::Paginator(Sequencer*)>:
#include "paginator.h"
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
     be4:	push	{r3, r4, r5, lr}
     be6:	movs	r2, #64	; 0x40
     be8:	mov	r4, r0
     bea:	mov	r5, r1
     bec:	adds	r0, #16
     bee:	movs	r1, #0
     bf0:	bl	4344 <memset>
  _sequencer = sequencer;
  _currentEditPage = 0;
     bf4:	movs	r3, #0
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
     bf6:	str	r5, [r4, #0]
  _currentEditPage = 0;
     bf8:	str	r3, [r4, #4]
  _createdPages = 0;
     bfa:	str	r3, [r4, #12]
  _currentPlaybackPage = 0;
     bfc:	str	r3, [r4, #8]
};
     bfe:	mov	r0, r4
     c00:	pop	{r3, r4, r5, pc}
     c02:	nop

00000c04 <Paginator::getNextPlaybackPage(int)>:
int Paginator::getPage () {
  return _currentEditPage;
};

void Paginator::getNextPlaybackPage (int direction) {
  if (_createdPages == 0) return;
     c04:	ldr	r2, [r0, #12]
     c06:	cbz	r2, c3a <Paginator::getNextPlaybackPage(int)+0x36>

  if (_currentPlaybackPage < _createdPages && direction == 1) {
     c08:	ldr	r3, [r0, #8]
     c0a:	cmp	r2, r3

int Paginator::getPage () {
  return _currentEditPage;
};

void Paginator::getNextPlaybackPage (int direction) {
     c0c:	push	{r4}
  if (_createdPages == 0) return;

  if (_currentPlaybackPage < _createdPages && direction == 1) {
     c0e:	ble.n	c14 <Paginator::getNextPlaybackPage(int)+0x10>
     c10:	cmp	r1, #1
     c12:	beq.n	c4e <Paginator::getNextPlaybackPage(int)+0x4a>
    _currentPlaybackPage++;
  } else if (_currentPlaybackPage > 0 && direction == -1) {
     c14:	cmp	r3, #0
     c16:	ble.n	c3c <Paginator::getNextPlaybackPage(int)+0x38>
     c18:	adds	r1, #1
     c1a:	beq.n	c54 <Paginator::getNextPlaybackPage(int)+0x50>
    _currentPlaybackPage--;
  } else if (_currentPlaybackPage == 0 && direction == -1) {
    _currentPlaybackPage = _createdPages;
  } else if (_currentPlaybackPage == _createdPages) {
     c1c:	cmp	r2, r3
     c1e:	beq.n	c48 <Paginator::getNextPlaybackPage(int)+0x44>

  // Serial.println("Current playback page");
  // Serial.println(_currentPlaybackPage);

  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
     c20:	add.w	r1, r0, r3, lsl #4
     c24:	ldr	r2, [r0, #0]
     c26:	ldr	r4, [r1, #16]
     c28:	add.w	r0, r1, #20
     c2c:	ldmia	r0, {r0, r1, r3}
     c2e:	str	r4, [r2, #32]
  }
};
     c30:	ldr.w	r4, [sp], #4

  // Serial.println("Current playback page");
  // Serial.println(_currentPlaybackPage);

  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
     c34:	str	r0, [r2, #36]	; 0x24
     c36:	str	r1, [r2, #40]	; 0x28
     c38:	str	r3, [r2, #44]	; 0x2c
  }
};
     c3a:	bx	lr

  if (_currentPlaybackPage < _createdPages && direction == 1) {
    _currentPlaybackPage++;
  } else if (_currentPlaybackPage > 0 && direction == -1) {
    _currentPlaybackPage--;
  } else if (_currentPlaybackPage == 0 && direction == -1) {
     c3c:	bne.n	c1c <Paginator::getNextPlaybackPage(int)+0x18>
     c3e:	adds	r1, #1
     c40:	bne.n	c20 <Paginator::getNextPlaybackPage(int)+0x1c>
    _currentPlaybackPage = _createdPages;
     c42:	str	r2, [r0, #8]
     c44:	mov	r3, r2
     c46:	b.n	c20 <Paginator::getNextPlaybackPage(int)+0x1c>
  } else if (_currentPlaybackPage == _createdPages) {
    _currentPlaybackPage = 0;
     c48:	movs	r3, #0
     c4a:	str	r3, [r0, #8]
     c4c:	b.n	c20 <Paginator::getNextPlaybackPage(int)+0x1c>

void Paginator::getNextPlaybackPage (int direction) {
  if (_createdPages == 0) return;

  if (_currentPlaybackPage < _createdPages && direction == 1) {
    _currentPlaybackPage++;
     c4e:	adds	r3, #1
     c50:	str	r3, [r0, #8]
     c52:	b.n	c20 <Paginator::getNextPlaybackPage(int)+0x1c>
  } else if (_currentPlaybackPage > 0 && direction == -1) {
    _currentPlaybackPage--;
     c54:	subs	r3, #1
     c56:	str	r3, [r0, #8]
     c58:	b.n	c20 <Paginator::getNextPlaybackPage(int)+0x1c>
     c5a:	nop

00000c5c <Paginator::setLeds(unsigned int)>:
  step1->swing = step2->swing;
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
     c5c:	ldr	r3, [r0, #0]
     c5e:	adds	r0, r1, #4
  Led * newStepLed = _sequencer->_controller->_leds[i];
     c60:	ldr	r2, [r3, #8]

  if (newStep->_state == 0) {
     c62:	ldr.w	r3, [r3, r0, lsl #2]
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];
     c66:	adds	r1, #14

  if (newStep->_state == 0) {
     c68:	ldrb	r3, [r3, #20]
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];
     c6a:	ldr.w	r0, [r2, r1, lsl #2]

  if (newStep->_state == 0) {
     c6e:	cbz	r3, c74 <Paginator::setLeds(unsigned int)+0x18>
    newStepLed->off();
  } else {
    newStepLed->on();
     c70:	b.w	904 <Led::on()>
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];

  if (newStep->_state == 0) {
    newStepLed->off();
     c74:	b.w	8f8 <Led::off()>

00000c78 <Paginator::changePage(int)>:
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     c78:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     c7c:	cmp	r1, #1
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     c7e:	sub	sp, #8
     c80:	mov	r7, r1
     c82:	mov	r4, r0
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     c84:	beq.w	e0c <Paginator::changePage(int)+0x194>
     c88:	ldr	r3, [r4, #4]
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     c8a:	movs	r5, #0
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];
     c8c:	add.w	r2, r5, r3, lsl #2
     c90:	ldr	r1, [r4, #0]
     c92:	adds	r6, r5, #4
     c94:	adds	r2, #4

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
     c96:	add	r3, r7
     c98:	add.w	r3, r5, r3, lsl #2
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];
     c9c:	ldr.w	r1, [r1, r6, lsl #2]
     ca0:	str.w	r1, [r4, r2, lsl #2]

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
     ca4:	adds	r3, #4
     ca6:	ldr.w	r3, [r4, r3, lsl #2]
     caa:	cmp	r3, #0
     cac:	beq.n	d9e <Paginator::changePage(int)+0x126>
     cae:	movs	r1, #19
     cb0:	ldr	r0, [pc, #364]	; (e20 <Paginator::changePage(int)+0x1a8>)
     cb2:	bl	16a8 <usb_serial_write>
     cb6:	ldr	r0, [pc, #364]	; (e24 <Paginator::changePage(int)+0x1ac>)
     cb8:	bl	321c <Print::println()>
      _sequencer->_stepsEdit[i] = step;
      _pages[_currentEditPage + direction][i] = step;
    } else {
      Serial.println("loading from memory");

      Step * step = new Step(_sequencer);
     cbc:	movs	r0, #32
     cbe:	bl	3360 <operator new(unsigned int)>
     cc2:	ldr	r1, [r4, #0]
     cc4:	mov	r8, r0
     cc6:	bl	ed0 <Step::Step(Sequencer*)>

      if (_sequencer->_controller->getCopyMode()) {
     cca:	ldr	r3, [r4, #0]
     ccc:	ldr	r0, [r3, #8]
     cce:	bl	15c4 <Controller::getCopyMode()>
     cd2:	cmp	r0, #0
     cd4:	beq.n	d4e <Paginator::changePage(int)+0xd6>
     cd6:	movs	r1, #29
     cd8:	ldr	r0, [pc, #332]	; (e28 <Paginator::changePage(int)+0x1b0>)
     cda:	bl	16a8 <usb_serial_write>
     cde:	ldr	r0, [pc, #324]	; (e24 <Paginator::changePage(int)+0x1ac>)
     ce0:	bl	321c <Print::println()>
        Serial.println("copying and setting in memory");

        copyStep(step, _sequencer->_stepsEdit[i]);
     ce4:	ldr	r3, [r4, #0]
     ce6:	ldr.w	r3, [r3, r6, lsl #2]
// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     cea:	add.w	r0, r3, #8
     cee:	ldmia	r0, {r0, r1, r2}
     cf0:	str	r2, [sp, #4]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     cf2:	ldr	r2, [r3, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
     cf4:	ldrb.w	ip, [r3, #20]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     cf8:	str.w	r2, [r8, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     cfc:	ldr	r2, [r3, #24]
  step1->swing = step2->swing;
     cfe:	ldr	r3, [r3, #28]
     d00:	str.w	r3, [r8, #28]
// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     d04:	ldr	r3, [sp, #4]
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     d06:	str.w	r2, [r8, #24]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     d0a:	str.w	r0, [r8, #8]
  step1->velocity = step2->velocity;
     d0e:	str.w	r1, [r8, #12]
  step1->length = step2->length;
     d12:	str.w	r3, [r8, #16]
  step1->_state = step2->_state;
     d16:	strb.w	ip, [r8, #20]
     d1a:	movs	r1, #25
     d1c:	ldr	r0, [pc, #268]	; (e2c <Paginator::changePage(int)+0x1b4>)
     d1e:	bl	16a8 <usb_serial_write>
     d22:	ldr	r0, [pc, #256]	; (e24 <Paginator::changePage(int)+0x1ac>)
     d24:	bl	321c <Print::println()>
        copyStep(step, _pages[_currentEditPage + direction][i]);
      }

      Serial.println("Setting steps for editing");
      _pages[_currentEditPage + direction][i] = step;
      _sequencer->_stepsEdit[i] = step;
     d28:	ldmia.w	r4, {r2, r3}

        copyStep(step, _pages[_currentEditPage + direction][i]);
      }

      Serial.println("Setting steps for editing");
      _pages[_currentEditPage + direction][i] = step;
     d2c:	add	r3, r7
     d2e:	add.w	r3, r5, r3, lsl #2
     d32:	adds	r3, #4
     d34:	str.w	r8, [r4, r3, lsl #2]
      _sequencer->_stepsEdit[i] = step;
     d38:	str.w	r8, [r2, r6, lsl #2]
    }
    
    setLeds(i);
     d3c:	mov	r1, r5
     d3e:	mov	r0, r4
    _createdPages++;
    // //Serial.println("Incrementing created pages to:");
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
     d40:	adds	r5, #1
      Serial.println("Setting steps for editing");
      _pages[_currentEditPage + direction][i] = step;
      _sequencer->_stepsEdit[i] = step;
    }
    
    setLeds(i);
     d42:	bl	c5c <Paginator::setLeds(unsigned int)>
    _createdPages++;
    // //Serial.println("Incrementing created pages to:");
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
     d46:	cmp	r5, #4
     d48:	beq.n	d98 <Paginator::changePage(int)+0x120>
     d4a:	ldr	r3, [r4, #4]
     d4c:	b.n	c8c <Paginator::changePage(int)+0x14>
     d4e:	movs	r1, #24
     d50:	ldr	r0, [pc, #220]	; (e30 <Paginator::changePage(int)+0x1b8>)
     d52:	bl	16a8 <usb_serial_write>
     d56:	ldr	r0, [pc, #204]	; (e24 <Paginator::changePage(int)+0x1ac>)
     d58:	bl	321c <Print::println()>

        copyStep(step, _sequencer->_stepsEdit[i]);
      } else {
        Serial.println("copying only from memory");

        copyStep(step, _pages[_currentEditPage + direction][i]);
     d5c:	ldr	r3, [r4, #4]
     d5e:	add	r3, r7
     d60:	add.w	r3, r5, r3, lsl #2
     d64:	adds	r3, #4
     d66:	ldr.w	r3, [r4, r3, lsl #2]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     d6a:	ldr	r1, [r3, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     d6c:	ldr	r0, [r3, #12]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     d6e:	ldr	r2, [r3, #8]
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
     d70:	ldrb.w	ip, [r3, #20]

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     d74:	str.w	r0, [r8, #12]
  step1->length = step2->length;
     d78:	ldr	r0, [r3, #16]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     d7a:	str.w	r1, [r8, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     d7e:	ldr	r1, [r3, #24]
  step1->swing = step2->swing;
     d80:	ldr	r3, [r3, #28]
     d82:	str.w	r3, [r8, #28]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     d86:	str.w	r2, [r8, #8]
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     d8a:	str.w	r0, [r8, #16]
  step1->_state = step2->_state;
     d8e:	strb.w	ip, [r8, #20]
  step1->chance = step2->chance;
     d92:	str.w	r1, [r8, #24]
     d96:	b.n	d1a <Paginator::changePage(int)+0xa2>
      _sequencer->_stepsEdit[i] = step;
    }
    
    setLeds(i);
  }
};
     d98:	add	sp, #8
     d9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d9e:	movs	r1, #12
     da0:	ldr	r0, [pc, #144]	; (e34 <Paginator::changePage(int)+0x1bc>)
     da2:	bl	16a8 <usb_serial_write>
     da6:	ldr	r0, [pc, #124]	; (e24 <Paginator::changePage(int)+0x1ac>)
     da8:	bl	321c <Print::println()>

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
      Serial.println("no steps yet");
      Step * step = new Step(_sequencer);
     dac:	movs	r0, #32
     dae:	bl	3360 <operator new(unsigned int)>
     db2:	ldr	r1, [r4, #0]
     db4:	mov	r8, r0
     db6:	bl	ed0 <Step::Step(Sequencer*)>

      if (_sequencer->_controller->getCopyMode()) {
     dba:	ldr	r3, [r4, #0]
     dbc:	ldr	r0, [r3, #8]
     dbe:	bl	15c4 <Controller::getCopyMode()>
     dc2:	cbnz	r0, dda <Paginator::changePage(int)+0x162>
     dc4:	ldr	r0, [r4, #0]
        copyStep(step, _sequencer->_stepsEdit[i]);
      }

      _sequencer->_stepsEdit[i] = step;
      _pages[_currentEditPage + direction][i] = step;
     dc6:	ldr	r3, [r4, #4]

      if (_sequencer->_controller->getCopyMode()) {
        copyStep(step, _sequencer->_stepsEdit[i]);
      }

      _sequencer->_stepsEdit[i] = step;
     dc8:	str.w	r8, [r0, r6, lsl #2]
      _pages[_currentEditPage + direction][i] = step;
     dcc:	add	r3, r7
     dce:	add.w	r3, r5, r3, lsl #2
     dd2:	adds	r3, #4
     dd4:	str.w	r8, [r4, r3, lsl #2]
     dd8:	b.n	d3c <Paginator::changePage(int)+0xc4>
    if (_pages[_currentEditPage + direction][i] == 0) {
      Serial.println("no steps yet");
      Step * step = new Step(_sequencer);

      if (_sequencer->_controller->getCopyMode()) {
        copyStep(step, _sequencer->_stepsEdit[i]);
     dda:	ldr	r0, [r4, #0]
     ddc:	ldr.w	r3, [r0, r6, lsl #2]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     de0:	ldr	r1, [r3, #4]
  step1->pitchGrade = step2->pitchGrade;
     de2:	ldr	r2, [r3, #8]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     de4:	str.w	r1, [r8, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     de8:	ldr	r1, [r3, #12]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     dea:	str.w	r2, [r8, #8]
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     dee:	ldr	r2, [r3, #16]

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     df0:	str.w	r1, [r8, #12]
  step1->length = step2->length;
  step1->_state = step2->_state;
     df4:	ldrb	r1, [r3, #20]
// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     df6:	str.w	r2, [r8, #16]
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     dfa:	ldr	r2, [r3, #24]
  step1->swing = step2->swing;
     dfc:	ldr	r3, [r3, #28]
     dfe:	str.w	r3, [r8, #28]
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
     e02:	strb.w	r1, [r8, #20]
  step1->chance = step2->chance;
     e06:	str.w	r2, [r8, #24]
     e0a:	b.n	dc6 <Paginator::changePage(int)+0x14e>

  debugPages();
};

void Paginator::changePage (int direction) {
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     e0c:	ldr	r2, [r0, #12]
     e0e:	cmp	r2, #2
     e10:	bgt.w	c88 <Paginator::changePage(int)+0x10>
     e14:	ldr	r3, [r0, #4]
     e16:	cmp	r2, r3
    // this is a nasty flag i should get rid of
    _createdPages++;
     e18:	itt	eq
     e1a:	addeq	r2, r3, #1
     e1c:	streq	r2, [r0, #12]
     e1e:	b.n	c8a <Paginator::changePage(int)+0x12>
     e20:	.word	0x000047a8
     e24:	.word	0x1fff0c48
     e28:	.word	0x000047bc
     e2c:	.word	0x000047f8
     e30:	.word	0x000047dc
     e34:	.word	0x00004798

00000e38 <Paginator::debugPages()>:
  } else {
    newStepLed->on();
  }
};

void Paginator::debugPages () {
     e38:	push	{r4, r5, r6, lr}
     e3a:	add.w	r4, r0, #16
     e3e:	add.w	r6, r0, #80	; 0x50
     e42:	add.w	r5, r4, #16
  for (size_t i = 0; i < 4; i++) {
    for (size_t y = 0; y < 4; y++) {
      Step * step = _pages[i][y];
     e46:	ldr.w	r3, [r4], #4
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e4a:	ldr	r0, [pc, #24]	; (e64 <Paginator::debugPages()+0x2c>)
     e4c:	ldrb	r1, [r3, #20]
     e4e:	bl	32bc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e52:	ldr	r0, [pc, #16]	; (e64 <Paginator::debugPages()+0x2c>)
     e54:	bl	321c <Print::println()>
  }
};

void Paginator::debugPages () {
  for (size_t i = 0; i < 4; i++) {
    for (size_t y = 0; y < 4; y++) {
     e58:	cmp	r4, r5
     e5a:	bne.n	e46 <Paginator::debugPages()+0xe>
    newStepLed->on();
  }
};

void Paginator::debugPages () {
  for (size_t i = 0; i < 4; i++) {
     e5c:	cmp	r6, r4
     e5e:	bne.n	e42 <Paginator::debugPages()+0xa>
    for (size_t y = 0; y < 4; y++) {
      Step * step = _pages[i][y];
      Serial.println(step->_state);
    }
  }
};
     e60:	pop	{r4, r5, r6, pc}
     e62:	nop
     e64:	.word	0x1fff0c48

00000e68 <Paginator::nextPage()>:
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
  }
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
     e68:	ldr	r3, [r0, #4]
     e6a:	cmp	r3, #2
  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
  }
};

void Paginator::nextPage () {
     e6c:	push	{r4, lr}
     e6e:	mov	r4, r0
  if (_currentEditPage < 3) {
     e70:	bgt.n	e90 <Paginator::nextPage()+0x28>
    changePage(1);
     e72:	movs	r1, #1
     e74:	bl	c78 <Paginator::changePage(int)>
    _currentEditPage++;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     e78:	ldmia.w	r4, {r2, r3}
     e7c:	add.w	r1, r3, #15
     e80:	ldr	r2, [r2, #8]
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
     e82:	adds	r3, #1
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     e84:	ldr.w	r0, [r2, r1, lsl #2]
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
     e88:	str	r3, [r4, #4]
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     e8a:	movs	r1, #3
     e8c:	bl	898 <Led::blink(int)>
  }

  debugPages();
     e90:	mov	r0, r4
};
     e92:	ldmia.w	sp!, {r4, lr}
    changePage(1);
    _currentEditPage++;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  }

  debugPages();
     e96:	b.w	e38 <Paginator::debugPages()>
     e9a:	nop

00000e9c <Paginator::previousPage()>:
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
     e9c:	ldr	r3, [r0, #4]
     e9e:	cmp	r3, #0
  }

  debugPages();
};

void Paginator::previousPage () {
     ea0:	push	{r4, lr}
     ea2:	mov	r4, r0
  if (_currentEditPage > 0) {
     ea4:	ble.n	ec6 <Paginator::previousPage()+0x2a>
    changePage(-1);
     ea6:	mov.w	r1, #4294967295
     eaa:	bl	c78 <Paginator::changePage(int)>
    _currentEditPage--;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     eae:	ldmia.w	r4, {r2, r3}
     eb2:	add.w	r1, r3, #13
     eb6:	ldr	r2, [r2, #8]
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
     eb8:	subs	r3, #1
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     eba:	ldr.w	r0, [r2, r1, lsl #2]
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
     ebe:	str	r3, [r4, #4]
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     ec0:	movs	r1, #3
     ec2:	bl	898 <Led::blink(int)>
  };

  debugPages();
     ec6:	mov	r0, r4
};
     ec8:	ldmia.w	sp!, {r4, lr}
    changePage(-1);
    _currentEditPage--;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  };

  debugPages();
     ecc:	b.w	e38 <Paginator::debugPages()>

00000ed0 <Step::Step(Sequencer*)>:
#include <Arduino.h>
#include "step.h"
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
     ed0:	push	{r4, r5}
  _state = false;
     ed2:	movs	r2, #0
  _sequencer = sequencer;
  pitchScale = 0;
  pitchGrade = 0;
  velocity = 100;
     ed4:	movs	r4, #100	; 0x64
  length = 4;
     ed6:	movs	r5, #4
     ed8:	str	r5, [r0, #16]
Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
  pitchScale = 0;
  pitchGrade = 0;
  velocity = 100;
     eda:	str	r4, [r0, #12]
  length = 4;
  chance = 100;
     edc:	str	r4, [r0, #24]
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
     ede:	str	r1, [r0, #0]
#include "step.h"
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
     ee0:	strb	r2, [r0, #20]
  _sequencer = sequencer;
  pitchScale = 0;
     ee2:	str	r2, [r0, #4]
  pitchGrade = 0;
     ee4:	str	r2, [r0, #8]
  velocity = 100;
  length = 4;
  chance = 100;
  swing = 0;
     ee6:	str	r2, [r0, #28]
};
     ee8:	pop	{r4, r5}
     eea:	bx	lr

00000eec <Step::toggle()>:
void Step::setStep (Step* step) {
  _state = step->_state;
};

void Step::toggle () {
  _state = !_state;
     eec:	ldrb	r3, [r0, #20]
     eee:	eor.w	r3, r3, #1
     ef2:	strb	r3, [r0, #20]
     ef4:	bx	lr
     ef6:	nop

00000ef8 <Step::controlLength(int)>:
};

void Step::controlLength (int value) {
  int newValue = map(value, 0, 1000, 16, 0); // <- hack i guess
  length = newValue;
     ef8:	ldr	r3, [pc, #20]	; (f10 <Step::controlLength(int)+0x18>)
     efa:	sub.w	r1, r1, r1, lsl #4
     efe:	smull	r2, r3, r3, r1
     f02:	asrs	r1, r1, #31
     f04:	rsb	r1, r1, r3, asr #8
     f08:	adds	r1, #16
     f0a:	str	r1, [r0, #16]
     f0c:	bx	lr
     f0e:	nop
     f10:	.word	0x4178749f

00000f14 <Step::controlPitch(int)>:
};

void Step::controlPitch (int value) {
  int newValue = value;

  if (value < 330) {
     f14:	cmp.w	r1, #330	; 0x14a
     f18:	blt.n	f32 <Step::controlPitch(int)+0x1e>
    newValue = 2;
  } else if (value < 660) {
     f1a:	cmp.w	r1, #660	; 0x294
     f1e:	blt.n	f2c <Step::controlPitch(int)+0x18>
    newValue = 1;
  } else if (value <= 1023) {
     f20:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     f24:	it	lt
     f26:	movlt	r1, #0
  }

  pitchGrade = newValue;
     f28:	str	r1, [r0, #8]
     f2a:	bx	lr
  int newValue = value;

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
     f2c:	movs	r1, #1
  } else if (value <= 1023) {
    newValue = 0;
  }

  pitchGrade = newValue;
     f2e:	str	r1, [r0, #8]
     f30:	bx	lr

void Step::controlPitch (int value) {
  int newValue = value;

  if (value < 330) {
    newValue = 2;
     f32:	movs	r1, #2
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  pitchGrade = newValue;
     f34:	str	r1, [r0, #8]
     f36:	bx	lr

00000f38 <Step::controlVelocity(int)>:
};

void Step::controlVelocity (int value) {
  int newValue = map(value, 0, 1023, 127, 62);
  velocity = newValue;
     f38:	rsb	r1, r1, r1, lsl #26
     f3c:	lsls	r1, r1, #6
     f3e:	it	mi
     f40:	addwmi	r1, r1, #1023	; 0x3ff
     f44:	asrs	r1, r1, #10
     f46:	adds	r1, #127	; 0x7f
     f48:	str	r1, [r0, #12]
     f4a:	bx	lr

00000f4c <Step::controlChance(int)>:
};

void Step::controlChance (int value) {
     f4c:	push	{r3, lr}
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     f4e:	mvn.w	r3, #98	; 0x62
     f52:	mul.w	r1, r3, r1
     f56:	cmp	r1, #0
     f58:	it	lt
     f5a:	addwlt	r1, r1, #1023	; 0x3ff
     f5e:	asrs	r1, r1, #10
     f60:	adds	r1, #100	; 0x64
  int newValue = map(value, 0, 1023, 100, 0);
  chance = newValue;
     f62:	str	r1, [r0, #24]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     f64:	ldr	r0, [pc, #12]	; (f74 <Step::controlChance(int)+0x28>)
     f66:	bl	32bc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     f6a:	ldr	r0, [pc, #8]	; (f74 <Step::controlChance(int)+0x28>)
  Serial.println(chance);
};
     f6c:	ldmia.w	sp!, {r3, lr}
     f70:	b.w	321c <Print::println()>
     f74:	.word	0x1fff0c48

00000f78 <Step::controlSwing(int)>:

void Step::controlSwing (int value) {
  int newValue = value;

  if (value < 100) {
     f78:	cmp	r1, #99	; 0x63
     f7a:	ble.n	f9a <Step::controlSwing(int)+0x22>
    newValue = -3;
  } else if (value < 200) {
     f7c:	cmp	r1, #199	; 0xc7
     f7e:	ble.n	f92 <Step::controlSwing(int)+0x1a>
    newValue = -2;
  } else if (value <= 600) {
     f80:	cmp.w	r1, #600	; 0x258
     f84:	ble.n	fa2 <Step::controlSwing(int)+0x2a>
    newValue = -1;
  } else if (value <= 1023) {
     f86:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     f8a:	it	lt
     f8c:	movlt	r1, #0
  }

  swing = newValue;
     f8e:	str	r1, [r0, #28]
     f90:	bx	lr
  int newValue = value;

  if (value < 100) {
    newValue = -3;
  } else if (value < 200) {
    newValue = -2;
     f92:	mvn.w	r1, #1
    newValue = -1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  swing = newValue;
     f96:	str	r1, [r0, #28]
     f98:	bx	lr

void Step::controlSwing (int value) {
  int newValue = value;

  if (value < 100) {
    newValue = -3;
     f9a:	mvn.w	r1, #2
    newValue = -1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  swing = newValue;
     f9e:	str	r1, [r0, #28]
     fa0:	bx	lr
  if (value < 100) {
    newValue = -3;
  } else if (value < 200) {
    newValue = -2;
  } else if (value <= 600) {
    newValue = -1;
     fa2:	mov.w	r1, #4294967295
  } else if (value <= 1023) {
    newValue = 0;
  }

  swing = newValue;
     fa6:	str	r1, [r0, #28]
     fa8:	bx	lr
     faa:	nop

00000fac <Knob::Knob(unsigned char, int, Controller*)>:
#include "sequencer.h"
#include "transport.h"
#include "paginator.h"
#include "piano.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
     fac:	push	{r4, r5}
  _pin = pin;
  _id = id;
  _controller = controller;
  _value = 0;
     fae:	movs	r5, #0
     fb0:	str	r5, [r0, #4]
#include "transport.h"
#include "paginator.h"
#include "piano.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
  _pin = pin;
     fb2:	str	r1, [r0, #0]
  _id = id;
     fb4:	str	r2, [r0, #12]
  _controller = controller;
     fb6:	str	r3, [r0, #16]
  _value = 0;
};
     fb8:	pop	{r4, r5}
     fba:	bx	lr

00000fbc <Knob::onChange()>:
// pitch mode, knob 1 controls the pitch of step 1.
// when in motion mode, knob 1 controls pitch
// of the current step being played, and knob 2
// controls the velocity and knob 3 the length
// and 4 the chance
void Knob::onChange () {
     fbc:	push	{r4, r5, r6, lr}
     fbe:	mov	r4, r0
  if (_controller->getMotionMode()) {
     fc0:	ldr	r0, [r0, #16]
     fc2:	bl	15bc <Controller::getMotionMode()>
     fc6:	cbz	r0, fe4 <Knob::onChange()+0x28>
    Paginator * paginator = _controller->_sequencer->_paginator;
     fc8:	ldr	r2, [r4, #16]
    Sequencer * sequencer = _controller->_sequencer;

    // todo: there is a bug when you only have 1 page,
    // the sequencer crashes when you use motion record
    if (_id == 0) {
     fca:	ldr	r3, [r4, #12]
// of the current step being played, and knob 2
// controls the velocity and knob 3 the length
// and 4 the chance
void Knob::onChange () {
  if (_controller->getMotionMode()) {
    Paginator * paginator = _controller->_sequencer->_paginator;
     fcc:	ldr	r5, [r2, #80]	; 0x50
     fce:	ldr	r6, [r5, #12]
    Sequencer * sequencer = _controller->_sequencer;

    // todo: there is a bug when you only have 1 page,
    // the sequencer crashes when you use motion record
    if (_id == 0) {
     fd0:	cmp	r3, #0
     fd2:	beq.n	104c <Knob::onChange()+0x90>
      sequencer->_stepsEdit[sequencer->_currentStep]->controlPitch(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlPitch(_value);
    } else if (_id == 1) {
     fd4:	cmp	r3, #1
     fd6:	beq.n	10ce <Knob::onChange()+0x112>
      sequencer->_stepsEdit[sequencer->_currentStep]->controlVelocity(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    } else if (_id == 2) {
     fd8:	cmp	r3, #2
     fda:	beq.w	110a <Knob::onChange()+0x14e>
      sequencer->_stepsEdit[sequencer->_currentStep]->controlLength(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlLength(_value);
    } else if (_id == 3) {
     fde:	cmp	r3, #3
     fe0:	beq.n	10a8 <Knob::onChange()+0xec>
     fe2:	pop	{r4, r5, r6, pc}
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlChance(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlChance(_value);
    }
  } else {
    if (_id == 4) {
     fe4:	ldr	r3, [r4, #12]
     fe6:	cmp	r3, #4
     fe8:	beq.n	1098 <Knob::onChange()+0xdc>
      _controller->_sequencer->_piano->transpose(_value);
    } else if (_id == 5) {
     fea:	cmp	r3, #5
     fec:	beq.n	1072 <Knob::onChange()+0xb6>
      _controller->_sequencer->_transport->controlTempo(_value);
    } else if (_controller->getMode() == VELOCITY) {
     fee:	ldr	r0, [r4, #16]
     ff0:	bl	15d4 <Controller::getMode()>
     ff4:	cmp	r0, #1
     ff6:	beq.n	1082 <Knob::onChange()+0xc6>
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    } else if (_controller->getMode() == PITCH) {
     ff8:	ldr	r0, [r4, #16]
     ffa:	bl	15d4 <Controller::getMode()>
     ffe:	cbz	r0, 1036 <Knob::onChange()+0x7a>
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH) {
    1000:	ldr	r0, [r4, #16]
    1002:	bl	15d4 <Controller::getMode()>
    1006:	cmp	r0, #2
    1008:	beq.n	10f4 <Knob::onChange()+0x138>
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    } else if (_controller->getMode() == CHANCE) {
    100a:	ldr	r0, [r4, #16]
    100c:	bl	15d4 <Controller::getMode()>
    1010:	cmp	r0, #3
    1012:	beq.w	1130 <Knob::onChange()+0x174>
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
    1016:	ldr	r0, [r4, #16]
    1018:	bl	15d4 <Controller::getMode()>
    101c:	cmp	r0, #4
    101e:	bne.n	fe2 <Knob::onChange()+0x26>
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    1020:	ldr	r2, [r4, #16]
    1022:	ldr	r3, [r4, #12]
    1024:	ldr	r2, [r2, #80]	; 0x50
    1026:	ldr	r1, [r4, #4]
    1028:	adds	r3, #4
    }
  }
}
    102a:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_controller->getMode() == NOTELENGTH) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    } else if (_controller->getMode() == CHANCE) {
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    102e:	ldr.w	r0, [r2, r3, lsl #2]
    1032:	b.w	f78 <Step::controlSwing(int)>
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    } else if (_controller->getMode() == VELOCITY) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    } else if (_controller->getMode() == PITCH) {
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    1036:	ldr	r2, [r4, #16]
    1038:	ldr	r3, [r4, #12]
    103a:	ldr	r2, [r2, #80]	; 0x50
    103c:	ldr	r1, [r4, #4]
    103e:	adds	r3, #4
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    }
  }
}
    1040:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    } else if (_controller->getMode() == VELOCITY) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    } else if (_controller->getMode() == PITCH) {
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    1044:	ldr.w	r0, [r2, r3, lsl #2]
    1048:	b.w	f14 <Step::controlPitch(int)>
    Sequencer * sequencer = _controller->_sequencer;

    // todo: there is a bug when you only have 1 page,
    // the sequencer crashes when you use motion record
    if (_id == 0) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlPitch(_value);
    104c:	ldr	r3, [r5, #48]	; 0x30
    104e:	ldr	r1, [r4, #4]
    1050:	adds	r3, #4
    1052:	ldr.w	r0, [r5, r3, lsl #2]
    1056:	bl	f14 <Step::controlPitch(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlPitch(_value);
    105a:	ldr	r3, [r5, #48]	; 0x30
    105c:	ldr	r2, [r6, #8]
    105e:	ldr	r1, [r4, #4]
    1060:	add.w	r3, r3, r2, lsl #2
    1064:	adds	r3, #4
    1066:	ldr.w	r0, [r6, r3, lsl #2]
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    }
  }
}
    106a:	ldmia.w	sp!, {r4, r5, r6, lr}

    // todo: there is a bug when you only have 1 page,
    // the sequencer crashes when you use motion record
    if (_id == 0) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlPitch(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlPitch(_value);
    106e:	b.w	f14 <Step::controlPitch(int)>
    }
  } else {
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    1072:	ldr	r3, [r4, #16]
    1074:	ldr	r1, [r4, #4]
    1076:	ldr	r3, [r3, #80]	; 0x50
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    }
  }
}
    1078:	ldmia.w	sp!, {r4, r5, r6, lr}
    }
  } else {
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    107c:	ldr	r0, [r3, #4]
    107e:	b.w	a88 <Transport::controlTempo(int)>
    } else if (_controller->getMode() == VELOCITY) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    1082:	ldr	r2, [r4, #16]
    1084:	ldr	r3, [r4, #12]
    1086:	ldr	r2, [r2, #80]	; 0x50
    1088:	ldr	r1, [r4, #4]
    108a:	adds	r3, #4
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    }
  }
}
    108c:	ldmia.w	sp!, {r4, r5, r6, lr}
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    } else if (_controller->getMode() == VELOCITY) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    1090:	ldr.w	r0, [r2, r3, lsl #2]
    1094:	b.w	f38 <Step::controlVelocity(int)>
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlChance(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlChance(_value);
    }
  } else {
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    1098:	ldr	r3, [r4, #16]
    109a:	ldr	r1, [r4, #4]
    109c:	ldr	r3, [r3, #80]	; 0x50
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    }
  }
}
    109e:	ldmia.w	sp!, {r4, r5, r6, lr}
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlChance(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlChance(_value);
    }
  } else {
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    10a2:	ldr	r0, [r3, #52]	; 0x34
    10a4:	b.w	82c <Piano::transpose(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    } else if (_id == 2) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlLength(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlLength(_value);
    } else if (_id == 3) {
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlChance(_value);
    10a8:	ldr	r3, [r5, #48]	; 0x30
    10aa:	ldr	r1, [r4, #4]
    10ac:	adds	r3, #4
    10ae:	ldr.w	r0, [r5, r3, lsl #2]
    10b2:	bl	f4c <Step::controlChance(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlChance(_value);
    10b6:	ldr	r3, [r5, #48]	; 0x30
    10b8:	ldr	r2, [r6, #8]
    10ba:	ldr	r1, [r4, #4]
    10bc:	add.w	r3, r3, r2, lsl #2
    10c0:	adds	r3, #4
    10c2:	ldr.w	r0, [r6, r3, lsl #2]
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    }
  }
}
    10c6:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_id == 2) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlLength(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlLength(_value);
    } else if (_id == 3) {
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlChance(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlChance(_value);
    10ca:	b.w	f4c <Step::controlChance(int)>
    // the sequencer crashes when you use motion record
    if (_id == 0) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlPitch(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlPitch(_value);
    } else if (_id == 1) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlVelocity(_value);
    10ce:	ldr	r3, [r5, #48]	; 0x30
    10d0:	ldr	r1, [r4, #4]
    10d2:	adds	r3, #4
    10d4:	ldr.w	r0, [r5, r3, lsl #2]
    10d8:	bl	f38 <Step::controlVelocity(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    10dc:	ldr	r3, [r5, #48]	; 0x30
    10de:	ldr	r2, [r6, #8]
    10e0:	ldr	r1, [r4, #4]
    10e2:	add.w	r3, r3, r2, lsl #2
    10e6:	adds	r3, #4
    10e8:	ldr.w	r0, [r6, r3, lsl #2]
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    }
  }
}
    10ec:	ldmia.w	sp!, {r4, r5, r6, lr}
    if (_id == 0) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlPitch(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlPitch(_value);
    } else if (_id == 1) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlVelocity(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    10f0:	b.w	f38 <Step::controlVelocity(int)>
    } else if (_controller->getMode() == VELOCITY) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    } else if (_controller->getMode() == PITCH) {
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    10f4:	ldr	r2, [r4, #16]
    10f6:	ldr	r3, [r4, #12]
    10f8:	ldr	r2, [r2, #80]	; 0x50
    10fa:	ldr	r1, [r4, #4]
    10fc:	adds	r3, #4
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    }
  }
}
    10fe:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_controller->getMode() == VELOCITY) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    } else if (_controller->getMode() == PITCH) {
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    1102:	ldr.w	r0, [r2, r3, lsl #2]
    1106:	b.w	ef8 <Step::controlLength(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlPitch(_value);
    } else if (_id == 1) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlVelocity(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    } else if (_id == 2) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlLength(_value);
    110a:	ldr	r3, [r5, #48]	; 0x30
    110c:	ldr	r1, [r4, #4]
    110e:	adds	r3, #4
    1110:	ldr.w	r0, [r5, r3, lsl #2]
    1114:	bl	ef8 <Step::controlLength(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlLength(_value);
    1118:	ldr	r3, [r5, #48]	; 0x30
    111a:	ldr	r2, [r6, #8]
    111c:	ldr	r1, [r4, #4]
    111e:	add.w	r3, r3, r2, lsl #2
    1122:	adds	r3, #4
    1124:	ldr.w	r0, [r6, r3, lsl #2]
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    }
  }
}
    1128:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_id == 1) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlVelocity(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    } else if (_id == 2) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlLength(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlLength(_value);
    112c:	b.w	ef8 <Step::controlLength(int)>
    } else if (_controller->getMode() == PITCH) {
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    } else if (_controller->getMode() == CHANCE) {
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    1130:	ldr	r2, [r4, #16]
    1132:	ldr	r3, [r4, #12]
    1134:	ldr	r2, [r2, #80]	; 0x50
    1136:	ldr	r1, [r4, #4]
    1138:	adds	r3, #4
    } else if (_controller->getMode() == SWING) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    }
  }
}
    113a:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_controller->getMode() == PITCH) {
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    } else if (_controller->getMode() == CHANCE) {
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    113e:	ldr.w	r0, [r2, r3, lsl #2]
    1142:	b.w	f4c <Step::controlChance(int)>
    1146:	nop

00001148 <Knob::tick()>:
    }
  }
}

// todo latch
void Knob::tick () {
    1148:	push	{r4, lr}
    114a:	mov	r4, r0
  _value = analogRead(_pin);
    114c:	ldrb	r0, [r0, #0]
    114e:	bl	1ad4 <analogRead>

  int diff = abs(_value - _lastValue);
    1152:	ldr	r3, [r4, #8]
  }
}

// todo latch
void Knob::tick () {
  _value = analogRead(_pin);
    1154:	str	r0, [r4, #4]

  int diff = abs(_value - _lastValue);

  // "filter"
  const boolean isChanging = _value != _lastValue && diff > 10;
    1156:	cmp	r0, r3
    1158:	beq.n	1170 <Knob::tick()+0x28>
    115a:	subs	r0, r0, r3
    115c:	cmp	r0, #0
    115e:	it	lt
    1160:	neglt	r0, r0
    1162:	cmp	r0, #10
    1164:	ble.n	1170 <Knob::tick()+0x28>

  if (isChanging) {
    onChange();
    1166:	mov	r0, r4
    1168:	bl	fbc <Knob::onChange()>

    _lastValue = _value;
    116c:	ldr	r3, [r4, #4]
    116e:	str	r3, [r4, #8]
    1170:	pop	{r4, pc}
    1172:	nop

00001174 <Controller::Controller(Sequencer*)>:
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"
#include "paginator.h"

Controller::Controller (Sequencer* sequencer) {
    1174:	push	{r4, r5, r6, r7, lr}
  _sequencer = sequencer;
  _modeBeforeChance = PITCH;
    1176:	movs	r5, #0
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"
#include "paginator.h"

Controller::Controller (Sequencer* sequencer) {
    1178:	sub	sp, #20
    117a:	mov	r4, r0
  _sequencer = sequencer;
    117c:	str	r1, [r0, #80]	; 0x50
  _modeBeforeChance = PITCH;
    117e:	strb.w	r5, [r0, #53]	; 0x35
  _modeBeforeMotion = PITCH;
    1182:	strb.w	r5, [r0, #54]	; 0x36
  _currentMode = PITCH;
    1186:	strb.w	r5, [r0, #52]	; 0x34
  _shiftMode = false;
    118a:	strb.w	r5, [r0, #48]	; 0x30
  _copyMode = false;
    118e:	strb.w	r5, [r0, #84]	; 0x54
  _chanceMode = false;
    1192:	strb.w	r5, [r0, #51]	; 0x33
  _swingMode = false;
    1196:	strb.w	r5, [r0, #49]	; 0x31
  _motionMode = false;
    119a:	strb.w	r5, [r0, #50]	; 0x32
  
  _leds[0] = new Led(3, LOW);
    119e:	movs	r0, #24
    11a0:	bl	3360 <operator new(unsigned int)>
    11a4:	mov	r2, r5
    11a6:	mov	r6, r0
    11a8:	movs	r1, #3
    11aa:	bl	870 <Led::Led(int, int)>
    11ae:	str	r6, [r4, #56]	; 0x38
  _leds[1] = new Led(5, LOW);
    11b0:	movs	r0, #24
    11b2:	bl	3360 <operator new(unsigned int)>
    11b6:	mov	r2, r5
    11b8:	mov	r6, r0
    11ba:	movs	r1, #5
    11bc:	bl	870 <Led::Led(int, int)>
    11c0:	str	r6, [r4, #60]	; 0x3c
  _leds[2] = new Led(7, LOW);
    11c2:	movs	r0, #24
    11c4:	bl	3360 <operator new(unsigned int)>
    11c8:	mov	r2, r5
    11ca:	mov	r6, r0
    11cc:	movs	r1, #7
    11ce:	bl	870 <Led::Led(int, int)>
    11d2:	str	r6, [r4, #64]	; 0x40
  _leds[3] = new Led(9, LOW);
    11d4:	movs	r0, #24
    11d6:	bl	3360 <operator new(unsigned int)>
    11da:	mov	r2, r5
    11dc:	mov	r6, r0
    11de:	movs	r1, #9
    11e0:	bl	870 <Led::Led(int, int)>
    11e4:	str	r6, [r4, #68]	; 0x44
  _leds[4] = new Led(11, LOW);
    11e6:	movs	r0, #24
    11e8:	bl	3360 <operator new(unsigned int)>
    11ec:	mov	r2, r5
    11ee:	mov	r6, r0
    11f0:	movs	r1, #11
    11f2:	bl	870 <Led::Led(int, int)>
    11f6:	str	r6, [r4, #72]	; 0x48
  _leds[5] = new Led(24, LOW);
    11f8:	movs	r0, #24
    11fa:	bl	3360 <operator new(unsigned int)>
    11fe:	mov	r2, r5
    1200:	movs	r1, #24
    1202:	mov	r6, r0
    1204:	bl	870 <Led::Led(int, int)>
    1208:	str	r6, [r4, #76]	; 0x4c

  _leds[4]->toggle();
    120a:	ldr	r0, [r4, #72]	; 0x48
    120c:	bl	8cc <Led::toggle()>
  _leds[5]->toggle();
    1210:	ldr	r0, [r4, #76]	; 0x4c
    1212:	bl	8cc <Led::toggle()>

  _buttons[0] = new Button(1, step1pin, _leds[0], false, false, this);
    1216:	movs	r0, #56	; 0x38
    1218:	bl	3360 <operator new(unsigned int)>
    121c:	ldr	r3, [r4, #56]	; 0x38
    121e:	str	r5, [sp, #4]
    1220:	mov	r6, r0
    1222:	str	r5, [sp, #0]
    1224:	movs	r2, #2
    1226:	movs	r1, #1
    1228:	str	r4, [sp, #8]
    122a:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    122e:	str	r6, [r4, #0]
  _buttons[1] = new Button(2, step2pin, _leds[1], false, false, this);
    1230:	movs	r0, #56	; 0x38
    1232:	bl	3360 <operator new(unsigned int)>
    1236:	ldr	r3, [r4, #60]	; 0x3c
    1238:	str	r5, [sp, #4]
    123a:	mov	r6, r0
    123c:	str	r5, [sp, #0]
    123e:	movs	r2, #4
    1240:	movs	r1, #2
    1242:	str	r4, [sp, #8]
    1244:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1248:	str	r6, [r4, #4]
  _buttons[2] = new Button(3, step3pin, _leds[2], false, false, this);
    124a:	movs	r0, #56	; 0x38
    124c:	bl	3360 <operator new(unsigned int)>
    1250:	ldr	r3, [r4, #64]	; 0x40
    1252:	str	r5, [sp, #4]
    1254:	mov	r6, r0
    1256:	str	r5, [sp, #0]
    1258:	movs	r2, #6
    125a:	movs	r1, #3
    125c:	str	r4, [sp, #8]
    125e:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1262:	str	r6, [r4, #8]
  _buttons[3] = new Button(4, step4pin, _leds[3], false, false, this);
    1264:	movs	r0, #56	; 0x38
    1266:	bl	3360 <operator new(unsigned int)>
    126a:	ldr	r3, [r4, #68]	; 0x44
    126c:	str	r5, [sp, #4]
    126e:	mov	r6, r0
    1270:	str	r5, [sp, #0]
    1272:	movs	r2, #8
    1274:	movs	r1, #4
    1276:	str	r4, [sp, #8]
    1278:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    127c:	str	r6, [r4, #12]
  _buttons[4] = new Button(5, shiftPin, _leds[4], true, false, this);
    127e:	movs	r0, #56	; 0x38
    1280:	bl	3360 <operator new(unsigned int)>
    1284:	movs	r6, #1
    1286:	ldr	r3, [r4, #72]	; 0x48
    1288:	str	r5, [sp, #4]
    128a:	mov	r7, r0
    128c:	movs	r2, #10
    128e:	movs	r1, #5
    1290:	str	r4, [sp, #8]
    1292:	str	r6, [sp, #0]
    1294:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1298:	str	r7, [r4, #16]
  _buttons[5] = new Button(6, playPin, _leds[5], false, true, this);
    129a:	movs	r0, #56	; 0x38
    129c:	bl	3360 <operator new(unsigned int)>
    12a0:	ldr	r3, [r4, #76]	; 0x4c
    12a2:	str	r4, [sp, #8]
    12a4:	mov	r7, r0
    12a6:	stmia.w	sp, {r5, r6}
    12aa:	movs	r2, #12
    12ac:	movs	r1, #6
    12ae:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    12b2:	str	r7, [r4, #20]

  _knobs[0] = new Knob(A0, 0, this);
    12b4:	movs	r0, #20
    12b6:	bl	3360 <operator new(unsigned int)>
    12ba:	mov	r3, r4
    12bc:	mov	r2, r5
    12be:	mov	r7, r0
    12c0:	movs	r1, #14
    12c2:	bl	fac <Knob::Knob(unsigned char, int, Controller*)>
    12c6:	str	r7, [r4, #24]
  _knobs[1] = new Knob(A1, 1, this);
    12c8:	movs	r0, #20
    12ca:	bl	3360 <operator new(unsigned int)>
    12ce:	mov	r3, r4
    12d0:	mov	r2, r6
    12d2:	mov	r5, r0
    12d4:	movs	r1, #15
    12d6:	bl	fac <Knob::Knob(unsigned char, int, Controller*)>
    12da:	str	r5, [r4, #28]
  _knobs[2] = new Knob(A2, 2, this);
    12dc:	movs	r0, #20
    12de:	bl	3360 <operator new(unsigned int)>
    12e2:	mov	r3, r4
    12e4:	mov	r5, r0
    12e6:	movs	r2, #2
    12e8:	movs	r1, #16
    12ea:	bl	fac <Knob::Knob(unsigned char, int, Controller*)>
    12ee:	str	r5, [r4, #32]
  _knobs[3] = new Knob(A3, 3, this);
    12f0:	movs	r0, #20
    12f2:	bl	3360 <operator new(unsigned int)>
    12f6:	mov	r3, r4
    12f8:	mov	r5, r0
    12fa:	movs	r2, #3
    12fc:	movs	r1, #17
    12fe:	bl	fac <Knob::Knob(unsigned char, int, Controller*)>
    1302:	str	r5, [r4, #36]	; 0x24
  _knobs[4] = new Knob(A4, 4, this);
    1304:	movs	r0, #20
    1306:	bl	3360 <operator new(unsigned int)>
    130a:	mov	r3, r4
    130c:	mov	r5, r0
    130e:	movs	r2, #4
    1310:	movs	r1, #18
    1312:	bl	fac <Knob::Knob(unsigned char, int, Controller*)>
    1316:	str	r5, [r4, #40]	; 0x28
  _knobs[5] = new Knob(A5, 5, this);
    1318:	movs	r0, #20
    131a:	bl	3360 <operator new(unsigned int)>
    131e:	mov	r3, r4
    1320:	movs	r2, #5
    1322:	movs	r1, #19
    1324:	mov	r5, r0
    1326:	bl	fac <Knob::Knob(unsigned char, int, Controller*)>
};
    132a:	mov	r0, r4
  _knobs[0] = new Knob(A0, 0, this);
  _knobs[1] = new Knob(A1, 1, this);
  _knobs[2] = new Knob(A2, 2, this);
  _knobs[3] = new Knob(A3, 3, this);
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
    132c:	str	r5, [r4, #44]	; 0x2c
};
    132e:	add	sp, #20
    1330:	pop	{r4, r5, r6, r7, pc}
    1332:	nop

00001334 <Controller::tick()>:

void Controller::tick() {
    1334:	push	{r3, r4, r5, r6, r7, lr}
    1336:	add.w	r7, r0, #20
    133a:	mov	r6, r7
    133c:	subs	r4, r0, #4
    133e:	add.w	r5, r0, #52	; 0x34
  for (size_t i = 0; i < 6; i++) {
    _buttons[i]->tick();
    1342:	ldr.w	r0, [r4, #4]!
    1346:	bl	700 <Button::tick()>
    _leds[i]->tick();
    134a:	ldr.w	r0, [r5, #4]!
    134e:	bl	914 <Led::tick()>
    _knobs[i]->tick();
    1352:	ldr.w	r0, [r6, #4]!
    1356:	bl	1148 <Knob::tick()>
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
};

void Controller::tick() {
  for (size_t i = 0; i < 6; i++) {
    135a:	cmp	r4, r7
    135c:	bne.n	1342 <Controller::tick()+0xe>
    _buttons[i]->tick();
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}
    135e:	pop	{r3, r4, r5, r6, r7, pc}

00001360 <Controller::printCurrentMode()>:

void Controller::printCurrentMode () {
    1360:	push	{r3, lr}
  if (_currentMode == PITCH) {
    1362:	ldrb.w	r3, [r0, #52]	; 0x34
    1366:	cbz	r3, 1372 <Controller::printCurrentMode()+0x12>
    Serial.println("PITCH");
  } else if (_currentMode == VELOCITY) {
    1368:	cmp	r3, #1
    136a:	beq.n	1396 <Controller::printCurrentMode()+0x36>
    Serial.println("VELOCITY");
  } else if (_currentMode == NOTELENGTH) {
    136c:	cmp	r3, #2
    136e:	beq.n	1384 <Controller::printCurrentMode()+0x24>
    1370:	pop	{r3, pc}
    1372:	movs	r1, #5
    1374:	ldr	r0, [pc, #48]	; (13a8 <Controller::printCurrentMode()+0x48>)
    1376:	bl	16a8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    137a:	ldr	r0, [pc, #48]	; (13ac <Controller::printCurrentMode()+0x4c>)
    Serial.println("NOTELENGTH");
  }
}
    137c:	ldmia.w	sp!, {r3, lr}
    1380:	b.w	321c <Print::println()>
    1384:	movs	r1, #10
    1386:	ldr	r0, [pc, #40]	; (13b0 <Controller::printCurrentMode()+0x50>)
    1388:	bl	16a8 <usb_serial_write>
    138c:	ldr	r0, [pc, #28]	; (13ac <Controller::printCurrentMode()+0x4c>)
    138e:	ldmia.w	sp!, {r3, lr}
    1392:	b.w	321c <Print::println()>
    1396:	movs	r1, #8
    1398:	ldr	r0, [pc, #24]	; (13b4 <Controller::printCurrentMode()+0x54>)
    139a:	bl	16a8 <usb_serial_write>
    139e:	ldr	r0, [pc, #12]	; (13ac <Controller::printCurrentMode()+0x4c>)
    13a0:	ldmia.w	sp!, {r3, lr}
    13a4:	b.w	321c <Print::println()>
    13a8:	.word	0x00004814
    13ac:	.word	0x1fff0c48
    13b0:	.word	0x00004828
    13b4:	.word	0x0000481c

000013b8 <Controller::toggleMode()>:

void Controller::toggleMode () {
    13b8:	push	{r3, r4, r5, lr}
  if (_currentMode == PITCH) {
    13ba:	ldrb.w	r3, [r0, #52]	; 0x34
  } else if (_currentMode == NOTELENGTH) {
    Serial.println("NOTELENGTH");
  }
}

void Controller::toggleMode () {
    13be:	mov	r4, r0
  if (_currentMode == PITCH) {
    13c0:	cbz	r3, 13cc <Controller::toggleMode()+0x14>
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    13c2:	cmp	r3, #1
    13c4:	beq.n	1414 <Controller::toggleMode()+0x5c>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    13c6:	cmp	r3, #2
    13c8:	beq.n	13ee <Controller::toggleMode()+0x36>
    13ca:	pop	{r3, r4, r5, pc}
  }
}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    13cc:	movs	r3, #1
    13ce:	strb.w	r3, [r0, #52]	; 0x34
    13d2:	movs	r1, #8
    13d4:	ldr	r0, [pc, #100]	; (143c <Controller::toggleMode()+0x84>)
    13d6:	bl	16a8 <usb_serial_write>
    13da:	ldr	r0, [pc, #100]	; (1440 <Controller::toggleMode()+0x88>)
    13dc:	bl	321c <Print::println()>
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
    13e0:	ldr	r0, [r4, #72]	; 0x48
    13e2:	movw	r1, #999	; 0x3e7
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
    13e6:	ldmia.w	sp!, {r3, r4, r5, lr}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
    13ea:	b.w	898 <Led::blink(int)>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    13ee:	movs	r5, #0
    13f0:	strb.w	r5, [r0, #52]	; 0x34
    13f4:	movs	r1, #5
    13f6:	ldr	r0, [pc, #76]	; (1444 <Controller::toggleMode()+0x8c>)
    13f8:	bl	16a8 <usb_serial_write>
    13fc:	ldr	r0, [pc, #64]	; (1440 <Controller::toggleMode()+0x88>)
    13fe:	bl	321c <Print::println()>
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    1402:	ldr	r0, [r4, #72]	; 0x48
    1404:	mov	r1, r5
    1406:	bl	898 <Led::blink(int)>
    _leds[4]->on();
    140a:	ldr	r0, [r4, #72]	; 0x48
  }
};
    140c:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
    1410:	b.w	904 <Led::on()>
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    1414:	movs	r3, #2
    1416:	strb.w	r3, [r0, #52]	; 0x34
    141a:	movs	r1, #10
    141c:	ldr	r0, [pc, #40]	; (1448 <Controller::toggleMode()+0x90>)
    141e:	bl	16a8 <usb_serial_write>
    1422:	ldr	r0, [pc, #28]	; (1440 <Controller::toggleMode()+0x88>)
    1424:	bl	321c <Print::println()>
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    1428:	ldr	r0, [r4, #72]	; 0x48
    142a:	movs	r1, #0
    142c:	bl	898 <Led::blink(int)>
    _leds[4]->off();
    1430:	ldr	r0, [r4, #72]	; 0x48
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
    1432:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
    1436:	b.w	8f8 <Led::off()>
    143a:	nop
    143c:	.word	0x0000481c
    1440:	.word	0x1fff0c48
    1444:	.word	0x00004814
    1448:	.word	0x00004828

0000144c <Controller::enterShiftMode()>:
  }
};

void Controller::enterShiftMode () {

  if (!_shiftMode) {
    144c:	ldrb.w	r3, [r0, #48]	; 0x30
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
    1450:	push	{r4, r5, r6, lr}
    1452:	mov	r6, r0

  if (!_shiftMode) {
    1454:	cbz	r3, 1492 <Controller::enterShiftMode()+0x46>
    1456:	ldr	r3, [r6, #80]	; 0x50
    1458:	ldr	r3, [r3, #12]
    Serial.println("NAVIGATE");
  } 

  _shiftMode = true;
    145a:	movs	r2, #1
    145c:	ldr	r3, [r3, #4]
    145e:	strb.w	r2, [r6, #48]	; 0x30
    1462:	add.w	r5, r6, #56	; 0x38

  for (int i = 0; i < 4; i++) {
    1466:	movs	r4, #0
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
    1468:	cmp	r4, r3
    Serial.println("NAVIGATE");
  } 

  _shiftMode = true;

  for (int i = 0; i < 4; i++) {
    146a:	add.w	r4, r4, #1
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
    146e:	beq.n	147c <Controller::enterShiftMode()+0x30>
    1470:	ldr	r0, [r5, #0]
    1472:	bl	8f8 <Led::off()>
    1476:	ldr	r3, [r6, #80]	; 0x50
    1478:	ldr	r3, [r3, #12]
    147a:	ldr	r3, [r3, #4]
    Serial.println("NAVIGATE");
  } 

  _shiftMode = true;

  for (int i = 0; i < 4; i++) {
    147c:	cmp	r4, #4
    147e:	add.w	r5, r5, #4
    1482:	bne.n	1468 <Controller::enterShiftMode()+0x1c>
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
    1484:	adds	r3, #14
    1486:	ldr.w	r0, [r6, r3, lsl #2]
};
    148a:	ldmia.w	sp!, {r4, r5, r6, lr}

  for (int i = 0; i < 4; i++) {
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
    148e:	b.w	904 <Led::on()>
    1492:	movs	r1, #8
    1494:	ldr	r0, [pc, #12]	; (14a4 <Controller::enterShiftMode()+0x58>)
    1496:	bl	16a8 <usb_serial_write>
    149a:	ldr	r0, [pc, #12]	; (14a8 <Controller::enterShiftMode()+0x5c>)
    149c:	bl	321c <Print::println()>
    14a0:	b.n	1456 <Controller::enterShiftMode()+0xa>
    14a2:	nop
    14a4:	.word	0x00004834
    14a8:	.word	0x1fff0c48

000014ac <Controller::exitShiftMode()>:
};

void Controller::exitShiftMode () {
    14ac:	push	{r4, r5, r6, lr}
  _shiftMode = false;
    14ae:	movs	r4, #0
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
};

void Controller::exitShiftMode () {
    14b0:	mov	r6, r0
  _shiftMode = false;
    14b2:	strb.w	r4, [r0, #48]	; 0x30
    14b6:	add.w	r5, r0, #52	; 0x34

  for (size_t i = 0; i < 4; i++) {
    _leds[i]->off();
    14ba:	ldr.w	r0, [r5, #4]!
    14be:	bl	8f8 <Led::off()>
    _sequencer->_paginator->setLeds(i);
    14c2:	ldr	r3, [r6, #80]	; 0x50
    14c4:	mov	r1, r4
    14c6:	ldr	r0, [r3, #12]
};

void Controller::exitShiftMode () {
  _shiftMode = false;

  for (size_t i = 0; i < 4; i++) {
    14c8:	adds	r4, #1
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
    14ca:	bl	c5c <Paginator::setLeds(unsigned int)>
};

void Controller::exitShiftMode () {
  _shiftMode = false;

  for (size_t i = 0; i < 4; i++) {
    14ce:	cmp	r4, #4
    14d0:	bne.n	14ba <Controller::exitShiftMode()+0xe>
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
  }
};
    14d2:	pop	{r4, r5, r6, pc}

000014d4 <Controller::enterCopyMode()>:

void Controller::enterCopyMode () {
  if (!_copyMode) {
    14d4:	ldrb.w	r3, [r0, #84]	; 0x54
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
  }
};

void Controller::enterCopyMode () {
    14d8:	push	{r4, lr}
    14da:	mov	r4, r0
  if (!_copyMode) {
    14dc:	cbnz	r3, 14ec <Controller::enterCopyMode()+0x18>
    14de:	movs	r1, #4
    14e0:	ldr	r0, [pc, #16]	; (14f4 <Controller::enterCopyMode()+0x20>)
    14e2:	bl	16a8 <usb_serial_write>
    14e6:	ldr	r0, [pc, #16]	; (14f8 <Controller::enterCopyMode()+0x24>)
    14e8:	bl	321c <Print::println()>
    Serial.println("COPY");
  }

  _copyMode = true;
    14ec:	movs	r3, #1
    14ee:	strb.w	r3, [r4, #84]	; 0x54
    14f2:	pop	{r4, pc}
    14f4:	.word	0x00004840
    14f8:	.word	0x1fff0c48

000014fc <Controller::exitCopyMode()>:
}

void Controller::exitCopyMode () {
  _copyMode = false;
    14fc:	movs	r3, #0
    14fe:	strb.w	r3, [r0, #84]	; 0x54
    1502:	bx	lr

00001504 <Controller::enterChanceMode()>:
}

void Controller::enterChanceMode () {
    1504:	push	{r3, lr}
  // this if is so that it happens only the first
  // clock cycle in which the user enters the chance mode
  // so it checks that the chance mode is not already true
  if (!_chanceMode && !_swingMode) {
    1506:	ldrb.w	r3, [r0, #51]	; 0x33
    150a:	cbnz	r3, 1512 <Controller::enterChanceMode()+0xe>
    150c:	ldrb.w	r3, [r0, #49]	; 0x31
    1510:	cbz	r3, 1514 <Controller::enterChanceMode()+0x10>
    1512:	pop	{r3, pc}
    _chanceMode = true;
    1514:	movs	r3, #1
    1516:	strb.w	r3, [r0, #51]	; 0x33
    151a:	movs	r1, #6
    151c:	ldr	r0, [pc, #12]	; (152c <Controller::enterChanceMode()+0x28>)
    151e:	bl	16a8 <usb_serial_write>
    1522:	ldr	r0, [pc, #12]	; (1530 <Controller::enterChanceMode()+0x2c>)
    Serial.println("CHANCE");
  }
};
    1524:	ldmia.w	sp!, {r3, lr}
    1528:	b.w	321c <Print::println()>
    152c:	.word	0x00004848
    1530:	.word	0x1fff0c48

00001534 <Controller::exitChanceMode()>:

void Controller::exitChanceMode () {
  _chanceMode = false;
    1534:	movs	r2, #0
    1536:	strb.w	r2, [r0, #51]	; 0x33

  printCurrentMode();
    153a:	b.w	1360 <Controller::printCurrentMode()>
    153e:	nop

00001540 <Controller::enterSwingMode()>:
};

void Controller::enterSwingMode () {
  if (!_swingMode) {
    1540:	ldrb.w	r3, [r0, #49]	; 0x31
  _chanceMode = false;

  printCurrentMode();
};

void Controller::enterSwingMode () {
    1544:	push	{r4, lr}
    1546:	mov	r4, r0
  if (!_swingMode) {
    1548:	cbnz	r3, 1558 <Controller::enterSwingMode()+0x18>
    154a:	movs	r1, #5
    154c:	ldr	r0, [pc, #16]	; (1560 <Controller::enterSwingMode()+0x20>)
    154e:	bl	16a8 <usb_serial_write>
    1552:	ldr	r0, [pc, #16]	; (1564 <Controller::enterSwingMode()+0x24>)
    1554:	bl	321c <Print::println()>
    Serial.println("SWING");
  }

  _swingMode = true;
    1558:	movs	r3, #1
    155a:	strb.w	r3, [r4, #49]	; 0x31
    155e:	pop	{r4, pc}
    1560:	.word	0x00004850
    1564:	.word	0x1fff0c48

00001568 <Controller::exitSwingMode()>:
};

void Controller::exitSwingMode () {
  _swingMode = false;
    1568:	movs	r2, #0
    156a:	strb.w	r2, [r0, #49]	; 0x31

  printCurrentMode();
    156e:	b.w	1360 <Controller::printCurrentMode()>
    1572:	nop

00001574 <Controller::enterMotionMode()>:
};

void Controller::enterMotionMode () {
  if (!_motionMode) {
    1574:	ldrb.w	r3, [r0, #50]	; 0x32
    1578:	cbz	r3, 157c <Controller::enterMotionMode()+0x8>
    157a:	bx	lr
  _swingMode = false;

  printCurrentMode();
};

void Controller::enterMotionMode () {
    157c:	push	{r4, lr}
    157e:	movs	r1, #6
    1580:	mov	r4, r0
    1582:	ldr	r0, [pc, #20]	; (1598 <Controller::enterMotionMode()+0x24>)
    1584:	bl	16a8 <usb_serial_write>
    1588:	ldr	r0, [pc, #16]	; (159c <Controller::enterMotionMode()+0x28>)
    158a:	bl	321c <Print::println()>
  if (!_motionMode) {
    Serial.println("MOTION");
    _motionMode = true;
    158e:	movs	r3, #1
    1590:	strb.w	r3, [r4, #50]	; 0x32
    1594:	pop	{r4, pc}
    1596:	nop
    1598:	.word	0x00004858
    159c:	.word	0x1fff0c48

000015a0 <Controller::exitMotionMode()>:
  }
};

void Controller::exitMotionMode () {
  _motionMode = false;
    15a0:	movs	r2, #0
    15a2:	strb.w	r2, [r0, #50]	; 0x32
  
  printCurrentMode();
    15a6:	b.w	1360 <Controller::printCurrentMode()>
    15aa:	nop

000015ac <Controller::getChanceMode()>:
};

bool Controller::getChanceMode () {
  return _chanceMode == true;
};
    15ac:	ldrb.w	r0, [r0, #51]	; 0x33
    15b0:	bx	lr
    15b2:	nop

000015b4 <Controller::getSwingMode()>:

bool Controller::getSwingMode () {
  return _swingMode == true;
}
    15b4:	ldrb.w	r0, [r0, #49]	; 0x31
    15b8:	bx	lr
    15ba:	nop

000015bc <Controller::getMotionMode()>:

bool Controller::getMotionMode () {
  return _motionMode == true;
}
    15bc:	ldrb.w	r0, [r0, #50]	; 0x32
    15c0:	bx	lr
    15c2:	nop

000015c4 <Controller::getCopyMode()>:

bool Controller::getCopyMode () {
  return _copyMode;
}
    15c4:	ldrb.w	r0, [r0, #84]	; 0x54
    15c8:	bx	lr
    15ca:	nop

000015cc <Controller::getShiftMode()>:

bool Controller::getShiftMode () {
  return _shiftMode;
};
    15cc:	ldrb.w	r0, [r0, #48]	; 0x30
    15d0:	bx	lr
    15d2:	nop

000015d4 <Controller::getMode()>:

Modes Controller::getMode() {
  return _currentMode;
};
    15d4:	ldrb.w	r0, [r0, #52]	; 0x34
    15d8:	bx	lr
    15da:	nop

000015dc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    15dc:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    15de:	ldr	r5, [pc, #60]	; (161c <usb_serial_getchar+0x40>)
    15e0:	ldr	r0, [r5, #0]
    15e2:	cbz	r0, 1604 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    15e4:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    15e6:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    15e8:	adds	r1, r0, r3
    15ea:	adds	r3, #1
	if (i >= rx_packet->len) {
    15ec:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    15ee:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    15f0:	bcs.n	15f8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    15f2:	strh	r3, [r0, #2]
	}
	return c;
    15f4:	mov	r0, r4
}
    15f6:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    15f8:	bl	2488 <usb_free>
		rx_packet = NULL;
    15fc:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    15fe:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1600:	str	r3, [r5, #0]
    1602:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1604:	ldr	r3, [pc, #24]	; (1620 <usb_serial_getchar+0x44>)
    1606:	ldrb	r3, [r3, #0]
    1608:	cbz	r3, 1616 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    160a:	movs	r0, #2
    160c:	bl	24d4 <usb_rx>
    1610:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1612:	cmp	r0, #0
    1614:	bne.n	15e4 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1616:	mov.w	r0, #4294967295
    161a:	pop	{r3, r4, r5, pc}
    161c:	.word	0x1fff15c0
    1620:	.word	0x1fff1720

00001624 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1624:	push	{r4, lr}
	if (!rx_packet) {
    1626:	ldr	r4, [pc, #36]	; (164c <usb_serial_peekchar+0x28>)
    1628:	ldr	r0, [r4, #0]
    162a:	cbz	r0, 1634 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    162c:	ldrh	r3, [r0, #2]
    162e:	add	r0, r3
    1630:	ldrb	r0, [r0, #8]
}
    1632:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1634:	ldr	r3, [pc, #24]	; (1650 <usb_serial_peekchar+0x2c>)
    1636:	ldrb	r3, [r3, #0]
    1638:	cbz	r3, 1646 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    163a:	movs	r0, #2
    163c:	bl	24d4 <usb_rx>
    1640:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1642:	cmp	r0, #0
    1644:	bne.n	162c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1646:	mov.w	r0, #4294967295
    164a:	pop	{r4, pc}
    164c:	.word	0x1fff15c0
    1650:	.word	0x1fff1720

00001654 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1654:	ldr	r3, [pc, #16]	; (1668 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1656:	ldr	r2, [pc, #20]	; (166c <usb_serial_available+0x18>)
    1658:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    165a:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    165c:	cbz	r3, 1666 <usb_serial_available+0x12>
    165e:	ldrh	r2, [r3, #0]
    1660:	ldrh	r3, [r3, #2]
    1662:	subs	r3, r2, r3
    1664:	add	r0, r3
	return count;
}
    1666:	bx	lr
    1668:	.word	0x1fff15c0
    166c:	.word	0x1fff1bb8

00001670 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1670:	ldr	r3, [pc, #44]	; (16a0 <usb_serial_flush_input+0x30>)
    1672:	ldrb	r3, [r3, #0]
    1674:	cbz	r3, 169e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1676:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1678:	ldr	r4, [pc, #40]	; (16a4 <usb_serial_flush_input+0x34>)
    167a:	ldr	r0, [r4, #0]
    167c:	cbz	r0, 1692 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    167e:	bl	2488 <usb_free>
		rx_packet = NULL;
    1682:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1684:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1686:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1688:	bl	24d4 <usb_rx>
		if (!rx) break;
    168c:	cbz	r0, 169c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    168e:	bl	2488 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1692:	movs	r0, #2
    1694:	bl	24d4 <usb_rx>
		if (!rx) break;
    1698:	cmp	r0, #0
    169a:	bne.n	168e <usb_serial_flush_input+0x1e>
    169c:	pop	{r4, pc}
    169e:	bx	lr
    16a0:	.word	0x1fff1720
    16a4:	.word	0x1fff15c0

000016a8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    16a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    16ac:	ldr.w	r9, [pc, #248]	; 17a8 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    16b0:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    16b2:	movs	r2, #1
    16b4:	strb.w	r2, [r9]
	while (size > 0) {
    16b8:	str	r1, [sp, #4]
    16ba:	cbz	r1, 1718 <usb_serial_write+0x70>
    16bc:	ldr.w	r8, [pc, #236]	; 17ac <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    16c0:	ldr	r7, [pc, #212]	; (1798 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    16c2:	ldr	r6, [sp, #4]
    16c4:	mov	fp, r0
		if (!tx_packet) {
    16c6:	ldr.w	r0, [r8]
    16ca:	cbz	r0, 173a <usb_serial_write+0x92>
    16cc:	ldr	r5, [pc, #204]	; (179c <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    16ce:	ldrh	r4, [r0, #2]
    16d0:	rsb	r1, r4, #64	; 0x40
    16d4:	cmp	r1, r6
    16d6:	it	cs
    16d8:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    16da:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    16de:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    16e0:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    16e4:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    16e6:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    16e8:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    16ec:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    16f0:	cbz	r1, 1708 <usb_serial_write+0x60>
    16f2:	subs	r4, #1
    16f4:	add	r2, r4
    16f6:	add	r1, fp
    16f8:	ldrb.w	r4, [fp], #1
    16fc:	strb.w	r4, [r2, #1]!
    1700:	cmp	fp, r1
    1702:	bne.n	16f8 <usb_serial_write+0x50>
    1704:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1708:	cmp.w	lr, #63	; 0x3f
    170c:	bhi.n	1726 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    170e:	ldr	r2, [pc, #144]	; (17a0 <usb_serial_write+0xf8>)
    1710:	movs	r1, #5
    1712:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1714:	cmp	r6, #0
    1716:	bne.n	16c6 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1718:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    171a:	movs	r3, #0
    171c:	strb.w	r3, [r9]
	return ret;
}
    1720:	add	sp, #12
    1722:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1726:	movs	r2, #64	; 0x40
    1728:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    172a:	mov	r1, r0
    172c:	movs	r0, #3
    172e:	bl	2624 <usb_tx>
			tx_packet = NULL;
    1732:	movs	r2, #0
    1734:	str.w	r2, [r8]
    1738:	b.n	170e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    173a:	ldrb	r2, [r7, #0]
    173c:	cbz	r2, 1788 <usb_serial_write+0xe0>
    173e:	ldr	r4, [pc, #100]	; (17a4 <usb_serial_write+0xfc>)
    1740:	ldr	r5, [pc, #88]	; (179c <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1742:	mov.w	sl, #1
    1746:	b.n	1758 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1748:	subs	r4, #1
    174a:	beq.n	177a <usb_serial_write+0xd2>
    174c:	ldrb	r2, [r5, #0]
    174e:	cbnz	r2, 177a <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1750:	bl	3128 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1754:	ldrb	r2, [r7, #0]
    1756:	cbz	r2, 1788 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1758:	movs	r0, #3
    175a:	bl	2510 <usb_tx_packet_count>
    175e:	cmp	r0, #7
    1760:	bhi.n	1748 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1762:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1766:	bl	2448 <usb_malloc>
    176a:	str.w	r0, [r8]
					if (tx_packet) break;
    176e:	cmp	r0, #0
    1770:	bne.n	16ce <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1772:	ldr	r3, [pc, #52]	; (17a8 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1774:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1776:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1778:	bne.n	174c <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    177a:	movs	r3, #1
					return -1;
    177c:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1780:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1782:	add	sp, #12
    1784:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1788:	movs	r3, #0
					return -1;
    178a:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    178e:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1792:	add	sp, #12
    1794:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1798:	.word	0x1fff1720
    179c:	.word	0x1fff15bc
    17a0:	.word	0x1fff15b4
    17a4:	.word	0x00014821
    17a8:	.word	0x1fff15b5
    17ac:	.word	0x1fff15b8

000017b0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    17b0:	push	{lr}
    17b2:	sub	sp, #12
    17b4:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    17b6:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    17b8:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    17bc:	mov	r0, r3
    17be:	bl	16a8 <usb_serial_write>
}
    17c2:	add	sp, #12
    17c4:	ldr.w	pc, [sp], #4

000017c8 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    17c8:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    17ca:	ldr	r5, [pc, #56]	; (1804 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    17cc:	ldr	r4, [pc, #56]	; (1808 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    17ce:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    17d0:	movs	r3, #1
    17d2:	strb	r3, [r4, #0]
	if (!tx_packet) {
    17d4:	cbz	r0, 17e2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    17d6:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    17d8:	movs	r3, #0
    17da:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    17dc:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    17e0:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    17e2:	ldr	r3, [pc, #40]	; (180c <usb_serial_write_buffer_free+0x44>)
    17e4:	ldrb	r3, [r3, #0]
    17e6:	cbnz	r3, 17ee <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    17e8:	movs	r0, #0
    17ea:	strb	r0, [r4, #0]
			return 0;
    17ec:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    17ee:	movs	r0, #3
    17f0:	bl	2510 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    17f4:	cmp	r0, #7
    17f6:	bhi.n	17e8 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    17f8:	bl	2448 <usb_malloc>
    17fc:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    17fe:	cmp	r0, #0
    1800:	bne.n	17d6 <usb_serial_write_buffer_free+0xe>
    1802:	b.n	17e8 <usb_serial_write_buffer_free+0x20>
    1804:	.word	0x1fff15b8
    1808:	.word	0x1fff15b5
    180c:	.word	0x1fff1720

00001810 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1810:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1812:	ldr	r3, [pc, #68]	; (1858 <usb_serial_flush_output+0x48>)
    1814:	ldrb	r3, [r3, #0]
    1816:	cbz	r3, 183c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1818:	ldr	r6, [pc, #64]	; (185c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    181a:	ldr	r5, [pc, #68]	; (1860 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    181c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    181e:	movs	r7, #1
    1820:	strb	r7, [r5, #0]
	if (tx_packet) {
    1822:	cbz	r4, 183e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1824:	ldr	r2, [pc, #60]	; (1864 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1826:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1828:	movs	r7, #0
    182a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    182c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    182e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1830:	movs	r0, #3
    1832:	bl	2624 <usb_tx>
		tx_packet = NULL;
    1836:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1838:	movs	r3, #0
    183a:	strb	r3, [r5, #0]
    183c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    183e:	bl	2448 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1842:	ldr	r3, [pc, #32]	; (1864 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1844:	cbz	r0, 1852 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1846:	mov	r1, r0
    1848:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    184a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    184c:	bl	2624 <usb_tx>
    1850:	b.n	1838 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1852:	strb	r7, [r3, #0]
    1854:	b.n	1838 <usb_serial_flush_output+0x28>
    1856:	nop
    1858:	.word	0x1fff1720
    185c:	.word	0x1fff15b8
    1860:	.word	0x1fff15b5
    1864:	.word	0x1fff15b4

00001868 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1868:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    186a:	ldr	r3, [pc, #56]	; (18a4 <usb_serial_flush_callback+0x3c>)
    186c:	ldrb	r3, [r3, #0]
    186e:	cbnz	r3, 188e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1870:	ldr	r4, [pc, #52]	; (18a8 <usb_serial_flush_callback+0x40>)
    1872:	ldr	r1, [r4, #0]
    1874:	cbz	r1, 1890 <usb_serial_flush_callback+0x28>
    1876:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    187a:	ldrh	r3, [r1, #2]
    187c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    187e:	movs	r0, #3
    1880:	bl	2624 <usb_tx>
		tx_packet = NULL;
    1884:	str	r5, [r4, #0]
    1886:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1888:	ldr	r3, [pc, #32]	; (18ac <usb_serial_flush_callback+0x44>)
    188a:	movs	r2, #1
    188c:	strb	r2, [r3, #0]
    188e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1890:	bl	2448 <usb_malloc>
		if (tx) {
    1894:	cmp	r0, #0
    1896:	beq.n	1888 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1898:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    189a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    189e:	movs	r0, #3
    18a0:	b.w	2624 <usb_tx>
    18a4:	.word	0x1fff15b5
    18a8:	.word	0x1fff15b8
    18ac:	.word	0x1fff15b4

000018b0 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    18b0:	ldr	r2, [pc, #220]	; (1990 <wait_for_cal+0xe0>)
    18b2:	ldr	r1, [pc, #224]	; (1994 <wait_for_cal+0xe4>)
    18b4:	ldr	r3, [r2, #0]
    18b6:	lsls	r3, r3, #24
    18b8:	bmi.n	18b4 <wait_for_cal+0x4>
    18ba:	ldr	r3, [r1, #0]
    18bc:	ands.w	r3, r3, #128	; 0x80
    18c0:	bne.n	18b4 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    18c2:	cpsid	i
	if (calibrating) {
    18c4:	ldr	r1, [pc, #208]	; (1998 <wait_for_cal+0xe8>)
    18c6:	ldrb	r2, [r1, #0]
    18c8:	cmp	r2, #0
    18ca:	beq.n	198c <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    18cc:	ldr	r2, [pc, #204]	; (199c <wait_for_cal+0xec>)
    18ce:	ldr	r0, [pc, #208]	; (19a0 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    18d0:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    18d2:	ldr	r4, [pc, #208]	; (19a4 <wait_for_cal+0xf4>)
    18d4:	ldr	r7, [r2, #0]
    18d6:	ldr	r6, [r0, #0]
    18d8:	ldr	r5, [r4, #0]
    18da:	ldr	r4, [r2, #12]
    18dc:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    18de:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    18e0:	adds	r2, #20
    18e2:	ldr	r0, [r0, #0]
    18e4:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    18e6:	ldr	r7, [pc, #192]	; (19a8 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    18e8:	add	r5, r6
    18ea:	add	r4, r5
    18ec:	add	r0, r4
    18ee:	add	r2, r0
    18f0:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    18f4:	ldr	r6, [pc, #180]	; (19ac <wait_for_cal+0xfc>)
    18f6:	ldr	r0, [pc, #184]	; (19b0 <wait_for_cal+0x100>)
    18f8:	ldr	r5, [pc, #184]	; (19b4 <wait_for_cal+0x104>)
    18fa:	ldr	r4, [pc, #188]	; (19b8 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    18fc:	orr.w	r2, r2, #32768	; 0x8000
    1900:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1902:	ldr	r7, [r6, #0]
    1904:	ldr	r6, [r0, #0]
    1906:	ldr	r5, [r5, #0]
    1908:	ldr	r2, [pc, #176]	; (19bc <wait_for_cal+0x10c>)
    190a:	ldr	r4, [r4, #0]
    190c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    190e:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1910:	ldr	r0, [r0, #0]
    1912:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1914:	ldr	r7, [pc, #168]	; (19c0 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1916:	add	r5, r6
    1918:	add	r4, r5
    191a:	add	r0, r4
    191c:	add	r2, r0
    191e:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1922:	ldr	r6, [pc, #160]	; (19c4 <wait_for_cal+0x114>)
    1924:	ldr	r0, [pc, #160]	; (19c8 <wait_for_cal+0x118>)
    1926:	ldr	r5, [pc, #164]	; (19cc <wait_for_cal+0x11c>)
    1928:	ldr	r4, [pc, #164]	; (19d0 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    192a:	orr.w	r2, r2, #32768	; 0x8000
    192e:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1930:	ldr	r7, [r6, #0]
    1932:	ldr	r6, [r0, #0]
    1934:	ldr	r5, [r5, #0]
    1936:	ldr	r2, [pc, #156]	; (19d4 <wait_for_cal+0x124>)
    1938:	ldr	r4, [r4, #0]
    193a:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    193c:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    193e:	ldr	r0, [r0, #0]
    1940:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1942:	ldr	r7, [pc, #148]	; (19d8 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1944:	add	r5, r6
    1946:	add	r4, r5
    1948:	add	r0, r4
    194a:	add	r2, r0
    194c:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1950:	ldr	r6, [pc, #136]	; (19dc <wait_for_cal+0x12c>)
    1952:	ldr	r0, [pc, #140]	; (19e0 <wait_for_cal+0x130>)
    1954:	ldr	r5, [pc, #140]	; (19e4 <wait_for_cal+0x134>)
    1956:	ldr	r4, [pc, #144]	; (19e8 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1958:	orr.w	r2, r2, #32768	; 0x8000
    195c:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    195e:	ldr	r7, [r6, #0]
    1960:	ldr	r6, [r0, #0]
    1962:	ldr	r5, [r5, #0]
    1964:	ldr	r2, [pc, #132]	; (19ec <wait_for_cal+0x13c>)
    1966:	ldr	r4, [r4, #0]
    1968:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    196a:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    196c:	ldr	r0, [r0, #0]
    196e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1970:	add	r5, r6
    1972:	add	r4, r5
    1974:	add	r0, r4
    1976:	add	r2, r0
    1978:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    197c:	ldr	r0, [pc, #112]	; (19f0 <wait_for_cal+0x140>)
    197e:	orr.w	r2, r2, #32768	; 0x8000
    1982:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1984:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1986:	cpsie	i
}
    1988:	pop	{r4, r5, r6, r7}
    198a:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    198c:	cpsie	i
    198e:	bx	lr
    1990:	.word	0x4003b024
    1994:	.word	0x400bb024
    1998:	.word	0x1fff15c6
    199c:	.word	0x4003b038
    19a0:	.word	0x4003b03c
    19a4:	.word	0x4003b040
    19a8:	.word	0x4003b02c
    19ac:	.word	0x4003b058
    19b0:	.word	0x4003b05c
    19b4:	.word	0x4003b060
    19b8:	.word	0x4003b064
    19bc:	.word	0x4003b06c
    19c0:	.word	0x4003b030
    19c4:	.word	0x400bb038
    19c8:	.word	0x400bb03c
    19cc:	.word	0x400bb040
    19d0:	.word	0x400bb044
    19d4:	.word	0x400bb04c
    19d8:	.word	0x400bb02c
    19dc:	.word	0x400bb058
    19e0:	.word	0x400bb05c
    19e4:	.word	0x400bb060
    19e8:	.word	0x400bb064
    19ec:	.word	0x400bb06c
    19f0:	.word	0x400bb030

000019f4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    19f4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    19f6:	ldr	r0, [pc, #164]	; (1a9c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    19f8:	ldr	r2, [pc, #164]	; (1aa0 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    19fa:	ldr	r3, [pc, #168]	; (1aa4 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    19fc:	ldr	r5, [pc, #168]	; (1aa8 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    19fe:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1a00:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1a02:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1a04:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1a06:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1a08:	ldr	r4, [pc, #160]	; (1aac <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1a0a:	cmp	r3, #8
    1a0c:	beq.n	1a70 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1a0e:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1a10:	ldr	r0, [pc, #156]	; (1ab0 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1a12:	ldr	r1, [pc, #160]	; (1ab4 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1a14:	beq.n	1a86 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1a16:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1a18:	ite	eq
    1a1a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1a1c:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1a1e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1a20:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1a22:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1a24:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1a26:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1a28:	ldr	r3, [pc, #140]	; (1ab8 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1a2a:	ldr	r1, [pc, #144]	; (1abc <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1a2c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1a2e:	ldr	r2, [pc, #144]	; (1ac0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1a30:	cbz	r3, 1a62 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1a32:	movs	r3, #1
    1a34:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1a36:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1a38:	ldr	r3, [pc, #136]	; (1ac4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1a3a:	ldr	r1, [pc, #140]	; (1ac8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1a3c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1a3e:	ldr	r2, [pc, #140]	; (1acc <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1a40:	cmp	r3, #1
    1a42:	bls.n	1a92 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1a44:	cmp	r3, #4
    1a46:	bls.n	1a68 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1a48:	cmp	r3, #8
    1a4a:	bls.n	1a8a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1a4c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1a4e:	ite	ls
    1a50:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1a52:	movhi	r3, #135	; 0x87
    1a54:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1a56:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1a58:	ldr	r3, [pc, #116]	; (1ad0 <analog_init+0xdc>)
    1a5a:	movs	r2, #1
    1a5c:	strb	r2, [r3, #0]
}
    1a5e:	pop	{r4, r5}
    1a60:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1a62:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1a64:	str	r3, [r2, #0]
    1a66:	b.n	1a38 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1a68:	movs	r3, #132	; 0x84
    1a6a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1a6c:	str	r3, [r2, #0]
    1a6e:	b.n	1a58 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1a70:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1a74:	ldr	r1, [pc, #60]	; (1ab4 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1a76:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1a78:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1a7a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1a7c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1a7e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1a80:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1a82:	str	r3, [r1, #0]
    1a84:	b.n	1a28 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1a86:	movs	r2, #57	; 0x39
    1a88:	b.n	1a7a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1a8a:	movs	r3, #133	; 0x85
    1a8c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1a8e:	str	r3, [r2, #0]
    1a90:	b.n	1a58 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1a92:	movs	r3, #128	; 0x80
    1a94:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1a96:	str	r3, [r2, #0]
    1a98:	b.n	1a58 <analog_init+0x64>
    1a9a:	nop
    1a9c:	.word	0x40074000
    1aa0:	.word	0x40074001
    1aa4:	.word	0x1fff0c40
    1aa8:	.word	0x4003b008
    1aac:	.word	0x4003b00c
    1ab0:	.word	0x400bb008
    1ab4:	.word	0x400bb00c
    1ab8:	.word	0x1fff15c9
    1abc:	.word	0x4003b020
    1ac0:	.word	0x400bb020
    1ac4:	.word	0x1fff0c41
    1ac8:	.word	0x4003b024
    1acc:	.word	0x400bb024
    1ad0:	.word	0x1fff15c6

00001ad4 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1ad4:	cmp	r0, #71	; 0x47
    1ad6:	bhi.n	1b38 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1ad8:	ldr	r3, [pc, #204]	; (1ba8 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1ada:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1ade:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1ae0:	cmp	r6, #255	; 0xff
    1ae2:	beq.n	1b3c <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1ae4:	ldr	r3, [pc, #196]	; (1bac <analogRead+0xd8>)
    1ae6:	ldrb	r3, [r3, #0]
    1ae8:	cmp	r3, #0
    1aea:	bne.n	1b42 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1aec:	lsls	r2, r6, #24
    1aee:	bmi.n	1b4a <analogRead+0x76>
#endif

	__disable_irq();
    1af0:	cpsid	i
    1af2:	ldr	r5, [pc, #188]	; (1bb0 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1af4:	ldr	r4, [pc, #188]	; (1bb4 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1af6:	mov	r7, r5
    1af8:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1afa:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1afc:	strb	r3, [r5, #0]
	__enable_irq();
    1afe:	cpsie	i
	while (1) {
		__disable_irq();
    1b00:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1b02:	ldr	r3, [r4, #0]
    1b04:	lsls	r3, r3, #24
    1b06:	bmi.n	1b22 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1b08:	ldrb	r3, [r7, #0]
    1b0a:	cbnz	r3, 1b14 <analogRead+0x40>
    1b0c:	b.n	1af8 <analogRead+0x24>
    1b0e:	ldrb	r3, [r5, #0]
    1b10:	cmp	r3, #0
    1b12:	beq.n	1af8 <analogRead+0x24>
		__enable_irq();
    1b14:	cpsie	i
		yield();
    1b16:	bl	3128 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1b1a:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1b1c:	ldr	r3, [r4, #0]
    1b1e:	lsls	r0, r3, #24
    1b20:	bpl.n	1b0e <analogRead+0x3a>
			result = ADC0_RA;
    1b22:	ldr	r3, [pc, #148]	; (1bb8 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1b24:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1b26:	movs	r2, #0
    1b28:	strb	r2, [r5, #0]
			__enable_irq();
    1b2a:	cpsie	i
			result >>= analog_right_shift;
    1b2c:	ldr	r2, [pc, #140]	; (1bbc <analogRead+0xe8>)
    1b2e:	ldrb	r0, [r2, #0]
    1b30:	asr.w	r0, r3, r0
			return result;
    1b34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1b38:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1b3a:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1b3c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1b3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1b42:	bl	18b0 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1b46:	lsls	r2, r6, #24
    1b48:	bpl.n	1af0 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    1b4a:	cpsid	i
    1b4c:	ldr	r5, [pc, #112]	; (1bc0 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1b4e:	ldr.w	r8, [pc, #124]	; 1bcc <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    1b52:	ldr	r4, [pc, #112]	; (1bc4 <analogRead+0xf0>)
    1b54:	and.w	r7, r6, #64	; 0x40
    1b58:	uxtb	r7, r7
    1b5a:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1b5e:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    1b62:	cbz	r7, 1b9c <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1b64:	bic.w	r3, r3, #16
    1b68:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    1b6c:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    1b6e:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    1b70:	ldr	r2, [pc, #76]	; (1bc0 <analogRead+0xec>)
    1b72:	strb	r3, [r5, #0]
	__enable_irq();
    1b74:	cpsie	i
	while (1) {
		__disable_irq();
    1b76:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1b78:	ldr	r3, [r4, #0]
    1b7a:	lsls	r1, r3, #24
    1b7c:	bmi.n	1b98 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    1b7e:	ldrb	r3, [r2, #0]
    1b80:	cbnz	r3, 1b8a <analogRead+0xb6>
    1b82:	b.n	1b5e <analogRead+0x8a>
    1b84:	ldrb	r3, [r5, #0]
    1b86:	cmp	r3, #0
    1b88:	beq.n	1b5e <analogRead+0x8a>
		__enable_irq();
    1b8a:	cpsie	i
		yield();
    1b8c:	bl	3128 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1b90:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1b92:	ldr	r3, [r4, #0]
    1b94:	lsls	r3, r3, #24
    1b96:	bpl.n	1b84 <analogRead+0xb0>
			result = ADC1_RA;
    1b98:	ldr	r3, [pc, #44]	; (1bc8 <analogRead+0xf4>)
    1b9a:	b.n	1b24 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1b9c:	orr.w	r3, r3, #16
    1ba0:	str.w	r3, [r8]
    1ba4:	b.n	1b6c <analogRead+0x98>
    1ba6:	nop
    1ba8:	.word	0x00004860
    1bac:	.word	0x1fff15c6
    1bb0:	.word	0x1fff15c8
    1bb4:	.word	0x4003b000
    1bb8:	.word	0x4003b010
    1bbc:	.word	0x1fff15c5
    1bc0:	.word	0x1fff15c7
    1bc4:	.word	0x400bb000
    1bc8:	.word	0x400bb010
    1bcc:	.word	0x400bb00c

00001bd0 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1bd0:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1bd2:	ldr	r3, [pc, #68]	; (1c18 <digitalWrite.part.1+0x48>)
    1bd4:	ldr.w	r2, [r3, r0, lsl #3]
    1bd8:	ldrb.w	r4, [r2, #640]	; 0x280
    1bdc:	cbz	r4, 1bec <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1bde:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1be0:	cbz	r1, 1c02 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1be2:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1be6:	ldr.w	r4, [sp], #4
    1bea:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1bec:	add.w	r3, r3, r0, lsl #3
    1bf0:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1bf2:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1bf4:	cbnz	r1, 1c0c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1bf6:	bic.w	r2, r2, #2
    1bfa:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1bfc:	ldr.w	r4, [sp], #4
    1c00:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1c02:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1c06:	ldr.w	r4, [sp], #4
    1c0a:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1c0c:	orr.w	r2, r2, #3
    1c10:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1c12:	ldr.w	r4, [sp], #4
    1c16:	bx	lr
    1c18:	.word	0x000048a8

00001c1c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1c1c:	ldr	r2, [pc, #112]	; (1c90 <pinMode.part.2+0x74>)
    1c1e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1c22:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1c24:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1c26:	beq.n	1c4c <pinMode.part.2+0x30>
    1c28:	cmp	r1, #4
    1c2a:	beq.n	1c64 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1c2c:	ldr.w	r0, [r2, r0, lsl #3]
    1c30:	movs	r2, #0
    1c32:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1c36:	cbz	r1, 1c44 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1c38:	cmp	r1, #2
    1c3a:	beq.n	1c7e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1c3c:	cmp	r1, #3
    1c3e:	beq.n	1c86 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1c40:	str	r2, [r3, #0]
    1c42:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1c44:	mov.w	r2, #256	; 0x100
    1c48:	str	r2, [r3, #0]
    1c4a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1c4c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1c50:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1c54:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1c58:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1c5a:	ldr	r2, [r3, #0]
    1c5c:	bic.w	r2, r2, #32
    1c60:	str	r2, [r3, #0]
    1c62:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1c64:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1c68:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1c6c:	movs	r0, #1
    1c6e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1c72:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    1c74:	ldr	r2, [r3, #0]
    1c76:	orr.w	r2, r2, #32
    1c7a:	str	r2, [r3, #0]
    1c7c:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    1c7e:	movw	r2, #259	; 0x103
    1c82:	str	r2, [r3, #0]
    1c84:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    1c86:	mov.w	r2, #258	; 0x102
    1c8a:	str	r2, [r3, #0]
    1c8c:	bx	lr
    1c8e:	nop
    1c90:	.word	0x000048a8

00001c94 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    1c94:	push	{r4, r5}
	RTC_SR = 0;
    1c96:	ldr	r3, [pc, #20]	; (1cac <rtc_set+0x18>)
	RTC_TPR = 0;
    1c98:	ldr	r5, [pc, #20]	; (1cb0 <rtc_set+0x1c>)
	RTC_TSR = t;
    1c9a:	ldr	r4, [pc, #24]	; (1cb4 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1c9c:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    1c9e:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1ca0:	str	r2, [r3, #0]
	RTC_TPR = 0;
    1ca2:	str	r2, [r5, #0]
	RTC_TSR = t;
    1ca4:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    1ca6:	str	r1, [r3, #0]
}
    1ca8:	pop	{r4, r5}
    1caa:	bx	lr
    1cac:	.word	0x4003d014
    1cb0:	.word	0x4003d004
    1cb4:	.word	0x4003d000

00001cb8 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    1cb8:	cmp	r0, #63	; 0x3f
    1cba:	bhi.n	1cc0 <digitalWrite+0x8>
    1cbc:	b.w	1bd0 <digitalWrite.part.1>
    1cc0:	bx	lr
    1cc2:	nop

00001cc4 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1cc4:	cmp	r0, #63	; 0x3f
    1cc6:	bhi.n	1cd6 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    1cc8:	ldr	r3, [pc, #16]	; (1cdc <digitalRead+0x18>)
    1cca:	ldr.w	r3, [r3, r0, lsl #3]
    1cce:	ldrb.w	r0, [r3, #512]	; 0x200
    1cd2:	uxtb	r0, r0
    1cd4:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1cd6:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    1cd8:	bx	lr
    1cda:	nop
    1cdc:	.word	0x000048a8

00001ce0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1ce0:	cmp	r0, #63	; 0x3f
    1ce2:	bhi.n	1ce8 <pinMode+0x8>
    1ce4:	b.w	1c1c <pinMode.part.2>
    1ce8:	bx	lr
    1cea:	nop

00001cec <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1cec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cf0:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1cf2:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1cf4:	ldr	r7, [pc, #136]	; (1d80 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1cf6:	ldr	r3, [pc, #140]	; (1d84 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1cf8:	ldr	r2, [pc, #140]	; (1d88 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1cfa:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1cfc:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1cfe:	ldr	r2, [r2, #0]
	__enable_irq();
    1d00:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1d02:	lsls	r2, r2, #5
    1d04:	bpl.n	1d0c <delay+0x20>
    1d06:	cmp	r3, #50	; 0x32
    1d08:	it	hi
    1d0a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1d0c:	cbz	r5, 1d7c <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1d0e:	rsb	r3, r3, #179200	; 0x2bc00
    1d12:	addw	r3, r3, #799	; 0x31f
    1d16:	ldr	r6, [pc, #116]	; (1d8c <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1d18:	ldr.w	r9, [pc, #104]	; 1d84 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1d1c:	ldr.w	r8, [pc, #104]	; 1d88 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1d20:	lsrs	r3, r3, #2
    1d22:	mov.w	r2, #1000	; 0x3e8
    1d26:	umull	r1, r3, r6, r3
    1d2a:	mul.w	r4, r2, r4
    1d2e:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1d32:	cpsid	i
	current = SYST_CVR;
    1d34:	ldr.w	r1, [r9]
	count = systick_millis_count;
    1d38:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1d3a:	ldr.w	lr, [r8]
	__enable_irq();
    1d3e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1d40:	rsb	r3, r1, #179200	; 0x2bc00
    1d44:	addw	r3, r3, #799	; 0x31f
    1d48:	lsrs	r3, r3, #2
    1d4a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1d4e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1d52:	rsb	r3, r4, r3, lsr #2
    1d56:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1d5a:	beq.n	1d62 <delay+0x76>
    1d5c:	cmp	r1, #50	; 0x32
    1d5e:	it	hi
    1d60:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1d62:	mla	r3, r0, r2, r3
    1d66:	cmp.w	r3, #1000	; 0x3e8
    1d6a:	bcc.n	1d76 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    1d6c:	subs	r5, #1
    1d6e:	beq.n	1d7c <delay+0x90>
				start += 1000;
    1d70:	add.w	r4, r4, #1000	; 0x3e8
    1d74:	b.n	1d32 <delay+0x46>
			}
			yield();
    1d76:	bl	3128 <yield>
		}
    1d7a:	b.n	1d32 <delay+0x46>
    1d7c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d80:	.word	0x1fff15cc
    1d84:	.word	0xe000e018
    1d88:	.word	0xe000ed04
    1d8c:	.word	0x16c16c17

00001d90 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    1d90:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1d92:	ldr	r3, [pc, #312]	; (1ecc <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1d94:	ldr	r0, [pc, #312]	; (1ed0 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    1d96:	ldr.w	ip, [pc, #348]	; 1ef4 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    1d9a:	ldr	r4, [pc, #312]	; (1ed4 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    1d9c:	ldr	r1, [pc, #312]	; (1ed8 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1d9e:	ldr.w	lr, [pc, #344]	; 1ef8 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    1da2:	ldr	r6, [pc, #312]	; (1edc <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    1da4:	ldr	r5, [pc, #312]	; (1ee0 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    1da6:	ldr	r7, [pc, #316]	; (1ee4 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1da8:	mov.w	r2, #134217728	; 0x8000000
    1dac:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    1dae:	mov.w	r2, #268435456	; 0x10000000
    1db2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1db4:	mov.w	r2, #536870912	; 0x20000000
    1db8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    1dba:	mov.w	r2, #1073741824	; 0x40000000
    1dbe:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1dc0:	mov.w	r2, #2147483648	; 0x80000000
    1dc4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1dc6:	movs	r2, #0
    1dc8:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1dca:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1dcc:	movw	r0, #61439	; 0xefff
    1dd0:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1dd4:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1dd8:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1dda:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    1dde:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1de0:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1de2:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1de4:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1de8:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    1dea:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    1dee:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1df0:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1df4:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1df6:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    1dfa:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1dfe:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    1e02:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1e06:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    1e0a:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1e0c:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1e10:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1e12:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1e14:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    1e16:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    1e1a:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    1e1c:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    1e1e:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1e20:	ldr	r4, [pc, #196]	; (1ee8 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    1e22:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    1e24:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1e26:	movs	r1, #9
    1e28:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    1e2a:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    1e2e:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1e32:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    1e34:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1e36:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    1e38:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    1e3a:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    1e3c:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1e3e:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1e42:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    1e46:	add.w	r7, r7, #520192	; 0x7f000
    1e4a:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1e4c:	addw	r4, r4, #2044	; 0x7fc
    1e50:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    1e52:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    1e54:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    1e56:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1e58:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    1e5c:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    1e5e:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    1e62:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    1e66:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1e68:	sub.w	r4, r4, #460800	; 0x70800
    1e6c:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    1e70:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1e72:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1e74:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1e78:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1e7a:	ldr	r0, [pc, #112]	; (1eec <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1e7c:	orr.w	r1, r1, #512	; 0x200
    1e80:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1e82:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1e84:	ldr	r4, [pc, #104]	; (1ef0 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    1e86:	add.w	lr, lr, #65280	; 0xff00
    1e8a:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    1e8e:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    1e92:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    1e96:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1e9a:	orr.w	r1, r1, #33554432	; 0x2000000
    1e9e:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    1ea0:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    1ea4:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1ea8:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    1eaa:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    1eac:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    1eae:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1eb0:	str	r2, [r4, #0]
#endif
	analog_init();
    1eb2:	bl	19f4 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    1eb6:	movs	r0, #25
    1eb8:	bl	1cec <delay>
	usb_init();
    1ebc:	bl	3058 <usb_init>
	delay(275);
    1ec0:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    1ec4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    1ec8:	b.w	1cec <delay>
    1ecc:	.word	0xe000e104
    1ed0:	.word	0x40038004
    1ed4:	.word	0x40038014
    1ed8:	.word	0x4003801c
    1edc:	.word	0x40038024
    1ee0:	.word	0x4003802c
    1ee4:	.word	0x40038034
    1ee8:	.word	0x40038000
    1eec:	.word	0x40048004
    1ef0:	.word	0x400c9000
    1ef4:	.word	0x40038008
    1ef8:	.word	0x4003800c

00001efc <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1efc:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1efe:	ldr	r3, [pc, #56]	; (1f38 <sysex_byte+0x3c>)
    1f00:	ldr	r4, [pc, #56]	; (1f3c <sysex_byte+0x40>)
    1f02:	ldr	r3, [r3, #0]
    1f04:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1f06:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1f08:	cbz	r3, 1f2e <sysex_byte+0x32>
    1f0a:	cmp.w	r1, #290	; 0x122
    1f0e:	bcs.n	1f1c <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1f10:	ldr	r2, [pc, #44]	; (1f40 <sysex_byte+0x44>)
    1f12:	adds	r3, r1, #1
    1f14:	strb	r5, [r2, r1]
    1f16:	uxth	r3, r3
    1f18:	strh	r3, [r4, #0]
	}
}
    1f1a:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1f1c:	movs	r2, #0
    1f1e:	ldr	r0, [pc, #32]	; (1f40 <sysex_byte+0x44>)
    1f20:	blx	r3
    1f22:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1f24:	ldr	r2, [pc, #24]	; (1f40 <sysex_byte+0x44>)
    1f26:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1f28:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1f2a:	strh	r3, [r4, #0]
	}
}
    1f2c:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    1f2e:	cmp.w	r1, #290	; 0x122
    1f32:	bcc.n	1f10 <sysex_byte+0x14>
    1f34:	pop	{r3, r4, r5, pc}
    1f36:	nop
    1f38:	.word	0x1fff15f4
    1f3c:	.word	0x1fff1a8e
    1f40:	.word	0x1fff1a94

00001f44 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1f44:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1f48:	ldr	r6, [pc, #132]	; (1fd0 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1f4a:	ldr	r7, [pc, #136]	; (1fd4 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    1f4c:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1f4e:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1f50:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1f52:	strb	r3, [r7, #0]
	if (!tx_packet) {
    1f54:	cbz	r1, 1f84 <usb_midi_write_packed+0x40>
    1f56:	ldr	r5, [pc, #128]	; (1fd8 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    1f58:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1f5a:	add.w	r2, r1, r3, lsl #2
    1f5e:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1f60:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1f62:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1f64:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1f68:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1f6a:	bhi.n	1f76 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    1f6c:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    1f6e:	movs	r3, #0
    1f70:	strb	r3, [r7, #0]
    1f72:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    1f76:	movs	r3, #64	; 0x40
    1f78:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1f7a:	movs	r0, #4
    1f7c:	bl	2624 <usb_tx>
		tx_packet = NULL;
    1f80:	str	r4, [r6, #0]
    1f82:	b.n	1f6e <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1f84:	ldr.w	r9, [pc, #84]	; 1fdc <usb_midi_write_packed+0x98>
    1f88:	ldrb.w	r3, [r9]
    1f8c:	cmp	r3, #0
    1f8e:	beq.n	1f72 <usb_midi_write_packed+0x2e>
    1f90:	ldr	r5, [pc, #68]	; (1fd8 <usb_midi_write_packed+0x94>)
    1f92:	movw	r4, #48001	; 0xbb81
    1f96:	b.n	1faa <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f98:	subs	r4, #1
    1f9a:	beq.n	1fc2 <usb_midi_write_packed+0x7e>
    1f9c:	ldrb	r3, [r5, #0]
    1f9e:	cbnz	r3, 1fc2 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    1fa0:	bl	3128 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1fa4:	ldrb.w	r3, [r9]
    1fa8:	cbz	r3, 1fca <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1faa:	movs	r0, #4
    1fac:	bl	2510 <usb_tx_packet_count>
    1fb0:	cmp	r0, #5
    1fb2:	bhi.n	1f98 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    1fb4:	bl	2448 <usb_malloc>
    1fb8:	mov	r1, r0
    1fba:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    1fbc:	cmp	r0, #0
    1fbe:	beq.n	1f98 <usb_midi_write_packed+0x54>
    1fc0:	b.n	1f58 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    1fc2:	movs	r3, #1
    1fc4:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    1fc6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1fca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1fce:	nop
    1fd0:	.word	0x1fff1610
    1fd4:	.word	0x1fff15e4
    1fd8:	.word	0x1fff1614
    1fdc:	.word	0x1fff1720

00001fe0 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    1fe0:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    1fe2:	ldr	r3, [pc, #32]	; (2004 <usb_midi_flush_output+0x24>)
    1fe4:	ldrb	r4, [r3, #0]
    1fe6:	cbnz	r4, 1ff2 <usb_midi_flush_output+0x12>
    1fe8:	ldr	r5, [pc, #28]	; (2008 <usb_midi_flush_output+0x28>)
    1fea:	ldr	r1, [r5, #0]
    1fec:	cbz	r1, 1ff2 <usb_midi_flush_output+0x12>
    1fee:	ldrh	r3, [r1, #2]
    1ff0:	cbnz	r3, 1ff4 <usb_midi_flush_output+0x14>
    1ff2:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1ff4:	lsls	r3, r3, #2
    1ff6:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1ff8:	movs	r0, #4
    1ffa:	bl	2624 <usb_tx>
		tx_packet = NULL;
    1ffe:	str	r4, [r5, #0]
    2000:	pop	{r3, r4, r5, pc}
    2002:	nop
    2004:	.word	0x1fff15e4
    2008:	.word	0x1fff1610

0000200c <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    200c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2010:	ldr	r6, [pc, #692]	; (22c8 <usb_midi_read+0x2bc>)
    2012:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2014:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2016:	cmp	r3, #0
    2018:	beq.w	2140 <usb_midi_read+0x134>
    201c:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    201e:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2020:	lsrs	r1, r2, #2
    2022:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    2026:	adds	r2, #4
	if (index < rx_packet->len) {
    2028:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    202a:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    202c:	bcs.n	20b4 <usb_midi_read+0xa8>
		rx_packet->index = index;
    202e:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2030:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2034:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2038:	ldr	r1, [pc, #656]	; (22cc <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    203a:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    203e:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    2042:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2046:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2048:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    204c:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    204e:	bls.n	2086 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2050:	subs	r3, r6, #2
    2052:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2054:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2058:	bls.n	20f8 <usb_midi_read+0xec>
    205a:	cmp	r6, #5
    205c:	beq.n	20f0 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    205e:	cmp	r6, #4
    2060:	beq.w	23ac <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2064:	subs	r3, r6, #5
    2066:	cmp	r3, #2
    2068:	bls.n	216a <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    206a:	cmp	r6, #15
    206c:	bne.n	208c <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    206e:	cmp	r0, #247	; 0xf7
    2070:	bhi.n	20f8 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    2072:	cmp	r0, #240	; 0xf0
    2074:	beq.n	207c <usb_midi_read+0x70>
    2076:	ldr	r3, [pc, #600]	; (22d0 <usb_midi_read+0x2c4>)
    2078:	ldrh	r3, [r3, #0]
    207a:	cbz	r3, 208c <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    207c:	bl	1efc <sysex_byte>
		}
	}
	return 0;
    2080:	movs	r0, #0
    2082:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    2086:	cbz	r7, 2092 <usb_midi_read+0x86>
    2088:	cmp	r5, r7
    208a:	beq.n	2092 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    208c:	movs	r0, #0
    208e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2092:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2094:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2098:	beq.w	21aa <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    209c:	cmp	r6, #9
    209e:	beq.n	20c4 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    20a0:	cmp	r6, #10
    20a2:	bne.w	21ce <usb_midi_read+0x1c2>
    20a6:	cmp	r3, #10
    20a8:	bne.n	208c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    20aa:	ldr	r3, [pc, #552]	; (22d4 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    20ac:	ldr	r2, [pc, #552]	; (22d8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    20ae:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    20b0:	movs	r1, #160	; 0xa0
    20b2:	b.n	21b8 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    20b4:	mov	r0, r3
    20b6:	bl	2488 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    20ba:	movs	r0, #5
    20bc:	bl	24d4 <usb_rx>
    20c0:	str	r0, [r6, #0]
    20c2:	b.n	2030 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    20c4:	cmp	r3, #9
    20c6:	bne.n	208c <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    20c8:	lsrs	r7, r4, #24
    20ca:	beq.w	23c4 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    20ce:	ldr	r3, [pc, #524]	; (22dc <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    20d0:	ldr	r2, [pc, #516]	; (22d8 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    20d2:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    20d4:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    20d6:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    20da:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    20dc:	uxtb	r5, r5
    20de:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    20e0:	cmp	r3, #0
    20e2:	beq.w	2220 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    20e6:	mov	r2, r4
    20e8:	mov	r1, r6
    20ea:	mov	r0, r5
    20ec:	blx	r3
    20ee:	b.n	2220 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    20f0:	cmp	r0, #240	; 0xf0
    20f2:	bls.n	217c <usb_midi_read+0x170>
    20f4:	cmp	r0, #247	; 0xf7
    20f6:	beq.n	217c <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    20f8:	subs	r0, #241	; 0xf1
    20fa:	cmp	r0, #14
    20fc:	bhi.n	208c <usb_midi_read+0x80>
    20fe:	add	r3, pc, #4	; (adr r3, 2104 <usb_midi_read+0xf8>)
    2100:	ldr.w	pc, [r3, r0, lsl #2]
    2104:	.word	0x000022bb
    2108:	.word	0x0000229f
    210c:	.word	0x0000228d
    2110:	.word	0x0000208d
    2114:	.word	0x0000208d
    2118:	.word	0x0000227f
    211c:	.word	0x0000208d
    2120:	.word	0x0000235f
    2124:	.word	0x0000208d
    2128:	.word	0x00002329
    212c:	.word	0x00002343
    2130:	.word	0x00002267
    2134:	.word	0x0000208d
    2138:	.word	0x0000224f
    213c:	.word	0x00002233
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2140:	ldr	r3, [pc, #412]	; (22e0 <usb_midi_read+0x2d4>)
    2142:	ldrb	r3, [r3, #0]
    2144:	cmp	r3, #0
    2146:	beq.n	208c <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2148:	movs	r0, #5
    214a:	bl	24d4 <usb_rx>
    214e:	mov	r3, r0
    2150:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    2152:	cmp	r0, #0
    2154:	beq.n	208c <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    2156:	ldrh	r5, [r0, #0]
    2158:	cmp	r5, #0
    215a:	bne.w	201e <usb_midi_read+0x12>
			usb_free(rx_packet);
    215e:	bl	2488 <usb_free>
			rx_packet = NULL;
    2162:	str	r5, [r6, #0]
			return 0;
    2164:	mov	r0, r5
    2166:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    216a:	bl	1efc <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    216e:	ubfx	r0, r4, #16, #8
    2172:	bl	1efc <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    2176:	cmp	r6, #7
    2178:	bne.n	2180 <usb_midi_read+0x174>
    217a:	lsrs	r0, r4, #24
    217c:	bl	1efc <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    2180:	ldr	r3, [pc, #332]	; (22d0 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2182:	ldr	r2, [pc, #352]	; (22e4 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2184:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    2186:	ldr	r0, [pc, #352]	; (22e8 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2188:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    218a:	ldr	r5, [pc, #352]	; (22ec <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    218c:	ldr	r2, [pc, #328]	; (22d8 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    218e:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2190:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2192:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2194:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2196:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2198:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    219a:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    219c:	cbz	r4, 21e2 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    219e:	movs	r2, #1
    21a0:	ldr	r0, [pc, #332]	; (22f0 <usb_midi_read+0x2e4>)
    21a2:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    21a4:	movs	r0, #1
    21a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    21aa:	cmp	r3, #8
    21ac:	bne.w	208c <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    21b0:	ldr	r3, [pc, #320]	; (22f4 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    21b2:	ldr	r2, [pc, #292]	; (22d8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    21b4:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    21b6:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    21b8:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    21bc:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    21be:	uxtb	r5, r5
    21c0:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    21c2:	cbz	r3, 2220 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    21c4:	mov	r0, r5
    21c6:	mov	r2, r4
    21c8:	mov	r1, r6
    21ca:	blx	r3
    21cc:	b.n	2220 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    21ce:	cmp	r6, #11
    21d0:	bne.n	21f6 <usb_midi_read+0x1ea>
    21d2:	cmp	r3, #11
    21d4:	bne.w	208c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    21d8:	ldr	r3, [pc, #284]	; (22f8 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    21da:	ldr	r2, [pc, #252]	; (22d8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    21dc:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    21de:	movs	r1, #176	; 0xb0
    21e0:	b.n	21b8 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    21e2:	ldr	r3, [pc, #280]	; (22fc <usb_midi_read+0x2f0>)
    21e4:	ldr	r3, [r3, #0]
    21e6:	cmp	r3, #0
    21e8:	beq.w	23e2 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    21ec:	ldr	r0, [pc, #256]	; (22f0 <usb_midi_read+0x2e4>)
    21ee:	blx	r3
		}
		return 1;
    21f0:	movs	r0, #1
    21f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    21f6:	cmp	r6, #12
    21f8:	bne.w	23fc <usb_midi_read+0x3f0>
    21fc:	cmp	r3, #12
    21fe:	bne.w	208c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2202:	ldr	r3, [pc, #252]	; (2300 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2204:	ldr	r2, [pc, #208]	; (22d8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    2206:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2208:	movs	r1, #192	; 0xc0
    220a:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    220c:	uxtb	r5, r5
    220e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2212:	cmp	r3, #0
    2214:	beq.w	23a8 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2218:	mov	r0, r5
    221a:	mov	r1, r6
    221c:	lsrs	r4, r4, #24
    221e:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2220:	ldr	r1, [pc, #224]	; (2304 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2222:	ldr	r2, [pc, #196]	; (22e8 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2224:	ldr	r3, [pc, #196]	; (22ec <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2226:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2228:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    222a:	strb	r4, [r3, #0]
		return 1;
    222c:	movs	r0, #1
    222e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2232:	ldr	r3, [pc, #212]	; (2308 <usb_midi_read+0x2fc>)
    2234:	ldr	r3, [r3, #0]
    2236:	cmp	r3, #0
    2238:	beq.w	23e8 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    223c:	blx	r3
    223e:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2242:	ldr	r3, [pc, #148]	; (22d8 <usb_midi_read+0x2cc>)
    2244:	uxtb	r5, r5
    2246:	lsrs	r4, r4, #24
    2248:	strb.w	r8, [r3]
		goto return_message;
    224c:	b.n	2220 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    224e:	ldr	r3, [pc, #188]	; (230c <usb_midi_read+0x300>)
    2250:	ldr	r3, [r3, #0]
    2252:	cmp	r3, #0
    2254:	bne.n	223c <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2256:	ldr	r3, [pc, #184]	; (2310 <usb_midi_read+0x304>)
    2258:	ldr	r3, [r3, #0]
    225a:	cbz	r3, 2286 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    225c:	movs	r0, #254	; 0xfe
    225e:	blx	r3
    2260:	ubfx	r6, r4, #16, #8
    2264:	b.n	2242 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2266:	ldr	r3, [pc, #172]	; (2314 <usb_midi_read+0x308>)
    2268:	ldr	r3, [r3, #0]
    226a:	cmp	r3, #0
    226c:	bne.n	223c <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    226e:	ldr	r3, [pc, #160]	; (2310 <usb_midi_read+0x304>)
    2270:	ldr	r3, [r3, #0]
    2272:	cbz	r3, 2286 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2274:	movs	r0, #252	; 0xfc
    2276:	blx	r3
    2278:	ubfx	r6, r4, #16, #8
    227c:	b.n	2242 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    227e:	ldr	r3, [pc, #152]	; (2318 <usb_midi_read+0x30c>)
    2280:	ldr	r3, [r3, #0]
    2282:	cmp	r3, #0
    2284:	bne.n	223c <usb_midi_read+0x230>
    2286:	ubfx	r6, r4, #16, #8
    228a:	b.n	2242 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    228c:	ldr	r3, [pc, #140]	; (231c <usb_midi_read+0x310>)
    228e:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    2290:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2294:	cmp	r3, #0
    2296:	beq.n	2242 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2298:	mov	r0, r6
    229a:	blx	r3
    229c:	b.n	2242 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    229e:	ldr	r3, [pc, #128]	; (2320 <usb_midi_read+0x314>)
    22a0:	ldr	r2, [r3, #0]
    22a2:	cmp	r2, #0
    22a4:	beq.n	2286 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    22a6:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    22a8:	lsrs	r3, r4, #17
    22aa:	and.w	r0, r6, #127	; 0x7f
    22ae:	and.w	r3, r3, #16256	; 0x3f80
    22b2:	orrs	r0, r3
    22b4:	uxtb	r6, r6
    22b6:	blx	r2
    22b8:	b.n	2242 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    22ba:	ldr	r3, [pc, #104]	; (2324 <usb_midi_read+0x318>)
    22bc:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    22be:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    22c2:	cmp	r3, #0
    22c4:	bne.n	2298 <usb_midi_read+0x28c>
    22c6:	b.n	2242 <usb_midi_read+0x236>
    22c8:	.word	0x1fff161c
    22cc:	.word	0x1fff1a92
    22d0:	.word	0x1fff1a8e
    22d4:	.word	0x1fff15f8
    22d8:	.word	0x1fff1a8c
    22dc:	.word	0x1fff162c
    22e0:	.word	0x1fff1720
    22e4:	.word	0x1fff15f4
    22e8:	.word	0x1fff1a90
    22ec:	.word	0x1fff1a91
    22f0:	.word	0x1fff1a94
    22f4:	.word	0x1fff1624
    22f8:	.word	0x1fff1628
    22fc:	.word	0x1fff160c
    2300:	.word	0x1fff15e8
    2304:	.word	0x1fff1a93
    2308:	.word	0x1fff15d4
    230c:	.word	0x1fff15d8
    2310:	.word	0x1fff15dc
    2314:	.word	0x1fff1618
    2318:	.word	0x1fff1608
    231c:	.word	0x1fff1620
    2320:	.word	0x1fff15f0
    2324:	.word	0x1fff1604
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2328:	ldr	r3, [pc, #252]	; (2428 <usb_midi_read+0x41c>)
    232a:	ldr	r3, [r3, #0]
    232c:	cmp	r3, #0
    232e:	bne.n	223c <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2330:	ldr	r3, [pc, #248]	; (242c <usb_midi_read+0x420>)
    2332:	ldr	r3, [r3, #0]
    2334:	cmp	r3, #0
    2336:	beq.n	2286 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2338:	movs	r0, #250	; 0xfa
    233a:	blx	r3
    233c:	ubfx	r6, r4, #16, #8
    2340:	b.n	2242 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2342:	ldr	r3, [pc, #236]	; (2430 <usb_midi_read+0x424>)
    2344:	ldr	r3, [r3, #0]
    2346:	cmp	r3, #0
    2348:	bne.w	223c <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    234c:	ldr	r3, [pc, #220]	; (242c <usb_midi_read+0x420>)
    234e:	ldr	r3, [r3, #0]
    2350:	cmp	r3, #0
    2352:	beq.n	2286 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2354:	movs	r0, #251	; 0xfb
    2356:	blx	r3
    2358:	ubfx	r6, r4, #16, #8
    235c:	b.n	2242 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    235e:	ldr	r3, [pc, #212]	; (2434 <usb_midi_read+0x428>)
    2360:	ldr	r3, [r3, #0]
    2362:	cmp	r3, #0
    2364:	bne.w	223c <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2368:	ldr	r3, [pc, #192]	; (242c <usb_midi_read+0x420>)
    236a:	ldr	r3, [r3, #0]
    236c:	cmp	r3, #0
    236e:	beq.n	2286 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2370:	movs	r0, #248	; 0xf8
    2372:	blx	r3
    2374:	ubfx	r6, r4, #16, #8
    2378:	b.n	2242 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    237a:	cmp	r3, #14
    237c:	bne.w	208c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2380:	ldr	r2, [pc, #180]	; (2438 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2382:	ldr	r3, [pc, #184]	; (243c <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2384:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2386:	movs	r1, #224	; 0xe0
    2388:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    238a:	cmp	r2, #0
    238c:	beq.n	241e <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    238e:	lsrs	r6, r4, #16
    2390:	lsrs	r1, r4, #17
    2392:	and.w	r3, r6, #127	; 0x7f
    2396:	and.w	r1, r1, #16256	; 0x3f80
    239a:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    239c:	uxtb	r5, r5
    239e:	sub.w	r1, r1, #8192	; 0x2000
    23a2:	mov	r0, r5
    23a4:	blx	r2
    23a6:	uxtb	r6, r6
    23a8:	lsrs	r4, r4, #24
    23aa:	b.n	2220 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    23ac:	bl	1efc <sysex_byte>
		sysex_byte(n >> 16);
    23b0:	ubfx	r0, r4, #16, #8
    23b4:	bl	1efc <sysex_byte>
		sysex_byte(n >> 24);
    23b8:	lsrs	r0, r4, #24
    23ba:	bl	1efc <sysex_byte>
		return 0;
    23be:	movs	r0, #0
    23c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    23c4:	ldr	r3, [pc, #120]	; (2440 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    23c6:	ldr	r2, [pc, #116]	; (243c <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    23c8:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    23ca:	movs	r1, #128	; 0x80
    23cc:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    23ce:	uxtb	r5, r5
    23d0:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    23d4:	cbz	r3, 23f8 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    23d6:	mov	r1, r6
    23d8:	mov	r0, r5
    23da:	mov	r2, r7
    23dc:	blx	r3
    23de:	mov	r4, r7
    23e0:	b.n	2220 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    23e2:	movs	r0, #1
    23e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    23e8:	ldr	r3, [pc, #64]	; (242c <usb_midi_read+0x420>)
    23ea:	ldr	r3, [r3, #0]
    23ec:	cmp	r3, #0
    23ee:	beq.w	2286 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    23f2:	movs	r0, #255	; 0xff
    23f4:	blx	r3
    23f6:	b.n	2286 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    23f8:	mov	r4, r3
    23fa:	b.n	2220 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    23fc:	cmp	r6, #13
    23fe:	bne.n	237a <usb_midi_read+0x36e>
    2400:	cmp	r3, #13
    2402:	bne.w	208c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2406:	ldr	r3, [pc, #60]	; (2444 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2408:	ldr	r2, [pc, #48]	; (243c <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    240a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    240c:	movs	r1, #208	; 0xd0
    240e:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2410:	uxtb	r5, r5
    2412:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2416:	cmp	r3, #0
    2418:	bne.w	2218 <usb_midi_read+0x20c>
    241c:	b.n	23a8 <usb_midi_read+0x39c>
    241e:	ubfx	r6, r4, #16, #8
    2422:	uxtb	r5, r5
    2424:	lsrs	r4, r4, #24
    2426:	b.n	2220 <usb_midi_read+0x214>
    2428:	.word	0x1fff1600
    242c:	.word	0x1fff15dc
    2430:	.word	0x1fff15e0
    2434:	.word	0x1fff15d0
    2438:	.word	0x1fff15ec
    243c:	.word	0x1fff1a8c
    2440:	.word	0x1fff1624
    2444:	.word	0x1fff15fc

00002448 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2448:	cpsid	i
	avail = usb_buffer_available;
    244a:	ldr	r0, [pc, #52]	; (2480 <usb_malloc+0x38>)
    244c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    244e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2452:	cmp	r3, #29
    2454:	bgt.n	2478 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2456:	mov.w	r1, #2147483648	; 0x80000000
    245a:	lsrs	r1, r3
    245c:	bic.w	r2, r2, r1
    2460:	str	r2, [r0, #0]
	__enable_irq();
    2462:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2464:	ldr	r0, [pc, #28]	; (2484 <usb_malloc+0x3c>)
    2466:	add.w	r3, r3, r3, lsl #3
    246a:	lsls	r3, r3, #3
    246c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    246e:	movs	r1, #0
    2470:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2472:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2474:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2476:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2478:	cpsie	i
		return NULL;
    247a:	movs	r0, #0
    247c:	bx	lr
    247e:	nop
    2480:	.word	0x1fff0c44
    2484:	.word	0x1fff03d0

00002488 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2488:	ldr	r3, [pc, #52]	; (24c0 <usb_free+0x38>)
    248a:	ldr	r2, [pc, #56]	; (24c4 <usb_free+0x3c>)
    248c:	subs	r3, r0, r3
    248e:	umull	r2, r3, r2, r3
    2492:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2494:	cmp	r3, #29
    2496:	bhi.n	24b2 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2498:	ldr	r2, [pc, #44]	; (24c8 <usb_free+0x40>)
    249a:	ldrb	r2, [r2, #0]
    249c:	cbnz	r2, 24b4 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    249e:	cpsid	i
	usb_buffer_available |= mask;
    24a0:	ldr	r0, [pc, #40]	; (24cc <usb_free+0x44>)
    24a2:	mov.w	r1, #2147483648	; 0x80000000
    24a6:	ldr	r2, [r0, #0]
    24a8:	lsr.w	r3, r1, r3
    24ac:	orrs	r2, r3
    24ae:	str	r2, [r0, #0]
	__enable_irq();
    24b0:	cpsie	i
    24b2:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    24b4:	ldr	r2, [pc, #24]	; (24d0 <usb_free+0x48>)
    24b6:	ldrb	r2, [r2, #0]
    24b8:	cmp	r2, #0
    24ba:	beq.n	249e <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    24bc:	b.w	253c <usb_rx_memory>
    24c0:	.word	0x1fff03d0
    24c4:	.word	0x38e38e39
    24c8:	.word	0x1fff1715
    24cc:	.word	0x1fff0c44
    24d0:	.word	0x1fff1720

000024d4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    24d4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    24d6:	cmp	r3, #4
    24d8:	bhi.n	2504 <usb_rx+0x30>
	__disable_irq();
    24da:	cpsid	i
	ret = rx_first[endpoint];
    24dc:	ldr	r1, [pc, #40]	; (2508 <usb_rx+0x34>)
    24de:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    24e2:	cbz	r0, 2500 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    24e4:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    24e6:	ldr	r4, [pc, #36]	; (250c <usb_rx+0x38>)
    24e8:	ldrh	r5, [r0, #0]
    24ea:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    24ee:	ldr	r6, [r0, #4]
    24f0:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    24f4:	subs	r2, r2, r5
    24f6:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    24fa:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    24fc:	pop	{r4, r5, r6}
    24fe:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2500:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2502:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2504:	movs	r0, #0
    2506:	bx	lr
    2508:	.word	0x1fff168c
    250c:	.word	0x1fff1bb8

00002510 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2510:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2512:	cmp	r0, #4
    2514:	bhi.n	252e <usb_tx_packet_count+0x1e>
	__disable_irq();
    2516:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2518:	ldr	r3, [pc, #28]	; (2538 <usb_tx_packet_count+0x28>)
    251a:	ldr.w	r3, [r3, r0, lsl #2]
    251e:	cbz	r3, 2532 <usb_tx_packet_count+0x22>
    2520:	movs	r0, #0
    2522:	ldr	r3, [r3, #4]
    2524:	adds	r0, #1
    2526:	cmp	r3, #0
    2528:	bne.n	2522 <usb_tx_packet_count+0x12>
	__enable_irq();
    252a:	cpsie	i
	return count;
    252c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    252e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2530:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2532:	mov	r0, r3
    2534:	b.n	252a <usb_tx_packet_count+0x1a>
    2536:	nop
    2538:	.word	0x1fff16e4

0000253c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    253c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    253e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2540:	ldr	r2, [pc, #204]	; (2610 <usb_rx_memory+0xd4>)
    2542:	ldrb	r3, [r2, #0]
    2544:	lsls	r3, r3, #28
    2546:	bpl.n	2556 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2548:	ldr	r3, [pc, #200]	; (2614 <usb_rx_memory+0xd8>)
    254a:	ldr	r1, [r3, #32]
    254c:	cmp	r1, #0
    254e:	beq.n	25d8 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2550:	ldr	r1, [r3, #40]	; 0x28
    2552:	cmp	r1, #0
    2554:	beq.n	25f4 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2556:	ldrb	r3, [r2, #1]
    2558:	lsls	r5, r3, #28
    255a:	bpl.n	256a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    255c:	ldr	r3, [pc, #180]	; (2614 <usb_rx_memory+0xd8>)
    255e:	ldr	r1, [r3, #64]	; 0x40
    2560:	cmp	r1, #0
    2562:	beq.n	2600 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2564:	ldr	r1, [r3, #72]	; 0x48
    2566:	cmp	r1, #0
    2568:	beq.n	25f8 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    256a:	ldrb	r3, [r2, #2]
    256c:	lsls	r4, r3, #28
    256e:	bpl.n	257e <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2570:	ldr	r3, [pc, #160]	; (2614 <usb_rx_memory+0xd8>)
    2572:	ldr	r1, [r3, #96]	; 0x60
    2574:	cmp	r1, #0
    2576:	beq.n	2604 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2578:	ldr	r1, [r3, #104]	; 0x68
    257a:	cmp	r1, #0
    257c:	beq.n	25fc <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    257e:	ldrb	r3, [r2, #3]
    2580:	lsls	r1, r3, #28
    2582:	bpl.n	2594 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2584:	ldr	r3, [pc, #140]	; (2614 <usb_rx_memory+0xd8>)
    2586:	ldr.w	r1, [r3, #128]	; 0x80
    258a:	cmp	r1, #0
    258c:	beq.n	260c <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    258e:	ldr.w	r1, [r3, #136]	; 0x88
    2592:	cbz	r1, 25ba <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2594:	ldrb	r3, [r2, #4]
    2596:	lsls	r3, r3, #28
    2598:	bpl.n	25ac <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    259a:	ldr	r3, [pc, #120]	; (2614 <usb_rx_memory+0xd8>)
    259c:	ldr.w	r2, [r3, #160]	; 0xa0
    25a0:	cmp	r2, #0
    25a2:	beq.n	2608 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    25a4:	ldr.w	r2, [r3, #168]	; 0xa8
    25a8:	movs	r4, #21
    25aa:	cbz	r2, 25bc <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    25ac:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    25ae:	ldr	r3, [pc, #104]	; (2618 <usb_rx_memory+0xdc>)
    25b0:	movs	r2, #0
    25b2:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    25b4:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    25b6:	b.w	2488 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    25ba:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    25bc:	ldr	r1, [pc, #88]	; (2618 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    25be:	ldr	r5, [pc, #92]	; (261c <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    25c0:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    25c2:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    25c6:	add.w	r3, r3, r4, lsl #3
    25ca:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    25cc:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    25ce:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    25d0:	strb	r2, [r1, #0]
				__enable_irq();
    25d2:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    25d4:	pop	{r4, r5}
    25d6:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    25d8:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    25da:	ldr	r4, [pc, #60]	; (2618 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    25dc:	ldr	r5, [pc, #64]	; (2620 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    25de:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    25e0:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    25e4:	add.w	r3, r3, r2, lsl #3
    25e8:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    25ea:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    25ec:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    25ee:	strb	r2, [r4, #0]
				__enable_irq();
    25f0:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    25f2:	b.n	25d4 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    25f4:	movs	r4, #5
    25f6:	b.n	25bc <usb_rx_memory+0x80>
    25f8:	movs	r4, #9
    25fa:	b.n	25bc <usb_rx_memory+0x80>
    25fc:	movs	r4, #13
    25fe:	b.n	25bc <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2600:	movs	r2, #8
    2602:	b.n	25da <usb_rx_memory+0x9e>
    2604:	movs	r2, #12
    2606:	b.n	25da <usb_rx_memory+0x9e>
    2608:	movs	r2, #20
    260a:	b.n	25da <usb_rx_memory+0x9e>
    260c:	movs	r2, #16
    260e:	b.n	25da <usb_rx_memory+0x9e>
    2610:	.word	0x00004ad4
    2614:	.word	0x1fff0000
    2618:	.word	0x1fff1715
    261c:	.word	0x004000c8
    2620:	.word	0x00400088

00002624 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2624:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2626:	cmp	r3, #4
    2628:	bhi.n	2666 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    262a:	ldr	r2, [pc, #108]	; (2698 <usb_tx+0x74>)
    262c:	lsls	r0, r0, #5
    262e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2632:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2634:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2636:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2638:	ldr	r4, [pc, #96]	; (269c <usb_tx+0x78>)
    263a:	ldrb	r2, [r4, r3]
    263c:	cmp	r2, #3
    263e:	bhi.n	2678 <usb_tx+0x54>
    2640:	tbb	[pc, r2]
    2644:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2648:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    264a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    264c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    264e:	tst.w	r0, #8
    2652:	ite	ne
    2654:	movne	r3, #200	; 0xc8
    2656:	moveq	r3, #136	; 0x88
    2658:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    265c:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    265e:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2660:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2662:	cpsie	i
}
    2664:	pop	{r4, r5}
    2666:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2668:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    266a:	movs	r2, #2
		break;
    266c:	b.n	264a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    266e:	movs	r2, #5
    2670:	b.n	264a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2672:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2674:	movs	r2, #4
		break;
    2676:	b.n	264a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2678:	ldr	r2, [pc, #36]	; (26a0 <usb_tx+0x7c>)
    267a:	ldr.w	r0, [r2, r3, lsl #2]
    267e:	cbz	r0, 2690 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2680:	ldr	r2, [pc, #32]	; (26a4 <usb_tx+0x80>)
    2682:	ldr.w	r0, [r2, r3, lsl #2]
    2686:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2688:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    268c:	cpsie	i
		return;
    268e:	b.n	2664 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2690:	str.w	r1, [r2, r3, lsl #2]
    2694:	ldr	r2, [pc, #12]	; (26a4 <usb_tx+0x80>)
    2696:	b.n	2688 <usb_tx+0x64>
    2698:	.word	0x1fff0000
    269c:	.word	0x1fff1724
    26a0:	.word	0x1fff16e4
    26a4:	.word	0x1fff16f8

000026a8 <usb_isr>:
}



void usb_isr(void)
{
    26a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    26ac:	ldr.w	fp, [pc, #776]	; 29b8 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    26b0:	ldr.w	sl, [pc, #776]	; 29bc <usb_isr+0x314>
}



void usb_isr(void)
{
    26b4:	sub	sp, #28
    26b6:	b.n	2742 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    26b8:	ldr	r7, [pc, #680]	; (2964 <usb_isr+0x2bc>)
    26ba:	mov.w	r8, r3, lsr #2
    26be:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    26c2:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    26c4:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    26c8:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    26cc:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    26ce:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    26d2:	and.w	r4, r3, #255	; 0xff
    26d6:	cmp	r3, #0
    26d8:	bne.w	28dc <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    26dc:	ldr.w	r3, [r7, r8, lsl #3]
    26e0:	lsrs	r3, r3, #16
    26e2:	uxth	r1, r3
    26e4:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    26e8:	cmp	r3, #0
    26ea:	beq.w	28ca <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    26ee:	ldr	r3, [pc, #632]	; (2968 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    26f0:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    26f4:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    26f8:	ldr.w	r2, [r3, r6, lsl #2]
    26fc:	cmp	r2, #0
    26fe:	beq.w	2b6c <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2702:	ldr	r5, [pc, #616]	; (296c <usb_isr+0x2c4>)
    2704:	ldr.w	r3, [r5, r6, lsl #2]
    2708:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    270a:	ldr	r4, [pc, #612]	; (2970 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    270c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2710:	ldrh.w	r3, [r4, r6, lsl #1]
    2714:	add	r1, r3
    2716:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    271a:	bl	2448 <usb_malloc>
					if (packet) {
    271e:	cmp	r0, #0
    2720:	beq.w	2b5e <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2724:	ldr	r2, [pc, #588]	; (2974 <usb_isr+0x2cc>)
    2726:	ldr	r3, [pc, #592]	; (2978 <usb_isr+0x2d0>)
    2728:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    272c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2730:	it	ne
    2732:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2734:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2738:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    273c:	movs	r3, #8
    273e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2742:	ldrb.w	r4, [fp]
    2746:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2748:	lsls	r0, r4, #29
    274a:	bpl.n	2786 <usb_isr+0xde>
		if (usb_configuration) {
    274c:	ldr	r3, [pc, #556]	; (297c <usb_isr+0x2d4>)
    274e:	ldrb	r3, [r3, #0]
    2750:	cbz	r3, 2780 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2752:	ldr	r1, [pc, #556]	; (2980 <usb_isr+0x2d8>)
    2754:	ldrb	r2, [r1, #0]
			if (t) {
    2756:	and.w	r3, r2, #255	; 0xff
    275a:	cbz	r2, 2766 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    275c:	subs	r3, #1
    275e:	uxtb	r3, r3
    2760:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2762:	cbnz	r3, 2766 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2764:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2766:	ldr	r1, [pc, #540]	; (2984 <usb_isr+0x2dc>)
    2768:	ldrb	r2, [r1, #0]
			if (t) {
    276a:	and.w	r3, r2, #255	; 0xff
    276e:	cbz	r2, 277c <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2770:	subs	r3, #1
    2772:	uxtb	r3, r3
    2774:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2776:	cmp	r3, #0
    2778:	beq.w	2b0a <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    277c:	bl	1fe0 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2780:	movs	r3, #4
    2782:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2786:	and.w	r3, r4, #8
    278a:	and.w	r2, r3, #255	; 0xff
    278e:	cmp	r3, #0
    2790:	beq.w	2924 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2794:	ldrb.w	r3, [sl]
    2798:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    279a:	lsrs	r6, r3, #4
    279c:	bne.n	26b8 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    279e:	lsrs	r4, r3, #2
    27a0:	ldr.w	r9, [pc, #448]	; 2964 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    27a4:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    27a8:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    27ac:	ubfx	r2, r2, #2, #4
    27b0:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    27b2:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    27b4:	cmp	r2, #12
    27b6:	bhi.w	28c2 <usb_isr+0x21a>
    27ba:	tbb	[pc, r2]
    27be:	.short	0x7878
    27c0:	.word	0x82828282
    27c4:	.word	0x82438282
    27c8:	.short	0x8282
    27ca:	.byte	0x07
    27cb:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    27cc:	ldr	r0, [r1, #0]
    27ce:	ldr	r5, [pc, #440]	; (2988 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    27d0:	ldr	r3, [pc, #416]	; (2974 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    27d2:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    27d4:	ldr	r7, [pc, #436]	; (298c <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    27d6:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    27da:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    27dc:	ldr	r6, [pc, #432]	; (2990 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    27de:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    27e0:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    27e4:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    27e6:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    27e8:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    27ea:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    27ee:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    27f0:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    27f4:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    27f8:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    27fa:	bhi.w	29c0 <usb_isr+0x318>
    27fe:	cmp.w	r1, #1664	; 0x680
    2802:	bcs.w	2e2c <usb_isr+0x784>
    2806:	cmp.w	r1, #258	; 0x102
    280a:	beq.w	2bda <usb_isr+0x532>
    280e:	bhi.w	2ba4 <usb_isr+0x4fc>
    2812:	cmp	r1, #128	; 0x80
    2814:	beq.w	2e60 <usb_isr+0x7b8>
    2818:	cmp	r1, #130	; 0x82
    281a:	bne.w	2be6 <usb_isr+0x53e>
    281e:	ldrh	r1, [r5, #4]
    2820:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2824:	cmp	r1, #5
    2826:	bhi.w	2be6 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    282a:	ldr	r3, [pc, #360]	; (2994 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    282c:	ldr	r4, [pc, #360]	; (2998 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    282e:	lsls	r1, r1, #2
    2830:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2832:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2834:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2836:	ldrb	r2, [r3, #0]
    2838:	lsls	r3, r2, #30
    283a:	bpl.w	2f70 <usb_isr+0x8c8>
    283e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2840:	movs	r0, #2
    2842:	b.n	2c6e <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2844:	ldr	r7, [pc, #324]	; (298c <usb_isr+0x2e4>)
    2846:	ldr	r2, [r7, #0]
		if (data) {
    2848:	cbz	r2, 2898 <usb_isr+0x1f0>
			size = ep0_tx_len;
    284a:	ldr	r3, [pc, #336]	; (299c <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    284c:	ldr	r6, [pc, #320]	; (2990 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    284e:	ldr	r1, [pc, #336]	; (29a0 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2850:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2852:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2854:	ldrb	r5, [r1, #0]
    2856:	cmp	r0, #64	; 0x40
    2858:	mov	lr, r0
    285a:	orr.w	r8, r5, #2
    285e:	it	cs
    2860:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2864:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2866:	eor.w	r4, r4, #1
    286a:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    286c:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2870:	ite	eq
    2872:	moveq	r4, #136	; 0x88
    2874:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2876:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    287a:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    287c:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2880:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2884:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2886:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2888:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    288c:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    288e:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2890:	cmp	r0, #0
    2892:	beq.w	2a02 <usb_isr+0x35a>
    2896:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2898:	ldr	r3, [pc, #236]	; (2988 <usb_isr+0x2e0>)
    289a:	ldrh	r2, [r3, #0]
    289c:	cmp.w	r2, #1280	; 0x500
    28a0:	bne.n	28c2 <usb_isr+0x21a>
			setup.bRequest = 0;
    28a2:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    28a4:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    28a6:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    28a8:	ldr	r3, [pc, #248]	; (29a4 <usb_isr+0x2fc>)
    28aa:	strb	r2, [r3, #0]
    28ac:	b.n	28c2 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    28ae:	ldr	r2, [pc, #216]	; (2988 <usb_isr+0x2e0>)
    28b0:	ldrh	r0, [r2, #0]
    28b2:	movw	r2, #8225	; 0x2021
    28b6:	cmp	r0, r2
    28b8:	beq.w	2a0c <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    28bc:	ldr	r2, [pc, #180]	; (2974 <usb_isr+0x2cc>)
    28be:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    28c2:	ldr	r2, [pc, #228]	; (29a8 <usb_isr+0x300>)
    28c4:	movs	r3, #1
    28c6:	strb	r3, [r2, #0]
    28c8:	b.n	273c <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    28ca:	ldr	r2, [pc, #168]	; (2974 <usb_isr+0x2cc>)
    28cc:	ldr	r3, [pc, #168]	; (2978 <usb_isr+0x2d0>)
    28ce:	tst.w	r9, #8
    28d2:	it	ne
    28d4:	movne	r3, r2
    28d6:	str.w	r3, [r7, r8, lsl #3]
    28da:	b.n	273c <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    28dc:	bl	2488 <usb_free>
				packet = tx_first[endpoint];
    28e0:	ldr	r2, [pc, #200]	; (29ac <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    28e2:	ldr	r1, [pc, #204]	; (29b0 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    28e4:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    28e8:	cmp	r3, #0
    28ea:	beq.w	2b74 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    28ee:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    28f0:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    28f2:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    28f6:	add.w	r2, r3, #8
    28fa:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    28fe:	cmp	r4, #3
    2900:	bhi.n	290e <usb_isr+0x266>
    2902:	tbb	[pc, r4]
    2906:	.short	0x022c
    2908:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    290a:	movs	r2, #2
    290c:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    290e:	ldrh	r2, [r3, #0]
    2910:	tst.w	r9, #8
    2914:	ite	eq
    2916:	moveq	r3, #136	; 0x88
    2918:	movne	r3, #200	; 0xc8
    291a:	orr.w	r3, r3, r2, lsl #16
    291e:	str.w	r3, [r7, r8, lsl #3]
    2922:	b.n	273c <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2924:	lsls	r0, r4, #31
    2926:	bmi.w	2b10 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    292a:	lsls	r1, r4, #24
    292c:	bmi.w	2b90 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2930:	lsls	r2, r4, #30
    2932:	bpl.n	2942 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2934:	ldr	r2, [pc, #124]	; (29b4 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2936:	ldr	r1, [pc, #128]	; (29b8 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2938:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    293a:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    293c:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    293e:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2940:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2942:	lsls	r3, r4, #27
    2944:	bpl.n	294c <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2946:	ldr	r3, [pc, #112]	; (29b8 <usb_isr+0x310>)
    2948:	movs	r2, #16
    294a:	strb	r2, [r3, #0]
	}

}
    294c:	add	sp, #28
    294e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2952:	movs	r2, #4
    2954:	strb	r2, [r1, r6]
						break;
    2956:	b.n	290e <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2958:	movs	r2, #5
    295a:	strb	r2, [r1, r6]
						break;
    295c:	b.n	290e <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    295e:	movs	r2, #3
    2960:	strb	r2, [r1, r6]
						break;
    2962:	b.n	290e <usb_isr+0x266>
    2964:	.word	0x1fff0000
    2968:	.word	0x1fff168c
    296c:	.word	0x1fff1634
    2970:	.word	0x1fff1bb8
    2974:	.word	0x004000c8
    2978:	.word	0x00400088
    297c:	.word	0x1fff1720
    2980:	.word	0x1fff16a1
    2984:	.word	0x1fff15b4
    2988:	.word	0x1fff170c
    298c:	.word	0x1fff1630
    2990:	.word	0x1fff16a0
    2994:	.word	0x400720c0
    2998:	.word	0x1fff1718
    299c:	.word	0x1fff1648
    29a0:	.word	0x1fff1714
    29a4:	.word	0x40072098
    29a8:	.word	0x40072094
    29ac:	.word	0x1fff16e4
    29b0:	.word	0x1fff1724
    29b4:	.word	0x40072088
    29b8:	.word	0x40072080
    29bc:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    29c0:	movw	r4, #8225	; 0x2021
    29c4:	cmp	r1, r4
    29c6:	beq.w	2b02 <usb_isr+0x45a>
    29ca:	bhi.n	2a60 <usb_isr+0x3b8>
    29cc:	cmp.w	r1, #2176	; 0x880
    29d0:	beq.w	2c66 <usb_isr+0x5be>
    29d4:	cmp.w	r1, #2304	; 0x900
    29d8:	bne.w	2be6 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    29dc:	ldr	r2, [pc, #712]	; (2ca8 <usb_isr+0x600>)
    29de:	ldr	r4, [pc, #716]	; (2cac <usb_isr+0x604>)
    29e0:	ldrb	r1, [r5, #2]
    29e2:	strb	r1, [r2, #0]
    29e4:	add.w	r5, r4, #160	; 0xa0
    29e8:	b.n	29f2 <usb_isr+0x34a>
    29ea:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    29ec:	cmp	r5, r4
    29ee:	beq.w	2d04 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    29f2:	ldr	r3, [r4, #32]
    29f4:	lsls	r1, r3, #24
    29f6:	bpl.n	29ea <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    29f8:	ldr	r0, [r4, #36]	; 0x24
    29fa:	subs	r0, #8
    29fc:	bl	2488 <usb_free>
    2a00:	b.n	29ea <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2a02:	cmp.w	lr, #64	; 0x40
    2a06:	it	ne
    2a08:	movne	r2, #0
    2a0a:	b.n	2896 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2a0c:	ldr	r2, [pc, #672]	; (2cb0 <usb_isr+0x608>)
    2a0e:	ldrb	r5, [r1, #0]
    2a10:	ldrb	r0, [r1, #1]
    2a12:	strb	r5, [r2, #0]
    2a14:	strb	r0, [r2, #1]
    2a16:	ldrb	r5, [r1, #2]
    2a18:	ldrb	r0, [r1, #3]
    2a1a:	strb	r5, [r2, #2]
    2a1c:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2a1e:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2a20:	ldrb	r5, [r1, #4]
    2a22:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2a24:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2a26:	ldrb	r5, [r1, #5]
    2a28:	ldrb	r1, [r1, #6]
    2a2a:	strb	r5, [r2, #5]
    2a2c:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2a2e:	beq.w	2c5e <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a32:	ldr	r1, [pc, #640]	; (2cb4 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a34:	ldr	r6, [pc, #640]	; (2cb8 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a36:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a38:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2a3a:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a3e:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a40:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2a44:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a46:	ite	eq
    2a48:	moveq	r1, #136	; 0x88
    2a4a:	movne	r1, #200	; 0xc8
    2a4c:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a50:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2a54:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a58:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2a5a:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a5c:	str	r1, [r2, #4]
    2a5e:	b.n	28bc <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2a60:	movw	r4, #8737	; 0x2221
    2a64:	cmp	r1, r4
    2a66:	bne.w	2e7a <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2a6a:	ldr.w	ip, [pc, #656]	; 2cfc <usb_isr+0x654>
    2a6e:	ldr	r3, [pc, #588]	; (2cbc <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2a70:	ldr	r1, [pc, #588]	; (2cc0 <usb_isr+0x618>)
    2a72:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2a74:	ldr.w	r5, [ip]
    2a78:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2a7a:	str	r0, [sp, #4]
    2a7c:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2a7e:	movs	r0, #0
    2a80:	str	r0, [sp, #8]
    2a82:	mov	r8, r0
    2a84:	mov	ip, r0
    2a86:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a88:	ldr	r1, [pc, #552]	; (2cb4 <usb_isr+0x60c>)
    2a8a:	ldrb	r5, [r1, #0]
    2a8c:	orr.w	lr, r5, #2
    2a90:	add.w	r3, r9, lr, lsl #3
    2a94:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a96:	ldr	r3, [sp, #4]
    2a98:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a9a:	ldr	r3, [sp, #12]
    2a9c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a9e:	ite	eq
    2aa0:	moveq	r4, #136	; 0x88
    2aa2:	movne	r4, #200	; 0xc8
    2aa4:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2aa8:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2aac:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2ab0:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2ab2:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ab4:	ldr.w	lr, [pc, #500]	; 2cac <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2ab8:	ldr	r3, [pc, #508]	; (2cb8 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    2aba:	ldr.w	r8, [pc, #504]	; 2cb4 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2abe:	cmp	r0, #0
    2ac0:	bne.w	2bf4 <usb_isr+0x54c>
    2ac4:	cmp.w	ip, #64	; 0x40
    2ac8:	bne.n	2b02 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2aca:	orr.w	ip, r4, #2
    2ace:	add.w	r3, r9, ip, lsl #3
    2ad2:	ldr	r4, [sp, #8]
    2ad4:	ldr.w	lr, [pc, #468]	; 2cac <usb_isr+0x604>
    2ad8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ada:	cmp	r2, #0
    2adc:	bne.w	2c20 <usb_isr+0x578>
    2ae0:	lsls	r2, r0, #16
    2ae2:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2ae6:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2aea:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2aee:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2af0:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2af2:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2af4:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2af6:	cmp	r0, #64	; 0x40
    2af8:	bne.n	2b02 <usb_isr+0x45a>
    2afa:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2afc:	ldr	r2, [pc, #452]	; (2cc4 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2afe:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2b00:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2b02:	ldr	r2, [pc, #452]	; (2cc8 <usb_isr+0x620>)
    2b04:	movs	r3, #1
    2b06:	strb	r3, [r2, #0]
    2b08:	b.n	28c2 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    2b0a:	bl	1868 <usb_serial_flush_callback>
    2b0e:	b.n	277c <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2b10:	ldr	r3, [pc, #408]	; (2cac <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2b12:	ldr	r0, [pc, #436]	; (2cc8 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2b14:	ldr	r1, [pc, #412]	; (2cb4 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2b16:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2b18:	mov.w	lr, #2
    2b1c:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2b20:	ldr	r7, [pc, #424]	; (2ccc <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2b22:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2b24:	ldr	r1, [pc, #424]	; (2cd0 <usb_isr+0x628>)
    2b26:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2b28:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2b2a:	ldr	r6, [pc, #424]	; (2cd4 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2b2c:	ldr	r5, [pc, #424]	; (2cd8 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2b2e:	ldr	r4, [pc, #428]	; (2cdc <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2b30:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2b32:	movs	r1, #13
    2b34:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2b36:	movs	r1, #255	; 0xff
    2b38:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2b3a:	ldr.w	lr, [pc, #452]	; 2d00 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    2b3e:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2b40:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2b42:	ldr	r5, [pc, #412]	; (2ce0 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2b44:	ldr	r2, [pc, #412]	; (2ce4 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2b46:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2b4a:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2b4c:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2b4e:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2b52:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2b54:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2b56:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    2b58:	add	sp, #28
    2b5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    2b5e:	ldr	r2, [pc, #392]	; (2ce8 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2b60:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2b64:	ldrb	r3, [r2, #0]
    2b66:	adds	r3, #1
    2b68:	strb	r3, [r2, #0]
    2b6a:	b.n	273c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2b6c:	str.w	r0, [r3, r6, lsl #2]
    2b70:	ldr	r5, [pc, #376]	; (2cec <usb_isr+0x644>)
    2b72:	b.n	270a <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2b74:	ldrb	r3, [r1, r6]
    2b76:	cmp	r3, #3
    2b78:	bhi.n	2c50 <usb_isr+0x5a8>
    2b7a:	add	r2, pc, #4	; (adr r2, 2b80 <usb_isr+0x4d8>)
    2b7c:	ldr.w	pc, [r2, r3, lsl #2]
    2b80:	.word	0x0000273d
    2b84:	.word	0x0000273d
    2b88:	.word	0x00002bd5
    2b8c:	.word	0x00002bcf
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2b90:	ldr	r1, [pc, #312]	; (2ccc <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    2b92:	ldr	r3, [pc, #324]	; (2cd8 <usb_isr+0x630>)
    2b94:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2b96:	movs	r0, #13
    2b98:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    2b9a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2b9c:	lsls	r2, r4, #30
    2b9e:	bpl.w	2942 <usb_isr+0x29a>
    2ba2:	b.n	2934 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2ba4:	movw	r2, #770	; 0x302
    2ba8:	cmp	r1, r2
    2baa:	bne.w	2e6a <usb_isr+0x7c2>
    2bae:	ldrh	r1, [r5, #4]
    2bb0:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2bb4:	cmp	r1, #5
    2bb6:	bhi.n	2be6 <usb_isr+0x53e>
    2bb8:	ldrh	r2, [r5, #2]
    2bba:	cbnz	r2, 2be6 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    2bbc:	ldr	r4, [pc, #268]	; (2ccc <usb_isr+0x624>)
    2bbe:	str	r0, [sp, #4]
    2bc0:	lsls	r1, r1, #2
    2bc2:	add	r4, r1
    2bc4:	ldrb	r1, [r4, #0]
    2bc6:	orr.w	r1, r1, #2
    2bca:	strb	r1, [r4, #0]
    2bcc:	b.n	2a7e <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2bce:	movs	r3, #1
    2bd0:	strb	r3, [r1, r6]
						break;
    2bd2:	b.n	273c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2bd4:	movs	r3, #0
    2bd6:	strb	r3, [r1, r6]
						break;
    2bd8:	b.n	273c <usb_isr+0x94>
    2bda:	ldrh	r1, [r5, #4]
    2bdc:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2be0:	cmp	r1, #5
    2be2:	bls.w	2e84 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2be6:	ldr	r2, [pc, #228]	; (2ccc <usb_isr+0x624>)
    2be8:	movs	r3, #15
    2bea:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2bec:	ldr	r2, [pc, #216]	; (2cc8 <usb_isr+0x620>)
    2bee:	movs	r3, #1
    2bf0:	strb	r3, [r2, #0]
    2bf2:	b.n	28c2 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2bf4:	cmp	r0, #64	; 0x40
    2bf6:	bls.w	2aca <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2bfa:	orr.w	r4, r4, #2
    2bfe:	add.w	r1, lr, r4, lsl #3
    2c02:	ldr	r6, [sp, #8]
    2c04:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c06:	cbz	r2, 2c38 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    2c08:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c0c:	ldr	r2, [pc, #224]	; (2cf0 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    2c0e:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2c10:	mov	r3, r6
    2c12:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2c14:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2c18:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c1a:	str.w	r2, [lr, r4, lsl #3]
    2c1e:	b.n	2afc <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    2c20:	ldrb.w	r3, [sp, #4]
    2c24:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c26:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2c28:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2c2a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c2c:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2c30:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c32:	str.w	r2, [lr, ip, lsl #3]
    2c36:	b.n	2af6 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    2c38:	ldrb.w	r1, [sp, #4]
    2c3c:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2c3e:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c40:	ldr	r2, [pc, #140]	; (2cd0 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2c42:	strb.w	r5, [r8]
    2c46:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2c48:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c4a:	str.w	r2, [lr, r4, lsl #3]
    2c4e:	b.n	2afc <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2c50:	tst.w	r9, #8
    2c54:	ite	eq
    2c56:	moveq	r3, #2
    2c58:	movne	r3, #3
    2c5a:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2c5c:	b.n	273c <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2c5e:	ldr	r2, [pc, #148]	; (2cf4 <usb_isr+0x64c>)
    2c60:	movs	r1, #15
    2c62:	strb	r1, [r2, #0]
    2c64:	b.n	2a32 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2c66:	ldr	r2, [pc, #64]	; (2ca8 <usb_isr+0x600>)
    2c68:	ldr	r4, [pc, #140]	; (2cf8 <usb_isr+0x650>)
    2c6a:	ldrb	r2, [r2, #0]
    2c6c:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2c6e:	ldrh	r2, [r5, #6]
    2c70:	cmp	r2, r0
    2c72:	bcs.w	3038 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c76:	ldr	r1, [pc, #60]	; (2cb4 <usb_isr+0x60c>)
    2c78:	ldrb	r5, [r1, #0]
    2c7a:	cmp	r2, #64	; 0x40
    2c7c:	mov	ip, r2
    2c7e:	orr.w	lr, r5, #2
    2c82:	it	cs
    2c84:	movcs.w	ip, #64	; 0x40
    2c88:	add.w	r3, r4, ip
    2c8c:	add.w	r0, r9, lr, lsl #3
    2c90:	str	r3, [sp, #8]
    2c92:	movs	r3, #1
    2c94:	str	r4, [r0, #4]
    2c96:	mov.w	r8, ip, lsl #16
    2c9a:	rsb	r0, ip, r2
    2c9e:	str	r3, [sp, #4]
    2ca0:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ca2:	movs	r4, #200	; 0xc8
    2ca4:	b.n	2aa4 <usb_isr+0x3fc>
    2ca6:	nop
    2ca8:	.word	0x1fff1720
    2cac:	.word	0x1fff0000
    2cb0:	.word	0x1fff1a80
    2cb4:	.word	0x1fff1714
    2cb8:	.word	0x1fff16a0
    2cbc:	.word	0x1fff1a88
    2cc0:	.word	0x1fff15c4
    2cc4:	.word	0x1fff1648
    2cc8:	.word	0x40072094
    2ccc:	.word	0x400720c0
    2cd0:	.word	0x00400088
    2cd4:	.word	0x40072088
    2cd8:	.word	0x40072080
    2cdc:	.word	0x40072098
    2ce0:	.word	0x1fff164c
    2ce4:	.word	0x1fff16a4
    2ce8:	.word	0x1fff1715
    2cec:	.word	0x1fff1634
    2cf0:	.word	0x004000c8
    2cf4:	.word	0x1fff16a1
    2cf8:	.word	0x1fff1718
    2cfc:	.word	0x1fff15cc
    2d00:	.word	0x4007208c
    2d04:	ldr	r4, [pc, #704]	; (2fc8 <usb_isr+0x920>)
    2d06:	ldr	r2, [pc, #708]	; (2fcc <usb_isr+0x924>)
    2d08:	ldr	r1, [pc, #708]	; (2fd0 <usb_isr+0x928>)
    2d0a:	ldr	r0, [pc, #712]	; (2fd4 <usb_isr+0x92c>)
    2d0c:	ldr	r5, [pc, #712]	; (2fd8 <usb_isr+0x930>)
    2d0e:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2d10:	movs	r3, #0
    2d12:	ldr	r4, [pc, #712]	; (2fdc <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2d14:	str	r4, [sp, #8]
    2d16:	str	r6, [sp, #20]
    2d18:	str	r5, [sp, #12]
    2d1a:	mov	r8, r0
    2d1c:	mov	r4, r3
    2d1e:	str	r7, [sp, #16]
    2d20:	mov	r6, r2
    2d22:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2d24:	ldr	r0, [r6, #0]
			while (p) {
    2d26:	cbz	r0, 2d34 <usb_isr+0x68c>
				n = p->next;
    2d28:	ldr	r7, [r0, #4]
				usb_free(p);
    2d2a:	bl	2488 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    2d2e:	mov	r0, r7
    2d30:	cmp	r7, #0
    2d32:	bne.n	2d28 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2d34:	movs	r3, #0
    2d36:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2d38:	ldr	r3, [sp, #12]
			p = tx_first[i];
    2d3a:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2d3c:	mov	r2, r3
    2d3e:	movs	r3, #0
    2d40:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2d44:	cbz	r0, 2d52 <usb_isr+0x6aa>
				n = p->next;
    2d46:	ldr	r7, [r0, #4]
				usb_free(p);
    2d48:	bl	2488 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2d4c:	mov	r0, r7
    2d4e:	cmp	r7, #0
    2d50:	bne.n	2d46 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2d52:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2d54:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2d56:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2d58:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    2d5a:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    2d5e:	ldr	r2, [sp, #8]
    2d60:	mov.w	r1, #0
			switch (tx_state[i]) {
    2d64:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    2d66:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    2d6a:	cmp	r3, #3
    2d6c:	bhi.n	2d7e <usb_isr+0x6d6>
    2d6e:	tbb	[pc, r3]
    2d72:	.short	0x0258
    2d74:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2d76:	ldr	r3, [sp, #4]
    2d78:	mov.w	r2, #1
    2d7c:	strb	r2, [r3, #0]
    2d7e:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    2d80:	adds	r4, #1
    2d82:	adds	r3, #1
    2d84:	cmp	r4, #5
    2d86:	add.w	r6, r6, #4
    2d8a:	add.w	r5, r5, #4
    2d8e:	str	r3, [sp, #4]
    2d90:	bne.n	2d24 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2d92:	ldr	r4, [pc, #588]	; (2fe0 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2d94:	ldr	r5, [pc, #588]	; (2fe4 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2d96:	ldrb	r2, [r4, #0]
			*reg = epconf;
    2d98:	ldr	r3, [pc, #588]	; (2fe8 <usb_isr+0x940>)
    2d9a:	ldr	r7, [sp, #16]
    2d9c:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2d9e:	movs	r1, #0
    2da0:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2da2:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2da4:	lsls	r2, r2, #28
    2da6:	bmi.n	2e9e <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2da8:	ldrb	r2, [r4, #1]
			*reg = epconf;
    2daa:	ldr	r1, [pc, #576]	; (2fec <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2dac:	ldr.w	r8, [pc, #588]	; 2ffc <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2db0:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2db2:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2db4:	mov.w	r1, #0
    2db8:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    2dbc:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2dc0:	bmi.w	2f4a <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2dc4:	ldrb	r2, [r4, #2]
			*reg = epconf;
    2dc6:	ldr	r1, [pc, #552]	; (2ff0 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2dc8:	ldr.w	r8, [pc, #560]	; 2ffc <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2dcc:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2dce:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2dd0:	mov.w	r1, #0
    2dd4:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    2dd8:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2ddc:	bmi.w	2f22 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2de0:	ldr	r1, [pc, #528]	; (2ff4 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2de2:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2de4:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2de6:	movs	r1, #0
    2de8:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2dec:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2df0:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2df2:	ldr.w	r8, [pc, #520]	; 2ffc <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2df6:	bmi.n	2ef4 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2df8:	ldrb	r2, [r4, #4]
			*reg = epconf;
    2dfa:	ldr	r1, [pc, #508]	; (2ff8 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2dfc:	ldr	r4, [pc, #508]	; (2ffc <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2dfe:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2e00:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2e02:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2e04:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    2e08:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2e0c:	bmi.n	2eca <usb_isr+0x822>
    2e0e:	ldrb	r3, [r6, #0]
    2e10:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2e12:	movs	r1, #0
    2e14:	eor.w	r2, r3, #1
    2e18:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    2e1c:	str.w	r1, [r9, #184]	; 0xb8
    2e20:	b.n	2a7e <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2e22:	ldr	r3, [sp, #4]
    2e24:	mov.w	r2, #0
    2e28:	strb	r2, [r3, #0]
    2e2a:	b.n	2d7e <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    2e2c:	ldr	r2, [pc, #464]	; (3000 <usb_isr+0x958>)
    2e2e:	ldr	r4, [r2, #4]
    2e30:	cmp	r4, #0
    2e32:	beq.w	2be6 <usb_isr+0x53e>
    2e36:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2e38:	ldrh.w	lr, [r5, #4]
    2e3c:	b.n	2e48 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    2e3e:	adds	r2, #12
			if (list->addr == NULL) break;
    2e40:	ldr	r4, [r2, #4]
    2e42:	cmp	r4, #0
    2e44:	beq.w	2be6 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2e48:	ldrh	r3, [r2, #0]
    2e4a:	cmp	r3, r0
    2e4c:	bne.n	2e3e <usb_isr+0x796>
    2e4e:	ldrh	r3, [r2, #2]
    2e50:	cmp	r3, lr
    2e52:	bne.n	2e3e <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    2e54:	lsrs	r0, r0, #8
    2e56:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    2e58:	ite	eq
    2e5a:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    2e5c:	ldrhne	r0, [r2, #8]
    2e5e:	b.n	2c6e <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2e60:	ldr	r4, [pc, #416]	; (3004 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    2e62:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2e64:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2e66:	strb	r2, [r4, #1]
    2e68:	b.n	2c6e <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2e6a:	cmp.w	r1, #1280	; 0x500
    2e6e:	bne.w	2be6 <usb_isr+0x53e>
    2e72:	movs	r3, #1
    2e74:	movs	r2, #0
    2e76:	str	r3, [sp, #4]
    2e78:	b.n	2a7e <usb_isr+0x3d6>
    2e7a:	movw	r2, #8993	; 0x2321
    2e7e:	cmp	r1, r2
    2e80:	beq.n	2e72 <usb_isr+0x7ca>
    2e82:	b.n	2be6 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2e84:	ldrh	r2, [r5, #2]
    2e86:	cmp	r2, #0
    2e88:	bne.w	2be6 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    2e8c:	ldr	r4, [pc, #376]	; (3008 <usb_isr+0x960>)
    2e8e:	str	r0, [sp, #4]
    2e90:	lsls	r1, r1, #2
    2e92:	add	r4, r1
    2e94:	ldrb	r1, [r4, #0]
    2e96:	bic.w	r1, r1, #2
    2e9a:	strb	r1, [r4, #0]
    2e9c:	b.n	2a7e <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2e9e:	bl	2448 <usb_malloc>
				if (p) {
    2ea2:	cmp	r0, #0
    2ea4:	beq.w	3014 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    2ea8:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2eaa:	ldr	r2, [pc, #352]	; (300c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2eac:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2eb0:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2eb4:	bl	2448 <usb_malloc>
				if (p) {
    2eb8:	cmp	r0, #0
    2eba:	beq.n	2fbc <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    2ebc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2ebe:	ldr	r2, [pc, #336]	; (3010 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2ec0:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2ec4:	str.w	r2, [r9, #40]	; 0x28
    2ec8:	b.n	2da8 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2eca:	bl	2448 <usb_malloc>
				if (p) {
    2ece:	cmp	r0, #0
    2ed0:	beq.n	2f80 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    2ed2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2ed4:	ldr	r2, [pc, #308]	; (300c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2ed6:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2eda:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2ede:	bl	2448 <usb_malloc>
				if (p) {
    2ee2:	cmp	r0, #0
    2ee4:	beq.n	2f74 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    2ee6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2ee8:	ldr	r2, [pc, #292]	; (3010 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2eea:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2eee:	str.w	r2, [r9, #168]	; 0xa8
    2ef2:	b.n	2e0e <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2ef4:	bl	2448 <usb_malloc>
				if (p) {
    2ef8:	cmp	r0, #0
    2efa:	beq.w	302c <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    2efe:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2f00:	ldr	r2, [pc, #264]	; (300c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2f02:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2f06:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2f0a:	bl	2448 <usb_malloc>
				if (p) {
    2f0e:	cmp	r0, #0
    2f10:	beq.w	3020 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2f14:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2f16:	ldr	r2, [pc, #248]	; (3010 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2f18:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2f1c:	str.w	r2, [r9, #136]	; 0x88
    2f20:	b.n	2df8 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2f22:	bl	2448 <usb_malloc>
				if (p) {
    2f26:	cmp	r0, #0
    2f28:	beq.n	2fb0 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    2f2a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2f2c:	ldr	r2, [pc, #220]	; (300c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2f2e:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2f32:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2f36:	bl	2448 <usb_malloc>
				if (p) {
    2f3a:	cbz	r0, 2fa4 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    2f3c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2f3e:	ldr	r2, [pc, #208]	; (3010 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2f40:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2f44:	str.w	r2, [r9, #104]	; 0x68
    2f48:	b.n	2de0 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2f4a:	bl	2448 <usb_malloc>
				if (p) {
    2f4e:	cbz	r0, 2f98 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    2f50:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2f52:	ldr	r2, [pc, #184]	; (300c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2f54:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2f58:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2f5c:	bl	2448 <usb_malloc>
				if (p) {
    2f60:	cbz	r0, 2f8c <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    2f62:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2f64:	ldr	r2, [pc, #168]	; (3010 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2f66:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2f6a:	str.w	r2, [r9, #72]	; 0x48
    2f6e:	b.n	2dc4 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    2f70:	movs	r0, #2
    2f72:	b.n	2c6e <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2f74:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2f76:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    2f7a:	adds	r2, #1
    2f7c:	strb	r2, [r5, #0]
    2f7e:	b.n	2e0e <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2f80:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2f82:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    2f86:	adds	r2, #1
    2f88:	strb	r2, [r5, #0]
    2f8a:	b.n	2ede <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2f8c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2f8e:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    2f92:	adds	r2, #1
    2f94:	strb	r2, [r5, #0]
    2f96:	b.n	2dc4 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2f98:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2f9a:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    2f9e:	adds	r2, #1
    2fa0:	strb	r2, [r5, #0]
    2fa2:	b.n	2f5c <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2fa4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2fa6:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    2faa:	adds	r2, #1
    2fac:	strb	r2, [r5, #0]
    2fae:	b.n	2de0 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2fb0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2fb2:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    2fb6:	adds	r2, #1
    2fb8:	strb	r2, [r5, #0]
    2fba:	b.n	2f36 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2fbc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2fbe:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    2fc2:	adds	r2, #1
    2fc4:	strb	r2, [r5, #0]
    2fc6:	b.n	2da8 <usb_isr+0x700>
    2fc8:	.word	0x1fff1724
    2fcc:	.word	0x1fff168c
    2fd0:	.word	0x1fff16e4
    2fd4:	.word	0x1fff16f8
    2fd8:	.word	0x1fff1634
    2fdc:	.word	0x1fff1bb8
    2fe0:	.word	0x00004ad4
    2fe4:	.word	0x1fff1715
    2fe8:	.word	0x400720c4
    2fec:	.word	0x400720c8
    2ff0:	.word	0x400720cc
    2ff4:	.word	0x400720d0
    2ff8:	.word	0x400720d4
    2ffc:	.word	0x1fff0000
    3000:	.word	0x00004adc
    3004:	.word	0x1fff1718
    3008:	.word	0x400720c0
    300c:	.word	0x00400088
    3010:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3014:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3016:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    301a:	adds	r2, #1
    301c:	strb	r2, [r5, #0]
    301e:	b.n	2eb4 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3020:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3022:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3026:	adds	r2, #1
    3028:	strb	r2, [r5, #0]
    302a:	b.n	2df8 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    302c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    302e:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    3032:	adds	r2, #1
    3034:	strb	r2, [r5, #0]
    3036:	b.n	2f0a <usb_isr+0x862>
    3038:	cmp	r0, #64	; 0x40
    303a:	mov	ip, r0
    303c:	it	cs
    303e:	movcs.w	ip, #64	; 0x40
    3042:	add.w	r3, r4, ip
    3046:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3048:	movs	r3, #1
    304a:	rsb	r0, ip, r0
    304e:	mov.w	r8, ip, lsl #16
    3052:	movs	r2, #0
    3054:	str	r3, [sp, #4]
    3056:	b.n	2a88 <usb_isr+0x3e0>

00003058 <usb_init>:
}



void usb_init(void)
{
    3058:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    305c:	ldr	r4, [pc, #156]	; (30fc <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    305e:	bl	39a4 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3062:	movs	r2, #0
    3064:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3068:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    306a:	str	r2, [r3, #0]
		table[i].addr = 0;
    306c:	str	r2, [r3, #4]
    306e:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3070:	cmp	r3, r0
		table[i].desc = 0;
    3072:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3076:	bne.n	306a <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3078:	ldr	r0, [pc, #132]	; (3100 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    307a:	ldr	r2, [pc, #136]	; (3104 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    307c:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    307e:	ldr.w	lr, [pc, #156]	; 311c <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3082:	ldr	r6, [pc, #132]	; (3108 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3084:	ldr	r5, [pc, #132]	; (310c <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3086:	ldr	r7, [pc, #136]	; (3110 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3088:	ldr.w	ip, [pc, #148]	; 3120 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    308c:	ldr.w	r8, [pc, #148]	; 3124 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3090:	orr.w	r3, r3, #262144	; 0x40000
    3094:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3096:	ldr	r3, [r2, #0]
    3098:	orr.w	r3, r3, #50331648	; 0x3000000
    309c:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    309e:	movs	r3, #3
    30a0:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    30a4:	movs	r3, #160	; 0xa0
    30a6:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    30a8:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    30ac:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    30b0:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    30b4:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    30b6:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    30b8:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    30bc:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    30be:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    30c0:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    30c2:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    30c4:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    30c6:	ldr	r5, [pc, #76]	; (3114 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    30c8:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    30cc:	ldr	r0, [pc, #72]	; (3118 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    30ce:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    30d2:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    30d4:	movs	r3, #1
    30d6:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    30da:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    30de:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    30e2:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    30e4:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    30e6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    30ea:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    30ec:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    30ee:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    30f2:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    30f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30fa:	nop
    30fc:	.word	0x1fff0000
    3100:	.word	0x40048034
    3104:	.word	0x4000d800
    3108:	.word	0x40072140
    310c:	.word	0x4007209c
    3110:	.word	0x400720b0
    3114:	.word	0xe000e435
    3118:	.word	0xe000e104
    311c:	.word	0x40072144
    3120:	.word	0x40072080
    3124:	.word	0x40072088

00003128 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3128:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    312a:	ldr	r4, [pc, #176]	; (31dc <yield+0xb4>)
    312c:	ldrb	r3, [r4, #0]
    312e:	cbz	r3, 3132 <yield+0xa>
    3130:	pop	{r3, r4, r5, pc}
	running = 1;
    3132:	movs	r3, #1
    3134:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3136:	bl	1654 <usb_serial_available>
	if (Serial.available()) serialEvent();
    313a:	cmp	r0, #0
    313c:	bne.n	31c4 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    313e:	bl	3774 <serial_available>
	if (Serial1.available()) serialEvent1();
    3142:	cmp	r0, #0
    3144:	bne.n	31be <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    3146:	bl	345c <serial2_available>
	if (Serial2.available()) serialEvent2();
    314a:	cmp	r0, #0
    314c:	bne.n	31b8 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    314e:	bl	3a74 <serial3_available>
	if (Serial3.available()) serialEvent3();
    3152:	cbnz	r0, 31b2 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3154:	bl	3588 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3158:	cbnz	r0, 31ac <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    315a:	bl	3364 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    315e:	cbnz	r0, 31a6 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3160:	bl	38a0 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3164:	cbnz	r0, 31a0 <yield+0x78>
#endif
	running = 0;
    3166:	movs	r3, #0
    3168:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    316a:	mrs	r3, IPSR
		if (ipsr != 0) return;
    316e:	cmp	r3, #0
    3170:	bne.n	3130 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3172:	mrs	r1, PRIMASK
		__disable_irq();
    3176:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3178:	ldr	r3, [pc, #100]	; (31e0 <yield+0xb8>)
    317a:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    317c:	cbz	r0, 31ca <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    317e:	ldr	r4, [pc, #100]	; (31e4 <yield+0xbc>)
    3180:	ldrb	r2, [r4, #0]
    3182:	cbnz	r2, 31ca <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3184:	ldr	r5, [r0, #20]
    3186:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3188:	movs	r3, #1
    318a:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    318c:	cbz	r5, 31d2 <yield+0xaa>
			firstYield->_prev = nullptr;
    318e:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3190:	cbnz	r1, 3194 <yield+0x6c>
    3192:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3194:	movs	r5, #0
    3196:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3198:	ldr	r3, [r0, #8]
    319a:	blx	r3
		runningFromYield = false;
    319c:	strb	r5, [r4, #0]
    319e:	b.n	3130 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    31a0:	bl	335c <serialEvent6()>
    31a4:	b.n	3166 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    31a6:	bl	31ec <serialEvent5()>
    31aa:	b.n	3160 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    31ac:	bl	32d0 <serialEvent4()>
    31b0:	b.n	315a <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    31b2:	bl	3b70 <serialEvent3()>
    31b6:	b.n	3154 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    31b8:	bl	32cc <serialEvent2()>
    31bc:	b.n	314e <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    31be:	bl	3b6c <serialEvent1()>
    31c2:	b.n	3146 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    31c4:	bl	3218 <serialEvent()>
    31c8:	b.n	313e <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    31ca:	cmp	r1, #0
    31cc:	bne.n	3130 <yield+0x8>
    31ce:	cpsie	i
    31d0:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    31d2:	ldr	r3, [pc, #20]	; (31e8 <yield+0xc0>)
    31d4:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    31d6:	cmp	r1, #0
    31d8:	bne.n	3194 <yield+0x6c>
    31da:	b.n	3192 <yield+0x6a>
    31dc:	.word	0x1fff1729
    31e0:	.word	0x1fff1a40
    31e4:	.word	0x1fff1a44
    31e8:	.word	0x1fff1a3c

000031ec <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    31ec:	bx	lr
    31ee:	nop

000031f0 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    31f0:	b.w	1670 <usb_serial_flush_input>

000031f4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    31f4:	b.w	1624 <usb_serial_peekchar>

000031f8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    31f8:	b.w	15dc <usb_serial_getchar>

000031fc <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    31fc:	b.w	1654 <usb_serial_available>

00003200 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3200:	b.w	1810 <usb_serial_flush_output>

00003204 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3204:	b.w	17c8 <usb_serial_write_buffer_free>

00003208 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3208:	mov	r0, r1
    320a:	mov	r1, r2
    320c:	b.w	16a8 <usb_serial_write>

00003210 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3210:	mov	r0, r1
    3212:	b.w	17b0 <usb_serial_putchar>
    3216:	nop

00003218 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3218:	bx	lr
    321a:	nop

0000321c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    321c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    321e:	ldr	r2, [pc, #24]	; (3238 <Print::println()+0x1c>)
	return write(buf, 2);
    3220:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3222:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3224:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3226:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3228:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    322a:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    322e:	movs	r2, #2
    3230:	blx	r3
}
    3232:	add	sp, #12
    3234:	ldr.w	pc, [sp], #4
    3238:	.word	0x00004ad0

0000323c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    323c:	push	{r4, r5, r6, r7, lr}
    323e:	mov	r7, r0
    3240:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3242:	cmp	r2, #0
    3244:	beq.n	32ae <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    3246:	cmp	r2, #1
    3248:	it	eq
    324a:	moveq	r2, #10
	}


	if (n == 0) {
    324c:	cbz	r1, 32a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    324e:	movs	r4, #33	; 0x21
    3250:	b.n	3254 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3252:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3254:	udiv	r5, r1, r2
    3258:	mls	r1, r2, r5, r1
    325c:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    325e:	cmp	r1, #9
    3260:	add.w	r1, r0, #48	; 0x30
    3264:	it	ls
    3266:	uxtbls	r0, r1
    3268:	add	r1, sp, #40	; 0x28
    326a:	it	hi
    326c:	addhi	r0, #55	; 0x37
    326e:	add	r1, r4
    3270:	it	hi
    3272:	uxtbhi	r0, r0
    3274:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    3278:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    327a:	mov	r1, r5
    327c:	cmp	r5, #0
    327e:	bne.n	3252 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    3280:	cbz	r3, 3290 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    3282:	subs	r4, #1
    3284:	uxtb	r4, r4
		buf[i] = '-';
    3286:	add	r3, sp, #40	; 0x28
    3288:	add	r3, r4
    328a:	movs	r2, #45	; 0x2d
    328c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3290:	ldr	r3, [r7, #0]
    3292:	add	r2, sp, #4
    3294:	adds	r1, r2, r4
    3296:	ldr	r3, [r3, #4]
    3298:	mov	r0, r7
    329a:	rsb	r2, r4, #34	; 0x22
    329e:	blx	r3
}
    32a0:	add	sp, #44	; 0x2c
    32a2:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    32a4:	movs	r2, #48	; 0x30
    32a6:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    32aa:	movs	r4, #33	; 0x21
    32ac:	b.n	3280 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    32ae:	ldr	r3, [r0, #0]
    32b0:	uxtb	r1, r1
    32b2:	ldr	r3, [r3, #0]
    32b4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    32b6:	add	sp, #44	; 0x2c
    32b8:	pop	{r4, r5, r6, r7, pc}
    32ba:	nop

000032bc <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    32bc:	cmp	r1, #0
		sign = '-';
		n = -n;
    32be:	itte	lt
    32c0:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    32c2:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    32c4:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    32c6:	movs	r2, #10
    32c8:	b.w	323c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000032cc <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    32cc:	bx	lr
    32ce:	nop

000032d0 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    32d0:	bx	lr
    32d2:	nop

000032d4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    32d4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    32d6:	bl	98c <setup>
	while (1) {
		loop();
    32da:	bl	990 <loop>
		yield();
    32de:	bl	3128 <yield>
    32e2:	b.n	32da <main+0x6>

000032e4 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    32e4:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    32e6:	ldr	r5, [pc, #88]	; (3340 <random(unsigned long) [clone .part.0]+0x5c>)
    32e8:	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    32ea:	cbz	r2, 3330 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    32ec:	ldr	r1, [pc, #84]	; (3344 <random(unsigned long) [clone .part.0]+0x60>)
    32ee:	ldr	r3, [pc, #88]	; (3348 <random(unsigned long) [clone .part.0]+0x64>)
    32f0:	ldr.w	lr, [pc, #92]	; 3350 <random(unsigned long) [clone .part.0]+0x6c>
    32f4:	smull	r6, r7, r2, r1
    32f8:	smull	r1, r4, r1, r2
    32fc:	asrs	r6, r2, #31
    32fe:	adds	r1, r2, r7
    3300:	add	r4, r2
    3302:	rsb	r1, r6, r1, asr #16
    3306:	rsb	r4, r6, r4, asr #16
    330a:	mul.w	r4, r3, r4
    330e:	mls	r2, lr, r1, r2
    3312:	movw	r3, #16807	; 0x41a7
    3316:	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    331a:	cmp	r3, #0
    331c:	bge.n	3324 <random(unsigned long) [clone .part.0]+0x40>
    331e:	add.w	r3, r3, #2147483648	; 0x80000000
    3322:	subs	r3, #1
    3324:	udiv	r2, r3, r0
	seed = x;
    3328:	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    332a:	mls	r0, r0, r2, r3
    332e:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    3330:	ldr	r3, [pc, #24]	; (334c <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    3332:	str	r3, [r5, #0]
    3334:	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    3338:	mls	r0, r0, r2, r3
    333c:	pop	{r4, r5, r6, r7, pc}
    333e:	nop
    3340:	.word	0x1fff172c
    3344:	.word	0x834e0b5f
    3348:	.word	0xfffff4ec
    334c:	.word	0x1f0cce42
    3350:	.word	0x0001f31d

00003354 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    3354:	cbz	r0, 335a <random(unsigned long)+0x6>
    3356:	b.w	32e4 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    335a:	bx	lr

0000335c <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    335c:	bx	lr
    335e:	nop

00003360 <operator new(unsigned int)>:
    3360:	b.w	3dc4 <malloc>

00003364 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3364:	ldr	r2, [pc, #20]	; (337c <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3366:	ldr	r3, [pc, #24]	; (3380 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3368:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    336a:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    336c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    336e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3370:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3372:	it	cc
    3374:	addcc	r0, #64	; 0x40
    3376:	subs	r0, r0, r3
}
    3378:	bx	lr
    337a:	nop
    337c:	.word	0x1fff1734
    3380:	.word	0x1fff1735

00003384 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3384:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3386:	ldr	r3, [pc, #172]	; (3434 <uart4_status_isr+0xb0>)
    3388:	ldrb	r2, [r3, #4]
    338a:	lsls	r4, r2, #26
    338c:	bpl.n	33ce <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    338e:	ldr	r0, [pc, #168]	; (3438 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3390:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3392:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3394:	ldr	r1, [pc, #164]	; (343c <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3396:	adds	r3, #1
    3398:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    339a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    339c:	it	gt
    339e:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    33a0:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    33a2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    33a4:	beq.n	33ae <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    33a6:	ldr	r4, [pc, #152]	; (3440 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    33a8:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    33aa:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    33ac:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    33ae:	ldr	r2, [pc, #148]	; (3444 <uart4_status_isr+0xc0>)
    33b0:	ldr	r1, [r2, #0]
    33b2:	cbz	r1, 33ce <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    33b4:	ldr	r2, [pc, #144]	; (3448 <uart4_status_isr+0xc4>)
    33b6:	ldrb	r2, [r2, #0]
    33b8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    33ba:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    33bc:	itet	cc
    33be:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    33c2:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    33c4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    33c6:	cmp	r3, #39	; 0x27
    33c8:	itt	gt
    33ca:	movgt	r3, #1
    33cc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    33ce:	ldr	r2, [pc, #100]	; (3434 <uart4_status_isr+0xb0>)
    33d0:	ldrb	r3, [r2, #3]
    33d2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    33d4:	lsls	r0, r3, #24
    33d6:	bmi.n	33fc <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    33d8:	lsls	r2, r3, #25
    33da:	bpl.n	33f8 <uart4_status_isr+0x74>
    33dc:	ldr	r3, [pc, #84]	; (3434 <uart4_status_isr+0xb0>)
    33de:	ldrb	r3, [r3, #4]
    33e0:	lsls	r3, r3, #25
    33e2:	bpl.n	33f8 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    33e4:	ldr	r3, [pc, #100]	; (344c <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    33e6:	ldr	r1, [pc, #104]	; (3450 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    33e8:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    33ea:	movs	r2, #0
    33ec:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    33ee:	cbz	r3, 33f2 <uart4_status_isr+0x6e>
    33f0:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    33f2:	ldr	r3, [pc, #64]	; (3434 <uart4_status_isr+0xb0>)
    33f4:	movs	r2, #44	; 0x2c
    33f6:	strb	r2, [r3, #3]
	}
}
    33f8:	pop	{r4, r5}
    33fa:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    33fc:	ldrb	r1, [r2, #4]
    33fe:	lsls	r1, r1, #24
    3400:	bpl.n	33d8 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3402:	ldr	r1, [pc, #80]	; (3454 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3404:	ldr	r0, [pc, #64]	; (3448 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3406:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3408:	ldrb	r1, [r0, #0]
    340a:	uxtb	r1, r1
		if (head == tail) {
    340c:	cmp	r4, r1
    340e:	beq.n	342c <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3410:	adds	r2, r1, #1
    3412:	cmp	r2, #39	; 0x27
    3414:	itt	hi
    3416:	movhi	r1, #0
    3418:	movhi	r2, r1
			n = tx_buffer[tail];
    341a:	ldr	r5, [pc, #60]	; (3458 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    341c:	ldr	r4, [pc, #20]	; (3434 <uart4_status_isr+0xb0>)
    341e:	it	ls
    3420:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3422:	ldrb	r2, [r5, r2]
    3424:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3426:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3428:	strb	r1, [r0, #0]
    342a:	b.n	33d8 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    342c:	movs	r1, #108	; 0x6c
    342e:	strb	r1, [r2, #3]
    3430:	b.n	33d8 <uart4_status_isr+0x54>
    3432:	nop
    3434:	.word	0x400ea000
    3438:	.word	0x1fff1734
    343c:	.word	0x1fff1735
    3440:	.word	0x1fff1760
    3444:	.word	0x1fff1730
    3448:	.word	0x1fff17a1
    344c:	.word	0x1fff17a4
    3450:	.word	0x1fff17a0
    3454:	.word	0x1fff17a8
    3458:	.word	0x1fff1738

0000345c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    345c:	ldr	r2, [pc, #20]	; (3474 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    345e:	ldr	r3, [pc, #24]	; (3478 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3460:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3462:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3464:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3466:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3468:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    346a:	it	cc
    346c:	addcc	r0, #64	; 0x40
    346e:	subs	r0, r0, r3
}
    3470:	bx	lr
    3472:	nop
    3474:	.word	0x1fff181c
    3478:	.word	0x1fff17b1

0000347c <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    347c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    347e:	ldr	r3, [pc, #224]	; (3560 <uart1_status_isr+0xe4>)
    3480:	ldrb	r2, [r3, #4]
    3482:	tst.w	r2, #48	; 0x30
    3486:	beq.n	34e2 <uart1_status_isr+0x66>
		__disable_irq();
    3488:	cpsid	i
		avail = UART1_RCFIFO;
    348a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    348c:	and.w	r2, r1, #255	; 0xff
    3490:	cmp	r1, #0
    3492:	beq.n	3510 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3494:	cpsie	i
			head = rx_buffer_head;
    3496:	ldr	r7, [pc, #204]	; (3564 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3498:	ldr	r1, [pc, #204]	; (3568 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    349a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    349c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    349e:	ldr	r6, [pc, #204]	; (356c <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    34a0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    34a2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    34a4:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    34a6:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    34a8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    34aa:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    34ac:	it	cs
    34ae:	movcs	r3, #0
				if (newhead != tail) {
    34b0:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    34b2:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    34b6:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    34b8:	itt	ne
    34ba:	strbne	r1, [r6, r3]
    34bc:	movne	r0, r3
				}
			} while (--avail > 0);
    34be:	ands.w	r2, r2, #255	; 0xff
    34c2:	bne.n	34a6 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    34c4:	ldr	r3, [pc, #168]	; (3570 <uart1_status_isr+0xf4>)
    34c6:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    34c8:	uxtb	r2, r0
    34ca:	strb	r2, [r7, #0]
			if (rts_pin) {
    34cc:	cbz	r3, 34e2 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    34ce:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    34d0:	itet	cc
    34d2:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    34d6:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    34d8:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    34da:	cmp	r0, #39	; 0x27
    34dc:	itt	gt
    34de:	movgt	r2, #1
    34e0:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    34e2:	ldr	r1, [pc, #124]	; (3560 <uart1_status_isr+0xe4>)
    34e4:	ldrb	r2, [r1, #3]
    34e6:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    34e8:	lsls	r5, r2, #24
    34ea:	bmi.n	351a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    34ec:	lsls	r2, r2, #25
    34ee:	bpl.n	350c <uart1_status_isr+0x90>
    34f0:	ldr	r3, [pc, #108]	; (3560 <uart1_status_isr+0xe4>)
    34f2:	ldrb	r3, [r3, #4]
    34f4:	lsls	r3, r3, #25
    34f6:	bpl.n	350c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    34f8:	ldr	r3, [pc, #120]	; (3574 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    34fa:	ldr	r1, [pc, #124]	; (3578 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    34fc:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    34fe:	movs	r2, #0
    3500:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3502:	cbz	r3, 3506 <uart1_status_isr+0x8a>
    3504:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3506:	ldr	r3, [pc, #88]	; (3560 <uart1_status_isr+0xe4>)
    3508:	movs	r2, #60	; 0x3c
    350a:	strb	r2, [r3, #3]
	}
}
    350c:	pop	{r4, r5, r6, r7}
    350e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3510:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3512:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3514:	strb	r2, [r3, #17]
			__enable_irq();
    3516:	cpsie	i
    3518:	b.n	34e2 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    351a:	ldrb	r3, [r1, #4]
    351c:	lsls	r4, r3, #24
    351e:	bpl.n	34ec <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3520:	ldr	r3, [pc, #88]	; (357c <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3522:	ldr	r6, [pc, #92]	; (3580 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3524:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3526:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3528:	uxtb	r4, r4
		tail = tx_buffer_tail;
    352a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    352c:	cmp	r4, r3
    352e:	beq.n	354e <uart1_status_isr+0xd2>
    3530:	ldr	r5, [pc, #80]	; (3584 <uart1_status_isr+0x108>)
    3532:	b.n	3538 <uart1_status_isr+0xbc>
    3534:	cmp	r3, r4
    3536:	beq.n	354e <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3538:	adds	r3, #1
    353a:	cmp	r3, #40	; 0x28
    353c:	it	cs
    353e:	movcs	r3, #0
			avail = UART1_S1;
    3540:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3542:	ldrb	r0, [r5, r3]
    3544:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3546:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3548:	ldrb	r0, [r1, #20]
    354a:	cmp	r0, #7
    354c:	bls.n	3534 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    354e:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3550:	ldr	r1, [pc, #12]	; (3560 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3552:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3554:	ldrb	r3, [r1, #4]
    3556:	lsls	r0, r3, #24
    3558:	itt	mi
    355a:	movmi	r3, #124	; 0x7c
    355c:	strbmi	r3, [r1, #3]
    355e:	b.n	34ec <uart1_status_isr+0x70>
    3560:	.word	0x4006b000
    3564:	.word	0x1fff181c
    3568:	.word	0x1fff17b1
    356c:	.word	0x1fff17dc
    3570:	.word	0x1fff17ac
    3574:	.word	0x1fff1820
    3578:	.word	0x1fff17b0
    357c:	.word	0x1fff1824
    3580:	.word	0x1fff181d
    3584:	.word	0x1fff17b4

00003588 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3588:	ldr	r2, [pc, #20]	; (35a0 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    358a:	ldr	r3, [pc, #24]	; (35a4 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    358c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    358e:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3590:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3592:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3594:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3596:	it	cc
    3598:	addcc	r0, #64	; 0x40
    359a:	subs	r0, r0, r3
}
    359c:	bx	lr
    359e:	nop
    35a0:	.word	0x1fff182c
    35a4:	.word	0x1fff182d

000035a8 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    35a8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    35aa:	ldr	r3, [pc, #172]	; (3658 <uart3_status_isr+0xb0>)
    35ac:	ldrb	r2, [r3, #4]
    35ae:	lsls	r4, r2, #26
    35b0:	bpl.n	35f2 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    35b2:	ldr	r0, [pc, #168]	; (365c <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    35b4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    35b6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    35b8:	ldr	r1, [pc, #164]	; (3660 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    35ba:	adds	r3, #1
    35bc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    35be:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    35c0:	it	gt
    35c2:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    35c4:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    35c6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    35c8:	beq.n	35d2 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    35ca:	ldr	r4, [pc, #152]	; (3664 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    35cc:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    35ce:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    35d0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    35d2:	ldr	r2, [pc, #148]	; (3668 <uart3_status_isr+0xc0>)
    35d4:	ldr	r1, [r2, #0]
    35d6:	cbz	r1, 35f2 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    35d8:	ldr	r2, [pc, #144]	; (366c <uart3_status_isr+0xc4>)
    35da:	ldrb	r2, [r2, #0]
    35dc:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    35de:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    35e0:	itet	cc
    35e2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    35e6:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    35e8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    35ea:	cmp	r3, #39	; 0x27
    35ec:	itt	gt
    35ee:	movgt	r3, #1
    35f0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    35f2:	ldr	r2, [pc, #100]	; (3658 <uart3_status_isr+0xb0>)
    35f4:	ldrb	r3, [r2, #3]
    35f6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    35f8:	lsls	r0, r3, #24
    35fa:	bmi.n	3620 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    35fc:	lsls	r2, r3, #25
    35fe:	bpl.n	361c <uart3_status_isr+0x74>
    3600:	ldr	r3, [pc, #84]	; (3658 <uart3_status_isr+0xb0>)
    3602:	ldrb	r3, [r3, #4]
    3604:	lsls	r3, r3, #25
    3606:	bpl.n	361c <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3608:	ldr	r3, [pc, #100]	; (3670 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    360a:	ldr	r1, [pc, #104]	; (3674 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    360c:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    360e:	movs	r2, #0
    3610:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3612:	cbz	r3, 3616 <uart3_status_isr+0x6e>
    3614:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3616:	ldr	r3, [pc, #64]	; (3658 <uart3_status_isr+0xb0>)
    3618:	movs	r2, #44	; 0x2c
    361a:	strb	r2, [r3, #3]
	}
}
    361c:	pop	{r4, r5}
    361e:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3620:	ldrb	r1, [r2, #4]
    3622:	lsls	r1, r1, #24
    3624:	bpl.n	35fc <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3626:	ldr	r1, [pc, #80]	; (3678 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3628:	ldr	r0, [pc, #64]	; (366c <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    362a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    362c:	ldrb	r1, [r0, #0]
    362e:	uxtb	r1, r1
		if (head == tail) {
    3630:	cmp	r4, r1
    3632:	beq.n	3650 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3634:	adds	r2, r1, #1
    3636:	cmp	r2, #39	; 0x27
    3638:	itt	hi
    363a:	movhi	r1, #0
    363c:	movhi	r2, r1
			n = tx_buffer[tail];
    363e:	ldr	r5, [pc, #60]	; (367c <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3640:	ldr	r4, [pc, #20]	; (3658 <uart3_status_isr+0xb0>)
    3642:	it	ls
    3644:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3646:	ldrb	r2, [r5, r2]
    3648:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    364a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    364c:	strb	r1, [r0, #0]
    364e:	b.n	35fc <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3650:	movs	r1, #108	; 0x6c
    3652:	strb	r1, [r2, #3]
    3654:	b.n	35fc <uart3_status_isr+0x54>
    3656:	nop
    3658:	.word	0x4006d000
    365c:	.word	0x1fff182c
    3660:	.word	0x1fff182d
    3664:	.word	0x1fff1858
    3668:	.word	0x1fff1828
    366c:	.word	0x1fff1899
    3670:	.word	0x1fff189c
    3674:	.word	0x1fff1898
    3678:	.word	0x1fff18a0
    367c:	.word	0x1fff1830

00003680 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3680:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3682:	ldr	r4, [pc, #64]	; (36c4 <fault_isr+0x44>)
    3684:	b.n	3698 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3686:	ldr	r3, [r4, #0]
    3688:	lsls	r1, r3, #21
    368a:	bmi.n	36a8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    368c:	ldr	r3, [r4, #0]
    368e:	lsls	r2, r3, #20
    3690:	bmi.n	36b2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3692:	ldr	r3, [r4, #0]
    3694:	lsls	r3, r3, #19
    3696:	bmi.n	36bc <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3698:	ldr	r3, [r4, #0]
    369a:	lsls	r0, r3, #13
    369c:	bpl.n	3686 <fault_isr+0x6>
    369e:	bl	26a8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    36a2:	ldr	r3, [r4, #0]
    36a4:	lsls	r1, r3, #21
    36a6:	bpl.n	368c <fault_isr+0xc>
    36a8:	bl	3794 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    36ac:	ldr	r3, [r4, #0]
    36ae:	lsls	r2, r3, #20
    36b0:	bpl.n	3692 <fault_isr+0x12>
    36b2:	bl	347c <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    36b6:	ldr	r3, [r4, #0]
    36b8:	lsls	r3, r3, #19
    36ba:	bpl.n	3698 <fault_isr+0x18>
    36bc:	bl	3a94 <uart2_status_isr>
    36c0:	b.n	3698 <fault_isr+0x18>
    36c2:	nop
    36c4:	.word	0x40048034

000036c8 <unused_isr>:
	}
}

void unused_isr(void)
{
    36c8:	push	{r3, lr}
	fault_isr();
    36ca:	bl	3680 <fault_isr>
    36ce:	nop

000036d0 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    36d0:	ldr	r3, [pc, #4]	; (36d8 <startup_early_hook+0x8>)
    36d2:	movs	r2, #16
    36d4:	strh	r2, [r3, #0]
    36d6:	bx	lr
    36d8:	.word	0x40052000

000036dc <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    36dc:	bx	lr
    36de:	nop

000036e0 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    36e0:	ldr	r1, [pc, #36]	; (3708 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    36e2:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    36e4:	ldr	r3, [r1, #0]
	if (incr != 0) {
    36e6:	cbz	r0, 36f6 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    36e8:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    36ea:	add	r0, r3
    36ec:	sub.w	r2, r2, #8192	; 0x2000
    36f0:	cmp	r0, r2
    36f2:	bcs.n	36fa <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    36f4:	str	r0, [r1, #0]
	}
	return prev;
    36f6:	mov	r0, r3
}
    36f8:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    36fa:	bl	3d68 <__errno>
    36fe:	movs	r3, #12
    3700:	str	r3, [r0, #0]
			return (void *)-1;
    3702:	mov.w	r0, #4294967295
    3706:	pop	{r3, pc}
    3708:	.word	0x1fff0c58

0000370c <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    370c:	ldr	r2, [pc, #32]	; (3730 <kinetis_hsrun_disable+0x24>)
    370e:	ldrb	r3, [r2, #0]
    3710:	cmp	r3, #128	; 0x80
    3712:	beq.n	3718 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3714:	movs	r0, #0
}
    3716:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3718:	ldr	r1, [pc, #24]	; (3734 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    371a:	ldr	r3, [pc, #28]	; (3738 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    371c:	ldr	r0, [pc, #28]	; (373c <kinetis_hsrun_disable+0x30>)
    371e:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3720:	movs	r1, #0
    3722:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3724:	ldrb	r3, [r2, #0]
    3726:	cmp	r3, #128	; 0x80
    3728:	beq.n	3724 <kinetis_hsrun_disable+0x18>
		return 1;
    372a:	movs	r0, #1
    372c:	bx	lr
    372e:	nop
    3730:	.word	0x4007e003
    3734:	.word	0x40048044
    3738:	.word	0x4007e001
    373c:	.word	0x22280000

00003740 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3740:	ldr	r2, [pc, #36]	; (3768 <kinetis_hsrun_enable+0x28>)
    3742:	ldrb	r3, [r2, #0]
    3744:	cmp	r3, #1
    3746:	beq.n	374c <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3748:	movs	r0, #0
}
    374a:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    374c:	add.w	r3, r3, #1073741824	; 0x40000000
    3750:	add.w	r3, r3, #516096	; 0x7e000
    3754:	movs	r1, #96	; 0x60
    3756:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3758:	ldrb	r3, [r2, #0]
    375a:	cmp	r3, #128	; 0x80
    375c:	bne.n	3758 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    375e:	ldr	r3, [pc, #12]	; (376c <kinetis_hsrun_enable+0x2c>)
    3760:	ldr	r2, [pc, #12]	; (3770 <kinetis_hsrun_enable+0x30>)
    3762:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3764:	movs	r0, #1
    3766:	bx	lr
    3768:	.word	0x4007e003
    376c:	.word	0x40048044
    3770:	.word	0x02060000

00003774 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3774:	ldr	r2, [pc, #20]	; (378c <serial_available+0x18>)
	tail = rx_buffer_tail;
    3776:	ldr	r3, [pc, #24]	; (3790 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3778:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    377a:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    377c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    377e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3780:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3782:	it	cc
    3784:	addcc	r0, #64	; 0x40
    3786:	subs	r0, r0, r3
}
    3788:	bx	lr
    378a:	nop
    378c:	.word	0x1fff18a8
    3790:	.word	0x1fff18a9

00003794 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3794:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3796:	ldr	r3, [pc, #224]	; (3878 <uart0_status_isr+0xe4>)
    3798:	ldrb	r2, [r3, #4]
    379a:	tst.w	r2, #48	; 0x30
    379e:	beq.n	37fa <uart0_status_isr+0x66>
		__disable_irq();
    37a0:	cpsid	i
		avail = UART0_RCFIFO;
    37a2:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    37a4:	and.w	r2, r1, #255	; 0xff
    37a8:	cmp	r1, #0
    37aa:	beq.n	3828 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    37ac:	cpsie	i
			head = rx_buffer_head;
    37ae:	ldr	r7, [pc, #204]	; (387c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    37b0:	ldr	r1, [pc, #204]	; (3880 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    37b2:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    37b4:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    37b6:	ldr	r6, [pc, #204]	; (3884 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    37b8:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    37ba:	uxtb	r0, r0
			tail = rx_buffer_tail;
    37bc:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    37be:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    37c0:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    37c2:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    37c4:	it	cs
    37c6:	movcs	r3, #0
				if (newhead != tail) {
    37c8:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    37ca:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    37ce:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    37d0:	itt	ne
    37d2:	strbne	r1, [r6, r3]
    37d4:	movne	r0, r3
				}
			} while (--avail > 0);
    37d6:	ands.w	r2, r2, #255	; 0xff
    37da:	bne.n	37be <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    37dc:	ldr	r3, [pc, #168]	; (3888 <uart0_status_isr+0xf4>)
    37de:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    37e0:	uxtb	r2, r0
    37e2:	strb	r2, [r7, #0]
			if (rts_pin) {
    37e4:	cbz	r3, 37fa <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    37e6:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    37e8:	itet	cc
    37ea:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    37ee:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    37f0:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    37f2:	cmp	r0, #39	; 0x27
    37f4:	itt	gt
    37f6:	movgt	r2, #1
    37f8:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    37fa:	ldr	r1, [pc, #124]	; (3878 <uart0_status_isr+0xe4>)
    37fc:	ldrb	r2, [r1, #3]
    37fe:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3800:	lsls	r5, r2, #24
    3802:	bmi.n	3832 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3804:	lsls	r2, r2, #25
    3806:	bpl.n	3824 <uart0_status_isr+0x90>
    3808:	ldr	r3, [pc, #108]	; (3878 <uart0_status_isr+0xe4>)
    380a:	ldrb	r3, [r3, #4]
    380c:	lsls	r3, r3, #25
    380e:	bpl.n	3824 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3810:	ldr	r3, [pc, #120]	; (388c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3812:	ldr	r1, [pc, #124]	; (3890 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3814:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3816:	movs	r2, #0
    3818:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    381a:	cbz	r3, 381e <uart0_status_isr+0x8a>
    381c:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    381e:	ldr	r3, [pc, #88]	; (3878 <uart0_status_isr+0xe4>)
    3820:	movs	r2, #60	; 0x3c
    3822:	strb	r2, [r3, #3]
	}
}
    3824:	pop	{r4, r5, r6, r7}
    3826:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3828:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    382a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    382c:	strb	r2, [r3, #17]
			__enable_irq();
    382e:	cpsie	i
    3830:	b.n	37fa <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3832:	ldrb	r3, [r1, #4]
    3834:	lsls	r4, r3, #24
    3836:	bpl.n	3804 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3838:	ldr	r3, [pc, #88]	; (3894 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    383a:	ldr	r6, [pc, #92]	; (3898 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    383c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    383e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3840:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3842:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3844:	cmp	r4, r3
    3846:	beq.n	3866 <uart0_status_isr+0xd2>
    3848:	ldr	r5, [pc, #80]	; (389c <uart0_status_isr+0x108>)
    384a:	b.n	3850 <uart0_status_isr+0xbc>
    384c:	cmp	r3, r4
    384e:	beq.n	3866 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3850:	adds	r3, #1
    3852:	cmp	r3, #64	; 0x40
    3854:	it	cs
    3856:	movcs	r3, #0
			avail = UART0_S1;
    3858:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    385a:	ldrb	r0, [r5, r3]
    385c:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    385e:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3860:	ldrb	r0, [r1, #20]
    3862:	cmp	r0, #7
    3864:	bls.n	384c <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3866:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3868:	ldr	r1, [pc, #12]	; (3878 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    386a:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    386c:	ldrb	r3, [r1, #4]
    386e:	lsls	r0, r3, #24
    3870:	itt	mi
    3872:	movmi	r3, #124	; 0x7c
    3874:	strbmi	r3, [r1, #3]
    3876:	b.n	3804 <uart0_status_isr+0x70>
    3878:	.word	0x4006a000
    387c:	.word	0x1fff18a8
    3880:	.word	0x1fff18a9
    3884:	.word	0x1fff18ec
    3888:	.word	0x1fff18a4
    388c:	.word	0x1fff1930
    3890:	.word	0x1fff192c
    3894:	.word	0x1fff1934
    3898:	.word	0x1fff192d
    389c:	.word	0x1fff18ac

000038a0 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38a0:	ldr	r2, [pc, #20]	; (38b8 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    38a2:	ldr	r3, [pc, #24]	; (38bc <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38a4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    38a6:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38a8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    38aa:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    38ac:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    38ae:	it	cc
    38b0:	addcc	r0, #64	; 0x40
    38b2:	subs	r0, r0, r3
}
    38b4:	bx	lr
    38b6:	nop
    38b8:	.word	0x1fff193c
    38bc:	.word	0x1fff193d

000038c0 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    38c0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    38c2:	ldr	r3, [pc, #176]	; (3974 <lpuart0_status_isr+0xb4>)
    38c4:	ldr	r2, [r3, #4]
    38c6:	lsls	r4, r2, #10
    38c8:	bpl.n	390a <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    38ca:	ldr	r0, [pc, #172]	; (3978 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    38cc:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    38ce:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38d0:	ldr	r1, [pc, #168]	; (397c <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    38d2:	adds	r3, #1
    38d4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38d6:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    38d8:	it	gt
    38da:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    38dc:	cmp	r3, r1
    38de:	beq.n	38ea <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    38e0:	ldr	r4, [pc, #156]	; (3980 <lpuart0_status_isr+0xc0>)
    38e2:	uxtb	r2, r2
			rx_buffer_head = head;
    38e4:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    38e6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    38e8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    38ea:	ldr	r2, [pc, #152]	; (3984 <lpuart0_status_isr+0xc4>)
    38ec:	ldr	r1, [r2, #0]
    38ee:	cbz	r1, 390a <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    38f0:	ldr	r2, [pc, #148]	; (3988 <lpuart0_status_isr+0xc8>)
    38f2:	ldrb	r2, [r2, #0]
    38f4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    38f6:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    38f8:	itet	cc
    38fa:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    38fe:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3900:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3902:	cmp	r3, #39	; 0x27
    3904:	itt	gt
    3906:	movgt	r3, #1
    3908:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    390a:	ldr	r2, [pc, #104]	; (3974 <lpuart0_status_isr+0xb4>)
    390c:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    390e:	lsls	r0, r3, #8
    3910:	bpl.n	3918 <lpuart0_status_isr+0x58>
    3912:	ldr	r2, [r2, #4]
    3914:	lsls	r1, r2, #8
    3916:	bmi.n	393c <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3918:	lsls	r2, r3, #9
    391a:	bpl.n	3938 <lpuart0_status_isr+0x78>
    391c:	ldr	r3, [pc, #84]	; (3974 <lpuart0_status_isr+0xb4>)
    391e:	ldr	r3, [r3, #4]
    3920:	lsls	r3, r3, #9
    3922:	bpl.n	3938 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3924:	ldr	r3, [pc, #100]	; (398c <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3926:	ldr	r1, [pc, #104]	; (3990 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3928:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    392a:	movs	r2, #0
    392c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    392e:	cbz	r3, 3932 <lpuart0_status_isr+0x72>
    3930:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3932:	ldr	r3, [pc, #96]	; (3994 <lpuart0_status_isr+0xd4>)
    3934:	movs	r2, #0
    3936:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3938:	pop	{r4, r5}
    393a:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    393c:	ldr	r2, [pc, #88]	; (3998 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    393e:	ldr	r1, [pc, #72]	; (3988 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3940:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3942:	ldrb	r2, [r1, #0]
    3944:	uxtb	r2, r2
		if (head == tail) {
    3946:	cmp	r0, r2
    3948:	beq.n	3966 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    394a:	adds	r2, #1
    394c:	cmp	r2, #39	; 0x27
    394e:	itt	hi
    3950:	movhi	r0, #0
    3952:	movhi	r2, r0
			n = tx_buffer[tail];
    3954:	ldr	r5, [pc, #68]	; (399c <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3956:	ldr	r4, [pc, #28]	; (3974 <lpuart0_status_isr+0xb4>)
    3958:	it	ls
    395a:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    395c:	ldrb	r2, [r5, r2]
    395e:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3960:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3962:	strb	r0, [r1, #0]
    3964:	b.n	3918 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3966:	ldr	r0, [pc, #56]	; (39a0 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3968:	ldr	r2, [pc, #40]	; (3994 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    396a:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    396c:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    396e:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3970:	str	r1, [r2, #0]
    3972:	b.n	3918 <lpuart0_status_isr+0x58>
    3974:	.word	0x400c4000
    3978:	.word	0x1fff193c
    397c:	.word	0x1fff193d
    3980:	.word	0x1fff1968
    3984:	.word	0x1fff1938
    3988:	.word	0x1fff19a9
    398c:	.word	0x1fff19ac
    3990:	.word	0x1fff19a8
    3994:	.word	0x43880158
    3998:	.word	0x1fff19b0
    399c:	.word	0x1fff1940
    39a0:	.word	0x4388015c

000039a4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    39a4:	push	{r4, lr}
    39a6:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    39a8:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    39aa:	bl	370c <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    39ae:	ldr	r2, [pc, #96]	; (3a10 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    39b0:	ldr	r3, [pc, #96]	; (3a14 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    39b2:	ldr	r1, [pc, #100]	; (3a18 <usb_init_serialnumber+0x74>)
    39b4:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    39b6:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    39b8:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    39ba:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    39bc:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    39be:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    39c0:	ldrb	r3, [r2, #0]
    39c2:	lsls	r3, r3, #24
    39c4:	bpl.n	39c0 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    39c6:	ldr	r3, [pc, #84]	; (3a1c <usb_init_serialnumber+0x78>)
    39c8:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    39ca:	bl	3740 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    39ce:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    39d0:	ldr	r3, [pc, #76]	; (3a20 <usb_init_serialnumber+0x7c>)
    39d2:	cmp	r4, r3
    39d4:	itt	ls
    39d6:	addls.w	r4, r4, r4, lsl #2
    39da:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    39dc:	mov	r0, r4
    39de:	ldr	r4, [pc, #68]	; (3a24 <usb_init_serialnumber+0x80>)
    39e0:	add	r1, sp, #4
    39e2:	movs	r2, #10
    39e4:	bl	3a28 <ultoa>
    39e8:	add	r1, sp, #4
    39ea:	mov	r0, r4
	for (i=0; i<10; i++) {
    39ec:	movs	r3, #0
		char c = buf[i];
    39ee:	ldrb.w	r2, [r1], #1
    39f2:	adds	r3, #1
		if (!c) break;
    39f4:	cbz	r2, 3a06 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    39f6:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    39f8:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    39fc:	bne.n	39ee <usb_init_serialnumber+0x4a>
    39fe:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3a00:	strb	r3, [r4, #0]
}
    3a02:	add	sp, #16
    3a04:	pop	{r4, pc}
    3a06:	lsls	r3, r3, #1
    3a08:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3a0a:	strb	r3, [r4, #0]
}
    3a0c:	add	sp, #16
    3a0e:	pop	{r4, pc}
    3a10:	.word	0x40020004
    3a14:	.word	0x40020000
    3a18:	.word	0x41070000
    3a1c:	.word	0x4002000c
    3a20:	.word	0x0098967f
    3a24:	.word	0x1fff0d3c

00003a28 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3a28:	push	{r4, r5, r6, r7}
    3a2a:	subs	r5, r1, #1
    3a2c:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3a2e:	movs	r4, #0
    3a30:	b.n	3a34 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3a32:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3a34:	udiv	r3, r0, r2
    3a38:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3a3c:	cmp	r0, #9
    3a3e:	add.w	r7, r0, #48	; 0x30
    3a42:	itet	hi
    3a44:	addhi	r0, #55	; 0x37
    3a46:	uxtbls	r0, r7
    3a48:	uxtbhi	r0, r0
    3a4a:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3a4e:	mov	r0, r3
    3a50:	cmp	r3, #0
    3a52:	bne.n	3a32 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3a54:	adds	r2, r1, r4
    3a56:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3a58:	cbz	r4, 3a6e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3a5a:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3a5c:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3a60:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3a62:	adds	r3, #1
    3a64:	subs	r0, r4, r3
    3a66:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3a68:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3a6c:	blt.n	3a5a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3a6e:	mov	r0, r1
    3a70:	pop	{r4, r5, r6, r7}
    3a72:	bx	lr

00003a74 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a74:	ldr	r2, [pc, #20]	; (3a8c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3a76:	ldr	r3, [pc, #24]	; (3a90 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a78:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3a7a:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a7c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3a7e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3a80:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3a82:	it	cc
    3a84:	addcc	r0, #64	; 0x40
    3a86:	subs	r0, r0, r3
}
    3a88:	bx	lr
    3a8a:	nop
    3a8c:	.word	0x1fff19b8
    3a90:	.word	0x1fff19b9

00003a94 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3a94:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3a96:	ldr	r3, [pc, #172]	; (3b44 <uart2_status_isr+0xb0>)
    3a98:	ldrb	r2, [r3, #4]
    3a9a:	lsls	r4, r2, #26
    3a9c:	bpl.n	3ade <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3a9e:	ldr	r0, [pc, #168]	; (3b48 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3aa0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3aa2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3aa4:	ldr	r1, [pc, #164]	; (3b4c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3aa6:	adds	r3, #1
    3aa8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3aaa:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3aac:	it	gt
    3aae:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ab0:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3ab2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ab4:	beq.n	3abe <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3ab6:	ldr	r4, [pc, #152]	; (3b50 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3ab8:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3aba:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3abc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3abe:	ldr	r2, [pc, #148]	; (3b54 <uart2_status_isr+0xc0>)
    3ac0:	ldr	r1, [r2, #0]
    3ac2:	cbz	r1, 3ade <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3ac4:	ldr	r2, [pc, #144]	; (3b58 <uart2_status_isr+0xc4>)
    3ac6:	ldrb	r2, [r2, #0]
    3ac8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3aca:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3acc:	itet	cc
    3ace:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3ad2:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3ad4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ad6:	cmp	r3, #39	; 0x27
    3ad8:	itt	gt
    3ada:	movgt	r3, #1
    3adc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3ade:	ldr	r2, [pc, #100]	; (3b44 <uart2_status_isr+0xb0>)
    3ae0:	ldrb	r3, [r2, #3]
    3ae2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3ae4:	lsls	r0, r3, #24
    3ae6:	bmi.n	3b0c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3ae8:	lsls	r2, r3, #25
    3aea:	bpl.n	3b08 <uart2_status_isr+0x74>
    3aec:	ldr	r3, [pc, #84]	; (3b44 <uart2_status_isr+0xb0>)
    3aee:	ldrb	r3, [r3, #4]
    3af0:	lsls	r3, r3, #25
    3af2:	bpl.n	3b08 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3af4:	ldr	r3, [pc, #100]	; (3b5c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3af6:	ldr	r1, [pc, #104]	; (3b60 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3af8:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3afa:	movs	r2, #0
    3afc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3afe:	cbz	r3, 3b02 <uart2_status_isr+0x6e>
    3b00:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3b02:	ldr	r3, [pc, #64]	; (3b44 <uart2_status_isr+0xb0>)
    3b04:	movs	r2, #44	; 0x2c
    3b06:	strb	r2, [r3, #3]
	}
}
    3b08:	pop	{r4, r5}
    3b0a:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3b0c:	ldrb	r1, [r2, #4]
    3b0e:	lsls	r1, r1, #24
    3b10:	bpl.n	3ae8 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3b12:	ldr	r1, [pc, #80]	; (3b64 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3b14:	ldr	r0, [pc, #64]	; (3b58 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3b16:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3b18:	ldrb	r1, [r0, #0]
    3b1a:	uxtb	r1, r1
		if (head == tail) {
    3b1c:	cmp	r4, r1
    3b1e:	beq.n	3b3c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3b20:	adds	r2, r1, #1
    3b22:	cmp	r2, #39	; 0x27
    3b24:	itt	hi
    3b26:	movhi	r1, #0
    3b28:	movhi	r2, r1
			n = tx_buffer[tail];
    3b2a:	ldr	r5, [pc, #60]	; (3b68 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3b2c:	ldr	r4, [pc, #20]	; (3b44 <uart2_status_isr+0xb0>)
    3b2e:	it	ls
    3b30:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3b32:	ldrb	r2, [r5, r2]
    3b34:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3b36:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3b38:	strb	r1, [r0, #0]
    3b3a:	b.n	3ae8 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3b3c:	movs	r1, #108	; 0x6c
    3b3e:	strb	r1, [r2, #3]
    3b40:	b.n	3ae8 <uart2_status_isr+0x54>
    3b42:	nop
    3b44:	.word	0x4006c000
    3b48:	.word	0x1fff19b8
    3b4c:	.word	0x1fff19b9
    3b50:	.word	0x1fff19e4
    3b54:	.word	0x1fff19b4
    3b58:	.word	0x1fff1a25
    3b5c:	.word	0x1fff1a28
    3b60:	.word	0x1fff1a24
    3b64:	.word	0x1fff1a2c
    3b68:	.word	0x1fff19bc

00003b6c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3b6c:	bx	lr
    3b6e:	nop

00003b70 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3b70:	bx	lr
    3b72:	nop

00003b74 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3b74:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3b76:	mrs	r2, PRIMASK
		__disable_irq();
    3b7a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3b7c:	ldrb	r3, [r0, #29]
    3b7e:	cbnz	r3, 3b8e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3b80:	ldrb	r1, [r0, #28]
    3b82:	cmp	r1, #1
    3b84:	beq.n	3b98 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3b86:	cmp	r1, #3
    3b88:	beq.n	3bac <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3b8a:	movs	r3, #1
    3b8c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3b8e:	cbnz	r2, 3b92 <EventResponder::triggerEventNotImmediate()+0x1e>
    3b90:	cpsie	i
	}
	enableInterrupts(irq);
}
    3b92:	ldr.w	r4, [sp], #4
    3b96:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3b98:	ldr	r4, [pc, #68]	; (3be0 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3b9a:	ldr	r1, [r4, #0]
    3b9c:	cbz	r1, 3bc8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3b9e:	ldr	r1, [pc, #68]	; (3be4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3ba0:	str	r3, [r0, #20]
				_prev = lastYield;
    3ba2:	ldr	r3, [r1, #0]
    3ba4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3ba6:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3ba8:	str	r0, [r3, #20]
    3baa:	b.n	3b8a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3bac:	ldr	r4, [pc, #56]	; (3be8 <EventResponder::triggerEventNotImmediate()+0x74>)
    3bae:	ldr	r1, [r4, #0]
    3bb0:	cbz	r1, 3bd4 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3bb2:	ldr	r1, [pc, #56]	; (3bec <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3bb4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3bb6:	ldr	r3, [r1, #0]
    3bb8:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3bba:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3bbc:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3bbe:	ldr	r3, [pc, #48]	; (3bf0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3bc0:	mov.w	r1, #268435456	; 0x10000000
    3bc4:	str	r1, [r3, #0]
    3bc6:	b.n	3b8a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3bc8:	ldr	r3, [pc, #24]	; (3be4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3bca:	str	r1, [r0, #20]
				_prev = nullptr;
    3bcc:	str	r1, [r0, #24]
				firstYield = this;
    3bce:	str	r0, [r4, #0]
				lastYield = this;
    3bd0:	str	r0, [r3, #0]
    3bd2:	b.n	3b8a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3bd4:	ldr	r3, [pc, #20]	; (3bec <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3bd6:	str	r1, [r0, #20]
				_prev = nullptr;
    3bd8:	str	r1, [r0, #24]
				firstInterrupt = this;
    3bda:	str	r0, [r4, #0]
				lastInterrupt = this;
    3bdc:	str	r0, [r3, #0]
    3bde:	b.n	3bbe <EventResponder::triggerEventNotImmediate()+0x4a>
    3be0:	.word	0x1fff1a40
    3be4:	.word	0x1fff1a3c
    3be8:	.word	0x1fff1a30
    3bec:	.word	0x1fff1a34
    3bf0:	.word	0xe000ed04

00003bf4 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3bf4:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3bf6:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3bf8:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3bfa:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3bfc:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3bfe:	beq.n	3c08 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3c00:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3c04:	b.w	3b74 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3c08:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3c0a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3c0e:	bx	r3

00003c10 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3c10:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3c12:	mrs	r2, PRIMASK
		__disable_irq();
    3c16:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3c18:	ldr	r4, [pc, #48]	; (3c4c <EventResponder::runFromInterrupt()+0x3c>)
    3c1a:	ldr	r0, [r4, #0]
		if (first) {
    3c1c:	cbz	r0, 3c40 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3c1e:	ldr	r6, [pc, #48]	; (3c50 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3c20:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3c22:	ldr	r3, [r0, #20]
    3c24:	str	r3, [r4, #0]
			if (firstInterrupt) {
    3c26:	cbz	r3, 3c46 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3c28:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3c2a:	cbnz	r2, 3c2e <EventResponder::runFromInterrupt()+0x1e>
    3c2c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3c2e:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3c30:	ldr	r3, [r0, #8]
    3c32:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3c34:	mrs	r2, PRIMASK
		__disable_irq();
    3c38:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3c3a:	ldr	r0, [r4, #0]
		if (first) {
    3c3c:	cmp	r0, #0
    3c3e:	bne.n	3c22 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3c40:	cbnz	r2, 3c44 <EventResponder::runFromInterrupt()+0x34>
    3c42:	cpsie	i
    3c44:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3c46:	str	r3, [r6, #0]
    3c48:	b.n	3c2a <EventResponder::runFromInterrupt()+0x1a>
    3c4a:	nop
    3c4c:	.word	0x1fff1a30
    3c50:	.word	0x1fff1a34

00003c54 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3c54:	b.w	3c10 <EventResponder::runFromInterrupt()>

00003c58 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3c58:	ldr	r2, [pc, #96]	; (3cbc <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3c5a:	push	{r4, r5}
	if (listActive == nullptr) {
    3c5c:	ldr	r4, [r2, #0]
    3c5e:	cmp	r4, #0
    3c60:	beq.n	3cb2 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3c62:	ldr	r3, [r0, #0]
    3c64:	ldr	r1, [r4, #0]
    3c66:	cmp	r3, r1
    3c68:	bcs.n	3c88 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3c6a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3c6c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3c6e:	str	r4, [r0, #8]
		_prev = nullptr;
    3c70:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3c72:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3c74:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3c76:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3c78:	movs	r3, #2
    3c7a:	strb	r3, [r0, #20]
}
    3c7c:	pop	{r4, r5}
    3c7e:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3c80:	ldr	r1, [r2, #0]
    3c82:	cmp	r3, r1
    3c84:	mov	r4, r2
    3c86:	bcc.n	3c9a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3c88:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3c8a:	subs	r3, r3, r1
    3c8c:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3c8e:	cmp	r2, #0
    3c90:	bne.n	3c80 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3c92:	str	r2, [r0, #8]
		_prev = timer;
    3c94:	str	r4, [r0, #12]
		timer->_next = this;
    3c96:	str	r0, [r4, #8]
    3c98:	b.n	3c78 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3c9a:	ldr	r2, [r2, #12]
    3c9c:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3c9e:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3ca0:	str	r0, [r4, #12]
				_prev->_next = this;
    3ca2:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3ca4:	subs	r3, r1, r3
				_state = TimerActive;
    3ca6:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    3ca8:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    3caa:	str	r3, [r4, #0]
				_state = TimerActive;
    3cac:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3cae:	pop	{r4, r5}
    3cb0:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3cb2:	str	r4, [r0, #8]
		_prev = nullptr;
    3cb4:	str	r4, [r0, #12]
		listActive = this;
    3cb6:	str	r0, [r2, #0]
    3cb8:	b.n	3c78 <MillisTimer::addToActiveList()+0x20>
    3cba:	nop
    3cbc:	.word	0x1fff1a38

00003cc0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3cc0:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3cc2:	ldr	r6, [pc, #136]	; (3d4c <MillisTimer::runFromTimer()+0x8c>)
    3cc4:	ldr	r4, [r6, #0]
	while (timer) {
    3cc6:	cbz	r4, 3d14 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3cc8:	ldr	r3, [r4, #0]
    3cca:	cmp	r3, #0
    3ccc:	bne.n	3d44 <MillisTimer::runFromTimer()+0x84>
    3cce:	ldr	r7, [pc, #128]	; (3d50 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3cd0:	mov	r5, r3
    3cd2:	b.n	3cde <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3cd4:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3cd6:	cbz	r4, 3d14 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3cd8:	ldr	r3, [r4, #0]
    3cda:	cmp	r3, #0
    3cdc:	bne.n	3d44 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3cde:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3ce0:	cbz	r3, 3ce4 <MillisTimer::runFromTimer()+0x24>
    3ce2:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3ce4:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3ce6:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3ce8:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3cea:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3cec:	ldr	r3, [r3, #0]
    3cee:	cmp	r3, r7
    3cf0:	bne.n	3d36 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3cf2:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3cf4:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3cf6:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3cf8:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3cfa:	beq.n	3d3e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3cfc:	bl	3b74 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3d00:	ldr	r3, [r4, #4]
    3d02:	cmp	r3, #0
    3d04:	beq.n	3cd4 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3d06:	str	r3, [r4, #0]
				timer->addToActiveList();
    3d08:	mov	r0, r4
    3d0a:	bl	3c58 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3d0e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3d10:	cmp	r4, #0
    3d12:	bne.n	3cd8 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d14:	mrs	r3, PRIMASK
		__disable_irq();
    3d18:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3d1a:	ldr	r2, [pc, #56]	; (3d54 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3d1c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3d1e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3d20:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3d22:	cbnz	r3, 3d26 <MillisTimer::runFromTimer()+0x66>
    3d24:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3d26:	cbz	r0, 3d34 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3d28:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3d2a:	bl	3c58 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3d2e:	mov	r0, r4
    3d30:	cmp	r0, #0
    3d32:	bne.n	3d28 <MillisTimer::runFromTimer()+0x68>
    3d34:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3d36:	mov	r2, r4
    3d38:	movs	r1, #0
    3d3a:	blx	r3
    3d3c:	b.n	3d00 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3d3e:	ldr	r3, [r0, #8]
    3d40:	blx	r3
    3d42:	b.n	3d00 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3d44:	subs	r3, #1
    3d46:	str	r3, [r4, #0]
			break;
    3d48:	b.n	3d14 <MillisTimer::runFromTimer()+0x54>
    3d4a:	nop
    3d4c:	.word	0x1fff1a38
    3d50:	.word	0x00003bf5
    3d54:	.word	0x1fff1a48

00003d58 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    3d58:	ldr	r2, [pc, #8]	; (3d64 <systick_isr+0xc>)
    3d5a:	ldr	r3, [r2, #0]
    3d5c:	adds	r3, #1
    3d5e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3d60:	b.w	3cc0 <MillisTimer::runFromTimer()>
    3d64:	.word	0x1fff15cc

00003d68 <__errno>:
    3d68:	ldr	r3, [pc, #4]	; (3d70 <__errno+0x8>)
    3d6a:	ldr	r0, [r3, #0]
    3d6c:	bx	lr
    3d6e:	nop
    3d70:	.word	0x1fff1180

00003d74 <__libc_init_array>:
    3d74:	push	{r4, r5, r6, lr}
    3d76:	ldr	r6, [pc, #60]	; (3db4 <__libc_init_array+0x40>)
    3d78:	ldr	r5, [pc, #60]	; (3db8 <__libc_init_array+0x44>)
    3d7a:	subs	r6, r6, r5
    3d7c:	asrs	r6, r6, #2
    3d7e:	it	ne
    3d80:	movne	r4, #0
    3d82:	beq.n	3d90 <__libc_init_array+0x1c>
    3d84:	adds	r4, #1
    3d86:	ldr.w	r3, [r5], #4
    3d8a:	blx	r3
    3d8c:	cmp	r6, r4
    3d8e:	bne.n	3d84 <__libc_init_array+0x10>
    3d90:	ldr	r6, [pc, #40]	; (3dbc <__libc_init_array+0x48>)
    3d92:	ldr	r5, [pc, #44]	; (3dc0 <__libc_init_array+0x4c>)
    3d94:	subs	r6, r6, r5
    3d96:	bl	4b34 <_init>
    3d9a:	asrs	r6, r6, #2
    3d9c:	it	ne
    3d9e:	movne	r4, #0
    3da0:	beq.n	3db0 <__libc_init_array+0x3c>
    3da2:	adds	r4, #1
    3da4:	ldr.w	r3, [r5], #4
    3da8:	blx	r3
    3daa:	cmp	r6, r4
    3dac:	bne.n	3da2 <__libc_init_array+0x2e>
    3dae:	pop	{r4, r5, r6, pc}
    3db0:	pop	{r4, r5, r6, pc}
    3db2:	nop
    3db4:	.word	0x00004b40
    3db8:	.word	0x00004b40
    3dbc:	.word	0x00004b4c
    3dc0:	.word	0x00004b40

00003dc4 <malloc>:
    3dc4:	ldr	r3, [pc, #8]	; (3dd0 <malloc+0xc>)
    3dc6:	mov	r1, r0
    3dc8:	ldr	r0, [r3, #0]
    3dca:	b.w	3dd4 <_malloc_r>
    3dce:	nop
    3dd0:	.word	0x1fff1180

00003dd4 <_malloc_r>:
    3dd4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dd8:	add.w	r5, r1, #11
    3ddc:	cmp	r5, #22
    3dde:	sub	sp, #12
    3de0:	mov	r6, r0
    3de2:	bls.w	3f24 <_malloc_r+0x150>
    3de6:	bics.w	r5, r5, #7
    3dea:	bmi.w	3f6c <_malloc_r+0x198>
    3dee:	cmp	r1, r5
    3df0:	bhi.w	3f6c <_malloc_r+0x198>
    3df4:	bl	43e0 <__malloc_lock>
    3df8:	cmp.w	r5, #504	; 0x1f8
    3dfc:	bcc.w	4338 <_malloc_r+0x564>
    3e00:	lsrs	r3, r5, #9
    3e02:	beq.w	3f7a <_malloc_r+0x1a6>
    3e06:	cmp	r3, #4
    3e08:	bhi.w	4112 <_malloc_r+0x33e>
    3e0c:	lsrs	r0, r5, #6
    3e0e:	add.w	lr, r0, #57	; 0x39
    3e12:	mov.w	r3, lr, lsl #1
    3e16:	adds	r0, #56	; 0x38
    3e18:	ldr	r7, [pc, #784]	; (412c <_malloc_r+0x358>)
    3e1a:	add.w	r3, r7, r3, lsl #2
    3e1e:	sub.w	r1, r3, #8
    3e22:	ldr	r4, [r3, #4]
    3e24:	cmp	r1, r4
    3e26:	bne.n	3e38 <_malloc_r+0x64>
    3e28:	b.n	3f84 <_malloc_r+0x1b0>
    3e2a:	cmp	r2, #0
    3e2c:	bge.w	3f88 <_malloc_r+0x1b4>
    3e30:	ldr	r4, [r4, #12]
    3e32:	cmp	r1, r4
    3e34:	beq.w	3f84 <_malloc_r+0x1b0>
    3e38:	ldr	r3, [r4, #4]
    3e3a:	bic.w	r3, r3, #3
    3e3e:	subs	r2, r3, r5
    3e40:	cmp	r2, #15
    3e42:	ble.n	3e2a <_malloc_r+0x56>
    3e44:	ldr	r1, [pc, #740]	; (412c <_malloc_r+0x358>)
    3e46:	ldr	r4, [r7, #16]
    3e48:	add.w	lr, r1, #8
    3e4c:	cmp	r4, lr
    3e4e:	beq.w	41b8 <_malloc_r+0x3e4>
    3e52:	ldr	r3, [r4, #4]
    3e54:	bic.w	r3, r3, #3
    3e58:	subs	r2, r3, r5
    3e5a:	cmp	r2, #15
    3e5c:	bgt.w	4192 <_malloc_r+0x3be>
    3e60:	cmp	r2, #0
    3e62:	str.w	lr, [r1, #20]
    3e66:	str.w	lr, [r1, #16]
    3e6a:	bge.w	3faa <_malloc_r+0x1d6>
    3e6e:	cmp.w	r3, #512	; 0x200
    3e72:	bcs.w	4144 <_malloc_r+0x370>
    3e76:	lsrs	r3, r3, #3
    3e78:	add.w	ip, r3, #1
    3e7c:	movs	r2, #1
    3e7e:	asrs	r3, r3, #2
    3e80:	lsl.w	r3, r2, r3
    3e84:	ldr	r2, [r1, #4]
    3e86:	ldr.w	r8, [r1, ip, lsl #3]
    3e8a:	str.w	r8, [r4, #8]
    3e8e:	add.w	r9, r1, ip, lsl #3
    3e92:	orrs	r2, r3
    3e94:	sub.w	r3, r9, #8
    3e98:	str	r3, [r4, #12]
    3e9a:	str	r2, [r1, #4]
    3e9c:	str.w	r4, [r1, ip, lsl #3]
    3ea0:	str.w	r4, [r8, #12]
    3ea4:	asrs	r3, r0, #2
    3ea6:	movs	r4, #1
    3ea8:	lsls	r4, r3
    3eaa:	cmp	r4, r2
    3eac:	bhi.w	3fc4 <_malloc_r+0x1f0>
    3eb0:	tst	r4, r2
    3eb2:	bne.n	3ec2 <_malloc_r+0xee>
    3eb4:	bic.w	r0, r0, #3
    3eb8:	lsls	r4, r4, #1
    3eba:	tst	r4, r2
    3ebc:	add.w	r0, r0, #4
    3ec0:	beq.n	3eb8 <_malloc_r+0xe4>
    3ec2:	add.w	r9, r7, r0, lsl #3
    3ec6:	mov	ip, r9
    3ec8:	mov	r8, r0
    3eca:	ldr.w	r1, [ip, #12]
    3ece:	cmp	ip, r1
    3ed0:	bne.n	3ee2 <_malloc_r+0x10e>
    3ed2:	b.n	41bc <_malloc_r+0x3e8>
    3ed4:	cmp	r2, #0
    3ed6:	bge.w	41dc <_malloc_r+0x408>
    3eda:	ldr	r1, [r1, #12]
    3edc:	cmp	ip, r1
    3ede:	beq.w	41bc <_malloc_r+0x3e8>
    3ee2:	ldr	r3, [r1, #4]
    3ee4:	bic.w	r3, r3, #3
    3ee8:	subs	r2, r3, r5
    3eea:	cmp	r2, #15
    3eec:	ble.n	3ed4 <_malloc_r+0x100>
    3eee:	mov	r4, r1
    3ef0:	ldr.w	ip, [r1, #12]
    3ef4:	ldr.w	r8, [r4, #8]!
    3ef8:	adds	r3, r1, r5
    3efa:	orr.w	r5, r5, #1
    3efe:	str	r5, [r1, #4]
    3f00:	orr.w	r1, r2, #1
    3f04:	str.w	ip, [r8, #12]
    3f08:	mov	r0, r6
    3f0a:	str.w	r8, [ip, #8]
    3f0e:	str	r3, [r7, #20]
    3f10:	str	r3, [r7, #16]
    3f12:	str.w	lr, [r3, #12]
    3f16:	str.w	lr, [r3, #8]
    3f1a:	str	r1, [r3, #4]
    3f1c:	str	r2, [r3, r2]
    3f1e:	bl	43e4 <__malloc_unlock>
    3f22:	b.n	3f64 <_malloc_r+0x190>
    3f24:	cmp	r1, #16
    3f26:	bhi.n	3f6c <_malloc_r+0x198>
    3f28:	bl	43e0 <__malloc_lock>
    3f2c:	movs	r5, #16
    3f2e:	movs	r3, #6
    3f30:	movs	r0, #2
    3f32:	ldr	r7, [pc, #504]	; (412c <_malloc_r+0x358>)
    3f34:	add.w	r3, r7, r3, lsl #2
    3f38:	sub.w	r2, r3, #8
    3f3c:	ldr	r4, [r3, #4]
    3f3e:	cmp	r4, r2
    3f40:	beq.w	41ce <_malloc_r+0x3fa>
    3f44:	ldr	r3, [r4, #4]
    3f46:	ldr	r1, [r4, #12]
    3f48:	ldr	r5, [r4, #8]
    3f4a:	bic.w	r3, r3, #3
    3f4e:	add	r3, r4
    3f50:	mov	r0, r6
    3f52:	ldr	r2, [r3, #4]
    3f54:	str	r1, [r5, #12]
    3f56:	orr.w	r2, r2, #1
    3f5a:	str	r5, [r1, #8]
    3f5c:	str	r2, [r3, #4]
    3f5e:	bl	43e4 <__malloc_unlock>
    3f62:	adds	r4, #8
    3f64:	mov	r0, r4
    3f66:	add	sp, #12
    3f68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f6c:	movs	r4, #0
    3f6e:	movs	r3, #12
    3f70:	mov	r0, r4
    3f72:	str	r3, [r6, #0]
    3f74:	add	sp, #12
    3f76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f7a:	movs	r3, #128	; 0x80
    3f7c:	mov.w	lr, #64	; 0x40
    3f80:	movs	r0, #63	; 0x3f
    3f82:	b.n	3e18 <_malloc_r+0x44>
    3f84:	mov	r0, lr
    3f86:	b.n	3e44 <_malloc_r+0x70>
    3f88:	add	r3, r4
    3f8a:	ldr	r1, [r4, #12]
    3f8c:	ldr	r2, [r3, #4]
    3f8e:	ldr	r5, [r4, #8]
    3f90:	orr.w	r2, r2, #1
    3f94:	str	r1, [r5, #12]
    3f96:	mov	r0, r6
    3f98:	str	r5, [r1, #8]
    3f9a:	str	r2, [r3, #4]
    3f9c:	bl	43e4 <__malloc_unlock>
    3fa0:	adds	r4, #8
    3fa2:	mov	r0, r4
    3fa4:	add	sp, #12
    3fa6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3faa:	add	r3, r4
    3fac:	mov	r0, r6
    3fae:	ldr	r2, [r3, #4]
    3fb0:	orr.w	r2, r2, #1
    3fb4:	str	r2, [r3, #4]
    3fb6:	bl	43e4 <__malloc_unlock>
    3fba:	adds	r4, #8
    3fbc:	mov	r0, r4
    3fbe:	add	sp, #12
    3fc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fc4:	ldr	r4, [r7, #8]
    3fc6:	ldr	r3, [r4, #4]
    3fc8:	bic.w	r8, r3, #3
    3fcc:	cmp	r8, r5
    3fce:	bcc.n	3fda <_malloc_r+0x206>
    3fd0:	rsb	r3, r5, r8
    3fd4:	cmp	r3, #15
    3fd6:	bgt.w	40f2 <_malloc_r+0x31e>
    3fda:	ldr	r3, [pc, #340]	; (4130 <_malloc_r+0x35c>)
    3fdc:	ldr.w	r9, [pc, #352]	; 4140 <_malloc_r+0x36c>
    3fe0:	ldr	r2, [r3, #0]
    3fe2:	ldr.w	r3, [r9]
    3fe6:	adds	r3, #1
    3fe8:	add	r2, r5
    3fea:	add.w	sl, r4, r8
    3fee:	beq.w	42b2 <_malloc_r+0x4de>
    3ff2:	add.w	r2, r2, #4096	; 0x1000
    3ff6:	adds	r2, #15
    3ff8:	bic.w	r2, r2, #4080	; 0xff0
    3ffc:	bic.w	r2, r2, #15
    4000:	mov	r1, r2
    4002:	mov	r0, r6
    4004:	str	r2, [sp, #4]
    4006:	bl	43e8 <_sbrk_r>
    400a:	cmp.w	r0, #4294967295
    400e:	mov	fp, r0
    4010:	ldr	r2, [sp, #4]
    4012:	beq.w	42c6 <_malloc_r+0x4f2>
    4016:	cmp	sl, r0
    4018:	bhi.w	4214 <_malloc_r+0x440>
    401c:	ldr	r3, [pc, #276]	; (4134 <_malloc_r+0x360>)
    401e:	ldr	r1, [r3, #0]
    4020:	cmp	sl, fp
    4022:	add	r1, r2
    4024:	str	r1, [r3, #0]
    4026:	beq.w	42d0 <_malloc_r+0x4fc>
    402a:	ldr.w	r0, [r9]
    402e:	ldr.w	lr, [pc, #272]	; 4140 <_malloc_r+0x36c>
    4032:	adds	r0, #1
    4034:	ittet	ne
    4036:	rsbne	sl, sl, fp
    403a:	addne	r1, sl
    403c:	streq.w	fp, [lr]
    4040:	strne	r1, [r3, #0]
    4042:	ands.w	r1, fp, #7
    4046:	beq.w	4278 <_malloc_r+0x4a4>
    404a:	rsb	r0, r1, #8
    404e:	rsb	r1, r1, #4096	; 0x1000
    4052:	add	fp, r0
    4054:	adds	r1, #8
    4056:	add	r2, fp
    4058:	ubfx	r2, r2, #0, #12
    405c:	rsb	r9, r2, r1
    4060:	mov	r1, r9
    4062:	mov	r0, r6
    4064:	str	r3, [sp, #4]
    4066:	bl	43e8 <_sbrk_r>
    406a:	adds	r3, r0, #1
    406c:	ldr	r3, [sp, #4]
    406e:	beq.w	42f0 <_malloc_r+0x51c>
    4072:	rsb	r2, fp, r0
    4076:	add	r2, r9
    4078:	orr.w	r2, r2, #1
    407c:	ldr	r1, [r3, #0]
    407e:	str.w	fp, [r7, #8]
    4082:	add	r1, r9
    4084:	cmp	r4, r7
    4086:	str.w	r2, [fp, #4]
    408a:	str	r1, [r3, #0]
    408c:	ldr.w	r9, [pc, #164]	; 4134 <_malloc_r+0x360>
    4090:	beq.n	40c0 <_malloc_r+0x2ec>
    4092:	cmp.w	r8, #15
    4096:	bls.w	4294 <_malloc_r+0x4c0>
    409a:	ldr	r2, [r4, #4]
    409c:	sub.w	r3, r8, #12
    40a0:	bic.w	r3, r3, #7
    40a4:	adds	r0, r4, r3
    40a6:	and.w	r2, r2, #1
    40aa:	mov.w	lr, #5
    40ae:	orrs	r2, r3
    40b0:	cmp	r3, #15
    40b2:	str	r2, [r4, #4]
    40b4:	str.w	lr, [r0, #4]
    40b8:	str.w	lr, [r0, #8]
    40bc:	bhi.w	42f8 <_malloc_r+0x524>
    40c0:	ldr	r3, [pc, #116]	; (4138 <_malloc_r+0x364>)
    40c2:	ldr	r4, [r7, #8]
    40c4:	ldr	r2, [r3, #0]
    40c6:	cmp	r1, r2
    40c8:	it	hi
    40ca:	strhi	r1, [r3, #0]
    40cc:	ldr	r3, [pc, #108]	; (413c <_malloc_r+0x368>)
    40ce:	ldr	r2, [r3, #0]
    40d0:	cmp	r1, r2
    40d2:	ldr	r2, [r4, #4]
    40d4:	it	hi
    40d6:	strhi	r1, [r3, #0]
    40d8:	bic.w	r2, r2, #3
    40dc:	cmp	r5, r2
    40de:	sub.w	r3, r2, r5
    40e2:	bhi.n	40e8 <_malloc_r+0x314>
    40e4:	cmp	r3, #15
    40e6:	bgt.n	40f2 <_malloc_r+0x31e>
    40e8:	mov	r0, r6
    40ea:	bl	43e4 <__malloc_unlock>
    40ee:	movs	r4, #0
    40f0:	b.n	3f64 <_malloc_r+0x190>
    40f2:	adds	r2, r4, r5
    40f4:	orr.w	r3, r3, #1
    40f8:	orr.w	r5, r5, #1
    40fc:	str	r5, [r4, #4]
    40fe:	mov	r0, r6
    4100:	str	r2, [r7, #8]
    4102:	str	r3, [r2, #4]
    4104:	bl	43e4 <__malloc_unlock>
    4108:	adds	r4, #8
    410a:	mov	r0, r4
    410c:	add	sp, #12
    410e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4112:	cmp	r3, #20
    4114:	bls.n	41fa <_malloc_r+0x426>
    4116:	cmp	r3, #84	; 0x54
    4118:	bhi.w	4264 <_malloc_r+0x490>
    411c:	lsrs	r0, r5, #12
    411e:	add.w	lr, r0, #111	; 0x6f
    4122:	mov.w	r3, lr, lsl #1
    4126:	adds	r0, #110	; 0x6e
    4128:	b.n	3e18 <_malloc_r+0x44>
    412a:	nop
    412c:	.word	0x1fff1184
    4130:	.word	0x1fff1a54
    4134:	.word	0x1fff1a58
    4138:	.word	0x1fff1a50
    413c:	.word	0x1fff1a4c
    4140:	.word	0x1fff1590
    4144:	lsrs	r2, r3, #9
    4146:	cmp	r2, #4
    4148:	bls.n	4208 <_malloc_r+0x434>
    414a:	cmp	r2, #20
    414c:	bhi.w	42b6 <_malloc_r+0x4e2>
    4150:	add.w	r1, r2, #92	; 0x5c
    4154:	lsls	r1, r1, #1
    4156:	adds	r2, #91	; 0x5b
    4158:	add.w	ip, r7, r1, lsl #2
    415c:	ldr.w	r1, [r7, r1, lsl #2]
    4160:	ldr.w	r8, [pc, #476]	; 4340 <_malloc_r+0x56c>
    4164:	sub.w	ip, ip, #8
    4168:	cmp	ip, r1
    416a:	beq.w	427e <_malloc_r+0x4aa>
    416e:	ldr	r2, [r1, #4]
    4170:	bic.w	r2, r2, #3
    4174:	cmp	r3, r2
    4176:	bcs.n	417e <_malloc_r+0x3aa>
    4178:	ldr	r1, [r1, #8]
    417a:	cmp	ip, r1
    417c:	bne.n	416e <_malloc_r+0x39a>
    417e:	ldr.w	ip, [r1, #12]
    4182:	ldr	r2, [r7, #4]
    4184:	str.w	ip, [r4, #12]
    4188:	str	r1, [r4, #8]
    418a:	str.w	r4, [ip, #8]
    418e:	str	r4, [r1, #12]
    4190:	b.n	3ea4 <_malloc_r+0xd0>
    4192:	adds	r3, r4, r5
    4194:	orr.w	r7, r2, #1
    4198:	orr.w	r5, r5, #1
    419c:	str	r5, [r4, #4]
    419e:	mov	r0, r6
    41a0:	str	r3, [r1, #20]
    41a2:	str	r3, [r1, #16]
    41a4:	str.w	lr, [r3, #12]
    41a8:	str.w	lr, [r3, #8]
    41ac:	str	r7, [r3, #4]
    41ae:	str	r2, [r3, r2]
    41b0:	adds	r4, #8
    41b2:	bl	43e4 <__malloc_unlock>
    41b6:	b.n	3f64 <_malloc_r+0x190>
    41b8:	ldr	r2, [r1, #4]
    41ba:	b.n	3ea4 <_malloc_r+0xd0>
    41bc:	add.w	r8, r8, #1
    41c0:	tst.w	r8, #3
    41c4:	add.w	ip, ip, #8
    41c8:	bne.w	3eca <_malloc_r+0xf6>
    41cc:	b.n	4230 <_malloc_r+0x45c>
    41ce:	ldr	r4, [r3, #12]
    41d0:	cmp	r3, r4
    41d2:	it	eq
    41d4:	addeq	r0, #2
    41d6:	beq.w	3e44 <_malloc_r+0x70>
    41da:	b.n	3f44 <_malloc_r+0x170>
    41dc:	add	r3, r1
    41de:	mov	r4, r1
    41e0:	ldr	r2, [r3, #4]
    41e2:	ldr	r1, [r1, #12]
    41e4:	ldr.w	r5, [r4, #8]!
    41e8:	orr.w	r2, r2, #1
    41ec:	str	r2, [r3, #4]
    41ee:	mov	r0, r6
    41f0:	str	r1, [r5, #12]
    41f2:	str	r5, [r1, #8]
    41f4:	bl	43e4 <__malloc_unlock>
    41f8:	b.n	3f64 <_malloc_r+0x190>
    41fa:	add.w	lr, r3, #92	; 0x5c
    41fe:	add.w	r0, r3, #91	; 0x5b
    4202:	mov.w	r3, lr, lsl #1
    4206:	b.n	3e18 <_malloc_r+0x44>
    4208:	lsrs	r2, r3, #6
    420a:	add.w	r1, r2, #57	; 0x39
    420e:	lsls	r1, r1, #1
    4210:	adds	r2, #56	; 0x38
    4212:	b.n	4158 <_malloc_r+0x384>
    4214:	cmp	r4, r7
    4216:	ldr	r3, [pc, #296]	; (4340 <_malloc_r+0x56c>)
    4218:	beq.w	401c <_malloc_r+0x248>
    421c:	ldr	r4, [r3, #8]
    421e:	ldr	r2, [r4, #4]
    4220:	bic.w	r2, r2, #3
    4224:	b.n	40dc <_malloc_r+0x308>
    4226:	ldr.w	r3, [r9], #-8
    422a:	cmp	r9, r3
    422c:	bne.w	4334 <_malloc_r+0x560>
    4230:	tst.w	r0, #3
    4234:	add.w	r0, r0, #4294967295
    4238:	bne.n	4226 <_malloc_r+0x452>
    423a:	ldr	r3, [r7, #4]
    423c:	bic.w	r3, r3, r4
    4240:	str	r3, [r7, #4]
    4242:	lsls	r4, r4, #1
    4244:	cmp	r4, r3
    4246:	bhi.w	3fc4 <_malloc_r+0x1f0>
    424a:	cmp	r4, #0
    424c:	beq.w	3fc4 <_malloc_r+0x1f0>
    4250:	tst	r4, r3
    4252:	mov	r0, r8
    4254:	bne.w	3ec2 <_malloc_r+0xee>
    4258:	lsls	r4, r4, #1
    425a:	tst	r4, r3
    425c:	add.w	r0, r0, #4
    4260:	beq.n	4258 <_malloc_r+0x484>
    4262:	b.n	3ec2 <_malloc_r+0xee>
    4264:	cmp.w	r3, #340	; 0x154
    4268:	bhi.n	429c <_malloc_r+0x4c8>
    426a:	lsrs	r0, r5, #15
    426c:	add.w	lr, r0, #120	; 0x78
    4270:	mov.w	r3, lr, lsl #1
    4274:	adds	r0, #119	; 0x77
    4276:	b.n	3e18 <_malloc_r+0x44>
    4278:	mov.w	r1, #4096	; 0x1000
    427c:	b.n	4056 <_malloc_r+0x282>
    427e:	movs	r1, #1
    4280:	ldr.w	r3, [r8, #4]
    4284:	asrs	r2, r2, #2
    4286:	lsl.w	r2, r1, r2
    428a:	orrs	r2, r3
    428c:	str.w	r2, [r8, #4]
    4290:	mov	r1, ip
    4292:	b.n	4184 <_malloc_r+0x3b0>
    4294:	movs	r3, #1
    4296:	str.w	r3, [fp, #4]
    429a:	b.n	40e8 <_malloc_r+0x314>
    429c:	movw	r2, #1364	; 0x554
    42a0:	cmp	r3, r2
    42a2:	bhi.n	42e6 <_malloc_r+0x512>
    42a4:	lsrs	r0, r5, #18
    42a6:	add.w	lr, r0, #125	; 0x7d
    42aa:	mov.w	r3, lr, lsl #1
    42ae:	adds	r0, #124	; 0x7c
    42b0:	b.n	3e18 <_malloc_r+0x44>
    42b2:	adds	r2, #16
    42b4:	b.n	4000 <_malloc_r+0x22c>
    42b6:	cmp	r2, #84	; 0x54
    42b8:	bhi.n	4308 <_malloc_r+0x534>
    42ba:	lsrs	r2, r3, #12
    42bc:	add.w	r1, r2, #111	; 0x6f
    42c0:	lsls	r1, r1, #1
    42c2:	adds	r2, #110	; 0x6e
    42c4:	b.n	4158 <_malloc_r+0x384>
    42c6:	ldr	r4, [r7, #8]
    42c8:	ldr	r2, [r4, #4]
    42ca:	bic.w	r2, r2, #3
    42ce:	b.n	40dc <_malloc_r+0x308>
    42d0:	ubfx	r0, sl, #0, #12
    42d4:	cmp	r0, #0
    42d6:	bne.w	402a <_malloc_r+0x256>
    42da:	add	r2, r8
    42dc:	ldr	r3, [r7, #8]
    42de:	orr.w	r2, r2, #1
    42e2:	str	r2, [r3, #4]
    42e4:	b.n	40c0 <_malloc_r+0x2ec>
    42e6:	movs	r3, #254	; 0xfe
    42e8:	mov.w	lr, #127	; 0x7f
    42ec:	movs	r0, #126	; 0x7e
    42ee:	b.n	3e18 <_malloc_r+0x44>
    42f0:	movs	r2, #1
    42f2:	mov.w	r9, #0
    42f6:	b.n	407c <_malloc_r+0x2a8>
    42f8:	add.w	r1, r4, #8
    42fc:	mov	r0, r6
    42fe:	bl	44f0 <_free_r>
    4302:	ldr.w	r1, [r9]
    4306:	b.n	40c0 <_malloc_r+0x2ec>
    4308:	cmp.w	r2, #340	; 0x154
    430c:	bhi.n	431a <_malloc_r+0x546>
    430e:	lsrs	r2, r3, #15
    4310:	add.w	r1, r2, #120	; 0x78
    4314:	lsls	r1, r1, #1
    4316:	adds	r2, #119	; 0x77
    4318:	b.n	4158 <_malloc_r+0x384>
    431a:	movw	r1, #1364	; 0x554
    431e:	cmp	r2, r1
    4320:	bhi.n	432e <_malloc_r+0x55a>
    4322:	lsrs	r2, r3, #18
    4324:	add.w	r1, r2, #125	; 0x7d
    4328:	lsls	r1, r1, #1
    432a:	adds	r2, #124	; 0x7c
    432c:	b.n	4158 <_malloc_r+0x384>
    432e:	movs	r1, #254	; 0xfe
    4330:	movs	r2, #126	; 0x7e
    4332:	b.n	4158 <_malloc_r+0x384>
    4334:	ldr	r3, [r7, #4]
    4336:	b.n	4242 <_malloc_r+0x46e>
    4338:	lsrs	r0, r5, #3
    433a:	adds	r3, r0, #1
    433c:	lsls	r3, r3, #1
    433e:	b.n	3f32 <_malloc_r+0x15e>
    4340:	.word	0x1fff1184

00004344 <memset>:
    4344:	push	{r4, r5, r6}
    4346:	lsls	r4, r0, #30
    4348:	beq.n	43d8 <memset+0x94>
    434a:	subs	r4, r2, #1
    434c:	cmp	r2, #0
    434e:	beq.n	43d4 <memset+0x90>
    4350:	uxtb	r5, r1
    4352:	mov	r3, r0
    4354:	b.n	435c <memset+0x18>
    4356:	subs	r2, r4, #1
    4358:	cbz	r4, 43d4 <memset+0x90>
    435a:	mov	r4, r2
    435c:	strb.w	r5, [r3], #1
    4360:	lsls	r2, r3, #30
    4362:	bne.n	4356 <memset+0x12>
    4364:	cmp	r4, #3
    4366:	bls.n	43c6 <memset+0x82>
    4368:	uxtb	r5, r1
    436a:	orr.w	r5, r5, r5, lsl #8
    436e:	cmp	r4, #15
    4370:	orr.w	r5, r5, r5, lsl #16
    4374:	bls.n	43aa <memset+0x66>
    4376:	add.w	r2, r3, #16
    437a:	mov	r6, r4
    437c:	subs	r6, #16
    437e:	cmp	r6, #15
    4380:	str.w	r5, [r2, #-16]
    4384:	str.w	r5, [r2, #-12]
    4388:	str.w	r5, [r2, #-8]
    438c:	str.w	r5, [r2, #-4]
    4390:	add.w	r2, r2, #16
    4394:	bhi.n	437c <memset+0x38>
    4396:	sub.w	r2, r4, #16
    439a:	bic.w	r2, r2, #15
    439e:	and.w	r4, r4, #15
    43a2:	adds	r2, #16
    43a4:	cmp	r4, #3
    43a6:	add	r3, r2
    43a8:	bls.n	43c6 <memset+0x82>
    43aa:	mov	r6, r3
    43ac:	mov	r2, r4
    43ae:	subs	r2, #4
    43b0:	cmp	r2, #3
    43b2:	str.w	r5, [r6], #4
    43b6:	bhi.n	43ae <memset+0x6a>
    43b8:	subs	r2, r4, #4
    43ba:	bic.w	r2, r2, #3
    43be:	adds	r2, #4
    43c0:	add	r3, r2
    43c2:	and.w	r4, r4, #3
    43c6:	cbz	r4, 43d4 <memset+0x90>
    43c8:	uxtb	r1, r1
    43ca:	add	r4, r3
    43cc:	strb.w	r1, [r3], #1
    43d0:	cmp	r3, r4
    43d2:	bne.n	43cc <memset+0x88>
    43d4:	pop	{r4, r5, r6}
    43d6:	bx	lr
    43d8:	mov	r4, r2
    43da:	mov	r3, r0
    43dc:	b.n	4364 <memset+0x20>
    43de:	nop

000043e0 <__malloc_lock>:
    43e0:	bx	lr
    43e2:	nop

000043e4 <__malloc_unlock>:
    43e4:	bx	lr
    43e6:	nop

000043e8 <_sbrk_r>:
    43e8:	push	{r3, r4, r5, lr}
    43ea:	ldr	r4, [pc, #28]	; (4408 <_sbrk_r+0x20>)
    43ec:	movs	r3, #0
    43ee:	mov	r5, r0
    43f0:	mov	r0, r1
    43f2:	str	r3, [r4, #0]
    43f4:	bl	36e0 <_sbrk>
    43f8:	adds	r3, r0, #1
    43fa:	beq.n	43fe <_sbrk_r+0x16>
    43fc:	pop	{r3, r4, r5, pc}
    43fe:	ldr	r3, [r4, #0]
    4400:	cmp	r3, #0
    4402:	beq.n	43fc <_sbrk_r+0x14>
    4404:	str	r3, [r5, #0]
    4406:	pop	{r3, r4, r5, pc}
    4408:	.word	0x1fff1bc4

0000440c <register_fini>:
    440c:	ldr	r3, [pc, #8]	; (4418 <register_fini+0xc>)
    440e:	cbz	r3, 4416 <register_fini+0xa>
    4410:	ldr	r0, [pc, #8]	; (441c <register_fini+0x10>)
    4412:	b.w	4420 <atexit>
    4416:	bx	lr
    4418:	.word	0x00000000
    441c:	.word	0x0000442d

00004420 <atexit>:
    4420:	movs	r3, #0
    4422:	mov	r1, r0
    4424:	mov	r2, r3
    4426:	mov	r0, r3
    4428:	b.w	46c0 <__register_exitproc>

0000442c <__libc_fini_array>:
    442c:	push	{r3, r4, r5, lr}
    442e:	ldr	r5, [pc, #28]	; (444c <__libc_fini_array+0x20>)
    4430:	ldr	r4, [pc, #28]	; (4450 <__libc_fini_array+0x24>)
    4432:	subs	r4, r5, r4
    4434:	asrs	r4, r4, #2
    4436:	beq.n	4444 <__libc_fini_array+0x18>
    4438:	subs	r4, #1
    443a:	ldr.w	r3, [r5, #-4]!
    443e:	blx	r3
    4440:	cmp	r4, #0
    4442:	bne.n	4438 <__libc_fini_array+0xc>
    4444:	ldmia.w	sp!, {r3, r4, r5, lr}
    4448:	b.w	4b4c <__init_array_end>
	...

00004454 <_malloc_trim_r>:
    4454:	push	{r3, r4, r5, r6, r7, lr}
    4456:	ldr	r7, [pc, #140]	; (44e4 <_malloc_trim_r+0x90>)
    4458:	mov	r4, r1
    445a:	mov	r6, r0
    445c:	bl	43e0 <__malloc_lock>
    4460:	ldr	r3, [r7, #8]
    4462:	ldr	r5, [r3, #4]
    4464:	bic.w	r5, r5, #3
    4468:	subs	r1, r5, r4
    446a:	addw	r1, r1, #4079	; 0xfef
    446e:	bic.w	r1, r1, #4080	; 0xff0
    4472:	bic.w	r1, r1, #15
    4476:	sub.w	r4, r1, #4096	; 0x1000
    447a:	cmp.w	r4, #4096	; 0x1000
    447e:	blt.n	4490 <_malloc_trim_r+0x3c>
    4480:	movs	r1, #0
    4482:	mov	r0, r6
    4484:	bl	43e8 <_sbrk_r>
    4488:	ldr	r3, [r7, #8]
    448a:	add	r3, r5
    448c:	cmp	r0, r3
    448e:	beq.n	449a <_malloc_trim_r+0x46>
    4490:	mov	r0, r6
    4492:	bl	43e4 <__malloc_unlock>
    4496:	movs	r0, #0
    4498:	pop	{r3, r4, r5, r6, r7, pc}
    449a:	negs	r1, r4
    449c:	mov	r0, r6
    449e:	bl	43e8 <_sbrk_r>
    44a2:	adds	r0, #1
    44a4:	beq.n	44c2 <_malloc_trim_r+0x6e>
    44a6:	ldr	r3, [pc, #64]	; (44e8 <_malloc_trim_r+0x94>)
    44a8:	ldr	r2, [r7, #8]
    44aa:	ldr	r1, [r3, #0]
    44ac:	subs	r5, r5, r4
    44ae:	orr.w	r5, r5, #1
    44b2:	mov	r0, r6
    44b4:	subs	r1, r1, r4
    44b6:	str	r5, [r2, #4]
    44b8:	str	r1, [r3, #0]
    44ba:	bl	43e4 <__malloc_unlock>
    44be:	movs	r0, #1
    44c0:	pop	{r3, r4, r5, r6, r7, pc}
    44c2:	movs	r1, #0
    44c4:	mov	r0, r6
    44c6:	bl	43e8 <_sbrk_r>
    44ca:	ldr	r2, [r7, #8]
    44cc:	subs	r3, r0, r2
    44ce:	cmp	r3, #15
    44d0:	ble.n	4490 <_malloc_trim_r+0x3c>
    44d2:	ldr	r4, [pc, #24]	; (44ec <_malloc_trim_r+0x98>)
    44d4:	ldr	r1, [pc, #16]	; (44e8 <_malloc_trim_r+0x94>)
    44d6:	ldr	r4, [r4, #0]
    44d8:	orr.w	r3, r3, #1
    44dc:	subs	r0, r0, r4
    44de:	str	r3, [r2, #4]
    44e0:	str	r0, [r1, #0]
    44e2:	b.n	4490 <_malloc_trim_r+0x3c>
    44e4:	.word	0x1fff1184
    44e8:	.word	0x1fff1a58
    44ec:	.word	0x1fff1590

000044f0 <_free_r>:
    44f0:	cmp	r1, #0
    44f2:	beq.n	4580 <_free_r+0x90>
    44f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44f8:	mov	r5, r1
    44fa:	mov	r8, r0
    44fc:	bl	43e0 <__malloc_lock>
    4500:	ldr.w	r7, [r5, #-4]
    4504:	ldr	r1, [pc, #424]	; (46b0 <_free_r+0x1c0>)
    4506:	bic.w	r3, r7, #1
    450a:	sub.w	r4, r5, #8
    450e:	adds	r2, r4, r3
    4510:	ldr	r6, [r1, #8]
    4512:	ldr	r0, [r2, #4]
    4514:	cmp	r2, r6
    4516:	bic.w	r0, r0, #3
    451a:	beq.n	45e2 <_free_r+0xf2>
    451c:	lsls	r6, r7, #31
    451e:	str	r0, [r2, #4]
    4520:	bmi.n	453a <_free_r+0x4a>
    4522:	ldr.w	r7, [r5, #-8]
    4526:	subs	r4, r4, r7
    4528:	add.w	lr, r1, #8
    452c:	ldr	r5, [r4, #8]
    452e:	cmp	r5, lr
    4530:	add	r3, r7
    4532:	beq.n	4614 <_free_r+0x124>
    4534:	ldr	r7, [r4, #12]
    4536:	str	r7, [r5, #12]
    4538:	str	r5, [r7, #8]
    453a:	adds	r5, r2, r0
    453c:	ldr	r5, [r5, #4]
    453e:	lsls	r5, r5, #31
    4540:	bpl.n	45c8 <_free_r+0xd8>
    4542:	orr.w	r2, r3, #1
    4546:	str	r2, [r4, #4]
    4548:	str	r3, [r4, r3]
    454a:	cmp.w	r3, #512	; 0x200
    454e:	bcs.n	4582 <_free_r+0x92>
    4550:	lsrs	r3, r3, #3
    4552:	adds	r2, r3, #1
    4554:	ldr	r5, [r1, #4]
    4556:	ldr.w	r7, [r1, r2, lsl #3]
    455a:	str	r7, [r4, #8]
    455c:	movs	r0, #1
    455e:	asrs	r3, r3, #2
    4560:	lsl.w	r3, r0, r3
    4564:	add.w	r0, r1, r2, lsl #3
    4568:	orrs	r5, r3
    456a:	subs	r0, #8
    456c:	str	r0, [r4, #12]
    456e:	str	r5, [r1, #4]
    4570:	str.w	r4, [r1, r2, lsl #3]
    4574:	str	r4, [r7, #12]
    4576:	mov	r0, r8
    4578:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    457c:	b.w	43e4 <__malloc_unlock>
    4580:	bx	lr
    4582:	lsrs	r2, r3, #9
    4584:	cmp	r2, #4
    4586:	bhi.n	4630 <_free_r+0x140>
    4588:	lsrs	r2, r3, #6
    458a:	add.w	r7, r2, #57	; 0x39
    458e:	lsls	r7, r7, #1
    4590:	add.w	r5, r2, #56	; 0x38
    4594:	add.w	r0, r1, r7, lsl #2
    4598:	ldr.w	r2, [r1, r7, lsl #2]
    459c:	ldr	r1, [pc, #272]	; (46b0 <_free_r+0x1c0>)
    459e:	subs	r0, #8
    45a0:	cmp	r0, r2
    45a2:	beq.n	4640 <_free_r+0x150>
    45a4:	ldr	r1, [r2, #4]
    45a6:	bic.w	r1, r1, #3
    45aa:	cmp	r3, r1
    45ac:	bcs.n	45b4 <_free_r+0xc4>
    45ae:	ldr	r2, [r2, #8]
    45b0:	cmp	r0, r2
    45b2:	bne.n	45a4 <_free_r+0xb4>
    45b4:	ldr	r0, [r2, #12]
    45b6:	str	r0, [r4, #12]
    45b8:	str	r2, [r4, #8]
    45ba:	str	r4, [r0, #8]
    45bc:	str	r4, [r2, #12]
    45be:	mov	r0, r8
    45c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    45c4:	b.w	43e4 <__malloc_unlock>
    45c8:	ldr	r5, [r2, #8]
    45ca:	ldr	r7, [pc, #232]	; (46b4 <_free_r+0x1c4>)
    45cc:	cmp	r5, r7
    45ce:	add	r3, r0
    45d0:	beq.n	4652 <_free_r+0x162>
    45d2:	ldr	r0, [r2, #12]
    45d4:	str	r0, [r5, #12]
    45d6:	orr.w	r2, r3, #1
    45da:	str	r5, [r0, #8]
    45dc:	str	r2, [r4, #4]
    45de:	str	r3, [r4, r3]
    45e0:	b.n	454a <_free_r+0x5a>
    45e2:	lsls	r7, r7, #31
    45e4:	add	r3, r0
    45e6:	bmi.n	45f8 <_free_r+0x108>
    45e8:	ldr.w	r2, [r5, #-8]
    45ec:	subs	r4, r4, r2
    45ee:	add	r3, r2
    45f0:	ldr	r0, [r4, #8]
    45f2:	ldr	r2, [r4, #12]
    45f4:	str	r2, [r0, #12]
    45f6:	str	r0, [r2, #8]
    45f8:	ldr	r2, [pc, #188]	; (46b8 <_free_r+0x1c8>)
    45fa:	ldr	r2, [r2, #0]
    45fc:	orr.w	r0, r3, #1
    4600:	cmp	r3, r2
    4602:	str	r0, [r4, #4]
    4604:	str	r4, [r1, #8]
    4606:	bcc.n	4576 <_free_r+0x86>
    4608:	ldr	r3, [pc, #176]	; (46bc <_free_r+0x1cc>)
    460a:	mov	r0, r8
    460c:	ldr	r1, [r3, #0]
    460e:	bl	4454 <_malloc_trim_r>
    4612:	b.n	4576 <_free_r+0x86>
    4614:	adds	r1, r2, r0
    4616:	ldr	r1, [r1, #4]
    4618:	lsls	r1, r1, #31
    461a:	bmi.n	46a6 <_free_r+0x1b6>
    461c:	ldr	r1, [r2, #8]
    461e:	ldr	r2, [r2, #12]
    4620:	str	r2, [r1, #12]
    4622:	add	r3, r0
    4624:	orr.w	r0, r3, #1
    4628:	str	r1, [r2, #8]
    462a:	str	r0, [r4, #4]
    462c:	str	r3, [r4, r3]
    462e:	b.n	4576 <_free_r+0x86>
    4630:	cmp	r2, #20
    4632:	bhi.n	4664 <_free_r+0x174>
    4634:	add.w	r7, r2, #92	; 0x5c
    4638:	lsls	r7, r7, #1
    463a:	add.w	r5, r2, #91	; 0x5b
    463e:	b.n	4594 <_free_r+0xa4>
    4640:	asrs	r2, r5, #2
    4642:	ldr	r3, [r1, #4]
    4644:	movs	r5, #1
    4646:	lsl.w	r2, r5, r2
    464a:	orrs	r3, r2
    464c:	str	r3, [r1, #4]
    464e:	mov	r2, r0
    4650:	b.n	45b6 <_free_r+0xc6>
    4652:	orr.w	r2, r3, #1
    4656:	str	r4, [r1, #20]
    4658:	str	r4, [r1, #16]
    465a:	str	r5, [r4, #12]
    465c:	str	r5, [r4, #8]
    465e:	str	r2, [r4, #4]
    4660:	str	r3, [r4, r3]
    4662:	b.n	4576 <_free_r+0x86>
    4664:	cmp	r2, #84	; 0x54
    4666:	bhi.n	4676 <_free_r+0x186>
    4668:	lsrs	r2, r3, #12
    466a:	add.w	r7, r2, #111	; 0x6f
    466e:	lsls	r7, r7, #1
    4670:	add.w	r5, r2, #110	; 0x6e
    4674:	b.n	4594 <_free_r+0xa4>
    4676:	cmp.w	r2, #340	; 0x154
    467a:	bhi.n	468a <_free_r+0x19a>
    467c:	lsrs	r2, r3, #15
    467e:	add.w	r7, r2, #120	; 0x78
    4682:	lsls	r7, r7, #1
    4684:	add.w	r5, r2, #119	; 0x77
    4688:	b.n	4594 <_free_r+0xa4>
    468a:	movw	r0, #1364	; 0x554
    468e:	cmp	r2, r0
    4690:	bhi.n	46a0 <_free_r+0x1b0>
    4692:	lsrs	r2, r3, #18
    4694:	add.w	r7, r2, #125	; 0x7d
    4698:	lsls	r7, r7, #1
    469a:	add.w	r5, r2, #124	; 0x7c
    469e:	b.n	4594 <_free_r+0xa4>
    46a0:	movs	r7, #254	; 0xfe
    46a2:	movs	r5, #126	; 0x7e
    46a4:	b.n	4594 <_free_r+0xa4>
    46a6:	orr.w	r2, r3, #1
    46aa:	str	r2, [r4, #4]
    46ac:	str	r3, [r4, r3]
    46ae:	b.n	4576 <_free_r+0x86>
    46b0:	.word	0x1fff1184
    46b4:	.word	0x1fff118c
    46b8:	.word	0x1fff158c
    46bc:	.word	0x1fff1a54

000046c0 <__register_exitproc>:
    46c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    46c4:	ldr	r4, [pc, #148]	; (475c <__register_exitproc+0x9c>)
    46c6:	ldr	r5, [r4, #0]
    46c8:	ldr.w	r4, [r5, #328]	; 0x148
    46cc:	mov	r6, r0
    46ce:	mov	r8, r1
    46d0:	mov	sl, r2
    46d2:	mov	r9, r3
    46d4:	cbz	r4, 4748 <__register_exitproc+0x88>
    46d6:	ldr	r0, [r4, #4]
    46d8:	cmp	r0, #31
    46da:	bgt.n	470c <__register_exitproc+0x4c>
    46dc:	adds	r3, r0, #1
    46de:	cbz	r6, 46fe <__register_exitproc+0x3e>
    46e0:	add.w	r5, r4, r0, lsl #2
    46e4:	movs	r2, #1
    46e6:	str.w	sl, [r5, #136]	; 0x88
    46ea:	ldr.w	r1, [r4, #392]	; 0x188
    46ee:	lsls	r2, r0
    46f0:	orrs	r1, r2
    46f2:	cmp	r6, #2
    46f4:	str.w	r1, [r4, #392]	; 0x188
    46f8:	str.w	r9, [r5, #264]	; 0x108
    46fc:	beq.n	473c <__register_exitproc+0x7c>
    46fe:	adds	r0, #2
    4700:	str	r3, [r4, #4]
    4702:	str.w	r8, [r4, r0, lsl #2]
    4706:	movs	r0, #0
    4708:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    470c:	ldr	r3, [pc, #80]	; (4760 <__register_exitproc+0xa0>)
    470e:	cbz	r3, 4752 <__register_exitproc+0x92>
    4710:	mov.w	r0, #400	; 0x190
    4714:	bl	3dc4 <malloc>
    4718:	mov	r4, r0
    471a:	cbz	r0, 4752 <__register_exitproc+0x92>
    471c:	ldr.w	r3, [r5, #328]	; 0x148
    4720:	movs	r7, #0
    4722:	stmia.w	r0, {r3, r7}
    4726:	str.w	r4, [r5, #328]	; 0x148
    472a:	mov	r0, r7
    472c:	movs	r3, #1
    472e:	str.w	r7, [r4, #392]	; 0x188
    4732:	str.w	r7, [r4, #396]	; 0x18c
    4736:	cmp	r6, #0
    4738:	beq.n	46fe <__register_exitproc+0x3e>
    473a:	b.n	46e0 <__register_exitproc+0x20>
    473c:	ldr.w	r1, [r4, #396]	; 0x18c
    4740:	orrs	r2, r1
    4742:	str.w	r2, [r4, #396]	; 0x18c
    4746:	b.n	46fe <__register_exitproc+0x3e>
    4748:	add.w	r4, r5, #332	; 0x14c
    474c:	str.w	r4, [r5, #328]	; 0x148
    4750:	b.n	46d6 <__register_exitproc+0x16>
    4752:	mov.w	r0, #4294967295
    4756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    475a:	nop
    475c:	.word	0x00004b30
    4760:	.word	0x00003dc5
    4764:	.word	0x00000024
    4768:	.word	0x00000029
    476c:	.word	0x0000002b
    4770:	.word	0x0000002d
    4774:	.word	0x00000032
    4778:	.word	0x00000034
    477c:	.word	0x00000026
    4780:	.word	0x0000002d
    4784:	.word	0x0000002f
    4788:	.word	0x52415453
    478c:	.word	0x00000054
    4790:	.word	0x504f5453
    4794:	.word	0xffffff00
    4798:	.word	0x73206f6e
    479c:	.word	0x73706574
    47a0:	.word	0x74657920
    47a4:	.word	0x00000000
    47a8:	.word	0x64616f6c
    47ac:	.word	0x20676e69
    47b0:	.word	0x6d6f7266
    47b4:	.word	0x6d656d20
    47b8:	.word	0x0079726f
    47bc:	.word	0x79706f63
    47c0:	.word	0x20676e69
    47c4:	.word	0x20646e61
    47c8:	.word	0x74746573
    47cc:	.word	0x20676e69
    47d0:	.word	0x6d206e69
    47d4:	.word	0x726f6d65
    47d8:	.word	0x00000079
    47dc:	.word	0x79706f63
    47e0:	.word	0x20676e69
    47e4:	.word	0x796c6e6f
    47e8:	.word	0x6f726620
    47ec:	.word	0x656d206d
    47f0:	.word	0x79726f6d
    47f4:	.word	0x00000000
    47f8:	.word	0x74746553
    47fc:	.word	0x20676e69
    4800:	.word	0x70657473
    4804:	.word	0x6f662073
    4808:	.word	0x64652072
    480c:	.word	0x6e697469
    4810:	.word	0xffff0067
    4814:	.word	0x43544950
    4818:	.word	0x00000048
    481c:	.word	0x4f4c4556
    4820:	.word	0x59544943
    4824:	.word	0x00000000
    4828:	.word	0x45544f4e
    482c:	.word	0x474e454c
    4830:	.word	0x00004854
    4834:	.word	0x4956414e
    4838:	.word	0x45544147
    483c:	.word	0x00000000
    4840:	.word	0x59504f43
    4844:	.word	0x00000000
    4848:	.word	0x4e414843
    484c:	.word	0x00004543
    4850:	.word	0x4e495753
    4854:	.word	0x00000047
    4858:	.word	0x49544f4d
    485c:	.word	0x00004e4f

00004860 <pin2sc1a>:
    4860:	................
    4870:	................
    4880:	................
    4890:	................
    48a0:	........

000048a8 <digital_pin_to_info_PGM>:
    48a8:	@..C@..@D..CD..@
    48b8:	...C...@0..C0..@
    48c8:	4..C4..@...C...@
    48d8:	...C...@...C...@
    48e8:	...C...@...C...@
    48f8:	...C...@...C...@
    4908:	...C...@...C...@
    4918:	...C...@...C...@
    4928:	...C...@...C...@
    4938:	...C...@...C...@
    4948:	...C...@...C...@
    4958:	...C...@...C...@
    4968:	h .Ch..@...C...@
    4978:	8..C8..@<..C<..@
    4988:	@..C@..@H..CH..@
    4998:	L..CL..@(..C(..@
    49a8:	,..C,..@` .C`..@
    49b8:	d .Cd..@ ..C ..@
    49c8:	$..C$..@(..C(..@
    49d8:	,..C,..@D..CD..@
    49e8:	p..Cp..@t..Ct..@
    49f8:	h..Ch..@P..CP..@
    4a08:	X..CX..@\..C\..@
    4a18:	T..CT..@ ..C ..@
    4a28:	$..C$..@...C...@
    4a38:	...C...@8..C8..@
    4a48:	4..C4..@0..C0..@
    4a58:	<..C<..@,..C,..@
    4a68:	( .C(..@, .C,..@
    4a78:	. .C...@. .C...@
    4a88:	. .C...@. .C...@
    4a98:	. .C...@. .C...@

00004aa8 <vtable for usb_serial_class>:
	...
    4ab0:	.2...2...2...2..
    4ac0:	.1...1...1...1..
    4ad0:	....

00004ad4 <usb_endpoint_config_table>:
    4ad4:	........

00004adc <usb_descriptor_list>:
    4adc:	....\...........
    4aec:	............8...
    4afc:	........p.......
    4b0c:	.... ...........
    4b1c:	<...............
    4b2c:	....

00004b30 <_global_impure_ptr>:
    4b30:	X...

00004b34 <_init>:
    4b34:	push	{r3, r4, r5, r6, r7, lr}
    4b36:	nop
    4b38:	pop	{r3, r4, r5, r6, r7}
    4b3a:	pop	{r3}
    4b3c:	mov	lr, r3
    4b3e:	bx	lr

00004b40 <__init_array_start>:
    4b40:	.word	0x0000440d

00004b44 <__frame_dummy_init_array_entry>:
    4b44:	5.......

Disassembly of section .fini:

00004b4c <_fini>:
    4b4c:	push	{r3, r4, r5, r6, r7, lr}
    4b4e:	nop
